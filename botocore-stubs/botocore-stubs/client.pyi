import datetime

from mypy_extensions import TypedDict
from typing import Optional, AnyStr, Dict, List


class ACM(BaseClient):
    def add_tags_to_certificate(self, *,
        CertificateArn: str,
        Tags: List[ACMTag]
    ): ...

    def delete_certificate(self, *,
        CertificateArn: str
    ): ...

    def describe_certificate(self, *,
        CertificateArn: str
    ) -> ACMDescribeCertificateResponse: ...

    def export_certificate(self, *,
        CertificateArn: str,
        Passphrase: bytes
    ) -> ACMExportCertificateResponse: ...

    def get_certificate(self, *,
        CertificateArn: str
    ) -> ACMGetCertificateResponse: ...

    def import_certificate(self, *,
        Certificate: bytes,
        PrivateKey: bytes,
        CertificateArn: str = ...,
        CertificateChain: bytes = ...
    ) -> ACMImportCertificateResponse: ...

    def list_certificates(self, *,
        CertificateStatuses: List[str] = ...,
        Includes: ACMFilters = ...,
        NextToken: str = ...,
        MaxItems: int = ...
    ) -> ACMListCertificatesResponse: ...

    def list_tags_for_certificate(self, *,
        CertificateArn: str
    ) -> ACMListTagsForCertificateResponse: ...

    def remove_tags_from_certificate(self, *,
        CertificateArn: str,
        Tags: List[ACMTag]
    ): ...

    def renew_certificate(self, *,
        CertificateArn: str
    ): ...

    def request_certificate(self, *,
        DomainName: str,
        ValidationMethod: str = ...,
        SubjectAlternativeNames: List[str] = ...,
        IdempotencyToken: str = ...,
        DomainValidationOptions: List[ACMDomainValidationOption] = ...,
        Options: ACMCertificateOptions = ...,
        CertificateAuthorityArn: str = ...
    ) -> ACMRequestCertificateResponse: ...

    def resend_validation_email(self, *,
        CertificateArn: str,
        Domain: str,
        ValidationDomain: str
    ): ...

    def update_certificate_options(self, *,
        CertificateArn: str,
        Options: ACMCertificateOptions
    ): ...


ACMTag = TypedDict(
    'ACMTag', {
        'TagKey': str,
        'TagValue': Optional[str],
    }
)


ACMResourceRecord = TypedDict(
    'ACMResourceRecord', {
        'String': str,
        'RecordType': str,
        'String': str,
    }
)


ACMDomainValidation = TypedDict(
    'ACMDomainValidation', {
        'DomainNameString': str,
        'ValidationEmailList': Optional[List[str]],
        'DomainNameString': Optional[str],
        'DomainStatus': Optional[str],
        'ResourceRecord': Optional[ACMResourceRecord],
        'ValidationMethod': Optional[str],
    }
)


ACMRenewalSummary = TypedDict(
    'ACMRenewalSummary', {
        'RenewalStatus': str,
        'DomainValidationList': List[ACMDomainValidation],
        'TStamp': datetime.datetime,
        'FailureReason': Optional[str],
    }
)


ACMKeyUsage = TypedDict(
    'ACMKeyUsage', {
        'KeyUsageName': Optional[str],
    }
)


ACMExtendedKeyUsage = TypedDict(
    'ACMExtendedKeyUsage', {
        'ExtendedKeyUsageName': Optional[str],
        'String': Optional[str],
    }
)


ACMCertificateOptions = TypedDict(
    'ACMCertificateOptions', {
        'CertificateTransparencyLoggingPreference': Optional[str],
    }
)


ACMCertificateDetail = TypedDict(
    'ACMCertificateDetail', {
        'Arn': Optional[str],
        'DomainNameString': Optional[str],
        'DomainList': Optional[List[str]],
        'DomainValidationList': Optional[List[ACMDomainValidation]],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'TStamp': Optional[datetime.datetime],
        'TStamp': Optional[datetime.datetime],
        'CertificateStatus': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'RevocationReason': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'TStamp': Optional[datetime.datetime],
        'KeyAlgorithm': Optional[str],
        'String': Optional[str],
        'InUseList': Optional[List[str]],
        'FailureReason': Optional[str],
        'CertificateType': Optional[str],
        'RenewalSummary': Optional[ACMRenewalSummary],
        'KeyUsageList': Optional[List[ACMKeyUsage]],
        'ExtendedKeyUsageList': Optional[List[ACMExtendedKeyUsage]],
        'Arn': Optional[str],
        'RenewalEligibility': Optional[str],
        'CertificateOptions': Optional[ACMCertificateOptions],
    }
)


ACMDescribeCertificateResponse = TypedDict(
    'ACMDescribeCertificateResponse', {
        'CertificateDetail': Optional[ACMCertificateDetail],
    }
)


ACMExportCertificateResponse = TypedDict(
    'ACMExportCertificateResponse', {
        'CertificateBody': Optional[str],
        'CertificateChain': Optional[str],
        'PrivateKey': Optional[str],
    }
)


ACMGetCertificateResponse = TypedDict(
    'ACMGetCertificateResponse', {
        'CertificateBody': Optional[str],
        'CertificateChain': Optional[str],
    }
)


ACMImportCertificateResponse = TypedDict(
    'ACMImportCertificateResponse', {
        'Arn': Optional[str],
    }
)


ACMFilters = TypedDict(
    'ACMFilters', {
        'ExtendedKeyUsageFilterList': Optional[List[str]],
        'KeyUsageFilterList': Optional[List[str]],
        'KeyAlgorithmList': Optional[List[str]],
    }
)


ACMCertificateSummary = TypedDict(
    'ACMCertificateSummary', {
        'Arn': Optional[str],
        'DomainNameString': Optional[str],
    }
)


ACMListCertificatesResponse = TypedDict(
    'ACMListCertificatesResponse', {
        'NextToken': Optional[str],
        'CertificateSummaryList': Optional[List[ACMCertificateSummary]],
    }
)


ACMListTagsForCertificateResponse = TypedDict(
    'ACMListTagsForCertificateResponse', {
        'TagList': Optional[List[ACMTag]],
    }
)


ACMDomainValidationOption = TypedDict(
    'ACMDomainValidationOption', {
        'DomainNameString': str,
        'DomainNameString': str,
    }
)


ACMRequestCertificateResponse = TypedDict(
    'ACMRequestCertificateResponse', {
        'Arn': Optional[str],
    }
)


class ACMPCA(BaseClient):
    def create_certificate_authority(self, *,
        CertificateAuthorityConfiguration: ACMPCACertificateAuthorityConfiguration,
        CertificateAuthorityType: str,
        RevocationConfiguration: ACMPCARevocationConfiguration = ...,
        IdempotencyToken: str = ...,
        Tags: List[ACMPCATag] = ...
    ) -> ACMPCACreateCertificateAuthorityResponse: ...

    def create_certificate_authority_audit_report(self, *,
        CertificateAuthorityArn: str,
        S3BucketName: str,
        AuditReportResponseFormat: str
    ) -> ACMPCACreateCertificateAuthorityAuditReportResponse: ...

    def create_permission(self, *,
        CertificateAuthorityArn: str,
        Principal: str,
        Actions: List[str],
        SourceAccount: str = ...
    ): ...

    def delete_certificate_authority(self, *,
        CertificateAuthorityArn: str,
        PermanentDeletionTimeInDays: int = ...
    ): ...

    def delete_permission(self, *,
        CertificateAuthorityArn: str,
        Principal: str,
        SourceAccount: str = ...
    ): ...

    def describe_certificate_authority(self, *,
        CertificateAuthorityArn: str
    ) -> ACMPCADescribeCertificateAuthorityResponse: ...

    def describe_certificate_authority_audit_report(self, *,
        CertificateAuthorityArn: str,
        AuditReportId: str
    ) -> ACMPCADescribeCertificateAuthorityAuditReportResponse: ...

    def get_certificate(self, *,
        CertificateAuthorityArn: str,
        CertificateArn: str
    ) -> ACMPCAGetCertificateResponse: ...

    def get_certificate_authority_certificate(self, *,
        CertificateAuthorityArn: str
    ) -> ACMPCAGetCertificateAuthorityCertificateResponse: ...

    def get_certificate_authority_csr(self, *,
        CertificateAuthorityArn: str
    ) -> ACMPCAGetCertificateAuthorityCsrResponse: ...

    def import_certificate_authority_certificate(self, *,
        CertificateAuthorityArn: str,
        Certificate: bytes,
        CertificateChain: bytes
    ): ...

    def issue_certificate(self, *,
        CertificateAuthorityArn: str,
        Csr: bytes,
        SigningAlgorithm: str,
        Validity: ACMPCAValidity,
        IdempotencyToken: str = ...
    ) -> ACMPCAIssueCertificateResponse: ...

    def list_certificate_authorities(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ACMPCAListCertificateAuthoritiesResponse: ...

    def list_permissions(self, *,
        CertificateAuthorityArn: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ACMPCAListPermissionsResponse: ...

    def list_tags(self, *,
        CertificateAuthorityArn: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ACMPCAListTagsResponse: ...

    def restore_certificate_authority(self, *,
        CertificateAuthorityArn: str
    ): ...

    def revoke_certificate(self, *,
        CertificateAuthorityArn: str,
        CertificateSerial: str,
        RevocationReason: str
    ): ...

    def tag_certificate_authority(self, *,
        CertificateAuthorityArn: str,
        Tags: List[ACMPCATag]
    ): ...

    def untag_certificate_authority(self, *,
        CertificateAuthorityArn: str,
        Tags: List[ACMPCATag]
    ): ...

    def update_certificate_authority(self, *,
        CertificateAuthorityArn: str,
        RevocationConfiguration: ACMPCARevocationConfiguration = ...,
        Status: str = ...
    ): ...


ACMPCAASN1Subject = TypedDict(
    'ACMPCAASN1Subject', {
        'CountryCodeString': Optional[str],
        'String64': Optional[str],
        'String64': Optional[str],
        'DistinguishedNameQualifierString': Optional[str],
        'String128': Optional[str],
        'String64': Optional[str],
        'String64': Optional[str],
        'String128': Optional[str],
        'String64': Optional[str],
        'String40': Optional[str],
        'String16': Optional[str],
        'String5': Optional[str],
        'String128': Optional[str],
        'String3': Optional[str],
    }
)


ACMPCACertificateAuthorityConfiguration = TypedDict(
    'ACMPCACertificateAuthorityConfiguration', {
        'KeyAlgorithm': str,
        'SigningAlgorithm': str,
        'ASN1Subject': ACMPCAASN1Subject,
    }
)


ACMPCACrlConfiguration = TypedDict(
    'ACMPCACrlConfiguration', {
        'Boolean': bool,
        'Integer1To5000': Optional[int],
        'String253': Optional[str],
        'String3To255': Optional[str],
    }
)


ACMPCARevocationConfiguration = TypedDict(
    'ACMPCARevocationConfiguration', {
        'CrlConfiguration': Optional[ACMPCACrlConfiguration],
    }
)


ACMPCATag = TypedDict(
    'ACMPCATag', {
        'TagKey': str,
        'TagValue': Optional[str],
    }
)


ACMPCACreateCertificateAuthorityResponse = TypedDict(
    'ACMPCACreateCertificateAuthorityResponse', {
        'Arn': Optional[str],
    }
)


ACMPCACreateCertificateAuthorityAuditReportResponse = TypedDict(
    'ACMPCACreateCertificateAuthorityAuditReportResponse', {
        'AuditReportId': Optional[str],
        'String': Optional[str],
    }
)


ACMPCACertificateAuthority = TypedDict(
    'ACMPCACertificateAuthority', {
        'Arn': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'TStamp': Optional[datetime.datetime],
        'CertificateAuthorityType': Optional[str],
        'String': Optional[str],
        'CertificateAuthorityStatus': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'TStamp': Optional[datetime.datetime],
        'FailureReason': Optional[str],
        'CertificateAuthorityConfiguration': Optional[ACMPCACertificateAuthorityConfiguration],
        'RevocationConfiguration': Optional[ACMPCARevocationConfiguration],
        'TStamp': Optional[datetime.datetime],
    }
)


ACMPCADescribeCertificateAuthorityResponse = TypedDict(
    'ACMPCADescribeCertificateAuthorityResponse', {
        'CertificateAuthority': Optional[ACMPCACertificateAuthority],
    }
)


ACMPCADescribeCertificateAuthorityAuditReportResponse = TypedDict(
    'ACMPCADescribeCertificateAuthorityAuditReportResponse', {
        'AuditReportStatus': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
    }
)


ACMPCAGetCertificateResponse = TypedDict(
    'ACMPCAGetCertificateResponse', {
        'CertificateBody': Optional[str],
        'CertificateChain': Optional[str],
    }
)


ACMPCAGetCertificateAuthorityCertificateResponse = TypedDict(
    'ACMPCAGetCertificateAuthorityCertificateResponse', {
        'CertificateBody': Optional[str],
        'CertificateChain': Optional[str],
    }
)


ACMPCAGetCertificateAuthorityCsrResponse = TypedDict(
    'ACMPCAGetCertificateAuthorityCsrResponse', {
        'CsrBody': Optional[str],
    }
)


ACMPCAValidity = TypedDict(
    'ACMPCAValidity', {
        'PositiveLong': int,
        'ValidityPeriodType': str,
    }
)


ACMPCAIssueCertificateResponse = TypedDict(
    'ACMPCAIssueCertificateResponse', {
        'Arn': Optional[str],
    }
)


ACMPCAListCertificateAuthoritiesResponse = TypedDict(
    'ACMPCAListCertificateAuthoritiesResponse', {
        'CertificateAuthorities': Optional[List[ACMPCACertificateAuthority]],
        'NextToken': Optional[str],
    }
)


ACMPCAPermission = TypedDict(
    'ACMPCAPermission', {
        'Arn': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'ActionList': Optional[List[str]],
        'String': Optional[str],
    }
)


ACMPCAListPermissionsResponse = TypedDict(
    'ACMPCAListPermissionsResponse', {
        'PermissionList': Optional[List[ACMPCAPermission]],
        'NextToken': Optional[str],
    }
)


ACMPCAListTagsResponse = TypedDict(
    'ACMPCAListTagsResponse', {
        'TagList': Optional[List[ACMPCATag]],
        'NextToken': Optional[str],
    }
)


class AlexaForBusiness(BaseClient):
    def approve_skill(self, *,
        SkillId: str
    ) -> AlexaForBusinessApproveSkillResponse: ...

    def associate_contact_with_address_book(self, *,
        ContactArn: str,
        AddressBookArn: str
    ) -> AlexaForBusinessAssociateContactWithAddressBookResponse: ...

    def associate_device_with_room(self, *,
        DeviceArn: str = ...,
        RoomArn: str = ...
    ) -> AlexaForBusinessAssociateDeviceWithRoomResponse: ...

    def associate_skill_group_with_room(self, *,
        SkillGroupArn: str = ...,
        RoomArn: str = ...
    ) -> AlexaForBusinessAssociateSkillGroupWithRoomResponse: ...

    def associate_skill_with_skill_group(self, *,
        SkillId: str,
        SkillGroupArn: str = ...
    ) -> AlexaForBusinessAssociateSkillWithSkillGroupResponse: ...

    def associate_skill_with_users(self, *,
        SkillId: str
    ) -> AlexaForBusinessAssociateSkillWithUsersResponse: ...

    def create_address_book(self, *,
        Name: str,
        Description: str = ...,
        ClientRequestToken: str = ...
    ) -> AlexaForBusinessCreateAddressBookResponse: ...

    def create_business_report_schedule(self, *,
        Format: str,
        ContentRange: AlexaForBusinessBusinessReportContentRange,
        ScheduleName: str = ...,
        S3BucketName: str = ...,
        S3KeyPrefix: str = ...,
        Recurrence: AlexaForBusinessBusinessReportRecurrence = ...,
        ClientRequestToken: str = ...
    ) -> AlexaForBusinessCreateBusinessReportScheduleResponse: ...

    def create_conference_provider(self, *,
        ConferenceProviderName: str,
        ConferenceProviderType: str,
        MeetingSetting: AlexaForBusinessMeetingSetting,
        IPDialIn: AlexaForBusinessIPDialIn = ...,
        PSTNDialIn: AlexaForBusinessPSTNDialIn = ...,
        ClientRequestToken: str = ...
    ) -> AlexaForBusinessCreateConferenceProviderResponse: ...

    def create_contact(self, *,
        FirstName: str,
        DisplayName: str = ...,
        LastName: str = ...,
        PhoneNumber: str = ...,
        ClientRequestToken: str = ...
    ) -> AlexaForBusinessCreateContactResponse: ...

    def create_gateway_group(self, *,
        Name: str,
        ClientRequestToken: str,
        Description: str = ...
    ) -> AlexaForBusinessCreateGatewayGroupResponse: ...

    def create_profile(self, *,
        ProfileName: str,
        Timezone: str,
        Address: str,
        DistanceUnit: str,
        TemperatureUnit: str,
        WakeWord: str,
        ClientRequestToken: str = ...,
        SetupModeDisabled: bool = ...,
        MaxVolumeLimit: int = ...,
        PSTNEnabled: bool = ...
    ) -> AlexaForBusinessCreateProfileResponse: ...

    def create_room(self, *,
        RoomName: str,
        Description: str = ...,
        ProfileArn: str = ...,
        ProviderCalendarId: str = ...,
        ClientRequestToken: str = ...,
        Tags: List[AlexaForBusinessTag] = ...
    ) -> AlexaForBusinessCreateRoomResponse: ...

    def create_skill_group(self, *,
        SkillGroupName: str,
        Description: str = ...,
        ClientRequestToken: str = ...
    ) -> AlexaForBusinessCreateSkillGroupResponse: ...

    def create_user(self, *,
        UserId: str,
        FirstName: str = ...,
        LastName: str = ...,
        Email: str = ...,
        ClientRequestToken: str = ...,
        Tags: List[AlexaForBusinessTag] = ...
    ) -> AlexaForBusinessCreateUserResponse: ...

    def delete_address_book(self, *,
        AddressBookArn: str
    ) -> AlexaForBusinessDeleteAddressBookResponse: ...

    def delete_business_report_schedule(self, *,
        ScheduleArn: str
    ) -> AlexaForBusinessDeleteBusinessReportScheduleResponse: ...

    def delete_conference_provider(self, *,
        ConferenceProviderArn: str
    ) -> AlexaForBusinessDeleteConferenceProviderResponse: ...

    def delete_contact(self, *,
        ContactArn: str
    ) -> AlexaForBusinessDeleteContactResponse: ...

    def delete_device(self, *,
        DeviceArn: str
    ) -> AlexaForBusinessDeleteDeviceResponse: ...

    def delete_device_usage_data(self, *,
        DeviceArn: str,
        DeviceUsageType: str
    ) -> AlexaForBusinessDeleteDeviceUsageDataResponse: ...

    def delete_gateway_group(self, *,
        GatewayGroupArn: str
    ) -> AlexaForBusinessDeleteGatewayGroupResponse: ...

    def delete_profile(self, *,
        ProfileArn: str = ...
    ) -> AlexaForBusinessDeleteProfileResponse: ...

    def delete_room(self, *,
        RoomArn: str = ...
    ) -> AlexaForBusinessDeleteRoomResponse: ...

    def delete_room_skill_parameter(self, *,
        SkillId: str,
        ParameterKey: str,
        RoomArn: str = ...
    ) -> AlexaForBusinessDeleteRoomSkillParameterResponse: ...

    def delete_skill_authorization(self, *,
        SkillId: str,
        RoomArn: str = ...
    ) -> AlexaForBusinessDeleteSkillAuthorizationResponse: ...

    def delete_skill_group(self, *,
        SkillGroupArn: str = ...
    ) -> AlexaForBusinessDeleteSkillGroupResponse: ...

    def delete_user(self, *,
        EnrollmentId: str,
        UserArn: str = ...
    ) -> AlexaForBusinessDeleteUserResponse: ...

    def disassociate_contact_from_address_book(self, *,
        ContactArn: str,
        AddressBookArn: str
    ) -> AlexaForBusinessDisassociateContactFromAddressBookResponse: ...

    def disassociate_device_from_room(self, *,
        DeviceArn: str = ...
    ) -> AlexaForBusinessDisassociateDeviceFromRoomResponse: ...

    def disassociate_skill_from_skill_group(self, *,
        SkillId: str,
        SkillGroupArn: str = ...
    ) -> AlexaForBusinessDisassociateSkillFromSkillGroupResponse: ...

    def disassociate_skill_from_users(self, *,
        SkillId: str
    ) -> AlexaForBusinessDisassociateSkillFromUsersResponse: ...

    def disassociate_skill_group_from_room(self, *,
        SkillGroupArn: str = ...,
        RoomArn: str = ...
    ) -> AlexaForBusinessDisassociateSkillGroupFromRoomResponse: ...

    def forget_smart_home_appliances(self, *,
        RoomArn: str
    ) -> AlexaForBusinessForgetSmartHomeAppliancesResponse: ...

    def get_address_book(self, *,
        AddressBookArn: str
    ) -> AlexaForBusinessGetAddressBookResponse: ...

    def get_conference_preference(self) -> AlexaForBusinessGetConferencePreferenceResponse: ...

    def get_conference_provider(self, *,
        ConferenceProviderArn: str
    ) -> AlexaForBusinessGetConferenceProviderResponse: ...

    def get_contact(self, *,
        ContactArn: str
    ) -> AlexaForBusinessGetContactResponse: ...

    def get_device(self, *,
        DeviceArn: str = ...
    ) -> AlexaForBusinessGetDeviceResponse: ...

    def get_gateway(self, *,
        GatewayArn: str
    ) -> AlexaForBusinessGetGatewayResponse: ...

    def get_gateway_group(self, *,
        GatewayGroupArn: str
    ) -> AlexaForBusinessGetGatewayGroupResponse: ...

    def get_invitation_configuration(self) -> AlexaForBusinessGetInvitationConfigurationResponse: ...

    def get_profile(self, *,
        ProfileArn: str = ...
    ) -> AlexaForBusinessGetProfileResponse: ...

    def get_room(self, *,
        RoomArn: str = ...
    ) -> AlexaForBusinessGetRoomResponse: ...

    def get_room_skill_parameter(self, *,
        SkillId: str,
        ParameterKey: str,
        RoomArn: str = ...
    ) -> AlexaForBusinessGetRoomSkillParameterResponse: ...

    def get_skill_group(self, *,
        SkillGroupArn: str = ...
    ) -> AlexaForBusinessGetSkillGroupResponse: ...

    def list_business_report_schedules(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AlexaForBusinessListBusinessReportSchedulesResponse: ...

    def list_conference_providers(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AlexaForBusinessListConferenceProvidersResponse: ...

    def list_device_events(self, *,
        DeviceArn: str,
        EventType: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AlexaForBusinessListDeviceEventsResponse: ...

    def list_gateway_groups(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AlexaForBusinessListGatewayGroupsResponse: ...

    def list_gateways(self, *,
        GatewayGroupArn: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AlexaForBusinessListGatewaysResponse: ...

    def list_skills(self, *,
        SkillGroupArn: str = ...,
        EnablementType: str = ...,
        SkillType: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AlexaForBusinessListSkillsResponse: ...

    def list_skills_store_categories(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AlexaForBusinessListSkillsStoreCategoriesResponse: ...

    def list_skills_store_skills_by_category(self, *,
        CategoryId: int,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AlexaForBusinessListSkillsStoreSkillsByCategoryResponse: ...

    def list_smart_home_appliances(self, *,
        RoomArn: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> AlexaForBusinessListSmartHomeAppliancesResponse: ...

    def list_tags(self, *,
        Arn: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AlexaForBusinessListTagsResponse: ...

    def put_conference_preference(self, *,
        ConferencePreference: AlexaForBusinessConferencePreference
    ) -> AlexaForBusinessPutConferencePreferenceResponse: ...

    def put_invitation_configuration(self, *,
        OrganizationName: str,
        ContactEmail: str = ...,
        PrivateSkillIds: List[str] = ...
    ) -> AlexaForBusinessPutInvitationConfigurationResponse: ...

    def put_room_skill_parameter(self, *,
        SkillId: str,
        RoomSkillParameter: AlexaForBusinessRoomSkillParameter,
        RoomArn: str = ...
    ) -> AlexaForBusinessPutRoomSkillParameterResponse: ...

    def put_skill_authorization(self, *,
        AuthorizationResult: Dict[str, str],
        SkillId: str,
        RoomArn: str = ...
    ) -> AlexaForBusinessPutSkillAuthorizationResponse: ...

    def register_avs_device(self, *,
        ClientId: str,
        UserCode: str,
        ProductId: str,
        DeviceSerialNumber: str,
        AmazonId: str
    ) -> AlexaForBusinessRegisterAVSDeviceResponse: ...

    def reject_skill(self, *,
        SkillId: str
    ) -> AlexaForBusinessRejectSkillResponse: ...

    def resolve_room(self, *,
        UserId: str,
        SkillId: str
    ) -> AlexaForBusinessResolveRoomResponse: ...

    def revoke_invitation(self, *,
        UserArn: str = ...,
        EnrollmentId: str = ...
    ) -> AlexaForBusinessRevokeInvitationResponse: ...

    def search_address_books(self, *,
        Filters: List[AlexaForBusinessFilter] = ...,
        SortCriteria: List[AlexaForBusinessSort] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AlexaForBusinessSearchAddressBooksResponse: ...

    def search_contacts(self, *,
        Filters: List[AlexaForBusinessFilter] = ...,
        SortCriteria: List[AlexaForBusinessSort] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AlexaForBusinessSearchContactsResponse: ...

    def search_devices(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        Filters: List[AlexaForBusinessFilter] = ...,
        SortCriteria: List[AlexaForBusinessSort] = ...
    ) -> AlexaForBusinessSearchDevicesResponse: ...

    def search_profiles(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        Filters: List[AlexaForBusinessFilter] = ...,
        SortCriteria: List[AlexaForBusinessSort] = ...
    ) -> AlexaForBusinessSearchProfilesResponse: ...

    def search_rooms(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        Filters: List[AlexaForBusinessFilter] = ...,
        SortCriteria: List[AlexaForBusinessSort] = ...
    ) -> AlexaForBusinessSearchRoomsResponse: ...

    def search_skill_groups(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        Filters: List[AlexaForBusinessFilter] = ...,
        SortCriteria: List[AlexaForBusinessSort] = ...
    ) -> AlexaForBusinessSearchSkillGroupsResponse: ...

    def search_users(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        Filters: List[AlexaForBusinessFilter] = ...,
        SortCriteria: List[AlexaForBusinessSort] = ...
    ) -> AlexaForBusinessSearchUsersResponse: ...

    def send_announcement(self, *,
        RoomFilters: List[AlexaForBusinessFilter],
        Content: AlexaForBusinessContent,
        ClientRequestToken: str,
        TimeToLiveInSeconds: int = ...
    ) -> AlexaForBusinessSendAnnouncementResponse: ...

    def send_invitation(self, *,
        UserArn: str = ...
    ) -> AlexaForBusinessSendInvitationResponse: ...

    def start_device_sync(self, *,
        Features: List[str],
        RoomArn: str = ...,
        DeviceArn: str = ...
    ) -> AlexaForBusinessStartDeviceSyncResponse: ...

    def start_smart_home_appliance_discovery(self, *,
        RoomArn: str
    ) -> AlexaForBusinessStartSmartHomeApplianceDiscoveryResponse: ...

    def tag_resource(self, *,
        Arn: str,
        Tags: List[AlexaForBusinessTag]
    ) -> AlexaForBusinessTagResourceResponse: ...

    def untag_resource(self, *,
        Arn: str,
        TagKeys: List[str]
    ) -> AlexaForBusinessUntagResourceResponse: ...

    def update_address_book(self, *,
        AddressBookArn: str,
        Name: str = ...,
        Description: str = ...
    ) -> AlexaForBusinessUpdateAddressBookResponse: ...

    def update_business_report_schedule(self, *,
        ScheduleArn: str,
        S3BucketName: str = ...,
        S3KeyPrefix: str = ...,
        Format: str = ...,
        ScheduleName: str = ...,
        Recurrence: AlexaForBusinessBusinessReportRecurrence = ...
    ) -> AlexaForBusinessUpdateBusinessReportScheduleResponse: ...

    def update_conference_provider(self, *,
        ConferenceProviderArn: str,
        ConferenceProviderType: str,
        MeetingSetting: AlexaForBusinessMeetingSetting,
        IPDialIn: AlexaForBusinessIPDialIn = ...,
        PSTNDialIn: AlexaForBusinessPSTNDialIn = ...
    ) -> AlexaForBusinessUpdateConferenceProviderResponse: ...

    def update_contact(self, *,
        ContactArn: str,
        DisplayName: str = ...,
        FirstName: str = ...,
        LastName: str = ...,
        PhoneNumber: str = ...
    ) -> AlexaForBusinessUpdateContactResponse: ...

    def update_device(self, *,
        DeviceArn: str = ...,
        DeviceName: str = ...
    ) -> AlexaForBusinessUpdateDeviceResponse: ...

    def update_gateway(self, *,
        GatewayArn: str,
        Name: str = ...,
        Description: str = ...,
        SoftwareVersion: str = ...
    ) -> AlexaForBusinessUpdateGatewayResponse: ...

    def update_gateway_group(self, *,
        GatewayGroupArn: str,
        Name: str = ...,
        Description: str = ...
    ) -> AlexaForBusinessUpdateGatewayGroupResponse: ...

    def update_profile(self, *,
        ProfileArn: str = ...,
        ProfileName: str = ...,
        IsDefault: bool = ...,
        Timezone: str = ...,
        Address: str = ...,
        DistanceUnit: str = ...,
        TemperatureUnit: str = ...,
        WakeWord: str = ...,
        SetupModeDisabled: bool = ...,
        MaxVolumeLimit: int = ...,
        PSTNEnabled: bool = ...
    ) -> AlexaForBusinessUpdateProfileResponse: ...

    def update_room(self, *,
        RoomArn: str = ...,
        RoomName: str = ...,
        Description: str = ...,
        ProviderCalendarId: str = ...,
        ProfileArn: str = ...
    ) -> AlexaForBusinessUpdateRoomResponse: ...

    def update_skill_group(self, *,
        SkillGroupArn: str = ...,
        SkillGroupName: str = ...,
        Description: str = ...
    ) -> AlexaForBusinessUpdateSkillGroupResponse: ...


AlexaForBusinessApproveSkillResponse = TypedDict(
    'AlexaForBusinessApproveSkillResponse', {
    }
)


AlexaForBusinessAssociateContactWithAddressBookResponse = TypedDict(
    'AlexaForBusinessAssociateContactWithAddressBookResponse', {
    }
)


AlexaForBusinessAssociateDeviceWithRoomResponse = TypedDict(
    'AlexaForBusinessAssociateDeviceWithRoomResponse', {
    }
)


AlexaForBusinessAssociateSkillGroupWithRoomResponse = TypedDict(
    'AlexaForBusinessAssociateSkillGroupWithRoomResponse', {
    }
)


AlexaForBusinessAssociateSkillWithSkillGroupResponse = TypedDict(
    'AlexaForBusinessAssociateSkillWithSkillGroupResponse', {
    }
)


AlexaForBusinessAssociateSkillWithUsersResponse = TypedDict(
    'AlexaForBusinessAssociateSkillWithUsersResponse', {
    }
)


AlexaForBusinessCreateAddressBookResponse = TypedDict(
    'AlexaForBusinessCreateAddressBookResponse', {
        'Arn': Optional[str],
    }
)


AlexaForBusinessBusinessReportContentRange = TypedDict(
    'AlexaForBusinessBusinessReportContentRange', {
        'BusinessReportInterval': Optional[str],
    }
)


AlexaForBusinessBusinessReportRecurrence = TypedDict(
    'AlexaForBusinessBusinessReportRecurrence', {
        'Date': Optional[str],
    }
)


AlexaForBusinessCreateBusinessReportScheduleResponse = TypedDict(
    'AlexaForBusinessCreateBusinessReportScheduleResponse', {
        'Arn': Optional[str],
    }
)


AlexaForBusinessIPDialIn = TypedDict(
    'AlexaForBusinessIPDialIn', {
        'Endpoint': str,
        'CommsProtocol': str,
    }
)


AlexaForBusinessPSTNDialIn = TypedDict(
    'AlexaForBusinessPSTNDialIn', {
        'CountryCode': str,
        'OutboundPhoneNumber': str,
        'OneClickIdDelay': str,
        'OneClickPinDelay': str,
    }
)


AlexaForBusinessMeetingSetting = TypedDict(
    'AlexaForBusinessMeetingSetting', {
        'RequirePin': str,
    }
)


AlexaForBusinessCreateConferenceProviderResponse = TypedDict(
    'AlexaForBusinessCreateConferenceProviderResponse', {
        'Arn': Optional[str],
    }
)


AlexaForBusinessCreateContactResponse = TypedDict(
    'AlexaForBusinessCreateContactResponse', {
        'Arn': Optional[str],
    }
)


AlexaForBusinessCreateGatewayGroupResponse = TypedDict(
    'AlexaForBusinessCreateGatewayGroupResponse', {
        'Arn': Optional[str],
    }
)


AlexaForBusinessCreateProfileResponse = TypedDict(
    'AlexaForBusinessCreateProfileResponse', {
        'Arn': Optional[str],
    }
)


AlexaForBusinessTag = TypedDict(
    'AlexaForBusinessTag', {
        'TagKey': str,
        'TagValue': str,
    }
)


AlexaForBusinessCreateRoomResponse = TypedDict(
    'AlexaForBusinessCreateRoomResponse', {
        'Arn': Optional[str],
    }
)


AlexaForBusinessCreateSkillGroupResponse = TypedDict(
    'AlexaForBusinessCreateSkillGroupResponse', {
        'Arn': Optional[str],
    }
)


AlexaForBusinessCreateUserResponse = TypedDict(
    'AlexaForBusinessCreateUserResponse', {
        'Arn': Optional[str],
    }
)


AlexaForBusinessDeleteAddressBookResponse = TypedDict(
    'AlexaForBusinessDeleteAddressBookResponse', {
    }
)


AlexaForBusinessDeleteBusinessReportScheduleResponse = TypedDict(
    'AlexaForBusinessDeleteBusinessReportScheduleResponse', {
    }
)


AlexaForBusinessDeleteConferenceProviderResponse = TypedDict(
    'AlexaForBusinessDeleteConferenceProviderResponse', {
    }
)


AlexaForBusinessDeleteContactResponse = TypedDict(
    'AlexaForBusinessDeleteContactResponse', {
    }
)


AlexaForBusinessDeleteDeviceResponse = TypedDict(
    'AlexaForBusinessDeleteDeviceResponse', {
    }
)


AlexaForBusinessDeleteDeviceUsageDataResponse = TypedDict(
    'AlexaForBusinessDeleteDeviceUsageDataResponse', {
    }
)


AlexaForBusinessDeleteGatewayGroupResponse = TypedDict(
    'AlexaForBusinessDeleteGatewayGroupResponse', {
    }
)


AlexaForBusinessDeleteProfileResponse = TypedDict(
    'AlexaForBusinessDeleteProfileResponse', {
    }
)


AlexaForBusinessDeleteRoomResponse = TypedDict(
    'AlexaForBusinessDeleteRoomResponse', {
    }
)


AlexaForBusinessDeleteRoomSkillParameterResponse = TypedDict(
    'AlexaForBusinessDeleteRoomSkillParameterResponse', {
    }
)


AlexaForBusinessDeleteSkillAuthorizationResponse = TypedDict(
    'AlexaForBusinessDeleteSkillAuthorizationResponse', {
    }
)


AlexaForBusinessDeleteSkillGroupResponse = TypedDict(
    'AlexaForBusinessDeleteSkillGroupResponse', {
    }
)


AlexaForBusinessDeleteUserResponse = TypedDict(
    'AlexaForBusinessDeleteUserResponse', {
    }
)


AlexaForBusinessDisassociateContactFromAddressBookResponse = TypedDict(
    'AlexaForBusinessDisassociateContactFromAddressBookResponse', {
    }
)


AlexaForBusinessDisassociateDeviceFromRoomResponse = TypedDict(
    'AlexaForBusinessDisassociateDeviceFromRoomResponse', {
    }
)


AlexaForBusinessDisassociateSkillFromSkillGroupResponse = TypedDict(
    'AlexaForBusinessDisassociateSkillFromSkillGroupResponse', {
    }
)


AlexaForBusinessDisassociateSkillFromUsersResponse = TypedDict(
    'AlexaForBusinessDisassociateSkillFromUsersResponse', {
    }
)


AlexaForBusinessDisassociateSkillGroupFromRoomResponse = TypedDict(
    'AlexaForBusinessDisassociateSkillGroupFromRoomResponse', {
    }
)


AlexaForBusinessForgetSmartHomeAppliancesResponse = TypedDict(
    'AlexaForBusinessForgetSmartHomeAppliancesResponse', {
    }
)


AlexaForBusinessAddressBook = TypedDict(
    'AlexaForBusinessAddressBook', {
        'Arn': Optional[str],
        'AddressBookName': Optional[str],
        'AddressBookDescription': Optional[str],
    }
)


AlexaForBusinessGetAddressBookResponse = TypedDict(
    'AlexaForBusinessGetAddressBookResponse', {
        'AddressBook': Optional[AlexaForBusinessAddressBook],
    }
)


AlexaForBusinessConferencePreference = TypedDict(
    'AlexaForBusinessConferencePreference', {
        'Arn': Optional[str],
    }
)


AlexaForBusinessGetConferencePreferenceResponse = TypedDict(
    'AlexaForBusinessGetConferencePreferenceResponse', {
        'ConferencePreference': Optional[AlexaForBusinessConferencePreference],
    }
)


AlexaForBusinessConferenceProvider = TypedDict(
    'AlexaForBusinessConferenceProvider', {
        'Arn': Optional[str],
        'ConferenceProviderName': Optional[str],
        'ConferenceProviderType': Optional[str],
        'IPDialIn': Optional[AlexaForBusinessIPDialIn],
        'PSTNDialIn': Optional[AlexaForBusinessPSTNDialIn],
        'MeetingSetting': Optional[AlexaForBusinessMeetingSetting],
    }
)


AlexaForBusinessGetConferenceProviderResponse = TypedDict(
    'AlexaForBusinessGetConferenceProviderResponse', {
        'ConferenceProvider': Optional[AlexaForBusinessConferenceProvider],
    }
)


AlexaForBusinessContact = TypedDict(
    'AlexaForBusinessContact', {
        'Arn': Optional[str],
        'ContactName': Optional[str],
        'ContactName': Optional[str],
        'ContactName': Optional[str],
        'E164PhoneNumber': Optional[str],
    }
)


AlexaForBusinessGetContactResponse = TypedDict(
    'AlexaForBusinessGetContactResponse', {
        'Contact': Optional[AlexaForBusinessContact],
    }
)


AlexaForBusinessDeviceStatusDetail = TypedDict(
    'AlexaForBusinessDeviceStatusDetail', {
        'DeviceStatusDetailCode': Optional[str],
    }
)


AlexaForBusinessDeviceStatusInfo = TypedDict(
    'AlexaForBusinessDeviceStatusInfo', {
        'DeviceStatusDetails': Optional[List[AlexaForBusinessDeviceStatusDetail]],
        'ConnectionStatus': Optional[str],
    }
)


AlexaForBusinessDevice = TypedDict(
    'AlexaForBusinessDevice', {
        'Arn': Optional[str],
        'DeviceSerialNumber': Optional[str],
        'DeviceType': Optional[str],
        'DeviceName': Optional[str],
        'SoftwareVersion': Optional[str],
        'MacAddress': Optional[str],
        'Arn': Optional[str],
        'DeviceStatus': Optional[str],
        'DeviceStatusInfo': Optional[AlexaForBusinessDeviceStatusInfo],
    }
)


AlexaForBusinessGetDeviceResponse = TypedDict(
    'AlexaForBusinessGetDeviceResponse', {
        'Device': Optional[AlexaForBusinessDevice],
    }
)


AlexaForBusinessGateway = TypedDict(
    'AlexaForBusinessGateway', {
        'Arn': Optional[str],
        'GatewayName': Optional[str],
        'GatewayDescription': Optional[str],
        'Arn': Optional[str],
        'GatewayVersion': Optional[str],
    }
)


AlexaForBusinessGetGatewayResponse = TypedDict(
    'AlexaForBusinessGetGatewayResponse', {
        'Gateway': Optional[AlexaForBusinessGateway],
    }
)


AlexaForBusinessGatewayGroup = TypedDict(
    'AlexaForBusinessGatewayGroup', {
        'Arn': Optional[str],
        'GatewayGroupName': Optional[str],
        'GatewayGroupDescription': Optional[str],
    }
)


AlexaForBusinessGetGatewayGroupResponse = TypedDict(
    'AlexaForBusinessGetGatewayGroupResponse', {
        'GatewayGroup': Optional[AlexaForBusinessGatewayGroup],
    }
)


AlexaForBusinessGetInvitationConfigurationResponse = TypedDict(
    'AlexaForBusinessGetInvitationConfigurationResponse', {
        'OrganizationName': Optional[str],
        'Email': Optional[str],
        'ShortSkillIdList': Optional[List[str]],
    }
)


AlexaForBusinessProfile = TypedDict(
    'AlexaForBusinessProfile', {
        'Arn': Optional[str],
        'ProfileName': Optional[str],
        'Boolean': Optional[bool],
        'Address': Optional[str],
        'Timezone': Optional[str],
        'DistanceUnit': Optional[str],
        'TemperatureUnit': Optional[str],
        'WakeWord': Optional[str],
        'Boolean': Optional[bool],
        'MaxVolumeLimit': Optional[int],
        'Boolean': Optional[bool],
        'Arn': Optional[str],
    }
)


AlexaForBusinessGetProfileResponse = TypedDict(
    'AlexaForBusinessGetProfileResponse', {
        'Profile': Optional[AlexaForBusinessProfile],
    }
)


AlexaForBusinessRoom = TypedDict(
    'AlexaForBusinessRoom', {
        'Arn': Optional[str],
        'RoomName': Optional[str],
        'RoomDescription': Optional[str],
        'ProviderCalendarId': Optional[str],
        'Arn': Optional[str],
    }
)


AlexaForBusinessGetRoomResponse = TypedDict(
    'AlexaForBusinessGetRoomResponse', {
        'Room': Optional[AlexaForBusinessRoom],
    }
)


AlexaForBusinessRoomSkillParameter = TypedDict(
    'AlexaForBusinessRoomSkillParameter', {
        'RoomSkillParameterKey': str,
        'RoomSkillParameterValue': str,
    }
)


AlexaForBusinessGetRoomSkillParameterResponse = TypedDict(
    'AlexaForBusinessGetRoomSkillParameterResponse', {
        'RoomSkillParameter': Optional[AlexaForBusinessRoomSkillParameter],
    }
)


AlexaForBusinessSkillGroup = TypedDict(
    'AlexaForBusinessSkillGroup', {
        'Arn': Optional[str],
        'SkillGroupName': Optional[str],
        'SkillGroupDescription': Optional[str],
    }
)


AlexaForBusinessGetSkillGroupResponse = TypedDict(
    'AlexaForBusinessGetSkillGroupResponse', {
        'SkillGroup': Optional[AlexaForBusinessSkillGroup],
    }
)


AlexaForBusinessBusinessReportS3Location = TypedDict(
    'AlexaForBusinessBusinessReportS3Location', {
        'BusinessReportS3Path': Optional[str],
        'CustomerS3BucketName': Optional[str],
    }
)


AlexaForBusinessBusinessReport = TypedDict(
    'AlexaForBusinessBusinessReport', {
        'BusinessReportStatus': Optional[str],
        'BusinessReportFailureCode': Optional[str],
        'BusinessReportS3Location': Optional[AlexaForBusinessBusinessReportS3Location],
        'BusinessReportDeliveryTime': Optional[datetime.datetime],
        'BusinessReportDownloadUrl': Optional[str],
    }
)


AlexaForBusinessBusinessReportSchedule = TypedDict(
    'AlexaForBusinessBusinessReportSchedule', {
        'Arn': Optional[str],
        'BusinessReportScheduleName': Optional[str],
        'CustomerS3BucketName': Optional[str],
        'S3KeyPrefix': Optional[str],
        'BusinessReportFormat': Optional[str],
        'BusinessReportContentRange': Optional[AlexaForBusinessBusinessReportContentRange],
        'BusinessReportRecurrence': Optional[AlexaForBusinessBusinessReportRecurrence],
        'BusinessReport': Optional[AlexaForBusinessBusinessReport],
    }
)


AlexaForBusinessListBusinessReportSchedulesResponse = TypedDict(
    'AlexaForBusinessListBusinessReportSchedulesResponse', {
        'BusinessReportScheduleList': Optional[List[AlexaForBusinessBusinessReportSchedule]],
        'NextToken': Optional[str],
    }
)


AlexaForBusinessListConferenceProvidersResponse = TypedDict(
    'AlexaForBusinessListConferenceProvidersResponse', {
        'ConferenceProvidersList': Optional[List[AlexaForBusinessConferenceProvider]],
        'NextToken': Optional[str],
    }
)


AlexaForBusinessDeviceEvent = TypedDict(
    'AlexaForBusinessDeviceEvent', {
        'DeviceEventType': Optional[str],
        'DeviceEventValue': Optional[str],
        'DeviceEventTime': Optional[datetime.datetime],
    }
)


AlexaForBusinessListDeviceEventsResponse = TypedDict(
    'AlexaForBusinessListDeviceEventsResponse', {
        'DeviceEventList': Optional[List[AlexaForBusinessDeviceEvent]],
        'NextToken': Optional[str],
    }
)


AlexaForBusinessGatewayGroupSummary = TypedDict(
    'AlexaForBusinessGatewayGroupSummary', {
        'Arn': Optional[str],
        'GatewayGroupName': Optional[str],
        'GatewayGroupDescription': Optional[str],
    }
)


AlexaForBusinessListGatewayGroupsResponse = TypedDict(
    'AlexaForBusinessListGatewayGroupsResponse', {
        'GatewayGroupSummaries': Optional[List[AlexaForBusinessGatewayGroupSummary]],
        'NextToken': Optional[str],
    }
)


AlexaForBusinessGatewaySummary = TypedDict(
    'AlexaForBusinessGatewaySummary', {
        'Arn': Optional[str],
        'GatewayName': Optional[str],
        'GatewayDescription': Optional[str],
        'Arn': Optional[str],
        'GatewayVersion': Optional[str],
    }
)


AlexaForBusinessListGatewaysResponse = TypedDict(
    'AlexaForBusinessListGatewaysResponse', {
        'GatewaySummaries': Optional[List[AlexaForBusinessGatewaySummary]],
        'NextToken': Optional[str],
    }
)


AlexaForBusinessSkillSummary = TypedDict(
    'AlexaForBusinessSkillSummary', {
        'SkillId': Optional[str],
        'SkillName': Optional[str],
        'boolean': Optional[bool],
        'EnablementType': Optional[str],
        'SkillType': Optional[str],
    }
)


AlexaForBusinessListSkillsResponse = TypedDict(
    'AlexaForBusinessListSkillsResponse', {
        'SkillSummaryList': Optional[List[AlexaForBusinessSkillSummary]],
        'NextToken': Optional[str],
    }
)


AlexaForBusinessCategory = TypedDict(
    'AlexaForBusinessCategory', {
        'CategoryId': Optional[int],
        'CategoryName': Optional[str],
    }
)


AlexaForBusinessListSkillsStoreCategoriesResponse = TypedDict(
    'AlexaForBusinessListSkillsStoreCategoriesResponse', {
        'CategoryList': Optional[List[AlexaForBusinessCategory]],
        'NextToken': Optional[str],
    }
)


AlexaForBusinessDeveloperInfo = TypedDict(
    'AlexaForBusinessDeveloperInfo', {
        'DeveloperName': Optional[str],
        'PrivacyPolicy': Optional[str],
        'Email': Optional[str],
        'Url': Optional[str],
    }
)


AlexaForBusinessSkillDetails = TypedDict(
    'AlexaForBusinessSkillDetails', {
        'ProductDescription': Optional[str],
        'InvocationPhrase': Optional[str],
        'ReleaseDate': Optional[str],
        'EndUserLicenseAgreement': Optional[str],
        'GenericKeywords': Optional[List[str]],
        'BulletPoints': Optional[List[str]],
        'NewInThisVersionBulletPoints': Optional[List[str]],
        'SkillTypes': Optional[List[str]],
        'Reviews': Optional[Dict[str, str]],
        'DeveloperInfo': Optional[AlexaForBusinessDeveloperInfo],
    }
)


AlexaForBusinessSkillsStoreSkill = TypedDict(
    'AlexaForBusinessSkillsStoreSkill', {
        'SkillId': Optional[str],
        'SkillName': Optional[str],
        'ShortDescription': Optional[str],
        'IconUrl': Optional[str],
        'SampleUtterances': Optional[List[str]],
        'SkillDetails': Optional[AlexaForBusinessSkillDetails],
        'boolean': Optional[bool],
    }
)


AlexaForBusinessListSkillsStoreSkillsByCategoryResponse = TypedDict(
    'AlexaForBusinessListSkillsStoreSkillsByCategoryResponse', {
        'SkillsStoreSkillList': Optional[List[AlexaForBusinessSkillsStoreSkill]],
        'NextToken': Optional[str],
    }
)


AlexaForBusinessSmartHomeAppliance = TypedDict(
    'AlexaForBusinessSmartHomeAppliance', {
        'ApplianceFriendlyName': Optional[str],
        'ApplianceDescription': Optional[str],
        'ApplianceManufacturerName': Optional[str],
    }
)


AlexaForBusinessListSmartHomeAppliancesResponse = TypedDict(
    'AlexaForBusinessListSmartHomeAppliancesResponse', {
        'SmartHomeApplianceList': Optional[List[AlexaForBusinessSmartHomeAppliance]],
        'NextToken': Optional[str],
    }
)


AlexaForBusinessListTagsResponse = TypedDict(
    'AlexaForBusinessListTagsResponse', {
        'TagList': Optional[List[AlexaForBusinessTag]],
        'NextToken': Optional[str],
    }
)


AlexaForBusinessPutConferencePreferenceResponse = TypedDict(
    'AlexaForBusinessPutConferencePreferenceResponse', {
    }
)


AlexaForBusinessPutInvitationConfigurationResponse = TypedDict(
    'AlexaForBusinessPutInvitationConfigurationResponse', {
    }
)


AlexaForBusinessPutRoomSkillParameterResponse = TypedDict(
    'AlexaForBusinessPutRoomSkillParameterResponse', {
    }
)


AlexaForBusinessPutSkillAuthorizationResponse = TypedDict(
    'AlexaForBusinessPutSkillAuthorizationResponse', {
    }
)


AlexaForBusinessRegisterAVSDeviceResponse = TypedDict(
    'AlexaForBusinessRegisterAVSDeviceResponse', {
        'Arn': Optional[str],
    }
)


AlexaForBusinessRejectSkillResponse = TypedDict(
    'AlexaForBusinessRejectSkillResponse', {
    }
)


AlexaForBusinessResolveRoomResponse = TypedDict(
    'AlexaForBusinessResolveRoomResponse', {
        'Arn': Optional[str],
        'RoomName': Optional[str],
        'RoomSkillParameters': Optional[List[AlexaForBusinessRoomSkillParameter]],
    }
)


AlexaForBusinessRevokeInvitationResponse = TypedDict(
    'AlexaForBusinessRevokeInvitationResponse', {
    }
)


AlexaForBusinessFilter = TypedDict(
    'AlexaForBusinessFilter', {
        'FilterKey': str,
        'FilterValueList': List[str],
    }
)


AlexaForBusinessSort = TypedDict(
    'AlexaForBusinessSort', {
        'SortKey': str,
        'SortValue': str,
    }
)


AlexaForBusinessAddressBookData = TypedDict(
    'AlexaForBusinessAddressBookData', {
        'Arn': Optional[str],
        'AddressBookName': Optional[str],
        'AddressBookDescription': Optional[str],
    }
)


AlexaForBusinessSearchAddressBooksResponse = TypedDict(
    'AlexaForBusinessSearchAddressBooksResponse', {
        'AddressBookDataList': Optional[List[AlexaForBusinessAddressBookData]],
        'NextToken': Optional[str],
        'TotalCount': Optional[int],
    }
)


AlexaForBusinessContactData = TypedDict(
    'AlexaForBusinessContactData', {
        'Arn': Optional[str],
        'ContactName': Optional[str],
        'ContactName': Optional[str],
        'ContactName': Optional[str],
        'E164PhoneNumber': Optional[str],
    }
)


AlexaForBusinessSearchContactsResponse = TypedDict(
    'AlexaForBusinessSearchContactsResponse', {
        'ContactDataList': Optional[List[AlexaForBusinessContactData]],
        'NextToken': Optional[str],
        'TotalCount': Optional[int],
    }
)


AlexaForBusinessDeviceData = TypedDict(
    'AlexaForBusinessDeviceData', {
        'Arn': Optional[str],
        'DeviceSerialNumber': Optional[str],
        'DeviceType': Optional[str],
        'DeviceName': Optional[str],
        'SoftwareVersion': Optional[str],
        'MacAddress': Optional[str],
        'DeviceStatus': Optional[str],
        'Arn': Optional[str],
        'RoomName': Optional[str],
        'DeviceStatusInfo': Optional[AlexaForBusinessDeviceStatusInfo],
    }
)


AlexaForBusinessSearchDevicesResponse = TypedDict(
    'AlexaForBusinessSearchDevicesResponse', {
        'DeviceDataList': Optional[List[AlexaForBusinessDeviceData]],
        'NextToken': Optional[str],
        'TotalCount': Optional[int],
    }
)


AlexaForBusinessProfileData = TypedDict(
    'AlexaForBusinessProfileData', {
        'Arn': Optional[str],
        'ProfileName': Optional[str],
        'Boolean': Optional[bool],
        'Address': Optional[str],
        'Timezone': Optional[str],
        'DistanceUnit': Optional[str],
        'TemperatureUnit': Optional[str],
        'WakeWord': Optional[str],
    }
)


AlexaForBusinessSearchProfilesResponse = TypedDict(
    'AlexaForBusinessSearchProfilesResponse', {
        'ProfileDataList': Optional[List[AlexaForBusinessProfileData]],
        'NextToken': Optional[str],
        'TotalCount': Optional[int],
    }
)


AlexaForBusinessRoomData = TypedDict(
    'AlexaForBusinessRoomData', {
        'Arn': Optional[str],
        'RoomName': Optional[str],
        'RoomDescription': Optional[str],
        'ProviderCalendarId': Optional[str],
        'Arn': Optional[str],
        'ProfileName': Optional[str],
    }
)


AlexaForBusinessSearchRoomsResponse = TypedDict(
    'AlexaForBusinessSearchRoomsResponse', {
        'RoomDataList': Optional[List[AlexaForBusinessRoomData]],
        'NextToken': Optional[str],
        'TotalCount': Optional[int],
    }
)


AlexaForBusinessSkillGroupData = TypedDict(
    'AlexaForBusinessSkillGroupData', {
        'Arn': Optional[str],
        'SkillGroupName': Optional[str],
        'SkillGroupDescription': Optional[str],
    }
)


AlexaForBusinessSearchSkillGroupsResponse = TypedDict(
    'AlexaForBusinessSearchSkillGroupsResponse', {
        'SkillGroupDataList': Optional[List[AlexaForBusinessSkillGroupData]],
        'NextToken': Optional[str],
        'TotalCount': Optional[int],
    }
)


AlexaForBusinessUserData = TypedDict(
    'AlexaForBusinessUserData', {
        'Arn': Optional[str],
        'user_FirstName': Optional[str],
        'user_LastName': Optional[str],
        'Email': Optional[str],
        'EnrollmentStatus': Optional[str],
        'EnrollmentId': Optional[str],
    }
)


AlexaForBusinessSearchUsersResponse = TypedDict(
    'AlexaForBusinessSearchUsersResponse', {
        'UserDataList': Optional[List[AlexaForBusinessUserData]],
        'NextToken': Optional[str],
        'TotalCount': Optional[int],
    }
)


AlexaForBusinessText = TypedDict(
    'AlexaForBusinessText', {
        'Locale': str,
        'TextValue': str,
    }
)


AlexaForBusinessSsml = TypedDict(
    'AlexaForBusinessSsml', {
        'Locale': str,
        'SsmlValue': str,
    }
)


AlexaForBusinessAudio = TypedDict(
    'AlexaForBusinessAudio', {
        'Locale': str,
        'AudioLocation': str,
    }
)


AlexaForBusinessContent = TypedDict(
    'AlexaForBusinessContent', {
        'TextList': Optional[List[AlexaForBusinessText]],
        'SsmlList': Optional[List[AlexaForBusinessSsml]],
        'AudioList': Optional[List[AlexaForBusinessAudio]],
    }
)


AlexaForBusinessSendAnnouncementResponse = TypedDict(
    'AlexaForBusinessSendAnnouncementResponse', {
        'Arn': Optional[str],
    }
)


AlexaForBusinessSendInvitationResponse = TypedDict(
    'AlexaForBusinessSendInvitationResponse', {
    }
)


AlexaForBusinessStartDeviceSyncResponse = TypedDict(
    'AlexaForBusinessStartDeviceSyncResponse', {
    }
)


AlexaForBusinessStartSmartHomeApplianceDiscoveryResponse = TypedDict(
    'AlexaForBusinessStartSmartHomeApplianceDiscoveryResponse', {
    }
)


AlexaForBusinessTagResourceResponse = TypedDict(
    'AlexaForBusinessTagResourceResponse', {
    }
)


AlexaForBusinessUntagResourceResponse = TypedDict(
    'AlexaForBusinessUntagResourceResponse', {
    }
)


AlexaForBusinessUpdateAddressBookResponse = TypedDict(
    'AlexaForBusinessUpdateAddressBookResponse', {
    }
)


AlexaForBusinessUpdateBusinessReportScheduleResponse = TypedDict(
    'AlexaForBusinessUpdateBusinessReportScheduleResponse', {
    }
)


AlexaForBusinessUpdateConferenceProviderResponse = TypedDict(
    'AlexaForBusinessUpdateConferenceProviderResponse', {
    }
)


AlexaForBusinessUpdateContactResponse = TypedDict(
    'AlexaForBusinessUpdateContactResponse', {
    }
)


AlexaForBusinessUpdateDeviceResponse = TypedDict(
    'AlexaForBusinessUpdateDeviceResponse', {
    }
)


AlexaForBusinessUpdateGatewayResponse = TypedDict(
    'AlexaForBusinessUpdateGatewayResponse', {
    }
)


AlexaForBusinessUpdateGatewayGroupResponse = TypedDict(
    'AlexaForBusinessUpdateGatewayGroupResponse', {
    }
)


AlexaForBusinessUpdateProfileResponse = TypedDict(
    'AlexaForBusinessUpdateProfileResponse', {
    }
)


AlexaForBusinessUpdateRoomResponse = TypedDict(
    'AlexaForBusinessUpdateRoomResponse', {
    }
)


AlexaForBusinessUpdateSkillGroupResponse = TypedDict(
    'AlexaForBusinessUpdateSkillGroupResponse', {
    }
)


class Amplify(BaseClient):
    def create_app(self, *,
        name: str,
        repository: str,
        platform: str,
        oauthToken: str,
        description: str = ...,
        iamServiceRoleArn: str = ...,
        environmentVariables: Dict[str, str] = ...,
        enableBranchAutoBuild: bool = ...,
        enableBasicAuth: bool = ...,
        basicAuthCredentials: str = ...,
        customRules: List[AmplifyCustomRule] = ...,
        tags: Dict[str, str] = ...,
        buildSpec: str = ...
    ) -> AmplifyCreateAppResult: ...

    def create_branch(self, *,
        appId: str,
        branchName: str,
        description: str = ...,
        stage: str = ...,
        framework: str = ...,
        enableNotification: bool = ...,
        enableAutoBuild: bool = ...,
        environmentVariables: Dict[str, str] = ...,
        basicAuthCredentials: str = ...,
        enableBasicAuth: bool = ...,
        tags: Dict[str, str] = ...,
        buildSpec: str = ...,
        ttl: str = ...
    ) -> AmplifyCreateBranchResult: ...

    def create_domain_association(self, *,
        appId: str,
        domainName: str,
        subDomainSettings: List[AmplifySubDomainSetting],
        enableAutoSubDomain: bool = ...
    ) -> AmplifyCreateDomainAssociationResult: ...

    def delete_app(self, *,
        appId: str
    ) -> AmplifyDeleteAppResult: ...

    def delete_branch(self, *,
        appId: str,
        branchName: str
    ) -> AmplifyDeleteBranchResult: ...

    def delete_domain_association(self, *,
        appId: str,
        domainName: str
    ) -> AmplifyDeleteDomainAssociationResult: ...

    def delete_job(self, *,
        appId: str,
        branchName: str,
        jobId: str
    ) -> AmplifyDeleteJobResult: ...

    def get_app(self, *,
        appId: str
    ) -> AmplifyGetAppResult: ...

    def get_branch(self, *,
        appId: str,
        branchName: str
    ) -> AmplifyGetBranchResult: ...

    def get_domain_association(self, *,
        appId: str,
        domainName: str
    ) -> AmplifyGetDomainAssociationResult: ...

    def get_job(self, *,
        appId: str,
        branchName: str,
        jobId: str
    ) -> AmplifyGetJobResult: ...

    def list_apps(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> AmplifyListAppsResult: ...

    def list_branches(self, *,
        appId: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> AmplifyListBranchesResult: ...

    def list_domain_associations(self, *,
        appId: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> AmplifyListDomainAssociationsResult: ...

    def list_jobs(self, *,
        appId: str,
        branchName: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> AmplifyListJobsResult: ...

    def start_job(self, *,
        appId: str,
        branchName: str,
        jobType: str,
        jobId: str = ...,
        jobReason: str = ...,
        commitId: str = ...,
        commitMessage: str = ...,
        commitTime: datetime.datetime = ...
    ) -> AmplifyStartJobResult: ...

    def stop_job(self, *,
        appId: str,
        branchName: str,
        jobId: str
    ) -> AmplifyStopJobResult: ...

    def update_app(self, *,
        appId: str,
        name: str = ...,
        description: str = ...,
        platform: str = ...,
        iamServiceRoleArn: str = ...,
        environmentVariables: Dict[str, str] = ...,
        enableBranchAutoBuild: bool = ...,
        enableBasicAuth: bool = ...,
        basicAuthCredentials: str = ...,
        customRules: List[AmplifyCustomRule] = ...,
        buildSpec: str = ...
    ) -> AmplifyUpdateAppResult: ...

    def update_branch(self, *,
        appId: str,
        branchName: str,
        description: str = ...,
        framework: str = ...,
        stage: str = ...,
        enableNotification: bool = ...,
        enableAutoBuild: bool = ...,
        environmentVariables: Dict[str, str] = ...,
        basicAuthCredentials: str = ...,
        enableBasicAuth: bool = ...,
        buildSpec: str = ...,
        ttl: str = ...
    ) -> AmplifyUpdateBranchResult: ...

    def update_domain_association(self, *,
        appId: str,
        domainName: str,
        subDomainSettings: List[AmplifySubDomainSetting],
        enableAutoSubDomain: bool = ...
    ) -> AmplifyUpdateDomainAssociationResult: ...


AmplifyCustomRule = TypedDict(
    'AmplifyCustomRule', {
        'Source': str,
        'Target': str,
        'Status': Optional[str],
        'Condition': Optional[str],
    }
)


AmplifyProductionBranch = TypedDict(
    'AmplifyProductionBranch', {
        'LastDeployTime': Optional[datetime.datetime],
        'Status': Optional[str],
        'ThumbnailUrl': Optional[str],
        'BranchName': Optional[str],
    }
)


AmplifyApp = TypedDict(
    'AmplifyApp', {
        'AppId': str,
        'AppArn': str,
        'Name': str,
        'Description': str,
        'Repository': str,
        'Platform': str,
        'CreateTime': datetime.datetime,
        'UpdateTime': datetime.datetime,
        'EnvironmentVariables': Dict[str, str],
        'DefaultDomain': str,
        'EnableBranchAutoBuild': bool,
        'EnableBasicAuth': bool,
        'Tags': Optional[Dict[str, str]],
        'ServiceRoleArn': Optional[str],
        'BasicAuthCredentials': Optional[str],
        'CustomRules': Optional[List[AmplifyCustomRule]],
        'ProductionBranch': Optional[AmplifyProductionBranch],
        'BuildSpec': Optional[str],
    }
)


AmplifyCreateAppResult = TypedDict(
    'AmplifyCreateAppResult', {
        'App': AmplifyApp,
    }
)


AmplifyBranch = TypedDict(
    'AmplifyBranch', {
        'BranchArn': str,
        'BranchName': str,
        'Description': str,
        'Stage': str,
        'EnableNotification': bool,
        'CreateTime': datetime.datetime,
        'UpdateTime': datetime.datetime,
        'EnvironmentVariables': Dict[str, str],
        'EnableAutoBuild': bool,
        'CustomDomains': List[str],
        'Framework': str,
        'ActiveJobId': str,
        'TotalNumberOfJobs': str,
        'EnableBasicAuth': bool,
        'TTL': str,
        'Tags': Optional[Dict[str, str]],
        'DisplayName': Optional[str],
        'ThumbnailUrl': Optional[str],
        'BasicAuthCredentials': Optional[str],
        'BuildSpec': Optional[str],
    }
)


AmplifyCreateBranchResult = TypedDict(
    'AmplifyCreateBranchResult', {
        'Branch': AmplifyBranch,
    }
)


AmplifySubDomainSetting = TypedDict(
    'AmplifySubDomainSetting', {
        'DomainPrefix': str,
        'BranchName': str,
    }
)


AmplifySubDomain = TypedDict(
    'AmplifySubDomain', {
        'SubDomainSetting': AmplifySubDomainSetting,
        'Verified': bool,
        'DNSRecord': str,
    }
)


AmplifyDomainAssociation = TypedDict(
    'AmplifyDomainAssociation', {
        'DomainAssociationArn': str,
        'DomainName': str,
        'EnableAutoSubDomain': bool,
        'DomainStatus': str,
        'StatusReason': str,
        'CertificateVerificationDNSRecord': str,
        'SubDomains': List[AmplifySubDomain],
    }
)


AmplifyCreateDomainAssociationResult = TypedDict(
    'AmplifyCreateDomainAssociationResult', {
        'DomainAssociation': AmplifyDomainAssociation,
    }
)


AmplifyDeleteAppResult = TypedDict(
    'AmplifyDeleteAppResult', {
        'App': AmplifyApp,
    }
)


AmplifyDeleteBranchResult = TypedDict(
    'AmplifyDeleteBranchResult', {
        'Branch': AmplifyBranch,
    }
)


AmplifyDeleteDomainAssociationResult = TypedDict(
    'AmplifyDeleteDomainAssociationResult', {
        'DomainAssociation': AmplifyDomainAssociation,
    }
)


AmplifyJobSummary = TypedDict(
    'AmplifyJobSummary', {
        'JobArn': str,
        'JobId': str,
        'CommitId': str,
        'CommitMessage': str,
        'CommitTime': datetime.datetime,
        'StartTime': datetime.datetime,
        'JobStatus': str,
        'JobType': str,
        'EndTime': Optional[datetime.datetime],
    }
)


AmplifyDeleteJobResult = TypedDict(
    'AmplifyDeleteJobResult', {
        'JobSummary': AmplifyJobSummary,
    }
)


AmplifyGetAppResult = TypedDict(
    'AmplifyGetAppResult', {
        'App': AmplifyApp,
    }
)


AmplifyGetBranchResult = TypedDict(
    'AmplifyGetBranchResult', {
        'Branch': AmplifyBranch,
    }
)


AmplifyGetDomainAssociationResult = TypedDict(
    'AmplifyGetDomainAssociationResult', {
        'DomainAssociation': AmplifyDomainAssociation,
    }
)


AmplifyStep = TypedDict(
    'AmplifyStep', {
        'StepName': str,
        'StartTime': datetime.datetime,
        'JobStatus': str,
        'EndTime': datetime.datetime,
        'LogUrl': Optional[str],
        'ArtifactsUrl': Optional[str],
        'Screenshots': Optional[Dict[str, str]],
    }
)


AmplifyJob = TypedDict(
    'AmplifyJob', {
        'JobSummary': AmplifyJobSummary,
        'Steps': List[AmplifyStep],
    }
)


AmplifyGetJobResult = TypedDict(
    'AmplifyGetJobResult', {
        'Job': AmplifyJob,
    }
)


AmplifyListAppsResult = TypedDict(
    'AmplifyListAppsResult', {
        'Apps': List[AmplifyApp],
        'NextToken': Optional[str],
    }
)


AmplifyListBranchesResult = TypedDict(
    'AmplifyListBranchesResult', {
        'Branches': List[AmplifyBranch],
        'NextToken': Optional[str],
    }
)


AmplifyListDomainAssociationsResult = TypedDict(
    'AmplifyListDomainAssociationsResult', {
        'DomainAssociations': List[AmplifyDomainAssociation],
        'NextToken': Optional[str],
    }
)


AmplifyListJobsResult = TypedDict(
    'AmplifyListJobsResult', {
        'JobSummaries': List[AmplifyJobSummary],
        'NextToken': Optional[str],
    }
)


AmplifyStartJobResult = TypedDict(
    'AmplifyStartJobResult', {
        'JobSummary': AmplifyJobSummary,
    }
)


AmplifyStopJobResult = TypedDict(
    'AmplifyStopJobResult', {
        'JobSummary': AmplifyJobSummary,
    }
)


AmplifyUpdateAppResult = TypedDict(
    'AmplifyUpdateAppResult', {
        'App': AmplifyApp,
    }
)


AmplifyUpdateBranchResult = TypedDict(
    'AmplifyUpdateBranchResult', {
        'Branch': AmplifyBranch,
    }
)


AmplifyUpdateDomainAssociationResult = TypedDict(
    'AmplifyUpdateDomainAssociationResult', {
        'DomainAssociation': AmplifyDomainAssociation,
    }
)


class APIGateway(BaseClient):
    def create_api_key(self, *,
        name: str = ...,
        description: str = ...,
        enabled: bool = ...,
        generateDistinctId: bool = ...,
        value: str = ...,
        stageKeys: List[APIGatewayStageKey] = ...,
        customerId: str = ...
    ) -> APIGatewayApiKey: ...

    def create_authorizer(self, *,
        restApiId: str,
        name: str,
        type: str,
        providerARNs: List[str] = ...,
        authType: str = ...,
        authorizerUri: str = ...,
        authorizerCredentials: str = ...,
        identitySource: str = ...,
        identityValidationExpression: str = ...,
        authorizerResultTtlInSeconds: int = ...
    ) -> APIGatewayAuthorizer: ...

    def create_base_path_mapping(self, *,
        domainName: str,
        restApiId: str,
        basePath: str = ...,
        stage: str = ...
    ) -> APIGatewayBasePathMapping: ...

    def create_deployment(self, *,
        restApiId: str,
        stageName: str = ...,
        stageDescription: str = ...,
        description: str = ...,
        cacheClusterEnabled: bool = ...,
        cacheClusterSize: str = ...,
        variables: Dict[str, str] = ...,
        canarySettings: APIGatewayDeploymentCanarySettings = ...,
        tracingEnabled: bool = ...
    ) -> APIGatewayDeployment: ...

    def create_documentation_part(self, *,
        restApiId: str,
        location: APIGatewayDocumentationPartLocation,
        properties: str
    ) -> APIGatewayDocumentationPart: ...

    def create_documentation_version(self, *,
        restApiId: str,
        documentationVersion: str,
        stageName: str = ...,
        description: str = ...
    ) -> APIGatewayDocumentationVersion: ...

    def create_domain_name(self, *,
        domainName: str,
        certificateName: str = ...,
        certificateBody: str = ...,
        certificatePrivateKey: str = ...,
        certificateChain: str = ...,
        certificateArn: str = ...,
        regionalCertificateName: str = ...,
        regionalCertificateArn: str = ...,
        endpointConfiguration: APIGatewayEndpointConfiguration = ...
    ) -> APIGatewayDomainName: ...

    def create_model(self, *,
        restApiId: str,
        name: str,
        contentType: str,
        description: str = ...,
        schema: str = ...
    ) -> APIGatewayModel: ...

    def create_request_validator(self, *,
        restApiId: str,
        name: str = ...,
        validateRequestBody: bool = ...,
        validateRequestParameters: bool = ...
    ) -> APIGatewayRequestValidator: ...

    def create_resource(self, *,
        restApiId: str,
        parentId: str,
        pathPart: str
    ) -> APIGatewayResource: ...

    def create_rest_api(self, *,
        name: str,
        description: str = ...,
        version: str = ...,
        cloneFrom: str = ...,
        binaryMediaTypes: List[str] = ...,
        minimumCompressionSize: int = ...,
        apiKeySource: str = ...,
        endpointConfiguration: APIGatewayEndpointConfiguration = ...,
        policy: str = ...
    ) -> APIGatewayRestApi: ...

    def create_stage(self, *,
        restApiId: str,
        stageName: str,
        deploymentId: str,
        description: str = ...,
        cacheClusterEnabled: bool = ...,
        cacheClusterSize: str = ...,
        variables: Dict[str, str] = ...,
        documentationVersion: str = ...,
        canarySettings: APIGatewayCanarySettings = ...,
        tracingEnabled: bool = ...,
        tags: Dict[str, str] = ...
    ) -> APIGatewayStage: ...

    def create_usage_plan(self, *,
        name: str,
        description: str = ...,
        apiStages: List[APIGatewayApiStage] = ...,
        throttle: APIGatewayThrottleSettings = ...,
        quota: APIGatewayQuotaSettings = ...
    ) -> APIGatewayUsagePlan: ...

    def create_usage_plan_key(self, *,
        usagePlanId: str,
        keyId: str,
        keyType: str
    ) -> APIGatewayUsagePlanKey: ...

    def create_vpc_link(self, *,
        name: str,
        targetArns: List[str],
        description: str = ...
    ) -> APIGatewayVpcLink: ...

    def delete_api_key(self, *,
        apiKey: str
    ): ...

    def delete_authorizer(self, *,
        restApiId: str,
        authorizerId: str
    ): ...

    def delete_base_path_mapping(self, *,
        domainName: str,
        basePath: str
    ): ...

    def delete_client_certificate(self, *,
        clientCertificateId: str
    ): ...

    def delete_deployment(self, *,
        restApiId: str,
        deploymentId: str
    ): ...

    def delete_documentation_part(self, *,
        restApiId: str,
        documentationPartId: str
    ): ...

    def delete_documentation_version(self, *,
        restApiId: str,
        documentationVersion: str
    ): ...

    def delete_domain_name(self, *,
        domainName: str
    ): ...

    def delete_gateway_response(self, *,
        restApiId: str,
        responseType: str
    ): ...

    def delete_integration(self, *,
        restApiId: str,
        resourceId: str,
        httpMethod: str
    ): ...

    def delete_integration_response(self, *,
        restApiId: str,
        resourceId: str,
        httpMethod: str,
        statusCode: str
    ): ...

    def delete_method(self, *,
        restApiId: str,
        resourceId: str,
        httpMethod: str
    ): ...

    def delete_method_response(self, *,
        restApiId: str,
        resourceId: str,
        httpMethod: str,
        statusCode: str
    ): ...

    def delete_model(self, *,
        restApiId: str,
        modelName: str
    ): ...

    def delete_request_validator(self, *,
        restApiId: str,
        requestValidatorId: str
    ): ...

    def delete_resource(self, *,
        restApiId: str,
        resourceId: str
    ): ...

    def delete_rest_api(self, *,
        restApiId: str
    ): ...

    def delete_stage(self, *,
        restApiId: str,
        stageName: str
    ): ...

    def delete_usage_plan(self, *,
        usagePlanId: str
    ): ...

    def delete_usage_plan_key(self, *,
        usagePlanId: str,
        keyId: str
    ): ...

    def delete_vpc_link(self, *,
        vpcLinkId: str
    ): ...

    def flush_stage_authorizers_cache(self, *,
        restApiId: str,
        stageName: str
    ): ...

    def flush_stage_cache(self, *,
        restApiId: str,
        stageName: str
    ): ...

    def generate_client_certificate(self, *,
        description: str = ...
    ) -> APIGatewayClientCertificate: ...

    def get_account(self) -> APIGatewayAccount: ...

    def get_api_key(self, *,
        apiKey: str,
        includeValue: bool = ...
    ) -> APIGatewayApiKey: ...

    def get_api_keys(self, *,
        position: str = ...,
        limit: int = ...,
        nameQuery: str = ...,
        customerId: str = ...,
        includeValues: bool = ...
    ) -> APIGatewayApiKeys: ...

    def get_authorizer(self, *,
        restApiId: str,
        authorizerId: str
    ) -> APIGatewayAuthorizer: ...

    def get_authorizers(self, *,
        restApiId: str,
        position: str = ...,
        limit: int = ...
    ) -> APIGatewayAuthorizers: ...

    def get_base_path_mapping(self, *,
        domainName: str,
        basePath: str
    ) -> APIGatewayBasePathMapping: ...

    def get_base_path_mappings(self, *,
        domainName: str,
        position: str = ...,
        limit: int = ...
    ) -> APIGatewayBasePathMappings: ...

    def get_client_certificate(self, *,
        clientCertificateId: str
    ) -> APIGatewayClientCertificate: ...

    def get_client_certificates(self, *,
        position: str = ...,
        limit: int = ...
    ) -> APIGatewayClientCertificates: ...

    def get_deployment(self, *,
        restApiId: str,
        deploymentId: str,
        embed: List[str] = ...
    ) -> APIGatewayDeployment: ...

    def get_deployments(self, *,
        restApiId: str,
        position: str = ...,
        limit: int = ...
    ) -> APIGatewayDeployments: ...

    def get_documentation_part(self, *,
        restApiId: str,
        documentationPartId: str
    ) -> APIGatewayDocumentationPart: ...

    def get_documentation_parts(self, *,
        restApiId: str,
        type: str = ...,
        nameQuery: str = ...,
        path: str = ...,
        position: str = ...,
        limit: int = ...,
        locationStatus: str = ...
    ) -> APIGatewayDocumentationParts: ...

    def get_documentation_version(self, *,
        restApiId: str,
        documentationVersion: str
    ) -> APIGatewayDocumentationVersion: ...

    def get_documentation_versions(self, *,
        restApiId: str,
        position: str = ...,
        limit: int = ...
    ) -> APIGatewayDocumentationVersions: ...

    def get_domain_name(self, *,
        domainName: str
    ) -> APIGatewayDomainName: ...

    def get_domain_names(self, *,
        position: str = ...,
        limit: int = ...
    ) -> APIGatewayDomainNames: ...

    def get_export(self, *,
        restApiId: str,
        stageName: str,
        exportType: str,
        parameters: Dict[str, str] = ...,
        accepts: str = ...
    ) -> APIGatewayExportResponse: ...

    def get_gateway_response(self, *,
        restApiId: str,
        responseType: str
    ) -> APIGatewayGatewayResponse: ...

    def get_gateway_responses(self, *,
        restApiId: str,
        position: str = ...,
        limit: int = ...
    ) -> APIGatewayGatewayResponses: ...

    def get_integration(self, *,
        restApiId: str,
        resourceId: str,
        httpMethod: str
    ) -> APIGatewayIntegration: ...

    def get_integration_response(self, *,
        restApiId: str,
        resourceId: str,
        httpMethod: str,
        statusCode: str
    ) -> APIGatewayIntegrationResponse: ...

    def get_method(self, *,
        restApiId: str,
        resourceId: str,
        httpMethod: str
    ) -> APIGatewayMethod: ...

    def get_method_response(self, *,
        restApiId: str,
        resourceId: str,
        httpMethod: str,
        statusCode: str
    ) -> APIGatewayMethodResponse: ...

    def get_model(self, *,
        restApiId: str,
        modelName: str,
        flatten: bool = ...
    ) -> APIGatewayModel: ...

    def get_model_template(self, *,
        restApiId: str,
        modelName: str
    ) -> APIGatewayTemplate: ...

    def get_models(self, *,
        restApiId: str,
        position: str = ...,
        limit: int = ...
    ) -> APIGatewayModels: ...

    def get_request_validator(self, *,
        restApiId: str,
        requestValidatorId: str
    ) -> APIGatewayRequestValidator: ...

    def get_request_validators(self, *,
        restApiId: str,
        position: str = ...,
        limit: int = ...
    ) -> APIGatewayRequestValidators: ...

    def get_resource(self, *,
        restApiId: str,
        resourceId: str,
        embed: List[str] = ...
    ) -> APIGatewayResource: ...

    def get_resources(self, *,
        restApiId: str,
        position: str = ...,
        limit: int = ...,
        embed: List[str] = ...
    ) -> APIGatewayResources: ...

    def get_rest_api(self, *,
        restApiId: str
    ) -> APIGatewayRestApi: ...

    def get_rest_apis(self, *,
        position: str = ...,
        limit: int = ...
    ) -> APIGatewayRestApis: ...

    def get_sdk(self, *,
        restApiId: str,
        stageName: str,
        sdkType: str,
        parameters: Dict[str, str] = ...
    ) -> APIGatewaySdkResponse: ...

    def get_sdk_type(self, *,
        id: str
    ) -> APIGatewaySdkType: ...

    def get_sdk_types(self, *,
        position: str = ...,
        limit: int = ...
    ) -> APIGatewaySdkTypes: ...

    def get_stage(self, *,
        restApiId: str,
        stageName: str
    ) -> APIGatewayStage: ...

    def get_stages(self, *,
        restApiId: str,
        deploymentId: str = ...
    ) -> APIGatewayStages: ...

    def get_tags(self, *,
        resourceArn: str,
        position: str = ...,
        limit: int = ...
    ) -> APIGatewayTags: ...

    def get_usage(self, *,
        usagePlanId: str,
        startDate: str,
        endDate: str,
        keyId: str = ...,
        position: str = ...,
        limit: int = ...
    ) -> APIGatewayUsage: ...

    def get_usage_plan(self, *,
        usagePlanId: str
    ) -> APIGatewayUsagePlan: ...

    def get_usage_plan_key(self, *,
        usagePlanId: str,
        keyId: str
    ) -> APIGatewayUsagePlanKey: ...

    def get_usage_plan_keys(self, *,
        usagePlanId: str,
        position: str = ...,
        limit: int = ...,
        nameQuery: str = ...
    ) -> APIGatewayUsagePlanKeys: ...

    def get_usage_plans(self, *,
        position: str = ...,
        keyId: str = ...,
        limit: int = ...
    ) -> APIGatewayUsagePlans: ...

    def get_vpc_link(self, *,
        vpcLinkId: str
    ) -> APIGatewayVpcLink: ...

    def get_vpc_links(self, *,
        position: str = ...,
        limit: int = ...
    ) -> APIGatewayVpcLinks: ...

    def import_api_keys(self, *,
        body: bytes,
        format: str,
        failOnWarnings: bool = ...
    ) -> APIGatewayApiKeyIds: ...

    def import_documentation_parts(self, *,
        restApiId: str,
        body: bytes,
        mode: str = ...,
        failOnWarnings: bool = ...
    ) -> APIGatewayDocumentationPartIds: ...

    def import_rest_api(self, *,
        body: bytes,
        failOnWarnings: bool = ...,
        parameters: Dict[str, str] = ...
    ) -> APIGatewayRestApi: ...

    def put_gateway_response(self, *,
        restApiId: str,
        responseType: str,
        statusCode: str = ...,
        responseParameters: Dict[str, str] = ...,
        responseTemplates: Dict[str, str] = ...
    ) -> APIGatewayGatewayResponse: ...

    def put_integration(self, *,
        restApiId: str,
        resourceId: str,
        httpMethod: str,
        type: str,
        integrationHttpMethod: str = ...,
        uri: str = ...,
        connectionType: str = ...,
        connectionId: str = ...,
        credentials: str = ...,
        requestParameters: Dict[str, str] = ...,
        requestTemplates: Dict[str, str] = ...,
        passthroughBehavior: str = ...,
        cacheNamespace: str = ...,
        cacheKeyParameters: List[str] = ...,
        contentHandling: str = ...,
        timeoutInMillis: int = ...
    ) -> APIGatewayIntegration: ...

    def put_integration_response(self, *,
        restApiId: str,
        resourceId: str,
        httpMethod: str,
        statusCode: str,
        selectionPattern: str = ...,
        responseParameters: Dict[str, str] = ...,
        responseTemplates: Dict[str, str] = ...,
        contentHandling: str = ...
    ) -> APIGatewayIntegrationResponse: ...

    def put_method(self, *,
        restApiId: str,
        resourceId: str,
        httpMethod: str,
        authorizationType: str,
        authorizerId: str = ...,
        apiKeyRequired: bool = ...,
        operationName: str = ...,
        requestParameters: Dict[str, bool] = ...,
        requestModels: Dict[str, str] = ...,
        requestValidatorId: str = ...,
        authorizationScopes: List[str] = ...
    ) -> APIGatewayMethod: ...

    def put_method_response(self, *,
        restApiId: str,
        resourceId: str,
        httpMethod: str,
        statusCode: str,
        responseParameters: Dict[str, bool] = ...,
        responseModels: Dict[str, str] = ...
    ) -> APIGatewayMethodResponse: ...

    def put_rest_api(self, *,
        restApiId: str,
        body: bytes,
        mode: str = ...,
        failOnWarnings: bool = ...,
        parameters: Dict[str, str] = ...
    ) -> APIGatewayRestApi: ...

    def tag_resource(self, *,
        resourceArn: str,
        tags: Dict[str, str]
    ): ...

    def test_invoke_authorizer(self, *,
        restApiId: str,
        authorizerId: str,
        headers: Dict[str, str] = ...,
        multiValueHeaders: Dict[str, List[str]] = ...,
        pathWithQueryString: str = ...,
        body: str = ...,
        stageVariables: Dict[str, str] = ...,
        additionalContext: Dict[str, str] = ...
    ) -> APIGatewayTestInvokeAuthorizerResponse: ...

    def test_invoke_method(self, *,
        restApiId: str,
        resourceId: str,
        httpMethod: str,
        pathWithQueryString: str = ...,
        body: str = ...,
        headers: Dict[str, str] = ...,
        multiValueHeaders: Dict[str, List[str]] = ...,
        clientCertificateId: str = ...,
        stageVariables: Dict[str, str] = ...
    ) -> APIGatewayTestInvokeMethodResponse: ...

    def untag_resource(self, *,
        resourceArn: str,
        tagKeys: List[str]
    ): ...

    def update_account(self, *,
        patchOperations: List[APIGatewayPatchOperation] = ...
    ) -> APIGatewayAccount: ...

    def update_api_key(self, *,
        apiKey: str,
        patchOperations: List[APIGatewayPatchOperation] = ...
    ) -> APIGatewayApiKey: ...

    def update_authorizer(self, *,
        restApiId: str,
        authorizerId: str,
        patchOperations: List[APIGatewayPatchOperation] = ...
    ) -> APIGatewayAuthorizer: ...

    def update_base_path_mapping(self, *,
        domainName: str,
        basePath: str,
        patchOperations: List[APIGatewayPatchOperation] = ...
    ) -> APIGatewayBasePathMapping: ...

    def update_client_certificate(self, *,
        clientCertificateId: str,
        patchOperations: List[APIGatewayPatchOperation] = ...
    ) -> APIGatewayClientCertificate: ...

    def update_deployment(self, *,
        restApiId: str,
        deploymentId: str,
        patchOperations: List[APIGatewayPatchOperation] = ...
    ) -> APIGatewayDeployment: ...

    def update_documentation_part(self, *,
        restApiId: str,
        documentationPartId: str,
        patchOperations: List[APIGatewayPatchOperation] = ...
    ) -> APIGatewayDocumentationPart: ...

    def update_documentation_version(self, *,
        restApiId: str,
        documentationVersion: str,
        patchOperations: List[APIGatewayPatchOperation] = ...
    ) -> APIGatewayDocumentationVersion: ...

    def update_domain_name(self, *,
        domainName: str,
        patchOperations: List[APIGatewayPatchOperation] = ...
    ) -> APIGatewayDomainName: ...

    def update_gateway_response(self, *,
        restApiId: str,
        responseType: str,
        patchOperations: List[APIGatewayPatchOperation] = ...
    ) -> APIGatewayGatewayResponse: ...

    def update_integration(self, *,
        restApiId: str,
        resourceId: str,
        httpMethod: str,
        patchOperations: List[APIGatewayPatchOperation] = ...
    ) -> APIGatewayIntegration: ...

    def update_integration_response(self, *,
        restApiId: str,
        resourceId: str,
        httpMethod: str,
        statusCode: str,
        patchOperations: List[APIGatewayPatchOperation] = ...
    ) -> APIGatewayIntegrationResponse: ...

    def update_method(self, *,
        restApiId: str,
        resourceId: str,
        httpMethod: str,
        patchOperations: List[APIGatewayPatchOperation] = ...
    ) -> APIGatewayMethod: ...

    def update_method_response(self, *,
        restApiId: str,
        resourceId: str,
        httpMethod: str,
        statusCode: str,
        patchOperations: List[APIGatewayPatchOperation] = ...
    ) -> APIGatewayMethodResponse: ...

    def update_model(self, *,
        restApiId: str,
        modelName: str,
        patchOperations: List[APIGatewayPatchOperation] = ...
    ) -> APIGatewayModel: ...

    def update_request_validator(self, *,
        restApiId: str,
        requestValidatorId: str,
        patchOperations: List[APIGatewayPatchOperation] = ...
    ) -> APIGatewayRequestValidator: ...

    def update_resource(self, *,
        restApiId: str,
        resourceId: str,
        patchOperations: List[APIGatewayPatchOperation] = ...
    ) -> APIGatewayResource: ...

    def update_rest_api(self, *,
        restApiId: str,
        patchOperations: List[APIGatewayPatchOperation] = ...
    ) -> APIGatewayRestApi: ...

    def update_stage(self, *,
        restApiId: str,
        stageName: str,
        patchOperations: List[APIGatewayPatchOperation] = ...
    ) -> APIGatewayStage: ...

    def update_usage(self, *,
        usagePlanId: str,
        keyId: str,
        patchOperations: List[APIGatewayPatchOperation] = ...
    ) -> APIGatewayUsage: ...

    def update_usage_plan(self, *,
        usagePlanId: str,
        patchOperations: List[APIGatewayPatchOperation] = ...
    ) -> APIGatewayUsagePlan: ...

    def update_vpc_link(self, *,
        vpcLinkId: str,
        patchOperations: List[APIGatewayPatchOperation] = ...
    ) -> APIGatewayVpcLink: ...


APIGatewayStageKey = TypedDict(
    'APIGatewayStageKey', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


APIGatewayApiKey = TypedDict(
    'APIGatewayApiKey', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'ListOfString': Optional[List[str]],
    }
)


APIGatewayAuthorizer = TypedDict(
    'APIGatewayAuthorizer', {
        'String': Optional[str],
        'String': Optional[str],
        'AuthorizerType': Optional[str],
        'ListOfARNs': Optional[List[str]],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'NullableInteger': Optional[int],
    }
)


APIGatewayBasePathMapping = TypedDict(
    'APIGatewayBasePathMapping', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


APIGatewayDeploymentCanarySettings = TypedDict(
    'APIGatewayDeploymentCanarySettings', {
        'Double': Optional[float],
        'MapOfStringToString': Optional[Dict[str, str]],
        'Boolean': Optional[bool],
    }
)


APIGatewayMethodSnapshot = TypedDict(
    'APIGatewayMethodSnapshot', {
        'String': Optional[str],
        'Boolean': Optional[bool],
    }
)


APIGatewayDeployment = TypedDict(
    'APIGatewayDeployment', {
        'String': Optional[str],
        'String': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'PathToMapOfMethodSnapshot': Optional[Dict[str, Dict[str, APIGatewayMethodSnapshot]]],
    }
)


APIGatewayDocumentationPartLocation = TypedDict(
    'APIGatewayDocumentationPartLocation', {
        'DocumentationPartType': str,
        'String': Optional[str],
        'String': Optional[str],
        'DocumentationPartLocationStatusCode': Optional[str],
        'String': Optional[str],
    }
)


APIGatewayDocumentationPart = TypedDict(
    'APIGatewayDocumentationPart', {
        'String': Optional[str],
        'DocumentationPartLocation': Optional[APIGatewayDocumentationPartLocation],
        'String': Optional[str],
    }
)


APIGatewayDocumentationVersion = TypedDict(
    'APIGatewayDocumentationVersion', {
        'String': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'String': Optional[str],
    }
)


APIGatewayEndpointConfiguration = TypedDict(
    'APIGatewayEndpointConfiguration', {
        'ListOfEndpointType': Optional[List[str]],
    }
)


APIGatewayDomainName = TypedDict(
    'APIGatewayDomainName', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'EndpointConfiguration': Optional[APIGatewayEndpointConfiguration],
    }
)


APIGatewayModel = TypedDict(
    'APIGatewayModel', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


APIGatewayRequestValidator = TypedDict(
    'APIGatewayRequestValidator', {
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
    }
)


APIGatewayMethodResponse = TypedDict(
    'APIGatewayMethodResponse', {
        'StatusCode': Optional[str],
        'MapOfStringToBoolean': Optional[Dict[str, bool]],
        'MapOfStringToString': Optional[Dict[str, str]],
    }
)


APIGatewayIntegrationResponse = TypedDict(
    'APIGatewayIntegrationResponse', {
        'StatusCode': Optional[str],
        'String': Optional[str],
        'MapOfStringToString': Optional[Dict[str, str]],
        'MapOfStringToString': Optional[Dict[str, str]],
        'ContentHandlingStrategy': Optional[str],
    }
)


APIGatewayIntegration = TypedDict(
    'APIGatewayIntegration', {
        'IntegrationType': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'ConnectionType': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'MapOfStringToString': Optional[Dict[str, str]],
        'MapOfStringToString': Optional[Dict[str, str]],
        'String': Optional[str],
        'ContentHandlingStrategy': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'ListOfString': Optional[List[str]],
        'MapOfIntegrationResponse': Optional[Dict[str, APIGatewayIntegrationResponse]],
    }
)


APIGatewayMethod = TypedDict(
    'APIGatewayMethod', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'NullableBoolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'MapOfStringToBoolean': Optional[Dict[str, bool]],
        'MapOfStringToString': Optional[Dict[str, str]],
        'MapOfMethodResponse': Optional[Dict[str, APIGatewayMethodResponse]],
        'Integration': Optional[APIGatewayIntegration],
        'ListOfString': Optional[List[str]],
    }
)


APIGatewayResource = TypedDict(
    'APIGatewayResource', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'MapOfMethod': Optional[Dict[str, APIGatewayMethod]],
    }
)


APIGatewayRestApi = TypedDict(
    'APIGatewayRestApi', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'String': Optional[str],
        'ListOfString': Optional[List[str]],
        'ListOfString': Optional[List[str]],
        'NullableInteger': Optional[int],
        'ApiKeySourceType': Optional[str],
        'EndpointConfiguration': Optional[APIGatewayEndpointConfiguration],
        'String': Optional[str],
    }
)


APIGatewayCanarySettings = TypedDict(
    'APIGatewayCanarySettings', {
        'Double': Optional[float],
        'String': Optional[str],
        'MapOfStringToString': Optional[Dict[str, str]],
        'Boolean': Optional[bool],
    }
)


APIGatewayMethodSetting = TypedDict(
    'APIGatewayMethodSetting', {
        'Boolean': Optional[bool],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Integer': Optional[int],
        'Double': Optional[float],
        'Boolean': Optional[bool],
        'Integer': Optional[int],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'UnauthorizedCacheControlHeaderStrategy': Optional[str],
    }
)


APIGatewayAccessLogSettings = TypedDict(
    'APIGatewayAccessLogSettings', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


APIGatewayStage = TypedDict(
    'APIGatewayStage', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'CacheClusterSize': Optional[str],
        'CacheClusterStatus': Optional[str],
        'MapOfMethodSettings': Optional[Dict[str, APIGatewayMethodSetting]],
        'MapOfStringToString': Optional[Dict[str, str]],
        'String': Optional[str],
        'AccessLogSettings': Optional[APIGatewayAccessLogSettings],
        'CanarySettings': Optional[APIGatewayCanarySettings],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'MapOfStringToString': Optional[Dict[str, str]],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


APIGatewayThrottleSettings = TypedDict(
    'APIGatewayThrottleSettings', {
        'Integer': Optional[int],
        'Double': Optional[float],
    }
)


APIGatewayApiStage = TypedDict(
    'APIGatewayApiStage', {
        'String': Optional[str],
        'String': Optional[str],
        'MapOfApiStageThrottleSettings': Optional[Dict[str, APIGatewayThrottleSettings]],
    }
)


APIGatewayQuotaSettings = TypedDict(
    'APIGatewayQuotaSettings', {
        'Integer': Optional[int],
        'Integer': Optional[int],
        'QuotaPeriodType': Optional[str],
    }
)


APIGatewayUsagePlan = TypedDict(
    'APIGatewayUsagePlan', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'ListOfApiStage': Optional[List[APIGatewayApiStage]],
        'ThrottleSettings': Optional[APIGatewayThrottleSettings],
        'QuotaSettings': Optional[APIGatewayQuotaSettings],
        'String': Optional[str],
    }
)


APIGatewayUsagePlanKey = TypedDict(
    'APIGatewayUsagePlanKey', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


APIGatewayVpcLink = TypedDict(
    'APIGatewayVpcLink', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'ListOfString': Optional[List[str]],
        'VpcLinkStatus': Optional[str],
        'String': Optional[str],
    }
)


APIGatewayClientCertificate = TypedDict(
    'APIGatewayClientCertificate', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


APIGatewayAccount = TypedDict(
    'APIGatewayAccount', {
        'String': Optional[str],
        'ThrottleSettings': Optional[APIGatewayThrottleSettings],
        'ListOfString': Optional[List[str]],
        'String': Optional[str],
    }
)


APIGatewayApiKeys = TypedDict(
    'APIGatewayApiKeys', {
        'ListOfString': Optional[List[str]],
        'String': Optional[str],
        'ListOfApiKey': Optional[List[APIGatewayApiKey]],
    }
)


APIGatewayAuthorizers = TypedDict(
    'APIGatewayAuthorizers', {
        'String': Optional[str],
        'ListOfAuthorizer': Optional[List[APIGatewayAuthorizer]],
    }
)


APIGatewayBasePathMappings = TypedDict(
    'APIGatewayBasePathMappings', {
        'String': Optional[str],
        'ListOfBasePathMapping': Optional[List[APIGatewayBasePathMapping]],
    }
)


APIGatewayClientCertificates = TypedDict(
    'APIGatewayClientCertificates', {
        'String': Optional[str],
        'ListOfClientCertificate': Optional[List[APIGatewayClientCertificate]],
    }
)


APIGatewayDeployments = TypedDict(
    'APIGatewayDeployments', {
        'String': Optional[str],
        'ListOfDeployment': Optional[List[APIGatewayDeployment]],
    }
)


APIGatewayDocumentationParts = TypedDict(
    'APIGatewayDocumentationParts', {
        'String': Optional[str],
        'ListOfDocumentationPart': Optional[List[APIGatewayDocumentationPart]],
    }
)


APIGatewayDocumentationVersions = TypedDict(
    'APIGatewayDocumentationVersions', {
        'String': Optional[str],
        'ListOfDocumentationVersion': Optional[List[APIGatewayDocumentationVersion]],
    }
)


APIGatewayDomainNames = TypedDict(
    'APIGatewayDomainNames', {
        'String': Optional[str],
        'ListOfDomainName': Optional[List[APIGatewayDomainName]],
    }
)


APIGatewayExportResponse = TypedDict(
    'APIGatewayExportResponse', {
        'String': Optional[str],
        'String': Optional[str],
        'Blob': Optional[bytes],
    }
)


APIGatewayGatewayResponse = TypedDict(
    'APIGatewayGatewayResponse', {
        'GatewayResponseType': Optional[str],
        'StatusCode': Optional[str],
        'MapOfStringToString': Optional[Dict[str, str]],
        'MapOfStringToString': Optional[Dict[str, str]],
        'Boolean': Optional[bool],
    }
)


APIGatewayGatewayResponses = TypedDict(
    'APIGatewayGatewayResponses', {
        'String': Optional[str],
        'ListOfGatewayResponse': Optional[List[APIGatewayGatewayResponse]],
    }
)


APIGatewayTemplate = TypedDict(
    'APIGatewayTemplate', {
        'String': Optional[str],
    }
)


APIGatewayModels = TypedDict(
    'APIGatewayModels', {
        'String': Optional[str],
        'ListOfModel': Optional[List[APIGatewayModel]],
    }
)


APIGatewayRequestValidators = TypedDict(
    'APIGatewayRequestValidators', {
        'String': Optional[str],
        'ListOfRequestValidator': Optional[List[APIGatewayRequestValidator]],
    }
)


APIGatewayResources = TypedDict(
    'APIGatewayResources', {
        'String': Optional[str],
        'ListOfResource': Optional[List[APIGatewayResource]],
    }
)


APIGatewayRestApis = TypedDict(
    'APIGatewayRestApis', {
        'String': Optional[str],
        'ListOfRestApi': Optional[List[APIGatewayRestApi]],
    }
)


APIGatewaySdkResponse = TypedDict(
    'APIGatewaySdkResponse', {
        'String': Optional[str],
        'String': Optional[str],
        'Blob': Optional[bytes],
    }
)


APIGatewaySdkConfigurationProperty = TypedDict(
    'APIGatewaySdkConfigurationProperty', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
    }
)


APIGatewaySdkType = TypedDict(
    'APIGatewaySdkType', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'ListOfSdkConfigurationProperty': Optional[List[APIGatewaySdkConfigurationProperty]],
    }
)


APIGatewaySdkTypes = TypedDict(
    'APIGatewaySdkTypes', {
        'String': Optional[str],
        'ListOfSdkType': Optional[List[APIGatewaySdkType]],
    }
)


APIGatewayStages = TypedDict(
    'APIGatewayStages', {
        'ListOfStage': Optional[List[APIGatewayStage]],
    }
)


APIGatewayTags = TypedDict(
    'APIGatewayTags', {
        'MapOfStringToString': Optional[Dict[str, str]],
    }
)


APIGatewayUsage = TypedDict(
    'APIGatewayUsage', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'MapOfKeyUsages': Optional[Dict[str, List[List[int]]]],
    }
)


APIGatewayUsagePlanKeys = TypedDict(
    'APIGatewayUsagePlanKeys', {
        'String': Optional[str],
        'ListOfUsagePlanKey': Optional[List[APIGatewayUsagePlanKey]],
    }
)


APIGatewayUsagePlans = TypedDict(
    'APIGatewayUsagePlans', {
        'String': Optional[str],
        'ListOfUsagePlan': Optional[List[APIGatewayUsagePlan]],
    }
)


APIGatewayVpcLinks = TypedDict(
    'APIGatewayVpcLinks', {
        'String': Optional[str],
        'ListOfVpcLink': Optional[List[APIGatewayVpcLink]],
    }
)


APIGatewayApiKeyIds = TypedDict(
    'APIGatewayApiKeyIds', {
        'ListOfString': Optional[List[str]],
        'ListOfString': Optional[List[str]],
    }
)


APIGatewayDocumentationPartIds = TypedDict(
    'APIGatewayDocumentationPartIds', {
        'ListOfString': Optional[List[str]],
        'ListOfString': Optional[List[str]],
    }
)


APIGatewayTestInvokeAuthorizerResponse = TypedDict(
    'APIGatewayTestInvokeAuthorizerResponse', {
        'Integer': Optional[int],
        'String': Optional[str],
        'Long': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'MapOfStringToList': Optional[Dict[str, List[str]]],
        'MapOfStringToString': Optional[Dict[str, str]],
    }
)


APIGatewayTestInvokeMethodResponse = TypedDict(
    'APIGatewayTestInvokeMethodResponse', {
        'Integer': Optional[int],
        'String': Optional[str],
        'MapOfStringToString': Optional[Dict[str, str]],
        'MapOfStringToList': Optional[Dict[str, List[str]]],
        'String': Optional[str],
        'Long': Optional[int],
    }
)


APIGatewayPatchOperation = TypedDict(
    'APIGatewayPatchOperation', {
        'Op': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


class ApiGatewayManagementApi(BaseClient):
    def post_to_connection(self, *,
        Data: bytes,
        ConnectionId: str
    ): ...


class ApiGatewayV2(BaseClient):
    def create_api(self, *,
        Name: str,
        ProtocolType: str,
        RouteSelectionExpression: str,
        ApiKeySelectionExpression: str = ...,
        Description: str = ...,
        DisableSchemaValidation: bool = ...,
        Version: str = ...
    ) -> ApiGatewayV2CreateApiResponse: ...

    def create_api_mapping(self, *,
        ApiId: str,
        DomainName: str,
        Stage: str,
        ApiMappingKey: str = ...
    ) -> ApiGatewayV2CreateApiMappingResponse: ...

    def create_authorizer(self, *,
        ApiId: str,
        Name: str,
        AuthorizerCredentialsArn: str = ...,
        AuthorizerResultTtlInSeconds: int = ...,
        AuthorizerType: str = ...,
        AuthorizerUri: str = ...,
        IdentitySource: List[str] = ...,
        IdentityValidationExpression: str = ...,
        ProviderArns: List[str] = ...
    ) -> ApiGatewayV2CreateAuthorizerResponse: ...

    def create_deployment(self, *,
        ApiId: str,
        Description: str = ...,
        StageName: str = ...
    ) -> ApiGatewayV2CreateDeploymentResponse: ...

    def create_domain_name(self, *,
        DomainName: str,
        DomainNameConfigurations: List[ApiGatewayV2DomainNameConfiguration] = ...
    ) -> ApiGatewayV2CreateDomainNameResponse: ...

    def create_integration(self, *,
        ApiId: str,
        ConnectionId: str = ...,
        ConnectionType: str = ...,
        ContentHandlingStrategy: str = ...,
        CredentialsArn: str = ...,
        Description: str = ...,
        IntegrationMethod: str = ...,
        IntegrationType: str = ...,
        IntegrationUri: str = ...,
        PassthroughBehavior: str = ...,
        RequestParameters: Dict[str, str] = ...,
        RequestTemplates: Dict[str, str] = ...,
        TemplateSelectionExpression: str = ...,
        TimeoutInMillis: int = ...
    ) -> ApiGatewayV2CreateIntegrationResult: ...

    def create_integration_response(self, *,
        ApiId: str,
        IntegrationId: str,
        IntegrationResponseKey: str,
        ContentHandlingStrategy: str = ...,
        ResponseParameters: Dict[str, str] = ...,
        ResponseTemplates: Dict[str, str] = ...,
        TemplateSelectionExpression: str = ...
    ) -> ApiGatewayV2CreateIntegrationResponseResponse: ...

    def create_model(self, *,
        ApiId: str,
        Name: str,
        ContentType: str = ...,
        Description: str = ...,
        Schema: str = ...
    ) -> ApiGatewayV2CreateModelResponse: ...

    def create_route(self, *,
        ApiId: str,
        RouteKey: str,
        ApiKeyRequired: bool = ...,
        AuthorizationScopes: List[str] = ...,
        AuthorizationType: str = ...,
        AuthorizerId: str = ...,
        ModelSelectionExpression: str = ...,
        OperationName: str = ...,
        RequestModels: Dict[str, str] = ...,
        RequestParameters: Dict[str, ApiGatewayV2ParameterConstraints] = ...,
        RouteResponseSelectionExpression: str = ...,
        Target: str = ...
    ) -> ApiGatewayV2CreateRouteResult: ...

    def create_route_response(self, *,
        ApiId: str,
        RouteId: str,
        RouteResponseKey: str,
        ModelSelectionExpression: str = ...,
        ResponseModels: Dict[str, str] = ...,
        ResponseParameters: Dict[str, ApiGatewayV2ParameterConstraints] = ...
    ) -> ApiGatewayV2CreateRouteResponseResponse: ...

    def create_stage(self, *,
        ApiId: str,
        StageName: str,
        AccessLogSettings: ApiGatewayV2AccessLogSettings = ...,
        ClientCertificateId: str = ...,
        DefaultRouteSettings: ApiGatewayV2RouteSettings = ...,
        DeploymentId: str = ...,
        Description: str = ...,
        RouteSettings: Dict[str, ApiGatewayV2RouteSettings] = ...,
        StageVariables: Dict[str, str] = ...
    ) -> ApiGatewayV2CreateStageResponse: ...

    def delete_api(self, *,
        ApiId: str
    ): ...

    def delete_api_mapping(self, *,
        ApiId: str,
        ApiMappingId: str,
        DomainName: str
    ): ...

    def delete_authorizer(self, *,
        ApiId: str,
        AuthorizerId: str
    ): ...

    def delete_deployment(self, *,
        ApiId: str,
        DeploymentId: str
    ): ...

    def delete_domain_name(self, *,
        DomainName: str
    ): ...

    def delete_integration(self, *,
        ApiId: str,
        IntegrationId: str
    ): ...

    def delete_integration_response(self, *,
        ApiId: str,
        IntegrationId: str,
        IntegrationResponseId: str
    ): ...

    def delete_model(self, *,
        ApiId: str,
        ModelId: str
    ): ...

    def delete_route(self, *,
        ApiId: str,
        RouteId: str
    ): ...

    def delete_route_response(self, *,
        ApiId: str,
        RouteId: str,
        RouteResponseId: str
    ): ...

    def delete_stage(self, *,
        ApiId: str,
        StageName: str
    ): ...

    def get_api(self, *,
        ApiId: str
    ) -> ApiGatewayV2GetApiResponse: ...

    def get_api_mapping(self, *,
        ApiId: str,
        ApiMappingId: str,
        DomainName: str
    ) -> ApiGatewayV2GetApiMappingResponse: ...

    def get_api_mappings(self, *,
        DomainName: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> ApiGatewayV2GetApiMappingsResponse: ...

    def get_apis(self, *,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> ApiGatewayV2GetApisResponse: ...

    def get_authorizer(self, *,
        ApiId: str,
        AuthorizerId: str
    ) -> ApiGatewayV2GetAuthorizerResponse: ...

    def get_authorizers(self, *,
        ApiId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> ApiGatewayV2GetAuthorizersResponse: ...

    def get_deployment(self, *,
        ApiId: str,
        DeploymentId: str
    ) -> ApiGatewayV2GetDeploymentResponse: ...

    def get_deployments(self, *,
        ApiId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> ApiGatewayV2GetDeploymentsResponse: ...

    def get_domain_name(self, *,
        DomainName: str
    ) -> ApiGatewayV2GetDomainNameResponse: ...

    def get_domain_names(self, *,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> ApiGatewayV2GetDomainNamesResponse: ...

    def get_integration(self, *,
        ApiId: str,
        IntegrationId: str
    ) -> ApiGatewayV2GetIntegrationResult: ...

    def get_integration_response(self, *,
        ApiId: str,
        IntegrationId: str,
        IntegrationResponseId: str
    ) -> ApiGatewayV2GetIntegrationResponseResponse: ...

    def get_integration_responses(self, *,
        ApiId: str,
        IntegrationId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> ApiGatewayV2GetIntegrationResponsesResponse: ...

    def get_integrations(self, *,
        ApiId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> ApiGatewayV2GetIntegrationsResponse: ...

    def get_model(self, *,
        ApiId: str,
        ModelId: str
    ) -> ApiGatewayV2GetModelResponse: ...

    def get_model_template(self, *,
        ApiId: str,
        ModelId: str
    ) -> ApiGatewayV2GetModelTemplateResponse: ...

    def get_models(self, *,
        ApiId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> ApiGatewayV2GetModelsResponse: ...

    def get_route(self, *,
        ApiId: str,
        RouteId: str
    ) -> ApiGatewayV2GetRouteResult: ...

    def get_route_response(self, *,
        ApiId: str,
        RouteId: str,
        RouteResponseId: str
    ) -> ApiGatewayV2GetRouteResponseResponse: ...

    def get_route_responses(self, *,
        ApiId: str,
        RouteId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> ApiGatewayV2GetRouteResponsesResponse: ...

    def get_routes(self, *,
        ApiId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> ApiGatewayV2GetRoutesResponse: ...

    def get_stage(self, *,
        ApiId: str,
        StageName: str
    ) -> ApiGatewayV2GetStageResponse: ...

    def get_stages(self, *,
        ApiId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> ApiGatewayV2GetStagesResponse: ...

    def update_api(self, *,
        ApiId: str,
        ApiKeySelectionExpression: str = ...,
        Description: str = ...,
        DisableSchemaValidation: bool = ...,
        Name: str = ...,
        RouteSelectionExpression: str = ...,
        Version: str = ...
    ) -> ApiGatewayV2UpdateApiResponse: ...

    def update_api_mapping(self, *,
        ApiId: str,
        ApiMappingId: str,
        DomainName: str,
        ApiMappingKey: str = ...,
        Stage: str = ...
    ) -> ApiGatewayV2UpdateApiMappingResponse: ...

    def update_authorizer(self, *,
        ApiId: str,
        AuthorizerId: str,
        AuthorizerCredentialsArn: str = ...,
        AuthorizerResultTtlInSeconds: int = ...,
        AuthorizerType: str = ...,
        AuthorizerUri: str = ...,
        IdentitySource: List[str] = ...,
        IdentityValidationExpression: str = ...,
        Name: str = ...,
        ProviderArns: List[str] = ...
    ) -> ApiGatewayV2UpdateAuthorizerResponse: ...

    def update_deployment(self, *,
        ApiId: str,
        DeploymentId: str,
        Description: str = ...
    ) -> ApiGatewayV2UpdateDeploymentResponse: ...

    def update_domain_name(self, *,
        DomainName: str,
        DomainNameConfigurations: List[ApiGatewayV2DomainNameConfiguration] = ...
    ) -> ApiGatewayV2UpdateDomainNameResponse: ...

    def update_integration(self, *,
        ApiId: str,
        IntegrationId: str,
        ConnectionId: str = ...,
        ConnectionType: str = ...,
        ContentHandlingStrategy: str = ...,
        CredentialsArn: str = ...,
        Description: str = ...,
        IntegrationMethod: str = ...,
        IntegrationType: str = ...,
        IntegrationUri: str = ...,
        PassthroughBehavior: str = ...,
        RequestParameters: Dict[str, str] = ...,
        RequestTemplates: Dict[str, str] = ...,
        TemplateSelectionExpression: str = ...,
        TimeoutInMillis: int = ...
    ) -> ApiGatewayV2UpdateIntegrationResult: ...

    def update_integration_response(self, *,
        ApiId: str,
        IntegrationId: str,
        IntegrationResponseId: str,
        ContentHandlingStrategy: str = ...,
        IntegrationResponseKey: str = ...,
        ResponseParameters: Dict[str, str] = ...,
        ResponseTemplates: Dict[str, str] = ...,
        TemplateSelectionExpression: str = ...
    ) -> ApiGatewayV2UpdateIntegrationResponseResponse: ...

    def update_model(self, *,
        ApiId: str,
        ModelId: str,
        ContentType: str = ...,
        Description: str = ...,
        Name: str = ...,
        Schema: str = ...
    ) -> ApiGatewayV2UpdateModelResponse: ...

    def update_route(self, *,
        ApiId: str,
        RouteId: str,
        ApiKeyRequired: bool = ...,
        AuthorizationScopes: List[str] = ...,
        AuthorizationType: str = ...,
        AuthorizerId: str = ...,
        ModelSelectionExpression: str = ...,
        OperationName: str = ...,
        RequestModels: Dict[str, str] = ...,
        RequestParameters: Dict[str, ApiGatewayV2ParameterConstraints] = ...,
        RouteKey: str = ...,
        RouteResponseSelectionExpression: str = ...,
        Target: str = ...
    ) -> ApiGatewayV2UpdateRouteResult: ...

    def update_route_response(self, *,
        ApiId: str,
        RouteId: str,
        RouteResponseId: str,
        ModelSelectionExpression: str = ...,
        ResponseModels: Dict[str, str] = ...,
        ResponseParameters: Dict[str, ApiGatewayV2ParameterConstraints] = ...,
        RouteResponseKey: str = ...
    ) -> ApiGatewayV2UpdateRouteResponseResponse: ...

    def update_stage(self, *,
        ApiId: str,
        StageName: str,
        AccessLogSettings: ApiGatewayV2AccessLogSettings = ...,
        ClientCertificateId: str = ...,
        DefaultRouteSettings: ApiGatewayV2RouteSettings = ...,
        DeploymentId: str = ...,
        Description: str = ...,
        RouteSettings: Dict[str, ApiGatewayV2RouteSettings] = ...,
        StageVariables: Dict[str, str] = ...
    ) -> ApiGatewayV2UpdateStageResponse: ...


ApiGatewayV2CreateApiResponse = TypedDict(
    'ApiGatewayV2CreateApiResponse', {
        '__string': Optional[str],
        'Id': Optional[str],
        'SelectionExpression': Optional[str],
        '__timestampIso8601': Optional[datetime.datetime],
        'StringWithLengthBetween0And1024': Optional[str],
        '__boolean': Optional[bool],
        'StringWithLengthBetween1And128': Optional[str],
        'ProtocolType': Optional[str],
        'SelectionExpression': Optional[str],
        'StringWithLengthBetween1And64': Optional[str],
        '__listOf__string': Optional[List[str]],
    }
)


ApiGatewayV2CreateApiMappingResponse = TypedDict(
    'ApiGatewayV2CreateApiMappingResponse', {
        'Id': Optional[str],
        'Id': Optional[str],
        'SelectionKey': Optional[str],
        'StringWithLengthBetween1And128': Optional[str],
    }
)


ApiGatewayV2CreateAuthorizerResponse = TypedDict(
    'ApiGatewayV2CreateAuthorizerResponse', {
        'Arn': Optional[str],
        'Id': Optional[str],
        'IntegerWithLengthBetween0And3600': Optional[int],
        'AuthorizerType': Optional[str],
        'UriWithLengthBetween1And2048': Optional[str],
        'IdentitySourceList': Optional[List[str]],
        'StringWithLengthBetween0And1024': Optional[str],
        'StringWithLengthBetween1And128': Optional[str],
        'ProviderArnList': Optional[List[str]],
    }
)


ApiGatewayV2CreateDeploymentResponse = TypedDict(
    'ApiGatewayV2CreateDeploymentResponse', {
        '__timestampIso8601': Optional[datetime.datetime],
        'Id': Optional[str],
        'DeploymentStatus': Optional[str],
        '__string': Optional[str],
        'StringWithLengthBetween0And1024': Optional[str],
    }
)


ApiGatewayV2DomainNameConfiguration = TypedDict(
    'ApiGatewayV2DomainNameConfiguration', {
        '__string': Optional[str],
        'Arn': Optional[str],
        'StringWithLengthBetween1And128': Optional[str],
        '__timestampIso8601': Optional[datetime.datetime],
        'EndpointType': Optional[str],
        '__string': Optional[str],
    }
)


ApiGatewayV2CreateDomainNameResponse = TypedDict(
    'ApiGatewayV2CreateDomainNameResponse', {
        'SelectionExpression': Optional[str],
        'StringWithLengthBetween1And512': Optional[str],
        'DomainNameConfigurations': Optional[List[ApiGatewayV2DomainNameConfiguration]],
    }
)


ApiGatewayV2CreateIntegrationResult = TypedDict(
    'ApiGatewayV2CreateIntegrationResult', {
        'StringWithLengthBetween1And1024': Optional[str],
        'ConnectionType': Optional[str],
        'ContentHandlingStrategy': Optional[str],
        'Arn': Optional[str],
        'StringWithLengthBetween0And1024': Optional[str],
        'Id': Optional[str],
        'StringWithLengthBetween1And64': Optional[str],
        'SelectionExpression': Optional[str],
        'IntegrationType': Optional[str],
        'UriWithLengthBetween1And2048': Optional[str],
        'PassthroughBehavior': Optional[str],
        'IntegrationParameters': Optional[Dict[str, str]],
        'TemplateMap': Optional[Dict[str, str]],
        'SelectionExpression': Optional[str],
        'IntegerWithLengthBetween50And29000': Optional[int],
    }
)


ApiGatewayV2CreateIntegrationResponseResponse = TypedDict(
    'ApiGatewayV2CreateIntegrationResponseResponse', {
        'ContentHandlingStrategy': Optional[str],
        'Id': Optional[str],
        'SelectionKey': Optional[str],
        'IntegrationParameters': Optional[Dict[str, str]],
        'TemplateMap': Optional[Dict[str, str]],
        'SelectionExpression': Optional[str],
    }
)


ApiGatewayV2CreateModelResponse = TypedDict(
    'ApiGatewayV2CreateModelResponse', {
        'StringWithLengthBetween1And256': Optional[str],
        'StringWithLengthBetween0And1024': Optional[str],
        'Id': Optional[str],
        'StringWithLengthBetween1And128': Optional[str],
        'StringWithLengthBetween0And32K': Optional[str],
    }
)


ApiGatewayV2ParameterConstraints = TypedDict(
    'ApiGatewayV2ParameterConstraints', {
        '__boolean': Optional[bool],
    }
)


ApiGatewayV2CreateRouteResult = TypedDict(
    'ApiGatewayV2CreateRouteResult', {
        '__boolean': Optional[bool],
        'AuthorizationScopes': Optional[List[str]],
        'AuthorizationType': Optional[str],
        'Id': Optional[str],
        'SelectionExpression': Optional[str],
        'StringWithLengthBetween1And64': Optional[str],
        'RouteModels': Optional[Dict[str, str]],
        'RouteParameters': Optional[Dict[str, ApiGatewayV2ParameterConstraints]],
        'Id': Optional[str],
        'SelectionKey': Optional[str],
        'SelectionExpression': Optional[str],
        'StringWithLengthBetween1And128': Optional[str],
    }
)


ApiGatewayV2CreateRouteResponseResponse = TypedDict(
    'ApiGatewayV2CreateRouteResponseResponse', {
        'SelectionExpression': Optional[str],
        'RouteModels': Optional[Dict[str, str]],
        'RouteParameters': Optional[Dict[str, ApiGatewayV2ParameterConstraints]],
        'Id': Optional[str],
        'SelectionKey': Optional[str],
    }
)


ApiGatewayV2AccessLogSettings = TypedDict(
    'ApiGatewayV2AccessLogSettings', {
        'Arn': Optional[str],
        'StringWithLengthBetween1And1024': Optional[str],
    }
)


ApiGatewayV2RouteSettings = TypedDict(
    'ApiGatewayV2RouteSettings', {
        '__boolean': Optional[bool],
        '__boolean': Optional[bool],
        'LoggingLevel': Optional[str],
        '__integer': Optional[int],
        '__double': Optional[float],
    }
)


ApiGatewayV2CreateStageResponse = TypedDict(
    'ApiGatewayV2CreateStageResponse', {
        'AccessLogSettings': Optional[ApiGatewayV2AccessLogSettings],
        'Id': Optional[str],
        '__timestampIso8601': Optional[datetime.datetime],
        'RouteSettings': Optional[ApiGatewayV2RouteSettings],
        'Id': Optional[str],
        'StringWithLengthBetween0And1024': Optional[str],
        '__timestampIso8601': Optional[datetime.datetime],
        'RouteSettingsMap': Optional[Dict[str, ApiGatewayV2RouteSettings]],
        'StringWithLengthBetween1And128': Optional[str],
        'StageVariablesMap': Optional[Dict[str, str]],
    }
)


ApiGatewayV2GetApiResponse = TypedDict(
    'ApiGatewayV2GetApiResponse', {
        '__string': Optional[str],
        'Id': Optional[str],
        'SelectionExpression': Optional[str],
        '__timestampIso8601': Optional[datetime.datetime],
        'StringWithLengthBetween0And1024': Optional[str],
        '__boolean': Optional[bool],
        'StringWithLengthBetween1And128': Optional[str],
        'ProtocolType': Optional[str],
        'SelectionExpression': Optional[str],
        'StringWithLengthBetween1And64': Optional[str],
        '__listOf__string': Optional[List[str]],
    }
)


ApiGatewayV2GetApiMappingResponse = TypedDict(
    'ApiGatewayV2GetApiMappingResponse', {
        'Id': Optional[str],
        'Id': Optional[str],
        'SelectionKey': Optional[str],
        'StringWithLengthBetween1And128': Optional[str],
    }
)


ApiGatewayV2GetApiMappingsResponse = TypedDict(
    'ApiGatewayV2GetApiMappingsResponse', {
        'Id': Optional[str],
        'Id': Optional[str],
        'SelectionKey': Optional[str],
        'StringWithLengthBetween1And128': Optional[str],
    }
)


ApiGatewayV2Api = TypedDict(
    'ApiGatewayV2Api', {
        'StringWithLengthBetween1And128': str,
        'ProtocolType': str,
        'SelectionExpression': str,
        '__string': Optional[str],
        'Id': Optional[str],
        'SelectionExpression': Optional[str],
        '__timestampIso8601': Optional[datetime.datetime],
        'StringWithLengthBetween0And1024': Optional[str],
        '__boolean': Optional[bool],
        'StringWithLengthBetween1And64': Optional[str],
        '__listOf__string': Optional[List[str]],
    }
)


ApiGatewayV2GetApisResponse = TypedDict(
    'ApiGatewayV2GetApisResponse', {
        '__listOfApi': Optional[List[ApiGatewayV2Api]],
        'NextToken': Optional[str],
    }
)


ApiGatewayV2GetAuthorizerResponse = TypedDict(
    'ApiGatewayV2GetAuthorizerResponse', {
        'Arn': Optional[str],
        'Id': Optional[str],
        'IntegerWithLengthBetween0And3600': Optional[int],
        'AuthorizerType': Optional[str],
        'UriWithLengthBetween1And2048': Optional[str],
        'IdentitySourceList': Optional[List[str]],
        'StringWithLengthBetween0And1024': Optional[str],
        'StringWithLengthBetween1And128': Optional[str],
        'ProviderArnList': Optional[List[str]],
    }
)


ApiGatewayV2Authorizer = TypedDict(
    'ApiGatewayV2Authorizer', {
        'StringWithLengthBetween1And128': str,
        'Arn': Optional[str],
        'Id': Optional[str],
        'IntegerWithLengthBetween0And3600': Optional[int],
        'AuthorizerType': Optional[str],
        'UriWithLengthBetween1And2048': Optional[str],
        'IdentitySourceList': Optional[List[str]],
        'StringWithLengthBetween0And1024': Optional[str],
        'ProviderArnList': Optional[List[str]],
    }
)


ApiGatewayV2GetAuthorizersResponse = TypedDict(
    'ApiGatewayV2GetAuthorizersResponse', {
        '__listOfAuthorizer': Optional[List[ApiGatewayV2Authorizer]],
        'NextToken': Optional[str],
    }
)


ApiGatewayV2GetDeploymentResponse = TypedDict(
    'ApiGatewayV2GetDeploymentResponse', {
        '__timestampIso8601': Optional[datetime.datetime],
        'Id': Optional[str],
        'DeploymentStatus': Optional[str],
        '__string': Optional[str],
        'StringWithLengthBetween0And1024': Optional[str],
    }
)


ApiGatewayV2Deployment = TypedDict(
    'ApiGatewayV2Deployment', {
        '__timestampIso8601': Optional[datetime.datetime],
        'Id': Optional[str],
        'DeploymentStatus': Optional[str],
        '__string': Optional[str],
        'StringWithLengthBetween0And1024': Optional[str],
    }
)


ApiGatewayV2GetDeploymentsResponse = TypedDict(
    'ApiGatewayV2GetDeploymentsResponse', {
        '__listOfDeployment': Optional[List[ApiGatewayV2Deployment]],
        'NextToken': Optional[str],
    }
)


ApiGatewayV2GetDomainNameResponse = TypedDict(
    'ApiGatewayV2GetDomainNameResponse', {
        'SelectionExpression': Optional[str],
        'StringWithLengthBetween1And512': Optional[str],
        'DomainNameConfigurations': Optional[List[ApiGatewayV2DomainNameConfiguration]],
    }
)


ApiGatewayV2DomainName = TypedDict(
    'ApiGatewayV2DomainName', {
        'StringWithLengthBetween1And512': str,
        'SelectionExpression': Optional[str],
        'DomainNameConfigurations': Optional[List[ApiGatewayV2DomainNameConfiguration]],
    }
)


ApiGatewayV2GetDomainNamesResponse = TypedDict(
    'ApiGatewayV2GetDomainNamesResponse', {
        '__listOfDomainName': Optional[List[ApiGatewayV2DomainName]],
        'NextToken': Optional[str],
    }
)


ApiGatewayV2GetIntegrationResult = TypedDict(
    'ApiGatewayV2GetIntegrationResult', {
        'StringWithLengthBetween1And1024': Optional[str],
        'ConnectionType': Optional[str],
        'ContentHandlingStrategy': Optional[str],
        'Arn': Optional[str],
        'StringWithLengthBetween0And1024': Optional[str],
        'Id': Optional[str],
        'StringWithLengthBetween1And64': Optional[str],
        'SelectionExpression': Optional[str],
        'IntegrationType': Optional[str],
        'UriWithLengthBetween1And2048': Optional[str],
        'PassthroughBehavior': Optional[str],
        'IntegrationParameters': Optional[Dict[str, str]],
        'TemplateMap': Optional[Dict[str, str]],
        'SelectionExpression': Optional[str],
        'IntegerWithLengthBetween50And29000': Optional[int],
    }
)


ApiGatewayV2GetIntegrationResponseResponse = TypedDict(
    'ApiGatewayV2GetIntegrationResponseResponse', {
        'ContentHandlingStrategy': Optional[str],
        'Id': Optional[str],
        'SelectionKey': Optional[str],
        'IntegrationParameters': Optional[Dict[str, str]],
        'TemplateMap': Optional[Dict[str, str]],
        'SelectionExpression': Optional[str],
    }
)


ApiGatewayV2IntegrationResponse = TypedDict(
    'ApiGatewayV2IntegrationResponse', {
        'SelectionKey': str,
        'ContentHandlingStrategy': Optional[str],
        'Id': Optional[str],
        'IntegrationParameters': Optional[Dict[str, str]],
        'TemplateMap': Optional[Dict[str, str]],
        'SelectionExpression': Optional[str],
    }
)


ApiGatewayV2GetIntegrationResponsesResponse = TypedDict(
    'ApiGatewayV2GetIntegrationResponsesResponse', {
        '__listOfIntegrationResponse': Optional[List[ApiGatewayV2IntegrationResponse]],
        'NextToken': Optional[str],
    }
)


ApiGatewayV2Integration = TypedDict(
    'ApiGatewayV2Integration', {
        'StringWithLengthBetween1And1024': Optional[str],
        'ConnectionType': Optional[str],
        'ContentHandlingStrategy': Optional[str],
        'Arn': Optional[str],
        'StringWithLengthBetween0And1024': Optional[str],
        'Id': Optional[str],
        'StringWithLengthBetween1And64': Optional[str],
        'SelectionExpression': Optional[str],
        'IntegrationType': Optional[str],
        'UriWithLengthBetween1And2048': Optional[str],
        'PassthroughBehavior': Optional[str],
        'IntegrationParameters': Optional[Dict[str, str]],
        'TemplateMap': Optional[Dict[str, str]],
        'SelectionExpression': Optional[str],
        'IntegerWithLengthBetween50And29000': Optional[int],
    }
)


ApiGatewayV2GetIntegrationsResponse = TypedDict(
    'ApiGatewayV2GetIntegrationsResponse', {
        '__listOfIntegration': Optional[List[ApiGatewayV2Integration]],
        'NextToken': Optional[str],
    }
)


ApiGatewayV2GetModelResponse = TypedDict(
    'ApiGatewayV2GetModelResponse', {
        'StringWithLengthBetween1And256': Optional[str],
        'StringWithLengthBetween0And1024': Optional[str],
        'Id': Optional[str],
        'StringWithLengthBetween1And128': Optional[str],
        'StringWithLengthBetween0And32K': Optional[str],
    }
)


ApiGatewayV2GetModelTemplateResponse = TypedDict(
    'ApiGatewayV2GetModelTemplateResponse', {
        '__string': Optional[str],
    }
)


ApiGatewayV2Model = TypedDict(
    'ApiGatewayV2Model', {
        'StringWithLengthBetween1And128': str,
        'StringWithLengthBetween1And256': Optional[str],
        'StringWithLengthBetween0And1024': Optional[str],
        'Id': Optional[str],
        'StringWithLengthBetween0And32K': Optional[str],
    }
)


ApiGatewayV2GetModelsResponse = TypedDict(
    'ApiGatewayV2GetModelsResponse', {
        '__listOfModel': Optional[List[ApiGatewayV2Model]],
        'NextToken': Optional[str],
    }
)


ApiGatewayV2GetRouteResult = TypedDict(
    'ApiGatewayV2GetRouteResult', {
        '__boolean': Optional[bool],
        'AuthorizationScopes': Optional[List[str]],
        'AuthorizationType': Optional[str],
        'Id': Optional[str],
        'SelectionExpression': Optional[str],
        'StringWithLengthBetween1And64': Optional[str],
        'RouteModels': Optional[Dict[str, str]],
        'RouteParameters': Optional[Dict[str, ApiGatewayV2ParameterConstraints]],
        'Id': Optional[str],
        'SelectionKey': Optional[str],
        'SelectionExpression': Optional[str],
        'StringWithLengthBetween1And128': Optional[str],
    }
)


ApiGatewayV2GetRouteResponseResponse = TypedDict(
    'ApiGatewayV2GetRouteResponseResponse', {
        'SelectionExpression': Optional[str],
        'RouteModels': Optional[Dict[str, str]],
        'RouteParameters': Optional[Dict[str, ApiGatewayV2ParameterConstraints]],
        'Id': Optional[str],
        'SelectionKey': Optional[str],
    }
)


ApiGatewayV2RouteResponse = TypedDict(
    'ApiGatewayV2RouteResponse', {
        'SelectionKey': str,
        'SelectionExpression': Optional[str],
        'RouteModels': Optional[Dict[str, str]],
        'RouteParameters': Optional[Dict[str, ApiGatewayV2ParameterConstraints]],
        'Id': Optional[str],
    }
)


ApiGatewayV2GetRouteResponsesResponse = TypedDict(
    'ApiGatewayV2GetRouteResponsesResponse', {
        '__listOfRouteResponse': Optional[List[ApiGatewayV2RouteResponse]],
        'NextToken': Optional[str],
    }
)


ApiGatewayV2Route = TypedDict(
    'ApiGatewayV2Route', {
        'SelectionKey': str,
        '__boolean': Optional[bool],
        'AuthorizationScopes': Optional[List[str]],
        'AuthorizationType': Optional[str],
        'Id': Optional[str],
        'SelectionExpression': Optional[str],
        'StringWithLengthBetween1And64': Optional[str],
        'RouteModels': Optional[Dict[str, str]],
        'RouteParameters': Optional[Dict[str, ApiGatewayV2ParameterConstraints]],
        'Id': Optional[str],
        'SelectionExpression': Optional[str],
        'StringWithLengthBetween1And128': Optional[str],
    }
)


ApiGatewayV2GetRoutesResponse = TypedDict(
    'ApiGatewayV2GetRoutesResponse', {
        '__listOfRoute': Optional[List[ApiGatewayV2Route]],
        'NextToken': Optional[str],
    }
)


ApiGatewayV2GetStageResponse = TypedDict(
    'ApiGatewayV2GetStageResponse', {
        'AccessLogSettings': Optional[ApiGatewayV2AccessLogSettings],
        'Id': Optional[str],
        '__timestampIso8601': Optional[datetime.datetime],
        'RouteSettings': Optional[ApiGatewayV2RouteSettings],
        'Id': Optional[str],
        'StringWithLengthBetween0And1024': Optional[str],
        '__timestampIso8601': Optional[datetime.datetime],
        'RouteSettingsMap': Optional[Dict[str, ApiGatewayV2RouteSettings]],
        'StringWithLengthBetween1And128': Optional[str],
        'StageVariablesMap': Optional[Dict[str, str]],
    }
)


ApiGatewayV2Stage = TypedDict(
    'ApiGatewayV2Stage', {
        'StringWithLengthBetween1And128': str,
        'AccessLogSettings': Optional[ApiGatewayV2AccessLogSettings],
        'Id': Optional[str],
        '__timestampIso8601': Optional[datetime.datetime],
        'RouteSettings': Optional[ApiGatewayV2RouteSettings],
        'Id': Optional[str],
        'StringWithLengthBetween0And1024': Optional[str],
        '__timestampIso8601': Optional[datetime.datetime],
        'RouteSettingsMap': Optional[Dict[str, ApiGatewayV2RouteSettings]],
        'StageVariablesMap': Optional[Dict[str, str]],
    }
)


ApiGatewayV2GetStagesResponse = TypedDict(
    'ApiGatewayV2GetStagesResponse', {
        '__listOfStage': Optional[List[ApiGatewayV2Stage]],
        'NextToken': Optional[str],
    }
)


ApiGatewayV2UpdateApiResponse = TypedDict(
    'ApiGatewayV2UpdateApiResponse', {
        '__string': Optional[str],
        'Id': Optional[str],
        'SelectionExpression': Optional[str],
        '__timestampIso8601': Optional[datetime.datetime],
        'StringWithLengthBetween0And1024': Optional[str],
        '__boolean': Optional[bool],
        'StringWithLengthBetween1And128': Optional[str],
        'ProtocolType': Optional[str],
        'SelectionExpression': Optional[str],
        'StringWithLengthBetween1And64': Optional[str],
        '__listOf__string': Optional[List[str]],
    }
)


ApiGatewayV2UpdateApiMappingResponse = TypedDict(
    'ApiGatewayV2UpdateApiMappingResponse', {
        'Id': Optional[str],
        'Id': Optional[str],
        'SelectionKey': Optional[str],
        'StringWithLengthBetween1And128': Optional[str],
    }
)


ApiGatewayV2UpdateAuthorizerResponse = TypedDict(
    'ApiGatewayV2UpdateAuthorizerResponse', {
        'Arn': Optional[str],
        'Id': Optional[str],
        'IntegerWithLengthBetween0And3600': Optional[int],
        'AuthorizerType': Optional[str],
        'UriWithLengthBetween1And2048': Optional[str],
        'IdentitySourceList': Optional[List[str]],
        'StringWithLengthBetween0And1024': Optional[str],
        'StringWithLengthBetween1And128': Optional[str],
        'ProviderArnList': Optional[List[str]],
    }
)


ApiGatewayV2UpdateDeploymentResponse = TypedDict(
    'ApiGatewayV2UpdateDeploymentResponse', {
        '__timestampIso8601': Optional[datetime.datetime],
        'Id': Optional[str],
        'DeploymentStatus': Optional[str],
        '__string': Optional[str],
        'StringWithLengthBetween0And1024': Optional[str],
    }
)


ApiGatewayV2UpdateDomainNameResponse = TypedDict(
    'ApiGatewayV2UpdateDomainNameResponse', {
        'SelectionExpression': Optional[str],
        'StringWithLengthBetween1And512': Optional[str],
        'DomainNameConfigurations': Optional[List[ApiGatewayV2DomainNameConfiguration]],
    }
)


ApiGatewayV2UpdateIntegrationResult = TypedDict(
    'ApiGatewayV2UpdateIntegrationResult', {
        'StringWithLengthBetween1And1024': Optional[str],
        'ConnectionType': Optional[str],
        'ContentHandlingStrategy': Optional[str],
        'Arn': Optional[str],
        'StringWithLengthBetween0And1024': Optional[str],
        'Id': Optional[str],
        'StringWithLengthBetween1And64': Optional[str],
        'SelectionExpression': Optional[str],
        'IntegrationType': Optional[str],
        'UriWithLengthBetween1And2048': Optional[str],
        'PassthroughBehavior': Optional[str],
        'IntegrationParameters': Optional[Dict[str, str]],
        'TemplateMap': Optional[Dict[str, str]],
        'SelectionExpression': Optional[str],
        'IntegerWithLengthBetween50And29000': Optional[int],
    }
)


ApiGatewayV2UpdateIntegrationResponseResponse = TypedDict(
    'ApiGatewayV2UpdateIntegrationResponseResponse', {
        'ContentHandlingStrategy': Optional[str],
        'Id': Optional[str],
        'SelectionKey': Optional[str],
        'IntegrationParameters': Optional[Dict[str, str]],
        'TemplateMap': Optional[Dict[str, str]],
        'SelectionExpression': Optional[str],
    }
)


ApiGatewayV2UpdateModelResponse = TypedDict(
    'ApiGatewayV2UpdateModelResponse', {
        'StringWithLengthBetween1And256': Optional[str],
        'StringWithLengthBetween0And1024': Optional[str],
        'Id': Optional[str],
        'StringWithLengthBetween1And128': Optional[str],
        'StringWithLengthBetween0And32K': Optional[str],
    }
)


ApiGatewayV2UpdateRouteResult = TypedDict(
    'ApiGatewayV2UpdateRouteResult', {
        '__boolean': Optional[bool],
        'AuthorizationScopes': Optional[List[str]],
        'AuthorizationType': Optional[str],
        'Id': Optional[str],
        'SelectionExpression': Optional[str],
        'StringWithLengthBetween1And64': Optional[str],
        'RouteModels': Optional[Dict[str, str]],
        'RouteParameters': Optional[Dict[str, ApiGatewayV2ParameterConstraints]],
        'Id': Optional[str],
        'SelectionKey': Optional[str],
        'SelectionExpression': Optional[str],
        'StringWithLengthBetween1And128': Optional[str],
    }
)


ApiGatewayV2UpdateRouteResponseResponse = TypedDict(
    'ApiGatewayV2UpdateRouteResponseResponse', {
        'SelectionExpression': Optional[str],
        'RouteModels': Optional[Dict[str, str]],
        'RouteParameters': Optional[Dict[str, ApiGatewayV2ParameterConstraints]],
        'Id': Optional[str],
        'SelectionKey': Optional[str],
    }
)


ApiGatewayV2UpdateStageResponse = TypedDict(
    'ApiGatewayV2UpdateStageResponse', {
        'AccessLogSettings': Optional[ApiGatewayV2AccessLogSettings],
        'Id': Optional[str],
        '__timestampIso8601': Optional[datetime.datetime],
        'RouteSettings': Optional[ApiGatewayV2RouteSettings],
        'Id': Optional[str],
        'StringWithLengthBetween0And1024': Optional[str],
        '__timestampIso8601': Optional[datetime.datetime],
        'RouteSettingsMap': Optional[Dict[str, ApiGatewayV2RouteSettings]],
        'StringWithLengthBetween1And128': Optional[str],
        'StageVariablesMap': Optional[Dict[str, str]],
    }
)


class ApplicationAutoScaling(BaseClient):
    def delete_scaling_policy(self, *,
        PolicyName: str,
        ServiceNamespace: str,
        ResourceId: str,
        ScalableDimension: str
    ) -> ApplicationAutoScalingDeleteScalingPolicyResponse: ...

    def delete_scheduled_action(self, *,
        ServiceNamespace: str,
        ScheduledActionName: str,
        ResourceId: str,
        ScalableDimension: str
    ) -> ApplicationAutoScalingDeleteScheduledActionResponse: ...

    def deregister_scalable_target(self, *,
        ServiceNamespace: str,
        ResourceId: str,
        ScalableDimension: str
    ) -> ApplicationAutoScalingDeregisterScalableTargetResponse: ...

    def describe_scalable_targets(self, *,
        ServiceNamespace: str,
        ResourceIds: List[str] = ...,
        ScalableDimension: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ApplicationAutoScalingDescribeScalableTargetsResponse: ...

    def describe_scaling_activities(self, *,
        ServiceNamespace: str,
        ResourceId: str = ...,
        ScalableDimension: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ApplicationAutoScalingDescribeScalingActivitiesResponse: ...

    def describe_scaling_policies(self, *,
        ServiceNamespace: str,
        PolicyNames: List[str] = ...,
        ResourceId: str = ...,
        ScalableDimension: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ApplicationAutoScalingDescribeScalingPoliciesResponse: ...

    def describe_scheduled_actions(self, *,
        ServiceNamespace: str,
        ScheduledActionNames: List[str] = ...,
        ResourceId: str = ...,
        ScalableDimension: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ApplicationAutoScalingDescribeScheduledActionsResponse: ...

    def put_scaling_policy(self, *,
        PolicyName: str,
        ServiceNamespace: str,
        ResourceId: str,
        ScalableDimension: str,
        PolicyType: str = ...,
        StepScalingPolicyConfiguration: ApplicationAutoScalingStepScalingPolicyConfiguration = ...,
        TargetTrackingScalingPolicyConfiguration: ApplicationAutoScalingTargetTrackingScalingPolicyConfiguration = ...
    ) -> ApplicationAutoScalingPutScalingPolicyResponse: ...

    def put_scheduled_action(self, *,
        ServiceNamespace: str,
        ScheduledActionName: str,
        ResourceId: str,
        ScalableDimension: str,
        Schedule: str = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        ScalableTargetAction: ApplicationAutoScalingScalableTargetAction = ...
    ) -> ApplicationAutoScalingPutScheduledActionResponse: ...

    def register_scalable_target(self, *,
        ServiceNamespace: str,
        ResourceId: str,
        ScalableDimension: str,
        MinCapacity: int = ...,
        MaxCapacity: int = ...,
        RoleARN: str = ...
    ) -> ApplicationAutoScalingRegisterScalableTargetResponse: ...


ApplicationAutoScalingDeleteScalingPolicyResponse = TypedDict(
    'ApplicationAutoScalingDeleteScalingPolicyResponse', {
    }
)


ApplicationAutoScalingDeleteScheduledActionResponse = TypedDict(
    'ApplicationAutoScalingDeleteScheduledActionResponse', {
    }
)


ApplicationAutoScalingDeregisterScalableTargetResponse = TypedDict(
    'ApplicationAutoScalingDeregisterScalableTargetResponse', {
    }
)


ApplicationAutoScalingScalableTarget = TypedDict(
    'ApplicationAutoScalingScalableTarget', {
        'ServiceNamespace': str,
        'ResourceIdMaxLen1600': str,
        'ScalableDimension': str,
        'ResourceCapacity': int,
        'ResourceCapacity': int,
        'ResourceIdMaxLen1600': str,
        'TimestampType': datetime.datetime,
    }
)


ApplicationAutoScalingDescribeScalableTargetsResponse = TypedDict(
    'ApplicationAutoScalingDescribeScalableTargetsResponse', {
        'ScalableTargets': Optional[List[ApplicationAutoScalingScalableTarget]],
        'XmlString': Optional[str],
    }
)


ApplicationAutoScalingScalingActivity = TypedDict(
    'ApplicationAutoScalingScalingActivity', {
        'ResourceId': str,
        'ServiceNamespace': str,
        'ResourceIdMaxLen1600': str,
        'ScalableDimension': str,
        'XmlString': str,
        'XmlString': str,
        'TimestampType': datetime.datetime,
        'ScalingActivityStatusCode': str,
        'TimestampType': Optional[datetime.datetime],
        'XmlString': Optional[str],
        'XmlString': Optional[str],
    }
)


ApplicationAutoScalingDescribeScalingActivitiesResponse = TypedDict(
    'ApplicationAutoScalingDescribeScalingActivitiesResponse', {
        'ScalingActivities': Optional[List[ApplicationAutoScalingScalingActivity]],
        'XmlString': Optional[str],
    }
)


ApplicationAutoScalingStepAdjustment = TypedDict(
    'ApplicationAutoScalingStepAdjustment', {
        'ScalingAdjustment': int,
        'MetricScale': Optional[float],
        'MetricScale': Optional[float],
    }
)


ApplicationAutoScalingStepScalingPolicyConfiguration = TypedDict(
    'ApplicationAutoScalingStepScalingPolicyConfiguration', {
        'AdjustmentType': Optional[str],
        'StepAdjustments': Optional[List[ApplicationAutoScalingStepAdjustment]],
        'MinAdjustmentMagnitude': Optional[int],
        'Cooldown': Optional[int],
        'MetricAggregationType': Optional[str],
    }
)


ApplicationAutoScalingPredefinedMetricSpecification = TypedDict(
    'ApplicationAutoScalingPredefinedMetricSpecification', {
        'MetricType': str,
        'ResourceLabel': Optional[str],
    }
)


ApplicationAutoScalingMetricDimension = TypedDict(
    'ApplicationAutoScalingMetricDimension', {
        'MetricDimensionName': str,
        'MetricDimensionValue': str,
    }
)


ApplicationAutoScalingCustomizedMetricSpecification = TypedDict(
    'ApplicationAutoScalingCustomizedMetricSpecification', {
        'MetricName': str,
        'MetricNamespace': str,
        'MetricStatistic': str,
        'MetricDimensions': Optional[List[ApplicationAutoScalingMetricDimension]],
        'MetricUnit': Optional[str],
    }
)


ApplicationAutoScalingTargetTrackingScalingPolicyConfiguration = TypedDict(
    'ApplicationAutoScalingTargetTrackingScalingPolicyConfiguration', {
        'MetricScale': float,
        'PredefinedMetricSpecification': Optional[ApplicationAutoScalingPredefinedMetricSpecification],
        'CustomizedMetricSpecification': Optional[ApplicationAutoScalingCustomizedMetricSpecification],
        'Cooldown': Optional[int],
        'Cooldown': Optional[int],
        'DisableScaleIn': Optional[bool],
    }
)


ApplicationAutoScalingAlarm = TypedDict(
    'ApplicationAutoScalingAlarm', {
        'ResourceId': str,
        'ResourceId': str,
    }
)


ApplicationAutoScalingScalingPolicy = TypedDict(
    'ApplicationAutoScalingScalingPolicy', {
        'ResourceIdMaxLen1600': str,
        'PolicyName': str,
        'ServiceNamespace': str,
        'ResourceIdMaxLen1600': str,
        'ScalableDimension': str,
        'PolicyType': str,
        'TimestampType': datetime.datetime,
        'StepScalingPolicyConfiguration': Optional[ApplicationAutoScalingStepScalingPolicyConfiguration],
        'TargetTrackingScalingPolicyConfiguration': Optional[ApplicationAutoScalingTargetTrackingScalingPolicyConfiguration],
        'Alarms': Optional[List[ApplicationAutoScalingAlarm]],
    }
)


ApplicationAutoScalingDescribeScalingPoliciesResponse = TypedDict(
    'ApplicationAutoScalingDescribeScalingPoliciesResponse', {
        'ScalingPolicies': Optional[List[ApplicationAutoScalingScalingPolicy]],
        'XmlString': Optional[str],
    }
)


ApplicationAutoScalingScalableTargetAction = TypedDict(
    'ApplicationAutoScalingScalableTargetAction', {
        'ResourceCapacity': Optional[int],
        'ResourceCapacity': Optional[int],
    }
)


ApplicationAutoScalingScheduledAction = TypedDict(
    'ApplicationAutoScalingScheduledAction', {
        'ScheduledActionName': str,
        'ResourceIdMaxLen1600': str,
        'ServiceNamespace': str,
        'ResourceIdMaxLen1600': str,
        'ResourceIdMaxLen1600': str,
        'TimestampType': datetime.datetime,
        'ScalableDimension': Optional[str],
        'TimestampType': Optional[datetime.datetime],
        'TimestampType': Optional[datetime.datetime],
        'ScalableTargetAction': Optional[ApplicationAutoScalingScalableTargetAction],
    }
)


ApplicationAutoScalingDescribeScheduledActionsResponse = TypedDict(
    'ApplicationAutoScalingDescribeScheduledActionsResponse', {
        'ScheduledActions': Optional[List[ApplicationAutoScalingScheduledAction]],
        'XmlString': Optional[str],
    }
)


ApplicationAutoScalingPutScalingPolicyResponse = TypedDict(
    'ApplicationAutoScalingPutScalingPolicyResponse', {
        'ResourceIdMaxLen1600': str,
        'Alarms': Optional[List[ApplicationAutoScalingAlarm]],
    }
)


ApplicationAutoScalingPutScheduledActionResponse = TypedDict(
    'ApplicationAutoScalingPutScheduledActionResponse', {
    }
)


ApplicationAutoScalingRegisterScalableTargetResponse = TypedDict(
    'ApplicationAutoScalingRegisterScalableTargetResponse', {
    }
)


class AppMesh(BaseClient):
    def create_mesh(self, *,
        meshName: str,
        clientToken: str = ...,
        spec: AppMeshMeshSpec = ...,
        tags: List[AppMeshTagRef] = ...
    ) -> AppMeshCreateMeshOutput: ...

    def create_route(self, *,
        meshName: str,
        routeName: str,
        spec: AppMeshRouteSpec,
        virtualRouterName: str,
        clientToken: str = ...,
        tags: List[AppMeshTagRef] = ...
    ) -> AppMeshCreateRouteOutput: ...

    def create_virtual_node(self, *,
        meshName: str,
        spec: AppMeshVirtualNodeSpec,
        virtualNodeName: str,
        clientToken: str = ...,
        tags: List[AppMeshTagRef] = ...
    ) -> AppMeshCreateVirtualNodeOutput: ...

    def create_virtual_router(self, *,
        meshName: str,
        spec: AppMeshVirtualRouterSpec,
        virtualRouterName: str,
        clientToken: str = ...,
        tags: List[AppMeshTagRef] = ...
    ) -> AppMeshCreateVirtualRouterOutput: ...

    def create_virtual_service(self, *,
        meshName: str,
        spec: AppMeshVirtualServiceSpec,
        virtualServiceName: str,
        clientToken: str = ...,
        tags: List[AppMeshTagRef] = ...
    ) -> AppMeshCreateVirtualServiceOutput: ...

    def delete_mesh(self, *,
        meshName: str
    ) -> AppMeshDeleteMeshOutput: ...

    def delete_route(self, *,
        meshName: str,
        routeName: str,
        virtualRouterName: str
    ) -> AppMeshDeleteRouteOutput: ...

    def delete_virtual_node(self, *,
        meshName: str,
        virtualNodeName: str
    ) -> AppMeshDeleteVirtualNodeOutput: ...

    def delete_virtual_router(self, *,
        meshName: str,
        virtualRouterName: str
    ) -> AppMeshDeleteVirtualRouterOutput: ...

    def delete_virtual_service(self, *,
        meshName: str,
        virtualServiceName: str
    ) -> AppMeshDeleteVirtualServiceOutput: ...

    def describe_mesh(self, *,
        meshName: str
    ) -> AppMeshDescribeMeshOutput: ...

    def describe_route(self, *,
        meshName: str,
        routeName: str,
        virtualRouterName: str
    ) -> AppMeshDescribeRouteOutput: ...

    def describe_virtual_node(self, *,
        meshName: str,
        virtualNodeName: str
    ) -> AppMeshDescribeVirtualNodeOutput: ...

    def describe_virtual_router(self, *,
        meshName: str,
        virtualRouterName: str
    ) -> AppMeshDescribeVirtualRouterOutput: ...

    def describe_virtual_service(self, *,
        meshName: str,
        virtualServiceName: str
    ) -> AppMeshDescribeVirtualServiceOutput: ...

    def list_meshes(self, *,
        limit: int = ...,
        nextToken: str = ...
    ) -> AppMeshListMeshesOutput: ...

    def list_routes(self, *,
        meshName: str,
        virtualRouterName: str,
        limit: int = ...,
        nextToken: str = ...
    ) -> AppMeshListRoutesOutput: ...

    def list_tags_for_resource(self, *,
        resourceArn: str,
        limit: int = ...,
        nextToken: str = ...
    ) -> AppMeshListTagsForResourceOutput: ...

    def list_virtual_nodes(self, *,
        meshName: str,
        limit: int = ...,
        nextToken: str = ...
    ) -> AppMeshListVirtualNodesOutput: ...

    def list_virtual_routers(self, *,
        meshName: str,
        limit: int = ...,
        nextToken: str = ...
    ) -> AppMeshListVirtualRoutersOutput: ...

    def list_virtual_services(self, *,
        meshName: str,
        limit: int = ...,
        nextToken: str = ...
    ) -> AppMeshListVirtualServicesOutput: ...

    def tag_resource(self, *,
        resourceArn: str,
        tags: List[AppMeshTagRef]
    ) -> AppMeshTagResourceOutput: ...

    def untag_resource(self, *,
        resourceArn: str,
        tagKeys: List[str]
    ) -> AppMeshUntagResourceOutput: ...

    def update_mesh(self, *,
        meshName: str,
        clientToken: str = ...,
        spec: AppMeshMeshSpec = ...
    ) -> AppMeshUpdateMeshOutput: ...

    def update_route(self, *,
        meshName: str,
        routeName: str,
        spec: AppMeshRouteSpec,
        virtualRouterName: str,
        clientToken: str = ...
    ) -> AppMeshUpdateRouteOutput: ...

    def update_virtual_node(self, *,
        meshName: str,
        spec: AppMeshVirtualNodeSpec,
        virtualNodeName: str,
        clientToken: str = ...
    ) -> AppMeshUpdateVirtualNodeOutput: ...

    def update_virtual_router(self, *,
        meshName: str,
        spec: AppMeshVirtualRouterSpec,
        virtualRouterName: str,
        clientToken: str = ...
    ) -> AppMeshUpdateVirtualRouterOutput: ...

    def update_virtual_service(self, *,
        meshName: str,
        spec: AppMeshVirtualServiceSpec,
        virtualServiceName: str,
        clientToken: str = ...
    ) -> AppMeshUpdateVirtualServiceOutput: ...


AppMeshEgressFilter = TypedDict(
    'AppMeshEgressFilter', {
        'EgressFilterType': str,
    }
)


AppMeshMeshSpec = TypedDict(
    'AppMeshMeshSpec', {
        'EgressFilter': Optional[AppMeshEgressFilter],
    }
)


AppMeshTagRef = TypedDict(
    'AppMeshTagRef', {
        'TagKey': str,
        'TagValue': Optional[str],
    }
)


AppMeshResourceMetadata = TypedDict(
    'AppMeshResourceMetadata', {
        'Arn': str,
        'Timestamp': datetime.datetime,
        'Timestamp': datetime.datetime,
        'String': str,
        'Long': int,
    }
)


AppMeshMeshStatus = TypedDict(
    'AppMeshMeshStatus', {
        'MeshStatusCode': Optional[str],
    }
)


AppMeshMeshData = TypedDict(
    'AppMeshMeshData', {
        'ResourceName': str,
        'ResourceMetadata': AppMeshResourceMetadata,
        'MeshSpec': AppMeshMeshSpec,
        'MeshStatus': AppMeshMeshStatus,
    }
)


AppMeshCreateMeshOutput = TypedDict(
    'AppMeshCreateMeshOutput', {
        'MeshData': AppMeshMeshData,
    }
)


AppMeshWeightedTarget = TypedDict(
    'AppMeshWeightedTarget', {
        'ResourceName': str,
        'PercentInt': int,
    }
)


AppMeshHttpRouteAction = TypedDict(
    'AppMeshHttpRouteAction', {
        'WeightedTargets': List[AppMeshWeightedTarget],
    }
)


AppMeshHttpRouteMatch = TypedDict(
    'AppMeshHttpRouteMatch', {
        'String': str,
    }
)


AppMeshHttpRoute = TypedDict(
    'AppMeshHttpRoute', {
        'HttpRouteAction': AppMeshHttpRouteAction,
        'HttpRouteMatch': AppMeshHttpRouteMatch,
    }
)


AppMeshTcpRouteAction = TypedDict(
    'AppMeshTcpRouteAction', {
        'WeightedTargets': List[AppMeshWeightedTarget],
    }
)


AppMeshTcpRoute = TypedDict(
    'AppMeshTcpRoute', {
        'TcpRouteAction': AppMeshTcpRouteAction,
    }
)


AppMeshRouteSpec = TypedDict(
    'AppMeshRouteSpec', {
        'HttpRoute': Optional[AppMeshHttpRoute],
        'TcpRoute': Optional[AppMeshTcpRoute],
    }
)


AppMeshRouteStatus = TypedDict(
    'AppMeshRouteStatus', {
        'RouteStatusCode': str,
    }
)


AppMeshRouteData = TypedDict(
    'AppMeshRouteData', {
        'ResourceName': str,
        'ResourceMetadata': AppMeshResourceMetadata,
        'ResourceName': str,
        'RouteSpec': AppMeshRouteSpec,
        'RouteStatus': AppMeshRouteStatus,
        'ResourceName': str,
    }
)


AppMeshCreateRouteOutput = TypedDict(
    'AppMeshCreateRouteOutput', {
        'RouteData': AppMeshRouteData,
    }
)


AppMeshVirtualServiceBackend = TypedDict(
    'AppMeshVirtualServiceBackend', {
        'ServiceName': str,
    }
)


AppMeshBackend = TypedDict(
    'AppMeshBackend', {
        'VirtualServiceBackend': Optional[AppMeshVirtualServiceBackend],
    }
)


AppMeshHealthCheckPolicy = TypedDict(
    'AppMeshHealthCheckPolicy', {
        'HealthCheckThreshold': int,
        'HealthCheckIntervalMillis': int,
        'PortProtocol': str,
        'HealthCheckTimeoutMillis': int,
        'HealthCheckThreshold': int,
        'String': Optional[str],
        'PortNumber': Optional[int],
    }
)


AppMeshPortMapping = TypedDict(
    'AppMeshPortMapping', {
        'PortNumber': int,
        'PortProtocol': str,
    }
)


AppMeshListener = TypedDict(
    'AppMeshListener', {
        'PortMapping': AppMeshPortMapping,
        'HealthCheckPolicy': Optional[AppMeshHealthCheckPolicy],
    }
)


AppMeshFileAccessLog = TypedDict(
    'AppMeshFileAccessLog', {
        'FilePath': str,
    }
)


AppMeshAccessLog = TypedDict(
    'AppMeshAccessLog', {
        'FileAccessLog': Optional[AppMeshFileAccessLog],
    }
)


AppMeshLogging = TypedDict(
    'AppMeshLogging', {
        'AccessLog': Optional[AppMeshAccessLog],
    }
)


AppMeshDnsServiceDiscovery = TypedDict(
    'AppMeshDnsServiceDiscovery', {
        'Hostname': str,
    }
)


AppMeshServiceDiscovery = TypedDict(
    'AppMeshServiceDiscovery', {
        'DnsServiceDiscovery': Optional[AppMeshDnsServiceDiscovery],
    }
)


AppMeshVirtualNodeSpec = TypedDict(
    'AppMeshVirtualNodeSpec', {
        'Backends': Optional[List[AppMeshBackend]],
        'Listeners': Optional[List[AppMeshListener]],
        'Logging': Optional[AppMeshLogging],
        'ServiceDiscovery': Optional[AppMeshServiceDiscovery],
    }
)


AppMeshVirtualNodeStatus = TypedDict(
    'AppMeshVirtualNodeStatus', {
        'VirtualNodeStatusCode': str,
    }
)


AppMeshVirtualNodeData = TypedDict(
    'AppMeshVirtualNodeData', {
        'ResourceName': str,
        'ResourceMetadata': AppMeshResourceMetadata,
        'VirtualNodeSpec': AppMeshVirtualNodeSpec,
        'VirtualNodeStatus': AppMeshVirtualNodeStatus,
        'ResourceName': str,
    }
)


AppMeshCreateVirtualNodeOutput = TypedDict(
    'AppMeshCreateVirtualNodeOutput', {
        'VirtualNodeData': AppMeshVirtualNodeData,
    }
)


AppMeshVirtualRouterListener = TypedDict(
    'AppMeshVirtualRouterListener', {
        'PortMapping': AppMeshPortMapping,
    }
)


AppMeshVirtualRouterSpec = TypedDict(
    'AppMeshVirtualRouterSpec', {
        'VirtualRouterListeners': List[AppMeshVirtualRouterListener],
    }
)


AppMeshVirtualRouterStatus = TypedDict(
    'AppMeshVirtualRouterStatus', {
        'VirtualRouterStatusCode': str,
    }
)


AppMeshVirtualRouterData = TypedDict(
    'AppMeshVirtualRouterData', {
        'ResourceName': str,
        'ResourceMetadata': AppMeshResourceMetadata,
        'VirtualRouterSpec': AppMeshVirtualRouterSpec,
        'VirtualRouterStatus': AppMeshVirtualRouterStatus,
        'ResourceName': str,
    }
)


AppMeshCreateVirtualRouterOutput = TypedDict(
    'AppMeshCreateVirtualRouterOutput', {
        'VirtualRouterData': AppMeshVirtualRouterData,
    }
)


AppMeshVirtualNodeServiceProvider = TypedDict(
    'AppMeshVirtualNodeServiceProvider', {
        'ResourceName': str,
    }
)


AppMeshVirtualRouterServiceProvider = TypedDict(
    'AppMeshVirtualRouterServiceProvider', {
        'ResourceName': str,
    }
)


AppMeshVirtualServiceProvider = TypedDict(
    'AppMeshVirtualServiceProvider', {
        'VirtualNodeServiceProvider': Optional[AppMeshVirtualNodeServiceProvider],
        'VirtualRouterServiceProvider': Optional[AppMeshVirtualRouterServiceProvider],
    }
)


AppMeshVirtualServiceSpec = TypedDict(
    'AppMeshVirtualServiceSpec', {
        'VirtualServiceProvider': Optional[AppMeshVirtualServiceProvider],
    }
)


AppMeshVirtualServiceStatus = TypedDict(
    'AppMeshVirtualServiceStatus', {
        'VirtualServiceStatusCode': str,
    }
)


AppMeshVirtualServiceData = TypedDict(
    'AppMeshVirtualServiceData', {
        'ResourceName': str,
        'ResourceMetadata': AppMeshResourceMetadata,
        'VirtualServiceSpec': AppMeshVirtualServiceSpec,
        'VirtualServiceStatus': AppMeshVirtualServiceStatus,
        'ServiceName': str,
    }
)


AppMeshCreateVirtualServiceOutput = TypedDict(
    'AppMeshCreateVirtualServiceOutput', {
        'VirtualServiceData': AppMeshVirtualServiceData,
    }
)


AppMeshDeleteMeshOutput = TypedDict(
    'AppMeshDeleteMeshOutput', {
        'MeshData': AppMeshMeshData,
    }
)


AppMeshDeleteRouteOutput = TypedDict(
    'AppMeshDeleteRouteOutput', {
        'RouteData': AppMeshRouteData,
    }
)


AppMeshDeleteVirtualNodeOutput = TypedDict(
    'AppMeshDeleteVirtualNodeOutput', {
        'VirtualNodeData': AppMeshVirtualNodeData,
    }
)


AppMeshDeleteVirtualRouterOutput = TypedDict(
    'AppMeshDeleteVirtualRouterOutput', {
        'VirtualRouterData': AppMeshVirtualRouterData,
    }
)


AppMeshDeleteVirtualServiceOutput = TypedDict(
    'AppMeshDeleteVirtualServiceOutput', {
        'VirtualServiceData': AppMeshVirtualServiceData,
    }
)


AppMeshDescribeMeshOutput = TypedDict(
    'AppMeshDescribeMeshOutput', {
        'MeshData': AppMeshMeshData,
    }
)


AppMeshDescribeRouteOutput = TypedDict(
    'AppMeshDescribeRouteOutput', {
        'RouteData': AppMeshRouteData,
    }
)


AppMeshDescribeVirtualNodeOutput = TypedDict(
    'AppMeshDescribeVirtualNodeOutput', {
        'VirtualNodeData': AppMeshVirtualNodeData,
    }
)


AppMeshDescribeVirtualRouterOutput = TypedDict(
    'AppMeshDescribeVirtualRouterOutput', {
        'VirtualRouterData': AppMeshVirtualRouterData,
    }
)


AppMeshDescribeVirtualServiceOutput = TypedDict(
    'AppMeshDescribeVirtualServiceOutput', {
        'VirtualServiceData': AppMeshVirtualServiceData,
    }
)


AppMeshMeshRef = TypedDict(
    'AppMeshMeshRef', {
        'Arn': str,
        'ResourceName': str,
    }
)


AppMeshListMeshesOutput = TypedDict(
    'AppMeshListMeshesOutput', {
        'MeshList': List[AppMeshMeshRef],
        'String': Optional[str],
    }
)


AppMeshRouteRef = TypedDict(
    'AppMeshRouteRef', {
        'Arn': str,
        'ResourceName': str,
        'ResourceName': str,
        'ResourceName': str,
    }
)


AppMeshListRoutesOutput = TypedDict(
    'AppMeshListRoutesOutput', {
        'RouteList': List[AppMeshRouteRef],
        'String': Optional[str],
    }
)


AppMeshListTagsForResourceOutput = TypedDict(
    'AppMeshListTagsForResourceOutput', {
        'TagList': List[AppMeshTagRef],
        'String': Optional[str],
    }
)


AppMeshVirtualNodeRef = TypedDict(
    'AppMeshVirtualNodeRef', {
        'Arn': str,
        'ResourceName': str,
        'ResourceName': str,
    }
)


AppMeshListVirtualNodesOutput = TypedDict(
    'AppMeshListVirtualNodesOutput', {
        'VirtualNodeList': List[AppMeshVirtualNodeRef],
        'String': Optional[str],
    }
)


AppMeshVirtualRouterRef = TypedDict(
    'AppMeshVirtualRouterRef', {
        'Arn': str,
        'ResourceName': str,
        'ResourceName': str,
    }
)


AppMeshListVirtualRoutersOutput = TypedDict(
    'AppMeshListVirtualRoutersOutput', {
        'VirtualRouterList': List[AppMeshVirtualRouterRef],
        'String': Optional[str],
    }
)


AppMeshVirtualServiceRef = TypedDict(
    'AppMeshVirtualServiceRef', {
        'Arn': str,
        'ResourceName': str,
        'ServiceName': str,
    }
)


AppMeshListVirtualServicesOutput = TypedDict(
    'AppMeshListVirtualServicesOutput', {
        'VirtualServiceList': List[AppMeshVirtualServiceRef],
        'String': Optional[str],
    }
)


AppMeshTagResourceOutput = TypedDict(
    'AppMeshTagResourceOutput', {
    }
)


AppMeshUntagResourceOutput = TypedDict(
    'AppMeshUntagResourceOutput', {
    }
)


AppMeshUpdateMeshOutput = TypedDict(
    'AppMeshUpdateMeshOutput', {
        'MeshData': AppMeshMeshData,
    }
)


AppMeshUpdateRouteOutput = TypedDict(
    'AppMeshUpdateRouteOutput', {
        'RouteData': AppMeshRouteData,
    }
)


AppMeshUpdateVirtualNodeOutput = TypedDict(
    'AppMeshUpdateVirtualNodeOutput', {
        'VirtualNodeData': AppMeshVirtualNodeData,
    }
)


AppMeshUpdateVirtualRouterOutput = TypedDict(
    'AppMeshUpdateVirtualRouterOutput', {
        'VirtualRouterData': AppMeshVirtualRouterData,
    }
)


AppMeshUpdateVirtualServiceOutput = TypedDict(
    'AppMeshUpdateVirtualServiceOutput', {
        'VirtualServiceData': AppMeshVirtualServiceData,
    }
)


class AppStream(BaseClient):
    def associate_fleet(self, *,
        FleetName: str,
        StackName: str
    ) -> AppStreamAssociateFleetResult: ...

    def batch_associate_user_stack(self, *,
        UserStackAssociations: List[AppStreamUserStackAssociation]
    ) -> AppStreamBatchAssociateUserStackResult: ...

    def batch_disassociate_user_stack(self, *,
        UserStackAssociations: List[AppStreamUserStackAssociation]
    ) -> AppStreamBatchDisassociateUserStackResult: ...

    def copy_image(self, *,
        SourceImageName: str,
        DestinationImageName: str,
        DestinationRegion: str,
        DestinationImageDescription: str = ...
    ) -> AppStreamCopyImageResponse: ...

    def create_directory_config(self, *,
        DirectoryName: str,
        OrganizationalUnitDistinguishedNames: List[str],
        ServiceAccountCredentials: AppStreamServiceAccountCredentials
    ) -> AppStreamCreateDirectoryConfigResult: ...

    def create_fleet(self, *,
        Name: str,
        InstanceType: str,
        ComputeCapacity: AppStreamComputeCapacity,
        ImageName: str = ...,
        ImageArn: str = ...,
        FleetType: str = ...,
        VpcConfig: AppStreamVpcConfig = ...,
        MaxUserDurationInSeconds: int = ...,
        DisconnectTimeoutInSeconds: int = ...,
        Description: str = ...,
        DisplayName: str = ...,
        EnableDefaultInternetAccess: bool = ...,
        DomainJoinInfo: AppStreamDomainJoinInfo = ...,
        Tags: Dict[str, str] = ...
    ) -> AppStreamCreateFleetResult: ...

    def create_image_builder(self, *,
        Name: str,
        InstanceType: str,
        ImageName: str = ...,
        ImageArn: str = ...,
        Description: str = ...,
        DisplayName: str = ...,
        VpcConfig: AppStreamVpcConfig = ...,
        EnableDefaultInternetAccess: bool = ...,
        DomainJoinInfo: AppStreamDomainJoinInfo = ...,
        AppstreamAgentVersion: str = ...,
        Tags: Dict[str, str] = ...
    ) -> AppStreamCreateImageBuilderResult: ...

    def create_image_builder_streaming_url(self, *,
        Name: str,
        Validity: int = ...
    ) -> AppStreamCreateImageBuilderStreamingURLResult: ...

    def create_stack(self, *,
        Name: str,
        Description: str = ...,
        DisplayName: str = ...,
        StorageConnectors: List[AppStreamStorageConnector] = ...,
        RedirectURL: str = ...,
        FeedbackURL: str = ...,
        UserSettings: List[AppStreamUserSetting] = ...,
        ApplicationSettings: AppStreamApplicationSettings = ...,
        Tags: Dict[str, str] = ...
    ) -> AppStreamCreateStackResult: ...

    def create_streaming_url(self, *,
        StackName: str,
        FleetName: str,
        UserId: str,
        ApplicationId: str = ...,
        Validity: int = ...,
        SessionContext: str = ...
    ) -> AppStreamCreateStreamingURLResult: ...

    def create_user(self, *,
        UserName: str,
        AuthenticationType: str,
        MessageAction: str = ...,
        FirstName: str = ...,
        LastName: str = ...
    ) -> AppStreamCreateUserResult: ...

    def delete_directory_config(self, *,
        DirectoryName: str
    ) -> AppStreamDeleteDirectoryConfigResult: ...

    def delete_fleet(self, *,
        Name: str
    ) -> AppStreamDeleteFleetResult: ...

    def delete_image(self, *,
        Name: str
    ) -> AppStreamDeleteImageResult: ...

    def delete_image_builder(self, *,
        Name: str
    ) -> AppStreamDeleteImageBuilderResult: ...

    def delete_image_permissions(self, *,
        Name: str,
        SharedAccountId: str
    ) -> AppStreamDeleteImagePermissionsResult: ...

    def delete_stack(self, *,
        Name: str
    ) -> AppStreamDeleteStackResult: ...

    def delete_user(self, *,
        UserName: str,
        AuthenticationType: str
    ) -> AppStreamDeleteUserResult: ...

    def describe_directory_configs(self, *,
        DirectoryNames: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> AppStreamDescribeDirectoryConfigsResult: ...

    def describe_fleets(self, *,
        Names: List[str] = ...,
        NextToken: str = ...
    ) -> AppStreamDescribeFleetsResult: ...

    def describe_image_builders(self, *,
        Names: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> AppStreamDescribeImageBuildersResult: ...

    def describe_image_permissions(self, *,
        Name: str,
        MaxResults: int = ...,
        SharedAwsAccountIds: List[str] = ...,
        NextToken: str = ...
    ) -> AppStreamDescribeImagePermissionsResult: ...

    def describe_images(self, *,
        Names: List[str] = ...,
        Arns: List[str] = ...,
        Type: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AppStreamDescribeImagesResult: ...

    def describe_sessions(self, *,
        StackName: str,
        FleetName: str,
        UserId: str = ...,
        NextToken: str = ...,
        Limit: int = ...,
        AuthenticationType: str = ...
    ) -> AppStreamDescribeSessionsResult: ...

    def describe_stacks(self, *,
        Names: List[str] = ...,
        NextToken: str = ...
    ) -> AppStreamDescribeStacksResult: ...

    def describe_user_stack_associations(self, *,
        StackName: str = ...,
        UserName: str = ...,
        AuthenticationType: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> AppStreamDescribeUserStackAssociationsResult: ...

    def describe_users(self, *,
        AuthenticationType: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> AppStreamDescribeUsersResult: ...

    def disable_user(self, *,
        UserName: str,
        AuthenticationType: str
    ) -> AppStreamDisableUserResult: ...

    def disassociate_fleet(self, *,
        FleetName: str,
        StackName: str
    ) -> AppStreamDisassociateFleetResult: ...

    def enable_user(self, *,
        UserName: str,
        AuthenticationType: str
    ) -> AppStreamEnableUserResult: ...

    def expire_session(self, *,
        SessionId: str
    ) -> AppStreamExpireSessionResult: ...

    def list_associated_fleets(self, *,
        StackName: str,
        NextToken: str = ...
    ) -> AppStreamListAssociatedFleetsResult: ...

    def list_associated_stacks(self, *,
        FleetName: str,
        NextToken: str = ...
    ) -> AppStreamListAssociatedStacksResult: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> AppStreamListTagsForResourceResponse: ...

    def start_fleet(self, *,
        Name: str
    ) -> AppStreamStartFleetResult: ...

    def start_image_builder(self, *,
        Name: str,
        AppstreamAgentVersion: str = ...
    ) -> AppStreamStartImageBuilderResult: ...

    def stop_fleet(self, *,
        Name: str
    ) -> AppStreamStopFleetResult: ...

    def stop_image_builder(self, *,
        Name: str
    ) -> AppStreamStopImageBuilderResult: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: Dict[str, str]
    ) -> AppStreamTagResourceResponse: ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ) -> AppStreamUntagResourceResponse: ...

    def update_directory_config(self, *,
        DirectoryName: str,
        OrganizationalUnitDistinguishedNames: List[str] = ...,
        ServiceAccountCredentials: AppStreamServiceAccountCredentials = ...
    ) -> AppStreamUpdateDirectoryConfigResult: ...

    def update_fleet(self, *,
        ImageName: str = ...,
        ImageArn: str = ...,
        Name: str = ...,
        InstanceType: str = ...,
        ComputeCapacity: AppStreamComputeCapacity = ...,
        VpcConfig: AppStreamVpcConfig = ...,
        MaxUserDurationInSeconds: int = ...,
        DisconnectTimeoutInSeconds: int = ...,
        DeleteVpcConfig: bool = ...,
        Description: str = ...,
        DisplayName: str = ...,
        EnableDefaultInternetAccess: bool = ...,
        DomainJoinInfo: AppStreamDomainJoinInfo = ...,
        AttributesToDelete: List[str] = ...
    ) -> AppStreamUpdateFleetResult: ...

    def update_image_permissions(self, *,
        Name: str,
        SharedAccountId: str,
        ImagePermissions: AppStreamImagePermissions
    ) -> AppStreamUpdateImagePermissionsResult: ...

    def update_stack(self, *,
        Name: str,
        DisplayName: str = ...,
        Description: str = ...,
        StorageConnectors: List[AppStreamStorageConnector] = ...,
        DeleteStorageConnectors: bool = ...,
        RedirectURL: str = ...,
        FeedbackURL: str = ...,
        AttributesToDelete: List[str] = ...,
        UserSettings: List[AppStreamUserSetting] = ...,
        ApplicationSettings: AppStreamApplicationSettings = ...
    ) -> AppStreamUpdateStackResult: ...


AppStreamAssociateFleetResult = TypedDict(
    'AppStreamAssociateFleetResult', {
    }
)


AppStreamUserStackAssociation = TypedDict(
    'AppStreamUserStackAssociation', {
        'String': str,
        'Username': str,
        'AuthenticationType': str,
        'Boolean': Optional[bool],
    }
)


AppStreamUserStackAssociationError = TypedDict(
    'AppStreamUserStackAssociationError', {
        'UserStackAssociation': Optional[AppStreamUserStackAssociation],
        'UserStackAssociationErrorCode': Optional[str],
        'String': Optional[str],
    }
)


AppStreamBatchAssociateUserStackResult = TypedDict(
    'AppStreamBatchAssociateUserStackResult', {
        'UserStackAssociationErrorList': Optional[List[AppStreamUserStackAssociationError]],
    }
)


AppStreamBatchDisassociateUserStackResult = TypedDict(
    'AppStreamBatchDisassociateUserStackResult', {
        'UserStackAssociationErrorList': Optional[List[AppStreamUserStackAssociationError]],
    }
)


AppStreamCopyImageResponse = TypedDict(
    'AppStreamCopyImageResponse', {
        'Name': Optional[str],
    }
)


AppStreamServiceAccountCredentials = TypedDict(
    'AppStreamServiceAccountCredentials', {
        'AccountName': str,
        'AccountPassword': str,
    }
)


AppStreamDirectoryConfig = TypedDict(
    'AppStreamDirectoryConfig', {
        'DirectoryName': str,
        'OrganizationalUnitDistinguishedNamesList': Optional[List[str]],
        'ServiceAccountCredentials': Optional[AppStreamServiceAccountCredentials],
        'Timestamp': Optional[datetime.datetime],
    }
)


AppStreamCreateDirectoryConfigResult = TypedDict(
    'AppStreamCreateDirectoryConfigResult', {
        'DirectoryConfig': Optional[AppStreamDirectoryConfig],
    }
)


AppStreamComputeCapacity = TypedDict(
    'AppStreamComputeCapacity', {
        'Integer': int,
    }
)


AppStreamVpcConfig = TypedDict(
    'AppStreamVpcConfig', {
        'SubnetIdList': Optional[List[str]],
        'SecurityGroupIdList': Optional[List[str]],
    }
)


AppStreamDomainJoinInfo = TypedDict(
    'AppStreamDomainJoinInfo', {
        'DirectoryName': Optional[str],
        'OrganizationalUnitDistinguishedName': Optional[str],
    }
)


AppStreamComputeCapacityStatus = TypedDict(
    'AppStreamComputeCapacityStatus', {
        'Integer': int,
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
    }
)


AppStreamFleetError = TypedDict(
    'AppStreamFleetError', {
        'FleetErrorCode': Optional[str],
        'String': Optional[str],
    }
)


AppStreamFleet = TypedDict(
    'AppStreamFleet', {
        'Arn': str,
        'String': str,
        'String': str,
        'ComputeCapacityStatus': AppStreamComputeCapacityStatus,
        'FleetState': str,
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Arn': Optional[str],
        'FleetType': Optional[str],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'VpcConfig': Optional[AppStreamVpcConfig],
        'Timestamp': Optional[datetime.datetime],
        'FleetErrors': Optional[List[AppStreamFleetError]],
        'BooleanObject': Optional[bool],
        'DomainJoinInfo': Optional[AppStreamDomainJoinInfo],
    }
)


AppStreamCreateFleetResult = TypedDict(
    'AppStreamCreateFleetResult', {
        'Fleet': Optional[AppStreamFleet],
    }
)


AppStreamImageBuilderStateChangeReason = TypedDict(
    'AppStreamImageBuilderStateChangeReason', {
        'ImageBuilderStateChangeReasonCode': Optional[str],
        'String': Optional[str],
    }
)


AppStreamResourceError = TypedDict(
    'AppStreamResourceError', {
        'FleetErrorCode': Optional[str],
        'String': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


AppStreamImageBuilder = TypedDict(
    'AppStreamImageBuilder', {
        'String': str,
        'Arn': Optional[str],
        'Arn': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'VpcConfig': Optional[AppStreamVpcConfig],
        'String': Optional[str],
        'PlatformType': Optional[str],
        'ImageBuilderState': Optional[str],
        'ImageBuilderStateChangeReason': Optional[AppStreamImageBuilderStateChangeReason],
        'Timestamp': Optional[datetime.datetime],
        'BooleanObject': Optional[bool],
        'DomainJoinInfo': Optional[AppStreamDomainJoinInfo],
        'ResourceErrors': Optional[List[AppStreamResourceError]],
        'AppstreamAgentVersion': Optional[str],
    }
)


AppStreamCreateImageBuilderResult = TypedDict(
    'AppStreamCreateImageBuilderResult', {
        'ImageBuilder': Optional[AppStreamImageBuilder],
    }
)


AppStreamCreateImageBuilderStreamingURLResult = TypedDict(
    'AppStreamCreateImageBuilderStreamingURLResult', {
        'String': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


AppStreamStorageConnector = TypedDict(
    'AppStreamStorageConnector', {
        'StorageConnectorType': str,
        'ResourceIdentifier': Optional[str],
        'DomainList': Optional[List[str]],
    }
)


AppStreamUserSetting = TypedDict(
    'AppStreamUserSetting', {
        'Action': str,
        'Permission': str,
    }
)


AppStreamApplicationSettings = TypedDict(
    'AppStreamApplicationSettings', {
        'Boolean': bool,
        'SettingsGroup': Optional[str],
    }
)


AppStreamStackError = TypedDict(
    'AppStreamStackError', {
        'StackErrorCode': Optional[str],
        'String': Optional[str],
    }
)


AppStreamApplicationSettingsResponse = TypedDict(
    'AppStreamApplicationSettingsResponse', {
        'Boolean': Optional[bool],
        'SettingsGroup': Optional[str],
        'String': Optional[str],
    }
)


AppStreamStack = TypedDict(
    'AppStreamStack', {
        'String': str,
        'Arn': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'StorageConnectorList': Optional[List[AppStreamStorageConnector]],
        'RedirectURL': Optional[str],
        'FeedbackURL': Optional[str],
        'StackErrors': Optional[List[AppStreamStackError]],
        'UserSettingList': Optional[List[AppStreamUserSetting]],
        'ApplicationSettingsResponse': Optional[AppStreamApplicationSettingsResponse],
    }
)


AppStreamCreateStackResult = TypedDict(
    'AppStreamCreateStackResult', {
        'Stack': Optional[AppStreamStack],
    }
)


AppStreamCreateStreamingURLResult = TypedDict(
    'AppStreamCreateStreamingURLResult', {
        'String': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


AppStreamCreateUserResult = TypedDict(
    'AppStreamCreateUserResult', {
    }
)


AppStreamDeleteDirectoryConfigResult = TypedDict(
    'AppStreamDeleteDirectoryConfigResult', {
    }
)


AppStreamDeleteFleetResult = TypedDict(
    'AppStreamDeleteFleetResult', {
    }
)


AppStreamImageStateChangeReason = TypedDict(
    'AppStreamImageStateChangeReason', {
        'ImageStateChangeReasonCode': Optional[str],
        'String': Optional[str],
    }
)


AppStreamApplication = TypedDict(
    'AppStreamApplication', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Metadata': Optional[Dict[str, str]],
    }
)


AppStreamImagePermissions = TypedDict(
    'AppStreamImagePermissions', {
        'BooleanObject': Optional[bool],
        'BooleanObject': Optional[bool],
    }
)


AppStreamImage = TypedDict(
    'AppStreamImage', {
        'String': str,
        'Arn': Optional[str],
        'Arn': Optional[str],
        'String': Optional[str],
        'ImageState': Optional[str],
        'VisibilityType': Optional[str],
        'Boolean': Optional[bool],
        'PlatformType': Optional[str],
        'String': Optional[str],
        'ImageStateChangeReason': Optional[AppStreamImageStateChangeReason],
        'Applications': Optional[List[AppStreamApplication]],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'AppstreamAgentVersion': Optional[str],
        'ImagePermissions': Optional[AppStreamImagePermissions],
    }
)


AppStreamDeleteImageResult = TypedDict(
    'AppStreamDeleteImageResult', {
        'Image': Optional[AppStreamImage],
    }
)


AppStreamDeleteImageBuilderResult = TypedDict(
    'AppStreamDeleteImageBuilderResult', {
        'ImageBuilder': Optional[AppStreamImageBuilder],
    }
)


AppStreamDeleteImagePermissionsResult = TypedDict(
    'AppStreamDeleteImagePermissionsResult', {
    }
)


AppStreamDeleteStackResult = TypedDict(
    'AppStreamDeleteStackResult', {
    }
)


AppStreamDeleteUserResult = TypedDict(
    'AppStreamDeleteUserResult', {
    }
)


AppStreamDescribeDirectoryConfigsResult = TypedDict(
    'AppStreamDescribeDirectoryConfigsResult', {
        'DirectoryConfigList': Optional[List[AppStreamDirectoryConfig]],
        'String': Optional[str],
    }
)


AppStreamDescribeFleetsResult = TypedDict(
    'AppStreamDescribeFleetsResult', {
        'FleetList': Optional[List[AppStreamFleet]],
        'String': Optional[str],
    }
)


AppStreamDescribeImageBuildersResult = TypedDict(
    'AppStreamDescribeImageBuildersResult', {
        'ImageBuilderList': Optional[List[AppStreamImageBuilder]],
        'String': Optional[str],
    }
)


AppStreamSharedImagePermissions = TypedDict(
    'AppStreamSharedImagePermissions', {
        'AwsAccountId': str,
        'ImagePermissions': AppStreamImagePermissions,
    }
)


AppStreamDescribeImagePermissionsResult = TypedDict(
    'AppStreamDescribeImagePermissionsResult', {
        'Name': Optional[str],
        'SharedImagePermissionsList': Optional[List[AppStreamSharedImagePermissions]],
        'String': Optional[str],
    }
)


AppStreamDescribeImagesResult = TypedDict(
    'AppStreamDescribeImagesResult', {
        'ImageList': Optional[List[AppStreamImage]],
        'String': Optional[str],
    }
)


AppStreamNetworkAccessConfiguration = TypedDict(
    'AppStreamNetworkAccessConfiguration', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


AppStreamSession = TypedDict(
    'AppStreamSession', {
        'String': str,
        'UserId': str,
        'String': str,
        'String': str,
        'SessionState': str,
        'SessionConnectionState': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'AuthenticationType': Optional[str],
        'NetworkAccessConfiguration': Optional[AppStreamNetworkAccessConfiguration],
    }
)


AppStreamDescribeSessionsResult = TypedDict(
    'AppStreamDescribeSessionsResult', {
        'SessionList': Optional[List[AppStreamSession]],
        'String': Optional[str],
    }
)


AppStreamDescribeStacksResult = TypedDict(
    'AppStreamDescribeStacksResult', {
        'StackList': Optional[List[AppStreamStack]],
        'String': Optional[str],
    }
)


AppStreamDescribeUserStackAssociationsResult = TypedDict(
    'AppStreamDescribeUserStackAssociationsResult', {
        'UserStackAssociationList': Optional[List[AppStreamUserStackAssociation]],
        'String': Optional[str],
    }
)


AppStreamUser = TypedDict(
    'AppStreamUser', {
        'AuthenticationType': str,
        'Arn': Optional[str],
        'Username': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'UserAttributeValue': Optional[str],
        'UserAttributeValue': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


AppStreamDescribeUsersResult = TypedDict(
    'AppStreamDescribeUsersResult', {
        'UserList': Optional[List[AppStreamUser]],
        'String': Optional[str],
    }
)


AppStreamDisableUserResult = TypedDict(
    'AppStreamDisableUserResult', {
    }
)


AppStreamDisassociateFleetResult = TypedDict(
    'AppStreamDisassociateFleetResult', {
    }
)


AppStreamEnableUserResult = TypedDict(
    'AppStreamEnableUserResult', {
    }
)


AppStreamExpireSessionResult = TypedDict(
    'AppStreamExpireSessionResult', {
    }
)


AppStreamListAssociatedFleetsResult = TypedDict(
    'AppStreamListAssociatedFleetsResult', {
        'StringList': Optional[List[str]],
        'String': Optional[str],
    }
)


AppStreamListAssociatedStacksResult = TypedDict(
    'AppStreamListAssociatedStacksResult', {
        'StringList': Optional[List[str]],
        'String': Optional[str],
    }
)


AppStreamListTagsForResourceResponse = TypedDict(
    'AppStreamListTagsForResourceResponse', {
        'Tags': Optional[Dict[str, str]],
    }
)


AppStreamStartFleetResult = TypedDict(
    'AppStreamStartFleetResult', {
    }
)


AppStreamStartImageBuilderResult = TypedDict(
    'AppStreamStartImageBuilderResult', {
        'ImageBuilder': Optional[AppStreamImageBuilder],
    }
)


AppStreamStopFleetResult = TypedDict(
    'AppStreamStopFleetResult', {
    }
)


AppStreamStopImageBuilderResult = TypedDict(
    'AppStreamStopImageBuilderResult', {
        'ImageBuilder': Optional[AppStreamImageBuilder],
    }
)


AppStreamTagResourceResponse = TypedDict(
    'AppStreamTagResourceResponse', {
    }
)


AppStreamUntagResourceResponse = TypedDict(
    'AppStreamUntagResourceResponse', {
    }
)


AppStreamUpdateDirectoryConfigResult = TypedDict(
    'AppStreamUpdateDirectoryConfigResult', {
        'DirectoryConfig': Optional[AppStreamDirectoryConfig],
    }
)


AppStreamUpdateFleetResult = TypedDict(
    'AppStreamUpdateFleetResult', {
        'Fleet': Optional[AppStreamFleet],
    }
)


AppStreamUpdateImagePermissionsResult = TypedDict(
    'AppStreamUpdateImagePermissionsResult', {
    }
)


AppStreamUpdateStackResult = TypedDict(
    'AppStreamUpdateStackResult', {
        'Stack': Optional[AppStreamStack],
    }
)


class AppSync(BaseClient):
    def create_api_key(self, *,
        apiId: str,
        description: str = ...,
        expires: int = ...
    ) -> AppSyncCreateApiKeyResponse: ...

    def create_data_source(self, *,
        apiId: str,
        name: str,
        type: str,
        description: str = ...,
        serviceRoleArn: str = ...,
        dynamodbConfig: AppSyncDynamodbDataSourceConfig = ...,
        lambdaConfig: AppSyncLambdaDataSourceConfig = ...,
        elasticsearchConfig: AppSyncElasticsearchDataSourceConfig = ...,
        httpConfig: AppSyncHttpDataSourceConfig = ...,
        relationalDatabaseConfig: AppSyncRelationalDatabaseDataSourceConfig = ...
    ) -> AppSyncCreateDataSourceResponse: ...

    def create_function(self, *,
        apiId: str,
        name: str,
        dataSourceName: str,
        requestMappingTemplate: str,
        functionVersion: str,
        description: str = ...,
        responseMappingTemplate: str = ...
    ) -> AppSyncCreateFunctionResponse: ...

    def create_graphql_api(self, *,
        name: str,
        authenticationType: str,
        logConfig: AppSyncLogConfig = ...,
        userPoolConfig: AppSyncUserPoolConfig = ...,
        openIDConnectConfig: AppSyncOpenIDConnectConfig = ...,
        tags: Dict[str, str] = ...,
        additionalAuthenticationProviders: List[AppSyncAdditionalAuthenticationProvider] = ...
    ) -> AppSyncCreateGraphqlApiResponse: ...

    def create_resolver(self, *,
        apiId: str,
        typeName: str,
        fieldName: str,
        requestMappingTemplate: str,
        dataSourceName: str = ...,
        responseMappingTemplate: str = ...,
        kind: str = ...,
        pipelineConfig: AppSyncPipelineConfig = ...
    ) -> AppSyncCreateResolverResponse: ...

    def create_type(self, *,
        apiId: str,
        definition: str,
        format: str
    ) -> AppSyncCreateTypeResponse: ...

    def delete_api_key(self, *,
        apiId: str,
        id: str
    ) -> AppSyncDeleteApiKeyResponse: ...

    def delete_data_source(self, *,
        apiId: str,
        name: str
    ) -> AppSyncDeleteDataSourceResponse: ...

    def delete_function(self, *,
        apiId: str,
        functionId: str
    ) -> AppSyncDeleteFunctionResponse: ...

    def delete_graphql_api(self, *,
        apiId: str
    ) -> AppSyncDeleteGraphqlApiResponse: ...

    def delete_resolver(self, *,
        apiId: str,
        typeName: str,
        fieldName: str
    ) -> AppSyncDeleteResolverResponse: ...

    def delete_type(self, *,
        apiId: str,
        typeName: str
    ) -> AppSyncDeleteTypeResponse: ...

    def get_data_source(self, *,
        apiId: str,
        name: str
    ) -> AppSyncGetDataSourceResponse: ...

    def get_function(self, *,
        apiId: str,
        functionId: str
    ) -> AppSyncGetFunctionResponse: ...

    def get_graphql_api(self, *,
        apiId: str
    ) -> AppSyncGetGraphqlApiResponse: ...

    def get_introspection_schema(self, *,
        apiId: str,
        format: str,
        includeDirectives: bool = ...
    ) -> AppSyncGetIntrospectionSchemaResponse: ...

    def get_resolver(self, *,
        apiId: str,
        typeName: str,
        fieldName: str
    ) -> AppSyncGetResolverResponse: ...

    def get_schema_creation_status(self, *,
        apiId: str
    ) -> AppSyncGetSchemaCreationStatusResponse: ...

    def get_type(self, *,
        apiId: str,
        typeName: str,
        format: str
    ) -> AppSyncGetTypeResponse: ...

    def list_api_keys(self, *,
        apiId: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> AppSyncListApiKeysResponse: ...

    def list_data_sources(self, *,
        apiId: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> AppSyncListDataSourcesResponse: ...

    def list_functions(self, *,
        apiId: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> AppSyncListFunctionsResponse: ...

    def list_graphql_apis(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> AppSyncListGraphqlApisResponse: ...

    def list_resolvers(self, *,
        apiId: str,
        typeName: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> AppSyncListResolversResponse: ...

    def list_resolvers_by_function(self, *,
        apiId: str,
        functionId: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> AppSyncListResolversByFunctionResponse: ...

    def list_tags_for_resource(self, *,
        resourceArn: str
    ) -> AppSyncListTagsForResourceResponse: ...

    def list_types(self, *,
        apiId: str,
        format: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> AppSyncListTypesResponse: ...

    def start_schema_creation(self, *,
        apiId: str,
        definition: bytes
    ) -> AppSyncStartSchemaCreationResponse: ...

    def tag_resource(self, *,
        resourceArn: str,
        tags: Dict[str, str]
    ) -> AppSyncTagResourceResponse: ...

    def untag_resource(self, *,
        resourceArn: str,
        tagKeys: List[str]
    ) -> AppSyncUntagResourceResponse: ...

    def update_api_key(self, *,
        apiId: str,
        id: str,
        description: str = ...,
        expires: int = ...
    ) -> AppSyncUpdateApiKeyResponse: ...

    def update_data_source(self, *,
        apiId: str,
        name: str,
        type: str,
        description: str = ...,
        serviceRoleArn: str = ...,
        dynamodbConfig: AppSyncDynamodbDataSourceConfig = ...,
        lambdaConfig: AppSyncLambdaDataSourceConfig = ...,
        elasticsearchConfig: AppSyncElasticsearchDataSourceConfig = ...,
        httpConfig: AppSyncHttpDataSourceConfig = ...,
        relationalDatabaseConfig: AppSyncRelationalDatabaseDataSourceConfig = ...
    ) -> AppSyncUpdateDataSourceResponse: ...

    def update_function(self, *,
        apiId: str,
        name: str,
        functionId: str,
        dataSourceName: str,
        requestMappingTemplate: str,
        functionVersion: str,
        description: str = ...,
        responseMappingTemplate: str = ...
    ) -> AppSyncUpdateFunctionResponse: ...

    def update_graphql_api(self, *,
        apiId: str,
        name: str,
        logConfig: AppSyncLogConfig = ...,
        authenticationType: str = ...,
        userPoolConfig: AppSyncUserPoolConfig = ...,
        openIDConnectConfig: AppSyncOpenIDConnectConfig = ...,
        additionalAuthenticationProviders: List[AppSyncAdditionalAuthenticationProvider] = ...
    ) -> AppSyncUpdateGraphqlApiResponse: ...

    def update_resolver(self, *,
        apiId: str,
        typeName: str,
        fieldName: str,
        requestMappingTemplate: str,
        dataSourceName: str = ...,
        responseMappingTemplate: str = ...,
        kind: str = ...,
        pipelineConfig: AppSyncPipelineConfig = ...
    ) -> AppSyncUpdateResolverResponse: ...

    def update_type(self, *,
        apiId: str,
        typeName: str,
        format: str,
        definition: str = ...
    ) -> AppSyncUpdateTypeResponse: ...


AppSyncApiKey = TypedDict(
    'AppSyncApiKey', {
        'String': Optional[str],
        'String': Optional[str],
        'Long': Optional[int],
    }
)


AppSyncCreateApiKeyResponse = TypedDict(
    'AppSyncCreateApiKeyResponse', {
        'ApiKey': Optional[AppSyncApiKey],
    }
)


AppSyncDynamodbDataSourceConfig = TypedDict(
    'AppSyncDynamodbDataSourceConfig', {
        'String': str,
        'String': str,
        'Boolean': Optional[bool],
    }
)


AppSyncLambdaDataSourceConfig = TypedDict(
    'AppSyncLambdaDataSourceConfig', {
        'String': str,
    }
)


AppSyncElasticsearchDataSourceConfig = TypedDict(
    'AppSyncElasticsearchDataSourceConfig', {
        'String': str,
        'String': str,
    }
)


AppSyncAwsIamConfig = TypedDict(
    'AppSyncAwsIamConfig', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


AppSyncAuthorizationConfig = TypedDict(
    'AppSyncAuthorizationConfig', {
        'AuthorizationType': str,
        'AwsIamConfig': Optional[AppSyncAwsIamConfig],
    }
)


AppSyncHttpDataSourceConfig = TypedDict(
    'AppSyncHttpDataSourceConfig', {
        'String': Optional[str],
        'AuthorizationConfig': Optional[AppSyncAuthorizationConfig],
    }
)


AppSyncRdsHttpEndpointConfig = TypedDict(
    'AppSyncRdsHttpEndpointConfig', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


AppSyncRelationalDatabaseDataSourceConfig = TypedDict(
    'AppSyncRelationalDatabaseDataSourceConfig', {
        'RelationalDatabaseSourceType': Optional[str],
        'RdsHttpEndpointConfig': Optional[AppSyncRdsHttpEndpointConfig],
    }
)


AppSyncDataSource = TypedDict(
    'AppSyncDataSource', {
        'String': Optional[str],
        'ResourceName': Optional[str],
        'String': Optional[str],
        'DataSourceType': Optional[str],
        'String': Optional[str],
        'DynamodbDataSourceConfig': Optional[AppSyncDynamodbDataSourceConfig],
        'LambdaDataSourceConfig': Optional[AppSyncLambdaDataSourceConfig],
        'ElasticsearchDataSourceConfig': Optional[AppSyncElasticsearchDataSourceConfig],
        'HttpDataSourceConfig': Optional[AppSyncHttpDataSourceConfig],
        'RelationalDatabaseDataSourceConfig': Optional[AppSyncRelationalDatabaseDataSourceConfig],
    }
)


AppSyncCreateDataSourceResponse = TypedDict(
    'AppSyncCreateDataSourceResponse', {
        'DataSource': Optional[AppSyncDataSource],
    }
)


AppSyncFunctionConfiguration = TypedDict(
    'AppSyncFunctionConfiguration', {
        'String': Optional[str],
        'String': Optional[str],
        'ResourceName': Optional[str],
        'String': Optional[str],
        'ResourceName': Optional[str],
        'MappingTemplate': Optional[str],
        'MappingTemplate': Optional[str],
        'String': Optional[str],
    }
)


AppSyncCreateFunctionResponse = TypedDict(
    'AppSyncCreateFunctionResponse', {
        'FunctionConfiguration': Optional[AppSyncFunctionConfiguration],
    }
)


AppSyncLogConfig = TypedDict(
    'AppSyncLogConfig', {
        'FieldLogLevel': str,
        'String': str,
    }
)


AppSyncUserPoolConfig = TypedDict(
    'AppSyncUserPoolConfig', {
        'String': str,
        'String': str,
        'DefaultAction': str,
        'String': Optional[str],
    }
)


AppSyncOpenIDConnectConfig = TypedDict(
    'AppSyncOpenIDConnectConfig', {
        'String': str,
        'String': Optional[str],
        'Long': Optional[int],
        'Long': Optional[int],
    }
)


AppSyncCognitoUserPoolConfig = TypedDict(
    'AppSyncCognitoUserPoolConfig', {
        'String': str,
        'String': str,
        'String': Optional[str],
    }
)


AppSyncAdditionalAuthenticationProvider = TypedDict(
    'AppSyncAdditionalAuthenticationProvider', {
        'AuthenticationType': Optional[str],
        'OpenIDConnectConfig': Optional[AppSyncOpenIDConnectConfig],
        'CognitoUserPoolConfig': Optional[AppSyncCognitoUserPoolConfig],
    }
)


AppSyncGraphqlApi = TypedDict(
    'AppSyncGraphqlApi', {
        'ResourceName': Optional[str],
        'String': Optional[str],
        'AuthenticationType': Optional[str],
        'LogConfig': Optional[AppSyncLogConfig],
        'UserPoolConfig': Optional[AppSyncUserPoolConfig],
        'OpenIDConnectConfig': Optional[AppSyncOpenIDConnectConfig],
        'String': Optional[str],
        'MapOfStringToString': Optional[Dict[str, str]],
        'TagMap': Optional[Dict[str, str]],
        'AdditionalAuthenticationProviders': Optional[List[AppSyncAdditionalAuthenticationProvider]],
    }
)


AppSyncCreateGraphqlApiResponse = TypedDict(
    'AppSyncCreateGraphqlApiResponse', {
        'GraphqlApi': Optional[AppSyncGraphqlApi],
    }
)


AppSyncPipelineConfig = TypedDict(
    'AppSyncPipelineConfig', {
        'FunctionsIds': Optional[List[str]],
    }
)


AppSyncResolver = TypedDict(
    'AppSyncResolver', {
        'ResourceName': Optional[str],
        'ResourceName': Optional[str],
        'ResourceName': Optional[str],
        'String': Optional[str],
        'MappingTemplate': Optional[str],
        'MappingTemplate': Optional[str],
        'ResolverKind': Optional[str],
        'PipelineConfig': Optional[AppSyncPipelineConfig],
    }
)


AppSyncCreateResolverResponse = TypedDict(
    'AppSyncCreateResolverResponse', {
        'Resolver': Optional[AppSyncResolver],
    }
)


AppSyncType = TypedDict(
    'AppSyncType', {
        'ResourceName': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'TypeDefinitionFormat': Optional[str],
    }
)


AppSyncCreateTypeResponse = TypedDict(
    'AppSyncCreateTypeResponse', {
        'Type': Optional[AppSyncType],
    }
)


AppSyncDeleteApiKeyResponse = TypedDict(
    'AppSyncDeleteApiKeyResponse', {
    }
)


AppSyncDeleteDataSourceResponse = TypedDict(
    'AppSyncDeleteDataSourceResponse', {
    }
)


AppSyncDeleteFunctionResponse = TypedDict(
    'AppSyncDeleteFunctionResponse', {
    }
)


AppSyncDeleteGraphqlApiResponse = TypedDict(
    'AppSyncDeleteGraphqlApiResponse', {
    }
)


AppSyncDeleteResolverResponse = TypedDict(
    'AppSyncDeleteResolverResponse', {
    }
)


AppSyncDeleteTypeResponse = TypedDict(
    'AppSyncDeleteTypeResponse', {
    }
)


AppSyncGetDataSourceResponse = TypedDict(
    'AppSyncGetDataSourceResponse', {
        'DataSource': Optional[AppSyncDataSource],
    }
)


AppSyncGetFunctionResponse = TypedDict(
    'AppSyncGetFunctionResponse', {
        'FunctionConfiguration': Optional[AppSyncFunctionConfiguration],
    }
)


AppSyncGetGraphqlApiResponse = TypedDict(
    'AppSyncGetGraphqlApiResponse', {
        'GraphqlApi': Optional[AppSyncGraphqlApi],
    }
)


AppSyncGetIntrospectionSchemaResponse = TypedDict(
    'AppSyncGetIntrospectionSchemaResponse', {
        'Blob': Optional[bytes],
    }
)


AppSyncGetResolverResponse = TypedDict(
    'AppSyncGetResolverResponse', {
        'Resolver': Optional[AppSyncResolver],
    }
)


AppSyncGetSchemaCreationStatusResponse = TypedDict(
    'AppSyncGetSchemaCreationStatusResponse', {
        'SchemaStatus': Optional[str],
        'String': Optional[str],
    }
)


AppSyncGetTypeResponse = TypedDict(
    'AppSyncGetTypeResponse', {
        'Type': Optional[AppSyncType],
    }
)


AppSyncListApiKeysResponse = TypedDict(
    'AppSyncListApiKeysResponse', {
        'ApiKeys': Optional[List[AppSyncApiKey]],
        'PaginationToken': Optional[str],
    }
)


AppSyncListDataSourcesResponse = TypedDict(
    'AppSyncListDataSourcesResponse', {
        'DataSources': Optional[List[AppSyncDataSource]],
        'PaginationToken': Optional[str],
    }
)


AppSyncListFunctionsResponse = TypedDict(
    'AppSyncListFunctionsResponse', {
        'Functions': Optional[List[AppSyncFunctionConfiguration]],
        'PaginationToken': Optional[str],
    }
)


AppSyncListGraphqlApisResponse = TypedDict(
    'AppSyncListGraphqlApisResponse', {
        'GraphqlApis': Optional[List[AppSyncGraphqlApi]],
        'PaginationToken': Optional[str],
    }
)


AppSyncListResolversResponse = TypedDict(
    'AppSyncListResolversResponse', {
        'Resolvers': Optional[List[AppSyncResolver]],
        'PaginationToken': Optional[str],
    }
)


AppSyncListResolversByFunctionResponse = TypedDict(
    'AppSyncListResolversByFunctionResponse', {
        'Resolvers': Optional[List[AppSyncResolver]],
        'PaginationToken': Optional[str],
    }
)


AppSyncListTagsForResourceResponse = TypedDict(
    'AppSyncListTagsForResourceResponse', {
        'TagMap': Optional[Dict[str, str]],
    }
)


AppSyncListTypesResponse = TypedDict(
    'AppSyncListTypesResponse', {
        'TypeList': Optional[List[AppSyncType]],
        'PaginationToken': Optional[str],
    }
)


AppSyncStartSchemaCreationResponse = TypedDict(
    'AppSyncStartSchemaCreationResponse', {
        'SchemaStatus': Optional[str],
    }
)


AppSyncTagResourceResponse = TypedDict(
    'AppSyncTagResourceResponse', {
    }
)


AppSyncUntagResourceResponse = TypedDict(
    'AppSyncUntagResourceResponse', {
    }
)


AppSyncUpdateApiKeyResponse = TypedDict(
    'AppSyncUpdateApiKeyResponse', {
        'ApiKey': Optional[AppSyncApiKey],
    }
)


AppSyncUpdateDataSourceResponse = TypedDict(
    'AppSyncUpdateDataSourceResponse', {
        'DataSource': Optional[AppSyncDataSource],
    }
)


AppSyncUpdateFunctionResponse = TypedDict(
    'AppSyncUpdateFunctionResponse', {
        'FunctionConfiguration': Optional[AppSyncFunctionConfiguration],
    }
)


AppSyncUpdateGraphqlApiResponse = TypedDict(
    'AppSyncUpdateGraphqlApiResponse', {
        'GraphqlApi': Optional[AppSyncGraphqlApi],
    }
)


AppSyncUpdateResolverResponse = TypedDict(
    'AppSyncUpdateResolverResponse', {
        'Resolver': Optional[AppSyncResolver],
    }
)


AppSyncUpdateTypeResponse = TypedDict(
    'AppSyncUpdateTypeResponse', {
        'Type': Optional[AppSyncType],
    }
)


class Athena(BaseClient):
    def batch_get_named_query(self, *,
        NamedQueryIds: List[str]
    ) -> AthenaBatchGetNamedQueryOutput: ...

    def batch_get_query_execution(self, *,
        QueryExecutionIds: List[str]
    ) -> AthenaBatchGetQueryExecutionOutput: ...

    def create_named_query(self, *,
        Name: str,
        Database: str,
        QueryString: str,
        Description: str = ...,
        ClientRequestToken: str = ...,
        WorkGroup: str = ...
    ) -> AthenaCreateNamedQueryOutput: ...

    def create_work_group(self, *,
        Name: str,
        Configuration: AthenaWorkGroupConfiguration = ...,
        Description: str = ...,
        Tags: List[AthenaTag] = ...
    ) -> AthenaCreateWorkGroupOutput: ...

    def delete_named_query(self, *,
        NamedQueryId: str
    ) -> AthenaDeleteNamedQueryOutput: ...

    def delete_work_group(self, *,
        WorkGroup: str,
        RecursiveDeleteOption: bool = ...
    ) -> AthenaDeleteWorkGroupOutput: ...

    def get_named_query(self, *,
        NamedQueryId: str
    ) -> AthenaGetNamedQueryOutput: ...

    def get_query_execution(self, *,
        QueryExecutionId: str
    ) -> AthenaGetQueryExecutionOutput: ...

    def get_query_results(self, *,
        QueryExecutionId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AthenaGetQueryResultsOutput: ...

    def get_work_group(self, *,
        WorkGroup: str
    ) -> AthenaGetWorkGroupOutput: ...

    def list_named_queries(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        WorkGroup: str = ...
    ) -> AthenaListNamedQueriesOutput: ...

    def list_query_executions(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        WorkGroup: str = ...
    ) -> AthenaListQueryExecutionsOutput: ...

    def list_tags_for_resource(self, *,
        ResourceARN: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AthenaListTagsForResourceOutput: ...

    def list_work_groups(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AthenaListWorkGroupsOutput: ...

    def start_query_execution(self, *,
        QueryString: str,
        ClientRequestToken: str = ...,
        QueryExecutionContext: AthenaQueryExecutionContext = ...,
        ResultConfiguration: AthenaResultConfiguration = ...,
        WorkGroup: str = ...
    ) -> AthenaStartQueryExecutionOutput: ...

    def stop_query_execution(self, *,
        QueryExecutionId: str
    ) -> AthenaStopQueryExecutionOutput: ...

    def tag_resource(self, *,
        ResourceARN: str,
        Tags: List[AthenaTag]
    ) -> AthenaTagResourceOutput: ...

    def untag_resource(self, *,
        ResourceARN: str,
        TagKeys: List[str]
    ) -> AthenaUntagResourceOutput: ...

    def update_work_group(self, *,
        WorkGroup: str,
        Description: str = ...,
        ConfigurationUpdates: AthenaWorkGroupConfigurationUpdates = ...,
        State: str = ...
    ) -> AthenaUpdateWorkGroupOutput: ...


AthenaNamedQuery = TypedDict(
    'AthenaNamedQuery', {
        'NameString': str,
        'DatabaseString': str,
        'QueryString': str,
        'DescriptionString': Optional[str],
        'NamedQueryId': Optional[str],
        'WorkGroupName': Optional[str],
    }
)


AthenaUnprocessedNamedQueryId = TypedDict(
    'AthenaUnprocessedNamedQueryId', {
        'NamedQueryId': Optional[str],
        'ErrorCode': Optional[str],
        'ErrorMessage': Optional[str],
    }
)


AthenaBatchGetNamedQueryOutput = TypedDict(
    'AthenaBatchGetNamedQueryOutput', {
        'NamedQueryList': Optional[List[AthenaNamedQuery]],
        'UnprocessedNamedQueryIdList': Optional[List[AthenaUnprocessedNamedQueryId]],
    }
)


AthenaEncryptionConfiguration = TypedDict(
    'AthenaEncryptionConfiguration', {
        'EncryptionOption': str,
        'String': Optional[str],
    }
)


AthenaResultConfiguration = TypedDict(
    'AthenaResultConfiguration', {
        'String': Optional[str],
        'EncryptionConfiguration': Optional[AthenaEncryptionConfiguration],
    }
)


AthenaQueryExecutionContext = TypedDict(
    'AthenaQueryExecutionContext', {
        'DatabaseString': Optional[str],
    }
)


AthenaQueryExecutionStatus = TypedDict(
    'AthenaQueryExecutionStatus', {
        'QueryExecutionState': Optional[str],
        'String': Optional[str],
        'Date': Optional[datetime.datetime],
        'Date': Optional[datetime.datetime],
    }
)


AthenaQueryExecutionStatistics = TypedDict(
    'AthenaQueryExecutionStatistics', {
        'Long': Optional[int],
        'Long': Optional[int],
    }
)


AthenaQueryExecution = TypedDict(
    'AthenaQueryExecution', {
        'QueryExecutionId': Optional[str],
        'QueryString': Optional[str],
        'StatementType': Optional[str],
        'ResultConfiguration': Optional[AthenaResultConfiguration],
        'QueryExecutionContext': Optional[AthenaQueryExecutionContext],
        'QueryExecutionStatus': Optional[AthenaQueryExecutionStatus],
        'QueryExecutionStatistics': Optional[AthenaQueryExecutionStatistics],
        'WorkGroupName': Optional[str],
    }
)


AthenaUnprocessedQueryExecutionId = TypedDict(
    'AthenaUnprocessedQueryExecutionId', {
        'QueryExecutionId': Optional[str],
        'ErrorCode': Optional[str],
        'ErrorMessage': Optional[str],
    }
)


AthenaBatchGetQueryExecutionOutput = TypedDict(
    'AthenaBatchGetQueryExecutionOutput', {
        'QueryExecutionList': Optional[List[AthenaQueryExecution]],
        'UnprocessedQueryExecutionIdList': Optional[List[AthenaUnprocessedQueryExecutionId]],
    }
)


AthenaCreateNamedQueryOutput = TypedDict(
    'AthenaCreateNamedQueryOutput', {
        'NamedQueryId': Optional[str],
    }
)


AthenaWorkGroupConfiguration = TypedDict(
    'AthenaWorkGroupConfiguration', {
        'ResultConfiguration': Optional[AthenaResultConfiguration],
        'BoxedBoolean': Optional[bool],
        'BoxedBoolean': Optional[bool],
        'BytesScannedCutoffValue': Optional[int],
    }
)


AthenaTag = TypedDict(
    'AthenaTag', {
        'TagKey': Optional[str],
        'TagValue': Optional[str],
    }
)


AthenaCreateWorkGroupOutput = TypedDict(
    'AthenaCreateWorkGroupOutput', {
    }
)


AthenaDeleteNamedQueryOutput = TypedDict(
    'AthenaDeleteNamedQueryOutput', {
    }
)


AthenaDeleteWorkGroupOutput = TypedDict(
    'AthenaDeleteWorkGroupOutput', {
    }
)


AthenaGetNamedQueryOutput = TypedDict(
    'AthenaGetNamedQueryOutput', {
        'NamedQuery': Optional[AthenaNamedQuery],
    }
)


AthenaGetQueryExecutionOutput = TypedDict(
    'AthenaGetQueryExecutionOutput', {
        'QueryExecution': Optional[AthenaQueryExecution],
    }
)


AthenaDatum = TypedDict(
    'AthenaDatum', {
        'datumString': Optional[str],
    }
)


AthenaRow = TypedDict(
    'AthenaRow', {
        'datumList': Optional[List[AthenaDatum]],
    }
)


AthenaColumnInfo = TypedDict(
    'AthenaColumnInfo', {
        'String': str,
        'String': str,
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'ColumnNullable': Optional[str],
        'Boolean': Optional[bool],
    }
)


AthenaResultSetMetadata = TypedDict(
    'AthenaResultSetMetadata', {
        'ColumnInfoList': Optional[List[AthenaColumnInfo]],
    }
)


AthenaResultSet = TypedDict(
    'AthenaResultSet', {
        'RowList': Optional[List[AthenaRow]],
        'ResultSetMetadata': Optional[AthenaResultSetMetadata],
    }
)


AthenaGetQueryResultsOutput = TypedDict(
    'AthenaGetQueryResultsOutput', {
        'Long': Optional[int],
        'ResultSet': Optional[AthenaResultSet],
        'Token': Optional[str],
    }
)


AthenaWorkGroup = TypedDict(
    'AthenaWorkGroup', {
        'WorkGroupName': str,
        'WorkGroupState': Optional[str],
        'WorkGroupConfiguration': Optional[AthenaWorkGroupConfiguration],
        'WorkGroupDescriptionString': Optional[str],
        'Date': Optional[datetime.datetime],
    }
)


AthenaGetWorkGroupOutput = TypedDict(
    'AthenaGetWorkGroupOutput', {
        'WorkGroup': Optional[AthenaWorkGroup],
    }
)


AthenaListNamedQueriesOutput = TypedDict(
    'AthenaListNamedQueriesOutput', {
        'NamedQueryIdList': Optional[List[str]],
        'Token': Optional[str],
    }
)


AthenaListQueryExecutionsOutput = TypedDict(
    'AthenaListQueryExecutionsOutput', {
        'QueryExecutionIdList': Optional[List[str]],
        'Token': Optional[str],
    }
)


AthenaListTagsForResourceOutput = TypedDict(
    'AthenaListTagsForResourceOutput', {
        'TagList': Optional[List[AthenaTag]],
        'Token': Optional[str],
    }
)


AthenaWorkGroupSummary = TypedDict(
    'AthenaWorkGroupSummary', {
        'WorkGroupName': Optional[str],
        'WorkGroupState': Optional[str],
        'WorkGroupDescriptionString': Optional[str],
        'Date': Optional[datetime.datetime],
    }
)


AthenaListWorkGroupsOutput = TypedDict(
    'AthenaListWorkGroupsOutput', {
        'WorkGroupsList': Optional[List[AthenaWorkGroupSummary]],
        'Token': Optional[str],
    }
)


AthenaStartQueryExecutionOutput = TypedDict(
    'AthenaStartQueryExecutionOutput', {
        'QueryExecutionId': Optional[str],
    }
)


AthenaStopQueryExecutionOutput = TypedDict(
    'AthenaStopQueryExecutionOutput', {
    }
)


AthenaTagResourceOutput = TypedDict(
    'AthenaTagResourceOutput', {
    }
)


AthenaUntagResourceOutput = TypedDict(
    'AthenaUntagResourceOutput', {
    }
)


AthenaResultConfigurationUpdates = TypedDict(
    'AthenaResultConfigurationUpdates', {
        'String': Optional[str],
        'BoxedBoolean': Optional[bool],
        'EncryptionConfiguration': Optional[AthenaEncryptionConfiguration],
        'BoxedBoolean': Optional[bool],
    }
)


AthenaWorkGroupConfigurationUpdates = TypedDict(
    'AthenaWorkGroupConfigurationUpdates', {
        'BoxedBoolean': Optional[bool],
        'ResultConfigurationUpdates': Optional[AthenaResultConfigurationUpdates],
        'BoxedBoolean': Optional[bool],
        'BytesScannedCutoffValue': Optional[int],
        'BoxedBoolean': Optional[bool],
    }
)


AthenaUpdateWorkGroupOutput = TypedDict(
    'AthenaUpdateWorkGroupOutput', {
    }
)


class AutoScaling(BaseClient):
    def attach_instances(self, *,
        AutoScalingGroupName: str,
        InstanceIds: List[str] = ...
    ): ...

    def attach_load_balancer_target_groups(self, *,
        AutoScalingGroupName: str,
        TargetGroupARNs: List[str]
    ) -> AutoScalingAttachLoadBalancerTargetGroupsResultType: ...

    def attach_load_balancers(self, *,
        AutoScalingGroupName: str,
        LoadBalancerNames: List[str]
    ) -> AutoScalingAttachLoadBalancersResultType: ...

    def batch_delete_scheduled_action(self, *,
        AutoScalingGroupName: str,
        ScheduledActionNames: List[str]
    ) -> AutoScalingBatchDeleteScheduledActionAnswer: ...

    def batch_put_scheduled_update_group_action(self, *,
        AutoScalingGroupName: str,
        ScheduledUpdateGroupActions: List[AutoScalingScheduledUpdateGroupActionRequest]
    ) -> AutoScalingBatchPutScheduledUpdateGroupActionAnswer: ...

    def complete_lifecycle_action(self, *,
        LifecycleHookName: str,
        AutoScalingGroupName: str,
        LifecycleActionResult: str,
        LifecycleActionToken: str = ...,
        InstanceId: str = ...
    ) -> AutoScalingCompleteLifecycleActionAnswer: ...

    def create_auto_scaling_group(self, *,
        AutoScalingGroupName: str,
        MinSize: int,
        MaxSize: int,
        LaunchConfigurationName: str = ...,
        LaunchTemplate: AutoScalingLaunchTemplateSpecification = ...,
        MixedInstancesPolicy: AutoScalingMixedInstancesPolicy = ...,
        InstanceId: str = ...,
        DesiredCapacity: int = ...,
        DefaultCooldown: int = ...,
        AvailabilityZones: List[str] = ...,
        LoadBalancerNames: List[str] = ...,
        TargetGroupARNs: List[str] = ...,
        HealthCheckType: str = ...,
        HealthCheckGracePeriod: int = ...,
        PlacementGroup: str = ...,
        VPCZoneIdentifier: str = ...,
        TerminationPolicies: List[str] = ...,
        NewInstancesProtectedFromScaleIn: bool = ...,
        LifecycleHookSpecificationList: List[AutoScalingLifecycleHookSpecification] = ...,
        Tags: List[AutoScalingTag] = ...,
        ServiceLinkedRoleARN: str = ...
    ): ...

    def create_launch_configuration(self, *,
        LaunchConfigurationName: str,
        ImageId: str = ...,
        KeyName: str = ...,
        SecurityGroups: List[str] = ...,
        ClassicLinkVPCId: str = ...,
        ClassicLinkVPCSecurityGroups: List[str] = ...,
        UserData: str = ...,
        InstanceId: str = ...,
        InstanceType: str = ...,
        KernelId: str = ...,
        RamdiskId: str = ...,
        BlockDeviceMappings: List[AutoScalingBlockDeviceMapping] = ...,
        InstanceMonitoring: AutoScalingInstanceMonitoring = ...,
        SpotPrice: str = ...,
        IamInstanceProfile: str = ...,
        EbsOptimized: bool = ...,
        AssociatePublicIpAddress: bool = ...,
        PlacementTenancy: str = ...
    ): ...

    def create_or_update_tags(self, *,
        Tags: List[AutoScalingTag]
    ): ...

    def delete_auto_scaling_group(self, *,
        AutoScalingGroupName: str,
        ForceDelete: bool = ...
    ): ...

    def delete_launch_configuration(self, *,
        LaunchConfigurationName: str
    ): ...

    def delete_lifecycle_hook(self, *,
        LifecycleHookName: str,
        AutoScalingGroupName: str
    ) -> AutoScalingDeleteLifecycleHookAnswer: ...

    def delete_notification_configuration(self, *,
        AutoScalingGroupName: str,
        TopicARN: str
    ): ...

    def delete_policy(self, *,
        PolicyName: str,
        AutoScalingGroupName: str = ...
    ): ...

    def delete_scheduled_action(self, *,
        AutoScalingGroupName: str,
        ScheduledActionName: str
    ): ...

    def delete_tags(self, *,
        Tags: List[AutoScalingTag]
    ): ...

    def describe_account_limits(self) -> AutoScalingDescribeAccountLimitsAnswer: ...

    def describe_adjustment_types(self) -> AutoScalingDescribeAdjustmentTypesAnswer: ...

    def describe_auto_scaling_groups(self, *,
        AutoScalingGroupNames: List[str] = ...,
        NextToken: str = ...,
        MaxRecords: int = ...
    ) -> AutoScalingAutoScalingGroupsType: ...

    def describe_auto_scaling_instances(self, *,
        InstanceIds: List[str] = ...,
        MaxRecords: int = ...,
        NextToken: str = ...
    ) -> AutoScalingAutoScalingInstancesType: ...

    def describe_auto_scaling_notification_types(self) -> AutoScalingDescribeAutoScalingNotificationTypesAnswer: ...

    def describe_launch_configurations(self, *,
        LaunchConfigurationNames: List[str] = ...,
        NextToken: str = ...,
        MaxRecords: int = ...
    ) -> AutoScalingLaunchConfigurationsType: ...

    def describe_lifecycle_hook_types(self) -> AutoScalingDescribeLifecycleHookTypesAnswer: ...

    def describe_lifecycle_hooks(self, *,
        AutoScalingGroupName: str,
        LifecycleHookNames: List[str] = ...
    ) -> AutoScalingDescribeLifecycleHooksAnswer: ...

    def describe_load_balancer_target_groups(self, *,
        AutoScalingGroupName: str,
        NextToken: str = ...,
        MaxRecords: int = ...
    ) -> AutoScalingDescribeLoadBalancerTargetGroupsResponse: ...

    def describe_load_balancers(self, *,
        AutoScalingGroupName: str,
        NextToken: str = ...,
        MaxRecords: int = ...
    ) -> AutoScalingDescribeLoadBalancersResponse: ...

    def describe_metric_collection_types(self) -> AutoScalingDescribeMetricCollectionTypesAnswer: ...

    def describe_notification_configurations(self, *,
        AutoScalingGroupNames: List[str] = ...,
        NextToken: str = ...,
        MaxRecords: int = ...
    ) -> AutoScalingDescribeNotificationConfigurationsAnswer: ...

    def describe_policies(self, *,
        AutoScalingGroupName: str = ...,
        PolicyNames: List[str] = ...,
        PolicyTypes: List[str] = ...,
        NextToken: str = ...,
        MaxRecords: int = ...
    ) -> AutoScalingPoliciesType: ...

    def describe_scaling_activities(self, *,
        ActivityIds: List[str] = ...,
        AutoScalingGroupName: str = ...,
        MaxRecords: int = ...,
        NextToken: str = ...
    ) -> AutoScalingActivitiesType: ...

    def describe_scaling_process_types(self) -> AutoScalingProcessesType: ...

    def describe_scheduled_actions(self, *,
        AutoScalingGroupName: str = ...,
        ScheduledActionNames: List[str] = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        NextToken: str = ...,
        MaxRecords: int = ...
    ) -> AutoScalingScheduledActionsType: ...

    def describe_tags(self, *,
        Filters: List[AutoScalingFilter] = ...,
        NextToken: str = ...,
        MaxRecords: int = ...
    ) -> AutoScalingTagsType: ...

    def describe_termination_policy_types(self) -> AutoScalingDescribeTerminationPolicyTypesAnswer: ...

    def detach_instances(self, *,
        AutoScalingGroupName: str,
        ShouldDecrementDesiredCapacity: bool,
        InstanceIds: List[str] = ...
    ) -> AutoScalingDetachInstancesAnswer: ...

    def detach_load_balancer_target_groups(self, *,
        AutoScalingGroupName: str,
        TargetGroupARNs: List[str]
    ) -> AutoScalingDetachLoadBalancerTargetGroupsResultType: ...

    def detach_load_balancers(self, *,
        AutoScalingGroupName: str,
        LoadBalancerNames: List[str]
    ) -> AutoScalingDetachLoadBalancersResultType: ...

    def disable_metrics_collection(self, *,
        AutoScalingGroupName: str,
        Metrics: List[str] = ...
    ): ...

    def enable_metrics_collection(self, *,
        AutoScalingGroupName: str,
        Granularity: str,
        Metrics: List[str] = ...
    ): ...

    def enter_standby(self, *,
        AutoScalingGroupName: str,
        ShouldDecrementDesiredCapacity: bool,
        InstanceIds: List[str] = ...
    ) -> AutoScalingEnterStandbyAnswer: ...

    def execute_policy(self, *,
        PolicyName: str,
        AutoScalingGroupName: str = ...,
        HonorCooldown: bool = ...,
        MetricValue: float = ...,
        BreachThreshold: float = ...
    ): ...

    def exit_standby(self, *,
        AutoScalingGroupName: str,
        InstanceIds: List[str] = ...
    ) -> AutoScalingExitStandbyAnswer: ...

    def put_lifecycle_hook(self, *,
        LifecycleHookName: str,
        AutoScalingGroupName: str,
        LifecycleTransition: str = ...,
        RoleARN: str = ...,
        NotificationTargetARN: str = ...,
        NotificationMetadata: str = ...,
        HeartbeatTimeout: int = ...,
        DefaultResult: str = ...
    ) -> AutoScalingPutLifecycleHookAnswer: ...

    def put_notification_configuration(self, *,
        AutoScalingGroupName: str,
        TopicARN: str,
        NotificationTypes: List[str]
    ): ...

    def put_scaling_policy(self, *,
        AutoScalingGroupName: str,
        PolicyName: str,
        PolicyType: str = ...,
        AdjustmentType: str = ...,
        MinAdjustmentStep: int = ...,
        MinAdjustmentMagnitude: int = ...,
        ScalingAdjustment: int = ...,
        Cooldown: int = ...,
        MetricAggregationType: str = ...,
        StepAdjustments: List[AutoScalingStepAdjustment] = ...,
        EstimatedInstanceWarmup: int = ...,
        TargetTrackingConfiguration: AutoScalingTargetTrackingConfiguration = ...
    ) -> AutoScalingPolicyARNType: ...

    def put_scheduled_update_group_action(self, *,
        AutoScalingGroupName: str,
        ScheduledActionName: str,
        Time: datetime.datetime = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        Recurrence: str = ...,
        MinSize: int = ...,
        MaxSize: int = ...,
        DesiredCapacity: int = ...
    ): ...

    def record_lifecycle_action_heartbeat(self, *,
        LifecycleHookName: str,
        AutoScalingGroupName: str,
        LifecycleActionToken: str = ...,
        InstanceId: str = ...
    ) -> AutoScalingRecordLifecycleActionHeartbeatAnswer: ...

    def resume_processes(self, *,
        AutoScalingGroupName: str,
        ScalingProcesses: List[str] = ...
    ): ...

    def set_desired_capacity(self, *,
        AutoScalingGroupName: str,
        DesiredCapacity: int,
        HonorCooldown: bool = ...
    ): ...

    def set_instance_health(self, *,
        InstanceId: str,
        HealthStatus: str,
        ShouldRespectGracePeriod: bool = ...
    ): ...

    def set_instance_protection(self, *,
        InstanceIds: List[str],
        AutoScalingGroupName: str,
        ProtectedFromScaleIn: bool
    ) -> AutoScalingSetInstanceProtectionAnswer: ...

    def suspend_processes(self, *,
        AutoScalingGroupName: str,
        ScalingProcesses: List[str] = ...
    ): ...

    def terminate_instance_in_auto_scaling_group(self, *,
        InstanceId: str,
        ShouldDecrementDesiredCapacity: bool
    ) -> AutoScalingActivityType: ...

    def update_auto_scaling_group(self, *,
        AutoScalingGroupName: str,
        LaunchConfigurationName: str = ...,
        LaunchTemplate: AutoScalingLaunchTemplateSpecification = ...,
        MixedInstancesPolicy: AutoScalingMixedInstancesPolicy = ...,
        MinSize: int = ...,
        MaxSize: int = ...,
        DesiredCapacity: int = ...,
        DefaultCooldown: int = ...,
        AvailabilityZones: List[str] = ...,
        HealthCheckType: str = ...,
        HealthCheckGracePeriod: int = ...,
        PlacementGroup: str = ...,
        VPCZoneIdentifier: str = ...,
        TerminationPolicies: List[str] = ...,
        NewInstancesProtectedFromScaleIn: bool = ...,
        ServiceLinkedRoleARN: str = ...
    ): ...


AutoScalingAttachLoadBalancerTargetGroupsResultType = TypedDict(
    'AutoScalingAttachLoadBalancerTargetGroupsResultType', {
    }
)


AutoScalingAttachLoadBalancersResultType = TypedDict(
    'AutoScalingAttachLoadBalancersResultType', {
    }
)


AutoScalingFailedScheduledUpdateGroupActionRequest = TypedDict(
    'AutoScalingFailedScheduledUpdateGroupActionRequest', {
        'XmlStringMaxLen255': str,
        'XmlStringMaxLen64': Optional[str],
        'XmlString': Optional[str],
    }
)


AutoScalingBatchDeleteScheduledActionAnswer = TypedDict(
    'AutoScalingBatchDeleteScheduledActionAnswer', {
        'FailedScheduledUpdateGroupActionRequests': Optional[List[AutoScalingFailedScheduledUpdateGroupActionRequest]],
    }
)


AutoScalingScheduledUpdateGroupActionRequest = TypedDict(
    'AutoScalingScheduledUpdateGroupActionRequest', {
        'XmlStringMaxLen255': str,
        'TimestampType': Optional[datetime.datetime],
        'TimestampType': Optional[datetime.datetime],
        'XmlStringMaxLen255': Optional[str],
        'AutoScalingGroupMinSize': Optional[int],
        'AutoScalingGroupMaxSize': Optional[int],
        'AutoScalingGroupDesiredCapacity': Optional[int],
    }
)


AutoScalingBatchPutScheduledUpdateGroupActionAnswer = TypedDict(
    'AutoScalingBatchPutScheduledUpdateGroupActionAnswer', {
        'FailedScheduledUpdateGroupActionRequests': Optional[List[AutoScalingFailedScheduledUpdateGroupActionRequest]],
    }
)


AutoScalingCompleteLifecycleActionAnswer = TypedDict(
    'AutoScalingCompleteLifecycleActionAnswer', {
    }
)


AutoScalingLaunchTemplateSpecification = TypedDict(
    'AutoScalingLaunchTemplateSpecification', {
        'XmlStringMaxLen255': Optional[str],
        'LaunchTemplateName': Optional[str],
        'XmlStringMaxLen255': Optional[str],
    }
)


AutoScalingLaunchTemplateOverrides = TypedDict(
    'AutoScalingLaunchTemplateOverrides', {
        'XmlStringMaxLen255': Optional[str],
    }
)


AutoScalingLaunchTemplate = TypedDict(
    'AutoScalingLaunchTemplate', {
        'LaunchTemplateSpecification': Optional[AutoScalingLaunchTemplateSpecification],
        'Overrides': Optional[List[AutoScalingLaunchTemplateOverrides]],
    }
)


AutoScalingInstancesDistribution = TypedDict(
    'AutoScalingInstancesDistribution', {
        'XmlString': Optional[str],
        'OnDemandBaseCapacity': Optional[int],
        'OnDemandPercentageAboveBaseCapacity': Optional[int],
        'XmlString': Optional[str],
        'SpotInstancePools': Optional[int],
        'MixedInstanceSpotPrice': Optional[str],
    }
)


AutoScalingMixedInstancesPolicy = TypedDict(
    'AutoScalingMixedInstancesPolicy', {
        'LaunchTemplate': Optional[AutoScalingLaunchTemplate],
        'InstancesDistribution': Optional[AutoScalingInstancesDistribution],
    }
)


AutoScalingLifecycleHookSpecification = TypedDict(
    'AutoScalingLifecycleHookSpecification', {
        'AsciiStringMaxLen255': str,
        'LifecycleTransition': str,
        'XmlStringMaxLen1023': Optional[str],
        'HeartbeatTimeout': Optional[int],
        'LifecycleActionResult': Optional[str],
        'NotificationTargetResourceName': Optional[str],
        'ResourceName': Optional[str],
    }
)


AutoScalingTag = TypedDict(
    'AutoScalingTag', {
        'TagKey': str,
        'XmlString': Optional[str],
        'XmlString': Optional[str],
        'TagValue': Optional[str],
        'PropagateAtLaunch': Optional[bool],
    }
)


AutoScalingEbs = TypedDict(
    'AutoScalingEbs', {
        'XmlStringMaxLen255': Optional[str],
        'BlockDeviceEbsVolumeSize': Optional[int],
        'BlockDeviceEbsVolumeType': Optional[str],
        'BlockDeviceEbsDeleteOnTermination': Optional[bool],
        'BlockDeviceEbsIops': Optional[int],
        'BlockDeviceEbsEncrypted': Optional[bool],
    }
)


AutoScalingBlockDeviceMapping = TypedDict(
    'AutoScalingBlockDeviceMapping', {
        'XmlStringMaxLen255': str,
        'XmlStringMaxLen255': Optional[str],
        'Ebs': Optional[AutoScalingEbs],
        'NoDevice': Optional[bool],
    }
)


AutoScalingInstanceMonitoring = TypedDict(
    'AutoScalingInstanceMonitoring', {
        'MonitoringEnabled': Optional[bool],
    }
)


AutoScalingDeleteLifecycleHookAnswer = TypedDict(
    'AutoScalingDeleteLifecycleHookAnswer', {
    }
)


AutoScalingDescribeAccountLimitsAnswer = TypedDict(
    'AutoScalingDescribeAccountLimitsAnswer', {
        'MaxNumberOfAutoScalingGroups': Optional[int],
        'MaxNumberOfLaunchConfigurations': Optional[int],
        'NumberOfAutoScalingGroups': Optional[int],
        'NumberOfLaunchConfigurations': Optional[int],
    }
)


AutoScalingAdjustmentType = TypedDict(
    'AutoScalingAdjustmentType', {
        'XmlStringMaxLen255': Optional[str],
    }
)


AutoScalingDescribeAdjustmentTypesAnswer = TypedDict(
    'AutoScalingDescribeAdjustmentTypesAnswer', {
        'AdjustmentTypes': Optional[List[AutoScalingAdjustmentType]],
    }
)


AutoScalingInstance = TypedDict(
    'AutoScalingInstance', {
        'XmlStringMaxLen19': str,
        'XmlStringMaxLen255': str,
        'LifecycleState': str,
        'XmlStringMaxLen32': str,
        'InstanceProtected': bool,
        'XmlStringMaxLen255': Optional[str],
        'LaunchTemplateSpecification': Optional[AutoScalingLaunchTemplateSpecification],
    }
)


AutoScalingSuspendedProcess = TypedDict(
    'AutoScalingSuspendedProcess', {
        'XmlStringMaxLen255': Optional[str],
        'XmlStringMaxLen255': Optional[str],
    }
)


AutoScalingEnabledMetric = TypedDict(
    'AutoScalingEnabledMetric', {
        'XmlStringMaxLen255': Optional[str],
        'XmlStringMaxLen255': Optional[str],
    }
)


AutoScalingTagDescription = TypedDict(
    'AutoScalingTagDescription', {
        'XmlString': Optional[str],
        'XmlString': Optional[str],
        'TagKey': Optional[str],
        'TagValue': Optional[str],
        'PropagateAtLaunch': Optional[bool],
    }
)


AutoScalingAutoScalingGroup = TypedDict(
    'AutoScalingAutoScalingGroup', {
        'XmlStringMaxLen255': str,
        'AutoScalingGroupMinSize': int,
        'AutoScalingGroupMaxSize': int,
        'AutoScalingGroupDesiredCapacity': int,
        'Cooldown': int,
        'AvailabilityZones': List[str],
        'XmlStringMaxLen32': str,
        'TimestampType': datetime.datetime,
        'ResourceName': Optional[str],
        'XmlStringMaxLen255': Optional[str],
        'LaunchTemplateSpecification': Optional[AutoScalingLaunchTemplateSpecification],
        'MixedInstancesPolicy': Optional[AutoScalingMixedInstancesPolicy],
        'LoadBalancerNames': Optional[List[str]],
        'TargetGroupARNs': Optional[List[str]],
        'HealthCheckGracePeriod': Optional[int],
        'Instances': Optional[List[AutoScalingInstance]],
        'SuspendedProcesses': Optional[List[AutoScalingSuspendedProcess]],
        'XmlStringMaxLen255': Optional[str],
        'XmlStringMaxLen2047': Optional[str],
        'EnabledMetrics': Optional[List[AutoScalingEnabledMetric]],
        'XmlStringMaxLen255': Optional[str],
        'TagDescriptionList': Optional[List[AutoScalingTagDescription]],
        'TerminationPolicies': Optional[List[str]],
        'InstanceProtected': Optional[bool],
        'ResourceName': Optional[str],
    }
)


AutoScalingAutoScalingGroupsType = TypedDict(
    'AutoScalingAutoScalingGroupsType', {
        'AutoScalingGroups': List[AutoScalingAutoScalingGroup],
        'XmlString': Optional[str],
    }
)


AutoScalingAutoScalingInstanceDetails = TypedDict(
    'AutoScalingAutoScalingInstanceDetails', {
        'XmlStringMaxLen19': str,
        'XmlStringMaxLen255': str,
        'XmlStringMaxLen255': str,
        'XmlStringMaxLen32': str,
        'XmlStringMaxLen32': str,
        'InstanceProtected': bool,
        'XmlStringMaxLen255': Optional[str],
        'LaunchTemplateSpecification': Optional[AutoScalingLaunchTemplateSpecification],
    }
)


AutoScalingAutoScalingInstancesType = TypedDict(
    'AutoScalingAutoScalingInstancesType', {
        'AutoScalingInstances': Optional[List[AutoScalingAutoScalingInstanceDetails]],
        'XmlString': Optional[str],
    }
)


AutoScalingDescribeAutoScalingNotificationTypesAnswer = TypedDict(
    'AutoScalingDescribeAutoScalingNotificationTypesAnswer', {
        'AutoScalingNotificationTypes': Optional[List[str]],
    }
)


AutoScalingLaunchConfiguration = TypedDict(
    'AutoScalingLaunchConfiguration', {
        'XmlStringMaxLen255': str,
        'XmlStringMaxLen255': str,
        'XmlStringMaxLen255': str,
        'TimestampType': datetime.datetime,
        'ResourceName': Optional[str],
        'XmlStringMaxLen255': Optional[str],
        'SecurityGroups': Optional[List[str]],
        'XmlStringMaxLen255': Optional[str],
        'ClassicLinkVPCSecurityGroups': Optional[List[str]],
        'XmlStringUserData': Optional[str],
        'XmlStringMaxLen255': Optional[str],
        'XmlStringMaxLen255': Optional[str],
        'BlockDeviceMappings': Optional[List[AutoScalingBlockDeviceMapping]],
        'InstanceMonitoring': Optional[AutoScalingInstanceMonitoring],
        'SpotPrice': Optional[str],
        'XmlStringMaxLen1600': Optional[str],
        'EbsOptimized': Optional[bool],
        'AssociatePublicIpAddress': Optional[bool],
        'XmlStringMaxLen64': Optional[str],
    }
)


AutoScalingLaunchConfigurationsType = TypedDict(
    'AutoScalingLaunchConfigurationsType', {
        'LaunchConfigurations': List[AutoScalingLaunchConfiguration],
        'XmlString': Optional[str],
    }
)


AutoScalingDescribeLifecycleHookTypesAnswer = TypedDict(
    'AutoScalingDescribeLifecycleHookTypesAnswer', {
        'AutoScalingNotificationTypes': Optional[List[str]],
    }
)


AutoScalingLifecycleHook = TypedDict(
    'AutoScalingLifecycleHook', {
        'AsciiStringMaxLen255': Optional[str],
        'ResourceName': Optional[str],
        'LifecycleTransition': Optional[str],
        'ResourceName': Optional[str],
        'ResourceName': Optional[str],
        'XmlStringMaxLen1023': Optional[str],
        'HeartbeatTimeout': Optional[int],
        'GlobalTimeout': Optional[int],
        'LifecycleActionResult': Optional[str],
    }
)


AutoScalingDescribeLifecycleHooksAnswer = TypedDict(
    'AutoScalingDescribeLifecycleHooksAnswer', {
        'LifecycleHooks': Optional[List[AutoScalingLifecycleHook]],
    }
)


AutoScalingLoadBalancerTargetGroupState = TypedDict(
    'AutoScalingLoadBalancerTargetGroupState', {
        'XmlStringMaxLen511': Optional[str],
        'XmlStringMaxLen255': Optional[str],
    }
)


AutoScalingDescribeLoadBalancerTargetGroupsResponse = TypedDict(
    'AutoScalingDescribeLoadBalancerTargetGroupsResponse', {
        'LoadBalancerTargetGroupStates': Optional[List[AutoScalingLoadBalancerTargetGroupState]],
        'XmlString': Optional[str],
    }
)


AutoScalingLoadBalancerState = TypedDict(
    'AutoScalingLoadBalancerState', {
        'XmlStringMaxLen255': Optional[str],
        'XmlStringMaxLen255': Optional[str],
    }
)


AutoScalingDescribeLoadBalancersResponse = TypedDict(
    'AutoScalingDescribeLoadBalancersResponse', {
        'LoadBalancerStates': Optional[List[AutoScalingLoadBalancerState]],
        'XmlString': Optional[str],
    }
)


AutoScalingMetricCollectionType = TypedDict(
    'AutoScalingMetricCollectionType', {
        'XmlStringMaxLen255': Optional[str],
    }
)


AutoScalingMetricGranularityType = TypedDict(
    'AutoScalingMetricGranularityType', {
        'XmlStringMaxLen255': Optional[str],
    }
)


AutoScalingDescribeMetricCollectionTypesAnswer = TypedDict(
    'AutoScalingDescribeMetricCollectionTypesAnswer', {
        'MetricCollectionTypes': Optional[List[AutoScalingMetricCollectionType]],
        'MetricGranularityTypes': Optional[List[AutoScalingMetricGranularityType]],
    }
)


AutoScalingNotificationConfiguration = TypedDict(
    'AutoScalingNotificationConfiguration', {
        'ResourceName': Optional[str],
        'ResourceName': Optional[str],
        'XmlStringMaxLen255': Optional[str],
    }
)


AutoScalingDescribeNotificationConfigurationsAnswer = TypedDict(
    'AutoScalingDescribeNotificationConfigurationsAnswer', {
        'NotificationConfigurations': List[AutoScalingNotificationConfiguration],
        'XmlString': Optional[str],
    }
)


AutoScalingStepAdjustment = TypedDict(
    'AutoScalingStepAdjustment', {
        'PolicyIncrement': int,
        'MetricScale': Optional[float],
        'MetricScale': Optional[float],
    }
)


AutoScalingAlarm = TypedDict(
    'AutoScalingAlarm', {
        'XmlStringMaxLen255': Optional[str],
        'ResourceName': Optional[str],
    }
)


AutoScalingPredefinedMetricSpecification = TypedDict(
    'AutoScalingPredefinedMetricSpecification', {
        'MetricType': str,
        'XmlStringMaxLen1023': Optional[str],
    }
)


AutoScalingMetricDimension = TypedDict(
    'AutoScalingMetricDimension', {
        'MetricDimensionName': str,
        'MetricDimensionValue': str,
    }
)


AutoScalingCustomizedMetricSpecification = TypedDict(
    'AutoScalingCustomizedMetricSpecification', {
        'MetricName': str,
        'MetricNamespace': str,
        'MetricStatistic': str,
        'MetricDimensions': Optional[List[AutoScalingMetricDimension]],
        'MetricUnit': Optional[str],
    }
)


AutoScalingTargetTrackingConfiguration = TypedDict(
    'AutoScalingTargetTrackingConfiguration', {
        'MetricScale': float,
        'PredefinedMetricSpecification': Optional[AutoScalingPredefinedMetricSpecification],
        'CustomizedMetricSpecification': Optional[AutoScalingCustomizedMetricSpecification],
        'DisableScaleIn': Optional[bool],
    }
)


AutoScalingScalingPolicy = TypedDict(
    'AutoScalingScalingPolicy', {
        'XmlStringMaxLen255': Optional[str],
        'XmlStringMaxLen255': Optional[str],
        'ResourceName': Optional[str],
        'XmlStringMaxLen64': Optional[str],
        'XmlStringMaxLen255': Optional[str],
        'MinAdjustmentStep': Optional[int],
        'MinAdjustmentMagnitude': Optional[int],
        'PolicyIncrement': Optional[int],
        'Cooldown': Optional[int],
        'StepAdjustments': Optional[List[AutoScalingStepAdjustment]],
        'XmlStringMaxLen32': Optional[str],
        'EstimatedInstanceWarmup': Optional[int],
        'Alarms': Optional[List[AutoScalingAlarm]],
        'TargetTrackingConfiguration': Optional[AutoScalingTargetTrackingConfiguration],
    }
)


AutoScalingPoliciesType = TypedDict(
    'AutoScalingPoliciesType', {
        'ScalingPolicies': Optional[List[AutoScalingScalingPolicy]],
        'XmlString': Optional[str],
    }
)


AutoScalingActivity = TypedDict(
    'AutoScalingActivity', {
        'XmlString': str,
        'XmlStringMaxLen255': str,
        'XmlStringMaxLen1023': str,
        'TimestampType': datetime.datetime,
        'ScalingActivityStatusCode': str,
        'XmlString': Optional[str],
        'TimestampType': Optional[datetime.datetime],
        'XmlStringMaxLen255': Optional[str],
        'Progress': Optional[int],
        'XmlString': Optional[str],
    }
)


AutoScalingActivitiesType = TypedDict(
    'AutoScalingActivitiesType', {
        'Activities': List[AutoScalingActivity],
        'XmlString': Optional[str],
    }
)


AutoScalingProcessType = TypedDict(
    'AutoScalingProcessType', {
        'XmlStringMaxLen255': str,
    }
)


AutoScalingProcessesType = TypedDict(
    'AutoScalingProcessesType', {
        'Processes': Optional[List[AutoScalingProcessType]],
    }
)


AutoScalingScheduledUpdateGroupAction = TypedDict(
    'AutoScalingScheduledUpdateGroupAction', {
        'XmlStringMaxLen255': Optional[str],
        'XmlStringMaxLen255': Optional[str],
        'ResourceName': Optional[str],
        'TimestampType': Optional[datetime.datetime],
        'TimestampType': Optional[datetime.datetime],
        'TimestampType': Optional[datetime.datetime],
        'XmlStringMaxLen255': Optional[str],
        'AutoScalingGroupMinSize': Optional[int],
        'AutoScalingGroupMaxSize': Optional[int],
        'AutoScalingGroupDesiredCapacity': Optional[int],
    }
)


AutoScalingScheduledActionsType = TypedDict(
    'AutoScalingScheduledActionsType', {
        'ScheduledUpdateGroupActions': Optional[List[AutoScalingScheduledUpdateGroupAction]],
        'XmlString': Optional[str],
    }
)


AutoScalingFilter = TypedDict(
    'AutoScalingFilter', {
        'XmlString': Optional[str],
        'Values': Optional[List[str]],
    }
)


AutoScalingTagsType = TypedDict(
    'AutoScalingTagsType', {
        'TagDescriptionList': Optional[List[AutoScalingTagDescription]],
        'XmlString': Optional[str],
    }
)


AutoScalingDescribeTerminationPolicyTypesAnswer = TypedDict(
    'AutoScalingDescribeTerminationPolicyTypesAnswer', {
        'TerminationPolicies': Optional[List[str]],
    }
)


AutoScalingDetachInstancesAnswer = TypedDict(
    'AutoScalingDetachInstancesAnswer', {
        'Activities': Optional[List[AutoScalingActivity]],
    }
)


AutoScalingDetachLoadBalancerTargetGroupsResultType = TypedDict(
    'AutoScalingDetachLoadBalancerTargetGroupsResultType', {
    }
)


AutoScalingDetachLoadBalancersResultType = TypedDict(
    'AutoScalingDetachLoadBalancersResultType', {
    }
)


AutoScalingEnterStandbyAnswer = TypedDict(
    'AutoScalingEnterStandbyAnswer', {
        'Activities': Optional[List[AutoScalingActivity]],
    }
)


AutoScalingExitStandbyAnswer = TypedDict(
    'AutoScalingExitStandbyAnswer', {
        'Activities': Optional[List[AutoScalingActivity]],
    }
)


AutoScalingPutLifecycleHookAnswer = TypedDict(
    'AutoScalingPutLifecycleHookAnswer', {
    }
)


AutoScalingPolicyARNType = TypedDict(
    'AutoScalingPolicyARNType', {
        'ResourceName': Optional[str],
        'Alarms': Optional[List[AutoScalingAlarm]],
    }
)


AutoScalingRecordLifecycleActionHeartbeatAnswer = TypedDict(
    'AutoScalingRecordLifecycleActionHeartbeatAnswer', {
    }
)


AutoScalingSetInstanceProtectionAnswer = TypedDict(
    'AutoScalingSetInstanceProtectionAnswer', {
    }
)


AutoScalingActivityType = TypedDict(
    'AutoScalingActivityType', {
        'Activity': Optional[AutoScalingActivity],
    }
)


class AutoScalingPlans(BaseClient):
    def create_scaling_plan(self, *,
        ScalingPlanName: str,
        ApplicationSource: AutoScalingPlansApplicationSource,
        ScalingInstructions: List[AutoScalingPlansScalingInstruction]
    ) -> AutoScalingPlansCreateScalingPlanResponse: ...

    def delete_scaling_plan(self, *,
        ScalingPlanName: str,
        ScalingPlanVersion: int
    ) -> AutoScalingPlansDeleteScalingPlanResponse: ...

    def describe_scaling_plan_resources(self, *,
        ScalingPlanName: str,
        ScalingPlanVersion: int,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> AutoScalingPlansDescribeScalingPlanResourcesResponse: ...

    def describe_scaling_plans(self, *,
        ScalingPlanNames: List[str] = ...,
        ScalingPlanVersion: int = ...,
        ApplicationSources: List[AutoScalingPlansApplicationSource] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> AutoScalingPlansDescribeScalingPlansResponse: ...

    def get_scaling_plan_resource_forecast_data(self, *,
        ScalingPlanName: str,
        ScalingPlanVersion: int,
        ServiceNamespace: str,
        ResourceId: str,
        ScalableDimension: str,
        ForecastDataType: str,
        StartTime: datetime.datetime,
        EndTime: datetime.datetime
    ) -> AutoScalingPlansGetScalingPlanResourceForecastDataResponse: ...

    def update_scaling_plan(self, *,
        ScalingPlanName: str,
        ScalingPlanVersion: int,
        ApplicationSource: AutoScalingPlansApplicationSource = ...,
        ScalingInstructions: List[AutoScalingPlansScalingInstruction] = ...
    ) -> AutoScalingPlansUpdateScalingPlanResponse: ...


AutoScalingPlansTagFilter = TypedDict(
    'AutoScalingPlansTagFilter', {
        'XmlStringMaxLen128': Optional[str],
        'TagValues': Optional[List[str]],
    }
)


AutoScalingPlansApplicationSource = TypedDict(
    'AutoScalingPlansApplicationSource', {
        'XmlString': Optional[str],
        'TagFilters': Optional[List[AutoScalingPlansTagFilter]],
    }
)


AutoScalingPlansPredefinedScalingMetricSpecification = TypedDict(
    'AutoScalingPlansPredefinedScalingMetricSpecification', {
        'ScalingMetricType': str,
        'ResourceLabel': Optional[str],
    }
)


AutoScalingPlansMetricDimension = TypedDict(
    'AutoScalingPlansMetricDimension', {
        'MetricDimensionName': str,
        'MetricDimensionValue': str,
    }
)


AutoScalingPlansCustomizedScalingMetricSpecification = TypedDict(
    'AutoScalingPlansCustomizedScalingMetricSpecification', {
        'MetricName': str,
        'MetricNamespace': str,
        'MetricStatistic': str,
        'MetricDimensions': Optional[List[AutoScalingPlansMetricDimension]],
        'MetricUnit': Optional[str],
    }
)


AutoScalingPlansTargetTrackingConfiguration = TypedDict(
    'AutoScalingPlansTargetTrackingConfiguration', {
        'MetricScale': float,
        'PredefinedScalingMetricSpecification': Optional[AutoScalingPlansPredefinedScalingMetricSpecification],
        'CustomizedScalingMetricSpecification': Optional[AutoScalingPlansCustomizedScalingMetricSpecification],
        'DisableScaleIn': Optional[bool],
        'Cooldown': Optional[int],
        'Cooldown': Optional[int],
        'Cooldown': Optional[int],
    }
)


AutoScalingPlansPredefinedLoadMetricSpecification = TypedDict(
    'AutoScalingPlansPredefinedLoadMetricSpecification', {
        'LoadMetricType': str,
        'ResourceLabel': Optional[str],
    }
)


AutoScalingPlansCustomizedLoadMetricSpecification = TypedDict(
    'AutoScalingPlansCustomizedLoadMetricSpecification', {
        'MetricName': str,
        'MetricNamespace': str,
        'MetricStatistic': str,
        'MetricDimensions': Optional[List[AutoScalingPlansMetricDimension]],
        'MetricUnit': Optional[str],
    }
)


AutoScalingPlansScalingInstruction = TypedDict(
    'AutoScalingPlansScalingInstruction', {
        'ServiceNamespace': str,
        'ResourceIdMaxLen1600': str,
        'ScalableDimension': str,
        'ResourceCapacity': int,
        'ResourceCapacity': int,
        'TargetTrackingConfigurations': List[AutoScalingPlansTargetTrackingConfiguration],
        'PredefinedLoadMetricSpecification': Optional[AutoScalingPlansPredefinedLoadMetricSpecification],
        'CustomizedLoadMetricSpecification': Optional[AutoScalingPlansCustomizedLoadMetricSpecification],
        'ScheduledActionBufferTime': Optional[int],
        'PredictiveScalingMaxCapacityBehavior': Optional[str],
        'ResourceCapacity': Optional[int],
        'PredictiveScalingMode': Optional[str],
        'ScalingPolicyUpdateBehavior': Optional[str],
        'DisableDynamicScaling': Optional[bool],
    }
)


AutoScalingPlansCreateScalingPlanResponse = TypedDict(
    'AutoScalingPlansCreateScalingPlanResponse', {
        'ScalingPlanVersion': int,
    }
)


AutoScalingPlansDeleteScalingPlanResponse = TypedDict(
    'AutoScalingPlansDeleteScalingPlanResponse', {
    }
)


AutoScalingPlansScalingPolicy = TypedDict(
    'AutoScalingPlansScalingPolicy', {
        'PolicyName': str,
        'PolicyType': str,
        'TargetTrackingConfiguration': Optional[AutoScalingPlansTargetTrackingConfiguration],
    }
)


AutoScalingPlansScalingPlanResource = TypedDict(
    'AutoScalingPlansScalingPlanResource', {
        'ScalingPlanName': str,
        'ScalingPlanVersion': int,
        'ServiceNamespace': str,
        'ResourceIdMaxLen1600': str,
        'ScalableDimension': str,
        'ScalingStatusCode': str,
        'ScalingPolicies': Optional[List[AutoScalingPlansScalingPolicy]],
        'XmlString': Optional[str],
    }
)


AutoScalingPlansDescribeScalingPlanResourcesResponse = TypedDict(
    'AutoScalingPlansDescribeScalingPlanResourcesResponse', {
        'ScalingPlanResources': Optional[List[AutoScalingPlansScalingPlanResource]],
        'NextToken': Optional[str],
    }
)


AutoScalingPlansScalingPlan = TypedDict(
    'AutoScalingPlansScalingPlan', {
        'ScalingPlanName': str,
        'ScalingPlanVersion': int,
        'ApplicationSource': AutoScalingPlansApplicationSource,
        'ScalingInstructions': List[AutoScalingPlansScalingInstruction],
        'ScalingPlanStatusCode': str,
        'XmlString': Optional[str],
        'TimestampType': Optional[datetime.datetime],
        'TimestampType': Optional[datetime.datetime],
    }
)


AutoScalingPlansDescribeScalingPlansResponse = TypedDict(
    'AutoScalingPlansDescribeScalingPlansResponse', {
        'ScalingPlans': Optional[List[AutoScalingPlansScalingPlan]],
        'NextToken': Optional[str],
    }
)


AutoScalingPlansDatapoint = TypedDict(
    'AutoScalingPlansDatapoint', {
        'TimestampType': Optional[datetime.datetime],
        'MetricScale': Optional[float],
    }
)


AutoScalingPlansGetScalingPlanResourceForecastDataResponse = TypedDict(
    'AutoScalingPlansGetScalingPlanResourceForecastDataResponse', {
        'Datapoints': List[AutoScalingPlansDatapoint],
    }
)


AutoScalingPlansUpdateScalingPlanResponse = TypedDict(
    'AutoScalingPlansUpdateScalingPlanResponse', {
    }
)


class Backup(BaseClient):
    def create_backup_plan(self, *,
        BackupPlan: BackupBackupPlanInput,
        BackupPlanTags: Dict[str, str] = ...,
        CreatorRequestId: str = ...
    ) -> BackupCreateBackupPlanOutput: ...

    def create_backup_selection(self, *,
        BackupPlanId: str,
        BackupSelection: BackupBackupSelection,
        CreatorRequestId: str = ...
    ) -> BackupCreateBackupSelectionOutput: ...

    def create_backup_vault(self, *,
        BackupVaultName: str,
        BackupVaultTags: Dict[str, str] = ...,
        EncryptionKeyArn: str = ...,
        CreatorRequestId: str = ...
    ) -> BackupCreateBackupVaultOutput: ...

    def delete_backup_plan(self, *,
        BackupPlanId: str
    ) -> BackupDeleteBackupPlanOutput: ...

    def delete_backup_selection(self, *,
        BackupPlanId: str,
        SelectionId: str
    ): ...

    def delete_backup_vault(self, *,
        BackupVaultName: str
    ): ...

    def delete_backup_vault_access_policy(self, *,
        BackupVaultName: str
    ): ...

    def delete_backup_vault_notifications(self, *,
        BackupVaultName: str
    ): ...

    def delete_recovery_point(self, *,
        BackupVaultName: str,
        RecoveryPointArn: str
    ): ...

    def describe_backup_job(self, *,
        BackupJobId: str
    ) -> BackupDescribeBackupJobOutput: ...

    def describe_backup_vault(self, *,
        BackupVaultName: str
    ) -> BackupDescribeBackupVaultOutput: ...

    def describe_protected_resource(self, *,
        ResourceArn: str
    ) -> BackupDescribeProtectedResourceOutput: ...

    def describe_recovery_point(self, *,
        BackupVaultName: str,
        RecoveryPointArn: str
    ) -> BackupDescribeRecoveryPointOutput: ...

    def describe_restore_job(self, *,
        RestoreJobId: str
    ) -> BackupDescribeRestoreJobOutput: ...

    def export_backup_plan_template(self, *,
        BackupPlanId: str
    ) -> BackupExportBackupPlanTemplateOutput: ...

    def get_backup_plan(self, *,
        BackupPlanId: str,
        VersionId: str = ...
    ) -> BackupGetBackupPlanOutput: ...

    def get_backup_plan_from_json(self, *,
        BackupPlanTemplateJson: str
    ) -> BackupGetBackupPlanFromJSONOutput: ...

    def get_backup_plan_from_template(self, *,
        BackupPlanTemplateId: str
    ) -> BackupGetBackupPlanFromTemplateOutput: ...

    def get_backup_selection(self, *,
        BackupPlanId: str,
        SelectionId: str
    ) -> BackupGetBackupSelectionOutput: ...

    def get_backup_vault_access_policy(self, *,
        BackupVaultName: str
    ) -> BackupGetBackupVaultAccessPolicyOutput: ...

    def get_backup_vault_notifications(self, *,
        BackupVaultName: str
    ) -> BackupGetBackupVaultNotificationsOutput: ...

    def get_recovery_point_restore_metadata(self, *,
        BackupVaultName: str,
        RecoveryPointArn: str
    ) -> BackupGetRecoveryPointRestoreMetadataOutput: ...

    def get_supported_resource_types(self) -> BackupGetSupportedResourceTypesOutput: ...

    def list_backup_jobs(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        ByResourceArn: str = ...,
        ByState: str = ...,
        ByBackupVaultName: str = ...,
        ByCreatedBefore: datetime.datetime = ...,
        ByCreatedAfter: datetime.datetime = ...,
        ByResourceType: str = ...
    ) -> BackupListBackupJobsOutput: ...

    def list_backup_plan_templates(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> BackupListBackupPlanTemplatesOutput: ...

    def list_backup_plan_versions(self, *,
        BackupPlanId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> BackupListBackupPlanVersionsOutput: ...

    def list_backup_plans(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        IncludeDeleted: bool = ...
    ) -> BackupListBackupPlansOutput: ...

    def list_backup_selections(self, *,
        BackupPlanId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> BackupListBackupSelectionsOutput: ...

    def list_backup_vaults(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> BackupListBackupVaultsOutput: ...

    def list_protected_resources(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> BackupListProtectedResourcesOutput: ...

    def list_recovery_points_by_backup_vault(self, *,
        BackupVaultName: str,
        NextToken: str = ...,
        MaxResults: int = ...,
        ByResourceArn: str = ...,
        ByResourceType: str = ...,
        ByBackupPlanId: str = ...,
        ByCreatedBefore: datetime.datetime = ...,
        ByCreatedAfter: datetime.datetime = ...
    ) -> BackupListRecoveryPointsByBackupVaultOutput: ...

    def list_recovery_points_by_resource(self, *,
        ResourceArn: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> BackupListRecoveryPointsByResourceOutput: ...

    def list_restore_jobs(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> BackupListRestoreJobsOutput: ...

    def list_tags(self, *,
        ResourceArn: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> BackupListTagsOutput: ...

    def put_backup_vault_access_policy(self, *,
        BackupVaultName: str,
        Policy: str = ...
    ): ...

    def put_backup_vault_notifications(self, *,
        BackupVaultName: str,
        SNSTopicArn: str,
        BackupVaultEvents: List[str]
    ): ...

    def start_backup_job(self, *,
        BackupVaultName: str,
        ResourceArn: str,
        IamRoleArn: str,
        IdempotencyToken: str = ...,
        StartWindowMinutes: int = ...,
        CompleteWindowMinutes: int = ...,
        Lifecycle: BackupLifecycle = ...,
        RecoveryPointTags: Dict[str, str] = ...
    ) -> BackupStartBackupJobOutput: ...

    def start_restore_job(self, *,
        RecoveryPointArn: str,
        Metadata: Dict[str, str],
        IamRoleArn: str,
        IdempotencyToken: str = ...,
        ResourceType: str = ...
    ) -> BackupStartRestoreJobOutput: ...

    def stop_backup_job(self, *,
        BackupJobId: str
    ): ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: Dict[str, str]
    ): ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeyList: List[str]
    ): ...

    def update_backup_plan(self, *,
        BackupPlanId: str,
        BackupPlan: BackupBackupPlanInput
    ) -> BackupUpdateBackupPlanOutput: ...

    def update_recovery_point_lifecycle(self, *,
        BackupVaultName: str,
        RecoveryPointArn: str,
        Lifecycle: BackupLifecycle = ...
    ) -> BackupUpdateRecoveryPointLifecycleOutput: ...


BackupLifecycle = TypedDict(
    'BackupLifecycle', {
        'Long': Optional[int],
        'Long': Optional[int],
    }
)


BackupBackupRuleInput = TypedDict(
    'BackupBackupRuleInput', {
        'BackupRuleName': str,
        'BackupVaultName': str,
        'CronExpression': Optional[str],
        'WindowMinutes': Optional[int],
        'WindowMinutes': Optional[int],
        'Lifecycle': Optional[BackupLifecycle],
        'Tags': Optional[Dict[str, str]],
    }
)


BackupBackupPlanInput = TypedDict(
    'BackupBackupPlanInput', {
        'BackupPlanName': str,
        'BackupRulesInput': List[BackupBackupRuleInput],
    }
)


BackupCreateBackupPlanOutput = TypedDict(
    'BackupCreateBackupPlanOutput', {
        'string': Optional[str],
        'ARN': Optional[str],
        'timestamp': Optional[datetime.datetime],
        'string': Optional[str],
    }
)


BackupCondition = TypedDict(
    'BackupCondition', {
        'ConditionType': str,
        'ConditionKey': str,
        'ConditionValue': str,
    }
)


BackupBackupSelection = TypedDict(
    'BackupBackupSelection', {
        'BackupSelectionName': str,
        'IAMRoleArn': str,
        'ResourceArns': Optional[List[str]],
        'ListOfTags': Optional[List[BackupCondition]],
    }
)


BackupCreateBackupSelectionOutput = TypedDict(
    'BackupCreateBackupSelectionOutput', {
        'string': Optional[str],
        'string': Optional[str],
        'timestamp': Optional[datetime.datetime],
    }
)


BackupCreateBackupVaultOutput = TypedDict(
    'BackupCreateBackupVaultOutput', {
        'BackupVaultName': Optional[str],
        'ARN': Optional[str],
        'timestamp': Optional[datetime.datetime],
    }
)


BackupDeleteBackupPlanOutput = TypedDict(
    'BackupDeleteBackupPlanOutput', {
        'string': Optional[str],
        'ARN': Optional[str],
        'timestamp': Optional[datetime.datetime],
        'string': Optional[str],
    }
)


BackupRecoveryPointCreator = TypedDict(
    'BackupRecoveryPointCreator', {
        'string': Optional[str],
        'ARN': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
    }
)


BackupDescribeBackupJobOutput = TypedDict(
    'BackupDescribeBackupJobOutput', {
        'string': Optional[str],
        'BackupVaultName': Optional[str],
        'ARN': Optional[str],
        'ARN': Optional[str],
        'ARN': Optional[str],
        'timestamp': Optional[datetime.datetime],
        'timestamp': Optional[datetime.datetime],
        'BackupJobState': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'Long': Optional[int],
        'IAMRoleArn': Optional[str],
        'RecoveryPointCreator': Optional[BackupRecoveryPointCreator],
        'ResourceType': Optional[str],
        'Long': Optional[int],
        'timestamp': Optional[datetime.datetime],
        'timestamp': Optional[datetime.datetime],
    }
)


BackupDescribeBackupVaultOutput = TypedDict(
    'BackupDescribeBackupVaultOutput', {
        'string': Optional[str],
        'ARN': Optional[str],
        'ARN': Optional[str],
        'timestamp': Optional[datetime.datetime],
        'string': Optional[str],
        'long': Optional[int],
    }
)


BackupDescribeProtectedResourceOutput = TypedDict(
    'BackupDescribeProtectedResourceOutput', {
        'ARN': Optional[str],
        'ResourceType': Optional[str],
        'timestamp': Optional[datetime.datetime],
    }
)


BackupCalculatedLifecycle = TypedDict(
    'BackupCalculatedLifecycle', {
        'timestamp': Optional[datetime.datetime],
        'timestamp': Optional[datetime.datetime],
    }
)


BackupDescribeRecoveryPointOutput = TypedDict(
    'BackupDescribeRecoveryPointOutput', {
        'ARN': Optional[str],
        'BackupVaultName': Optional[str],
        'ARN': Optional[str],
        'ARN': Optional[str],
        'ResourceType': Optional[str],
        'RecoveryPointCreator': Optional[BackupRecoveryPointCreator],
        'IAMRoleArn': Optional[str],
        'RecoveryPointStatus': Optional[str],
        'timestamp': Optional[datetime.datetime],
        'timestamp': Optional[datetime.datetime],
        'Long': Optional[int],
        'CalculatedLifecycle': Optional[BackupCalculatedLifecycle],
        'Lifecycle': Optional[BackupLifecycle],
        'ARN': Optional[str],
        'boolean': Optional[bool],
        'StorageClass': Optional[str],
        'timestamp': Optional[datetime.datetime],
    }
)


BackupDescribeRestoreJobOutput = TypedDict(
    'BackupDescribeRestoreJobOutput', {
        'string': Optional[str],
        'ARN': Optional[str],
        'timestamp': Optional[datetime.datetime],
        'timestamp': Optional[datetime.datetime],
        'RestoreJobStatus': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'Long': Optional[int],
        'IAMRoleArn': Optional[str],
        'Long': Optional[int],
        'ARN': Optional[str],
    }
)


BackupExportBackupPlanTemplateOutput = TypedDict(
    'BackupExportBackupPlanTemplateOutput', {
        'string': Optional[str],
    }
)


BackupBackupRule = TypedDict(
    'BackupBackupRule', {
        'BackupRuleName': str,
        'BackupVaultName': str,
        'CronExpression': Optional[str],
        'WindowMinutes': Optional[int],
        'WindowMinutes': Optional[int],
        'Lifecycle': Optional[BackupLifecycle],
        'Tags': Optional[Dict[str, str]],
        'string': Optional[str],
    }
)


BackupBackupPlan = TypedDict(
    'BackupBackupPlan', {
        'BackupPlanName': str,
        'BackupRules': List[BackupBackupRule],
    }
)


BackupGetBackupPlanOutput = TypedDict(
    'BackupGetBackupPlanOutput', {
        'BackupPlan': Optional[BackupBackupPlan],
        'string': Optional[str],
        'ARN': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'timestamp': Optional[datetime.datetime],
        'timestamp': Optional[datetime.datetime],
        'timestamp': Optional[datetime.datetime],
    }
)


BackupGetBackupPlanFromJSONOutput = TypedDict(
    'BackupGetBackupPlanFromJSONOutput', {
        'BackupPlan': Optional[BackupBackupPlan],
    }
)


BackupGetBackupPlanFromTemplateOutput = TypedDict(
    'BackupGetBackupPlanFromTemplateOutput', {
        'BackupPlan': Optional[BackupBackupPlan],
    }
)


BackupGetBackupSelectionOutput = TypedDict(
    'BackupGetBackupSelectionOutput', {
        'BackupSelection': Optional[BackupBackupSelection],
        'string': Optional[str],
        'string': Optional[str],
        'timestamp': Optional[datetime.datetime],
        'string': Optional[str],
    }
)


BackupGetBackupVaultAccessPolicyOutput = TypedDict(
    'BackupGetBackupVaultAccessPolicyOutput', {
        'BackupVaultName': Optional[str],
        'ARN': Optional[str],
        'IAMPolicy': Optional[str],
    }
)


BackupGetBackupVaultNotificationsOutput = TypedDict(
    'BackupGetBackupVaultNotificationsOutput', {
        'BackupVaultName': Optional[str],
        'ARN': Optional[str],
        'ARN': Optional[str],
        'BackupVaultEvents': Optional[List[str]],
    }
)


BackupGetRecoveryPointRestoreMetadataOutput = TypedDict(
    'BackupGetRecoveryPointRestoreMetadataOutput', {
        'ARN': Optional[str],
        'ARN': Optional[str],
        'Metadata': Optional[Dict[str, str]],
    }
)


BackupGetSupportedResourceTypesOutput = TypedDict(
    'BackupGetSupportedResourceTypesOutput', {
        'ResourceTypes': Optional[List[str]],
    }
)


BackupBackupJob = TypedDict(
    'BackupBackupJob', {
        'string': Optional[str],
        'BackupVaultName': Optional[str],
        'ARN': Optional[str],
        'ARN': Optional[str],
        'ARN': Optional[str],
        'timestamp': Optional[datetime.datetime],
        'timestamp': Optional[datetime.datetime],
        'BackupJobState': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'Long': Optional[int],
        'IAMRoleArn': Optional[str],
        'RecoveryPointCreator': Optional[BackupRecoveryPointCreator],
        'timestamp': Optional[datetime.datetime],
        'timestamp': Optional[datetime.datetime],
        'ResourceType': Optional[str],
        'Long': Optional[int],
    }
)


BackupListBackupJobsOutput = TypedDict(
    'BackupListBackupJobsOutput', {
        'BackupJobsList': Optional[List[BackupBackupJob]],
        'string': Optional[str],
    }
)


BackupBackupPlanTemplatesListMember = TypedDict(
    'BackupBackupPlanTemplatesListMember', {
        'string': Optional[str],
        'string': Optional[str],
    }
)


BackupListBackupPlanTemplatesOutput = TypedDict(
    'BackupListBackupPlanTemplatesOutput', {
        'string': Optional[str],
        'BackupPlanTemplatesList': Optional[List[BackupBackupPlanTemplatesListMember]],
    }
)


BackupBackupPlansListMember = TypedDict(
    'BackupBackupPlansListMember', {
        'ARN': Optional[str],
        'string': Optional[str],
        'timestamp': Optional[datetime.datetime],
        'timestamp': Optional[datetime.datetime],
        'string': Optional[str],
        'BackupPlanName': Optional[str],
        'string': Optional[str],
        'timestamp': Optional[datetime.datetime],
    }
)


BackupListBackupPlanVersionsOutput = TypedDict(
    'BackupListBackupPlanVersionsOutput', {
        'string': Optional[str],
        'BackupPlanVersionsList': Optional[List[BackupBackupPlansListMember]],
    }
)


BackupListBackupPlansOutput = TypedDict(
    'BackupListBackupPlansOutput', {
        'string': Optional[str],
        'BackupPlansList': Optional[List[BackupBackupPlansListMember]],
    }
)


BackupBackupSelectionsListMember = TypedDict(
    'BackupBackupSelectionsListMember', {
        'string': Optional[str],
        'BackupSelectionName': Optional[str],
        'string': Optional[str],
        'timestamp': Optional[datetime.datetime],
        'string': Optional[str],
        'IAMRoleArn': Optional[str],
    }
)


BackupListBackupSelectionsOutput = TypedDict(
    'BackupListBackupSelectionsOutput', {
        'string': Optional[str],
        'BackupSelectionsList': Optional[List[BackupBackupSelectionsListMember]],
    }
)


BackupBackupVaultListMember = TypedDict(
    'BackupBackupVaultListMember', {
        'BackupVaultName': Optional[str],
        'ARN': Optional[str],
        'timestamp': Optional[datetime.datetime],
        'ARN': Optional[str],
        'string': Optional[str],
        'long': Optional[int],
    }
)


BackupListBackupVaultsOutput = TypedDict(
    'BackupListBackupVaultsOutput', {
        'BackupVaultList': Optional[List[BackupBackupVaultListMember]],
        'string': Optional[str],
    }
)


BackupProtectedResource = TypedDict(
    'BackupProtectedResource', {
        'ARN': Optional[str],
        'ResourceType': Optional[str],
        'timestamp': Optional[datetime.datetime],
    }
)


BackupListProtectedResourcesOutput = TypedDict(
    'BackupListProtectedResourcesOutput', {
        'ProtectedResourcesList': Optional[List[BackupProtectedResource]],
        'string': Optional[str],
    }
)


BackupRecoveryPointByBackupVault = TypedDict(
    'BackupRecoveryPointByBackupVault', {
        'ARN': Optional[str],
        'BackupVaultName': Optional[str],
        'ARN': Optional[str],
        'ARN': Optional[str],
        'ResourceType': Optional[str],
        'RecoveryPointCreator': Optional[BackupRecoveryPointCreator],
        'IAMRoleArn': Optional[str],
        'RecoveryPointStatus': Optional[str],
        'timestamp': Optional[datetime.datetime],
        'timestamp': Optional[datetime.datetime],
        'Long': Optional[int],
        'CalculatedLifecycle': Optional[BackupCalculatedLifecycle],
        'Lifecycle': Optional[BackupLifecycle],
        'ARN': Optional[str],
        'boolean': Optional[bool],
        'timestamp': Optional[datetime.datetime],
    }
)


BackupListRecoveryPointsByBackupVaultOutput = TypedDict(
    'BackupListRecoveryPointsByBackupVaultOutput', {
        'string': Optional[str],
        'RecoveryPointByBackupVaultList': Optional[List[BackupRecoveryPointByBackupVault]],
    }
)


BackupRecoveryPointByResource = TypedDict(
    'BackupRecoveryPointByResource', {
        'ARN': Optional[str],
        'timestamp': Optional[datetime.datetime],
        'RecoveryPointStatus': Optional[str],
        'ARN': Optional[str],
        'Long': Optional[int],
        'BackupVaultName': Optional[str],
    }
)


BackupListRecoveryPointsByResourceOutput = TypedDict(
    'BackupListRecoveryPointsByResourceOutput', {
        'string': Optional[str],
        'RecoveryPointByResourceList': Optional[List[BackupRecoveryPointByResource]],
    }
)


BackupRestoreJobsListMember = TypedDict(
    'BackupRestoreJobsListMember', {
        'string': Optional[str],
        'ARN': Optional[str],
        'timestamp': Optional[datetime.datetime],
        'timestamp': Optional[datetime.datetime],
        'RestoreJobStatus': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'Long': Optional[int],
        'IAMRoleArn': Optional[str],
        'Long': Optional[int],
        'ARN': Optional[str],
    }
)


BackupListRestoreJobsOutput = TypedDict(
    'BackupListRestoreJobsOutput', {
        'RestoreJobsList': Optional[List[BackupRestoreJobsListMember]],
        'string': Optional[str],
    }
)


BackupListTagsOutput = TypedDict(
    'BackupListTagsOutput', {
        'string': Optional[str],
        'Tags': Optional[Dict[str, str]],
    }
)


BackupStartBackupJobOutput = TypedDict(
    'BackupStartBackupJobOutput', {
        'string': Optional[str],
        'ARN': Optional[str],
        'timestamp': Optional[datetime.datetime],
    }
)


BackupStartRestoreJobOutput = TypedDict(
    'BackupStartRestoreJobOutput', {
        'RestoreJobId': Optional[str],
    }
)


BackupUpdateBackupPlanOutput = TypedDict(
    'BackupUpdateBackupPlanOutput', {
        'string': Optional[str],
        'ARN': Optional[str],
        'timestamp': Optional[datetime.datetime],
        'string': Optional[str],
    }
)


BackupUpdateRecoveryPointLifecycleOutput = TypedDict(
    'BackupUpdateRecoveryPointLifecycleOutput', {
        'ARN': Optional[str],
        'ARN': Optional[str],
        'Lifecycle': Optional[BackupLifecycle],
        'CalculatedLifecycle': Optional[BackupCalculatedLifecycle],
    }
)


class Batch(BaseClient):
    def cancel_job(self, *,
        jobId: str,
        reason: str
    ) -> BatchCancelJobResponse: ...

    def create_compute_environment(self, *,
        computeEnvironmentName: str,
        type: str,
        serviceRole: str,
        state: str = ...,
        computeResources: BatchComputeResource = ...
    ) -> BatchCreateComputeEnvironmentResponse: ...

    def create_job_queue(self, *,
        jobQueueName: str,
        priority: int,
        computeEnvironmentOrder: List[BatchComputeEnvironmentOrder],
        state: str = ...
    ) -> BatchCreateJobQueueResponse: ...

    def delete_compute_environment(self, *,
        computeEnvironment: str
    ) -> BatchDeleteComputeEnvironmentResponse: ...

    def delete_job_queue(self, *,
        jobQueue: str
    ) -> BatchDeleteJobQueueResponse: ...

    def deregister_job_definition(self, *,
        jobDefinition: str
    ) -> BatchDeregisterJobDefinitionResponse: ...

    def describe_compute_environments(self, *,
        computeEnvironments: List[str] = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> BatchDescribeComputeEnvironmentsResponse: ...

    def describe_job_definitions(self, *,
        jobDefinitions: List[str] = ...,
        maxResults: int = ...,
        jobDefinitionName: str = ...,
        status: str = ...,
        nextToken: str = ...
    ) -> BatchDescribeJobDefinitionsResponse: ...

    def describe_job_queues(self, *,
        jobQueues: List[str] = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> BatchDescribeJobQueuesResponse: ...

    def describe_jobs(self, *,
        jobs: List[str]
    ) -> BatchDescribeJobsResponse: ...

    def list_jobs(self, *,
        jobQueue: str = ...,
        arrayJobId: str = ...,
        multiNodeJobId: str = ...,
        jobStatus: str = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> BatchListJobsResponse: ...

    def register_job_definition(self, *,
        jobDefinitionName: str,
        type: str,
        parameters: Dict[str, str] = ...,
        containerProperties: BatchContainerProperties = ...,
        nodeProperties: BatchNodeProperties = ...,
        retryStrategy: BatchRetryStrategy = ...,
        timeout: BatchJobTimeout = ...
    ) -> BatchRegisterJobDefinitionResponse: ...

    def submit_job(self, *,
        jobName: str,
        jobQueue: str,
        jobDefinition: str,
        arrayProperties: BatchArrayProperties = ...,
        dependsOn: List[BatchJobDependency] = ...,
        parameters: Dict[str, str] = ...,
        containerOverrides: BatchContainerOverrides = ...,
        nodeOverrides: BatchNodeOverrides = ...,
        retryStrategy: BatchRetryStrategy = ...,
        timeout: BatchJobTimeout = ...
    ) -> BatchSubmitJobResponse: ...

    def terminate_job(self, *,
        jobId: str,
        reason: str
    ) -> BatchTerminateJobResponse: ...

    def update_compute_environment(self, *,
        computeEnvironment: str,
        state: str = ...,
        computeResources: BatchComputeResourceUpdate = ...,
        serviceRole: str = ...
    ) -> BatchUpdateComputeEnvironmentResponse: ...

    def update_job_queue(self, *,
        jobQueue: str,
        state: str = ...,
        priority: int = ...,
        computeEnvironmentOrder: List[BatchComputeEnvironmentOrder] = ...
    ) -> BatchUpdateJobQueueResponse: ...


BatchCancelJobResponse = TypedDict(
    'BatchCancelJobResponse', {
    }
)


BatchLaunchTemplateSpecification = TypedDict(
    'BatchLaunchTemplateSpecification', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


BatchComputeResource = TypedDict(
    'BatchComputeResource', {
        'CRType': str,
        'Integer': int,
        'Integer': int,
        'StringList': List[str],
        'StringList': List[str],
        'String': str,
        'Integer': Optional[int],
        'String': Optional[str],
        'StringList': Optional[List[str]],
        'String': Optional[str],
        'TagsMap': Optional[Dict[str, str]],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'LaunchTemplateSpecification': Optional[BatchLaunchTemplateSpecification],
    }
)


BatchCreateComputeEnvironmentResponse = TypedDict(
    'BatchCreateComputeEnvironmentResponse', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


BatchComputeEnvironmentOrder = TypedDict(
    'BatchComputeEnvironmentOrder', {
        'Integer': int,
        'String': str,
    }
)


BatchCreateJobQueueResponse = TypedDict(
    'BatchCreateJobQueueResponse', {
        'String': str,
        'String': str,
    }
)


BatchDeleteComputeEnvironmentResponse = TypedDict(
    'BatchDeleteComputeEnvironmentResponse', {
    }
)


BatchDeleteJobQueueResponse = TypedDict(
    'BatchDeleteJobQueueResponse', {
    }
)


BatchDeregisterJobDefinitionResponse = TypedDict(
    'BatchDeregisterJobDefinitionResponse', {
    }
)


BatchComputeEnvironmentDetail = TypedDict(
    'BatchComputeEnvironmentDetail', {
        'String': str,
        'String': str,
        'String': str,
        'CEType': Optional[str],
        'CEState': Optional[str],
        'CEStatus': Optional[str],
        'String': Optional[str],
        'ComputeResource': Optional[BatchComputeResource],
        'String': Optional[str],
    }
)


BatchDescribeComputeEnvironmentsResponse = TypedDict(
    'BatchDescribeComputeEnvironmentsResponse', {
        'ComputeEnvironmentDetailList': Optional[List[BatchComputeEnvironmentDetail]],
        'String': Optional[str],
    }
)


BatchRetryStrategy = TypedDict(
    'BatchRetryStrategy', {
        'Integer': Optional[int],
    }
)


BatchHost = TypedDict(
    'BatchHost', {
        'String': Optional[str],
    }
)


BatchVolume = TypedDict(
    'BatchVolume', {
        'Host': Optional[BatchHost],
        'String': Optional[str],
    }
)


BatchKeyValuePair = TypedDict(
    'BatchKeyValuePair', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


BatchMountPoint = TypedDict(
    'BatchMountPoint', {
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
    }
)


BatchUlimit = TypedDict(
    'BatchUlimit', {
        'Integer': int,
        'String': str,
        'Integer': int,
    }
)


BatchResourceRequirement = TypedDict(
    'BatchResourceRequirement', {
        'String': str,
        'ResourceType': str,
    }
)


BatchContainerProperties = TypedDict(
    'BatchContainerProperties', {
        'String': Optional[str],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'StringList': Optional[List[str]],
        'String': Optional[str],
        'Volumes': Optional[List[BatchVolume]],
        'EnvironmentVariables': Optional[List[BatchKeyValuePair]],
        'MountPoints': Optional[List[BatchMountPoint]],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Ulimits': Optional[List[BatchUlimit]],
        'String': Optional[str],
        'String': Optional[str],
        'ResourceRequirements': Optional[List[BatchResourceRequirement]],
    }
)


BatchJobTimeout = TypedDict(
    'BatchJobTimeout', {
        'Integer': Optional[int],
    }
)


BatchNodeRangeProperty = TypedDict(
    'BatchNodeRangeProperty', {
        'String': str,
        'ContainerProperties': Optional[BatchContainerProperties],
    }
)


BatchNodeProperties = TypedDict(
    'BatchNodeProperties', {
        'Integer': int,
        'Integer': int,
        'NodeRangeProperties': List[BatchNodeRangeProperty],
    }
)


BatchJobDefinition = TypedDict(
    'BatchJobDefinition', {
        'String': str,
        'String': str,
        'Integer': int,
        'String': str,
        'String': Optional[str],
        'ParametersMap': Optional[Dict[str, str]],
        'RetryStrategy': Optional[BatchRetryStrategy],
        'ContainerProperties': Optional[BatchContainerProperties],
        'JobTimeout': Optional[BatchJobTimeout],
        'NodeProperties': Optional[BatchNodeProperties],
    }
)


BatchDescribeJobDefinitionsResponse = TypedDict(
    'BatchDescribeJobDefinitionsResponse', {
        'JobDefinitionList': Optional[List[BatchJobDefinition]],
        'String': Optional[str],
    }
)


BatchJobQueueDetail = TypedDict(
    'BatchJobQueueDetail', {
        'String': str,
        'String': str,
        'JQState': str,
        'Integer': int,
        'ComputeEnvironmentOrders': List[BatchComputeEnvironmentOrder],
        'JQStatus': Optional[str],
        'String': Optional[str],
    }
)


BatchDescribeJobQueuesResponse = TypedDict(
    'BatchDescribeJobQueuesResponse', {
        'JobQueueDetailList': Optional[List[BatchJobQueueDetail]],
        'String': Optional[str],
    }
)


BatchNetworkInterface = TypedDict(
    'BatchNetworkInterface', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


BatchAttemptContainerDetail = TypedDict(
    'BatchAttemptContainerDetail', {
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'NetworkInterfaceList': Optional[List[BatchNetworkInterface]],
    }
)


BatchAttemptDetail = TypedDict(
    'BatchAttemptDetail', {
        'AttemptContainerDetail': Optional[BatchAttemptContainerDetail],
        'Long': Optional[int],
        'Long': Optional[int],
        'String': Optional[str],
    }
)


BatchJobDependency = TypedDict(
    'BatchJobDependency', {
        'String': Optional[str],
        'ArrayJobDependency': Optional[str],
    }
)


BatchContainerDetail = TypedDict(
    'BatchContainerDetail', {
        'String': Optional[str],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'StringList': Optional[List[str]],
        'String': Optional[str],
        'Volumes': Optional[List[BatchVolume]],
        'EnvironmentVariables': Optional[List[BatchKeyValuePair]],
        'MountPoints': Optional[List[BatchMountPoint]],
        'Boolean': Optional[bool],
        'Ulimits': Optional[List[BatchUlimit]],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'NetworkInterfaceList': Optional[List[BatchNetworkInterface]],
        'ResourceRequirements': Optional[List[BatchResourceRequirement]],
    }
)


BatchNodeDetails = TypedDict(
    'BatchNodeDetails', {
        'Integer': Optional[int],
        'Boolean': Optional[bool],
    }
)


BatchArrayPropertiesDetail = TypedDict(
    'BatchArrayPropertiesDetail', {
        'ArrayJobStatusSummary': Optional[Dict[str, int]],
        'Integer': Optional[int],
        'Integer': Optional[int],
    }
)


BatchJobDetail = TypedDict(
    'BatchJobDetail', {
        'String': str,
        'String': str,
        'String': str,
        'JobStatus': str,
        'Long': int,
        'String': str,
        'AttemptDetails': Optional[List[BatchAttemptDetail]],
        'String': Optional[str],
        'Long': Optional[int],
        'RetryStrategy': Optional[BatchRetryStrategy],
        'Long': Optional[int],
        'JobDependencyList': Optional[List[BatchJobDependency]],
        'ParametersMap': Optional[Dict[str, str]],
        'ContainerDetail': Optional[BatchContainerDetail],
        'NodeDetails': Optional[BatchNodeDetails],
        'NodeProperties': Optional[BatchNodeProperties],
        'ArrayPropertiesDetail': Optional[BatchArrayPropertiesDetail],
        'JobTimeout': Optional[BatchJobTimeout],
    }
)


BatchDescribeJobsResponse = TypedDict(
    'BatchDescribeJobsResponse', {
        'JobDetailList': Optional[List[BatchJobDetail]],
    }
)


BatchContainerSummary = TypedDict(
    'BatchContainerSummary', {
        'Integer': Optional[int],
        'String': Optional[str],
    }
)


BatchArrayPropertiesSummary = TypedDict(
    'BatchArrayPropertiesSummary', {
        'Integer': Optional[int],
        'Integer': Optional[int],
    }
)


BatchNodePropertiesSummary = TypedDict(
    'BatchNodePropertiesSummary', {
        'Boolean': Optional[bool],
        'Integer': Optional[int],
        'Integer': Optional[int],
    }
)


BatchJobSummary = TypedDict(
    'BatchJobSummary', {
        'String': str,
        'String': str,
        'Long': Optional[int],
        'JobStatus': Optional[str],
        'String': Optional[str],
        'Long': Optional[int],
        'Long': Optional[int],
        'ContainerSummary': Optional[BatchContainerSummary],
        'ArrayPropertiesSummary': Optional[BatchArrayPropertiesSummary],
        'NodePropertiesSummary': Optional[BatchNodePropertiesSummary],
    }
)


BatchListJobsResponse = TypedDict(
    'BatchListJobsResponse', {
        'JobSummaryList': List[BatchJobSummary],
        'String': Optional[str],
    }
)


BatchRegisterJobDefinitionResponse = TypedDict(
    'BatchRegisterJobDefinitionResponse', {
        'String': str,
        'String': str,
        'Integer': int,
    }
)


BatchArrayProperties = TypedDict(
    'BatchArrayProperties', {
        'Integer': Optional[int],
    }
)


BatchContainerOverrides = TypedDict(
    'BatchContainerOverrides', {
        'Integer': Optional[int],
        'Integer': Optional[int],
        'StringList': Optional[List[str]],
        'String': Optional[str],
        'EnvironmentVariables': Optional[List[BatchKeyValuePair]],
        'ResourceRequirements': Optional[List[BatchResourceRequirement]],
    }
)


BatchNodePropertyOverride = TypedDict(
    'BatchNodePropertyOverride', {
        'String': str,
        'ContainerOverrides': Optional[BatchContainerOverrides],
    }
)


BatchNodeOverrides = TypedDict(
    'BatchNodeOverrides', {
        'Integer': Optional[int],
        'NodePropertyOverrides': Optional[List[BatchNodePropertyOverride]],
    }
)


BatchSubmitJobResponse = TypedDict(
    'BatchSubmitJobResponse', {
        'String': str,
        'String': str,
    }
)


BatchTerminateJobResponse = TypedDict(
    'BatchTerminateJobResponse', {
    }
)


BatchComputeResourceUpdate = TypedDict(
    'BatchComputeResourceUpdate', {
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
    }
)


BatchUpdateComputeEnvironmentResponse = TypedDict(
    'BatchUpdateComputeEnvironmentResponse', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


BatchUpdateJobQueueResponse = TypedDict(
    'BatchUpdateJobQueueResponse', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


class Budgets(BaseClient):
    def create_budget(self, *,
        AccountId: str,
        Budget: BudgetsBudget,
        NotificationsWithSubscribers: List[BudgetsNotificationWithSubscribers] = ...
    ) -> BudgetsCreateBudgetResponse: ...

    def create_notification(self, *,
        AccountId: str,
        BudgetName: str,
        Notification: BudgetsNotification,
        Subscribers: List[BudgetsSubscriber]
    ) -> BudgetsCreateNotificationResponse: ...

    def create_subscriber(self, *,
        AccountId: str,
        BudgetName: str,
        Notification: BudgetsNotification,
        Subscriber: BudgetsSubscriber
    ) -> BudgetsCreateSubscriberResponse: ...

    def delete_budget(self, *,
        AccountId: str,
        BudgetName: str
    ) -> BudgetsDeleteBudgetResponse: ...

    def delete_notification(self, *,
        AccountId: str,
        BudgetName: str,
        Notification: BudgetsNotification
    ) -> BudgetsDeleteNotificationResponse: ...

    def delete_subscriber(self, *,
        AccountId: str,
        BudgetName: str,
        Notification: BudgetsNotification,
        Subscriber: BudgetsSubscriber
    ) -> BudgetsDeleteSubscriberResponse: ...

    def describe_budget(self, *,
        AccountId: str,
        BudgetName: str
    ) -> BudgetsDescribeBudgetResponse: ...

    def describe_budget_performance_history(self, *,
        AccountId: str,
        BudgetName: str,
        TimePeriod: BudgetsTimePeriod = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> BudgetsDescribeBudgetPerformanceHistoryResponse: ...

    def describe_budgets(self, *,
        AccountId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> BudgetsDescribeBudgetsResponse: ...

    def describe_notifications_for_budget(self, *,
        AccountId: str,
        BudgetName: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> BudgetsDescribeNotificationsForBudgetResponse: ...

    def describe_subscribers_for_notification(self, *,
        AccountId: str,
        BudgetName: str,
        Notification: BudgetsNotification,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> BudgetsDescribeSubscribersForNotificationResponse: ...

    def update_budget(self, *,
        AccountId: str,
        NewBudget: BudgetsBudget
    ) -> BudgetsUpdateBudgetResponse: ...

    def update_notification(self, *,
        AccountId: str,
        BudgetName: str,
        OldNotification: BudgetsNotification,
        NewNotification: BudgetsNotification
    ) -> BudgetsUpdateNotificationResponse: ...

    def update_subscriber(self, *,
        AccountId: str,
        BudgetName: str,
        Notification: BudgetsNotification,
        OldSubscriber: BudgetsSubscriber,
        NewSubscriber: BudgetsSubscriber
    ) -> BudgetsUpdateSubscriberResponse: ...


BudgetsSpend = TypedDict(
    'BudgetsSpend', {
        'NumericValue': str,
        'UnitValue': str,
    }
)


BudgetsCostTypes = TypedDict(
    'BudgetsCostTypes', {
        'NullableBoolean': Optional[bool],
        'NullableBoolean': Optional[bool],
        'NullableBoolean': Optional[bool],
        'NullableBoolean': Optional[bool],
        'NullableBoolean': Optional[bool],
        'NullableBoolean': Optional[bool],
        'NullableBoolean': Optional[bool],
        'NullableBoolean': Optional[bool],
        'NullableBoolean': Optional[bool],
        'NullableBoolean': Optional[bool],
        'NullableBoolean': Optional[bool],
    }
)


BudgetsTimePeriod = TypedDict(
    'BudgetsTimePeriod', {
        'GenericTimestamp': Optional[datetime.datetime],
        'GenericTimestamp': Optional[datetime.datetime],
    }
)


BudgetsCalculatedSpend = TypedDict(
    'BudgetsCalculatedSpend', {
        'Spend': BudgetsSpend,
        'Spend': Optional[BudgetsSpend],
    }
)


BudgetsBudget = TypedDict(
    'BudgetsBudget', {
        'BudgetName': str,
        'TimeUnit': str,
        'BudgetType': str,
        'Spend': Optional[BudgetsSpend],
        'CostFilters': Optional[Dict[str, List[str]]],
        'CostTypes': Optional[BudgetsCostTypes],
        'TimePeriod': Optional[BudgetsTimePeriod],
        'CalculatedSpend': Optional[BudgetsCalculatedSpend],
        'GenericTimestamp': Optional[datetime.datetime],
    }
)


BudgetsNotification = TypedDict(
    'BudgetsNotification', {
        'NotificationType': str,
        'ComparisonOperator': str,
        'NotificationThreshold': float,
        'ThresholdType': Optional[str],
        'NotificationState': Optional[str],
    }
)


BudgetsSubscriber = TypedDict(
    'BudgetsSubscriber', {
        'SubscriptionType': str,
        'SubscriberAddress': str,
    }
)


BudgetsNotificationWithSubscribers = TypedDict(
    'BudgetsNotificationWithSubscribers', {
        'Notification': BudgetsNotification,
        'Subscribers': List[BudgetsSubscriber],
    }
)


BudgetsCreateBudgetResponse = TypedDict(
    'BudgetsCreateBudgetResponse', {
    }
)


BudgetsCreateNotificationResponse = TypedDict(
    'BudgetsCreateNotificationResponse', {
    }
)


BudgetsCreateSubscriberResponse = TypedDict(
    'BudgetsCreateSubscriberResponse', {
    }
)


BudgetsDeleteBudgetResponse = TypedDict(
    'BudgetsDeleteBudgetResponse', {
    }
)


BudgetsDeleteNotificationResponse = TypedDict(
    'BudgetsDeleteNotificationResponse', {
    }
)


BudgetsDeleteSubscriberResponse = TypedDict(
    'BudgetsDeleteSubscriberResponse', {
    }
)


BudgetsDescribeBudgetResponse = TypedDict(
    'BudgetsDescribeBudgetResponse', {
        'Budget': Optional[BudgetsBudget],
    }
)


BudgetsBudgetedAndActualAmounts = TypedDict(
    'BudgetsBudgetedAndActualAmounts', {
        'Spend': Optional[BudgetsSpend],
        'Spend': Optional[BudgetsSpend],
        'TimePeriod': Optional[BudgetsTimePeriod],
    }
)


BudgetsBudgetPerformanceHistory = TypedDict(
    'BudgetsBudgetPerformanceHistory', {
        'BudgetName': Optional[str],
        'BudgetType': Optional[str],
        'CostFilters': Optional[Dict[str, List[str]]],
        'CostTypes': Optional[BudgetsCostTypes],
        'TimeUnit': Optional[str],
        'BudgetedAndActualAmountsList': Optional[List[BudgetsBudgetedAndActualAmounts]],
    }
)


BudgetsDescribeBudgetPerformanceHistoryResponse = TypedDict(
    'BudgetsDescribeBudgetPerformanceHistoryResponse', {
        'BudgetPerformanceHistory': Optional[BudgetsBudgetPerformanceHistory],
        'GenericString': Optional[str],
    }
)


BudgetsDescribeBudgetsResponse = TypedDict(
    'BudgetsDescribeBudgetsResponse', {
        'Budgets': Optional[List[BudgetsBudget]],
        'GenericString': Optional[str],
    }
)


BudgetsDescribeNotificationsForBudgetResponse = TypedDict(
    'BudgetsDescribeNotificationsForBudgetResponse', {
        'Notifications': Optional[List[BudgetsNotification]],
        'GenericString': Optional[str],
    }
)


BudgetsDescribeSubscribersForNotificationResponse = TypedDict(
    'BudgetsDescribeSubscribersForNotificationResponse', {
        'Subscribers': Optional[List[BudgetsSubscriber]],
        'GenericString': Optional[str],
    }
)


BudgetsUpdateBudgetResponse = TypedDict(
    'BudgetsUpdateBudgetResponse', {
    }
)


BudgetsUpdateNotificationResponse = TypedDict(
    'BudgetsUpdateNotificationResponse', {
    }
)


BudgetsUpdateSubscriberResponse = TypedDict(
    'BudgetsUpdateSubscriberResponse', {
    }
)


class Chime(BaseClient):
    def associate_phone_number_with_user(self, *,
        AccountId: str,
        UserId: str,
        E164PhoneNumber: str
    ) -> ChimeAssociatePhoneNumberWithUserResponse: ...

    def associate_phone_numbers_with_voice_connector(self, *,
        VoiceConnectorId: str,
        E164PhoneNumbers: List[str] = ...
    ) -> ChimeAssociatePhoneNumbersWithVoiceConnectorResponse: ...

    def batch_delete_phone_number(self, *,
        PhoneNumberIds: List[str]
    ) -> ChimeBatchDeletePhoneNumberResponse: ...

    def batch_suspend_user(self, *,
        AccountId: str,
        UserIdList: List[str]
    ) -> ChimeBatchSuspendUserResponse: ...

    def batch_unsuspend_user(self, *,
        AccountId: str,
        UserIdList: List[str]
    ) -> ChimeBatchUnsuspendUserResponse: ...

    def batch_update_phone_number(self, *,
        UpdatePhoneNumberRequestItems: List[ChimeUpdatePhoneNumberRequestItem]
    ) -> ChimeBatchUpdatePhoneNumberResponse: ...

    def batch_update_user(self, *,
        AccountId: str,
        UpdateUserRequestItems: List[ChimeUpdateUserRequestItem]
    ) -> ChimeBatchUpdateUserResponse: ...

    def create_account(self, *,
        Name: str
    ) -> ChimeCreateAccountResponse: ...

    def create_phone_number_order(self, *,
        ProductType: str,
        E164PhoneNumbers: List[str]
    ) -> ChimeCreatePhoneNumberOrderResponse: ...

    def create_voice_connector(self, *,
        Name: str,
        RequireEncryption: bool
    ) -> ChimeCreateVoiceConnectorResponse: ...

    def delete_account(self, *,
        AccountId: str
    ) -> ChimeDeleteAccountResponse: ...

    def delete_phone_number(self, *,
        PhoneNumberId: str
    ): ...

    def delete_voice_connector(self, *,
        VoiceConnectorId: str
    ): ...

    def delete_voice_connector_origination(self, *,
        VoiceConnectorId: str
    ): ...

    def delete_voice_connector_termination(self, *,
        VoiceConnectorId: str
    ): ...

    def delete_voice_connector_termination_credentials(self, *,
        VoiceConnectorId: str,
        Usernames: List[str] = ...
    ): ...

    def disassociate_phone_number_from_user(self, *,
        AccountId: str,
        UserId: str
    ) -> ChimeDisassociatePhoneNumberFromUserResponse: ...

    def disassociate_phone_numbers_from_voice_connector(self, *,
        VoiceConnectorId: str,
        E164PhoneNumbers: List[str] = ...
    ) -> ChimeDisassociatePhoneNumbersFromVoiceConnectorResponse: ...

    def get_account(self, *,
        AccountId: str
    ) -> ChimeGetAccountResponse: ...

    def get_account_settings(self, *,
        AccountId: str
    ) -> ChimeGetAccountSettingsResponse: ...

    def get_global_settings(self) -> ChimeGetGlobalSettingsResponse: ...

    def get_phone_number(self, *,
        PhoneNumberId: str
    ) -> ChimeGetPhoneNumberResponse: ...

    def get_phone_number_order(self, *,
        PhoneNumberOrderId: str
    ) -> ChimeGetPhoneNumberOrderResponse: ...

    def get_user(self, *,
        AccountId: str,
        UserId: str
    ) -> ChimeGetUserResponse: ...

    def get_user_settings(self, *,
        AccountId: str,
        UserId: str
    ) -> ChimeGetUserSettingsResponse: ...

    def get_voice_connector(self, *,
        VoiceConnectorId: str
    ) -> ChimeGetVoiceConnectorResponse: ...

    def get_voice_connector_origination(self, *,
        VoiceConnectorId: str
    ) -> ChimeGetVoiceConnectorOriginationResponse: ...

    def get_voice_connector_termination(self, *,
        VoiceConnectorId: str
    ) -> ChimeGetVoiceConnectorTerminationResponse: ...

    def get_voice_connector_termination_health(self, *,
        VoiceConnectorId: str
    ) -> ChimeGetVoiceConnectorTerminationHealthResponse: ...

    def invite_users(self, *,
        AccountId: str,
        UserEmailList: List[str]
    ) -> ChimeInviteUsersResponse: ...

    def list_accounts(self, *,
        Name: str = ...,
        UserEmail: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ChimeListAccountsResponse: ...

    def list_phone_number_orders(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ChimeListPhoneNumberOrdersResponse: ...

    def list_phone_numbers(self, *,
        Status: str = ...,
        ProductType: str = ...,
        FilterName: str = ...,
        FilterValue: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ChimeListPhoneNumbersResponse: ...

    def list_users(self, *,
        AccountId: str,
        UserEmail: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ChimeListUsersResponse: ...

    def list_voice_connector_termination_credentials(self, *,
        VoiceConnectorId: str
    ) -> ChimeListVoiceConnectorTerminationCredentialsResponse: ...

    def list_voice_connectors(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ChimeListVoiceConnectorsResponse: ...

    def logout_user(self, *,
        AccountId: str,
        UserId: str
    ) -> ChimeLogoutUserResponse: ...

    def put_voice_connector_origination(self, *,
        VoiceConnectorId: str,
        Origination: ChimeOrigination
    ) -> ChimePutVoiceConnectorOriginationResponse: ...

    def put_voice_connector_termination(self, *,
        VoiceConnectorId: str,
        Termination: ChimeTermination
    ) -> ChimePutVoiceConnectorTerminationResponse: ...

    def put_voice_connector_termination_credentials(self, *,
        VoiceConnectorId: str,
        Credentials: List[ChimeCredential] = ...
    ): ...

    def reset_personal_pin(self, *,
        AccountId: str,
        UserId: str
    ) -> ChimeResetPersonalPINResponse: ...

    def restore_phone_number(self, *,
        PhoneNumberId: str
    ) -> ChimeRestorePhoneNumberResponse: ...

    def search_available_phone_numbers(self, *,
        AreaCode: str = ...,
        City: str = ...,
        Country: str = ...,
        State: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ChimeSearchAvailablePhoneNumbersResponse: ...

    def update_account(self, *,
        AccountId: str,
        Name: str = ...
    ) -> ChimeUpdateAccountResponse: ...

    def update_account_settings(self, *,
        AccountId: str,
        AccountSettings: ChimeAccountSettings
    ) -> ChimeUpdateAccountSettingsResponse: ...

    def update_global_settings(self, *,
        BusinessCalling: ChimeBusinessCallingSettings,
        VoiceConnector: ChimeVoiceConnectorSettings
    ): ...

    def update_phone_number(self, *,
        PhoneNumberId: str,
        ProductType: str = ...
    ) -> ChimeUpdatePhoneNumberResponse: ...

    def update_user(self, *,
        AccountId: str,
        UserId: str,
        LicenseType: str = ...
    ) -> ChimeUpdateUserResponse: ...

    def update_user_settings(self, *,
        AccountId: str,
        UserId: str,
        UserSettings: ChimeUserSettings
    ): ...

    def update_voice_connector(self, *,
        VoiceConnectorId: str,
        Name: str,
        RequireEncryption: bool
    ) -> ChimeUpdateVoiceConnectorResponse: ...


ChimeAssociatePhoneNumberWithUserResponse = TypedDict(
    'ChimeAssociatePhoneNumberWithUserResponse', {
    }
)


ChimePhoneNumberError = TypedDict(
    'ChimePhoneNumberError', {
        'NonEmptyString': Optional[str],
        'ErrorCode': Optional[str],
        'String': Optional[str],
    }
)


ChimeAssociatePhoneNumbersWithVoiceConnectorResponse = TypedDict(
    'ChimeAssociatePhoneNumbersWithVoiceConnectorResponse', {
        'PhoneNumberErrorList': Optional[List[ChimePhoneNumberError]],
    }
)


ChimeBatchDeletePhoneNumberResponse = TypedDict(
    'ChimeBatchDeletePhoneNumberResponse', {
        'PhoneNumberErrorList': Optional[List[ChimePhoneNumberError]],
    }
)


ChimeUserError = TypedDict(
    'ChimeUserError', {
        'NonEmptyString': Optional[str],
        'ErrorCode': Optional[str],
        'String': Optional[str],
    }
)


ChimeBatchSuspendUserResponse = TypedDict(
    'ChimeBatchSuspendUserResponse', {
        'UserErrorList': Optional[List[ChimeUserError]],
    }
)


ChimeBatchUnsuspendUserResponse = TypedDict(
    'ChimeBatchUnsuspendUserResponse', {
        'UserErrorList': Optional[List[ChimeUserError]],
    }
)


ChimeUpdatePhoneNumberRequestItem = TypedDict(
    'ChimeUpdatePhoneNumberRequestItem', {
        'NonEmptyString': str,
        'PhoneNumberProductType': Optional[str],
    }
)


ChimeBatchUpdatePhoneNumberResponse = TypedDict(
    'ChimeBatchUpdatePhoneNumberResponse', {
        'PhoneNumberErrorList': Optional[List[ChimePhoneNumberError]],
    }
)


ChimeUpdateUserRequestItem = TypedDict(
    'ChimeUpdateUserRequestItem', {
        'NonEmptyString': str,
        'License': Optional[str],
    }
)


ChimeBatchUpdateUserResponse = TypedDict(
    'ChimeBatchUpdateUserResponse', {
        'UserErrorList': Optional[List[ChimeUserError]],
    }
)


ChimeAccount = TypedDict(
    'ChimeAccount', {
        'String': str,
        'String': str,
        'String': str,
        'AccountType': Optional[str],
        'Iso8601Timestamp': Optional[datetime.datetime],
        'License': Optional[str],
        'LicenseList': Optional[List[str]],
    }
)


ChimeCreateAccountResponse = TypedDict(
    'ChimeCreateAccountResponse', {
        'Account': Optional[ChimeAccount],
    }
)


ChimeOrderedPhoneNumber = TypedDict(
    'ChimeOrderedPhoneNumber', {
        'E164PhoneNumber': Optional[str],
        'OrderedPhoneNumberStatus': Optional[str],
    }
)


ChimePhoneNumberOrder = TypedDict(
    'ChimePhoneNumberOrder', {
        'GuidString': Optional[str],
        'PhoneNumberProductType': Optional[str],
        'PhoneNumberOrderStatus': Optional[str],
        'OrderedPhoneNumberList': Optional[List[ChimeOrderedPhoneNumber]],
        'Iso8601Timestamp': Optional[datetime.datetime],
        'Iso8601Timestamp': Optional[datetime.datetime],
    }
)


ChimeCreatePhoneNumberOrderResponse = TypedDict(
    'ChimeCreatePhoneNumberOrderResponse', {
        'PhoneNumberOrder': Optional[ChimePhoneNumberOrder],
    }
)


ChimeVoiceConnector = TypedDict(
    'ChimeVoiceConnector', {
        'NonEmptyString': Optional[str],
        'VoiceConnectorName': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Iso8601Timestamp': Optional[datetime.datetime],
        'Iso8601Timestamp': Optional[datetime.datetime],
    }
)


ChimeCreateVoiceConnectorResponse = TypedDict(
    'ChimeCreateVoiceConnectorResponse', {
        'VoiceConnector': Optional[ChimeVoiceConnector],
    }
)


ChimeDeleteAccountResponse = TypedDict(
    'ChimeDeleteAccountResponse', {
    }
)


ChimeDisassociatePhoneNumberFromUserResponse = TypedDict(
    'ChimeDisassociatePhoneNumberFromUserResponse', {
    }
)


ChimeDisassociatePhoneNumbersFromVoiceConnectorResponse = TypedDict(
    'ChimeDisassociatePhoneNumbersFromVoiceConnectorResponse', {
        'PhoneNumberErrorList': Optional[List[ChimePhoneNumberError]],
    }
)


ChimeGetAccountResponse = TypedDict(
    'ChimeGetAccountResponse', {
        'Account': Optional[ChimeAccount],
    }
)


ChimeAccountSettings = TypedDict(
    'ChimeAccountSettings', {
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
    }
)


ChimeGetAccountSettingsResponse = TypedDict(
    'ChimeGetAccountSettingsResponse', {
        'AccountSettings': Optional[ChimeAccountSettings],
    }
)


ChimeBusinessCallingSettings = TypedDict(
    'ChimeBusinessCallingSettings', {
        'String': Optional[str],
    }
)


ChimeVoiceConnectorSettings = TypedDict(
    'ChimeVoiceConnectorSettings', {
        'String': Optional[str],
    }
)


ChimeGetGlobalSettingsResponse = TypedDict(
    'ChimeGetGlobalSettingsResponse', {
        'BusinessCallingSettings': Optional[ChimeBusinessCallingSettings],
        'VoiceConnectorSettings': Optional[ChimeVoiceConnectorSettings],
    }
)


ChimePhoneNumberCapabilities = TypedDict(
    'ChimePhoneNumberCapabilities', {
        'NullableBoolean': Optional[bool],
        'NullableBoolean': Optional[bool],
        'NullableBoolean': Optional[bool],
        'NullableBoolean': Optional[bool],
        'NullableBoolean': Optional[bool],
        'NullableBoolean': Optional[bool],
    }
)


ChimePhoneNumberAssociation = TypedDict(
    'ChimePhoneNumberAssociation', {
        'String': Optional[str],
        'PhoneNumberAssociationName': Optional[str],
        'Iso8601Timestamp': Optional[datetime.datetime],
    }
)


ChimePhoneNumber = TypedDict(
    'ChimePhoneNumber', {
        'String': Optional[str],
        'E164PhoneNumber': Optional[str],
        'PhoneNumberProductType': Optional[str],
        'PhoneNumberStatus': Optional[str],
        'PhoneNumberCapabilities': Optional[ChimePhoneNumberCapabilities],
        'PhoneNumberAssociationList': Optional[List[ChimePhoneNumberAssociation]],
        'Iso8601Timestamp': Optional[datetime.datetime],
        'Iso8601Timestamp': Optional[datetime.datetime],
        'Iso8601Timestamp': Optional[datetime.datetime],
    }
)


ChimeGetPhoneNumberResponse = TypedDict(
    'ChimeGetPhoneNumberResponse', {
        'PhoneNumber': Optional[ChimePhoneNumber],
    }
)


ChimeGetPhoneNumberOrderResponse = TypedDict(
    'ChimeGetPhoneNumberOrderResponse', {
        'PhoneNumberOrder': Optional[ChimePhoneNumberOrder],
    }
)


ChimeUser = TypedDict(
    'ChimeUser', {
        'String': str,
        'String': Optional[str],
        'EmailAddress': Optional[str],
        'SensitiveString': Optional[str],
        'SensitiveString': Optional[str],
        'License': Optional[str],
        'RegistrationStatus': Optional[str],
        'InviteStatus': Optional[str],
        'Iso8601Timestamp': Optional[datetime.datetime],
        'Iso8601Timestamp': Optional[datetime.datetime],
        'String': Optional[str],
    }
)


ChimeGetUserResponse = TypedDict(
    'ChimeGetUserResponse', {
        'User': Optional[ChimeUser],
    }
)


ChimeTelephonySettings = TypedDict(
    'ChimeTelephonySettings', {
        'Boolean': bool,
        'Boolean': bool,
        'Boolean': bool,
    }
)


ChimeUserSettings = TypedDict(
    'ChimeUserSettings', {
        'TelephonySettings': ChimeTelephonySettings,
    }
)


ChimeGetUserSettingsResponse = TypedDict(
    'ChimeGetUserSettingsResponse', {
        'UserSettings': Optional[ChimeUserSettings],
    }
)


ChimeGetVoiceConnectorResponse = TypedDict(
    'ChimeGetVoiceConnectorResponse', {
        'VoiceConnector': Optional[ChimeVoiceConnector],
    }
)


ChimeOriginationRoute = TypedDict(
    'ChimeOriginationRoute', {
        'String': Optional[str],
        'Port': Optional[int],
        'OriginationRouteProtocol': Optional[str],
        'OriginationRoutePriority': Optional[int],
        'OriginationRouteWeight': Optional[int],
    }
)


ChimeOrigination = TypedDict(
    'ChimeOrigination', {
        'OriginationRouteList': Optional[List[ChimeOriginationRoute]],
        'Boolean': Optional[bool],
    }
)


ChimeGetVoiceConnectorOriginationResponse = TypedDict(
    'ChimeGetVoiceConnectorOriginationResponse', {
        'Origination': Optional[ChimeOrigination],
    }
)


ChimeTermination = TypedDict(
    'ChimeTermination', {
        'CpsLimit': Optional[int],
        'E164PhoneNumber': Optional[str],
        'CallingRegionList': Optional[List[str]],
        'StringList': Optional[List[str]],
        'Boolean': Optional[bool],
    }
)


ChimeGetVoiceConnectorTerminationResponse = TypedDict(
    'ChimeGetVoiceConnectorTerminationResponse', {
        'Termination': Optional[ChimeTermination],
    }
)


ChimeTerminationHealth = TypedDict(
    'ChimeTerminationHealth', {
        'Iso8601Timestamp': Optional[datetime.datetime],
        'String': Optional[str],
    }
)


ChimeGetVoiceConnectorTerminationHealthResponse = TypedDict(
    'ChimeGetVoiceConnectorTerminationHealthResponse', {
        'TerminationHealth': Optional[ChimeTerminationHealth],
    }
)


ChimeInvite = TypedDict(
    'ChimeInvite', {
        'String': Optional[str],
        'InviteStatus': Optional[str],
        'EmailAddress': Optional[str],
        'EmailStatus': Optional[str],
    }
)


ChimeInviteUsersResponse = TypedDict(
    'ChimeInviteUsersResponse', {
        'InviteList': Optional[List[ChimeInvite]],
    }
)


ChimeListAccountsResponse = TypedDict(
    'ChimeListAccountsResponse', {
        'AccountList': Optional[List[ChimeAccount]],
        'String': Optional[str],
    }
)


ChimeListPhoneNumberOrdersResponse = TypedDict(
    'ChimeListPhoneNumberOrdersResponse', {
        'PhoneNumberOrderList': Optional[List[ChimePhoneNumberOrder]],
        'String': Optional[str],
    }
)


ChimeListPhoneNumbersResponse = TypedDict(
    'ChimeListPhoneNumbersResponse', {
        'PhoneNumberList': Optional[List[ChimePhoneNumber]],
        'String': Optional[str],
    }
)


ChimeListUsersResponse = TypedDict(
    'ChimeListUsersResponse', {
        'UserList': Optional[List[ChimeUser]],
        'String': Optional[str],
    }
)


ChimeListVoiceConnectorTerminationCredentialsResponse = TypedDict(
    'ChimeListVoiceConnectorTerminationCredentialsResponse', {
        'SensitiveStringList': Optional[List[str]],
    }
)


ChimeListVoiceConnectorsResponse = TypedDict(
    'ChimeListVoiceConnectorsResponse', {
        'VoiceConnectorList': Optional[List[ChimeVoiceConnector]],
        'String': Optional[str],
    }
)


ChimeLogoutUserResponse = TypedDict(
    'ChimeLogoutUserResponse', {
    }
)


ChimePutVoiceConnectorOriginationResponse = TypedDict(
    'ChimePutVoiceConnectorOriginationResponse', {
        'Origination': Optional[ChimeOrigination],
    }
)


ChimePutVoiceConnectorTerminationResponse = TypedDict(
    'ChimePutVoiceConnectorTerminationResponse', {
        'Termination': Optional[ChimeTermination],
    }
)


ChimeCredential = TypedDict(
    'ChimeCredential', {
        'SensitiveString': Optional[str],
        'SensitiveString': Optional[str],
    }
)


ChimeResetPersonalPINResponse = TypedDict(
    'ChimeResetPersonalPINResponse', {
        'User': Optional[ChimeUser],
    }
)


ChimeRestorePhoneNumberResponse = TypedDict(
    'ChimeRestorePhoneNumberResponse', {
        'PhoneNumber': Optional[ChimePhoneNumber],
    }
)


ChimeSearchAvailablePhoneNumbersResponse = TypedDict(
    'ChimeSearchAvailablePhoneNumbersResponse', {
        'E164PhoneNumberList': Optional[List[str]],
    }
)


ChimeUpdateAccountResponse = TypedDict(
    'ChimeUpdateAccountResponse', {
        'Account': Optional[ChimeAccount],
    }
)


ChimeUpdateAccountSettingsResponse = TypedDict(
    'ChimeUpdateAccountSettingsResponse', {
    }
)


ChimeUpdatePhoneNumberResponse = TypedDict(
    'ChimeUpdatePhoneNumberResponse', {
        'PhoneNumber': Optional[ChimePhoneNumber],
    }
)


ChimeUpdateUserResponse = TypedDict(
    'ChimeUpdateUserResponse', {
        'User': Optional[ChimeUser],
    }
)


ChimeUpdateVoiceConnectorResponse = TypedDict(
    'ChimeUpdateVoiceConnectorResponse', {
        'VoiceConnector': Optional[ChimeVoiceConnector],
    }
)


class Cloud9(BaseClient):
    def create_environment_ec2(self, *,
        name: str,
        instanceType: str,
        description: str = ...,
        clientRequestToken: str = ...,
        subnetId: str = ...,
        automaticStopTimeMinutes: int = ...,
        ownerArn: str = ...
    ) -> Cloud9CreateEnvironmentEC2Result: ...

    def create_environment_membership(self, *,
        environmentId: str,
        userArn: str,
        permissions: str
    ) -> Cloud9CreateEnvironmentMembershipResult: ...

    def delete_environment(self, *,
        environmentId: str
    ) -> Cloud9DeleteEnvironmentResult: ...

    def delete_environment_membership(self, *,
        environmentId: str,
        userArn: str
    ) -> Cloud9DeleteEnvironmentMembershipResult: ...

    def describe_environment_memberships(self, *,
        userArn: str = ...,
        environmentId: str = ...,
        permissions: List[str] = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> Cloud9DescribeEnvironmentMembershipsResult: ...

    def describe_environment_status(self, *,
        environmentId: str
    ) -> Cloud9DescribeEnvironmentStatusResult: ...

    def describe_environments(self, *,
        environmentIds: List[str]
    ) -> Cloud9DescribeEnvironmentsResult: ...

    def list_environments(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> Cloud9ListEnvironmentsResult: ...

    def update_environment(self, *,
        environmentId: str,
        name: str = ...,
        description: str = ...
    ) -> Cloud9UpdateEnvironmentResult: ...

    def update_environment_membership(self, *,
        environmentId: str,
        userArn: str,
        permissions: str
    ) -> Cloud9UpdateEnvironmentMembershipResult: ...


Cloud9CreateEnvironmentEC2Result = TypedDict(
    'Cloud9CreateEnvironmentEC2Result', {
        'EnvironmentId': Optional[str],
    }
)


Cloud9EnvironmentMember = TypedDict(
    'Cloud9EnvironmentMember', {
        'Permissions': Optional[str],
        'String': Optional[str],
        'UserArn': Optional[str],
        'EnvironmentId': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


Cloud9CreateEnvironmentMembershipResult = TypedDict(
    'Cloud9CreateEnvironmentMembershipResult', {
        'EnvironmentMember': Optional[Cloud9EnvironmentMember],
    }
)


Cloud9DeleteEnvironmentResult = TypedDict(
    'Cloud9DeleteEnvironmentResult', {
    }
)


Cloud9DeleteEnvironmentMembershipResult = TypedDict(
    'Cloud9DeleteEnvironmentMembershipResult', {
    }
)


Cloud9DescribeEnvironmentMembershipsResult = TypedDict(
    'Cloud9DescribeEnvironmentMembershipsResult', {
        'EnvironmentMembersList': Optional[List[Cloud9EnvironmentMember]],
        'String': Optional[str],
    }
)


Cloud9DescribeEnvironmentStatusResult = TypedDict(
    'Cloud9DescribeEnvironmentStatusResult', {
        'EnvironmentStatus': Optional[str],
        'String': Optional[str],
    }
)


Cloud9EnvironmentLifecycle = TypedDict(
    'Cloud9EnvironmentLifecycle', {
        'EnvironmentLifecycleStatus': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


Cloud9Environment = TypedDict(
    'Cloud9Environment', {
        'EnvironmentId': Optional[str],
        'EnvironmentName': Optional[str],
        'EnvironmentDescription': Optional[str],
        'EnvironmentType': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'EnvironmentLifecycle': Optional[Cloud9EnvironmentLifecycle],
    }
)


Cloud9DescribeEnvironmentsResult = TypedDict(
    'Cloud9DescribeEnvironmentsResult', {
        'EnvironmentList': Optional[List[Cloud9Environment]],
    }
)


Cloud9ListEnvironmentsResult = TypedDict(
    'Cloud9ListEnvironmentsResult', {
        'String': Optional[str],
        'EnvironmentIdList': Optional[List[str]],
    }
)


Cloud9UpdateEnvironmentResult = TypedDict(
    'Cloud9UpdateEnvironmentResult', {
    }
)


Cloud9UpdateEnvironmentMembershipResult = TypedDict(
    'Cloud9UpdateEnvironmentMembershipResult', {
        'EnvironmentMember': Optional[Cloud9EnvironmentMember],
    }
)


class CloudDirectory(BaseClient):
    def add_facet_to_object(self, *,
        DirectoryArn: str,
        SchemaFacet: CloudDirectorySchemaFacet,
        ObjectReference: CloudDirectoryObjectReference,
        ObjectAttributeList: List[CloudDirectoryAttributeKeyAndValue] = ...
    ) -> CloudDirectoryAddFacetToObjectResponse: ...

    def apply_schema(self, *,
        PublishedSchemaArn: str,
        DirectoryArn: str
    ) -> CloudDirectoryApplySchemaResponse: ...

    def attach_object(self, *,
        DirectoryArn: str,
        ParentReference: CloudDirectoryObjectReference,
        ChildReference: CloudDirectoryObjectReference,
        LinkName: str
    ) -> CloudDirectoryAttachObjectResponse: ...

    def attach_policy(self, *,
        DirectoryArn: str,
        PolicyReference: CloudDirectoryObjectReference,
        ObjectReference: CloudDirectoryObjectReference
    ) -> CloudDirectoryAttachPolicyResponse: ...

    def attach_to_index(self, *,
        DirectoryArn: str,
        IndexReference: CloudDirectoryObjectReference,
        TargetReference: CloudDirectoryObjectReference
    ) -> CloudDirectoryAttachToIndexResponse: ...

    def attach_typed_link(self, *,
        DirectoryArn: str,
        SourceObjectReference: CloudDirectoryObjectReference,
        TargetObjectReference: CloudDirectoryObjectReference,
        TypedLinkFacet: CloudDirectoryTypedLinkSchemaAndFacetName,
        Attributes: List[CloudDirectoryAttributeNameAndValue]
    ) -> CloudDirectoryAttachTypedLinkResponse: ...

    def batch_read(self, *,
        DirectoryArn: str,
        Operations: List[CloudDirectoryBatchReadOperation],
        ConsistencyLevel: str = ...
    ) -> CloudDirectoryBatchReadResponse: ...

    def batch_write(self, *,
        DirectoryArn: str,
        Operations: List[CloudDirectoryBatchWriteOperation]
    ) -> CloudDirectoryBatchWriteResponse: ...

    def create_directory(self, *,
        Name: str,
        SchemaArn: str
    ) -> CloudDirectoryCreateDirectoryResponse: ...

    def create_facet(self, *,
        SchemaArn: str,
        Name: str,
        Attributes: List[CloudDirectoryFacetAttribute] = ...,
        ObjectType: str = ...,
        FacetStyle: str = ...
    ) -> CloudDirectoryCreateFacetResponse: ...

    def create_index(self, *,
        DirectoryArn: str,
        OrderedIndexedAttributeList: List[CloudDirectoryAttributeKey],
        IsUnique: bool,
        ParentReference: CloudDirectoryObjectReference = ...,
        LinkName: str = ...
    ) -> CloudDirectoryCreateIndexResponse: ...

    def create_object(self, *,
        DirectoryArn: str,
        SchemaFacets: List[CloudDirectorySchemaFacet],
        ObjectAttributeList: List[CloudDirectoryAttributeKeyAndValue] = ...,
        ParentReference: CloudDirectoryObjectReference = ...,
        LinkName: str = ...
    ) -> CloudDirectoryCreateObjectResponse: ...

    def create_schema(self, *,
        Name: str
    ) -> CloudDirectoryCreateSchemaResponse: ...

    def create_typed_link_facet(self, *,
        SchemaArn: str,
        Facet: CloudDirectoryTypedLinkFacet
    ) -> CloudDirectoryCreateTypedLinkFacetResponse: ...

    def delete_directory(self, *,
        DirectoryArn: str
    ) -> CloudDirectoryDeleteDirectoryResponse: ...

    def delete_facet(self, *,
        SchemaArn: str,
        Name: str
    ) -> CloudDirectoryDeleteFacetResponse: ...

    def delete_object(self, *,
        DirectoryArn: str,
        ObjectReference: CloudDirectoryObjectReference
    ) -> CloudDirectoryDeleteObjectResponse: ...

    def delete_schema(self, *,
        SchemaArn: str
    ) -> CloudDirectoryDeleteSchemaResponse: ...

    def delete_typed_link_facet(self, *,
        SchemaArn: str,
        Name: str
    ) -> CloudDirectoryDeleteTypedLinkFacetResponse: ...

    def detach_from_index(self, *,
        DirectoryArn: str,
        IndexReference: CloudDirectoryObjectReference,
        TargetReference: CloudDirectoryObjectReference
    ) -> CloudDirectoryDetachFromIndexResponse: ...

    def detach_object(self, *,
        DirectoryArn: str,
        ParentReference: CloudDirectoryObjectReference,
        LinkName: str
    ) -> CloudDirectoryDetachObjectResponse: ...

    def detach_policy(self, *,
        DirectoryArn: str,
        PolicyReference: CloudDirectoryObjectReference,
        ObjectReference: CloudDirectoryObjectReference
    ) -> CloudDirectoryDetachPolicyResponse: ...

    def detach_typed_link(self, *,
        DirectoryArn: str,
        TypedLinkSpecifier: CloudDirectoryTypedLinkSpecifier
    ): ...

    def disable_directory(self, *,
        DirectoryArn: str
    ) -> CloudDirectoryDisableDirectoryResponse: ...

    def enable_directory(self, *,
        DirectoryArn: str
    ) -> CloudDirectoryEnableDirectoryResponse: ...

    def get_applied_schema_version(self, *,
        SchemaArn: str
    ) -> CloudDirectoryGetAppliedSchemaVersionResponse: ...

    def get_directory(self, *,
        DirectoryArn: str
    ) -> CloudDirectoryGetDirectoryResponse: ...

    def get_facet(self, *,
        SchemaArn: str,
        Name: str
    ) -> CloudDirectoryGetFacetResponse: ...

    def get_link_attributes(self, *,
        DirectoryArn: str,
        TypedLinkSpecifier: CloudDirectoryTypedLinkSpecifier,
        AttributeNames: List[str],
        ConsistencyLevel: str = ...
    ) -> CloudDirectoryGetLinkAttributesResponse: ...

    def get_object_attributes(self, *,
        DirectoryArn: str,
        ObjectReference: CloudDirectoryObjectReference,
        SchemaFacet: CloudDirectorySchemaFacet,
        AttributeNames: List[str],
        ConsistencyLevel: str = ...
    ) -> CloudDirectoryGetObjectAttributesResponse: ...

    def get_object_information(self, *,
        DirectoryArn: str,
        ObjectReference: CloudDirectoryObjectReference,
        ConsistencyLevel: str = ...
    ) -> CloudDirectoryGetObjectInformationResponse: ...

    def get_schema_as_json(self, *,
        SchemaArn: str
    ) -> CloudDirectoryGetSchemaAsJsonResponse: ...

    def get_typed_link_facet_information(self, *,
        SchemaArn: str,
        Name: str
    ) -> CloudDirectoryGetTypedLinkFacetInformationResponse: ...

    def list_applied_schema_arns(self, *,
        DirectoryArn: str,
        SchemaArn: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudDirectoryListAppliedSchemaArnsResponse: ...

    def list_attached_indices(self, *,
        DirectoryArn: str,
        TargetReference: CloudDirectoryObjectReference,
        NextToken: str = ...,
        MaxResults: int = ...,
        ConsistencyLevel: str = ...
    ) -> CloudDirectoryListAttachedIndicesResponse: ...

    def list_development_schema_arns(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudDirectoryListDevelopmentSchemaArnsResponse: ...

    def list_directories(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        state: str = ...
    ) -> CloudDirectoryListDirectoriesResponse: ...

    def list_facet_attributes(self, *,
        SchemaArn: str,
        Name: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudDirectoryListFacetAttributesResponse: ...

    def list_facet_names(self, *,
        SchemaArn: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudDirectoryListFacetNamesResponse: ...

    def list_incoming_typed_links(self, *,
        DirectoryArn: str,
        ObjectReference: CloudDirectoryObjectReference,
        FilterAttributeRanges: List[CloudDirectoryTypedLinkAttributeRange] = ...,
        FilterTypedLink: CloudDirectoryTypedLinkSchemaAndFacetName = ...,
        NextToken: str = ...,
        MaxResults: int = ...,
        ConsistencyLevel: str = ...
    ) -> CloudDirectoryListIncomingTypedLinksResponse: ...

    def list_index(self, *,
        DirectoryArn: str,
        IndexReference: CloudDirectoryObjectReference,
        RangesOnIndexedValues: List[CloudDirectoryObjectAttributeRange] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        ConsistencyLevel: str = ...
    ) -> CloudDirectoryListIndexResponse: ...

    def list_managed_schema_arns(self, *,
        SchemaArn: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudDirectoryListManagedSchemaArnsResponse: ...

    def list_object_attributes(self, *,
        DirectoryArn: str,
        ObjectReference: CloudDirectoryObjectReference,
        NextToken: str = ...,
        MaxResults: int = ...,
        ConsistencyLevel: str = ...,
        FacetFilter: CloudDirectorySchemaFacet = ...
    ) -> CloudDirectoryListObjectAttributesResponse: ...

    def list_object_children(self, *,
        DirectoryArn: str,
        ObjectReference: CloudDirectoryObjectReference,
        NextToken: str = ...,
        MaxResults: int = ...,
        ConsistencyLevel: str = ...
    ) -> CloudDirectoryListObjectChildrenResponse: ...

    def list_object_parent_paths(self, *,
        DirectoryArn: str,
        ObjectReference: CloudDirectoryObjectReference,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudDirectoryListObjectParentPathsResponse: ...

    def list_object_parents(self, *,
        DirectoryArn: str,
        ObjectReference: CloudDirectoryObjectReference,
        NextToken: str = ...,
        MaxResults: int = ...,
        ConsistencyLevel: str = ...,
        IncludeAllLinksToEachParent: bool = ...
    ) -> CloudDirectoryListObjectParentsResponse: ...

    def list_object_policies(self, *,
        DirectoryArn: str,
        ObjectReference: CloudDirectoryObjectReference,
        NextToken: str = ...,
        MaxResults: int = ...,
        ConsistencyLevel: str = ...
    ) -> CloudDirectoryListObjectPoliciesResponse: ...

    def list_outgoing_typed_links(self, *,
        DirectoryArn: str,
        ObjectReference: CloudDirectoryObjectReference,
        FilterAttributeRanges: List[CloudDirectoryTypedLinkAttributeRange] = ...,
        FilterTypedLink: CloudDirectoryTypedLinkSchemaAndFacetName = ...,
        NextToken: str = ...,
        MaxResults: int = ...,
        ConsistencyLevel: str = ...
    ) -> CloudDirectoryListOutgoingTypedLinksResponse: ...

    def list_policy_attachments(self, *,
        DirectoryArn: str,
        PolicyReference: CloudDirectoryObjectReference,
        NextToken: str = ...,
        MaxResults: int = ...,
        ConsistencyLevel: str = ...
    ) -> CloudDirectoryListPolicyAttachmentsResponse: ...

    def list_published_schema_arns(self, *,
        SchemaArn: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudDirectoryListPublishedSchemaArnsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudDirectoryListTagsForResourceResponse: ...

    def list_typed_link_facet_attributes(self, *,
        SchemaArn: str,
        Name: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudDirectoryListTypedLinkFacetAttributesResponse: ...

    def list_typed_link_facet_names(self, *,
        SchemaArn: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudDirectoryListTypedLinkFacetNamesResponse: ...

    def lookup_policy(self, *,
        DirectoryArn: str,
        ObjectReference: CloudDirectoryObjectReference,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudDirectoryLookupPolicyResponse: ...

    def publish_schema(self, *,
        DevelopmentSchemaArn: str,
        Version: str,
        MinorVersion: str = ...,
        Name: str = ...
    ) -> CloudDirectoryPublishSchemaResponse: ...

    def put_schema_from_json(self, *,
        SchemaArn: str,
        Document: str
    ) -> CloudDirectoryPutSchemaFromJsonResponse: ...

    def remove_facet_from_object(self, *,
        DirectoryArn: str,
        SchemaFacet: CloudDirectorySchemaFacet,
        ObjectReference: CloudDirectoryObjectReference
    ) -> CloudDirectoryRemoveFacetFromObjectResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: List[CloudDirectoryTag]
    ) -> CloudDirectoryTagResourceResponse: ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ) -> CloudDirectoryUntagResourceResponse: ...

    def update_facet(self, *,
        SchemaArn: str,
        Name: str,
        AttributeUpdates: List[CloudDirectoryFacetAttributeUpdate] = ...,
        ObjectType: str = ...
    ) -> CloudDirectoryUpdateFacetResponse: ...

    def update_link_attributes(self, *,
        DirectoryArn: str,
        TypedLinkSpecifier: CloudDirectoryTypedLinkSpecifier,
        AttributeUpdates: List[CloudDirectoryLinkAttributeUpdate]
    ) -> CloudDirectoryUpdateLinkAttributesResponse: ...

    def update_object_attributes(self, *,
        DirectoryArn: str,
        ObjectReference: CloudDirectoryObjectReference,
        AttributeUpdates: List[CloudDirectoryObjectAttributeUpdate]
    ) -> CloudDirectoryUpdateObjectAttributesResponse: ...

    def update_schema(self, *,
        SchemaArn: str,
        Name: str
    ) -> CloudDirectoryUpdateSchemaResponse: ...

    def update_typed_link_facet(self, *,
        SchemaArn: str,
        Name: str,
        AttributeUpdates: List[CloudDirectoryTypedLinkFacetAttributeUpdate],
        IdentityAttributeOrder: List[str]
    ) -> CloudDirectoryUpdateTypedLinkFacetResponse: ...

    def upgrade_applied_schema(self, *,
        PublishedSchemaArn: str,
        DirectoryArn: str,
        DryRun: bool = ...
    ) -> CloudDirectoryUpgradeAppliedSchemaResponse: ...

    def upgrade_published_schema(self, *,
        DevelopmentSchemaArn: str,
        PublishedSchemaArn: str,
        MinorVersion: str,
        DryRun: bool = ...
    ) -> CloudDirectoryUpgradePublishedSchemaResponse: ...


CloudDirectorySchemaFacet = TypedDict(
    'CloudDirectorySchemaFacet', {
        'Arn': Optional[str],
        'FacetName': Optional[str],
    }
)


CloudDirectoryAttributeKey = TypedDict(
    'CloudDirectoryAttributeKey', {
        'Arn': str,
        'FacetName': str,
        'AttributeName': str,
    }
)


CloudDirectoryTypedAttributeValue = TypedDict(
    'CloudDirectoryTypedAttributeValue', {
        'StringAttributeValue': Optional[str],
        'BinaryAttributeValue': Optional[bytes],
        'BooleanAttributeValue': Optional[bool],
        'NumberAttributeValue': Optional[str],
        'DatetimeAttributeValue': Optional[datetime.datetime],
    }
)


CloudDirectoryAttributeKeyAndValue = TypedDict(
    'CloudDirectoryAttributeKeyAndValue', {
        'AttributeKey': CloudDirectoryAttributeKey,
        'TypedAttributeValue': CloudDirectoryTypedAttributeValue,
    }
)


CloudDirectoryObjectReference = TypedDict(
    'CloudDirectoryObjectReference', {
        'SelectorObjectReference': Optional[str],
    }
)


CloudDirectoryAddFacetToObjectResponse = TypedDict(
    'CloudDirectoryAddFacetToObjectResponse', {
    }
)


CloudDirectoryApplySchemaResponse = TypedDict(
    'CloudDirectoryApplySchemaResponse', {
        'Arn': Optional[str],
        'Arn': Optional[str],
    }
)


CloudDirectoryAttachObjectResponse = TypedDict(
    'CloudDirectoryAttachObjectResponse', {
        'ObjectIdentifier': Optional[str],
    }
)


CloudDirectoryAttachPolicyResponse = TypedDict(
    'CloudDirectoryAttachPolicyResponse', {
    }
)


CloudDirectoryAttachToIndexResponse = TypedDict(
    'CloudDirectoryAttachToIndexResponse', {
        'ObjectIdentifier': Optional[str],
    }
)


CloudDirectoryTypedLinkSchemaAndFacetName = TypedDict(
    'CloudDirectoryTypedLinkSchemaAndFacetName', {
        'Arn': str,
        'TypedLinkName': str,
    }
)


CloudDirectoryAttributeNameAndValue = TypedDict(
    'CloudDirectoryAttributeNameAndValue', {
        'AttributeName': str,
        'TypedAttributeValue': CloudDirectoryTypedAttributeValue,
    }
)


CloudDirectoryTypedLinkSpecifier = TypedDict(
    'CloudDirectoryTypedLinkSpecifier', {
        'TypedLinkSchemaAndFacetName': CloudDirectoryTypedLinkSchemaAndFacetName,
        'ObjectReference': CloudDirectoryObjectReference,
        'ObjectReference': CloudDirectoryObjectReference,
        'AttributeNameAndValueList': List[CloudDirectoryAttributeNameAndValue],
    }
)


CloudDirectoryAttachTypedLinkResponse = TypedDict(
    'CloudDirectoryAttachTypedLinkResponse', {
        'TypedLinkSpecifier': Optional[CloudDirectoryTypedLinkSpecifier],
    }
)


CloudDirectoryBatchListObjectAttributes = TypedDict(
    'CloudDirectoryBatchListObjectAttributes', {
        'ObjectReference': CloudDirectoryObjectReference,
        'NextToken': Optional[str],
        'NumberResults': Optional[int],
        'SchemaFacet': Optional[CloudDirectorySchemaFacet],
    }
)


CloudDirectoryBatchListObjectChildren = TypedDict(
    'CloudDirectoryBatchListObjectChildren', {
        'ObjectReference': CloudDirectoryObjectReference,
        'NextToken': Optional[str],
        'NumberResults': Optional[int],
    }
)


CloudDirectoryBatchListAttachedIndices = TypedDict(
    'CloudDirectoryBatchListAttachedIndices', {
        'ObjectReference': CloudDirectoryObjectReference,
        'NextToken': Optional[str],
        'NumberResults': Optional[int],
    }
)


CloudDirectoryBatchListObjectParentPaths = TypedDict(
    'CloudDirectoryBatchListObjectParentPaths', {
        'ObjectReference': CloudDirectoryObjectReference,
        'NextToken': Optional[str],
        'NumberResults': Optional[int],
    }
)


CloudDirectoryBatchGetObjectInformation = TypedDict(
    'CloudDirectoryBatchGetObjectInformation', {
        'ObjectReference': CloudDirectoryObjectReference,
    }
)


CloudDirectoryBatchGetObjectAttributes = TypedDict(
    'CloudDirectoryBatchGetObjectAttributes', {
        'ObjectReference': CloudDirectoryObjectReference,
        'SchemaFacet': CloudDirectorySchemaFacet,
        'AttributeNameList': List[str],
    }
)


CloudDirectoryBatchListObjectParents = TypedDict(
    'CloudDirectoryBatchListObjectParents', {
        'ObjectReference': CloudDirectoryObjectReference,
        'NextToken': Optional[str],
        'NumberResults': Optional[int],
    }
)


CloudDirectoryBatchListObjectPolicies = TypedDict(
    'CloudDirectoryBatchListObjectPolicies', {
        'ObjectReference': CloudDirectoryObjectReference,
        'NextToken': Optional[str],
        'NumberResults': Optional[int],
    }
)


CloudDirectoryBatchListPolicyAttachments = TypedDict(
    'CloudDirectoryBatchListPolicyAttachments', {
        'ObjectReference': CloudDirectoryObjectReference,
        'NextToken': Optional[str],
        'NumberResults': Optional[int],
    }
)


CloudDirectoryBatchLookupPolicy = TypedDict(
    'CloudDirectoryBatchLookupPolicy', {
        'ObjectReference': CloudDirectoryObjectReference,
        'NextToken': Optional[str],
        'NumberResults': Optional[int],
    }
)


CloudDirectoryTypedAttributeValueRange = TypedDict(
    'CloudDirectoryTypedAttributeValueRange', {
        'RangeMode': str,
        'RangeMode': str,
        'TypedAttributeValue': Optional[CloudDirectoryTypedAttributeValue],
        'TypedAttributeValue': Optional[CloudDirectoryTypedAttributeValue],
    }
)


CloudDirectoryObjectAttributeRange = TypedDict(
    'CloudDirectoryObjectAttributeRange', {
        'AttributeKey': Optional[CloudDirectoryAttributeKey],
        'TypedAttributeValueRange': Optional[CloudDirectoryTypedAttributeValueRange],
    }
)


CloudDirectoryBatchListIndex = TypedDict(
    'CloudDirectoryBatchListIndex', {
        'ObjectReference': CloudDirectoryObjectReference,
        'ObjectAttributeRangeList': Optional[List[CloudDirectoryObjectAttributeRange]],
        'NumberResults': Optional[int],
        'NextToken': Optional[str],
    }
)


CloudDirectoryTypedLinkAttributeRange = TypedDict(
    'CloudDirectoryTypedLinkAttributeRange', {
        'TypedAttributeValueRange': CloudDirectoryTypedAttributeValueRange,
        'AttributeName': Optional[str],
    }
)


CloudDirectoryBatchListOutgoingTypedLinks = TypedDict(
    'CloudDirectoryBatchListOutgoingTypedLinks', {
        'ObjectReference': CloudDirectoryObjectReference,
        'TypedLinkAttributeRangeList': Optional[List[CloudDirectoryTypedLinkAttributeRange]],
        'TypedLinkSchemaAndFacetName': Optional[CloudDirectoryTypedLinkSchemaAndFacetName],
        'NextToken': Optional[str],
        'NumberResults': Optional[int],
    }
)


CloudDirectoryBatchListIncomingTypedLinks = TypedDict(
    'CloudDirectoryBatchListIncomingTypedLinks', {
        'ObjectReference': CloudDirectoryObjectReference,
        'TypedLinkAttributeRangeList': Optional[List[CloudDirectoryTypedLinkAttributeRange]],
        'TypedLinkSchemaAndFacetName': Optional[CloudDirectoryTypedLinkSchemaAndFacetName],
        'NextToken': Optional[str],
        'NumberResults': Optional[int],
    }
)


CloudDirectoryBatchGetLinkAttributes = TypedDict(
    'CloudDirectoryBatchGetLinkAttributes', {
        'TypedLinkSpecifier': CloudDirectoryTypedLinkSpecifier,
        'AttributeNameList': List[str],
    }
)


CloudDirectoryBatchReadOperation = TypedDict(
    'CloudDirectoryBatchReadOperation', {
        'BatchListObjectAttributes': Optional[CloudDirectoryBatchListObjectAttributes],
        'BatchListObjectChildren': Optional[CloudDirectoryBatchListObjectChildren],
        'BatchListAttachedIndices': Optional[CloudDirectoryBatchListAttachedIndices],
        'BatchListObjectParentPaths': Optional[CloudDirectoryBatchListObjectParentPaths],
        'BatchGetObjectInformation': Optional[CloudDirectoryBatchGetObjectInformation],
        'BatchGetObjectAttributes': Optional[CloudDirectoryBatchGetObjectAttributes],
        'BatchListObjectParents': Optional[CloudDirectoryBatchListObjectParents],
        'BatchListObjectPolicies': Optional[CloudDirectoryBatchListObjectPolicies],
        'BatchListPolicyAttachments': Optional[CloudDirectoryBatchListPolicyAttachments],
        'BatchLookupPolicy': Optional[CloudDirectoryBatchLookupPolicy],
        'BatchListIndex': Optional[CloudDirectoryBatchListIndex],
        'BatchListOutgoingTypedLinks': Optional[CloudDirectoryBatchListOutgoingTypedLinks],
        'BatchListIncomingTypedLinks': Optional[CloudDirectoryBatchListIncomingTypedLinks],
        'BatchGetLinkAttributes': Optional[CloudDirectoryBatchGetLinkAttributes],
    }
)


CloudDirectoryBatchListObjectAttributesResponse = TypedDict(
    'CloudDirectoryBatchListObjectAttributesResponse', {
        'AttributeKeyAndValueList': Optional[List[CloudDirectoryAttributeKeyAndValue]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryBatchListObjectChildrenResponse = TypedDict(
    'CloudDirectoryBatchListObjectChildrenResponse', {
        'LinkNameToObjectIdentifierMap': Optional[Dict[str, str]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryBatchGetObjectInformationResponse = TypedDict(
    'CloudDirectoryBatchGetObjectInformationResponse', {
        'SchemaFacetList': Optional[List[CloudDirectorySchemaFacet]],
        'ObjectIdentifier': Optional[str],
    }
)


CloudDirectoryBatchGetObjectAttributesResponse = TypedDict(
    'CloudDirectoryBatchGetObjectAttributesResponse', {
        'AttributeKeyAndValueList': Optional[List[CloudDirectoryAttributeKeyAndValue]],
    }
)


CloudDirectoryIndexAttachment = TypedDict(
    'CloudDirectoryIndexAttachment', {
        'AttributeKeyAndValueList': Optional[List[CloudDirectoryAttributeKeyAndValue]],
        'ObjectIdentifier': Optional[str],
    }
)


CloudDirectoryBatchListAttachedIndicesResponse = TypedDict(
    'CloudDirectoryBatchListAttachedIndicesResponse', {
        'IndexAttachmentList': Optional[List[CloudDirectoryIndexAttachment]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryPathToObjectIdentifiers = TypedDict(
    'CloudDirectoryPathToObjectIdentifiers', {
        'PathString': Optional[str],
        'ObjectIdentifierList': Optional[List[str]],
    }
)


CloudDirectoryBatchListObjectParentPathsResponse = TypedDict(
    'CloudDirectoryBatchListObjectParentPathsResponse', {
        'PathToObjectIdentifiersList': Optional[List[CloudDirectoryPathToObjectIdentifiers]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryBatchListObjectPoliciesResponse = TypedDict(
    'CloudDirectoryBatchListObjectPoliciesResponse', {
        'ObjectIdentifierList': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryBatchListPolicyAttachmentsResponse = TypedDict(
    'CloudDirectoryBatchListPolicyAttachmentsResponse', {
        'ObjectIdentifierList': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryPolicyAttachment = TypedDict(
    'CloudDirectoryPolicyAttachment', {
        'ObjectIdentifier': Optional[str],
        'ObjectIdentifier': Optional[str],
        'PolicyType': Optional[str],
    }
)


CloudDirectoryPolicyToPath = TypedDict(
    'CloudDirectoryPolicyToPath', {
        'PathString': Optional[str],
        'PolicyAttachmentList': Optional[List[CloudDirectoryPolicyAttachment]],
    }
)


CloudDirectoryBatchLookupPolicyResponse = TypedDict(
    'CloudDirectoryBatchLookupPolicyResponse', {
        'PolicyToPathList': Optional[List[CloudDirectoryPolicyToPath]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryBatchListIndexResponse = TypedDict(
    'CloudDirectoryBatchListIndexResponse', {
        'IndexAttachmentList': Optional[List[CloudDirectoryIndexAttachment]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryBatchListOutgoingTypedLinksResponse = TypedDict(
    'CloudDirectoryBatchListOutgoingTypedLinksResponse', {
        'TypedLinkSpecifierList': Optional[List[CloudDirectoryTypedLinkSpecifier]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryBatchListIncomingTypedLinksResponse = TypedDict(
    'CloudDirectoryBatchListIncomingTypedLinksResponse', {
        'TypedLinkSpecifierList': Optional[List[CloudDirectoryTypedLinkSpecifier]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryBatchGetLinkAttributesResponse = TypedDict(
    'CloudDirectoryBatchGetLinkAttributesResponse', {
        'AttributeKeyAndValueList': Optional[List[CloudDirectoryAttributeKeyAndValue]],
    }
)


CloudDirectoryObjectIdentifierAndLinkNameTuple = TypedDict(
    'CloudDirectoryObjectIdentifierAndLinkNameTuple', {
        'ObjectIdentifier': Optional[str],
        'LinkName': Optional[str],
    }
)


CloudDirectoryBatchListObjectParentsResponse = TypedDict(
    'CloudDirectoryBatchListObjectParentsResponse', {
        'ObjectIdentifierAndLinkNameList': Optional[List[CloudDirectoryObjectIdentifierAndLinkNameTuple]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryBatchReadSuccessfulResponse = TypedDict(
    'CloudDirectoryBatchReadSuccessfulResponse', {
        'BatchListObjectAttributesResponse': Optional[CloudDirectoryBatchListObjectAttributesResponse],
        'BatchListObjectChildrenResponse': Optional[CloudDirectoryBatchListObjectChildrenResponse],
        'BatchGetObjectInformationResponse': Optional[CloudDirectoryBatchGetObjectInformationResponse],
        'BatchGetObjectAttributesResponse': Optional[CloudDirectoryBatchGetObjectAttributesResponse],
        'BatchListAttachedIndicesResponse': Optional[CloudDirectoryBatchListAttachedIndicesResponse],
        'BatchListObjectParentPathsResponse': Optional[CloudDirectoryBatchListObjectParentPathsResponse],
        'BatchListObjectPoliciesResponse': Optional[CloudDirectoryBatchListObjectPoliciesResponse],
        'BatchListPolicyAttachmentsResponse': Optional[CloudDirectoryBatchListPolicyAttachmentsResponse],
        'BatchLookupPolicyResponse': Optional[CloudDirectoryBatchLookupPolicyResponse],
        'BatchListIndexResponse': Optional[CloudDirectoryBatchListIndexResponse],
        'BatchListOutgoingTypedLinksResponse': Optional[CloudDirectoryBatchListOutgoingTypedLinksResponse],
        'BatchListIncomingTypedLinksResponse': Optional[CloudDirectoryBatchListIncomingTypedLinksResponse],
        'BatchGetLinkAttributesResponse': Optional[CloudDirectoryBatchGetLinkAttributesResponse],
        'BatchListObjectParentsResponse': Optional[CloudDirectoryBatchListObjectParentsResponse],
    }
)


CloudDirectoryBatchReadException = TypedDict(
    'CloudDirectoryBatchReadException', {
        'BatchReadExceptionType': Optional[str],
        'ExceptionMessage': Optional[str],
    }
)


CloudDirectoryBatchReadOperationResponse = TypedDict(
    'CloudDirectoryBatchReadOperationResponse', {
        'BatchReadSuccessfulResponse': Optional[CloudDirectoryBatchReadSuccessfulResponse],
        'BatchReadException': Optional[CloudDirectoryBatchReadException],
    }
)


CloudDirectoryBatchReadResponse = TypedDict(
    'CloudDirectoryBatchReadResponse', {
        'BatchReadOperationResponseList': Optional[List[CloudDirectoryBatchReadOperationResponse]],
    }
)


CloudDirectoryBatchCreateObject = TypedDict(
    'CloudDirectoryBatchCreateObject', {
        'SchemaFacetList': List[CloudDirectorySchemaFacet],
        'AttributeKeyAndValueList': List[CloudDirectoryAttributeKeyAndValue],
        'ObjectReference': Optional[CloudDirectoryObjectReference],
        'LinkName': Optional[str],
        'BatchReferenceName': Optional[str],
    }
)


CloudDirectoryBatchAttachObject = TypedDict(
    'CloudDirectoryBatchAttachObject', {
        'ObjectReference': CloudDirectoryObjectReference,
        'ObjectReference': CloudDirectoryObjectReference,
        'LinkName': str,
    }
)


CloudDirectoryBatchDetachObject = TypedDict(
    'CloudDirectoryBatchDetachObject', {
        'ObjectReference': CloudDirectoryObjectReference,
        'LinkName': str,
        'BatchReferenceName': Optional[str],
    }
)


CloudDirectoryObjectAttributeAction = TypedDict(
    'CloudDirectoryObjectAttributeAction', {
        'UpdateActionType': Optional[str],
        'TypedAttributeValue': Optional[CloudDirectoryTypedAttributeValue],
    }
)


CloudDirectoryObjectAttributeUpdate = TypedDict(
    'CloudDirectoryObjectAttributeUpdate', {
        'AttributeKey': Optional[CloudDirectoryAttributeKey],
        'ObjectAttributeAction': Optional[CloudDirectoryObjectAttributeAction],
    }
)


CloudDirectoryBatchUpdateObjectAttributes = TypedDict(
    'CloudDirectoryBatchUpdateObjectAttributes', {
        'ObjectReference': CloudDirectoryObjectReference,
        'ObjectAttributeUpdateList': List[CloudDirectoryObjectAttributeUpdate],
    }
)


CloudDirectoryBatchDeleteObject = TypedDict(
    'CloudDirectoryBatchDeleteObject', {
        'ObjectReference': CloudDirectoryObjectReference,
    }
)


CloudDirectoryBatchAddFacetToObject = TypedDict(
    'CloudDirectoryBatchAddFacetToObject', {
        'SchemaFacet': CloudDirectorySchemaFacet,
        'AttributeKeyAndValueList': List[CloudDirectoryAttributeKeyAndValue],
        'ObjectReference': CloudDirectoryObjectReference,
    }
)


CloudDirectoryBatchRemoveFacetFromObject = TypedDict(
    'CloudDirectoryBatchRemoveFacetFromObject', {
        'SchemaFacet': CloudDirectorySchemaFacet,
        'ObjectReference': CloudDirectoryObjectReference,
    }
)


CloudDirectoryBatchAttachPolicy = TypedDict(
    'CloudDirectoryBatchAttachPolicy', {
        'ObjectReference': CloudDirectoryObjectReference,
        'ObjectReference': CloudDirectoryObjectReference,
    }
)


CloudDirectoryBatchDetachPolicy = TypedDict(
    'CloudDirectoryBatchDetachPolicy', {
        'ObjectReference': CloudDirectoryObjectReference,
        'ObjectReference': CloudDirectoryObjectReference,
    }
)


CloudDirectoryBatchCreateIndex = TypedDict(
    'CloudDirectoryBatchCreateIndex', {
        'AttributeKeyList': List[CloudDirectoryAttributeKey],
        'Bool': bool,
        'ObjectReference': Optional[CloudDirectoryObjectReference],
        'LinkName': Optional[str],
        'BatchReferenceName': Optional[str],
    }
)


CloudDirectoryBatchAttachToIndex = TypedDict(
    'CloudDirectoryBatchAttachToIndex', {
        'ObjectReference': CloudDirectoryObjectReference,
        'ObjectReference': CloudDirectoryObjectReference,
    }
)


CloudDirectoryBatchDetachFromIndex = TypedDict(
    'CloudDirectoryBatchDetachFromIndex', {
        'ObjectReference': CloudDirectoryObjectReference,
        'ObjectReference': CloudDirectoryObjectReference,
    }
)


CloudDirectoryBatchAttachTypedLink = TypedDict(
    'CloudDirectoryBatchAttachTypedLink', {
        'ObjectReference': CloudDirectoryObjectReference,
        'ObjectReference': CloudDirectoryObjectReference,
        'TypedLinkSchemaAndFacetName': CloudDirectoryTypedLinkSchemaAndFacetName,
        'AttributeNameAndValueList': List[CloudDirectoryAttributeNameAndValue],
    }
)


CloudDirectoryBatchDetachTypedLink = TypedDict(
    'CloudDirectoryBatchDetachTypedLink', {
        'TypedLinkSpecifier': CloudDirectoryTypedLinkSpecifier,
    }
)


CloudDirectoryLinkAttributeAction = TypedDict(
    'CloudDirectoryLinkAttributeAction', {
        'UpdateActionType': Optional[str],
        'TypedAttributeValue': Optional[CloudDirectoryTypedAttributeValue],
    }
)


CloudDirectoryLinkAttributeUpdate = TypedDict(
    'CloudDirectoryLinkAttributeUpdate', {
        'AttributeKey': Optional[CloudDirectoryAttributeKey],
        'LinkAttributeAction': Optional[CloudDirectoryLinkAttributeAction],
    }
)


CloudDirectoryBatchUpdateLinkAttributes = TypedDict(
    'CloudDirectoryBatchUpdateLinkAttributes', {
        'TypedLinkSpecifier': CloudDirectoryTypedLinkSpecifier,
        'LinkAttributeUpdateList': List[CloudDirectoryLinkAttributeUpdate],
    }
)


CloudDirectoryBatchWriteOperation = TypedDict(
    'CloudDirectoryBatchWriteOperation', {
        'BatchCreateObject': Optional[CloudDirectoryBatchCreateObject],
        'BatchAttachObject': Optional[CloudDirectoryBatchAttachObject],
        'BatchDetachObject': Optional[CloudDirectoryBatchDetachObject],
        'BatchUpdateObjectAttributes': Optional[CloudDirectoryBatchUpdateObjectAttributes],
        'BatchDeleteObject': Optional[CloudDirectoryBatchDeleteObject],
        'BatchAddFacetToObject': Optional[CloudDirectoryBatchAddFacetToObject],
        'BatchRemoveFacetFromObject': Optional[CloudDirectoryBatchRemoveFacetFromObject],
        'BatchAttachPolicy': Optional[CloudDirectoryBatchAttachPolicy],
        'BatchDetachPolicy': Optional[CloudDirectoryBatchDetachPolicy],
        'BatchCreateIndex': Optional[CloudDirectoryBatchCreateIndex],
        'BatchAttachToIndex': Optional[CloudDirectoryBatchAttachToIndex],
        'BatchDetachFromIndex': Optional[CloudDirectoryBatchDetachFromIndex],
        'BatchAttachTypedLink': Optional[CloudDirectoryBatchAttachTypedLink],
        'BatchDetachTypedLink': Optional[CloudDirectoryBatchDetachTypedLink],
        'BatchUpdateLinkAttributes': Optional[CloudDirectoryBatchUpdateLinkAttributes],
    }
)


CloudDirectoryBatchCreateObjectResponse = TypedDict(
    'CloudDirectoryBatchCreateObjectResponse', {
        'ObjectIdentifier': Optional[str],
    }
)


CloudDirectoryBatchAttachObjectResponse = TypedDict(
    'CloudDirectoryBatchAttachObjectResponse', {
        'ObjectIdentifier': Optional[str],
    }
)


CloudDirectoryBatchDetachObjectResponse = TypedDict(
    'CloudDirectoryBatchDetachObjectResponse', {
        'ObjectIdentifier': Optional[str],
    }
)


CloudDirectoryBatchUpdateObjectAttributesResponse = TypedDict(
    'CloudDirectoryBatchUpdateObjectAttributesResponse', {
        'ObjectIdentifier': Optional[str],
    }
)


CloudDirectoryBatchDeleteObjectResponse = TypedDict(
    'CloudDirectoryBatchDeleteObjectResponse', {
    }
)


CloudDirectoryBatchAddFacetToObjectResponse = TypedDict(
    'CloudDirectoryBatchAddFacetToObjectResponse', {
    }
)


CloudDirectoryBatchRemoveFacetFromObjectResponse = TypedDict(
    'CloudDirectoryBatchRemoveFacetFromObjectResponse', {
    }
)


CloudDirectoryBatchAttachPolicyResponse = TypedDict(
    'CloudDirectoryBatchAttachPolicyResponse', {
    }
)


CloudDirectoryBatchDetachPolicyResponse = TypedDict(
    'CloudDirectoryBatchDetachPolicyResponse', {
    }
)


CloudDirectoryBatchCreateIndexResponse = TypedDict(
    'CloudDirectoryBatchCreateIndexResponse', {
        'ObjectIdentifier': Optional[str],
    }
)


CloudDirectoryBatchAttachToIndexResponse = TypedDict(
    'CloudDirectoryBatchAttachToIndexResponse', {
        'ObjectIdentifier': Optional[str],
    }
)


CloudDirectoryBatchDetachFromIndexResponse = TypedDict(
    'CloudDirectoryBatchDetachFromIndexResponse', {
        'ObjectIdentifier': Optional[str],
    }
)


CloudDirectoryBatchAttachTypedLinkResponse = TypedDict(
    'CloudDirectoryBatchAttachTypedLinkResponse', {
        'TypedLinkSpecifier': Optional[CloudDirectoryTypedLinkSpecifier],
    }
)


CloudDirectoryBatchDetachTypedLinkResponse = TypedDict(
    'CloudDirectoryBatchDetachTypedLinkResponse', {
    }
)


CloudDirectoryBatchUpdateLinkAttributesResponse = TypedDict(
    'CloudDirectoryBatchUpdateLinkAttributesResponse', {
    }
)


CloudDirectoryBatchWriteOperationResponse = TypedDict(
    'CloudDirectoryBatchWriteOperationResponse', {
        'BatchCreateObjectResponse': Optional[CloudDirectoryBatchCreateObjectResponse],
        'BatchAttachObjectResponse': Optional[CloudDirectoryBatchAttachObjectResponse],
        'BatchDetachObjectResponse': Optional[CloudDirectoryBatchDetachObjectResponse],
        'BatchUpdateObjectAttributesResponse': Optional[CloudDirectoryBatchUpdateObjectAttributesResponse],
        'BatchDeleteObjectResponse': Optional[CloudDirectoryBatchDeleteObjectResponse],
        'BatchAddFacetToObjectResponse': Optional[CloudDirectoryBatchAddFacetToObjectResponse],
        'BatchRemoveFacetFromObjectResponse': Optional[CloudDirectoryBatchRemoveFacetFromObjectResponse],
        'BatchAttachPolicyResponse': Optional[CloudDirectoryBatchAttachPolicyResponse],
        'BatchDetachPolicyResponse': Optional[CloudDirectoryBatchDetachPolicyResponse],
        'BatchCreateIndexResponse': Optional[CloudDirectoryBatchCreateIndexResponse],
        'BatchAttachToIndexResponse': Optional[CloudDirectoryBatchAttachToIndexResponse],
        'BatchDetachFromIndexResponse': Optional[CloudDirectoryBatchDetachFromIndexResponse],
        'BatchAttachTypedLinkResponse': Optional[CloudDirectoryBatchAttachTypedLinkResponse],
        'BatchDetachTypedLinkResponse': Optional[CloudDirectoryBatchDetachTypedLinkResponse],
        'BatchUpdateLinkAttributesResponse': Optional[CloudDirectoryBatchUpdateLinkAttributesResponse],
    }
)


CloudDirectoryBatchWriteResponse = TypedDict(
    'CloudDirectoryBatchWriteResponse', {
        'BatchWriteOperationResponseList': Optional[List[CloudDirectoryBatchWriteOperationResponse]],
    }
)


CloudDirectoryCreateDirectoryResponse = TypedDict(
    'CloudDirectoryCreateDirectoryResponse', {
        'DirectoryArn': str,
        'DirectoryName': str,
        'ObjectIdentifier': str,
        'Arn': str,
    }
)


CloudDirectoryRule = TypedDict(
    'CloudDirectoryRule', {
        'RuleType': Optional[str],
        'RuleParameterMap': Optional[Dict[str, str]],
    }
)


CloudDirectoryFacetAttributeDefinition = TypedDict(
    'CloudDirectoryFacetAttributeDefinition', {
        'FacetAttributeType': str,
        'TypedAttributeValue': Optional[CloudDirectoryTypedAttributeValue],
        'Bool': Optional[bool],
        'RuleMap': Optional[Dict[str, CloudDirectoryRule]],
    }
)


CloudDirectoryFacetAttributeReference = TypedDict(
    'CloudDirectoryFacetAttributeReference', {
        'FacetName': str,
        'AttributeName': str,
    }
)


CloudDirectoryFacetAttribute = TypedDict(
    'CloudDirectoryFacetAttribute', {
        'AttributeName': str,
        'FacetAttributeDefinition': Optional[CloudDirectoryFacetAttributeDefinition],
        'FacetAttributeReference': Optional[CloudDirectoryFacetAttributeReference],
        'RequiredAttributeBehavior': Optional[str],
    }
)


CloudDirectoryCreateFacetResponse = TypedDict(
    'CloudDirectoryCreateFacetResponse', {
    }
)


CloudDirectoryCreateIndexResponse = TypedDict(
    'CloudDirectoryCreateIndexResponse', {
        'ObjectIdentifier': Optional[str],
    }
)


CloudDirectoryCreateObjectResponse = TypedDict(
    'CloudDirectoryCreateObjectResponse', {
        'ObjectIdentifier': Optional[str],
    }
)


CloudDirectoryCreateSchemaResponse = TypedDict(
    'CloudDirectoryCreateSchemaResponse', {
        'Arn': Optional[str],
    }
)


CloudDirectoryTypedLinkAttributeDefinition = TypedDict(
    'CloudDirectoryTypedLinkAttributeDefinition', {
        'AttributeName': str,
        'FacetAttributeType': str,
        'RequiredAttributeBehavior': str,
        'TypedAttributeValue': Optional[CloudDirectoryTypedAttributeValue],
        'Bool': Optional[bool],
        'RuleMap': Optional[Dict[str, CloudDirectoryRule]],
    }
)


CloudDirectoryTypedLinkFacet = TypedDict(
    'CloudDirectoryTypedLinkFacet', {
        'TypedLinkName': str,
        'TypedLinkAttributeDefinitionList': List[CloudDirectoryTypedLinkAttributeDefinition],
        'AttributeNameList': List[str],
    }
)


CloudDirectoryCreateTypedLinkFacetResponse = TypedDict(
    'CloudDirectoryCreateTypedLinkFacetResponse', {
    }
)


CloudDirectoryDeleteDirectoryResponse = TypedDict(
    'CloudDirectoryDeleteDirectoryResponse', {
        'Arn': str,
    }
)


CloudDirectoryDeleteFacetResponse = TypedDict(
    'CloudDirectoryDeleteFacetResponse', {
    }
)


CloudDirectoryDeleteObjectResponse = TypedDict(
    'CloudDirectoryDeleteObjectResponse', {
    }
)


CloudDirectoryDeleteSchemaResponse = TypedDict(
    'CloudDirectoryDeleteSchemaResponse', {
        'Arn': Optional[str],
    }
)


CloudDirectoryDeleteTypedLinkFacetResponse = TypedDict(
    'CloudDirectoryDeleteTypedLinkFacetResponse', {
    }
)


CloudDirectoryDetachFromIndexResponse = TypedDict(
    'CloudDirectoryDetachFromIndexResponse', {
        'ObjectIdentifier': Optional[str],
    }
)


CloudDirectoryDetachObjectResponse = TypedDict(
    'CloudDirectoryDetachObjectResponse', {
        'ObjectIdentifier': Optional[str],
    }
)


CloudDirectoryDetachPolicyResponse = TypedDict(
    'CloudDirectoryDetachPolicyResponse', {
    }
)


CloudDirectoryDisableDirectoryResponse = TypedDict(
    'CloudDirectoryDisableDirectoryResponse', {
        'Arn': str,
    }
)


CloudDirectoryEnableDirectoryResponse = TypedDict(
    'CloudDirectoryEnableDirectoryResponse', {
        'Arn': str,
    }
)


CloudDirectoryGetAppliedSchemaVersionResponse = TypedDict(
    'CloudDirectoryGetAppliedSchemaVersionResponse', {
        'Arn': Optional[str],
    }
)


CloudDirectoryDirectory = TypedDict(
    'CloudDirectoryDirectory', {
        'DirectoryName': Optional[str],
        'DirectoryArn': Optional[str],
        'DirectoryState': Optional[str],
        'Date': Optional[datetime.datetime],
    }
)


CloudDirectoryGetDirectoryResponse = TypedDict(
    'CloudDirectoryGetDirectoryResponse', {
        'Directory': CloudDirectoryDirectory,
    }
)


CloudDirectoryFacet = TypedDict(
    'CloudDirectoryFacet', {
        'FacetName': Optional[str],
        'ObjectType': Optional[str],
        'FacetStyle': Optional[str],
    }
)


CloudDirectoryGetFacetResponse = TypedDict(
    'CloudDirectoryGetFacetResponse', {
        'Facet': Optional[CloudDirectoryFacet],
    }
)


CloudDirectoryGetLinkAttributesResponse = TypedDict(
    'CloudDirectoryGetLinkAttributesResponse', {
        'AttributeKeyAndValueList': Optional[List[CloudDirectoryAttributeKeyAndValue]],
    }
)


CloudDirectoryGetObjectAttributesResponse = TypedDict(
    'CloudDirectoryGetObjectAttributesResponse', {
        'AttributeKeyAndValueList': Optional[List[CloudDirectoryAttributeKeyAndValue]],
    }
)


CloudDirectoryGetObjectInformationResponse = TypedDict(
    'CloudDirectoryGetObjectInformationResponse', {
        'SchemaFacetList': Optional[List[CloudDirectorySchemaFacet]],
        'ObjectIdentifier': Optional[str],
    }
)


CloudDirectoryGetSchemaAsJsonResponse = TypedDict(
    'CloudDirectoryGetSchemaAsJsonResponse', {
        'SchemaName': Optional[str],
        'SchemaJsonDocument': Optional[str],
    }
)


CloudDirectoryGetTypedLinkFacetInformationResponse = TypedDict(
    'CloudDirectoryGetTypedLinkFacetInformationResponse', {
        'AttributeNameList': Optional[List[str]],
    }
)


CloudDirectoryListAppliedSchemaArnsResponse = TypedDict(
    'CloudDirectoryListAppliedSchemaArnsResponse', {
        'Arns': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryListAttachedIndicesResponse = TypedDict(
    'CloudDirectoryListAttachedIndicesResponse', {
        'IndexAttachmentList': Optional[List[CloudDirectoryIndexAttachment]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryListDevelopmentSchemaArnsResponse = TypedDict(
    'CloudDirectoryListDevelopmentSchemaArnsResponse', {
        'Arns': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryListDirectoriesResponse = TypedDict(
    'CloudDirectoryListDirectoriesResponse', {
        'DirectoryList': List[CloudDirectoryDirectory],
        'NextToken': Optional[str],
    }
)


CloudDirectoryListFacetAttributesResponse = TypedDict(
    'CloudDirectoryListFacetAttributesResponse', {
        'FacetAttributeList': Optional[List[CloudDirectoryFacetAttribute]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryListFacetNamesResponse = TypedDict(
    'CloudDirectoryListFacetNamesResponse', {
        'FacetNameList': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryListIncomingTypedLinksResponse = TypedDict(
    'CloudDirectoryListIncomingTypedLinksResponse', {
        'TypedLinkSpecifierList': Optional[List[CloudDirectoryTypedLinkSpecifier]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryListIndexResponse = TypedDict(
    'CloudDirectoryListIndexResponse', {
        'IndexAttachmentList': Optional[List[CloudDirectoryIndexAttachment]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryListManagedSchemaArnsResponse = TypedDict(
    'CloudDirectoryListManagedSchemaArnsResponse', {
        'Arns': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryListObjectAttributesResponse = TypedDict(
    'CloudDirectoryListObjectAttributesResponse', {
        'AttributeKeyAndValueList': Optional[List[CloudDirectoryAttributeKeyAndValue]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryListObjectChildrenResponse = TypedDict(
    'CloudDirectoryListObjectChildrenResponse', {
        'LinkNameToObjectIdentifierMap': Optional[Dict[str, str]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryListObjectParentPathsResponse = TypedDict(
    'CloudDirectoryListObjectParentPathsResponse', {
        'PathToObjectIdentifiersList': Optional[List[CloudDirectoryPathToObjectIdentifiers]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryListObjectParentsResponse = TypedDict(
    'CloudDirectoryListObjectParentsResponse', {
        'ObjectIdentifierToLinkNameMap': Optional[Dict[str, str]],
        'NextToken': Optional[str],
        'ObjectIdentifierAndLinkNameList': Optional[List[CloudDirectoryObjectIdentifierAndLinkNameTuple]],
    }
)


CloudDirectoryListObjectPoliciesResponse = TypedDict(
    'CloudDirectoryListObjectPoliciesResponse', {
        'ObjectIdentifierList': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryListOutgoingTypedLinksResponse = TypedDict(
    'CloudDirectoryListOutgoingTypedLinksResponse', {
        'TypedLinkSpecifierList': Optional[List[CloudDirectoryTypedLinkSpecifier]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryListPolicyAttachmentsResponse = TypedDict(
    'CloudDirectoryListPolicyAttachmentsResponse', {
        'ObjectIdentifierList': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryListPublishedSchemaArnsResponse = TypedDict(
    'CloudDirectoryListPublishedSchemaArnsResponse', {
        'Arns': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryTag = TypedDict(
    'CloudDirectoryTag', {
        'TagKey': Optional[str],
        'TagValue': Optional[str],
    }
)


CloudDirectoryListTagsForResourceResponse = TypedDict(
    'CloudDirectoryListTagsForResourceResponse', {
        'TagList': Optional[List[CloudDirectoryTag]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryListTypedLinkFacetAttributesResponse = TypedDict(
    'CloudDirectoryListTypedLinkFacetAttributesResponse', {
        'TypedLinkAttributeDefinitionList': Optional[List[CloudDirectoryTypedLinkAttributeDefinition]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryListTypedLinkFacetNamesResponse = TypedDict(
    'CloudDirectoryListTypedLinkFacetNamesResponse', {
        'TypedLinkNameList': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryLookupPolicyResponse = TypedDict(
    'CloudDirectoryLookupPolicyResponse', {
        'PolicyToPathList': Optional[List[CloudDirectoryPolicyToPath]],
        'NextToken': Optional[str],
    }
)


CloudDirectoryPublishSchemaResponse = TypedDict(
    'CloudDirectoryPublishSchemaResponse', {
        'Arn': Optional[str],
    }
)


CloudDirectoryPutSchemaFromJsonResponse = TypedDict(
    'CloudDirectoryPutSchemaFromJsonResponse', {
        'Arn': Optional[str],
    }
)


CloudDirectoryRemoveFacetFromObjectResponse = TypedDict(
    'CloudDirectoryRemoveFacetFromObjectResponse', {
    }
)


CloudDirectoryTagResourceResponse = TypedDict(
    'CloudDirectoryTagResourceResponse', {
    }
)


CloudDirectoryUntagResourceResponse = TypedDict(
    'CloudDirectoryUntagResourceResponse', {
    }
)


CloudDirectoryFacetAttributeUpdate = TypedDict(
    'CloudDirectoryFacetAttributeUpdate', {
        'FacetAttribute': Optional[CloudDirectoryFacetAttribute],
        'UpdateActionType': Optional[str],
    }
)


CloudDirectoryUpdateFacetResponse = TypedDict(
    'CloudDirectoryUpdateFacetResponse', {
    }
)


CloudDirectoryUpdateLinkAttributesResponse = TypedDict(
    'CloudDirectoryUpdateLinkAttributesResponse', {
    }
)


CloudDirectoryUpdateObjectAttributesResponse = TypedDict(
    'CloudDirectoryUpdateObjectAttributesResponse', {
        'ObjectIdentifier': Optional[str],
    }
)


CloudDirectoryUpdateSchemaResponse = TypedDict(
    'CloudDirectoryUpdateSchemaResponse', {
        'Arn': Optional[str],
    }
)


CloudDirectoryTypedLinkFacetAttributeUpdate = TypedDict(
    'CloudDirectoryTypedLinkFacetAttributeUpdate', {
        'TypedLinkAttributeDefinition': CloudDirectoryTypedLinkAttributeDefinition,
        'UpdateActionType': str,
    }
)


CloudDirectoryUpdateTypedLinkFacetResponse = TypedDict(
    'CloudDirectoryUpdateTypedLinkFacetResponse', {
    }
)


CloudDirectoryUpgradeAppliedSchemaResponse = TypedDict(
    'CloudDirectoryUpgradeAppliedSchemaResponse', {
        'Arn': Optional[str],
        'Arn': Optional[str],
    }
)


CloudDirectoryUpgradePublishedSchemaResponse = TypedDict(
    'CloudDirectoryUpgradePublishedSchemaResponse', {
        'Arn': Optional[str],
    }
)


class CloudFormation(BaseClient):
    def cancel_update_stack(self, *,
        StackName: str,
        ClientRequestToken: str = ...
    ): ...

    def continue_update_rollback(self, *,
        StackName: str,
        RoleARN: str = ...,
        ResourcesToSkip: List[str] = ...,
        ClientRequestToken: str = ...
    ) -> CloudFormationContinueUpdateRollbackOutput: ...

    def create_change_set(self, *,
        StackName: str,
        ChangeSetName: str,
        TemplateBody: str = ...,
        TemplateURL: str = ...,
        UsePreviousTemplate: bool = ...,
        Parameters: List[CloudFormationParameter] = ...,
        Capabilities: List[str] = ...,
        ResourceTypes: List[str] = ...,
        RoleARN: str = ...,
        RollbackConfiguration: CloudFormationRollbackConfiguration = ...,
        NotificationARNs: List[str] = ...,
        Tags: List[CloudFormationTag] = ...,
        ClientToken: str = ...,
        Description: str = ...,
        ChangeSetType: str = ...
    ) -> CloudFormationCreateChangeSetOutput: ...

    def create_stack(self, *,
        StackName: str,
        TemplateBody: str = ...,
        TemplateURL: str = ...,
        Parameters: List[CloudFormationParameter] = ...,
        DisableRollback: bool = ...,
        RollbackConfiguration: CloudFormationRollbackConfiguration = ...,
        TimeoutInMinutes: int = ...,
        NotificationARNs: List[str] = ...,
        Capabilities: List[str] = ...,
        ResourceTypes: List[str] = ...,
        RoleARN: str = ...,
        OnFailure: str = ...,
        StackPolicyBody: str = ...,
        StackPolicyURL: str = ...,
        Tags: List[CloudFormationTag] = ...,
        ClientRequestToken: str = ...,
        EnableTerminationProtection: bool = ...
    ) -> CloudFormationCreateStackOutput: ...

    def create_stack_instances(self, *,
        StackSetName: str,
        Accounts: List[str],
        Regions: List[str],
        ParameterOverrides: List[CloudFormationParameter] = ...,
        OperationPreferences: CloudFormationStackSetOperationPreferences = ...,
        OperationId: str = ...
    ) -> CloudFormationCreateStackInstancesOutput: ...

    def create_stack_set(self, *,
        StackSetName: str,
        Description: str = ...,
        TemplateBody: str = ...,
        TemplateURL: str = ...,
        Parameters: List[CloudFormationParameter] = ...,
        Capabilities: List[str] = ...,
        Tags: List[CloudFormationTag] = ...,
        AdministrationRoleARN: str = ...,
        ExecutionRoleName: str = ...,
        ClientRequestToken: str = ...
    ) -> CloudFormationCreateStackSetOutput: ...

    def delete_change_set(self, *,
        ChangeSetName: str,
        StackName: str = ...
    ) -> CloudFormationDeleteChangeSetOutput: ...

    def delete_stack(self, *,
        StackName: str,
        RetainResources: List[str] = ...,
        RoleARN: str = ...,
        ClientRequestToken: str = ...
    ): ...

    def delete_stack_instances(self, *,
        StackSetName: str,
        Accounts: List[str],
        Regions: List[str],
        RetainStacks: bool,
        OperationPreferences: CloudFormationStackSetOperationPreferences = ...,
        OperationId: str = ...
    ) -> CloudFormationDeleteStackInstancesOutput: ...

    def delete_stack_set(self, *,
        StackSetName: str
    ) -> CloudFormationDeleteStackSetOutput: ...

    def describe_account_limits(self, *,
        NextToken: str = ...
    ) -> CloudFormationDescribeAccountLimitsOutput: ...

    def describe_change_set(self, *,
        ChangeSetName: str,
        StackName: str = ...,
        NextToken: str = ...
    ) -> CloudFormationDescribeChangeSetOutput: ...

    def describe_stack_drift_detection_status(self, *,
        StackDriftDetectionId: str
    ) -> CloudFormationDescribeStackDriftDetectionStatusOutput: ...

    def describe_stack_events(self, *,
        StackName: str = ...,
        NextToken: str = ...
    ) -> CloudFormationDescribeStackEventsOutput: ...

    def describe_stack_instance(self, *,
        StackSetName: str,
        StackInstanceAccount: str,
        StackInstanceRegion: str
    ) -> CloudFormationDescribeStackInstanceOutput: ...

    def describe_stack_resource(self, *,
        StackName: str,
        LogicalResourceId: str
    ) -> CloudFormationDescribeStackResourceOutput: ...

    def describe_stack_resource_drifts(self, *,
        StackName: str,
        StackResourceDriftStatusFilters: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudFormationDescribeStackResourceDriftsOutput: ...

    def describe_stack_resources(self, *,
        StackName: str = ...,
        LogicalResourceId: str = ...,
        PhysicalResourceId: str = ...
    ) -> CloudFormationDescribeStackResourcesOutput: ...

    def describe_stack_set(self, *,
        StackSetName: str
    ) -> CloudFormationDescribeStackSetOutput: ...

    def describe_stack_set_operation(self, *,
        StackSetName: str,
        OperationId: str
    ) -> CloudFormationDescribeStackSetOperationOutput: ...

    def describe_stacks(self, *,
        StackName: str = ...,
        NextToken: str = ...
    ) -> CloudFormationDescribeStacksOutput: ...

    def detect_stack_drift(self, *,
        StackName: str,
        LogicalResourceIds: List[str] = ...
    ) -> CloudFormationDetectStackDriftOutput: ...

    def detect_stack_resource_drift(self, *,
        StackName: str,
        LogicalResourceId: str
    ) -> CloudFormationDetectStackResourceDriftOutput: ...

    def estimate_template_cost(self, *,
        TemplateBody: str = ...,
        TemplateURL: str = ...,
        Parameters: List[CloudFormationParameter] = ...
    ) -> CloudFormationEstimateTemplateCostOutput: ...

    def execute_change_set(self, *,
        ChangeSetName: str,
        StackName: str = ...,
        ClientRequestToken: str = ...
    ) -> CloudFormationExecuteChangeSetOutput: ...

    def get_stack_policy(self, *,
        StackName: str
    ) -> CloudFormationGetStackPolicyOutput: ...

    def get_template(self, *,
        StackName: str = ...,
        ChangeSetName: str = ...,
        TemplateStage: str = ...
    ) -> CloudFormationGetTemplateOutput: ...

    def get_template_summary(self, *,
        TemplateBody: str = ...,
        TemplateURL: str = ...,
        StackName: str = ...,
        StackSetName: str = ...
    ) -> CloudFormationGetTemplateSummaryOutput: ...

    def list_change_sets(self, *,
        StackName: str,
        NextToken: str = ...
    ) -> CloudFormationListChangeSetsOutput: ...

    def list_exports(self, *,
        NextToken: str = ...
    ) -> CloudFormationListExportsOutput: ...

    def list_imports(self, *,
        ExportName: str,
        NextToken: str = ...
    ) -> CloudFormationListImportsOutput: ...

    def list_stack_instances(self, *,
        StackSetName: str,
        NextToken: str = ...,
        MaxResults: int = ...,
        StackInstanceAccount: str = ...,
        StackInstanceRegion: str = ...
    ) -> CloudFormationListStackInstancesOutput: ...

    def list_stack_resources(self, *,
        StackName: str,
        NextToken: str = ...
    ) -> CloudFormationListStackResourcesOutput: ...

    def list_stack_set_operation_results(self, *,
        StackSetName: str,
        OperationId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudFormationListStackSetOperationResultsOutput: ...

    def list_stack_set_operations(self, *,
        StackSetName: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudFormationListStackSetOperationsOutput: ...

    def list_stack_sets(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        Status: str = ...
    ) -> CloudFormationListStackSetsOutput: ...

    def list_stacks(self, *,
        NextToken: str = ...,
        StackStatusFilter: List[str] = ...
    ) -> CloudFormationListStacksOutput: ...

    def set_stack_policy(self, *,
        StackName: str,
        StackPolicyBody: str = ...,
        StackPolicyURL: str = ...
    ): ...

    def signal_resource(self, *,
        StackName: str,
        LogicalResourceId: str,
        UniqueId: str,
        Status: str
    ): ...

    def stop_stack_set_operation(self, *,
        StackSetName: str,
        OperationId: str
    ) -> CloudFormationStopStackSetOperationOutput: ...

    def update_stack(self, *,
        StackName: str,
        TemplateBody: str = ...,
        TemplateURL: str = ...,
        UsePreviousTemplate: bool = ...,
        StackPolicyDuringUpdateBody: str = ...,
        StackPolicyDuringUpdateURL: str = ...,
        Parameters: List[CloudFormationParameter] = ...,
        Capabilities: List[str] = ...,
        ResourceTypes: List[str] = ...,
        RoleARN: str = ...,
        RollbackConfiguration: CloudFormationRollbackConfiguration = ...,
        StackPolicyBody: str = ...,
        StackPolicyURL: str = ...,
        NotificationARNs: List[str] = ...,
        Tags: List[CloudFormationTag] = ...,
        ClientRequestToken: str = ...
    ) -> CloudFormationUpdateStackOutput: ...

    def update_stack_instances(self, *,
        StackSetName: str,
        Accounts: List[str],
        Regions: List[str],
        ParameterOverrides: List[CloudFormationParameter] = ...,
        OperationPreferences: CloudFormationStackSetOperationPreferences = ...,
        OperationId: str = ...
    ) -> CloudFormationUpdateStackInstancesOutput: ...

    def update_stack_set(self, *,
        StackSetName: str,
        Description: str = ...,
        TemplateBody: str = ...,
        TemplateURL: str = ...,
        UsePreviousTemplate: bool = ...,
        Parameters: List[CloudFormationParameter] = ...,
        Capabilities: List[str] = ...,
        Tags: List[CloudFormationTag] = ...,
        OperationPreferences: CloudFormationStackSetOperationPreferences = ...,
        AdministrationRoleARN: str = ...,
        ExecutionRoleName: str = ...,
        OperationId: str = ...,
        Accounts: List[str] = ...,
        Regions: List[str] = ...
    ) -> CloudFormationUpdateStackSetOutput: ...

    def update_termination_protection(self, *,
        EnableTerminationProtection: bool,
        StackName: str
    ) -> CloudFormationUpdateTerminationProtectionOutput: ...

    def validate_template(self, *,
        TemplateBody: str = ...,
        TemplateURL: str = ...
    ) -> CloudFormationValidateTemplateOutput: ...


CloudFormationContinueUpdateRollbackOutput = TypedDict(
    'CloudFormationContinueUpdateRollbackOutput', {
    }
)


CloudFormationParameter = TypedDict(
    'CloudFormationParameter', {
        'ParameterKey': Optional[str],
        'ParameterValue': Optional[str],
        'UsePreviousValue': Optional[bool],
        'ParameterValue': Optional[str],
    }
)


CloudFormationRollbackTrigger = TypedDict(
    'CloudFormationRollbackTrigger', {
        'Arn': str,
        'Type': str,
    }
)


CloudFormationRollbackConfiguration = TypedDict(
    'CloudFormationRollbackConfiguration', {
        'RollbackTriggers': Optional[List[CloudFormationRollbackTrigger]],
        'MonitoringTimeInMinutes': Optional[int],
    }
)


CloudFormationTag = TypedDict(
    'CloudFormationTag', {
        'TagKey': str,
        'TagValue': str,
    }
)


CloudFormationCreateChangeSetOutput = TypedDict(
    'CloudFormationCreateChangeSetOutput', {
        'ChangeSetId': Optional[str],
        'StackId': Optional[str],
    }
)


CloudFormationCreateStackOutput = TypedDict(
    'CloudFormationCreateStackOutput', {
        'StackId': Optional[str],
    }
)


CloudFormationStackSetOperationPreferences = TypedDict(
    'CloudFormationStackSetOperationPreferences', {
        'RegionList': Optional[List[str]],
        'FailureToleranceCount': Optional[int],
        'FailureTolerancePercentage': Optional[int],
        'MaxConcurrentCount': Optional[int],
        'MaxConcurrentPercentage': Optional[int],
    }
)


CloudFormationCreateStackInstancesOutput = TypedDict(
    'CloudFormationCreateStackInstancesOutput', {
        'ClientRequestToken': Optional[str],
    }
)


CloudFormationCreateStackSetOutput = TypedDict(
    'CloudFormationCreateStackSetOutput', {
        'StackSetId': Optional[str],
    }
)


CloudFormationDeleteChangeSetOutput = TypedDict(
    'CloudFormationDeleteChangeSetOutput', {
    }
)


CloudFormationDeleteStackInstancesOutput = TypedDict(
    'CloudFormationDeleteStackInstancesOutput', {
        'ClientRequestToken': Optional[str],
    }
)


CloudFormationDeleteStackSetOutput = TypedDict(
    'CloudFormationDeleteStackSetOutput', {
    }
)


CloudFormationAccountLimit = TypedDict(
    'CloudFormationAccountLimit', {
        'LimitName': Optional[str],
        'LimitValue': Optional[int],
    }
)


CloudFormationDescribeAccountLimitsOutput = TypedDict(
    'CloudFormationDescribeAccountLimitsOutput', {
        'AccountLimitList': Optional[List[CloudFormationAccountLimit]],
        'NextToken': Optional[str],
    }
)


CloudFormationResourceTargetDefinition = TypedDict(
    'CloudFormationResourceTargetDefinition', {
        'ResourceAttribute': Optional[str],
        'PropertyName': Optional[str],
        'RequiresRecreation': Optional[str],
    }
)


CloudFormationResourceChangeDetail = TypedDict(
    'CloudFormationResourceChangeDetail', {
        'ResourceTargetDefinition': Optional[CloudFormationResourceTargetDefinition],
        'EvaluationType': Optional[str],
        'ChangeSource': Optional[str],
        'CausingEntity': Optional[str],
    }
)


CloudFormationResourceChange = TypedDict(
    'CloudFormationResourceChange', {
        'ChangeAction': Optional[str],
        'LogicalResourceId': Optional[str],
        'PhysicalResourceId': Optional[str],
        'ResourceType': Optional[str],
        'Replacement': Optional[str],
        'Scope': Optional[List[str]],
        'ResourceChangeDetails': Optional[List[CloudFormationResourceChangeDetail]],
    }
)


CloudFormationChange = TypedDict(
    'CloudFormationChange', {
        'ChangeType': Optional[str],
        'ResourceChange': Optional[CloudFormationResourceChange],
    }
)


CloudFormationDescribeChangeSetOutput = TypedDict(
    'CloudFormationDescribeChangeSetOutput', {
        'ChangeSetName': Optional[str],
        'ChangeSetId': Optional[str],
        'StackId': Optional[str],
        'StackName': Optional[str],
        'Description': Optional[str],
        'Parameters': Optional[List[CloudFormationParameter]],
        'CreationTime': Optional[datetime.datetime],
        'ExecutionStatus': Optional[str],
        'ChangeSetStatus': Optional[str],
        'ChangeSetStatusReason': Optional[str],
        'NotificationARNs': Optional[List[str]],
        'RollbackConfiguration': Optional[CloudFormationRollbackConfiguration],
        'Capabilities': Optional[List[str]],
        'Tags': Optional[List[CloudFormationTag]],
        'Changes': Optional[List[CloudFormationChange]],
        'NextToken': Optional[str],
    }
)


CloudFormationDescribeStackDriftDetectionStatusOutput = TypedDict(
    'CloudFormationDescribeStackDriftDetectionStatusOutput', {
        'StackId': str,
        'StackDriftDetectionId': str,
        'StackDriftDetectionStatus': str,
        'Timestamp': datetime.datetime,
        'StackDriftStatus': Optional[str],
        'StackDriftDetectionStatusReason': Optional[str],
        'BoxedInteger': Optional[int],
    }
)


CloudFormationStackEvent = TypedDict(
    'CloudFormationStackEvent', {
        'StackId': str,
        'EventId': str,
        'StackName': str,
        'Timestamp': datetime.datetime,
        'LogicalResourceId': Optional[str],
        'PhysicalResourceId': Optional[str],
        'ResourceType': Optional[str],
        'ResourceStatus': Optional[str],
        'ResourceStatusReason': Optional[str],
        'ResourceProperties': Optional[str],
        'ClientRequestToken': Optional[str],
    }
)


CloudFormationDescribeStackEventsOutput = TypedDict(
    'CloudFormationDescribeStackEventsOutput', {
        'StackEvents': Optional[List[CloudFormationStackEvent]],
        'NextToken': Optional[str],
    }
)


CloudFormationStackInstance = TypedDict(
    'CloudFormationStackInstance', {
        'StackSetId': Optional[str],
        'Region': Optional[str],
        'Account': Optional[str],
        'StackId': Optional[str],
        'Parameters': Optional[List[CloudFormationParameter]],
        'StackInstanceStatus': Optional[str],
        'Reason': Optional[str],
    }
)


CloudFormationDescribeStackInstanceOutput = TypedDict(
    'CloudFormationDescribeStackInstanceOutput', {
        'StackInstance': Optional[CloudFormationStackInstance],
    }
)


CloudFormationStackResourceDriftInformation = TypedDict(
    'CloudFormationStackResourceDriftInformation', {
        'StackResourceDriftStatus': str,
        'Timestamp': Optional[datetime.datetime],
    }
)


CloudFormationStackResourceDetail = TypedDict(
    'CloudFormationStackResourceDetail', {
        'LogicalResourceId': str,
        'ResourceType': str,
        'Timestamp': datetime.datetime,
        'ResourceStatus': str,
        'StackName': Optional[str],
        'StackId': Optional[str],
        'PhysicalResourceId': Optional[str],
        'ResourceStatusReason': Optional[str],
        'Description': Optional[str],
        'Metadata': Optional[str],
        'StackResourceDriftInformation': Optional[CloudFormationStackResourceDriftInformation],
    }
)


CloudFormationDescribeStackResourceOutput = TypedDict(
    'CloudFormationDescribeStackResourceOutput', {
        'StackResourceDetail': Optional[CloudFormationStackResourceDetail],
    }
)


CloudFormationPhysicalResourceIdContextKeyValuePair = TypedDict(
    'CloudFormationPhysicalResourceIdContextKeyValuePair', {
        'Key': str,
        'Value': str,
    }
)


CloudFormationPropertyDifference = TypedDict(
    'CloudFormationPropertyDifference', {
        'PropertyPath': str,
        'PropertyValue': str,
        'PropertyValue': str,
        'DifferenceType': str,
    }
)


CloudFormationStackResourceDrift = TypedDict(
    'CloudFormationStackResourceDrift', {
        'StackId': str,
        'LogicalResourceId': str,
        'ResourceType': str,
        'StackResourceDriftStatus': str,
        'Timestamp': datetime.datetime,
        'PhysicalResourceId': Optional[str],
        'PhysicalResourceIdContext': Optional[List[CloudFormationPhysicalResourceIdContextKeyValuePair]],
        'Properties': Optional[str],
        'Properties': Optional[str],
        'PropertyDifferences': Optional[List[CloudFormationPropertyDifference]],
    }
)


CloudFormationDescribeStackResourceDriftsOutput = TypedDict(
    'CloudFormationDescribeStackResourceDriftsOutput', {
        'StackResourceDrifts': List[CloudFormationStackResourceDrift],
        'NextToken': Optional[str],
    }
)


CloudFormationStackResource = TypedDict(
    'CloudFormationStackResource', {
        'LogicalResourceId': str,
        'ResourceType': str,
        'Timestamp': datetime.datetime,
        'ResourceStatus': str,
        'StackName': Optional[str],
        'StackId': Optional[str],
        'PhysicalResourceId': Optional[str],
        'ResourceStatusReason': Optional[str],
        'Description': Optional[str],
        'StackResourceDriftInformation': Optional[CloudFormationStackResourceDriftInformation],
    }
)


CloudFormationDescribeStackResourcesOutput = TypedDict(
    'CloudFormationDescribeStackResourcesOutput', {
        'StackResources': Optional[List[CloudFormationStackResource]],
    }
)


CloudFormationStackSet = TypedDict(
    'CloudFormationStackSet', {
        'StackSetName': Optional[str],
        'StackSetId': Optional[str],
        'Description': Optional[str],
        'StackSetStatus': Optional[str],
        'TemplateBody': Optional[str],
        'Parameters': Optional[List[CloudFormationParameter]],
        'Capabilities': Optional[List[str]],
        'Tags': Optional[List[CloudFormationTag]],
        'StackSetARN': Optional[str],
        'RoleARN': Optional[str],
        'ExecutionRoleName': Optional[str],
    }
)


CloudFormationDescribeStackSetOutput = TypedDict(
    'CloudFormationDescribeStackSetOutput', {
        'StackSet': Optional[CloudFormationStackSet],
    }
)


CloudFormationStackSetOperation = TypedDict(
    'CloudFormationStackSetOperation', {
        'ClientRequestToken': Optional[str],
        'StackSetId': Optional[str],
        'StackSetOperationAction': Optional[str],
        'StackSetOperationStatus': Optional[str],
        'StackSetOperationPreferences': Optional[CloudFormationStackSetOperationPreferences],
        'RetainStacksNullable': Optional[bool],
        'RoleARN': Optional[str],
        'ExecutionRoleName': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


CloudFormationDescribeStackSetOperationOutput = TypedDict(
    'CloudFormationDescribeStackSetOperationOutput', {
        'StackSetOperation': Optional[CloudFormationStackSetOperation],
    }
)


CloudFormationOutput = TypedDict(
    'CloudFormationOutput', {
        'OutputKey': Optional[str],
        'OutputValue': Optional[str],
        'Description': Optional[str],
        'ExportName': Optional[str],
    }
)


CloudFormationStackDriftInformation = TypedDict(
    'CloudFormationStackDriftInformation', {
        'StackDriftStatus': str,
        'Timestamp': Optional[datetime.datetime],
    }
)


CloudFormationStack = TypedDict(
    'CloudFormationStack', {
        'StackName': str,
        'CreationTime': datetime.datetime,
        'StackStatus': str,
        'StackId': Optional[str],
        'ChangeSetId': Optional[str],
        'Description': Optional[str],
        'Parameters': Optional[List[CloudFormationParameter]],
        'DeletionTime': Optional[datetime.datetime],
        'LastUpdatedTime': Optional[datetime.datetime],
        'RollbackConfiguration': Optional[CloudFormationRollbackConfiguration],
        'StackStatusReason': Optional[str],
        'DisableRollback': Optional[bool],
        'NotificationARNs': Optional[List[str]],
        'TimeoutMinutes': Optional[int],
        'Capabilities': Optional[List[str]],
        'Outputs': Optional[List[CloudFormationOutput]],
        'RoleARN': Optional[str],
        'Tags': Optional[List[CloudFormationTag]],
        'EnableTerminationProtection': Optional[bool],
        'StackId': Optional[str],
        'StackId': Optional[str],
        'StackDriftInformation': Optional[CloudFormationStackDriftInformation],
    }
)


CloudFormationDescribeStacksOutput = TypedDict(
    'CloudFormationDescribeStacksOutput', {
        'Stacks': Optional[List[CloudFormationStack]],
        'NextToken': Optional[str],
    }
)


CloudFormationDetectStackDriftOutput = TypedDict(
    'CloudFormationDetectStackDriftOutput', {
        'StackDriftDetectionId': str,
    }
)


CloudFormationDetectStackResourceDriftOutput = TypedDict(
    'CloudFormationDetectStackResourceDriftOutput', {
        'StackResourceDrift': CloudFormationStackResourceDrift,
    }
)


CloudFormationEstimateTemplateCostOutput = TypedDict(
    'CloudFormationEstimateTemplateCostOutput', {
        'Url': Optional[str],
    }
)


CloudFormationExecuteChangeSetOutput = TypedDict(
    'CloudFormationExecuteChangeSetOutput', {
    }
)


CloudFormationGetStackPolicyOutput = TypedDict(
    'CloudFormationGetStackPolicyOutput', {
        'StackPolicyBody': Optional[str],
    }
)


CloudFormationGetTemplateOutput = TypedDict(
    'CloudFormationGetTemplateOutput', {
        'TemplateBody': Optional[str],
        'StageList': Optional[List[str]],
    }
)


CloudFormationParameterConstraints = TypedDict(
    'CloudFormationParameterConstraints', {
        'AllowedValues': Optional[List[str]],
    }
)


CloudFormationParameterDeclaration = TypedDict(
    'CloudFormationParameterDeclaration', {
        'ParameterKey': Optional[str],
        'ParameterValue': Optional[str],
        'ParameterType': Optional[str],
        'NoEcho': Optional[bool],
        'Description': Optional[str],
        'ParameterConstraints': Optional[CloudFormationParameterConstraints],
    }
)


CloudFormationGetTemplateSummaryOutput = TypedDict(
    'CloudFormationGetTemplateSummaryOutput', {
        'ParameterDeclarations': Optional[List[CloudFormationParameterDeclaration]],
        'Description': Optional[str],
        'Capabilities': Optional[List[str]],
        'CapabilitiesReason': Optional[str],
        'ResourceTypes': Optional[List[str]],
        'Version': Optional[str],
        'Metadata': Optional[str],
        'TransformsList': Optional[List[str]],
    }
)


CloudFormationChangeSetSummary = TypedDict(
    'CloudFormationChangeSetSummary', {
        'StackId': Optional[str],
        'StackName': Optional[str],
        'ChangeSetId': Optional[str],
        'ChangeSetName': Optional[str],
        'ExecutionStatus': Optional[str],
        'ChangeSetStatus': Optional[str],
        'ChangeSetStatusReason': Optional[str],
        'CreationTime': Optional[datetime.datetime],
        'Description': Optional[str],
    }
)


CloudFormationListChangeSetsOutput = TypedDict(
    'CloudFormationListChangeSetsOutput', {
        'ChangeSetSummaries': Optional[List[CloudFormationChangeSetSummary]],
        'NextToken': Optional[str],
    }
)


CloudFormationExport = TypedDict(
    'CloudFormationExport', {
        'StackId': Optional[str],
        'ExportName': Optional[str],
        'ExportValue': Optional[str],
    }
)


CloudFormationListExportsOutput = TypedDict(
    'CloudFormationListExportsOutput', {
        'Exports': Optional[List[CloudFormationExport]],
        'NextToken': Optional[str],
    }
)


CloudFormationListImportsOutput = TypedDict(
    'CloudFormationListImportsOutput', {
        'Imports': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


CloudFormationStackInstanceSummary = TypedDict(
    'CloudFormationStackInstanceSummary', {
        'StackSetId': Optional[str],
        'Region': Optional[str],
        'Account': Optional[str],
        'StackId': Optional[str],
        'StackInstanceStatus': Optional[str],
        'Reason': Optional[str],
    }
)


CloudFormationListStackInstancesOutput = TypedDict(
    'CloudFormationListStackInstancesOutput', {
        'StackInstanceSummaries': Optional[List[CloudFormationStackInstanceSummary]],
        'NextToken': Optional[str],
    }
)


CloudFormationStackResourceDriftInformationSummary = TypedDict(
    'CloudFormationStackResourceDriftInformationSummary', {
        'StackResourceDriftStatus': str,
        'Timestamp': Optional[datetime.datetime],
    }
)


CloudFormationStackResourceSummary = TypedDict(
    'CloudFormationStackResourceSummary', {
        'LogicalResourceId': str,
        'ResourceType': str,
        'Timestamp': datetime.datetime,
        'ResourceStatus': str,
        'PhysicalResourceId': Optional[str],
        'ResourceStatusReason': Optional[str],
        'StackResourceDriftInformationSummary': Optional[CloudFormationStackResourceDriftInformationSummary],
    }
)


CloudFormationListStackResourcesOutput = TypedDict(
    'CloudFormationListStackResourcesOutput', {
        'StackResourceSummaries': Optional[List[CloudFormationStackResourceSummary]],
        'NextToken': Optional[str],
    }
)


CloudFormationAccountGateResult = TypedDict(
    'CloudFormationAccountGateResult', {
        'AccountGateStatus': Optional[str],
        'AccountGateStatusReason': Optional[str],
    }
)


CloudFormationStackSetOperationResultSummary = TypedDict(
    'CloudFormationStackSetOperationResultSummary', {
        'Account': Optional[str],
        'Region': Optional[str],
        'StackSetOperationResultStatus': Optional[str],
        'Reason': Optional[str],
        'AccountGateResult': Optional[CloudFormationAccountGateResult],
    }
)


CloudFormationListStackSetOperationResultsOutput = TypedDict(
    'CloudFormationListStackSetOperationResultsOutput', {
        'StackSetOperationResultSummaries': Optional[List[CloudFormationStackSetOperationResultSummary]],
        'NextToken': Optional[str],
    }
)


CloudFormationStackSetOperationSummary = TypedDict(
    'CloudFormationStackSetOperationSummary', {
        'ClientRequestToken': Optional[str],
        'StackSetOperationAction': Optional[str],
        'StackSetOperationStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


CloudFormationListStackSetOperationsOutput = TypedDict(
    'CloudFormationListStackSetOperationsOutput', {
        'StackSetOperationSummaries': Optional[List[CloudFormationStackSetOperationSummary]],
        'NextToken': Optional[str],
    }
)


CloudFormationStackSetSummary = TypedDict(
    'CloudFormationStackSetSummary', {
        'StackSetName': Optional[str],
        'StackSetId': Optional[str],
        'Description': Optional[str],
        'StackSetStatus': Optional[str],
    }
)


CloudFormationListStackSetsOutput = TypedDict(
    'CloudFormationListStackSetsOutput', {
        'StackSetSummaries': Optional[List[CloudFormationStackSetSummary]],
        'NextToken': Optional[str],
    }
)


CloudFormationStackDriftInformationSummary = TypedDict(
    'CloudFormationStackDriftInformationSummary', {
        'StackDriftStatus': str,
        'Timestamp': Optional[datetime.datetime],
    }
)


CloudFormationStackSummary = TypedDict(
    'CloudFormationStackSummary', {
        'StackName': str,
        'CreationTime': datetime.datetime,
        'StackStatus': str,
        'StackId': Optional[str],
        'TemplateDescription': Optional[str],
        'LastUpdatedTime': Optional[datetime.datetime],
        'DeletionTime': Optional[datetime.datetime],
        'StackStatusReason': Optional[str],
        'StackId': Optional[str],
        'StackId': Optional[str],
        'StackDriftInformationSummary': Optional[CloudFormationStackDriftInformationSummary],
    }
)


CloudFormationListStacksOutput = TypedDict(
    'CloudFormationListStacksOutput', {
        'StackSummaries': Optional[List[CloudFormationStackSummary]],
        'NextToken': Optional[str],
    }
)


CloudFormationStopStackSetOperationOutput = TypedDict(
    'CloudFormationStopStackSetOperationOutput', {
    }
)


CloudFormationUpdateStackOutput = TypedDict(
    'CloudFormationUpdateStackOutput', {
        'StackId': Optional[str],
    }
)


CloudFormationUpdateStackInstancesOutput = TypedDict(
    'CloudFormationUpdateStackInstancesOutput', {
        'ClientRequestToken': Optional[str],
    }
)


CloudFormationUpdateStackSetOutput = TypedDict(
    'CloudFormationUpdateStackSetOutput', {
        'ClientRequestToken': Optional[str],
    }
)


CloudFormationUpdateTerminationProtectionOutput = TypedDict(
    'CloudFormationUpdateTerminationProtectionOutput', {
        'StackId': Optional[str],
    }
)


CloudFormationTemplateParameter = TypedDict(
    'CloudFormationTemplateParameter', {
        'ParameterKey': Optional[str],
        'ParameterValue': Optional[str],
        'NoEcho': Optional[bool],
        'Description': Optional[str],
    }
)


CloudFormationValidateTemplateOutput = TypedDict(
    'CloudFormationValidateTemplateOutput', {
        'TemplateParameters': Optional[List[CloudFormationTemplateParameter]],
        'Description': Optional[str],
        'Capabilities': Optional[List[str]],
        'CapabilitiesReason': Optional[str],
        'TransformsList': Optional[List[str]],
    }
)


class CloudFront(BaseClient):
    def create_cloud_front_origin_access_identity(self, *,
        CloudFrontOriginAccessIdentityConfig: CloudFrontCloudFrontOriginAccessIdentityConfig
    ) -> CloudFrontCreateCloudFrontOriginAccessIdentityResult: ...

    def create_distribution(self, *,
        DistributionConfig: CloudFrontDistributionConfig
    ) -> CloudFrontCreateDistributionResult: ...

    def create_distribution_with_tags(self, *,
        DistributionConfigWithTags: CloudFrontDistributionConfigWithTags
    ) -> CloudFrontCreateDistributionWithTagsResult: ...

    def create_field_level_encryption_config(self, *,
        FieldLevelEncryptionConfig: CloudFrontFieldLevelEncryptionConfig
    ) -> CloudFrontCreateFieldLevelEncryptionConfigResult: ...

    def create_field_level_encryption_profile(self, *,
        FieldLevelEncryptionProfileConfig: CloudFrontFieldLevelEncryptionProfileConfig
    ) -> CloudFrontCreateFieldLevelEncryptionProfileResult: ...

    def create_invalidation(self, *,
        DistributionId: str,
        InvalidationBatch: CloudFrontInvalidationBatch
    ) -> CloudFrontCreateInvalidationResult: ...

    def create_public_key(self, *,
        PublicKeyConfig: CloudFrontPublicKeyConfig
    ) -> CloudFrontCreatePublicKeyResult: ...

    def create_streaming_distribution(self, *,
        StreamingDistributionConfig: CloudFrontStreamingDistributionConfig
    ) -> CloudFrontCreateStreamingDistributionResult: ...

    def create_streaming_distribution_with_tags(self, *,
        StreamingDistributionConfigWithTags: CloudFrontStreamingDistributionConfigWithTags
    ) -> CloudFrontCreateStreamingDistributionWithTagsResult: ...

    def delete_cloud_front_origin_access_identity(self, *,
        Id: str,
        IfMatch: str = ...
    ): ...

    def delete_distribution(self, *,
        Id: str,
        IfMatch: str = ...
    ): ...

    def delete_field_level_encryption_config(self, *,
        Id: str,
        IfMatch: str = ...
    ): ...

    def delete_field_level_encryption_profile(self, *,
        Id: str,
        IfMatch: str = ...
    ): ...

    def delete_public_key(self, *,
        Id: str,
        IfMatch: str = ...
    ): ...

    def delete_streaming_distribution(self, *,
        Id: str,
        IfMatch: str = ...
    ): ...

    def get_cloud_front_origin_access_identity(self, *,
        Id: str
    ) -> CloudFrontGetCloudFrontOriginAccessIdentityResult: ...

    def get_cloud_front_origin_access_identity_config(self, *,
        Id: str
    ) -> CloudFrontGetCloudFrontOriginAccessIdentityConfigResult: ...

    def get_distribution(self, *,
        Id: str
    ) -> CloudFrontGetDistributionResult: ...

    def get_distribution_config(self, *,
        Id: str
    ) -> CloudFrontGetDistributionConfigResult: ...

    def get_field_level_encryption(self, *,
        Id: str
    ) -> CloudFrontGetFieldLevelEncryptionResult: ...

    def get_field_level_encryption_config(self, *,
        Id: str
    ) -> CloudFrontGetFieldLevelEncryptionConfigResult: ...

    def get_field_level_encryption_profile(self, *,
        Id: str
    ) -> CloudFrontGetFieldLevelEncryptionProfileResult: ...

    def get_field_level_encryption_profile_config(self, *,
        Id: str
    ) -> CloudFrontGetFieldLevelEncryptionProfileConfigResult: ...

    def get_invalidation(self, *,
        DistributionId: str,
        Id: str
    ) -> CloudFrontGetInvalidationResult: ...

    def get_public_key(self, *,
        Id: str
    ) -> CloudFrontGetPublicKeyResult: ...

    def get_public_key_config(self, *,
        Id: str
    ) -> CloudFrontGetPublicKeyConfigResult: ...

    def get_streaming_distribution(self, *,
        Id: str
    ) -> CloudFrontGetStreamingDistributionResult: ...

    def get_streaming_distribution_config(self, *,
        Id: str
    ) -> CloudFrontGetStreamingDistributionConfigResult: ...

    def list_cloud_front_origin_access_identities(self, *,
        Marker: str = ...,
        MaxItems: str = ...
    ) -> CloudFrontListCloudFrontOriginAccessIdentitiesResult: ...

    def list_distributions(self, *,
        Marker: str = ...,
        MaxItems: str = ...
    ) -> CloudFrontListDistributionsResult: ...

    def list_distributions_by_web_acl_id(self, *,
        WebACLId: str,
        Marker: str = ...,
        MaxItems: str = ...
    ) -> CloudFrontListDistributionsByWebACLIdResult: ...

    def list_field_level_encryption_configs(self, *,
        Marker: str = ...,
        MaxItems: str = ...
    ) -> CloudFrontListFieldLevelEncryptionConfigsResult: ...

    def list_field_level_encryption_profiles(self, *,
        Marker: str = ...,
        MaxItems: str = ...
    ) -> CloudFrontListFieldLevelEncryptionProfilesResult: ...

    def list_invalidations(self, *,
        DistributionId: str,
        Marker: str = ...,
        MaxItems: str = ...
    ) -> CloudFrontListInvalidationsResult: ...

    def list_public_keys(self, *,
        Marker: str = ...,
        MaxItems: str = ...
    ) -> CloudFrontListPublicKeysResult: ...

    def list_streaming_distributions(self, *,
        Marker: str = ...,
        MaxItems: str = ...
    ) -> CloudFrontListStreamingDistributionsResult: ...

    def list_tags_for_resource(self, *,
        Resource: str
    ) -> CloudFrontListTagsForResourceResult: ...

    def tag_resource(self, *,
        Resource: str,
        Tags: CloudFrontTags
    ): ...

    def untag_resource(self, *,
        Resource: str,
        TagKeys: CloudFrontTagKeys
    ): ...

    def update_cloud_front_origin_access_identity(self, *,
        CloudFrontOriginAccessIdentityConfig: CloudFrontCloudFrontOriginAccessIdentityConfig,
        Id: str,
        IfMatch: str = ...
    ) -> CloudFrontUpdateCloudFrontOriginAccessIdentityResult: ...

    def update_distribution(self, *,
        DistributionConfig: CloudFrontDistributionConfig,
        Id: str,
        IfMatch: str = ...
    ) -> CloudFrontUpdateDistributionResult: ...

    def update_field_level_encryption_config(self, *,
        FieldLevelEncryptionConfig: CloudFrontFieldLevelEncryptionConfig,
        Id: str,
        IfMatch: str = ...
    ) -> CloudFrontUpdateFieldLevelEncryptionConfigResult: ...

    def update_field_level_encryption_profile(self, *,
        FieldLevelEncryptionProfileConfig: CloudFrontFieldLevelEncryptionProfileConfig,
        Id: str,
        IfMatch: str = ...
    ) -> CloudFrontUpdateFieldLevelEncryptionProfileResult: ...

    def update_public_key(self, *,
        PublicKeyConfig: CloudFrontPublicKeyConfig,
        Id: str,
        IfMatch: str = ...
    ) -> CloudFrontUpdatePublicKeyResult: ...

    def update_streaming_distribution(self, *,
        StreamingDistributionConfig: CloudFrontStreamingDistributionConfig,
        Id: str,
        IfMatch: str = ...
    ) -> CloudFrontUpdateStreamingDistributionResult: ...


CloudFrontCloudFrontOriginAccessIdentityConfig = TypedDict(
    'CloudFrontCloudFrontOriginAccessIdentityConfig', {
        'string': str,
        'string': str,
    }
)


CloudFrontCloudFrontOriginAccessIdentity = TypedDict(
    'CloudFrontCloudFrontOriginAccessIdentity', {
        'string': str,
        'string': str,
        'CloudFrontOriginAccessIdentityConfig': Optional[CloudFrontCloudFrontOriginAccessIdentityConfig],
    }
)


CloudFrontCreateCloudFrontOriginAccessIdentityResult = TypedDict(
    'CloudFrontCreateCloudFrontOriginAccessIdentityResult', {
        'CloudFrontOriginAccessIdentity': Optional[CloudFrontCloudFrontOriginAccessIdentity],
        'string': Optional[str],
        'string': Optional[str],
    }
)


CloudFrontAliases = TypedDict(
    'CloudFrontAliases', {
        'integer': int,
        'AliasList': Optional[List[str]],
    }
)


CloudFrontOriginCustomHeader = TypedDict(
    'CloudFrontOriginCustomHeader', {
        'string': str,
        'string': str,
    }
)


CloudFrontCustomHeaders = TypedDict(
    'CloudFrontCustomHeaders', {
        'integer': int,
        'OriginCustomHeadersList': Optional[List[CloudFrontOriginCustomHeader]],
    }
)


CloudFrontS3OriginConfig = TypedDict(
    'CloudFrontS3OriginConfig', {
        'string': str,
    }
)


CloudFrontOriginSslProtocols = TypedDict(
    'CloudFrontOriginSslProtocols', {
        'integer': int,
        'SslProtocolsList': List[str],
    }
)


CloudFrontCustomOriginConfig = TypedDict(
    'CloudFrontCustomOriginConfig', {
        'integer': int,
        'integer': int,
        'OriginProtocolPolicy': str,
        'OriginSslProtocols': Optional[CloudFrontOriginSslProtocols],
        'integer': Optional[int],
        'integer': Optional[int],
    }
)


CloudFrontOrigin = TypedDict(
    'CloudFrontOrigin', {
        'string': str,
        'string': str,
        'string': Optional[str],
        'CustomHeaders': Optional[CloudFrontCustomHeaders],
        'S3OriginConfig': Optional[CloudFrontS3OriginConfig],
        'CustomOriginConfig': Optional[CloudFrontCustomOriginConfig],
    }
)


CloudFrontOrigins = TypedDict(
    'CloudFrontOrigins', {
        'integer': int,
        'OriginList': List[CloudFrontOrigin],
    }
)


CloudFrontStatusCodes = TypedDict(
    'CloudFrontStatusCodes', {
        'integer': int,
        'StatusCodeList': List[int],
    }
)


CloudFrontOriginGroupFailoverCriteria = TypedDict(
    'CloudFrontOriginGroupFailoverCriteria', {
        'StatusCodes': CloudFrontStatusCodes,
    }
)


CloudFrontOriginGroupMember = TypedDict(
    'CloudFrontOriginGroupMember', {
        'string': str,
    }
)


CloudFrontOriginGroupMembers = TypedDict(
    'CloudFrontOriginGroupMembers', {
        'integer': int,
        'OriginGroupMemberList': List[CloudFrontOriginGroupMember],
    }
)


CloudFrontOriginGroup = TypedDict(
    'CloudFrontOriginGroup', {
        'string': str,
        'OriginGroupFailoverCriteria': CloudFrontOriginGroupFailoverCriteria,
        'OriginGroupMembers': CloudFrontOriginGroupMembers,
    }
)


CloudFrontOriginGroups = TypedDict(
    'CloudFrontOriginGroups', {
        'integer': int,
        'OriginGroupList': Optional[List[CloudFrontOriginGroup]],
    }
)


CloudFrontCookieNames = TypedDict(
    'CloudFrontCookieNames', {
        'integer': int,
        'CookieNameList': Optional[List[str]],
    }
)


CloudFrontCookiePreference = TypedDict(
    'CloudFrontCookiePreference', {
        'ItemSelection': str,
        'CookieNames': Optional[CloudFrontCookieNames],
    }
)


CloudFrontHeaders = TypedDict(
    'CloudFrontHeaders', {
        'integer': int,
        'HeaderList': Optional[List[str]],
    }
)


CloudFrontQueryStringCacheKeys = TypedDict(
    'CloudFrontQueryStringCacheKeys', {
        'integer': int,
        'QueryStringCacheKeysList': Optional[List[str]],
    }
)


CloudFrontForwardedValues = TypedDict(
    'CloudFrontForwardedValues', {
        'boolean': bool,
        'CookiePreference': CloudFrontCookiePreference,
        'Headers': Optional[CloudFrontHeaders],
        'QueryStringCacheKeys': Optional[CloudFrontQueryStringCacheKeys],
    }
)


CloudFrontTrustedSigners = TypedDict(
    'CloudFrontTrustedSigners', {
        'boolean': bool,
        'integer': int,
        'AwsAccountNumberList': Optional[List[str]],
    }
)


CloudFrontCachedMethods = TypedDict(
    'CloudFrontCachedMethods', {
        'integer': int,
        'MethodsList': List[str],
    }
)


CloudFrontAllowedMethods = TypedDict(
    'CloudFrontAllowedMethods', {
        'integer': int,
        'MethodsList': List[str],
        'CachedMethods': Optional[CloudFrontCachedMethods],
    }
)


CloudFrontLambdaFunctionAssociation = TypedDict(
    'CloudFrontLambdaFunctionAssociation', {
        'LambdaFunctionARN': str,
        'EventType': str,
        'boolean': Optional[bool],
    }
)


CloudFrontLambdaFunctionAssociations = TypedDict(
    'CloudFrontLambdaFunctionAssociations', {
        'integer': int,
        'LambdaFunctionAssociationList': Optional[List[CloudFrontLambdaFunctionAssociation]],
    }
)


CloudFrontDefaultCacheBehavior = TypedDict(
    'CloudFrontDefaultCacheBehavior', {
        'string': str,
        'ForwardedValues': CloudFrontForwardedValues,
        'TrustedSigners': CloudFrontTrustedSigners,
        'ViewerProtocolPolicy': str,
        'long': int,
        'AllowedMethods': Optional[CloudFrontAllowedMethods],
        'boolean': Optional[bool],
        'long': Optional[int],
        'long': Optional[int],
        'boolean': Optional[bool],
        'LambdaFunctionAssociations': Optional[CloudFrontLambdaFunctionAssociations],
        'string': Optional[str],
    }
)


CloudFrontCacheBehavior = TypedDict(
    'CloudFrontCacheBehavior', {
        'string': str,
        'string': str,
        'ForwardedValues': CloudFrontForwardedValues,
        'TrustedSigners': CloudFrontTrustedSigners,
        'ViewerProtocolPolicy': str,
        'long': int,
        'AllowedMethods': Optional[CloudFrontAllowedMethods],
        'boolean': Optional[bool],
        'long': Optional[int],
        'long': Optional[int],
        'boolean': Optional[bool],
        'LambdaFunctionAssociations': Optional[CloudFrontLambdaFunctionAssociations],
        'string': Optional[str],
    }
)


CloudFrontCacheBehaviors = TypedDict(
    'CloudFrontCacheBehaviors', {
        'integer': int,
        'CacheBehaviorList': Optional[List[CloudFrontCacheBehavior]],
    }
)


CloudFrontCustomErrorResponse = TypedDict(
    'CloudFrontCustomErrorResponse', {
        'integer': int,
        'string': Optional[str],
        'string': Optional[str],
        'long': Optional[int],
    }
)


CloudFrontCustomErrorResponses = TypedDict(
    'CloudFrontCustomErrorResponses', {
        'integer': int,
        'CustomErrorResponseList': Optional[List[CloudFrontCustomErrorResponse]],
    }
)


CloudFrontLoggingConfig = TypedDict(
    'CloudFrontLoggingConfig', {
        'boolean': bool,
        'boolean': bool,
        'string': str,
        'string': str,
    }
)


CloudFrontViewerCertificate = TypedDict(
    'CloudFrontViewerCertificate', {
        'boolean': Optional[bool],
        'string': Optional[str],
        'string': Optional[str],
        'SSLSupportMethod': Optional[str],
        'MinimumProtocolVersion': Optional[str],
        'string': Optional[str],
        'CertificateSource': Optional[str],
    }
)


CloudFrontGeoRestriction = TypedDict(
    'CloudFrontGeoRestriction', {
        'GeoRestrictionType': str,
        'integer': int,
        'LocationList': Optional[List[str]],
    }
)


CloudFrontRestrictions = TypedDict(
    'CloudFrontRestrictions', {
        'GeoRestriction': CloudFrontGeoRestriction,
    }
)


CloudFrontDistributionConfig = TypedDict(
    'CloudFrontDistributionConfig', {
        'string': str,
        'Origins': CloudFrontOrigins,
        'DefaultCacheBehavior': CloudFrontDefaultCacheBehavior,
        'string': str,
        'boolean': bool,
        'Aliases': Optional[CloudFrontAliases],
        'string': Optional[str],
        'OriginGroups': Optional[CloudFrontOriginGroups],
        'CacheBehaviors': Optional[CloudFrontCacheBehaviors],
        'CustomErrorResponses': Optional[CloudFrontCustomErrorResponses],
        'LoggingConfig': Optional[CloudFrontLoggingConfig],
        'PriceClass': Optional[str],
        'ViewerCertificate': Optional[CloudFrontViewerCertificate],
        'Restrictions': Optional[CloudFrontRestrictions],
        'string': Optional[str],
        'HttpVersion': Optional[str],
        'boolean': Optional[bool],
    }
)


CloudFrontKeyPairIds = TypedDict(
    'CloudFrontKeyPairIds', {
        'integer': int,
        'KeyPairIdList': Optional[List[str]],
    }
)


CloudFrontSigner = TypedDict(
    'CloudFrontSigner', {
        'string': Optional[str],
        'KeyPairIds': Optional[CloudFrontKeyPairIds],
    }
)


CloudFrontActiveTrustedSigners = TypedDict(
    'CloudFrontActiveTrustedSigners', {
        'boolean': bool,
        'integer': int,
        'SignerList': Optional[List[CloudFrontSigner]],
    }
)


CloudFrontDistribution = TypedDict(
    'CloudFrontDistribution', {
        'string': str,
        'string': str,
        'string': str,
        'timestamp': datetime.datetime,
        'integer': int,
        'string': str,
        'ActiveTrustedSigners': CloudFrontActiveTrustedSigners,
        'DistributionConfig': CloudFrontDistributionConfig,
    }
)


CloudFrontCreateDistributionResult = TypedDict(
    'CloudFrontCreateDistributionResult', {
        'Distribution': Optional[CloudFrontDistribution],
        'string': Optional[str],
        'string': Optional[str],
    }
)


CloudFrontTag = TypedDict(
    'CloudFrontTag', {
        'TagKey': str,
        'TagValue': Optional[str],
    }
)


CloudFrontTags = TypedDict(
    'CloudFrontTags', {
        'TagList': Optional[List[CloudFrontTag]],
    }
)


CloudFrontDistributionConfigWithTags = TypedDict(
    'CloudFrontDistributionConfigWithTags', {
        'DistributionConfig': CloudFrontDistributionConfig,
        'Tags': CloudFrontTags,
    }
)


CloudFrontCreateDistributionWithTagsResult = TypedDict(
    'CloudFrontCreateDistributionWithTagsResult', {
        'Distribution': Optional[CloudFrontDistribution],
        'string': Optional[str],
        'string': Optional[str],
    }
)


CloudFrontQueryArgProfile = TypedDict(
    'CloudFrontQueryArgProfile', {
        'string': str,
        'string': str,
    }
)


CloudFrontQueryArgProfiles = TypedDict(
    'CloudFrontQueryArgProfiles', {
        'integer': int,
        'QueryArgProfileList': Optional[List[CloudFrontQueryArgProfile]],
    }
)


CloudFrontQueryArgProfileConfig = TypedDict(
    'CloudFrontQueryArgProfileConfig', {
        'boolean': bool,
        'QueryArgProfiles': Optional[CloudFrontQueryArgProfiles],
    }
)


CloudFrontContentTypeProfile = TypedDict(
    'CloudFrontContentTypeProfile', {
        'Format': str,
        'string': str,
        'string': Optional[str],
    }
)


CloudFrontContentTypeProfiles = TypedDict(
    'CloudFrontContentTypeProfiles', {
        'integer': int,
        'ContentTypeProfileList': Optional[List[CloudFrontContentTypeProfile]],
    }
)


CloudFrontContentTypeProfileConfig = TypedDict(
    'CloudFrontContentTypeProfileConfig', {
        'boolean': bool,
        'ContentTypeProfiles': Optional[CloudFrontContentTypeProfiles],
    }
)


CloudFrontFieldLevelEncryptionConfig = TypedDict(
    'CloudFrontFieldLevelEncryptionConfig', {
        'string': str,
        'string': Optional[str],
        'QueryArgProfileConfig': Optional[CloudFrontQueryArgProfileConfig],
        'ContentTypeProfileConfig': Optional[CloudFrontContentTypeProfileConfig],
    }
)


CloudFrontFieldLevelEncryption = TypedDict(
    'CloudFrontFieldLevelEncryption', {
        'string': str,
        'timestamp': datetime.datetime,
        'FieldLevelEncryptionConfig': CloudFrontFieldLevelEncryptionConfig,
    }
)


CloudFrontCreateFieldLevelEncryptionConfigResult = TypedDict(
    'CloudFrontCreateFieldLevelEncryptionConfigResult', {
        'FieldLevelEncryption': Optional[CloudFrontFieldLevelEncryption],
        'string': Optional[str],
        'string': Optional[str],
    }
)


CloudFrontFieldPatterns = TypedDict(
    'CloudFrontFieldPatterns', {
        'integer': int,
        'FieldPatternList': Optional[List[str]],
    }
)


CloudFrontEncryptionEntity = TypedDict(
    'CloudFrontEncryptionEntity', {
        'string': str,
        'string': str,
        'FieldPatterns': CloudFrontFieldPatterns,
    }
)


CloudFrontEncryptionEntities = TypedDict(
    'CloudFrontEncryptionEntities', {
        'integer': int,
        'EncryptionEntityList': Optional[List[CloudFrontEncryptionEntity]],
    }
)


CloudFrontFieldLevelEncryptionProfileConfig = TypedDict(
    'CloudFrontFieldLevelEncryptionProfileConfig', {
        'string': str,
        'string': str,
        'EncryptionEntities': CloudFrontEncryptionEntities,
        'string': Optional[str],
    }
)


CloudFrontFieldLevelEncryptionProfile = TypedDict(
    'CloudFrontFieldLevelEncryptionProfile', {
        'string': str,
        'timestamp': datetime.datetime,
        'FieldLevelEncryptionProfileConfig': CloudFrontFieldLevelEncryptionProfileConfig,
    }
)


CloudFrontCreateFieldLevelEncryptionProfileResult = TypedDict(
    'CloudFrontCreateFieldLevelEncryptionProfileResult', {
        'FieldLevelEncryptionProfile': Optional[CloudFrontFieldLevelEncryptionProfile],
        'string': Optional[str],
        'string': Optional[str],
    }
)


CloudFrontPaths = TypedDict(
    'CloudFrontPaths', {
        'integer': int,
        'PathList': Optional[List[str]],
    }
)


CloudFrontInvalidationBatch = TypedDict(
    'CloudFrontInvalidationBatch', {
        'Paths': CloudFrontPaths,
        'string': str,
    }
)


CloudFrontInvalidation = TypedDict(
    'CloudFrontInvalidation', {
        'string': str,
        'string': str,
        'timestamp': datetime.datetime,
        'InvalidationBatch': CloudFrontInvalidationBatch,
    }
)


CloudFrontCreateInvalidationResult = TypedDict(
    'CloudFrontCreateInvalidationResult', {
        'string': Optional[str],
        'Invalidation': Optional[CloudFrontInvalidation],
    }
)


CloudFrontPublicKeyConfig = TypedDict(
    'CloudFrontPublicKeyConfig', {
        'string': str,
        'string': str,
        'string': str,
        'string': Optional[str],
    }
)


CloudFrontPublicKey = TypedDict(
    'CloudFrontPublicKey', {
        'string': str,
        'timestamp': datetime.datetime,
        'PublicKeyConfig': CloudFrontPublicKeyConfig,
    }
)


CloudFrontCreatePublicKeyResult = TypedDict(
    'CloudFrontCreatePublicKeyResult', {
        'PublicKey': Optional[CloudFrontPublicKey],
        'string': Optional[str],
        'string': Optional[str],
    }
)


CloudFrontS3Origin = TypedDict(
    'CloudFrontS3Origin', {
        'string': str,
        'string': str,
    }
)


CloudFrontStreamingLoggingConfig = TypedDict(
    'CloudFrontStreamingLoggingConfig', {
        'boolean': bool,
        'string': str,
        'string': str,
    }
)


CloudFrontStreamingDistributionConfig = TypedDict(
    'CloudFrontStreamingDistributionConfig', {
        'string': str,
        'S3Origin': CloudFrontS3Origin,
        'string': str,
        'TrustedSigners': CloudFrontTrustedSigners,
        'boolean': bool,
        'Aliases': Optional[CloudFrontAliases],
        'StreamingLoggingConfig': Optional[CloudFrontStreamingLoggingConfig],
        'PriceClass': Optional[str],
    }
)


CloudFrontStreamingDistribution = TypedDict(
    'CloudFrontStreamingDistribution', {
        'string': str,
        'string': str,
        'string': str,
        'string': str,
        'ActiveTrustedSigners': CloudFrontActiveTrustedSigners,
        'StreamingDistributionConfig': CloudFrontStreamingDistributionConfig,
        'timestamp': Optional[datetime.datetime],
    }
)


CloudFrontCreateStreamingDistributionResult = TypedDict(
    'CloudFrontCreateStreamingDistributionResult', {
        'StreamingDistribution': Optional[CloudFrontStreamingDistribution],
        'string': Optional[str],
        'string': Optional[str],
    }
)


CloudFrontStreamingDistributionConfigWithTags = TypedDict(
    'CloudFrontStreamingDistributionConfigWithTags', {
        'StreamingDistributionConfig': CloudFrontStreamingDistributionConfig,
        'Tags': CloudFrontTags,
    }
)


CloudFrontCreateStreamingDistributionWithTagsResult = TypedDict(
    'CloudFrontCreateStreamingDistributionWithTagsResult', {
        'StreamingDistribution': Optional[CloudFrontStreamingDistribution],
        'string': Optional[str],
        'string': Optional[str],
    }
)


CloudFrontGetCloudFrontOriginAccessIdentityResult = TypedDict(
    'CloudFrontGetCloudFrontOriginAccessIdentityResult', {
        'CloudFrontOriginAccessIdentity': Optional[CloudFrontCloudFrontOriginAccessIdentity],
        'string': Optional[str],
    }
)


CloudFrontGetCloudFrontOriginAccessIdentityConfigResult = TypedDict(
    'CloudFrontGetCloudFrontOriginAccessIdentityConfigResult', {
        'CloudFrontOriginAccessIdentityConfig': Optional[CloudFrontCloudFrontOriginAccessIdentityConfig],
        'string': Optional[str],
    }
)


CloudFrontGetDistributionResult = TypedDict(
    'CloudFrontGetDistributionResult', {
        'Distribution': Optional[CloudFrontDistribution],
        'string': Optional[str],
    }
)


CloudFrontGetDistributionConfigResult = TypedDict(
    'CloudFrontGetDistributionConfigResult', {
        'DistributionConfig': Optional[CloudFrontDistributionConfig],
        'string': Optional[str],
    }
)


CloudFrontGetFieldLevelEncryptionResult = TypedDict(
    'CloudFrontGetFieldLevelEncryptionResult', {
        'FieldLevelEncryption': Optional[CloudFrontFieldLevelEncryption],
        'string': Optional[str],
    }
)


CloudFrontGetFieldLevelEncryptionConfigResult = TypedDict(
    'CloudFrontGetFieldLevelEncryptionConfigResult', {
        'FieldLevelEncryptionConfig': Optional[CloudFrontFieldLevelEncryptionConfig],
        'string': Optional[str],
    }
)


CloudFrontGetFieldLevelEncryptionProfileResult = TypedDict(
    'CloudFrontGetFieldLevelEncryptionProfileResult', {
        'FieldLevelEncryptionProfile': Optional[CloudFrontFieldLevelEncryptionProfile],
        'string': Optional[str],
    }
)


CloudFrontGetFieldLevelEncryptionProfileConfigResult = TypedDict(
    'CloudFrontGetFieldLevelEncryptionProfileConfigResult', {
        'FieldLevelEncryptionProfileConfig': Optional[CloudFrontFieldLevelEncryptionProfileConfig],
        'string': Optional[str],
    }
)


CloudFrontGetInvalidationResult = TypedDict(
    'CloudFrontGetInvalidationResult', {
        'Invalidation': Optional[CloudFrontInvalidation],
    }
)


CloudFrontGetPublicKeyResult = TypedDict(
    'CloudFrontGetPublicKeyResult', {
        'PublicKey': Optional[CloudFrontPublicKey],
        'string': Optional[str],
    }
)


CloudFrontGetPublicKeyConfigResult = TypedDict(
    'CloudFrontGetPublicKeyConfigResult', {
        'PublicKeyConfig': Optional[CloudFrontPublicKeyConfig],
        'string': Optional[str],
    }
)


CloudFrontGetStreamingDistributionResult = TypedDict(
    'CloudFrontGetStreamingDistributionResult', {
        'StreamingDistribution': Optional[CloudFrontStreamingDistribution],
        'string': Optional[str],
    }
)


CloudFrontGetStreamingDistributionConfigResult = TypedDict(
    'CloudFrontGetStreamingDistributionConfigResult', {
        'StreamingDistributionConfig': Optional[CloudFrontStreamingDistributionConfig],
        'string': Optional[str],
    }
)


CloudFrontCloudFrontOriginAccessIdentitySummary = TypedDict(
    'CloudFrontCloudFrontOriginAccessIdentitySummary', {
        'string': str,
        'string': str,
        'string': str,
    }
)


CloudFrontCloudFrontOriginAccessIdentityList = TypedDict(
    'CloudFrontCloudFrontOriginAccessIdentityList', {
        'string': str,
        'integer': int,
        'boolean': bool,
        'integer': int,
        'string': Optional[str],
        'CloudFrontOriginAccessIdentitySummaryList': Optional[List[CloudFrontCloudFrontOriginAccessIdentitySummary]],
    }
)


CloudFrontListCloudFrontOriginAccessIdentitiesResult = TypedDict(
    'CloudFrontListCloudFrontOriginAccessIdentitiesResult', {
        'CloudFrontOriginAccessIdentityList': Optional[CloudFrontCloudFrontOriginAccessIdentityList],
    }
)


CloudFrontDistributionSummary = TypedDict(
    'CloudFrontDistributionSummary', {
        'string': str,
        'string': str,
        'string': str,
        'timestamp': datetime.datetime,
        'string': str,
        'Aliases': CloudFrontAliases,
        'Origins': CloudFrontOrigins,
        'DefaultCacheBehavior': CloudFrontDefaultCacheBehavior,
        'CacheBehaviors': CloudFrontCacheBehaviors,
        'CustomErrorResponses': CloudFrontCustomErrorResponses,
        'string': str,
        'PriceClass': str,
        'boolean': bool,
        'ViewerCertificate': CloudFrontViewerCertificate,
        'Restrictions': CloudFrontRestrictions,
        'string': str,
        'HttpVersion': str,
        'boolean': bool,
        'OriginGroups': Optional[CloudFrontOriginGroups],
    }
)


CloudFrontDistributionList = TypedDict(
    'CloudFrontDistributionList', {
        'string': str,
        'integer': int,
        'boolean': bool,
        'integer': int,
        'string': Optional[str],
        'DistributionSummaryList': Optional[List[CloudFrontDistributionSummary]],
    }
)


CloudFrontListDistributionsResult = TypedDict(
    'CloudFrontListDistributionsResult', {
        'DistributionList': Optional[CloudFrontDistributionList],
    }
)


CloudFrontListDistributionsByWebACLIdResult = TypedDict(
    'CloudFrontListDistributionsByWebACLIdResult', {
        'DistributionList': Optional[CloudFrontDistributionList],
    }
)


CloudFrontFieldLevelEncryptionSummary = TypedDict(
    'CloudFrontFieldLevelEncryptionSummary', {
        'string': str,
        'timestamp': datetime.datetime,
        'string': Optional[str],
        'QueryArgProfileConfig': Optional[CloudFrontQueryArgProfileConfig],
        'ContentTypeProfileConfig': Optional[CloudFrontContentTypeProfileConfig],
    }
)


CloudFrontFieldLevelEncryptionList = TypedDict(
    'CloudFrontFieldLevelEncryptionList', {
        'integer': int,
        'integer': int,
        'string': Optional[str],
        'FieldLevelEncryptionSummaryList': Optional[List[CloudFrontFieldLevelEncryptionSummary]],
    }
)


CloudFrontListFieldLevelEncryptionConfigsResult = TypedDict(
    'CloudFrontListFieldLevelEncryptionConfigsResult', {
        'FieldLevelEncryptionList': Optional[CloudFrontFieldLevelEncryptionList],
    }
)


CloudFrontFieldLevelEncryptionProfileSummary = TypedDict(
    'CloudFrontFieldLevelEncryptionProfileSummary', {
        'string': str,
        'timestamp': datetime.datetime,
        'string': str,
        'EncryptionEntities': CloudFrontEncryptionEntities,
        'string': Optional[str],
    }
)


CloudFrontFieldLevelEncryptionProfileList = TypedDict(
    'CloudFrontFieldLevelEncryptionProfileList', {
        'integer': int,
        'integer': int,
        'string': Optional[str],
        'FieldLevelEncryptionProfileSummaryList': Optional[List[CloudFrontFieldLevelEncryptionProfileSummary]],
    }
)


CloudFrontListFieldLevelEncryptionProfilesResult = TypedDict(
    'CloudFrontListFieldLevelEncryptionProfilesResult', {
        'FieldLevelEncryptionProfileList': Optional[CloudFrontFieldLevelEncryptionProfileList],
    }
)


CloudFrontInvalidationSummary = TypedDict(
    'CloudFrontInvalidationSummary', {
        'string': str,
        'timestamp': datetime.datetime,
        'string': str,
    }
)


CloudFrontInvalidationList = TypedDict(
    'CloudFrontInvalidationList', {
        'string': str,
        'integer': int,
        'boolean': bool,
        'integer': int,
        'string': Optional[str],
        'InvalidationSummaryList': Optional[List[CloudFrontInvalidationSummary]],
    }
)


CloudFrontListInvalidationsResult = TypedDict(
    'CloudFrontListInvalidationsResult', {
        'InvalidationList': Optional[CloudFrontInvalidationList],
    }
)


CloudFrontPublicKeySummary = TypedDict(
    'CloudFrontPublicKeySummary', {
        'string': str,
        'string': str,
        'timestamp': datetime.datetime,
        'string': str,
        'string': Optional[str],
    }
)


CloudFrontPublicKeyList = TypedDict(
    'CloudFrontPublicKeyList', {
        'integer': int,
        'integer': int,
        'string': Optional[str],
        'PublicKeySummaryList': Optional[List[CloudFrontPublicKeySummary]],
    }
)


CloudFrontListPublicKeysResult = TypedDict(
    'CloudFrontListPublicKeysResult', {
        'PublicKeyList': Optional[CloudFrontPublicKeyList],
    }
)


CloudFrontStreamingDistributionSummary = TypedDict(
    'CloudFrontStreamingDistributionSummary', {
        'string': str,
        'string': str,
        'string': str,
        'timestamp': datetime.datetime,
        'string': str,
        'S3Origin': CloudFrontS3Origin,
        'Aliases': CloudFrontAliases,
        'TrustedSigners': CloudFrontTrustedSigners,
        'string': str,
        'PriceClass': str,
        'boolean': bool,
    }
)


CloudFrontStreamingDistributionList = TypedDict(
    'CloudFrontStreamingDistributionList', {
        'string': str,
        'integer': int,
        'boolean': bool,
        'integer': int,
        'string': Optional[str],
        'StreamingDistributionSummaryList': Optional[List[CloudFrontStreamingDistributionSummary]],
    }
)


CloudFrontListStreamingDistributionsResult = TypedDict(
    'CloudFrontListStreamingDistributionsResult', {
        'StreamingDistributionList': Optional[CloudFrontStreamingDistributionList],
    }
)


CloudFrontListTagsForResourceResult = TypedDict(
    'CloudFrontListTagsForResourceResult', {
        'Tags': CloudFrontTags,
    }
)


CloudFrontTagKeys = TypedDict(
    'CloudFrontTagKeys', {
        'TagKeyList': Optional[List[str]],
    }
)


CloudFrontUpdateCloudFrontOriginAccessIdentityResult = TypedDict(
    'CloudFrontUpdateCloudFrontOriginAccessIdentityResult', {
        'CloudFrontOriginAccessIdentity': Optional[CloudFrontCloudFrontOriginAccessIdentity],
        'string': Optional[str],
    }
)


CloudFrontUpdateDistributionResult = TypedDict(
    'CloudFrontUpdateDistributionResult', {
        'Distribution': Optional[CloudFrontDistribution],
        'string': Optional[str],
    }
)


CloudFrontUpdateFieldLevelEncryptionConfigResult = TypedDict(
    'CloudFrontUpdateFieldLevelEncryptionConfigResult', {
        'FieldLevelEncryption': Optional[CloudFrontFieldLevelEncryption],
        'string': Optional[str],
    }
)


CloudFrontUpdateFieldLevelEncryptionProfileResult = TypedDict(
    'CloudFrontUpdateFieldLevelEncryptionProfileResult', {
        'FieldLevelEncryptionProfile': Optional[CloudFrontFieldLevelEncryptionProfile],
        'string': Optional[str],
    }
)


CloudFrontUpdatePublicKeyResult = TypedDict(
    'CloudFrontUpdatePublicKeyResult', {
        'PublicKey': Optional[CloudFrontPublicKey],
        'string': Optional[str],
    }
)


CloudFrontUpdateStreamingDistributionResult = TypedDict(
    'CloudFrontUpdateStreamingDistributionResult', {
        'StreamingDistribution': Optional[CloudFrontStreamingDistribution],
        'string': Optional[str],
    }
)


class CloudHSM(BaseClient):
    def add_tags_to_resource(self, *,
        ResourceArn: str,
        TagList: List[CloudHSMTag]
    ) -> CloudHSMAddTagsToResourceResponse: ...

    def create_hapg(self, *,
        Label: str
    ) -> CloudHSMCreateHapgResponse: ...

    def create_hsm(self, *,
        SubnetId: str,
        SshKey: str,
        IamRoleArn: str,
        SubscriptionType: str,
        EniIp: str = ...,
        ExternalId: str = ...,
        ClientToken: str = ...,
        SyslogIp: str = ...
    ) -> CloudHSMCreateHsmResponse: ...

    def create_luna_client(self, *,
        Certificate: str,
        Label: str = ...
    ) -> CloudHSMCreateLunaClientResponse: ...

    def delete_hapg(self, *,
        HapgArn: str
    ) -> CloudHSMDeleteHapgResponse: ...

    def delete_hsm(self, *,
        HsmArn: str
    ) -> CloudHSMDeleteHsmResponse: ...

    def delete_luna_client(self, *,
        ClientArn: str
    ) -> CloudHSMDeleteLunaClientResponse: ...

    def describe_hapg(self, *,
        HapgArn: str
    ) -> CloudHSMDescribeHapgResponse: ...

    def describe_hsm(self, *,
        HsmArn: str = ...,
        HsmSerialNumber: str = ...
    ) -> CloudHSMDescribeHsmResponse: ...

    def describe_luna_client(self, *,
        ClientArn: str = ...,
        CertificateFingerprint: str = ...
    ) -> CloudHSMDescribeLunaClientResponse: ...

    def get_config(self, *,
        ClientArn: str,
        ClientVersion: str,
        HapgList: List[str]
    ) -> CloudHSMGetConfigResponse: ...

    def list_available_zones(self) -> CloudHSMListAvailableZonesResponse: ...

    def list_hapgs(self, *,
        NextToken: str = ...
    ) -> CloudHSMListHapgsResponse: ...

    def list_hsms(self, *,
        NextToken: str = ...
    ) -> CloudHSMListHsmsResponse: ...

    def list_luna_clients(self, *,
        NextToken: str = ...
    ) -> CloudHSMListLunaClientsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> CloudHSMListTagsForResourceResponse: ...

    def modify_hapg(self, *,
        HapgArn: str,
        Label: str = ...,
        PartitionSerialList: List[str] = ...
    ) -> CloudHSMModifyHapgResponse: ...

    def modify_hsm(self, *,
        HsmArn: str,
        SubnetId: str = ...,
        EniIp: str = ...,
        IamRoleArn: str = ...,
        ExternalId: str = ...,
        SyslogIp: str = ...
    ) -> CloudHSMModifyHsmResponse: ...

    def modify_luna_client(self, *,
        ClientArn: str,
        Certificate: str
    ) -> CloudHSMModifyLunaClientResponse: ...

    def remove_tags_from_resource(self, *,
        ResourceArn: str,
        TagKeyList: List[str]
    ) -> CloudHSMRemoveTagsFromResourceResponse: ...


CloudHSMTag = TypedDict(
    'CloudHSMTag', {
        'TagKey': str,
        'TagValue': str,
    }
)


CloudHSMAddTagsToResourceResponse = TypedDict(
    'CloudHSMAddTagsToResourceResponse', {
        'String': str,
    }
)


CloudHSMCreateHapgResponse = TypedDict(
    'CloudHSMCreateHapgResponse', {
        'HapgArn': Optional[str],
    }
)


CloudHSMCreateHsmResponse = TypedDict(
    'CloudHSMCreateHsmResponse', {
        'HsmArn': Optional[str],
    }
)


CloudHSMCreateLunaClientResponse = TypedDict(
    'CloudHSMCreateLunaClientResponse', {
        'ClientArn': Optional[str],
    }
)


CloudHSMDeleteHapgResponse = TypedDict(
    'CloudHSMDeleteHapgResponse', {
        'String': str,
    }
)


CloudHSMDeleteHsmResponse = TypedDict(
    'CloudHSMDeleteHsmResponse', {
        'String': str,
    }
)


CloudHSMDeleteLunaClientResponse = TypedDict(
    'CloudHSMDeleteLunaClientResponse', {
        'String': str,
    }
)


CloudHSMDescribeHapgResponse = TypedDict(
    'CloudHSMDescribeHapgResponse', {
        'HapgArn': Optional[str],
        'String': Optional[str],
        'HsmList': Optional[List[str]],
        'HsmList': Optional[List[str]],
        'HsmList': Optional[List[str]],
        'Label': Optional[str],
        'Timestamp': Optional[str],
        'PartitionSerialList': Optional[List[str]],
        'CloudHsmObjectState': Optional[str],
    }
)


CloudHSMDescribeHsmResponse = TypedDict(
    'CloudHSMDescribeHsmResponse', {
        'HsmArn': Optional[str],
        'HsmStatus': Optional[str],
        'String': Optional[str],
        'AZ': Optional[str],
        'EniId': Optional[str],
        'IpAddress': Optional[str],
        'SubscriptionType': Optional[str],
        'Timestamp': Optional[str],
        'Timestamp': Optional[str],
        'VpcId': Optional[str],
        'SubnetId': Optional[str],
        'IamRoleArn': Optional[str],
        'HsmSerialNumber': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'SshKey': Optional[str],
        'Timestamp': Optional[str],
        'String': Optional[str],
        'Timestamp': Optional[str],
        'PartitionList': Optional[List[str]],
    }
)


CloudHSMDescribeLunaClientResponse = TypedDict(
    'CloudHSMDescribeLunaClientResponse', {
        'ClientArn': Optional[str],
        'Certificate': Optional[str],
        'CertificateFingerprint': Optional[str],
        'Timestamp': Optional[str],
        'Label': Optional[str],
    }
)


CloudHSMGetConfigResponse = TypedDict(
    'CloudHSMGetConfigResponse', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


CloudHSMListAvailableZonesResponse = TypedDict(
    'CloudHSMListAvailableZonesResponse', {
        'AZList': Optional[List[str]],
    }
)


CloudHSMListHapgsResponse = TypedDict(
    'CloudHSMListHapgsResponse', {
        'HapgList': List[str],
        'PaginationToken': Optional[str],
    }
)


CloudHSMListHsmsResponse = TypedDict(
    'CloudHSMListHsmsResponse', {
        'HsmList': Optional[List[str]],
        'PaginationToken': Optional[str],
    }
)


CloudHSMListLunaClientsResponse = TypedDict(
    'CloudHSMListLunaClientsResponse', {
        'ClientList': List[str],
        'PaginationToken': Optional[str],
    }
)


CloudHSMListTagsForResourceResponse = TypedDict(
    'CloudHSMListTagsForResourceResponse', {
        'TagList': List[CloudHSMTag],
    }
)


CloudHSMModifyHapgResponse = TypedDict(
    'CloudHSMModifyHapgResponse', {
        'HapgArn': Optional[str],
    }
)


CloudHSMModifyHsmResponse = TypedDict(
    'CloudHSMModifyHsmResponse', {
        'HsmArn': Optional[str],
    }
)


CloudHSMModifyLunaClientResponse = TypedDict(
    'CloudHSMModifyLunaClientResponse', {
        'ClientArn': Optional[str],
    }
)


CloudHSMRemoveTagsFromResourceResponse = TypedDict(
    'CloudHSMRemoveTagsFromResourceResponse', {
        'String': str,
    }
)


class CloudHSMV2(BaseClient):
    def copy_backup_to_region(self, *,
        DestinationRegion: str,
        BackupId: str
    ) -> CloudHSMV2CopyBackupToRegionResponse: ...

    def create_cluster(self, *,
        SubnetIds: List[str],
        HsmType: str,
        SourceBackupId: str = ...
    ) -> CloudHSMV2CreateClusterResponse: ...

    def create_hsm(self, *,
        ClusterId: str,
        AvailabilityZone: str,
        IpAddress: str = ...
    ) -> CloudHSMV2CreateHsmResponse: ...

    def delete_backup(self, *,
        BackupId: str
    ) -> CloudHSMV2DeleteBackupResponse: ...

    def delete_cluster(self, *,
        ClusterId: str
    ) -> CloudHSMV2DeleteClusterResponse: ...

    def delete_hsm(self, *,
        ClusterId: str,
        HsmId: str = ...,
        EniId: str = ...,
        EniIp: str = ...
    ) -> CloudHSMV2DeleteHsmResponse: ...

    def describe_backups(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        Filters: Dict[str, List[str]] = ...,
        SortAscending: bool = ...
    ) -> CloudHSMV2DescribeBackupsResponse: ...

    def describe_clusters(self, *,
        Filters: Dict[str, List[str]] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudHSMV2DescribeClustersResponse: ...

    def initialize_cluster(self, *,
        ClusterId: str,
        SignedCert: str,
        TrustAnchor: str
    ) -> CloudHSMV2InitializeClusterResponse: ...

    def list_tags(self, *,
        ResourceId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudHSMV2ListTagsResponse: ...

    def restore_backup(self, *,
        BackupId: str
    ) -> CloudHSMV2RestoreBackupResponse: ...

    def tag_resource(self, *,
        ResourceId: str,
        TagList: List[CloudHSMV2Tag]
    ) -> CloudHSMV2TagResourceResponse: ...

    def untag_resource(self, *,
        ResourceId: str,
        TagKeyList: List[str]
    ) -> CloudHSMV2UntagResourceResponse: ...


CloudHSMV2DestinationBackup = TypedDict(
    'CloudHSMV2DestinationBackup', {
        'Timestamp': Optional[datetime.datetime],
        'Region': Optional[str],
        'BackupId': Optional[str],
        'ClusterId': Optional[str],
    }
)


CloudHSMV2CopyBackupToRegionResponse = TypedDict(
    'CloudHSMV2CopyBackupToRegionResponse', {
        'DestinationBackup': Optional[CloudHSMV2DestinationBackup],
    }
)


CloudHSMV2Hsm = TypedDict(
    'CloudHSMV2Hsm', {
        'HsmId': str,
        'ExternalAz': Optional[str],
        'ClusterId': Optional[str],
        'SubnetId': Optional[str],
        'EniId': Optional[str],
        'IpAddress': Optional[str],
        'HsmState': Optional[str],
        'String': Optional[str],
    }
)


CloudHSMV2Certificates = TypedDict(
    'CloudHSMV2Certificates', {
        'Cert': Optional[str],
        'Cert': Optional[str],
        'Cert': Optional[str],
        'Cert': Optional[str],
        'Cert': Optional[str],
    }
)


CloudHSMV2Cluster = TypedDict(
    'CloudHSMV2Cluster', {
        'BackupPolicy': Optional[str],
        'ClusterId': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Hsms': Optional[List[CloudHSMV2Hsm]],
        'HsmType': Optional[str],
        'PreCoPassword': Optional[str],
        'SecurityGroup': Optional[str],
        'BackupId': Optional[str],
        'ClusterState': Optional[str],
        'StateMessage': Optional[str],
        'ExternalSubnetMapping': Optional[Dict[str, str]],
        'VpcId': Optional[str],
        'Certificates': Optional[CloudHSMV2Certificates],
    }
)


CloudHSMV2CreateClusterResponse = TypedDict(
    'CloudHSMV2CreateClusterResponse', {
        'Cluster': Optional[CloudHSMV2Cluster],
    }
)


CloudHSMV2CreateHsmResponse = TypedDict(
    'CloudHSMV2CreateHsmResponse', {
        'Hsm': Optional[CloudHSMV2Hsm],
    }
)


CloudHSMV2Backup = TypedDict(
    'CloudHSMV2Backup', {
        'BackupId': str,
        'BackupState': Optional[str],
        'ClusterId': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Region': Optional[str],
        'BackupId': Optional[str],
        'ClusterId': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


CloudHSMV2DeleteBackupResponse = TypedDict(
    'CloudHSMV2DeleteBackupResponse', {
        'Backup': Optional[CloudHSMV2Backup],
    }
)


CloudHSMV2DeleteClusterResponse = TypedDict(
    'CloudHSMV2DeleteClusterResponse', {
        'Cluster': Optional[CloudHSMV2Cluster],
    }
)


CloudHSMV2DeleteHsmResponse = TypedDict(
    'CloudHSMV2DeleteHsmResponse', {
        'HsmId': Optional[str],
    }
)


CloudHSMV2DescribeBackupsResponse = TypedDict(
    'CloudHSMV2DescribeBackupsResponse', {
        'Backups': Optional[List[CloudHSMV2Backup]],
        'NextToken': Optional[str],
    }
)


CloudHSMV2DescribeClustersResponse = TypedDict(
    'CloudHSMV2DescribeClustersResponse', {
        'Clusters': Optional[List[CloudHSMV2Cluster]],
        'NextToken': Optional[str],
    }
)


CloudHSMV2InitializeClusterResponse = TypedDict(
    'CloudHSMV2InitializeClusterResponse', {
        'ClusterState': Optional[str],
        'StateMessage': Optional[str],
    }
)


CloudHSMV2Tag = TypedDict(
    'CloudHSMV2Tag', {
        'TagKey': str,
        'TagValue': str,
    }
)


CloudHSMV2ListTagsResponse = TypedDict(
    'CloudHSMV2ListTagsResponse', {
        'TagList': List[CloudHSMV2Tag],
        'NextToken': Optional[str],
    }
)


CloudHSMV2RestoreBackupResponse = TypedDict(
    'CloudHSMV2RestoreBackupResponse', {
        'Backup': Optional[CloudHSMV2Backup],
    }
)


CloudHSMV2TagResourceResponse = TypedDict(
    'CloudHSMV2TagResourceResponse', {
    }
)


CloudHSMV2UntagResourceResponse = TypedDict(
    'CloudHSMV2UntagResourceResponse', {
    }
)


class CloudSearch(BaseClient):
    def build_suggesters(self, *,
        DomainName: str
    ) -> CloudSearchBuildSuggestersResponse: ...

    def create_domain(self, *,
        DomainName: str
    ) -> CloudSearchCreateDomainResponse: ...

    def define_analysis_scheme(self, *,
        DomainName: str,
        AnalysisScheme: CloudSearchAnalysisScheme
    ) -> CloudSearchDefineAnalysisSchemeResponse: ...

    def define_expression(self, *,
        DomainName: str,
        Expression: CloudSearchExpression
    ) -> CloudSearchDefineExpressionResponse: ...

    def define_index_field(self, *,
        DomainName: str,
        IndexField: CloudSearchIndexField
    ) -> CloudSearchDefineIndexFieldResponse: ...

    def define_suggester(self, *,
        DomainName: str,
        Suggester: CloudSearchSuggester
    ) -> CloudSearchDefineSuggesterResponse: ...

    def delete_analysis_scheme(self, *,
        DomainName: str,
        AnalysisSchemeName: str
    ) -> CloudSearchDeleteAnalysisSchemeResponse: ...

    def delete_domain(self, *,
        DomainName: str
    ) -> CloudSearchDeleteDomainResponse: ...

    def delete_expression(self, *,
        DomainName: str,
        ExpressionName: str
    ) -> CloudSearchDeleteExpressionResponse: ...

    def delete_index_field(self, *,
        DomainName: str,
        IndexFieldName: str
    ) -> CloudSearchDeleteIndexFieldResponse: ...

    def delete_suggester(self, *,
        DomainName: str,
        SuggesterName: str
    ) -> CloudSearchDeleteSuggesterResponse: ...

    def describe_analysis_schemes(self, *,
        DomainName: str,
        AnalysisSchemeNames: List[str] = ...,
        Deployed: bool = ...
    ) -> CloudSearchDescribeAnalysisSchemesResponse: ...

    def describe_availability_options(self, *,
        DomainName: str,
        Deployed: bool = ...
    ) -> CloudSearchDescribeAvailabilityOptionsResponse: ...

    def describe_domains(self, *,
        DomainNames: List[str] = ...
    ) -> CloudSearchDescribeDomainsResponse: ...

    def describe_expressions(self, *,
        DomainName: str,
        ExpressionNames: List[str] = ...,
        Deployed: bool = ...
    ) -> CloudSearchDescribeExpressionsResponse: ...

    def describe_index_fields(self, *,
        DomainName: str,
        FieldNames: List[str] = ...,
        Deployed: bool = ...
    ) -> CloudSearchDescribeIndexFieldsResponse: ...

    def describe_scaling_parameters(self, *,
        DomainName: str
    ) -> CloudSearchDescribeScalingParametersResponse: ...

    def describe_service_access_policies(self, *,
        DomainName: str,
        Deployed: bool = ...
    ) -> CloudSearchDescribeServiceAccessPoliciesResponse: ...

    def describe_suggesters(self, *,
        DomainName: str,
        SuggesterNames: List[str] = ...,
        Deployed: bool = ...
    ) -> CloudSearchDescribeSuggestersResponse: ...

    def index_documents(self, *,
        DomainName: str
    ) -> CloudSearchIndexDocumentsResponse: ...

    def list_domain_names(self) -> CloudSearchListDomainNamesResponse: ...

    def update_availability_options(self, *,
        DomainName: str,
        MultiAZ: bool
    ) -> CloudSearchUpdateAvailabilityOptionsResponse: ...

    def update_scaling_parameters(self, *,
        DomainName: str,
        ScalingParameters: CloudSearchScalingParameters
    ) -> CloudSearchUpdateScalingParametersResponse: ...

    def update_service_access_policies(self, *,
        DomainName: str,
        AccessPolicies: str
    ) -> CloudSearchUpdateServiceAccessPoliciesResponse: ...


CloudSearchBuildSuggestersResponse = TypedDict(
    'CloudSearchBuildSuggestersResponse', {
        'FieldNameList': Optional[List[str]],
    }
)


CloudSearchServiceEndpoint = TypedDict(
    'CloudSearchServiceEndpoint', {
        'ServiceUrl': Optional[str],
    }
)


CloudSearchLimits = TypedDict(
    'CloudSearchLimits', {
        'MaximumReplicationCount': int,
        'MaximumPartitionCount': int,
    }
)


CloudSearchDomainStatus = TypedDict(
    'CloudSearchDomainStatus', {
        'DomainId': str,
        'DomainName': str,
        'Boolean': bool,
        'ARN': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'ServiceEndpoint': Optional[CloudSearchServiceEndpoint],
        'ServiceEndpoint': Optional[CloudSearchServiceEndpoint],
        'Boolean': Optional[bool],
        'SearchInstanceType': Optional[str],
        'PartitionCount': Optional[int],
        'InstanceCount': Optional[int],
        'Limits': Optional[CloudSearchLimits],
    }
)


CloudSearchCreateDomainResponse = TypedDict(
    'CloudSearchCreateDomainResponse', {
        'DomainStatus': Optional[CloudSearchDomainStatus],
    }
)


CloudSearchAnalysisOptions = TypedDict(
    'CloudSearchAnalysisOptions', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'AlgorithmicStemming': Optional[str],
    }
)


CloudSearchAnalysisScheme = TypedDict(
    'CloudSearchAnalysisScheme', {
        'StandardName': str,
        'AnalysisSchemeLanguage': str,
        'AnalysisOptions': Optional[CloudSearchAnalysisOptions],
    }
)


CloudSearchOptionStatus = TypedDict(
    'CloudSearchOptionStatus', {
        'UpdateTimestamp': datetime.datetime,
        'UpdateTimestamp': datetime.datetime,
        'OptionState': str,
        'UIntValue': Optional[int],
        'Boolean': Optional[bool],
    }
)


CloudSearchAnalysisSchemeStatus = TypedDict(
    'CloudSearchAnalysisSchemeStatus', {
        'AnalysisScheme': CloudSearchAnalysisScheme,
        'OptionStatus': CloudSearchOptionStatus,
    }
)


CloudSearchDefineAnalysisSchemeResponse = TypedDict(
    'CloudSearchDefineAnalysisSchemeResponse', {
        'AnalysisSchemeStatus': CloudSearchAnalysisSchemeStatus,
    }
)


CloudSearchExpression = TypedDict(
    'CloudSearchExpression', {
        'StandardName': str,
        'ExpressionValue': str,
    }
)


CloudSearchExpressionStatus = TypedDict(
    'CloudSearchExpressionStatus', {
        'Expression': CloudSearchExpression,
        'OptionStatus': CloudSearchOptionStatus,
    }
)


CloudSearchDefineExpressionResponse = TypedDict(
    'CloudSearchDefineExpressionResponse', {
        'ExpressionStatus': CloudSearchExpressionStatus,
    }
)


CloudSearchIntOptions = TypedDict(
    'CloudSearchIntOptions', {
        'Long': Optional[int],
        'FieldName': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
    }
)


CloudSearchDoubleOptions = TypedDict(
    'CloudSearchDoubleOptions', {
        'Double': Optional[float],
        'FieldName': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
    }
)


CloudSearchLiteralOptions = TypedDict(
    'CloudSearchLiteralOptions', {
        'FieldValue': Optional[str],
        'FieldName': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
    }
)


CloudSearchTextOptions = TypedDict(
    'CloudSearchTextOptions', {
        'FieldValue': Optional[str],
        'FieldName': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Word': Optional[str],
    }
)


CloudSearchDateOptions = TypedDict(
    'CloudSearchDateOptions', {
        'FieldValue': Optional[str],
        'FieldName': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
    }
)


CloudSearchLatLonOptions = TypedDict(
    'CloudSearchLatLonOptions', {
        'FieldValue': Optional[str],
        'FieldName': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
    }
)


CloudSearchIntArrayOptions = TypedDict(
    'CloudSearchIntArrayOptions', {
        'Long': Optional[int],
        'FieldNameCommaList': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
    }
)


CloudSearchDoubleArrayOptions = TypedDict(
    'CloudSearchDoubleArrayOptions', {
        'Double': Optional[float],
        'FieldNameCommaList': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
    }
)


CloudSearchLiteralArrayOptions = TypedDict(
    'CloudSearchLiteralArrayOptions', {
        'FieldValue': Optional[str],
        'FieldNameCommaList': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
    }
)


CloudSearchTextArrayOptions = TypedDict(
    'CloudSearchTextArrayOptions', {
        'FieldValue': Optional[str],
        'FieldNameCommaList': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Word': Optional[str],
    }
)


CloudSearchDateArrayOptions = TypedDict(
    'CloudSearchDateArrayOptions', {
        'FieldValue': Optional[str],
        'FieldNameCommaList': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
    }
)


CloudSearchIndexField = TypedDict(
    'CloudSearchIndexField', {
        'DynamicFieldName': str,
        'IndexFieldType': str,
        'IntOptions': Optional[CloudSearchIntOptions],
        'DoubleOptions': Optional[CloudSearchDoubleOptions],
        'LiteralOptions': Optional[CloudSearchLiteralOptions],
        'TextOptions': Optional[CloudSearchTextOptions],
        'DateOptions': Optional[CloudSearchDateOptions],
        'LatLonOptions': Optional[CloudSearchLatLonOptions],
        'IntArrayOptions': Optional[CloudSearchIntArrayOptions],
        'DoubleArrayOptions': Optional[CloudSearchDoubleArrayOptions],
        'LiteralArrayOptions': Optional[CloudSearchLiteralArrayOptions],
        'TextArrayOptions': Optional[CloudSearchTextArrayOptions],
        'DateArrayOptions': Optional[CloudSearchDateArrayOptions],
    }
)


CloudSearchIndexFieldStatus = TypedDict(
    'CloudSearchIndexFieldStatus', {
        'IndexField': CloudSearchIndexField,
        'OptionStatus': CloudSearchOptionStatus,
    }
)


CloudSearchDefineIndexFieldResponse = TypedDict(
    'CloudSearchDefineIndexFieldResponse', {
        'IndexFieldStatus': CloudSearchIndexFieldStatus,
    }
)


CloudSearchDocumentSuggesterOptions = TypedDict(
    'CloudSearchDocumentSuggesterOptions', {
        'FieldName': str,
        'SuggesterFuzzyMatching': Optional[str],
        'String': Optional[str],
    }
)


CloudSearchSuggester = TypedDict(
    'CloudSearchSuggester', {
        'StandardName': str,
        'DocumentSuggesterOptions': CloudSearchDocumentSuggesterOptions,
    }
)


CloudSearchSuggesterStatus = TypedDict(
    'CloudSearchSuggesterStatus', {
        'Suggester': CloudSearchSuggester,
        'OptionStatus': CloudSearchOptionStatus,
    }
)


CloudSearchDefineSuggesterResponse = TypedDict(
    'CloudSearchDefineSuggesterResponse', {
        'SuggesterStatus': CloudSearchSuggesterStatus,
    }
)


CloudSearchDeleteAnalysisSchemeResponse = TypedDict(
    'CloudSearchDeleteAnalysisSchemeResponse', {
        'AnalysisSchemeStatus': CloudSearchAnalysisSchemeStatus,
    }
)


CloudSearchDeleteDomainResponse = TypedDict(
    'CloudSearchDeleteDomainResponse', {
        'DomainStatus': Optional[CloudSearchDomainStatus],
    }
)


CloudSearchDeleteExpressionResponse = TypedDict(
    'CloudSearchDeleteExpressionResponse', {
        'ExpressionStatus': CloudSearchExpressionStatus,
    }
)


CloudSearchDeleteIndexFieldResponse = TypedDict(
    'CloudSearchDeleteIndexFieldResponse', {
        'IndexFieldStatus': CloudSearchIndexFieldStatus,
    }
)


CloudSearchDeleteSuggesterResponse = TypedDict(
    'CloudSearchDeleteSuggesterResponse', {
        'SuggesterStatus': CloudSearchSuggesterStatus,
    }
)


CloudSearchDescribeAnalysisSchemesResponse = TypedDict(
    'CloudSearchDescribeAnalysisSchemesResponse', {
        'AnalysisSchemeStatusList': List[CloudSearchAnalysisSchemeStatus],
    }
)


CloudSearchAvailabilityOptionsStatus = TypedDict(
    'CloudSearchAvailabilityOptionsStatus', {
        'MultiAZ': bool,
        'OptionStatus': CloudSearchOptionStatus,
    }
)


CloudSearchDescribeAvailabilityOptionsResponse = TypedDict(
    'CloudSearchDescribeAvailabilityOptionsResponse', {
        'AvailabilityOptionsStatus': Optional[CloudSearchAvailabilityOptionsStatus],
    }
)


CloudSearchDescribeDomainsResponse = TypedDict(
    'CloudSearchDescribeDomainsResponse', {
        'DomainStatusList': List[CloudSearchDomainStatus],
    }
)


CloudSearchDescribeExpressionsResponse = TypedDict(
    'CloudSearchDescribeExpressionsResponse', {
        'ExpressionStatusList': List[CloudSearchExpressionStatus],
    }
)


CloudSearchDescribeIndexFieldsResponse = TypedDict(
    'CloudSearchDescribeIndexFieldsResponse', {
        'IndexFieldStatusList': List[CloudSearchIndexFieldStatus],
    }
)


CloudSearchScalingParameters = TypedDict(
    'CloudSearchScalingParameters', {
        'PartitionInstanceType': Optional[str],
        'UIntValue': Optional[int],
        'UIntValue': Optional[int],
    }
)


CloudSearchScalingParametersStatus = TypedDict(
    'CloudSearchScalingParametersStatus', {
        'ScalingParameters': CloudSearchScalingParameters,
        'OptionStatus': CloudSearchOptionStatus,
    }
)


CloudSearchDescribeScalingParametersResponse = TypedDict(
    'CloudSearchDescribeScalingParametersResponse', {
        'ScalingParametersStatus': CloudSearchScalingParametersStatus,
    }
)


CloudSearchAccessPoliciesStatus = TypedDict(
    'CloudSearchAccessPoliciesStatus', {
        'PolicyDocument': str,
        'OptionStatus': CloudSearchOptionStatus,
    }
)


CloudSearchDescribeServiceAccessPoliciesResponse = TypedDict(
    'CloudSearchDescribeServiceAccessPoliciesResponse', {
        'AccessPoliciesStatus': CloudSearchAccessPoliciesStatus,
    }
)


CloudSearchDescribeSuggestersResponse = TypedDict(
    'CloudSearchDescribeSuggestersResponse', {
        'SuggesterStatusList': List[CloudSearchSuggesterStatus],
    }
)


CloudSearchIndexDocumentsResponse = TypedDict(
    'CloudSearchIndexDocumentsResponse', {
        'FieldNameList': Optional[List[str]],
    }
)


CloudSearchListDomainNamesResponse = TypedDict(
    'CloudSearchListDomainNamesResponse', {
        'DomainNameMap': Optional[Dict[str, str]],
    }
)


CloudSearchUpdateAvailabilityOptionsResponse = TypedDict(
    'CloudSearchUpdateAvailabilityOptionsResponse', {
        'AvailabilityOptionsStatus': Optional[CloudSearchAvailabilityOptionsStatus],
    }
)


CloudSearchUpdateScalingParametersResponse = TypedDict(
    'CloudSearchUpdateScalingParametersResponse', {
        'ScalingParametersStatus': CloudSearchScalingParametersStatus,
    }
)


CloudSearchUpdateServiceAccessPoliciesResponse = TypedDict(
    'CloudSearchUpdateServiceAccessPoliciesResponse', {
        'AccessPoliciesStatus': CloudSearchAccessPoliciesStatus,
    }
)


class CloudTrail(BaseClient):
    def add_tags(self, *,
        ResourceId: str,
        TagsList: List[CloudTrailTag] = ...
    ) -> CloudTrailAddTagsResponse: ...

    def create_trail(self, *,
        Name: str,
        S3BucketName: str,
        S3KeyPrefix: str = ...,
        SnsTopicName: str = ...,
        IncludeGlobalServiceEvents: bool = ...,
        IsMultiRegionTrail: bool = ...,
        EnableLogFileValidation: bool = ...,
        CloudWatchLogsLogGroupArn: str = ...,
        CloudWatchLogsRoleArn: str = ...,
        KmsKeyId: str = ...,
        IsOrganizationTrail: bool = ...
    ) -> CloudTrailCreateTrailResponse: ...

    def delete_trail(self, *,
        Name: str
    ) -> CloudTrailDeleteTrailResponse: ...

    def describe_trails(self, *,
        trailNameList: List[str] = ...,
        includeShadowTrails: bool = ...
    ) -> CloudTrailDescribeTrailsResponse: ...

    def get_event_selectors(self, *,
        TrailName: str
    ) -> CloudTrailGetEventSelectorsResponse: ...

    def get_trail_status(self, *,
        Name: str
    ) -> CloudTrailGetTrailStatusResponse: ...

    def list_public_keys(self, *,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        NextToken: str = ...
    ) -> CloudTrailListPublicKeysResponse: ...

    def list_tags(self, *,
        ResourceIdList: List[str],
        NextToken: str = ...
    ) -> CloudTrailListTagsResponse: ...

    def lookup_events(self, *,
        LookupAttributes: List[CloudTrailLookupAttribute] = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> CloudTrailLookupEventsResponse: ...

    def put_event_selectors(self, *,
        TrailName: str,
        EventSelectors: List[CloudTrailEventSelector]
    ) -> CloudTrailPutEventSelectorsResponse: ...

    def remove_tags(self, *,
        ResourceId: str,
        TagsList: List[CloudTrailTag] = ...
    ) -> CloudTrailRemoveTagsResponse: ...

    def start_logging(self, *,
        Name: str
    ) -> CloudTrailStartLoggingResponse: ...

    def stop_logging(self, *,
        Name: str
    ) -> CloudTrailStopLoggingResponse: ...

    def update_trail(self, *,
        Name: str,
        S3BucketName: str = ...,
        S3KeyPrefix: str = ...,
        SnsTopicName: str = ...,
        IncludeGlobalServiceEvents: bool = ...,
        IsMultiRegionTrail: bool = ...,
        EnableLogFileValidation: bool = ...,
        CloudWatchLogsLogGroupArn: str = ...,
        CloudWatchLogsRoleArn: str = ...,
        KmsKeyId: str = ...,
        IsOrganizationTrail: bool = ...
    ) -> CloudTrailUpdateTrailResponse: ...


CloudTrailTag = TypedDict(
    'CloudTrailTag', {
        'String': str,
        'String': Optional[str],
    }
)


CloudTrailAddTagsResponse = TypedDict(
    'CloudTrailAddTagsResponse', {
    }
)


CloudTrailCreateTrailResponse = TypedDict(
    'CloudTrailCreateTrailResponse', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
    }
)


CloudTrailDeleteTrailResponse = TypedDict(
    'CloudTrailDeleteTrailResponse', {
    }
)


CloudTrailTrail = TypedDict(
    'CloudTrailTrail', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
    }
)


CloudTrailDescribeTrailsResponse = TypedDict(
    'CloudTrailDescribeTrailsResponse', {
        'TrailList': Optional[List[CloudTrailTrail]],
    }
)


CloudTrailDataResource = TypedDict(
    'CloudTrailDataResource', {
        'String': Optional[str],
        'DataResourceValues': Optional[List[str]],
    }
)


CloudTrailEventSelector = TypedDict(
    'CloudTrailEventSelector', {
        'ReadWriteType': Optional[str],
        'Boolean': Optional[bool],
        'DataResources': Optional[List[CloudTrailDataResource]],
    }
)


CloudTrailGetEventSelectorsResponse = TypedDict(
    'CloudTrailGetEventSelectorsResponse', {
        'String': Optional[str],
        'EventSelectors': Optional[List[CloudTrailEventSelector]],
    }
)


CloudTrailGetTrailStatusResponse = TypedDict(
    'CloudTrailGetTrailStatusResponse', {
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'Date': Optional[datetime.datetime],
        'Date': Optional[datetime.datetime],
        'Date': Optional[datetime.datetime],
        'Date': Optional[datetime.datetime],
        'String': Optional[str],
        'Date': Optional[datetime.datetime],
        'Date': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


CloudTrailPublicKey = TypedDict(
    'CloudTrailPublicKey', {
        'ByteBuffer': Optional[bytes],
        'Date': Optional[datetime.datetime],
        'Date': Optional[datetime.datetime],
        'String': Optional[str],
    }
)


CloudTrailListPublicKeysResponse = TypedDict(
    'CloudTrailListPublicKeysResponse', {
        'PublicKeyList': Optional[List[CloudTrailPublicKey]],
        'String': Optional[str],
    }
)


CloudTrailResourceTag = TypedDict(
    'CloudTrailResourceTag', {
        'String': Optional[str],
        'TagsList': Optional[List[CloudTrailTag]],
    }
)


CloudTrailListTagsResponse = TypedDict(
    'CloudTrailListTagsResponse', {
        'ResourceTagList': Optional[List[CloudTrailResourceTag]],
        'String': Optional[str],
    }
)


CloudTrailLookupAttribute = TypedDict(
    'CloudTrailLookupAttribute', {
        'LookupAttributeKey': str,
        'String': str,
    }
)


CloudTrailResource = TypedDict(
    'CloudTrailResource', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


CloudTrailEvent = TypedDict(
    'CloudTrailEvent', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Date': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'ResourceList': Optional[List[CloudTrailResource]],
        'String': Optional[str],
    }
)


CloudTrailLookupEventsResponse = TypedDict(
    'CloudTrailLookupEventsResponse', {
        'EventsList': Optional[List[CloudTrailEvent]],
        'NextToken': Optional[str],
    }
)


CloudTrailPutEventSelectorsResponse = TypedDict(
    'CloudTrailPutEventSelectorsResponse', {
        'String': Optional[str],
        'EventSelectors': Optional[List[CloudTrailEventSelector]],
    }
)


CloudTrailRemoveTagsResponse = TypedDict(
    'CloudTrailRemoveTagsResponse', {
    }
)


CloudTrailStartLoggingResponse = TypedDict(
    'CloudTrailStartLoggingResponse', {
    }
)


CloudTrailStopLoggingResponse = TypedDict(
    'CloudTrailStopLoggingResponse', {
    }
)


CloudTrailUpdateTrailResponse = TypedDict(
    'CloudTrailUpdateTrailResponse', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
    }
)


class CloudWatch(BaseClient):
    def delete_alarms(self, *,
        AlarmNames: List[str]
    ): ...

    def delete_dashboards(self, *,
        DashboardNames: List[str]
    ) -> CloudWatchDeleteDashboardsOutput: ...

    def describe_alarm_history(self, *,
        AlarmName: str = ...,
        HistoryItemType: str = ...,
        StartDate: datetime.datetime = ...,
        EndDate: datetime.datetime = ...,
        MaxRecords: int = ...,
        NextToken: str = ...
    ) -> CloudWatchDescribeAlarmHistoryOutput: ...

    def describe_alarms(self, *,
        AlarmNames: List[str] = ...,
        AlarmNamePrefix: str = ...,
        StateValue: str = ...,
        ActionPrefix: str = ...,
        MaxRecords: int = ...,
        NextToken: str = ...
    ) -> CloudWatchDescribeAlarmsOutput: ...

    def describe_alarms_for_metric(self, *,
        MetricName: str,
        Namespace: str,
        Statistic: str = ...,
        ExtendedStatistic: str = ...,
        Dimensions: List[CloudWatchDimension] = ...,
        Period: int = ...,
        Unit: str = ...
    ) -> CloudWatchDescribeAlarmsForMetricOutput: ...

    def disable_alarm_actions(self, *,
        AlarmNames: List[str]
    ): ...

    def enable_alarm_actions(self, *,
        AlarmNames: List[str]
    ): ...

    def get_dashboard(self, *,
        DashboardName: str
    ) -> CloudWatchGetDashboardOutput: ...

    def get_metric_data(self, *,
        MetricDataQueries: List[CloudWatchMetricDataQuery],
        StartTime: datetime.datetime,
        EndTime: datetime.datetime,
        NextToken: str = ...,
        ScanBy: str = ...,
        MaxDatapoints: int = ...
    ) -> CloudWatchGetMetricDataOutput: ...

    def get_metric_statistics(self, *,
        Namespace: str,
        MetricName: str,
        StartTime: datetime.datetime,
        EndTime: datetime.datetime,
        Period: int,
        Dimensions: List[CloudWatchDimension] = ...,
        Statistics: List[str] = ...,
        ExtendedStatistics: List[str] = ...,
        Unit: str = ...
    ) -> CloudWatchGetMetricStatisticsOutput: ...

    def get_metric_widget_image(self, *,
        MetricWidget: str,
        OutputFormat: str = ...
    ) -> CloudWatchGetMetricWidgetImageOutput: ...

    def list_dashboards(self, *,
        DashboardNamePrefix: str = ...,
        NextToken: str = ...
    ) -> CloudWatchListDashboardsOutput: ...

    def list_metrics(self, *,
        Namespace: str = ...,
        MetricName: str = ...,
        Dimensions: List[CloudWatchDimensionFilter] = ...,
        NextToken: str = ...
    ) -> CloudWatchListMetricsOutput: ...

    def list_tags_for_resource(self, *,
        ResourceARN: str
    ) -> CloudWatchListTagsForResourceOutput: ...

    def put_dashboard(self, *,
        DashboardName: str,
        DashboardBody: str
    ) -> CloudWatchPutDashboardOutput: ...

    def put_metric_alarm(self, *,
        AlarmName: str,
        EvaluationPeriods: int,
        Threshold: float,
        ComparisonOperator: str,
        AlarmDescription: str = ...,
        ActionsEnabled: bool = ...,
        OKActions: List[str] = ...,
        AlarmActions: List[str] = ...,
        InsufficientDataActions: List[str] = ...,
        MetricName: str = ...,
        Namespace: str = ...,
        Statistic: str = ...,
        ExtendedStatistic: str = ...,
        Dimensions: List[CloudWatchDimension] = ...,
        Period: int = ...,
        Unit: str = ...,
        DatapointsToAlarm: int = ...,
        TreatMissingData: str = ...,
        EvaluateLowSampleCountPercentile: str = ...,
        Metrics: List[CloudWatchMetricDataQuery] = ...,
        Tags: List[CloudWatchTag] = ...
    ): ...

    def put_metric_data(self, *,
        Namespace: str,
        MetricData: List[CloudWatchMetricDatum]
    ): ...

    def set_alarm_state(self, *,
        AlarmName: str,
        StateValue: str,
        StateReason: str,
        StateReasonData: str = ...
    ): ...

    def tag_resource(self, *,
        ResourceARN: str,
        Tags: List[CloudWatchTag]
    ) -> CloudWatchTagResourceOutput: ...

    def untag_resource(self, *,
        ResourceARN: str,
        TagKeys: List[str]
    ) -> CloudWatchUntagResourceOutput: ...


CloudWatchDeleteDashboardsOutput = TypedDict(
    'CloudWatchDeleteDashboardsOutput', {
    }
)


CloudWatchAlarmHistoryItem = TypedDict(
    'CloudWatchAlarmHistoryItem', {
        'AlarmName': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'HistoryItemType': Optional[str],
        'HistorySummary': Optional[str],
        'HistoryData': Optional[str],
    }
)


CloudWatchDescribeAlarmHistoryOutput = TypedDict(
    'CloudWatchDescribeAlarmHistoryOutput', {
        'AlarmHistoryItems': Optional[List[CloudWatchAlarmHistoryItem]],
        'NextToken': Optional[str],
    }
)


CloudWatchDimension = TypedDict(
    'CloudWatchDimension', {
        'DimensionName': str,
        'DimensionValue': str,
    }
)


CloudWatchMetric = TypedDict(
    'CloudWatchMetric', {
        'Namespace': Optional[str],
        'MetricName': Optional[str],
        'Dimensions': Optional[List[CloudWatchDimension]],
    }
)


CloudWatchMetricStat = TypedDict(
    'CloudWatchMetricStat', {
        'Metric': CloudWatchMetric,
        'Period': int,
        'Stat': str,
        'StandardUnit': Optional[str],
    }
)


CloudWatchMetricDataQuery = TypedDict(
    'CloudWatchMetricDataQuery', {
        'MetricId': str,
        'MetricStat': Optional[CloudWatchMetricStat],
        'MetricExpression': Optional[str],
        'MetricLabel': Optional[str],
        'ReturnData': Optional[bool],
    }
)


CloudWatchMetricAlarm = TypedDict(
    'CloudWatchMetricAlarm', {
        'AlarmName': Optional[str],
        'AlarmArn': Optional[str],
        'AlarmDescription': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'ActionsEnabled': Optional[bool],
        'ResourceList': Optional[List[str]],
        'ResourceList': Optional[List[str]],
        'ResourceList': Optional[List[str]],
        'StateValue': Optional[str],
        'StateReason': Optional[str],
        'StateReasonData': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'MetricName': Optional[str],
        'Namespace': Optional[str],
        'Statistic': Optional[str],
        'ExtendedStatistic': Optional[str],
        'Dimensions': Optional[List[CloudWatchDimension]],
        'Period': Optional[int],
        'StandardUnit': Optional[str],
        'EvaluationPeriods': Optional[int],
        'DatapointsToAlarm': Optional[int],
        'Threshold': Optional[float],
        'ComparisonOperator': Optional[str],
        'TreatMissingData': Optional[str],
        'EvaluateLowSampleCountPercentile': Optional[str],
        'MetricDataQueries': Optional[List[CloudWatchMetricDataQuery]],
    }
)


CloudWatchDescribeAlarmsOutput = TypedDict(
    'CloudWatchDescribeAlarmsOutput', {
        'MetricAlarms': Optional[List[CloudWatchMetricAlarm]],
        'NextToken': Optional[str],
    }
)


CloudWatchDescribeAlarmsForMetricOutput = TypedDict(
    'CloudWatchDescribeAlarmsForMetricOutput', {
        'MetricAlarms': Optional[List[CloudWatchMetricAlarm]],
    }
)


CloudWatchGetDashboardOutput = TypedDict(
    'CloudWatchGetDashboardOutput', {
        'DashboardArn': Optional[str],
        'DashboardBody': Optional[str],
        'DashboardName': Optional[str],
    }
)


CloudWatchMessageData = TypedDict(
    'CloudWatchMessageData', {
        'MessageDataCode': Optional[str],
        'MessageDataValue': Optional[str],
    }
)


CloudWatchMetricDataResult = TypedDict(
    'CloudWatchMetricDataResult', {
        'MetricId': Optional[str],
        'MetricLabel': Optional[str],
        'Timestamps': Optional[List[datetime.datetime]],
        'DatapointValues': Optional[List[float]],
        'StatusCode': Optional[str],
        'MetricDataResultMessages': Optional[List[CloudWatchMessageData]],
    }
)


CloudWatchGetMetricDataOutput = TypedDict(
    'CloudWatchGetMetricDataOutput', {
        'MetricDataResults': Optional[List[CloudWatchMetricDataResult]],
        'NextToken': Optional[str],
        'MetricDataResultMessages': Optional[List[CloudWatchMessageData]],
    }
)


CloudWatchDatapoint = TypedDict(
    'CloudWatchDatapoint', {
        'Timestamp': Optional[datetime.datetime],
        'DatapointValue': Optional[float],
        'DatapointValue': Optional[float],
        'DatapointValue': Optional[float],
        'DatapointValue': Optional[float],
        'DatapointValue': Optional[float],
        'StandardUnit': Optional[str],
        'DatapointValueMap': Optional[Dict[str, float]],
    }
)


CloudWatchGetMetricStatisticsOutput = TypedDict(
    'CloudWatchGetMetricStatisticsOutput', {
        'MetricLabel': Optional[str],
        'Datapoints': Optional[List[CloudWatchDatapoint]],
    }
)


CloudWatchGetMetricWidgetImageOutput = TypedDict(
    'CloudWatchGetMetricWidgetImageOutput', {
        'MetricWidgetImage': Optional[bytes],
    }
)


CloudWatchDashboardEntry = TypedDict(
    'CloudWatchDashboardEntry', {
        'DashboardName': Optional[str],
        'DashboardArn': Optional[str],
        'LastModified': Optional[datetime.datetime],
        'Size': Optional[int],
    }
)


CloudWatchListDashboardsOutput = TypedDict(
    'CloudWatchListDashboardsOutput', {
        'DashboardEntries': Optional[List[CloudWatchDashboardEntry]],
        'NextToken': Optional[str],
    }
)


CloudWatchDimensionFilter = TypedDict(
    'CloudWatchDimensionFilter', {
        'DimensionName': str,
        'DimensionValue': Optional[str],
    }
)


CloudWatchListMetricsOutput = TypedDict(
    'CloudWatchListMetricsOutput', {
        'Metrics': Optional[List[CloudWatchMetric]],
        'NextToken': Optional[str],
    }
)


CloudWatchTag = TypedDict(
    'CloudWatchTag', {
        'TagKey': str,
        'TagValue': str,
    }
)


CloudWatchListTagsForResourceOutput = TypedDict(
    'CloudWatchListTagsForResourceOutput', {
        'TagList': Optional[List[CloudWatchTag]],
    }
)


CloudWatchDashboardValidationMessage = TypedDict(
    'CloudWatchDashboardValidationMessage', {
        'DataPath': Optional[str],
        'Message': Optional[str],
    }
)


CloudWatchPutDashboardOutput = TypedDict(
    'CloudWatchPutDashboardOutput', {
        'DashboardValidationMessages': Optional[List[CloudWatchDashboardValidationMessage]],
    }
)


CloudWatchStatisticSet = TypedDict(
    'CloudWatchStatisticSet', {
        'DatapointValue': float,
        'DatapointValue': float,
        'DatapointValue': float,
        'DatapointValue': float,
    }
)


CloudWatchMetricDatum = TypedDict(
    'CloudWatchMetricDatum', {
        'MetricName': str,
        'Dimensions': Optional[List[CloudWatchDimension]],
        'Timestamp': Optional[datetime.datetime],
        'DatapointValue': Optional[float],
        'StatisticSet': Optional[CloudWatchStatisticSet],
        'Values': Optional[List[float]],
        'Counts': Optional[List[float]],
        'StandardUnit': Optional[str],
        'StorageResolution': Optional[int],
    }
)


CloudWatchTagResourceOutput = TypedDict(
    'CloudWatchTagResourceOutput', {
    }
)


CloudWatchUntagResourceOutput = TypedDict(
    'CloudWatchUntagResourceOutput', {
    }
)


class CodeBuild(BaseClient):
    def batch_delete_builds(self, *,
        ids: List[str]
    ) -> CodeBuildBatchDeleteBuildsOutput: ...

    def batch_get_builds(self, *,
        ids: List[str]
    ) -> CodeBuildBatchGetBuildsOutput: ...

    def batch_get_projects(self, *,
        names: List[str]
    ) -> CodeBuildBatchGetProjectsOutput: ...

    def create_project(self, *,
        name: str,
        source: CodeBuildProjectSource,
        artifacts: CodeBuildProjectArtifacts,
        environment: CodeBuildProjectEnvironment,
        serviceRole: str,
        description: str = ...,
        secondarySources: List[CodeBuildProjectSource] = ...,
        secondaryArtifacts: List[CodeBuildProjectArtifacts] = ...,
        cache: CodeBuildProjectCache = ...,
        timeoutInMinutes: int = ...,
        queuedTimeoutInMinutes: int = ...,
        encryptionKey: str = ...,
        tags: List[CodeBuildTag] = ...,
        vpcConfig: CodeBuildVpcConfig = ...,
        badgeEnabled: bool = ...,
        logsConfig: CodeBuildLogsConfig = ...
    ) -> CodeBuildCreateProjectOutput: ...

    def create_webhook(self, *,
        projectName: str,
        branchFilter: str = ...,
        filterGroups: List[List[CodeBuildWebhookFilter]] = ...
    ) -> CodeBuildCreateWebhookOutput: ...

    def delete_project(self, *,
        name: str
    ) -> CodeBuildDeleteProjectOutput: ...

    def delete_source_credentials(self, *,
        arn: str
    ) -> CodeBuildDeleteSourceCredentialsOutput: ...

    def delete_webhook(self, *,
        projectName: str
    ) -> CodeBuildDeleteWebhookOutput: ...

    def import_source_credentials(self, *,
        token: str,
        serverType: str,
        authType: str,
        username: str = ...
    ) -> CodeBuildImportSourceCredentialsOutput: ...

    def invalidate_project_cache(self, *,
        projectName: str
    ) -> CodeBuildInvalidateProjectCacheOutput: ...

    def list_builds(self, *,
        sortOrder: str = ...,
        nextToken: str = ...
    ) -> CodeBuildListBuildsOutput: ...

    def list_builds_for_project(self, *,
        projectName: str,
        sortOrder: str = ...,
        nextToken: str = ...
    ) -> CodeBuildListBuildsForProjectOutput: ...

    def list_curated_environment_images(self) -> CodeBuildListCuratedEnvironmentImagesOutput: ...

    def list_projects(self, *,
        sortBy: str = ...,
        sortOrder: str = ...,
        nextToken: str = ...
    ) -> CodeBuildListProjectsOutput: ...

    def list_source_credentials(self) -> CodeBuildListSourceCredentialsOutput: ...

    def start_build(self, *,
        projectName: str,
        secondarySourcesOverride: List[CodeBuildProjectSource] = ...,
        secondarySourcesVersionOverride: List[CodeBuildProjectSourceVersion] = ...,
        sourceVersion: str = ...,
        artifactsOverride: CodeBuildProjectArtifacts = ...,
        secondaryArtifactsOverride: List[CodeBuildProjectArtifacts] = ...,
        environmentVariablesOverride: List[CodeBuildEnvironmentVariable] = ...,
        sourceTypeOverride: str = ...,
        sourceLocationOverride: str = ...,
        sourceAuthOverride: CodeBuildSourceAuth = ...,
        gitCloneDepthOverride: int = ...,
        gitSubmodulesConfigOverride: CodeBuildGitSubmodulesConfig = ...,
        buildspecOverride: str = ...,
        insecureSslOverride: bool = ...,
        reportBuildStatusOverride: bool = ...,
        environmentTypeOverride: str = ...,
        imageOverride: str = ...,
        computeTypeOverride: str = ...,
        certificateOverride: str = ...,
        cacheOverride: CodeBuildProjectCache = ...,
        serviceRoleOverride: str = ...,
        privilegedModeOverride: bool = ...,
        timeoutInMinutesOverride: int = ...,
        queuedTimeoutInMinutesOverride: int = ...,
        idempotencyToken: str = ...,
        logsConfigOverride: CodeBuildLogsConfig = ...,
        registryCredentialOverride: CodeBuildRegistryCredential = ...,
        imagePullCredentialsTypeOverride: str = ...
    ) -> CodeBuildStartBuildOutput: ...

    def stop_build(self, *,
        id: str
    ) -> CodeBuildStopBuildOutput: ...

    def update_project(self, *,
        name: str,
        description: str = ...,
        source: CodeBuildProjectSource = ...,
        secondarySources: List[CodeBuildProjectSource] = ...,
        artifacts: CodeBuildProjectArtifacts = ...,
        secondaryArtifacts: List[CodeBuildProjectArtifacts] = ...,
        cache: CodeBuildProjectCache = ...,
        environment: CodeBuildProjectEnvironment = ...,
        serviceRole: str = ...,
        timeoutInMinutes: int = ...,
        queuedTimeoutInMinutes: int = ...,
        encryptionKey: str = ...,
        tags: List[CodeBuildTag] = ...,
        vpcConfig: CodeBuildVpcConfig = ...,
        badgeEnabled: bool = ...,
        logsConfig: CodeBuildLogsConfig = ...
    ) -> CodeBuildUpdateProjectOutput: ...

    def update_webhook(self, *,
        projectName: str,
        branchFilter: str = ...,
        rotateSecret: bool = ...,
        filterGroups: List[List[CodeBuildWebhookFilter]] = ...
    ) -> CodeBuildUpdateWebhookOutput: ...


CodeBuildBuildNotDeleted = TypedDict(
    'CodeBuildBuildNotDeleted', {
        'NonEmptyString': Optional[str],
        'String': Optional[str],
    }
)


CodeBuildBatchDeleteBuildsOutput = TypedDict(
    'CodeBuildBatchDeleteBuildsOutput', {
        'BuildIds': Optional[List[str]],
        'BuildsNotDeleted': Optional[List[CodeBuildBuildNotDeleted]],
    }
)


CodeBuildPhaseContext = TypedDict(
    'CodeBuildPhaseContext', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


CodeBuildBuildPhase = TypedDict(
    'CodeBuildBuildPhase', {
        'BuildPhaseType': Optional[str],
        'StatusType': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'WrapperLong': Optional[int],
        'PhaseContexts': Optional[List[CodeBuildPhaseContext]],
    }
)


CodeBuildGitSubmodulesConfig = TypedDict(
    'CodeBuildGitSubmodulesConfig', {
        'WrapperBoolean': bool,
    }
)


CodeBuildSourceAuth = TypedDict(
    'CodeBuildSourceAuth', {
        'SourceAuthType': str,
        'String': Optional[str],
    }
)


CodeBuildProjectSource = TypedDict(
    'CodeBuildProjectSource', {
        'SourceType': str,
        'String': Optional[str],
        'GitCloneDepth': Optional[int],
        'GitSubmodulesConfig': Optional[CodeBuildGitSubmodulesConfig],
        'String': Optional[str],
        'SourceAuth': Optional[CodeBuildSourceAuth],
        'WrapperBoolean': Optional[bool],
        'WrapperBoolean': Optional[bool],
        'String': Optional[str],
    }
)


CodeBuildProjectSourceVersion = TypedDict(
    'CodeBuildProjectSourceVersion', {
        'String': str,
        'String': str,
    }
)


CodeBuildBuildArtifacts = TypedDict(
    'CodeBuildBuildArtifacts', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'WrapperBoolean': Optional[bool],
        'WrapperBoolean': Optional[bool],
        'String': Optional[str],
    }
)


CodeBuildProjectCache = TypedDict(
    'CodeBuildProjectCache', {
        'CacheType': str,
        'String': Optional[str],
        'ProjectCacheModes': Optional[List[str]],
    }
)


CodeBuildEnvironmentVariable = TypedDict(
    'CodeBuildEnvironmentVariable', {
        'NonEmptyString': str,
        'String': str,
        'EnvironmentVariableType': Optional[str],
    }
)


CodeBuildRegistryCredential = TypedDict(
    'CodeBuildRegistryCredential', {
        'NonEmptyString': str,
        'CredentialProviderType': str,
    }
)


CodeBuildProjectEnvironment = TypedDict(
    'CodeBuildProjectEnvironment', {
        'EnvironmentType': str,
        'NonEmptyString': str,
        'ComputeType': str,
        'EnvironmentVariables': Optional[List[CodeBuildEnvironmentVariable]],
        'WrapperBoolean': Optional[bool],
        'String': Optional[str],
        'RegistryCredential': Optional[CodeBuildRegistryCredential],
        'ImagePullCredentialsType': Optional[str],
    }
)


CodeBuildCloudWatchLogsConfig = TypedDict(
    'CodeBuildCloudWatchLogsConfig', {
        'LogsConfigStatusType': str,
        'String': Optional[str],
        'String': Optional[str],
    }
)


CodeBuildS3LogsConfig = TypedDict(
    'CodeBuildS3LogsConfig', {
        'LogsConfigStatusType': str,
        'String': Optional[str],
        'WrapperBoolean': Optional[bool],
    }
)


CodeBuildLogsLocation = TypedDict(
    'CodeBuildLogsLocation', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'CloudWatchLogsConfig': Optional[CodeBuildCloudWatchLogsConfig],
        'S3LogsConfig': Optional[CodeBuildS3LogsConfig],
    }
)


CodeBuildVpcConfig = TypedDict(
    'CodeBuildVpcConfig', {
        'NonEmptyString': Optional[str],
        'Subnets': Optional[List[str]],
        'SecurityGroupIds': Optional[List[str]],
    }
)


CodeBuildNetworkInterface = TypedDict(
    'CodeBuildNetworkInterface', {
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
    }
)


CodeBuildBuild = TypedDict(
    'CodeBuildBuild', {
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'String': Optional[str],
        'StatusType': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'BuildPhases': Optional[List[CodeBuildBuildPhase]],
        'ProjectSource': Optional[CodeBuildProjectSource],
        'ProjectSources': Optional[List[CodeBuildProjectSource]],
        'ProjectSecondarySourceVersions': Optional[List[CodeBuildProjectSourceVersion]],
        'BuildArtifacts': Optional[CodeBuildBuildArtifacts],
        'BuildArtifactsList': Optional[List[CodeBuildBuildArtifacts]],
        'ProjectCache': Optional[CodeBuildProjectCache],
        'ProjectEnvironment': Optional[CodeBuildProjectEnvironment],
        'NonEmptyString': Optional[str],
        'LogsLocation': Optional[CodeBuildLogsLocation],
        'WrapperInt': Optional[int],
        'WrapperInt': Optional[int],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'VpcConfig': Optional[CodeBuildVpcConfig],
        'NetworkInterface': Optional[CodeBuildNetworkInterface],
        'NonEmptyString': Optional[str],
    }
)


CodeBuildBatchGetBuildsOutput = TypedDict(
    'CodeBuildBatchGetBuildsOutput', {
        'Builds': Optional[List[CodeBuildBuild]],
        'BuildIds': Optional[List[str]],
    }
)


CodeBuildProjectArtifacts = TypedDict(
    'CodeBuildProjectArtifacts', {
        'ArtifactsType': str,
        'String': Optional[str],
        'String': Optional[str],
        'ArtifactNamespace': Optional[str],
        'String': Optional[str],
        'ArtifactPackaging': Optional[str],
        'WrapperBoolean': Optional[bool],
        'WrapperBoolean': Optional[bool],
        'String': Optional[str],
    }
)


CodeBuildTag = TypedDict(
    'CodeBuildTag', {
        'KeyInput': Optional[str],
        'ValueInput': Optional[str],
    }
)


CodeBuildWebhookFilter = TypedDict(
    'CodeBuildWebhookFilter', {
        'WebhookFilterType': str,
        'String': str,
        'WrapperBoolean': Optional[bool],
    }
)


CodeBuildWebhook = TypedDict(
    'CodeBuildWebhook', {
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'String': Optional[str],
        'FilterGroups': Optional[List[List[CodeBuildWebhookFilter]]],
        'Timestamp': Optional[datetime.datetime],
    }
)


CodeBuildProjectBadge = TypedDict(
    'CodeBuildProjectBadge', {
        'Boolean': Optional[bool],
        'String': Optional[str],
    }
)


CodeBuildLogsConfig = TypedDict(
    'CodeBuildLogsConfig', {
        'CloudWatchLogsConfig': Optional[CodeBuildCloudWatchLogsConfig],
        'S3LogsConfig': Optional[CodeBuildS3LogsConfig],
    }
)


CodeBuildProject = TypedDict(
    'CodeBuildProject', {
        'ProjectName': Optional[str],
        'String': Optional[str],
        'ProjectDescription': Optional[str],
        'ProjectSource': Optional[CodeBuildProjectSource],
        'ProjectSources': Optional[List[CodeBuildProjectSource]],
        'ProjectArtifacts': Optional[CodeBuildProjectArtifacts],
        'ProjectArtifactsList': Optional[List[CodeBuildProjectArtifacts]],
        'ProjectCache': Optional[CodeBuildProjectCache],
        'ProjectEnvironment': Optional[CodeBuildProjectEnvironment],
        'NonEmptyString': Optional[str],
        'TimeOut': Optional[int],
        'TimeOut': Optional[int],
        'NonEmptyString': Optional[str],
        'TagList': Optional[List[CodeBuildTag]],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Webhook': Optional[CodeBuildWebhook],
        'VpcConfig': Optional[CodeBuildVpcConfig],
        'ProjectBadge': Optional[CodeBuildProjectBadge],
        'LogsConfig': Optional[CodeBuildLogsConfig],
    }
)


CodeBuildBatchGetProjectsOutput = TypedDict(
    'CodeBuildBatchGetProjectsOutput', {
        'Projects': Optional[List[CodeBuildProject]],
        'ProjectNames': Optional[List[str]],
    }
)


CodeBuildCreateProjectOutput = TypedDict(
    'CodeBuildCreateProjectOutput', {
        'Project': Optional[CodeBuildProject],
    }
)


CodeBuildCreateWebhookOutput = TypedDict(
    'CodeBuildCreateWebhookOutput', {
        'Webhook': Optional[CodeBuildWebhook],
    }
)


CodeBuildDeleteProjectOutput = TypedDict(
    'CodeBuildDeleteProjectOutput', {
    }
)


CodeBuildDeleteSourceCredentialsOutput = TypedDict(
    'CodeBuildDeleteSourceCredentialsOutput', {
        'NonEmptyString': Optional[str],
    }
)


CodeBuildDeleteWebhookOutput = TypedDict(
    'CodeBuildDeleteWebhookOutput', {
    }
)


CodeBuildImportSourceCredentialsOutput = TypedDict(
    'CodeBuildImportSourceCredentialsOutput', {
        'NonEmptyString': Optional[str],
    }
)


CodeBuildInvalidateProjectCacheOutput = TypedDict(
    'CodeBuildInvalidateProjectCacheOutput', {
    }
)


CodeBuildListBuildsOutput = TypedDict(
    'CodeBuildListBuildsOutput', {
        'BuildIds': Optional[List[str]],
        'String': Optional[str],
    }
)


CodeBuildListBuildsForProjectOutput = TypedDict(
    'CodeBuildListBuildsForProjectOutput', {
        'BuildIds': Optional[List[str]],
        'String': Optional[str],
    }
)


CodeBuildEnvironmentImage = TypedDict(
    'CodeBuildEnvironmentImage', {
        'String': Optional[str],
        'String': Optional[str],
        'ImageVersions': Optional[List[str]],
    }
)


CodeBuildEnvironmentLanguage = TypedDict(
    'CodeBuildEnvironmentLanguage', {
        'LanguageType': Optional[str],
        'EnvironmentImages': Optional[List[CodeBuildEnvironmentImage]],
    }
)


CodeBuildEnvironmentPlatform = TypedDict(
    'CodeBuildEnvironmentPlatform', {
        'PlatformType': Optional[str],
        'EnvironmentLanguages': Optional[List[CodeBuildEnvironmentLanguage]],
    }
)


CodeBuildListCuratedEnvironmentImagesOutput = TypedDict(
    'CodeBuildListCuratedEnvironmentImagesOutput', {
        'EnvironmentPlatforms': Optional[List[CodeBuildEnvironmentPlatform]],
    }
)


CodeBuildListProjectsOutput = TypedDict(
    'CodeBuildListProjectsOutput', {
        'String': Optional[str],
        'ProjectNames': Optional[List[str]],
    }
)


CodeBuildSourceCredentialsInfo = TypedDict(
    'CodeBuildSourceCredentialsInfo', {
        'NonEmptyString': Optional[str],
        'ServerType': Optional[str],
        'AuthType': Optional[str],
    }
)


CodeBuildListSourceCredentialsOutput = TypedDict(
    'CodeBuildListSourceCredentialsOutput', {
        'SourceCredentialsInfos': Optional[List[CodeBuildSourceCredentialsInfo]],
    }
)


CodeBuildStartBuildOutput = TypedDict(
    'CodeBuildStartBuildOutput', {
        'Build': Optional[CodeBuildBuild],
    }
)


CodeBuildStopBuildOutput = TypedDict(
    'CodeBuildStopBuildOutput', {
        'Build': Optional[CodeBuildBuild],
    }
)


CodeBuildUpdateProjectOutput = TypedDict(
    'CodeBuildUpdateProjectOutput', {
        'Project': Optional[CodeBuildProject],
    }
)


CodeBuildUpdateWebhookOutput = TypedDict(
    'CodeBuildUpdateWebhookOutput', {
        'Webhook': Optional[CodeBuildWebhook],
    }
)


class CodeCommit(BaseClient):
    def batch_get_repositories(self, *,
        repositoryNames: List[str]
    ) -> CodeCommitBatchGetRepositoriesOutput: ...

    def create_branch(self, *,
        repositoryName: str,
        branchName: str,
        commitId: str
    ): ...

    def create_commit(self, *,
        repositoryName: str,
        branchName: str,
        parentCommitId: str = ...,
        authorName: str = ...,
        email: str = ...,
        commitMessage: str = ...,
        keepEmptyFolders: bool = ...,
        putFiles: List[CodeCommitPutFileEntry] = ...,
        deleteFiles: List[CodeCommitDeleteFileEntry] = ...,
        setFileModes: List[CodeCommitSetFileModeEntry] = ...
    ) -> CodeCommitCreateCommitOutput: ...

    def create_pull_request(self, *,
        title: str,
        targets: List[CodeCommitTarget],
        description: str = ...,
        clientRequestToken: str = ...
    ) -> CodeCommitCreatePullRequestOutput: ...

    def create_repository(self, *,
        repositoryName: str,
        repositoryDescription: str = ...
    ) -> CodeCommitCreateRepositoryOutput: ...

    def delete_branch(self, *,
        repositoryName: str,
        branchName: str
    ) -> CodeCommitDeleteBranchOutput: ...

    def delete_comment_content(self, *,
        commentId: str
    ) -> CodeCommitDeleteCommentContentOutput: ...

    def delete_file(self, *,
        repositoryName: str,
        branchName: str,
        filePath: str,
        parentCommitId: str,
        keepEmptyFolders: bool = ...,
        commitMessage: str = ...,
        name: str = ...,
        email: str = ...
    ) -> CodeCommitDeleteFileOutput: ...

    def delete_repository(self, *,
        repositoryName: str
    ) -> CodeCommitDeleteRepositoryOutput: ...

    def describe_pull_request_events(self, *,
        pullRequestId: str,
        pullRequestEventType: str = ...,
        actorArn: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> CodeCommitDescribePullRequestEventsOutput: ...

    def get_blob(self, *,
        repositoryName: str,
        blobId: str
    ) -> CodeCommitGetBlobOutput: ...

    def get_branch(self, *,
        repositoryName: str = ...,
        branchName: str = ...
    ) -> CodeCommitGetBranchOutput: ...

    def get_comment(self, *,
        commentId: str
    ) -> CodeCommitGetCommentOutput: ...

    def get_comments_for_compared_commit(self, *,
        repositoryName: str,
        afterCommitId: str,
        beforeCommitId: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> CodeCommitGetCommentsForComparedCommitOutput: ...

    def get_comments_for_pull_request(self, *,
        pullRequestId: str,
        repositoryName: str = ...,
        beforeCommitId: str = ...,
        afterCommitId: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> CodeCommitGetCommentsForPullRequestOutput: ...

    def get_commit(self, *,
        repositoryName: str,
        commitId: str
    ) -> CodeCommitGetCommitOutput: ...

    def get_differences(self, *,
        repositoryName: str,
        afterCommitSpecifier: str,
        beforeCommitSpecifier: str = ...,
        beforePath: str = ...,
        afterPath: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> CodeCommitGetDifferencesOutput: ...

    def get_file(self, *,
        repositoryName: str,
        filePath: str,
        commitSpecifier: str = ...
    ) -> CodeCommitGetFileOutput: ...

    def get_folder(self, *,
        repositoryName: str,
        folderPath: str,
        commitSpecifier: str = ...
    ) -> CodeCommitGetFolderOutput: ...

    def get_merge_conflicts(self, *,
        repositoryName: str,
        destinationCommitSpecifier: str,
        sourceCommitSpecifier: str,
        mergeOption: str
    ) -> CodeCommitGetMergeConflictsOutput: ...

    def get_pull_request(self, *,
        pullRequestId: str
    ) -> CodeCommitGetPullRequestOutput: ...

    def get_repository(self, *,
        repositoryName: str
    ) -> CodeCommitGetRepositoryOutput: ...

    def get_repository_triggers(self, *,
        repositoryName: str
    ) -> CodeCommitGetRepositoryTriggersOutput: ...

    def list_branches(self, *,
        repositoryName: str,
        nextToken: str = ...
    ) -> CodeCommitListBranchesOutput: ...

    def list_pull_requests(self, *,
        repositoryName: str,
        authorArn: str = ...,
        pullRequestStatus: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> CodeCommitListPullRequestsOutput: ...

    def list_repositories(self, *,
        nextToken: str = ...,
        sortBy: str = ...,
        order: str = ...
    ) -> CodeCommitListRepositoriesOutput: ...

    def merge_pull_request_by_fast_forward(self, *,
        pullRequestId: str,
        repositoryName: str,
        sourceCommitId: str = ...
    ) -> CodeCommitMergePullRequestByFastForwardOutput: ...

    def post_comment_for_compared_commit(self, *,
        repositoryName: str,
        afterCommitId: str,
        content: str,
        beforeCommitId: str = ...,
        location: CodeCommitLocation = ...,
        clientRequestToken: str = ...
    ) -> CodeCommitPostCommentForComparedCommitOutput: ...

    def post_comment_for_pull_request(self, *,
        pullRequestId: str,
        repositoryName: str,
        beforeCommitId: str,
        afterCommitId: str,
        content: str,
        location: CodeCommitLocation = ...,
        clientRequestToken: str = ...
    ) -> CodeCommitPostCommentForPullRequestOutput: ...

    def post_comment_reply(self, *,
        inReplyTo: str,
        content: str,
        clientRequestToken: str = ...
    ) -> CodeCommitPostCommentReplyOutput: ...

    def put_file(self, *,
        repositoryName: str,
        branchName: str,
        fileContent: bytes,
        filePath: str,
        fileMode: str = ...,
        parentCommitId: str = ...,
        commitMessage: str = ...,
        name: str = ...,
        email: str = ...
    ) -> CodeCommitPutFileOutput: ...

    def put_repository_triggers(self, *,
        repositoryName: str,
        triggers: List[CodeCommitRepositoryTrigger]
    ) -> CodeCommitPutRepositoryTriggersOutput: ...

    def test_repository_triggers(self, *,
        repositoryName: str,
        triggers: List[CodeCommitRepositoryTrigger]
    ) -> CodeCommitTestRepositoryTriggersOutput: ...

    def update_comment(self, *,
        commentId: str,
        content: str
    ) -> CodeCommitUpdateCommentOutput: ...

    def update_default_branch(self, *,
        repositoryName: str,
        defaultBranchName: str
    ): ...

    def update_pull_request_description(self, *,
        pullRequestId: str,
        description: str
    ) -> CodeCommitUpdatePullRequestDescriptionOutput: ...

    def update_pull_request_status(self, *,
        pullRequestId: str,
        pullRequestStatus: str
    ) -> CodeCommitUpdatePullRequestStatusOutput: ...

    def update_pull_request_title(self, *,
        pullRequestId: str,
        title: str
    ) -> CodeCommitUpdatePullRequestTitleOutput: ...

    def update_repository_description(self, *,
        repositoryName: str,
        repositoryDescription: str = ...
    ): ...

    def update_repository_name(self, *,
        oldName: str,
        newName: str
    ): ...


CodeCommitRepositoryMetadata = TypedDict(
    'CodeCommitRepositoryMetadata', {
        'AccountId': Optional[str],
        'RepositoryId': Optional[str],
        'RepositoryName': Optional[str],
        'RepositoryDescription': Optional[str],
        'BranchName': Optional[str],
        'LastModifiedDate': Optional[datetime.datetime],
        'CreationDate': Optional[datetime.datetime],
        'CloneUrlHttp': Optional[str],
        'CloneUrlSsh': Optional[str],
        'Arn': Optional[str],
    }
)


CodeCommitBatchGetRepositoriesOutput = TypedDict(
    'CodeCommitBatchGetRepositoriesOutput', {
        'RepositoryMetadataList': Optional[List[CodeCommitRepositoryMetadata]],
        'RepositoryNotFoundList': Optional[List[str]],
    }
)


CodeCommitSourceFileSpecifier = TypedDict(
    'CodeCommitSourceFileSpecifier', {
        'Path': str,
        'IsMove': Optional[bool],
    }
)


CodeCommitPutFileEntry = TypedDict(
    'CodeCommitPutFileEntry', {
        'Path': str,
        'FileModeTypeEnum': Optional[str],
        'FileContent': Optional[bytes],
        'SourceFileSpecifier': Optional[CodeCommitSourceFileSpecifier],
    }
)


CodeCommitDeleteFileEntry = TypedDict(
    'CodeCommitDeleteFileEntry', {
        'Path': str,
    }
)


CodeCommitSetFileModeEntry = TypedDict(
    'CodeCommitSetFileModeEntry', {
        'Path': str,
        'FileModeTypeEnum': str,
    }
)


CodeCommitFileMetadata = TypedDict(
    'CodeCommitFileMetadata', {
        'Path': Optional[str],
        'ObjectId': Optional[str],
        'FileModeTypeEnum': Optional[str],
    }
)


CodeCommitCreateCommitOutput = TypedDict(
    'CodeCommitCreateCommitOutput', {
        'ObjectId': Optional[str],
        'ObjectId': Optional[str],
        'FilesMetadata': Optional[List[CodeCommitFileMetadata]],
        'FilesMetadata': Optional[List[CodeCommitFileMetadata]],
        'FilesMetadata': Optional[List[CodeCommitFileMetadata]],
    }
)


CodeCommitTarget = TypedDict(
    'CodeCommitTarget', {
        'RepositoryName': str,
        'ReferenceName': str,
        'ReferenceName': Optional[str],
    }
)


CodeCommitMergeMetadata = TypedDict(
    'CodeCommitMergeMetadata', {
        'IsMerged': Optional[bool],
        'Arn': Optional[str],
    }
)


CodeCommitPullRequestTarget = TypedDict(
    'CodeCommitPullRequestTarget', {
        'RepositoryName': Optional[str],
        'ReferenceName': Optional[str],
        'ReferenceName': Optional[str],
        'CommitId': Optional[str],
        'CommitId': Optional[str],
        'CommitId': Optional[str],
        'MergeMetadata': Optional[CodeCommitMergeMetadata],
    }
)


CodeCommitPullRequest = TypedDict(
    'CodeCommitPullRequest', {
        'PullRequestId': Optional[str],
        'Title': Optional[str],
        'Description': Optional[str],
        'LastModifiedDate': Optional[datetime.datetime],
        'CreationDate': Optional[datetime.datetime],
        'PullRequestStatusEnum': Optional[str],
        'Arn': Optional[str],
        'PullRequestTargetList': Optional[List[CodeCommitPullRequestTarget]],
        'ClientRequestToken': Optional[str],
    }
)


CodeCommitCreatePullRequestOutput = TypedDict(
    'CodeCommitCreatePullRequestOutput', {
        'PullRequest': CodeCommitPullRequest,
    }
)


CodeCommitCreateRepositoryOutput = TypedDict(
    'CodeCommitCreateRepositoryOutput', {
        'RepositoryMetadata': Optional[CodeCommitRepositoryMetadata],
    }
)


CodeCommitBranchInfo = TypedDict(
    'CodeCommitBranchInfo', {
        'BranchName': Optional[str],
        'CommitId': Optional[str],
    }
)


CodeCommitDeleteBranchOutput = TypedDict(
    'CodeCommitDeleteBranchOutput', {
        'BranchInfo': Optional[CodeCommitBranchInfo],
    }
)


CodeCommitComment = TypedDict(
    'CodeCommitComment', {
        'CommentId': Optional[str],
        'Content': Optional[str],
        'CommentId': Optional[str],
        'CreationDate': Optional[datetime.datetime],
        'LastModifiedDate': Optional[datetime.datetime],
        'Arn': Optional[str],
        'IsCommentDeleted': Optional[bool],
        'ClientRequestToken': Optional[str],
    }
)


CodeCommitDeleteCommentContentOutput = TypedDict(
    'CodeCommitDeleteCommentContentOutput', {
        'Comment': Optional[CodeCommitComment],
    }
)


CodeCommitDeleteFileOutput = TypedDict(
    'CodeCommitDeleteFileOutput', {
        'ObjectId': str,
        'ObjectId': str,
        'ObjectId': str,
        'Path': str,
    }
)


CodeCommitDeleteRepositoryOutput = TypedDict(
    'CodeCommitDeleteRepositoryOutput', {
        'RepositoryId': Optional[str],
    }
)


CodeCommitPullRequestCreatedEventMetadata = TypedDict(
    'CodeCommitPullRequestCreatedEventMetadata', {
        'RepositoryName': Optional[str],
        'CommitId': Optional[str],
        'CommitId': Optional[str],
        'CommitId': Optional[str],
    }
)


CodeCommitPullRequestStatusChangedEventMetadata = TypedDict(
    'CodeCommitPullRequestStatusChangedEventMetadata', {
        'PullRequestStatusEnum': Optional[str],
    }
)


CodeCommitPullRequestSourceReferenceUpdatedEventMetadata = TypedDict(
    'CodeCommitPullRequestSourceReferenceUpdatedEventMetadata', {
        'RepositoryName': Optional[str],
        'CommitId': Optional[str],
        'CommitId': Optional[str],
        'CommitId': Optional[str],
    }
)


CodeCommitPullRequestMergedStateChangedEventMetadata = TypedDict(
    'CodeCommitPullRequestMergedStateChangedEventMetadata', {
        'RepositoryName': Optional[str],
        'ReferenceName': Optional[str],
        'MergeMetadata': Optional[CodeCommitMergeMetadata],
    }
)


CodeCommitPullRequestEvent = TypedDict(
    'CodeCommitPullRequestEvent', {
        'PullRequestId': Optional[str],
        'EventDate': Optional[datetime.datetime],
        'PullRequestEventType': Optional[str],
        'Arn': Optional[str],
        'PullRequestCreatedEventMetadata': Optional[CodeCommitPullRequestCreatedEventMetadata],
        'PullRequestStatusChangedEventMetadata': Optional[CodeCommitPullRequestStatusChangedEventMetadata],
        'PullRequestSourceReferenceUpdatedEventMetadata': Optional[CodeCommitPullRequestSourceReferenceUpdatedEventMetadata],
        'PullRequestMergedStateChangedEventMetadata': Optional[CodeCommitPullRequestMergedStateChangedEventMetadata],
    }
)


CodeCommitDescribePullRequestEventsOutput = TypedDict(
    'CodeCommitDescribePullRequestEventsOutput', {
        'PullRequestEventList': List[CodeCommitPullRequestEvent],
        'NextToken': Optional[str],
    }
)


CodeCommitGetBlobOutput = TypedDict(
    'CodeCommitGetBlobOutput', {
        'blob': bytes,
    }
)


CodeCommitGetBranchOutput = TypedDict(
    'CodeCommitGetBranchOutput', {
        'BranchInfo': Optional[CodeCommitBranchInfo],
    }
)


CodeCommitGetCommentOutput = TypedDict(
    'CodeCommitGetCommentOutput', {
        'Comment': Optional[CodeCommitComment],
    }
)


CodeCommitLocation = TypedDict(
    'CodeCommitLocation', {
        'Path': Optional[str],
        'Position': Optional[int],
        'RelativeFileVersionEnum': Optional[str],
    }
)


CodeCommitCommentsForComparedCommit = TypedDict(
    'CodeCommitCommentsForComparedCommit', {
        'RepositoryName': Optional[str],
        'CommitId': Optional[str],
        'CommitId': Optional[str],
        'ObjectId': Optional[str],
        'ObjectId': Optional[str],
        'Location': Optional[CodeCommitLocation],
        'Comments': Optional[List[CodeCommitComment]],
    }
)


CodeCommitGetCommentsForComparedCommitOutput = TypedDict(
    'CodeCommitGetCommentsForComparedCommitOutput', {
        'CommentsForComparedCommitData': Optional[List[CodeCommitCommentsForComparedCommit]],
        'NextToken': Optional[str],
    }
)


CodeCommitCommentsForPullRequest = TypedDict(
    'CodeCommitCommentsForPullRequest', {
        'PullRequestId': Optional[str],
        'RepositoryName': Optional[str],
        'CommitId': Optional[str],
        'CommitId': Optional[str],
        'ObjectId': Optional[str],
        'ObjectId': Optional[str],
        'Location': Optional[CodeCommitLocation],
        'Comments': Optional[List[CodeCommitComment]],
    }
)


CodeCommitGetCommentsForPullRequestOutput = TypedDict(
    'CodeCommitGetCommentsForPullRequestOutput', {
        'CommentsForPullRequestData': Optional[List[CodeCommitCommentsForPullRequest]],
        'NextToken': Optional[str],
    }
)


CodeCommitUserInfo = TypedDict(
    'CodeCommitUserInfo', {
        'Name': Optional[str],
        'Email': Optional[str],
        'Date': Optional[str],
    }
)


CodeCommitCommit = TypedDict(
    'CodeCommitCommit', {
        'ObjectId': Optional[str],
        'ObjectId': Optional[str],
        'ParentList': Optional[List[str]],
        'Message': Optional[str],
        'UserInfo': Optional[CodeCommitUserInfo],
        'UserInfo': Optional[CodeCommitUserInfo],
        'AdditionalData': Optional[str],
    }
)


CodeCommitGetCommitOutput = TypedDict(
    'CodeCommitGetCommitOutput', {
        'Commit': CodeCommitCommit,
    }
)


CodeCommitBlobMetadata = TypedDict(
    'CodeCommitBlobMetadata', {
        'ObjectId': Optional[str],
        'Path': Optional[str],
        'Mode': Optional[str],
    }
)


CodeCommitDifference = TypedDict(
    'CodeCommitDifference', {
        'BlobMetadata': Optional[CodeCommitBlobMetadata],
        'BlobMetadata': Optional[CodeCommitBlobMetadata],
        'ChangeTypeEnum': Optional[str],
    }
)


CodeCommitGetDifferencesOutput = TypedDict(
    'CodeCommitGetDifferencesOutput', {
        'DifferenceList': Optional[List[CodeCommitDifference]],
        'NextToken': Optional[str],
    }
)


CodeCommitGetFileOutput = TypedDict(
    'CodeCommitGetFileOutput', {
        'ObjectId': str,
        'ObjectId': str,
        'Path': str,
        'FileModeTypeEnum': str,
        'ObjectSize': int,
        'FileContent': bytes,
    }
)


CodeCommitFolder = TypedDict(
    'CodeCommitFolder', {
        'ObjectId': Optional[str],
        'Path': Optional[str],
        'Path': Optional[str],
    }
)


CodeCommitFile = TypedDict(
    'CodeCommitFile', {
        'ObjectId': Optional[str],
        'Path': Optional[str],
        'Path': Optional[str],
        'FileModeTypeEnum': Optional[str],
    }
)


CodeCommitSymbolicLink = TypedDict(
    'CodeCommitSymbolicLink', {
        'ObjectId': Optional[str],
        'Path': Optional[str],
        'Path': Optional[str],
        'FileModeTypeEnum': Optional[str],
    }
)


CodeCommitSubModule = TypedDict(
    'CodeCommitSubModule', {
        'ObjectId': Optional[str],
        'Path': Optional[str],
        'Path': Optional[str],
    }
)


CodeCommitGetFolderOutput = TypedDict(
    'CodeCommitGetFolderOutput', {
        'ObjectId': str,
        'Path': str,
        'ObjectId': Optional[str],
        'FolderList': Optional[List[CodeCommitFolder]],
        'FileList': Optional[List[CodeCommitFile]],
        'SymbolicLinkList': Optional[List[CodeCommitSymbolicLink]],
        'SubModuleList': Optional[List[CodeCommitSubModule]],
    }
)


CodeCommitGetMergeConflictsOutput = TypedDict(
    'CodeCommitGetMergeConflictsOutput', {
        'IsMergeable': bool,
        'CommitId': str,
        'CommitId': str,
    }
)


CodeCommitGetPullRequestOutput = TypedDict(
    'CodeCommitGetPullRequestOutput', {
        'PullRequest': CodeCommitPullRequest,
    }
)


CodeCommitGetRepositoryOutput = TypedDict(
    'CodeCommitGetRepositoryOutput', {
        'RepositoryMetadata': Optional[CodeCommitRepositoryMetadata],
    }
)


CodeCommitRepositoryTrigger = TypedDict(
    'CodeCommitRepositoryTrigger', {
        'RepositoryTriggerName': str,
        'Arn': str,
        'RepositoryTriggerEventList': List[str],
        'RepositoryTriggerCustomData': Optional[str],
        'BranchNameList': Optional[List[str]],
    }
)


CodeCommitGetRepositoryTriggersOutput = TypedDict(
    'CodeCommitGetRepositoryTriggersOutput', {
        'RepositoryTriggersConfigurationId': Optional[str],
        'RepositoryTriggersList': Optional[List[CodeCommitRepositoryTrigger]],
    }
)


CodeCommitListBranchesOutput = TypedDict(
    'CodeCommitListBranchesOutput', {
        'BranchNameList': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


CodeCommitListPullRequestsOutput = TypedDict(
    'CodeCommitListPullRequestsOutput', {
        'PullRequestIdList': List[str],
        'NextToken': Optional[str],
    }
)


CodeCommitRepositoryNameIdPair = TypedDict(
    'CodeCommitRepositoryNameIdPair', {
        'RepositoryName': Optional[str],
        'RepositoryId': Optional[str],
    }
)


CodeCommitListRepositoriesOutput = TypedDict(
    'CodeCommitListRepositoriesOutput', {
        'RepositoryNameIdPairList': Optional[List[CodeCommitRepositoryNameIdPair]],
        'NextToken': Optional[str],
    }
)


CodeCommitMergePullRequestByFastForwardOutput = TypedDict(
    'CodeCommitMergePullRequestByFastForwardOutput', {
        'PullRequest': Optional[CodeCommitPullRequest],
    }
)


CodeCommitPostCommentForComparedCommitOutput = TypedDict(
    'CodeCommitPostCommentForComparedCommitOutput', {
        'RepositoryName': Optional[str],
        'CommitId': Optional[str],
        'CommitId': Optional[str],
        'ObjectId': Optional[str],
        'ObjectId': Optional[str],
        'Location': Optional[CodeCommitLocation],
        'Comment': Optional[CodeCommitComment],
    }
)


CodeCommitPostCommentForPullRequestOutput = TypedDict(
    'CodeCommitPostCommentForPullRequestOutput', {
        'RepositoryName': Optional[str],
        'PullRequestId': Optional[str],
        'CommitId': Optional[str],
        'CommitId': Optional[str],
        'ObjectId': Optional[str],
        'ObjectId': Optional[str],
        'Location': Optional[CodeCommitLocation],
        'Comment': Optional[CodeCommitComment],
    }
)


CodeCommitPostCommentReplyOutput = TypedDict(
    'CodeCommitPostCommentReplyOutput', {
        'Comment': Optional[CodeCommitComment],
    }
)


CodeCommitPutFileOutput = TypedDict(
    'CodeCommitPutFileOutput', {
        'ObjectId': str,
        'ObjectId': str,
        'ObjectId': str,
    }
)


CodeCommitPutRepositoryTriggersOutput = TypedDict(
    'CodeCommitPutRepositoryTriggersOutput', {
        'RepositoryTriggersConfigurationId': Optional[str],
    }
)


CodeCommitRepositoryTriggerExecutionFailure = TypedDict(
    'CodeCommitRepositoryTriggerExecutionFailure', {
        'RepositoryTriggerName': Optional[str],
        'RepositoryTriggerExecutionFailureMessage': Optional[str],
    }
)


CodeCommitTestRepositoryTriggersOutput = TypedDict(
    'CodeCommitTestRepositoryTriggersOutput', {
        'RepositoryTriggerNameList': Optional[List[str]],
        'RepositoryTriggerExecutionFailureList': Optional[List[CodeCommitRepositoryTriggerExecutionFailure]],
    }
)


CodeCommitUpdateCommentOutput = TypedDict(
    'CodeCommitUpdateCommentOutput', {
        'Comment': Optional[CodeCommitComment],
    }
)


CodeCommitUpdatePullRequestDescriptionOutput = TypedDict(
    'CodeCommitUpdatePullRequestDescriptionOutput', {
        'PullRequest': CodeCommitPullRequest,
    }
)


CodeCommitUpdatePullRequestStatusOutput = TypedDict(
    'CodeCommitUpdatePullRequestStatusOutput', {
        'PullRequest': CodeCommitPullRequest,
    }
)


CodeCommitUpdatePullRequestTitleOutput = TypedDict(
    'CodeCommitUpdatePullRequestTitleOutput', {
        'PullRequest': CodeCommitPullRequest,
    }
)


class CodeDeploy(BaseClient):
    def add_tags_to_on_premises_instances(self, *,
        tags: List[CodeDeployTag],
        instanceNames: List[str]
    ): ...

    def batch_get_application_revisions(self, *,
        applicationName: str,
        revisions: List[CodeDeployRevisionLocation]
    ) -> CodeDeployBatchGetApplicationRevisionsOutput: ...

    def batch_get_applications(self, *,
        applicationNames: List[str]
    ) -> CodeDeployBatchGetApplicationsOutput: ...

    def batch_get_deployment_groups(self, *,
        applicationName: str,
        deploymentGroupNames: List[str]
    ) -> CodeDeployBatchGetDeploymentGroupsOutput: ...

    def batch_get_deployment_instances(self, *,
        deploymentId: str,
        instanceIds: List[str]
    ) -> CodeDeployBatchGetDeploymentInstancesOutput: ...

    def batch_get_deployment_targets(self, *,
        deploymentId: str = ...,
        targetIds: List[str] = ...
    ) -> CodeDeployBatchGetDeploymentTargetsOutput: ...

    def batch_get_deployments(self, *,
        deploymentIds: List[str]
    ) -> CodeDeployBatchGetDeploymentsOutput: ...

    def batch_get_on_premises_instances(self, *,
        instanceNames: List[str]
    ) -> CodeDeployBatchGetOnPremisesInstancesOutput: ...

    def continue_deployment(self, *,
        deploymentId: str = ...,
        deploymentWaitType: str = ...
    ): ...

    def create_application(self, *,
        applicationName: str,
        computePlatform: str = ...
    ) -> CodeDeployCreateApplicationOutput: ...

    def create_deployment(self, *,
        applicationName: str,
        deploymentGroupName: str = ...,
        revision: CodeDeployRevisionLocation = ...,
        deploymentConfigName: str = ...,
        description: str = ...,
        ignoreApplicationStopFailures: bool = ...,
        targetInstances: CodeDeployTargetInstances = ...,
        autoRollbackConfiguration: CodeDeployAutoRollbackConfiguration = ...,
        updateOutdatedInstancesOnly: bool = ...,
        fileExistsBehavior: str = ...
    ) -> CodeDeployCreateDeploymentOutput: ...

    def create_deployment_config(self, *,
        deploymentConfigName: str,
        minimumHealthyHosts: CodeDeployMinimumHealthyHosts = ...,
        trafficRoutingConfig: CodeDeployTrafficRoutingConfig = ...,
        computePlatform: str = ...
    ) -> CodeDeployCreateDeploymentConfigOutput: ...

    def create_deployment_group(self, *,
        applicationName: str,
        deploymentGroupName: str,
        serviceRoleArn: str,
        deploymentConfigName: str = ...,
        ec2TagFilters: List[CodeDeployEC2TagFilter] = ...,
        onPremisesInstanceTagFilters: List[CodeDeployTagFilter] = ...,
        autoScalingGroups: List[str] = ...,
        triggerConfigurations: List[CodeDeployTriggerConfig] = ...,
        alarmConfiguration: CodeDeployAlarmConfiguration = ...,
        autoRollbackConfiguration: CodeDeployAutoRollbackConfiguration = ...,
        deploymentStyle: CodeDeployDeploymentStyle = ...,
        blueGreenDeploymentConfiguration: CodeDeployBlueGreenDeploymentConfiguration = ...,
        loadBalancerInfo: CodeDeployLoadBalancerInfo = ...,
        ec2TagSet: CodeDeployEC2TagSet = ...,
        ecsServices: List[CodeDeployECSService] = ...,
        onPremisesTagSet: CodeDeployOnPremisesTagSet = ...
    ) -> CodeDeployCreateDeploymentGroupOutput: ...

    def delete_application(self, *,
        applicationName: str
    ): ...

    def delete_deployment_config(self, *,
        deploymentConfigName: str
    ): ...

    def delete_deployment_group(self, *,
        applicationName: str,
        deploymentGroupName: str
    ) -> CodeDeployDeleteDeploymentGroupOutput: ...

    def delete_git_hub_account_token(self, *,
        tokenName: str = ...
    ) -> CodeDeployDeleteGitHubAccountTokenOutput: ...

    def deregister_on_premises_instance(self, *,
        instanceName: str
    ): ...

    def get_application(self, *,
        applicationName: str
    ) -> CodeDeployGetApplicationOutput: ...

    def get_application_revision(self, *,
        applicationName: str,
        revision: CodeDeployRevisionLocation
    ) -> CodeDeployGetApplicationRevisionOutput: ...

    def get_deployment(self, *,
        deploymentId: str
    ) -> CodeDeployGetDeploymentOutput: ...

    def get_deployment_config(self, *,
        deploymentConfigName: str
    ) -> CodeDeployGetDeploymentConfigOutput: ...

    def get_deployment_group(self, *,
        applicationName: str,
        deploymentGroupName: str
    ) -> CodeDeployGetDeploymentGroupOutput: ...

    def get_deployment_instance(self, *,
        deploymentId: str,
        instanceId: str
    ) -> CodeDeployGetDeploymentInstanceOutput: ...

    def get_deployment_target(self, *,
        deploymentId: str = ...,
        targetId: str = ...
    ) -> CodeDeployGetDeploymentTargetOutput: ...

    def get_on_premises_instance(self, *,
        instanceName: str
    ) -> CodeDeployGetOnPremisesInstanceOutput: ...

    def list_application_revisions(self, *,
        applicationName: str,
        sortBy: str = ...,
        sortOrder: str = ...,
        s3Bucket: str = ...,
        s3KeyPrefix: str = ...,
        deployed: str = ...,
        nextToken: str = ...
    ) -> CodeDeployListApplicationRevisionsOutput: ...

    def list_applications(self, *,
        nextToken: str = ...
    ) -> CodeDeployListApplicationsOutput: ...

    def list_deployment_configs(self, *,
        nextToken: str = ...
    ) -> CodeDeployListDeploymentConfigsOutput: ...

    def list_deployment_groups(self, *,
        applicationName: str,
        nextToken: str = ...
    ) -> CodeDeployListDeploymentGroupsOutput: ...

    def list_deployment_instances(self, *,
        deploymentId: str,
        nextToken: str = ...,
        instanceStatusFilter: List[str] = ...,
        instanceTypeFilter: List[str] = ...
    ) -> CodeDeployListDeploymentInstancesOutput: ...

    def list_deployment_targets(self, *,
        deploymentId: str = ...,
        nextToken: str = ...,
        targetFilters: Dict[str, List[str]] = ...
    ) -> CodeDeployListDeploymentTargetsOutput: ...

    def list_deployments(self, *,
        applicationName: str = ...,
        deploymentGroupName: str = ...,
        includeOnlyStatuses: List[str] = ...,
        createTimeRange: CodeDeployTimeRange = ...,
        nextToken: str = ...
    ) -> CodeDeployListDeploymentsOutput: ...

    def list_git_hub_account_token_names(self, *,
        nextToken: str = ...
    ) -> CodeDeployListGitHubAccountTokenNamesOutput: ...

    def list_on_premises_instances(self, *,
        registrationStatus: str = ...,
        tagFilters: List[CodeDeployTagFilter] = ...,
        nextToken: str = ...
    ) -> CodeDeployListOnPremisesInstancesOutput: ...

    def put_lifecycle_event_hook_execution_status(self, *,
        deploymentId: str = ...,
        lifecycleEventHookExecutionId: str = ...,
        status: str = ...
    ) -> CodeDeployPutLifecycleEventHookExecutionStatusOutput: ...

    def register_application_revision(self, *,
        applicationName: str,
        revision: CodeDeployRevisionLocation,
        description: str = ...
    ): ...

    def register_on_premises_instance(self, *,
        instanceName: str,
        iamSessionArn: str = ...,
        iamUserArn: str = ...
    ): ...

    def remove_tags_from_on_premises_instances(self, *,
        tags: List[CodeDeployTag],
        instanceNames: List[str]
    ): ...

    def skip_wait_time_for_instance_termination(self, *,
        deploymentId: str = ...
    ): ...

    def stop_deployment(self, *,
        deploymentId: str,
        autoRollbackEnabled: bool = ...
    ) -> CodeDeployStopDeploymentOutput: ...

    def update_application(self, *,
        applicationName: str = ...,
        newApplicationName: str = ...
    ): ...

    def update_deployment_group(self, *,
        applicationName: str,
        currentDeploymentGroupName: str,
        newDeploymentGroupName: str = ...,
        deploymentConfigName: str = ...,
        ec2TagFilters: List[CodeDeployEC2TagFilter] = ...,
        onPremisesInstanceTagFilters: List[CodeDeployTagFilter] = ...,
        autoScalingGroups: List[str] = ...,
        serviceRoleArn: str = ...,
        triggerConfigurations: List[CodeDeployTriggerConfig] = ...,
        alarmConfiguration: CodeDeployAlarmConfiguration = ...,
        autoRollbackConfiguration: CodeDeployAutoRollbackConfiguration = ...,
        deploymentStyle: CodeDeployDeploymentStyle = ...,
        blueGreenDeploymentConfiguration: CodeDeployBlueGreenDeploymentConfiguration = ...,
        loadBalancerInfo: CodeDeployLoadBalancerInfo = ...,
        ec2TagSet: CodeDeployEC2TagSet = ...,
        ecsServices: List[CodeDeployECSService] = ...,
        onPremisesTagSet: CodeDeployOnPremisesTagSet = ...
    ) -> CodeDeployUpdateDeploymentGroupOutput: ...


CodeDeployTag = TypedDict(
    'CodeDeployTag', {
        'Key': Optional[str],
        'Value': Optional[str],
    }
)


CodeDeployS3Location = TypedDict(
    'CodeDeployS3Location', {
        'S3Bucket': Optional[str],
        'S3Key': Optional[str],
        'BundleType': Optional[str],
        'VersionId': Optional[str],
        'ETag': Optional[str],
    }
)


CodeDeployGitHubLocation = TypedDict(
    'CodeDeployGitHubLocation', {
        'Repository': Optional[str],
        'CommitId': Optional[str],
    }
)


CodeDeployRawString = TypedDict(
    'CodeDeployRawString', {
        'RawStringContent': Optional[str],
        'RawStringSha256': Optional[str],
    }
)


CodeDeployAppSpecContent = TypedDict(
    'CodeDeployAppSpecContent', {
        'RawStringContent': Optional[str],
        'RawStringSha256': Optional[str],
    }
)


CodeDeployRevisionLocation = TypedDict(
    'CodeDeployRevisionLocation', {
        'RevisionLocationType': Optional[str],
        'S3Location': Optional[CodeDeployS3Location],
        'GitHubLocation': Optional[CodeDeployGitHubLocation],
        'RawString': Optional[CodeDeployRawString],
        'AppSpecContent': Optional[CodeDeployAppSpecContent],
    }
)


CodeDeployGenericRevisionInfo = TypedDict(
    'CodeDeployGenericRevisionInfo', {
        'Description': Optional[str],
        'DeploymentGroupsList': Optional[List[str]],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


CodeDeployRevisionInfo = TypedDict(
    'CodeDeployRevisionInfo', {
        'RevisionLocation': Optional[CodeDeployRevisionLocation],
        'GenericRevisionInfo': Optional[CodeDeployGenericRevisionInfo],
    }
)


CodeDeployBatchGetApplicationRevisionsOutput = TypedDict(
    'CodeDeployBatchGetApplicationRevisionsOutput', {
        'ApplicationName': Optional[str],
        'ErrorMessage': Optional[str],
        'RevisionInfoList': Optional[List[CodeDeployRevisionInfo]],
    }
)


CodeDeployApplicationInfo = TypedDict(
    'CodeDeployApplicationInfo', {
        'ApplicationId': Optional[str],
        'ApplicationName': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Boolean': Optional[bool],
        'GitHubAccountTokenName': Optional[str],
        'ComputePlatform': Optional[str],
    }
)


CodeDeployBatchGetApplicationsOutput = TypedDict(
    'CodeDeployBatchGetApplicationsOutput', {
        'ApplicationsInfoList': Optional[List[CodeDeployApplicationInfo]],
    }
)


CodeDeployEC2TagFilter = TypedDict(
    'CodeDeployEC2TagFilter', {
        'Key': Optional[str],
        'Value': Optional[str],
        'EC2TagFilterType': Optional[str],
    }
)


CodeDeployTagFilter = TypedDict(
    'CodeDeployTagFilter', {
        'Key': Optional[str],
        'Value': Optional[str],
        'TagFilterType': Optional[str],
    }
)


CodeDeployAutoScalingGroup = TypedDict(
    'CodeDeployAutoScalingGroup', {
        'AutoScalingGroupName': Optional[str],
        'AutoScalingGroupHook': Optional[str],
    }
)


CodeDeployTriggerConfig = TypedDict(
    'CodeDeployTriggerConfig', {
        'TriggerName': Optional[str],
        'TriggerTargetArn': Optional[str],
        'TriggerEventTypeList': Optional[List[str]],
    }
)


CodeDeployAlarm = TypedDict(
    'CodeDeployAlarm', {
        'AlarmName': Optional[str],
    }
)


CodeDeployAlarmConfiguration = TypedDict(
    'CodeDeployAlarmConfiguration', {
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'AlarmList': Optional[List[CodeDeployAlarm]],
    }
)


CodeDeployAutoRollbackConfiguration = TypedDict(
    'CodeDeployAutoRollbackConfiguration', {
        'Boolean': Optional[bool],
        'AutoRollbackEventsList': Optional[List[str]],
    }
)


CodeDeployDeploymentStyle = TypedDict(
    'CodeDeployDeploymentStyle', {
        'DeploymentType': Optional[str],
        'DeploymentOption': Optional[str],
    }
)


CodeDeployBlueInstanceTerminationOption = TypedDict(
    'CodeDeployBlueInstanceTerminationOption', {
        'InstanceAction': Optional[str],
        'Duration': Optional[int],
    }
)


CodeDeployDeploymentReadyOption = TypedDict(
    'CodeDeployDeploymentReadyOption', {
        'DeploymentReadyAction': Optional[str],
        'Duration': Optional[int],
    }
)


CodeDeployGreenFleetProvisioningOption = TypedDict(
    'CodeDeployGreenFleetProvisioningOption', {
        'GreenFleetProvisioningAction': Optional[str],
    }
)


CodeDeployBlueGreenDeploymentConfiguration = TypedDict(
    'CodeDeployBlueGreenDeploymentConfiguration', {
        'BlueInstanceTerminationOption': Optional[CodeDeployBlueInstanceTerminationOption],
        'DeploymentReadyOption': Optional[CodeDeployDeploymentReadyOption],
        'GreenFleetProvisioningOption': Optional[CodeDeployGreenFleetProvisioningOption],
    }
)


CodeDeployELBInfo = TypedDict(
    'CodeDeployELBInfo', {
        'ELBName': Optional[str],
    }
)


CodeDeployTargetGroupInfo = TypedDict(
    'CodeDeployTargetGroupInfo', {
        'TargetGroupName': Optional[str],
    }
)


CodeDeployTrafficRoute = TypedDict(
    'CodeDeployTrafficRoute', {
        'ListenerArnList': Optional[List[str]],
    }
)


CodeDeployTargetGroupPairInfo = TypedDict(
    'CodeDeployTargetGroupPairInfo', {
        'TargetGroupInfoList': Optional[List[CodeDeployTargetGroupInfo]],
        'TrafficRoute': Optional[CodeDeployTrafficRoute],
        'TrafficRoute': Optional[CodeDeployTrafficRoute],
    }
)


CodeDeployLoadBalancerInfo = TypedDict(
    'CodeDeployLoadBalancerInfo', {
        'ELBInfoList': Optional[List[CodeDeployELBInfo]],
        'TargetGroupInfoList': Optional[List[CodeDeployTargetGroupInfo]],
        'TargetGroupPairInfoList': Optional[List[CodeDeployTargetGroupPairInfo]],
    }
)


CodeDeployLastDeploymentInfo = TypedDict(
    'CodeDeployLastDeploymentInfo', {
        'DeploymentId': Optional[str],
        'DeploymentStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


CodeDeployEC2TagSet = TypedDict(
    'CodeDeployEC2TagSet', {
        'EC2TagSetList': Optional[List[List[CodeDeployEC2TagFilter]]],
    }
)


CodeDeployOnPremisesTagSet = TypedDict(
    'CodeDeployOnPremisesTagSet', {
        'OnPremisesTagSetList': Optional[List[List[CodeDeployTagFilter]]],
    }
)


CodeDeployECSService = TypedDict(
    'CodeDeployECSService', {
        'ECSServiceName': Optional[str],
        'ECSClusterName': Optional[str],
    }
)


CodeDeployDeploymentGroupInfo = TypedDict(
    'CodeDeployDeploymentGroupInfo', {
        'ApplicationName': Optional[str],
        'DeploymentGroupId': Optional[str],
        'DeploymentGroupName': Optional[str],
        'DeploymentConfigName': Optional[str],
        'EC2TagFilterList': Optional[List[CodeDeployEC2TagFilter]],
        'TagFilterList': Optional[List[CodeDeployTagFilter]],
        'AutoScalingGroupList': Optional[List[CodeDeployAutoScalingGroup]],
        'Role': Optional[str],
        'RevisionLocation': Optional[CodeDeployRevisionLocation],
        'TriggerConfigList': Optional[List[CodeDeployTriggerConfig]],
        'AlarmConfiguration': Optional[CodeDeployAlarmConfiguration],
        'AutoRollbackConfiguration': Optional[CodeDeployAutoRollbackConfiguration],
        'DeploymentStyle': Optional[CodeDeployDeploymentStyle],
        'BlueGreenDeploymentConfiguration': Optional[CodeDeployBlueGreenDeploymentConfiguration],
        'LoadBalancerInfo': Optional[CodeDeployLoadBalancerInfo],
        'LastDeploymentInfo': Optional[CodeDeployLastDeploymentInfo],
        'LastDeploymentInfo': Optional[CodeDeployLastDeploymentInfo],
        'EC2TagSet': Optional[CodeDeployEC2TagSet],
        'OnPremisesTagSet': Optional[CodeDeployOnPremisesTagSet],
        'ComputePlatform': Optional[str],
        'ECSServiceList': Optional[List[CodeDeployECSService]],
    }
)


CodeDeployBatchGetDeploymentGroupsOutput = TypedDict(
    'CodeDeployBatchGetDeploymentGroupsOutput', {
        'DeploymentGroupInfoList': Optional[List[CodeDeployDeploymentGroupInfo]],
        'ErrorMessage': Optional[str],
    }
)


CodeDeployDiagnostics = TypedDict(
    'CodeDeployDiagnostics', {
        'LifecycleErrorCode': Optional[str],
        'ScriptName': Optional[str],
        'LifecycleMessage': Optional[str],
        'LogTail': Optional[str],
    }
)


CodeDeployLifecycleEvent = TypedDict(
    'CodeDeployLifecycleEvent', {
        'LifecycleEventName': Optional[str],
        'Diagnostics': Optional[CodeDeployDiagnostics],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'LifecycleEventStatus': Optional[str],
    }
)


CodeDeployInstanceSummary = TypedDict(
    'CodeDeployInstanceSummary', {
        'DeploymentId': Optional[str],
        'InstanceId': Optional[str],
        'InstanceStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'LifecycleEventList': Optional[List[CodeDeployLifecycleEvent]],
        'InstanceType': Optional[str],
    }
)


CodeDeployBatchGetDeploymentInstancesOutput = TypedDict(
    'CodeDeployBatchGetDeploymentInstancesOutput', {
        'InstanceSummaryList': Optional[List[CodeDeployInstanceSummary]],
        'ErrorMessage': Optional[str],
    }
)


CodeDeployInstanceTarget = TypedDict(
    'CodeDeployInstanceTarget', {
        'DeploymentId': Optional[str],
        'TargetId': Optional[str],
        'TargetArn': Optional[str],
        'TargetStatus': Optional[str],
        'Time': Optional[datetime.datetime],
        'LifecycleEventList': Optional[List[CodeDeployLifecycleEvent]],
        'TargetLabel': Optional[str],
    }
)


CodeDeployLambdaTarget = TypedDict(
    'CodeDeployLambdaTarget', {
        'DeploymentId': Optional[str],
        'TargetId': Optional[str],
        'TargetArn': Optional[str],
        'TargetStatus': Optional[str],
        'Time': Optional[datetime.datetime],
        'LifecycleEventList': Optional[List[CodeDeployLifecycleEvent]],
    }
)


CodeDeployECSTaskSet = TypedDict(
    'CodeDeployECSTaskSet', {
        'ECSTaskSetIdentifier': Optional[str],
        'ECSTaskSetCount': Optional[int],
        'ECSTaskSetCount': Optional[int],
        'ECSTaskSetCount': Optional[int],
        'ECSTaskSetStatus': Optional[str],
        'TrafficWeight': Optional[float],
        'TargetGroupInfo': Optional[CodeDeployTargetGroupInfo],
        'TargetLabel': Optional[str],
    }
)


CodeDeployECSTarget = TypedDict(
    'CodeDeployECSTarget', {
        'DeploymentId': Optional[str],
        'TargetId': Optional[str],
        'TargetArn': Optional[str],
        'Time': Optional[datetime.datetime],
        'LifecycleEventList': Optional[List[CodeDeployLifecycleEvent]],
        'TargetStatus': Optional[str],
        'ECSTaskSetList': Optional[List[CodeDeployECSTaskSet]],
    }
)


CodeDeployDeploymentTarget = TypedDict(
    'CodeDeployDeploymentTarget', {
        'DeploymentTargetType': Optional[str],
        'InstanceTarget': Optional[CodeDeployInstanceTarget],
        'LambdaTarget': Optional[CodeDeployLambdaTarget],
        'ECSTarget': Optional[CodeDeployECSTarget],
    }
)


CodeDeployBatchGetDeploymentTargetsOutput = TypedDict(
    'CodeDeployBatchGetDeploymentTargetsOutput', {
        'DeploymentTargetList': Optional[List[CodeDeployDeploymentTarget]],
    }
)


CodeDeployErrorInformation = TypedDict(
    'CodeDeployErrorInformation', {
        'ErrorCode': Optional[str],
        'ErrorMessage': Optional[str],
    }
)


CodeDeployDeploymentOverview = TypedDict(
    'CodeDeployDeploymentOverview', {
        'InstanceCount': Optional[int],
        'InstanceCount': Optional[int],
        'InstanceCount': Optional[int],
        'InstanceCount': Optional[int],
        'InstanceCount': Optional[int],
        'InstanceCount': Optional[int],
    }
)


CodeDeployRollbackInfo = TypedDict(
    'CodeDeployRollbackInfo', {
        'DeploymentId': Optional[str],
        'DeploymentId': Optional[str],
        'Description': Optional[str],
    }
)


CodeDeployTargetInstances = TypedDict(
    'CodeDeployTargetInstances', {
        'EC2TagFilterList': Optional[List[CodeDeployEC2TagFilter]],
        'AutoScalingGroupNameList': Optional[List[str]],
        'EC2TagSet': Optional[CodeDeployEC2TagSet],
    }
)


CodeDeployDeploymentInfo = TypedDict(
    'CodeDeployDeploymentInfo', {
        'ApplicationName': Optional[str],
        'DeploymentGroupName': Optional[str],
        'DeploymentConfigName': Optional[str],
        'DeploymentId': Optional[str],
        'RevisionLocation': Optional[CodeDeployRevisionLocation],
        'RevisionLocation': Optional[CodeDeployRevisionLocation],
        'DeploymentStatus': Optional[str],
        'ErrorInformation': Optional[CodeDeployErrorInformation],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'DeploymentOverview': Optional[CodeDeployDeploymentOverview],
        'Description': Optional[str],
        'DeploymentCreator': Optional[str],
        'Boolean': Optional[bool],
        'AutoRollbackConfiguration': Optional[CodeDeployAutoRollbackConfiguration],
        'Boolean': Optional[bool],
        'RollbackInfo': Optional[CodeDeployRollbackInfo],
        'DeploymentStyle': Optional[CodeDeployDeploymentStyle],
        'TargetInstances': Optional[CodeDeployTargetInstances],
        'Boolean': Optional[bool],
        'BlueGreenDeploymentConfiguration': Optional[CodeDeployBlueGreenDeploymentConfiguration],
        'LoadBalancerInfo': Optional[CodeDeployLoadBalancerInfo],
        'AdditionalDeploymentStatusInfo': Optional[str],
        'FileExistsBehavior': Optional[str],
        'DeploymentStatusMessageList': Optional[List[str]],
        'ComputePlatform': Optional[str],
    }
)


CodeDeployBatchGetDeploymentsOutput = TypedDict(
    'CodeDeployBatchGetDeploymentsOutput', {
        'DeploymentsInfoList': Optional[List[CodeDeployDeploymentInfo]],
    }
)


CodeDeployInstanceInfo = TypedDict(
    'CodeDeployInstanceInfo', {
        'InstanceName': Optional[str],
        'IamSessionArn': Optional[str],
        'IamUserArn': Optional[str],
        'InstanceArn': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'TagList': Optional[List[CodeDeployTag]],
    }
)


CodeDeployBatchGetOnPremisesInstancesOutput = TypedDict(
    'CodeDeployBatchGetOnPremisesInstancesOutput', {
        'InstanceInfoList': Optional[List[CodeDeployInstanceInfo]],
    }
)


CodeDeployCreateApplicationOutput = TypedDict(
    'CodeDeployCreateApplicationOutput', {
        'ApplicationId': Optional[str],
    }
)


CodeDeployCreateDeploymentOutput = TypedDict(
    'CodeDeployCreateDeploymentOutput', {
        'DeploymentId': Optional[str],
    }
)


CodeDeployMinimumHealthyHosts = TypedDict(
    'CodeDeployMinimumHealthyHosts', {
        'MinimumHealthyHostsValue': Optional[int],
        'MinimumHealthyHostsType': Optional[str],
    }
)


CodeDeployTimeBasedCanary = TypedDict(
    'CodeDeployTimeBasedCanary', {
        'Percentage': Optional[int],
        'WaitTimeInMins': Optional[int],
    }
)


CodeDeployTimeBasedLinear = TypedDict(
    'CodeDeployTimeBasedLinear', {
        'Percentage': Optional[int],
        'WaitTimeInMins': Optional[int],
    }
)


CodeDeployTrafficRoutingConfig = TypedDict(
    'CodeDeployTrafficRoutingConfig', {
        'TrafficRoutingType': Optional[str],
        'TimeBasedCanary': Optional[CodeDeployTimeBasedCanary],
        'TimeBasedLinear': Optional[CodeDeployTimeBasedLinear],
    }
)


CodeDeployCreateDeploymentConfigOutput = TypedDict(
    'CodeDeployCreateDeploymentConfigOutput', {
        'DeploymentConfigId': Optional[str],
    }
)


CodeDeployCreateDeploymentGroupOutput = TypedDict(
    'CodeDeployCreateDeploymentGroupOutput', {
        'DeploymentGroupId': Optional[str],
    }
)


CodeDeployDeleteDeploymentGroupOutput = TypedDict(
    'CodeDeployDeleteDeploymentGroupOutput', {
        'AutoScalingGroupList': Optional[List[CodeDeployAutoScalingGroup]],
    }
)


CodeDeployDeleteGitHubAccountTokenOutput = TypedDict(
    'CodeDeployDeleteGitHubAccountTokenOutput', {
        'GitHubAccountTokenName': Optional[str],
    }
)


CodeDeployGetApplicationOutput = TypedDict(
    'CodeDeployGetApplicationOutput', {
        'ApplicationInfo': Optional[CodeDeployApplicationInfo],
    }
)


CodeDeployGetApplicationRevisionOutput = TypedDict(
    'CodeDeployGetApplicationRevisionOutput', {
        'ApplicationName': Optional[str],
        'RevisionLocation': Optional[CodeDeployRevisionLocation],
        'GenericRevisionInfo': Optional[CodeDeployGenericRevisionInfo],
    }
)


CodeDeployGetDeploymentOutput = TypedDict(
    'CodeDeployGetDeploymentOutput', {
        'DeploymentInfo': Optional[CodeDeployDeploymentInfo],
    }
)


CodeDeployDeploymentConfigInfo = TypedDict(
    'CodeDeployDeploymentConfigInfo', {
        'DeploymentConfigId': Optional[str],
        'DeploymentConfigName': Optional[str],
        'MinimumHealthyHosts': Optional[CodeDeployMinimumHealthyHosts],
        'Timestamp': Optional[datetime.datetime],
        'ComputePlatform': Optional[str],
        'TrafficRoutingConfig': Optional[CodeDeployTrafficRoutingConfig],
    }
)


CodeDeployGetDeploymentConfigOutput = TypedDict(
    'CodeDeployGetDeploymentConfigOutput', {
        'DeploymentConfigInfo': Optional[CodeDeployDeploymentConfigInfo],
    }
)


CodeDeployGetDeploymentGroupOutput = TypedDict(
    'CodeDeployGetDeploymentGroupOutput', {
        'DeploymentGroupInfo': Optional[CodeDeployDeploymentGroupInfo],
    }
)


CodeDeployGetDeploymentInstanceOutput = TypedDict(
    'CodeDeployGetDeploymentInstanceOutput', {
        'InstanceSummary': Optional[CodeDeployInstanceSummary],
    }
)


CodeDeployGetDeploymentTargetOutput = TypedDict(
    'CodeDeployGetDeploymentTargetOutput', {
        'DeploymentTarget': Optional[CodeDeployDeploymentTarget],
    }
)


CodeDeployGetOnPremisesInstanceOutput = TypedDict(
    'CodeDeployGetOnPremisesInstanceOutput', {
        'InstanceInfo': Optional[CodeDeployInstanceInfo],
    }
)


CodeDeployListApplicationRevisionsOutput = TypedDict(
    'CodeDeployListApplicationRevisionsOutput', {
        'RevisionLocationList': Optional[List[CodeDeployRevisionLocation]],
        'NextToken': Optional[str],
    }
)


CodeDeployListApplicationsOutput = TypedDict(
    'CodeDeployListApplicationsOutput', {
        'ApplicationsList': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


CodeDeployListDeploymentConfigsOutput = TypedDict(
    'CodeDeployListDeploymentConfigsOutput', {
        'DeploymentConfigsList': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


CodeDeployListDeploymentGroupsOutput = TypedDict(
    'CodeDeployListDeploymentGroupsOutput', {
        'ApplicationName': Optional[str],
        'DeploymentGroupsList': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


CodeDeployListDeploymentInstancesOutput = TypedDict(
    'CodeDeployListDeploymentInstancesOutput', {
        'InstancesList': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


CodeDeployListDeploymentTargetsOutput = TypedDict(
    'CodeDeployListDeploymentTargetsOutput', {
        'TargetIdList': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


CodeDeployTimeRange = TypedDict(
    'CodeDeployTimeRange', {
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


CodeDeployListDeploymentsOutput = TypedDict(
    'CodeDeployListDeploymentsOutput', {
        'DeploymentsList': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


CodeDeployListGitHubAccountTokenNamesOutput = TypedDict(
    'CodeDeployListGitHubAccountTokenNamesOutput', {
        'GitHubAccountTokenNameList': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


CodeDeployListOnPremisesInstancesOutput = TypedDict(
    'CodeDeployListOnPremisesInstancesOutput', {
        'InstanceNameList': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


CodeDeployPutLifecycleEventHookExecutionStatusOutput = TypedDict(
    'CodeDeployPutLifecycleEventHookExecutionStatusOutput', {
        'LifecycleEventHookExecutionId': Optional[str],
    }
)


CodeDeployStopDeploymentOutput = TypedDict(
    'CodeDeployStopDeploymentOutput', {
        'StopStatus': Optional[str],
        'Message': Optional[str],
    }
)


CodeDeployUpdateDeploymentGroupOutput = TypedDict(
    'CodeDeployUpdateDeploymentGroupOutput', {
        'AutoScalingGroupList': Optional[List[CodeDeployAutoScalingGroup]],
    }
)


class CodePipeline(BaseClient):
    def acknowledge_job(self, *,
        jobId: str,
        nonce: str
    ) -> CodePipelineAcknowledgeJobOutput: ...

    def acknowledge_third_party_job(self, *,
        jobId: str,
        nonce: str,
        clientToken: str
    ) -> CodePipelineAcknowledgeThirdPartyJobOutput: ...

    def create_custom_action_type(self, *,
        category: str,
        provider: str,
        version: str,
        inputArtifactDetails: CodePipelineArtifactDetails,
        outputArtifactDetails: CodePipelineArtifactDetails,
        settings: CodePipelineActionTypeSettings = ...,
        configurationProperties: List[CodePipelineActionConfigurationProperty] = ...
    ) -> CodePipelineCreateCustomActionTypeOutput: ...

    def create_pipeline(self, *,
        pipeline: CodePipelinePipelineDeclaration
    ) -> CodePipelineCreatePipelineOutput: ...

    def delete_custom_action_type(self, *,
        category: str,
        provider: str,
        version: str
    ): ...

    def delete_pipeline(self, *,
        name: str
    ): ...

    def delete_webhook(self, *,
        name: str
    ) -> CodePipelineDeleteWebhookOutput: ...

    def deregister_webhook_with_third_party(self, *,
        webhookName: str = ...
    ) -> CodePipelineDeregisterWebhookWithThirdPartyOutput: ...

    def disable_stage_transition(self, *,
        pipelineName: str,
        stageName: str,
        transitionType: str,
        reason: str
    ): ...

    def enable_stage_transition(self, *,
        pipelineName: str,
        stageName: str,
        transitionType: str
    ): ...

    def get_job_details(self, *,
        jobId: str
    ) -> CodePipelineGetJobDetailsOutput: ...

    def get_pipeline(self, *,
        name: str,
        version: int = ...
    ) -> CodePipelineGetPipelineOutput: ...

    def get_pipeline_execution(self, *,
        pipelineName: str,
        pipelineExecutionId: str
    ) -> CodePipelineGetPipelineExecutionOutput: ...

    def get_pipeline_state(self, *,
        name: str
    ) -> CodePipelineGetPipelineStateOutput: ...

    def get_third_party_job_details(self, *,
        jobId: str,
        clientToken: str
    ) -> CodePipelineGetThirdPartyJobDetailsOutput: ...

    def list_action_executions(self, *,
        pipelineName: str,
        filter: CodePipelineActionExecutionFilter = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> CodePipelineListActionExecutionsOutput: ...

    def list_action_types(self, *,
        actionOwnerFilter: str = ...,
        nextToken: str = ...
    ) -> CodePipelineListActionTypesOutput: ...

    def list_pipeline_executions(self, *,
        pipelineName: str,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> CodePipelineListPipelineExecutionsOutput: ...

    def list_pipelines(self, *,
        nextToken: str = ...
    ) -> CodePipelineListPipelinesOutput: ...

    def list_webhooks(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CodePipelineListWebhooksOutput: ...

    def poll_for_jobs(self, *,
        actionTypeId: CodePipelineActionTypeId,
        maxBatchSize: int = ...,
        queryParam: Dict[str, str] = ...
    ) -> CodePipelinePollForJobsOutput: ...

    def poll_for_third_party_jobs(self, *,
        actionTypeId: CodePipelineActionTypeId,
        maxBatchSize: int = ...
    ) -> CodePipelinePollForThirdPartyJobsOutput: ...

    def put_action_revision(self, *,
        pipelineName: str,
        stageName: str,
        actionName: str,
        actionRevision: CodePipelineActionRevision
    ) -> CodePipelinePutActionRevisionOutput: ...

    def put_approval_result(self, *,
        pipelineName: str,
        stageName: str,
        actionName: str,
        result: CodePipelineApprovalResult,
        token: str
    ) -> CodePipelinePutApprovalResultOutput: ...

    def put_job_failure_result(self, *,
        jobId: str,
        failureDetails: CodePipelineFailureDetails
    ): ...

    def put_job_success_result(self, *,
        jobId: str,
        currentRevision: CodePipelineCurrentRevision = ...,
        continuationToken: str = ...,
        executionDetails: CodePipelineExecutionDetails = ...
    ): ...

    def put_third_party_job_failure_result(self, *,
        jobId: str,
        clientToken: str,
        failureDetails: CodePipelineFailureDetails
    ): ...

    def put_third_party_job_success_result(self, *,
        jobId: str,
        clientToken: str,
        currentRevision: CodePipelineCurrentRevision = ...,
        continuationToken: str = ...,
        executionDetails: CodePipelineExecutionDetails = ...
    ): ...

    def put_webhook(self, *,
        webhook: CodePipelineWebhookDefinition
    ) -> CodePipelinePutWebhookOutput: ...

    def register_webhook_with_third_party(self, *,
        webhookName: str = ...
    ) -> CodePipelineRegisterWebhookWithThirdPartyOutput: ...

    def retry_stage_execution(self, *,
        pipelineName: str,
        stageName: str,
        pipelineExecutionId: str,
        retryMode: str
    ) -> CodePipelineRetryStageExecutionOutput: ...

    def start_pipeline_execution(self, *,
        name: str,
        clientRequestToken: str = ...
    ) -> CodePipelineStartPipelineExecutionOutput: ...

    def update_pipeline(self, *,
        pipeline: CodePipelinePipelineDeclaration
    ) -> CodePipelineUpdatePipelineOutput: ...


CodePipelineAcknowledgeJobOutput = TypedDict(
    'CodePipelineAcknowledgeJobOutput', {
        'JobStatus': Optional[str],
    }
)


CodePipelineAcknowledgeThirdPartyJobOutput = TypedDict(
    'CodePipelineAcknowledgeThirdPartyJobOutput', {
        'JobStatus': Optional[str],
    }
)


CodePipelineActionTypeSettings = TypedDict(
    'CodePipelineActionTypeSettings', {
        'Url': Optional[str],
        'UrlTemplate': Optional[str],
        'UrlTemplate': Optional[str],
        'UrlTemplate': Optional[str],
    }
)


CodePipelineActionConfigurationProperty = TypedDict(
    'CodePipelineActionConfigurationProperty', {
        'ActionConfigurationKey': str,
        'Boolean': bool,
        'Boolean': bool,
        'Boolean': bool,
        'Boolean': Optional[bool],
        'Description': Optional[str],
        'ActionConfigurationPropertyType': Optional[str],
    }
)


CodePipelineArtifactDetails = TypedDict(
    'CodePipelineArtifactDetails', {
        'MinimumArtifactCount': int,
        'MaximumArtifactCount': int,
    }
)


CodePipelineActionTypeId = TypedDict(
    'CodePipelineActionTypeId', {
        'ActionCategory': str,
        'ActionOwner': str,
        'ActionProvider': str,
        'Version': str,
    }
)


CodePipelineActionType = TypedDict(
    'CodePipelineActionType', {
        'ActionTypeId': CodePipelineActionTypeId,
        'ArtifactDetails': CodePipelineArtifactDetails,
        'ArtifactDetails': CodePipelineArtifactDetails,
        'ActionTypeSettings': Optional[CodePipelineActionTypeSettings],
        'ActionConfigurationPropertyList': Optional[List[CodePipelineActionConfigurationProperty]],
    }
)


CodePipelineCreateCustomActionTypeOutput = TypedDict(
    'CodePipelineCreateCustomActionTypeOutput', {
        'ActionType': CodePipelineActionType,
    }
)


CodePipelineEncryptionKey = TypedDict(
    'CodePipelineEncryptionKey', {
        'EncryptionKeyId': str,
        'EncryptionKeyType': str,
    }
)


CodePipelineArtifactStore = TypedDict(
    'CodePipelineArtifactStore', {
        'ArtifactStoreType': str,
        'ArtifactStoreLocation': str,
        'EncryptionKey': Optional[CodePipelineEncryptionKey],
    }
)


CodePipelineBlockerDeclaration = TypedDict(
    'CodePipelineBlockerDeclaration', {
        'BlockerName': str,
        'BlockerType': str,
    }
)


CodePipelineOutputArtifact = TypedDict(
    'CodePipelineOutputArtifact', {
        'ArtifactName': str,
    }
)


CodePipelineInputArtifact = TypedDict(
    'CodePipelineInputArtifact', {
        'ArtifactName': str,
    }
)


CodePipelineActionDeclaration = TypedDict(
    'CodePipelineActionDeclaration', {
        'ActionName': str,
        'ActionTypeId': CodePipelineActionTypeId,
        'ActionRunOrder': Optional[int],
        'ActionConfigurationMap': Optional[Dict[str, str]],
        'OutputArtifactList': Optional[List[CodePipelineOutputArtifact]],
        'InputArtifactList': Optional[List[CodePipelineInputArtifact]],
        'RoleArn': Optional[str],
        'AWSRegionName': Optional[str],
    }
)


CodePipelineStageDeclaration = TypedDict(
    'CodePipelineStageDeclaration', {
        'StageName': str,
        'StageActionDeclarationList': List[CodePipelineActionDeclaration],
        'StageBlockerDeclarationList': Optional[List[CodePipelineBlockerDeclaration]],
    }
)


CodePipelinePipelineDeclaration = TypedDict(
    'CodePipelinePipelineDeclaration', {
        'PipelineName': str,
        'RoleArn': str,
        'PipelineStageDeclarationList': List[CodePipelineStageDeclaration],
        'ArtifactStore': Optional[CodePipelineArtifactStore],
        'ArtifactStoreMap': Optional[Dict[str, CodePipelineArtifactStore]],
        'PipelineVersion': Optional[int],
    }
)


CodePipelineCreatePipelineOutput = TypedDict(
    'CodePipelineCreatePipelineOutput', {
        'PipelineDeclaration': Optional[CodePipelinePipelineDeclaration],
    }
)


CodePipelineDeleteWebhookOutput = TypedDict(
    'CodePipelineDeleteWebhookOutput', {
    }
)


CodePipelineDeregisterWebhookWithThirdPartyOutput = TypedDict(
    'CodePipelineDeregisterWebhookWithThirdPartyOutput', {
    }
)


CodePipelineActionConfiguration = TypedDict(
    'CodePipelineActionConfiguration', {
        'ActionConfigurationMap': Optional[Dict[str, str]],
    }
)


CodePipelineStageContext = TypedDict(
    'CodePipelineStageContext', {
        'StageName': Optional[str],
    }
)


CodePipelineActionContext = TypedDict(
    'CodePipelineActionContext', {
        'ActionName': Optional[str],
        'ActionExecutionId': Optional[str],
    }
)


CodePipelinePipelineContext = TypedDict(
    'CodePipelinePipelineContext', {
        'PipelineName': Optional[str],
        'StageContext': Optional[CodePipelineStageContext],
        'ActionContext': Optional[CodePipelineActionContext],
        'PipelineArn': Optional[str],
        'PipelineExecutionId': Optional[str],
    }
)


CodePipelineS3ArtifactLocation = TypedDict(
    'CodePipelineS3ArtifactLocation', {
        'S3BucketName': str,
        'S3ObjectKey': str,
    }
)


CodePipelineArtifactLocation = TypedDict(
    'CodePipelineArtifactLocation', {
        'ArtifactLocationType': Optional[str],
        'S3ArtifactLocation': Optional[CodePipelineS3ArtifactLocation],
    }
)


CodePipelineArtifact = TypedDict(
    'CodePipelineArtifact', {
        'ArtifactName': Optional[str],
        'Revision': Optional[str],
        'ArtifactLocation': Optional[CodePipelineArtifactLocation],
    }
)


CodePipelineAWSSessionCredentials = TypedDict(
    'CodePipelineAWSSessionCredentials', {
        'AccessKeyId': str,
        'SecretAccessKey': str,
        'SessionToken': str,
    }
)


CodePipelineJobData = TypedDict(
    'CodePipelineJobData', {
        'ActionTypeId': Optional[CodePipelineActionTypeId],
        'ActionConfiguration': Optional[CodePipelineActionConfiguration],
        'PipelineContext': Optional[CodePipelinePipelineContext],
        'ArtifactList': Optional[List[CodePipelineArtifact]],
        'ArtifactList': Optional[List[CodePipelineArtifact]],
        'AWSSessionCredentials': Optional[CodePipelineAWSSessionCredentials],
        'ContinuationToken': Optional[str],
        'EncryptionKey': Optional[CodePipelineEncryptionKey],
    }
)


CodePipelineJobDetails = TypedDict(
    'CodePipelineJobDetails', {
        'JobId': Optional[str],
        'JobData': Optional[CodePipelineJobData],
        'AccountId': Optional[str],
    }
)


CodePipelineGetJobDetailsOutput = TypedDict(
    'CodePipelineGetJobDetailsOutput', {
        'JobDetails': Optional[CodePipelineJobDetails],
    }
)


CodePipelinePipelineMetadata = TypedDict(
    'CodePipelinePipelineMetadata', {
        'PipelineArn': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


CodePipelineGetPipelineOutput = TypedDict(
    'CodePipelineGetPipelineOutput', {
        'PipelineDeclaration': Optional[CodePipelinePipelineDeclaration],
        'PipelineMetadata': Optional[CodePipelinePipelineMetadata],
    }
)


CodePipelineArtifactRevision = TypedDict(
    'CodePipelineArtifactRevision', {
        'ArtifactName': Optional[str],
        'Revision': Optional[str],
        'RevisionChangeIdentifier': Optional[str],
        'RevisionSummary': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Url': Optional[str],
    }
)


CodePipelinePipelineExecution = TypedDict(
    'CodePipelinePipelineExecution', {
        'PipelineName': Optional[str],
        'PipelineVersion': Optional[int],
        'PipelineExecutionId': Optional[str],
        'PipelineExecutionStatus': Optional[str],
        'ArtifactRevisionList': Optional[List[CodePipelineArtifactRevision]],
    }
)


CodePipelineGetPipelineExecutionOutput = TypedDict(
    'CodePipelineGetPipelineExecutionOutput', {
        'PipelineExecution': Optional[CodePipelinePipelineExecution],
    }
)


CodePipelineTransitionState = TypedDict(
    'CodePipelineTransitionState', {
        'Enabled': Optional[bool],
        'LastChangedBy': Optional[str],
        'LastChangedAt': Optional[datetime.datetime],
        'DisabledReason': Optional[str],
    }
)


CodePipelineActionRevision = TypedDict(
    'CodePipelineActionRevision', {
        'Revision': str,
        'RevisionChangeIdentifier': str,
        'Timestamp': datetime.datetime,
    }
)


CodePipelineErrorDetails = TypedDict(
    'CodePipelineErrorDetails', {
        'Code': Optional[str],
        'Message': Optional[str],
    }
)


CodePipelineActionExecution = TypedDict(
    'CodePipelineActionExecution', {
        'ActionExecutionStatus': Optional[str],
        'ExecutionSummary': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'ActionExecutionToken': Optional[str],
        'LastUpdatedBy': Optional[str],
        'ExecutionId': Optional[str],
        'Url': Optional[str],
        'Percentage': Optional[int],
        'ErrorDetails': Optional[CodePipelineErrorDetails],
    }
)


CodePipelineActionState = TypedDict(
    'CodePipelineActionState', {
        'ActionName': Optional[str],
        'ActionRevision': Optional[CodePipelineActionRevision],
        'ActionExecution': Optional[CodePipelineActionExecution],
        'Url': Optional[str],
        'Url': Optional[str],
    }
)


CodePipelineStageExecution = TypedDict(
    'CodePipelineStageExecution', {
        'PipelineExecutionId': str,
        'StageExecutionStatus': str,
    }
)


CodePipelineStageState = TypedDict(
    'CodePipelineStageState', {
        'StageName': Optional[str],
        'TransitionState': Optional[CodePipelineTransitionState],
        'ActionStateList': Optional[List[CodePipelineActionState]],
        'StageExecution': Optional[CodePipelineStageExecution],
    }
)


CodePipelineGetPipelineStateOutput = TypedDict(
    'CodePipelineGetPipelineStateOutput', {
        'PipelineName': Optional[str],
        'PipelineVersion': Optional[int],
        'StageStateList': Optional[List[CodePipelineStageState]],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


CodePipelineThirdPartyJobData = TypedDict(
    'CodePipelineThirdPartyJobData', {
        'ActionTypeId': Optional[CodePipelineActionTypeId],
        'ActionConfiguration': Optional[CodePipelineActionConfiguration],
        'PipelineContext': Optional[CodePipelinePipelineContext],
        'ArtifactList': Optional[List[CodePipelineArtifact]],
        'ArtifactList': Optional[List[CodePipelineArtifact]],
        'AWSSessionCredentials': Optional[CodePipelineAWSSessionCredentials],
        'ContinuationToken': Optional[str],
        'EncryptionKey': Optional[CodePipelineEncryptionKey],
    }
)


CodePipelineThirdPartyJobDetails = TypedDict(
    'CodePipelineThirdPartyJobDetails', {
        'ThirdPartyJobId': Optional[str],
        'ThirdPartyJobData': Optional[CodePipelineThirdPartyJobData],
        'Nonce': Optional[str],
    }
)


CodePipelineGetThirdPartyJobDetailsOutput = TypedDict(
    'CodePipelineGetThirdPartyJobDetailsOutput', {
        'ThirdPartyJobDetails': Optional[CodePipelineThirdPartyJobDetails],
    }
)


CodePipelineActionExecutionFilter = TypedDict(
    'CodePipelineActionExecutionFilter', {
        'PipelineExecutionId': Optional[str],
    }
)


CodePipelineS3Location = TypedDict(
    'CodePipelineS3Location', {
        'S3Bucket': Optional[str],
        'S3Key': Optional[str],
    }
)


CodePipelineArtifactDetail = TypedDict(
    'CodePipelineArtifactDetail', {
        'ArtifactName': Optional[str],
        'S3Location': Optional[CodePipelineS3Location],
    }
)


CodePipelineActionExecutionInput = TypedDict(
    'CodePipelineActionExecutionInput', {
        'ActionTypeId': Optional[CodePipelineActionTypeId],
        'ActionConfigurationMap': Optional[Dict[str, str]],
        'RoleArn': Optional[str],
        'AWSRegionName': Optional[str],
        'ArtifactDetailList': Optional[List[CodePipelineArtifactDetail]],
    }
)


CodePipelineActionExecutionResult = TypedDict(
    'CodePipelineActionExecutionResult', {
        'ExternalExecutionId': Optional[str],
        'ExternalExecutionSummary': Optional[str],
        'Url': Optional[str],
    }
)


CodePipelineActionExecutionOutput = TypedDict(
    'CodePipelineActionExecutionOutput', {
        'ArtifactDetailList': Optional[List[CodePipelineArtifactDetail]],
        'ActionExecutionResult': Optional[CodePipelineActionExecutionResult],
    }
)


CodePipelineActionExecutionDetail = TypedDict(
    'CodePipelineActionExecutionDetail', {
        'PipelineExecutionId': Optional[str],
        'ActionExecutionId': Optional[str],
        'PipelineVersion': Optional[int],
        'StageName': Optional[str],
        'ActionName': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'ActionExecutionStatus': Optional[str],
        'ActionExecutionInput': Optional[CodePipelineActionExecutionInput],
        'ActionExecutionOutput': Optional[CodePipelineActionExecutionOutput],
    }
)


CodePipelineListActionExecutionsOutput = TypedDict(
    'CodePipelineListActionExecutionsOutput', {
        'ActionExecutionDetailList': Optional[List[CodePipelineActionExecutionDetail]],
        'NextToken': Optional[str],
    }
)


CodePipelineListActionTypesOutput = TypedDict(
    'CodePipelineListActionTypesOutput', {
        'ActionTypeList': List[CodePipelineActionType],
        'NextToken': Optional[str],
    }
)


CodePipelineSourceRevision = TypedDict(
    'CodePipelineSourceRevision', {
        'ActionName': str,
        'Revision': Optional[str],
        'RevisionSummary': Optional[str],
        'Url': Optional[str],
    }
)


CodePipelinePipelineExecutionSummary = TypedDict(
    'CodePipelinePipelineExecutionSummary', {
        'PipelineExecutionId': Optional[str],
        'PipelineExecutionStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'SourceRevisionList': Optional[List[CodePipelineSourceRevision]],
    }
)


CodePipelineListPipelineExecutionsOutput = TypedDict(
    'CodePipelineListPipelineExecutionsOutput', {
        'PipelineExecutionSummaryList': Optional[List[CodePipelinePipelineExecutionSummary]],
        'NextToken': Optional[str],
    }
)


CodePipelinePipelineSummary = TypedDict(
    'CodePipelinePipelineSummary', {
        'PipelineName': Optional[str],
        'PipelineVersion': Optional[int],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


CodePipelineListPipelinesOutput = TypedDict(
    'CodePipelineListPipelinesOutput', {
        'PipelineList': Optional[List[CodePipelinePipelineSummary]],
        'NextToken': Optional[str],
    }
)


CodePipelineWebhookFilterRule = TypedDict(
    'CodePipelineWebhookFilterRule', {
        'JsonPath': str,
        'MatchEquals': Optional[str],
    }
)


CodePipelineWebhookAuthConfiguration = TypedDict(
    'CodePipelineWebhookAuthConfiguration', {
        'WebhookAuthConfigurationAllowedIPRange': Optional[str],
        'WebhookAuthConfigurationSecretToken': Optional[str],
    }
)


CodePipelineWebhookDefinition = TypedDict(
    'CodePipelineWebhookDefinition', {
        'WebhookName': str,
        'PipelineName': str,
        'ActionName': str,
        'WebhookFilters': List[CodePipelineWebhookFilterRule],
        'WebhookAuthenticationType': str,
        'WebhookAuthConfiguration': CodePipelineWebhookAuthConfiguration,
    }
)


CodePipelineListWebhookItem = TypedDict(
    'CodePipelineListWebhookItem', {
        'WebhookDefinition': CodePipelineWebhookDefinition,
        'WebhookUrl': str,
        'WebhookErrorMessage': Optional[str],
        'WebhookErrorCode': Optional[str],
        'WebhookLastTriggered': Optional[datetime.datetime],
        'WebhookArn': Optional[str],
    }
)


CodePipelineListWebhooksOutput = TypedDict(
    'CodePipelineListWebhooksOutput', {
        'WebhookList': Optional[List[CodePipelineListWebhookItem]],
        'NextToken': Optional[str],
    }
)


CodePipelineJob = TypedDict(
    'CodePipelineJob', {
        'JobId': Optional[str],
        'JobData': Optional[CodePipelineJobData],
        'Nonce': Optional[str],
        'AccountId': Optional[str],
    }
)


CodePipelinePollForJobsOutput = TypedDict(
    'CodePipelinePollForJobsOutput', {
        'JobList': Optional[List[CodePipelineJob]],
    }
)


CodePipelineThirdPartyJob = TypedDict(
    'CodePipelineThirdPartyJob', {
        'ClientId': Optional[str],
        'JobId': Optional[str],
    }
)


CodePipelinePollForThirdPartyJobsOutput = TypedDict(
    'CodePipelinePollForThirdPartyJobsOutput', {
        'ThirdPartyJobList': Optional[List[CodePipelineThirdPartyJob]],
    }
)


CodePipelinePutActionRevisionOutput = TypedDict(
    'CodePipelinePutActionRevisionOutput', {
        'Boolean': Optional[bool],
        'PipelineExecutionId': Optional[str],
    }
)


CodePipelineApprovalResult = TypedDict(
    'CodePipelineApprovalResult', {
        'ApprovalSummary': str,
        'ApprovalStatus': str,
    }
)


CodePipelinePutApprovalResultOutput = TypedDict(
    'CodePipelinePutApprovalResultOutput', {
        'Timestamp': Optional[datetime.datetime],
    }
)


CodePipelineFailureDetails = TypedDict(
    'CodePipelineFailureDetails', {
        'FailureType': str,
        'Message': str,
        'ExecutionId': Optional[str],
    }
)


CodePipelineCurrentRevision = TypedDict(
    'CodePipelineCurrentRevision', {
        'Revision': str,
        'RevisionChangeIdentifier': str,
        'Time': Optional[datetime.datetime],
        'RevisionSummary': Optional[str],
    }
)


CodePipelineExecutionDetails = TypedDict(
    'CodePipelineExecutionDetails', {
        'ExecutionSummary': Optional[str],
        'ExecutionId': Optional[str],
        'Percentage': Optional[int],
    }
)


CodePipelinePutWebhookOutput = TypedDict(
    'CodePipelinePutWebhookOutput', {
        'ListWebhookItem': Optional[CodePipelineListWebhookItem],
    }
)


CodePipelineRegisterWebhookWithThirdPartyOutput = TypedDict(
    'CodePipelineRegisterWebhookWithThirdPartyOutput', {
    }
)


CodePipelineRetryStageExecutionOutput = TypedDict(
    'CodePipelineRetryStageExecutionOutput', {
        'PipelineExecutionId': Optional[str],
    }
)


CodePipelineStartPipelineExecutionOutput = TypedDict(
    'CodePipelineStartPipelineExecutionOutput', {
        'PipelineExecutionId': Optional[str],
    }
)


CodePipelineUpdatePipelineOutput = TypedDict(
    'CodePipelineUpdatePipelineOutput', {
        'PipelineDeclaration': Optional[CodePipelinePipelineDeclaration],
    }
)


class CodeStar(BaseClient):
    def associate_team_member(self, *,
        projectId: str,
        userArn: str,
        projectRole: str,
        clientRequestToken: str = ...,
        remoteAccessAllowed: bool = ...
    ) -> CodeStarAssociateTeamMemberResult: ...

    def create_project(self, *,
        name: str,
        id: str,
        description: str = ...,
        clientRequestToken: str = ...,
        sourceCode: List[CodeStarCode] = ...,
        toolchain: CodeStarToolchain = ...,
        tags: Dict[str, str] = ...
    ) -> CodeStarCreateProjectResult: ...

    def create_user_profile(self, *,
        userArn: str,
        displayName: str,
        emailAddress: str,
        sshPublicKey: str = ...
    ) -> CodeStarCreateUserProfileResult: ...

    def delete_project(self, *,
        id: str,
        clientRequestToken: str = ...,
        deleteStack: bool = ...
    ) -> CodeStarDeleteProjectResult: ...

    def delete_user_profile(self, *,
        userArn: str
    ) -> CodeStarDeleteUserProfileResult: ...

    def describe_project(self, *,
        id: str
    ) -> CodeStarDescribeProjectResult: ...

    def describe_user_profile(self, *,
        userArn: str
    ) -> CodeStarDescribeUserProfileResult: ...

    def disassociate_team_member(self, *,
        projectId: str,
        userArn: str
    ) -> CodeStarDisassociateTeamMemberResult: ...

    def list_projects(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> CodeStarListProjectsResult: ...

    def list_resources(self, *,
        projectId: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> CodeStarListResourcesResult: ...

    def list_tags_for_project(self, *,
        id: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> CodeStarListTagsForProjectResult: ...

    def list_team_members(self, *,
        projectId: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> CodeStarListTeamMembersResult: ...

    def list_user_profiles(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> CodeStarListUserProfilesResult: ...

    def tag_project(self, *,
        id: str,
        tags: Dict[str, str]
    ) -> CodeStarTagProjectResult: ...

    def untag_project(self, *,
        id: str,
        tags: List[str]
    ) -> CodeStarUntagProjectResult: ...

    def update_project(self, *,
        id: str,
        name: str = ...,
        description: str = ...
    ) -> CodeStarUpdateProjectResult: ...

    def update_team_member(self, *,
        projectId: str,
        userArn: str,
        projectRole: str = ...,
        remoteAccessAllowed: bool = ...
    ) -> CodeStarUpdateTeamMemberResult: ...

    def update_user_profile(self, *,
        userArn: str,
        displayName: str = ...,
        emailAddress: str = ...,
        sshPublicKey: str = ...
    ) -> CodeStarUpdateUserProfileResult: ...


CodeStarAssociateTeamMemberResult = TypedDict(
    'CodeStarAssociateTeamMemberResult', {
        'ClientRequestToken': Optional[str],
    }
)


CodeStarS3Location = TypedDict(
    'CodeStarS3Location', {
        'BucketName': Optional[str],
        'BucketKey': Optional[str],
    }
)


CodeStarCodeSource = TypedDict(
    'CodeStarCodeSource', {
        'S3Location': CodeStarS3Location,
    }
)


CodeStarCodeCommitCodeDestination = TypedDict(
    'CodeStarCodeCommitCodeDestination', {
        'RepositoryName': str,
    }
)


CodeStarGitHubCodeDestination = TypedDict(
    'CodeStarGitHubCodeDestination', {
        'RepositoryName': str,
        'RepositoryType': str,
        'RepositoryOwner': str,
        'RepositoryIsPrivate': bool,
        'RepositoryEnableIssues': bool,
        'GitHubPersonalToken': str,
        'RepositoryDescription': Optional[str],
    }
)


CodeStarCodeDestination = TypedDict(
    'CodeStarCodeDestination', {
        'CodeCommitCodeDestination': Optional[CodeStarCodeCommitCodeDestination],
        'GitHubCodeDestination': Optional[CodeStarGitHubCodeDestination],
    }
)


CodeStarCode = TypedDict(
    'CodeStarCode', {
        'CodeSource': CodeStarCodeSource,
        'CodeDestination': CodeStarCodeDestination,
    }
)


CodeStarToolchainSource = TypedDict(
    'CodeStarToolchainSource', {
        'S3Location': CodeStarS3Location,
    }
)


CodeStarToolchain = TypedDict(
    'CodeStarToolchain', {
        'ToolchainSource': CodeStarToolchainSource,
        'RoleArn': Optional[str],
        'TemplateParameterMap': Optional[Dict[str, str]],
    }
)


CodeStarCreateProjectResult = TypedDict(
    'CodeStarCreateProjectResult', {
        'ProjectId': str,
        'ProjectArn': str,
        'ClientRequestToken': Optional[str],
        'ProjectTemplateId': Optional[str],
    }
)


CodeStarCreateUserProfileResult = TypedDict(
    'CodeStarCreateUserProfileResult', {
        'UserArn': str,
        'UserProfileDisplayName': Optional[str],
        'Email': Optional[str],
        'SshPublicKey': Optional[str],
        'CreatedTimestamp': Optional[datetime.datetime],
        'LastModifiedTimestamp': Optional[datetime.datetime],
    }
)


CodeStarDeleteProjectResult = TypedDict(
    'CodeStarDeleteProjectResult', {
        'StackId': Optional[str],
        'ProjectArn': Optional[str],
    }
)


CodeStarDeleteUserProfileResult = TypedDict(
    'CodeStarDeleteUserProfileResult', {
        'UserArn': str,
    }
)


CodeStarProjectStatus = TypedDict(
    'CodeStarProjectStatus', {
        'State': str,
        'Reason': Optional[str],
    }
)


CodeStarDescribeProjectResult = TypedDict(
    'CodeStarDescribeProjectResult', {
        'ProjectName': Optional[str],
        'ProjectId': Optional[str],
        'ProjectArn': Optional[str],
        'ProjectDescription': Optional[str],
        'ClientRequestToken': Optional[str],
        'CreatedTimestamp': Optional[datetime.datetime],
        'StackId': Optional[str],
        'ProjectTemplateId': Optional[str],
        'ProjectStatus': Optional[CodeStarProjectStatus],
    }
)


CodeStarDescribeUserProfileResult = TypedDict(
    'CodeStarDescribeUserProfileResult', {
        'UserArn': str,
        'CreatedTimestamp': datetime.datetime,
        'LastModifiedTimestamp': datetime.datetime,
        'UserProfileDisplayName': Optional[str],
        'Email': Optional[str],
        'SshPublicKey': Optional[str],
    }
)


CodeStarDisassociateTeamMemberResult = TypedDict(
    'CodeStarDisassociateTeamMemberResult', {
    }
)


CodeStarProjectSummary = TypedDict(
    'CodeStarProjectSummary', {
        'ProjectId': Optional[str],
        'ProjectArn': Optional[str],
    }
)


CodeStarListProjectsResult = TypedDict(
    'CodeStarListProjectsResult', {
        'ProjectsList': List[CodeStarProjectSummary],
        'PaginationToken': Optional[str],
    }
)


CodeStarResource = TypedDict(
    'CodeStarResource', {
        'ResourceId': str,
    }
)


CodeStarListResourcesResult = TypedDict(
    'CodeStarListResourcesResult', {
        'ResourcesResult': Optional[List[CodeStarResource]],
        'PaginationToken': Optional[str],
    }
)


CodeStarListTagsForProjectResult = TypedDict(
    'CodeStarListTagsForProjectResult', {
        'Tags': Optional[Dict[str, str]],
        'PaginationToken': Optional[str],
    }
)


CodeStarTeamMember = TypedDict(
    'CodeStarTeamMember', {
        'UserArn': str,
        'Role': str,
        'RemoteAccessAllowed': Optional[bool],
    }
)


CodeStarListTeamMembersResult = TypedDict(
    'CodeStarListTeamMembersResult', {
        'TeamMemberResult': List[CodeStarTeamMember],
        'PaginationToken': Optional[str],
    }
)


CodeStarUserProfileSummary = TypedDict(
    'CodeStarUserProfileSummary', {
        'UserArn': Optional[str],
        'UserProfileDisplayName': Optional[str],
        'Email': Optional[str],
        'SshPublicKey': Optional[str],
    }
)


CodeStarListUserProfilesResult = TypedDict(
    'CodeStarListUserProfilesResult', {
        'UserProfilesList': List[CodeStarUserProfileSummary],
        'PaginationToken': Optional[str],
    }
)


CodeStarTagProjectResult = TypedDict(
    'CodeStarTagProjectResult', {
        'Tags': Optional[Dict[str, str]],
    }
)


CodeStarUntagProjectResult = TypedDict(
    'CodeStarUntagProjectResult', {
    }
)


CodeStarUpdateProjectResult = TypedDict(
    'CodeStarUpdateProjectResult', {
    }
)


CodeStarUpdateTeamMemberResult = TypedDict(
    'CodeStarUpdateTeamMemberResult', {
        'UserArn': Optional[str],
        'Role': Optional[str],
        'RemoteAccessAllowed': Optional[bool],
    }
)


CodeStarUpdateUserProfileResult = TypedDict(
    'CodeStarUpdateUserProfileResult', {
        'UserArn': str,
        'UserProfileDisplayName': Optional[str],
        'Email': Optional[str],
        'SshPublicKey': Optional[str],
        'CreatedTimestamp': Optional[datetime.datetime],
        'LastModifiedTimestamp': Optional[datetime.datetime],
    }
)


class CognitoIdentity(BaseClient):
    def create_identity_pool(self, *,
        IdentityPoolName: str,
        AllowUnauthenticatedIdentities: bool,
        SupportedLoginProviders: Dict[str, str] = ...,
        DeveloperProviderName: str = ...,
        OpenIdConnectProviderARNs: List[str] = ...,
        CognitoIdentityProviders: List[CognitoIdentityCognitoIdentityProvider] = ...,
        SamlProviderARNs: List[str] = ...,
        IdentityPoolTags: Dict[str, str] = ...
    ) -> CognitoIdentityIdentityPool: ...

    def delete_identities(self, *,
        IdentityIdsToDelete: List[str]
    ) -> CognitoIdentityDeleteIdentitiesResponse: ...

    def delete_identity_pool(self, *,
        IdentityPoolId: str
    ): ...

    def describe_identity(self, *,
        IdentityId: str
    ) -> CognitoIdentityIdentityDescription: ...

    def describe_identity_pool(self, *,
        IdentityPoolId: str
    ) -> CognitoIdentityIdentityPool: ...

    def get_credentials_for_identity(self, *,
        IdentityId: str,
        Logins: Dict[str, str] = ...,
        CustomRoleArn: str = ...
    ) -> CognitoIdentityGetCredentialsForIdentityResponse: ...

    def get_id(self, *,
        IdentityPoolId: str,
        AccountId: str = ...,
        Logins: Dict[str, str] = ...
    ) -> CognitoIdentityGetIdResponse: ...

    def get_identity_pool_roles(self, *,
        IdentityPoolId: str
    ) -> CognitoIdentityGetIdentityPoolRolesResponse: ...

    def get_open_id_token(self, *,
        IdentityId: str,
        Logins: Dict[str, str] = ...
    ) -> CognitoIdentityGetOpenIdTokenResponse: ...

    def get_open_id_token_for_developer_identity(self, *,
        IdentityPoolId: str,
        Logins: Dict[str, str],
        IdentityId: str = ...,
        TokenDuration: int = ...
    ) -> CognitoIdentityGetOpenIdTokenForDeveloperIdentityResponse: ...

    def list_identities(self, *,
        IdentityPoolId: str,
        MaxResults: int,
        NextToken: str = ...,
        HideDisabled: bool = ...
    ) -> CognitoIdentityListIdentitiesResponse: ...

    def list_identity_pools(self, *,
        MaxResults: int,
        NextToken: str = ...
    ) -> CognitoIdentityListIdentityPoolsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> CognitoIdentityListTagsForResourceResponse: ...

    def lookup_developer_identity(self, *,
        IdentityPoolId: str,
        IdentityId: str = ...,
        DeveloperUserIdentifier: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> CognitoIdentityLookupDeveloperIdentityResponse: ...

    def merge_developer_identities(self, *,
        SourceUserIdentifier: str,
        DestinationUserIdentifier: str,
        DeveloperProviderName: str,
        IdentityPoolId: str
    ) -> CognitoIdentityMergeDeveloperIdentitiesResponse: ...

    def set_identity_pool_roles(self, *,
        IdentityPoolId: str,
        Roles: Dict[str, str],
        RoleMappings: Dict[str, CognitoIdentityRoleMapping] = ...
    ): ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: Dict[str, str] = ...
    ) -> CognitoIdentityTagResourceResponse: ...

    def unlink_developer_identity(self, *,
        IdentityId: str,
        IdentityPoolId: str,
        DeveloperProviderName: str,
        DeveloperUserIdentifier: str
    ): ...

    def unlink_identity(self, *,
        IdentityId: str,
        Logins: Dict[str, str],
        LoginsToRemove: List[str]
    ): ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str] = ...
    ) -> CognitoIdentityUntagResourceResponse: ...

    def update_identity_pool(self, *,
        IdentityPoolId: str,
        IdentityPoolName: str,
        AllowUnauthenticatedIdentities: bool,
        SupportedLoginProviders: Dict[str, str] = ...,
        DeveloperProviderName: str = ...,
        OpenIdConnectProviderARNs: List[str] = ...,
        CognitoIdentityProviders: List[CognitoIdentityCognitoIdentityProvider] = ...,
        SamlProviderARNs: List[str] = ...,
        IdentityPoolTags: Dict[str, str] = ...
    ) -> CognitoIdentityIdentityPool: ...


CognitoIdentityCognitoIdentityProvider = TypedDict(
    'CognitoIdentityCognitoIdentityProvider', {
        'CognitoIdentityProviderName': Optional[str],
        'CognitoIdentityProviderClientId': Optional[str],
        'CognitoIdentityProviderTokenCheck': Optional[bool],
    }
)


CognitoIdentityIdentityPool = TypedDict(
    'CognitoIdentityIdentityPool', {
        'IdentityPoolId': str,
        'IdentityPoolName': str,
        'IdentityPoolUnauthenticated': bool,
        'IdentityProviders': Optional[Dict[str, str]],
        'DeveloperProviderName': Optional[str],
        'OIDCProviderList': Optional[List[str]],
        'CognitoIdentityProviderList': Optional[List[CognitoIdentityCognitoIdentityProvider]],
        'SAMLProviderList': Optional[List[str]],
        'IdentityPoolTagsType': Optional[Dict[str, str]],
    }
)


CognitoIdentityUnprocessedIdentityId = TypedDict(
    'CognitoIdentityUnprocessedIdentityId', {
        'IdentityId': Optional[str],
        'ErrorCode': Optional[str],
    }
)


CognitoIdentityDeleteIdentitiesResponse = TypedDict(
    'CognitoIdentityDeleteIdentitiesResponse', {
        'UnprocessedIdentityIdList': Optional[List[CognitoIdentityUnprocessedIdentityId]],
    }
)


CognitoIdentityIdentityDescription = TypedDict(
    'CognitoIdentityIdentityDescription', {
        'IdentityId': Optional[str],
        'LoginsList': Optional[List[str]],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
    }
)


CognitoIdentityCredentials = TypedDict(
    'CognitoIdentityCredentials', {
        'AccessKeyString': Optional[str],
        'SecretKeyString': Optional[str],
        'SessionTokenString': Optional[str],
        'DateType': Optional[datetime.datetime],
    }
)


CognitoIdentityGetCredentialsForIdentityResponse = TypedDict(
    'CognitoIdentityGetCredentialsForIdentityResponse', {
        'IdentityId': Optional[str],
        'Credentials': Optional[CognitoIdentityCredentials],
    }
)


CognitoIdentityGetIdResponse = TypedDict(
    'CognitoIdentityGetIdResponse', {
        'IdentityId': Optional[str],
    }
)


CognitoIdentityMappingRule = TypedDict(
    'CognitoIdentityMappingRule', {
        'ClaimName': str,
        'MappingRuleMatchType': str,
        'ClaimValue': str,
        'ARNString': str,
    }
)


CognitoIdentityRulesConfigurationType = TypedDict(
    'CognitoIdentityRulesConfigurationType', {
        'MappingRulesList': List[CognitoIdentityMappingRule],
    }
)


CognitoIdentityRoleMapping = TypedDict(
    'CognitoIdentityRoleMapping', {
        'RoleMappingType': str,
        'AmbiguousRoleResolutionType': Optional[str],
        'RulesConfigurationType': Optional[CognitoIdentityRulesConfigurationType],
    }
)


CognitoIdentityGetIdentityPoolRolesResponse = TypedDict(
    'CognitoIdentityGetIdentityPoolRolesResponse', {
        'IdentityPoolId': Optional[str],
        'RolesMap': Optional[Dict[str, str]],
        'RoleMappingMap': Optional[Dict[str, CognitoIdentityRoleMapping]],
    }
)


CognitoIdentityGetOpenIdTokenResponse = TypedDict(
    'CognitoIdentityGetOpenIdTokenResponse', {
        'IdentityId': Optional[str],
        'OIDCToken': Optional[str],
    }
)


CognitoIdentityGetOpenIdTokenForDeveloperIdentityResponse = TypedDict(
    'CognitoIdentityGetOpenIdTokenForDeveloperIdentityResponse', {
        'IdentityId': Optional[str],
        'OIDCToken': Optional[str],
    }
)


CognitoIdentityListIdentitiesResponse = TypedDict(
    'CognitoIdentityListIdentitiesResponse', {
        'IdentityPoolId': Optional[str],
        'IdentitiesList': Optional[List[CognitoIdentityIdentityDescription]],
        'PaginationKey': Optional[str],
    }
)


CognitoIdentityIdentityPoolShortDescription = TypedDict(
    'CognitoIdentityIdentityPoolShortDescription', {
        'IdentityPoolId': Optional[str],
        'IdentityPoolName': Optional[str],
    }
)


CognitoIdentityListIdentityPoolsResponse = TypedDict(
    'CognitoIdentityListIdentityPoolsResponse', {
        'IdentityPoolsList': Optional[List[CognitoIdentityIdentityPoolShortDescription]],
        'PaginationKey': Optional[str],
    }
)


CognitoIdentityListTagsForResourceResponse = TypedDict(
    'CognitoIdentityListTagsForResourceResponse', {
        'IdentityPoolTagsType': Optional[Dict[str, str]],
    }
)


CognitoIdentityLookupDeveloperIdentityResponse = TypedDict(
    'CognitoIdentityLookupDeveloperIdentityResponse', {
        'IdentityId': Optional[str],
        'DeveloperUserIdentifierList': Optional[List[str]],
        'PaginationKey': Optional[str],
    }
)


CognitoIdentityMergeDeveloperIdentitiesResponse = TypedDict(
    'CognitoIdentityMergeDeveloperIdentitiesResponse', {
        'IdentityId': Optional[str],
    }
)


CognitoIdentityTagResourceResponse = TypedDict(
    'CognitoIdentityTagResourceResponse', {
    }
)


CognitoIdentityUntagResourceResponse = TypedDict(
    'CognitoIdentityUntagResourceResponse', {
    }
)


class CognitoIdentityProvider(BaseClient):
    def add_custom_attributes(self, *,
        UserPoolId: str,
        CustomAttributes: List[CognitoIdentityProviderSchemaAttributeType]
    ) -> CognitoIdentityProviderAddCustomAttributesResponse: ...

    def admin_add_user_to_group(self, *,
        UserPoolId: str,
        Username: str,
        GroupName: str
    ): ...

    def admin_confirm_sign_up(self, *,
        UserPoolId: str,
        Username: str
    ) -> CognitoIdentityProviderAdminConfirmSignUpResponse: ...

    def admin_create_user(self, *,
        UserPoolId: str,
        Username: str,
        UserAttributes: List[CognitoIdentityProviderAttributeType] = ...,
        ValidationData: List[CognitoIdentityProviderAttributeType] = ...,
        TemporaryPassword: str = ...,
        ForceAliasCreation: bool = ...,
        MessageAction: str = ...,
        DesiredDeliveryMediums: List[str] = ...
    ) -> CognitoIdentityProviderAdminCreateUserResponse: ...

    def admin_delete_user(self, *,
        UserPoolId: str,
        Username: str
    ): ...

    def admin_delete_user_attributes(self, *,
        UserPoolId: str,
        Username: str,
        UserAttributeNames: List[str]
    ) -> CognitoIdentityProviderAdminDeleteUserAttributesResponse: ...

    def admin_disable_provider_for_user(self, *,
        UserPoolId: str,
        User: CognitoIdentityProviderProviderUserIdentifierType
    ) -> CognitoIdentityProviderAdminDisableProviderForUserResponse: ...

    def admin_disable_user(self, *,
        UserPoolId: str,
        Username: str
    ) -> CognitoIdentityProviderAdminDisableUserResponse: ...

    def admin_enable_user(self, *,
        UserPoolId: str,
        Username: str
    ) -> CognitoIdentityProviderAdminEnableUserResponse: ...

    def admin_forget_device(self, *,
        UserPoolId: str,
        Username: str,
        DeviceKey: str
    ): ...

    def admin_get_device(self, *,
        DeviceKey: str,
        UserPoolId: str,
        Username: str
    ) -> CognitoIdentityProviderAdminGetDeviceResponse: ...

    def admin_get_user(self, *,
        UserPoolId: str,
        Username: str
    ) -> CognitoIdentityProviderAdminGetUserResponse: ...

    def admin_initiate_auth(self, *,
        UserPoolId: str,
        ClientId: str,
        AuthFlow: str,
        AuthParameters: Dict[str, str] = ...,
        ClientMetadata: Dict[str, str] = ...,
        AnalyticsMetadata: CognitoIdentityProviderAnalyticsMetadataType = ...,
        ContextData: CognitoIdentityProviderContextDataType = ...
    ) -> CognitoIdentityProviderAdminInitiateAuthResponse: ...

    def admin_link_provider_for_user(self, *,
        UserPoolId: str,
        DestinationUser: CognitoIdentityProviderProviderUserIdentifierType,
        SourceUser: CognitoIdentityProviderProviderUserIdentifierType
    ) -> CognitoIdentityProviderAdminLinkProviderForUserResponse: ...

    def admin_list_devices(self, *,
        UserPoolId: str,
        Username: str,
        Limit: int = ...,
        PaginationToken: str = ...
    ) -> CognitoIdentityProviderAdminListDevicesResponse: ...

    def admin_list_groups_for_user(self, *,
        Username: str,
        UserPoolId: str,
        Limit: int = ...,
        NextToken: str = ...
    ) -> CognitoIdentityProviderAdminListGroupsForUserResponse: ...

    def admin_list_user_auth_events(self, *,
        UserPoolId: str,
        Username: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> CognitoIdentityProviderAdminListUserAuthEventsResponse: ...

    def admin_remove_user_from_group(self, *,
        UserPoolId: str,
        Username: str,
        GroupName: str
    ): ...

    def admin_reset_user_password(self, *,
        UserPoolId: str,
        Username: str
    ) -> CognitoIdentityProviderAdminResetUserPasswordResponse: ...

    def admin_respond_to_auth_challenge(self, *,
        UserPoolId: str,
        ClientId: str,
        ChallengeName: str,
        ChallengeResponses: Dict[str, str] = ...,
        Session: str = ...,
        AnalyticsMetadata: CognitoIdentityProviderAnalyticsMetadataType = ...,
        ContextData: CognitoIdentityProviderContextDataType = ...
    ) -> CognitoIdentityProviderAdminRespondToAuthChallengeResponse: ...

    def admin_set_user_mfa_preference(self, *,
        Username: str,
        UserPoolId: str,
        SMSMfaSettings: CognitoIdentityProviderSMSMfaSettingsType = ...,
        SoftwareTokenMfaSettings: CognitoIdentityProviderSoftwareTokenMfaSettingsType = ...
    ) -> CognitoIdentityProviderAdminSetUserMFAPreferenceResponse: ...

    def admin_set_user_password(self, *,
        UserPoolId: str,
        Username: str,
        Password: str,
        Permanent: bool = ...
    ) -> CognitoIdentityProviderAdminSetUserPasswordResponse: ...

    def admin_set_user_settings(self, *,
        UserPoolId: str,
        Username: str,
        MFAOptions: List[CognitoIdentityProviderMFAOptionType]
    ) -> CognitoIdentityProviderAdminSetUserSettingsResponse: ...

    def admin_update_auth_event_feedback(self, *,
        UserPoolId: str,
        Username: str,
        EventId: str,
        FeedbackValue: str
    ) -> CognitoIdentityProviderAdminUpdateAuthEventFeedbackResponse: ...

    def admin_update_device_status(self, *,
        UserPoolId: str,
        Username: str,
        DeviceKey: str,
        DeviceRememberedStatus: str = ...
    ) -> CognitoIdentityProviderAdminUpdateDeviceStatusResponse: ...

    def admin_update_user_attributes(self, *,
        UserPoolId: str,
        Username: str,
        UserAttributes: List[CognitoIdentityProviderAttributeType]
    ) -> CognitoIdentityProviderAdminUpdateUserAttributesResponse: ...

    def admin_user_global_sign_out(self, *,
        UserPoolId: str,
        Username: str
    ) -> CognitoIdentityProviderAdminUserGlobalSignOutResponse: ...

    def associate_software_token(self, *,
        AccessToken: str = ...,
        Session: str = ...
    ) -> CognitoIdentityProviderAssociateSoftwareTokenResponse: ...

    def change_password(self, *,
        PreviousPassword: str,
        ProposedPassword: str,
        AccessToken: str
    ) -> CognitoIdentityProviderChangePasswordResponse: ...

    def confirm_device(self, *,
        AccessToken: str,
        DeviceKey: str,
        DeviceSecretVerifierConfig: CognitoIdentityProviderDeviceSecretVerifierConfigType = ...,
        DeviceName: str = ...
    ) -> CognitoIdentityProviderConfirmDeviceResponse: ...

    def confirm_forgot_password(self, *,
        ClientId: str,
        Username: str,
        ConfirmationCode: str,
        Password: str,
        SecretHash: str = ...,
        AnalyticsMetadata: CognitoIdentityProviderAnalyticsMetadataType = ...,
        UserContextData: CognitoIdentityProviderUserContextDataType = ...
    ) -> CognitoIdentityProviderConfirmForgotPasswordResponse: ...

    def confirm_sign_up(self, *,
        ClientId: str,
        Username: str,
        ConfirmationCode: str,
        SecretHash: str = ...,
        ForceAliasCreation: bool = ...,
        AnalyticsMetadata: CognitoIdentityProviderAnalyticsMetadataType = ...,
        UserContextData: CognitoIdentityProviderUserContextDataType = ...
    ) -> CognitoIdentityProviderConfirmSignUpResponse: ...

    def create_group(self, *,
        GroupName: str,
        UserPoolId: str,
        Description: str = ...,
        RoleArn: str = ...,
        Precedence: int = ...
    ) -> CognitoIdentityProviderCreateGroupResponse: ...

    def create_identity_provider(self, *,
        UserPoolId: str,
        ProviderName: str,
        ProviderType: str,
        ProviderDetails: Dict[str, str],
        AttributeMapping: Dict[str, str] = ...,
        IdpIdentifiers: List[str] = ...
    ) -> CognitoIdentityProviderCreateIdentityProviderResponse: ...

    def create_resource_server(self, *,
        UserPoolId: str,
        Identifier: str,
        Name: str,
        Scopes: List[CognitoIdentityProviderResourceServerScopeType] = ...
    ) -> CognitoIdentityProviderCreateResourceServerResponse: ...

    def create_user_import_job(self, *,
        JobName: str,
        UserPoolId: str,
        CloudWatchLogsRoleArn: str
    ) -> CognitoIdentityProviderCreateUserImportJobResponse: ...

    def create_user_pool(self, *,
        PoolName: str,
        Policies: CognitoIdentityProviderUserPoolPolicyType = ...,
        LambdaConfig: CognitoIdentityProviderLambdaConfigType = ...,
        AutoVerifiedAttributes: List[str] = ...,
        AliasAttributes: List[str] = ...,
        UsernameAttributes: List[str] = ...,
        SmsVerificationMessage: str = ...,
        EmailVerificationMessage: str = ...,
        EmailVerificationSubject: str = ...,
        VerificationMessageTemplate: CognitoIdentityProviderVerificationMessageTemplateType = ...,
        SmsAuthenticationMessage: str = ...,
        MfaConfiguration: str = ...,
        DeviceConfiguration: CognitoIdentityProviderDeviceConfigurationType = ...,
        EmailConfiguration: CognitoIdentityProviderEmailConfigurationType = ...,
        SmsConfiguration: CognitoIdentityProviderSmsConfigurationType = ...,
        UserPoolTags: Dict[str, str] = ...,
        AdminCreateUserConfig: CognitoIdentityProviderAdminCreateUserConfigType = ...,
        Schema: List[CognitoIdentityProviderSchemaAttributeType] = ...,
        UserPoolAddOns: CognitoIdentityProviderUserPoolAddOnsType = ...
    ) -> CognitoIdentityProviderCreateUserPoolResponse: ...

    def create_user_pool_client(self, *,
        UserPoolId: str,
        ClientName: str,
        GenerateSecret: bool = ...,
        RefreshTokenValidity: int = ...,
        ReadAttributes: List[str] = ...,
        WriteAttributes: List[str] = ...,
        ExplicitAuthFlows: List[str] = ...,
        SupportedIdentityProviders: List[str] = ...,
        CallbackURLs: List[str] = ...,
        LogoutURLs: List[str] = ...,
        DefaultRedirectURI: str = ...,
        AllowedOAuthFlows: List[str] = ...,
        AllowedOAuthScopes: List[str] = ...,
        AllowedOAuthFlowsUserPoolClient: bool = ...,
        AnalyticsConfiguration: CognitoIdentityProviderAnalyticsConfigurationType = ...
    ) -> CognitoIdentityProviderCreateUserPoolClientResponse: ...

    def create_user_pool_domain(self, *,
        Domain: str,
        UserPoolId: str,
        CustomDomainConfig: CognitoIdentityProviderCustomDomainConfigType = ...
    ) -> CognitoIdentityProviderCreateUserPoolDomainResponse: ...

    def delete_group(self, *,
        GroupName: str,
        UserPoolId: str
    ): ...

    def delete_identity_provider(self, *,
        UserPoolId: str,
        ProviderName: str
    ): ...

    def delete_resource_server(self, *,
        UserPoolId: str,
        Identifier: str
    ): ...

    def delete_user(self, *,
        AccessToken: str
    ): ...

    def delete_user_attributes(self, *,
        UserAttributeNames: List[str],
        AccessToken: str
    ) -> CognitoIdentityProviderDeleteUserAttributesResponse: ...

    def delete_user_pool(self, *,
        UserPoolId: str
    ): ...

    def delete_user_pool_client(self, *,
        UserPoolId: str,
        ClientId: str
    ): ...

    def delete_user_pool_domain(self, *,
        Domain: str,
        UserPoolId: str
    ) -> CognitoIdentityProviderDeleteUserPoolDomainResponse: ...

    def describe_identity_provider(self, *,
        UserPoolId: str,
        ProviderName: str
    ) -> CognitoIdentityProviderDescribeIdentityProviderResponse: ...

    def describe_resource_server(self, *,
        UserPoolId: str,
        Identifier: str
    ) -> CognitoIdentityProviderDescribeResourceServerResponse: ...

    def describe_risk_configuration(self, *,
        UserPoolId: str,
        ClientId: str = ...
    ) -> CognitoIdentityProviderDescribeRiskConfigurationResponse: ...

    def describe_user_import_job(self, *,
        UserPoolId: str,
        JobId: str
    ) -> CognitoIdentityProviderDescribeUserImportJobResponse: ...

    def describe_user_pool(self, *,
        UserPoolId: str
    ) -> CognitoIdentityProviderDescribeUserPoolResponse: ...

    def describe_user_pool_client(self, *,
        UserPoolId: str,
        ClientId: str
    ) -> CognitoIdentityProviderDescribeUserPoolClientResponse: ...

    def describe_user_pool_domain(self, *,
        Domain: str
    ) -> CognitoIdentityProviderDescribeUserPoolDomainResponse: ...

    def forget_device(self, *,
        DeviceKey: str,
        AccessToken: str = ...
    ): ...

    def forgot_password(self, *,
        ClientId: str,
        Username: str,
        SecretHash: str = ...,
        UserContextData: CognitoIdentityProviderUserContextDataType = ...,
        AnalyticsMetadata: CognitoIdentityProviderAnalyticsMetadataType = ...
    ) -> CognitoIdentityProviderForgotPasswordResponse: ...

    def get_csv_header(self, *,
        UserPoolId: str
    ) -> CognitoIdentityProviderGetCSVHeaderResponse: ...

    def get_device(self, *,
        DeviceKey: str,
        AccessToken: str = ...
    ) -> CognitoIdentityProviderGetDeviceResponse: ...

    def get_group(self, *,
        GroupName: str,
        UserPoolId: str
    ) -> CognitoIdentityProviderGetGroupResponse: ...

    def get_identity_provider_by_identifier(self, *,
        UserPoolId: str,
        IdpIdentifier: str
    ) -> CognitoIdentityProviderGetIdentityProviderByIdentifierResponse: ...

    def get_signing_certificate(self, *,
        UserPoolId: str
    ) -> CognitoIdentityProviderGetSigningCertificateResponse: ...

    def get_ui_customization(self, *,
        UserPoolId: str,
        ClientId: str = ...
    ) -> CognitoIdentityProviderGetUICustomizationResponse: ...

    def get_user(self, *,
        AccessToken: str
    ) -> CognitoIdentityProviderGetUserResponse: ...

    def get_user_attribute_verification_code(self, *,
        AccessToken: str,
        AttributeName: str
    ) -> CognitoIdentityProviderGetUserAttributeVerificationCodeResponse: ...

    def get_user_pool_mfa_config(self, *,
        UserPoolId: str
    ) -> CognitoIdentityProviderGetUserPoolMfaConfigResponse: ...

    def global_sign_out(self, *,
        AccessToken: str
    ) -> CognitoIdentityProviderGlobalSignOutResponse: ...

    def initiate_auth(self, *,
        AuthFlow: str,
        ClientId: str,
        AuthParameters: Dict[str, str] = ...,
        ClientMetadata: Dict[str, str] = ...,
        AnalyticsMetadata: CognitoIdentityProviderAnalyticsMetadataType = ...,
        UserContextData: CognitoIdentityProviderUserContextDataType = ...
    ) -> CognitoIdentityProviderInitiateAuthResponse: ...

    def list_devices(self, *,
        AccessToken: str,
        Limit: int = ...,
        PaginationToken: str = ...
    ) -> CognitoIdentityProviderListDevicesResponse: ...

    def list_groups(self, *,
        UserPoolId: str,
        Limit: int = ...,
        NextToken: str = ...
    ) -> CognitoIdentityProviderListGroupsResponse: ...

    def list_identity_providers(self, *,
        UserPoolId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> CognitoIdentityProviderListIdentityProvidersResponse: ...

    def list_resource_servers(self, *,
        UserPoolId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> CognitoIdentityProviderListResourceServersResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> CognitoIdentityProviderListTagsForResourceResponse: ...

    def list_user_import_jobs(self, *,
        UserPoolId: str,
        MaxResults: int,
        PaginationToken: str = ...
    ) -> CognitoIdentityProviderListUserImportJobsResponse: ...

    def list_user_pool_clients(self, *,
        UserPoolId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> CognitoIdentityProviderListUserPoolClientsResponse: ...

    def list_user_pools(self, *,
        MaxResults: int,
        NextToken: str = ...
    ) -> CognitoIdentityProviderListUserPoolsResponse: ...

    def list_users(self, *,
        UserPoolId: str,
        AttributesToGet: List[str] = ...,
        Limit: int = ...,
        PaginationToken: str = ...,
        Filter: str = ...
    ) -> CognitoIdentityProviderListUsersResponse: ...

    def list_users_in_group(self, *,
        UserPoolId: str,
        GroupName: str,
        Limit: int = ...,
        NextToken: str = ...
    ) -> CognitoIdentityProviderListUsersInGroupResponse: ...

    def resend_confirmation_code(self, *,
        ClientId: str,
        Username: str,
        SecretHash: str = ...,
        UserContextData: CognitoIdentityProviderUserContextDataType = ...,
        AnalyticsMetadata: CognitoIdentityProviderAnalyticsMetadataType = ...
    ) -> CognitoIdentityProviderResendConfirmationCodeResponse: ...

    def respond_to_auth_challenge(self, *,
        ClientId: str,
        ChallengeName: str,
        Session: str = ...,
        ChallengeResponses: Dict[str, str] = ...,
        AnalyticsMetadata: CognitoIdentityProviderAnalyticsMetadataType = ...,
        UserContextData: CognitoIdentityProviderUserContextDataType = ...
    ) -> CognitoIdentityProviderRespondToAuthChallengeResponse: ...

    def set_risk_configuration(self, *,
        UserPoolId: str,
        ClientId: str = ...,
        CompromisedCredentialsRiskConfiguration: CognitoIdentityProviderCompromisedCredentialsRiskConfigurationType = ...,
        AccountTakeoverRiskConfiguration: CognitoIdentityProviderAccountTakeoverRiskConfigurationType = ...,
        RiskExceptionConfiguration: CognitoIdentityProviderRiskExceptionConfigurationType = ...
    ) -> CognitoIdentityProviderSetRiskConfigurationResponse: ...

    def set_ui_customization(self, *,
        UserPoolId: str,
        ClientId: str = ...,
        CSS: str = ...,
        ImageFile: bytes = ...
    ) -> CognitoIdentityProviderSetUICustomizationResponse: ...

    def set_user_mfa_preference(self, *,
        AccessToken: str,
        SMSMfaSettings: CognitoIdentityProviderSMSMfaSettingsType = ...,
        SoftwareTokenMfaSettings: CognitoIdentityProviderSoftwareTokenMfaSettingsType = ...
    ) -> CognitoIdentityProviderSetUserMFAPreferenceResponse: ...

    def set_user_pool_mfa_config(self, *,
        UserPoolId: str,
        SmsMfaConfiguration: CognitoIdentityProviderSmsMfaConfigType = ...,
        SoftwareTokenMfaConfiguration: CognitoIdentityProviderSoftwareTokenMfaConfigType = ...,
        MfaConfiguration: str = ...
    ) -> CognitoIdentityProviderSetUserPoolMfaConfigResponse: ...

    def set_user_settings(self, *,
        AccessToken: str,
        MFAOptions: List[CognitoIdentityProviderMFAOptionType]
    ) -> CognitoIdentityProviderSetUserSettingsResponse: ...

    def sign_up(self, *,
        ClientId: str,
        Username: str,
        Password: str,
        SecretHash: str = ...,
        UserAttributes: List[CognitoIdentityProviderAttributeType] = ...,
        ValidationData: List[CognitoIdentityProviderAttributeType] = ...,
        AnalyticsMetadata: CognitoIdentityProviderAnalyticsMetadataType = ...,
        UserContextData: CognitoIdentityProviderUserContextDataType = ...
    ) -> CognitoIdentityProviderSignUpResponse: ...

    def start_user_import_job(self, *,
        UserPoolId: str,
        JobId: str
    ) -> CognitoIdentityProviderStartUserImportJobResponse: ...

    def stop_user_import_job(self, *,
        UserPoolId: str,
        JobId: str
    ) -> CognitoIdentityProviderStopUserImportJobResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: Dict[str, str] = ...
    ) -> CognitoIdentityProviderTagResourceResponse: ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str] = ...
    ) -> CognitoIdentityProviderUntagResourceResponse: ...

    def update_auth_event_feedback(self, *,
        UserPoolId: str,
        Username: str,
        EventId: str,
        FeedbackToken: str,
        FeedbackValue: str
    ) -> CognitoIdentityProviderUpdateAuthEventFeedbackResponse: ...

    def update_device_status(self, *,
        AccessToken: str,
        DeviceKey: str,
        DeviceRememberedStatus: str = ...
    ) -> CognitoIdentityProviderUpdateDeviceStatusResponse: ...

    def update_group(self, *,
        GroupName: str,
        UserPoolId: str,
        Description: str = ...,
        RoleArn: str = ...,
        Precedence: int = ...
    ) -> CognitoIdentityProviderUpdateGroupResponse: ...

    def update_identity_provider(self, *,
        UserPoolId: str,
        ProviderName: str,
        ProviderDetails: Dict[str, str] = ...,
        AttributeMapping: Dict[str, str] = ...,
        IdpIdentifiers: List[str] = ...
    ) -> CognitoIdentityProviderUpdateIdentityProviderResponse: ...

    def update_resource_server(self, *,
        UserPoolId: str,
        Identifier: str,
        Name: str,
        Scopes: List[CognitoIdentityProviderResourceServerScopeType] = ...
    ) -> CognitoIdentityProviderUpdateResourceServerResponse: ...

    def update_user_attributes(self, *,
        UserAttributes: List[CognitoIdentityProviderAttributeType],
        AccessToken: str
    ) -> CognitoIdentityProviderUpdateUserAttributesResponse: ...

    def update_user_pool(self, *,
        UserPoolId: str,
        Policies: CognitoIdentityProviderUserPoolPolicyType = ...,
        LambdaConfig: CognitoIdentityProviderLambdaConfigType = ...,
        AutoVerifiedAttributes: List[str] = ...,
        SmsVerificationMessage: str = ...,
        EmailVerificationMessage: str = ...,
        EmailVerificationSubject: str = ...,
        VerificationMessageTemplate: CognitoIdentityProviderVerificationMessageTemplateType = ...,
        SmsAuthenticationMessage: str = ...,
        MfaConfiguration: str = ...,
        DeviceConfiguration: CognitoIdentityProviderDeviceConfigurationType = ...,
        EmailConfiguration: CognitoIdentityProviderEmailConfigurationType = ...,
        SmsConfiguration: CognitoIdentityProviderSmsConfigurationType = ...,
        UserPoolTags: Dict[str, str] = ...,
        AdminCreateUserConfig: CognitoIdentityProviderAdminCreateUserConfigType = ...,
        UserPoolAddOns: CognitoIdentityProviderUserPoolAddOnsType = ...
    ) -> CognitoIdentityProviderUpdateUserPoolResponse: ...

    def update_user_pool_client(self, *,
        UserPoolId: str,
        ClientId: str,
        ClientName: str = ...,
        RefreshTokenValidity: int = ...,
        ReadAttributes: List[str] = ...,
        WriteAttributes: List[str] = ...,
        ExplicitAuthFlows: List[str] = ...,
        SupportedIdentityProviders: List[str] = ...,
        CallbackURLs: List[str] = ...,
        LogoutURLs: List[str] = ...,
        DefaultRedirectURI: str = ...,
        AllowedOAuthFlows: List[str] = ...,
        AllowedOAuthScopes: List[str] = ...,
        AllowedOAuthFlowsUserPoolClient: bool = ...,
        AnalyticsConfiguration: CognitoIdentityProviderAnalyticsConfigurationType = ...
    ) -> CognitoIdentityProviderUpdateUserPoolClientResponse: ...

    def update_user_pool_domain(self, *,
        Domain: str,
        UserPoolId: str,
        CustomDomainConfig: CognitoIdentityProviderCustomDomainConfigType
    ) -> CognitoIdentityProviderUpdateUserPoolDomainResponse: ...

    def verify_software_token(self, *,
        UserCode: str,
        AccessToken: str = ...,
        Session: str = ...,
        FriendlyDeviceName: str = ...
    ) -> CognitoIdentityProviderVerifySoftwareTokenResponse: ...

    def verify_user_attribute(self, *,
        AccessToken: str,
        AttributeName: str,
        Code: str
    ) -> CognitoIdentityProviderVerifyUserAttributeResponse: ...


CognitoIdentityProviderNumberAttributeConstraintsType = TypedDict(
    'CognitoIdentityProviderNumberAttributeConstraintsType', {
        'StringType': Optional[str],
        'StringType': Optional[str],
    }
)


CognitoIdentityProviderStringAttributeConstraintsType = TypedDict(
    'CognitoIdentityProviderStringAttributeConstraintsType', {
        'StringType': Optional[str],
        'StringType': Optional[str],
    }
)


CognitoIdentityProviderSchemaAttributeType = TypedDict(
    'CognitoIdentityProviderSchemaAttributeType', {
        'CustomAttributeNameType': Optional[str],
        'AttributeDataType': Optional[str],
        'BooleanType': Optional[bool],
        'BooleanType': Optional[bool],
        'BooleanType': Optional[bool],
        'NumberAttributeConstraintsType': Optional[CognitoIdentityProviderNumberAttributeConstraintsType],
        'StringAttributeConstraintsType': Optional[CognitoIdentityProviderStringAttributeConstraintsType],
    }
)


CognitoIdentityProviderAddCustomAttributesResponse = TypedDict(
    'CognitoIdentityProviderAddCustomAttributesResponse', {
    }
)


CognitoIdentityProviderAdminConfirmSignUpResponse = TypedDict(
    'CognitoIdentityProviderAdminConfirmSignUpResponse', {
    }
)


CognitoIdentityProviderAttributeType = TypedDict(
    'CognitoIdentityProviderAttributeType', {
        'AttributeNameType': str,
        'AttributeValueType': Optional[str],
    }
)


CognitoIdentityProviderMFAOptionType = TypedDict(
    'CognitoIdentityProviderMFAOptionType', {
        'DeliveryMediumType': Optional[str],
        'AttributeNameType': Optional[str],
    }
)


CognitoIdentityProviderUserType = TypedDict(
    'CognitoIdentityProviderUserType', {
        'UsernameType': Optional[str],
        'AttributeListType': Optional[List[CognitoIdentityProviderAttributeType]],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
        'BooleanType': Optional[bool],
        'UserStatusType': Optional[str],
        'MFAOptionListType': Optional[List[CognitoIdentityProviderMFAOptionType]],
    }
)


CognitoIdentityProviderAdminCreateUserResponse = TypedDict(
    'CognitoIdentityProviderAdminCreateUserResponse', {
        'UserType': Optional[CognitoIdentityProviderUserType],
    }
)


CognitoIdentityProviderAdminDeleteUserAttributesResponse = TypedDict(
    'CognitoIdentityProviderAdminDeleteUserAttributesResponse', {
    }
)


CognitoIdentityProviderProviderUserIdentifierType = TypedDict(
    'CognitoIdentityProviderProviderUserIdentifierType', {
        'ProviderNameType': Optional[str],
        'StringType': Optional[str],
        'StringType': Optional[str],
    }
)


CognitoIdentityProviderAdminDisableProviderForUserResponse = TypedDict(
    'CognitoIdentityProviderAdminDisableProviderForUserResponse', {
    }
)


CognitoIdentityProviderAdminDisableUserResponse = TypedDict(
    'CognitoIdentityProviderAdminDisableUserResponse', {
    }
)


CognitoIdentityProviderAdminEnableUserResponse = TypedDict(
    'CognitoIdentityProviderAdminEnableUserResponse', {
    }
)


CognitoIdentityProviderDeviceType = TypedDict(
    'CognitoIdentityProviderDeviceType', {
        'DeviceKeyType': Optional[str],
        'AttributeListType': Optional[List[CognitoIdentityProviderAttributeType]],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
    }
)


CognitoIdentityProviderAdminGetDeviceResponse = TypedDict(
    'CognitoIdentityProviderAdminGetDeviceResponse', {
        'DeviceType': CognitoIdentityProviderDeviceType,
    }
)


CognitoIdentityProviderAdminGetUserResponse = TypedDict(
    'CognitoIdentityProviderAdminGetUserResponse', {
        'UsernameType': str,
        'AttributeListType': Optional[List[CognitoIdentityProviderAttributeType]],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
        'BooleanType': Optional[bool],
        'UserStatusType': Optional[str],
        'MFAOptionListType': Optional[List[CognitoIdentityProviderMFAOptionType]],
        'StringType': Optional[str],
        'UserMFASettingListType': Optional[List[str]],
    }
)


CognitoIdentityProviderAnalyticsMetadataType = TypedDict(
    'CognitoIdentityProviderAnalyticsMetadataType', {
        'StringType': Optional[str],
    }
)


CognitoIdentityProviderHttpHeader = TypedDict(
    'CognitoIdentityProviderHttpHeader', {
        'StringType': Optional[str],
        'StringType': Optional[str],
    }
)


CognitoIdentityProviderContextDataType = TypedDict(
    'CognitoIdentityProviderContextDataType', {
        'StringType': str,
        'StringType': str,
        'StringType': str,
        'HttpHeaderList': List[CognitoIdentityProviderHttpHeader],
        'StringType': Optional[str],
    }
)


CognitoIdentityProviderNewDeviceMetadataType = TypedDict(
    'CognitoIdentityProviderNewDeviceMetadataType', {
        'DeviceKeyType': Optional[str],
        'StringType': Optional[str],
    }
)


CognitoIdentityProviderAuthenticationResultType = TypedDict(
    'CognitoIdentityProviderAuthenticationResultType', {
        'TokenModelType': Optional[str],
        'IntegerType': Optional[int],
        'StringType': Optional[str],
        'TokenModelType': Optional[str],
        'TokenModelType': Optional[str],
        'NewDeviceMetadataType': Optional[CognitoIdentityProviderNewDeviceMetadataType],
    }
)


CognitoIdentityProviderAdminInitiateAuthResponse = TypedDict(
    'CognitoIdentityProviderAdminInitiateAuthResponse', {
        'ChallengeNameType': Optional[str],
        'SessionType': Optional[str],
        'ChallengeParametersType': Optional[Dict[str, str]],
        'AuthenticationResultType': Optional[CognitoIdentityProviderAuthenticationResultType],
    }
)


CognitoIdentityProviderAdminLinkProviderForUserResponse = TypedDict(
    'CognitoIdentityProviderAdminLinkProviderForUserResponse', {
    }
)


CognitoIdentityProviderAdminListDevicesResponse = TypedDict(
    'CognitoIdentityProviderAdminListDevicesResponse', {
        'DeviceListType': Optional[List[CognitoIdentityProviderDeviceType]],
        'SearchPaginationTokenType': Optional[str],
    }
)


CognitoIdentityProviderGroupType = TypedDict(
    'CognitoIdentityProviderGroupType', {
        'GroupNameType': Optional[str],
        'UserPoolIdType': Optional[str],
        'DescriptionType': Optional[str],
        'ArnType': Optional[str],
        'PrecedenceType': Optional[int],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
    }
)


CognitoIdentityProviderAdminListGroupsForUserResponse = TypedDict(
    'CognitoIdentityProviderAdminListGroupsForUserResponse', {
        'GroupListType': Optional[List[CognitoIdentityProviderGroupType]],
        'PaginationKey': Optional[str],
    }
)


CognitoIdentityProviderEventRiskType = TypedDict(
    'CognitoIdentityProviderEventRiskType', {
        'RiskDecisionType': Optional[str],
        'RiskLevelType': Optional[str],
    }
)


CognitoIdentityProviderChallengeResponseType = TypedDict(
    'CognitoIdentityProviderChallengeResponseType', {
        'ChallengeName': Optional[str],
        'ChallengeResponse': Optional[str],
    }
)


CognitoIdentityProviderEventContextDataType = TypedDict(
    'CognitoIdentityProviderEventContextDataType', {
        'StringType': Optional[str],
        'StringType': Optional[str],
        'StringType': Optional[str],
        'StringType': Optional[str],
        'StringType': Optional[str],
    }
)


CognitoIdentityProviderEventFeedbackType = TypedDict(
    'CognitoIdentityProviderEventFeedbackType', {
        'FeedbackValueType': str,
        'StringType': str,
        'DateType': Optional[datetime.datetime],
    }
)


CognitoIdentityProviderAuthEventType = TypedDict(
    'CognitoIdentityProviderAuthEventType', {
        'StringType': Optional[str],
        'EventType': Optional[str],
        'DateType': Optional[datetime.datetime],
        'EventResponseType': Optional[str],
        'EventRiskType': Optional[CognitoIdentityProviderEventRiskType],
        'ChallengeResponseListType': Optional[List[CognitoIdentityProviderChallengeResponseType]],
        'EventContextDataType': Optional[CognitoIdentityProviderEventContextDataType],
        'EventFeedbackType': Optional[CognitoIdentityProviderEventFeedbackType],
    }
)


CognitoIdentityProviderAdminListUserAuthEventsResponse = TypedDict(
    'CognitoIdentityProviderAdminListUserAuthEventsResponse', {
        'AuthEventsType': Optional[List[CognitoIdentityProviderAuthEventType]],
        'PaginationKey': Optional[str],
    }
)


CognitoIdentityProviderAdminResetUserPasswordResponse = TypedDict(
    'CognitoIdentityProviderAdminResetUserPasswordResponse', {
    }
)


CognitoIdentityProviderAdminRespondToAuthChallengeResponse = TypedDict(
    'CognitoIdentityProviderAdminRespondToAuthChallengeResponse', {
        'ChallengeNameType': Optional[str],
        'SessionType': Optional[str],
        'ChallengeParametersType': Optional[Dict[str, str]],
        'AuthenticationResultType': Optional[CognitoIdentityProviderAuthenticationResultType],
    }
)


CognitoIdentityProviderSMSMfaSettingsType = TypedDict(
    'CognitoIdentityProviderSMSMfaSettingsType', {
        'BooleanType': Optional[bool],
        'BooleanType': Optional[bool],
    }
)


CognitoIdentityProviderSoftwareTokenMfaSettingsType = TypedDict(
    'CognitoIdentityProviderSoftwareTokenMfaSettingsType', {
        'BooleanType': Optional[bool],
        'BooleanType': Optional[bool],
    }
)


CognitoIdentityProviderAdminSetUserMFAPreferenceResponse = TypedDict(
    'CognitoIdentityProviderAdminSetUserMFAPreferenceResponse', {
    }
)


CognitoIdentityProviderAdminSetUserPasswordResponse = TypedDict(
    'CognitoIdentityProviderAdminSetUserPasswordResponse', {
    }
)


CognitoIdentityProviderAdminSetUserSettingsResponse = TypedDict(
    'CognitoIdentityProviderAdminSetUserSettingsResponse', {
    }
)


CognitoIdentityProviderAdminUpdateAuthEventFeedbackResponse = TypedDict(
    'CognitoIdentityProviderAdminUpdateAuthEventFeedbackResponse', {
    }
)


CognitoIdentityProviderAdminUpdateDeviceStatusResponse = TypedDict(
    'CognitoIdentityProviderAdminUpdateDeviceStatusResponse', {
    }
)


CognitoIdentityProviderAdminUpdateUserAttributesResponse = TypedDict(
    'CognitoIdentityProviderAdminUpdateUserAttributesResponse', {
    }
)


CognitoIdentityProviderAdminUserGlobalSignOutResponse = TypedDict(
    'CognitoIdentityProviderAdminUserGlobalSignOutResponse', {
    }
)


CognitoIdentityProviderAssociateSoftwareTokenResponse = TypedDict(
    'CognitoIdentityProviderAssociateSoftwareTokenResponse', {
        'SecretCodeType': Optional[str],
        'SessionType': Optional[str],
    }
)


CognitoIdentityProviderChangePasswordResponse = TypedDict(
    'CognitoIdentityProviderChangePasswordResponse', {
    }
)


CognitoIdentityProviderDeviceSecretVerifierConfigType = TypedDict(
    'CognitoIdentityProviderDeviceSecretVerifierConfigType', {
        'StringType': Optional[str],
        'StringType': Optional[str],
    }
)


CognitoIdentityProviderConfirmDeviceResponse = TypedDict(
    'CognitoIdentityProviderConfirmDeviceResponse', {
        'BooleanType': Optional[bool],
    }
)


CognitoIdentityProviderUserContextDataType = TypedDict(
    'CognitoIdentityProviderUserContextDataType', {
        'StringType': Optional[str],
    }
)


CognitoIdentityProviderConfirmForgotPasswordResponse = TypedDict(
    'CognitoIdentityProviderConfirmForgotPasswordResponse', {
    }
)


CognitoIdentityProviderConfirmSignUpResponse = TypedDict(
    'CognitoIdentityProviderConfirmSignUpResponse', {
    }
)


CognitoIdentityProviderCreateGroupResponse = TypedDict(
    'CognitoIdentityProviderCreateGroupResponse', {
        'GroupType': Optional[CognitoIdentityProviderGroupType],
    }
)


CognitoIdentityProviderIdentityProviderType = TypedDict(
    'CognitoIdentityProviderIdentityProviderType', {
        'UserPoolIdType': Optional[str],
        'ProviderNameType': Optional[str],
        'IdentityProviderTypeType': Optional[str],
        'ProviderDetailsType': Optional[Dict[str, str]],
        'AttributeMappingType': Optional[Dict[str, str]],
        'IdpIdentifiersListType': Optional[List[str]],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
    }
)


CognitoIdentityProviderCreateIdentityProviderResponse = TypedDict(
    'CognitoIdentityProviderCreateIdentityProviderResponse', {
        'IdentityProviderType': CognitoIdentityProviderIdentityProviderType,
    }
)


CognitoIdentityProviderResourceServerScopeType = TypedDict(
    'CognitoIdentityProviderResourceServerScopeType', {
        'ResourceServerScopeNameType': str,
        'ResourceServerScopeDescriptionType': str,
    }
)


CognitoIdentityProviderResourceServerType = TypedDict(
    'CognitoIdentityProviderResourceServerType', {
        'UserPoolIdType': Optional[str],
        'ResourceServerIdentifierType': Optional[str],
        'ResourceServerNameType': Optional[str],
        'ResourceServerScopeListType': Optional[List[CognitoIdentityProviderResourceServerScopeType]],
    }
)


CognitoIdentityProviderCreateResourceServerResponse = TypedDict(
    'CognitoIdentityProviderCreateResourceServerResponse', {
        'ResourceServerType': CognitoIdentityProviderResourceServerType,
    }
)


CognitoIdentityProviderUserImportJobType = TypedDict(
    'CognitoIdentityProviderUserImportJobType', {
        'UserImportJobNameType': Optional[str],
        'UserImportJobIdType': Optional[str],
        'UserPoolIdType': Optional[str],
        'PreSignedUrlType': Optional[str],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
        'UserImportJobStatusType': Optional[str],
        'ArnType': Optional[str],
        'LongType': Optional[int],
        'LongType': Optional[int],
        'LongType': Optional[int],
        'CompletionMessageType': Optional[str],
    }
)


CognitoIdentityProviderCreateUserImportJobResponse = TypedDict(
    'CognitoIdentityProviderCreateUserImportJobResponse', {
        'UserImportJobType': Optional[CognitoIdentityProviderUserImportJobType],
    }
)


CognitoIdentityProviderPasswordPolicyType = TypedDict(
    'CognitoIdentityProviderPasswordPolicyType', {
        'PasswordPolicyMinLengthType': Optional[int],
        'BooleanType': Optional[bool],
        'BooleanType': Optional[bool],
        'BooleanType': Optional[bool],
        'BooleanType': Optional[bool],
        'TemporaryPasswordValidityDaysType': Optional[int],
    }
)


CognitoIdentityProviderUserPoolPolicyType = TypedDict(
    'CognitoIdentityProviderUserPoolPolicyType', {
        'PasswordPolicyType': Optional[CognitoIdentityProviderPasswordPolicyType],
    }
)


CognitoIdentityProviderLambdaConfigType = TypedDict(
    'CognitoIdentityProviderLambdaConfigType', {
        'ArnType': Optional[str],
        'ArnType': Optional[str],
        'ArnType': Optional[str],
        'ArnType': Optional[str],
        'ArnType': Optional[str],
        'ArnType': Optional[str],
        'ArnType': Optional[str],
        'ArnType': Optional[str],
        'ArnType': Optional[str],
        'ArnType': Optional[str],
    }
)


CognitoIdentityProviderVerificationMessageTemplateType = TypedDict(
    'CognitoIdentityProviderVerificationMessageTemplateType', {
        'SmsVerificationMessageType': Optional[str],
        'EmailVerificationMessageType': Optional[str],
        'EmailVerificationSubjectType': Optional[str],
        'EmailVerificationMessageByLinkType': Optional[str],
        'EmailVerificationSubjectByLinkType': Optional[str],
        'DefaultEmailOptionType': Optional[str],
    }
)


CognitoIdentityProviderDeviceConfigurationType = TypedDict(
    'CognitoIdentityProviderDeviceConfigurationType', {
        'BooleanType': Optional[bool],
        'BooleanType': Optional[bool],
    }
)


CognitoIdentityProviderEmailConfigurationType = TypedDict(
    'CognitoIdentityProviderEmailConfigurationType', {
        'ArnType': Optional[str],
        'EmailAddressType': Optional[str],
        'EmailSendingAccountType': Optional[str],
    }
)


CognitoIdentityProviderSmsConfigurationType = TypedDict(
    'CognitoIdentityProviderSmsConfigurationType', {
        'ArnType': str,
        'StringType': Optional[str],
    }
)


CognitoIdentityProviderMessageTemplateType = TypedDict(
    'CognitoIdentityProviderMessageTemplateType', {
        'SmsVerificationMessageType': Optional[str],
        'EmailVerificationMessageType': Optional[str],
        'EmailVerificationSubjectType': Optional[str],
    }
)


CognitoIdentityProviderAdminCreateUserConfigType = TypedDict(
    'CognitoIdentityProviderAdminCreateUserConfigType', {
        'BooleanType': Optional[bool],
        'AdminCreateUserUnusedAccountValidityDaysType': Optional[int],
        'MessageTemplateType': Optional[CognitoIdentityProviderMessageTemplateType],
    }
)


CognitoIdentityProviderUserPoolAddOnsType = TypedDict(
    'CognitoIdentityProviderUserPoolAddOnsType', {
        'AdvancedSecurityModeType': str,
    }
)


CognitoIdentityProviderUserPoolType = TypedDict(
    'CognitoIdentityProviderUserPoolType', {
        'UserPoolIdType': Optional[str],
        'UserPoolNameType': Optional[str],
        'UserPoolPolicyType': Optional[CognitoIdentityProviderUserPoolPolicyType],
        'LambdaConfigType': Optional[CognitoIdentityProviderLambdaConfigType],
        'StatusType': Optional[str],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
        'SchemaAttributesListType': Optional[List[CognitoIdentityProviderSchemaAttributeType]],
        'VerifiedAttributesListType': Optional[List[str]],
        'AliasAttributesListType': Optional[List[str]],
        'UsernameAttributesListType': Optional[List[str]],
        'SmsVerificationMessageType': Optional[str],
        'EmailVerificationMessageType': Optional[str],
        'EmailVerificationSubjectType': Optional[str],
        'VerificationMessageTemplateType': Optional[CognitoIdentityProviderVerificationMessageTemplateType],
        'SmsVerificationMessageType': Optional[str],
        'UserPoolMfaType': Optional[str],
        'DeviceConfigurationType': Optional[CognitoIdentityProviderDeviceConfigurationType],
        'IntegerType': Optional[int],
        'EmailConfigurationType': Optional[CognitoIdentityProviderEmailConfigurationType],
        'SmsConfigurationType': Optional[CognitoIdentityProviderSmsConfigurationType],
        'UserPoolTagsType': Optional[Dict[str, str]],
        'StringType': Optional[str],
        'StringType': Optional[str],
        'DomainType': Optional[str],
        'DomainType': Optional[str],
        'AdminCreateUserConfigType': Optional[CognitoIdentityProviderAdminCreateUserConfigType],
        'UserPoolAddOnsType': Optional[CognitoIdentityProviderUserPoolAddOnsType],
        'ArnType': Optional[str],
    }
)


CognitoIdentityProviderCreateUserPoolResponse = TypedDict(
    'CognitoIdentityProviderCreateUserPoolResponse', {
        'UserPoolType': Optional[CognitoIdentityProviderUserPoolType],
    }
)


CognitoIdentityProviderAnalyticsConfigurationType = TypedDict(
    'CognitoIdentityProviderAnalyticsConfigurationType', {
        'HexStringType': str,
        'ArnType': str,
        'StringType': str,
        'BooleanType': Optional[bool],
    }
)


CognitoIdentityProviderUserPoolClientType = TypedDict(
    'CognitoIdentityProviderUserPoolClientType', {
        'UserPoolIdType': Optional[str],
        'ClientNameType': Optional[str],
        'ClientIdType': Optional[str],
        'ClientSecretType': Optional[str],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
        'RefreshTokenValidityType': Optional[int],
        'ClientPermissionListType': Optional[List[str]],
        'ClientPermissionListType': Optional[List[str]],
        'ExplicitAuthFlowsListType': Optional[List[str]],
        'SupportedIdentityProvidersListType': Optional[List[str]],
        'CallbackURLsListType': Optional[List[str]],
        'LogoutURLsListType': Optional[List[str]],
        'RedirectUrlType': Optional[str],
        'OAuthFlowsType': Optional[List[str]],
        'ScopeListType': Optional[List[str]],
        'BooleanType': Optional[bool],
        'AnalyticsConfigurationType': Optional[CognitoIdentityProviderAnalyticsConfigurationType],
    }
)


CognitoIdentityProviderCreateUserPoolClientResponse = TypedDict(
    'CognitoIdentityProviderCreateUserPoolClientResponse', {
        'UserPoolClientType': Optional[CognitoIdentityProviderUserPoolClientType],
    }
)


CognitoIdentityProviderCustomDomainConfigType = TypedDict(
    'CognitoIdentityProviderCustomDomainConfigType', {
        'ArnType': str,
    }
)


CognitoIdentityProviderCreateUserPoolDomainResponse = TypedDict(
    'CognitoIdentityProviderCreateUserPoolDomainResponse', {
        'DomainType': Optional[str],
    }
)


CognitoIdentityProviderDeleteUserAttributesResponse = TypedDict(
    'CognitoIdentityProviderDeleteUserAttributesResponse', {
    }
)


CognitoIdentityProviderDeleteUserPoolDomainResponse = TypedDict(
    'CognitoIdentityProviderDeleteUserPoolDomainResponse', {
    }
)


CognitoIdentityProviderDescribeIdentityProviderResponse = TypedDict(
    'CognitoIdentityProviderDescribeIdentityProviderResponse', {
        'IdentityProviderType': CognitoIdentityProviderIdentityProviderType,
    }
)


CognitoIdentityProviderDescribeResourceServerResponse = TypedDict(
    'CognitoIdentityProviderDescribeResourceServerResponse', {
        'ResourceServerType': CognitoIdentityProviderResourceServerType,
    }
)


CognitoIdentityProviderCompromisedCredentialsActionsType = TypedDict(
    'CognitoIdentityProviderCompromisedCredentialsActionsType', {
        'CompromisedCredentialsEventActionType': str,
    }
)


CognitoIdentityProviderCompromisedCredentialsRiskConfigurationType = TypedDict(
    'CognitoIdentityProviderCompromisedCredentialsRiskConfigurationType', {
        'CompromisedCredentialsActionsType': CognitoIdentityProviderCompromisedCredentialsActionsType,
        'EventFiltersType': Optional[List[str]],
    }
)


CognitoIdentityProviderNotifyEmailType = TypedDict(
    'CognitoIdentityProviderNotifyEmailType', {
        'EmailNotificationSubjectType': str,
        'EmailNotificationBodyType': Optional[str],
        'EmailNotificationBodyType': Optional[str],
    }
)


CognitoIdentityProviderNotifyConfigurationType = TypedDict(
    'CognitoIdentityProviderNotifyConfigurationType', {
        'ArnType': str,
        'StringType': Optional[str],
        'StringType': Optional[str],
        'NotifyEmailType': Optional[CognitoIdentityProviderNotifyEmailType],
        'NotifyEmailType': Optional[CognitoIdentityProviderNotifyEmailType],
        'NotifyEmailType': Optional[CognitoIdentityProviderNotifyEmailType],
    }
)


CognitoIdentityProviderAccountTakeoverActionType = TypedDict(
    'CognitoIdentityProviderAccountTakeoverActionType', {
        'AccountTakeoverActionNotifyType': bool,
        'AccountTakeoverEventActionType': str,
    }
)


CognitoIdentityProviderAccountTakeoverActionsType = TypedDict(
    'CognitoIdentityProviderAccountTakeoverActionsType', {
        'AccountTakeoverActionType': Optional[CognitoIdentityProviderAccountTakeoverActionType],
        'AccountTakeoverActionType': Optional[CognitoIdentityProviderAccountTakeoverActionType],
        'AccountTakeoverActionType': Optional[CognitoIdentityProviderAccountTakeoverActionType],
    }
)


CognitoIdentityProviderAccountTakeoverRiskConfigurationType = TypedDict(
    'CognitoIdentityProviderAccountTakeoverRiskConfigurationType', {
        'AccountTakeoverActionsType': CognitoIdentityProviderAccountTakeoverActionsType,
        'NotifyConfigurationType': Optional[CognitoIdentityProviderNotifyConfigurationType],
    }
)


CognitoIdentityProviderRiskExceptionConfigurationType = TypedDict(
    'CognitoIdentityProviderRiskExceptionConfigurationType', {
        'BlockedIPRangeListType': Optional[List[str]],
        'SkippedIPRangeListType': Optional[List[str]],
    }
)


CognitoIdentityProviderRiskConfigurationType = TypedDict(
    'CognitoIdentityProviderRiskConfigurationType', {
        'UserPoolIdType': Optional[str],
        'ClientIdType': Optional[str],
        'CompromisedCredentialsRiskConfigurationType': Optional[CognitoIdentityProviderCompromisedCredentialsRiskConfigurationType],
        'AccountTakeoverRiskConfigurationType': Optional[CognitoIdentityProviderAccountTakeoverRiskConfigurationType],
        'RiskExceptionConfigurationType': Optional[CognitoIdentityProviderRiskExceptionConfigurationType],
        'DateType': Optional[datetime.datetime],
    }
)


CognitoIdentityProviderDescribeRiskConfigurationResponse = TypedDict(
    'CognitoIdentityProviderDescribeRiskConfigurationResponse', {
        'RiskConfigurationType': CognitoIdentityProviderRiskConfigurationType,
    }
)


CognitoIdentityProviderDescribeUserImportJobResponse = TypedDict(
    'CognitoIdentityProviderDescribeUserImportJobResponse', {
        'UserImportJobType': Optional[CognitoIdentityProviderUserImportJobType],
    }
)


CognitoIdentityProviderDescribeUserPoolResponse = TypedDict(
    'CognitoIdentityProviderDescribeUserPoolResponse', {
        'UserPoolType': Optional[CognitoIdentityProviderUserPoolType],
    }
)


CognitoIdentityProviderDescribeUserPoolClientResponse = TypedDict(
    'CognitoIdentityProviderDescribeUserPoolClientResponse', {
        'UserPoolClientType': Optional[CognitoIdentityProviderUserPoolClientType],
    }
)


CognitoIdentityProviderDomainDescriptionType = TypedDict(
    'CognitoIdentityProviderDomainDescriptionType', {
        'UserPoolIdType': Optional[str],
        'AWSAccountIdType': Optional[str],
        'DomainType': Optional[str],
        'S3BucketType': Optional[str],
        'StringType': Optional[str],
        'DomainVersionType': Optional[str],
        'DomainStatusType': Optional[str],
        'CustomDomainConfigType': Optional[CognitoIdentityProviderCustomDomainConfigType],
    }
)


CognitoIdentityProviderDescribeUserPoolDomainResponse = TypedDict(
    'CognitoIdentityProviderDescribeUserPoolDomainResponse', {
        'DomainDescriptionType': Optional[CognitoIdentityProviderDomainDescriptionType],
    }
)


CognitoIdentityProviderCodeDeliveryDetailsType = TypedDict(
    'CognitoIdentityProviderCodeDeliveryDetailsType', {
        'StringType': Optional[str],
        'DeliveryMediumType': Optional[str],
        'AttributeNameType': Optional[str],
    }
)


CognitoIdentityProviderForgotPasswordResponse = TypedDict(
    'CognitoIdentityProviderForgotPasswordResponse', {
        'CodeDeliveryDetailsType': Optional[CognitoIdentityProviderCodeDeliveryDetailsType],
    }
)


CognitoIdentityProviderGetCSVHeaderResponse = TypedDict(
    'CognitoIdentityProviderGetCSVHeaderResponse', {
        'UserPoolIdType': Optional[str],
        'ListOfStringTypes': Optional[List[str]],
    }
)


CognitoIdentityProviderGetDeviceResponse = TypedDict(
    'CognitoIdentityProviderGetDeviceResponse', {
        'DeviceType': CognitoIdentityProviderDeviceType,
    }
)


CognitoIdentityProviderGetGroupResponse = TypedDict(
    'CognitoIdentityProviderGetGroupResponse', {
        'GroupType': Optional[CognitoIdentityProviderGroupType],
    }
)


CognitoIdentityProviderGetIdentityProviderByIdentifierResponse = TypedDict(
    'CognitoIdentityProviderGetIdentityProviderByIdentifierResponse', {
        'IdentityProviderType': CognitoIdentityProviderIdentityProviderType,
    }
)


CognitoIdentityProviderGetSigningCertificateResponse = TypedDict(
    'CognitoIdentityProviderGetSigningCertificateResponse', {
        'StringType': Optional[str],
    }
)


CognitoIdentityProviderUICustomizationType = TypedDict(
    'CognitoIdentityProviderUICustomizationType', {
        'UserPoolIdType': Optional[str],
        'ClientIdType': Optional[str],
        'ImageUrlType': Optional[str],
        'CSSType': Optional[str],
        'CSSVersionType': Optional[str],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
    }
)


CognitoIdentityProviderGetUICustomizationResponse = TypedDict(
    'CognitoIdentityProviderGetUICustomizationResponse', {
        'UICustomizationType': CognitoIdentityProviderUICustomizationType,
    }
)


CognitoIdentityProviderGetUserResponse = TypedDict(
    'CognitoIdentityProviderGetUserResponse', {
        'UsernameType': str,
        'AttributeListType': List[CognitoIdentityProviderAttributeType],
        'MFAOptionListType': Optional[List[CognitoIdentityProviderMFAOptionType]],
        'StringType': Optional[str],
        'UserMFASettingListType': Optional[List[str]],
    }
)


CognitoIdentityProviderGetUserAttributeVerificationCodeResponse = TypedDict(
    'CognitoIdentityProviderGetUserAttributeVerificationCodeResponse', {
        'CodeDeliveryDetailsType': Optional[CognitoIdentityProviderCodeDeliveryDetailsType],
    }
)


CognitoIdentityProviderSmsMfaConfigType = TypedDict(
    'CognitoIdentityProviderSmsMfaConfigType', {
        'SmsVerificationMessageType': Optional[str],
        'SmsConfigurationType': Optional[CognitoIdentityProviderSmsConfigurationType],
    }
)


CognitoIdentityProviderSoftwareTokenMfaConfigType = TypedDict(
    'CognitoIdentityProviderSoftwareTokenMfaConfigType', {
        'BooleanType': Optional[bool],
    }
)


CognitoIdentityProviderGetUserPoolMfaConfigResponse = TypedDict(
    'CognitoIdentityProviderGetUserPoolMfaConfigResponse', {
        'SmsMfaConfigType': Optional[CognitoIdentityProviderSmsMfaConfigType],
        'SoftwareTokenMfaConfigType': Optional[CognitoIdentityProviderSoftwareTokenMfaConfigType],
        'UserPoolMfaType': Optional[str],
    }
)


CognitoIdentityProviderGlobalSignOutResponse = TypedDict(
    'CognitoIdentityProviderGlobalSignOutResponse', {
    }
)


CognitoIdentityProviderInitiateAuthResponse = TypedDict(
    'CognitoIdentityProviderInitiateAuthResponse', {
        'ChallengeNameType': Optional[str],
        'SessionType': Optional[str],
        'ChallengeParametersType': Optional[Dict[str, str]],
        'AuthenticationResultType': Optional[CognitoIdentityProviderAuthenticationResultType],
    }
)


CognitoIdentityProviderListDevicesResponse = TypedDict(
    'CognitoIdentityProviderListDevicesResponse', {
        'DeviceListType': Optional[List[CognitoIdentityProviderDeviceType]],
        'SearchPaginationTokenType': Optional[str],
    }
)


CognitoIdentityProviderListGroupsResponse = TypedDict(
    'CognitoIdentityProviderListGroupsResponse', {
        'GroupListType': Optional[List[CognitoIdentityProviderGroupType]],
        'PaginationKey': Optional[str],
    }
)


CognitoIdentityProviderProviderDescription = TypedDict(
    'CognitoIdentityProviderProviderDescription', {
        'ProviderNameType': Optional[str],
        'IdentityProviderTypeType': Optional[str],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
    }
)


CognitoIdentityProviderListIdentityProvidersResponse = TypedDict(
    'CognitoIdentityProviderListIdentityProvidersResponse', {
        'ProvidersListType': List[CognitoIdentityProviderProviderDescription],
        'PaginationKeyType': Optional[str],
    }
)


CognitoIdentityProviderListResourceServersResponse = TypedDict(
    'CognitoIdentityProviderListResourceServersResponse', {
        'ResourceServersListType': List[CognitoIdentityProviderResourceServerType],
        'PaginationKeyType': Optional[str],
    }
)


CognitoIdentityProviderListTagsForResourceResponse = TypedDict(
    'CognitoIdentityProviderListTagsForResourceResponse', {
        'UserPoolTagsType': Optional[Dict[str, str]],
    }
)


CognitoIdentityProviderListUserImportJobsResponse = TypedDict(
    'CognitoIdentityProviderListUserImportJobsResponse', {
        'UserImportJobsListType': Optional[List[CognitoIdentityProviderUserImportJobType]],
        'PaginationKeyType': Optional[str],
    }
)


CognitoIdentityProviderUserPoolClientDescription = TypedDict(
    'CognitoIdentityProviderUserPoolClientDescription', {
        'ClientIdType': Optional[str],
        'UserPoolIdType': Optional[str],
        'ClientNameType': Optional[str],
    }
)


CognitoIdentityProviderListUserPoolClientsResponse = TypedDict(
    'CognitoIdentityProviderListUserPoolClientsResponse', {
        'UserPoolClientListType': Optional[List[CognitoIdentityProviderUserPoolClientDescription]],
        'PaginationKey': Optional[str],
    }
)


CognitoIdentityProviderUserPoolDescriptionType = TypedDict(
    'CognitoIdentityProviderUserPoolDescriptionType', {
        'UserPoolIdType': Optional[str],
        'UserPoolNameType': Optional[str],
        'LambdaConfigType': Optional[CognitoIdentityProviderLambdaConfigType],
        'StatusType': Optional[str],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
    }
)


CognitoIdentityProviderListUserPoolsResponse = TypedDict(
    'CognitoIdentityProviderListUserPoolsResponse', {
        'UserPoolListType': Optional[List[CognitoIdentityProviderUserPoolDescriptionType]],
        'PaginationKeyType': Optional[str],
    }
)


CognitoIdentityProviderListUsersResponse = TypedDict(
    'CognitoIdentityProviderListUsersResponse', {
        'UsersListType': Optional[List[CognitoIdentityProviderUserType]],
        'SearchPaginationTokenType': Optional[str],
    }
)


CognitoIdentityProviderListUsersInGroupResponse = TypedDict(
    'CognitoIdentityProviderListUsersInGroupResponse', {
        'UsersListType': Optional[List[CognitoIdentityProviderUserType]],
        'PaginationKey': Optional[str],
    }
)


CognitoIdentityProviderResendConfirmationCodeResponse = TypedDict(
    'CognitoIdentityProviderResendConfirmationCodeResponse', {
        'CodeDeliveryDetailsType': Optional[CognitoIdentityProviderCodeDeliveryDetailsType],
    }
)


CognitoIdentityProviderRespondToAuthChallengeResponse = TypedDict(
    'CognitoIdentityProviderRespondToAuthChallengeResponse', {
        'ChallengeNameType': Optional[str],
        'SessionType': Optional[str],
        'ChallengeParametersType': Optional[Dict[str, str]],
        'AuthenticationResultType': Optional[CognitoIdentityProviderAuthenticationResultType],
    }
)


CognitoIdentityProviderSetRiskConfigurationResponse = TypedDict(
    'CognitoIdentityProviderSetRiskConfigurationResponse', {
        'RiskConfigurationType': CognitoIdentityProviderRiskConfigurationType,
    }
)


CognitoIdentityProviderSetUICustomizationResponse = TypedDict(
    'CognitoIdentityProviderSetUICustomizationResponse', {
        'UICustomizationType': CognitoIdentityProviderUICustomizationType,
    }
)


CognitoIdentityProviderSetUserMFAPreferenceResponse = TypedDict(
    'CognitoIdentityProviderSetUserMFAPreferenceResponse', {
    }
)


CognitoIdentityProviderSetUserPoolMfaConfigResponse = TypedDict(
    'CognitoIdentityProviderSetUserPoolMfaConfigResponse', {
        'SmsMfaConfigType': Optional[CognitoIdentityProviderSmsMfaConfigType],
        'SoftwareTokenMfaConfigType': Optional[CognitoIdentityProviderSoftwareTokenMfaConfigType],
        'UserPoolMfaType': Optional[str],
    }
)


CognitoIdentityProviderSetUserSettingsResponse = TypedDict(
    'CognitoIdentityProviderSetUserSettingsResponse', {
    }
)


CognitoIdentityProviderSignUpResponse = TypedDict(
    'CognitoIdentityProviderSignUpResponse', {
        'BooleanType': bool,
        'StringType': str,
        'CodeDeliveryDetailsType': Optional[CognitoIdentityProviderCodeDeliveryDetailsType],
    }
)


CognitoIdentityProviderStartUserImportJobResponse = TypedDict(
    'CognitoIdentityProviderStartUserImportJobResponse', {
        'UserImportJobType': Optional[CognitoIdentityProviderUserImportJobType],
    }
)


CognitoIdentityProviderStopUserImportJobResponse = TypedDict(
    'CognitoIdentityProviderStopUserImportJobResponse', {
        'UserImportJobType': Optional[CognitoIdentityProviderUserImportJobType],
    }
)


CognitoIdentityProviderTagResourceResponse = TypedDict(
    'CognitoIdentityProviderTagResourceResponse', {
    }
)


CognitoIdentityProviderUntagResourceResponse = TypedDict(
    'CognitoIdentityProviderUntagResourceResponse', {
    }
)


CognitoIdentityProviderUpdateAuthEventFeedbackResponse = TypedDict(
    'CognitoIdentityProviderUpdateAuthEventFeedbackResponse', {
    }
)


CognitoIdentityProviderUpdateDeviceStatusResponse = TypedDict(
    'CognitoIdentityProviderUpdateDeviceStatusResponse', {
    }
)


CognitoIdentityProviderUpdateGroupResponse = TypedDict(
    'CognitoIdentityProviderUpdateGroupResponse', {
        'GroupType': Optional[CognitoIdentityProviderGroupType],
    }
)


CognitoIdentityProviderUpdateIdentityProviderResponse = TypedDict(
    'CognitoIdentityProviderUpdateIdentityProviderResponse', {
        'IdentityProviderType': CognitoIdentityProviderIdentityProviderType,
    }
)


CognitoIdentityProviderUpdateResourceServerResponse = TypedDict(
    'CognitoIdentityProviderUpdateResourceServerResponse', {
        'ResourceServerType': CognitoIdentityProviderResourceServerType,
    }
)


CognitoIdentityProviderUpdateUserAttributesResponse = TypedDict(
    'CognitoIdentityProviderUpdateUserAttributesResponse', {
        'CodeDeliveryDetailsListType': Optional[List[CognitoIdentityProviderCodeDeliveryDetailsType]],
    }
)


CognitoIdentityProviderUpdateUserPoolResponse = TypedDict(
    'CognitoIdentityProviderUpdateUserPoolResponse', {
    }
)


CognitoIdentityProviderUpdateUserPoolClientResponse = TypedDict(
    'CognitoIdentityProviderUpdateUserPoolClientResponse', {
        'UserPoolClientType': Optional[CognitoIdentityProviderUserPoolClientType],
    }
)


CognitoIdentityProviderUpdateUserPoolDomainResponse = TypedDict(
    'CognitoIdentityProviderUpdateUserPoolDomainResponse', {
        'DomainType': Optional[str],
    }
)


CognitoIdentityProviderVerifySoftwareTokenResponse = TypedDict(
    'CognitoIdentityProviderVerifySoftwareTokenResponse', {
        'VerifySoftwareTokenResponseType': Optional[str],
        'SessionType': Optional[str],
    }
)


CognitoIdentityProviderVerifyUserAttributeResponse = TypedDict(
    'CognitoIdentityProviderVerifyUserAttributeResponse', {
    }
)


class CognitoSync(BaseClient):
    def bulk_publish(self, *,
        IdentityPoolId: str
    ) -> CognitoSyncBulkPublishResponse: ...

    def delete_dataset(self, *,
        IdentityPoolId: str,
        IdentityId: str,
        DatasetName: str
    ) -> CognitoSyncDeleteDatasetResponse: ...

    def describe_dataset(self, *,
        IdentityPoolId: str,
        IdentityId: str,
        DatasetName: str
    ) -> CognitoSyncDescribeDatasetResponse: ...

    def describe_identity_pool_usage(self, *,
        IdentityPoolId: str
    ) -> CognitoSyncDescribeIdentityPoolUsageResponse: ...

    def describe_identity_usage(self, *,
        IdentityPoolId: str,
        IdentityId: str
    ) -> CognitoSyncDescribeIdentityUsageResponse: ...

    def get_bulk_publish_details(self, *,
        IdentityPoolId: str
    ) -> CognitoSyncGetBulkPublishDetailsResponse: ...

    def get_cognito_events(self, *,
        IdentityPoolId: str
    ) -> CognitoSyncGetCognitoEventsResponse: ...

    def get_identity_pool_configuration(self, *,
        IdentityPoolId: str
    ) -> CognitoSyncGetIdentityPoolConfigurationResponse: ...

    def list_datasets(self, *,
        IdentityPoolId: str,
        IdentityId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CognitoSyncListDatasetsResponse: ...

    def list_identity_pool_usage(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CognitoSyncListIdentityPoolUsageResponse: ...

    def list_records(self, *,
        IdentityPoolId: str,
        IdentityId: str,
        DatasetName: str,
        LastSyncCount: int = ...,
        NextToken: str = ...,
        MaxResults: int = ...,
        SyncSessionToken: str = ...
    ) -> CognitoSyncListRecordsResponse: ...

    def register_device(self, *,
        IdentityPoolId: str,
        IdentityId: str,
        Platform: str,
        Token: str
    ) -> CognitoSyncRegisterDeviceResponse: ...

    def set_cognito_events(self, *,
        IdentityPoolId: str,
        Events: Dict[str, str]
    ): ...

    def set_identity_pool_configuration(self, *,
        IdentityPoolId: str,
        PushSync: CognitoSyncPushSync = ...,
        CognitoStreams: CognitoSyncCognitoStreams = ...
    ) -> CognitoSyncSetIdentityPoolConfigurationResponse: ...

    def subscribe_to_dataset(self, *,
        IdentityPoolId: str,
        IdentityId: str,
        DatasetName: str,
        DeviceId: str
    ) -> CognitoSyncSubscribeToDatasetResponse: ...

    def unsubscribe_from_dataset(self, *,
        IdentityPoolId: str,
        IdentityId: str,
        DatasetName: str,
        DeviceId: str
    ) -> CognitoSyncUnsubscribeFromDatasetResponse: ...

    def update_records(self, *,
        IdentityPoolId: str,
        IdentityId: str,
        DatasetName: str,
        SyncSessionToken: str,
        DeviceId: str = ...,
        RecordPatches: List[CognitoSyncRecordPatch] = ...,
        ClientContext: str = ...
    ) -> CognitoSyncUpdateRecordsResponse: ...


CognitoSyncBulkPublishResponse = TypedDict(
    'CognitoSyncBulkPublishResponse', {
        'IdentityPoolId': Optional[str],
    }
)


CognitoSyncDataset = TypedDict(
    'CognitoSyncDataset', {
        'IdentityId': Optional[str],
        'DatasetName': Optional[str],
        'Date': Optional[datetime.datetime],
        'Date': Optional[datetime.datetime],
        'String': Optional[str],
        'Long': Optional[int],
        'Long': Optional[int],
    }
)


CognitoSyncDeleteDatasetResponse = TypedDict(
    'CognitoSyncDeleteDatasetResponse', {
        'Dataset': Optional[CognitoSyncDataset],
    }
)


CognitoSyncDescribeDatasetResponse = TypedDict(
    'CognitoSyncDescribeDatasetResponse', {
        'Dataset': Optional[CognitoSyncDataset],
    }
)


CognitoSyncIdentityPoolUsage = TypedDict(
    'CognitoSyncIdentityPoolUsage', {
        'IdentityPoolId': Optional[str],
        'Long': Optional[int],
        'Long': Optional[int],
        'Date': Optional[datetime.datetime],
    }
)


CognitoSyncDescribeIdentityPoolUsageResponse = TypedDict(
    'CognitoSyncDescribeIdentityPoolUsageResponse', {
        'IdentityPoolUsage': Optional[CognitoSyncIdentityPoolUsage],
    }
)


CognitoSyncIdentityUsage = TypedDict(
    'CognitoSyncIdentityUsage', {
        'IdentityId': Optional[str],
        'IdentityPoolId': Optional[str],
        'Date': Optional[datetime.datetime],
        'Integer': Optional[int],
        'Long': Optional[int],
    }
)


CognitoSyncDescribeIdentityUsageResponse = TypedDict(
    'CognitoSyncDescribeIdentityUsageResponse', {
        'IdentityUsage': Optional[CognitoSyncIdentityUsage],
    }
)


CognitoSyncGetBulkPublishDetailsResponse = TypedDict(
    'CognitoSyncGetBulkPublishDetailsResponse', {
        'IdentityPoolId': Optional[str],
        'Date': Optional[datetime.datetime],
        'Date': Optional[datetime.datetime],
        'BulkPublishStatus': Optional[str],
        'String': Optional[str],
    }
)


CognitoSyncGetCognitoEventsResponse = TypedDict(
    'CognitoSyncGetCognitoEventsResponse', {
        'Events': Optional[Dict[str, str]],
    }
)


CognitoSyncPushSync = TypedDict(
    'CognitoSyncPushSync', {
        'ApplicationArnList': Optional[List[str]],
        'AssumeRoleArn': Optional[str],
    }
)


CognitoSyncCognitoStreams = TypedDict(
    'CognitoSyncCognitoStreams', {
        'StreamName': Optional[str],
        'AssumeRoleArn': Optional[str],
        'StreamingStatus': Optional[str],
    }
)


CognitoSyncGetIdentityPoolConfigurationResponse = TypedDict(
    'CognitoSyncGetIdentityPoolConfigurationResponse', {
        'IdentityPoolId': Optional[str],
        'PushSync': Optional[CognitoSyncPushSync],
        'CognitoStreams': Optional[CognitoSyncCognitoStreams],
    }
)


CognitoSyncListDatasetsResponse = TypedDict(
    'CognitoSyncListDatasetsResponse', {
        'DatasetList': Optional[List[CognitoSyncDataset]],
        'Integer': Optional[int],
        'String': Optional[str],
    }
)


CognitoSyncListIdentityPoolUsageResponse = TypedDict(
    'CognitoSyncListIdentityPoolUsageResponse', {
        'IdentityPoolUsageList': Optional[List[CognitoSyncIdentityPoolUsage]],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'String': Optional[str],
    }
)


CognitoSyncRecord = TypedDict(
    'CognitoSyncRecord', {
        'RecordKey': Optional[str],
        'RecordValue': Optional[str],
        'Long': Optional[int],
        'Date': Optional[datetime.datetime],
        'String': Optional[str],
        'Date': Optional[datetime.datetime],
    }
)


CognitoSyncListRecordsResponse = TypedDict(
    'CognitoSyncListRecordsResponse', {
        'RecordList': Optional[List[CognitoSyncRecord]],
        'String': Optional[str],
        'Integer': Optional[int],
        'Long': Optional[int],
        'String': Optional[str],
        'MergedDatasetNameList': Optional[List[str]],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'String': Optional[str],
    }
)


CognitoSyncRegisterDeviceResponse = TypedDict(
    'CognitoSyncRegisterDeviceResponse', {
        'DeviceId': Optional[str],
    }
)


CognitoSyncSetIdentityPoolConfigurationResponse = TypedDict(
    'CognitoSyncSetIdentityPoolConfigurationResponse', {
        'IdentityPoolId': Optional[str],
        'PushSync': Optional[CognitoSyncPushSync],
        'CognitoStreams': Optional[CognitoSyncCognitoStreams],
    }
)


CognitoSyncSubscribeToDatasetResponse = TypedDict(
    'CognitoSyncSubscribeToDatasetResponse', {
    }
)


CognitoSyncUnsubscribeFromDatasetResponse = TypedDict(
    'CognitoSyncUnsubscribeFromDatasetResponse', {
    }
)


CognitoSyncRecordPatch = TypedDict(
    'CognitoSyncRecordPatch', {
        'Operation': str,
        'RecordKey': str,
        'Long': int,
        'RecordValue': Optional[str],
        'Date': Optional[datetime.datetime],
    }
)


CognitoSyncUpdateRecordsResponse = TypedDict(
    'CognitoSyncUpdateRecordsResponse', {
        'RecordList': Optional[List[CognitoSyncRecord]],
    }
)


class Comprehend(BaseClient):
    def batch_detect_dominant_language(self, *,
        TextList: List[str]
    ) -> ComprehendBatchDetectDominantLanguageResponse: ...

    def batch_detect_entities(self, *,
        TextList: List[str],
        LanguageCode: str
    ) -> ComprehendBatchDetectEntitiesResponse: ...

    def batch_detect_key_phrases(self, *,
        TextList: List[str],
        LanguageCode: str
    ) -> ComprehendBatchDetectKeyPhrasesResponse: ...

    def batch_detect_sentiment(self, *,
        TextList: List[str],
        LanguageCode: str
    ) -> ComprehendBatchDetectSentimentResponse: ...

    def batch_detect_syntax(self, *,
        TextList: List[str],
        LanguageCode: str
    ) -> ComprehendBatchDetectSyntaxResponse: ...

    def create_document_classifier(self, *,
        DocumentClassifierName: str,
        DataAccessRoleArn: str,
        InputDataConfig: ComprehendDocumentClassifierInputDataConfig,
        LanguageCode: str,
        Tags: List[ComprehendTag] = ...,
        OutputDataConfig: ComprehendDocumentClassifierOutputDataConfig = ...,
        ClientRequestToken: str = ...,
        VolumeKmsKeyId: str = ...
    ) -> ComprehendCreateDocumentClassifierResponse: ...

    def create_entity_recognizer(self, *,
        RecognizerName: str,
        DataAccessRoleArn: str,
        InputDataConfig: ComprehendEntityRecognizerInputDataConfig,
        LanguageCode: str,
        Tags: List[ComprehendTag] = ...,
        ClientRequestToken: str = ...,
        VolumeKmsKeyId: str = ...
    ) -> ComprehendCreateEntityRecognizerResponse: ...

    def delete_document_classifier(self, *,
        DocumentClassifierArn: str
    ) -> ComprehendDeleteDocumentClassifierResponse: ...

    def delete_entity_recognizer(self, *,
        EntityRecognizerArn: str
    ) -> ComprehendDeleteEntityRecognizerResponse: ...

    def describe_document_classification_job(self, *,
        JobId: str
    ) -> ComprehendDescribeDocumentClassificationJobResponse: ...

    def describe_document_classifier(self, *,
        DocumentClassifierArn: str
    ) -> ComprehendDescribeDocumentClassifierResponse: ...

    def describe_dominant_language_detection_job(self, *,
        JobId: str
    ) -> ComprehendDescribeDominantLanguageDetectionJobResponse: ...

    def describe_entities_detection_job(self, *,
        JobId: str
    ) -> ComprehendDescribeEntitiesDetectionJobResponse: ...

    def describe_entity_recognizer(self, *,
        EntityRecognizerArn: str
    ) -> ComprehendDescribeEntityRecognizerResponse: ...

    def describe_key_phrases_detection_job(self, *,
        JobId: str
    ) -> ComprehendDescribeKeyPhrasesDetectionJobResponse: ...

    def describe_sentiment_detection_job(self, *,
        JobId: str
    ) -> ComprehendDescribeSentimentDetectionJobResponse: ...

    def describe_topics_detection_job(self, *,
        JobId: str
    ) -> ComprehendDescribeTopicsDetectionJobResponse: ...

    def detect_dominant_language(self, *,
        Text: str
    ) -> ComprehendDetectDominantLanguageResponse: ...

    def detect_entities(self, *,
        Text: str,
        LanguageCode: str
    ) -> ComprehendDetectEntitiesResponse: ...

    def detect_key_phrases(self, *,
        Text: str,
        LanguageCode: str
    ) -> ComprehendDetectKeyPhrasesResponse: ...

    def detect_sentiment(self, *,
        Text: str,
        LanguageCode: str
    ) -> ComprehendDetectSentimentResponse: ...

    def detect_syntax(self, *,
        Text: str,
        LanguageCode: str
    ) -> ComprehendDetectSyntaxResponse: ...

    def list_document_classification_jobs(self, *,
        Filter: ComprehendDocumentClassificationJobFilter = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ComprehendListDocumentClassificationJobsResponse: ...

    def list_document_classifiers(self, *,
        Filter: ComprehendDocumentClassifierFilter = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ComprehendListDocumentClassifiersResponse: ...

    def list_dominant_language_detection_jobs(self, *,
        Filter: ComprehendDominantLanguageDetectionJobFilter = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ComprehendListDominantLanguageDetectionJobsResponse: ...

    def list_entities_detection_jobs(self, *,
        Filter: ComprehendEntitiesDetectionJobFilter = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ComprehendListEntitiesDetectionJobsResponse: ...

    def list_entity_recognizers(self, *,
        Filter: ComprehendEntityRecognizerFilter = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ComprehendListEntityRecognizersResponse: ...

    def list_key_phrases_detection_jobs(self, *,
        Filter: ComprehendKeyPhrasesDetectionJobFilter = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ComprehendListKeyPhrasesDetectionJobsResponse: ...

    def list_sentiment_detection_jobs(self, *,
        Filter: ComprehendSentimentDetectionJobFilter = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ComprehendListSentimentDetectionJobsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> ComprehendListTagsForResourceResponse: ...

    def list_topics_detection_jobs(self, *,
        Filter: ComprehendTopicsDetectionJobFilter = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ComprehendListTopicsDetectionJobsResponse: ...

    def start_document_classification_job(self, *,
        DocumentClassifierArn: str,
        InputDataConfig: ComprehendInputDataConfig,
        OutputDataConfig: ComprehendOutputDataConfig,
        DataAccessRoleArn: str,
        JobName: str = ...,
        ClientRequestToken: str = ...,
        VolumeKmsKeyId: str = ...
    ) -> ComprehendStartDocumentClassificationJobResponse: ...

    def start_dominant_language_detection_job(self, *,
        InputDataConfig: ComprehendInputDataConfig,
        OutputDataConfig: ComprehendOutputDataConfig,
        DataAccessRoleArn: str,
        JobName: str = ...,
        ClientRequestToken: str = ...,
        VolumeKmsKeyId: str = ...
    ) -> ComprehendStartDominantLanguageDetectionJobResponse: ...

    def start_entities_detection_job(self, *,
        InputDataConfig: ComprehendInputDataConfig,
        OutputDataConfig: ComprehendOutputDataConfig,
        DataAccessRoleArn: str,
        LanguageCode: str,
        JobName: str = ...,
        EntityRecognizerArn: str = ...,
        ClientRequestToken: str = ...,
        VolumeKmsKeyId: str = ...
    ) -> ComprehendStartEntitiesDetectionJobResponse: ...

    def start_key_phrases_detection_job(self, *,
        InputDataConfig: ComprehendInputDataConfig,
        OutputDataConfig: ComprehendOutputDataConfig,
        DataAccessRoleArn: str,
        LanguageCode: str,
        JobName: str = ...,
        ClientRequestToken: str = ...,
        VolumeKmsKeyId: str = ...
    ) -> ComprehendStartKeyPhrasesDetectionJobResponse: ...

    def start_sentiment_detection_job(self, *,
        InputDataConfig: ComprehendInputDataConfig,
        OutputDataConfig: ComprehendOutputDataConfig,
        DataAccessRoleArn: str,
        LanguageCode: str,
        JobName: str = ...,
        ClientRequestToken: str = ...,
        VolumeKmsKeyId: str = ...
    ) -> ComprehendStartSentimentDetectionJobResponse: ...

    def start_topics_detection_job(self, *,
        InputDataConfig: ComprehendInputDataConfig,
        OutputDataConfig: ComprehendOutputDataConfig,
        DataAccessRoleArn: str,
        JobName: str = ...,
        NumberOfTopics: int = ...,
        ClientRequestToken: str = ...,
        VolumeKmsKeyId: str = ...
    ) -> ComprehendStartTopicsDetectionJobResponse: ...

    def stop_dominant_language_detection_job(self, *,
        JobId: str
    ) -> ComprehendStopDominantLanguageDetectionJobResponse: ...

    def stop_entities_detection_job(self, *,
        JobId: str
    ) -> ComprehendStopEntitiesDetectionJobResponse: ...

    def stop_key_phrases_detection_job(self, *,
        JobId: str
    ) -> ComprehendStopKeyPhrasesDetectionJobResponse: ...

    def stop_sentiment_detection_job(self, *,
        JobId: str
    ) -> ComprehendStopSentimentDetectionJobResponse: ...

    def stop_training_document_classifier(self, *,
        DocumentClassifierArn: str
    ) -> ComprehendStopTrainingDocumentClassifierResponse: ...

    def stop_training_entity_recognizer(self, *,
        EntityRecognizerArn: str
    ) -> ComprehendStopTrainingEntityRecognizerResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: List[ComprehendTag]
    ) -> ComprehendTagResourceResponse: ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ) -> ComprehendUntagResourceResponse: ...


ComprehendDominantLanguage = TypedDict(
    'ComprehendDominantLanguage', {
        'String': Optional[str],
        'Float': Optional[float],
    }
)


ComprehendBatchDetectDominantLanguageItemResult = TypedDict(
    'ComprehendBatchDetectDominantLanguageItemResult', {
        'Integer': Optional[int],
        'ListOfDominantLanguages': Optional[List[ComprehendDominantLanguage]],
    }
)


ComprehendBatchItemError = TypedDict(
    'ComprehendBatchItemError', {
        'Integer': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
    }
)


ComprehendBatchDetectDominantLanguageResponse = TypedDict(
    'ComprehendBatchDetectDominantLanguageResponse', {
        'ListOfDetectDominantLanguageResult': List[ComprehendBatchDetectDominantLanguageItemResult],
        'BatchItemErrorList': List[ComprehendBatchItemError],
    }
)


ComprehendEntity = TypedDict(
    'ComprehendEntity', {
        'Float': Optional[float],
        'EntityType': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'Integer': Optional[int],
    }
)


ComprehendBatchDetectEntitiesItemResult = TypedDict(
    'ComprehendBatchDetectEntitiesItemResult', {
        'Integer': Optional[int],
        'ListOfEntities': Optional[List[ComprehendEntity]],
    }
)


ComprehendBatchDetectEntitiesResponse = TypedDict(
    'ComprehendBatchDetectEntitiesResponse', {
        'ListOfDetectEntitiesResult': List[ComprehendBatchDetectEntitiesItemResult],
        'BatchItemErrorList': List[ComprehendBatchItemError],
    }
)


ComprehendKeyPhrase = TypedDict(
    'ComprehendKeyPhrase', {
        'Float': Optional[float],
        'String': Optional[str],
        'Integer': Optional[int],
        'Integer': Optional[int],
    }
)


ComprehendBatchDetectKeyPhrasesItemResult = TypedDict(
    'ComprehendBatchDetectKeyPhrasesItemResult', {
        'Integer': Optional[int],
        'ListOfKeyPhrases': Optional[List[ComprehendKeyPhrase]],
    }
)


ComprehendBatchDetectKeyPhrasesResponse = TypedDict(
    'ComprehendBatchDetectKeyPhrasesResponse', {
        'ListOfDetectKeyPhrasesResult': List[ComprehendBatchDetectKeyPhrasesItemResult],
        'BatchItemErrorList': List[ComprehendBatchItemError],
    }
)


ComprehendSentimentScore = TypedDict(
    'ComprehendSentimentScore', {
        'Float': Optional[float],
        'Float': Optional[float],
        'Float': Optional[float],
        'Float': Optional[float],
    }
)


ComprehendBatchDetectSentimentItemResult = TypedDict(
    'ComprehendBatchDetectSentimentItemResult', {
        'Integer': Optional[int],
        'SentimentType': Optional[str],
        'SentimentScore': Optional[ComprehendSentimentScore],
    }
)


ComprehendBatchDetectSentimentResponse = TypedDict(
    'ComprehendBatchDetectSentimentResponse', {
        'ListOfDetectSentimentResult': List[ComprehendBatchDetectSentimentItemResult],
        'BatchItemErrorList': List[ComprehendBatchItemError],
    }
)


ComprehendPartOfSpeechTag = TypedDict(
    'ComprehendPartOfSpeechTag', {
        'PartOfSpeechTagType': Optional[str],
        'Float': Optional[float],
    }
)


ComprehendSyntaxToken = TypedDict(
    'ComprehendSyntaxToken', {
        'Integer': Optional[int],
        'String': Optional[str],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'PartOfSpeechTag': Optional[ComprehendPartOfSpeechTag],
    }
)


ComprehendBatchDetectSyntaxItemResult = TypedDict(
    'ComprehendBatchDetectSyntaxItemResult', {
        'Integer': Optional[int],
        'ListOfSyntaxTokens': Optional[List[ComprehendSyntaxToken]],
    }
)


ComprehendBatchDetectSyntaxResponse = TypedDict(
    'ComprehendBatchDetectSyntaxResponse', {
        'ListOfDetectSyntaxResult': List[ComprehendBatchDetectSyntaxItemResult],
        'BatchItemErrorList': List[ComprehendBatchItemError],
    }
)


ComprehendTag = TypedDict(
    'ComprehendTag', {
        'TagKey': str,
        'TagValue': Optional[str],
    }
)


ComprehendDocumentClassifierInputDataConfig = TypedDict(
    'ComprehendDocumentClassifierInputDataConfig', {
        'S3Uri': str,
    }
)


ComprehendDocumentClassifierOutputDataConfig = TypedDict(
    'ComprehendDocumentClassifierOutputDataConfig', {
        'S3Uri': Optional[str],
        'KmsKeyId': Optional[str],
    }
)


ComprehendCreateDocumentClassifierResponse = TypedDict(
    'ComprehendCreateDocumentClassifierResponse', {
        'DocumentClassifierArn': Optional[str],
    }
)


ComprehendEntityTypesListItem = TypedDict(
    'ComprehendEntityTypesListItem', {
        'EntityTypeName': str,
    }
)


ComprehendEntityRecognizerDocuments = TypedDict(
    'ComprehendEntityRecognizerDocuments', {
        'S3Uri': str,
    }
)


ComprehendEntityRecognizerAnnotations = TypedDict(
    'ComprehendEntityRecognizerAnnotations', {
        'S3Uri': str,
    }
)


ComprehendEntityRecognizerEntityList = TypedDict(
    'ComprehendEntityRecognizerEntityList', {
        'S3Uri': str,
    }
)


ComprehendEntityRecognizerInputDataConfig = TypedDict(
    'ComprehendEntityRecognizerInputDataConfig', {
        'EntityTypesList': List[ComprehendEntityTypesListItem],
        'EntityRecognizerDocuments': ComprehendEntityRecognizerDocuments,
        'EntityRecognizerAnnotations': Optional[ComprehendEntityRecognizerAnnotations],
        'EntityRecognizerEntityList': Optional[ComprehendEntityRecognizerEntityList],
    }
)


ComprehendCreateEntityRecognizerResponse = TypedDict(
    'ComprehendCreateEntityRecognizerResponse', {
        'EntityRecognizerArn': Optional[str],
    }
)


ComprehendDeleteDocumentClassifierResponse = TypedDict(
    'ComprehendDeleteDocumentClassifierResponse', {
    }
)


ComprehendDeleteEntityRecognizerResponse = TypedDict(
    'ComprehendDeleteEntityRecognizerResponse', {
    }
)


ComprehendInputDataConfig = TypedDict(
    'ComprehendInputDataConfig', {
        'S3Uri': str,
        'InputFormat': Optional[str],
    }
)


ComprehendOutputDataConfig = TypedDict(
    'ComprehendOutputDataConfig', {
        'S3Uri': str,
        'KmsKeyId': Optional[str],
    }
)


ComprehendDocumentClassificationJobProperties = TypedDict(
    'ComprehendDocumentClassificationJobProperties', {
        'JobId': Optional[str],
        'JobName': Optional[str],
        'JobStatus': Optional[str],
        'AnyLengthString': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'DocumentClassifierArn': Optional[str],
        'InputDataConfig': Optional[ComprehendInputDataConfig],
        'OutputDataConfig': Optional[ComprehendOutputDataConfig],
        'IamRoleArn': Optional[str],
        'KmsKeyId': Optional[str],
    }
)


ComprehendDescribeDocumentClassificationJobResponse = TypedDict(
    'ComprehendDescribeDocumentClassificationJobResponse', {
        'DocumentClassificationJobProperties': Optional[ComprehendDocumentClassificationJobProperties],
    }
)


ComprehendClassifierEvaluationMetrics = TypedDict(
    'ComprehendClassifierEvaluationMetrics', {
        'Double': Optional[float],
        'Double': Optional[float],
        'Double': Optional[float],
        'Double': Optional[float],
    }
)


ComprehendClassifierMetadata = TypedDict(
    'ComprehendClassifierMetadata', {
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'ClassifierEvaluationMetrics': Optional[ComprehendClassifierEvaluationMetrics],
    }
)


ComprehendDocumentClassifierProperties = TypedDict(
    'ComprehendDocumentClassifierProperties', {
        'DocumentClassifierArn': Optional[str],
        'LanguageCode': Optional[str],
        'ModelStatus': Optional[str],
        'AnyLengthString': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'DocumentClassifierInputDataConfig': Optional[ComprehendDocumentClassifierInputDataConfig],
        'DocumentClassifierOutputDataConfig': Optional[ComprehendDocumentClassifierOutputDataConfig],
        'ClassifierMetadata': Optional[ComprehendClassifierMetadata],
        'IamRoleArn': Optional[str],
        'KmsKeyId': Optional[str],
    }
)


ComprehendDescribeDocumentClassifierResponse = TypedDict(
    'ComprehendDescribeDocumentClassifierResponse', {
        'DocumentClassifierProperties': Optional[ComprehendDocumentClassifierProperties],
    }
)


ComprehendDominantLanguageDetectionJobProperties = TypedDict(
    'ComprehendDominantLanguageDetectionJobProperties', {
        'JobId': Optional[str],
        'JobName': Optional[str],
        'JobStatus': Optional[str],
        'AnyLengthString': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'InputDataConfig': Optional[ComprehendInputDataConfig],
        'OutputDataConfig': Optional[ComprehendOutputDataConfig],
        'IamRoleArn': Optional[str],
        'KmsKeyId': Optional[str],
    }
)


ComprehendDescribeDominantLanguageDetectionJobResponse = TypedDict(
    'ComprehendDescribeDominantLanguageDetectionJobResponse', {
        'DominantLanguageDetectionJobProperties': Optional[ComprehendDominantLanguageDetectionJobProperties],
    }
)


ComprehendEntitiesDetectionJobProperties = TypedDict(
    'ComprehendEntitiesDetectionJobProperties', {
        'JobId': Optional[str],
        'JobName': Optional[str],
        'JobStatus': Optional[str],
        'AnyLengthString': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'EntityRecognizerArn': Optional[str],
        'InputDataConfig': Optional[ComprehendInputDataConfig],
        'OutputDataConfig': Optional[ComprehendOutputDataConfig],
        'LanguageCode': Optional[str],
        'IamRoleArn': Optional[str],
        'KmsKeyId': Optional[str],
    }
)


ComprehendDescribeEntitiesDetectionJobResponse = TypedDict(
    'ComprehendDescribeEntitiesDetectionJobResponse', {
        'EntitiesDetectionJobProperties': Optional[ComprehendEntitiesDetectionJobProperties],
    }
)


ComprehendEntityRecognizerEvaluationMetrics = TypedDict(
    'ComprehendEntityRecognizerEvaluationMetrics', {
        'Double': Optional[float],
        'Double': Optional[float],
        'Double': Optional[float],
    }
)


ComprehendEntityRecognizerMetadataEntityTypesListItem = TypedDict(
    'ComprehendEntityRecognizerMetadataEntityTypesListItem', {
        'AnyLengthString': Optional[str],
    }
)


ComprehendEntityRecognizerMetadata = TypedDict(
    'ComprehendEntityRecognizerMetadata', {
        'Integer': Optional[int],
        'Integer': Optional[int],
        'EntityRecognizerEvaluationMetrics': Optional[ComprehendEntityRecognizerEvaluationMetrics],
        'EntityRecognizerMetadataEntityTypesList': Optional[List[ComprehendEntityRecognizerMetadataEntityTypesListItem]],
    }
)


ComprehendEntityRecognizerProperties = TypedDict(
    'ComprehendEntityRecognizerProperties', {
        'EntityRecognizerArn': Optional[str],
        'LanguageCode': Optional[str],
        'ModelStatus': Optional[str],
        'AnyLengthString': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'EntityRecognizerInputDataConfig': Optional[ComprehendEntityRecognizerInputDataConfig],
        'EntityRecognizerMetadata': Optional[ComprehendEntityRecognizerMetadata],
        'IamRoleArn': Optional[str],
        'KmsKeyId': Optional[str],
    }
)


ComprehendDescribeEntityRecognizerResponse = TypedDict(
    'ComprehendDescribeEntityRecognizerResponse', {
        'EntityRecognizerProperties': Optional[ComprehendEntityRecognizerProperties],
    }
)


ComprehendKeyPhrasesDetectionJobProperties = TypedDict(
    'ComprehendKeyPhrasesDetectionJobProperties', {
        'JobId': Optional[str],
        'JobName': Optional[str],
        'JobStatus': Optional[str],
        'AnyLengthString': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'InputDataConfig': Optional[ComprehendInputDataConfig],
        'OutputDataConfig': Optional[ComprehendOutputDataConfig],
        'LanguageCode': Optional[str],
        'IamRoleArn': Optional[str],
        'KmsKeyId': Optional[str],
    }
)


ComprehendDescribeKeyPhrasesDetectionJobResponse = TypedDict(
    'ComprehendDescribeKeyPhrasesDetectionJobResponse', {
        'KeyPhrasesDetectionJobProperties': Optional[ComprehendKeyPhrasesDetectionJobProperties],
    }
)


ComprehendSentimentDetectionJobProperties = TypedDict(
    'ComprehendSentimentDetectionJobProperties', {
        'JobId': Optional[str],
        'JobName': Optional[str],
        'JobStatus': Optional[str],
        'AnyLengthString': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'InputDataConfig': Optional[ComprehendInputDataConfig],
        'OutputDataConfig': Optional[ComprehendOutputDataConfig],
        'LanguageCode': Optional[str],
        'IamRoleArn': Optional[str],
        'KmsKeyId': Optional[str],
    }
)


ComprehendDescribeSentimentDetectionJobResponse = TypedDict(
    'ComprehendDescribeSentimentDetectionJobResponse', {
        'SentimentDetectionJobProperties': Optional[ComprehendSentimentDetectionJobProperties],
    }
)


ComprehendTopicsDetectionJobProperties = TypedDict(
    'ComprehendTopicsDetectionJobProperties', {
        'JobId': Optional[str],
        'JobName': Optional[str],
        'JobStatus': Optional[str],
        'AnyLengthString': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'InputDataConfig': Optional[ComprehendInputDataConfig],
        'OutputDataConfig': Optional[ComprehendOutputDataConfig],
        'Integer': Optional[int],
        'IamRoleArn': Optional[str],
        'KmsKeyId': Optional[str],
    }
)


ComprehendDescribeTopicsDetectionJobResponse = TypedDict(
    'ComprehendDescribeTopicsDetectionJobResponse', {
        'TopicsDetectionJobProperties': Optional[ComprehendTopicsDetectionJobProperties],
    }
)


ComprehendDetectDominantLanguageResponse = TypedDict(
    'ComprehendDetectDominantLanguageResponse', {
        'ListOfDominantLanguages': Optional[List[ComprehendDominantLanguage]],
    }
)


ComprehendDetectEntitiesResponse = TypedDict(
    'ComprehendDetectEntitiesResponse', {
        'ListOfEntities': Optional[List[ComprehendEntity]],
    }
)


ComprehendDetectKeyPhrasesResponse = TypedDict(
    'ComprehendDetectKeyPhrasesResponse', {
        'ListOfKeyPhrases': Optional[List[ComprehendKeyPhrase]],
    }
)


ComprehendDetectSentimentResponse = TypedDict(
    'ComprehendDetectSentimentResponse', {
        'SentimentType': Optional[str],
        'SentimentScore': Optional[ComprehendSentimentScore],
    }
)


ComprehendDetectSyntaxResponse = TypedDict(
    'ComprehendDetectSyntaxResponse', {
        'ListOfSyntaxTokens': Optional[List[ComprehendSyntaxToken]],
    }
)


ComprehendDocumentClassificationJobFilter = TypedDict(
    'ComprehendDocumentClassificationJobFilter', {
        'JobName': Optional[str],
        'JobStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


ComprehendListDocumentClassificationJobsResponse = TypedDict(
    'ComprehendListDocumentClassificationJobsResponse', {
        'DocumentClassificationJobPropertiesList': Optional[List[ComprehendDocumentClassificationJobProperties]],
        'String': Optional[str],
    }
)


ComprehendDocumentClassifierFilter = TypedDict(
    'ComprehendDocumentClassifierFilter', {
        'ModelStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


ComprehendListDocumentClassifiersResponse = TypedDict(
    'ComprehendListDocumentClassifiersResponse', {
        'DocumentClassifierPropertiesList': Optional[List[ComprehendDocumentClassifierProperties]],
        'String': Optional[str],
    }
)


ComprehendDominantLanguageDetectionJobFilter = TypedDict(
    'ComprehendDominantLanguageDetectionJobFilter', {
        'JobName': Optional[str],
        'JobStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


ComprehendListDominantLanguageDetectionJobsResponse = TypedDict(
    'ComprehendListDominantLanguageDetectionJobsResponse', {
        'DominantLanguageDetectionJobPropertiesList': Optional[List[ComprehendDominantLanguageDetectionJobProperties]],
        'String': Optional[str],
    }
)


ComprehendEntitiesDetectionJobFilter = TypedDict(
    'ComprehendEntitiesDetectionJobFilter', {
        'JobName': Optional[str],
        'JobStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


ComprehendListEntitiesDetectionJobsResponse = TypedDict(
    'ComprehendListEntitiesDetectionJobsResponse', {
        'EntitiesDetectionJobPropertiesList': Optional[List[ComprehendEntitiesDetectionJobProperties]],
        'String': Optional[str],
    }
)


ComprehendEntityRecognizerFilter = TypedDict(
    'ComprehendEntityRecognizerFilter', {
        'ModelStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


ComprehendListEntityRecognizersResponse = TypedDict(
    'ComprehendListEntityRecognizersResponse', {
        'EntityRecognizerPropertiesList': Optional[List[ComprehendEntityRecognizerProperties]],
        'String': Optional[str],
    }
)


ComprehendKeyPhrasesDetectionJobFilter = TypedDict(
    'ComprehendKeyPhrasesDetectionJobFilter', {
        'JobName': Optional[str],
        'JobStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


ComprehendListKeyPhrasesDetectionJobsResponse = TypedDict(
    'ComprehendListKeyPhrasesDetectionJobsResponse', {
        'KeyPhrasesDetectionJobPropertiesList': Optional[List[ComprehendKeyPhrasesDetectionJobProperties]],
        'String': Optional[str],
    }
)


ComprehendSentimentDetectionJobFilter = TypedDict(
    'ComprehendSentimentDetectionJobFilter', {
        'JobName': Optional[str],
        'JobStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


ComprehendListSentimentDetectionJobsResponse = TypedDict(
    'ComprehendListSentimentDetectionJobsResponse', {
        'SentimentDetectionJobPropertiesList': Optional[List[ComprehendSentimentDetectionJobProperties]],
        'String': Optional[str],
    }
)


ComprehendListTagsForResourceResponse = TypedDict(
    'ComprehendListTagsForResourceResponse', {
        'ComprehendArn': Optional[str],
        'TagList': Optional[List[ComprehendTag]],
    }
)


ComprehendTopicsDetectionJobFilter = TypedDict(
    'ComprehendTopicsDetectionJobFilter', {
        'JobName': Optional[str],
        'JobStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


ComprehendListTopicsDetectionJobsResponse = TypedDict(
    'ComprehendListTopicsDetectionJobsResponse', {
        'TopicsDetectionJobPropertiesList': Optional[List[ComprehendTopicsDetectionJobProperties]],
        'String': Optional[str],
    }
)


ComprehendStartDocumentClassificationJobResponse = TypedDict(
    'ComprehendStartDocumentClassificationJobResponse', {
        'JobId': Optional[str],
        'JobStatus': Optional[str],
    }
)


ComprehendStartDominantLanguageDetectionJobResponse = TypedDict(
    'ComprehendStartDominantLanguageDetectionJobResponse', {
        'JobId': Optional[str],
        'JobStatus': Optional[str],
    }
)


ComprehendStartEntitiesDetectionJobResponse = TypedDict(
    'ComprehendStartEntitiesDetectionJobResponse', {
        'JobId': Optional[str],
        'JobStatus': Optional[str],
    }
)


ComprehendStartKeyPhrasesDetectionJobResponse = TypedDict(
    'ComprehendStartKeyPhrasesDetectionJobResponse', {
        'JobId': Optional[str],
        'JobStatus': Optional[str],
    }
)


ComprehendStartSentimentDetectionJobResponse = TypedDict(
    'ComprehendStartSentimentDetectionJobResponse', {
        'JobId': Optional[str],
        'JobStatus': Optional[str],
    }
)


ComprehendStartTopicsDetectionJobResponse = TypedDict(
    'ComprehendStartTopicsDetectionJobResponse', {
        'JobId': Optional[str],
        'JobStatus': Optional[str],
    }
)


ComprehendStopDominantLanguageDetectionJobResponse = TypedDict(
    'ComprehendStopDominantLanguageDetectionJobResponse', {
        'JobId': Optional[str],
        'JobStatus': Optional[str],
    }
)


ComprehendStopEntitiesDetectionJobResponse = TypedDict(
    'ComprehendStopEntitiesDetectionJobResponse', {
        'JobId': Optional[str],
        'JobStatus': Optional[str],
    }
)


ComprehendStopKeyPhrasesDetectionJobResponse = TypedDict(
    'ComprehendStopKeyPhrasesDetectionJobResponse', {
        'JobId': Optional[str],
        'JobStatus': Optional[str],
    }
)


ComprehendStopSentimentDetectionJobResponse = TypedDict(
    'ComprehendStopSentimentDetectionJobResponse', {
        'JobId': Optional[str],
        'JobStatus': Optional[str],
    }
)


ComprehendStopTrainingDocumentClassifierResponse = TypedDict(
    'ComprehendStopTrainingDocumentClassifierResponse', {
    }
)


ComprehendStopTrainingEntityRecognizerResponse = TypedDict(
    'ComprehendStopTrainingEntityRecognizerResponse', {
    }
)


ComprehendTagResourceResponse = TypedDict(
    'ComprehendTagResourceResponse', {
    }
)


ComprehendUntagResourceResponse = TypedDict(
    'ComprehendUntagResourceResponse', {
    }
)


class ComprehendMedical(BaseClient):
    def detect_entities(self, *,
        Text: str
    ) -> ComprehendMedicalDetectEntitiesResponse: ...

    def detect_phi(self, *,
        Text: str
    ) -> ComprehendMedicalDetectPHIResponse: ...


ComprehendMedicalTrait = TypedDict(
    'ComprehendMedicalTrait', {
        'AttributeName': Optional[str],
        'Float': Optional[float],
    }
)


ComprehendMedicalAttribute = TypedDict(
    'ComprehendMedicalAttribute', {
        'EntitySubType': Optional[str],
        'Float': Optional[float],
        'Float': Optional[float],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'String': Optional[str],
        'TraitList': Optional[List[ComprehendMedicalTrait]],
    }
)


ComprehendMedicalEntity = TypedDict(
    'ComprehendMedicalEntity', {
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Float': Optional[float],
        'String': Optional[str],
        'EntityType': Optional[str],
        'EntitySubType': Optional[str],
        'TraitList': Optional[List[ComprehendMedicalTrait]],
        'AttributeList': Optional[List[ComprehendMedicalAttribute]],
    }
)


ComprehendMedicalUnmappedAttribute = TypedDict(
    'ComprehendMedicalUnmappedAttribute', {
        'EntityType': Optional[str],
        'Attribute': Optional[ComprehendMedicalAttribute],
    }
)


ComprehendMedicalDetectEntitiesResponse = TypedDict(
    'ComprehendMedicalDetectEntitiesResponse', {
        'EntityList': List[ComprehendMedicalEntity],
        'UnmappedAttributeList': Optional[List[ComprehendMedicalUnmappedAttribute]],
        'String': Optional[str],
    }
)


ComprehendMedicalDetectPHIResponse = TypedDict(
    'ComprehendMedicalDetectPHIResponse', {
        'EntityList': List[ComprehendMedicalEntity],
        'String': Optional[str],
    }
)


class ConfigService(BaseClient):
    def batch_get_aggregate_resource_config(self, *,
        ConfigurationAggregatorName: str,
        ResourceIdentifiers: List[ConfigServiceAggregateResourceIdentifier]
    ) -> ConfigServiceBatchGetAggregateResourceConfigResponse: ...

    def batch_get_resource_config(self, *,
        resourceKeys: List[ConfigServiceResourceKey]
    ) -> ConfigServiceBatchGetResourceConfigResponse: ...

    def delete_aggregation_authorization(self, *,
        AuthorizedAccountId: str,
        AuthorizedAwsRegion: str
    ): ...

    def delete_config_rule(self, *,
        ConfigRuleName: str
    ): ...

    def delete_configuration_aggregator(self, *,
        ConfigurationAggregatorName: str
    ): ...

    def delete_configuration_recorder(self, *,
        ConfigurationRecorderName: str
    ): ...

    def delete_delivery_channel(self, *,
        DeliveryChannelName: str
    ): ...

    def delete_evaluation_results(self, *,
        ConfigRuleName: str
    ) -> ConfigServiceDeleteEvaluationResultsResponse: ...

    def delete_pending_aggregation_request(self, *,
        RequesterAccountId: str,
        RequesterAwsRegion: str
    ): ...

    def delete_remediation_configuration(self, *,
        ConfigRuleName: str,
        ResourceType: str = ...
    ) -> ConfigServiceDeleteRemediationConfigurationResponse: ...

    def delete_retention_configuration(self, *,
        RetentionConfigurationName: str
    ): ...

    def deliver_config_snapshot(self, *,
        deliveryChannelName: str
    ) -> ConfigServiceDeliverConfigSnapshotResponse: ...

    def describe_aggregate_compliance_by_config_rules(self, *,
        ConfigurationAggregatorName: str,
        Filters: ConfigServiceConfigRuleComplianceFilters = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> ConfigServiceDescribeAggregateComplianceByConfigRulesResponse: ...

    def describe_aggregation_authorizations(self, *,
        Limit: int = ...,
        NextToken: str = ...
    ) -> ConfigServiceDescribeAggregationAuthorizationsResponse: ...

    def describe_compliance_by_config_rule(self, *,
        ConfigRuleNames: List[str] = ...,
        ComplianceTypes: List[str] = ...,
        NextToken: str = ...
    ) -> ConfigServiceDescribeComplianceByConfigRuleResponse: ...

    def describe_compliance_by_resource(self, *,
        ResourceType: str = ...,
        ResourceId: str = ...,
        ComplianceTypes: List[str] = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> ConfigServiceDescribeComplianceByResourceResponse: ...

    def describe_config_rule_evaluation_status(self, *,
        ConfigRuleNames: List[str] = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> ConfigServiceDescribeConfigRuleEvaluationStatusResponse: ...

    def describe_config_rules(self, *,
        ConfigRuleNames: List[str] = ...,
        NextToken: str = ...
    ) -> ConfigServiceDescribeConfigRulesResponse: ...

    def describe_configuration_aggregator_sources_status(self, *,
        ConfigurationAggregatorName: str,
        UpdateStatus: List[str] = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> ConfigServiceDescribeConfigurationAggregatorSourcesStatusResponse: ...

    def describe_configuration_aggregators(self, *,
        ConfigurationAggregatorNames: List[str] = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> ConfigServiceDescribeConfigurationAggregatorsResponse: ...

    def describe_configuration_recorder_status(self, *,
        ConfigurationRecorderNames: List[str] = ...
    ) -> ConfigServiceDescribeConfigurationRecorderStatusResponse: ...

    def describe_configuration_recorders(self, *,
        ConfigurationRecorderNames: List[str] = ...
    ) -> ConfigServiceDescribeConfigurationRecordersResponse: ...

    def describe_delivery_channel_status(self, *,
        DeliveryChannelNames: List[str] = ...
    ) -> ConfigServiceDescribeDeliveryChannelStatusResponse: ...

    def describe_delivery_channels(self, *,
        DeliveryChannelNames: List[str] = ...
    ) -> ConfigServiceDescribeDeliveryChannelsResponse: ...

    def describe_pending_aggregation_requests(self, *,
        Limit: int = ...,
        NextToken: str = ...
    ) -> ConfigServiceDescribePendingAggregationRequestsResponse: ...

    def describe_remediation_configurations(self, *,
        ConfigRuleNames: List[str]
    ) -> ConfigServiceDescribeRemediationConfigurationsResponse: ...

    def describe_remediation_execution_status(self, *,
        ConfigRuleName: str,
        ResourceKeys: List[ConfigServiceResourceKey] = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> ConfigServiceDescribeRemediationExecutionStatusResponse: ...

    def describe_retention_configurations(self, *,
        RetentionConfigurationNames: List[str] = ...,
        NextToken: str = ...
    ) -> ConfigServiceDescribeRetentionConfigurationsResponse: ...

    def get_aggregate_compliance_details_by_config_rule(self, *,
        ConfigurationAggregatorName: str,
        ConfigRuleName: str,
        AccountId: str,
        AwsRegion: str,
        ComplianceType: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> ConfigServiceGetAggregateComplianceDetailsByConfigRuleResponse: ...

    def get_aggregate_config_rule_compliance_summary(self, *,
        ConfigurationAggregatorName: str,
        Filters: ConfigServiceConfigRuleComplianceSummaryFilters = ...,
        GroupByKey: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> ConfigServiceGetAggregateConfigRuleComplianceSummaryResponse: ...

    def get_aggregate_discovered_resource_counts(self, *,
        ConfigurationAggregatorName: str,
        Filters: ConfigServiceResourceCountFilters = ...,
        GroupByKey: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> ConfigServiceGetAggregateDiscoveredResourceCountsResponse: ...

    def get_aggregate_resource_config(self, *,
        ConfigurationAggregatorName: str,
        ResourceIdentifier: ConfigServiceAggregateResourceIdentifier
    ) -> ConfigServiceGetAggregateResourceConfigResponse: ...

    def get_compliance_details_by_config_rule(self, *,
        ConfigRuleName: str,
        ComplianceTypes: List[str] = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> ConfigServiceGetComplianceDetailsByConfigRuleResponse: ...

    def get_compliance_details_by_resource(self, *,
        ResourceType: str,
        ResourceId: str,
        ComplianceTypes: List[str] = ...,
        NextToken: str = ...
    ) -> ConfigServiceGetComplianceDetailsByResourceResponse: ...

    def get_compliance_summary_by_config_rule(self) -> ConfigServiceGetComplianceSummaryByConfigRuleResponse: ...

    def get_compliance_summary_by_resource_type(self, *,
        ResourceTypes: List[str] = ...
    ) -> ConfigServiceGetComplianceSummaryByResourceTypeResponse: ...

    def get_discovered_resource_counts(self, *,
        resourceTypes: List[str] = ...,
        limit: int = ...,
        nextToken: str = ...
    ) -> ConfigServiceGetDiscoveredResourceCountsResponse: ...

    def get_resource_config_history(self, *,
        resourceType: str,
        resourceId: str,
        laterTime: datetime.datetime = ...,
        earlierTime: datetime.datetime = ...,
        chronologicalOrder: str = ...,
        limit: int = ...,
        nextToken: str = ...
    ) -> ConfigServiceGetResourceConfigHistoryResponse: ...

    def list_aggregate_discovered_resources(self, *,
        ConfigurationAggregatorName: str,
        ResourceType: str,
        Filters: ConfigServiceResourceFilters = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> ConfigServiceListAggregateDiscoveredResourcesResponse: ...

    def list_discovered_resources(self, *,
        resourceType: str,
        resourceIds: List[str] = ...,
        resourceName: str = ...,
        limit: int = ...,
        includeDeletedResources: bool = ...,
        nextToken: str = ...
    ) -> ConfigServiceListDiscoveredResourcesResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str,
        Limit: int = ...,
        NextToken: str = ...
    ) -> ConfigServiceListTagsForResourceResponse: ...

    def put_aggregation_authorization(self, *,
        AuthorizedAccountId: str,
        AuthorizedAwsRegion: str,
        Tags: List[ConfigServiceTag] = ...
    ) -> ConfigServicePutAggregationAuthorizationResponse: ...

    def put_config_rule(self, *,
        ConfigRule: ConfigServiceConfigRule,
        Tags: List[ConfigServiceTag] = ...
    ): ...

    def put_configuration_aggregator(self, *,
        ConfigurationAggregatorName: str,
        AccountAggregationSources: List[ConfigServiceAccountAggregationSource] = ...,
        OrganizationAggregationSource: ConfigServiceOrganizationAggregationSource = ...,
        Tags: List[ConfigServiceTag] = ...
    ) -> ConfigServicePutConfigurationAggregatorResponse: ...

    def put_configuration_recorder(self, *,
        ConfigurationRecorder: ConfigServiceConfigurationRecorder
    ): ...

    def put_delivery_channel(self, *,
        DeliveryChannel: ConfigServiceDeliveryChannel
    ): ...

    def put_evaluations(self, *,
        ResultToken: str,
        Evaluations: List[ConfigServiceEvaluation] = ...,
        TestMode: bool = ...
    ) -> ConfigServicePutEvaluationsResponse: ...

    def put_remediation_configurations(self, *,
        RemediationConfigurations: List[ConfigServiceRemediationConfiguration]
    ) -> ConfigServicePutRemediationConfigurationsResponse: ...

    def put_retention_configuration(self, *,
        RetentionPeriodInDays: int
    ) -> ConfigServicePutRetentionConfigurationResponse: ...

    def select_resource_config(self, *,
        Expression: str,
        Limit: int = ...,
        NextToken: str = ...
    ) -> ConfigServiceSelectResourceConfigResponse: ...

    def start_config_rules_evaluation(self, *,
        ConfigRuleNames: List[str] = ...
    ) -> ConfigServiceStartConfigRulesEvaluationResponse: ...

    def start_configuration_recorder(self, *,
        ConfigurationRecorderName: str
    ): ...

    def start_remediation_execution(self, *,
        ConfigRuleName: str,
        ResourceKeys: List[ConfigServiceResourceKey]
    ) -> ConfigServiceStartRemediationExecutionResponse: ...

    def stop_configuration_recorder(self, *,
        ConfigurationRecorderName: str
    ): ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: List[ConfigServiceTag]
    ): ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ): ...


ConfigServiceAggregateResourceIdentifier = TypedDict(
    'ConfigServiceAggregateResourceIdentifier', {
        'AccountId': str,
        'AwsRegion': str,
        'ResourceId': str,
        'ResourceType': str,
        'ResourceName': Optional[str],
    }
)


ConfigServiceBaseConfigurationItem = TypedDict(
    'ConfigServiceBaseConfigurationItem', {
        'Version': Optional[str],
        'AccountId': Optional[str],
        'ConfigurationItemCaptureTime': Optional[datetime.datetime],
        'ConfigurationItemStatus': Optional[str],
        'ConfigurationStateId': Optional[str],
        'ARN': Optional[str],
        'ResourceType': Optional[str],
        'ResourceId': Optional[str],
        'ResourceName': Optional[str],
        'AwsRegion': Optional[str],
        'AvailabilityZone': Optional[str],
        'ResourceCreationTime': Optional[datetime.datetime],
        'Configuration': Optional[str],
        'SupplementaryConfiguration': Optional[Dict[str, str]],
    }
)


ConfigServiceBatchGetAggregateResourceConfigResponse = TypedDict(
    'ConfigServiceBatchGetAggregateResourceConfigResponse', {
        'BaseConfigurationItems': Optional[List[ConfigServiceBaseConfigurationItem]],
        'UnprocessedResourceIdentifierList': Optional[List[ConfigServiceAggregateResourceIdentifier]],
    }
)


ConfigServiceResourceKey = TypedDict(
    'ConfigServiceResourceKey', {
        'ResourceType': str,
        'ResourceId': str,
    }
)


ConfigServiceBatchGetResourceConfigResponse = TypedDict(
    'ConfigServiceBatchGetResourceConfigResponse', {
        'BaseConfigurationItems': Optional[List[ConfigServiceBaseConfigurationItem]],
        'ResourceKeys': Optional[List[ConfigServiceResourceKey]],
    }
)


ConfigServiceDeleteEvaluationResultsResponse = TypedDict(
    'ConfigServiceDeleteEvaluationResultsResponse', {
    }
)


ConfigServiceDeleteRemediationConfigurationResponse = TypedDict(
    'ConfigServiceDeleteRemediationConfigurationResponse', {
    }
)


ConfigServiceDeliverConfigSnapshotResponse = TypedDict(
    'ConfigServiceDeliverConfigSnapshotResponse', {
        'String': Optional[str],
    }
)


ConfigServiceConfigRuleComplianceFilters = TypedDict(
    'ConfigServiceConfigRuleComplianceFilters', {
        'ConfigRuleName': Optional[str],
        'ComplianceType': Optional[str],
        'AccountId': Optional[str],
        'AwsRegion': Optional[str],
    }
)


ConfigServiceComplianceContributorCount = TypedDict(
    'ConfigServiceComplianceContributorCount', {
        'Integer': Optional[int],
        'Boolean': Optional[bool],
    }
)


ConfigServiceCompliance = TypedDict(
    'ConfigServiceCompliance', {
        'ComplianceType': Optional[str],
        'ComplianceContributorCount': Optional[ConfigServiceComplianceContributorCount],
    }
)


ConfigServiceAggregateComplianceByConfigRule = TypedDict(
    'ConfigServiceAggregateComplianceByConfigRule', {
        'ConfigRuleName': Optional[str],
        'Compliance': Optional[ConfigServiceCompliance],
        'AccountId': Optional[str],
        'AwsRegion': Optional[str],
    }
)


ConfigServiceDescribeAggregateComplianceByConfigRulesResponse = TypedDict(
    'ConfigServiceDescribeAggregateComplianceByConfigRulesResponse', {
        'AggregateComplianceByConfigRuleList': Optional[List[ConfigServiceAggregateComplianceByConfigRule]],
        'NextToken': Optional[str],
    }
)


ConfigServiceAggregationAuthorization = TypedDict(
    'ConfigServiceAggregationAuthorization', {
        'String': Optional[str],
        'AccountId': Optional[str],
        'AwsRegion': Optional[str],
        'Date': Optional[datetime.datetime],
    }
)


ConfigServiceDescribeAggregationAuthorizationsResponse = TypedDict(
    'ConfigServiceDescribeAggregationAuthorizationsResponse', {
        'AggregationAuthorizationList': Optional[List[ConfigServiceAggregationAuthorization]],
        'String': Optional[str],
    }
)


ConfigServiceComplianceByConfigRule = TypedDict(
    'ConfigServiceComplianceByConfigRule', {
        'StringWithCharLimit64': Optional[str],
        'Compliance': Optional[ConfigServiceCompliance],
    }
)


ConfigServiceDescribeComplianceByConfigRuleResponse = TypedDict(
    'ConfigServiceDescribeComplianceByConfigRuleResponse', {
        'ComplianceByConfigRules': Optional[List[ConfigServiceComplianceByConfigRule]],
        'String': Optional[str],
    }
)


ConfigServiceComplianceByResource = TypedDict(
    'ConfigServiceComplianceByResource', {
        'StringWithCharLimit256': Optional[str],
        'BaseResourceId': Optional[str],
        'Compliance': Optional[ConfigServiceCompliance],
    }
)


ConfigServiceDescribeComplianceByResourceResponse = TypedDict(
    'ConfigServiceDescribeComplianceByResourceResponse', {
        'ComplianceByResources': Optional[List[ConfigServiceComplianceByResource]],
        'NextToken': Optional[str],
    }
)


ConfigServiceConfigRuleEvaluationStatus = TypedDict(
    'ConfigServiceConfigRuleEvaluationStatus', {
        'StringWithCharLimit64': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Date': Optional[datetime.datetime],
        'Date': Optional[datetime.datetime],
        'Date': Optional[datetime.datetime],
        'Date': Optional[datetime.datetime],
        'Date': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
    }
)


ConfigServiceDescribeConfigRuleEvaluationStatusResponse = TypedDict(
    'ConfigServiceDescribeConfigRuleEvaluationStatusResponse', {
        'ConfigRuleEvaluationStatusList': Optional[List[ConfigServiceConfigRuleEvaluationStatus]],
        'String': Optional[str],
    }
)


ConfigServiceScope = TypedDict(
    'ConfigServiceScope', {
        'ComplianceResourceTypes': Optional[List[str]],
        'StringWithCharLimit128': Optional[str],
        'StringWithCharLimit256': Optional[str],
        'BaseResourceId': Optional[str],
    }
)


ConfigServiceSourceDetail = TypedDict(
    'ConfigServiceSourceDetail', {
        'EventSource': Optional[str],
        'MessageType': Optional[str],
        'MaximumExecutionFrequency': Optional[str],
    }
)


ConfigServiceSource = TypedDict(
    'ConfigServiceSource', {
        'Owner': str,
        'StringWithCharLimit256': str,
        'SourceDetails': Optional[List[ConfigServiceSourceDetail]],
    }
)


ConfigServiceConfigRule = TypedDict(
    'ConfigServiceConfigRule', {
        'Source': ConfigServiceSource,
        'StringWithCharLimit64': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'EmptiableStringWithCharLimit256': Optional[str],
        'Scope': Optional[ConfigServiceScope],
        'StringWithCharLimit1024': Optional[str],
        'MaximumExecutionFrequency': Optional[str],
        'ConfigRuleState': Optional[str],
        'StringWithCharLimit256': Optional[str],
    }
)


ConfigServiceDescribeConfigRulesResponse = TypedDict(
    'ConfigServiceDescribeConfigRulesResponse', {
        'ConfigRules': Optional[List[ConfigServiceConfigRule]],
        'String': Optional[str],
    }
)


ConfigServiceAggregatedSourceStatus = TypedDict(
    'ConfigServiceAggregatedSourceStatus', {
        'String': Optional[str],
        'AggregatedSourceType': Optional[str],
        'AwsRegion': Optional[str],
        'AggregatedSourceStatusType': Optional[str],
        'Date': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
    }
)


ConfigServiceDescribeConfigurationAggregatorSourcesStatusResponse = TypedDict(
    'ConfigServiceDescribeConfigurationAggregatorSourcesStatusResponse', {
        'AggregatedSourceStatusList': Optional[List[ConfigServiceAggregatedSourceStatus]],
        'String': Optional[str],
    }
)


ConfigServiceAccountAggregationSource = TypedDict(
    'ConfigServiceAccountAggregationSource', {
        'AccountAggregationSourceAccountList': List[str],
        'Boolean': Optional[bool],
        'AggregatorRegionList': Optional[List[str]],
    }
)


ConfigServiceOrganizationAggregationSource = TypedDict(
    'ConfigServiceOrganizationAggregationSource', {
        'String': str,
        'AggregatorRegionList': Optional[List[str]],
        'Boolean': Optional[bool],
    }
)


ConfigServiceConfigurationAggregator = TypedDict(
    'ConfigServiceConfigurationAggregator', {
        'ConfigurationAggregatorName': Optional[str],
        'ConfigurationAggregatorArn': Optional[str],
        'AccountAggregationSourceList': Optional[List[ConfigServiceAccountAggregationSource]],
        'OrganizationAggregationSource': Optional[ConfigServiceOrganizationAggregationSource],
        'Date': Optional[datetime.datetime],
        'Date': Optional[datetime.datetime],
    }
)


ConfigServiceDescribeConfigurationAggregatorsResponse = TypedDict(
    'ConfigServiceDescribeConfigurationAggregatorsResponse', {
        'ConfigurationAggregatorList': Optional[List[ConfigServiceConfigurationAggregator]],
        'String': Optional[str],
    }
)


ConfigServiceConfigurationRecorderStatus = TypedDict(
    'ConfigServiceConfigurationRecorderStatus', {
        'String': Optional[str],
        'Date': Optional[datetime.datetime],
        'Date': Optional[datetime.datetime],
        'Boolean': Optional[bool],
        'RecorderStatus': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Date': Optional[datetime.datetime],
    }
)


ConfigServiceDescribeConfigurationRecorderStatusResponse = TypedDict(
    'ConfigServiceDescribeConfigurationRecorderStatusResponse', {
        'ConfigurationRecorderStatusList': Optional[List[ConfigServiceConfigurationRecorderStatus]],
    }
)


ConfigServiceRecordingGroup = TypedDict(
    'ConfigServiceRecordingGroup', {
        'AllSupported': Optional[bool],
        'IncludeGlobalResourceTypes': Optional[bool],
        'ResourceTypeList': Optional[List[str]],
    }
)


ConfigServiceConfigurationRecorder = TypedDict(
    'ConfigServiceConfigurationRecorder', {
        'RecorderName': Optional[str],
        'String': Optional[str],
        'RecordingGroup': Optional[ConfigServiceRecordingGroup],
    }
)


ConfigServiceDescribeConfigurationRecordersResponse = TypedDict(
    'ConfigServiceDescribeConfigurationRecordersResponse', {
        'ConfigurationRecorderList': Optional[List[ConfigServiceConfigurationRecorder]],
    }
)


ConfigServiceConfigExportDeliveryInfo = TypedDict(
    'ConfigServiceConfigExportDeliveryInfo', {
        'DeliveryStatus': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Date': Optional[datetime.datetime],
        'Date': Optional[datetime.datetime],
        'Date': Optional[datetime.datetime],
    }
)


ConfigServiceConfigStreamDeliveryInfo = TypedDict(
    'ConfigServiceConfigStreamDeliveryInfo', {
        'DeliveryStatus': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Date': Optional[datetime.datetime],
    }
)


ConfigServiceDeliveryChannelStatus = TypedDict(
    'ConfigServiceDeliveryChannelStatus', {
        'String': Optional[str],
        'ConfigExportDeliveryInfo': Optional[ConfigServiceConfigExportDeliveryInfo],
        'ConfigExportDeliveryInfo': Optional[ConfigServiceConfigExportDeliveryInfo],
        'ConfigStreamDeliveryInfo': Optional[ConfigServiceConfigStreamDeliveryInfo],
    }
)


ConfigServiceDescribeDeliveryChannelStatusResponse = TypedDict(
    'ConfigServiceDescribeDeliveryChannelStatusResponse', {
        'DeliveryChannelStatusList': Optional[List[ConfigServiceDeliveryChannelStatus]],
    }
)


ConfigServiceConfigSnapshotDeliveryProperties = TypedDict(
    'ConfigServiceConfigSnapshotDeliveryProperties', {
        'MaximumExecutionFrequency': Optional[str],
    }
)


ConfigServiceDeliveryChannel = TypedDict(
    'ConfigServiceDeliveryChannel', {
        'ChannelName': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'ConfigSnapshotDeliveryProperties': Optional[ConfigServiceConfigSnapshotDeliveryProperties],
    }
)


ConfigServiceDescribeDeliveryChannelsResponse = TypedDict(
    'ConfigServiceDescribeDeliveryChannelsResponse', {
        'DeliveryChannelList': Optional[List[ConfigServiceDeliveryChannel]],
    }
)


ConfigServicePendingAggregationRequest = TypedDict(
    'ConfigServicePendingAggregationRequest', {
        'AccountId': Optional[str],
        'AwsRegion': Optional[str],
    }
)


ConfigServiceDescribePendingAggregationRequestsResponse = TypedDict(
    'ConfigServiceDescribePendingAggregationRequestsResponse', {
        'PendingAggregationRequestList': Optional[List[ConfigServicePendingAggregationRequest]],
        'String': Optional[str],
    }
)


ConfigServiceResourceValue = TypedDict(
    'ConfigServiceResourceValue', {
        'ResourceValueType': Optional[str],
    }
)


ConfigServiceStaticValue = TypedDict(
    'ConfigServiceStaticValue', {
        'StaticParameterValues': Optional[List[str]],
    }
)


ConfigServiceRemediationParameterValue = TypedDict(
    'ConfigServiceRemediationParameterValue', {
        'ResourceValue': Optional[ConfigServiceResourceValue],
        'StaticValue': Optional[ConfigServiceStaticValue],
    }
)


ConfigServiceRemediationConfiguration = TypedDict(
    'ConfigServiceRemediationConfiguration', {
        'StringWithCharLimit64': str,
        'RemediationTargetType': str,
        'StringWithCharLimit256': str,
        'String': Optional[str],
        'RemediationParameters': Optional[Dict[str, ConfigServiceRemediationParameterValue]],
        'String': Optional[str],
    }
)


ConfigServiceDescribeRemediationConfigurationsResponse = TypedDict(
    'ConfigServiceDescribeRemediationConfigurationsResponse', {
        'RemediationConfigurations': Optional[List[ConfigServiceRemediationConfiguration]],
    }
)


ConfigServiceRemediationExecutionStep = TypedDict(
    'ConfigServiceRemediationExecutionStep', {
        'String': Optional[str],
        'RemediationExecutionStepState': Optional[str],
        'String': Optional[str],
        'Date': Optional[datetime.datetime],
        'Date': Optional[datetime.datetime],
    }
)


ConfigServiceRemediationExecutionStatus = TypedDict(
    'ConfigServiceRemediationExecutionStatus', {
        'ResourceKey': Optional[ConfigServiceResourceKey],
        'RemediationExecutionState': Optional[str],
        'RemediationExecutionSteps': Optional[List[ConfigServiceRemediationExecutionStep]],
        'Date': Optional[datetime.datetime],
        'Date': Optional[datetime.datetime],
    }
)


ConfigServiceDescribeRemediationExecutionStatusResponse = TypedDict(
    'ConfigServiceDescribeRemediationExecutionStatusResponse', {
        'RemediationExecutionStatuses': Optional[List[ConfigServiceRemediationExecutionStatus]],
        'StringWithCharLimit256': Optional[str],
    }
)


ConfigServiceRetentionConfiguration = TypedDict(
    'ConfigServiceRetentionConfiguration', {
        'RetentionConfigurationName': str,
        'RetentionPeriodInDays': int,
    }
)


ConfigServiceDescribeRetentionConfigurationsResponse = TypedDict(
    'ConfigServiceDescribeRetentionConfigurationsResponse', {
        'RetentionConfigurationList': Optional[List[ConfigServiceRetentionConfiguration]],
        'NextToken': Optional[str],
    }
)


ConfigServiceEvaluationResultQualifier = TypedDict(
    'ConfigServiceEvaluationResultQualifier', {
        'StringWithCharLimit64': Optional[str],
        'StringWithCharLimit256': Optional[str],
        'BaseResourceId': Optional[str],
    }
)


ConfigServiceEvaluationResultIdentifier = TypedDict(
    'ConfigServiceEvaluationResultIdentifier', {
        'EvaluationResultQualifier': Optional[ConfigServiceEvaluationResultQualifier],
        'Date': Optional[datetime.datetime],
    }
)


ConfigServiceAggregateEvaluationResult = TypedDict(
    'ConfigServiceAggregateEvaluationResult', {
        'EvaluationResultIdentifier': Optional[ConfigServiceEvaluationResultIdentifier],
        'ComplianceType': Optional[str],
        'Date': Optional[datetime.datetime],
        'Date': Optional[datetime.datetime],
        'StringWithCharLimit256': Optional[str],
        'AccountId': Optional[str],
        'AwsRegion': Optional[str],
    }
)


ConfigServiceGetAggregateComplianceDetailsByConfigRuleResponse = TypedDict(
    'ConfigServiceGetAggregateComplianceDetailsByConfigRuleResponse', {
        'AggregateEvaluationResultList': Optional[List[ConfigServiceAggregateEvaluationResult]],
        'NextToken': Optional[str],
    }
)


ConfigServiceConfigRuleComplianceSummaryFilters = TypedDict(
    'ConfigServiceConfigRuleComplianceSummaryFilters', {
        'AccountId': Optional[str],
        'AwsRegion': Optional[str],
    }
)


ConfigServiceComplianceSummary = TypedDict(
    'ConfigServiceComplianceSummary', {
        'ComplianceContributorCount': Optional[ConfigServiceComplianceContributorCount],
        'ComplianceContributorCount': Optional[ConfigServiceComplianceContributorCount],
        'Date': Optional[datetime.datetime],
    }
)


ConfigServiceAggregateComplianceCount = TypedDict(
    'ConfigServiceAggregateComplianceCount', {
        'StringWithCharLimit256': Optional[str],
        'ComplianceSummary': Optional[ConfigServiceComplianceSummary],
    }
)


ConfigServiceGetAggregateConfigRuleComplianceSummaryResponse = TypedDict(
    'ConfigServiceGetAggregateConfigRuleComplianceSummaryResponse', {
        'StringWithCharLimit256': Optional[str],
        'AggregateComplianceCountList': Optional[List[ConfigServiceAggregateComplianceCount]],
        'NextToken': Optional[str],
    }
)


ConfigServiceResourceCountFilters = TypedDict(
    'ConfigServiceResourceCountFilters', {
        'ResourceType': Optional[str],
        'AccountId': Optional[str],
        'AwsRegion': Optional[str],
    }
)


ConfigServiceGroupedResourceCount = TypedDict(
    'ConfigServiceGroupedResourceCount', {
        'StringWithCharLimit256': str,
        'Long': int,
    }
)


ConfigServiceGetAggregateDiscoveredResourceCountsResponse = TypedDict(
    'ConfigServiceGetAggregateDiscoveredResourceCountsResponse', {
        'Long': int,
        'StringWithCharLimit256': Optional[str],
        'GroupedResourceCountList': Optional[List[ConfigServiceGroupedResourceCount]],
        'NextToken': Optional[str],
    }
)


ConfigServiceRelationship = TypedDict(
    'ConfigServiceRelationship', {
        'ResourceType': Optional[str],
        'ResourceId': Optional[str],
        'ResourceName': Optional[str],
        'RelationshipName': Optional[str],
    }
)


ConfigServiceConfigurationItem = TypedDict(
    'ConfigServiceConfigurationItem', {
        'Version': Optional[str],
        'AccountId': Optional[str],
        'ConfigurationItemCaptureTime': Optional[datetime.datetime],
        'ConfigurationItemStatus': Optional[str],
        'ConfigurationStateId': Optional[str],
        'ConfigurationItemMD5Hash': Optional[str],
        'ARN': Optional[str],
        'ResourceType': Optional[str],
        'ResourceId': Optional[str],
        'ResourceName': Optional[str],
        'AwsRegion': Optional[str],
        'AvailabilityZone': Optional[str],
        'ResourceCreationTime': Optional[datetime.datetime],
        'Tags': Optional[Dict[str, str]],
        'RelatedEventList': Optional[List[str]],
        'RelationshipList': Optional[List[ConfigServiceRelationship]],
        'Configuration': Optional[str],
        'SupplementaryConfiguration': Optional[Dict[str, str]],
    }
)


ConfigServiceGetAggregateResourceConfigResponse = TypedDict(
    'ConfigServiceGetAggregateResourceConfigResponse', {
        'ConfigurationItem': Optional[ConfigServiceConfigurationItem],
    }
)


ConfigServiceEvaluationResult = TypedDict(
    'ConfigServiceEvaluationResult', {
        'EvaluationResultIdentifier': Optional[ConfigServiceEvaluationResultIdentifier],
        'ComplianceType': Optional[str],
        'Date': Optional[datetime.datetime],
        'Date': Optional[datetime.datetime],
        'StringWithCharLimit256': Optional[str],
        'String': Optional[str],
    }
)


ConfigServiceGetComplianceDetailsByConfigRuleResponse = TypedDict(
    'ConfigServiceGetComplianceDetailsByConfigRuleResponse', {
        'EvaluationResults': Optional[List[ConfigServiceEvaluationResult]],
        'NextToken': Optional[str],
    }
)


ConfigServiceGetComplianceDetailsByResourceResponse = TypedDict(
    'ConfigServiceGetComplianceDetailsByResourceResponse', {
        'EvaluationResults': Optional[List[ConfigServiceEvaluationResult]],
        'String': Optional[str],
    }
)


ConfigServiceGetComplianceSummaryByConfigRuleResponse = TypedDict(
    'ConfigServiceGetComplianceSummaryByConfigRuleResponse', {
        'ComplianceSummary': Optional[ConfigServiceComplianceSummary],
    }
)


ConfigServiceComplianceSummaryByResourceType = TypedDict(
    'ConfigServiceComplianceSummaryByResourceType', {
        'StringWithCharLimit256': Optional[str],
        'ComplianceSummary': Optional[ConfigServiceComplianceSummary],
    }
)


ConfigServiceGetComplianceSummaryByResourceTypeResponse = TypedDict(
    'ConfigServiceGetComplianceSummaryByResourceTypeResponse', {
        'ComplianceSummariesByResourceType': Optional[List[ConfigServiceComplianceSummaryByResourceType]],
    }
)


ConfigServiceResourceCount = TypedDict(
    'ConfigServiceResourceCount', {
        'ResourceType': Optional[str],
        'Long': Optional[int],
    }
)


ConfigServiceGetDiscoveredResourceCountsResponse = TypedDict(
    'ConfigServiceGetDiscoveredResourceCountsResponse', {
        'Long': Optional[int],
        'ResourceCounts': Optional[List[ConfigServiceResourceCount]],
        'NextToken': Optional[str],
    }
)


ConfigServiceGetResourceConfigHistoryResponse = TypedDict(
    'ConfigServiceGetResourceConfigHistoryResponse', {
        'ConfigurationItemList': Optional[List[ConfigServiceConfigurationItem]],
        'NextToken': Optional[str],
    }
)


ConfigServiceResourceFilters = TypedDict(
    'ConfigServiceResourceFilters', {
        'AccountId': Optional[str],
        'ResourceId': Optional[str],
        'ResourceName': Optional[str],
        'AwsRegion': Optional[str],
    }
)


ConfigServiceListAggregateDiscoveredResourcesResponse = TypedDict(
    'ConfigServiceListAggregateDiscoveredResourcesResponse', {
        'DiscoveredResourceIdentifierList': Optional[List[ConfigServiceAggregateResourceIdentifier]],
        'NextToken': Optional[str],
    }
)


ConfigServiceResourceIdentifier = TypedDict(
    'ConfigServiceResourceIdentifier', {
        'ResourceType': Optional[str],
        'ResourceId': Optional[str],
        'ResourceName': Optional[str],
        'ResourceDeletionTime': Optional[datetime.datetime],
    }
)


ConfigServiceListDiscoveredResourcesResponse = TypedDict(
    'ConfigServiceListDiscoveredResourcesResponse', {
        'ResourceIdentifierList': Optional[List[ConfigServiceResourceIdentifier]],
        'NextToken': Optional[str],
    }
)


ConfigServiceTag = TypedDict(
    'ConfigServiceTag', {
        'TagKey': Optional[str],
        'TagValue': Optional[str],
    }
)


ConfigServiceListTagsForResourceResponse = TypedDict(
    'ConfigServiceListTagsForResourceResponse', {
        'TagList': Optional[List[ConfigServiceTag]],
        'NextToken': Optional[str],
    }
)


ConfigServicePutAggregationAuthorizationResponse = TypedDict(
    'ConfigServicePutAggregationAuthorizationResponse', {
        'AggregationAuthorization': Optional[ConfigServiceAggregationAuthorization],
    }
)


ConfigServicePutConfigurationAggregatorResponse = TypedDict(
    'ConfigServicePutConfigurationAggregatorResponse', {
        'ConfigurationAggregator': Optional[ConfigServiceConfigurationAggregator],
    }
)


ConfigServiceEvaluation = TypedDict(
    'ConfigServiceEvaluation', {
        'StringWithCharLimit256': str,
        'BaseResourceId': str,
        'ComplianceType': str,
        'OrderingTimestamp': datetime.datetime,
        'StringWithCharLimit256': Optional[str],
    }
)


ConfigServicePutEvaluationsResponse = TypedDict(
    'ConfigServicePutEvaluationsResponse', {
        'Evaluations': Optional[List[ConfigServiceEvaluation]],
    }
)


ConfigServiceFailedRemediationBatch = TypedDict(
    'ConfigServiceFailedRemediationBatch', {
        'String': Optional[str],
        'RemediationConfigurations': Optional[List[ConfigServiceRemediationConfiguration]],
    }
)


ConfigServicePutRemediationConfigurationsResponse = TypedDict(
    'ConfigServicePutRemediationConfigurationsResponse', {
        'FailedRemediationBatches': Optional[List[ConfigServiceFailedRemediationBatch]],
    }
)


ConfigServicePutRetentionConfigurationResponse = TypedDict(
    'ConfigServicePutRetentionConfigurationResponse', {
        'RetentionConfiguration': Optional[ConfigServiceRetentionConfiguration],
    }
)


ConfigServiceFieldInfo = TypedDict(
    'ConfigServiceFieldInfo', {
        'FieldName': Optional[str],
    }
)


ConfigServiceQueryInfo = TypedDict(
    'ConfigServiceQueryInfo', {
        'FieldInfoList': Optional[List[ConfigServiceFieldInfo]],
    }
)


ConfigServiceSelectResourceConfigResponse = TypedDict(
    'ConfigServiceSelectResourceConfigResponse', {
        'Results': Optional[List[str]],
        'QueryInfo': Optional[ConfigServiceQueryInfo],
        'NextToken': Optional[str],
    }
)


ConfigServiceStartConfigRulesEvaluationResponse = TypedDict(
    'ConfigServiceStartConfigRulesEvaluationResponse', {
    }
)


ConfigServiceStartRemediationExecutionResponse = TypedDict(
    'ConfigServiceStartRemediationExecutionResponse', {
        'String': Optional[str],
        'ResourceKeys': Optional[List[ConfigServiceResourceKey]],
    }
)


class Connect(BaseClient):
    def create_user(self, *,
        Username: str,
        PhoneConfig: ConnectUserPhoneConfig,
        SecurityProfileIds: List[str],
        RoutingProfileId: str,
        InstanceId: str,
        Password: str = ...,
        IdentityInfo: ConnectUserIdentityInfo = ...,
        DirectoryUserId: str = ...,
        HierarchyGroupId: str = ...
    ) -> ConnectCreateUserResponse: ...

    def delete_user(self, *,
        InstanceId: str,
        UserId: str
    ): ...

    def describe_user(self, *,
        UserId: str,
        InstanceId: str
    ) -> ConnectDescribeUserResponse: ...

    def describe_user_hierarchy_group(self, *,
        HierarchyGroupId: str,
        InstanceId: str
    ) -> ConnectDescribeUserHierarchyGroupResponse: ...

    def describe_user_hierarchy_structure(self, *,
        InstanceId: str
    ) -> ConnectDescribeUserHierarchyStructureResponse: ...

    def get_contact_attributes(self, *,
        InstanceId: str,
        InitialContactId: str
    ) -> ConnectGetContactAttributesResponse: ...

    def get_current_metric_data(self, *,
        InstanceId: str,
        Filters: ConnectFilters,
        CurrentMetrics: List[ConnectCurrentMetric],
        Groupings: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ConnectGetCurrentMetricDataResponse: ...

    def get_federation_token(self, *,
        InstanceId: str
    ) -> ConnectGetFederationTokenResponse: ...

    def get_metric_data(self, *,
        InstanceId: str,
        StartTime: datetime.datetime,
        EndTime: datetime.datetime,
        Filters: ConnectFilters,
        HistoricalMetrics: List[ConnectHistoricalMetric],
        Groupings: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ConnectGetMetricDataResponse: ...

    def list_routing_profiles(self, *,
        InstanceId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ConnectListRoutingProfilesResponse: ...

    def list_security_profiles(self, *,
        InstanceId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ConnectListSecurityProfilesResponse: ...

    def list_user_hierarchy_groups(self, *,
        InstanceId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ConnectListUserHierarchyGroupsResponse: ...

    def list_users(self, *,
        InstanceId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ConnectListUsersResponse: ...

    def start_outbound_voice_contact(self, *,
        DestinationPhoneNumber: str,
        ContactFlowId: str,
        InstanceId: str,
        ClientToken: str = ...,
        SourcePhoneNumber: str = ...,
        QueueId: str = ...,
        Attributes: Dict[str, str] = ...
    ) -> ConnectStartOutboundVoiceContactResponse: ...

    def stop_contact(self, *,
        ContactId: str,
        InstanceId: str
    ) -> ConnectStopContactResponse: ...

    def update_contact_attributes(self, *,
        InitialContactId: str,
        InstanceId: str,
        Attributes: Dict[str, str]
    ) -> ConnectUpdateContactAttributesResponse: ...

    def update_user_hierarchy(self, *,
        UserId: str,
        InstanceId: str,
        HierarchyGroupId: str = ...
    ): ...

    def update_user_identity_info(self, *,
        IdentityInfo: ConnectUserIdentityInfo,
        UserId: str,
        InstanceId: str
    ): ...

    def update_user_phone_config(self, *,
        PhoneConfig: ConnectUserPhoneConfig,
        UserId: str,
        InstanceId: str
    ): ...

    def update_user_routing_profile(self, *,
        RoutingProfileId: str,
        UserId: str,
        InstanceId: str
    ): ...

    def update_user_security_profiles(self, *,
        SecurityProfileIds: List[str],
        UserId: str,
        InstanceId: str
    ): ...


ConnectUserIdentityInfo = TypedDict(
    'ConnectUserIdentityInfo', {
        'AgentFirstName': Optional[str],
        'AgentLastName': Optional[str],
        'Email': Optional[str],
    }
)


ConnectUserPhoneConfig = TypedDict(
    'ConnectUserPhoneConfig', {
        'PhoneType': str,
        'AutoAccept': Optional[bool],
        'AfterContactWorkTimeLimit': Optional[int],
        'PhoneNumber': Optional[str],
    }
)


ConnectCreateUserResponse = TypedDict(
    'ConnectCreateUserResponse', {
        'UserId': Optional[str],
        'ARN': Optional[str],
    }
)


ConnectUser = TypedDict(
    'ConnectUser', {
        'UserId': Optional[str],
        'ARN': Optional[str],
        'AgentUsername': Optional[str],
        'UserIdentityInfo': Optional[ConnectUserIdentityInfo],
        'UserPhoneConfig': Optional[ConnectUserPhoneConfig],
        'DirectoryUserId': Optional[str],
        'SecurityProfileIds': Optional[List[str]],
        'RoutingProfileId': Optional[str],
        'HierarchyGroupId': Optional[str],
    }
)


ConnectDescribeUserResponse = TypedDict(
    'ConnectDescribeUserResponse', {
        'User': Optional[ConnectUser],
    }
)


ConnectHierarchyGroupSummary = TypedDict(
    'ConnectHierarchyGroupSummary', {
        'HierarchyGroupId': Optional[str],
        'ARN': Optional[str],
        'HierarchyGroupName': Optional[str],
    }
)


ConnectHierarchyPath = TypedDict(
    'ConnectHierarchyPath', {
        'HierarchyGroupSummary': Optional[ConnectHierarchyGroupSummary],
        'HierarchyGroupSummary': Optional[ConnectHierarchyGroupSummary],
        'HierarchyGroupSummary': Optional[ConnectHierarchyGroupSummary],
        'HierarchyGroupSummary': Optional[ConnectHierarchyGroupSummary],
        'HierarchyGroupSummary': Optional[ConnectHierarchyGroupSummary],
    }
)


ConnectHierarchyGroup = TypedDict(
    'ConnectHierarchyGroup', {
        'HierarchyGroupId': Optional[str],
        'ARN': Optional[str],
        'HierarchyGroupName': Optional[str],
        'HierarchyLevelId': Optional[str],
        'HierarchyPath': Optional[ConnectHierarchyPath],
    }
)


ConnectDescribeUserHierarchyGroupResponse = TypedDict(
    'ConnectDescribeUserHierarchyGroupResponse', {
        'HierarchyGroup': Optional[ConnectHierarchyGroup],
    }
)


ConnectHierarchyLevel = TypedDict(
    'ConnectHierarchyLevel', {
        'HierarchyLevelId': Optional[str],
        'ARN': Optional[str],
        'HierarchyLevelName': Optional[str],
    }
)


ConnectHierarchyStructure = TypedDict(
    'ConnectHierarchyStructure', {
        'HierarchyLevel': Optional[ConnectHierarchyLevel],
        'HierarchyLevel': Optional[ConnectHierarchyLevel],
        'HierarchyLevel': Optional[ConnectHierarchyLevel],
        'HierarchyLevel': Optional[ConnectHierarchyLevel],
        'HierarchyLevel': Optional[ConnectHierarchyLevel],
    }
)


ConnectDescribeUserHierarchyStructureResponse = TypedDict(
    'ConnectDescribeUserHierarchyStructureResponse', {
        'HierarchyStructure': Optional[ConnectHierarchyStructure],
    }
)


ConnectGetContactAttributesResponse = TypedDict(
    'ConnectGetContactAttributesResponse', {
        'Attributes': Optional[Dict[str, str]],
    }
)


ConnectFilters = TypedDict(
    'ConnectFilters', {
        'Queues': Optional[List[str]],
        'Channels': Optional[List[str]],
    }
)


ConnectCurrentMetric = TypedDict(
    'ConnectCurrentMetric', {
        'CurrentMetricName': Optional[str],
        'Unit': Optional[str],
    }
)


ConnectQueueReference = TypedDict(
    'ConnectQueueReference', {
        'QueueId': Optional[str],
        'ARN': Optional[str],
    }
)


ConnectDimensions = TypedDict(
    'ConnectDimensions', {
        'QueueReference': Optional[ConnectQueueReference],
        'Channel': Optional[str],
    }
)


ConnectCurrentMetricData = TypedDict(
    'ConnectCurrentMetricData', {
        'CurrentMetric': Optional[ConnectCurrentMetric],
        'Value': Optional[float],
    }
)


ConnectCurrentMetricResult = TypedDict(
    'ConnectCurrentMetricResult', {
        'Dimensions': Optional[ConnectDimensions],
        'CurrentMetricDataCollections': Optional[List[ConnectCurrentMetricData]],
    }
)


ConnectGetCurrentMetricDataResponse = TypedDict(
    'ConnectGetCurrentMetricDataResponse', {
        'NextToken': Optional[str],
        'CurrentMetricResults': Optional[List[ConnectCurrentMetricResult]],
        'timestamp': Optional[datetime.datetime],
    }
)


ConnectCredentials = TypedDict(
    'ConnectCredentials', {
        'SecurityToken': Optional[str],
        'timestamp': Optional[datetime.datetime],
        'SecurityToken': Optional[str],
        'timestamp': Optional[datetime.datetime],
    }
)


ConnectGetFederationTokenResponse = TypedDict(
    'ConnectGetFederationTokenResponse', {
        'Credentials': Optional[ConnectCredentials],
    }
)


ConnectThreshold = TypedDict(
    'ConnectThreshold', {
        'Comparison': Optional[str],
        'ThresholdValue': Optional[float],
    }
)


ConnectHistoricalMetric = TypedDict(
    'ConnectHistoricalMetric', {
        'HistoricalMetricName': Optional[str],
        'Threshold': Optional[ConnectThreshold],
        'Statistic': Optional[str],
        'Unit': Optional[str],
    }
)


ConnectHistoricalMetricData = TypedDict(
    'ConnectHistoricalMetricData', {
        'HistoricalMetric': Optional[ConnectHistoricalMetric],
        'Value': Optional[float],
    }
)


ConnectHistoricalMetricResult = TypedDict(
    'ConnectHistoricalMetricResult', {
        'Dimensions': Optional[ConnectDimensions],
        'HistoricalMetricDataCollections': Optional[List[ConnectHistoricalMetricData]],
    }
)


ConnectGetMetricDataResponse = TypedDict(
    'ConnectGetMetricDataResponse', {
        'NextToken': Optional[str],
        'HistoricalMetricResults': Optional[List[ConnectHistoricalMetricResult]],
    }
)


ConnectRoutingProfileSummary = TypedDict(
    'ConnectRoutingProfileSummary', {
        'RoutingProfileId': Optional[str],
        'ARN': Optional[str],
        'RoutingProfileName': Optional[str],
    }
)


ConnectListRoutingProfilesResponse = TypedDict(
    'ConnectListRoutingProfilesResponse', {
        'RoutingProfileSummaryList': Optional[List[ConnectRoutingProfileSummary]],
        'NextToken': Optional[str],
    }
)


ConnectSecurityProfileSummary = TypedDict(
    'ConnectSecurityProfileSummary', {
        'SecurityProfileId': Optional[str],
        'ARN': Optional[str],
        'SecurityProfileName': Optional[str],
    }
)


ConnectListSecurityProfilesResponse = TypedDict(
    'ConnectListSecurityProfilesResponse', {
        'SecurityProfileSummaryList': Optional[List[ConnectSecurityProfileSummary]],
        'NextToken': Optional[str],
    }
)


ConnectListUserHierarchyGroupsResponse = TypedDict(
    'ConnectListUserHierarchyGroupsResponse', {
        'HierarchyGroupSummaryList': Optional[List[ConnectHierarchyGroupSummary]],
        'NextToken': Optional[str],
    }
)


ConnectUserSummary = TypedDict(
    'ConnectUserSummary', {
        'UserId': Optional[str],
        'ARN': Optional[str],
        'AgentUsername': Optional[str],
    }
)


ConnectListUsersResponse = TypedDict(
    'ConnectListUsersResponse', {
        'UserSummaryList': Optional[List[ConnectUserSummary]],
        'NextToken': Optional[str],
    }
)


ConnectStartOutboundVoiceContactResponse = TypedDict(
    'ConnectStartOutboundVoiceContactResponse', {
        'ContactId': Optional[str],
    }
)


ConnectStopContactResponse = TypedDict(
    'ConnectStopContactResponse', {
    }
)


ConnectUpdateContactAttributesResponse = TypedDict(
    'ConnectUpdateContactAttributesResponse', {
    }
)


class CostandUsageReportService(BaseClient):
    def delete_report_definition(self, *,
        ReportName: str = ...
    ) -> CostandUsageReportServiceDeleteReportDefinitionResponse: ...

    def describe_report_definitions(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> CostandUsageReportServiceDescribeReportDefinitionsResponse: ...

    def put_report_definition(self, *,
        ReportDefinition: CostandUsageReportServiceReportDefinition
    ) -> CostandUsageReportServicePutReportDefinitionResponse: ...


CostandUsageReportServiceDeleteReportDefinitionResponse = TypedDict(
    'CostandUsageReportServiceDeleteReportDefinitionResponse', {
        'DeleteResponseMessage': Optional[str],
    }
)


CostandUsageReportServiceReportDefinition = TypedDict(
    'CostandUsageReportServiceReportDefinition', {
        'ReportName': str,
        'TimeUnit': str,
        'ReportFormat': str,
        'CompressionFormat': str,
        'SchemaElementList': List[str],
        'S3Bucket': str,
        'S3Prefix': str,
        'AWSRegion': str,
        'AdditionalArtifactList': Optional[List[str]],
        'RefreshClosedReports': Optional[bool],
        'ReportVersioning': Optional[str],
    }
)


CostandUsageReportServiceDescribeReportDefinitionsResponse = TypedDict(
    'CostandUsageReportServiceDescribeReportDefinitionsResponse', {
        'ReportDefinitionList': Optional[List[CostandUsageReportServiceReportDefinition]],
        'GenericString': Optional[str],
    }
)


CostandUsageReportServicePutReportDefinitionResponse = TypedDict(
    'CostandUsageReportServicePutReportDefinitionResponse', {
    }
)


class DataPipeline(BaseClient):
    def activate_pipeline(self, *,
        pipelineId: str,
        parameterValues: List[DataPipelineParameterValue] = ...,
        startTimestamp: datetime.datetime = ...
    ) -> DataPipelineActivatePipelineOutput: ...

    def add_tags(self, *,
        pipelineId: str,
        tags: List[DataPipelineTag]
    ) -> DataPipelineAddTagsOutput: ...

    def create_pipeline(self, *,
        name: str,
        uniqueId: str,
        description: str = ...,
        tags: List[DataPipelineTag] = ...
    ) -> DataPipelineCreatePipelineOutput: ...

    def deactivate_pipeline(self, *,
        pipelineId: str,
        cancelActive: bool = ...
    ) -> DataPipelineDeactivatePipelineOutput: ...

    def delete_pipeline(self, *,
        pipelineId: str
    ): ...

    def describe_objects(self, *,
        pipelineId: str,
        objectIds: List[str],
        evaluateExpressions: bool = ...,
        marker: str = ...
    ) -> DataPipelineDescribeObjectsOutput: ...

    def describe_pipelines(self, *,
        pipelineIds: List[str]
    ) -> DataPipelineDescribePipelinesOutput: ...

    def evaluate_expression(self, *,
        pipelineId: str,
        objectId: str,
        expression: str
    ) -> DataPipelineEvaluateExpressionOutput: ...

    def get_pipeline_definition(self, *,
        pipelineId: str,
        version: str = ...
    ) -> DataPipelineGetPipelineDefinitionOutput: ...

    def list_pipelines(self, *,
        marker: str = ...
    ) -> DataPipelineListPipelinesOutput: ...

    def poll_for_task(self, *,
        workerGroup: str,
        hostname: str = ...,
        instanceIdentity: DataPipelineInstanceIdentity = ...
    ) -> DataPipelinePollForTaskOutput: ...

    def put_pipeline_definition(self, *,
        pipelineId: str,
        pipelineObjects: List[DataPipelinePipelineObject],
        parameterObjects: List[DataPipelineParameterObject] = ...,
        parameterValues: List[DataPipelineParameterValue] = ...
    ) -> DataPipelinePutPipelineDefinitionOutput: ...

    def query_objects(self, *,
        pipelineId: str,
        sphere: str,
        query: DataPipelineQuery = ...,
        marker: str = ...,
        limit: int = ...
    ) -> DataPipelineQueryObjectsOutput: ...

    def remove_tags(self, *,
        pipelineId: str,
        tagKeys: List[str]
    ) -> DataPipelineRemoveTagsOutput: ...

    def report_task_progress(self, *,
        taskId: str,
        fields: List[DataPipelineField] = ...
    ) -> DataPipelineReportTaskProgressOutput: ...

    def report_task_runner_heartbeat(self, *,
        taskrunnerId: str,
        workerGroup: str = ...,
        hostname: str = ...
    ) -> DataPipelineReportTaskRunnerHeartbeatOutput: ...

    def set_status(self, *,
        pipelineId: str,
        objectIds: List[str],
        status: str
    ): ...

    def set_task_status(self, *,
        taskId: str,
        taskStatus: str,
        errorId: str = ...,
        errorMessage: str = ...,
        errorStackTrace: str = ...
    ) -> DataPipelineSetTaskStatusOutput: ...

    def validate_pipeline_definition(self, *,
        pipelineId: str,
        pipelineObjects: List[DataPipelinePipelineObject],
        parameterObjects: List[DataPipelineParameterObject] = ...,
        parameterValues: List[DataPipelineParameterValue] = ...
    ) -> DataPipelineValidatePipelineDefinitionOutput: ...


DataPipelineParameterValue = TypedDict(
    'DataPipelineParameterValue', {
        'fieldNameString': str,
        'fieldStringValue': str,
    }
)


DataPipelineActivatePipelineOutput = TypedDict(
    'DataPipelineActivatePipelineOutput', {
    }
)


DataPipelineTag = TypedDict(
    'DataPipelineTag', {
        'tagKey': str,
        'tagValue': str,
    }
)


DataPipelineAddTagsOutput = TypedDict(
    'DataPipelineAddTagsOutput', {
    }
)


DataPipelineCreatePipelineOutput = TypedDict(
    'DataPipelineCreatePipelineOutput', {
        'id': str,
    }
)


DataPipelineDeactivatePipelineOutput = TypedDict(
    'DataPipelineDeactivatePipelineOutput', {
    }
)


DataPipelineField = TypedDict(
    'DataPipelineField', {
        'fieldNameString': str,
        'fieldStringValue': Optional[str],
        'fieldNameString': Optional[str],
    }
)


DataPipelinePipelineObject = TypedDict(
    'DataPipelinePipelineObject', {
        'id': str,
        'id': str,
        'fieldList': List[DataPipelineField],
    }
)


DataPipelineDescribeObjectsOutput = TypedDict(
    'DataPipelineDescribeObjectsOutput', {
        'PipelineObjectList': List[DataPipelinePipelineObject],
        'string': Optional[str],
        'boolean': Optional[bool],
    }
)


DataPipelinePipelineDescription = TypedDict(
    'DataPipelinePipelineDescription', {
        'id': str,
        'id': str,
        'fieldList': List[DataPipelineField],
        'string': Optional[str],
        'tagList': Optional[List[DataPipelineTag]],
    }
)


DataPipelineDescribePipelinesOutput = TypedDict(
    'DataPipelineDescribePipelinesOutput', {
        'PipelineDescriptionList': List[DataPipelinePipelineDescription],
    }
)


DataPipelineEvaluateExpressionOutput = TypedDict(
    'DataPipelineEvaluateExpressionOutput', {
        'longString': str,
    }
)


DataPipelineParameterAttribute = TypedDict(
    'DataPipelineParameterAttribute', {
        'attributeNameString': str,
        'attributeValueString': str,
    }
)


DataPipelineParameterObject = TypedDict(
    'DataPipelineParameterObject', {
        'fieldNameString': str,
        'ParameterAttributeList': List[DataPipelineParameterAttribute],
    }
)


DataPipelineGetPipelineDefinitionOutput = TypedDict(
    'DataPipelineGetPipelineDefinitionOutput', {
        'PipelineObjectList': Optional[List[DataPipelinePipelineObject]],
        'ParameterObjectList': Optional[List[DataPipelineParameterObject]],
        'ParameterValueList': Optional[List[DataPipelineParameterValue]],
    }
)


DataPipelinePipelineIdName = TypedDict(
    'DataPipelinePipelineIdName', {
        'id': Optional[str],
        'id': Optional[str],
    }
)


DataPipelineListPipelinesOutput = TypedDict(
    'DataPipelineListPipelinesOutput', {
        'pipelineList': List[DataPipelinePipelineIdName],
        'string': Optional[str],
        'boolean': Optional[bool],
    }
)


DataPipelineInstanceIdentity = TypedDict(
    'DataPipelineInstanceIdentity', {
        'string': Optional[str],
        'string': Optional[str],
    }
)


DataPipelineTaskObject = TypedDict(
    'DataPipelineTaskObject', {
        'taskId': Optional[str],
        'id': Optional[str],
        'id': Optional[str],
        'PipelineObjectMap': Optional[Dict[str, DataPipelinePipelineObject]],
    }
)


DataPipelinePollForTaskOutput = TypedDict(
    'DataPipelinePollForTaskOutput', {
        'TaskObject': Optional[DataPipelineTaskObject],
    }
)


DataPipelineValidationError = TypedDict(
    'DataPipelineValidationError', {
        'id': Optional[str],
        'validationMessages': Optional[List[str]],
    }
)


DataPipelineValidationWarning = TypedDict(
    'DataPipelineValidationWarning', {
        'id': Optional[str],
        'validationMessages': Optional[List[str]],
    }
)


DataPipelinePutPipelineDefinitionOutput = TypedDict(
    'DataPipelinePutPipelineDefinitionOutput', {
        'boolean': bool,
        'ValidationErrors': Optional[List[DataPipelineValidationError]],
        'ValidationWarnings': Optional[List[DataPipelineValidationWarning]],
    }
)


DataPipelineOperator = TypedDict(
    'DataPipelineOperator', {
        'OperatorType': Optional[str],
        'stringList': Optional[List[str]],
    }
)


DataPipelineSelector = TypedDict(
    'DataPipelineSelector', {
        'string': Optional[str],
        'Operator': Optional[DataPipelineOperator],
    }
)


DataPipelineQuery = TypedDict(
    'DataPipelineQuery', {
        'SelectorList': Optional[List[DataPipelineSelector]],
    }
)


DataPipelineQueryObjectsOutput = TypedDict(
    'DataPipelineQueryObjectsOutput', {
        'idList': Optional[List[str]],
        'string': Optional[str],
        'boolean': Optional[bool],
    }
)


DataPipelineRemoveTagsOutput = TypedDict(
    'DataPipelineRemoveTagsOutput', {
    }
)


DataPipelineReportTaskProgressOutput = TypedDict(
    'DataPipelineReportTaskProgressOutput', {
        'boolean': bool,
    }
)


DataPipelineReportTaskRunnerHeartbeatOutput = TypedDict(
    'DataPipelineReportTaskRunnerHeartbeatOutput', {
        'boolean': bool,
    }
)


DataPipelineSetTaskStatusOutput = TypedDict(
    'DataPipelineSetTaskStatusOutput', {
    }
)


DataPipelineValidatePipelineDefinitionOutput = TypedDict(
    'DataPipelineValidatePipelineDefinitionOutput', {
        'boolean': bool,
        'ValidationErrors': Optional[List[DataPipelineValidationError]],
        'ValidationWarnings': Optional[List[DataPipelineValidationWarning]],
    }
)


class DataSync(BaseClient):
    def cancel_task_execution(self, *,
        TaskExecutionArn: str
    ) -> DataSyncCancelTaskExecutionResponse: ...

    def create_agent(self, *,
        ActivationKey: str,
        AgentName: str = ...,
        Tags: List[DataSyncTagListEntry] = ...
    ) -> DataSyncCreateAgentResponse: ...

    def create_location_efs(self, *,
        Subdirectory: str,
        EfsFilesystemArn: str,
        Ec2Config: DataSyncEc2Config,
        Tags: List[DataSyncTagListEntry] = ...
    ) -> DataSyncCreateLocationEfsResponse: ...

    def create_location_nfs(self, *,
        Subdirectory: str,
        ServerHostname: str,
        OnPremConfig: DataSyncOnPremConfig,
        Tags: List[DataSyncTagListEntry] = ...
    ) -> DataSyncCreateLocationNfsResponse: ...

    def create_location_s3(self, *,
        Subdirectory: str,
        S3BucketArn: str,
        S3Config: DataSyncS3Config,
        Tags: List[DataSyncTagListEntry] = ...
    ) -> DataSyncCreateLocationS3Response: ...

    def create_task(self, *,
        SourceLocationArn: str,
        DestinationLocationArn: str,
        CloudWatchLogGroupArn: str = ...,
        Name: str = ...,
        Options: DataSyncOptions = ...,
        Tags: List[DataSyncTagListEntry] = ...
    ) -> DataSyncCreateTaskResponse: ...

    def delete_agent(self, *,
        AgentArn: str
    ) -> DataSyncDeleteAgentResponse: ...

    def delete_location(self, *,
        LocationArn: str
    ) -> DataSyncDeleteLocationResponse: ...

    def delete_task(self, *,
        TaskArn: str
    ) -> DataSyncDeleteTaskResponse: ...

    def describe_agent(self, *,
        AgentArn: str
    ) -> DataSyncDescribeAgentResponse: ...

    def describe_location_efs(self, *,
        LocationArn: str
    ) -> DataSyncDescribeLocationEfsResponse: ...

    def describe_location_nfs(self, *,
        LocationArn: str
    ) -> DataSyncDescribeLocationNfsResponse: ...

    def describe_location_s3(self, *,
        LocationArn: str
    ) -> DataSyncDescribeLocationS3Response: ...

    def describe_task(self, *,
        TaskArn: str
    ) -> DataSyncDescribeTaskResponse: ...

    def describe_task_execution(self, *,
        TaskExecutionArn: str
    ) -> DataSyncDescribeTaskExecutionResponse: ...

    def list_agents(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> DataSyncListAgentsResponse: ...

    def list_locations(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> DataSyncListLocationsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> DataSyncListTagsForResourceResponse: ...

    def list_task_executions(self, *,
        TaskArn: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> DataSyncListTaskExecutionsResponse: ...

    def list_tasks(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> DataSyncListTasksResponse: ...

    def start_task_execution(self, *,
        TaskArn: str,
        OverrideOptions: DataSyncOptions = ...
    ) -> DataSyncStartTaskExecutionResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: List[DataSyncTagListEntry]
    ) -> DataSyncTagResourceResponse: ...

    def untag_resource(self, *,
        ResourceArn: str,
        Keys: List[str]
    ) -> DataSyncUntagResourceResponse: ...

    def update_agent(self, *,
        AgentArn: str,
        Name: str = ...
    ) -> DataSyncUpdateAgentResponse: ...

    def update_task(self, *,
        TaskArn: str,
        Options: DataSyncOptions = ...,
        Name: str = ...
    ) -> DataSyncUpdateTaskResponse: ...


DataSyncCancelTaskExecutionResponse = TypedDict(
    'DataSyncCancelTaskExecutionResponse', {
    }
)


DataSyncTagListEntry = TypedDict(
    'DataSyncTagListEntry', {
        'TagKey': Optional[str],
        'TagValue': Optional[str],
    }
)


DataSyncCreateAgentResponse = TypedDict(
    'DataSyncCreateAgentResponse', {
        'AgentArn': Optional[str],
    }
)


DataSyncEc2Config = TypedDict(
    'DataSyncEc2Config', {
        'Ec2SubnetArn': str,
        'Ec2SecurityGroupArnList': List[str],
    }
)


DataSyncCreateLocationEfsResponse = TypedDict(
    'DataSyncCreateLocationEfsResponse', {
        'LocationArn': Optional[str],
    }
)


DataSyncOnPremConfig = TypedDict(
    'DataSyncOnPremConfig', {
        'AgentArnList': List[str],
    }
)


DataSyncCreateLocationNfsResponse = TypedDict(
    'DataSyncCreateLocationNfsResponse', {
        'LocationArn': Optional[str],
    }
)


DataSyncS3Config = TypedDict(
    'DataSyncS3Config', {
        'IamRoleArn': str,
    }
)


DataSyncCreateLocationS3Response = TypedDict(
    'DataSyncCreateLocationS3Response', {
        'LocationArn': Optional[str],
    }
)


DataSyncOptions = TypedDict(
    'DataSyncOptions', {
        'VerifyMode': Optional[str],
        'Atime': Optional[str],
        'Mtime': Optional[str],
        'Uid': Optional[str],
        'Gid': Optional[str],
        'PreserveDeletedFiles': Optional[str],
        'PreserveDevices': Optional[str],
        'PosixPermissions': Optional[str],
        'BytesPerSecond': Optional[int],
    }
)


DataSyncCreateTaskResponse = TypedDict(
    'DataSyncCreateTaskResponse', {
        'TaskArn': Optional[str],
    }
)


DataSyncDeleteAgentResponse = TypedDict(
    'DataSyncDeleteAgentResponse', {
    }
)


DataSyncDeleteLocationResponse = TypedDict(
    'DataSyncDeleteLocationResponse', {
    }
)


DataSyncDeleteTaskResponse = TypedDict(
    'DataSyncDeleteTaskResponse', {
    }
)


DataSyncDescribeAgentResponse = TypedDict(
    'DataSyncDescribeAgentResponse', {
        'AgentArn': Optional[str],
        'TagValue': Optional[str],
        'AgentStatus': Optional[str],
        'Time': Optional[datetime.datetime],
        'Time': Optional[datetime.datetime],
    }
)


DataSyncDescribeLocationEfsResponse = TypedDict(
    'DataSyncDescribeLocationEfsResponse', {
        'LocationArn': Optional[str],
        'LocationUri': Optional[str],
        'Ec2Config': Optional[DataSyncEc2Config],
        'Time': Optional[datetime.datetime],
    }
)


DataSyncDescribeLocationNfsResponse = TypedDict(
    'DataSyncDescribeLocationNfsResponse', {
        'LocationArn': Optional[str],
        'LocationUri': Optional[str],
        'OnPremConfig': Optional[DataSyncOnPremConfig],
        'Time': Optional[datetime.datetime],
    }
)


DataSyncDescribeLocationS3Response = TypedDict(
    'DataSyncDescribeLocationS3Response', {
        'LocationArn': Optional[str],
        'LocationUri': Optional[str],
        'S3Config': Optional[DataSyncS3Config],
        'Time': Optional[datetime.datetime],
    }
)


DataSyncDescribeTaskResponse = TypedDict(
    'DataSyncDescribeTaskResponse', {
        'TaskArn': Optional[str],
        'TaskStatus': Optional[str],
        'TagValue': Optional[str],
        'TaskExecutionArn': Optional[str],
        'LocationArn': Optional[str],
        'LocationArn': Optional[str],
        'LogGroupArn': Optional[str],
        'Options': Optional[DataSyncOptions],
        'string': Optional[str],
        'string': Optional[str],
        'Time': Optional[datetime.datetime],
    }
)


DataSyncTaskExecutionResultDetail = TypedDict(
    'DataSyncTaskExecutionResultDetail', {
        'Duration': Optional[int],
        'PhaseStatus': Optional[str],
        'Duration': Optional[int],
        'PhaseStatus': Optional[str],
        'Duration': Optional[int],
        'PhaseStatus': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
    }
)


DataSyncDescribeTaskExecutionResponse = TypedDict(
    'DataSyncDescribeTaskExecutionResponse', {
        'TaskExecutionArn': Optional[str],
        'TaskExecutionStatus': Optional[str],
        'Options': Optional[DataSyncOptions],
        'Time': Optional[datetime.datetime],
        'long': Optional[int],
        'long': Optional[int],
        'long': Optional[int],
        'long': Optional[int],
        'long': Optional[int],
        'TaskExecutionResultDetail': Optional[DataSyncTaskExecutionResultDetail],
    }
)


DataSyncAgentListEntry = TypedDict(
    'DataSyncAgentListEntry', {
        'AgentArn': Optional[str],
        'TagValue': Optional[str],
        'AgentStatus': Optional[str],
    }
)


DataSyncListAgentsResponse = TypedDict(
    'DataSyncListAgentsResponse', {
        'AgentList': Optional[List[DataSyncAgentListEntry]],
        'NextToken': Optional[str],
    }
)


DataSyncLocationListEntry = TypedDict(
    'DataSyncLocationListEntry', {
        'LocationArn': Optional[str],
        'LocationUri': Optional[str],
    }
)


DataSyncListLocationsResponse = TypedDict(
    'DataSyncListLocationsResponse', {
        'LocationList': Optional[List[DataSyncLocationListEntry]],
        'NextToken': Optional[str],
    }
)


DataSyncListTagsForResourceResponse = TypedDict(
    'DataSyncListTagsForResourceResponse', {
        'TagList': Optional[List[DataSyncTagListEntry]],
        'NextToken': Optional[str],
    }
)


DataSyncTaskExecutionListEntry = TypedDict(
    'DataSyncTaskExecutionListEntry', {
        'TaskExecutionArn': Optional[str],
        'TaskExecutionStatus': Optional[str],
    }
)


DataSyncListTaskExecutionsResponse = TypedDict(
    'DataSyncListTaskExecutionsResponse', {
        'TaskExecutionList': Optional[List[DataSyncTaskExecutionListEntry]],
        'NextToken': Optional[str],
    }
)


DataSyncTaskListEntry = TypedDict(
    'DataSyncTaskListEntry', {
        'TaskArn': Optional[str],
        'TaskStatus': Optional[str],
        'TagValue': Optional[str],
    }
)


DataSyncListTasksResponse = TypedDict(
    'DataSyncListTasksResponse', {
        'TaskList': Optional[List[DataSyncTaskListEntry]],
        'NextToken': Optional[str],
    }
)


DataSyncStartTaskExecutionResponse = TypedDict(
    'DataSyncStartTaskExecutionResponse', {
        'TaskExecutionArn': Optional[str],
    }
)


DataSyncTagResourceResponse = TypedDict(
    'DataSyncTagResourceResponse', {
    }
)


DataSyncUntagResourceResponse = TypedDict(
    'DataSyncUntagResourceResponse', {
    }
)


DataSyncUpdateAgentResponse = TypedDict(
    'DataSyncUpdateAgentResponse', {
    }
)


DataSyncUpdateTaskResponse = TypedDict(
    'DataSyncUpdateTaskResponse', {
    }
)


class DAX(BaseClient):
    def create_cluster(self, *,
        ClusterName: str,
        NodeType: str,
        ReplicationFactor: int,
        IamRoleArn: str,
        Description: str = ...,
        AvailabilityZones: List[str] = ...,
        SubnetGroupName: str = ...,
        SecurityGroupIds: List[str] = ...,
        PreferredMaintenanceWindow: str = ...,
        NotificationTopicArn: str = ...,
        ParameterGroupName: str = ...,
        Tags: List[DAXTag] = ...,
        SSESpecification: DAXSSESpecification = ...
    ) -> DAXCreateClusterResponse: ...

    def create_parameter_group(self, *,
        ParameterGroupName: str,
        Description: str = ...
    ) -> DAXCreateParameterGroupResponse: ...

    def create_subnet_group(self, *,
        SubnetGroupName: str,
        SubnetIds: List[str],
        Description: str = ...
    ) -> DAXCreateSubnetGroupResponse: ...

    def decrease_replication_factor(self, *,
        ClusterName: str,
        NewReplicationFactor: int,
        AvailabilityZones: List[str] = ...,
        NodeIdsToRemove: List[str] = ...
    ) -> DAXDecreaseReplicationFactorResponse: ...

    def delete_cluster(self, *,
        ClusterName: str
    ) -> DAXDeleteClusterResponse: ...

    def delete_parameter_group(self, *,
        ParameterGroupName: str
    ) -> DAXDeleteParameterGroupResponse: ...

    def delete_subnet_group(self, *,
        SubnetGroupName: str
    ) -> DAXDeleteSubnetGroupResponse: ...

    def describe_clusters(self, *,
        ClusterNames: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> DAXDescribeClustersResponse: ...

    def describe_default_parameters(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> DAXDescribeDefaultParametersResponse: ...

    def describe_events(self, *,
        SourceName: str = ...,
        SourceType: str = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        Duration: int = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> DAXDescribeEventsResponse: ...

    def describe_parameter_groups(self, *,
        ParameterGroupNames: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> DAXDescribeParameterGroupsResponse: ...

    def describe_parameters(self, *,
        ParameterGroupName: str,
        Source: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> DAXDescribeParametersResponse: ...

    def describe_subnet_groups(self, *,
        SubnetGroupNames: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> DAXDescribeSubnetGroupsResponse: ...

    def increase_replication_factor(self, *,
        ClusterName: str,
        NewReplicationFactor: int,
        AvailabilityZones: List[str] = ...
    ) -> DAXIncreaseReplicationFactorResponse: ...

    def list_tags(self, *,
        ResourceName: str,
        NextToken: str = ...
    ) -> DAXListTagsResponse: ...

    def reboot_node(self, *,
        ClusterName: str,
        NodeId: str
    ) -> DAXRebootNodeResponse: ...

    def tag_resource(self, *,
        ResourceName: str,
        Tags: List[DAXTag]
    ) -> DAXTagResourceResponse: ...

    def untag_resource(self, *,
        ResourceName: str,
        TagKeys: List[str]
    ) -> DAXUntagResourceResponse: ...

    def update_cluster(self, *,
        ClusterName: str,
        Description: str = ...,
        PreferredMaintenanceWindow: str = ...,
        NotificationTopicArn: str = ...,
        NotificationTopicStatus: str = ...,
        ParameterGroupName: str = ...,
        SecurityGroupIds: List[str] = ...
    ) -> DAXUpdateClusterResponse: ...

    def update_parameter_group(self, *,
        ParameterGroupName: str,
        ParameterNameValues: List[DAXParameterNameValue]
    ) -> DAXUpdateParameterGroupResponse: ...

    def update_subnet_group(self, *,
        SubnetGroupName: str,
        Description: str = ...,
        SubnetIds: List[str] = ...
    ) -> DAXUpdateSubnetGroupResponse: ...


DAXTag = TypedDict(
    'DAXTag', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


DAXSSESpecification = TypedDict(
    'DAXSSESpecification', {
        'SSEEnabled': bool,
    }
)


DAXEndpoint = TypedDict(
    'DAXEndpoint', {
        'String': Optional[str],
        'Integer': Optional[int],
    }
)


DAXNode = TypedDict(
    'DAXNode', {
        'String': Optional[str],
        'Endpoint': Optional[DAXEndpoint],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


DAXNotificationConfiguration = TypedDict(
    'DAXNotificationConfiguration', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


DAXSecurityGroupMembership = TypedDict(
    'DAXSecurityGroupMembership', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


DAXParameterGroupStatus = TypedDict(
    'DAXParameterGroupStatus', {
        'String': Optional[str],
        'String': Optional[str],
        'NodeIdentifierList': Optional[List[str]],
    }
)


DAXSSEDescription = TypedDict(
    'DAXSSEDescription', {
        'SSEStatus': Optional[str],
    }
)


DAXCluster = TypedDict(
    'DAXCluster', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'Endpoint': Optional[DAXEndpoint],
        'NodeIdentifierList': Optional[List[str]],
        'NodeList': Optional[List[DAXNode]],
        'String': Optional[str],
        'NotificationConfiguration': Optional[DAXNotificationConfiguration],
        'String': Optional[str],
        'SecurityGroupMembershipList': Optional[List[DAXSecurityGroupMembership]],
        'String': Optional[str],
        'ParameterGroupStatus': Optional[DAXParameterGroupStatus],
        'SSEDescription': Optional[DAXSSEDescription],
    }
)


DAXCreateClusterResponse = TypedDict(
    'DAXCreateClusterResponse', {
        'Cluster': Optional[DAXCluster],
    }
)


DAXParameterGroup = TypedDict(
    'DAXParameterGroup', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


DAXCreateParameterGroupResponse = TypedDict(
    'DAXCreateParameterGroupResponse', {
        'ParameterGroup': Optional[DAXParameterGroup],
    }
)


DAXSubnet = TypedDict(
    'DAXSubnet', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


DAXSubnetGroup = TypedDict(
    'DAXSubnetGroup', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'SubnetList': Optional[List[DAXSubnet]],
    }
)


DAXCreateSubnetGroupResponse = TypedDict(
    'DAXCreateSubnetGroupResponse', {
        'SubnetGroup': Optional[DAXSubnetGroup],
    }
)


DAXDecreaseReplicationFactorResponse = TypedDict(
    'DAXDecreaseReplicationFactorResponse', {
        'Cluster': Optional[DAXCluster],
    }
)


DAXDeleteClusterResponse = TypedDict(
    'DAXDeleteClusterResponse', {
        'Cluster': Optional[DAXCluster],
    }
)


DAXDeleteParameterGroupResponse = TypedDict(
    'DAXDeleteParameterGroupResponse', {
        'String': Optional[str],
    }
)


DAXDeleteSubnetGroupResponse = TypedDict(
    'DAXDeleteSubnetGroupResponse', {
        'String': Optional[str],
    }
)


DAXDescribeClustersResponse = TypedDict(
    'DAXDescribeClustersResponse', {
        'String': Optional[str],
        'ClusterList': Optional[List[DAXCluster]],
    }
)


DAXNodeTypeSpecificValue = TypedDict(
    'DAXNodeTypeSpecificValue', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


DAXParameter = TypedDict(
    'DAXParameter', {
        'String': Optional[str],
        'ParameterType': Optional[str],
        'String': Optional[str],
        'NodeTypeSpecificValueList': Optional[List[DAXNodeTypeSpecificValue]],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'IsModifiable': Optional[str],
        'ChangeType': Optional[str],
    }
)


DAXDescribeDefaultParametersResponse = TypedDict(
    'DAXDescribeDefaultParametersResponse', {
        'String': Optional[str],
        'ParameterList': Optional[List[DAXParameter]],
    }
)


DAXEvent = TypedDict(
    'DAXEvent', {
        'String': Optional[str],
        'SourceType': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
    }
)


DAXDescribeEventsResponse = TypedDict(
    'DAXDescribeEventsResponse', {
        'String': Optional[str],
        'EventList': Optional[List[DAXEvent]],
    }
)


DAXDescribeParameterGroupsResponse = TypedDict(
    'DAXDescribeParameterGroupsResponse', {
        'String': Optional[str],
        'ParameterGroupList': Optional[List[DAXParameterGroup]],
    }
)


DAXDescribeParametersResponse = TypedDict(
    'DAXDescribeParametersResponse', {
        'String': Optional[str],
        'ParameterList': Optional[List[DAXParameter]],
    }
)


DAXDescribeSubnetGroupsResponse = TypedDict(
    'DAXDescribeSubnetGroupsResponse', {
        'String': Optional[str],
        'SubnetGroupList': Optional[List[DAXSubnetGroup]],
    }
)


DAXIncreaseReplicationFactorResponse = TypedDict(
    'DAXIncreaseReplicationFactorResponse', {
        'Cluster': Optional[DAXCluster],
    }
)


DAXListTagsResponse = TypedDict(
    'DAXListTagsResponse', {
        'TagList': Optional[List[DAXTag]],
        'String': Optional[str],
    }
)


DAXRebootNodeResponse = TypedDict(
    'DAXRebootNodeResponse', {
        'Cluster': Optional[DAXCluster],
    }
)


DAXTagResourceResponse = TypedDict(
    'DAXTagResourceResponse', {
        'TagList': Optional[List[DAXTag]],
    }
)


DAXUntagResourceResponse = TypedDict(
    'DAXUntagResourceResponse', {
        'TagList': Optional[List[DAXTag]],
    }
)


DAXUpdateClusterResponse = TypedDict(
    'DAXUpdateClusterResponse', {
        'Cluster': Optional[DAXCluster],
    }
)


DAXParameterNameValue = TypedDict(
    'DAXParameterNameValue', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


DAXUpdateParameterGroupResponse = TypedDict(
    'DAXUpdateParameterGroupResponse', {
        'ParameterGroup': Optional[DAXParameterGroup],
    }
)


DAXUpdateSubnetGroupResponse = TypedDict(
    'DAXUpdateSubnetGroupResponse', {
        'SubnetGroup': Optional[DAXSubnetGroup],
    }
)


class DeviceFarm(BaseClient):
    def create_device_pool(self, *,
        projectArn: str,
        name: str,
        rules: List[DeviceFarmRule],
        description: str = ...,
        maxDevices: int = ...
    ) -> DeviceFarmCreateDevicePoolResult: ...

    def create_instance_profile(self, *,
        name: str,
        description: str = ...,
        packageCleanup: bool = ...,
        excludeAppPackagesFromCleanup: List[str] = ...,
        rebootAfterUse: bool = ...
    ) -> DeviceFarmCreateInstanceProfileResult: ...

    def create_network_profile(self, *,
        projectArn: str,
        name: str,
        description: str = ...,
        type: str = ...,
        uplinkBandwidthBits: int = ...,
        downlinkBandwidthBits: int = ...,
        uplinkDelayMs: int = ...,
        downlinkDelayMs: int = ...,
        uplinkJitterMs: int = ...,
        downlinkJitterMs: int = ...,
        uplinkLossPercent: int = ...,
        downlinkLossPercent: int = ...
    ) -> DeviceFarmCreateNetworkProfileResult: ...

    def create_project(self, *,
        name: str,
        defaultJobTimeoutMinutes: int = ...
    ) -> DeviceFarmCreateProjectResult: ...

    def create_remote_access_session(self, *,
        projectArn: str,
        deviceArn: str,
        instanceArn: str = ...,
        sshPublicKey: str = ...,
        remoteDebugEnabled: bool = ...,
        remoteRecordEnabled: bool = ...,
        remoteRecordAppArn: str = ...,
        name: str = ...,
        clientId: str = ...,
        configuration: DeviceFarmCreateRemoteAccessSessionConfiguration = ...,
        interactionMode: str = ...,
        skipAppResign: bool = ...
    ) -> DeviceFarmCreateRemoteAccessSessionResult: ...

    def create_upload(self, *,
        projectArn: str,
        name: str,
        type: str,
        contentType: str = ...
    ) -> DeviceFarmCreateUploadResult: ...

    def create_vpce_configuration(self, *,
        vpceConfigurationName: str,
        vpceServiceName: str,
        serviceDnsName: str,
        vpceConfigurationDescription: str = ...
    ) -> DeviceFarmCreateVPCEConfigurationResult: ...

    def delete_device_pool(self, *,
        arn: str
    ) -> DeviceFarmDeleteDevicePoolResult: ...

    def delete_instance_profile(self, *,
        arn: str
    ) -> DeviceFarmDeleteInstanceProfileResult: ...

    def delete_network_profile(self, *,
        arn: str
    ) -> DeviceFarmDeleteNetworkProfileResult: ...

    def delete_project(self, *,
        arn: str
    ) -> DeviceFarmDeleteProjectResult: ...

    def delete_remote_access_session(self, *,
        arn: str
    ) -> DeviceFarmDeleteRemoteAccessSessionResult: ...

    def delete_run(self, *,
        arn: str
    ) -> DeviceFarmDeleteRunResult: ...

    def delete_upload(self, *,
        arn: str
    ) -> DeviceFarmDeleteUploadResult: ...

    def delete_vpce_configuration(self, *,
        arn: str
    ) -> DeviceFarmDeleteVPCEConfigurationResult: ...

    def get_account_settings(self) -> DeviceFarmGetAccountSettingsResult: ...

    def get_device(self, *,
        arn: str
    ) -> DeviceFarmGetDeviceResult: ...

    def get_device_instance(self, *,
        arn: str
    ) -> DeviceFarmGetDeviceInstanceResult: ...

    def get_device_pool(self, *,
        arn: str
    ) -> DeviceFarmGetDevicePoolResult: ...

    def get_device_pool_compatibility(self, *,
        devicePoolArn: str,
        appArn: str = ...,
        testType: str = ...,
        test: DeviceFarmScheduleRunTest = ...,
        configuration: DeviceFarmScheduleRunConfiguration = ...
    ) -> DeviceFarmGetDevicePoolCompatibilityResult: ...

    def get_instance_profile(self, *,
        arn: str
    ) -> DeviceFarmGetInstanceProfileResult: ...

    def get_job(self, *,
        arn: str
    ) -> DeviceFarmGetJobResult: ...

    def get_network_profile(self, *,
        arn: str
    ) -> DeviceFarmGetNetworkProfileResult: ...

    def get_offering_status(self, *,
        nextToken: str = ...
    ) -> DeviceFarmGetOfferingStatusResult: ...

    def get_project(self, *,
        arn: str
    ) -> DeviceFarmGetProjectResult: ...

    def get_remote_access_session(self, *,
        arn: str
    ) -> DeviceFarmGetRemoteAccessSessionResult: ...

    def get_run(self, *,
        arn: str
    ) -> DeviceFarmGetRunResult: ...

    def get_suite(self, *,
        arn: str
    ) -> DeviceFarmGetSuiteResult: ...

    def get_test(self, *,
        arn: str
    ) -> DeviceFarmGetTestResult: ...

    def get_upload(self, *,
        arn: str
    ) -> DeviceFarmGetUploadResult: ...

    def get_vpce_configuration(self, *,
        arn: str
    ) -> DeviceFarmGetVPCEConfigurationResult: ...

    def install_to_remote_access_session(self, *,
        remoteAccessSessionArn: str,
        appArn: str
    ) -> DeviceFarmInstallToRemoteAccessSessionResult: ...

    def list_artifacts(self, *,
        arn: str,
        type: str,
        nextToken: str = ...
    ) -> DeviceFarmListArtifactsResult: ...

    def list_device_instances(self, *,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> DeviceFarmListDeviceInstancesResult: ...

    def list_device_pools(self, *,
        arn: str,
        type: str = ...,
        nextToken: str = ...
    ) -> DeviceFarmListDevicePoolsResult: ...

    def list_devices(self, *,
        arn: str = ...,
        nextToken: str = ...,
        filters: List[DeviceFarmDeviceFilter] = ...
    ) -> DeviceFarmListDevicesResult: ...

    def list_instance_profiles(self, *,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> DeviceFarmListInstanceProfilesResult: ...

    def list_jobs(self, *,
        arn: str,
        nextToken: str = ...
    ) -> DeviceFarmListJobsResult: ...

    def list_network_profiles(self, *,
        arn: str,
        type: str = ...,
        nextToken: str = ...
    ) -> DeviceFarmListNetworkProfilesResult: ...

    def list_offering_promotions(self, *,
        nextToken: str = ...
    ) -> DeviceFarmListOfferingPromotionsResult: ...

    def list_offering_transactions(self, *,
        nextToken: str = ...
    ) -> DeviceFarmListOfferingTransactionsResult: ...

    def list_offerings(self, *,
        nextToken: str = ...
    ) -> DeviceFarmListOfferingsResult: ...

    def list_projects(self, *,
        arn: str = ...,
        nextToken: str = ...
    ) -> DeviceFarmListProjectsResult: ...

    def list_remote_access_sessions(self, *,
        arn: str,
        nextToken: str = ...
    ) -> DeviceFarmListRemoteAccessSessionsResult: ...

    def list_runs(self, *,
        arn: str,
        nextToken: str = ...
    ) -> DeviceFarmListRunsResult: ...

    def list_samples(self, *,
        arn: str,
        nextToken: str = ...
    ) -> DeviceFarmListSamplesResult: ...

    def list_suites(self, *,
        arn: str,
        nextToken: str = ...
    ) -> DeviceFarmListSuitesResult: ...

    def list_tests(self, *,
        arn: str,
        nextToken: str = ...
    ) -> DeviceFarmListTestsResult: ...

    def list_unique_problems(self, *,
        arn: str,
        nextToken: str = ...
    ) -> DeviceFarmListUniqueProblemsResult: ...

    def list_uploads(self, *,
        arn: str,
        type: str = ...,
        nextToken: str = ...
    ) -> DeviceFarmListUploadsResult: ...

    def list_vpce_configurations(self, *,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> DeviceFarmListVPCEConfigurationsResult: ...

    def purchase_offering(self, *,
        offeringId: str = ...,
        quantity: int = ...,
        offeringPromotionId: str = ...
    ) -> DeviceFarmPurchaseOfferingResult: ...

    def renew_offering(self, *,
        offeringId: str = ...,
        quantity: int = ...
    ) -> DeviceFarmRenewOfferingResult: ...

    def schedule_run(self, *,
        projectArn: str,
        test: DeviceFarmScheduleRunTest,
        appArn: str = ...,
        devicePoolArn: str = ...,
        deviceSelectionConfiguration: DeviceFarmDeviceSelectionConfiguration = ...,
        name: str = ...,
        configuration: DeviceFarmScheduleRunConfiguration = ...,
        executionConfiguration: DeviceFarmExecutionConfiguration = ...
    ) -> DeviceFarmScheduleRunResult: ...

    def stop_job(self, *,
        arn: str
    ) -> DeviceFarmStopJobResult: ...

    def stop_remote_access_session(self, *,
        arn: str
    ) -> DeviceFarmStopRemoteAccessSessionResult: ...

    def stop_run(self, *,
        arn: str
    ) -> DeviceFarmStopRunResult: ...

    def update_device_instance(self, *,
        arn: str,
        profileArn: str = ...,
        labels: List[str] = ...
    ) -> DeviceFarmUpdateDeviceInstanceResult: ...

    def update_device_pool(self, *,
        arn: str,
        name: str = ...,
        description: str = ...,
        rules: List[DeviceFarmRule] = ...,
        maxDevices: int = ...,
        clearMaxDevices: bool = ...
    ) -> DeviceFarmUpdateDevicePoolResult: ...

    def update_instance_profile(self, *,
        arn: str,
        name: str = ...,
        description: str = ...,
        packageCleanup: bool = ...,
        excludeAppPackagesFromCleanup: List[str] = ...,
        rebootAfterUse: bool = ...
    ) -> DeviceFarmUpdateInstanceProfileResult: ...

    def update_network_profile(self, *,
        arn: str,
        name: str = ...,
        description: str = ...,
        type: str = ...,
        uplinkBandwidthBits: int = ...,
        downlinkBandwidthBits: int = ...,
        uplinkDelayMs: int = ...,
        downlinkDelayMs: int = ...,
        uplinkJitterMs: int = ...,
        downlinkJitterMs: int = ...,
        uplinkLossPercent: int = ...,
        downlinkLossPercent: int = ...
    ) -> DeviceFarmUpdateNetworkProfileResult: ...

    def update_project(self, *,
        arn: str,
        name: str = ...,
        defaultJobTimeoutMinutes: int = ...
    ) -> DeviceFarmUpdateProjectResult: ...

    def update_upload(self, *,
        arn: str,
        name: str = ...,
        contentType: str = ...,
        editContent: bool = ...
    ) -> DeviceFarmUpdateUploadResult: ...

    def update_vpce_configuration(self, *,
        arn: str,
        vpceConfigurationName: str = ...,
        vpceServiceName: str = ...,
        serviceDnsName: str = ...,
        vpceConfigurationDescription: str = ...
    ) -> DeviceFarmUpdateVPCEConfigurationResult: ...


DeviceFarmRule = TypedDict(
    'DeviceFarmRule', {
        'DeviceAttribute': Optional[str],
        'RuleOperator': Optional[str],
        'String': Optional[str],
    }
)


DeviceFarmDevicePool = TypedDict(
    'DeviceFarmDevicePool', {
        'AmazonResourceName': Optional[str],
        'Name': Optional[str],
        'Message': Optional[str],
        'DevicePoolType': Optional[str],
        'Rules': Optional[List[DeviceFarmRule]],
        'Integer': Optional[int],
    }
)


DeviceFarmCreateDevicePoolResult = TypedDict(
    'DeviceFarmCreateDevicePoolResult', {
        'DevicePool': Optional[DeviceFarmDevicePool],
    }
)


DeviceFarmInstanceProfile = TypedDict(
    'DeviceFarmInstanceProfile', {
        'AmazonResourceName': Optional[str],
        'Boolean': Optional[bool],
        'PackageIds': Optional[List[str]],
        'Boolean': Optional[bool],
        'Name': Optional[str],
        'Message': Optional[str],
    }
)


DeviceFarmCreateInstanceProfileResult = TypedDict(
    'DeviceFarmCreateInstanceProfileResult', {
        'InstanceProfile': Optional[DeviceFarmInstanceProfile],
    }
)


DeviceFarmNetworkProfile = TypedDict(
    'DeviceFarmNetworkProfile', {
        'AmazonResourceName': Optional[str],
        'Name': Optional[str],
        'Message': Optional[str],
        'NetworkProfileType': Optional[str],
        'Long': Optional[int],
        'Long': Optional[int],
        'Long': Optional[int],
        'Long': Optional[int],
        'Long': Optional[int],
        'Long': Optional[int],
        'PercentInteger': Optional[int],
        'PercentInteger': Optional[int],
    }
)


DeviceFarmCreateNetworkProfileResult = TypedDict(
    'DeviceFarmCreateNetworkProfileResult', {
        'NetworkProfile': Optional[DeviceFarmNetworkProfile],
    }
)


DeviceFarmProject = TypedDict(
    'DeviceFarmProject', {
        'AmazonResourceName': Optional[str],
        'Name': Optional[str],
        'JobTimeoutMinutes': Optional[int],
        'DateTime': Optional[datetime.datetime],
    }
)


DeviceFarmCreateProjectResult = TypedDict(
    'DeviceFarmCreateProjectResult', {
        'Project': Optional[DeviceFarmProject],
    }
)


DeviceFarmCreateRemoteAccessSessionConfiguration = TypedDict(
    'DeviceFarmCreateRemoteAccessSessionConfiguration', {
        'BillingMethod': Optional[str],
        'AmazonResourceNames': Optional[List[str]],
    }
)


DeviceFarmCPU = TypedDict(
    'DeviceFarmCPU', {
        'String': Optional[str],
        'String': Optional[str],
        'Double': Optional[float],
    }
)


DeviceFarmResolution = TypedDict(
    'DeviceFarmResolution', {
        'Integer': Optional[int],
        'Integer': Optional[int],
    }
)


DeviceFarmDeviceInstance = TypedDict(
    'DeviceFarmDeviceInstance', {
        'AmazonResourceName': Optional[str],
        'AmazonResourceName': Optional[str],
        'InstanceLabels': Optional[List[str]],
        'InstanceStatus': Optional[str],
        'String': Optional[str],
        'InstanceProfile': Optional[DeviceFarmInstanceProfile],
    }
)


DeviceFarmDevice = TypedDict(
    'DeviceFarmDevice', {
        'AmazonResourceName': Optional[str],
        'Name': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DeviceFormFactor': Optional[str],
        'DevicePlatform': Optional[str],
        'String': Optional[str],
        'CPU': Optional[DeviceFarmCPU],
        'Resolution': Optional[DeviceFarmResolution],
        'Long': Optional[int],
        'Long': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'DeviceInstances': Optional[List[DeviceFarmDeviceInstance]],
        'DeviceAvailability': Optional[str],
    }
)


DeviceFarmDeviceMinutes = TypedDict(
    'DeviceFarmDeviceMinutes', {
        'Double': Optional[float],
        'Double': Optional[float],
        'Double': Optional[float],
    }
)


DeviceFarmRemoteAccessSession = TypedDict(
    'DeviceFarmRemoteAccessSession', {
        'AmazonResourceName': Optional[str],
        'Name': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'ExecutionStatus': Optional[str],
        'ExecutionResult': Optional[str],
        'Message': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
        'Device': Optional[DeviceFarmDevice],
        'AmazonResourceName': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'AmazonResourceName': Optional[str],
        'HostAddress': Optional[str],
        'ClientId': Optional[str],
        'BillingMethod': Optional[str],
        'DeviceMinutes': Optional[DeviceFarmDeviceMinutes],
        'String': Optional[str],
        'String': Optional[str],
        'InteractionMode': Optional[str],
        'SkipAppResign': Optional[bool],
    }
)


DeviceFarmCreateRemoteAccessSessionResult = TypedDict(
    'DeviceFarmCreateRemoteAccessSessionResult', {
        'RemoteAccessSession': Optional[DeviceFarmRemoteAccessSession],
    }
)


DeviceFarmUpload = TypedDict(
    'DeviceFarmUpload', {
        'AmazonResourceName': Optional[str],
        'Name': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'UploadType': Optional[str],
        'UploadStatus': Optional[str],
        'URL': Optional[str],
        'Metadata': Optional[str],
        'ContentType': Optional[str],
        'Message': Optional[str],
        'UploadCategory': Optional[str],
    }
)


DeviceFarmCreateUploadResult = TypedDict(
    'DeviceFarmCreateUploadResult', {
        'Upload': Optional[DeviceFarmUpload],
    }
)


DeviceFarmVPCEConfiguration = TypedDict(
    'DeviceFarmVPCEConfiguration', {
        'AmazonResourceName': Optional[str],
        'VPCEConfigurationName': Optional[str],
        'VPCEServiceName': Optional[str],
        'ServiceDnsName': Optional[str],
        'VPCEConfigurationDescription': Optional[str],
    }
)


DeviceFarmCreateVPCEConfigurationResult = TypedDict(
    'DeviceFarmCreateVPCEConfigurationResult', {
        'VPCEConfiguration': Optional[DeviceFarmVPCEConfiguration],
    }
)


DeviceFarmDeleteDevicePoolResult = TypedDict(
    'DeviceFarmDeleteDevicePoolResult', {
    }
)


DeviceFarmDeleteInstanceProfileResult = TypedDict(
    'DeviceFarmDeleteInstanceProfileResult', {
    }
)


DeviceFarmDeleteNetworkProfileResult = TypedDict(
    'DeviceFarmDeleteNetworkProfileResult', {
    }
)


DeviceFarmDeleteProjectResult = TypedDict(
    'DeviceFarmDeleteProjectResult', {
    }
)


DeviceFarmDeleteRemoteAccessSessionResult = TypedDict(
    'DeviceFarmDeleteRemoteAccessSessionResult', {
    }
)


DeviceFarmDeleteRunResult = TypedDict(
    'DeviceFarmDeleteRunResult', {
    }
)


DeviceFarmDeleteUploadResult = TypedDict(
    'DeviceFarmDeleteUploadResult', {
    }
)


DeviceFarmDeleteVPCEConfigurationResult = TypedDict(
    'DeviceFarmDeleteVPCEConfigurationResult', {
    }
)


DeviceFarmTrialMinutes = TypedDict(
    'DeviceFarmTrialMinutes', {
        'Double': Optional[float],
        'Double': Optional[float],
    }
)


DeviceFarmAccountSettings = TypedDict(
    'DeviceFarmAccountSettings', {
        'AWSAccountNumber': Optional[str],
        'PurchasedDevicesMap': Optional[Dict[str, int]],
        'PurchasedDevicesMap': Optional[Dict[str, int]],
        'JobTimeoutMinutes': Optional[int],
        'TrialMinutes': Optional[DeviceFarmTrialMinutes],
        'MaxSlotMap': Optional[Dict[str, int]],
        'JobTimeoutMinutes': Optional[int],
        'SkipAppResign': Optional[bool],
    }
)


DeviceFarmGetAccountSettingsResult = TypedDict(
    'DeviceFarmGetAccountSettingsResult', {
        'AccountSettings': Optional[DeviceFarmAccountSettings],
    }
)


DeviceFarmGetDeviceResult = TypedDict(
    'DeviceFarmGetDeviceResult', {
        'Device': Optional[DeviceFarmDevice],
    }
)


DeviceFarmGetDeviceInstanceResult = TypedDict(
    'DeviceFarmGetDeviceInstanceResult', {
        'DeviceInstance': Optional[DeviceFarmDeviceInstance],
    }
)


DeviceFarmGetDevicePoolResult = TypedDict(
    'DeviceFarmGetDevicePoolResult', {
        'DevicePool': Optional[DeviceFarmDevicePool],
    }
)


DeviceFarmScheduleRunTest = TypedDict(
    'DeviceFarmScheduleRunTest', {
        'TestType': str,
        'AmazonResourceName': Optional[str],
        'AmazonResourceName': Optional[str],
        'Filter': Optional[str],
        'TestParameters': Optional[Dict[str, str]],
    }
)


DeviceFarmLocation = TypedDict(
    'DeviceFarmLocation', {
        'Double': float,
        'Double': float,
    }
)


DeviceFarmCustomerArtifactPaths = TypedDict(
    'DeviceFarmCustomerArtifactPaths', {
        'IosPaths': Optional[List[str]],
        'AndroidPaths': Optional[List[str]],
        'DeviceHostPaths': Optional[List[str]],
    }
)


DeviceFarmRadios = TypedDict(
    'DeviceFarmRadios', {
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
    }
)


DeviceFarmScheduleRunConfiguration = TypedDict(
    'DeviceFarmScheduleRunConfiguration', {
        'AmazonResourceName': Optional[str],
        'AmazonResourceName': Optional[str],
        'String': Optional[str],
        'Location': Optional[DeviceFarmLocation],
        'AmazonResourceNames': Optional[List[str]],
        'CustomerArtifactPaths': Optional[DeviceFarmCustomerArtifactPaths],
        'Radios': Optional[DeviceFarmRadios],
        'AmazonResourceNames': Optional[List[str]],
        'BillingMethod': Optional[str],
    }
)


DeviceFarmIncompatibilityMessage = TypedDict(
    'DeviceFarmIncompatibilityMessage', {
        'Message': Optional[str],
        'DeviceAttribute': Optional[str],
    }
)


DeviceFarmDevicePoolCompatibilityResult = TypedDict(
    'DeviceFarmDevicePoolCompatibilityResult', {
        'Device': Optional[DeviceFarmDevice],
        'Boolean': Optional[bool],
        'IncompatibilityMessages': Optional[List[DeviceFarmIncompatibilityMessage]],
    }
)


DeviceFarmGetDevicePoolCompatibilityResult = TypedDict(
    'DeviceFarmGetDevicePoolCompatibilityResult', {
        'DevicePoolCompatibilityResults': Optional[List[DeviceFarmDevicePoolCompatibilityResult]],
        'DevicePoolCompatibilityResults': Optional[List[DeviceFarmDevicePoolCompatibilityResult]],
    }
)


DeviceFarmGetInstanceProfileResult = TypedDict(
    'DeviceFarmGetInstanceProfileResult', {
        'InstanceProfile': Optional[DeviceFarmInstanceProfile],
    }
)


DeviceFarmCounters = TypedDict(
    'DeviceFarmCounters', {
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
    }
)


DeviceFarmJob = TypedDict(
    'DeviceFarmJob', {
        'AmazonResourceName': Optional[str],
        'Name': Optional[str],
        'TestType': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'ExecutionStatus': Optional[str],
        'ExecutionResult': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
        'Counters': Optional[DeviceFarmCounters],
        'Message': Optional[str],
        'Device': Optional[DeviceFarmDevice],
        'AmazonResourceName': Optional[str],
        'DeviceMinutes': Optional[DeviceFarmDeviceMinutes],
        'String': Optional[str],
        'VideoCapture': Optional[bool],
    }
)


DeviceFarmGetJobResult = TypedDict(
    'DeviceFarmGetJobResult', {
        'Job': Optional[DeviceFarmJob],
    }
)


DeviceFarmGetNetworkProfileResult = TypedDict(
    'DeviceFarmGetNetworkProfileResult', {
        'NetworkProfile': Optional[DeviceFarmNetworkProfile],
    }
)


DeviceFarmMonetaryAmount = TypedDict(
    'DeviceFarmMonetaryAmount', {
        'Double': Optional[float],
        'CurrencyCode': Optional[str],
    }
)


DeviceFarmRecurringCharge = TypedDict(
    'DeviceFarmRecurringCharge', {
        'MonetaryAmount': Optional[DeviceFarmMonetaryAmount],
        'RecurringChargeFrequency': Optional[str],
    }
)


DeviceFarmOffering = TypedDict(
    'DeviceFarmOffering', {
        'OfferingIdentifier': Optional[str],
        'Message': Optional[str],
        'OfferingType': Optional[str],
        'DevicePlatform': Optional[str],
        'RecurringCharges': Optional[List[DeviceFarmRecurringCharge]],
    }
)


DeviceFarmOfferingStatus = TypedDict(
    'DeviceFarmOfferingStatus', {
        'OfferingTransactionType': Optional[str],
        'Offering': Optional[DeviceFarmOffering],
        'Integer': Optional[int],
        'DateTime': Optional[datetime.datetime],
    }
)


DeviceFarmGetOfferingStatusResult = TypedDict(
    'DeviceFarmGetOfferingStatusResult', {
        'OfferingStatusMap': Optional[Dict[str, DeviceFarmOfferingStatus]],
        'OfferingStatusMap': Optional[Dict[str, DeviceFarmOfferingStatus]],
        'PaginationToken': Optional[str],
    }
)


DeviceFarmGetProjectResult = TypedDict(
    'DeviceFarmGetProjectResult', {
        'Project': Optional[DeviceFarmProject],
    }
)


DeviceFarmGetRemoteAccessSessionResult = TypedDict(
    'DeviceFarmGetRemoteAccessSessionResult', {
        'RemoteAccessSession': Optional[DeviceFarmRemoteAccessSession],
    }
)


DeviceFarmDeviceFilter = TypedDict(
    'DeviceFarmDeviceFilter', {
        'DeviceFilterAttribute': Optional[str],
        'RuleOperator': Optional[str],
        'DeviceFilterValues': Optional[List[str]],
    }
)


DeviceFarmDeviceSelectionResult = TypedDict(
    'DeviceFarmDeviceSelectionResult', {
        'DeviceFilters': Optional[List[DeviceFarmDeviceFilter]],
        'Integer': Optional[int],
        'Integer': Optional[int],
    }
)


DeviceFarmRun = TypedDict(
    'DeviceFarmRun', {
        'AmazonResourceName': Optional[str],
        'Name': Optional[str],
        'TestType': Optional[str],
        'DevicePlatform': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'ExecutionStatus': Optional[str],
        'ExecutionResult': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
        'Counters': Optional[DeviceFarmCounters],
        'Message': Optional[str],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'BillingMethod': Optional[str],
        'DeviceMinutes': Optional[DeviceFarmDeviceMinutes],
        'NetworkProfile': Optional[DeviceFarmNetworkProfile],
        'String': Optional[str],
        'ExecutionResultCode': Optional[str],
        'Integer': Optional[int],
        'AmazonResourceName': Optional[str],
        'Integer': Optional[int],
        'JobTimeoutMinutes': Optional[int],
        'AmazonResourceName': Optional[str],
        'String': Optional[str],
        'Radios': Optional[DeviceFarmRadios],
        'Location': Optional[DeviceFarmLocation],
        'CustomerArtifactPaths': Optional[DeviceFarmCustomerArtifactPaths],
        'String': Optional[str],
        'SkipAppResign': Optional[bool],
        'AmazonResourceName': Optional[str],
        'DeviceSelectionResult': Optional[DeviceFarmDeviceSelectionResult],
    }
)


DeviceFarmGetRunResult = TypedDict(
    'DeviceFarmGetRunResult', {
        'Run': Optional[DeviceFarmRun],
    }
)


DeviceFarmSuite = TypedDict(
    'DeviceFarmSuite', {
        'AmazonResourceName': Optional[str],
        'Name': Optional[str],
        'TestType': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'ExecutionStatus': Optional[str],
        'ExecutionResult': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
        'Counters': Optional[DeviceFarmCounters],
        'Message': Optional[str],
        'DeviceMinutes': Optional[DeviceFarmDeviceMinutes],
    }
)


DeviceFarmGetSuiteResult = TypedDict(
    'DeviceFarmGetSuiteResult', {
        'Suite': Optional[DeviceFarmSuite],
    }
)


DeviceFarmTest = TypedDict(
    'DeviceFarmTest', {
        'AmazonResourceName': Optional[str],
        'Name': Optional[str],
        'TestType': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'ExecutionStatus': Optional[str],
        'ExecutionResult': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
        'Counters': Optional[DeviceFarmCounters],
        'Message': Optional[str],
        'DeviceMinutes': Optional[DeviceFarmDeviceMinutes],
    }
)


DeviceFarmGetTestResult = TypedDict(
    'DeviceFarmGetTestResult', {
        'Test': Optional[DeviceFarmTest],
    }
)


DeviceFarmGetUploadResult = TypedDict(
    'DeviceFarmGetUploadResult', {
        'Upload': Optional[DeviceFarmUpload],
    }
)


DeviceFarmGetVPCEConfigurationResult = TypedDict(
    'DeviceFarmGetVPCEConfigurationResult', {
        'VPCEConfiguration': Optional[DeviceFarmVPCEConfiguration],
    }
)


DeviceFarmInstallToRemoteAccessSessionResult = TypedDict(
    'DeviceFarmInstallToRemoteAccessSessionResult', {
        'Upload': Optional[DeviceFarmUpload],
    }
)


DeviceFarmArtifact = TypedDict(
    'DeviceFarmArtifact', {
        'AmazonResourceName': Optional[str],
        'Name': Optional[str],
        'ArtifactType': Optional[str],
        'String': Optional[str],
        'URL': Optional[str],
    }
)


DeviceFarmListArtifactsResult = TypedDict(
    'DeviceFarmListArtifactsResult', {
        'Artifacts': Optional[List[DeviceFarmArtifact]],
        'PaginationToken': Optional[str],
    }
)


DeviceFarmListDeviceInstancesResult = TypedDict(
    'DeviceFarmListDeviceInstancesResult', {
        'DeviceInstances': Optional[List[DeviceFarmDeviceInstance]],
        'PaginationToken': Optional[str],
    }
)


DeviceFarmListDevicePoolsResult = TypedDict(
    'DeviceFarmListDevicePoolsResult', {
        'DevicePools': Optional[List[DeviceFarmDevicePool]],
        'PaginationToken': Optional[str],
    }
)


DeviceFarmListDevicesResult = TypedDict(
    'DeviceFarmListDevicesResult', {
        'Devices': Optional[List[DeviceFarmDevice]],
        'PaginationToken': Optional[str],
    }
)


DeviceFarmListInstanceProfilesResult = TypedDict(
    'DeviceFarmListInstanceProfilesResult', {
        'InstanceProfiles': Optional[List[DeviceFarmInstanceProfile]],
        'PaginationToken': Optional[str],
    }
)


DeviceFarmListJobsResult = TypedDict(
    'DeviceFarmListJobsResult', {
        'Jobs': Optional[List[DeviceFarmJob]],
        'PaginationToken': Optional[str],
    }
)


DeviceFarmListNetworkProfilesResult = TypedDict(
    'DeviceFarmListNetworkProfilesResult', {
        'NetworkProfiles': Optional[List[DeviceFarmNetworkProfile]],
        'PaginationToken': Optional[str],
    }
)


DeviceFarmOfferingPromotion = TypedDict(
    'DeviceFarmOfferingPromotion', {
        'OfferingPromotionIdentifier': Optional[str],
        'Message': Optional[str],
    }
)


DeviceFarmListOfferingPromotionsResult = TypedDict(
    'DeviceFarmListOfferingPromotionsResult', {
        'OfferingPromotions': Optional[List[DeviceFarmOfferingPromotion]],
        'PaginationToken': Optional[str],
    }
)


DeviceFarmOfferingTransaction = TypedDict(
    'DeviceFarmOfferingTransaction', {
        'OfferingStatus': Optional[DeviceFarmOfferingStatus],
        'TransactionIdentifier': Optional[str],
        'OfferingPromotionIdentifier': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'MonetaryAmount': Optional[DeviceFarmMonetaryAmount],
    }
)


DeviceFarmListOfferingTransactionsResult = TypedDict(
    'DeviceFarmListOfferingTransactionsResult', {
        'OfferingTransactions': Optional[List[DeviceFarmOfferingTransaction]],
        'PaginationToken': Optional[str],
    }
)


DeviceFarmListOfferingsResult = TypedDict(
    'DeviceFarmListOfferingsResult', {
        'Offerings': Optional[List[DeviceFarmOffering]],
        'PaginationToken': Optional[str],
    }
)


DeviceFarmListProjectsResult = TypedDict(
    'DeviceFarmListProjectsResult', {
        'Projects': Optional[List[DeviceFarmProject]],
        'PaginationToken': Optional[str],
    }
)


DeviceFarmListRemoteAccessSessionsResult = TypedDict(
    'DeviceFarmListRemoteAccessSessionsResult', {
        'RemoteAccessSessions': Optional[List[DeviceFarmRemoteAccessSession]],
        'PaginationToken': Optional[str],
    }
)


DeviceFarmListRunsResult = TypedDict(
    'DeviceFarmListRunsResult', {
        'Runs': Optional[List[DeviceFarmRun]],
        'PaginationToken': Optional[str],
    }
)


DeviceFarmSample = TypedDict(
    'DeviceFarmSample', {
        'AmazonResourceName': Optional[str],
        'SampleType': Optional[str],
        'URL': Optional[str],
    }
)


DeviceFarmListSamplesResult = TypedDict(
    'DeviceFarmListSamplesResult', {
        'Samples': Optional[List[DeviceFarmSample]],
        'PaginationToken': Optional[str],
    }
)


DeviceFarmListSuitesResult = TypedDict(
    'DeviceFarmListSuitesResult', {
        'Suites': Optional[List[DeviceFarmSuite]],
        'PaginationToken': Optional[str],
    }
)


DeviceFarmListTestsResult = TypedDict(
    'DeviceFarmListTestsResult', {
        'Tests': Optional[List[DeviceFarmTest]],
        'PaginationToken': Optional[str],
    }
)


DeviceFarmProblemDetail = TypedDict(
    'DeviceFarmProblemDetail', {
        'AmazonResourceName': Optional[str],
        'Name': Optional[str],
    }
)


DeviceFarmProblem = TypedDict(
    'DeviceFarmProblem', {
        'ProblemDetail': Optional[DeviceFarmProblemDetail],
        'ProblemDetail': Optional[DeviceFarmProblemDetail],
        'ProblemDetail': Optional[DeviceFarmProblemDetail],
        'ProblemDetail': Optional[DeviceFarmProblemDetail],
        'Device': Optional[DeviceFarmDevice],
        'ExecutionResult': Optional[str],
        'Message': Optional[str],
    }
)


DeviceFarmUniqueProblem = TypedDict(
    'DeviceFarmUniqueProblem', {
        'Message': Optional[str],
        'Problems': Optional[List[DeviceFarmProblem]],
    }
)


DeviceFarmListUniqueProblemsResult = TypedDict(
    'DeviceFarmListUniqueProblemsResult', {
        'UniqueProblemsByExecutionResultMap': Optional[Dict[str, List[DeviceFarmUniqueProblem]]],
        'PaginationToken': Optional[str],
    }
)


DeviceFarmListUploadsResult = TypedDict(
    'DeviceFarmListUploadsResult', {
        'Uploads': Optional[List[DeviceFarmUpload]],
        'PaginationToken': Optional[str],
    }
)


DeviceFarmListVPCEConfigurationsResult = TypedDict(
    'DeviceFarmListVPCEConfigurationsResult', {
        'VPCEConfigurations': Optional[List[DeviceFarmVPCEConfiguration]],
        'PaginationToken': Optional[str],
    }
)


DeviceFarmPurchaseOfferingResult = TypedDict(
    'DeviceFarmPurchaseOfferingResult', {
        'OfferingTransaction': Optional[DeviceFarmOfferingTransaction],
    }
)


DeviceFarmRenewOfferingResult = TypedDict(
    'DeviceFarmRenewOfferingResult', {
        'OfferingTransaction': Optional[DeviceFarmOfferingTransaction],
    }
)


DeviceFarmDeviceSelectionConfiguration = TypedDict(
    'DeviceFarmDeviceSelectionConfiguration', {
        'DeviceFilters': List[DeviceFarmDeviceFilter],
        'Integer': int,
    }
)


DeviceFarmExecutionConfiguration = TypedDict(
    'DeviceFarmExecutionConfiguration', {
        'JobTimeoutMinutes': Optional[int],
        'AccountsCleanup': Optional[bool],
        'AppPackagesCleanup': Optional[bool],
        'VideoCapture': Optional[bool],
        'SkipAppResign': Optional[bool],
    }
)


DeviceFarmScheduleRunResult = TypedDict(
    'DeviceFarmScheduleRunResult', {
        'Run': Optional[DeviceFarmRun],
    }
)


DeviceFarmStopJobResult = TypedDict(
    'DeviceFarmStopJobResult', {
        'Job': Optional[DeviceFarmJob],
    }
)


DeviceFarmStopRemoteAccessSessionResult = TypedDict(
    'DeviceFarmStopRemoteAccessSessionResult', {
        'RemoteAccessSession': Optional[DeviceFarmRemoteAccessSession],
    }
)


DeviceFarmStopRunResult = TypedDict(
    'DeviceFarmStopRunResult', {
        'Run': Optional[DeviceFarmRun],
    }
)


DeviceFarmUpdateDeviceInstanceResult = TypedDict(
    'DeviceFarmUpdateDeviceInstanceResult', {
        'DeviceInstance': Optional[DeviceFarmDeviceInstance],
    }
)


DeviceFarmUpdateDevicePoolResult = TypedDict(
    'DeviceFarmUpdateDevicePoolResult', {
        'DevicePool': Optional[DeviceFarmDevicePool],
    }
)


DeviceFarmUpdateInstanceProfileResult = TypedDict(
    'DeviceFarmUpdateInstanceProfileResult', {
        'InstanceProfile': Optional[DeviceFarmInstanceProfile],
    }
)


DeviceFarmUpdateNetworkProfileResult = TypedDict(
    'DeviceFarmUpdateNetworkProfileResult', {
        'NetworkProfile': Optional[DeviceFarmNetworkProfile],
    }
)


DeviceFarmUpdateProjectResult = TypedDict(
    'DeviceFarmUpdateProjectResult', {
        'Project': Optional[DeviceFarmProject],
    }
)


DeviceFarmUpdateUploadResult = TypedDict(
    'DeviceFarmUpdateUploadResult', {
        'Upload': Optional[DeviceFarmUpload],
    }
)


DeviceFarmUpdateVPCEConfigurationResult = TypedDict(
    'DeviceFarmUpdateVPCEConfigurationResult', {
        'VPCEConfiguration': Optional[DeviceFarmVPCEConfiguration],
    }
)


class DirectConnect(BaseClient):
    def accept_direct_connect_gateway_association_proposal(self, *,
        directConnectGatewayId: str,
        proposalId: str,
        associatedGatewayOwnerAccount: str,
        overrideAllowedPrefixesToDirectConnectGateway: List[DirectConnectRouteFilterPrefix] = ...
    ) -> DirectConnectAcceptDirectConnectGatewayAssociationProposalResult: ...

    def allocate_connection_on_interconnect(self, *,
        bandwidth: str,
        connectionName: str,
        ownerAccount: str,
        interconnectId: str,
        vlan: int
    ) -> DirectConnectConnection: ...

    def allocate_hosted_connection(self, *,
        connectionId: str,
        ownerAccount: str,
        bandwidth: str,
        connectionName: str,
        vlan: int
    ) -> DirectConnectConnection: ...

    def allocate_private_virtual_interface(self, *,
        connectionId: str,
        ownerAccount: str,
        newPrivateVirtualInterfaceAllocation: DirectConnectNewPrivateVirtualInterfaceAllocation
    ) -> DirectConnectVirtualInterface: ...

    def allocate_public_virtual_interface(self, *,
        connectionId: str,
        ownerAccount: str,
        newPublicVirtualInterfaceAllocation: DirectConnectNewPublicVirtualInterfaceAllocation
    ) -> DirectConnectVirtualInterface: ...

    def allocate_transit_virtual_interface(self, *,
        connectionId: str,
        ownerAccount: str,
        newTransitVirtualInterfaceAllocation: DirectConnectNewTransitVirtualInterfaceAllocation
    ) -> DirectConnectAllocateTransitVirtualInterfaceResult: ...

    def associate_connection_with_lag(self, *,
        connectionId: str,
        lagId: str
    ) -> DirectConnectConnection: ...

    def associate_hosted_connection(self, *,
        connectionId: str,
        parentConnectionId: str
    ) -> DirectConnectConnection: ...

    def associate_virtual_interface(self, *,
        virtualInterfaceId: str,
        connectionId: str
    ) -> DirectConnectVirtualInterface: ...

    def confirm_connection(self, *,
        connectionId: str
    ) -> DirectConnectConfirmConnectionResponse: ...

    def confirm_private_virtual_interface(self, *,
        virtualInterfaceId: str,
        virtualGatewayId: str = ...,
        directConnectGatewayId: str = ...
    ) -> DirectConnectConfirmPrivateVirtualInterfaceResponse: ...

    def confirm_public_virtual_interface(self, *,
        virtualInterfaceId: str
    ) -> DirectConnectConfirmPublicVirtualInterfaceResponse: ...

    def confirm_transit_virtual_interface(self, *,
        virtualInterfaceId: str,
        directConnectGatewayId: str
    ) -> DirectConnectConfirmTransitVirtualInterfaceResponse: ...

    def create_bgp_peer(self, *,
        virtualInterfaceId: str = ...,
        newBGPPeer: DirectConnectNewBGPPeer = ...
    ) -> DirectConnectCreateBGPPeerResponse: ...

    def create_connection(self, *,
        location: str,
        bandwidth: str,
        connectionName: str,
        lagId: str = ...
    ) -> DirectConnectConnection: ...

    def create_direct_connect_gateway(self, *,
        directConnectGatewayName: str,
        amazonSideAsn: int = ...
    ) -> DirectConnectCreateDirectConnectGatewayResult: ...

    def create_direct_connect_gateway_association(self, *,
        directConnectGatewayId: str,
        gatewayId: str = ...,
        addAllowedPrefixesToDirectConnectGateway: List[DirectConnectRouteFilterPrefix] = ...,
        virtualGatewayId: str = ...
    ) -> DirectConnectCreateDirectConnectGatewayAssociationResult: ...

    def create_direct_connect_gateway_association_proposal(self, *,
        directConnectGatewayId: str,
        directConnectGatewayOwnerAccount: str,
        gatewayId: str,
        addAllowedPrefixesToDirectConnectGateway: List[DirectConnectRouteFilterPrefix] = ...,
        removeAllowedPrefixesToDirectConnectGateway: List[DirectConnectRouteFilterPrefix] = ...
    ) -> DirectConnectCreateDirectConnectGatewayAssociationProposalResult: ...

    def create_interconnect(self, *,
        interconnectName: str,
        bandwidth: str,
        location: str,
        lagId: str = ...
    ) -> DirectConnectInterconnect: ...

    def create_lag(self, *,
        numberOfConnections: int,
        location: str,
        connectionsBandwidth: str,
        lagName: str,
        connectionId: str = ...
    ) -> DirectConnectLag: ...

    def create_private_virtual_interface(self, *,
        connectionId: str,
        newPrivateVirtualInterface: DirectConnectNewPrivateVirtualInterface
    ) -> DirectConnectVirtualInterface: ...

    def create_public_virtual_interface(self, *,
        connectionId: str,
        newPublicVirtualInterface: DirectConnectNewPublicVirtualInterface
    ) -> DirectConnectVirtualInterface: ...

    def create_transit_virtual_interface(self, *,
        connectionId: str,
        newTransitVirtualInterface: DirectConnectNewTransitVirtualInterface
    ) -> DirectConnectCreateTransitVirtualInterfaceResult: ...

    def delete_bgp_peer(self, *,
        virtualInterfaceId: str = ...,
        asn: int = ...,
        customerAddress: str = ...,
        bgpPeerId: str = ...
    ) -> DirectConnectDeleteBGPPeerResponse: ...

    def delete_connection(self, *,
        connectionId: str
    ) -> DirectConnectConnection: ...

    def delete_direct_connect_gateway(self, *,
        directConnectGatewayId: str
    ) -> DirectConnectDeleteDirectConnectGatewayResult: ...

    def delete_direct_connect_gateway_association(self, *,
        associationId: str = ...,
        directConnectGatewayId: str = ...,
        virtualGatewayId: str = ...
    ) -> DirectConnectDeleteDirectConnectGatewayAssociationResult: ...

    def delete_direct_connect_gateway_association_proposal(self, *,
        proposalId: str
    ) -> DirectConnectDeleteDirectConnectGatewayAssociationProposalResult: ...

    def delete_interconnect(self, *,
        interconnectId: str
    ) -> DirectConnectDeleteInterconnectResponse: ...

    def delete_lag(self, *,
        lagId: str
    ) -> DirectConnectLag: ...

    def delete_virtual_interface(self, *,
        virtualInterfaceId: str
    ) -> DirectConnectDeleteVirtualInterfaceResponse: ...

    def describe_connection_loa(self, *,
        connectionId: str,
        providerName: str = ...,
        loaContentType: str = ...
    ) -> DirectConnectDescribeConnectionLoaResponse: ...

    def describe_connections(self, *,
        connectionId: str = ...
    ) -> DirectConnectConnections: ...

    def describe_connections_on_interconnect(self, *,
        interconnectId: str
    ) -> DirectConnectConnections: ...

    def describe_direct_connect_gateway_association_proposals(self, *,
        directConnectGatewayId: str = ...,
        proposalId: str = ...,
        associatedGatewayId: str = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> DirectConnectDescribeDirectConnectGatewayAssociationProposalsResult: ...

    def describe_direct_connect_gateway_associations(self, *,
        associationId: str = ...,
        associatedGatewayId: str = ...,
        directConnectGatewayId: str = ...,
        maxResults: int = ...,
        nextToken: str = ...,
        virtualGatewayId: str = ...
    ) -> DirectConnectDescribeDirectConnectGatewayAssociationsResult: ...

    def describe_direct_connect_gateway_attachments(self, *,
        directConnectGatewayId: str = ...,
        virtualInterfaceId: str = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> DirectConnectDescribeDirectConnectGatewayAttachmentsResult: ...

    def describe_direct_connect_gateways(self, *,
        directConnectGatewayId: str = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> DirectConnectDescribeDirectConnectGatewaysResult: ...

    def describe_hosted_connections(self, *,
        connectionId: str
    ) -> DirectConnectConnections: ...

    def describe_interconnect_loa(self, *,
        interconnectId: str,
        providerName: str = ...,
        loaContentType: str = ...
    ) -> DirectConnectDescribeInterconnectLoaResponse: ...

    def describe_interconnects(self, *,
        interconnectId: str = ...
    ) -> DirectConnectInterconnects: ...

    def describe_lags(self, *,
        lagId: str = ...
    ) -> DirectConnectLags: ...

    def describe_loa(self, *,
        connectionId: str,
        providerName: str = ...,
        loaContentType: str = ...
    ) -> DirectConnectLoa: ...

    def describe_locations(self) -> DirectConnectLocations: ...

    def describe_tags(self, *,
        resourceArns: List[str]
    ) -> DirectConnectDescribeTagsResponse: ...

    def describe_virtual_gateways(self) -> DirectConnectVirtualGateways: ...

    def describe_virtual_interfaces(self, *,
        connectionId: str = ...,
        virtualInterfaceId: str = ...
    ) -> DirectConnectVirtualInterfaces: ...

    def disassociate_connection_from_lag(self, *,
        connectionId: str,
        lagId: str
    ) -> DirectConnectConnection: ...

    def tag_resource(self, *,
        resourceArn: str,
        tags: List[DirectConnectTag]
    ) -> DirectConnectTagResourceResponse: ...

    def untag_resource(self, *,
        resourceArn: str,
        tagKeys: List[str]
    ) -> DirectConnectUntagResourceResponse: ...

    def update_direct_connect_gateway_association(self, *,
        associationId: str = ...,
        addAllowedPrefixesToDirectConnectGateway: List[DirectConnectRouteFilterPrefix] = ...,
        removeAllowedPrefixesToDirectConnectGateway: List[DirectConnectRouteFilterPrefix] = ...
    ) -> DirectConnectUpdateDirectConnectGatewayAssociationResult: ...

    def update_lag(self, *,
        lagId: str,
        lagName: str = ...,
        minimumLinks: int = ...
    ) -> DirectConnectLag: ...

    def update_virtual_interface_attributes(self, *,
        virtualInterfaceId: str,
        mtu: int = ...
    ) -> DirectConnectVirtualInterface: ...


DirectConnectRouteFilterPrefix = TypedDict(
    'DirectConnectRouteFilterPrefix', {
        'CIDR': Optional[str],
    }
)


DirectConnectAssociatedGateway = TypedDict(
    'DirectConnectAssociatedGateway', {
        'GatewayIdentifier': Optional[str],
        'GatewayType': Optional[str],
        'OwnerAccount': Optional[str],
        'Region': Optional[str],
    }
)


DirectConnectDirectConnectGatewayAssociation = TypedDict(
    'DirectConnectDirectConnectGatewayAssociation', {
        'DirectConnectGatewayId': Optional[str],
        'OwnerAccount': Optional[str],
        'DirectConnectGatewayAssociationState': Optional[str],
        'StateChangeError': Optional[str],
        'AssociatedGateway': Optional[DirectConnectAssociatedGateway],
        'DirectConnectGatewayAssociationId': Optional[str],
        'RouteFilterPrefixList': Optional[List[DirectConnectRouteFilterPrefix]],
        'VirtualGatewayId': Optional[str],
        'VirtualGatewayRegion': Optional[str],
        'OwnerAccount': Optional[str],
    }
)


DirectConnectAcceptDirectConnectGatewayAssociationProposalResult = TypedDict(
    'DirectConnectAcceptDirectConnectGatewayAssociationProposalResult', {
        'DirectConnectGatewayAssociation': Optional[DirectConnectDirectConnectGatewayAssociation],
    }
)


DirectConnectConnection = TypedDict(
    'DirectConnectConnection', {
        'OwnerAccount': Optional[str],
        'ConnectionId': Optional[str],
        'ConnectionName': Optional[str],
        'ConnectionState': Optional[str],
        'Region': Optional[str],
        'LocationCode': Optional[str],
        'Bandwidth': Optional[str],
        'VLAN': Optional[int],
        'PartnerName': Optional[str],
        'LoaIssueTime': Optional[datetime.datetime],
        'LagId': Optional[str],
        'AwsDevice': Optional[str],
        'JumboFrameCapable': Optional[bool],
        'AwsDeviceV2': Optional[str],
        'HasLogicalRedundancy': Optional[str],
    }
)


DirectConnectNewPrivateVirtualInterfaceAllocation = TypedDict(
    'DirectConnectNewPrivateVirtualInterfaceAllocation', {
        'VirtualInterfaceName': str,
        'VLAN': int,
        'ASN': int,
        'MTU': Optional[int],
        'BGPAuthKey': Optional[str],
        'AmazonAddress': Optional[str],
        'AddressFamily': Optional[str],
        'CustomerAddress': Optional[str],
    }
)


DirectConnectBGPPeer = TypedDict(
    'DirectConnectBGPPeer', {
        'BGPPeerId': Optional[str],
        'ASN': Optional[int],
        'BGPAuthKey': Optional[str],
        'AddressFamily': Optional[str],
        'AmazonAddress': Optional[str],
        'CustomerAddress': Optional[str],
        'BGPPeerState': Optional[str],
        'BGPStatus': Optional[str],
        'AwsDeviceV2': Optional[str],
    }
)


DirectConnectVirtualInterface = TypedDict(
    'DirectConnectVirtualInterface', {
        'OwnerAccount': Optional[str],
        'VirtualInterfaceId': Optional[str],
        'LocationCode': Optional[str],
        'ConnectionId': Optional[str],
        'VirtualInterfaceType': Optional[str],
        'VirtualInterfaceName': Optional[str],
        'VLAN': Optional[int],
        'ASN': Optional[int],
        'LongAsn': Optional[int],
        'BGPAuthKey': Optional[str],
        'AmazonAddress': Optional[str],
        'CustomerAddress': Optional[str],
        'AddressFamily': Optional[str],
        'VirtualInterfaceState': Optional[str],
        'RouterConfig': Optional[str],
        'MTU': Optional[int],
        'JumboFrameCapable': Optional[bool],
        'VirtualGatewayId': Optional[str],
        'DirectConnectGatewayId': Optional[str],
        'RouteFilterPrefixList': Optional[List[DirectConnectRouteFilterPrefix]],
        'BGPPeerList': Optional[List[DirectConnectBGPPeer]],
        'Region': Optional[str],
        'AwsDeviceV2': Optional[str],
    }
)


DirectConnectNewPublicVirtualInterfaceAllocation = TypedDict(
    'DirectConnectNewPublicVirtualInterfaceAllocation', {
        'VirtualInterfaceName': str,
        'VLAN': int,
        'ASN': int,
        'BGPAuthKey': Optional[str],
        'AmazonAddress': Optional[str],
        'CustomerAddress': Optional[str],
        'AddressFamily': Optional[str],
        'RouteFilterPrefixList': Optional[List[DirectConnectRouteFilterPrefix]],
    }
)


DirectConnectNewTransitVirtualInterfaceAllocation = TypedDict(
    'DirectConnectNewTransitVirtualInterfaceAllocation', {
        'VirtualInterfaceName': Optional[str],
        'VLAN': Optional[int],
        'ASN': Optional[int],
        'MTU': Optional[int],
        'BGPAuthKey': Optional[str],
        'AmazonAddress': Optional[str],
        'CustomerAddress': Optional[str],
        'AddressFamily': Optional[str],
    }
)


DirectConnectAllocateTransitVirtualInterfaceResult = TypedDict(
    'DirectConnectAllocateTransitVirtualInterfaceResult', {
        'VirtualInterface': Optional[DirectConnectVirtualInterface],
    }
)


DirectConnectConfirmConnectionResponse = TypedDict(
    'DirectConnectConfirmConnectionResponse', {
        'ConnectionState': Optional[str],
    }
)


DirectConnectConfirmPrivateVirtualInterfaceResponse = TypedDict(
    'DirectConnectConfirmPrivateVirtualInterfaceResponse', {
        'VirtualInterfaceState': Optional[str],
    }
)


DirectConnectConfirmPublicVirtualInterfaceResponse = TypedDict(
    'DirectConnectConfirmPublicVirtualInterfaceResponse', {
        'VirtualInterfaceState': Optional[str],
    }
)


DirectConnectConfirmTransitVirtualInterfaceResponse = TypedDict(
    'DirectConnectConfirmTransitVirtualInterfaceResponse', {
        'VirtualInterfaceState': Optional[str],
    }
)


DirectConnectNewBGPPeer = TypedDict(
    'DirectConnectNewBGPPeer', {
        'ASN': Optional[int],
        'BGPAuthKey': Optional[str],
        'AddressFamily': Optional[str],
        'AmazonAddress': Optional[str],
        'CustomerAddress': Optional[str],
    }
)


DirectConnectCreateBGPPeerResponse = TypedDict(
    'DirectConnectCreateBGPPeerResponse', {
        'VirtualInterface': Optional[DirectConnectVirtualInterface],
    }
)


DirectConnectDirectConnectGateway = TypedDict(
    'DirectConnectDirectConnectGateway', {
        'DirectConnectGatewayId': Optional[str],
        'DirectConnectGatewayName': Optional[str],
        'LongAsn': Optional[int],
        'OwnerAccount': Optional[str],
        'DirectConnectGatewayState': Optional[str],
        'StateChangeError': Optional[str],
    }
)


DirectConnectCreateDirectConnectGatewayResult = TypedDict(
    'DirectConnectCreateDirectConnectGatewayResult', {
        'DirectConnectGateway': Optional[DirectConnectDirectConnectGateway],
    }
)


DirectConnectCreateDirectConnectGatewayAssociationResult = TypedDict(
    'DirectConnectCreateDirectConnectGatewayAssociationResult', {
        'DirectConnectGatewayAssociation': Optional[DirectConnectDirectConnectGatewayAssociation],
    }
)


DirectConnectDirectConnectGatewayAssociationProposal = TypedDict(
    'DirectConnectDirectConnectGatewayAssociationProposal', {
        'DirectConnectGatewayAssociationProposalId': Optional[str],
        'DirectConnectGatewayId': Optional[str],
        'OwnerAccount': Optional[str],
        'DirectConnectGatewayAssociationProposalState': Optional[str],
        'AssociatedGateway': Optional[DirectConnectAssociatedGateway],
        'RouteFilterPrefixList': Optional[List[DirectConnectRouteFilterPrefix]],
        'RouteFilterPrefixList': Optional[List[DirectConnectRouteFilterPrefix]],
    }
)


DirectConnectCreateDirectConnectGatewayAssociationProposalResult = TypedDict(
    'DirectConnectCreateDirectConnectGatewayAssociationProposalResult', {
        'DirectConnectGatewayAssociationProposal': Optional[DirectConnectDirectConnectGatewayAssociationProposal],
    }
)


DirectConnectInterconnect = TypedDict(
    'DirectConnectInterconnect', {
        'InterconnectId': Optional[str],
        'InterconnectName': Optional[str],
        'InterconnectState': Optional[str],
        'Region': Optional[str],
        'LocationCode': Optional[str],
        'Bandwidth': Optional[str],
        'LoaIssueTime': Optional[datetime.datetime],
        'LagId': Optional[str],
        'AwsDevice': Optional[str],
        'JumboFrameCapable': Optional[bool],
        'AwsDeviceV2': Optional[str],
        'HasLogicalRedundancy': Optional[str],
    }
)


DirectConnectLag = TypedDict(
    'DirectConnectLag', {
        'Bandwidth': Optional[str],
        'Count': Optional[int],
        'LagId': Optional[str],
        'OwnerAccount': Optional[str],
        'LagName': Optional[str],
        'LagState': Optional[str],
        'LocationCode': Optional[str],
        'Region': Optional[str],
        'Count': Optional[int],
        'AwsDevice': Optional[str],
        'AwsDeviceV2': Optional[str],
        'ConnectionList': Optional[List[DirectConnectConnection]],
        'BooleanFlag': Optional[bool],
        'JumboFrameCapable': Optional[bool],
        'HasLogicalRedundancy': Optional[str],
    }
)


DirectConnectNewPrivateVirtualInterface = TypedDict(
    'DirectConnectNewPrivateVirtualInterface', {
        'VirtualInterfaceName': str,
        'VLAN': int,
        'ASN': int,
        'MTU': Optional[int],
        'BGPAuthKey': Optional[str],
        'AmazonAddress': Optional[str],
        'CustomerAddress': Optional[str],
        'AddressFamily': Optional[str],
        'VirtualGatewayId': Optional[str],
        'DirectConnectGatewayId': Optional[str],
    }
)


DirectConnectNewPublicVirtualInterface = TypedDict(
    'DirectConnectNewPublicVirtualInterface', {
        'VirtualInterfaceName': str,
        'VLAN': int,
        'ASN': int,
        'BGPAuthKey': Optional[str],
        'AmazonAddress': Optional[str],
        'CustomerAddress': Optional[str],
        'AddressFamily': Optional[str],
        'RouteFilterPrefixList': Optional[List[DirectConnectRouteFilterPrefix]],
    }
)


DirectConnectNewTransitVirtualInterface = TypedDict(
    'DirectConnectNewTransitVirtualInterface', {
        'VirtualInterfaceName': Optional[str],
        'VLAN': Optional[int],
        'ASN': Optional[int],
        'MTU': Optional[int],
        'BGPAuthKey': Optional[str],
        'AmazonAddress': Optional[str],
        'CustomerAddress': Optional[str],
        'AddressFamily': Optional[str],
        'DirectConnectGatewayId': Optional[str],
    }
)


DirectConnectCreateTransitVirtualInterfaceResult = TypedDict(
    'DirectConnectCreateTransitVirtualInterfaceResult', {
        'VirtualInterface': Optional[DirectConnectVirtualInterface],
    }
)


DirectConnectDeleteBGPPeerResponse = TypedDict(
    'DirectConnectDeleteBGPPeerResponse', {
        'VirtualInterface': Optional[DirectConnectVirtualInterface],
    }
)


DirectConnectDeleteDirectConnectGatewayResult = TypedDict(
    'DirectConnectDeleteDirectConnectGatewayResult', {
        'DirectConnectGateway': Optional[DirectConnectDirectConnectGateway],
    }
)


DirectConnectDeleteDirectConnectGatewayAssociationResult = TypedDict(
    'DirectConnectDeleteDirectConnectGatewayAssociationResult', {
        'DirectConnectGatewayAssociation': Optional[DirectConnectDirectConnectGatewayAssociation],
    }
)


DirectConnectDeleteDirectConnectGatewayAssociationProposalResult = TypedDict(
    'DirectConnectDeleteDirectConnectGatewayAssociationProposalResult', {
        'DirectConnectGatewayAssociationProposal': Optional[DirectConnectDirectConnectGatewayAssociationProposal],
    }
)


DirectConnectDeleteInterconnectResponse = TypedDict(
    'DirectConnectDeleteInterconnectResponse', {
        'InterconnectState': Optional[str],
    }
)


DirectConnectDeleteVirtualInterfaceResponse = TypedDict(
    'DirectConnectDeleteVirtualInterfaceResponse', {
        'VirtualInterfaceState': Optional[str],
    }
)


DirectConnectLoa = TypedDict(
    'DirectConnectLoa', {
        'LoaContent': Optional[bytes],
        'LoaContentType': Optional[str],
    }
)


DirectConnectDescribeConnectionLoaResponse = TypedDict(
    'DirectConnectDescribeConnectionLoaResponse', {
        'Loa': Optional[DirectConnectLoa],
    }
)


DirectConnectConnections = TypedDict(
    'DirectConnectConnections', {
        'ConnectionList': Optional[List[DirectConnectConnection]],
    }
)


DirectConnectDescribeDirectConnectGatewayAssociationProposalsResult = TypedDict(
    'DirectConnectDescribeDirectConnectGatewayAssociationProposalsResult', {
        'DirectConnectGatewayAssociationProposalList': Optional[List[DirectConnectDirectConnectGatewayAssociationProposal]],
        'PaginationToken': Optional[str],
    }
)


DirectConnectDescribeDirectConnectGatewayAssociationsResult = TypedDict(
    'DirectConnectDescribeDirectConnectGatewayAssociationsResult', {
        'DirectConnectGatewayAssociationList': Optional[List[DirectConnectDirectConnectGatewayAssociation]],
        'PaginationToken': Optional[str],
    }
)


DirectConnectDirectConnectGatewayAttachment = TypedDict(
    'DirectConnectDirectConnectGatewayAttachment', {
        'DirectConnectGatewayId': Optional[str],
        'VirtualInterfaceId': Optional[str],
        'VirtualInterfaceRegion': Optional[str],
        'OwnerAccount': Optional[str],
        'DirectConnectGatewayAttachmentState': Optional[str],
        'DirectConnectGatewayAttachmentType': Optional[str],
        'StateChangeError': Optional[str],
    }
)


DirectConnectDescribeDirectConnectGatewayAttachmentsResult = TypedDict(
    'DirectConnectDescribeDirectConnectGatewayAttachmentsResult', {
        'DirectConnectGatewayAttachmentList': Optional[List[DirectConnectDirectConnectGatewayAttachment]],
        'PaginationToken': Optional[str],
    }
)


DirectConnectDescribeDirectConnectGatewaysResult = TypedDict(
    'DirectConnectDescribeDirectConnectGatewaysResult', {
        'DirectConnectGatewayList': Optional[List[DirectConnectDirectConnectGateway]],
        'PaginationToken': Optional[str],
    }
)


DirectConnectDescribeInterconnectLoaResponse = TypedDict(
    'DirectConnectDescribeInterconnectLoaResponse', {
        'Loa': Optional[DirectConnectLoa],
    }
)


DirectConnectInterconnects = TypedDict(
    'DirectConnectInterconnects', {
        'InterconnectList': Optional[List[DirectConnectInterconnect]],
    }
)


DirectConnectLags = TypedDict(
    'DirectConnectLags', {
        'LagList': Optional[List[DirectConnectLag]],
    }
)


DirectConnectLocation = TypedDict(
    'DirectConnectLocation', {
        'LocationCode': Optional[str],
        'LocationName': Optional[str],
        'Region': Optional[str],
        'AvailablePortSpeeds': Optional[List[str]],
    }
)


DirectConnectLocations = TypedDict(
    'DirectConnectLocations', {
        'LocationList': Optional[List[DirectConnectLocation]],
    }
)


DirectConnectTag = TypedDict(
    'DirectConnectTag', {
        'TagKey': str,
        'TagValue': Optional[str],
    }
)


DirectConnectResourceTag = TypedDict(
    'DirectConnectResourceTag', {
        'ResourceArn': Optional[str],
        'TagList': Optional[List[DirectConnectTag]],
    }
)


DirectConnectDescribeTagsResponse = TypedDict(
    'DirectConnectDescribeTagsResponse', {
        'ResourceTagList': Optional[List[DirectConnectResourceTag]],
    }
)


DirectConnectVirtualGateway = TypedDict(
    'DirectConnectVirtualGateway', {
        'VirtualGatewayId': Optional[str],
        'VirtualGatewayState': Optional[str],
    }
)


DirectConnectVirtualGateways = TypedDict(
    'DirectConnectVirtualGateways', {
        'VirtualGatewayList': Optional[List[DirectConnectVirtualGateway]],
    }
)


DirectConnectVirtualInterfaces = TypedDict(
    'DirectConnectVirtualInterfaces', {
        'VirtualInterfaceList': Optional[List[DirectConnectVirtualInterface]],
    }
)


DirectConnectTagResourceResponse = TypedDict(
    'DirectConnectTagResourceResponse', {
    }
)


DirectConnectUntagResourceResponse = TypedDict(
    'DirectConnectUntagResourceResponse', {
    }
)


DirectConnectUpdateDirectConnectGatewayAssociationResult = TypedDict(
    'DirectConnectUpdateDirectConnectGatewayAssociationResult', {
        'DirectConnectGatewayAssociation': Optional[DirectConnectDirectConnectGatewayAssociation],
    }
)


class ApplicationDiscoveryService(BaseClient):
    def associate_configuration_items_to_application(self, *,
        applicationConfigurationId: str,
        configurationIds: List[str]
    ) -> ApplicationDiscoveryServiceAssociateConfigurationItemsToApplicationResponse: ...

    def batch_delete_import_data(self, *,
        importTaskIds: List[str]
    ) -> ApplicationDiscoveryServiceBatchDeleteImportDataResponse: ...

    def create_application(self, *,
        name: str,
        description: str = ...
    ) -> ApplicationDiscoveryServiceCreateApplicationResponse: ...

    def create_tags(self, *,
        configurationIds: List[str],
        tags: List[ApplicationDiscoveryServiceTag]
    ) -> ApplicationDiscoveryServiceCreateTagsResponse: ...

    def delete_applications(self, *,
        configurationIds: List[str]
    ) -> ApplicationDiscoveryServiceDeleteApplicationsResponse: ...

    def delete_tags(self, *,
        configurationIds: List[str],
        tags: List[ApplicationDiscoveryServiceTag] = ...
    ) -> ApplicationDiscoveryServiceDeleteTagsResponse: ...

    def describe_agents(self, *,
        agentIds: List[str] = ...,
        filters: List[ApplicationDiscoveryServiceFilter] = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> ApplicationDiscoveryServiceDescribeAgentsResponse: ...

    def describe_configurations(self, *,
        configurationIds: List[str]
    ) -> ApplicationDiscoveryServiceDescribeConfigurationsResponse: ...

    def describe_continuous_exports(self, *,
        exportIds: List[str] = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> ApplicationDiscoveryServiceDescribeContinuousExportsResponse: ...

    def describe_export_configurations(self, *,
        exportIds: List[str] = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> ApplicationDiscoveryServiceDescribeExportConfigurationsResponse: ...

    def describe_export_tasks(self, *,
        exportIds: List[str] = ...,
        filters: List[ApplicationDiscoveryServiceExportFilter] = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> ApplicationDiscoveryServiceDescribeExportTasksResponse: ...

    def describe_import_tasks(self, *,
        filters: List[ApplicationDiscoveryServiceImportTaskFilter] = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> ApplicationDiscoveryServiceDescribeImportTasksResponse: ...

    def describe_tags(self, *,
        filters: List[ApplicationDiscoveryServiceTagFilter] = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> ApplicationDiscoveryServiceDescribeTagsResponse: ...

    def disassociate_configuration_items_from_application(self, *,
        applicationConfigurationId: str,
        configurationIds: List[str]
    ) -> ApplicationDiscoveryServiceDisassociateConfigurationItemsFromApplicationResponse: ...

    def export_configurations(self) -> ApplicationDiscoveryServiceExportConfigurationsResponse: ...

    def get_discovery_summary(self) -> ApplicationDiscoveryServiceGetDiscoverySummaryResponse: ...

    def list_configurations(self, *,
        configurationType: str,
        filters: List[ApplicationDiscoveryServiceFilter] = ...,
        maxResults: int = ...,
        nextToken: str = ...,
        orderBy: List[ApplicationDiscoveryServiceOrderByElement] = ...
    ) -> ApplicationDiscoveryServiceListConfigurationsResponse: ...

    def list_server_neighbors(self, *,
        configurationId: str,
        portInformationNeeded: bool = ...,
        neighborConfigurationIds: List[str] = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> ApplicationDiscoveryServiceListServerNeighborsResponse: ...

    def start_continuous_export(self) -> ApplicationDiscoveryServiceStartContinuousExportResponse: ...

    def start_data_collection_by_agent_ids(self, *,
        agentIds: List[str]
    ) -> ApplicationDiscoveryServiceStartDataCollectionByAgentIdsResponse: ...

    def start_export_task(self, *,
        exportDataFormat: List[str] = ...,
        filters: List[ApplicationDiscoveryServiceExportFilter] = ...,
        startTime: datetime.datetime = ...,
        endTime: datetime.datetime = ...
    ) -> ApplicationDiscoveryServiceStartExportTaskResponse: ...

    def start_import_task(self, *,
        name: str,
        importUrl: str,
        clientRequestToken: str = ...
    ) -> ApplicationDiscoveryServiceStartImportTaskResponse: ...

    def stop_continuous_export(self, *,
        exportId: str
    ) -> ApplicationDiscoveryServiceStopContinuousExportResponse: ...

    def stop_data_collection_by_agent_ids(self, *,
        agentIds: List[str]
    ) -> ApplicationDiscoveryServiceStopDataCollectionByAgentIdsResponse: ...

    def update_application(self, *,
        configurationId: str,
        name: str = ...,
        description: str = ...
    ) -> ApplicationDiscoveryServiceUpdateApplicationResponse: ...


ApplicationDiscoveryServiceAssociateConfigurationItemsToApplicationResponse = TypedDict(
    'ApplicationDiscoveryServiceAssociateConfigurationItemsToApplicationResponse', {
    }
)


ApplicationDiscoveryServiceBatchDeleteImportDataError = TypedDict(
    'ApplicationDiscoveryServiceBatchDeleteImportDataError', {
        'ImportTaskIdentifier': Optional[str],
        'BatchDeleteImportDataErrorCode': Optional[str],
        'BatchDeleteImportDataErrorDescription': Optional[str],
    }
)


ApplicationDiscoveryServiceBatchDeleteImportDataResponse = TypedDict(
    'ApplicationDiscoveryServiceBatchDeleteImportDataResponse', {
        'BatchDeleteImportDataErrorList': Optional[List[ApplicationDiscoveryServiceBatchDeleteImportDataError]],
    }
)


ApplicationDiscoveryServiceCreateApplicationResponse = TypedDict(
    'ApplicationDiscoveryServiceCreateApplicationResponse', {
        'String': Optional[str],
    }
)


ApplicationDiscoveryServiceTag = TypedDict(
    'ApplicationDiscoveryServiceTag', {
        'TagKey': str,
        'TagValue': str,
    }
)


ApplicationDiscoveryServiceCreateTagsResponse = TypedDict(
    'ApplicationDiscoveryServiceCreateTagsResponse', {
    }
)


ApplicationDiscoveryServiceDeleteApplicationsResponse = TypedDict(
    'ApplicationDiscoveryServiceDeleteApplicationsResponse', {
    }
)


ApplicationDiscoveryServiceDeleteTagsResponse = TypedDict(
    'ApplicationDiscoveryServiceDeleteTagsResponse', {
    }
)


ApplicationDiscoveryServiceFilter = TypedDict(
    'ApplicationDiscoveryServiceFilter', {
        'String': str,
        'FilterValues': List[str],
        'Condition': str,
    }
)


ApplicationDiscoveryServiceAgentNetworkInfo = TypedDict(
    'ApplicationDiscoveryServiceAgentNetworkInfo', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


ApplicationDiscoveryServiceAgentInfo = TypedDict(
    'ApplicationDiscoveryServiceAgentInfo', {
        'AgentId': Optional[str],
        'String': Optional[str],
        'AgentNetworkInfoList': Optional[List[ApplicationDiscoveryServiceAgentNetworkInfo]],
        'String': Optional[str],
        'String': Optional[str],
        'AgentStatus': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


ApplicationDiscoveryServiceDescribeAgentsResponse = TypedDict(
    'ApplicationDiscoveryServiceDescribeAgentsResponse', {
        'AgentsInfo': Optional[List[ApplicationDiscoveryServiceAgentInfo]],
        'NextToken': Optional[str],
    }
)


ApplicationDiscoveryServiceDescribeConfigurationsResponse = TypedDict(
    'ApplicationDiscoveryServiceDescribeConfigurationsResponse', {
        'DescribeConfigurationsAttributes': Optional[List[Dict[str, str]]],
    }
)


ApplicationDiscoveryServiceContinuousExportDescription = TypedDict(
    'ApplicationDiscoveryServiceContinuousExportDescription', {
        'ConfigurationsExportId': Optional[str],
        'ContinuousExportStatus': Optional[str],
        'StringMax255': Optional[str],
        'S3Bucket': Optional[str],
        'TimeStamp': Optional[datetime.datetime],
        'TimeStamp': Optional[datetime.datetime],
        'DataSource': Optional[str],
        'SchemaStorageConfig': Optional[Dict[str, str]],
    }
)


ApplicationDiscoveryServiceDescribeContinuousExportsResponse = TypedDict(
    'ApplicationDiscoveryServiceDescribeContinuousExportsResponse', {
        'ContinuousExportDescriptions': Optional[List[ApplicationDiscoveryServiceContinuousExportDescription]],
        'NextToken': Optional[str],
    }
)


ApplicationDiscoveryServiceExportInfo = TypedDict(
    'ApplicationDiscoveryServiceExportInfo', {
        'ConfigurationsExportId': str,
        'ExportStatus': str,
        'ExportStatusMessage': str,
        'ExportRequestTime': datetime.datetime,
        'ConfigurationsDownloadUrl': Optional[str],
        'Boolean': Optional[bool],
        'TimeStamp': Optional[datetime.datetime],
        'TimeStamp': Optional[datetime.datetime],
    }
)


ApplicationDiscoveryServiceDescribeExportConfigurationsResponse = TypedDict(
    'ApplicationDiscoveryServiceDescribeExportConfigurationsResponse', {
        'ExportsInfo': Optional[List[ApplicationDiscoveryServiceExportInfo]],
        'NextToken': Optional[str],
    }
)


ApplicationDiscoveryServiceExportFilter = TypedDict(
    'ApplicationDiscoveryServiceExportFilter', {
        'FilterName': str,
        'FilterValues': List[str],
        'Condition': str,
    }
)


ApplicationDiscoveryServiceDescribeExportTasksResponse = TypedDict(
    'ApplicationDiscoveryServiceDescribeExportTasksResponse', {
        'ExportsInfo': Optional[List[ApplicationDiscoveryServiceExportInfo]],
        'NextToken': Optional[str],
    }
)


ApplicationDiscoveryServiceImportTaskFilter = TypedDict(
    'ApplicationDiscoveryServiceImportTaskFilter', {
        'ImportTaskFilterName': Optional[str],
        'ImportTaskFilterValueList': Optional[List[str]],
    }
)


ApplicationDiscoveryServiceImportTask = TypedDict(
    'ApplicationDiscoveryServiceImportTask', {
        'ImportTaskIdentifier': Optional[str],
        'ClientRequestToken': Optional[str],
        'ImportTaskName': Optional[str],
        'ImportURL': Optional[str],
        'ImportStatus': Optional[str],
        'TimeStamp': Optional[datetime.datetime],
        'TimeStamp': Optional[datetime.datetime],
        'TimeStamp': Optional[datetime.datetime],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'S3PresignedUrl': Optional[str],
    }
)


ApplicationDiscoveryServiceDescribeImportTasksResponse = TypedDict(
    'ApplicationDiscoveryServiceDescribeImportTasksResponse', {
        'NextToken': Optional[str],
        'ImportTaskList': Optional[List[ApplicationDiscoveryServiceImportTask]],
    }
)


ApplicationDiscoveryServiceTagFilter = TypedDict(
    'ApplicationDiscoveryServiceTagFilter', {
        'FilterName': str,
        'FilterValues': List[str],
    }
)


ApplicationDiscoveryServiceConfigurationTag = TypedDict(
    'ApplicationDiscoveryServiceConfigurationTag', {
        'ConfigurationItemType': Optional[str],
        'ConfigurationId': Optional[str],
        'TagKey': Optional[str],
        'TagValue': Optional[str],
        'TimeStamp': Optional[datetime.datetime],
    }
)


ApplicationDiscoveryServiceDescribeTagsResponse = TypedDict(
    'ApplicationDiscoveryServiceDescribeTagsResponse', {
        'ConfigurationTagSet': Optional[List[ApplicationDiscoveryServiceConfigurationTag]],
        'NextToken': Optional[str],
    }
)


ApplicationDiscoveryServiceDisassociateConfigurationItemsFromApplicationResponse = TypedDict(
    'ApplicationDiscoveryServiceDisassociateConfigurationItemsFromApplicationResponse', {
    }
)


ApplicationDiscoveryServiceExportConfigurationsResponse = TypedDict(
    'ApplicationDiscoveryServiceExportConfigurationsResponse', {
        'ConfigurationsExportId': Optional[str],
    }
)


ApplicationDiscoveryServiceCustomerAgentInfo = TypedDict(
    'ApplicationDiscoveryServiceCustomerAgentInfo', {
        'Integer': int,
        'Integer': int,
        'Integer': int,
        'Integer': int,
        'Integer': int,
        'Integer': int,
        'Integer': int,
    }
)


ApplicationDiscoveryServiceCustomerConnectorInfo = TypedDict(
    'ApplicationDiscoveryServiceCustomerConnectorInfo', {
        'Integer': int,
        'Integer': int,
        'Integer': int,
        'Integer': int,
        'Integer': int,
        'Integer': int,
        'Integer': int,
    }
)


ApplicationDiscoveryServiceGetDiscoverySummaryResponse = TypedDict(
    'ApplicationDiscoveryServiceGetDiscoverySummaryResponse', {
        'Long': Optional[int],
        'Long': Optional[int],
        'Long': Optional[int],
        'Long': Optional[int],
        'CustomerAgentInfo': Optional[ApplicationDiscoveryServiceCustomerAgentInfo],
        'CustomerConnectorInfo': Optional[ApplicationDiscoveryServiceCustomerConnectorInfo],
    }
)


ApplicationDiscoveryServiceOrderByElement = TypedDict(
    'ApplicationDiscoveryServiceOrderByElement', {
        'String': str,
        'orderString': Optional[str],
    }
)


ApplicationDiscoveryServiceListConfigurationsResponse = TypedDict(
    'ApplicationDiscoveryServiceListConfigurationsResponse', {
        'Configurations': Optional[List[Dict[str, str]]],
        'NextToken': Optional[str],
    }
)


ApplicationDiscoveryServiceNeighborConnectionDetail = TypedDict(
    'ApplicationDiscoveryServiceNeighborConnectionDetail', {
        'ConfigurationId': str,
        'ConfigurationId': str,
        'Long': int,
        'BoxedInteger': Optional[int],
        'String': Optional[str],
    }
)


ApplicationDiscoveryServiceListServerNeighborsResponse = TypedDict(
    'ApplicationDiscoveryServiceListServerNeighborsResponse', {
        'NeighborDetailsList': List[ApplicationDiscoveryServiceNeighborConnectionDetail],
        'String': Optional[str],
        'Long': Optional[int],
    }
)


ApplicationDiscoveryServiceStartContinuousExportResponse = TypedDict(
    'ApplicationDiscoveryServiceStartContinuousExportResponse', {
        'ConfigurationsExportId': Optional[str],
        'S3Bucket': Optional[str],
        'TimeStamp': Optional[datetime.datetime],
        'DataSource': Optional[str],
        'SchemaStorageConfig': Optional[Dict[str, str]],
    }
)


ApplicationDiscoveryServiceAgentConfigurationStatus = TypedDict(
    'ApplicationDiscoveryServiceAgentConfigurationStatus', {
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
    }
)


ApplicationDiscoveryServiceStartDataCollectionByAgentIdsResponse = TypedDict(
    'ApplicationDiscoveryServiceStartDataCollectionByAgentIdsResponse', {
        'AgentConfigurationStatusList': Optional[List[ApplicationDiscoveryServiceAgentConfigurationStatus]],
    }
)


ApplicationDiscoveryServiceStartExportTaskResponse = TypedDict(
    'ApplicationDiscoveryServiceStartExportTaskResponse', {
        'ConfigurationsExportId': Optional[str],
    }
)


ApplicationDiscoveryServiceStartImportTaskResponse = TypedDict(
    'ApplicationDiscoveryServiceStartImportTaskResponse', {
        'ImportTask': Optional[ApplicationDiscoveryServiceImportTask],
    }
)


ApplicationDiscoveryServiceStopContinuousExportResponse = TypedDict(
    'ApplicationDiscoveryServiceStopContinuousExportResponse', {
        'TimeStamp': Optional[datetime.datetime],
        'TimeStamp': Optional[datetime.datetime],
    }
)


ApplicationDiscoveryServiceStopDataCollectionByAgentIdsResponse = TypedDict(
    'ApplicationDiscoveryServiceStopDataCollectionByAgentIdsResponse', {
        'AgentConfigurationStatusList': Optional[List[ApplicationDiscoveryServiceAgentConfigurationStatus]],
    }
)


ApplicationDiscoveryServiceUpdateApplicationResponse = TypedDict(
    'ApplicationDiscoveryServiceUpdateApplicationResponse', {
    }
)


class DLM(BaseClient):
    def create_lifecycle_policy(self, *,
        ExecutionRoleArn: str,
        Description: str,
        State: str,
        PolicyDetails: DLMPolicyDetails
    ) -> DLMCreateLifecyclePolicyResponse: ...

    def delete_lifecycle_policy(self, *,
        PolicyId: str
    ) -> DLMDeleteLifecyclePolicyResponse: ...

    def get_lifecycle_policies(self, *,
        PolicyIds: List[str] = ...,
        State: str = ...,
        ResourceTypes: List[str] = ...,
        TargetTags: List[str] = ...,
        TagsToAdd: List[str] = ...
    ) -> DLMGetLifecyclePoliciesResponse: ...

    def get_lifecycle_policy(self, *,
        PolicyId: str
    ) -> DLMGetLifecyclePolicyResponse: ...

    def update_lifecycle_policy(self, *,
        PolicyId: str,
        ExecutionRoleArn: str = ...,
        State: str = ...,
        Description: str = ...,
        PolicyDetails: DLMPolicyDetails = ...
    ) -> DLMUpdateLifecyclePolicyResponse: ...


DLMTag = TypedDict(
    'DLMTag', {
        'String': str,
        'String': str,
    }
)


DLMCreateRule = TypedDict(
    'DLMCreateRule', {
        'Interval': int,
        'IntervalUnitValues': str,
        'TimesList': Optional[List[str]],
    }
)


DLMRetainRule = TypedDict(
    'DLMRetainRule', {
        'Count': int,
    }
)


DLMSchedule = TypedDict(
    'DLMSchedule', {
        'ScheduleName': Optional[str],
        'CopyTags': Optional[bool],
        'TagsToAddList': Optional[List[DLMTag]],
        'CreateRule': Optional[DLMCreateRule],
        'RetainRule': Optional[DLMRetainRule],
    }
)


DLMPolicyDetails = TypedDict(
    'DLMPolicyDetails', {
        'ResourceTypeValuesList': Optional[List[str]],
        'TargetTagList': Optional[List[DLMTag]],
        'ScheduleList': Optional[List[DLMSchedule]],
    }
)


DLMCreateLifecyclePolicyResponse = TypedDict(
    'DLMCreateLifecyclePolicyResponse', {
        'PolicyId': Optional[str],
    }
)


DLMDeleteLifecyclePolicyResponse = TypedDict(
    'DLMDeleteLifecyclePolicyResponse', {
    }
)


DLMLifecyclePolicySummary = TypedDict(
    'DLMLifecyclePolicySummary', {
        'PolicyId': Optional[str],
        'PolicyDescription': Optional[str],
        'GettablePolicyStateValues': Optional[str],
    }
)


DLMGetLifecyclePoliciesResponse = TypedDict(
    'DLMGetLifecyclePoliciesResponse', {
        'LifecyclePolicySummaryList': Optional[List[DLMLifecyclePolicySummary]],
    }
)


DLMLifecyclePolicy = TypedDict(
    'DLMLifecyclePolicy', {
        'PolicyId': Optional[str],
        'PolicyDescription': Optional[str],
        'GettablePolicyStateValues': Optional[str],
        'ExecutionRoleArn': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'PolicyDetails': Optional[DLMPolicyDetails],
    }
)


DLMGetLifecyclePolicyResponse = TypedDict(
    'DLMGetLifecyclePolicyResponse', {
        'LifecyclePolicy': Optional[DLMLifecyclePolicy],
    }
)


DLMUpdateLifecyclePolicyResponse = TypedDict(
    'DLMUpdateLifecyclePolicyResponse', {
    }
)


class DatabaseMigrationService(BaseClient):
    def add_tags_to_resource(self, *,
        ResourceArn: str,
        Tags: List[DatabaseMigrationServiceTag]
    ) -> DatabaseMigrationServiceAddTagsToResourceResponse: ...

    def apply_pending_maintenance_action(self, *,
        ReplicationInstanceArn: str,
        ApplyAction: str,
        OptInType: str
    ) -> DatabaseMigrationServiceApplyPendingMaintenanceActionResponse: ...

    def create_endpoint(self, *,
        EndpointIdentifier: str,
        EndpointType: str,
        EngineName: str,
        Username: str = ...,
        Password: str = ...,
        ServerName: str = ...,
        Port: int = ...,
        DatabaseName: str = ...,
        ExtraConnectionAttributes: str = ...,
        KmsKeyId: str = ...,
        Tags: List[DatabaseMigrationServiceTag] = ...,
        CertificateArn: str = ...,
        SslMode: str = ...,
        ServiceAccessRoleArn: str = ...,
        ExternalTableDefinition: str = ...,
        DynamoDbSettings: DatabaseMigrationServiceDynamoDbSettings = ...,
        S3Settings: DatabaseMigrationServiceS3Settings = ...,
        DmsTransferSettings: DatabaseMigrationServiceDmsTransferSettings = ...,
        MongoDbSettings: DatabaseMigrationServiceMongoDbSettings = ...,
        KinesisSettings: DatabaseMigrationServiceKinesisSettings = ...,
        ElasticsearchSettings: DatabaseMigrationServiceElasticsearchSettings = ...,
        RedshiftSettings: DatabaseMigrationServiceRedshiftSettings = ...
    ) -> DatabaseMigrationServiceCreateEndpointResponse: ...

    def create_event_subscription(self, *,
        SubscriptionName: str,
        SnsTopicArn: str,
        SourceType: str = ...,
        EventCategories: List[str] = ...,
        SourceIds: List[str] = ...,
        Enabled: bool = ...,
        Tags: List[DatabaseMigrationServiceTag] = ...
    ) -> DatabaseMigrationServiceCreateEventSubscriptionResponse: ...

    def create_replication_instance(self, *,
        ReplicationInstanceIdentifier: str,
        ReplicationInstanceClass: str,
        AllocatedStorage: int = ...,
        VpcSecurityGroupIds: List[str] = ...,
        AvailabilityZone: str = ...,
        ReplicationSubnetGroupIdentifier: str = ...,
        PreferredMaintenanceWindow: str = ...,
        MultiAZ: bool = ...,
        EngineVersion: str = ...,
        AutoMinorVersionUpgrade: bool = ...,
        Tags: List[DatabaseMigrationServiceTag] = ...,
        KmsKeyId: str = ...,
        PubliclyAccessible: bool = ...,
        DnsNameServers: str = ...
    ) -> DatabaseMigrationServiceCreateReplicationInstanceResponse: ...

    def create_replication_subnet_group(self, *,
        ReplicationSubnetGroupIdentifier: str,
        ReplicationSubnetGroupDescription: str,
        SubnetIds: List[str],
        Tags: List[DatabaseMigrationServiceTag] = ...
    ) -> DatabaseMigrationServiceCreateReplicationSubnetGroupResponse: ...

    def create_replication_task(self, *,
        ReplicationTaskIdentifier: str,
        SourceEndpointArn: str,
        TargetEndpointArn: str,
        ReplicationInstanceArn: str,
        MigrationType: str,
        TableMappings: str,
        ReplicationTaskSettings: str = ...,
        CdcStartTime: datetime.datetime = ...,
        CdcStartPosition: str = ...,
        CdcStopPosition: str = ...,
        Tags: List[DatabaseMigrationServiceTag] = ...
    ) -> DatabaseMigrationServiceCreateReplicationTaskResponse: ...

    def delete_certificate(self, *,
        CertificateArn: str
    ) -> DatabaseMigrationServiceDeleteCertificateResponse: ...

    def delete_endpoint(self, *,
        EndpointArn: str
    ) -> DatabaseMigrationServiceDeleteEndpointResponse: ...

    def delete_event_subscription(self, *,
        SubscriptionName: str
    ) -> DatabaseMigrationServiceDeleteEventSubscriptionResponse: ...

    def delete_replication_instance(self, *,
        ReplicationInstanceArn: str
    ) -> DatabaseMigrationServiceDeleteReplicationInstanceResponse: ...

    def delete_replication_subnet_group(self, *,
        ReplicationSubnetGroupIdentifier: str
    ) -> DatabaseMigrationServiceDeleteReplicationSubnetGroupResponse: ...

    def delete_replication_task(self, *,
        ReplicationTaskArn: str
    ) -> DatabaseMigrationServiceDeleteReplicationTaskResponse: ...

    def describe_account_attributes(self) -> DatabaseMigrationServiceDescribeAccountAttributesResponse: ...

    def describe_certificates(self, *,
        Filters: List[DatabaseMigrationServiceFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DatabaseMigrationServiceDescribeCertificatesResponse: ...

    def describe_connections(self, *,
        Filters: List[DatabaseMigrationServiceFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DatabaseMigrationServiceDescribeConnectionsResponse: ...

    def describe_endpoint_types(self, *,
        Filters: List[DatabaseMigrationServiceFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DatabaseMigrationServiceDescribeEndpointTypesResponse: ...

    def describe_endpoints(self, *,
        Filters: List[DatabaseMigrationServiceFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DatabaseMigrationServiceDescribeEndpointsResponse: ...

    def describe_event_categories(self, *,
        SourceType: str = ...,
        Filters: List[DatabaseMigrationServiceFilter] = ...
    ) -> DatabaseMigrationServiceDescribeEventCategoriesResponse: ...

    def describe_event_subscriptions(self, *,
        SubscriptionName: str = ...,
        Filters: List[DatabaseMigrationServiceFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DatabaseMigrationServiceDescribeEventSubscriptionsResponse: ...

    def describe_events(self, *,
        SourceIdentifier: str = ...,
        SourceType: str = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        Duration: int = ...,
        EventCategories: List[str] = ...,
        Filters: List[DatabaseMigrationServiceFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DatabaseMigrationServiceDescribeEventsResponse: ...

    def describe_orderable_replication_instances(self, *,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DatabaseMigrationServiceDescribeOrderableReplicationInstancesResponse: ...

    def describe_pending_maintenance_actions(self, *,
        ReplicationInstanceArn: str = ...,
        Filters: List[DatabaseMigrationServiceFilter] = ...,
        Marker: str = ...,
        MaxRecords: int = ...
    ) -> DatabaseMigrationServiceDescribePendingMaintenanceActionsResponse: ...

    def describe_refresh_schemas_status(self, *,
        EndpointArn: str
    ) -> DatabaseMigrationServiceDescribeRefreshSchemasStatusResponse: ...

    def describe_replication_instance_task_logs(self, *,
        ReplicationInstanceArn: str,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DatabaseMigrationServiceDescribeReplicationInstanceTaskLogsResponse: ...

    def describe_replication_instances(self, *,
        Filters: List[DatabaseMigrationServiceFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DatabaseMigrationServiceDescribeReplicationInstancesResponse: ...

    def describe_replication_subnet_groups(self, *,
        Filters: List[DatabaseMigrationServiceFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DatabaseMigrationServiceDescribeReplicationSubnetGroupsResponse: ...

    def describe_replication_task_assessment_results(self, *,
        ReplicationTaskArn: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DatabaseMigrationServiceDescribeReplicationTaskAssessmentResultsResponse: ...

    def describe_replication_tasks(self, *,
        Filters: List[DatabaseMigrationServiceFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        WithoutSettings: bool = ...
    ) -> DatabaseMigrationServiceDescribeReplicationTasksResponse: ...

    def describe_schemas(self, *,
        EndpointArn: str,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DatabaseMigrationServiceDescribeSchemasResponse: ...

    def describe_table_statistics(self, *,
        ReplicationTaskArn: str,
        MaxRecords: int = ...,
        Marker: str = ...,
        Filters: List[DatabaseMigrationServiceFilter] = ...
    ) -> DatabaseMigrationServiceDescribeTableStatisticsResponse: ...

    def import_certificate(self, *,
        CertificateIdentifier: str,
        CertificatePem: str = ...,
        CertificateWallet: bytes = ...,
        Tags: List[DatabaseMigrationServiceTag] = ...
    ) -> DatabaseMigrationServiceImportCertificateResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> DatabaseMigrationServiceListTagsForResourceResponse: ...

    def modify_endpoint(self, *,
        EndpointArn: str,
        EndpointIdentifier: str = ...,
        EndpointType: str = ...,
        EngineName: str = ...,
        Username: str = ...,
        Password: str = ...,
        ServerName: str = ...,
        Port: int = ...,
        DatabaseName: str = ...,
        ExtraConnectionAttributes: str = ...,
        CertificateArn: str = ...,
        SslMode: str = ...,
        ServiceAccessRoleArn: str = ...,
        ExternalTableDefinition: str = ...,
        DynamoDbSettings: DatabaseMigrationServiceDynamoDbSettings = ...,
        S3Settings: DatabaseMigrationServiceS3Settings = ...,
        DmsTransferSettings: DatabaseMigrationServiceDmsTransferSettings = ...,
        MongoDbSettings: DatabaseMigrationServiceMongoDbSettings = ...,
        KinesisSettings: DatabaseMigrationServiceKinesisSettings = ...,
        ElasticsearchSettings: DatabaseMigrationServiceElasticsearchSettings = ...,
        RedshiftSettings: DatabaseMigrationServiceRedshiftSettings = ...
    ) -> DatabaseMigrationServiceModifyEndpointResponse: ...

    def modify_event_subscription(self, *,
        SubscriptionName: str,
        SnsTopicArn: str = ...,
        SourceType: str = ...,
        EventCategories: List[str] = ...,
        Enabled: bool = ...
    ) -> DatabaseMigrationServiceModifyEventSubscriptionResponse: ...

    def modify_replication_instance(self, *,
        ReplicationInstanceArn: str,
        AllocatedStorage: int = ...,
        ApplyImmediately: bool = ...,
        ReplicationInstanceClass: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        PreferredMaintenanceWindow: str = ...,
        MultiAZ: bool = ...,
        EngineVersion: str = ...,
        AllowMajorVersionUpgrade: bool = ...,
        AutoMinorVersionUpgrade: bool = ...,
        ReplicationInstanceIdentifier: str = ...
    ) -> DatabaseMigrationServiceModifyReplicationInstanceResponse: ...

    def modify_replication_subnet_group(self, *,
        ReplicationSubnetGroupIdentifier: str,
        SubnetIds: List[str],
        ReplicationSubnetGroupDescription: str = ...
    ) -> DatabaseMigrationServiceModifyReplicationSubnetGroupResponse: ...

    def modify_replication_task(self, *,
        ReplicationTaskArn: str,
        ReplicationTaskIdentifier: str = ...,
        MigrationType: str = ...,
        TableMappings: str = ...,
        ReplicationTaskSettings: str = ...,
        CdcStartTime: datetime.datetime = ...,
        CdcStartPosition: str = ...,
        CdcStopPosition: str = ...
    ) -> DatabaseMigrationServiceModifyReplicationTaskResponse: ...

    def reboot_replication_instance(self, *,
        ReplicationInstanceArn: str,
        ForceFailover: bool = ...
    ) -> DatabaseMigrationServiceRebootReplicationInstanceResponse: ...

    def refresh_schemas(self, *,
        EndpointArn: str,
        ReplicationInstanceArn: str
    ) -> DatabaseMigrationServiceRefreshSchemasResponse: ...

    def reload_tables(self, *,
        ReplicationTaskArn: str,
        TablesToReload: List[DatabaseMigrationServiceTableToReload],
        ReloadOption: str = ...
    ) -> DatabaseMigrationServiceReloadTablesResponse: ...

    def remove_tags_from_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ) -> DatabaseMigrationServiceRemoveTagsFromResourceResponse: ...

    def start_replication_task(self, *,
        ReplicationTaskArn: str,
        StartReplicationTaskType: str,
        CdcStartTime: datetime.datetime = ...,
        CdcStartPosition: str = ...,
        CdcStopPosition: str = ...
    ) -> DatabaseMigrationServiceStartReplicationTaskResponse: ...

    def start_replication_task_assessment(self, *,
        ReplicationTaskArn: str
    ) -> DatabaseMigrationServiceStartReplicationTaskAssessmentResponse: ...

    def stop_replication_task(self, *,
        ReplicationTaskArn: str
    ) -> DatabaseMigrationServiceStopReplicationTaskResponse: ...

    def test_connection(self, *,
        ReplicationInstanceArn: str,
        EndpointArn: str
    ) -> DatabaseMigrationServiceTestConnectionResponse: ...


DatabaseMigrationServiceTag = TypedDict(
    'DatabaseMigrationServiceTag', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


DatabaseMigrationServiceAddTagsToResourceResponse = TypedDict(
    'DatabaseMigrationServiceAddTagsToResourceResponse', {
    }
)


DatabaseMigrationServicePendingMaintenanceAction = TypedDict(
    'DatabaseMigrationServicePendingMaintenanceAction', {
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
    }
)


DatabaseMigrationServiceResourcePendingMaintenanceActions = TypedDict(
    'DatabaseMigrationServiceResourcePendingMaintenanceActions', {
        'String': Optional[str],
        'PendingMaintenanceActionDetails': Optional[List[DatabaseMigrationServicePendingMaintenanceAction]],
    }
)


DatabaseMigrationServiceApplyPendingMaintenanceActionResponse = TypedDict(
    'DatabaseMigrationServiceApplyPendingMaintenanceActionResponse', {
        'ResourcePendingMaintenanceActions': Optional[DatabaseMigrationServiceResourcePendingMaintenanceActions],
    }
)


DatabaseMigrationServiceDynamoDbSettings = TypedDict(
    'DatabaseMigrationServiceDynamoDbSettings', {
        'String': str,
    }
)


DatabaseMigrationServiceS3Settings = TypedDict(
    'DatabaseMigrationServiceS3Settings', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'CompressionTypeValue': Optional[str],
        'EncryptionModeValue': Optional[str],
        'String': Optional[str],
        'DataFormatValue': Optional[str],
        'EncodingTypeValue': Optional[str],
        'IntegerOptional': Optional[int],
        'IntegerOptional': Optional[int],
        'IntegerOptional': Optional[int],
        'ParquetVersionValue': Optional[str],
        'BooleanOptional': Optional[bool],
        'BooleanOptional': Optional[bool],
    }
)


DatabaseMigrationServiceDmsTransferSettings = TypedDict(
    'DatabaseMigrationServiceDmsTransferSettings', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


DatabaseMigrationServiceMongoDbSettings = TypedDict(
    'DatabaseMigrationServiceMongoDbSettings', {
        'String': Optional[str],
        'SecretString': Optional[str],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'AuthTypeValue': Optional[str],
        'AuthMechanismValue': Optional[str],
        'NestingLevelValue': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


DatabaseMigrationServiceKinesisSettings = TypedDict(
    'DatabaseMigrationServiceKinesisSettings', {
        'String': Optional[str],
        'MessageFormatValue': Optional[str],
        'String': Optional[str],
    }
)


DatabaseMigrationServiceElasticsearchSettings = TypedDict(
    'DatabaseMigrationServiceElasticsearchSettings', {
        'String': str,
        'String': str,
        'IntegerOptional': Optional[int],
        'IntegerOptional': Optional[int],
    }
)


DatabaseMigrationServiceRedshiftSettings = TypedDict(
    'DatabaseMigrationServiceRedshiftSettings', {
        'BooleanOptional': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'BooleanOptional': Optional[bool],
        'EncryptionModeValue': Optional[str],
        'IntegerOptional': Optional[int],
        'IntegerOptional': Optional[int],
        'IntegerOptional': Optional[int],
        'SecretString': Optional[str],
        'IntegerOptional': Optional[int],
        'BooleanOptional': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'BooleanOptional': Optional[bool],
        'BooleanOptional': Optional[bool],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
    }
)


DatabaseMigrationServiceEndpoint = TypedDict(
    'DatabaseMigrationServiceEndpoint', {
        'String': Optional[str],
        'ReplicationEndpointTypeValue': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DmsSslModeValue': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DynamoDbSettings': Optional[DatabaseMigrationServiceDynamoDbSettings],
        'S3Settings': Optional[DatabaseMigrationServiceS3Settings],
        'DmsTransferSettings': Optional[DatabaseMigrationServiceDmsTransferSettings],
        'MongoDbSettings': Optional[DatabaseMigrationServiceMongoDbSettings],
        'KinesisSettings': Optional[DatabaseMigrationServiceKinesisSettings],
        'ElasticsearchSettings': Optional[DatabaseMigrationServiceElasticsearchSettings],
        'RedshiftSettings': Optional[DatabaseMigrationServiceRedshiftSettings],
    }
)


DatabaseMigrationServiceCreateEndpointResponse = TypedDict(
    'DatabaseMigrationServiceCreateEndpointResponse', {
        'Endpoint': Optional[DatabaseMigrationServiceEndpoint],
    }
)


DatabaseMigrationServiceEventSubscription = TypedDict(
    'DatabaseMigrationServiceEventSubscription', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'SourceIdsList': Optional[List[str]],
        'EventCategoriesList': Optional[List[str]],
        'Boolean': Optional[bool],
    }
)


DatabaseMigrationServiceCreateEventSubscriptionResponse = TypedDict(
    'DatabaseMigrationServiceCreateEventSubscriptionResponse', {
        'EventSubscription': Optional[DatabaseMigrationServiceEventSubscription],
    }
)


DatabaseMigrationServiceVpcSecurityGroupMembership = TypedDict(
    'DatabaseMigrationServiceVpcSecurityGroupMembership', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


DatabaseMigrationServiceAvailabilityZone = TypedDict(
    'DatabaseMigrationServiceAvailabilityZone', {
        'String': Optional[str],
    }
)


DatabaseMigrationServiceSubnet = TypedDict(
    'DatabaseMigrationServiceSubnet', {
        'String': Optional[str],
        'AvailabilityZone': Optional[DatabaseMigrationServiceAvailabilityZone],
        'String': Optional[str],
    }
)


DatabaseMigrationServiceReplicationSubnetGroup = TypedDict(
    'DatabaseMigrationServiceReplicationSubnetGroup', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'SubnetList': Optional[List[DatabaseMigrationServiceSubnet]],
    }
)


DatabaseMigrationServiceReplicationPendingModifiedValues = TypedDict(
    'DatabaseMigrationServiceReplicationPendingModifiedValues', {
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'BooleanOptional': Optional[bool],
        'String': Optional[str],
    }
)


DatabaseMigrationServiceReplicationInstance = TypedDict(
    'DatabaseMigrationServiceReplicationInstance', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'TStamp': Optional[datetime.datetime],
        'VpcSecurityGroupMembershipList': Optional[List[DatabaseMigrationServiceVpcSecurityGroupMembership]],
        'String': Optional[str],
        'ReplicationSubnetGroup': Optional[DatabaseMigrationServiceReplicationSubnetGroup],
        'String': Optional[str],
        'ReplicationPendingModifiedValues': Optional[DatabaseMigrationServiceReplicationPendingModifiedValues],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'ReplicationInstancePublicIpAddressList': Optional[List[str]],
        'ReplicationInstancePrivateIpAddressList': Optional[List[str]],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
    }
)


DatabaseMigrationServiceCreateReplicationInstanceResponse = TypedDict(
    'DatabaseMigrationServiceCreateReplicationInstanceResponse', {
        'ReplicationInstance': Optional[DatabaseMigrationServiceReplicationInstance],
    }
)


DatabaseMigrationServiceCreateReplicationSubnetGroupResponse = TypedDict(
    'DatabaseMigrationServiceCreateReplicationSubnetGroupResponse', {
        'ReplicationSubnetGroup': Optional[DatabaseMigrationServiceReplicationSubnetGroup],
    }
)


DatabaseMigrationServiceReplicationTaskStats = TypedDict(
    'DatabaseMigrationServiceReplicationTaskStats', {
        'Integer': Optional[int],
        'Long': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
    }
)


DatabaseMigrationServiceReplicationTask = TypedDict(
    'DatabaseMigrationServiceReplicationTask', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'MigrationTypeValue': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'ReplicationTaskStats': Optional[DatabaseMigrationServiceReplicationTaskStats],
    }
)


DatabaseMigrationServiceCreateReplicationTaskResponse = TypedDict(
    'DatabaseMigrationServiceCreateReplicationTaskResponse', {
        'ReplicationTask': Optional[DatabaseMigrationServiceReplicationTask],
    }
)


DatabaseMigrationServiceCertificate = TypedDict(
    'DatabaseMigrationServiceCertificate', {
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'CertificateWallet': Optional[bytes],
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
    }
)


DatabaseMigrationServiceDeleteCertificateResponse = TypedDict(
    'DatabaseMigrationServiceDeleteCertificateResponse', {
        'Certificate': Optional[DatabaseMigrationServiceCertificate],
    }
)


DatabaseMigrationServiceDeleteEndpointResponse = TypedDict(
    'DatabaseMigrationServiceDeleteEndpointResponse', {
        'Endpoint': Optional[DatabaseMigrationServiceEndpoint],
    }
)


DatabaseMigrationServiceDeleteEventSubscriptionResponse = TypedDict(
    'DatabaseMigrationServiceDeleteEventSubscriptionResponse', {
        'EventSubscription': Optional[DatabaseMigrationServiceEventSubscription],
    }
)


DatabaseMigrationServiceDeleteReplicationInstanceResponse = TypedDict(
    'DatabaseMigrationServiceDeleteReplicationInstanceResponse', {
        'ReplicationInstance': Optional[DatabaseMigrationServiceReplicationInstance],
    }
)


DatabaseMigrationServiceDeleteReplicationSubnetGroupResponse = TypedDict(
    'DatabaseMigrationServiceDeleteReplicationSubnetGroupResponse', {
    }
)


DatabaseMigrationServiceDeleteReplicationTaskResponse = TypedDict(
    'DatabaseMigrationServiceDeleteReplicationTaskResponse', {
        'ReplicationTask': Optional[DatabaseMigrationServiceReplicationTask],
    }
)


DatabaseMigrationServiceAccountQuota = TypedDict(
    'DatabaseMigrationServiceAccountQuota', {
        'String': Optional[str],
        'Long': Optional[int],
        'Long': Optional[int],
    }
)


DatabaseMigrationServiceDescribeAccountAttributesResponse = TypedDict(
    'DatabaseMigrationServiceDescribeAccountAttributesResponse', {
        'AccountQuotaList': Optional[List[DatabaseMigrationServiceAccountQuota]],
    }
)


DatabaseMigrationServiceFilter = TypedDict(
    'DatabaseMigrationServiceFilter', {
        'String': str,
        'FilterValueList': List[str],
    }
)


DatabaseMigrationServiceDescribeCertificatesResponse = TypedDict(
    'DatabaseMigrationServiceDescribeCertificatesResponse', {
        'String': Optional[str],
        'CertificateList': Optional[List[DatabaseMigrationServiceCertificate]],
    }
)


DatabaseMigrationServiceConnection = TypedDict(
    'DatabaseMigrationServiceConnection', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


DatabaseMigrationServiceDescribeConnectionsResponse = TypedDict(
    'DatabaseMigrationServiceDescribeConnectionsResponse', {
        'String': Optional[str],
        'ConnectionList': Optional[List[DatabaseMigrationServiceConnection]],
    }
)


DatabaseMigrationServiceSupportedEndpointType = TypedDict(
    'DatabaseMigrationServiceSupportedEndpointType', {
        'String': Optional[str],
        'Boolean': Optional[bool],
        'ReplicationEndpointTypeValue': Optional[str],
        'String': Optional[str],
    }
)


DatabaseMigrationServiceDescribeEndpointTypesResponse = TypedDict(
    'DatabaseMigrationServiceDescribeEndpointTypesResponse', {
        'String': Optional[str],
        'SupportedEndpointTypeList': Optional[List[DatabaseMigrationServiceSupportedEndpointType]],
    }
)


DatabaseMigrationServiceDescribeEndpointsResponse = TypedDict(
    'DatabaseMigrationServiceDescribeEndpointsResponse', {
        'String': Optional[str],
        'EndpointList': Optional[List[DatabaseMigrationServiceEndpoint]],
    }
)


DatabaseMigrationServiceEventCategoryGroup = TypedDict(
    'DatabaseMigrationServiceEventCategoryGroup', {
        'String': Optional[str],
        'EventCategoriesList': Optional[List[str]],
    }
)


DatabaseMigrationServiceDescribeEventCategoriesResponse = TypedDict(
    'DatabaseMigrationServiceDescribeEventCategoriesResponse', {
        'EventCategoryGroupList': Optional[List[DatabaseMigrationServiceEventCategoryGroup]],
    }
)


DatabaseMigrationServiceDescribeEventSubscriptionsResponse = TypedDict(
    'DatabaseMigrationServiceDescribeEventSubscriptionsResponse', {
        'String': Optional[str],
        'EventSubscriptionsList': Optional[List[DatabaseMigrationServiceEventSubscription]],
    }
)


DatabaseMigrationServiceEvent = TypedDict(
    'DatabaseMigrationServiceEvent', {
        'String': Optional[str],
        'SourceType': Optional[str],
        'String': Optional[str],
        'EventCategoriesList': Optional[List[str]],
        'TStamp': Optional[datetime.datetime],
    }
)


DatabaseMigrationServiceDescribeEventsResponse = TypedDict(
    'DatabaseMigrationServiceDescribeEventsResponse', {
        'String': Optional[str],
        'EventList': Optional[List[DatabaseMigrationServiceEvent]],
    }
)


DatabaseMigrationServiceOrderableReplicationInstance = TypedDict(
    'DatabaseMigrationServiceOrderableReplicationInstance', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'AvailabilityZonesList': Optional[List[str]],
    }
)


DatabaseMigrationServiceDescribeOrderableReplicationInstancesResponse = TypedDict(
    'DatabaseMigrationServiceDescribeOrderableReplicationInstancesResponse', {
        'OrderableReplicationInstanceList': Optional[List[DatabaseMigrationServiceOrderableReplicationInstance]],
        'String': Optional[str],
    }
)


DatabaseMigrationServiceDescribePendingMaintenanceActionsResponse = TypedDict(
    'DatabaseMigrationServiceDescribePendingMaintenanceActionsResponse', {
        'PendingMaintenanceActions': Optional[List[DatabaseMigrationServiceResourcePendingMaintenanceActions]],
        'String': Optional[str],
    }
)


DatabaseMigrationServiceRefreshSchemasStatus = TypedDict(
    'DatabaseMigrationServiceRefreshSchemasStatus', {
        'String': Optional[str],
        'String': Optional[str],
        'RefreshSchemasStatusTypeValue': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
    }
)


DatabaseMigrationServiceDescribeRefreshSchemasStatusResponse = TypedDict(
    'DatabaseMigrationServiceDescribeRefreshSchemasStatusResponse', {
        'RefreshSchemasStatus': Optional[DatabaseMigrationServiceRefreshSchemasStatus],
    }
)


DatabaseMigrationServiceReplicationInstanceTaskLog = TypedDict(
    'DatabaseMigrationServiceReplicationInstanceTaskLog', {
        'String': Optional[str],
        'String': Optional[str],
        'Long': Optional[int],
    }
)


DatabaseMigrationServiceDescribeReplicationInstanceTaskLogsResponse = TypedDict(
    'DatabaseMigrationServiceDescribeReplicationInstanceTaskLogsResponse', {
        'String': Optional[str],
        'ReplicationInstanceTaskLogsList': Optional[List[DatabaseMigrationServiceReplicationInstanceTaskLog]],
        'String': Optional[str],
    }
)


DatabaseMigrationServiceDescribeReplicationInstancesResponse = TypedDict(
    'DatabaseMigrationServiceDescribeReplicationInstancesResponse', {
        'String': Optional[str],
        'ReplicationInstanceList': Optional[List[DatabaseMigrationServiceReplicationInstance]],
    }
)


DatabaseMigrationServiceDescribeReplicationSubnetGroupsResponse = TypedDict(
    'DatabaseMigrationServiceDescribeReplicationSubnetGroupsResponse', {
        'String': Optional[str],
        'ReplicationSubnetGroups': Optional[List[DatabaseMigrationServiceReplicationSubnetGroup]],
    }
)


DatabaseMigrationServiceReplicationTaskAssessmentResult = TypedDict(
    'DatabaseMigrationServiceReplicationTaskAssessmentResult', {
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


DatabaseMigrationServiceDescribeReplicationTaskAssessmentResultsResponse = TypedDict(
    'DatabaseMigrationServiceDescribeReplicationTaskAssessmentResultsResponse', {
        'String': Optional[str],
        'String': Optional[str],
        'ReplicationTaskAssessmentResultList': Optional[List[DatabaseMigrationServiceReplicationTaskAssessmentResult]],
    }
)


DatabaseMigrationServiceDescribeReplicationTasksResponse = TypedDict(
    'DatabaseMigrationServiceDescribeReplicationTasksResponse', {
        'String': Optional[str],
        'ReplicationTaskList': Optional[List[DatabaseMigrationServiceReplicationTask]],
    }
)


DatabaseMigrationServiceDescribeSchemasResponse = TypedDict(
    'DatabaseMigrationServiceDescribeSchemasResponse', {
        'String': Optional[str],
        'SchemaList': Optional[List[str]],
    }
)


DatabaseMigrationServiceTableStatistics = TypedDict(
    'DatabaseMigrationServiceTableStatistics', {
        'String': Optional[str],
        'String': Optional[str],
        'Long': Optional[int],
        'Long': Optional[int],
        'Long': Optional[int],
        'Long': Optional[int],
        'Long': Optional[int],
        'Long': Optional[int],
        'Long': Optional[int],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'Long': Optional[int],
        'Long': Optional[int],
        'Long': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
    }
)


DatabaseMigrationServiceDescribeTableStatisticsResponse = TypedDict(
    'DatabaseMigrationServiceDescribeTableStatisticsResponse', {
        'String': Optional[str],
        'TableStatisticsList': Optional[List[DatabaseMigrationServiceTableStatistics]],
        'String': Optional[str],
    }
)


DatabaseMigrationServiceImportCertificateResponse = TypedDict(
    'DatabaseMigrationServiceImportCertificateResponse', {
        'Certificate': Optional[DatabaseMigrationServiceCertificate],
    }
)


DatabaseMigrationServiceListTagsForResourceResponse = TypedDict(
    'DatabaseMigrationServiceListTagsForResourceResponse', {
        'TagList': Optional[List[DatabaseMigrationServiceTag]],
    }
)


DatabaseMigrationServiceModifyEndpointResponse = TypedDict(
    'DatabaseMigrationServiceModifyEndpointResponse', {
        'Endpoint': Optional[DatabaseMigrationServiceEndpoint],
    }
)


DatabaseMigrationServiceModifyEventSubscriptionResponse = TypedDict(
    'DatabaseMigrationServiceModifyEventSubscriptionResponse', {
        'EventSubscription': Optional[DatabaseMigrationServiceEventSubscription],
    }
)


DatabaseMigrationServiceModifyReplicationInstanceResponse = TypedDict(
    'DatabaseMigrationServiceModifyReplicationInstanceResponse', {
        'ReplicationInstance': Optional[DatabaseMigrationServiceReplicationInstance],
    }
)


DatabaseMigrationServiceModifyReplicationSubnetGroupResponse = TypedDict(
    'DatabaseMigrationServiceModifyReplicationSubnetGroupResponse', {
        'ReplicationSubnetGroup': Optional[DatabaseMigrationServiceReplicationSubnetGroup],
    }
)


DatabaseMigrationServiceModifyReplicationTaskResponse = TypedDict(
    'DatabaseMigrationServiceModifyReplicationTaskResponse', {
        'ReplicationTask': Optional[DatabaseMigrationServiceReplicationTask],
    }
)


DatabaseMigrationServiceRebootReplicationInstanceResponse = TypedDict(
    'DatabaseMigrationServiceRebootReplicationInstanceResponse', {
        'ReplicationInstance': Optional[DatabaseMigrationServiceReplicationInstance],
    }
)


DatabaseMigrationServiceRefreshSchemasResponse = TypedDict(
    'DatabaseMigrationServiceRefreshSchemasResponse', {
        'RefreshSchemasStatus': Optional[DatabaseMigrationServiceRefreshSchemasStatus],
    }
)


DatabaseMigrationServiceTableToReload = TypedDict(
    'DatabaseMigrationServiceTableToReload', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


DatabaseMigrationServiceReloadTablesResponse = TypedDict(
    'DatabaseMigrationServiceReloadTablesResponse', {
        'String': Optional[str],
    }
)


DatabaseMigrationServiceRemoveTagsFromResourceResponse = TypedDict(
    'DatabaseMigrationServiceRemoveTagsFromResourceResponse', {
    }
)


DatabaseMigrationServiceStartReplicationTaskResponse = TypedDict(
    'DatabaseMigrationServiceStartReplicationTaskResponse', {
        'ReplicationTask': Optional[DatabaseMigrationServiceReplicationTask],
    }
)


DatabaseMigrationServiceStartReplicationTaskAssessmentResponse = TypedDict(
    'DatabaseMigrationServiceStartReplicationTaskAssessmentResponse', {
        'ReplicationTask': Optional[DatabaseMigrationServiceReplicationTask],
    }
)


DatabaseMigrationServiceStopReplicationTaskResponse = TypedDict(
    'DatabaseMigrationServiceStopReplicationTaskResponse', {
        'ReplicationTask': Optional[DatabaseMigrationServiceReplicationTask],
    }
)


DatabaseMigrationServiceTestConnectionResponse = TypedDict(
    'DatabaseMigrationServiceTestConnectionResponse', {
        'Connection': Optional[DatabaseMigrationServiceConnection],
    }
)


class DocDB(BaseClient):
    def add_tags_to_resource(self, *,
        ResourceName: str,
        Tags: List[DocDBTag]
    ): ...

    def apply_pending_maintenance_action(self, *,
        ResourceIdentifier: str,
        ApplyAction: str,
        OptInType: str
    ) -> DocDBApplyPendingMaintenanceActionResult: ...

    def copy_db_cluster_parameter_group(self, *,
        SourceDBClusterParameterGroupIdentifier: str,
        TargetDBClusterParameterGroupIdentifier: str,
        TargetDBClusterParameterGroupDescription: str,
        Tags: List[DocDBTag] = ...
    ) -> DocDBCopyDBClusterParameterGroupResult: ...

    def copy_db_cluster_snapshot(self, *,
        SourceDBClusterSnapshotIdentifier: str,
        TargetDBClusterSnapshotIdentifier: str,
        KmsKeyId: str = ...,
        PreSignedUrl: str = ...,
        CopyTags: bool = ...,
        Tags: List[DocDBTag] = ...
    ) -> DocDBCopyDBClusterSnapshotResult: ...

    def create_db_cluster(self, *,
        DBClusterIdentifier: str,
        Engine: str,
        AvailabilityZones: List[str] = ...,
        BackupRetentionPeriod: int = ...,
        DBClusterParameterGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        DBSubnetGroupName: str = ...,
        EngineVersion: str = ...,
        Port: int = ...,
        MasterUsername: str = ...,
        MasterUserPassword: str = ...,
        PreferredBackupWindow: str = ...,
        PreferredMaintenanceWindow: str = ...,
        Tags: List[DocDBTag] = ...,
        StorageEncrypted: bool = ...,
        KmsKeyId: str = ...,
        EnableCloudwatchLogsExports: List[str] = ...
    ) -> DocDBCreateDBClusterResult: ...

    def create_db_cluster_parameter_group(self, *,
        DBClusterParameterGroupName: str,
        DBParameterGroupFamily: str,
        Description: str,
        Tags: List[DocDBTag] = ...
    ) -> DocDBCreateDBClusterParameterGroupResult: ...

    def create_db_cluster_snapshot(self, *,
        DBClusterSnapshotIdentifier: str,
        DBClusterIdentifier: str,
        Tags: List[DocDBTag] = ...
    ) -> DocDBCreateDBClusterSnapshotResult: ...

    def create_db_instance(self, *,
        DBInstanceIdentifier: str,
        DBInstanceClass: str,
        Engine: str,
        DBClusterIdentifier: str,
        AvailabilityZone: str = ...,
        PreferredMaintenanceWindow: str = ...,
        AutoMinorVersionUpgrade: bool = ...,
        Tags: List[DocDBTag] = ...,
        PromotionTier: int = ...
    ) -> DocDBCreateDBInstanceResult: ...

    def create_db_subnet_group(self, *,
        DBSubnetGroupName: str,
        DBSubnetGroupDescription: str,
        SubnetIds: List[str],
        Tags: List[DocDBTag] = ...
    ) -> DocDBCreateDBSubnetGroupResult: ...

    def delete_db_cluster(self, *,
        DBClusterIdentifier: str,
        SkipFinalSnapshot: bool = ...,
        FinalDBSnapshotIdentifier: str = ...
    ) -> DocDBDeleteDBClusterResult: ...

    def delete_db_cluster_parameter_group(self, *,
        DBClusterParameterGroupName: str
    ): ...

    def delete_db_cluster_snapshot(self, *,
        DBClusterSnapshotIdentifier: str
    ) -> DocDBDeleteDBClusterSnapshotResult: ...

    def delete_db_instance(self, *,
        DBInstanceIdentifier: str
    ) -> DocDBDeleteDBInstanceResult: ...

    def delete_db_subnet_group(self, *,
        DBSubnetGroupName: str
    ): ...

    def describe_db_cluster_parameter_groups(self, *,
        DBClusterParameterGroupName: str = ...,
        Filters: List[DocDBFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DocDBDBClusterParameterGroupsMessage: ...

    def describe_db_cluster_parameters(self, *,
        DBClusterParameterGroupName: str,
        Source: str = ...,
        Filters: List[DocDBFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DocDBDBClusterParameterGroupDetails: ...

    def describe_db_cluster_snapshot_attributes(self, *,
        DBClusterSnapshotIdentifier: str
    ) -> DocDBDescribeDBClusterSnapshotAttributesResult: ...

    def describe_db_cluster_snapshots(self, *,
        DBClusterIdentifier: str = ...,
        DBClusterSnapshotIdentifier: str = ...,
        SnapshotType: str = ...,
        Filters: List[DocDBFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        IncludeShared: bool = ...,
        IncludePublic: bool = ...
    ) -> DocDBDBClusterSnapshotMessage: ...

    def describe_db_clusters(self, *,
        DBClusterIdentifier: str = ...,
        Filters: List[DocDBFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DocDBDBClusterMessage: ...

    def describe_db_engine_versions(self, *,
        Engine: str = ...,
        EngineVersion: str = ...,
        DBParameterGroupFamily: str = ...,
        Filters: List[DocDBFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        DefaultOnly: bool = ...,
        ListSupportedCharacterSets: bool = ...,
        ListSupportedTimezones: bool = ...
    ) -> DocDBDBEngineVersionMessage: ...

    def describe_db_instances(self, *,
        DBInstanceIdentifier: str = ...,
        Filters: List[DocDBFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DocDBDBInstanceMessage: ...

    def describe_db_subnet_groups(self, *,
        DBSubnetGroupName: str = ...,
        Filters: List[DocDBFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DocDBDBSubnetGroupMessage: ...

    def describe_engine_default_cluster_parameters(self, *,
        DBParameterGroupFamily: str,
        Filters: List[DocDBFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DocDBDescribeEngineDefaultClusterParametersResult: ...

    def describe_event_categories(self, *,
        SourceType: str = ...,
        Filters: List[DocDBFilter] = ...
    ) -> DocDBEventCategoriesMessage: ...

    def describe_events(self, *,
        SourceIdentifier: str = ...,
        SourceType: str = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        Duration: int = ...,
        EventCategories: List[str] = ...,
        Filters: List[DocDBFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DocDBEventsMessage: ...

    def describe_orderable_db_instance_options(self, *,
        Engine: str,
        EngineVersion: str = ...,
        DBInstanceClass: str = ...,
        LicenseModel: str = ...,
        Vpc: bool = ...,
        Filters: List[DocDBFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DocDBOrderableDBInstanceOptionsMessage: ...

    def describe_pending_maintenance_actions(self, *,
        ResourceIdentifier: str = ...,
        Filters: List[DocDBFilter] = ...,
        Marker: str = ...,
        MaxRecords: int = ...
    ) -> DocDBPendingMaintenanceActionsMessage: ...

    def failover_db_cluster(self, *,
        DBClusterIdentifier: str = ...,
        TargetDBInstanceIdentifier: str = ...
    ) -> DocDBFailoverDBClusterResult: ...

    def list_tags_for_resource(self, *,
        ResourceName: str,
        Filters: List[DocDBFilter] = ...
    ) -> DocDBTagListMessage: ...

    def modify_db_cluster(self, *,
        DBClusterIdentifier: str,
        NewDBClusterIdentifier: str = ...,
        ApplyImmediately: bool = ...,
        BackupRetentionPeriod: int = ...,
        DBClusterParameterGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        Port: int = ...,
        MasterUserPassword: str = ...,
        PreferredBackupWindow: str = ...,
        PreferredMaintenanceWindow: str = ...,
        CloudwatchLogsExportConfiguration: DocDBCloudwatchLogsExportConfiguration = ...,
        EngineVersion: str = ...
    ) -> DocDBModifyDBClusterResult: ...

    def modify_db_cluster_parameter_group(self, *,
        DBClusterParameterGroupName: str,
        Parameters: List[DocDBParameter]
    ) -> DocDBDBClusterParameterGroupNameMessage: ...

    def modify_db_cluster_snapshot_attribute(self, *,
        DBClusterSnapshotIdentifier: str,
        AttributeName: str,
        ValuesToAdd: List[str] = ...,
        ValuesToRemove: List[str] = ...
    ) -> DocDBModifyDBClusterSnapshotAttributeResult: ...

    def modify_db_instance(self, *,
        DBInstanceIdentifier: str,
        DBInstanceClass: str = ...,
        ApplyImmediately: bool = ...,
        PreferredMaintenanceWindow: str = ...,
        AutoMinorVersionUpgrade: bool = ...,
        NewDBInstanceIdentifier: str = ...,
        PromotionTier: int = ...
    ) -> DocDBModifyDBInstanceResult: ...

    def modify_db_subnet_group(self, *,
        DBSubnetGroupName: str,
        SubnetIds: List[str],
        DBSubnetGroupDescription: str = ...
    ) -> DocDBModifyDBSubnetGroupResult: ...

    def reboot_db_instance(self, *,
        DBInstanceIdentifier: str,
        ForceFailover: bool = ...
    ) -> DocDBRebootDBInstanceResult: ...

    def remove_tags_from_resource(self, *,
        ResourceName: str,
        TagKeys: List[str]
    ): ...

    def reset_db_cluster_parameter_group(self, *,
        DBClusterParameterGroupName: str,
        ResetAllParameters: bool = ...,
        Parameters: List[DocDBParameter] = ...
    ) -> DocDBDBClusterParameterGroupNameMessage: ...

    def restore_db_cluster_from_snapshot(self, *,
        DBClusterIdentifier: str,
        SnapshotIdentifier: str,
        Engine: str,
        AvailabilityZones: List[str] = ...,
        EngineVersion: str = ...,
        Port: int = ...,
        DBSubnetGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        Tags: List[DocDBTag] = ...,
        KmsKeyId: str = ...,
        EnableCloudwatchLogsExports: List[str] = ...
    ) -> DocDBRestoreDBClusterFromSnapshotResult: ...

    def restore_db_cluster_to_point_in_time(self, *,
        DBClusterIdentifier: str,
        SourceDBClusterIdentifier: str,
        RestoreToTime: datetime.datetime = ...,
        UseLatestRestorableTime: bool = ...,
        Port: int = ...,
        DBSubnetGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        Tags: List[DocDBTag] = ...,
        KmsKeyId: str = ...,
        EnableCloudwatchLogsExports: List[str] = ...
    ) -> DocDBRestoreDBClusterToPointInTimeResult: ...


DocDBTag = TypedDict(
    'DocDBTag', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


DocDBPendingMaintenanceAction = TypedDict(
    'DocDBPendingMaintenanceAction', {
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
    }
)


DocDBResourcePendingMaintenanceActions = TypedDict(
    'DocDBResourcePendingMaintenanceActions', {
        'String': Optional[str],
        'PendingMaintenanceActionDetails': Optional[List[DocDBPendingMaintenanceAction]],
    }
)


DocDBApplyPendingMaintenanceActionResult = TypedDict(
    'DocDBApplyPendingMaintenanceActionResult', {
        'ResourcePendingMaintenanceActions': Optional[DocDBResourcePendingMaintenanceActions],
    }
)


DocDBDBClusterParameterGroup = TypedDict(
    'DocDBDBClusterParameterGroup', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


DocDBCopyDBClusterParameterGroupResult = TypedDict(
    'DocDBCopyDBClusterParameterGroupResult', {
        'DBClusterParameterGroup': Optional[DocDBDBClusterParameterGroup],
    }
)


DocDBDBClusterSnapshot = TypedDict(
    'DocDBDBClusterSnapshot', {
        'AvailabilityZones': Optional[List[str]],
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


DocDBCopyDBClusterSnapshotResult = TypedDict(
    'DocDBCopyDBClusterSnapshotResult', {
        'DBClusterSnapshot': Optional[DocDBDBClusterSnapshot],
    }
)


DocDBDBClusterMember = TypedDict(
    'DocDBDBClusterMember', {
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
    }
)


DocDBVpcSecurityGroupMembership = TypedDict(
    'DocDBVpcSecurityGroupMembership', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


DocDBDBClusterRole = TypedDict(
    'DocDBDBClusterRole', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


DocDBDBCluster = TypedDict(
    'DocDBDBCluster', {
        'AvailabilityZones': Optional[List[str]],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DBClusterMemberList': Optional[List[DocDBDBClusterMember]],
        'VpcSecurityGroupMembershipList': Optional[List[DocDBVpcSecurityGroupMembership]],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DBClusterRoles': Optional[List[DocDBDBClusterRole]],
        'TStamp': Optional[datetime.datetime],
        'LogTypeList': Optional[List[str]],
    }
)


DocDBCreateDBClusterResult = TypedDict(
    'DocDBCreateDBClusterResult', {
        'DBCluster': Optional[DocDBDBCluster],
    }
)


DocDBCreateDBClusterParameterGroupResult = TypedDict(
    'DocDBCreateDBClusterParameterGroupResult', {
        'DBClusterParameterGroup': Optional[DocDBDBClusterParameterGroup],
    }
)


DocDBCreateDBClusterSnapshotResult = TypedDict(
    'DocDBCreateDBClusterSnapshotResult', {
        'DBClusterSnapshot': Optional[DocDBDBClusterSnapshot],
    }
)


DocDBEndpoint = TypedDict(
    'DocDBEndpoint', {
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
    }
)


DocDBAvailabilityZone = TypedDict(
    'DocDBAvailabilityZone', {
        'String': Optional[str],
    }
)


DocDBSubnet = TypedDict(
    'DocDBSubnet', {
        'String': Optional[str],
        'AvailabilityZone': Optional[DocDBAvailabilityZone],
        'String': Optional[str],
    }
)


DocDBDBSubnetGroup = TypedDict(
    'DocDBDBSubnetGroup', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'SubnetList': Optional[List[DocDBSubnet]],
        'String': Optional[str],
    }
)


DocDBPendingCloudwatchLogsExports = TypedDict(
    'DocDBPendingCloudwatchLogsExports', {
        'LogTypeList': Optional[List[str]],
        'LogTypeList': Optional[List[str]],
    }
)


DocDBPendingModifiedValues = TypedDict(
    'DocDBPendingModifiedValues', {
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'IntegerOptional': Optional[int],
        'BooleanOptional': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'PendingCloudwatchLogsExports': Optional[DocDBPendingCloudwatchLogsExports],
    }
)


DocDBDBInstanceStatusInfo = TypedDict(
    'DocDBDBInstanceStatusInfo', {
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
    }
)


DocDBDBInstance = TypedDict(
    'DocDBDBInstance', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Endpoint': Optional[DocDBEndpoint],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'Integer': Optional[int],
        'VpcSecurityGroupMembershipList': Optional[List[DocDBVpcSecurityGroupMembership]],
        'String': Optional[str],
        'DBSubnetGroup': Optional[DocDBDBSubnetGroup],
        'String': Optional[str],
        'PendingModifiedValues': Optional[DocDBPendingModifiedValues],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'DBInstanceStatusInfoList': Optional[List[DocDBDBInstanceStatusInfo]],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'LogTypeList': Optional[List[str]],
    }
)


DocDBCreateDBInstanceResult = TypedDict(
    'DocDBCreateDBInstanceResult', {
        'DBInstance': Optional[DocDBDBInstance],
    }
)


DocDBCreateDBSubnetGroupResult = TypedDict(
    'DocDBCreateDBSubnetGroupResult', {
        'DBSubnetGroup': Optional[DocDBDBSubnetGroup],
    }
)


DocDBDeleteDBClusterResult = TypedDict(
    'DocDBDeleteDBClusterResult', {
        'DBCluster': Optional[DocDBDBCluster],
    }
)


DocDBDeleteDBClusterSnapshotResult = TypedDict(
    'DocDBDeleteDBClusterSnapshotResult', {
        'DBClusterSnapshot': Optional[DocDBDBClusterSnapshot],
    }
)


DocDBDeleteDBInstanceResult = TypedDict(
    'DocDBDeleteDBInstanceResult', {
        'DBInstance': Optional[DocDBDBInstance],
    }
)


DocDBFilter = TypedDict(
    'DocDBFilter', {
        'String': str,
        'FilterValueList': List[str],
    }
)


DocDBDBClusterParameterGroupsMessage = TypedDict(
    'DocDBDBClusterParameterGroupsMessage', {
        'String': Optional[str],
        'DBClusterParameterGroupList': Optional[List[DocDBDBClusterParameterGroup]],
    }
)


DocDBParameter = TypedDict(
    'DocDBParameter', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'ApplyMethod': Optional[str],
    }
)


DocDBDBClusterParameterGroupDetails = TypedDict(
    'DocDBDBClusterParameterGroupDetails', {
        'ParametersList': Optional[List[DocDBParameter]],
        'String': Optional[str],
    }
)


DocDBDBClusterSnapshotAttribute = TypedDict(
    'DocDBDBClusterSnapshotAttribute', {
        'String': Optional[str],
        'AttributeValueList': Optional[List[str]],
    }
)


DocDBDBClusterSnapshotAttributesResult = TypedDict(
    'DocDBDBClusterSnapshotAttributesResult', {
        'String': Optional[str],
        'DBClusterSnapshotAttributeList': Optional[List[DocDBDBClusterSnapshotAttribute]],
    }
)


DocDBDescribeDBClusterSnapshotAttributesResult = TypedDict(
    'DocDBDescribeDBClusterSnapshotAttributesResult', {
        'DBClusterSnapshotAttributesResult': Optional[DocDBDBClusterSnapshotAttributesResult],
    }
)


DocDBDBClusterSnapshotMessage = TypedDict(
    'DocDBDBClusterSnapshotMessage', {
        'String': Optional[str],
        'DBClusterSnapshotList': Optional[List[DocDBDBClusterSnapshot]],
    }
)


DocDBDBClusterMessage = TypedDict(
    'DocDBDBClusterMessage', {
        'String': Optional[str],
        'DBClusterList': Optional[List[DocDBDBCluster]],
    }
)


DocDBUpgradeTarget = TypedDict(
    'DocDBUpgradeTarget', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
    }
)


DocDBDBEngineVersion = TypedDict(
    'DocDBDBEngineVersion', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'ValidUpgradeTargetList': Optional[List[DocDBUpgradeTarget]],
        'LogTypeList': Optional[List[str]],
        'Boolean': Optional[bool],
    }
)


DocDBDBEngineVersionMessage = TypedDict(
    'DocDBDBEngineVersionMessage', {
        'String': Optional[str],
        'DBEngineVersionList': Optional[List[DocDBDBEngineVersion]],
    }
)


DocDBDBInstanceMessage = TypedDict(
    'DocDBDBInstanceMessage', {
        'String': Optional[str],
        'DBInstanceList': Optional[List[DocDBDBInstance]],
    }
)


DocDBDBSubnetGroupMessage = TypedDict(
    'DocDBDBSubnetGroupMessage', {
        'String': Optional[str],
        'DBSubnetGroups': Optional[List[DocDBDBSubnetGroup]],
    }
)


DocDBEngineDefaults = TypedDict(
    'DocDBEngineDefaults', {
        'String': Optional[str],
        'String': Optional[str],
        'ParametersList': Optional[List[DocDBParameter]],
    }
)


DocDBDescribeEngineDefaultClusterParametersResult = TypedDict(
    'DocDBDescribeEngineDefaultClusterParametersResult', {
        'EngineDefaults': Optional[DocDBEngineDefaults],
    }
)


DocDBEventCategoriesMap = TypedDict(
    'DocDBEventCategoriesMap', {
        'String': Optional[str],
        'EventCategoriesList': Optional[List[str]],
    }
)


DocDBEventCategoriesMessage = TypedDict(
    'DocDBEventCategoriesMessage', {
        'EventCategoriesMapList': Optional[List[DocDBEventCategoriesMap]],
    }
)


DocDBEvent = TypedDict(
    'DocDBEvent', {
        'String': Optional[str],
        'SourceType': Optional[str],
        'String': Optional[str],
        'EventCategoriesList': Optional[List[str]],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
    }
)


DocDBEventsMessage = TypedDict(
    'DocDBEventsMessage', {
        'String': Optional[str],
        'EventList': Optional[List[DocDBEvent]],
    }
)


DocDBOrderableDBInstanceOption = TypedDict(
    'DocDBOrderableDBInstanceOption', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'AvailabilityZoneList': Optional[List[DocDBAvailabilityZone]],
        'Boolean': Optional[bool],
    }
)


DocDBOrderableDBInstanceOptionsMessage = TypedDict(
    'DocDBOrderableDBInstanceOptionsMessage', {
        'OrderableDBInstanceOptionsList': Optional[List[DocDBOrderableDBInstanceOption]],
        'String': Optional[str],
    }
)


DocDBPendingMaintenanceActionsMessage = TypedDict(
    'DocDBPendingMaintenanceActionsMessage', {
        'PendingMaintenanceActions': Optional[List[DocDBResourcePendingMaintenanceActions]],
        'String': Optional[str],
    }
)


DocDBFailoverDBClusterResult = TypedDict(
    'DocDBFailoverDBClusterResult', {
        'DBCluster': Optional[DocDBDBCluster],
    }
)


DocDBTagListMessage = TypedDict(
    'DocDBTagListMessage', {
        'TagList': Optional[List[DocDBTag]],
    }
)


DocDBCloudwatchLogsExportConfiguration = TypedDict(
    'DocDBCloudwatchLogsExportConfiguration', {
        'LogTypeList': Optional[List[str]],
        'LogTypeList': Optional[List[str]],
    }
)


DocDBModifyDBClusterResult = TypedDict(
    'DocDBModifyDBClusterResult', {
        'DBCluster': Optional[DocDBDBCluster],
    }
)


DocDBDBClusterParameterGroupNameMessage = TypedDict(
    'DocDBDBClusterParameterGroupNameMessage', {
        'String': Optional[str],
    }
)


DocDBModifyDBClusterSnapshotAttributeResult = TypedDict(
    'DocDBModifyDBClusterSnapshotAttributeResult', {
        'DBClusterSnapshotAttributesResult': Optional[DocDBDBClusterSnapshotAttributesResult],
    }
)


DocDBModifyDBInstanceResult = TypedDict(
    'DocDBModifyDBInstanceResult', {
        'DBInstance': Optional[DocDBDBInstance],
    }
)


DocDBModifyDBSubnetGroupResult = TypedDict(
    'DocDBModifyDBSubnetGroupResult', {
        'DBSubnetGroup': Optional[DocDBDBSubnetGroup],
    }
)


DocDBRebootDBInstanceResult = TypedDict(
    'DocDBRebootDBInstanceResult', {
        'DBInstance': Optional[DocDBDBInstance],
    }
)


DocDBRestoreDBClusterFromSnapshotResult = TypedDict(
    'DocDBRestoreDBClusterFromSnapshotResult', {
        'DBCluster': Optional[DocDBDBCluster],
    }
)


DocDBRestoreDBClusterToPointInTimeResult = TypedDict(
    'DocDBRestoreDBClusterToPointInTimeResult', {
        'DBCluster': Optional[DocDBDBCluster],
    }
)


class DirectoryService(BaseClient):
    def accept_shared_directory(self, *,
        SharedDirectoryId: str
    ) -> DirectoryServiceAcceptSharedDirectoryResult: ...

    def add_ip_routes(self, *,
        DirectoryId: str,
        IpRoutes: List[DirectoryServiceIpRoute],
        UpdateSecurityGroupForDirectoryControllers: bool = ...
    ) -> DirectoryServiceAddIpRoutesResult: ...

    def add_tags_to_resource(self, *,
        ResourceId: str,
        Tags: List[DirectoryServiceTag]
    ) -> DirectoryServiceAddTagsToResourceResult: ...

    def cancel_schema_extension(self, *,
        DirectoryId: str,
        SchemaExtensionId: str
    ) -> DirectoryServiceCancelSchemaExtensionResult: ...

    def connect_directory(self, *,
        Name: str,
        Password: str,
        Size: str,
        ConnectSettings: DirectoryServiceDirectoryConnectSettings,
        ShortName: str = ...,
        Description: str = ...,
        Tags: List[DirectoryServiceTag] = ...
    ) -> DirectoryServiceConnectDirectoryResult: ...

    def create_alias(self, *,
        DirectoryId: str,
        Alias: str
    ) -> DirectoryServiceCreateAliasResult: ...

    def create_computer(self, *,
        DirectoryId: str,
        ComputerName: str,
        Password: str,
        OrganizationalUnitDistinguishedName: str = ...,
        ComputerAttributes: List[DirectoryServiceAttribute] = ...
    ) -> DirectoryServiceCreateComputerResult: ...

    def create_conditional_forwarder(self, *,
        DirectoryId: str,
        RemoteDomainName: str,
        DnsIpAddrs: List[str]
    ) -> DirectoryServiceCreateConditionalForwarderResult: ...

    def create_directory(self, *,
        Name: str,
        Password: str,
        Size: str,
        ShortName: str = ...,
        Description: str = ...,
        VpcSettings: DirectoryServiceDirectoryVpcSettings = ...,
        Tags: List[DirectoryServiceTag] = ...
    ) -> DirectoryServiceCreateDirectoryResult: ...

    def create_log_subscription(self, *,
        DirectoryId: str,
        LogGroupName: str
    ) -> DirectoryServiceCreateLogSubscriptionResult: ...

    def create_microsoft_ad(self, *,
        Name: str,
        Password: str,
        VpcSettings: DirectoryServiceDirectoryVpcSettings,
        ShortName: str = ...,
        Description: str = ...,
        Edition: str = ...,
        Tags: List[DirectoryServiceTag] = ...
    ) -> DirectoryServiceCreateMicrosoftADResult: ...

    def create_snapshot(self, *,
        DirectoryId: str,
        Name: str = ...
    ) -> DirectoryServiceCreateSnapshotResult: ...

    def create_trust(self, *,
        DirectoryId: str,
        RemoteDomainName: str,
        TrustPassword: str,
        TrustDirection: str,
        TrustType: str = ...,
        ConditionalForwarderIpAddrs: List[str] = ...,
        SelectiveAuth: str = ...
    ) -> DirectoryServiceCreateTrustResult: ...

    def delete_conditional_forwarder(self, *,
        DirectoryId: str,
        RemoteDomainName: str
    ) -> DirectoryServiceDeleteConditionalForwarderResult: ...

    def delete_directory(self, *,
        DirectoryId: str
    ) -> DirectoryServiceDeleteDirectoryResult: ...

    def delete_log_subscription(self, *,
        DirectoryId: str
    ) -> DirectoryServiceDeleteLogSubscriptionResult: ...

    def delete_snapshot(self, *,
        SnapshotId: str
    ) -> DirectoryServiceDeleteSnapshotResult: ...

    def delete_trust(self, *,
        TrustId: str,
        DeleteAssociatedConditionalForwarder: bool = ...
    ) -> DirectoryServiceDeleteTrustResult: ...

    def deregister_event_topic(self, *,
        DirectoryId: str,
        TopicName: str
    ) -> DirectoryServiceDeregisterEventTopicResult: ...

    def describe_conditional_forwarders(self, *,
        DirectoryId: str,
        RemoteDomainNames: List[str] = ...
    ) -> DirectoryServiceDescribeConditionalForwardersResult: ...

    def describe_directories(self, *,
        DirectoryIds: List[str] = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> DirectoryServiceDescribeDirectoriesResult: ...

    def describe_domain_controllers(self, *,
        DirectoryId: str,
        DomainControllerIds: List[str] = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> DirectoryServiceDescribeDomainControllersResult: ...

    def describe_event_topics(self, *,
        DirectoryId: str = ...,
        TopicNames: List[str] = ...
    ) -> DirectoryServiceDescribeEventTopicsResult: ...

    def describe_shared_directories(self, *,
        OwnerDirectoryId: str,
        SharedDirectoryIds: List[str] = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> DirectoryServiceDescribeSharedDirectoriesResult: ...

    def describe_snapshots(self, *,
        DirectoryId: str = ...,
        SnapshotIds: List[str] = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> DirectoryServiceDescribeSnapshotsResult: ...

    def describe_trusts(self, *,
        DirectoryId: str = ...,
        TrustIds: List[str] = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> DirectoryServiceDescribeTrustsResult: ...

    def disable_radius(self, *,
        DirectoryId: str
    ) -> DirectoryServiceDisableRadiusResult: ...

    def disable_sso(self, *,
        DirectoryId: str,
        UserName: str = ...,
        Password: str = ...
    ) -> DirectoryServiceDisableSsoResult: ...

    def enable_radius(self, *,
        DirectoryId: str,
        RadiusSettings: DirectoryServiceRadiusSettings
    ) -> DirectoryServiceEnableRadiusResult: ...

    def enable_sso(self, *,
        DirectoryId: str,
        UserName: str = ...,
        Password: str = ...
    ) -> DirectoryServiceEnableSsoResult: ...

    def get_directory_limits(self) -> DirectoryServiceGetDirectoryLimitsResult: ...

    def get_snapshot_limits(self, *,
        DirectoryId: str
    ) -> DirectoryServiceGetSnapshotLimitsResult: ...

    def list_ip_routes(self, *,
        DirectoryId: str,
        NextToken: str = ...,
        Limit: int = ...
    ) -> DirectoryServiceListIpRoutesResult: ...

    def list_log_subscriptions(self, *,
        DirectoryId: str = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> DirectoryServiceListLogSubscriptionsResult: ...

    def list_schema_extensions(self, *,
        DirectoryId: str,
        NextToken: str = ...,
        Limit: int = ...
    ) -> DirectoryServiceListSchemaExtensionsResult: ...

    def list_tags_for_resource(self, *,
        ResourceId: str,
        NextToken: str = ...,
        Limit: int = ...
    ) -> DirectoryServiceListTagsForResourceResult: ...

    def register_event_topic(self, *,
        DirectoryId: str,
        TopicName: str
    ) -> DirectoryServiceRegisterEventTopicResult: ...

    def reject_shared_directory(self, *,
        SharedDirectoryId: str
    ) -> DirectoryServiceRejectSharedDirectoryResult: ...

    def remove_ip_routes(self, *,
        DirectoryId: str,
        CidrIps: List[str]
    ) -> DirectoryServiceRemoveIpRoutesResult: ...

    def remove_tags_from_resource(self, *,
        ResourceId: str,
        TagKeys: List[str]
    ) -> DirectoryServiceRemoveTagsFromResourceResult: ...

    def reset_user_password(self, *,
        DirectoryId: str,
        UserName: str,
        NewPassword: str
    ) -> DirectoryServiceResetUserPasswordResult: ...

    def restore_from_snapshot(self, *,
        SnapshotId: str
    ) -> DirectoryServiceRestoreFromSnapshotResult: ...

    def share_directory(self, *,
        DirectoryId: str,
        ShareTarget: DirectoryServiceShareTarget,
        ShareMethod: str,
        ShareNotes: str = ...
    ) -> DirectoryServiceShareDirectoryResult: ...

    def start_schema_extension(self, *,
        DirectoryId: str,
        CreateSnapshotBeforeSchemaExtension: bool,
        LdifContent: str,
        Description: str
    ) -> DirectoryServiceStartSchemaExtensionResult: ...

    def unshare_directory(self, *,
        DirectoryId: str,
        UnshareTarget: DirectoryServiceUnshareTarget
    ) -> DirectoryServiceUnshareDirectoryResult: ...

    def update_conditional_forwarder(self, *,
        DirectoryId: str,
        RemoteDomainName: str,
        DnsIpAddrs: List[str]
    ) -> DirectoryServiceUpdateConditionalForwarderResult: ...

    def update_number_of_domain_controllers(self, *,
        DirectoryId: str,
        DesiredNumber: int
    ) -> DirectoryServiceUpdateNumberOfDomainControllersResult: ...

    def update_radius(self, *,
        DirectoryId: str,
        RadiusSettings: DirectoryServiceRadiusSettings
    ) -> DirectoryServiceUpdateRadiusResult: ...

    def update_trust(self, *,
        TrustId: str,
        SelectiveAuth: str = ...
    ) -> DirectoryServiceUpdateTrustResult: ...

    def verify_trust(self, *,
        TrustId: str
    ) -> DirectoryServiceVerifyTrustResult: ...


DirectoryServiceSharedDirectory = TypedDict(
    'DirectoryServiceSharedDirectory', {
        'CustomerId': Optional[str],
        'DirectoryId': Optional[str],
        'ShareMethod': Optional[str],
        'CustomerId': Optional[str],
        'DirectoryId': Optional[str],
        'ShareStatus': Optional[str],
        'Notes': Optional[str],
        'CreatedDateTime': Optional[datetime.datetime],
        'LastUpdatedDateTime': Optional[datetime.datetime],
    }
)


DirectoryServiceAcceptSharedDirectoryResult = TypedDict(
    'DirectoryServiceAcceptSharedDirectoryResult', {
        'SharedDirectory': Optional[DirectoryServiceSharedDirectory],
    }
)


DirectoryServiceIpRoute = TypedDict(
    'DirectoryServiceIpRoute', {
        'CidrIp': Optional[str],
        'Description': Optional[str],
    }
)


DirectoryServiceAddIpRoutesResult = TypedDict(
    'DirectoryServiceAddIpRoutesResult', {
    }
)


DirectoryServiceTag = TypedDict(
    'DirectoryServiceTag', {
        'TagKey': str,
        'TagValue': str,
    }
)


DirectoryServiceAddTagsToResourceResult = TypedDict(
    'DirectoryServiceAddTagsToResourceResult', {
    }
)


DirectoryServiceCancelSchemaExtensionResult = TypedDict(
    'DirectoryServiceCancelSchemaExtensionResult', {
    }
)


DirectoryServiceDirectoryConnectSettings = TypedDict(
    'DirectoryServiceDirectoryConnectSettings', {
        'VpcId': str,
        'SubnetIds': List[str],
        'DnsIpAddrs': List[str],
        'UserName': str,
    }
)


DirectoryServiceConnectDirectoryResult = TypedDict(
    'DirectoryServiceConnectDirectoryResult', {
        'DirectoryId': Optional[str],
    }
)


DirectoryServiceCreateAliasResult = TypedDict(
    'DirectoryServiceCreateAliasResult', {
        'DirectoryId': Optional[str],
        'AliasName': Optional[str],
    }
)


DirectoryServiceAttribute = TypedDict(
    'DirectoryServiceAttribute', {
        'AttributeName': Optional[str],
        'AttributeValue': Optional[str],
    }
)


DirectoryServiceComputer = TypedDict(
    'DirectoryServiceComputer', {
        'SID': Optional[str],
        'ComputerName': Optional[str],
        'Attributes': Optional[List[DirectoryServiceAttribute]],
    }
)


DirectoryServiceCreateComputerResult = TypedDict(
    'DirectoryServiceCreateComputerResult', {
        'Computer': Optional[DirectoryServiceComputer],
    }
)


DirectoryServiceCreateConditionalForwarderResult = TypedDict(
    'DirectoryServiceCreateConditionalForwarderResult', {
    }
)


DirectoryServiceDirectoryVpcSettings = TypedDict(
    'DirectoryServiceDirectoryVpcSettings', {
        'VpcId': str,
        'SubnetIds': List[str],
    }
)


DirectoryServiceCreateDirectoryResult = TypedDict(
    'DirectoryServiceCreateDirectoryResult', {
        'DirectoryId': Optional[str],
    }
)


DirectoryServiceCreateLogSubscriptionResult = TypedDict(
    'DirectoryServiceCreateLogSubscriptionResult', {
    }
)


DirectoryServiceCreateMicrosoftADResult = TypedDict(
    'DirectoryServiceCreateMicrosoftADResult', {
        'DirectoryId': Optional[str],
    }
)


DirectoryServiceCreateSnapshotResult = TypedDict(
    'DirectoryServiceCreateSnapshotResult', {
        'SnapshotId': Optional[str],
    }
)


DirectoryServiceCreateTrustResult = TypedDict(
    'DirectoryServiceCreateTrustResult', {
        'TrustId': Optional[str],
    }
)


DirectoryServiceDeleteConditionalForwarderResult = TypedDict(
    'DirectoryServiceDeleteConditionalForwarderResult', {
    }
)


DirectoryServiceDeleteDirectoryResult = TypedDict(
    'DirectoryServiceDeleteDirectoryResult', {
        'DirectoryId': Optional[str],
    }
)


DirectoryServiceDeleteLogSubscriptionResult = TypedDict(
    'DirectoryServiceDeleteLogSubscriptionResult', {
    }
)


DirectoryServiceDeleteSnapshotResult = TypedDict(
    'DirectoryServiceDeleteSnapshotResult', {
        'SnapshotId': Optional[str],
    }
)


DirectoryServiceDeleteTrustResult = TypedDict(
    'DirectoryServiceDeleteTrustResult', {
        'TrustId': Optional[str],
    }
)


DirectoryServiceDeregisterEventTopicResult = TypedDict(
    'DirectoryServiceDeregisterEventTopicResult', {
    }
)


DirectoryServiceConditionalForwarder = TypedDict(
    'DirectoryServiceConditionalForwarder', {
        'RemoteDomainName': Optional[str],
        'DnsIpAddrs': Optional[List[str]],
        'ReplicationScope': Optional[str],
    }
)


DirectoryServiceDescribeConditionalForwardersResult = TypedDict(
    'DirectoryServiceDescribeConditionalForwardersResult', {
        'ConditionalForwarders': Optional[List[DirectoryServiceConditionalForwarder]],
    }
)


DirectoryServiceDirectoryVpcSettingsDescription = TypedDict(
    'DirectoryServiceDirectoryVpcSettingsDescription', {
        'VpcId': Optional[str],
        'SubnetIds': Optional[List[str]],
        'SecurityGroupId': Optional[str],
        'AvailabilityZones': Optional[List[str]],
    }
)


DirectoryServiceDirectoryConnectSettingsDescription = TypedDict(
    'DirectoryServiceDirectoryConnectSettingsDescription', {
        'VpcId': Optional[str],
        'SubnetIds': Optional[List[str]],
        'UserName': Optional[str],
        'SecurityGroupId': Optional[str],
        'AvailabilityZones': Optional[List[str]],
        'IpAddrs': Optional[List[str]],
    }
)


DirectoryServiceRadiusSettings = TypedDict(
    'DirectoryServiceRadiusSettings', {
        'Servers': Optional[List[str]],
        'PortNumber': Optional[int],
        'RadiusTimeout': Optional[int],
        'RadiusRetries': Optional[int],
        'RadiusSharedSecret': Optional[str],
        'RadiusAuthenticationProtocol': Optional[str],
        'RadiusDisplayLabel': Optional[str],
        'UseSameUsername': Optional[bool],
    }
)


DirectoryServiceOwnerDirectoryDescription = TypedDict(
    'DirectoryServiceOwnerDirectoryDescription', {
        'DirectoryId': Optional[str],
        'CustomerId': Optional[str],
        'DnsIpAddrs': Optional[List[str]],
        'DirectoryVpcSettingsDescription': Optional[DirectoryServiceDirectoryVpcSettingsDescription],
        'RadiusSettings': Optional[DirectoryServiceRadiusSettings],
        'RadiusStatus': Optional[str],
    }
)


DirectoryServiceDirectoryDescription = TypedDict(
    'DirectoryServiceDirectoryDescription', {
        'DirectoryId': Optional[str],
        'DirectoryName': Optional[str],
        'DirectoryShortName': Optional[str],
        'DirectorySize': Optional[str],
        'DirectoryEdition': Optional[str],
        'AliasName': Optional[str],
        'AccessUrl': Optional[str],
        'Description': Optional[str],
        'DnsIpAddrs': Optional[List[str]],
        'DirectoryStage': Optional[str],
        'ShareStatus': Optional[str],
        'ShareMethod': Optional[str],
        'Notes': Optional[str],
        'LaunchTime': Optional[datetime.datetime],
        'LastUpdatedDateTime': Optional[datetime.datetime],
        'DirectoryType': Optional[str],
        'DirectoryVpcSettingsDescription': Optional[DirectoryServiceDirectoryVpcSettingsDescription],
        'DirectoryConnectSettingsDescription': Optional[DirectoryServiceDirectoryConnectSettingsDescription],
        'RadiusSettings': Optional[DirectoryServiceRadiusSettings],
        'RadiusStatus': Optional[str],
        'StageReason': Optional[str],
        'SsoEnabled': Optional[bool],
        'DesiredNumberOfDomainControllers': Optional[int],
        'OwnerDirectoryDescription': Optional[DirectoryServiceOwnerDirectoryDescription],
    }
)


DirectoryServiceDescribeDirectoriesResult = TypedDict(
    'DirectoryServiceDescribeDirectoriesResult', {
        'DirectoryDescriptions': Optional[List[DirectoryServiceDirectoryDescription]],
        'NextToken': Optional[str],
    }
)


DirectoryServiceDomainController = TypedDict(
    'DirectoryServiceDomainController', {
        'DirectoryId': Optional[str],
        'DomainControllerId': Optional[str],
        'IpAddr': Optional[str],
        'VpcId': Optional[str],
        'SubnetId': Optional[str],
        'AvailabilityZone': Optional[str],
        'DomainControllerStatus': Optional[str],
        'DomainControllerStatusReason': Optional[str],
        'LaunchTime': Optional[datetime.datetime],
        'LastUpdatedDateTime': Optional[datetime.datetime],
    }
)


DirectoryServiceDescribeDomainControllersResult = TypedDict(
    'DirectoryServiceDescribeDomainControllersResult', {
        'DomainControllers': Optional[List[DirectoryServiceDomainController]],
        'NextToken': Optional[str],
    }
)


DirectoryServiceEventTopic = TypedDict(
    'DirectoryServiceEventTopic', {
        'DirectoryId': Optional[str],
        'TopicName': Optional[str],
        'TopicArn': Optional[str],
        'CreatedDateTime': Optional[datetime.datetime],
        'TopicStatus': Optional[str],
    }
)


DirectoryServiceDescribeEventTopicsResult = TypedDict(
    'DirectoryServiceDescribeEventTopicsResult', {
        'EventTopics': Optional[List[DirectoryServiceEventTopic]],
    }
)


DirectoryServiceDescribeSharedDirectoriesResult = TypedDict(
    'DirectoryServiceDescribeSharedDirectoriesResult', {
        'SharedDirectories': Optional[List[DirectoryServiceSharedDirectory]],
        'NextToken': Optional[str],
    }
)


DirectoryServiceSnapshot = TypedDict(
    'DirectoryServiceSnapshot', {
        'DirectoryId': Optional[str],
        'SnapshotId': Optional[str],
        'SnapshotType': Optional[str],
        'SnapshotName': Optional[str],
        'SnapshotStatus': Optional[str],
        'StartTime': Optional[datetime.datetime],
    }
)


DirectoryServiceDescribeSnapshotsResult = TypedDict(
    'DirectoryServiceDescribeSnapshotsResult', {
        'Snapshots': Optional[List[DirectoryServiceSnapshot]],
        'NextToken': Optional[str],
    }
)


DirectoryServiceTrust = TypedDict(
    'DirectoryServiceTrust', {
        'DirectoryId': Optional[str],
        'TrustId': Optional[str],
        'RemoteDomainName': Optional[str],
        'TrustType': Optional[str],
        'TrustDirection': Optional[str],
        'TrustState': Optional[str],
        'CreatedDateTime': Optional[datetime.datetime],
        'LastUpdatedDateTime': Optional[datetime.datetime],
        'StateLastUpdatedDateTime': Optional[datetime.datetime],
        'TrustStateReason': Optional[str],
        'SelectiveAuth': Optional[str],
    }
)


DirectoryServiceDescribeTrustsResult = TypedDict(
    'DirectoryServiceDescribeTrustsResult', {
        'Trusts': Optional[List[DirectoryServiceTrust]],
        'NextToken': Optional[str],
    }
)


DirectoryServiceDisableRadiusResult = TypedDict(
    'DirectoryServiceDisableRadiusResult', {
    }
)


DirectoryServiceDisableSsoResult = TypedDict(
    'DirectoryServiceDisableSsoResult', {
    }
)


DirectoryServiceEnableRadiusResult = TypedDict(
    'DirectoryServiceEnableRadiusResult', {
    }
)


DirectoryServiceEnableSsoResult = TypedDict(
    'DirectoryServiceEnableSsoResult', {
    }
)


DirectoryServiceDirectoryLimits = TypedDict(
    'DirectoryServiceDirectoryLimits', {
        'Limit': Optional[int],
        'Limit': Optional[int],
        'CloudOnlyDirectoriesLimitReached': Optional[bool],
        'Limit': Optional[int],
        'Limit': Optional[int],
        'CloudOnlyDirectoriesLimitReached': Optional[bool],
        'Limit': Optional[int],
        'Limit': Optional[int],
        'ConnectedDirectoriesLimitReached': Optional[bool],
    }
)


DirectoryServiceGetDirectoryLimitsResult = TypedDict(
    'DirectoryServiceGetDirectoryLimitsResult', {
        'DirectoryLimits': Optional[DirectoryServiceDirectoryLimits],
    }
)


DirectoryServiceSnapshotLimits = TypedDict(
    'DirectoryServiceSnapshotLimits', {
        'Limit': Optional[int],
        'Limit': Optional[int],
        'ManualSnapshotsLimitReached': Optional[bool],
    }
)


DirectoryServiceGetSnapshotLimitsResult = TypedDict(
    'DirectoryServiceGetSnapshotLimitsResult', {
        'SnapshotLimits': Optional[DirectoryServiceSnapshotLimits],
    }
)


DirectoryServiceIpRouteInfo = TypedDict(
    'DirectoryServiceIpRouteInfo', {
        'DirectoryId': Optional[str],
        'CidrIp': Optional[str],
        'IpRouteStatusMsg': Optional[str],
        'AddedDateTime': Optional[datetime.datetime],
        'IpRouteStatusReason': Optional[str],
        'Description': Optional[str],
    }
)


DirectoryServiceListIpRoutesResult = TypedDict(
    'DirectoryServiceListIpRoutesResult', {
        'IpRoutesInfo': Optional[List[DirectoryServiceIpRouteInfo]],
        'NextToken': Optional[str],
    }
)


DirectoryServiceLogSubscription = TypedDict(
    'DirectoryServiceLogSubscription', {
        'DirectoryId': Optional[str],
        'LogGroupName': Optional[str],
        'SubscriptionCreatedDateTime': Optional[datetime.datetime],
    }
)


DirectoryServiceListLogSubscriptionsResult = TypedDict(
    'DirectoryServiceListLogSubscriptionsResult', {
        'LogSubscriptions': Optional[List[DirectoryServiceLogSubscription]],
        'NextToken': Optional[str],
    }
)


DirectoryServiceSchemaExtensionInfo = TypedDict(
    'DirectoryServiceSchemaExtensionInfo', {
        'DirectoryId': Optional[str],
        'SchemaExtensionId': Optional[str],
        'Description': Optional[str],
        'SchemaExtensionStatus': Optional[str],
        'SchemaExtensionStatusReason': Optional[str],
        'StartDateTime': Optional[datetime.datetime],
        'EndDateTime': Optional[datetime.datetime],
    }
)


DirectoryServiceListSchemaExtensionsResult = TypedDict(
    'DirectoryServiceListSchemaExtensionsResult', {
        'SchemaExtensionsInfo': Optional[List[DirectoryServiceSchemaExtensionInfo]],
        'NextToken': Optional[str],
    }
)


DirectoryServiceListTagsForResourceResult = TypedDict(
    'DirectoryServiceListTagsForResourceResult', {
        'Tags': Optional[List[DirectoryServiceTag]],
        'NextToken': Optional[str],
    }
)


DirectoryServiceRegisterEventTopicResult = TypedDict(
    'DirectoryServiceRegisterEventTopicResult', {
    }
)


DirectoryServiceRejectSharedDirectoryResult = TypedDict(
    'DirectoryServiceRejectSharedDirectoryResult', {
        'DirectoryId': Optional[str],
    }
)


DirectoryServiceRemoveIpRoutesResult = TypedDict(
    'DirectoryServiceRemoveIpRoutesResult', {
    }
)


DirectoryServiceRemoveTagsFromResourceResult = TypedDict(
    'DirectoryServiceRemoveTagsFromResourceResult', {
    }
)


DirectoryServiceResetUserPasswordResult = TypedDict(
    'DirectoryServiceResetUserPasswordResult', {
    }
)


DirectoryServiceRestoreFromSnapshotResult = TypedDict(
    'DirectoryServiceRestoreFromSnapshotResult', {
    }
)


DirectoryServiceShareTarget = TypedDict(
    'DirectoryServiceShareTarget', {
        'TargetId': str,
        'TargetType': str,
    }
)


DirectoryServiceShareDirectoryResult = TypedDict(
    'DirectoryServiceShareDirectoryResult', {
        'DirectoryId': Optional[str],
    }
)


DirectoryServiceStartSchemaExtensionResult = TypedDict(
    'DirectoryServiceStartSchemaExtensionResult', {
        'SchemaExtensionId': Optional[str],
    }
)


DirectoryServiceUnshareTarget = TypedDict(
    'DirectoryServiceUnshareTarget', {
        'TargetId': str,
        'TargetType': str,
    }
)


DirectoryServiceUnshareDirectoryResult = TypedDict(
    'DirectoryServiceUnshareDirectoryResult', {
        'DirectoryId': Optional[str],
    }
)


DirectoryServiceUpdateConditionalForwarderResult = TypedDict(
    'DirectoryServiceUpdateConditionalForwarderResult', {
    }
)


DirectoryServiceUpdateNumberOfDomainControllersResult = TypedDict(
    'DirectoryServiceUpdateNumberOfDomainControllersResult', {
    }
)


DirectoryServiceUpdateRadiusResult = TypedDict(
    'DirectoryServiceUpdateRadiusResult', {
    }
)


DirectoryServiceUpdateTrustResult = TypedDict(
    'DirectoryServiceUpdateTrustResult', {
        'RequestId': Optional[str],
        'TrustId': Optional[str],
    }
)


DirectoryServiceVerifyTrustResult = TypedDict(
    'DirectoryServiceVerifyTrustResult', {
        'TrustId': Optional[str],
    }
)


class EC2(BaseClient):
    def accept_reserved_instances_exchange_quote(self, *,
        ReservedInstanceIds: List[str],
        DryRun: bool = ...,
        TargetConfigurations: List[EC2TargetConfigurationRequest] = ...
    ) -> EC2AcceptReservedInstancesExchangeQuoteResult: ...

    def accept_transit_gateway_vpc_attachment(self, *,
        TransitGatewayAttachmentId: str,
        DryRun: bool = ...
    ) -> EC2AcceptTransitGatewayVpcAttachmentResult: ...

    def accept_vpc_endpoint_connections(self, *,
        ServiceId: str,
        VpcEndpointIds: List[str],
        DryRun: bool = ...
    ) -> EC2AcceptVpcEndpointConnectionsResult: ...

    def accept_vpc_peering_connection(self, *,
        DryRun: bool = ...,
        VpcPeeringConnectionId: str = ...
    ) -> EC2AcceptVpcPeeringConnectionResult: ...

    def advertise_byoip_cidr(self, *,
        Cidr: str,
        DryRun: bool = ...
    ) -> EC2AdvertiseByoipCidrResult: ...

    def allocate_address(self, *,
        Domain: str = ...,
        Address: str = ...,
        PublicIpv4Pool: str = ...,
        DryRun: bool = ...
    ) -> EC2AllocateAddressResult: ...

    def allocate_hosts(self, *,
        AvailabilityZone: str,
        InstanceType: str,
        Quantity: int,
        AutoPlacement: str = ...,
        ClientToken: str = ...,
        TagSpecifications: List[EC2TagSpecification] = ...
    ) -> EC2AllocateHostsResult: ...

    def apply_security_groups_to_client_vpn_target_network(self, *,
        ClientVpnEndpointId: str,
        VpcId: str,
        SecurityGroupIds: List[str],
        DryRun: bool = ...
    ) -> EC2ApplySecurityGroupsToClientVpnTargetNetworkResult: ...

    def assign_ipv6_addresses(self, *,
        NetworkInterfaceId: str,
        Ipv6AddressCount: int = ...,
        Ipv6Addresses: List[str] = ...
    ) -> EC2AssignIpv6AddressesResult: ...

    def assign_private_ip_addresses(self, *,
        NetworkInterfaceId: str,
        AllowReassignment: bool = ...,
        PrivateIpAddresses: List[str] = ...,
        SecondaryPrivateIpAddressCount: int = ...
    ): ...

    def associate_address(self, *,
        AllocationId: str = ...,
        InstanceId: str = ...,
        PublicIp: str = ...,
        AllowReassociation: bool = ...,
        DryRun: bool = ...,
        NetworkInterfaceId: str = ...,
        PrivateIpAddress: str = ...
    ) -> EC2AssociateAddressResult: ...

    def associate_client_vpn_target_network(self, *,
        ClientVpnEndpointId: str,
        SubnetId: str,
        DryRun: bool = ...
    ) -> EC2AssociateClientVpnTargetNetworkResult: ...

    def associate_dhcp_options(self, *,
        DhcpOptionsId: str,
        VpcId: str,
        DryRun: bool = ...
    ): ...

    def associate_iam_instance_profile(self, *,
        IamInstanceProfile: EC2IamInstanceProfileSpecification,
        InstanceId: str
    ) -> EC2AssociateIamInstanceProfileResult: ...

    def associate_route_table(self, *,
        RouteTableId: str,
        SubnetId: str,
        DryRun: bool = ...
    ) -> EC2AssociateRouteTableResult: ...

    def associate_subnet_cidr_block(self, *,
        Ipv6CidrBlock: str,
        SubnetId: str
    ) -> EC2AssociateSubnetCidrBlockResult: ...

    def associate_transit_gateway_route_table(self, *,
        TransitGatewayRouteTableId: str,
        TransitGatewayAttachmentId: str,
        DryRun: bool = ...
    ) -> EC2AssociateTransitGatewayRouteTableResult: ...

    def associate_vpc_cidr_block(self, *,
        VpcId: str,
        AmazonProvidedIpv6CidrBlock: bool = ...,
        CidrBlock: str = ...
    ) -> EC2AssociateVpcCidrBlockResult: ...

    def attach_classic_link_vpc(self, *,
        Groups: List[str],
        InstanceId: str,
        VpcId: str,
        DryRun: bool = ...
    ) -> EC2AttachClassicLinkVpcResult: ...

    def attach_internet_gateway(self, *,
        InternetGatewayId: str,
        VpcId: str,
        DryRun: bool = ...
    ): ...

    def attach_network_interface(self, *,
        DeviceIndex: int,
        InstanceId: str,
        NetworkInterfaceId: str,
        DryRun: bool = ...
    ) -> EC2AttachNetworkInterfaceResult: ...

    def attach_volume(self, *,
        Device: str,
        InstanceId: str,
        VolumeId: str,
        DryRun: bool = ...
    ) -> EC2VolumeAttachment: ...

    def attach_vpn_gateway(self, *,
        VpcId: str,
        VpnGatewayId: str,
        DryRun: bool = ...
    ) -> EC2AttachVpnGatewayResult: ...

    def authorize_client_vpn_ingress(self, *,
        ClientVpnEndpointId: str,
        TargetNetworkCidr: str,
        AccessGroupId: str = ...,
        AuthorizeAllGroups: bool = ...,
        Description: str = ...,
        DryRun: bool = ...
    ) -> EC2AuthorizeClientVpnIngressResult: ...

    def authorize_security_group_egress(self, *,
        GroupId: str,
        DryRun: bool = ...,
        IpPermissions: List[EC2IpPermission] = ...,
        CidrIp: str = ...,
        FromPort: int = ...,
        IpProtocol: str = ...,
        ToPort: int = ...,
        SourceSecurityGroupName: str = ...,
        SourceSecurityGroupOwnerId: str = ...
    ): ...

    def authorize_security_group_ingress(self, *,
        CidrIp: str = ...,
        FromPort: int = ...,
        GroupId: str = ...,
        GroupName: str = ...,
        IpPermissions: List[EC2IpPermission] = ...,
        IpProtocol: str = ...,
        SourceSecurityGroupName: str = ...,
        SourceSecurityGroupOwnerId: str = ...,
        ToPort: int = ...,
        DryRun: bool = ...
    ): ...

    def bundle_instance(self, *,
        InstanceId: str,
        Storage: EC2Storage,
        DryRun: bool = ...
    ) -> EC2BundleInstanceResult: ...

    def cancel_bundle_task(self, *,
        BundleId: str,
        DryRun: bool = ...
    ) -> EC2CancelBundleTaskResult: ...

    def cancel_capacity_reservation(self, *,
        CapacityReservationId: str,
        DryRun: bool = ...
    ) -> EC2CancelCapacityReservationResult: ...

    def cancel_conversion_task(self, *,
        ConversionTaskId: str,
        DryRun: bool = ...,
        ReasonMessage: str = ...
    ): ...

    def cancel_export_task(self, *,
        ExportTaskId: str
    ): ...

    def cancel_import_task(self, *,
        CancelReason: str = ...,
        DryRun: bool = ...,
        ImportTaskId: str = ...
    ) -> EC2CancelImportTaskResult: ...

    def cancel_reserved_instances_listing(self, *,
        ReservedInstancesListingId: str
    ) -> EC2CancelReservedInstancesListingResult: ...

    def cancel_spot_fleet_requests(self, *,
        SpotFleetRequestIds: List[str],
        TerminateInstances: bool,
        DryRun: bool = ...
    ) -> EC2CancelSpotFleetRequestsResponse: ...

    def cancel_spot_instance_requests(self, *,
        SpotInstanceRequestIds: List[str],
        DryRun: bool = ...
    ) -> EC2CancelSpotInstanceRequestsResult: ...

    def confirm_product_instance(self, *,
        InstanceId: str,
        ProductCode: str,
        DryRun: bool = ...
    ) -> EC2ConfirmProductInstanceResult: ...

    def copy_fpga_image(self, *,
        SourceFpgaImageId: str,
        SourceRegion: str,
        DryRun: bool = ...,
        Description: str = ...,
        Name: str = ...,
        ClientToken: str = ...
    ) -> EC2CopyFpgaImageResult: ...

    def copy_image(self, *,
        Name: str,
        SourceImageId: str,
        SourceRegion: str,
        ClientToken: str = ...,
        Description: str = ...,
        Encrypted: bool = ...,
        KmsKeyId: str = ...,
        DryRun: bool = ...
    ) -> EC2CopyImageResult: ...

    def copy_snapshot(self, *,
        SourceRegion: str,
        SourceSnapshotId: str,
        Description: str = ...,
        DestinationRegion: str = ...,
        Encrypted: bool = ...,
        KmsKeyId: str = ...,
        PresignedUrl: str = ...,
        DryRun: bool = ...
    ) -> EC2CopySnapshotResult: ...

    def create_capacity_reservation(self, *,
        InstanceType: str,
        InstancePlatform: str,
        AvailabilityZone: str,
        InstanceCount: int,
        ClientToken: str = ...,
        Tenancy: str = ...,
        EbsOptimized: bool = ...,
        EphemeralStorage: bool = ...,
        EndDate: datetime.datetime = ...,
        EndDateType: str = ...,
        InstanceMatchCriteria: str = ...,
        TagSpecifications: List[EC2TagSpecification] = ...,
        DryRun: bool = ...
    ) -> EC2CreateCapacityReservationResult: ...

    def create_client_vpn_endpoint(self, *,
        ClientCidrBlock: str,
        ServerCertificateArn: str,
        AuthenticationOptions: List[EC2ClientVpnAuthenticationRequest],
        ConnectionLogOptions: EC2ConnectionLogOptions,
        DnsServers: List[str] = ...,
        TransportProtocol: str = ...,
        Description: str = ...,
        DryRun: bool = ...,
        ClientToken: str = ...,
        TagSpecifications: List[EC2TagSpecification] = ...
    ) -> EC2CreateClientVpnEndpointResult: ...

    def create_client_vpn_route(self, *,
        ClientVpnEndpointId: str,
        DestinationCidrBlock: str,
        TargetVpcSubnetId: str,
        Description: str = ...,
        DryRun: bool = ...
    ) -> EC2CreateClientVpnRouteResult: ...

    def create_customer_gateway(self, *,
        BgpAsn: int,
        PublicIp: str,
        Type: str,
        DryRun: bool = ...
    ) -> EC2CreateCustomerGatewayResult: ...

    def create_default_subnet(self, *,
        AvailabilityZone: str,
        DryRun: bool = ...
    ) -> EC2CreateDefaultSubnetResult: ...

    def create_default_vpc(self, *,
        DryRun: bool = ...
    ) -> EC2CreateDefaultVpcResult: ...

    def create_dhcp_options(self, *,
        DhcpConfigurations: List[EC2NewDhcpConfiguration],
        DryRun: bool = ...
    ) -> EC2CreateDhcpOptionsResult: ...

    def create_egress_only_internet_gateway(self, *,
        VpcId: str,
        ClientToken: str = ...,
        DryRun: bool = ...
    ) -> EC2CreateEgressOnlyInternetGatewayResult: ...

    def create_fleet(self, *,
        LaunchTemplateConfigs: List[EC2FleetLaunchTemplateConfigRequest],
        TargetCapacitySpecification: EC2TargetCapacitySpecificationRequest,
        DryRun: bool = ...,
        ClientToken: str = ...,
        SpotOptions: EC2SpotOptionsRequest = ...,
        OnDemandOptions: EC2OnDemandOptionsRequest = ...,
        ExcessCapacityTerminationPolicy: str = ...,
        TerminateInstancesWithExpiration: bool = ...,
        Type: str = ...,
        ValidFrom: datetime.datetime = ...,
        ValidUntil: datetime.datetime = ...,
        ReplaceUnhealthyInstances: bool = ...,
        TagSpecifications: List[EC2TagSpecification] = ...
    ) -> EC2CreateFleetResult: ...

    def create_flow_logs(self, *,
        ResourceIds: List[str],
        ResourceType: str,
        TrafficType: str,
        DryRun: bool = ...,
        ClientToken: str = ...,
        DeliverLogsPermissionArn: str = ...,
        LogGroupName: str = ...,
        LogDestinationType: str = ...,
        LogDestination: str = ...
    ) -> EC2CreateFlowLogsResult: ...

    def create_fpga_image(self, *,
        InputStorageLocation: EC2StorageLocation,
        DryRun: bool = ...,
        LogsStorageLocation: EC2StorageLocation = ...,
        Description: str = ...,
        Name: str = ...,
        ClientToken: str = ...
    ) -> EC2CreateFpgaImageResult: ...

    def create_image(self, *,
        InstanceId: str,
        Name: str,
        BlockDeviceMappings: List[EC2BlockDeviceMapping] = ...,
        Description: str = ...,
        DryRun: bool = ...,
        NoReboot: bool = ...
    ) -> EC2CreateImageResult: ...

    def create_instance_export_task(self, *,
        InstanceId: str,
        Description: str = ...,
        ExportToS3Task: EC2ExportToS3TaskSpecification = ...,
        TargetEnvironment: str = ...
    ) -> EC2CreateInstanceExportTaskResult: ...

    def create_internet_gateway(self, *,
        DryRun: bool = ...
    ) -> EC2CreateInternetGatewayResult: ...

    def create_key_pair(self, *,
        KeyName: str,
        DryRun: bool = ...
    ) -> EC2KeyPair: ...

    def create_launch_template(self, *,
        LaunchTemplateName: str,
        LaunchTemplateData: EC2RequestLaunchTemplateData,
        DryRun: bool = ...,
        ClientToken: str = ...,
        VersionDescription: str = ...
    ) -> EC2CreateLaunchTemplateResult: ...

    def create_launch_template_version(self, *,
        LaunchTemplateData: EC2RequestLaunchTemplateData,
        DryRun: bool = ...,
        ClientToken: str = ...,
        LaunchTemplateId: str = ...,
        LaunchTemplateName: str = ...,
        SourceVersion: str = ...,
        VersionDescription: str = ...
    ) -> EC2CreateLaunchTemplateVersionResult: ...

    def create_nat_gateway(self, *,
        AllocationId: str,
        SubnetId: str,
        ClientToken: str = ...
    ) -> EC2CreateNatGatewayResult: ...

    def create_network_acl(self, *,
        VpcId: str,
        DryRun: bool = ...
    ) -> EC2CreateNetworkAclResult: ...

    def create_network_acl_entry(self, *,
        Egress: bool,
        NetworkAclId: str,
        Protocol: str,
        RuleAction: str,
        RuleNumber: int,
        CidrBlock: str = ...,
        DryRun: bool = ...,
        IcmpTypeCode: EC2IcmpTypeCode = ...,
        Ipv6CidrBlock: str = ...,
        PortRange: EC2PortRange = ...
    ): ...

    def create_network_interface(self, *,
        SubnetId: str,
        Description: str = ...,
        DryRun: bool = ...,
        Groups: List[str] = ...,
        Ipv6AddressCount: int = ...,
        Ipv6Addresses: List[EC2InstanceIpv6Address] = ...,
        PrivateIpAddress: str = ...,
        PrivateIpAddresses: List[EC2PrivateIpAddressSpecification] = ...,
        SecondaryPrivateIpAddressCount: int = ...,
        InterfaceType: str = ...
    ) -> EC2CreateNetworkInterfaceResult: ...

    def create_network_interface_permission(self, *,
        NetworkInterfaceId: str,
        Permission: str,
        AwsAccountId: str = ...,
        AwsService: str = ...,
        DryRun: bool = ...
    ) -> EC2CreateNetworkInterfacePermissionResult: ...

    def create_placement_group(self, *,
        DryRun: bool = ...,
        GroupName: str = ...,
        Strategy: str = ...,
        PartitionCount: int = ...
    ): ...

    def create_reserved_instances_listing(self, *,
        ClientToken: str,
        InstanceCount: int,
        PriceSchedules: List[EC2PriceScheduleSpecification],
        ReservedInstancesId: str
    ) -> EC2CreateReservedInstancesListingResult: ...

    def create_route(self, *,
        RouteTableId: str,
        DestinationCidrBlock: str = ...,
        DestinationIpv6CidrBlock: str = ...,
        DryRun: bool = ...,
        EgressOnlyInternetGatewayId: str = ...,
        GatewayId: str = ...,
        InstanceId: str = ...,
        NatGatewayId: str = ...,
        TransitGatewayId: str = ...,
        NetworkInterfaceId: str = ...,
        VpcPeeringConnectionId: str = ...
    ) -> EC2CreateRouteResult: ...

    def create_route_table(self, *,
        VpcId: str,
        DryRun: bool = ...
    ) -> EC2CreateRouteTableResult: ...

    def create_security_group(self, *,
        Description: str,
        GroupName: str,
        VpcId: str = ...,
        DryRun: bool = ...
    ) -> EC2CreateSecurityGroupResult: ...

    def create_snapshot(self, *,
        VolumeId: str,
        Description: str = ...,
        TagSpecifications: List[EC2TagSpecification] = ...,
        DryRun: bool = ...
    ) -> EC2Snapshot: ...

    def create_spot_datafeed_subscription(self, *,
        Bucket: str,
        DryRun: bool = ...,
        Prefix: str = ...
    ) -> EC2CreateSpotDatafeedSubscriptionResult: ...

    def create_subnet(self, *,
        CidrBlock: str,
        VpcId: str,
        AvailabilityZone: str = ...,
        AvailabilityZoneId: str = ...,
        Ipv6CidrBlock: str = ...,
        DryRun: bool = ...
    ) -> EC2CreateSubnetResult: ...

    def create_tags(self, *,
        Resources: List[str],
        Tags: List[EC2Tag],
        DryRun: bool = ...
    ): ...

    def create_transit_gateway(self, *,
        Description: str = ...,
        Options: EC2TransitGatewayRequestOptions = ...,
        TagSpecifications: List[EC2TagSpecification] = ...,
        DryRun: bool = ...
    ) -> EC2CreateTransitGatewayResult: ...

    def create_transit_gateway_route(self, *,
        DestinationCidrBlock: str,
        TransitGatewayRouteTableId: str,
        TransitGatewayAttachmentId: str = ...,
        Blackhole: bool = ...,
        DryRun: bool = ...
    ) -> EC2CreateTransitGatewayRouteResult: ...

    def create_transit_gateway_route_table(self, *,
        TransitGatewayId: str,
        TagSpecifications: List[EC2TagSpecification] = ...,
        DryRun: bool = ...
    ) -> EC2CreateTransitGatewayRouteTableResult: ...

    def create_transit_gateway_vpc_attachment(self, *,
        TransitGatewayId: str,
        VpcId: str,
        SubnetIds: List[str],
        Options: EC2CreateTransitGatewayVpcAttachmentRequestOptions = ...,
        TagSpecifications: List[EC2TagSpecification] = ...,
        DryRun: bool = ...
    ) -> EC2CreateTransitGatewayVpcAttachmentResult: ...

    def create_volume(self, *,
        AvailabilityZone: str,
        Encrypted: bool = ...,
        Iops: int = ...,
        KmsKeyId: str = ...,
        Size: int = ...,
        SnapshotId: str = ...,
        VolumeType: str = ...,
        DryRun: bool = ...,
        TagSpecifications: List[EC2TagSpecification] = ...
    ) -> EC2Volume: ...

    def create_vpc(self, *,
        CidrBlock: str,
        AmazonProvidedIpv6CidrBlock: bool = ...,
        DryRun: bool = ...,
        InstanceTenancy: str = ...
    ) -> EC2CreateVpcResult: ...

    def create_vpc_endpoint(self, *,
        VpcId: str,
        ServiceName: str,
        DryRun: bool = ...,
        VpcEndpointType: str = ...,
        PolicyDocument: str = ...,
        RouteTableIds: List[str] = ...,
        SubnetIds: List[str] = ...,
        SecurityGroupIds: List[str] = ...,
        ClientToken: str = ...,
        PrivateDnsEnabled: bool = ...
    ) -> EC2CreateVpcEndpointResult: ...

    def create_vpc_endpoint_connection_notification(self, *,
        ConnectionNotificationArn: str,
        ConnectionEvents: List[str],
        DryRun: bool = ...,
        ServiceId: str = ...,
        VpcEndpointId: str = ...,
        ClientToken: str = ...
    ) -> EC2CreateVpcEndpointConnectionNotificationResult: ...

    def create_vpc_endpoint_service_configuration(self, *,
        NetworkLoadBalancerArns: List[str],
        DryRun: bool = ...,
        AcceptanceRequired: bool = ...,
        ClientToken: str = ...
    ) -> EC2CreateVpcEndpointServiceConfigurationResult: ...

    def create_vpc_peering_connection(self, *,
        DryRun: bool = ...,
        PeerOwnerId: str = ...,
        PeerVpcId: str = ...,
        VpcId: str = ...,
        PeerRegion: str = ...
    ) -> EC2CreateVpcPeeringConnectionResult: ...

    def create_vpn_connection(self, *,
        CustomerGatewayId: str,
        Type: str,
        VpnGatewayId: str = ...,
        TransitGatewayId: str = ...,
        DryRun: bool = ...,
        Options: EC2VpnConnectionOptionsSpecification = ...
    ) -> EC2CreateVpnConnectionResult: ...

    def create_vpn_connection_route(self, *,
        DestinationCidrBlock: str,
        VpnConnectionId: str
    ): ...

    def create_vpn_gateway(self, *,
        Type: str,
        AvailabilityZone: str = ...,
        AmazonSideAsn: int = ...,
        DryRun: bool = ...
    ) -> EC2CreateVpnGatewayResult: ...

    def delete_client_vpn_endpoint(self, *,
        ClientVpnEndpointId: str,
        DryRun: bool = ...
    ) -> EC2DeleteClientVpnEndpointResult: ...

    def delete_client_vpn_route(self, *,
        ClientVpnEndpointId: str,
        DestinationCidrBlock: str,
        TargetVpcSubnetId: str = ...,
        DryRun: bool = ...
    ) -> EC2DeleteClientVpnRouteResult: ...

    def delete_customer_gateway(self, *,
        CustomerGatewayId: str,
        DryRun: bool = ...
    ): ...

    def delete_dhcp_options(self, *,
        DhcpOptionsId: str,
        DryRun: bool = ...
    ): ...

    def delete_egress_only_internet_gateway(self, *,
        EgressOnlyInternetGatewayId: str,
        DryRun: bool = ...
    ) -> EC2DeleteEgressOnlyInternetGatewayResult: ...

    def delete_fleets(self, *,
        FleetIds: List[str],
        TerminateInstances: bool,
        DryRun: bool = ...
    ) -> EC2DeleteFleetsResult: ...

    def delete_flow_logs(self, *,
        FlowLogIds: List[str],
        DryRun: bool = ...
    ) -> EC2DeleteFlowLogsResult: ...

    def delete_fpga_image(self, *,
        FpgaImageId: str,
        DryRun: bool = ...
    ) -> EC2DeleteFpgaImageResult: ...

    def delete_internet_gateway(self, *,
        InternetGatewayId: str,
        DryRun: bool = ...
    ): ...

    def delete_key_pair(self, *,
        KeyName: str,
        DryRun: bool = ...
    ): ...

    def delete_launch_template(self, *,
        DryRun: bool = ...,
        LaunchTemplateId: str = ...,
        LaunchTemplateName: str = ...
    ) -> EC2DeleteLaunchTemplateResult: ...

    def delete_launch_template_versions(self, *,
        Versions: List[str],
        DryRun: bool = ...,
        LaunchTemplateId: str = ...,
        LaunchTemplateName: str = ...
    ) -> EC2DeleteLaunchTemplateVersionsResult: ...

    def delete_nat_gateway(self, *,
        NatGatewayId: str
    ) -> EC2DeleteNatGatewayResult: ...

    def delete_network_acl(self, *,
        NetworkAclId: str,
        DryRun: bool = ...
    ): ...

    def delete_network_acl_entry(self, *,
        Egress: bool,
        NetworkAclId: str,
        RuleNumber: int,
        DryRun: bool = ...
    ): ...

    def delete_network_interface(self, *,
        NetworkInterfaceId: str,
        DryRun: bool = ...
    ): ...

    def delete_network_interface_permission(self, *,
        NetworkInterfacePermissionId: str,
        Force: bool = ...,
        DryRun: bool = ...
    ) -> EC2DeleteNetworkInterfacePermissionResult: ...

    def delete_placement_group(self, *,
        GroupName: str,
        DryRun: bool = ...
    ): ...

    def delete_route(self, *,
        RouteTableId: str,
        DestinationCidrBlock: str = ...,
        DestinationIpv6CidrBlock: str = ...,
        DryRun: bool = ...
    ): ...

    def delete_route_table(self, *,
        RouteTableId: str,
        DryRun: bool = ...
    ): ...

    def delete_security_group(self, *,
        GroupId: str = ...,
        GroupName: str = ...,
        DryRun: bool = ...
    ): ...

    def delete_snapshot(self, *,
        SnapshotId: str,
        DryRun: bool = ...
    ): ...

    def delete_spot_datafeed_subscription(self, *,
        DryRun: bool = ...
    ): ...

    def delete_subnet(self, *,
        SubnetId: str,
        DryRun: bool = ...
    ): ...

    def delete_tags(self, *,
        Resources: List[str],
        DryRun: bool = ...,
        Tags: List[EC2Tag] = ...
    ): ...

    def delete_transit_gateway(self, *,
        TransitGatewayId: str,
        DryRun: bool = ...
    ) -> EC2DeleteTransitGatewayResult: ...

    def delete_transit_gateway_route(self, *,
        TransitGatewayRouteTableId: str,
        DestinationCidrBlock: str,
        DryRun: bool = ...
    ) -> EC2DeleteTransitGatewayRouteResult: ...

    def delete_transit_gateway_route_table(self, *,
        TransitGatewayRouteTableId: str,
        DryRun: bool = ...
    ) -> EC2DeleteTransitGatewayRouteTableResult: ...

    def delete_transit_gateway_vpc_attachment(self, *,
        TransitGatewayAttachmentId: str,
        DryRun: bool = ...
    ) -> EC2DeleteTransitGatewayVpcAttachmentResult: ...

    def delete_volume(self, *,
        VolumeId: str,
        DryRun: bool = ...
    ): ...

    def delete_vpc(self, *,
        VpcId: str,
        DryRun: bool = ...
    ): ...

    def delete_vpc_endpoint_connection_notifications(self, *,
        ConnectionNotificationIds: List[str],
        DryRun: bool = ...
    ) -> EC2DeleteVpcEndpointConnectionNotificationsResult: ...

    def delete_vpc_endpoint_service_configurations(self, *,
        ServiceIds: List[str],
        DryRun: bool = ...
    ) -> EC2DeleteVpcEndpointServiceConfigurationsResult: ...

    def delete_vpc_endpoints(self, *,
        VpcEndpointIds: List[str],
        DryRun: bool = ...
    ) -> EC2DeleteVpcEndpointsResult: ...

    def delete_vpc_peering_connection(self, *,
        VpcPeeringConnectionId: str,
        DryRun: bool = ...
    ) -> EC2DeleteVpcPeeringConnectionResult: ...

    def delete_vpn_connection(self, *,
        VpnConnectionId: str,
        DryRun: bool = ...
    ): ...

    def delete_vpn_connection_route(self, *,
        DestinationCidrBlock: str,
        VpnConnectionId: str
    ): ...

    def delete_vpn_gateway(self, *,
        VpnGatewayId: str,
        DryRun: bool = ...
    ): ...

    def deprovision_byoip_cidr(self, *,
        Cidr: str,
        DryRun: bool = ...
    ) -> EC2DeprovisionByoipCidrResult: ...

    def deregister_image(self, *,
        ImageId: str,
        DryRun: bool = ...
    ): ...

    def describe_account_attributes(self, *,
        AttributeNames: List[str] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeAccountAttributesResult: ...

    def describe_addresses(self, *,
        Filters: List[EC2Filter] = ...,
        PublicIps: List[str] = ...,
        AllocationIds: List[str] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeAddressesResult: ...

    def describe_aggregate_id_format(self, *,
        DryRun: bool = ...
    ) -> EC2DescribeAggregateIdFormatResult: ...

    def describe_availability_zones(self, *,
        Filters: List[EC2Filter] = ...,
        ZoneNames: List[str] = ...,
        ZoneIds: List[str] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeAvailabilityZonesResult: ...

    def describe_bundle_tasks(self, *,
        BundleIds: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeBundleTasksResult: ...

    def describe_byoip_cidrs(self, *,
        MaxResults: int,
        DryRun: bool = ...,
        NextToken: str = ...
    ) -> EC2DescribeByoipCidrsResult: ...

    def describe_capacity_reservations(self, *,
        CapacityReservationIds: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeCapacityReservationsResult: ...

    def describe_classic_link_instances(self, *,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...,
        InstanceIds: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeClassicLinkInstancesResult: ...

    def describe_client_vpn_authorization_rules(self, *,
        ClientVpnEndpointId: str,
        DryRun: bool = ...,
        NextToken: str = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...
    ) -> EC2DescribeClientVpnAuthorizationRulesResult: ...

    def describe_client_vpn_connections(self, *,
        ClientVpnEndpointId: str,
        Filters: List[EC2Filter] = ...,
        NextToken: str = ...,
        MaxResults: int = ...,
        DryRun: bool = ...
    ) -> EC2DescribeClientVpnConnectionsResult: ...

    def describe_client_vpn_endpoints(self, *,
        ClientVpnEndpointIds: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeClientVpnEndpointsResult: ...

    def describe_client_vpn_routes(self, *,
        ClientVpnEndpointId: str,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        DryRun: bool = ...
    ) -> EC2DescribeClientVpnRoutesResult: ...

    def describe_client_vpn_target_networks(self, *,
        ClientVpnEndpointId: str,
        AssociationIds: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeClientVpnTargetNetworksResult: ...

    def describe_conversion_tasks(self, *,
        ConversionTaskIds: List[str] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeConversionTasksResult: ...

    def describe_customer_gateways(self, *,
        CustomerGatewayIds: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeCustomerGatewaysResult: ...

    def describe_dhcp_options(self, *,
        DhcpOptionsIds: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeDhcpOptionsResult: ...

    def describe_egress_only_internet_gateways(self, *,
        DryRun: bool = ...,
        EgressOnlyInternetGatewayIds: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeEgressOnlyInternetGatewaysResult: ...

    def describe_elastic_gpus(self, *,
        ElasticGpuIds: List[str] = ...,
        DryRun: bool = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeElasticGpusResult: ...

    def describe_export_tasks(self, *,
        ExportTaskIds: List[str] = ...
    ) -> EC2DescribeExportTasksResult: ...

    def describe_fleet_history(self, *,
        FleetId: str,
        StartTime: datetime.datetime,
        DryRun: bool = ...,
        EventType: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeFleetHistoryResult: ...

    def describe_fleet_instances(self, *,
        FleetId: str,
        DryRun: bool = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        Filters: List[EC2Filter] = ...
    ) -> EC2DescribeFleetInstancesResult: ...

    def describe_fleets(self, *,
        DryRun: bool = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        FleetIds: List[str] = ...,
        Filters: List[EC2Filter] = ...
    ) -> EC2DescribeFleetsResult: ...

    def describe_flow_logs(self, *,
        DryRun: bool = ...,
        Filter: List[EC2Filter] = ...,
        FlowLogIds: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeFlowLogsResult: ...

    def describe_fpga_image_attribute(self, *,
        FpgaImageId: str,
        Attribute: str,
        DryRun: bool = ...
    ) -> EC2DescribeFpgaImageAttributeResult: ...

    def describe_fpga_images(self, *,
        DryRun: bool = ...,
        FpgaImageIds: List[str] = ...,
        Owners: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribeFpgaImagesResult: ...

    def describe_host_reservation_offerings(self, *,
        Filter: List[EC2Filter] = ...,
        MaxDuration: int = ...,
        MaxResults: int = ...,
        MinDuration: int = ...,
        NextToken: str = ...,
        OfferingId: str = ...
    ) -> EC2DescribeHostReservationOfferingsResult: ...

    def describe_host_reservations(self, *,
        Filter: List[EC2Filter] = ...,
        HostReservationIdSet: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeHostReservationsResult: ...

    def describe_hosts(self, *,
        Filter: List[EC2Filter] = ...,
        HostIds: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeHostsResult: ...

    def describe_iam_instance_profile_associations(self, *,
        AssociationIds: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeIamInstanceProfileAssociationsResult: ...

    def describe_id_format(self, *,
        Resource: str = ...
    ) -> EC2DescribeIdFormatResult: ...

    def describe_identity_id_format(self, *,
        PrincipalArn: str,
        Resource: str = ...
    ) -> EC2DescribeIdentityIdFormatResult: ...

    def describe_image_attribute(self, *,
        Attribute: str,
        ImageId: str,
        DryRun: bool = ...
    ) -> EC2ImageAttribute: ...

    def describe_images(self, *,
        ExecutableUsers: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        ImageIds: List[str] = ...,
        Owners: List[str] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeImagesResult: ...

    def describe_import_image_tasks(self, *,
        DryRun: bool = ...,
        Filters: List[EC2Filter] = ...,
        ImportTaskIds: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeImportImageTasksResult: ...

    def describe_import_snapshot_tasks(self, *,
        DryRun: bool = ...,
        Filters: List[EC2Filter] = ...,
        ImportTaskIds: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeImportSnapshotTasksResult: ...

    def describe_instance_attribute(self, *,
        Attribute: str,
        InstanceId: str,
        DryRun: bool = ...
    ) -> EC2InstanceAttribute: ...

    def describe_instance_credit_specifications(self, *,
        DryRun: bool = ...,
        Filters: List[EC2Filter] = ...,
        InstanceIds: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeInstanceCreditSpecificationsResult: ...

    def describe_instance_status(self, *,
        Filters: List[EC2Filter] = ...,
        InstanceIds: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        DryRun: bool = ...,
        IncludeAllInstances: bool = ...
    ) -> EC2DescribeInstanceStatusResult: ...

    def describe_instances(self, *,
        Filters: List[EC2Filter] = ...,
        InstanceIds: List[str] = ...,
        DryRun: bool = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeInstancesResult: ...

    def describe_internet_gateways(self, *,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...,
        InternetGatewayIds: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribeInternetGatewaysResult: ...

    def describe_key_pairs(self, *,
        Filters: List[EC2Filter] = ...,
        KeyNames: List[str] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeKeyPairsResult: ...

    def describe_launch_template_versions(self, *,
        DryRun: bool = ...,
        LaunchTemplateId: str = ...,
        LaunchTemplateName: str = ...,
        Versions: List[str] = ...,
        MinVersion: str = ...,
        MaxVersion: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...,
        Filters: List[EC2Filter] = ...
    ) -> EC2DescribeLaunchTemplateVersionsResult: ...

    def describe_launch_templates(self, *,
        DryRun: bool = ...,
        LaunchTemplateIds: List[str] = ...,
        LaunchTemplateNames: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribeLaunchTemplatesResult: ...

    def describe_moving_addresses(self, *,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        PublicIps: List[str] = ...
    ) -> EC2DescribeMovingAddressesResult: ...

    def describe_nat_gateways(self, *,
        Filter: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NatGatewayIds: List[str] = ...,
        NextToken: str = ...
    ) -> EC2DescribeNatGatewaysResult: ...

    def describe_network_acls(self, *,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...,
        NetworkAclIds: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribeNetworkAclsResult: ...

    def describe_network_interface_attribute(self, *,
        NetworkInterfaceId: str,
        Attribute: str = ...,
        DryRun: bool = ...
    ) -> EC2DescribeNetworkInterfaceAttributeResult: ...

    def describe_network_interface_permissions(self, *,
        NetworkInterfacePermissionIds: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribeNetworkInterfacePermissionsResult: ...

    def describe_network_interfaces(self, *,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...,
        NetworkInterfaceIds: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribeNetworkInterfacesResult: ...

    def describe_placement_groups(self, *,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...,
        GroupNames: List[str] = ...
    ) -> EC2DescribePlacementGroupsResult: ...

    def describe_prefix_lists(self, *,
        DryRun: bool = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        PrefixListIds: List[str] = ...
    ) -> EC2DescribePrefixListsResult: ...

    def describe_principal_id_format(self, *,
        DryRun: bool = ...,
        Resources: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribePrincipalIdFormatResult: ...

    def describe_public_ipv4_pools(self, *,
        PoolIds: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribePublicIpv4PoolsResult: ...

    def describe_regions(self, *,
        Filters: List[EC2Filter] = ...,
        RegionNames: List[str] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeRegionsResult: ...

    def describe_reserved_instances(self, *,
        Filters: List[EC2Filter] = ...,
        OfferingClass: str = ...,
        ReservedInstancesIds: List[str] = ...,
        DryRun: bool = ...,
        OfferingType: str = ...
    ) -> EC2DescribeReservedInstancesResult: ...

    def describe_reserved_instances_listings(self, *,
        Filters: List[EC2Filter] = ...,
        ReservedInstancesId: str = ...,
        ReservedInstancesListingId: str = ...
    ) -> EC2DescribeReservedInstancesListingsResult: ...

    def describe_reserved_instances_modifications(self, *,
        Filters: List[EC2Filter] = ...,
        ReservedInstancesModificationIds: List[str] = ...,
        NextToken: str = ...
    ) -> EC2DescribeReservedInstancesModificationsResult: ...

    def describe_reserved_instances_offerings(self, *,
        AvailabilityZone: str = ...,
        Filters: List[EC2Filter] = ...,
        IncludeMarketplace: bool = ...,
        InstanceType: str = ...,
        MaxDuration: int = ...,
        MaxInstanceCount: int = ...,
        MinDuration: int = ...,
        OfferingClass: str = ...,
        ProductDescription: str = ...,
        ReservedInstancesOfferingIds: List[str] = ...,
        DryRun: bool = ...,
        InstanceTenancy: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        OfferingType: str = ...
    ) -> EC2DescribeReservedInstancesOfferingsResult: ...

    def describe_route_tables(self, *,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...,
        RouteTableIds: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribeRouteTablesResult: ...

    def describe_scheduled_instance_availability(self, *,
        FirstSlotStartTimeRange: EC2SlotDateTimeRangeRequest,
        Recurrence: EC2ScheduledInstanceRecurrenceRequest,
        DryRun: bool = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        MaxSlotDurationInHours: int = ...,
        MinSlotDurationInHours: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeScheduledInstanceAvailabilityResult: ...

    def describe_scheduled_instances(self, *,
        DryRun: bool = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        ScheduledInstanceIds: List[str] = ...,
        SlotStartTimeRange: EC2SlotStartTimeRangeRequest = ...
    ) -> EC2DescribeScheduledInstancesResult: ...

    def describe_security_group_references(self, *,
        GroupId: List[str],
        DryRun: bool = ...
    ) -> EC2DescribeSecurityGroupReferencesResult: ...

    def describe_security_groups(self, *,
        Filters: List[EC2Filter] = ...,
        GroupIds: List[str] = ...,
        GroupNames: List[str] = ...,
        DryRun: bool = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribeSecurityGroupsResult: ...

    def describe_snapshot_attribute(self, *,
        Attribute: str,
        SnapshotId: str,
        DryRun: bool = ...
    ) -> EC2DescribeSnapshotAttributeResult: ...

    def describe_snapshots(self, *,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        OwnerIds: List[str] = ...,
        RestorableByUserIds: List[str] = ...,
        SnapshotIds: List[str] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeSnapshotsResult: ...

    def describe_spot_datafeed_subscription(self, *,
        DryRun: bool = ...
    ) -> EC2DescribeSpotDatafeedSubscriptionResult: ...

    def describe_spot_fleet_instances(self, *,
        SpotFleetRequestId: str,
        DryRun: bool = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeSpotFleetInstancesResponse: ...

    def describe_spot_fleet_request_history(self, *,
        SpotFleetRequestId: str,
        StartTime: datetime.datetime,
        DryRun: bool = ...,
        EventType: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeSpotFleetRequestHistoryResponse: ...

    def describe_spot_fleet_requests(self, *,
        DryRun: bool = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        SpotFleetRequestIds: List[str] = ...
    ) -> EC2DescribeSpotFleetRequestsResponse: ...

    def describe_spot_instance_requests(self, *,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...,
        SpotInstanceRequestIds: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribeSpotInstanceRequestsResult: ...

    def describe_spot_price_history(self, *,
        Filters: List[EC2Filter] = ...,
        AvailabilityZone: str = ...,
        DryRun: bool = ...,
        EndTime: datetime.datetime = ...,
        InstanceTypes: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        ProductDescriptions: List[str] = ...,
        StartTime: datetime.datetime = ...
    ) -> EC2DescribeSpotPriceHistoryResult: ...

    def describe_stale_security_groups(self, *,
        VpcId: str,
        DryRun: bool = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeStaleSecurityGroupsResult: ...

    def describe_subnets(self, *,
        Filters: List[EC2Filter] = ...,
        SubnetIds: List[str] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeSubnetsResult: ...

    def describe_tags(self, *,
        DryRun: bool = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeTagsResult: ...

    def describe_transit_gateway_attachments(self, *,
        TransitGatewayAttachmentIds: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        DryRun: bool = ...
    ) -> EC2DescribeTransitGatewayAttachmentsResult: ...

    def describe_transit_gateway_route_tables(self, *,
        TransitGatewayRouteTableIds: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        DryRun: bool = ...
    ) -> EC2DescribeTransitGatewayRouteTablesResult: ...

    def describe_transit_gateway_vpc_attachments(self, *,
        TransitGatewayAttachmentIds: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        DryRun: bool = ...
    ) -> EC2DescribeTransitGatewayVpcAttachmentsResult: ...

    def describe_transit_gateways(self, *,
        TransitGatewayIds: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        DryRun: bool = ...
    ) -> EC2DescribeTransitGatewaysResult: ...

    def describe_volume_attribute(self, *,
        Attribute: str,
        VolumeId: str,
        DryRun: bool = ...
    ) -> EC2DescribeVolumeAttributeResult: ...

    def describe_volume_status(self, *,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        VolumeIds: List[str] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeVolumeStatusResult: ...

    def describe_volumes(self, *,
        Filters: List[EC2Filter] = ...,
        VolumeIds: List[str] = ...,
        DryRun: bool = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeVolumesResult: ...

    def describe_volumes_modifications(self, *,
        DryRun: bool = ...,
        VolumeIds: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribeVolumesModificationsResult: ...

    def describe_vpc_attribute(self, *,
        Attribute: str,
        VpcId: str,
        DryRun: bool = ...
    ) -> EC2DescribeVpcAttributeResult: ...

    def describe_vpc_classic_link(self, *,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...,
        VpcIds: List[str] = ...
    ) -> EC2DescribeVpcClassicLinkResult: ...

    def describe_vpc_classic_link_dns_support(self, *,
        MaxResults: int = ...,
        NextToken: str = ...,
        VpcIds: List[str] = ...
    ) -> EC2DescribeVpcClassicLinkDnsSupportResult: ...

    def describe_vpc_endpoint_connection_notifications(self, *,
        DryRun: bool = ...,
        ConnectionNotificationId: str = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeVpcEndpointConnectionNotificationsResult: ...

    def describe_vpc_endpoint_connections(self, *,
        DryRun: bool = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeVpcEndpointConnectionsResult: ...

    def describe_vpc_endpoint_service_configurations(self, *,
        DryRun: bool = ...,
        ServiceIds: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeVpcEndpointServiceConfigurationsResult: ...

    def describe_vpc_endpoint_service_permissions(self, *,
        ServiceId: str,
        DryRun: bool = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeVpcEndpointServicePermissionsResult: ...

    def describe_vpc_endpoint_services(self, *,
        DryRun: bool = ...,
        ServiceNames: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeVpcEndpointServicesResult: ...

    def describe_vpc_endpoints(self, *,
        DryRun: bool = ...,
        VpcEndpointIds: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeVpcEndpointsResult: ...

    def describe_vpc_peering_connections(self, *,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...,
        VpcPeeringConnectionIds: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribeVpcPeeringConnectionsResult: ...

    def describe_vpcs(self, *,
        Filters: List[EC2Filter] = ...,
        VpcIds: List[str] = ...,
        DryRun: bool = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribeVpcsResult: ...

    def describe_vpn_connections(self, *,
        Filters: List[EC2Filter] = ...,
        VpnConnectionIds: List[str] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeVpnConnectionsResult: ...

    def describe_vpn_gateways(self, *,
        Filters: List[EC2Filter] = ...,
        VpnGatewayIds: List[str] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeVpnGatewaysResult: ...

    def detach_classic_link_vpc(self, *,
        InstanceId: str,
        VpcId: str,
        DryRun: bool = ...
    ) -> EC2DetachClassicLinkVpcResult: ...

    def detach_internet_gateway(self, *,
        InternetGatewayId: str,
        VpcId: str,
        DryRun: bool = ...
    ): ...

    def detach_network_interface(self, *,
        AttachmentId: str,
        DryRun: bool = ...,
        Force: bool = ...
    ): ...

    def detach_volume(self, *,
        VolumeId: str,
        Device: str = ...,
        Force: bool = ...,
        InstanceId: str = ...,
        DryRun: bool = ...
    ) -> EC2VolumeAttachment: ...

    def detach_vpn_gateway(self, *,
        VpcId: str,
        VpnGatewayId: str,
        DryRun: bool = ...
    ): ...

    def disable_transit_gateway_route_table_propagation(self, *,
        TransitGatewayRouteTableId: str,
        TransitGatewayAttachmentId: str,
        DryRun: bool = ...
    ) -> EC2DisableTransitGatewayRouteTablePropagationResult: ...

    def disable_vgw_route_propagation(self, *,
        GatewayId: str,
        RouteTableId: str
    ): ...

    def disable_vpc_classic_link(self, *,
        VpcId: str,
        DryRun: bool = ...
    ) -> EC2DisableVpcClassicLinkResult: ...

    def disable_vpc_classic_link_dns_support(self, *,
        VpcId: str = ...
    ) -> EC2DisableVpcClassicLinkDnsSupportResult: ...

    def disassociate_address(self, *,
        AssociationId: str = ...,
        PublicIp: str = ...,
        DryRun: bool = ...
    ): ...

    def disassociate_client_vpn_target_network(self, *,
        ClientVpnEndpointId: str,
        AssociationId: str,
        DryRun: bool = ...
    ) -> EC2DisassociateClientVpnTargetNetworkResult: ...

    def disassociate_iam_instance_profile(self, *,
        AssociationId: str
    ) -> EC2DisassociateIamInstanceProfileResult: ...

    def disassociate_route_table(self, *,
        AssociationId: str,
        DryRun: bool = ...
    ): ...

    def disassociate_subnet_cidr_block(self, *,
        AssociationId: str
    ) -> EC2DisassociateSubnetCidrBlockResult: ...

    def disassociate_transit_gateway_route_table(self, *,
        TransitGatewayRouteTableId: str,
        TransitGatewayAttachmentId: str,
        DryRun: bool = ...
    ) -> EC2DisassociateTransitGatewayRouteTableResult: ...

    def disassociate_vpc_cidr_block(self, *,
        AssociationId: str
    ) -> EC2DisassociateVpcCidrBlockResult: ...

    def enable_transit_gateway_route_table_propagation(self, *,
        TransitGatewayRouteTableId: str,
        TransitGatewayAttachmentId: str,
        DryRun: bool = ...
    ) -> EC2EnableTransitGatewayRouteTablePropagationResult: ...

    def enable_vgw_route_propagation(self, *,
        GatewayId: str,
        RouteTableId: str
    ): ...

    def enable_volume_io(self, *,
        VolumeId: str,
        DryRun: bool = ...
    ): ...

    def enable_vpc_classic_link(self, *,
        VpcId: str,
        DryRun: bool = ...
    ) -> EC2EnableVpcClassicLinkResult: ...

    def enable_vpc_classic_link_dns_support(self, *,
        VpcId: str = ...
    ) -> EC2EnableVpcClassicLinkDnsSupportResult: ...

    def export_client_vpn_client_certificate_revocation_list(self, *,
        ClientVpnEndpointId: str,
        DryRun: bool = ...
    ) -> EC2ExportClientVpnClientCertificateRevocationListResult: ...

    def export_client_vpn_client_configuration(self, *,
        ClientVpnEndpointId: str,
        DryRun: bool = ...
    ) -> EC2ExportClientVpnClientConfigurationResult: ...

    def export_transit_gateway_routes(self, *,
        TransitGatewayRouteTableId: str,
        S3Bucket: str,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...
    ) -> EC2ExportTransitGatewayRoutesResult: ...

    def get_console_output(self, *,
        InstanceId: str,
        DryRun: bool = ...,
        Latest: bool = ...
    ) -> EC2GetConsoleOutputResult: ...

    def get_console_screenshot(self, *,
        InstanceId: str,
        DryRun: bool = ...,
        WakeUp: bool = ...
    ) -> EC2GetConsoleScreenshotResult: ...

    def get_host_reservation_purchase_preview(self, *,
        HostIdSet: List[str],
        OfferingId: str
    ) -> EC2GetHostReservationPurchasePreviewResult: ...

    def get_launch_template_data(self, *,
        InstanceId: str,
        DryRun: bool = ...
    ) -> EC2GetLaunchTemplateDataResult: ...

    def get_password_data(self, *,
        InstanceId: str,
        DryRun: bool = ...
    ) -> EC2GetPasswordDataResult: ...

    def get_reserved_instances_exchange_quote(self, *,
        ReservedInstanceIds: List[str],
        DryRun: bool = ...,
        TargetConfigurations: List[EC2TargetConfigurationRequest] = ...
    ) -> EC2GetReservedInstancesExchangeQuoteResult: ...

    def get_transit_gateway_attachment_propagations(self, *,
        TransitGatewayAttachmentId: str,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        DryRun: bool = ...
    ) -> EC2GetTransitGatewayAttachmentPropagationsResult: ...

    def get_transit_gateway_route_table_associations(self, *,
        TransitGatewayRouteTableId: str,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        DryRun: bool = ...
    ) -> EC2GetTransitGatewayRouteTableAssociationsResult: ...

    def get_transit_gateway_route_table_propagations(self, *,
        TransitGatewayRouteTableId: str,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        DryRun: bool = ...
    ) -> EC2GetTransitGatewayRouteTablePropagationsResult: ...

    def import_client_vpn_client_certificate_revocation_list(self, *,
        ClientVpnEndpointId: str,
        CertificateRevocationList: str,
        DryRun: bool = ...
    ) -> EC2ImportClientVpnClientCertificateRevocationListResult: ...

    def import_image(self, *,
        Architecture: str = ...,
        ClientData: EC2ClientData = ...,
        ClientToken: str = ...,
        Description: str = ...,
        DiskContainers: List[EC2ImageDiskContainer] = ...,
        DryRun: bool = ...,
        Encrypted: bool = ...,
        Hypervisor: str = ...,
        KmsKeyId: str = ...,
        LicenseType: str = ...,
        Platform: str = ...,
        RoleName: str = ...
    ) -> EC2ImportImageResult: ...

    def import_instance(self, *,
        Platform: str,
        Description: str = ...,
        DiskImages: List[EC2DiskImage] = ...,
        DryRun: bool = ...,
        LaunchSpecification: EC2ImportInstanceLaunchSpecification = ...
    ) -> EC2ImportInstanceResult: ...

    def import_key_pair(self, *,
        KeyName: str,
        PublicKeyMaterial: bytes,
        DryRun: bool = ...
    ) -> EC2ImportKeyPairResult: ...

    def import_snapshot(self, *,
        ClientData: EC2ClientData = ...,
        ClientToken: str = ...,
        Description: str = ...,
        DiskContainer: EC2SnapshotDiskContainer = ...,
        DryRun: bool = ...,
        Encrypted: bool = ...,
        KmsKeyId: str = ...,
        RoleName: str = ...
    ) -> EC2ImportSnapshotResult: ...

    def import_volume(self, *,
        AvailabilityZone: str,
        Image: EC2DiskImageDetail,
        Volume: EC2VolumeDetail,
        Description: str = ...,
        DryRun: bool = ...
    ) -> EC2ImportVolumeResult: ...

    def modify_capacity_reservation(self, *,
        CapacityReservationId: str,
        InstanceCount: int = ...,
        EndDate: datetime.datetime = ...,
        EndDateType: str = ...,
        DryRun: bool = ...
    ) -> EC2ModifyCapacityReservationResult: ...

    def modify_client_vpn_endpoint(self, *,
        ClientVpnEndpointId: str,
        ServerCertificateArn: str = ...,
        ConnectionLogOptions: EC2ConnectionLogOptions = ...,
        DnsServers: EC2DnsServersOptionsModifyStructure = ...,
        Description: str = ...,
        DryRun: bool = ...
    ) -> EC2ModifyClientVpnEndpointResult: ...

    def modify_fleet(self, *,
        FleetId: str,
        TargetCapacitySpecification: EC2TargetCapacitySpecificationRequest,
        DryRun: bool = ...,
        ExcessCapacityTerminationPolicy: str = ...
    ) -> EC2ModifyFleetResult: ...

    def modify_fpga_image_attribute(self, *,
        FpgaImageId: str,
        DryRun: bool = ...,
        Attribute: str = ...,
        OperationType: str = ...,
        UserIds: List[str] = ...,
        UserGroups: List[str] = ...,
        ProductCodes: List[str] = ...,
        LoadPermission: EC2LoadPermissionModifications = ...,
        Description: str = ...,
        Name: str = ...
    ) -> EC2ModifyFpgaImageAttributeResult: ...

    def modify_hosts(self, *,
        AutoPlacement: str,
        HostIds: List[str]
    ) -> EC2ModifyHostsResult: ...

    def modify_id_format(self, *,
        Resource: str,
        UseLongIds: bool
    ): ...

    def modify_identity_id_format(self, *,
        PrincipalArn: str,
        Resource: str,
        UseLongIds: bool
    ): ...

    def modify_image_attribute(self, *,
        ImageId: str,
        Attribute: str = ...,
        Description: EC2AttributeValue = ...,
        LaunchPermission: EC2LaunchPermissionModifications = ...,
        OperationType: str = ...,
        ProductCodes: List[str] = ...,
        UserGroups: List[str] = ...,
        UserIds: List[str] = ...,
        Value: str = ...,
        DryRun: bool = ...
    ): ...

    def modify_instance_attribute(self, *,
        InstanceId: str,
        SourceDestCheck: EC2AttributeBooleanValue = ...,
        Attribute: str = ...,
        BlockDeviceMappings: List[EC2InstanceBlockDeviceMappingSpecification] = ...,
        DisableApiTermination: EC2AttributeBooleanValue = ...,
        DryRun: bool = ...,
        EbsOptimized: EC2AttributeBooleanValue = ...,
        EnaSupport: EC2AttributeBooleanValue = ...,
        Groups: List[str] = ...,
        InstanceInitiatedShutdownBehavior: EC2AttributeValue = ...,
        InstanceType: EC2AttributeValue = ...,
        Kernel: EC2AttributeValue = ...,
        Ramdisk: EC2AttributeValue = ...,
        SriovNetSupport: EC2AttributeValue = ...,
        UserData: EC2BlobAttributeValue = ...,
        Value: str = ...
    ): ...

    def modify_instance_capacity_reservation_attributes(self, *,
        InstanceId: str,
        CapacityReservationSpecification: EC2CapacityReservationSpecification,
        DryRun: bool = ...
    ) -> EC2ModifyInstanceCapacityReservationAttributesResult: ...

    def modify_instance_credit_specification(self, *,
        InstanceCreditSpecifications: List[EC2InstanceCreditSpecificationRequest],
        DryRun: bool = ...,
        ClientToken: str = ...
    ) -> EC2ModifyInstanceCreditSpecificationResult: ...

    def modify_instance_event_start_time(self, *,
        InstanceId: str,
        InstanceEventId: str,
        NotBefore: datetime.datetime,
        DryRun: bool = ...
    ) -> EC2ModifyInstanceEventStartTimeResult: ...

    def modify_instance_placement(self, *,
        InstanceId: str,
        Affinity: str = ...,
        GroupName: str = ...,
        HostId: str = ...,
        Tenancy: str = ...,
        PartitionNumber: int = ...
    ) -> EC2ModifyInstancePlacementResult: ...

    def modify_launch_template(self, *,
        DryRun: bool = ...,
        ClientToken: str = ...,
        LaunchTemplateId: str = ...,
        LaunchTemplateName: str = ...,
        DefaultVersion: str = ...
    ) -> EC2ModifyLaunchTemplateResult: ...

    def modify_network_interface_attribute(self, *,
        NetworkInterfaceId: str,
        Attachment: EC2NetworkInterfaceAttachmentChanges = ...,
        Description: EC2AttributeValue = ...,
        DryRun: bool = ...,
        Groups: List[str] = ...,
        SourceDestCheck: EC2AttributeBooleanValue = ...
    ): ...

    def modify_reserved_instances(self, *,
        ReservedInstancesIds: List[str],
        TargetConfigurations: List[EC2ReservedInstancesConfiguration],
        ClientToken: str = ...
    ) -> EC2ModifyReservedInstancesResult: ...

    def modify_snapshot_attribute(self, *,
        SnapshotId: str,
        Attribute: str = ...,
        CreateVolumePermission: EC2CreateVolumePermissionModifications = ...,
        GroupNames: List[str] = ...,
        OperationType: str = ...,
        UserIds: List[str] = ...,
        DryRun: bool = ...
    ): ...

    def modify_spot_fleet_request(self, *,
        SpotFleetRequestId: str,
        ExcessCapacityTerminationPolicy: str = ...,
        TargetCapacity: int = ...
    ) -> EC2ModifySpotFleetRequestResponse: ...

    def modify_subnet_attribute(self, *,
        SubnetId: str,
        AssignIpv6AddressOnCreation: EC2AttributeBooleanValue = ...,
        MapPublicIpOnLaunch: EC2AttributeBooleanValue = ...
    ): ...

    def modify_transit_gateway_vpc_attachment(self, *,
        TransitGatewayAttachmentId: str,
        AddSubnetIds: List[str] = ...,
        RemoveSubnetIds: List[str] = ...,
        Options: EC2ModifyTransitGatewayVpcAttachmentRequestOptions = ...,
        DryRun: bool = ...
    ) -> EC2ModifyTransitGatewayVpcAttachmentResult: ...

    def modify_volume(self, *,
        VolumeId: str,
        DryRun: bool = ...,
        Size: int = ...,
        VolumeType: str = ...,
        Iops: int = ...
    ) -> EC2ModifyVolumeResult: ...

    def modify_volume_attribute(self, *,
        VolumeId: str,
        AutoEnableIO: EC2AttributeBooleanValue = ...,
        DryRun: bool = ...
    ): ...

    def modify_vpc_attribute(self, *,
        VpcId: str,
        EnableDnsHostnames: EC2AttributeBooleanValue = ...,
        EnableDnsSupport: EC2AttributeBooleanValue = ...
    ): ...

    def modify_vpc_endpoint(self, *,
        VpcEndpointId: str,
        DryRun: bool = ...,
        ResetPolicy: bool = ...,
        PolicyDocument: str = ...,
        AddRouteTableIds: List[str] = ...,
        RemoveRouteTableIds: List[str] = ...,
        AddSubnetIds: List[str] = ...,
        RemoveSubnetIds: List[str] = ...,
        AddSecurityGroupIds: List[str] = ...,
        RemoveSecurityGroupIds: List[str] = ...,
        PrivateDnsEnabled: bool = ...
    ) -> EC2ModifyVpcEndpointResult: ...

    def modify_vpc_endpoint_connection_notification(self, *,
        ConnectionNotificationId: str,
        DryRun: bool = ...,
        ConnectionNotificationArn: str = ...,
        ConnectionEvents: List[str] = ...
    ) -> EC2ModifyVpcEndpointConnectionNotificationResult: ...

    def modify_vpc_endpoint_service_configuration(self, *,
        ServiceId: str,
        DryRun: bool = ...,
        AcceptanceRequired: bool = ...,
        AddNetworkLoadBalancerArns: List[str] = ...,
        RemoveNetworkLoadBalancerArns: List[str] = ...
    ) -> EC2ModifyVpcEndpointServiceConfigurationResult: ...

    def modify_vpc_endpoint_service_permissions(self, *,
        ServiceId: str,
        DryRun: bool = ...,
        AddAllowedPrincipals: List[str] = ...,
        RemoveAllowedPrincipals: List[str] = ...
    ) -> EC2ModifyVpcEndpointServicePermissionsResult: ...

    def modify_vpc_peering_connection_options(self, *,
        VpcPeeringConnectionId: str,
        AccepterPeeringConnectionOptions: EC2PeeringConnectionOptionsRequest = ...,
        DryRun: bool = ...,
        RequesterPeeringConnectionOptions: EC2PeeringConnectionOptionsRequest = ...
    ) -> EC2ModifyVpcPeeringConnectionOptionsResult: ...

    def modify_vpc_tenancy(self, *,
        VpcId: str,
        InstanceTenancy: str,
        DryRun: bool = ...
    ) -> EC2ModifyVpcTenancyResult: ...

    def modify_vpn_connection(self, *,
        VpnConnectionId: str,
        TransitGatewayId: str = ...,
        VpnGatewayId: str = ...,
        DryRun: bool = ...
    ) -> EC2ModifyVpnConnectionResult: ...

    def monitor_instances(self, *,
        InstanceIds: List[str],
        DryRun: bool = ...
    ) -> EC2MonitorInstancesResult: ...

    def move_address_to_vpc(self, *,
        PublicIp: str,
        DryRun: bool = ...
    ) -> EC2MoveAddressToVpcResult: ...

    def provision_byoip_cidr(self, *,
        Cidr: str,
        CidrAuthorizationContext: EC2CidrAuthorizationContext = ...,
        Description: str = ...,
        DryRun: bool = ...
    ) -> EC2ProvisionByoipCidrResult: ...

    def purchase_host_reservation(self, *,
        HostIdSet: List[str],
        OfferingId: str,
        ClientToken: str = ...,
        CurrencyCode: str = ...,
        LimitPrice: str = ...
    ) -> EC2PurchaseHostReservationResult: ...

    def purchase_reserved_instances_offering(self, *,
        InstanceCount: int,
        ReservedInstancesOfferingId: str,
        DryRun: bool = ...,
        LimitPrice: EC2ReservedInstanceLimitPrice = ...
    ) -> EC2PurchaseReservedInstancesOfferingResult: ...

    def purchase_scheduled_instances(self, *,
        PurchaseRequests: List[EC2PurchaseRequest],
        ClientToken: str = ...,
        DryRun: bool = ...
    ) -> EC2PurchaseScheduledInstancesResult: ...

    def reboot_instances(self, *,
        InstanceIds: List[str],
        DryRun: bool = ...
    ): ...

    def register_image(self, *,
        Name: str,
        ImageLocation: str = ...,
        Architecture: str = ...,
        BlockDeviceMappings: List[EC2BlockDeviceMapping] = ...,
        Description: str = ...,
        DryRun: bool = ...,
        EnaSupport: bool = ...,
        KernelId: str = ...,
        BillingProducts: List[str] = ...,
        RamdiskId: str = ...,
        RootDeviceName: str = ...,
        SriovNetSupport: str = ...,
        VirtualizationType: str = ...
    ) -> EC2RegisterImageResult: ...

    def reject_transit_gateway_vpc_attachment(self, *,
        TransitGatewayAttachmentId: str,
        DryRun: bool = ...
    ) -> EC2RejectTransitGatewayVpcAttachmentResult: ...

    def reject_vpc_endpoint_connections(self, *,
        ServiceId: str,
        VpcEndpointIds: List[str],
        DryRun: bool = ...
    ) -> EC2RejectVpcEndpointConnectionsResult: ...

    def reject_vpc_peering_connection(self, *,
        VpcPeeringConnectionId: str,
        DryRun: bool = ...
    ) -> EC2RejectVpcPeeringConnectionResult: ...

    def release_address(self, *,
        AllocationId: str = ...,
        PublicIp: str = ...,
        DryRun: bool = ...
    ): ...

    def release_hosts(self, *,
        HostIds: List[str]
    ) -> EC2ReleaseHostsResult: ...

    def replace_iam_instance_profile_association(self, *,
        IamInstanceProfile: EC2IamInstanceProfileSpecification,
        AssociationId: str
    ) -> EC2ReplaceIamInstanceProfileAssociationResult: ...

    def replace_network_acl_association(self, *,
        AssociationId: str,
        NetworkAclId: str,
        DryRun: bool = ...
    ) -> EC2ReplaceNetworkAclAssociationResult: ...

    def replace_network_acl_entry(self, *,
        Egress: bool,
        NetworkAclId: str,
        Protocol: str,
        RuleAction: str,
        RuleNumber: int,
        CidrBlock: str = ...,
        DryRun: bool = ...,
        IcmpTypeCode: EC2IcmpTypeCode = ...,
        Ipv6CidrBlock: str = ...,
        PortRange: EC2PortRange = ...
    ): ...

    def replace_route(self, *,
        RouteTableId: str,
        DestinationCidrBlock: str = ...,
        DestinationIpv6CidrBlock: str = ...,
        DryRun: bool = ...,
        EgressOnlyInternetGatewayId: str = ...,
        GatewayId: str = ...,
        InstanceId: str = ...,
        NatGatewayId: str = ...,
        TransitGatewayId: str = ...,
        NetworkInterfaceId: str = ...,
        VpcPeeringConnectionId: str = ...
    ): ...

    def replace_route_table_association(self, *,
        AssociationId: str,
        RouteTableId: str,
        DryRun: bool = ...
    ) -> EC2ReplaceRouteTableAssociationResult: ...

    def replace_transit_gateway_route(self, *,
        DestinationCidrBlock: str,
        TransitGatewayRouteTableId: str,
        TransitGatewayAttachmentId: str = ...,
        Blackhole: bool = ...,
        DryRun: bool = ...
    ) -> EC2ReplaceTransitGatewayRouteResult: ...

    def report_instance_status(self, *,
        Instances: List[str],
        ReasonCodes: List[str],
        Status: str,
        Description: str = ...,
        DryRun: bool = ...,
        EndTime: datetime.datetime = ...,
        StartTime: datetime.datetime = ...
    ): ...

    def request_spot_fleet(self, *,
        SpotFleetRequestConfig: EC2SpotFleetRequestConfigData,
        DryRun: bool = ...
    ) -> EC2RequestSpotFleetResponse: ...

    def request_spot_instances(self, *,
        AvailabilityZoneGroup: str = ...,
        BlockDurationMinutes: int = ...,
        ClientToken: str = ...,
        DryRun: bool = ...,
        InstanceCount: int = ...,
        LaunchGroup: str = ...,
        LaunchSpecification: EC2RequestSpotLaunchSpecification = ...,
        SpotPrice: str = ...,
        Type: str = ...,
        ValidFrom: datetime.datetime = ...,
        ValidUntil: datetime.datetime = ...,
        InstanceInterruptionBehavior: str = ...
    ) -> EC2RequestSpotInstancesResult: ...

    def reset_fpga_image_attribute(self, *,
        FpgaImageId: str,
        DryRun: bool = ...,
        Attribute: str = ...
    ) -> EC2ResetFpgaImageAttributeResult: ...

    def reset_image_attribute(self, *,
        Attribute: str,
        ImageId: str,
        DryRun: bool = ...
    ): ...

    def reset_instance_attribute(self, *,
        Attribute: str,
        InstanceId: str,
        DryRun: bool = ...
    ): ...

    def reset_network_interface_attribute(self, *,
        NetworkInterfaceId: str,
        DryRun: bool = ...,
        SourceDestCheck: str = ...
    ): ...

    def reset_snapshot_attribute(self, *,
        Attribute: str,
        SnapshotId: str,
        DryRun: bool = ...
    ): ...

    def restore_address_to_classic(self, *,
        PublicIp: str,
        DryRun: bool = ...
    ) -> EC2RestoreAddressToClassicResult: ...

    def revoke_client_vpn_ingress(self, *,
        ClientVpnEndpointId: str,
        TargetNetworkCidr: str,
        AccessGroupId: str = ...,
        RevokeAllGroups: bool = ...,
        DryRun: bool = ...
    ) -> EC2RevokeClientVpnIngressResult: ...

    def revoke_security_group_egress(self, *,
        GroupId: str,
        DryRun: bool = ...,
        IpPermissions: List[EC2IpPermission] = ...,
        CidrIp: str = ...,
        FromPort: int = ...,
        IpProtocol: str = ...,
        ToPort: int = ...,
        SourceSecurityGroupName: str = ...,
        SourceSecurityGroupOwnerId: str = ...
    ): ...

    def revoke_security_group_ingress(self, *,
        CidrIp: str = ...,
        FromPort: int = ...,
        GroupId: str = ...,
        GroupName: str = ...,
        IpPermissions: List[EC2IpPermission] = ...,
        IpProtocol: str = ...,
        SourceSecurityGroupName: str = ...,
        SourceSecurityGroupOwnerId: str = ...,
        ToPort: int = ...,
        DryRun: bool = ...
    ): ...

    def run_instances(self, *,
        MaxCount: int,
        MinCount: int,
        BlockDeviceMappings: List[EC2BlockDeviceMapping] = ...,
        ImageId: str = ...,
        InstanceType: str = ...,
        Ipv6AddressCount: int = ...,
        Ipv6Addresses: List[EC2InstanceIpv6Address] = ...,
        KernelId: str = ...,
        KeyName: str = ...,
        Monitoring: EC2RunInstancesMonitoringEnabled = ...,
        Placement: EC2Placement = ...,
        RamdiskId: str = ...,
        SecurityGroupIds: List[str] = ...,
        SecurityGroups: List[str] = ...,
        SubnetId: str = ...,
        UserData: str = ...,
        AdditionalInfo: str = ...,
        ClientToken: str = ...,
        DisableApiTermination: bool = ...,
        DryRun: bool = ...,
        EbsOptimized: bool = ...,
        IamInstanceProfile: EC2IamInstanceProfileSpecification = ...,
        InstanceInitiatedShutdownBehavior: str = ...,
        NetworkInterfaces: List[EC2InstanceNetworkInterfaceSpecification] = ...,
        PrivateIpAddress: str = ...,
        ElasticGpuSpecification: List[EC2ElasticGpuSpecification] = ...,
        ElasticInferenceAccelerators: List[EC2ElasticInferenceAccelerator] = ...,
        TagSpecifications: List[EC2TagSpecification] = ...,
        LaunchTemplate: EC2LaunchTemplateSpecification = ...,
        InstanceMarketOptions: EC2InstanceMarketOptionsRequest = ...,
        CreditSpecification: EC2CreditSpecificationRequest = ...,
        CpuOptions: EC2CpuOptionsRequest = ...,
        CapacityReservationSpecification: EC2CapacityReservationSpecification = ...,
        HibernationOptions: EC2HibernationOptionsRequest = ...,
        LicenseSpecifications: List[EC2LicenseConfigurationRequest] = ...
    ) -> EC2Reservation: ...

    def run_scheduled_instances(self, *,
        LaunchSpecification: EC2ScheduledInstancesLaunchSpecification,
        ScheduledInstanceId: str,
        ClientToken: str = ...,
        DryRun: bool = ...,
        InstanceCount: int = ...
    ) -> EC2RunScheduledInstancesResult: ...

    def search_transit_gateway_routes(self, *,
        TransitGatewayRouteTableId: str,
        Filters: List[EC2Filter],
        MaxResults: int = ...,
        DryRun: bool = ...
    ) -> EC2SearchTransitGatewayRoutesResult: ...

    def start_instances(self, *,
        InstanceIds: List[str],
        AdditionalInfo: str = ...,
        DryRun: bool = ...
    ) -> EC2StartInstancesResult: ...

    def stop_instances(self, *,
        InstanceIds: List[str],
        Hibernate: bool = ...,
        DryRun: bool = ...,
        Force: bool = ...
    ) -> EC2StopInstancesResult: ...

    def terminate_client_vpn_connections(self, *,
        ClientVpnEndpointId: str,
        ConnectionId: str = ...,
        Username: str = ...,
        DryRun: bool = ...
    ) -> EC2TerminateClientVpnConnectionsResult: ...

    def terminate_instances(self, *,
        InstanceIds: List[str],
        DryRun: bool = ...
    ) -> EC2TerminateInstancesResult: ...

    def unassign_ipv6_addresses(self, *,
        Ipv6Addresses: List[str],
        NetworkInterfaceId: str
    ) -> EC2UnassignIpv6AddressesResult: ...

    def unassign_private_ip_addresses(self, *,
        NetworkInterfaceId: str,
        PrivateIpAddresses: List[str]
    ): ...

    def unmonitor_instances(self, *,
        InstanceIds: List[str],
        DryRun: bool = ...
    ) -> EC2UnmonitorInstancesResult: ...

    def update_security_group_rule_descriptions_egress(self, *,
        IpPermissions: List[EC2IpPermission],
        DryRun: bool = ...,
        GroupId: str = ...,
        GroupName: str = ...
    ) -> EC2UpdateSecurityGroupRuleDescriptionsEgressResult: ...

    def update_security_group_rule_descriptions_ingress(self, *,
        IpPermissions: List[EC2IpPermission],
        DryRun: bool = ...,
        GroupId: str = ...,
        GroupName: str = ...
    ) -> EC2UpdateSecurityGroupRuleDescriptionsIngressResult: ...

    def withdraw_byoip_cidr(self, *,
        Cidr: str,
        DryRun: bool = ...
    ) -> EC2WithdrawByoipCidrResult: ...


EC2TargetConfigurationRequest = TypedDict(
    'EC2TargetConfigurationRequest', {
        'String': str,
        'Integer': Optional[int],
    }
)


EC2AcceptReservedInstancesExchangeQuoteResult = TypedDict(
    'EC2AcceptReservedInstancesExchangeQuoteResult', {
        'String': Optional[str],
    }
)


EC2TransitGatewayVpcAttachmentOptions = TypedDict(
    'EC2TransitGatewayVpcAttachmentOptions', {
        'DnsSupportValue': Optional[str],
        'Ipv6SupportValue': Optional[str],
    }
)


EC2Tag = TypedDict(
    'EC2Tag', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2TransitGatewayVpcAttachment = TypedDict(
    'EC2TransitGatewayVpcAttachment', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'TransitGatewayAttachmentState': Optional[str],
        'ValueStringList': Optional[List[str]],
        'DateTime': Optional[datetime.datetime],
        'TransitGatewayVpcAttachmentOptions': Optional[EC2TransitGatewayVpcAttachmentOptions],
        'TagList': Optional[List[EC2Tag]],
    }
)


EC2AcceptTransitGatewayVpcAttachmentResult = TypedDict(
    'EC2AcceptTransitGatewayVpcAttachmentResult', {
        'TransitGatewayVpcAttachment': Optional[EC2TransitGatewayVpcAttachment],
    }
)


EC2UnsuccessfulItemError = TypedDict(
    'EC2UnsuccessfulItemError', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2UnsuccessfulItem = TypedDict(
    'EC2UnsuccessfulItem', {
        'UnsuccessfulItemError': Optional[EC2UnsuccessfulItemError],
        'String': Optional[str],
    }
)


EC2AcceptVpcEndpointConnectionsResult = TypedDict(
    'EC2AcceptVpcEndpointConnectionsResult', {
        'UnsuccessfulItemSet': Optional[List[EC2UnsuccessfulItem]],
    }
)


EC2Ipv6CidrBlock = TypedDict(
    'EC2Ipv6CidrBlock', {
        'String': Optional[str],
    }
)


EC2CidrBlock = TypedDict(
    'EC2CidrBlock', {
        'String': Optional[str],
    }
)


EC2VpcPeeringConnectionOptionsDescription = TypedDict(
    'EC2VpcPeeringConnectionOptionsDescription', {
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
    }
)


EC2VpcPeeringConnectionVpcInfo = TypedDict(
    'EC2VpcPeeringConnectionVpcInfo', {
        'String': Optional[str],
        'Ipv6CidrBlockSet': Optional[List[EC2Ipv6CidrBlock]],
        'CidrBlockSet': Optional[List[EC2CidrBlock]],
        'String': Optional[str],
        'VpcPeeringConnectionOptionsDescription': Optional[EC2VpcPeeringConnectionOptionsDescription],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2VpcPeeringConnectionStateReason = TypedDict(
    'EC2VpcPeeringConnectionStateReason', {
        'VpcPeeringConnectionStateReasonCode': Optional[str],
        'String': Optional[str],
    }
)


EC2VpcPeeringConnection = TypedDict(
    'EC2VpcPeeringConnection', {
        'VpcPeeringConnectionVpcInfo': Optional[EC2VpcPeeringConnectionVpcInfo],
        'DateTime': Optional[datetime.datetime],
        'VpcPeeringConnectionVpcInfo': Optional[EC2VpcPeeringConnectionVpcInfo],
        'VpcPeeringConnectionStateReason': Optional[EC2VpcPeeringConnectionStateReason],
        'TagList': Optional[List[EC2Tag]],
        'String': Optional[str],
    }
)


EC2AcceptVpcPeeringConnectionResult = TypedDict(
    'EC2AcceptVpcPeeringConnectionResult', {
        'VpcPeeringConnection': Optional[EC2VpcPeeringConnection],
    }
)


EC2ByoipCidr = TypedDict(
    'EC2ByoipCidr', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'ByoipCidrState': Optional[str],
    }
)


EC2AdvertiseByoipCidrResult = TypedDict(
    'EC2AdvertiseByoipCidrResult', {
        'ByoipCidr': Optional[EC2ByoipCidr],
    }
)


EC2AllocateAddressResult = TypedDict(
    'EC2AllocateAddressResult', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DomainType': Optional[str],
    }
)


EC2TagSpecification = TypedDict(
    'EC2TagSpecification', {
        'ResourceType': Optional[str],
        'TagList': Optional[List[EC2Tag]],
    }
)


EC2AllocateHostsResult = TypedDict(
    'EC2AllocateHostsResult', {
        'ResponseHostIdList': Optional[List[str]],
    }
)


EC2ApplySecurityGroupsToClientVpnTargetNetworkResult = TypedDict(
    'EC2ApplySecurityGroupsToClientVpnTargetNetworkResult', {
        'ClientVpnSecurityGroupIdSet': Optional[List[str]],
    }
)


EC2AssignIpv6AddressesResult = TypedDict(
    'EC2AssignIpv6AddressesResult', {
        'Ipv6AddressList': Optional[List[str]],
        'String': Optional[str],
    }
)


EC2AssociateAddressResult = TypedDict(
    'EC2AssociateAddressResult', {
        'String': Optional[str],
    }
)


EC2AssociationStatus = TypedDict(
    'EC2AssociationStatus', {
        'AssociationStatusCode': Optional[str],
        'String': Optional[str],
    }
)


EC2AssociateClientVpnTargetNetworkResult = TypedDict(
    'EC2AssociateClientVpnTargetNetworkResult', {
        'String': Optional[str],
        'AssociationStatus': Optional[EC2AssociationStatus],
    }
)


EC2IamInstanceProfileSpecification = TypedDict(
    'EC2IamInstanceProfileSpecification', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2IamInstanceProfile = TypedDict(
    'EC2IamInstanceProfile', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2IamInstanceProfileAssociation = TypedDict(
    'EC2IamInstanceProfileAssociation', {
        'String': Optional[str],
        'String': Optional[str],
        'IamInstanceProfile': Optional[EC2IamInstanceProfile],
        'IamInstanceProfileAssociationState': Optional[str],
        'DateTime': Optional[datetime.datetime],
    }
)


EC2AssociateIamInstanceProfileResult = TypedDict(
    'EC2AssociateIamInstanceProfileResult', {
        'IamInstanceProfileAssociation': Optional[EC2IamInstanceProfileAssociation],
    }
)


EC2AssociateRouteTableResult = TypedDict(
    'EC2AssociateRouteTableResult', {
        'String': Optional[str],
    }
)


EC2SubnetCidrBlockState = TypedDict(
    'EC2SubnetCidrBlockState', {
        'SubnetCidrBlockStateCode': Optional[str],
        'String': Optional[str],
    }
)


EC2SubnetIpv6CidrBlockAssociation = TypedDict(
    'EC2SubnetIpv6CidrBlockAssociation', {
        'String': Optional[str],
        'String': Optional[str],
        'SubnetCidrBlockState': Optional[EC2SubnetCidrBlockState],
    }
)


EC2AssociateSubnetCidrBlockResult = TypedDict(
    'EC2AssociateSubnetCidrBlockResult', {
        'SubnetIpv6CidrBlockAssociation': Optional[EC2SubnetIpv6CidrBlockAssociation],
        'String': Optional[str],
    }
)


EC2TransitGatewayAssociation = TypedDict(
    'EC2TransitGatewayAssociation', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'TransitGatewayAttachmentResourceType': Optional[str],
        'TransitGatewayAssociationState': Optional[str],
    }
)


EC2AssociateTransitGatewayRouteTableResult = TypedDict(
    'EC2AssociateTransitGatewayRouteTableResult', {
        'TransitGatewayAssociation': Optional[EC2TransitGatewayAssociation],
    }
)


EC2VpcCidrBlockState = TypedDict(
    'EC2VpcCidrBlockState', {
        'VpcCidrBlockStateCode': Optional[str],
        'String': Optional[str],
    }
)


EC2VpcIpv6CidrBlockAssociation = TypedDict(
    'EC2VpcIpv6CidrBlockAssociation', {
        'String': Optional[str],
        'String': Optional[str],
        'VpcCidrBlockState': Optional[EC2VpcCidrBlockState],
    }
)


EC2VpcCidrBlockAssociation = TypedDict(
    'EC2VpcCidrBlockAssociation', {
        'String': Optional[str],
        'String': Optional[str],
        'VpcCidrBlockState': Optional[EC2VpcCidrBlockState],
    }
)


EC2AssociateVpcCidrBlockResult = TypedDict(
    'EC2AssociateVpcCidrBlockResult', {
        'VpcIpv6CidrBlockAssociation': Optional[EC2VpcIpv6CidrBlockAssociation],
        'VpcCidrBlockAssociation': Optional[EC2VpcCidrBlockAssociation],
        'String': Optional[str],
    }
)


EC2AttachClassicLinkVpcResult = TypedDict(
    'EC2AttachClassicLinkVpcResult', {
        'Boolean': Optional[bool],
    }
)


EC2AttachNetworkInterfaceResult = TypedDict(
    'EC2AttachNetworkInterfaceResult', {
        'String': Optional[str],
    }
)


EC2VolumeAttachment = TypedDict(
    'EC2VolumeAttachment', {
        'DateTime': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'VolumeAttachmentState': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
    }
)


EC2VpcAttachment = TypedDict(
    'EC2VpcAttachment', {
        'AttachmentStatus': Optional[str],
        'String': Optional[str],
    }
)


EC2AttachVpnGatewayResult = TypedDict(
    'EC2AttachVpnGatewayResult', {
        'VpcAttachment': Optional[EC2VpcAttachment],
    }
)


EC2ClientVpnAuthorizationRuleStatus = TypedDict(
    'EC2ClientVpnAuthorizationRuleStatus', {
        'ClientVpnAuthorizationRuleStatusCode': Optional[str],
        'String': Optional[str],
    }
)


EC2AuthorizeClientVpnIngressResult = TypedDict(
    'EC2AuthorizeClientVpnIngressResult', {
        'ClientVpnAuthorizationRuleStatus': Optional[EC2ClientVpnAuthorizationRuleStatus],
    }
)


EC2IpRange = TypedDict(
    'EC2IpRange', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2Ipv6Range = TypedDict(
    'EC2Ipv6Range', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2PrefixListId = TypedDict(
    'EC2PrefixListId', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2UserIdGroupPair = TypedDict(
    'EC2UserIdGroupPair', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2IpPermission = TypedDict(
    'EC2IpPermission', {
        'Integer': Optional[int],
        'String': Optional[str],
        'IpRangeList': Optional[List[EC2IpRange]],
        'Ipv6RangeList': Optional[List[EC2Ipv6Range]],
        'PrefixListIdList': Optional[List[EC2PrefixListId]],
        'Integer': Optional[int],
        'UserIdGroupPairList': Optional[List[EC2UserIdGroupPair]],
    }
)


EC2S3Storage = TypedDict(
    'EC2S3Storage', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Blob': Optional[bytes],
        'String': Optional[str],
    }
)


EC2Storage = TypedDict(
    'EC2Storage', {
        'S3Storage': Optional[EC2S3Storage],
    }
)


EC2BundleTaskError = TypedDict(
    'EC2BundleTaskError', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2BundleTask = TypedDict(
    'EC2BundleTask', {
        'String': Optional[str],
        'BundleTaskError': Optional[EC2BundleTaskError],
        'String': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'BundleTaskState': Optional[str],
        'Storage': Optional[EC2Storage],
        'DateTime': Optional[datetime.datetime],
    }
)


EC2BundleInstanceResult = TypedDict(
    'EC2BundleInstanceResult', {
        'BundleTask': Optional[EC2BundleTask],
    }
)


EC2CancelBundleTaskResult = TypedDict(
    'EC2CancelBundleTaskResult', {
        'BundleTask': Optional[EC2BundleTask],
    }
)


EC2CancelCapacityReservationResult = TypedDict(
    'EC2CancelCapacityReservationResult', {
        'Boolean': Optional[bool],
    }
)


EC2CancelImportTaskResult = TypedDict(
    'EC2CancelImportTaskResult', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2InstanceCount = TypedDict(
    'EC2InstanceCount', {
        'Integer': Optional[int],
        'ListingState': Optional[str],
    }
)


EC2PriceSchedule = TypedDict(
    'EC2PriceSchedule', {
        'Boolean': Optional[bool],
        'CurrencyCodeValues': Optional[str],
        'Double': Optional[float],
        'Long': Optional[int],
    }
)


EC2ReservedInstancesListing = TypedDict(
    'EC2ReservedInstancesListing', {
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'InstanceCountList': Optional[List[EC2InstanceCount]],
        'PriceScheduleList': Optional[List[EC2PriceSchedule]],
        'String': Optional[str],
        'String': Optional[str],
        'ListingStatus': Optional[str],
        'String': Optional[str],
        'TagList': Optional[List[EC2Tag]],
        'DateTime': Optional[datetime.datetime],
    }
)


EC2CancelReservedInstancesListingResult = TypedDict(
    'EC2CancelReservedInstancesListingResult', {
        'ReservedInstancesListingList': Optional[List[EC2ReservedInstancesListing]],
    }
)


EC2CancelSpotFleetRequestsSuccessItem = TypedDict(
    'EC2CancelSpotFleetRequestsSuccessItem', {
        'BatchState': Optional[str],
        'BatchState': Optional[str],
        'String': Optional[str],
    }
)


EC2CancelSpotFleetRequestsError = TypedDict(
    'EC2CancelSpotFleetRequestsError', {
        'CancelBatchErrorCode': Optional[str],
        'String': Optional[str],
    }
)


EC2CancelSpotFleetRequestsErrorItem = TypedDict(
    'EC2CancelSpotFleetRequestsErrorItem', {
        'CancelSpotFleetRequestsError': Optional[EC2CancelSpotFleetRequestsError],
        'String': Optional[str],
    }
)


EC2CancelSpotFleetRequestsResponse = TypedDict(
    'EC2CancelSpotFleetRequestsResponse', {
        'CancelSpotFleetRequestsSuccessSet': Optional[List[EC2CancelSpotFleetRequestsSuccessItem]],
        'CancelSpotFleetRequestsErrorSet': Optional[List[EC2CancelSpotFleetRequestsErrorItem]],
    }
)


EC2CancelledSpotInstanceRequest = TypedDict(
    'EC2CancelledSpotInstanceRequest', {
        'String': Optional[str],
        'CancelSpotInstanceRequestState': Optional[str],
    }
)


EC2CancelSpotInstanceRequestsResult = TypedDict(
    'EC2CancelSpotInstanceRequestsResult', {
        'CancelledSpotInstanceRequestList': Optional[List[EC2CancelledSpotInstanceRequest]],
    }
)


EC2ConfirmProductInstanceResult = TypedDict(
    'EC2ConfirmProductInstanceResult', {
        'String': Optional[str],
        'Boolean': Optional[bool],
    }
)


EC2CopyFpgaImageResult = TypedDict(
    'EC2CopyFpgaImageResult', {
        'String': Optional[str],
    }
)


EC2CopyImageResult = TypedDict(
    'EC2CopyImageResult', {
        'String': Optional[str],
    }
)


EC2CopySnapshotResult = TypedDict(
    'EC2CopySnapshotResult', {
        'String': Optional[str],
    }
)


EC2CapacityReservation = TypedDict(
    'EC2CapacityReservation', {
        'String': Optional[str],
        'String': Optional[str],
        'CapacityReservationInstancePlatform': Optional[str],
        'String': Optional[str],
        'CapacityReservationTenancy': Optional[str],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'CapacityReservationState': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'EndDateType': Optional[str],
        'InstanceMatchCriteria': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'TagList': Optional[List[EC2Tag]],
    }
)


EC2CreateCapacityReservationResult = TypedDict(
    'EC2CreateCapacityReservationResult', {
        'CapacityReservation': Optional[EC2CapacityReservation],
    }
)


EC2DirectoryServiceAuthenticationRequest = TypedDict(
    'EC2DirectoryServiceAuthenticationRequest', {
        'String': Optional[str],
    }
)


EC2CertificateAuthenticationRequest = TypedDict(
    'EC2CertificateAuthenticationRequest', {
        'String': Optional[str],
    }
)


EC2ClientVpnAuthenticationRequest = TypedDict(
    'EC2ClientVpnAuthenticationRequest', {
        'ClientVpnAuthenticationType': Optional[str],
        'DirectoryServiceAuthenticationRequest': Optional[EC2DirectoryServiceAuthenticationRequest],
        'CertificateAuthenticationRequest': Optional[EC2CertificateAuthenticationRequest],
    }
)


EC2ConnectionLogOptions = TypedDict(
    'EC2ConnectionLogOptions', {
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2ClientVpnEndpointStatus = TypedDict(
    'EC2ClientVpnEndpointStatus', {
        'ClientVpnEndpointStatusCode': Optional[str],
        'String': Optional[str],
    }
)


EC2CreateClientVpnEndpointResult = TypedDict(
    'EC2CreateClientVpnEndpointResult', {
        'String': Optional[str],
        'ClientVpnEndpointStatus': Optional[EC2ClientVpnEndpointStatus],
        'String': Optional[str],
    }
)


EC2ClientVpnRouteStatus = TypedDict(
    'EC2ClientVpnRouteStatus', {
        'ClientVpnRouteStatusCode': Optional[str],
        'String': Optional[str],
    }
)


EC2CreateClientVpnRouteResult = TypedDict(
    'EC2CreateClientVpnRouteResult', {
        'ClientVpnRouteStatus': Optional[EC2ClientVpnRouteStatus],
    }
)


EC2CustomerGateway = TypedDict(
    'EC2CustomerGateway', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'TagList': Optional[List[EC2Tag]],
    }
)


EC2CreateCustomerGatewayResult = TypedDict(
    'EC2CreateCustomerGatewayResult', {
        'CustomerGateway': Optional[EC2CustomerGateway],
    }
)


EC2Subnet = TypedDict(
    'EC2Subnet', {
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'SubnetState': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'SubnetIpv6CidrBlockAssociationSet': Optional[List[EC2SubnetIpv6CidrBlockAssociation]],
        'TagList': Optional[List[EC2Tag]],
        'String': Optional[str],
    }
)


EC2CreateDefaultSubnetResult = TypedDict(
    'EC2CreateDefaultSubnetResult', {
        'Subnet': Optional[EC2Subnet],
    }
)


EC2Vpc = TypedDict(
    'EC2Vpc', {
        'String': Optional[str],
        'String': Optional[str],
        'VpcState': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Tenancy': Optional[str],
        'VpcIpv6CidrBlockAssociationSet': Optional[List[EC2VpcIpv6CidrBlockAssociation]],
        'VpcCidrBlockAssociationSet': Optional[List[EC2VpcCidrBlockAssociation]],
        'Boolean': Optional[bool],
        'TagList': Optional[List[EC2Tag]],
    }
)


EC2CreateDefaultVpcResult = TypedDict(
    'EC2CreateDefaultVpcResult', {
        'Vpc': Optional[EC2Vpc],
    }
)


EC2NewDhcpConfiguration = TypedDict(
    'EC2NewDhcpConfiguration', {
        'String': Optional[str],
        'ValueStringList': Optional[List[str]],
    }
)


EC2AttributeValue = TypedDict(
    'EC2AttributeValue', {
        'String': Optional[str],
    }
)


EC2DhcpConfiguration = TypedDict(
    'EC2DhcpConfiguration', {
        'String': Optional[str],
        'DhcpConfigurationValueList': Optional[List[EC2AttributeValue]],
    }
)


EC2DhcpOptions = TypedDict(
    'EC2DhcpOptions', {
        'DhcpConfigurationList': Optional[List[EC2DhcpConfiguration]],
        'String': Optional[str],
        'String': Optional[str],
        'TagList': Optional[List[EC2Tag]],
    }
)


EC2CreateDhcpOptionsResult = TypedDict(
    'EC2CreateDhcpOptionsResult', {
        'DhcpOptions': Optional[EC2DhcpOptions],
    }
)


EC2InternetGatewayAttachment = TypedDict(
    'EC2InternetGatewayAttachment', {
        'AttachmentStatus': Optional[str],
        'String': Optional[str],
    }
)


EC2EgressOnlyInternetGateway = TypedDict(
    'EC2EgressOnlyInternetGateway', {
        'InternetGatewayAttachmentList': Optional[List[EC2InternetGatewayAttachment]],
        'EgressOnlyInternetGatewayId': Optional[str],
    }
)


EC2CreateEgressOnlyInternetGatewayResult = TypedDict(
    'EC2CreateEgressOnlyInternetGatewayResult', {
        'String': Optional[str],
        'EgressOnlyInternetGateway': Optional[EC2EgressOnlyInternetGateway],
    }
)


EC2SpotOptionsRequest = TypedDict(
    'EC2SpotOptionsRequest', {
        'SpotAllocationStrategy': Optional[str],
        'SpotInstanceInterruptionBehavior': Optional[str],
        'Integer': Optional[int],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Integer': Optional[int],
    }
)


EC2OnDemandOptionsRequest = TypedDict(
    'EC2OnDemandOptionsRequest', {
        'FleetOnDemandAllocationStrategy': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Integer': Optional[int],
    }
)


EC2FleetLaunchTemplateSpecificationRequest = TypedDict(
    'EC2FleetLaunchTemplateSpecificationRequest', {
        'String': Optional[str],
        'LaunchTemplateName': Optional[str],
        'String': Optional[str],
    }
)


EC2Placement = TypedDict(
    'EC2Placement', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'Tenancy': Optional[str],
        'String': Optional[str],
    }
)


EC2FleetLaunchTemplateOverridesRequest = TypedDict(
    'EC2FleetLaunchTemplateOverridesRequest', {
        'InstanceType': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Double': Optional[float],
        'Double': Optional[float],
        'Placement': Optional[EC2Placement],
    }
)


EC2FleetLaunchTemplateConfigRequest = TypedDict(
    'EC2FleetLaunchTemplateConfigRequest', {
        'FleetLaunchTemplateSpecificationRequest': Optional[EC2FleetLaunchTemplateSpecificationRequest],
        'FleetLaunchTemplateOverridesListRequest': Optional[List[EC2FleetLaunchTemplateOverridesRequest]],
    }
)


EC2TargetCapacitySpecificationRequest = TypedDict(
    'EC2TargetCapacitySpecificationRequest', {
        'Integer': int,
        'Integer': Optional[int],
        'Integer': Optional[int],
        'DefaultTargetCapacityType': Optional[str],
    }
)


EC2FleetLaunchTemplateSpecification = TypedDict(
    'EC2FleetLaunchTemplateSpecification', {
        'String': Optional[str],
        'LaunchTemplateName': Optional[str],
        'String': Optional[str],
    }
)


EC2PlacementResponse = TypedDict(
    'EC2PlacementResponse', {
        'String': Optional[str],
    }
)


EC2FleetLaunchTemplateOverrides = TypedDict(
    'EC2FleetLaunchTemplateOverrides', {
        'InstanceType': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Double': Optional[float],
        'Double': Optional[float],
        'PlacementResponse': Optional[EC2PlacementResponse],
    }
)


EC2LaunchTemplateAndOverridesResponse = TypedDict(
    'EC2LaunchTemplateAndOverridesResponse', {
        'FleetLaunchTemplateSpecification': Optional[EC2FleetLaunchTemplateSpecification],
        'FleetLaunchTemplateOverrides': Optional[EC2FleetLaunchTemplateOverrides],
    }
)


EC2CreateFleetError = TypedDict(
    'EC2CreateFleetError', {
        'LaunchTemplateAndOverridesResponse': Optional[EC2LaunchTemplateAndOverridesResponse],
        'InstanceLifecycle': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2CreateFleetInstance = TypedDict(
    'EC2CreateFleetInstance', {
        'LaunchTemplateAndOverridesResponse': Optional[EC2LaunchTemplateAndOverridesResponse],
        'InstanceLifecycle': Optional[str],
        'InstanceIdsSet': Optional[List[str]],
        'InstanceType': Optional[str],
        'PlatformValues': Optional[str],
    }
)


EC2CreateFleetResult = TypedDict(
    'EC2CreateFleetResult', {
        'FleetIdentifier': Optional[str],
        'CreateFleetErrorsSet': Optional[List[EC2CreateFleetError]],
        'CreateFleetInstancesSet': Optional[List[EC2CreateFleetInstance]],
    }
)


EC2CreateFlowLogsResult = TypedDict(
    'EC2CreateFlowLogsResult', {
        'String': Optional[str],
        'ValueStringList': Optional[List[str]],
        'UnsuccessfulItemSet': Optional[List[EC2UnsuccessfulItem]],
    }
)


EC2StorageLocation = TypedDict(
    'EC2StorageLocation', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2CreateFpgaImageResult = TypedDict(
    'EC2CreateFpgaImageResult', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2EbsBlockDevice = TypedDict(
    'EC2EbsBlockDevice', {
        'Boolean': Optional[bool],
        'Integer': Optional[int],
        'String': Optional[str],
        'Integer': Optional[int],
        'VolumeType': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
    }
)


EC2BlockDeviceMapping = TypedDict(
    'EC2BlockDeviceMapping', {
        'String': Optional[str],
        'String': Optional[str],
        'EbsBlockDevice': Optional[EC2EbsBlockDevice],
        'String': Optional[str],
    }
)


EC2CreateImageResult = TypedDict(
    'EC2CreateImageResult', {
        'String': Optional[str],
    }
)


EC2ExportToS3TaskSpecification = TypedDict(
    'EC2ExportToS3TaskSpecification', {
        'ContainerFormat': Optional[str],
        'DiskImageFormat': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2ExportToS3Task = TypedDict(
    'EC2ExportToS3Task', {
        'ContainerFormat': Optional[str],
        'DiskImageFormat': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2InstanceExportDetails = TypedDict(
    'EC2InstanceExportDetails', {
        'String': Optional[str],
        'ExportEnvironment': Optional[str],
    }
)


EC2ExportTask = TypedDict(
    'EC2ExportTask', {
        'String': Optional[str],
        'String': Optional[str],
        'ExportToS3Task': Optional[EC2ExportToS3Task],
        'InstanceExportDetails': Optional[EC2InstanceExportDetails],
        'ExportTaskState': Optional[str],
        'String': Optional[str],
    }
)


EC2CreateInstanceExportTaskResult = TypedDict(
    'EC2CreateInstanceExportTaskResult', {
        'ExportTask': Optional[EC2ExportTask],
    }
)


EC2InternetGateway = TypedDict(
    'EC2InternetGateway', {
        'InternetGatewayAttachmentList': Optional[List[EC2InternetGatewayAttachment]],
        'String': Optional[str],
        'String': Optional[str],
        'TagList': Optional[List[EC2Tag]],
    }
)


EC2CreateInternetGatewayResult = TypedDict(
    'EC2CreateInternetGatewayResult', {
        'InternetGateway': Optional[EC2InternetGateway],
    }
)


EC2KeyPair = TypedDict(
    'EC2KeyPair', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2LaunchTemplateIamInstanceProfileSpecificationRequest = TypedDict(
    'EC2LaunchTemplateIamInstanceProfileSpecificationRequest', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2LaunchTemplateEbsBlockDeviceRequest = TypedDict(
    'EC2LaunchTemplateEbsBlockDeviceRequest', {
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Integer': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'VolumeType': Optional[str],
    }
)


EC2LaunchTemplateBlockDeviceMappingRequest = TypedDict(
    'EC2LaunchTemplateBlockDeviceMappingRequest', {
        'String': Optional[str],
        'String': Optional[str],
        'LaunchTemplateEbsBlockDeviceRequest': Optional[EC2LaunchTemplateEbsBlockDeviceRequest],
        'String': Optional[str],
    }
)


EC2InstanceIpv6AddressRequest = TypedDict(
    'EC2InstanceIpv6AddressRequest', {
        'String': Optional[str],
    }
)


EC2PrivateIpAddressSpecification = TypedDict(
    'EC2PrivateIpAddressSpecification', {
        'Boolean': Optional[bool],
        'String': Optional[str],
    }
)


EC2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest = TypedDict(
    'EC2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest', {
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'Integer': Optional[int],
        'SecurityGroupIdStringList': Optional[List[str]],
        'String': Optional[str],
        'Integer': Optional[int],
        'InstanceIpv6AddressListRequest': Optional[List[EC2InstanceIpv6AddressRequest]],
        'String': Optional[str],
        'String': Optional[str],
        'PrivateIpAddressSpecificationList': Optional[List[EC2PrivateIpAddressSpecification]],
        'Integer': Optional[int],
        'String': Optional[str],
    }
)


EC2LaunchTemplatesMonitoringRequest = TypedDict(
    'EC2LaunchTemplatesMonitoringRequest', {
        'Boolean': Optional[bool],
    }
)


EC2LaunchTemplatePlacementRequest = TypedDict(
    'EC2LaunchTemplatePlacementRequest', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Tenancy': Optional[str],
        'String': Optional[str],
    }
)


EC2LaunchTemplateTagSpecificationRequest = TypedDict(
    'EC2LaunchTemplateTagSpecificationRequest', {
        'ResourceType': Optional[str],
        'TagList': Optional[List[EC2Tag]],
    }
)


EC2ElasticGpuSpecification = TypedDict(
    'EC2ElasticGpuSpecification', {
        'String': str,
    }
)


EC2LaunchTemplateElasticInferenceAccelerator = TypedDict(
    'EC2LaunchTemplateElasticInferenceAccelerator', {
        'String': str,
    }
)


EC2LaunchTemplateSpotMarketOptionsRequest = TypedDict(
    'EC2LaunchTemplateSpotMarketOptionsRequest', {
        'String': Optional[str],
        'SpotInstanceType': Optional[str],
        'Integer': Optional[int],
        'DateTime': Optional[datetime.datetime],
        'InstanceInterruptionBehavior': Optional[str],
    }
)


EC2LaunchTemplateInstanceMarketOptionsRequest = TypedDict(
    'EC2LaunchTemplateInstanceMarketOptionsRequest', {
        'MarketType': Optional[str],
        'LaunchTemplateSpotMarketOptionsRequest': Optional[EC2LaunchTemplateSpotMarketOptionsRequest],
    }
)


EC2CreditSpecificationRequest = TypedDict(
    'EC2CreditSpecificationRequest', {
        'String': str,
    }
)


EC2LaunchTemplateCpuOptionsRequest = TypedDict(
    'EC2LaunchTemplateCpuOptionsRequest', {
        'Integer': Optional[int],
        'Integer': Optional[int],
    }
)


EC2CapacityReservationTarget = TypedDict(
    'EC2CapacityReservationTarget', {
        'String': Optional[str],
    }
)


EC2LaunchTemplateCapacityReservationSpecificationRequest = TypedDict(
    'EC2LaunchTemplateCapacityReservationSpecificationRequest', {
        'CapacityReservationPreference': Optional[str],
        'CapacityReservationTarget': Optional[EC2CapacityReservationTarget],
    }
)


EC2LaunchTemplateLicenseConfigurationRequest = TypedDict(
    'EC2LaunchTemplateLicenseConfigurationRequest', {
        'String': Optional[str],
    }
)


EC2LaunchTemplateHibernationOptionsRequest = TypedDict(
    'EC2LaunchTemplateHibernationOptionsRequest', {
        'Boolean': Optional[bool],
    }
)


EC2RequestLaunchTemplateData = TypedDict(
    'EC2RequestLaunchTemplateData', {
        'String': Optional[str],
        'Boolean': Optional[bool],
        'LaunchTemplateIamInstanceProfileSpecificationRequest': Optional[EC2LaunchTemplateIamInstanceProfileSpecificationRequest],
        'LaunchTemplateBlockDeviceMappingRequestList': Optional[List[EC2LaunchTemplateBlockDeviceMappingRequest]],
        'LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList': Optional[List[EC2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest]],
        'String': Optional[str],
        'InstanceType': Optional[str],
        'String': Optional[str],
        'LaunchTemplatesMonitoringRequest': Optional[EC2LaunchTemplatesMonitoringRequest],
        'LaunchTemplatePlacementRequest': Optional[EC2LaunchTemplatePlacementRequest],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'ShutdownBehavior': Optional[str],
        'String': Optional[str],
        'LaunchTemplateTagSpecificationRequestList': Optional[List[EC2LaunchTemplateTagSpecificationRequest]],
        'ElasticGpuSpecificationList': Optional[List[EC2ElasticGpuSpecification]],
        'LaunchTemplateElasticInferenceAcceleratorList': Optional[List[EC2LaunchTemplateElasticInferenceAccelerator]],
        'SecurityGroupIdStringList': Optional[List[str]],
        'SecurityGroupStringList': Optional[List[str]],
        'LaunchTemplateInstanceMarketOptionsRequest': Optional[EC2LaunchTemplateInstanceMarketOptionsRequest],
        'CreditSpecificationRequest': Optional[EC2CreditSpecificationRequest],
        'LaunchTemplateCpuOptionsRequest': Optional[EC2LaunchTemplateCpuOptionsRequest],
        'LaunchTemplateCapacityReservationSpecificationRequest': Optional[EC2LaunchTemplateCapacityReservationSpecificationRequest],
        'LaunchTemplateLicenseSpecificationListRequest': Optional[List[EC2LaunchTemplateLicenseConfigurationRequest]],
        'LaunchTemplateHibernationOptionsRequest': Optional[EC2LaunchTemplateHibernationOptionsRequest],
    }
)


EC2LaunchTemplate = TypedDict(
    'EC2LaunchTemplate', {
        'String': Optional[str],
        'LaunchTemplateName': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'String': Optional[str],
        'Long': Optional[int],
        'Long': Optional[int],
        'TagList': Optional[List[EC2Tag]],
    }
)


EC2CreateLaunchTemplateResult = TypedDict(
    'EC2CreateLaunchTemplateResult', {
        'LaunchTemplate': Optional[EC2LaunchTemplate],
    }
)


EC2LaunchTemplateIamInstanceProfileSpecification = TypedDict(
    'EC2LaunchTemplateIamInstanceProfileSpecification', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2LaunchTemplateEbsBlockDevice = TypedDict(
    'EC2LaunchTemplateEbsBlockDevice', {
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Integer': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'VolumeType': Optional[str],
    }
)


EC2LaunchTemplateBlockDeviceMapping = TypedDict(
    'EC2LaunchTemplateBlockDeviceMapping', {
        'String': Optional[str],
        'String': Optional[str],
        'LaunchTemplateEbsBlockDevice': Optional[EC2LaunchTemplateEbsBlockDevice],
        'String': Optional[str],
    }
)


EC2InstanceIpv6Address = TypedDict(
    'EC2InstanceIpv6Address', {
        'String': Optional[str],
    }
)


EC2LaunchTemplateInstanceNetworkInterfaceSpecification = TypedDict(
    'EC2LaunchTemplateInstanceNetworkInterfaceSpecification', {
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'Integer': Optional[int],
        'GroupIdStringList': Optional[List[str]],
        'String': Optional[str],
        'Integer': Optional[int],
        'InstanceIpv6AddressList': Optional[List[EC2InstanceIpv6Address]],
        'String': Optional[str],
        'String': Optional[str],
        'PrivateIpAddressSpecificationList': Optional[List[EC2PrivateIpAddressSpecification]],
        'Integer': Optional[int],
        'String': Optional[str],
    }
)


EC2LaunchTemplatesMonitoring = TypedDict(
    'EC2LaunchTemplatesMonitoring', {
        'Boolean': Optional[bool],
    }
)


EC2LaunchTemplatePlacement = TypedDict(
    'EC2LaunchTemplatePlacement', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Tenancy': Optional[str],
        'String': Optional[str],
    }
)


EC2LaunchTemplateTagSpecification = TypedDict(
    'EC2LaunchTemplateTagSpecification', {
        'ResourceType': Optional[str],
        'TagList': Optional[List[EC2Tag]],
    }
)


EC2ElasticGpuSpecificationResponse = TypedDict(
    'EC2ElasticGpuSpecificationResponse', {
        'String': Optional[str],
    }
)


EC2LaunchTemplateElasticInferenceAcceleratorResponse = TypedDict(
    'EC2LaunchTemplateElasticInferenceAcceleratorResponse', {
        'String': Optional[str],
    }
)


EC2LaunchTemplateSpotMarketOptions = TypedDict(
    'EC2LaunchTemplateSpotMarketOptions', {
        'String': Optional[str],
        'SpotInstanceType': Optional[str],
        'Integer': Optional[int],
        'DateTime': Optional[datetime.datetime],
        'InstanceInterruptionBehavior': Optional[str],
    }
)


EC2LaunchTemplateInstanceMarketOptions = TypedDict(
    'EC2LaunchTemplateInstanceMarketOptions', {
        'MarketType': Optional[str],
        'LaunchTemplateSpotMarketOptions': Optional[EC2LaunchTemplateSpotMarketOptions],
    }
)


EC2CreditSpecification = TypedDict(
    'EC2CreditSpecification', {
        'String': Optional[str],
    }
)


EC2LaunchTemplateCpuOptions = TypedDict(
    'EC2LaunchTemplateCpuOptions', {
        'Integer': Optional[int],
        'Integer': Optional[int],
    }
)


EC2CapacityReservationTargetResponse = TypedDict(
    'EC2CapacityReservationTargetResponse', {
        'String': Optional[str],
    }
)


EC2LaunchTemplateCapacityReservationSpecificationResponse = TypedDict(
    'EC2LaunchTemplateCapacityReservationSpecificationResponse', {
        'CapacityReservationPreference': Optional[str],
        'CapacityReservationTargetResponse': Optional[EC2CapacityReservationTargetResponse],
    }
)


EC2LaunchTemplateLicenseConfiguration = TypedDict(
    'EC2LaunchTemplateLicenseConfiguration', {
        'String': Optional[str],
    }
)


EC2LaunchTemplateHibernationOptions = TypedDict(
    'EC2LaunchTemplateHibernationOptions', {
        'Boolean': Optional[bool],
    }
)


EC2ResponseLaunchTemplateData = TypedDict(
    'EC2ResponseLaunchTemplateData', {
        'String': Optional[str],
        'Boolean': Optional[bool],
        'LaunchTemplateIamInstanceProfileSpecification': Optional[EC2LaunchTemplateIamInstanceProfileSpecification],
        'LaunchTemplateBlockDeviceMappingList': Optional[List[EC2LaunchTemplateBlockDeviceMapping]],
        'LaunchTemplateInstanceNetworkInterfaceSpecificationList': Optional[List[EC2LaunchTemplateInstanceNetworkInterfaceSpecification]],
        'String': Optional[str],
        'InstanceType': Optional[str],
        'String': Optional[str],
        'LaunchTemplatesMonitoring': Optional[EC2LaunchTemplatesMonitoring],
        'LaunchTemplatePlacement': Optional[EC2LaunchTemplatePlacement],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'ShutdownBehavior': Optional[str],
        'String': Optional[str],
        'LaunchTemplateTagSpecificationList': Optional[List[EC2LaunchTemplateTagSpecification]],
        'ElasticGpuSpecificationResponseList': Optional[List[EC2ElasticGpuSpecificationResponse]],
        'LaunchTemplateElasticInferenceAcceleratorResponseList': Optional[List[EC2LaunchTemplateElasticInferenceAcceleratorResponse]],
        'ValueStringList': Optional[List[str]],
        'ValueStringList': Optional[List[str]],
        'LaunchTemplateInstanceMarketOptions': Optional[EC2LaunchTemplateInstanceMarketOptions],
        'CreditSpecification': Optional[EC2CreditSpecification],
        'LaunchTemplateCpuOptions': Optional[EC2LaunchTemplateCpuOptions],
        'LaunchTemplateCapacityReservationSpecificationResponse': Optional[EC2LaunchTemplateCapacityReservationSpecificationResponse],
        'LaunchTemplateLicenseList': Optional[List[EC2LaunchTemplateLicenseConfiguration]],
        'LaunchTemplateHibernationOptions': Optional[EC2LaunchTemplateHibernationOptions],
    }
)


EC2LaunchTemplateVersion = TypedDict(
    'EC2LaunchTemplateVersion', {
        'String': Optional[str],
        'LaunchTemplateName': Optional[str],
        'Long': Optional[int],
        'VersionDescription': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'ResponseLaunchTemplateData': Optional[EC2ResponseLaunchTemplateData],
    }
)


EC2CreateLaunchTemplateVersionResult = TypedDict(
    'EC2CreateLaunchTemplateVersionResult', {
        'LaunchTemplateVersion': Optional[EC2LaunchTemplateVersion],
    }
)


EC2NatGatewayAddress = TypedDict(
    'EC2NatGatewayAddress', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2ProvisionedBandwidth = TypedDict(
    'EC2ProvisionedBandwidth', {
        'DateTime': Optional[datetime.datetime],
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2NatGateway = TypedDict(
    'EC2NatGateway', {
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'NatGatewayAddressList': Optional[List[EC2NatGatewayAddress]],
        'String': Optional[str],
        'ProvisionedBandwidth': Optional[EC2ProvisionedBandwidth],
        'NatGatewayState': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'TagList': Optional[List[EC2Tag]],
    }
)


EC2CreateNatGatewayResult = TypedDict(
    'EC2CreateNatGatewayResult', {
        'String': Optional[str],
        'NatGateway': Optional[EC2NatGateway],
    }
)


EC2NetworkAclAssociation = TypedDict(
    'EC2NetworkAclAssociation', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2IcmpTypeCode = TypedDict(
    'EC2IcmpTypeCode', {
        'Integer': Optional[int],
        'Integer': Optional[int],
    }
)


EC2PortRange = TypedDict(
    'EC2PortRange', {
        'Integer': Optional[int],
        'Integer': Optional[int],
    }
)


EC2NetworkAclEntry = TypedDict(
    'EC2NetworkAclEntry', {
        'String': Optional[str],
        'Boolean': Optional[bool],
        'IcmpTypeCode': Optional[EC2IcmpTypeCode],
        'String': Optional[str],
        'PortRange': Optional[EC2PortRange],
        'String': Optional[str],
        'RuleAction': Optional[str],
        'Integer': Optional[int],
    }
)


EC2NetworkAcl = TypedDict(
    'EC2NetworkAcl', {
        'NetworkAclAssociationList': Optional[List[EC2NetworkAclAssociation]],
        'NetworkAclEntryList': Optional[List[EC2NetworkAclEntry]],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'TagList': Optional[List[EC2Tag]],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2CreateNetworkAclResult = TypedDict(
    'EC2CreateNetworkAclResult', {
        'NetworkAcl': Optional[EC2NetworkAcl],
    }
)


EC2NetworkInterfaceAssociation = TypedDict(
    'EC2NetworkInterfaceAssociation', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2NetworkInterfaceAttachment = TypedDict(
    'EC2NetworkInterfaceAttachment', {
        'DateTime': Optional[datetime.datetime],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Integer': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'AttachmentStatus': Optional[str],
    }
)


EC2GroupIdentifier = TypedDict(
    'EC2GroupIdentifier', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2NetworkInterfaceIpv6Address = TypedDict(
    'EC2NetworkInterfaceIpv6Address', {
        'String': Optional[str],
    }
)


EC2NetworkInterfacePrivateIpAddress = TypedDict(
    'EC2NetworkInterfacePrivateIpAddress', {
        'NetworkInterfaceAssociation': Optional[EC2NetworkInterfaceAssociation],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2NetworkInterface = TypedDict(
    'EC2NetworkInterface', {
        'NetworkInterfaceAssociation': Optional[EC2NetworkInterfaceAssociation],
        'NetworkInterfaceAttachment': Optional[EC2NetworkInterfaceAttachment],
        'String': Optional[str],
        'String': Optional[str],
        'GroupIdentifierList': Optional[List[EC2GroupIdentifier]],
        'NetworkInterfaceType': Optional[str],
        'NetworkInterfaceIpv6AddressesList': Optional[List[EC2NetworkInterfaceIpv6Address]],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'NetworkInterfacePrivateIpAddressList': Optional[List[EC2NetworkInterfacePrivateIpAddress]],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'NetworkInterfaceStatus': Optional[str],
        'String': Optional[str],
        'TagList': Optional[List[EC2Tag]],
        'String': Optional[str],
    }
)


EC2CreateNetworkInterfaceResult = TypedDict(
    'EC2CreateNetworkInterfaceResult', {
        'NetworkInterface': Optional[EC2NetworkInterface],
    }
)


EC2NetworkInterfacePermissionState = TypedDict(
    'EC2NetworkInterfacePermissionState', {
        'NetworkInterfacePermissionStateCode': Optional[str],
        'String': Optional[str],
    }
)


EC2NetworkInterfacePermission = TypedDict(
    'EC2NetworkInterfacePermission', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'InterfacePermissionType': Optional[str],
        'NetworkInterfacePermissionState': Optional[EC2NetworkInterfacePermissionState],
    }
)


EC2CreateNetworkInterfacePermissionResult = TypedDict(
    'EC2CreateNetworkInterfacePermissionResult', {
        'NetworkInterfacePermission': Optional[EC2NetworkInterfacePermission],
    }
)


EC2PriceScheduleSpecification = TypedDict(
    'EC2PriceScheduleSpecification', {
        'CurrencyCodeValues': Optional[str],
        'Double': Optional[float],
        'Long': Optional[int],
    }
)


EC2CreateReservedInstancesListingResult = TypedDict(
    'EC2CreateReservedInstancesListingResult', {
        'ReservedInstancesListingList': Optional[List[EC2ReservedInstancesListing]],
    }
)


EC2CreateRouteResult = TypedDict(
    'EC2CreateRouteResult', {
        'Boolean': Optional[bool],
    }
)


EC2RouteTableAssociation = TypedDict(
    'EC2RouteTableAssociation', {
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2PropagatingVgw = TypedDict(
    'EC2PropagatingVgw', {
        'String': Optional[str],
    }
)


EC2Route = TypedDict(
    'EC2Route', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'RouteOrigin': Optional[str],
        'RouteState': Optional[str],
        'String': Optional[str],
    }
)


EC2RouteTable = TypedDict(
    'EC2RouteTable', {
        'RouteTableAssociationList': Optional[List[EC2RouteTableAssociation]],
        'PropagatingVgwList': Optional[List[EC2PropagatingVgw]],
        'String': Optional[str],
        'RouteList': Optional[List[EC2Route]],
        'TagList': Optional[List[EC2Tag]],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2CreateRouteTableResult = TypedDict(
    'EC2CreateRouteTableResult', {
        'RouteTable': Optional[EC2RouteTable],
    }
)


EC2CreateSecurityGroupResult = TypedDict(
    'EC2CreateSecurityGroupResult', {
        'String': Optional[str],
    }
)


EC2Snapshot = TypedDict(
    'EC2Snapshot', {
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'SnapshotState': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'TagList': Optional[List[EC2Tag]],
    }
)


EC2SpotInstanceStateFault = TypedDict(
    'EC2SpotInstanceStateFault', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2SpotDatafeedSubscription = TypedDict(
    'EC2SpotDatafeedSubscription', {
        'String': Optional[str],
        'SpotInstanceStateFault': Optional[EC2SpotInstanceStateFault],
        'String': Optional[str],
        'String': Optional[str],
        'DatafeedSubscriptionState': Optional[str],
    }
)


EC2CreateSpotDatafeedSubscriptionResult = TypedDict(
    'EC2CreateSpotDatafeedSubscriptionResult', {
        'SpotDatafeedSubscription': Optional[EC2SpotDatafeedSubscription],
    }
)


EC2CreateSubnetResult = TypedDict(
    'EC2CreateSubnetResult', {
        'Subnet': Optional[EC2Subnet],
    }
)


EC2TransitGatewayRequestOptions = TypedDict(
    'EC2TransitGatewayRequestOptions', {
        'Long': Optional[int],
        'AutoAcceptSharedAttachmentsValue': Optional[str],
        'DefaultRouteTableAssociationValue': Optional[str],
        'DefaultRouteTablePropagationValue': Optional[str],
        'VpnEcmpSupportValue': Optional[str],
        'DnsSupportValue': Optional[str],
    }
)


EC2TransitGatewayOptions = TypedDict(
    'EC2TransitGatewayOptions', {
        'Long': Optional[int],
        'AutoAcceptSharedAttachmentsValue': Optional[str],
        'DefaultRouteTableAssociationValue': Optional[str],
        'String': Optional[str],
        'DefaultRouteTablePropagationValue': Optional[str],
        'String': Optional[str],
        'VpnEcmpSupportValue': Optional[str],
        'DnsSupportValue': Optional[str],
    }
)


EC2TransitGateway = TypedDict(
    'EC2TransitGateway', {
        'String': Optional[str],
        'String': Optional[str],
        'TransitGatewayState': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'TransitGatewayOptions': Optional[EC2TransitGatewayOptions],
        'TagList': Optional[List[EC2Tag]],
    }
)


EC2CreateTransitGatewayResult = TypedDict(
    'EC2CreateTransitGatewayResult', {
        'TransitGateway': Optional[EC2TransitGateway],
    }
)


EC2TransitGatewayRouteAttachment = TypedDict(
    'EC2TransitGatewayRouteAttachment', {
        'String': Optional[str],
        'String': Optional[str],
        'TransitGatewayAttachmentResourceType': Optional[str],
    }
)


EC2TransitGatewayRoute = TypedDict(
    'EC2TransitGatewayRoute', {
        'String': Optional[str],
        'TransitGatewayRouteAttachmentList': Optional[List[EC2TransitGatewayRouteAttachment]],
        'TransitGatewayRouteType': Optional[str],
        'TransitGatewayRouteState': Optional[str],
    }
)


EC2CreateTransitGatewayRouteResult = TypedDict(
    'EC2CreateTransitGatewayRouteResult', {
        'TransitGatewayRoute': Optional[EC2TransitGatewayRoute],
    }
)


EC2TransitGatewayRouteTable = TypedDict(
    'EC2TransitGatewayRouteTable', {
        'String': Optional[str],
        'String': Optional[str],
        'TransitGatewayRouteTableState': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'DateTime': Optional[datetime.datetime],
        'TagList': Optional[List[EC2Tag]],
    }
)


EC2CreateTransitGatewayRouteTableResult = TypedDict(
    'EC2CreateTransitGatewayRouteTableResult', {
        'TransitGatewayRouteTable': Optional[EC2TransitGatewayRouteTable],
    }
)


EC2CreateTransitGatewayVpcAttachmentRequestOptions = TypedDict(
    'EC2CreateTransitGatewayVpcAttachmentRequestOptions', {
        'DnsSupportValue': Optional[str],
        'Ipv6SupportValue': Optional[str],
    }
)


EC2CreateTransitGatewayVpcAttachmentResult = TypedDict(
    'EC2CreateTransitGatewayVpcAttachmentResult', {
        'TransitGatewayVpcAttachment': Optional[EC2TransitGatewayVpcAttachment],
    }
)


EC2Volume = TypedDict(
    'EC2Volume', {
        'VolumeAttachmentList': Optional[List[EC2VolumeAttachment]],
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'VolumeState': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'TagList': Optional[List[EC2Tag]],
        'VolumeType': Optional[str],
    }
)


EC2CreateVpcResult = TypedDict(
    'EC2CreateVpcResult', {
        'Vpc': Optional[EC2Vpc],
    }
)


EC2SecurityGroupIdentifier = TypedDict(
    'EC2SecurityGroupIdentifier', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2DnsEntry = TypedDict(
    'EC2DnsEntry', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2VpcEndpoint = TypedDict(
    'EC2VpcEndpoint', {
        'String': Optional[str],
        'VpcEndpointType': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'State': Optional[str],
        'String': Optional[str],
        'ValueStringList': Optional[List[str]],
        'ValueStringList': Optional[List[str]],
        'GroupIdentifierSet': Optional[List[EC2SecurityGroupIdentifier]],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'ValueStringList': Optional[List[str]],
        'DnsEntrySet': Optional[List[EC2DnsEntry]],
        'MillisecondDateTime': Optional[datetime.datetime],
    }
)


EC2CreateVpcEndpointResult = TypedDict(
    'EC2CreateVpcEndpointResult', {
        'VpcEndpoint': Optional[EC2VpcEndpoint],
        'String': Optional[str],
    }
)


EC2ConnectionNotification = TypedDict(
    'EC2ConnectionNotification', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'ConnectionNotificationType': Optional[str],
        'String': Optional[str],
        'ValueStringList': Optional[List[str]],
        'ConnectionNotificationState': Optional[str],
    }
)


EC2CreateVpcEndpointConnectionNotificationResult = TypedDict(
    'EC2CreateVpcEndpointConnectionNotificationResult', {
        'ConnectionNotification': Optional[EC2ConnectionNotification],
        'String': Optional[str],
    }
)


EC2ServiceTypeDetail = TypedDict(
    'EC2ServiceTypeDetail', {
        'ServiceType': Optional[str],
    }
)


EC2ServiceConfiguration = TypedDict(
    'EC2ServiceConfiguration', {
        'ServiceTypeDetailSet': Optional[List[EC2ServiceTypeDetail]],
        'String': Optional[str],
        'String': Optional[str],
        'ServiceState': Optional[str],
        'ValueStringList': Optional[List[str]],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'ValueStringList': Optional[List[str]],
        'ValueStringList': Optional[List[str]],
        'String': Optional[str],
    }
)


EC2CreateVpcEndpointServiceConfigurationResult = TypedDict(
    'EC2CreateVpcEndpointServiceConfigurationResult', {
        'ServiceConfiguration': Optional[EC2ServiceConfiguration],
        'String': Optional[str],
    }
)


EC2CreateVpcPeeringConnectionResult = TypedDict(
    'EC2CreateVpcPeeringConnectionResult', {
        'VpcPeeringConnection': Optional[EC2VpcPeeringConnection],
    }
)


EC2VpnTunnelOptionsSpecification = TypedDict(
    'EC2VpnTunnelOptionsSpecification', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2VpnConnectionOptionsSpecification = TypedDict(
    'EC2VpnConnectionOptionsSpecification', {
        'Boolean': Optional[bool],
        'TunnelOptionsList': Optional[List[EC2VpnTunnelOptionsSpecification]],
    }
)


EC2VpnConnectionOptions = TypedDict(
    'EC2VpnConnectionOptions', {
        'Boolean': Optional[bool],
    }
)


EC2VpnStaticRoute = TypedDict(
    'EC2VpnStaticRoute', {
        'String': Optional[str],
        'VpnStaticRouteSource': Optional[str],
        'VpnState': Optional[str],
    }
)


EC2VgwTelemetry = TypedDict(
    'EC2VgwTelemetry', {
        'Integer': Optional[int],
        'DateTime': Optional[datetime.datetime],
        'String': Optional[str],
        'TelemetryStatus': Optional[str],
        'String': Optional[str],
    }
)


EC2VpnConnection = TypedDict(
    'EC2VpnConnection', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'VpnState': Optional[str],
        'GatewayType': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'VpnConnectionOptions': Optional[EC2VpnConnectionOptions],
        'VpnStaticRouteList': Optional[List[EC2VpnStaticRoute]],
        'TagList': Optional[List[EC2Tag]],
        'VgwTelemetryList': Optional[List[EC2VgwTelemetry]],
    }
)


EC2CreateVpnConnectionResult = TypedDict(
    'EC2CreateVpnConnectionResult', {
        'VpnConnection': Optional[EC2VpnConnection],
    }
)


EC2VpnGateway = TypedDict(
    'EC2VpnGateway', {
        'String': Optional[str],
        'VpnState': Optional[str],
        'GatewayType': Optional[str],
        'VpcAttachmentList': Optional[List[EC2VpcAttachment]],
        'String': Optional[str],
        'Long': Optional[int],
        'TagList': Optional[List[EC2Tag]],
    }
)


EC2CreateVpnGatewayResult = TypedDict(
    'EC2CreateVpnGatewayResult', {
        'VpnGateway': Optional[EC2VpnGateway],
    }
)


EC2DeleteClientVpnEndpointResult = TypedDict(
    'EC2DeleteClientVpnEndpointResult', {
        'ClientVpnEndpointStatus': Optional[EC2ClientVpnEndpointStatus],
    }
)


EC2DeleteClientVpnRouteResult = TypedDict(
    'EC2DeleteClientVpnRouteResult', {
        'ClientVpnRouteStatus': Optional[EC2ClientVpnRouteStatus],
    }
)


EC2DeleteEgressOnlyInternetGatewayResult = TypedDict(
    'EC2DeleteEgressOnlyInternetGatewayResult', {
        'Boolean': Optional[bool],
    }
)


EC2DeleteFleetSuccessItem = TypedDict(
    'EC2DeleteFleetSuccessItem', {
        'FleetStateCode': Optional[str],
        'FleetStateCode': Optional[str],
        'FleetIdentifier': Optional[str],
    }
)


EC2DeleteFleetError = TypedDict(
    'EC2DeleteFleetError', {
        'DeleteFleetErrorCode': Optional[str],
        'String': Optional[str],
    }
)


EC2DeleteFleetErrorItem = TypedDict(
    'EC2DeleteFleetErrorItem', {
        'DeleteFleetError': Optional[EC2DeleteFleetError],
        'FleetIdentifier': Optional[str],
    }
)


EC2DeleteFleetsResult = TypedDict(
    'EC2DeleteFleetsResult', {
        'DeleteFleetSuccessSet': Optional[List[EC2DeleteFleetSuccessItem]],
        'DeleteFleetErrorSet': Optional[List[EC2DeleteFleetErrorItem]],
    }
)


EC2DeleteFlowLogsResult = TypedDict(
    'EC2DeleteFlowLogsResult', {
        'UnsuccessfulItemSet': Optional[List[EC2UnsuccessfulItem]],
    }
)


EC2DeleteFpgaImageResult = TypedDict(
    'EC2DeleteFpgaImageResult', {
        'Boolean': Optional[bool],
    }
)


EC2DeleteLaunchTemplateResult = TypedDict(
    'EC2DeleteLaunchTemplateResult', {
        'LaunchTemplate': Optional[EC2LaunchTemplate],
    }
)


EC2DeleteLaunchTemplateVersionsResponseSuccessItem = TypedDict(
    'EC2DeleteLaunchTemplateVersionsResponseSuccessItem', {
        'String': Optional[str],
        'String': Optional[str],
        'Long': Optional[int],
    }
)


EC2ResponseError = TypedDict(
    'EC2ResponseError', {
        'LaunchTemplateErrorCode': Optional[str],
        'String': Optional[str],
    }
)


EC2DeleteLaunchTemplateVersionsResponseErrorItem = TypedDict(
    'EC2DeleteLaunchTemplateVersionsResponseErrorItem', {
        'String': Optional[str],
        'String': Optional[str],
        'Long': Optional[int],
        'ResponseError': Optional[EC2ResponseError],
    }
)


EC2DeleteLaunchTemplateVersionsResult = TypedDict(
    'EC2DeleteLaunchTemplateVersionsResult', {
        'DeleteLaunchTemplateVersionsResponseSuccessSet': Optional[List[EC2DeleteLaunchTemplateVersionsResponseSuccessItem]],
        'DeleteLaunchTemplateVersionsResponseErrorSet': Optional[List[EC2DeleteLaunchTemplateVersionsResponseErrorItem]],
    }
)


EC2DeleteNatGatewayResult = TypedDict(
    'EC2DeleteNatGatewayResult', {
        'String': Optional[str],
    }
)


EC2DeleteNetworkInterfacePermissionResult = TypedDict(
    'EC2DeleteNetworkInterfacePermissionResult', {
        'Boolean': Optional[bool],
    }
)


EC2DeleteTransitGatewayResult = TypedDict(
    'EC2DeleteTransitGatewayResult', {
        'TransitGateway': Optional[EC2TransitGateway],
    }
)


EC2DeleteTransitGatewayRouteResult = TypedDict(
    'EC2DeleteTransitGatewayRouteResult', {
        'TransitGatewayRoute': Optional[EC2TransitGatewayRoute],
    }
)


EC2DeleteTransitGatewayRouteTableResult = TypedDict(
    'EC2DeleteTransitGatewayRouteTableResult', {
        'TransitGatewayRouteTable': Optional[EC2TransitGatewayRouteTable],
    }
)


EC2DeleteTransitGatewayVpcAttachmentResult = TypedDict(
    'EC2DeleteTransitGatewayVpcAttachmentResult', {
        'TransitGatewayVpcAttachment': Optional[EC2TransitGatewayVpcAttachment],
    }
)


EC2DeleteVpcEndpointConnectionNotificationsResult = TypedDict(
    'EC2DeleteVpcEndpointConnectionNotificationsResult', {
        'UnsuccessfulItemSet': Optional[List[EC2UnsuccessfulItem]],
    }
)


EC2DeleteVpcEndpointServiceConfigurationsResult = TypedDict(
    'EC2DeleteVpcEndpointServiceConfigurationsResult', {
        'UnsuccessfulItemSet': Optional[List[EC2UnsuccessfulItem]],
    }
)


EC2DeleteVpcEndpointsResult = TypedDict(
    'EC2DeleteVpcEndpointsResult', {
        'UnsuccessfulItemSet': Optional[List[EC2UnsuccessfulItem]],
    }
)


EC2DeleteVpcPeeringConnectionResult = TypedDict(
    'EC2DeleteVpcPeeringConnectionResult', {
        'Boolean': Optional[bool],
    }
)


EC2DeprovisionByoipCidrResult = TypedDict(
    'EC2DeprovisionByoipCidrResult', {
        'ByoipCidr': Optional[EC2ByoipCidr],
    }
)


EC2AccountAttributeValue = TypedDict(
    'EC2AccountAttributeValue', {
        'String': Optional[str],
    }
)


EC2AccountAttribute = TypedDict(
    'EC2AccountAttribute', {
        'String': Optional[str],
        'AccountAttributeValueList': Optional[List[EC2AccountAttributeValue]],
    }
)


EC2DescribeAccountAttributesResult = TypedDict(
    'EC2DescribeAccountAttributesResult', {
        'AccountAttributeList': Optional[List[EC2AccountAttribute]],
    }
)


EC2Filter = TypedDict(
    'EC2Filter', {
        'String': Optional[str],
        'ValueStringList': Optional[List[str]],
    }
)


EC2Address = TypedDict(
    'EC2Address', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DomainType': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'TagList': Optional[List[EC2Tag]],
        'String': Optional[str],
    }
)


EC2DescribeAddressesResult = TypedDict(
    'EC2DescribeAddressesResult', {
        'AddressList': Optional[List[EC2Address]],
    }
)


EC2IdFormat = TypedDict(
    'EC2IdFormat', {
        'DateTime': Optional[datetime.datetime],
        'String': Optional[str],
        'Boolean': Optional[bool],
    }
)


EC2DescribeAggregateIdFormatResult = TypedDict(
    'EC2DescribeAggregateIdFormatResult', {
        'Boolean': Optional[bool],
        'IdFormatList': Optional[List[EC2IdFormat]],
    }
)


EC2AvailabilityZoneMessage = TypedDict(
    'EC2AvailabilityZoneMessage', {
        'String': Optional[str],
    }
)


EC2AvailabilityZone = TypedDict(
    'EC2AvailabilityZone', {
        'AvailabilityZoneState': Optional[str],
        'AvailabilityZoneMessageList': Optional[List[EC2AvailabilityZoneMessage]],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2DescribeAvailabilityZonesResult = TypedDict(
    'EC2DescribeAvailabilityZonesResult', {
        'AvailabilityZoneList': Optional[List[EC2AvailabilityZone]],
    }
)


EC2DescribeBundleTasksResult = TypedDict(
    'EC2DescribeBundleTasksResult', {
        'BundleTaskList': Optional[List[EC2BundleTask]],
    }
)


EC2DescribeByoipCidrsResult = TypedDict(
    'EC2DescribeByoipCidrsResult', {
        'ByoipCidrSet': Optional[List[EC2ByoipCidr]],
        'String': Optional[str],
    }
)


EC2DescribeCapacityReservationsResult = TypedDict(
    'EC2DescribeCapacityReservationsResult', {
        'String': Optional[str],
        'CapacityReservationSet': Optional[List[EC2CapacityReservation]],
    }
)


EC2ClassicLinkInstance = TypedDict(
    'EC2ClassicLinkInstance', {
        'GroupIdentifierList': Optional[List[EC2GroupIdentifier]],
        'String': Optional[str],
        'TagList': Optional[List[EC2Tag]],
        'String': Optional[str],
    }
)


EC2DescribeClassicLinkInstancesResult = TypedDict(
    'EC2DescribeClassicLinkInstancesResult', {
        'ClassicLinkInstanceList': Optional[List[EC2ClassicLinkInstance]],
        'String': Optional[str],
    }
)


EC2AuthorizationRule = TypedDict(
    'EC2AuthorizationRule', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'ClientVpnAuthorizationRuleStatus': Optional[EC2ClientVpnAuthorizationRuleStatus],
    }
)


EC2DescribeClientVpnAuthorizationRulesResult = TypedDict(
    'EC2DescribeClientVpnAuthorizationRulesResult', {
        'AuthorizationRuleSet': Optional[List[EC2AuthorizationRule]],
        'NextToken': Optional[str],
    }
)


EC2ClientVpnConnectionStatus = TypedDict(
    'EC2ClientVpnConnectionStatus', {
        'ClientVpnConnectionStatusCode': Optional[str],
        'String': Optional[str],
    }
)


EC2ClientVpnConnection = TypedDict(
    'EC2ClientVpnConnection', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'ClientVpnConnectionStatus': Optional[EC2ClientVpnConnectionStatus],
        'String': Optional[str],
    }
)


EC2DescribeClientVpnConnectionsResult = TypedDict(
    'EC2DescribeClientVpnConnectionsResult', {
        'ClientVpnConnectionSet': Optional[List[EC2ClientVpnConnection]],
        'NextToken': Optional[str],
    }
)


EC2AssociatedTargetNetwork = TypedDict(
    'EC2AssociatedTargetNetwork', {
        'String': Optional[str],
        'AssociatedNetworkType': Optional[str],
    }
)


EC2DirectoryServiceAuthentication = TypedDict(
    'EC2DirectoryServiceAuthentication', {
        'String': Optional[str],
    }
)


EC2CertificateAuthentication = TypedDict(
    'EC2CertificateAuthentication', {
        'String': Optional[str],
    }
)


EC2ClientVpnAuthentication = TypedDict(
    'EC2ClientVpnAuthentication', {
        'ClientVpnAuthenticationType': Optional[str],
        'DirectoryServiceAuthentication': Optional[EC2DirectoryServiceAuthentication],
        'CertificateAuthentication': Optional[EC2CertificateAuthentication],
    }
)


EC2ConnectionLogResponseOptions = TypedDict(
    'EC2ConnectionLogResponseOptions', {
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2ClientVpnEndpoint = TypedDict(
    'EC2ClientVpnEndpoint', {
        'String': Optional[str],
        'String': Optional[str],
        'ClientVpnEndpointStatus': Optional[EC2ClientVpnEndpointStatus],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'ValueStringList': Optional[List[str]],
        'Boolean': Optional[bool],
        'VpnProtocol': Optional[str],
        'TransportProtocol': Optional[str],
        'AssociatedTargetNetworkSet': Optional[List[EC2AssociatedTargetNetwork]],
        'String': Optional[str],
        'ClientVpnAuthenticationList': Optional[List[EC2ClientVpnAuthentication]],
        'ConnectionLogResponseOptions': Optional[EC2ConnectionLogResponseOptions],
        'TagList': Optional[List[EC2Tag]],
    }
)


EC2DescribeClientVpnEndpointsResult = TypedDict(
    'EC2DescribeClientVpnEndpointsResult', {
        'EndpointSet': Optional[List[EC2ClientVpnEndpoint]],
        'NextToken': Optional[str],
    }
)


EC2ClientVpnRoute = TypedDict(
    'EC2ClientVpnRoute', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'ClientVpnRouteStatus': Optional[EC2ClientVpnRouteStatus],
        'String': Optional[str],
    }
)


EC2DescribeClientVpnRoutesResult = TypedDict(
    'EC2DescribeClientVpnRoutesResult', {
        'ClientVpnRouteSet': Optional[List[EC2ClientVpnRoute]],
        'NextToken': Optional[str],
    }
)


EC2TargetNetwork = TypedDict(
    'EC2TargetNetwork', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'AssociationStatus': Optional[EC2AssociationStatus],
        'ValueStringList': Optional[List[str]],
    }
)


EC2DescribeClientVpnTargetNetworksResult = TypedDict(
    'EC2DescribeClientVpnTargetNetworksResult', {
        'TargetNetworkSet': Optional[List[EC2TargetNetwork]],
        'NextToken': Optional[str],
    }
)


EC2DiskImageDescription = TypedDict(
    'EC2DiskImageDescription', {
        'String': Optional[str],
        'DiskImageFormat': Optional[str],
        'String': Optional[str],
        'Long': Optional[int],
    }
)


EC2DiskImageVolumeDescription = TypedDict(
    'EC2DiskImageVolumeDescription', {
        'String': Optional[str],
        'Long': Optional[int],
    }
)


EC2ImportInstanceVolumeDetailItem = TypedDict(
    'EC2ImportInstanceVolumeDetailItem', {
        'String': Optional[str],
        'Long': Optional[int],
        'String': Optional[str],
        'DiskImageDescription': Optional[EC2DiskImageDescription],
        'String': Optional[str],
        'String': Optional[str],
        'DiskImageVolumeDescription': Optional[EC2DiskImageVolumeDescription],
    }
)


EC2ImportInstanceTaskDetails = TypedDict(
    'EC2ImportInstanceTaskDetails', {
        'String': Optional[str],
        'String': Optional[str],
        'PlatformValues': Optional[str],
        'ImportInstanceVolumeDetailSet': Optional[List[EC2ImportInstanceVolumeDetailItem]],
    }
)


EC2ImportVolumeTaskDetails = TypedDict(
    'EC2ImportVolumeTaskDetails', {
        'String': Optional[str],
        'Long': Optional[int],
        'String': Optional[str],
        'DiskImageDescription': Optional[EC2DiskImageDescription],
        'DiskImageVolumeDescription': Optional[EC2DiskImageVolumeDescription],
    }
)


EC2ConversionTask = TypedDict(
    'EC2ConversionTask', {
        'String': Optional[str],
        'String': Optional[str],
        'ImportInstanceTaskDetails': Optional[EC2ImportInstanceTaskDetails],
        'ImportVolumeTaskDetails': Optional[EC2ImportVolumeTaskDetails],
        'ConversionTaskState': Optional[str],
        'String': Optional[str],
        'TagList': Optional[List[EC2Tag]],
    }
)


EC2DescribeConversionTasksResult = TypedDict(
    'EC2DescribeConversionTasksResult', {
        'DescribeConversionTaskList': Optional[List[EC2ConversionTask]],
    }
)


EC2DescribeCustomerGatewaysResult = TypedDict(
    'EC2DescribeCustomerGatewaysResult', {
        'CustomerGatewayList': Optional[List[EC2CustomerGateway]],
    }
)


EC2DescribeDhcpOptionsResult = TypedDict(
    'EC2DescribeDhcpOptionsResult', {
        'DhcpOptionsList': Optional[List[EC2DhcpOptions]],
    }
)


EC2DescribeEgressOnlyInternetGatewaysResult = TypedDict(
    'EC2DescribeEgressOnlyInternetGatewaysResult', {
        'EgressOnlyInternetGatewayList': Optional[List[EC2EgressOnlyInternetGateway]],
        'String': Optional[str],
    }
)


EC2ElasticGpuHealth = TypedDict(
    'EC2ElasticGpuHealth', {
        'ElasticGpuStatus': Optional[str],
    }
)


EC2ElasticGpus = TypedDict(
    'EC2ElasticGpus', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'ElasticGpuHealth': Optional[EC2ElasticGpuHealth],
        'ElasticGpuState': Optional[str],
        'String': Optional[str],
    }
)


EC2DescribeElasticGpusResult = TypedDict(
    'EC2DescribeElasticGpusResult', {
        'ElasticGpuSet': Optional[List[EC2ElasticGpus]],
        'Integer': Optional[int],
        'String': Optional[str],
    }
)


EC2DescribeExportTasksResult = TypedDict(
    'EC2DescribeExportTasksResult', {
        'ExportTaskList': Optional[List[EC2ExportTask]],
    }
)


EC2EventInformation = TypedDict(
    'EC2EventInformation', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2HistoryRecordEntry = TypedDict(
    'EC2HistoryRecordEntry', {
        'EventInformation': Optional[EC2EventInformation],
        'FleetEventType': Optional[str],
        'DateTime': Optional[datetime.datetime],
    }
)


EC2DescribeFleetHistoryResult = TypedDict(
    'EC2DescribeFleetHistoryResult', {
        'HistoryRecordSet': Optional[List[EC2HistoryRecordEntry]],
        'DateTime': Optional[datetime.datetime],
        'String': Optional[str],
        'FleetIdentifier': Optional[str],
        'DateTime': Optional[datetime.datetime],
    }
)


EC2ActiveInstance = TypedDict(
    'EC2ActiveInstance', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'InstanceHealthStatus': Optional[str],
    }
)


EC2DescribeFleetInstancesResult = TypedDict(
    'EC2DescribeFleetInstancesResult', {
        'ActiveInstanceSet': Optional[List[EC2ActiveInstance]],
        'String': Optional[str],
        'FleetIdentifier': Optional[str],
    }
)


EC2FleetLaunchTemplateConfig = TypedDict(
    'EC2FleetLaunchTemplateConfig', {
        'FleetLaunchTemplateSpecification': Optional[EC2FleetLaunchTemplateSpecification],
        'FleetLaunchTemplateOverridesList': Optional[List[EC2FleetLaunchTemplateOverrides]],
    }
)


EC2TargetCapacitySpecification = TypedDict(
    'EC2TargetCapacitySpecification', {
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'DefaultTargetCapacityType': Optional[str],
    }
)


EC2SpotOptions = TypedDict(
    'EC2SpotOptions', {
        'SpotAllocationStrategy': Optional[str],
        'SpotInstanceInterruptionBehavior': Optional[str],
        'Integer': Optional[int],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Integer': Optional[int],
    }
)


EC2OnDemandOptions = TypedDict(
    'EC2OnDemandOptions', {
        'FleetOnDemandAllocationStrategy': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Integer': Optional[int],
    }
)


EC2DescribeFleetError = TypedDict(
    'EC2DescribeFleetError', {
        'LaunchTemplateAndOverridesResponse': Optional[EC2LaunchTemplateAndOverridesResponse],
        'InstanceLifecycle': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2DescribeFleetsInstances = TypedDict(
    'EC2DescribeFleetsInstances', {
        'LaunchTemplateAndOverridesResponse': Optional[EC2LaunchTemplateAndOverridesResponse],
        'InstanceLifecycle': Optional[str],
        'InstanceIdsSet': Optional[List[str]],
        'InstanceType': Optional[str],
        'PlatformValues': Optional[str],
    }
)


EC2FleetData = TypedDict(
    'EC2FleetData', {
        'FleetActivityStatus': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'FleetIdentifier': Optional[str],
        'FleetStateCode': Optional[str],
        'String': Optional[str],
        'FleetExcessCapacityTerminationPolicy': Optional[str],
        'Double': Optional[float],
        'Double': Optional[float],
        'FleetLaunchTemplateConfigList': Optional[List[EC2FleetLaunchTemplateConfig]],
        'TargetCapacitySpecification': Optional[EC2TargetCapacitySpecification],
        'Boolean': Optional[bool],
        'FleetType': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
        'Boolean': Optional[bool],
        'SpotOptions': Optional[EC2SpotOptions],
        'OnDemandOptions': Optional[EC2OnDemandOptions],
        'TagList': Optional[List[EC2Tag]],
        'DescribeFleetsErrorSet': Optional[List[EC2DescribeFleetError]],
        'DescribeFleetsInstancesSet': Optional[List[EC2DescribeFleetsInstances]],
    }
)


EC2DescribeFleetsResult = TypedDict(
    'EC2DescribeFleetsResult', {
        'String': Optional[str],
        'FleetSet': Optional[List[EC2FleetData]],
    }
)


EC2FlowLog = TypedDict(
    'EC2FlowLog', {
        'DateTime': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'TrafficType': Optional[str],
        'LogDestinationType': Optional[str],
        'String': Optional[str],
    }
)


EC2DescribeFlowLogsResult = TypedDict(
    'EC2DescribeFlowLogsResult', {
        'FlowLogSet': Optional[List[EC2FlowLog]],
        'String': Optional[str],
    }
)


EC2LoadPermission = TypedDict(
    'EC2LoadPermission', {
        'String': Optional[str],
        'PermissionGroup': Optional[str],
    }
)


EC2ProductCode = TypedDict(
    'EC2ProductCode', {
        'String': Optional[str],
        'ProductCodeValues': Optional[str],
    }
)


EC2FpgaImageAttribute = TypedDict(
    'EC2FpgaImageAttribute', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'LoadPermissionList': Optional[List[EC2LoadPermission]],
        'ProductCodeList': Optional[List[EC2ProductCode]],
    }
)


EC2DescribeFpgaImageAttributeResult = TypedDict(
    'EC2DescribeFpgaImageAttributeResult', {
        'FpgaImageAttribute': Optional[EC2FpgaImageAttribute],
    }
)


EC2PciId = TypedDict(
    'EC2PciId', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2FpgaImageState = TypedDict(
    'EC2FpgaImageState', {
        'FpgaImageStateCode': Optional[str],
        'String': Optional[str],
    }
)


EC2FpgaImage = TypedDict(
    'EC2FpgaImage', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'PciId': Optional[EC2PciId],
        'FpgaImageState': Optional[EC2FpgaImageState],
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'ProductCodeList': Optional[List[EC2ProductCode]],
        'TagList': Optional[List[EC2Tag]],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
    }
)


EC2DescribeFpgaImagesResult = TypedDict(
    'EC2DescribeFpgaImagesResult', {
        'FpgaImageList': Optional[List[EC2FpgaImage]],
        'NextToken': Optional[str],
    }
)


EC2HostOffering = TypedDict(
    'EC2HostOffering', {
        'CurrencyCodeValues': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'PaymentOption': Optional[str],
        'String': Optional[str],
    }
)


EC2DescribeHostReservationOfferingsResult = TypedDict(
    'EC2DescribeHostReservationOfferingsResult', {
        'String': Optional[str],
        'HostOfferingSet': Optional[List[EC2HostOffering]],
    }
)


EC2HostReservation = TypedDict(
    'EC2HostReservation', {
        'Integer': Optional[int],
        'CurrencyCodeValues': Optional[str],
        'Integer': Optional[int],
        'DateTime': Optional[datetime.datetime],
        'ResponseHostIdSet': Optional[List[str]],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'PaymentOption': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'ReservationState': Optional[str],
        'String': Optional[str],
        'TagList': Optional[List[EC2Tag]],
    }
)


EC2DescribeHostReservationsResult = TypedDict(
    'EC2DescribeHostReservationsResult', {
        'HostReservationSet': Optional[List[EC2HostReservation]],
        'String': Optional[str],
    }
)


EC2InstanceCapacity = TypedDict(
    'EC2InstanceCapacity', {
        'Integer': Optional[int],
        'String': Optional[str],
        'Integer': Optional[int],
    }
)


EC2AvailableCapacity = TypedDict(
    'EC2AvailableCapacity', {
        'AvailableInstanceCapacityList': Optional[List[EC2InstanceCapacity]],
        'Integer': Optional[int],
    }
)


EC2HostProperties = TypedDict(
    'EC2HostProperties', {
        'Integer': Optional[int],
        'String': Optional[str],
        'Integer': Optional[int],
        'Integer': Optional[int],
    }
)


EC2HostInstance = TypedDict(
    'EC2HostInstance', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2Host = TypedDict(
    'EC2Host', {
        'AutoPlacement': Optional[str],
        'String': Optional[str],
        'AvailableCapacity': Optional[EC2AvailableCapacity],
        'String': Optional[str],
        'String': Optional[str],
        'HostProperties': Optional[EC2HostProperties],
        'String': Optional[str],
        'HostInstanceList': Optional[List[EC2HostInstance]],
        'AllocationState': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
        'TagList': Optional[List[EC2Tag]],
    }
)


EC2DescribeHostsResult = TypedDict(
    'EC2DescribeHostsResult', {
        'HostList': Optional[List[EC2Host]],
        'String': Optional[str],
    }
)


EC2DescribeIamInstanceProfileAssociationsResult = TypedDict(
    'EC2DescribeIamInstanceProfileAssociationsResult', {
        'IamInstanceProfileAssociationSet': Optional[List[EC2IamInstanceProfileAssociation]],
        'NextToken': Optional[str],
    }
)


EC2DescribeIdFormatResult = TypedDict(
    'EC2DescribeIdFormatResult', {
        'IdFormatList': Optional[List[EC2IdFormat]],
    }
)


EC2DescribeIdentityIdFormatResult = TypedDict(
    'EC2DescribeIdentityIdFormatResult', {
        'IdFormatList': Optional[List[EC2IdFormat]],
    }
)


EC2LaunchPermission = TypedDict(
    'EC2LaunchPermission', {
        'PermissionGroup': Optional[str],
        'String': Optional[str],
    }
)


EC2ImageAttribute = TypedDict(
    'EC2ImageAttribute', {
        'BlockDeviceMappingList': Optional[List[EC2BlockDeviceMapping]],
        'String': Optional[str],
        'LaunchPermissionList': Optional[List[EC2LaunchPermission]],
        'ProductCodeList': Optional[List[EC2ProductCode]],
        'AttributeValue': Optional[EC2AttributeValue],
        'AttributeValue': Optional[EC2AttributeValue],
        'AttributeValue': Optional[EC2AttributeValue],
        'AttributeValue': Optional[EC2AttributeValue],
    }
)


EC2StateReason = TypedDict(
    'EC2StateReason', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2Image = TypedDict(
    'EC2Image', {
        'ArchitectureValues': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'ImageTypeValues': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'PlatformValues': Optional[str],
        'ProductCodeList': Optional[List[EC2ProductCode]],
        'String': Optional[str],
        'ImageState': Optional[str],
        'BlockDeviceMappingList': Optional[List[EC2BlockDeviceMapping]],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'HypervisorType': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DeviceType': Optional[str],
        'String': Optional[str],
        'StateReason': Optional[EC2StateReason],
        'TagList': Optional[List[EC2Tag]],
        'VirtualizationType': Optional[str],
    }
)


EC2DescribeImagesResult = TypedDict(
    'EC2DescribeImagesResult', {
        'ImageList': Optional[List[EC2Image]],
    }
)


EC2UserBucketDetails = TypedDict(
    'EC2UserBucketDetails', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2SnapshotDetail = TypedDict(
    'EC2SnapshotDetail', {
        'String': Optional[str],
        'String': Optional[str],
        'Double': Optional[float],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'UserBucketDetails': Optional[EC2UserBucketDetails],
    }
)


EC2ImportImageTask = TypedDict(
    'EC2ImportImageTask', {
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'SnapshotDetailList': Optional[List[EC2SnapshotDetail]],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2DescribeImportImageTasksResult = TypedDict(
    'EC2DescribeImportImageTasksResult', {
        'ImportImageTaskList': Optional[List[EC2ImportImageTask]],
        'String': Optional[str],
    }
)


EC2SnapshotTaskDetail = TypedDict(
    'EC2SnapshotTaskDetail', {
        'String': Optional[str],
        'Double': Optional[float],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'UserBucketDetails': Optional[EC2UserBucketDetails],
    }
)


EC2ImportSnapshotTask = TypedDict(
    'EC2ImportSnapshotTask', {
        'String': Optional[str],
        'String': Optional[str],
        'SnapshotTaskDetail': Optional[EC2SnapshotTaskDetail],
    }
)


EC2DescribeImportSnapshotTasksResult = TypedDict(
    'EC2DescribeImportSnapshotTasksResult', {
        'ImportSnapshotTaskList': Optional[List[EC2ImportSnapshotTask]],
        'String': Optional[str],
    }
)


EC2EbsInstanceBlockDevice = TypedDict(
    'EC2EbsInstanceBlockDevice', {
        'DateTime': Optional[datetime.datetime],
        'Boolean': Optional[bool],
        'AttachmentStatus': Optional[str],
        'String': Optional[str],
    }
)


EC2InstanceBlockDeviceMapping = TypedDict(
    'EC2InstanceBlockDeviceMapping', {
        'String': Optional[str],
        'EbsInstanceBlockDevice': Optional[EC2EbsInstanceBlockDevice],
    }
)


EC2AttributeBooleanValue = TypedDict(
    'EC2AttributeBooleanValue', {
        'Boolean': Optional[bool],
    }
)


EC2InstanceAttribute = TypedDict(
    'EC2InstanceAttribute', {
        'GroupIdentifierList': Optional[List[EC2GroupIdentifier]],
        'InstanceBlockDeviceMappingList': Optional[List[EC2InstanceBlockDeviceMapping]],
        'AttributeBooleanValue': Optional[EC2AttributeBooleanValue],
        'AttributeBooleanValue': Optional[EC2AttributeBooleanValue],
        'AttributeBooleanValue': Optional[EC2AttributeBooleanValue],
        'String': Optional[str],
        'AttributeValue': Optional[EC2AttributeValue],
        'AttributeValue': Optional[EC2AttributeValue],
        'AttributeValue': Optional[EC2AttributeValue],
        'ProductCodeList': Optional[List[EC2ProductCode]],
        'AttributeValue': Optional[EC2AttributeValue],
        'AttributeValue': Optional[EC2AttributeValue],
        'AttributeBooleanValue': Optional[EC2AttributeBooleanValue],
        'AttributeValue': Optional[EC2AttributeValue],
        'AttributeValue': Optional[EC2AttributeValue],
    }
)


EC2InstanceCreditSpecification = TypedDict(
    'EC2InstanceCreditSpecification', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2DescribeInstanceCreditSpecificationsResult = TypedDict(
    'EC2DescribeInstanceCreditSpecificationsResult', {
        'InstanceCreditSpecificationList': Optional[List[EC2InstanceCreditSpecification]],
        'String': Optional[str],
    }
)


EC2InstanceStatusEvent = TypedDict(
    'EC2InstanceStatusEvent', {
        'InstanceEventId': Optional[str],
        'EventCode': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
    }
)


EC2InstanceState = TypedDict(
    'EC2InstanceState', {
        'Integer': Optional[int],
        'InstanceStateName': Optional[str],
    }
)


EC2InstanceStatusDetails = TypedDict(
    'EC2InstanceStatusDetails', {
        'DateTime': Optional[datetime.datetime],
        'StatusName': Optional[str],
        'StatusType': Optional[str],
    }
)


EC2InstanceStatusSummary = TypedDict(
    'EC2InstanceStatusSummary', {
        'InstanceStatusDetailsList': Optional[List[EC2InstanceStatusDetails]],
        'SummaryStatus': Optional[str],
    }
)


EC2InstanceStatus = TypedDict(
    'EC2InstanceStatus', {
        'String': Optional[str],
        'InstanceStatusEventList': Optional[List[EC2InstanceStatusEvent]],
        'String': Optional[str],
        'InstanceState': Optional[EC2InstanceState],
        'InstanceStatusSummary': Optional[EC2InstanceStatusSummary],
        'InstanceStatusSummary': Optional[EC2InstanceStatusSummary],
    }
)


EC2DescribeInstanceStatusResult = TypedDict(
    'EC2DescribeInstanceStatusResult', {
        'InstanceStatusList': Optional[List[EC2InstanceStatus]],
        'String': Optional[str],
    }
)


EC2Monitoring = TypedDict(
    'EC2Monitoring', {
        'MonitoringState': Optional[str],
    }
)


EC2ElasticGpuAssociation = TypedDict(
    'EC2ElasticGpuAssociation', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2ElasticInferenceAcceleratorAssociation = TypedDict(
    'EC2ElasticInferenceAcceleratorAssociation', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
    }
)


EC2InstanceNetworkInterfaceAssociation = TypedDict(
    'EC2InstanceNetworkInterfaceAssociation', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2InstanceNetworkInterfaceAttachment = TypedDict(
    'EC2InstanceNetworkInterfaceAttachment', {
        'DateTime': Optional[datetime.datetime],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Integer': Optional[int],
        'AttachmentStatus': Optional[str],
    }
)


EC2InstancePrivateIpAddress = TypedDict(
    'EC2InstancePrivateIpAddress', {
        'InstanceNetworkInterfaceAssociation': Optional[EC2InstanceNetworkInterfaceAssociation],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2InstanceNetworkInterface = TypedDict(
    'EC2InstanceNetworkInterface', {
        'InstanceNetworkInterfaceAssociation': Optional[EC2InstanceNetworkInterfaceAssociation],
        'InstanceNetworkInterfaceAttachment': Optional[EC2InstanceNetworkInterfaceAttachment],
        'String': Optional[str],
        'GroupIdentifierList': Optional[List[EC2GroupIdentifier]],
        'InstanceIpv6AddressList': Optional[List[EC2InstanceIpv6Address]],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'InstancePrivateIpAddressList': Optional[List[EC2InstancePrivateIpAddress]],
        'Boolean': Optional[bool],
        'NetworkInterfaceStatus': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2CpuOptions = TypedDict(
    'EC2CpuOptions', {
        'Integer': Optional[int],
        'Integer': Optional[int],
    }
)


EC2CapacityReservationSpecificationResponse = TypedDict(
    'EC2CapacityReservationSpecificationResponse', {
        'CapacityReservationPreference': Optional[str],
        'CapacityReservationTargetResponse': Optional[EC2CapacityReservationTargetResponse],
    }
)


EC2HibernationOptions = TypedDict(
    'EC2HibernationOptions', {
        'Boolean': Optional[bool],
    }
)


EC2LicenseConfiguration = TypedDict(
    'EC2LicenseConfiguration', {
        'String': Optional[str],
    }
)


EC2Instance = TypedDict(
    'EC2Instance', {
        'Integer': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'InstanceType': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'Monitoring': Optional[EC2Monitoring],
        'Placement': Optional[EC2Placement],
        'PlatformValues': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'ProductCodeList': Optional[List[EC2ProductCode]],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'InstanceState': Optional[EC2InstanceState],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'ArchitectureValues': Optional[str],
        'InstanceBlockDeviceMappingList': Optional[List[EC2InstanceBlockDeviceMapping]],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'HypervisorType': Optional[str],
        'IamInstanceProfile': Optional[EC2IamInstanceProfile],
        'InstanceLifecycleType': Optional[str],
        'ElasticGpuAssociationList': Optional[List[EC2ElasticGpuAssociation]],
        'ElasticInferenceAcceleratorAssociationList': Optional[List[EC2ElasticInferenceAcceleratorAssociation]],
        'InstanceNetworkInterfaceList': Optional[List[EC2InstanceNetworkInterface]],
        'String': Optional[str],
        'DeviceType': Optional[str],
        'GroupIdentifierList': Optional[List[EC2GroupIdentifier]],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'StateReason': Optional[EC2StateReason],
        'TagList': Optional[List[EC2Tag]],
        'VirtualizationType': Optional[str],
        'CpuOptions': Optional[EC2CpuOptions],
        'String': Optional[str],
        'CapacityReservationSpecificationResponse': Optional[EC2CapacityReservationSpecificationResponse],
        'HibernationOptions': Optional[EC2HibernationOptions],
        'LicenseList': Optional[List[EC2LicenseConfiguration]],
    }
)


EC2Reservation = TypedDict(
    'EC2Reservation', {
        'GroupIdentifierList': Optional[List[EC2GroupIdentifier]],
        'InstanceList': Optional[List[EC2Instance]],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2DescribeInstancesResult = TypedDict(
    'EC2DescribeInstancesResult', {
        'ReservationList': Optional[List[EC2Reservation]],
        'String': Optional[str],
    }
)


EC2DescribeInternetGatewaysResult = TypedDict(
    'EC2DescribeInternetGatewaysResult', {
        'InternetGatewayList': Optional[List[EC2InternetGateway]],
        'String': Optional[str],
    }
)


EC2KeyPairInfo = TypedDict(
    'EC2KeyPairInfo', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2DescribeKeyPairsResult = TypedDict(
    'EC2DescribeKeyPairsResult', {
        'KeyPairList': Optional[List[EC2KeyPairInfo]],
    }
)


EC2DescribeLaunchTemplateVersionsResult = TypedDict(
    'EC2DescribeLaunchTemplateVersionsResult', {
        'LaunchTemplateVersionSet': Optional[List[EC2LaunchTemplateVersion]],
        'String': Optional[str],
    }
)


EC2DescribeLaunchTemplatesResult = TypedDict(
    'EC2DescribeLaunchTemplatesResult', {
        'LaunchTemplateSet': Optional[List[EC2LaunchTemplate]],
        'String': Optional[str],
    }
)


EC2MovingAddressStatus = TypedDict(
    'EC2MovingAddressStatus', {
        'MoveStatus': Optional[str],
        'String': Optional[str],
    }
)


EC2DescribeMovingAddressesResult = TypedDict(
    'EC2DescribeMovingAddressesResult', {
        'MovingAddressStatusSet': Optional[List[EC2MovingAddressStatus]],
        'String': Optional[str],
    }
)


EC2DescribeNatGatewaysResult = TypedDict(
    'EC2DescribeNatGatewaysResult', {
        'NatGatewayList': Optional[List[EC2NatGateway]],
        'String': Optional[str],
    }
)


EC2DescribeNetworkAclsResult = TypedDict(
    'EC2DescribeNetworkAclsResult', {
        'NetworkAclList': Optional[List[EC2NetworkAcl]],
        'String': Optional[str],
    }
)


EC2DescribeNetworkInterfaceAttributeResult = TypedDict(
    'EC2DescribeNetworkInterfaceAttributeResult', {
        'NetworkInterfaceAttachment': Optional[EC2NetworkInterfaceAttachment],
        'AttributeValue': Optional[EC2AttributeValue],
        'GroupIdentifierList': Optional[List[EC2GroupIdentifier]],
        'String': Optional[str],
        'AttributeBooleanValue': Optional[EC2AttributeBooleanValue],
    }
)


EC2DescribeNetworkInterfacePermissionsResult = TypedDict(
    'EC2DescribeNetworkInterfacePermissionsResult', {
        'NetworkInterfacePermissionList': Optional[List[EC2NetworkInterfacePermission]],
        'String': Optional[str],
    }
)


EC2DescribeNetworkInterfacesResult = TypedDict(
    'EC2DescribeNetworkInterfacesResult', {
        'NetworkInterfaceList': Optional[List[EC2NetworkInterface]],
        'String': Optional[str],
    }
)


EC2PlacementGroup = TypedDict(
    'EC2PlacementGroup', {
        'String': Optional[str],
        'PlacementGroupState': Optional[str],
        'PlacementStrategy': Optional[str],
        'Integer': Optional[int],
    }
)


EC2DescribePlacementGroupsResult = TypedDict(
    'EC2DescribePlacementGroupsResult', {
        'PlacementGroupList': Optional[List[EC2PlacementGroup]],
    }
)


EC2PrefixList = TypedDict(
    'EC2PrefixList', {
        'ValueStringList': Optional[List[str]],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2DescribePrefixListsResult = TypedDict(
    'EC2DescribePrefixListsResult', {
        'String': Optional[str],
        'PrefixListSet': Optional[List[EC2PrefixList]],
    }
)


EC2PrincipalIdFormat = TypedDict(
    'EC2PrincipalIdFormat', {
        'String': Optional[str],
        'IdFormatList': Optional[List[EC2IdFormat]],
    }
)


EC2DescribePrincipalIdFormatResult = TypedDict(
    'EC2DescribePrincipalIdFormatResult', {
        'PrincipalIdFormatList': Optional[List[EC2PrincipalIdFormat]],
        'String': Optional[str],
    }
)


EC2PublicIpv4PoolRange = TypedDict(
    'EC2PublicIpv4PoolRange', {
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'Integer': Optional[int],
    }
)


EC2PublicIpv4Pool = TypedDict(
    'EC2PublicIpv4Pool', {
        'String': Optional[str],
        'String': Optional[str],
        'PublicIpv4PoolRangeSet': Optional[List[EC2PublicIpv4PoolRange]],
        'Integer': Optional[int],
        'Integer': Optional[int],
    }
)


EC2DescribePublicIpv4PoolsResult = TypedDict(
    'EC2DescribePublicIpv4PoolsResult', {
        'PublicIpv4PoolSet': Optional[List[EC2PublicIpv4Pool]],
        'String': Optional[str],
    }
)


EC2Region = TypedDict(
    'EC2Region', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2DescribeRegionsResult = TypedDict(
    'EC2DescribeRegionsResult', {
        'RegionList': Optional[List[EC2Region]],
    }
)


EC2RecurringCharge = TypedDict(
    'EC2RecurringCharge', {
        'Double': Optional[float],
        'RecurringChargeFrequency': Optional[str],
    }
)


EC2ReservedInstances = TypedDict(
    'EC2ReservedInstances', {
        'String': Optional[str],
        'Long': Optional[int],
        'DateTime': Optional[datetime.datetime],
        'Float': Optional[float],
        'Integer': Optional[int],
        'InstanceType': Optional[str],
        'RIProductDescription': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'ReservedInstanceState': Optional[str],
        'Float': Optional[float],
        'CurrencyCodeValues': Optional[str],
        'Tenancy': Optional[str],
        'OfferingClassType': Optional[str],
        'OfferingTypeValues': Optional[str],
        'RecurringChargesList': Optional[List[EC2RecurringCharge]],
        'scope': Optional[str],
        'TagList': Optional[List[EC2Tag]],
    }
)


EC2DescribeReservedInstancesResult = TypedDict(
    'EC2DescribeReservedInstancesResult', {
        'ReservedInstancesList': Optional[List[EC2ReservedInstances]],
    }
)


EC2DescribeReservedInstancesListingsResult = TypedDict(
    'EC2DescribeReservedInstancesListingsResult', {
        'ReservedInstancesListingList': Optional[List[EC2ReservedInstancesListing]],
    }
)


EC2ReservedInstancesConfiguration = TypedDict(
    'EC2ReservedInstancesConfiguration', {
        'String': Optional[str],
        'Integer': Optional[int],
        'InstanceType': Optional[str],
        'String': Optional[str],
        'scope': Optional[str],
    }
)


EC2ReservedInstancesModificationResult = TypedDict(
    'EC2ReservedInstancesModificationResult', {
        'String': Optional[str],
        'ReservedInstancesConfiguration': Optional[EC2ReservedInstancesConfiguration],
    }
)


EC2ReservedInstancesId = TypedDict(
    'EC2ReservedInstancesId', {
        'String': Optional[str],
    }
)


EC2ReservedInstancesModification = TypedDict(
    'EC2ReservedInstancesModification', {
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
        'ReservedInstancesModificationResultList': Optional[List[EC2ReservedInstancesModificationResult]],
        'ReservedIntancesIds': Optional[List[EC2ReservedInstancesId]],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
    }
)


EC2DescribeReservedInstancesModificationsResult = TypedDict(
    'EC2DescribeReservedInstancesModificationsResult', {
        'String': Optional[str],
        'ReservedInstancesModificationList': Optional[List[EC2ReservedInstancesModification]],
    }
)


EC2PricingDetail = TypedDict(
    'EC2PricingDetail', {
        'Integer': Optional[int],
        'Double': Optional[float],
    }
)


EC2ReservedInstancesOffering = TypedDict(
    'EC2ReservedInstancesOffering', {
        'String': Optional[str],
        'Long': Optional[int],
        'Float': Optional[float],
        'InstanceType': Optional[str],
        'RIProductDescription': Optional[str],
        'String': Optional[str],
        'Float': Optional[float],
        'CurrencyCodeValues': Optional[str],
        'Tenancy': Optional[str],
        'Boolean': Optional[bool],
        'OfferingClassType': Optional[str],
        'OfferingTypeValues': Optional[str],
        'PricingDetailsList': Optional[List[EC2PricingDetail]],
        'RecurringChargesList': Optional[List[EC2RecurringCharge]],
        'scope': Optional[str],
    }
)


EC2DescribeReservedInstancesOfferingsResult = TypedDict(
    'EC2DescribeReservedInstancesOfferingsResult', {
        'ReservedInstancesOfferingList': Optional[List[EC2ReservedInstancesOffering]],
        'String': Optional[str],
    }
)


EC2DescribeRouteTablesResult = TypedDict(
    'EC2DescribeRouteTablesResult', {
        'RouteTableList': Optional[List[EC2RouteTable]],
        'String': Optional[str],
    }
)


EC2SlotDateTimeRangeRequest = TypedDict(
    'EC2SlotDateTimeRangeRequest', {
        'DateTime': datetime.datetime,
        'DateTime': datetime.datetime,
    }
)


EC2ScheduledInstanceRecurrenceRequest = TypedDict(
    'EC2ScheduledInstanceRecurrenceRequest', {
        'String': Optional[str],
        'Integer': Optional[int],
        'OccurrenceDayRequestSet': Optional[List[int]],
        'Boolean': Optional[bool],
        'String': Optional[str],
    }
)


EC2ScheduledInstanceRecurrence = TypedDict(
    'EC2ScheduledInstanceRecurrence', {
        'String': Optional[str],
        'Integer': Optional[int],
        'OccurrenceDaySet': Optional[List[int]],
        'Boolean': Optional[bool],
        'String': Optional[str],
    }
)


EC2ScheduledInstanceAvailability = TypedDict(
    'EC2ScheduledInstanceAvailability', {
        'String': Optional[str],
        'Integer': Optional[int],
        'DateTime': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'ScheduledInstanceRecurrence': Optional[EC2ScheduledInstanceRecurrence],
        'Integer': Optional[int],
        'Integer': Optional[int],
    }
)


EC2DescribeScheduledInstanceAvailabilityResult = TypedDict(
    'EC2DescribeScheduledInstanceAvailabilityResult', {
        'String': Optional[str],
        'ScheduledInstanceAvailabilitySet': Optional[List[EC2ScheduledInstanceAvailability]],
    }
)


EC2SlotStartTimeRangeRequest = TypedDict(
    'EC2SlotStartTimeRangeRequest', {
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
    }
)


EC2ScheduledInstance = TypedDict(
    'EC2ScheduledInstance', {
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'ScheduledInstanceRecurrence': Optional[EC2ScheduledInstanceRecurrence],
        'String': Optional[str],
        'Integer': Optional[int],
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
        'Integer': Optional[int],
    }
)


EC2DescribeScheduledInstancesResult = TypedDict(
    'EC2DescribeScheduledInstancesResult', {
        'String': Optional[str],
        'ScheduledInstanceSet': Optional[List[EC2ScheduledInstance]],
    }
)


EC2SecurityGroupReference = TypedDict(
    'EC2SecurityGroupReference', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2DescribeSecurityGroupReferencesResult = TypedDict(
    'EC2DescribeSecurityGroupReferencesResult', {
        'SecurityGroupReferences': Optional[List[EC2SecurityGroupReference]],
    }
)


EC2SecurityGroup = TypedDict(
    'EC2SecurityGroup', {
        'String': Optional[str],
        'String': Optional[str],
        'IpPermissionList': Optional[List[EC2IpPermission]],
        'String': Optional[str],
        'String': Optional[str],
        'IpPermissionList': Optional[List[EC2IpPermission]],
        'TagList': Optional[List[EC2Tag]],
        'String': Optional[str],
    }
)


EC2DescribeSecurityGroupsResult = TypedDict(
    'EC2DescribeSecurityGroupsResult', {
        'SecurityGroupList': Optional[List[EC2SecurityGroup]],
        'String': Optional[str],
    }
)


EC2CreateVolumePermission = TypedDict(
    'EC2CreateVolumePermission', {
        'PermissionGroup': Optional[str],
        'String': Optional[str],
    }
)


EC2DescribeSnapshotAttributeResult = TypedDict(
    'EC2DescribeSnapshotAttributeResult', {
        'CreateVolumePermissionList': Optional[List[EC2CreateVolumePermission]],
        'ProductCodeList': Optional[List[EC2ProductCode]],
        'String': Optional[str],
    }
)


EC2DescribeSnapshotsResult = TypedDict(
    'EC2DescribeSnapshotsResult', {
        'SnapshotList': Optional[List[EC2Snapshot]],
        'String': Optional[str],
    }
)


EC2DescribeSpotDatafeedSubscriptionResult = TypedDict(
    'EC2DescribeSpotDatafeedSubscriptionResult', {
        'SpotDatafeedSubscription': Optional[EC2SpotDatafeedSubscription],
    }
)


EC2DescribeSpotFleetInstancesResponse = TypedDict(
    'EC2DescribeSpotFleetInstancesResponse', {
        'ActiveInstanceSet': Optional[List[EC2ActiveInstance]],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2HistoryRecord = TypedDict(
    'EC2HistoryRecord', {
        'EventInformation': Optional[EC2EventInformation],
        'EventType': Optional[str],
        'DateTime': Optional[datetime.datetime],
    }
)


EC2DescribeSpotFleetRequestHistoryResponse = TypedDict(
    'EC2DescribeSpotFleetRequestHistoryResponse', {
        'HistoryRecords': Optional[List[EC2HistoryRecord]],
        'DateTime': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
    }
)


EC2SpotFleetMonitoring = TypedDict(
    'EC2SpotFleetMonitoring', {
        'Boolean': Optional[bool],
    }
)


EC2InstanceNetworkInterfaceSpecification = TypedDict(
    'EC2InstanceNetworkInterfaceSpecification', {
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'Integer': Optional[int],
        'SecurityGroupIdStringList': Optional[List[str]],
        'Integer': Optional[int],
        'InstanceIpv6AddressList': Optional[List[EC2InstanceIpv6Address]],
        'String': Optional[str],
        'String': Optional[str],
        'PrivateIpAddressSpecificationList': Optional[List[EC2PrivateIpAddressSpecification]],
        'Integer': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2SpotPlacement = TypedDict(
    'EC2SpotPlacement', {
        'String': Optional[str],
        'String': Optional[str],
        'Tenancy': Optional[str],
    }
)


EC2SpotFleetTagSpecification = TypedDict(
    'EC2SpotFleetTagSpecification', {
        'ResourceType': Optional[str],
        'TagList': Optional[List[EC2Tag]],
    }
)


EC2SpotFleetLaunchSpecification = TypedDict(
    'EC2SpotFleetLaunchSpecification', {
        'GroupIdentifierList': Optional[List[EC2GroupIdentifier]],
        'String': Optional[str],
        'BlockDeviceMappingList': Optional[List[EC2BlockDeviceMapping]],
        'Boolean': Optional[bool],
        'IamInstanceProfileSpecification': Optional[EC2IamInstanceProfileSpecification],
        'String': Optional[str],
        'InstanceType': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'SpotFleetMonitoring': Optional[EC2SpotFleetMonitoring],
        'InstanceNetworkInterfaceSpecificationList': Optional[List[EC2InstanceNetworkInterfaceSpecification]],
        'SpotPlacement': Optional[EC2SpotPlacement],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Double': Optional[float],
        'SpotFleetTagSpecificationList': Optional[List[EC2SpotFleetTagSpecification]],
    }
)


EC2LaunchTemplateOverrides = TypedDict(
    'EC2LaunchTemplateOverrides', {
        'InstanceType': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Double': Optional[float],
        'Double': Optional[float],
    }
)


EC2LaunchTemplateConfig = TypedDict(
    'EC2LaunchTemplateConfig', {
        'FleetLaunchTemplateSpecification': Optional[EC2FleetLaunchTemplateSpecification],
        'LaunchTemplateOverridesList': Optional[List[EC2LaunchTemplateOverrides]],
    }
)


EC2ClassicLoadBalancer = TypedDict(
    'EC2ClassicLoadBalancer', {
        'String': Optional[str],
    }
)


EC2ClassicLoadBalancersConfig = TypedDict(
    'EC2ClassicLoadBalancersConfig', {
        'ClassicLoadBalancers': Optional[List[EC2ClassicLoadBalancer]],
    }
)


EC2TargetGroup = TypedDict(
    'EC2TargetGroup', {
        'String': Optional[str],
    }
)


EC2TargetGroupsConfig = TypedDict(
    'EC2TargetGroupsConfig', {
        'TargetGroups': Optional[List[EC2TargetGroup]],
    }
)


EC2LoadBalancersConfig = TypedDict(
    'EC2LoadBalancersConfig', {
        'ClassicLoadBalancersConfig': Optional[EC2ClassicLoadBalancersConfig],
        'TargetGroupsConfig': Optional[EC2TargetGroupsConfig],
    }
)


EC2SpotFleetRequestConfigData = TypedDict(
    'EC2SpotFleetRequestConfigData', {
        'String': str,
        'Integer': int,
        'AllocationStrategy': Optional[str],
        'OnDemandAllocationStrategy': Optional[str],
        'String': Optional[str],
        'ExcessCapacityTerminationPolicy': Optional[str],
        'Double': Optional[float],
        'Double': Optional[float],
        'LaunchSpecsList': Optional[List[EC2SpotFleetLaunchSpecification]],
        'LaunchTemplateConfigList': Optional[List[EC2LaunchTemplateConfig]],
        'String': Optional[str],
        'Integer': Optional[int],
        'Boolean': Optional[bool],
        'FleetType': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
        'Boolean': Optional[bool],
        'InstanceInterruptionBehavior': Optional[str],
        'LoadBalancersConfig': Optional[EC2LoadBalancersConfig],
        'Integer': Optional[int],
    }
)


EC2SpotFleetRequestConfig = TypedDict(
    'EC2SpotFleetRequestConfig', {
        'ActivityStatus': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'SpotFleetRequestConfigData': Optional[EC2SpotFleetRequestConfigData],
        'String': Optional[str],
        'BatchState': Optional[str],
    }
)


EC2DescribeSpotFleetRequestsResponse = TypedDict(
    'EC2DescribeSpotFleetRequestsResponse', {
        'String': Optional[str],
        'SpotFleetRequestConfigSet': Optional[List[EC2SpotFleetRequestConfig]],
    }
)


EC2RunInstancesMonitoringEnabled = TypedDict(
    'EC2RunInstancesMonitoringEnabled', {
        'Boolean': bool,
    }
)


EC2LaunchSpecification = TypedDict(
    'EC2LaunchSpecification', {
        'String': Optional[str],
        'GroupIdentifierList': Optional[List[EC2GroupIdentifier]],
        'String': Optional[str],
        'BlockDeviceMappingList': Optional[List[EC2BlockDeviceMapping]],
        'Boolean': Optional[bool],
        'IamInstanceProfileSpecification': Optional[EC2IamInstanceProfileSpecification],
        'String': Optional[str],
        'InstanceType': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'InstanceNetworkInterfaceSpecificationList': Optional[List[EC2InstanceNetworkInterfaceSpecification]],
        'SpotPlacement': Optional[EC2SpotPlacement],
        'String': Optional[str],
        'String': Optional[str],
        'RunInstancesMonitoringEnabled': Optional[EC2RunInstancesMonitoringEnabled],
    }
)


EC2SpotInstanceStatus = TypedDict(
    'EC2SpotInstanceStatus', {
        'String': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
    }
)


EC2SpotInstanceRequest = TypedDict(
    'EC2SpotInstanceRequest', {
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'DateTime': Optional[datetime.datetime],
        'SpotInstanceStateFault': Optional[EC2SpotInstanceStateFault],
        'String': Optional[str],
        'String': Optional[str],
        'LaunchSpecification': Optional[EC2LaunchSpecification],
        'String': Optional[str],
        'RIProductDescription': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'SpotInstanceState': Optional[str],
        'SpotInstanceStatus': Optional[EC2SpotInstanceStatus],
        'TagList': Optional[List[EC2Tag]],
        'SpotInstanceType': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
        'InstanceInterruptionBehavior': Optional[str],
    }
)


EC2DescribeSpotInstanceRequestsResult = TypedDict(
    'EC2DescribeSpotInstanceRequestsResult', {
        'SpotInstanceRequestList': Optional[List[EC2SpotInstanceRequest]],
        'String': Optional[str],
    }
)


EC2SpotPrice = TypedDict(
    'EC2SpotPrice', {
        'String': Optional[str],
        'InstanceType': Optional[str],
        'RIProductDescription': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
    }
)


EC2DescribeSpotPriceHistoryResult = TypedDict(
    'EC2DescribeSpotPriceHistoryResult', {
        'String': Optional[str],
        'SpotPriceHistoryList': Optional[List[EC2SpotPrice]],
    }
)


EC2StaleIpPermission = TypedDict(
    'EC2StaleIpPermission', {
        'Integer': Optional[int],
        'String': Optional[str],
        'IpRanges': Optional[List[str]],
        'PrefixListIdSet': Optional[List[str]],
        'Integer': Optional[int],
        'UserIdGroupPairSet': Optional[List[EC2UserIdGroupPair]],
    }
)


EC2StaleSecurityGroup = TypedDict(
    'EC2StaleSecurityGroup', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'StaleIpPermissionSet': Optional[List[EC2StaleIpPermission]],
        'StaleIpPermissionSet': Optional[List[EC2StaleIpPermission]],
        'String': Optional[str],
    }
)


EC2DescribeStaleSecurityGroupsResult = TypedDict(
    'EC2DescribeStaleSecurityGroupsResult', {
        'String': Optional[str],
        'StaleSecurityGroupSet': Optional[List[EC2StaleSecurityGroup]],
    }
)


EC2DescribeSubnetsResult = TypedDict(
    'EC2DescribeSubnetsResult', {
        'SubnetList': Optional[List[EC2Subnet]],
    }
)


EC2TagDescription = TypedDict(
    'EC2TagDescription', {
        'String': Optional[str],
        'String': Optional[str],
        'ResourceType': Optional[str],
        'String': Optional[str],
    }
)


EC2DescribeTagsResult = TypedDict(
    'EC2DescribeTagsResult', {
        'String': Optional[str],
        'TagDescriptionList': Optional[List[EC2TagDescription]],
    }
)


EC2TransitGatewayAttachmentAssociation = TypedDict(
    'EC2TransitGatewayAttachmentAssociation', {
        'String': Optional[str],
        'TransitGatewayAssociationState': Optional[str],
    }
)


EC2TransitGatewayAttachment = TypedDict(
    'EC2TransitGatewayAttachment', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'TransitGatewayAttachmentResourceType': Optional[str],
        'String': Optional[str],
        'TransitGatewayAttachmentState': Optional[str],
        'TransitGatewayAttachmentAssociation': Optional[EC2TransitGatewayAttachmentAssociation],
        'DateTime': Optional[datetime.datetime],
        'TagList': Optional[List[EC2Tag]],
    }
)


EC2DescribeTransitGatewayAttachmentsResult = TypedDict(
    'EC2DescribeTransitGatewayAttachmentsResult', {
        'TransitGatewayAttachmentList': Optional[List[EC2TransitGatewayAttachment]],
        'String': Optional[str],
    }
)


EC2DescribeTransitGatewayRouteTablesResult = TypedDict(
    'EC2DescribeTransitGatewayRouteTablesResult', {
        'TransitGatewayRouteTableList': Optional[List[EC2TransitGatewayRouteTable]],
        'String': Optional[str],
    }
)


EC2DescribeTransitGatewayVpcAttachmentsResult = TypedDict(
    'EC2DescribeTransitGatewayVpcAttachmentsResult', {
        'TransitGatewayVpcAttachmentList': Optional[List[EC2TransitGatewayVpcAttachment]],
        'String': Optional[str],
    }
)


EC2DescribeTransitGatewaysResult = TypedDict(
    'EC2DescribeTransitGatewaysResult', {
        'TransitGatewayList': Optional[List[EC2TransitGateway]],
        'String': Optional[str],
    }
)


EC2DescribeVolumeAttributeResult = TypedDict(
    'EC2DescribeVolumeAttributeResult', {
        'AttributeBooleanValue': Optional[EC2AttributeBooleanValue],
        'ProductCodeList': Optional[List[EC2ProductCode]],
        'String': Optional[str],
    }
)


EC2VolumeStatusAction = TypedDict(
    'EC2VolumeStatusAction', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2VolumeStatusEvent = TypedDict(
    'EC2VolumeStatusEvent', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
    }
)


EC2VolumeStatusDetails = TypedDict(
    'EC2VolumeStatusDetails', {
        'VolumeStatusName': Optional[str],
        'String': Optional[str],
    }
)


EC2VolumeStatusInfo = TypedDict(
    'EC2VolumeStatusInfo', {
        'VolumeStatusDetailsList': Optional[List[EC2VolumeStatusDetails]],
        'VolumeStatusInfoStatus': Optional[str],
    }
)


EC2VolumeStatusItem = TypedDict(
    'EC2VolumeStatusItem', {
        'VolumeStatusActionsList': Optional[List[EC2VolumeStatusAction]],
        'String': Optional[str],
        'VolumeStatusEventsList': Optional[List[EC2VolumeStatusEvent]],
        'String': Optional[str],
        'VolumeStatusInfo': Optional[EC2VolumeStatusInfo],
    }
)


EC2DescribeVolumeStatusResult = TypedDict(
    'EC2DescribeVolumeStatusResult', {
        'String': Optional[str],
        'VolumeStatusList': Optional[List[EC2VolumeStatusItem]],
    }
)


EC2DescribeVolumesResult = TypedDict(
    'EC2DescribeVolumesResult', {
        'VolumeList': Optional[List[EC2Volume]],
        'String': Optional[str],
    }
)


EC2VolumeModification = TypedDict(
    'EC2VolumeModification', {
        'String': Optional[str],
        'VolumeModificationState': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'VolumeType': Optional[str],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'VolumeType': Optional[str],
        'Long': Optional[int],
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
    }
)


EC2DescribeVolumesModificationsResult = TypedDict(
    'EC2DescribeVolumesModificationsResult', {
        'VolumeModificationList': Optional[List[EC2VolumeModification]],
        'String': Optional[str],
    }
)


EC2DescribeVpcAttributeResult = TypedDict(
    'EC2DescribeVpcAttributeResult', {
        'String': Optional[str],
        'AttributeBooleanValue': Optional[EC2AttributeBooleanValue],
        'AttributeBooleanValue': Optional[EC2AttributeBooleanValue],
    }
)


EC2VpcClassicLink = TypedDict(
    'EC2VpcClassicLink', {
        'Boolean': Optional[bool],
        'TagList': Optional[List[EC2Tag]],
        'String': Optional[str],
    }
)


EC2DescribeVpcClassicLinkResult = TypedDict(
    'EC2DescribeVpcClassicLinkResult', {
        'VpcClassicLinkList': Optional[List[EC2VpcClassicLink]],
    }
)


EC2ClassicLinkDnsSupport = TypedDict(
    'EC2ClassicLinkDnsSupport', {
        'Boolean': Optional[bool],
        'String': Optional[str],
    }
)


EC2DescribeVpcClassicLinkDnsSupportResult = TypedDict(
    'EC2DescribeVpcClassicLinkDnsSupportResult', {
        'NextToken': Optional[str],
        'ClassicLinkDnsSupportList': Optional[List[EC2ClassicLinkDnsSupport]],
    }
)


EC2DescribeVpcEndpointConnectionNotificationsResult = TypedDict(
    'EC2DescribeVpcEndpointConnectionNotificationsResult', {
        'ConnectionNotificationSet': Optional[List[EC2ConnectionNotification]],
        'String': Optional[str],
    }
)


EC2VpcEndpointConnection = TypedDict(
    'EC2VpcEndpointConnection', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'State': Optional[str],
        'MillisecondDateTime': Optional[datetime.datetime],
    }
)


EC2DescribeVpcEndpointConnectionsResult = TypedDict(
    'EC2DescribeVpcEndpointConnectionsResult', {
        'VpcEndpointConnectionSet': Optional[List[EC2VpcEndpointConnection]],
        'String': Optional[str],
    }
)


EC2DescribeVpcEndpointServiceConfigurationsResult = TypedDict(
    'EC2DescribeVpcEndpointServiceConfigurationsResult', {
        'ServiceConfigurationSet': Optional[List[EC2ServiceConfiguration]],
        'String': Optional[str],
    }
)


EC2AllowedPrincipal = TypedDict(
    'EC2AllowedPrincipal', {
        'PrincipalType': Optional[str],
        'String': Optional[str],
    }
)


EC2DescribeVpcEndpointServicePermissionsResult = TypedDict(
    'EC2DescribeVpcEndpointServicePermissionsResult', {
        'AllowedPrincipalSet': Optional[List[EC2AllowedPrincipal]],
        'String': Optional[str],
    }
)


EC2ServiceDetail = TypedDict(
    'EC2ServiceDetail', {
        'String': Optional[str],
        'ServiceTypeDetailSet': Optional[List[EC2ServiceTypeDetail]],
        'ValueStringList': Optional[List[str]],
        'String': Optional[str],
        'ValueStringList': Optional[List[str]],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
    }
)


EC2DescribeVpcEndpointServicesResult = TypedDict(
    'EC2DescribeVpcEndpointServicesResult', {
        'ValueStringList': Optional[List[str]],
        'ServiceDetailSet': Optional[List[EC2ServiceDetail]],
        'String': Optional[str],
    }
)


EC2DescribeVpcEndpointsResult = TypedDict(
    'EC2DescribeVpcEndpointsResult', {
        'VpcEndpointSet': Optional[List[EC2VpcEndpoint]],
        'String': Optional[str],
    }
)


EC2DescribeVpcPeeringConnectionsResult = TypedDict(
    'EC2DescribeVpcPeeringConnectionsResult', {
        'VpcPeeringConnectionList': Optional[List[EC2VpcPeeringConnection]],
        'String': Optional[str],
    }
)


EC2DescribeVpcsResult = TypedDict(
    'EC2DescribeVpcsResult', {
        'VpcList': Optional[List[EC2Vpc]],
        'String': Optional[str],
    }
)


EC2DescribeVpnConnectionsResult = TypedDict(
    'EC2DescribeVpnConnectionsResult', {
        'VpnConnectionList': Optional[List[EC2VpnConnection]],
    }
)


EC2DescribeVpnGatewaysResult = TypedDict(
    'EC2DescribeVpnGatewaysResult', {
        'VpnGatewayList': Optional[List[EC2VpnGateway]],
    }
)


EC2DetachClassicLinkVpcResult = TypedDict(
    'EC2DetachClassicLinkVpcResult', {
        'Boolean': Optional[bool],
    }
)


EC2TransitGatewayPropagation = TypedDict(
    'EC2TransitGatewayPropagation', {
        'String': Optional[str],
        'String': Optional[str],
        'TransitGatewayAttachmentResourceType': Optional[str],
        'String': Optional[str],
        'TransitGatewayPropagationState': Optional[str],
    }
)


EC2DisableTransitGatewayRouteTablePropagationResult = TypedDict(
    'EC2DisableTransitGatewayRouteTablePropagationResult', {
        'TransitGatewayPropagation': Optional[EC2TransitGatewayPropagation],
    }
)


EC2DisableVpcClassicLinkResult = TypedDict(
    'EC2DisableVpcClassicLinkResult', {
        'Boolean': Optional[bool],
    }
)


EC2DisableVpcClassicLinkDnsSupportResult = TypedDict(
    'EC2DisableVpcClassicLinkDnsSupportResult', {
        'Boolean': Optional[bool],
    }
)


EC2DisassociateClientVpnTargetNetworkResult = TypedDict(
    'EC2DisassociateClientVpnTargetNetworkResult', {
        'String': Optional[str],
        'AssociationStatus': Optional[EC2AssociationStatus],
    }
)


EC2DisassociateIamInstanceProfileResult = TypedDict(
    'EC2DisassociateIamInstanceProfileResult', {
        'IamInstanceProfileAssociation': Optional[EC2IamInstanceProfileAssociation],
    }
)


EC2DisassociateSubnetCidrBlockResult = TypedDict(
    'EC2DisassociateSubnetCidrBlockResult', {
        'SubnetIpv6CidrBlockAssociation': Optional[EC2SubnetIpv6CidrBlockAssociation],
        'String': Optional[str],
    }
)


EC2DisassociateTransitGatewayRouteTableResult = TypedDict(
    'EC2DisassociateTransitGatewayRouteTableResult', {
        'TransitGatewayAssociation': Optional[EC2TransitGatewayAssociation],
    }
)


EC2DisassociateVpcCidrBlockResult = TypedDict(
    'EC2DisassociateVpcCidrBlockResult', {
        'VpcIpv6CidrBlockAssociation': Optional[EC2VpcIpv6CidrBlockAssociation],
        'VpcCidrBlockAssociation': Optional[EC2VpcCidrBlockAssociation],
        'String': Optional[str],
    }
)


EC2EnableTransitGatewayRouteTablePropagationResult = TypedDict(
    'EC2EnableTransitGatewayRouteTablePropagationResult', {
        'TransitGatewayPropagation': Optional[EC2TransitGatewayPropagation],
    }
)


EC2EnableVpcClassicLinkResult = TypedDict(
    'EC2EnableVpcClassicLinkResult', {
        'Boolean': Optional[bool],
    }
)


EC2EnableVpcClassicLinkDnsSupportResult = TypedDict(
    'EC2EnableVpcClassicLinkDnsSupportResult', {
        'Boolean': Optional[bool],
    }
)


EC2ClientCertificateRevocationListStatus = TypedDict(
    'EC2ClientCertificateRevocationListStatus', {
        'ClientCertificateRevocationListStatusCode': Optional[str],
        'String': Optional[str],
    }
)


EC2ExportClientVpnClientCertificateRevocationListResult = TypedDict(
    'EC2ExportClientVpnClientCertificateRevocationListResult', {
        'String': Optional[str],
        'ClientCertificateRevocationListStatus': Optional[EC2ClientCertificateRevocationListStatus],
    }
)


EC2ExportClientVpnClientConfigurationResult = TypedDict(
    'EC2ExportClientVpnClientConfigurationResult', {
        'String': Optional[str],
    }
)


EC2ExportTransitGatewayRoutesResult = TypedDict(
    'EC2ExportTransitGatewayRoutesResult', {
        'String': Optional[str],
    }
)


EC2GetConsoleOutputResult = TypedDict(
    'EC2GetConsoleOutputResult', {
        'String': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
    }
)


EC2GetConsoleScreenshotResult = TypedDict(
    'EC2GetConsoleScreenshotResult', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2Purchase = TypedDict(
    'EC2Purchase', {
        'CurrencyCodeValues': Optional[str],
        'Integer': Optional[int],
        'ResponseHostIdSet': Optional[List[str]],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'PaymentOption': Optional[str],
        'String': Optional[str],
    }
)


EC2GetHostReservationPurchasePreviewResult = TypedDict(
    'EC2GetHostReservationPurchasePreviewResult', {
        'CurrencyCodeValues': Optional[str],
        'PurchaseSet': Optional[List[EC2Purchase]],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2GetLaunchTemplateDataResult = TypedDict(
    'EC2GetLaunchTemplateDataResult', {
        'ResponseLaunchTemplateData': Optional[EC2ResponseLaunchTemplateData],
    }
)


EC2GetPasswordDataResult = TypedDict(
    'EC2GetPasswordDataResult', {
        'String': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
    }
)


EC2ReservationValue = TypedDict(
    'EC2ReservationValue', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2ReservedInstanceReservationValue = TypedDict(
    'EC2ReservedInstanceReservationValue', {
        'ReservationValue': Optional[EC2ReservationValue],
        'String': Optional[str],
    }
)


EC2TargetConfiguration = TypedDict(
    'EC2TargetConfiguration', {
        'Integer': Optional[int],
        'String': Optional[str],
    }
)


EC2TargetReservationValue = TypedDict(
    'EC2TargetReservationValue', {
        'ReservationValue': Optional[EC2ReservationValue],
        'TargetConfiguration': Optional[EC2TargetConfiguration],
    }
)


EC2GetReservedInstancesExchangeQuoteResult = TypedDict(
    'EC2GetReservedInstancesExchangeQuoteResult', {
        'String': Optional[str],
        'Boolean': Optional[bool],
        'DateTime': Optional[datetime.datetime],
        'String': Optional[str],
        'ReservationValue': Optional[EC2ReservationValue],
        'ReservedInstanceReservationValueSet': Optional[List[EC2ReservedInstanceReservationValue]],
        'ReservationValue': Optional[EC2ReservationValue],
        'TargetReservationValueSet': Optional[List[EC2TargetReservationValue]],
        'String': Optional[str],
    }
)


EC2TransitGatewayAttachmentPropagation = TypedDict(
    'EC2TransitGatewayAttachmentPropagation', {
        'String': Optional[str],
        'TransitGatewayPropagationState': Optional[str],
    }
)


EC2GetTransitGatewayAttachmentPropagationsResult = TypedDict(
    'EC2GetTransitGatewayAttachmentPropagationsResult', {
        'TransitGatewayAttachmentPropagationList': Optional[List[EC2TransitGatewayAttachmentPropagation]],
        'String': Optional[str],
    }
)


EC2TransitGatewayRouteTableAssociation = TypedDict(
    'EC2TransitGatewayRouteTableAssociation', {
        'String': Optional[str],
        'String': Optional[str],
        'TransitGatewayAttachmentResourceType': Optional[str],
        'TransitGatewayAssociationState': Optional[str],
    }
)


EC2GetTransitGatewayRouteTableAssociationsResult = TypedDict(
    'EC2GetTransitGatewayRouteTableAssociationsResult', {
        'TransitGatewayRouteTableAssociationList': Optional[List[EC2TransitGatewayRouteTableAssociation]],
        'String': Optional[str],
    }
)


EC2TransitGatewayRouteTablePropagation = TypedDict(
    'EC2TransitGatewayRouteTablePropagation', {
        'String': Optional[str],
        'String': Optional[str],
        'TransitGatewayAttachmentResourceType': Optional[str],
        'TransitGatewayPropagationState': Optional[str],
    }
)


EC2GetTransitGatewayRouteTablePropagationsResult = TypedDict(
    'EC2GetTransitGatewayRouteTablePropagationsResult', {
        'TransitGatewayRouteTablePropagationList': Optional[List[EC2TransitGatewayRouteTablePropagation]],
        'String': Optional[str],
    }
)


EC2ImportClientVpnClientCertificateRevocationListResult = TypedDict(
    'EC2ImportClientVpnClientCertificateRevocationListResult', {
        'Boolean': Optional[bool],
    }
)


EC2ClientData = TypedDict(
    'EC2ClientData', {
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'Double': Optional[float],
        'DateTime': Optional[datetime.datetime],
    }
)


EC2UserBucket = TypedDict(
    'EC2UserBucket', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2ImageDiskContainer = TypedDict(
    'EC2ImageDiskContainer', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'UserBucket': Optional[EC2UserBucket],
    }
)


EC2ImportImageResult = TypedDict(
    'EC2ImportImageResult', {
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'SnapshotDetailList': Optional[List[EC2SnapshotDetail]],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2DiskImageDetail = TypedDict(
    'EC2DiskImageDetail', {
        'Long': int,
        'DiskImageFormat': str,
        'String': str,
    }
)


EC2VolumeDetail = TypedDict(
    'EC2VolumeDetail', {
        'Long': int,
    }
)


EC2DiskImage = TypedDict(
    'EC2DiskImage', {
        'String': Optional[str],
        'DiskImageDetail': Optional[EC2DiskImageDetail],
        'VolumeDetail': Optional[EC2VolumeDetail],
    }
)


EC2UserData = TypedDict(
    'EC2UserData', {
        'String': Optional[str],
    }
)


EC2ImportInstanceLaunchSpecification = TypedDict(
    'EC2ImportInstanceLaunchSpecification', {
        'String': Optional[str],
        'ArchitectureValues': Optional[str],
        'SecurityGroupIdStringList': Optional[List[str]],
        'SecurityGroupStringList': Optional[List[str]],
        'ShutdownBehavior': Optional[str],
        'InstanceType': Optional[str],
        'Boolean': Optional[bool],
        'Placement': Optional[EC2Placement],
        'String': Optional[str],
        'String': Optional[str],
        'UserData': Optional[EC2UserData],
    }
)


EC2ImportInstanceResult = TypedDict(
    'EC2ImportInstanceResult', {
        'ConversionTask': Optional[EC2ConversionTask],
    }
)


EC2ImportKeyPairResult = TypedDict(
    'EC2ImportKeyPairResult', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2SnapshotDiskContainer = TypedDict(
    'EC2SnapshotDiskContainer', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'UserBucket': Optional[EC2UserBucket],
    }
)


EC2ImportSnapshotResult = TypedDict(
    'EC2ImportSnapshotResult', {
        'String': Optional[str],
        'String': Optional[str],
        'SnapshotTaskDetail': Optional[EC2SnapshotTaskDetail],
    }
)


EC2ImportVolumeResult = TypedDict(
    'EC2ImportVolumeResult', {
        'ConversionTask': Optional[EC2ConversionTask],
    }
)


EC2ModifyCapacityReservationResult = TypedDict(
    'EC2ModifyCapacityReservationResult', {
        'Boolean': Optional[bool],
    }
)


EC2DnsServersOptionsModifyStructure = TypedDict(
    'EC2DnsServersOptionsModifyStructure', {
        'ValueStringList': Optional[List[str]],
        'Boolean': Optional[bool],
    }
)


EC2ModifyClientVpnEndpointResult = TypedDict(
    'EC2ModifyClientVpnEndpointResult', {
        'Boolean': Optional[bool],
    }
)


EC2ModifyFleetResult = TypedDict(
    'EC2ModifyFleetResult', {
        'Boolean': Optional[bool],
    }
)


EC2LoadPermissionRequest = TypedDict(
    'EC2LoadPermissionRequest', {
        'PermissionGroup': Optional[str],
        'String': Optional[str],
    }
)


EC2LoadPermissionModifications = TypedDict(
    'EC2LoadPermissionModifications', {
        'LoadPermissionListRequest': Optional[List[EC2LoadPermissionRequest]],
        'LoadPermissionListRequest': Optional[List[EC2LoadPermissionRequest]],
    }
)


EC2ModifyFpgaImageAttributeResult = TypedDict(
    'EC2ModifyFpgaImageAttributeResult', {
        'FpgaImageAttribute': Optional[EC2FpgaImageAttribute],
    }
)


EC2ModifyHostsResult = TypedDict(
    'EC2ModifyHostsResult', {
        'ResponseHostIdList': Optional[List[str]],
        'UnsuccessfulItemList': Optional[List[EC2UnsuccessfulItem]],
    }
)


EC2LaunchPermissionModifications = TypedDict(
    'EC2LaunchPermissionModifications', {
        'LaunchPermissionList': Optional[List[EC2LaunchPermission]],
        'LaunchPermissionList': Optional[List[EC2LaunchPermission]],
    }
)


EC2EbsInstanceBlockDeviceSpecification = TypedDict(
    'EC2EbsInstanceBlockDeviceSpecification', {
        'Boolean': Optional[bool],
        'String': Optional[str],
    }
)


EC2InstanceBlockDeviceMappingSpecification = TypedDict(
    'EC2InstanceBlockDeviceMappingSpecification', {
        'String': Optional[str],
        'EbsInstanceBlockDeviceSpecification': Optional[EC2EbsInstanceBlockDeviceSpecification],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2BlobAttributeValue = TypedDict(
    'EC2BlobAttributeValue', {
        'Blob': Optional[bytes],
    }
)


EC2CapacityReservationSpecification = TypedDict(
    'EC2CapacityReservationSpecification', {
        'CapacityReservationPreference': Optional[str],
        'CapacityReservationTarget': Optional[EC2CapacityReservationTarget],
    }
)


EC2ModifyInstanceCapacityReservationAttributesResult = TypedDict(
    'EC2ModifyInstanceCapacityReservationAttributesResult', {
        'Boolean': Optional[bool],
    }
)


EC2InstanceCreditSpecificationRequest = TypedDict(
    'EC2InstanceCreditSpecificationRequest', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2SuccessfulInstanceCreditSpecificationItem = TypedDict(
    'EC2SuccessfulInstanceCreditSpecificationItem', {
        'String': Optional[str],
    }
)


EC2UnsuccessfulInstanceCreditSpecificationItemError = TypedDict(
    'EC2UnsuccessfulInstanceCreditSpecificationItemError', {
        'UnsuccessfulInstanceCreditSpecificationErrorCode': Optional[str],
        'String': Optional[str],
    }
)


EC2UnsuccessfulInstanceCreditSpecificationItem = TypedDict(
    'EC2UnsuccessfulInstanceCreditSpecificationItem', {
        'String': Optional[str],
        'UnsuccessfulInstanceCreditSpecificationItemError': Optional[EC2UnsuccessfulInstanceCreditSpecificationItemError],
    }
)


EC2ModifyInstanceCreditSpecificationResult = TypedDict(
    'EC2ModifyInstanceCreditSpecificationResult', {
        'SuccessfulInstanceCreditSpecificationSet': Optional[List[EC2SuccessfulInstanceCreditSpecificationItem]],
        'UnsuccessfulInstanceCreditSpecificationSet': Optional[List[EC2UnsuccessfulInstanceCreditSpecificationItem]],
    }
)


EC2ModifyInstanceEventStartTimeResult = TypedDict(
    'EC2ModifyInstanceEventStartTimeResult', {
        'InstanceStatusEvent': Optional[EC2InstanceStatusEvent],
    }
)


EC2ModifyInstancePlacementResult = TypedDict(
    'EC2ModifyInstancePlacementResult', {
        'Boolean': Optional[bool],
    }
)


EC2ModifyLaunchTemplateResult = TypedDict(
    'EC2ModifyLaunchTemplateResult', {
        'LaunchTemplate': Optional[EC2LaunchTemplate],
    }
)


EC2NetworkInterfaceAttachmentChanges = TypedDict(
    'EC2NetworkInterfaceAttachmentChanges', {
        'String': Optional[str],
        'Boolean': Optional[bool],
    }
)


EC2ModifyReservedInstancesResult = TypedDict(
    'EC2ModifyReservedInstancesResult', {
        'String': Optional[str],
    }
)


EC2CreateVolumePermissionModifications = TypedDict(
    'EC2CreateVolumePermissionModifications', {
        'CreateVolumePermissionList': Optional[List[EC2CreateVolumePermission]],
        'CreateVolumePermissionList': Optional[List[EC2CreateVolumePermission]],
    }
)


EC2ModifySpotFleetRequestResponse = TypedDict(
    'EC2ModifySpotFleetRequestResponse', {
        'Boolean': Optional[bool],
    }
)


EC2ModifyTransitGatewayVpcAttachmentRequestOptions = TypedDict(
    'EC2ModifyTransitGatewayVpcAttachmentRequestOptions', {
        'DnsSupportValue': Optional[str],
        'Ipv6SupportValue': Optional[str],
    }
)


EC2ModifyTransitGatewayVpcAttachmentResult = TypedDict(
    'EC2ModifyTransitGatewayVpcAttachmentResult', {
        'TransitGatewayVpcAttachment': Optional[EC2TransitGatewayVpcAttachment],
    }
)


EC2ModifyVolumeResult = TypedDict(
    'EC2ModifyVolumeResult', {
        'VolumeModification': Optional[EC2VolumeModification],
    }
)


EC2ModifyVpcEndpointResult = TypedDict(
    'EC2ModifyVpcEndpointResult', {
        'Boolean': Optional[bool],
    }
)


EC2ModifyVpcEndpointConnectionNotificationResult = TypedDict(
    'EC2ModifyVpcEndpointConnectionNotificationResult', {
        'Boolean': Optional[bool],
    }
)


EC2ModifyVpcEndpointServiceConfigurationResult = TypedDict(
    'EC2ModifyVpcEndpointServiceConfigurationResult', {
        'Boolean': Optional[bool],
    }
)


EC2ModifyVpcEndpointServicePermissionsResult = TypedDict(
    'EC2ModifyVpcEndpointServicePermissionsResult', {
        'Boolean': Optional[bool],
    }
)


EC2PeeringConnectionOptionsRequest = TypedDict(
    'EC2PeeringConnectionOptionsRequest', {
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
    }
)


EC2PeeringConnectionOptions = TypedDict(
    'EC2PeeringConnectionOptions', {
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
    }
)


EC2ModifyVpcPeeringConnectionOptionsResult = TypedDict(
    'EC2ModifyVpcPeeringConnectionOptionsResult', {
        'PeeringConnectionOptions': Optional[EC2PeeringConnectionOptions],
        'PeeringConnectionOptions': Optional[EC2PeeringConnectionOptions],
    }
)


EC2ModifyVpcTenancyResult = TypedDict(
    'EC2ModifyVpcTenancyResult', {
        'Boolean': Optional[bool],
    }
)


EC2ModifyVpnConnectionResult = TypedDict(
    'EC2ModifyVpnConnectionResult', {
        'VpnConnection': Optional[EC2VpnConnection],
    }
)


EC2InstanceMonitoring = TypedDict(
    'EC2InstanceMonitoring', {
        'String': Optional[str],
        'Monitoring': Optional[EC2Monitoring],
    }
)


EC2MonitorInstancesResult = TypedDict(
    'EC2MonitorInstancesResult', {
        'InstanceMonitoringList': Optional[List[EC2InstanceMonitoring]],
    }
)


EC2MoveAddressToVpcResult = TypedDict(
    'EC2MoveAddressToVpcResult', {
        'String': Optional[str],
        'Status': Optional[str],
    }
)


EC2CidrAuthorizationContext = TypedDict(
    'EC2CidrAuthorizationContext', {
        'String': str,
        'String': str,
    }
)


EC2ProvisionByoipCidrResult = TypedDict(
    'EC2ProvisionByoipCidrResult', {
        'ByoipCidr': Optional[EC2ByoipCidr],
    }
)


EC2PurchaseHostReservationResult = TypedDict(
    'EC2PurchaseHostReservationResult', {
        'String': Optional[str],
        'CurrencyCodeValues': Optional[str],
        'PurchaseSet': Optional[List[EC2Purchase]],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2ReservedInstanceLimitPrice = TypedDict(
    'EC2ReservedInstanceLimitPrice', {
        'Double': Optional[float],
        'CurrencyCodeValues': Optional[str],
    }
)


EC2PurchaseReservedInstancesOfferingResult = TypedDict(
    'EC2PurchaseReservedInstancesOfferingResult', {
        'String': Optional[str],
    }
)


EC2PurchaseRequest = TypedDict(
    'EC2PurchaseRequest', {
        'Integer': int,
        'String': str,
    }
)


EC2PurchaseScheduledInstancesResult = TypedDict(
    'EC2PurchaseScheduledInstancesResult', {
        'PurchasedScheduledInstanceSet': Optional[List[EC2ScheduledInstance]],
    }
)


EC2RegisterImageResult = TypedDict(
    'EC2RegisterImageResult', {
        'String': Optional[str],
    }
)


EC2RejectTransitGatewayVpcAttachmentResult = TypedDict(
    'EC2RejectTransitGatewayVpcAttachmentResult', {
        'TransitGatewayVpcAttachment': Optional[EC2TransitGatewayVpcAttachment],
    }
)


EC2RejectVpcEndpointConnectionsResult = TypedDict(
    'EC2RejectVpcEndpointConnectionsResult', {
        'UnsuccessfulItemSet': Optional[List[EC2UnsuccessfulItem]],
    }
)


EC2RejectVpcPeeringConnectionResult = TypedDict(
    'EC2RejectVpcPeeringConnectionResult', {
        'Boolean': Optional[bool],
    }
)


EC2ReleaseHostsResult = TypedDict(
    'EC2ReleaseHostsResult', {
        'ResponseHostIdList': Optional[List[str]],
        'UnsuccessfulItemList': Optional[List[EC2UnsuccessfulItem]],
    }
)


EC2ReplaceIamInstanceProfileAssociationResult = TypedDict(
    'EC2ReplaceIamInstanceProfileAssociationResult', {
        'IamInstanceProfileAssociation': Optional[EC2IamInstanceProfileAssociation],
    }
)


EC2ReplaceNetworkAclAssociationResult = TypedDict(
    'EC2ReplaceNetworkAclAssociationResult', {
        'String': Optional[str],
    }
)


EC2ReplaceRouteTableAssociationResult = TypedDict(
    'EC2ReplaceRouteTableAssociationResult', {
        'String': Optional[str],
    }
)


EC2ReplaceTransitGatewayRouteResult = TypedDict(
    'EC2ReplaceTransitGatewayRouteResult', {
        'TransitGatewayRoute': Optional[EC2TransitGatewayRoute],
    }
)


EC2RequestSpotFleetResponse = TypedDict(
    'EC2RequestSpotFleetResponse', {
        'String': Optional[str],
    }
)


EC2RequestSpotLaunchSpecification = TypedDict(
    'EC2RequestSpotLaunchSpecification', {
        'ValueStringList': Optional[List[str]],
        'ValueStringList': Optional[List[str]],
        'String': Optional[str],
        'BlockDeviceMappingList': Optional[List[EC2BlockDeviceMapping]],
        'Boolean': Optional[bool],
        'IamInstanceProfileSpecification': Optional[EC2IamInstanceProfileSpecification],
        'String': Optional[str],
        'InstanceType': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'RunInstancesMonitoringEnabled': Optional[EC2RunInstancesMonitoringEnabled],
        'InstanceNetworkInterfaceSpecificationList': Optional[List[EC2InstanceNetworkInterfaceSpecification]],
        'SpotPlacement': Optional[EC2SpotPlacement],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2RequestSpotInstancesResult = TypedDict(
    'EC2RequestSpotInstancesResult', {
        'SpotInstanceRequestList': Optional[List[EC2SpotInstanceRequest]],
    }
)


EC2ResetFpgaImageAttributeResult = TypedDict(
    'EC2ResetFpgaImageAttributeResult', {
        'Boolean': Optional[bool],
    }
)


EC2RestoreAddressToClassicResult = TypedDict(
    'EC2RestoreAddressToClassicResult', {
        'String': Optional[str],
        'Status': Optional[str],
    }
)


EC2RevokeClientVpnIngressResult = TypedDict(
    'EC2RevokeClientVpnIngressResult', {
        'ClientVpnAuthorizationRuleStatus': Optional[EC2ClientVpnAuthorizationRuleStatus],
    }
)


EC2ElasticInferenceAccelerator = TypedDict(
    'EC2ElasticInferenceAccelerator', {
        'String': str,
    }
)


EC2LaunchTemplateSpecification = TypedDict(
    'EC2LaunchTemplateSpecification', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2SpotMarketOptions = TypedDict(
    'EC2SpotMarketOptions', {
        'String': Optional[str],
        'SpotInstanceType': Optional[str],
        'Integer': Optional[int],
        'DateTime': Optional[datetime.datetime],
        'InstanceInterruptionBehavior': Optional[str],
    }
)


EC2InstanceMarketOptionsRequest = TypedDict(
    'EC2InstanceMarketOptionsRequest', {
        'MarketType': Optional[str],
        'SpotMarketOptions': Optional[EC2SpotMarketOptions],
    }
)


EC2CpuOptionsRequest = TypedDict(
    'EC2CpuOptionsRequest', {
        'Integer': Optional[int],
        'Integer': Optional[int],
    }
)


EC2HibernationOptionsRequest = TypedDict(
    'EC2HibernationOptionsRequest', {
        'Boolean': Optional[bool],
    }
)


EC2LicenseConfigurationRequest = TypedDict(
    'EC2LicenseConfigurationRequest', {
        'String': Optional[str],
    }
)


EC2ScheduledInstancesEbs = TypedDict(
    'EC2ScheduledInstancesEbs', {
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Integer': Optional[int],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
    }
)


EC2ScheduledInstancesBlockDeviceMapping = TypedDict(
    'EC2ScheduledInstancesBlockDeviceMapping', {
        'String': Optional[str],
        'ScheduledInstancesEbs': Optional[EC2ScheduledInstancesEbs],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2ScheduledInstancesIamInstanceProfile = TypedDict(
    'EC2ScheduledInstancesIamInstanceProfile', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2ScheduledInstancesMonitoring = TypedDict(
    'EC2ScheduledInstancesMonitoring', {
        'Boolean': Optional[bool],
    }
)


EC2ScheduledInstancesIpv6Address = TypedDict(
    'EC2ScheduledInstancesIpv6Address', {
        'Ipv6Address': Optional[str],
    }
)


EC2ScheduledInstancesPrivateIpAddressConfig = TypedDict(
    'EC2ScheduledInstancesPrivateIpAddressConfig', {
        'Boolean': Optional[bool],
        'String': Optional[str],
    }
)


EC2ScheduledInstancesNetworkInterface = TypedDict(
    'EC2ScheduledInstancesNetworkInterface', {
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'Integer': Optional[int],
        'ScheduledInstancesSecurityGroupIdSet': Optional[List[str]],
        'Integer': Optional[int],
        'ScheduledInstancesIpv6AddressList': Optional[List[EC2ScheduledInstancesIpv6Address]],
        'String': Optional[str],
        'String': Optional[str],
        'PrivateIpAddressConfigSet': Optional[List[EC2ScheduledInstancesPrivateIpAddressConfig]],
        'Integer': Optional[int],
        'String': Optional[str],
    }
)


EC2ScheduledInstancesPlacement = TypedDict(
    'EC2ScheduledInstancesPlacement', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2ScheduledInstancesLaunchSpecification = TypedDict(
    'EC2ScheduledInstancesLaunchSpecification', {
        'String': str,
        'ScheduledInstancesBlockDeviceMappingSet': Optional[List[EC2ScheduledInstancesBlockDeviceMapping]],
        'Boolean': Optional[bool],
        'ScheduledInstancesIamInstanceProfile': Optional[EC2ScheduledInstancesIamInstanceProfile],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'ScheduledInstancesMonitoring': Optional[EC2ScheduledInstancesMonitoring],
        'ScheduledInstancesNetworkInterfaceSet': Optional[List[EC2ScheduledInstancesNetworkInterface]],
        'ScheduledInstancesPlacement': Optional[EC2ScheduledInstancesPlacement],
        'String': Optional[str],
        'ScheduledInstancesSecurityGroupIdSet': Optional[List[str]],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EC2RunScheduledInstancesResult = TypedDict(
    'EC2RunScheduledInstancesResult', {
        'InstanceIdSet': Optional[List[str]],
    }
)


EC2SearchTransitGatewayRoutesResult = TypedDict(
    'EC2SearchTransitGatewayRoutesResult', {
        'TransitGatewayRouteList': Optional[List[EC2TransitGatewayRoute]],
        'Boolean': Optional[bool],
    }
)


EC2InstanceStateChange = TypedDict(
    'EC2InstanceStateChange', {
        'InstanceState': Optional[EC2InstanceState],
        'String': Optional[str],
        'InstanceState': Optional[EC2InstanceState],
    }
)


EC2StartInstancesResult = TypedDict(
    'EC2StartInstancesResult', {
        'InstanceStateChangeList': Optional[List[EC2InstanceStateChange]],
    }
)


EC2StopInstancesResult = TypedDict(
    'EC2StopInstancesResult', {
        'InstanceStateChangeList': Optional[List[EC2InstanceStateChange]],
    }
)


EC2TerminateConnectionStatus = TypedDict(
    'EC2TerminateConnectionStatus', {
        'String': Optional[str],
        'ClientVpnConnectionStatus': Optional[EC2ClientVpnConnectionStatus],
        'ClientVpnConnectionStatus': Optional[EC2ClientVpnConnectionStatus],
    }
)


EC2TerminateClientVpnConnectionsResult = TypedDict(
    'EC2TerminateClientVpnConnectionsResult', {
        'String': Optional[str],
        'String': Optional[str],
        'TerminateConnectionStatusSet': Optional[List[EC2TerminateConnectionStatus]],
    }
)


EC2TerminateInstancesResult = TypedDict(
    'EC2TerminateInstancesResult', {
        'InstanceStateChangeList': Optional[List[EC2InstanceStateChange]],
    }
)


EC2UnassignIpv6AddressesResult = TypedDict(
    'EC2UnassignIpv6AddressesResult', {
        'String': Optional[str],
        'Ipv6AddressList': Optional[List[str]],
    }
)


EC2UnmonitorInstancesResult = TypedDict(
    'EC2UnmonitorInstancesResult', {
        'InstanceMonitoringList': Optional[List[EC2InstanceMonitoring]],
    }
)


EC2UpdateSecurityGroupRuleDescriptionsEgressResult = TypedDict(
    'EC2UpdateSecurityGroupRuleDescriptionsEgressResult', {
        'Boolean': Optional[bool],
    }
)


EC2UpdateSecurityGroupRuleDescriptionsIngressResult = TypedDict(
    'EC2UpdateSecurityGroupRuleDescriptionsIngressResult', {
        'Boolean': Optional[bool],
    }
)


EC2WithdrawByoipCidrResult = TypedDict(
    'EC2WithdrawByoipCidrResult', {
        'ByoipCidr': Optional[EC2ByoipCidr],
    }
)


class ECR(BaseClient):
    def batch_check_layer_availability(self, *,
        repositoryName: str,
        layerDigests: List[str],
        registryId: str = ...
    ) -> ECRBatchCheckLayerAvailabilityResponse: ...

    def batch_delete_image(self, *,
        repositoryName: str,
        imageIds: List[ECRImageIdentifier],
        registryId: str = ...
    ) -> ECRBatchDeleteImageResponse: ...

    def batch_get_image(self, *,
        repositoryName: str,
        imageIds: List[ECRImageIdentifier],
        registryId: str = ...,
        acceptedMediaTypes: List[str] = ...
    ) -> ECRBatchGetImageResponse: ...

    def complete_layer_upload(self, *,
        repositoryName: str,
        uploadId: str,
        layerDigests: List[str],
        registryId: str = ...
    ) -> ECRCompleteLayerUploadResponse: ...

    def create_repository(self, *,
        repositoryName: str,
        tags: List[ECRTag] = ...
    ) -> ECRCreateRepositoryResponse: ...

    def delete_lifecycle_policy(self, *,
        repositoryName: str,
        registryId: str = ...
    ) -> ECRDeleteLifecyclePolicyResponse: ...

    def delete_repository(self, *,
        repositoryName: str,
        registryId: str = ...,
        force: bool = ...
    ) -> ECRDeleteRepositoryResponse: ...

    def delete_repository_policy(self, *,
        repositoryName: str,
        registryId: str = ...
    ) -> ECRDeleteRepositoryPolicyResponse: ...

    def describe_images(self, *,
        repositoryName: str,
        registryId: str = ...,
        imageIds: List[ECRImageIdentifier] = ...,
        nextToken: str = ...,
        maxResults: int = ...,
        filter: ECRDescribeImagesFilter = ...
    ) -> ECRDescribeImagesResponse: ...

    def describe_repositories(self, *,
        registryId: str = ...,
        repositoryNames: List[str] = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> ECRDescribeRepositoriesResponse: ...

    def get_authorization_token(self, *,
        registryIds: List[str] = ...
    ) -> ECRGetAuthorizationTokenResponse: ...

    def get_download_url_for_layer(self, *,
        repositoryName: str,
        layerDigest: str,
        registryId: str = ...
    ) -> ECRGetDownloadUrlForLayerResponse: ...

    def get_lifecycle_policy(self, *,
        repositoryName: str,
        registryId: str = ...
    ) -> ECRGetLifecyclePolicyResponse: ...

    def get_lifecycle_policy_preview(self, *,
        repositoryName: str,
        registryId: str = ...,
        imageIds: List[ECRImageIdentifier] = ...,
        nextToken: str = ...,
        maxResults: int = ...,
        filter: ECRLifecyclePolicyPreviewFilter = ...
    ) -> ECRGetLifecyclePolicyPreviewResponse: ...

    def get_repository_policy(self, *,
        repositoryName: str,
        registryId: str = ...
    ) -> ECRGetRepositoryPolicyResponse: ...

    def initiate_layer_upload(self, *,
        repositoryName: str,
        registryId: str = ...
    ) -> ECRInitiateLayerUploadResponse: ...

    def list_images(self, *,
        repositoryName: str,
        registryId: str = ...,
        nextToken: str = ...,
        maxResults: int = ...,
        filter: ECRListImagesFilter = ...
    ) -> ECRListImagesResponse: ...

    def list_tags_for_resource(self, *,
        resourceArn: str
    ) -> ECRListTagsForResourceResponse: ...

    def put_image(self, *,
        repositoryName: str,
        imageManifest: str,
        registryId: str = ...,
        imageTag: str = ...
    ) -> ECRPutImageResponse: ...

    def put_lifecycle_policy(self, *,
        repositoryName: str,
        lifecyclePolicyText: str,
        registryId: str = ...
    ) -> ECRPutLifecyclePolicyResponse: ...

    def set_repository_policy(self, *,
        repositoryName: str,
        policyText: str,
        registryId: str = ...,
        force: bool = ...
    ) -> ECRSetRepositoryPolicyResponse: ...

    def start_lifecycle_policy_preview(self, *,
        repositoryName: str,
        registryId: str = ...,
        lifecyclePolicyText: str = ...
    ) -> ECRStartLifecyclePolicyPreviewResponse: ...

    def tag_resource(self, *,
        resourceArn: str,
        tags: List[ECRTag]
    ) -> ECRTagResourceResponse: ...

    def untag_resource(self, *,
        resourceArn: str,
        tagKeys: List[str]
    ) -> ECRUntagResourceResponse: ...

    def upload_layer_part(self, *,
        repositoryName: str,
        uploadId: str,
        partFirstByte: int,
        partLastByte: int,
        layerPartBlob: bytes,
        registryId: str = ...
    ) -> ECRUploadLayerPartResponse: ...


ECRLayer = TypedDict(
    'ECRLayer', {
        'LayerDigest': Optional[str],
        'LayerAvailability': Optional[str],
        'LayerSizeInBytes': Optional[int],
        'MediaType': Optional[str],
    }
)


ECRLayerFailure = TypedDict(
    'ECRLayerFailure', {
        'BatchedOperationLayerDigest': Optional[str],
        'LayerFailureCode': Optional[str],
        'LayerFailureReason': Optional[str],
    }
)


ECRBatchCheckLayerAvailabilityResponse = TypedDict(
    'ECRBatchCheckLayerAvailabilityResponse', {
        'LayerList': Optional[List[ECRLayer]],
        'LayerFailureList': Optional[List[ECRLayerFailure]],
    }
)


ECRImageIdentifier = TypedDict(
    'ECRImageIdentifier', {
        'ImageDigest': Optional[str],
        'ImageTag': Optional[str],
    }
)


ECRImageFailure = TypedDict(
    'ECRImageFailure', {
        'ImageIdentifier': Optional[ECRImageIdentifier],
        'ImageFailureCode': Optional[str],
        'ImageFailureReason': Optional[str],
    }
)


ECRBatchDeleteImageResponse = TypedDict(
    'ECRBatchDeleteImageResponse', {
        'ImageIdentifierList': Optional[List[ECRImageIdentifier]],
        'ImageFailureList': Optional[List[ECRImageFailure]],
    }
)


ECRImage = TypedDict(
    'ECRImage', {
        'RegistryId': Optional[str],
        'RepositoryName': Optional[str],
        'ImageIdentifier': Optional[ECRImageIdentifier],
        'ImageManifest': Optional[str],
    }
)


ECRBatchGetImageResponse = TypedDict(
    'ECRBatchGetImageResponse', {
        'ImageList': Optional[List[ECRImage]],
        'ImageFailureList': Optional[List[ECRImageFailure]],
    }
)


ECRCompleteLayerUploadResponse = TypedDict(
    'ECRCompleteLayerUploadResponse', {
        'RegistryId': Optional[str],
        'RepositoryName': Optional[str],
        'UploadId': Optional[str],
        'LayerDigest': Optional[str],
    }
)


ECRTag = TypedDict(
    'ECRTag', {
        'TagKey': Optional[str],
        'TagValue': Optional[str],
    }
)


ECRRepository = TypedDict(
    'ECRRepository', {
        'Arn': Optional[str],
        'RegistryId': Optional[str],
        'RepositoryName': Optional[str],
        'Url': Optional[str],
        'CreationTimestamp': Optional[datetime.datetime],
    }
)


ECRCreateRepositoryResponse = TypedDict(
    'ECRCreateRepositoryResponse', {
        'Repository': Optional[ECRRepository],
    }
)


ECRDeleteLifecyclePolicyResponse = TypedDict(
    'ECRDeleteLifecyclePolicyResponse', {
        'RegistryId': Optional[str],
        'RepositoryName': Optional[str],
        'LifecyclePolicyText': Optional[str],
        'EvaluationTimestamp': Optional[datetime.datetime],
    }
)


ECRDeleteRepositoryResponse = TypedDict(
    'ECRDeleteRepositoryResponse', {
        'Repository': Optional[ECRRepository],
    }
)


ECRDeleteRepositoryPolicyResponse = TypedDict(
    'ECRDeleteRepositoryPolicyResponse', {
        'RegistryId': Optional[str],
        'RepositoryName': Optional[str],
        'RepositoryPolicyText': Optional[str],
    }
)


ECRDescribeImagesFilter = TypedDict(
    'ECRDescribeImagesFilter', {
        'TagStatus': Optional[str],
    }
)


ECRImageDetail = TypedDict(
    'ECRImageDetail', {
        'RegistryId': Optional[str],
        'RepositoryName': Optional[str],
        'ImageDigest': Optional[str],
        'ImageTagList': Optional[List[str]],
        'ImageSizeInBytes': Optional[int],
        'PushTimestamp': Optional[datetime.datetime],
    }
)


ECRDescribeImagesResponse = TypedDict(
    'ECRDescribeImagesResponse', {
        'ImageDetailList': Optional[List[ECRImageDetail]],
        'NextToken': Optional[str],
    }
)


ECRDescribeRepositoriesResponse = TypedDict(
    'ECRDescribeRepositoriesResponse', {
        'RepositoryList': Optional[List[ECRRepository]],
        'NextToken': Optional[str],
    }
)


ECRAuthorizationData = TypedDict(
    'ECRAuthorizationData', {
        'Base64': Optional[str],
        'ExpirationTimestamp': Optional[datetime.datetime],
        'ProxyEndpoint': Optional[str],
    }
)


ECRGetAuthorizationTokenResponse = TypedDict(
    'ECRGetAuthorizationTokenResponse', {
        'AuthorizationDataList': Optional[List[ECRAuthorizationData]],
    }
)


ECRGetDownloadUrlForLayerResponse = TypedDict(
    'ECRGetDownloadUrlForLayerResponse', {
        'Url': Optional[str],
        'LayerDigest': Optional[str],
    }
)


ECRGetLifecyclePolicyResponse = TypedDict(
    'ECRGetLifecyclePolicyResponse', {
        'RegistryId': Optional[str],
        'RepositoryName': Optional[str],
        'LifecyclePolicyText': Optional[str],
        'EvaluationTimestamp': Optional[datetime.datetime],
    }
)


ECRLifecyclePolicyPreviewFilter = TypedDict(
    'ECRLifecyclePolicyPreviewFilter', {
        'TagStatus': Optional[str],
    }
)


ECRLifecyclePolicyRuleAction = TypedDict(
    'ECRLifecyclePolicyRuleAction', {
        'ImageActionType': Optional[str],
    }
)


ECRLifecyclePolicyPreviewResult = TypedDict(
    'ECRLifecyclePolicyPreviewResult', {
        'ImageTagList': Optional[List[str]],
        'ImageDigest': Optional[str],
        'PushTimestamp': Optional[datetime.datetime],
        'LifecyclePolicyRuleAction': Optional[ECRLifecyclePolicyRuleAction],
        'LifecyclePolicyRulePriority': Optional[int],
    }
)


ECRLifecyclePolicyPreviewSummary = TypedDict(
    'ECRLifecyclePolicyPreviewSummary', {
        'ImageCount': Optional[int],
    }
)


ECRGetLifecyclePolicyPreviewResponse = TypedDict(
    'ECRGetLifecyclePolicyPreviewResponse', {
        'RegistryId': Optional[str],
        'RepositoryName': Optional[str],
        'LifecyclePolicyText': Optional[str],
        'LifecyclePolicyPreviewStatus': Optional[str],
        'NextToken': Optional[str],
        'LifecyclePolicyPreviewResultList': Optional[List[ECRLifecyclePolicyPreviewResult]],
        'LifecyclePolicyPreviewSummary': Optional[ECRLifecyclePolicyPreviewSummary],
    }
)


ECRGetRepositoryPolicyResponse = TypedDict(
    'ECRGetRepositoryPolicyResponse', {
        'RegistryId': Optional[str],
        'RepositoryName': Optional[str],
        'RepositoryPolicyText': Optional[str],
    }
)


ECRInitiateLayerUploadResponse = TypedDict(
    'ECRInitiateLayerUploadResponse', {
        'UploadId': Optional[str],
        'PartSize': Optional[int],
    }
)


ECRListImagesFilter = TypedDict(
    'ECRListImagesFilter', {
        'TagStatus': Optional[str],
    }
)


ECRListImagesResponse = TypedDict(
    'ECRListImagesResponse', {
        'ImageIdentifierList': Optional[List[ECRImageIdentifier]],
        'NextToken': Optional[str],
    }
)


ECRListTagsForResourceResponse = TypedDict(
    'ECRListTagsForResourceResponse', {
        'TagList': Optional[List[ECRTag]],
    }
)


ECRPutImageResponse = TypedDict(
    'ECRPutImageResponse', {
        'Image': Optional[ECRImage],
    }
)


ECRPutLifecyclePolicyResponse = TypedDict(
    'ECRPutLifecyclePolicyResponse', {
        'RegistryId': Optional[str],
        'RepositoryName': Optional[str],
        'LifecyclePolicyText': Optional[str],
    }
)


ECRSetRepositoryPolicyResponse = TypedDict(
    'ECRSetRepositoryPolicyResponse', {
        'RegistryId': Optional[str],
        'RepositoryName': Optional[str],
        'RepositoryPolicyText': Optional[str],
    }
)


ECRStartLifecyclePolicyPreviewResponse = TypedDict(
    'ECRStartLifecyclePolicyPreviewResponse', {
        'RegistryId': Optional[str],
        'RepositoryName': Optional[str],
        'LifecyclePolicyText': Optional[str],
        'LifecyclePolicyPreviewStatus': Optional[str],
    }
)


ECRTagResourceResponse = TypedDict(
    'ECRTagResourceResponse', {
    }
)


ECRUntagResourceResponse = TypedDict(
    'ECRUntagResourceResponse', {
    }
)


ECRUploadLayerPartResponse = TypedDict(
    'ECRUploadLayerPartResponse', {
        'RegistryId': Optional[str],
        'RepositoryName': Optional[str],
        'UploadId': Optional[str],
        'PartSize': Optional[int],
    }
)


class ECS(BaseClient):
    def create_cluster(self, *,
        clusterName: str = ...,
        tags: List[ECSTag] = ...
    ) -> ECSCreateClusterResponse: ...

    def create_service(self, *,
        serviceName: str,
        cluster: str = ...,
        taskDefinition: str = ...,
        loadBalancers: List[ECSLoadBalancer] = ...,
        serviceRegistries: List[ECSServiceRegistry] = ...,
        desiredCount: int = ...,
        clientToken: str = ...,
        launchType: str = ...,
        platformVersion: str = ...,
        role: str = ...,
        deploymentConfiguration: ECSDeploymentConfiguration = ...,
        placementConstraints: List[ECSPlacementConstraint] = ...,
        placementStrategy: List[ECSPlacementStrategy] = ...,
        networkConfiguration: ECSNetworkConfiguration = ...,
        healthCheckGracePeriodSeconds: int = ...,
        schedulingStrategy: str = ...,
        deploymentController: ECSDeploymentController = ...,
        tags: List[ECSTag] = ...,
        enableECSManagedTags: bool = ...,
        propagateTags: str = ...
    ) -> ECSCreateServiceResponse: ...

    def create_task_set(self, *,
        service: str,
        cluster: str,
        taskDefinition: str,
        externalId: str = ...,
        networkConfiguration: ECSNetworkConfiguration = ...,
        loadBalancers: List[ECSLoadBalancer] = ...,
        serviceRegistries: List[ECSServiceRegistry] = ...,
        launchType: str = ...,
        platformVersion: str = ...,
        scale: ECSScale = ...,
        clientToken: str = ...
    ) -> ECSCreateTaskSetResponse: ...

    def delete_account_setting(self, *,
        name: str,
        principalArn: str = ...
    ) -> ECSDeleteAccountSettingResponse: ...

    def delete_attributes(self, *,
        attributes: List[ECSAttribute],
        cluster: str = ...
    ) -> ECSDeleteAttributesResponse: ...

    def delete_cluster(self, *,
        cluster: str
    ) -> ECSDeleteClusterResponse: ...

    def delete_service(self, *,
        service: str,
        cluster: str = ...,
        force: bool = ...
    ) -> ECSDeleteServiceResponse: ...

    def delete_task_set(self, *,
        cluster: str,
        service: str,
        taskSet: str,
        force: bool = ...
    ) -> ECSDeleteTaskSetResponse: ...

    def deregister_container_instance(self, *,
        containerInstance: str,
        cluster: str = ...,
        force: bool = ...
    ) -> ECSDeregisterContainerInstanceResponse: ...

    def deregister_task_definition(self, *,
        taskDefinition: str
    ) -> ECSDeregisterTaskDefinitionResponse: ...

    def describe_clusters(self, *,
        clusters: List[str] = ...,
        include: List[str] = ...
    ) -> ECSDescribeClustersResponse: ...

    def describe_container_instances(self, *,
        containerInstances: List[str],
        cluster: str = ...,
        include: List[str] = ...
    ) -> ECSDescribeContainerInstancesResponse: ...

    def describe_services(self, *,
        services: List[str],
        cluster: str = ...,
        include: List[str] = ...
    ) -> ECSDescribeServicesResponse: ...

    def describe_task_definition(self, *,
        taskDefinition: str,
        include: List[str] = ...
    ) -> ECSDescribeTaskDefinitionResponse: ...

    def describe_task_sets(self, *,
        cluster: str,
        service: str,
        taskSets: List[str] = ...
    ) -> ECSDescribeTaskSetsResponse: ...

    def describe_tasks(self, *,
        tasks: List[str],
        cluster: str = ...,
        include: List[str] = ...
    ) -> ECSDescribeTasksResponse: ...

    def discover_poll_endpoint(self, *,
        containerInstance: str = ...,
        cluster: str = ...
    ) -> ECSDiscoverPollEndpointResponse: ...

    def list_account_settings(self, *,
        name: str = ...,
        value: str = ...,
        principalArn: str = ...,
        effectiveSettings: bool = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> ECSListAccountSettingsResponse: ...

    def list_attributes(self, *,
        targetType: str,
        cluster: str = ...,
        attributeName: str = ...,
        attributeValue: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> ECSListAttributesResponse: ...

    def list_clusters(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> ECSListClustersResponse: ...

    def list_container_instances(self, *,
        cluster: str = ...,
        filter: str = ...,
        nextToken: str = ...,
        maxResults: int = ...,
        status: str = ...
    ) -> ECSListContainerInstancesResponse: ...

    def list_services(self, *,
        cluster: str = ...,
        nextToken: str = ...,
        maxResults: int = ...,
        launchType: str = ...,
        schedulingStrategy: str = ...
    ) -> ECSListServicesResponse: ...

    def list_tags_for_resource(self, *,
        resourceArn: str
    ) -> ECSListTagsForResourceResponse: ...

    def list_task_definition_families(self, *,
        familyPrefix: str = ...,
        status: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> ECSListTaskDefinitionFamiliesResponse: ...

    def list_task_definitions(self, *,
        familyPrefix: str = ...,
        status: str = ...,
        sort: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> ECSListTaskDefinitionsResponse: ...

    def list_tasks(self, *,
        cluster: str = ...,
        containerInstance: str = ...,
        family: str = ...,
        nextToken: str = ...,
        maxResults: int = ...,
        startedBy: str = ...,
        serviceName: str = ...,
        desiredStatus: str = ...,
        launchType: str = ...
    ) -> ECSListTasksResponse: ...

    def put_account_setting(self, *,
        name: str,
        value: str,
        principalArn: str = ...
    ) -> ECSPutAccountSettingResponse: ...

    def put_account_setting_default(self, *,
        name: str,
        value: str
    ) -> ECSPutAccountSettingDefaultResponse: ...

    def put_attributes(self, *,
        attributes: List[ECSAttribute],
        cluster: str = ...
    ) -> ECSPutAttributesResponse: ...

    def register_container_instance(self, *,
        cluster: str = ...,
        instanceIdentityDocument: str = ...,
        instanceIdentityDocumentSignature: str = ...,
        totalResources: List[ECSResource] = ...,
        versionInfo: ECSVersionInfo = ...,
        containerInstanceArn: str = ...,
        attributes: List[ECSAttribute] = ...,
        platformDevices: List[ECSPlatformDevice] = ...,
        tags: List[ECSTag] = ...
    ) -> ECSRegisterContainerInstanceResponse: ...

    def register_task_definition(self, *,
        family: str,
        containerDefinitions: List[ECSContainerDefinition],
        taskRoleArn: str = ...,
        executionRoleArn: str = ...,
        networkMode: str = ...,
        volumes: List[ECSVolume] = ...,
        placementConstraints: List[ECSTaskDefinitionPlacementConstraint] = ...,
        requiresCompatibilities: List[str] = ...,
        cpu: str = ...,
        memory: str = ...,
        tags: List[ECSTag] = ...,
        pidMode: str = ...,
        ipcMode: str = ...,
        proxyConfiguration: ECSProxyConfiguration = ...
    ) -> ECSRegisterTaskDefinitionResponse: ...

    def run_task(self, *,
        taskDefinition: str,
        cluster: str = ...,
        overrides: ECSTaskOverride = ...,
        count: int = ...,
        startedBy: str = ...,
        group: str = ...,
        placementConstraints: List[ECSPlacementConstraint] = ...,
        placementStrategy: List[ECSPlacementStrategy] = ...,
        launchType: str = ...,
        platformVersion: str = ...,
        networkConfiguration: ECSNetworkConfiguration = ...,
        tags: List[ECSTag] = ...,
        enableECSManagedTags: bool = ...,
        propagateTags: str = ...
    ) -> ECSRunTaskResponse: ...

    def start_task(self, *,
        taskDefinition: str,
        containerInstances: List[str],
        cluster: str = ...,
        overrides: ECSTaskOverride = ...,
        startedBy: str = ...,
        group: str = ...,
        networkConfiguration: ECSNetworkConfiguration = ...,
        tags: List[ECSTag] = ...,
        enableECSManagedTags: bool = ...,
        propagateTags: str = ...
    ) -> ECSStartTaskResponse: ...

    def stop_task(self, *,
        task: str,
        cluster: str = ...,
        reason: str = ...
    ) -> ECSStopTaskResponse: ...

    def submit_container_state_change(self, *,
        cluster: str = ...,
        task: str = ...,
        containerName: str = ...,
        status: str = ...,
        exitCode: int = ...,
        reason: str = ...,
        networkBindings: List[ECSNetworkBinding] = ...
    ) -> ECSSubmitContainerStateChangeResponse: ...

    def submit_task_state_change(self, *,
        cluster: str = ...,
        task: str = ...,
        status: str = ...,
        reason: str = ...,
        containers: List[ECSContainerStateChange] = ...,
        attachments: List[ECSAttachmentStateChange] = ...,
        pullStartedAt: datetime.datetime = ...,
        pullStoppedAt: datetime.datetime = ...,
        executionStoppedAt: datetime.datetime = ...
    ) -> ECSSubmitTaskStateChangeResponse: ...

    def tag_resource(self, *,
        resourceArn: str,
        tags: List[ECSTag]
    ) -> ECSTagResourceResponse: ...

    def untag_resource(self, *,
        resourceArn: str,
        tagKeys: List[str]
    ) -> ECSUntagResourceResponse: ...

    def update_container_agent(self, *,
        containerInstance: str,
        cluster: str = ...
    ) -> ECSUpdateContainerAgentResponse: ...

    def update_container_instances_state(self, *,
        containerInstances: List[str],
        status: str,
        cluster: str = ...
    ) -> ECSUpdateContainerInstancesStateResponse: ...

    def update_service(self, *,
        service: str,
        cluster: str = ...,
        desiredCount: int = ...,
        taskDefinition: str = ...,
        deploymentConfiguration: ECSDeploymentConfiguration = ...,
        networkConfiguration: ECSNetworkConfiguration = ...,
        platformVersion: str = ...,
        forceNewDeployment: bool = ...,
        healthCheckGracePeriodSeconds: int = ...
    ) -> ECSUpdateServiceResponse: ...

    def update_service_primary_task_set(self, *,
        cluster: str,
        service: str,
        primaryTaskSet: str
    ) -> ECSUpdateServicePrimaryTaskSetResponse: ...

    def update_task_set(self, *,
        cluster: str,
        service: str,
        taskSet: str,
        scale: ECSScale
    ) -> ECSUpdateTaskSetResponse: ...


ECSTag = TypedDict(
    'ECSTag', {
        'TagKey': Optional[str],
        'TagValue': Optional[str],
    }
)


ECSKeyValuePair = TypedDict(
    'ECSKeyValuePair', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


ECSCluster = TypedDict(
    'ECSCluster', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Statistics': Optional[List[ECSKeyValuePair]],
        'Tags': Optional[List[ECSTag]],
    }
)


ECSCreateClusterResponse = TypedDict(
    'ECSCreateClusterResponse', {
        'Cluster': Optional[ECSCluster],
    }
)


ECSLoadBalancer = TypedDict(
    'ECSLoadBalancer', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'BoxedInteger': Optional[int],
    }
)


ECSServiceRegistry = TypedDict(
    'ECSServiceRegistry', {
        'String': Optional[str],
        'BoxedInteger': Optional[int],
        'String': Optional[str],
        'BoxedInteger': Optional[int],
    }
)


ECSDeploymentConfiguration = TypedDict(
    'ECSDeploymentConfiguration', {
        'BoxedInteger': Optional[int],
        'BoxedInteger': Optional[int],
    }
)


ECSPlacementConstraint = TypedDict(
    'ECSPlacementConstraint', {
        'PlacementConstraintType': Optional[str],
        'String': Optional[str],
    }
)


ECSPlacementStrategy = TypedDict(
    'ECSPlacementStrategy', {
        'PlacementStrategyType': Optional[str],
        'String': Optional[str],
    }
)


ECSAwsVpcConfiguration = TypedDict(
    'ECSAwsVpcConfiguration', {
        'StringList': List[str],
        'StringList': Optional[List[str]],
        'AssignPublicIp': Optional[str],
    }
)


ECSNetworkConfiguration = TypedDict(
    'ECSNetworkConfiguration', {
        'AwsVpcConfiguration': Optional[ECSAwsVpcConfiguration],
    }
)


ECSDeploymentController = TypedDict(
    'ECSDeploymentController', {
        'DeploymentControllerType': str,
    }
)


ECSScale = TypedDict(
    'ECSScale', {
        'Double': Optional[float],
        'ScaleUnit': Optional[str],
    }
)


ECSTaskSet = TypedDict(
    'ECSTaskSet', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'LaunchType': Optional[str],
        'String': Optional[str],
        'NetworkConfiguration': Optional[ECSNetworkConfiguration],
        'LoadBalancers': Optional[List[ECSLoadBalancer]],
        'ServiceRegistries': Optional[List[ECSServiceRegistry]],
        'Scale': Optional[ECSScale],
        'StabilityStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


ECSDeployment = TypedDict(
    'ECSDeployment', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'LaunchType': Optional[str],
        'String': Optional[str],
        'NetworkConfiguration': Optional[ECSNetworkConfiguration],
    }
)


ECSServiceEvent = TypedDict(
    'ECSServiceEvent', {
        'String': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'String': Optional[str],
    }
)


ECSService = TypedDict(
    'ECSService', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'LoadBalancers': Optional[List[ECSLoadBalancer]],
        'ServiceRegistries': Optional[List[ECSServiceRegistry]],
        'String': Optional[str],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'LaunchType': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DeploymentConfiguration': Optional[ECSDeploymentConfiguration],
        'TaskSets': Optional[List[ECSTaskSet]],
        'Deployments': Optional[List[ECSDeployment]],
        'String': Optional[str],
        'ServiceEvents': Optional[List[ECSServiceEvent]],
        'Timestamp': Optional[datetime.datetime],
        'PlacementConstraints': Optional[List[ECSPlacementConstraint]],
        'PlacementStrategies': Optional[List[ECSPlacementStrategy]],
        'NetworkConfiguration': Optional[ECSNetworkConfiguration],
        'BoxedInteger': Optional[int],
        'SchedulingStrategy': Optional[str],
        'DeploymentController': Optional[ECSDeploymentController],
        'Tags': Optional[List[ECSTag]],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'PropagateTags': Optional[str],
    }
)


ECSCreateServiceResponse = TypedDict(
    'ECSCreateServiceResponse', {
        'Service': Optional[ECSService],
    }
)


ECSCreateTaskSetResponse = TypedDict(
    'ECSCreateTaskSetResponse', {
        'TaskSet': Optional[ECSTaskSet],
    }
)


ECSSetting = TypedDict(
    'ECSSetting', {
        'SettingName': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


ECSDeleteAccountSettingResponse = TypedDict(
    'ECSDeleteAccountSettingResponse', {
        'Setting': Optional[ECSSetting],
    }
)


ECSAttribute = TypedDict(
    'ECSAttribute', {
        'String': str,
        'String': Optional[str],
        'TargetType': Optional[str],
        'String': Optional[str],
    }
)


ECSDeleteAttributesResponse = TypedDict(
    'ECSDeleteAttributesResponse', {
        'Attributes': Optional[List[ECSAttribute]],
    }
)


ECSDeleteClusterResponse = TypedDict(
    'ECSDeleteClusterResponse', {
        'Cluster': Optional[ECSCluster],
    }
)


ECSDeleteServiceResponse = TypedDict(
    'ECSDeleteServiceResponse', {
        'Service': Optional[ECSService],
    }
)


ECSDeleteTaskSetResponse = TypedDict(
    'ECSDeleteTaskSetResponse', {
        'TaskSet': Optional[ECSTaskSet],
    }
)


ECSVersionInfo = TypedDict(
    'ECSVersionInfo', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


ECSResource = TypedDict(
    'ECSResource', {
        'String': Optional[str],
        'String': Optional[str],
        'Double': Optional[float],
        'Long': Optional[int],
        'Integer': Optional[int],
        'StringList': Optional[List[str]],
    }
)


ECSAttachment = TypedDict(
    'ECSAttachment', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'AttachmentDetails': Optional[List[ECSKeyValuePair]],
    }
)


ECSContainerInstance = TypedDict(
    'ECSContainerInstance', {
        'String': Optional[str],
        'String': Optional[str],
        'Long': Optional[int],
        'VersionInfo': Optional[ECSVersionInfo],
        'Resources': Optional[List[ECSResource]],
        'Resources': Optional[List[ECSResource]],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'AgentUpdateStatus': Optional[str],
        'Attributes': Optional[List[ECSAttribute]],
        'Timestamp': Optional[datetime.datetime],
        'Attachments': Optional[List[ECSAttachment]],
        'Tags': Optional[List[ECSTag]],
    }
)


ECSDeregisterContainerInstanceResponse = TypedDict(
    'ECSDeregisterContainerInstanceResponse', {
        'ContainerInstance': Optional[ECSContainerInstance],
    }
)


ECSRepositoryCredentials = TypedDict(
    'ECSRepositoryCredentials', {
        'String': str,
    }
)


ECSPortMapping = TypedDict(
    'ECSPortMapping', {
        'BoxedInteger': Optional[int],
        'BoxedInteger': Optional[int],
        'TransportProtocol': Optional[str],
    }
)


ECSMountPoint = TypedDict(
    'ECSMountPoint', {
        'String': Optional[str],
        'String': Optional[str],
        'BoxedBoolean': Optional[bool],
    }
)


ECSVolumeFrom = TypedDict(
    'ECSVolumeFrom', {
        'String': Optional[str],
        'BoxedBoolean': Optional[bool],
    }
)


ECSKernelCapabilities = TypedDict(
    'ECSKernelCapabilities', {
        'StringList': Optional[List[str]],
        'StringList': Optional[List[str]],
    }
)


ECSDevice = TypedDict(
    'ECSDevice', {
        'String': str,
        'String': Optional[str],
        'DeviceCgroupPermissions': Optional[List[str]],
    }
)


ECSTmpfs = TypedDict(
    'ECSTmpfs', {
        'String': str,
        'Integer': int,
        'StringList': Optional[List[str]],
    }
)


ECSLinuxParameters = TypedDict(
    'ECSLinuxParameters', {
        'KernelCapabilities': Optional[ECSKernelCapabilities],
        'DevicesList': Optional[List[ECSDevice]],
        'BoxedBoolean': Optional[bool],
        'BoxedInteger': Optional[int],
        'TmpfsList': Optional[List[ECSTmpfs]],
    }
)


ECSSecret = TypedDict(
    'ECSSecret', {
        'String': str,
        'String': str,
    }
)


ECSContainerDependency = TypedDict(
    'ECSContainerDependency', {
        'String': str,
        'ContainerCondition': str,
    }
)


ECSHostEntry = TypedDict(
    'ECSHostEntry', {
        'String': str,
        'String': str,
    }
)


ECSUlimit = TypedDict(
    'ECSUlimit', {
        'UlimitName': str,
        'Integer': int,
        'Integer': int,
    }
)


ECSLogConfiguration = TypedDict(
    'ECSLogConfiguration', {
        'LogDriver': str,
        'LogConfigurationOptionsMap': Optional[Dict[str, str]],
        'SecretList': Optional[List[ECSSecret]],
    }
)


ECSHealthCheck = TypedDict(
    'ECSHealthCheck', {
        'StringList': List[str],
        'BoxedInteger': Optional[int],
        'BoxedInteger': Optional[int],
        'BoxedInteger': Optional[int],
        'BoxedInteger': Optional[int],
    }
)


ECSSystemControl = TypedDict(
    'ECSSystemControl', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


ECSResourceRequirement = TypedDict(
    'ECSResourceRequirement', {
        'String': str,
        'ResourceType': str,
    }
)


ECSContainerDefinition = TypedDict(
    'ECSContainerDefinition', {
        'String': Optional[str],
        'String': Optional[str],
        'RepositoryCredentials': Optional[ECSRepositoryCredentials],
        'Integer': Optional[int],
        'BoxedInteger': Optional[int],
        'BoxedInteger': Optional[int],
        'StringList': Optional[List[str]],
        'PortMappingList': Optional[List[ECSPortMapping]],
        'BoxedBoolean': Optional[bool],
        'StringList': Optional[List[str]],
        'StringList': Optional[List[str]],
        'EnvironmentVariables': Optional[List[ECSKeyValuePair]],
        'MountPointList': Optional[List[ECSMountPoint]],
        'VolumeFromList': Optional[List[ECSVolumeFrom]],
        'LinuxParameters': Optional[ECSLinuxParameters],
        'SecretList': Optional[List[ECSSecret]],
        'ContainerDependencies': Optional[List[ECSContainerDependency]],
        'BoxedInteger': Optional[int],
        'BoxedInteger': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'BoxedBoolean': Optional[bool],
        'BoxedBoolean': Optional[bool],
        'BoxedBoolean': Optional[bool],
        'StringList': Optional[List[str]],
        'StringList': Optional[List[str]],
        'HostEntryList': Optional[List[ECSHostEntry]],
        'StringList': Optional[List[str]],
        'BoxedBoolean': Optional[bool],
        'BoxedBoolean': Optional[bool],
        'DockerLabelsMap': Optional[Dict[str, str]],
        'UlimitList': Optional[List[ECSUlimit]],
        'LogConfiguration': Optional[ECSLogConfiguration],
        'HealthCheck': Optional[ECSHealthCheck],
        'SystemControls': Optional[List[ECSSystemControl]],
        'ResourceRequirements': Optional[List[ECSResourceRequirement]],
    }
)


ECSHostVolumeProperties = TypedDict(
    'ECSHostVolumeProperties', {
        'String': Optional[str],
    }
)


ECSDockerVolumeConfiguration = TypedDict(
    'ECSDockerVolumeConfiguration', {
        'Scope': Optional[str],
        'BoxedBoolean': Optional[bool],
        'String': Optional[str],
        'StringMap': Optional[Dict[str, str]],
        'StringMap': Optional[Dict[str, str]],
    }
)


ECSVolume = TypedDict(
    'ECSVolume', {
        'String': Optional[str],
        'HostVolumeProperties': Optional[ECSHostVolumeProperties],
        'DockerVolumeConfiguration': Optional[ECSDockerVolumeConfiguration],
    }
)


ECSTaskDefinitionPlacementConstraint = TypedDict(
    'ECSTaskDefinitionPlacementConstraint', {
        'TaskDefinitionPlacementConstraintType': Optional[str],
        'String': Optional[str],
    }
)


ECSProxyConfiguration = TypedDict(
    'ECSProxyConfiguration', {
        'String': str,
        'ProxyConfigurationType': Optional[str],
        'ProxyConfigurationProperties': Optional[List[ECSKeyValuePair]],
    }
)


ECSTaskDefinition = TypedDict(
    'ECSTaskDefinition', {
        'String': Optional[str],
        'ContainerDefinitions': Optional[List[ECSContainerDefinition]],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'NetworkMode': Optional[str],
        'Integer': Optional[int],
        'VolumeList': Optional[List[ECSVolume]],
        'TaskDefinitionStatus': Optional[str],
        'RequiresAttributes': Optional[List[ECSAttribute]],
        'TaskDefinitionPlacementConstraints': Optional[List[ECSTaskDefinitionPlacementConstraint]],
        'CompatibilityList': Optional[List[str]],
        'CompatibilityList': Optional[List[str]],
        'String': Optional[str],
        'String': Optional[str],
        'PidMode': Optional[str],
        'IpcMode': Optional[str],
        'ProxyConfiguration': Optional[ECSProxyConfiguration],
    }
)


ECSDeregisterTaskDefinitionResponse = TypedDict(
    'ECSDeregisterTaskDefinitionResponse', {
        'TaskDefinition': Optional[ECSTaskDefinition],
    }
)


ECSFailure = TypedDict(
    'ECSFailure', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


ECSDescribeClustersResponse = TypedDict(
    'ECSDescribeClustersResponse', {
        'Clusters': Optional[List[ECSCluster]],
        'Failures': Optional[List[ECSFailure]],
    }
)


ECSDescribeContainerInstancesResponse = TypedDict(
    'ECSDescribeContainerInstancesResponse', {
        'ContainerInstances': Optional[List[ECSContainerInstance]],
        'Failures': Optional[List[ECSFailure]],
    }
)


ECSDescribeServicesResponse = TypedDict(
    'ECSDescribeServicesResponse', {
        'Services': Optional[List[ECSService]],
        'Failures': Optional[List[ECSFailure]],
    }
)


ECSDescribeTaskDefinitionResponse = TypedDict(
    'ECSDescribeTaskDefinitionResponse', {
        'TaskDefinition': Optional[ECSTaskDefinition],
        'Tags': Optional[List[ECSTag]],
    }
)


ECSDescribeTaskSetsResponse = TypedDict(
    'ECSDescribeTaskSetsResponse', {
        'TaskSets': Optional[List[ECSTaskSet]],
        'Failures': Optional[List[ECSFailure]],
    }
)


ECSContainerOverride = TypedDict(
    'ECSContainerOverride', {
        'String': Optional[str],
        'StringList': Optional[List[str]],
        'EnvironmentVariables': Optional[List[ECSKeyValuePair]],
        'BoxedInteger': Optional[int],
        'BoxedInteger': Optional[int],
        'BoxedInteger': Optional[int],
        'ResourceRequirements': Optional[List[ECSResourceRequirement]],
    }
)


ECSTaskOverride = TypedDict(
    'ECSTaskOverride', {
        'ContainerOverrides': Optional[List[ECSContainerOverride]],
        'String': Optional[str],
        'String': Optional[str],
    }
)


ECSNetworkBinding = TypedDict(
    'ECSNetworkBinding', {
        'String': Optional[str],
        'BoxedInteger': Optional[int],
        'BoxedInteger': Optional[int],
        'TransportProtocol': Optional[str],
    }
)


ECSNetworkInterface = TypedDict(
    'ECSNetworkInterface', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


ECSContainer = TypedDict(
    'ECSContainer', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'BoxedInteger': Optional[int],
        'String': Optional[str],
        'NetworkBindings': Optional[List[ECSNetworkBinding]],
        'NetworkInterfaces': Optional[List[ECSNetworkInterface]],
        'HealthStatus': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'GpuIds': Optional[List[str]],
    }
)


ECSTask = TypedDict(
    'ECSTask', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'TaskOverride': Optional[ECSTaskOverride],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Containers': Optional[List[ECSContainer]],
        'String': Optional[str],
        'Long': Optional[int],
        'String': Optional[str],
        'TaskStopCode': Optional[str],
        'Connectivity': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'String': Optional[str],
        'LaunchType': Optional[str],
        'String': Optional[str],
        'Attachments': Optional[List[ECSAttachment]],
        'HealthStatus': Optional[str],
        'Tags': Optional[List[ECSTag]],
    }
)


ECSDescribeTasksResponse = TypedDict(
    'ECSDescribeTasksResponse', {
        'Tasks': Optional[List[ECSTask]],
        'Failures': Optional[List[ECSFailure]],
    }
)


ECSDiscoverPollEndpointResponse = TypedDict(
    'ECSDiscoverPollEndpointResponse', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


ECSListAccountSettingsResponse = TypedDict(
    'ECSListAccountSettingsResponse', {
        'Settings': Optional[List[ECSSetting]],
        'String': Optional[str],
    }
)


ECSListAttributesResponse = TypedDict(
    'ECSListAttributesResponse', {
        'Attributes': Optional[List[ECSAttribute]],
        'String': Optional[str],
    }
)


ECSListClustersResponse = TypedDict(
    'ECSListClustersResponse', {
        'StringList': Optional[List[str]],
        'String': Optional[str],
    }
)


ECSListContainerInstancesResponse = TypedDict(
    'ECSListContainerInstancesResponse', {
        'StringList': Optional[List[str]],
        'String': Optional[str],
    }
)


ECSListServicesResponse = TypedDict(
    'ECSListServicesResponse', {
        'StringList': Optional[List[str]],
        'String': Optional[str],
    }
)


ECSListTagsForResourceResponse = TypedDict(
    'ECSListTagsForResourceResponse', {
        'Tags': Optional[List[ECSTag]],
    }
)


ECSListTaskDefinitionFamiliesResponse = TypedDict(
    'ECSListTaskDefinitionFamiliesResponse', {
        'StringList': Optional[List[str]],
        'String': Optional[str],
    }
)


ECSListTaskDefinitionsResponse = TypedDict(
    'ECSListTaskDefinitionsResponse', {
        'StringList': Optional[List[str]],
        'String': Optional[str],
    }
)


ECSListTasksResponse = TypedDict(
    'ECSListTasksResponse', {
        'StringList': Optional[List[str]],
        'String': Optional[str],
    }
)


ECSPutAccountSettingResponse = TypedDict(
    'ECSPutAccountSettingResponse', {
        'Setting': Optional[ECSSetting],
    }
)


ECSPutAccountSettingDefaultResponse = TypedDict(
    'ECSPutAccountSettingDefaultResponse', {
        'Setting': Optional[ECSSetting],
    }
)


ECSPutAttributesResponse = TypedDict(
    'ECSPutAttributesResponse', {
        'Attributes': Optional[List[ECSAttribute]],
    }
)


ECSPlatformDevice = TypedDict(
    'ECSPlatformDevice', {
        'String': str,
        'PlatformDeviceType': str,
    }
)


ECSRegisterContainerInstanceResponse = TypedDict(
    'ECSRegisterContainerInstanceResponse', {
        'ContainerInstance': Optional[ECSContainerInstance],
    }
)


ECSRegisterTaskDefinitionResponse = TypedDict(
    'ECSRegisterTaskDefinitionResponse', {
        'TaskDefinition': Optional[ECSTaskDefinition],
        'Tags': Optional[List[ECSTag]],
    }
)


ECSRunTaskResponse = TypedDict(
    'ECSRunTaskResponse', {
        'Tasks': Optional[List[ECSTask]],
        'Failures': Optional[List[ECSFailure]],
    }
)


ECSStartTaskResponse = TypedDict(
    'ECSStartTaskResponse', {
        'Tasks': Optional[List[ECSTask]],
        'Failures': Optional[List[ECSFailure]],
    }
)


ECSStopTaskResponse = TypedDict(
    'ECSStopTaskResponse', {
        'Task': Optional[ECSTask],
    }
)


ECSSubmitContainerStateChangeResponse = TypedDict(
    'ECSSubmitContainerStateChangeResponse', {
        'String': Optional[str],
    }
)


ECSContainerStateChange = TypedDict(
    'ECSContainerStateChange', {
        'String': Optional[str],
        'BoxedInteger': Optional[int],
        'NetworkBindings': Optional[List[ECSNetworkBinding]],
        'String': Optional[str],
        'String': Optional[str],
    }
)


ECSAttachmentStateChange = TypedDict(
    'ECSAttachmentStateChange', {
        'String': str,
        'String': str,
    }
)


ECSSubmitTaskStateChangeResponse = TypedDict(
    'ECSSubmitTaskStateChangeResponse', {
        'String': Optional[str],
    }
)


ECSTagResourceResponse = TypedDict(
    'ECSTagResourceResponse', {
    }
)


ECSUntagResourceResponse = TypedDict(
    'ECSUntagResourceResponse', {
    }
)


ECSUpdateContainerAgentResponse = TypedDict(
    'ECSUpdateContainerAgentResponse', {
        'ContainerInstance': Optional[ECSContainerInstance],
    }
)


ECSUpdateContainerInstancesStateResponse = TypedDict(
    'ECSUpdateContainerInstancesStateResponse', {
        'ContainerInstances': Optional[List[ECSContainerInstance]],
        'Failures': Optional[List[ECSFailure]],
    }
)


ECSUpdateServiceResponse = TypedDict(
    'ECSUpdateServiceResponse', {
        'Service': Optional[ECSService],
    }
)


ECSUpdateServicePrimaryTaskSetResponse = TypedDict(
    'ECSUpdateServicePrimaryTaskSetResponse', {
        'TaskSet': Optional[ECSTaskSet],
    }
)


ECSUpdateTaskSetResponse = TypedDict(
    'ECSUpdateTaskSetResponse', {
        'TaskSet': Optional[ECSTaskSet],
    }
)


class EFS(BaseClient):
    def create_file_system(self, *,
        CreationToken: str,
        PerformanceMode: str = ...,
        Encrypted: bool = ...,
        KmsKeyId: str = ...,
        ThroughputMode: str = ...,
        ProvisionedThroughputInMibps: float = ...,
        Tags: List[EFSTag] = ...
    ) -> EFSFileSystemDescription: ...

    def create_mount_target(self, *,
        FileSystemId: str,
        SubnetId: str,
        IpAddress: str = ...,
        SecurityGroups: List[str] = ...
    ) -> EFSMountTargetDescription: ...

    def create_tags(self, *,
        FileSystemId: str,
        Tags: List[EFSTag]
    ): ...

    def delete_file_system(self, *,
        FileSystemId: str
    ): ...

    def delete_mount_target(self, *,
        MountTargetId: str
    ): ...

    def delete_tags(self, *,
        FileSystemId: str,
        TagKeys: List[str]
    ): ...

    def describe_file_systems(self, *,
        MaxItems: int = ...,
        Marker: str = ...,
        CreationToken: str = ...,
        FileSystemId: str = ...
    ) -> EFSDescribeFileSystemsResponse: ...

    def describe_lifecycle_configuration(self, *,
        FileSystemId: str
    ) -> EFSLifecycleConfigurationDescription: ...

    def describe_mount_target_security_groups(self, *,
        MountTargetId: str
    ) -> EFSDescribeMountTargetSecurityGroupsResponse: ...

    def describe_mount_targets(self, *,
        MaxItems: int = ...,
        Marker: str = ...,
        FileSystemId: str = ...,
        MountTargetId: str = ...
    ) -> EFSDescribeMountTargetsResponse: ...

    def describe_tags(self, *,
        FileSystemId: str,
        MaxItems: int = ...,
        Marker: str = ...
    ) -> EFSDescribeTagsResponse: ...

    def modify_mount_target_security_groups(self, *,
        MountTargetId: str,
        SecurityGroups: List[str] = ...
    ): ...

    def put_lifecycle_configuration(self, *,
        FileSystemId: str,
        LifecyclePolicies: List[EFSLifecyclePolicy]
    ) -> EFSLifecycleConfigurationDescription: ...

    def update_file_system(self, *,
        FileSystemId: str,
        ThroughputMode: str = ...,
        ProvisionedThroughputInMibps: float = ...
    ) -> EFSFileSystemDescription: ...


EFSTag = TypedDict(
    'EFSTag', {
        'TagKey': str,
        'TagValue': str,
    }
)


EFSFileSystemSize = TypedDict(
    'EFSFileSystemSize', {
        'FileSystemSizeValue': int,
        'Timestamp': Optional[datetime.datetime],
        'FileSystemNullableSizeValue': Optional[int],
        'FileSystemNullableSizeValue': Optional[int],
    }
)


EFSFileSystemDescription = TypedDict(
    'EFSFileSystemDescription', {
        'AwsAccountId': str,
        'CreationToken': str,
        'FileSystemId': str,
        'Timestamp': datetime.datetime,
        'LifeCycleState': str,
        'MountTargetCount': int,
        'FileSystemSize': EFSFileSystemSize,
        'PerformanceMode': str,
        'Tags': List[EFSTag],
        'TagValue': Optional[str],
        'Encrypted': Optional[bool],
        'KmsKeyId': Optional[str],
        'ThroughputMode': Optional[str],
        'ProvisionedThroughputInMibps': Optional[float],
    }
)


EFSMountTargetDescription = TypedDict(
    'EFSMountTargetDescription', {
        'MountTargetId': str,
        'FileSystemId': str,
        'SubnetId': str,
        'LifeCycleState': str,
        'AwsAccountId': Optional[str],
        'IpAddress': Optional[str],
        'NetworkInterfaceId': Optional[str],
    }
)


EFSDescribeFileSystemsResponse = TypedDict(
    'EFSDescribeFileSystemsResponse', {
        'Marker': Optional[str],
        'FileSystemDescriptions': Optional[List[EFSFileSystemDescription]],
        'Marker': Optional[str],
    }
)


EFSLifecyclePolicy = TypedDict(
    'EFSLifecyclePolicy', {
        'TransitionToIARules': Optional[str],
    }
)


EFSLifecycleConfigurationDescription = TypedDict(
    'EFSLifecycleConfigurationDescription', {
        'LifecyclePolicies': Optional[List[EFSLifecyclePolicy]],
    }
)


EFSDescribeMountTargetSecurityGroupsResponse = TypedDict(
    'EFSDescribeMountTargetSecurityGroupsResponse', {
        'SecurityGroups': List[str],
    }
)


EFSDescribeMountTargetsResponse = TypedDict(
    'EFSDescribeMountTargetsResponse', {
        'Marker': Optional[str],
        'MountTargetDescriptions': Optional[List[EFSMountTargetDescription]],
        'Marker': Optional[str],
    }
)


EFSDescribeTagsResponse = TypedDict(
    'EFSDescribeTagsResponse', {
        'Tags': List[EFSTag],
        'Marker': Optional[str],
        'Marker': Optional[str],
    }
)


class EKS(BaseClient):
    def create_cluster(self, *,
        name: str,
        roleArn: str,
        resourcesVpcConfig: EKSVpcConfigRequest,
        version: str = ...,
        logging: EKSLogging = ...,
        clientRequestToken: str = ...
    ) -> EKSCreateClusterResponse: ...

    def delete_cluster(self, *,
        name: str
    ) -> EKSDeleteClusterResponse: ...

    def describe_cluster(self, *,
        name: str
    ) -> EKSDescribeClusterResponse: ...

    def describe_update(self, *,
        name: str,
        updateId: str
    ) -> EKSDescribeUpdateResponse: ...

    def list_clusters(self, *,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> EKSListClustersResponse: ...

    def list_updates(self, *,
        name: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> EKSListUpdatesResponse: ...

    def update_cluster_config(self, *,
        name: str,
        resourcesVpcConfig: EKSVpcConfigRequest = ...,
        logging: EKSLogging = ...,
        clientRequestToken: str = ...
    ) -> EKSUpdateClusterConfigResponse: ...

    def update_cluster_version(self, *,
        name: str,
        version: str,
        clientRequestToken: str = ...
    ) -> EKSUpdateClusterVersionResponse: ...


EKSVpcConfigRequest = TypedDict(
    'EKSVpcConfigRequest', {
        'StringList': Optional[List[str]],
        'StringList': Optional[List[str]],
        'BoxedBoolean': Optional[bool],
        'BoxedBoolean': Optional[bool],
    }
)


EKSLogSetup = TypedDict(
    'EKSLogSetup', {
        'LogTypes': Optional[List[str]],
        'BoxedBoolean': Optional[bool],
    }
)


EKSLogging = TypedDict(
    'EKSLogging', {
        'LogSetups': Optional[List[EKSLogSetup]],
    }
)


EKSVpcConfigResponse = TypedDict(
    'EKSVpcConfigResponse', {
        'StringList': Optional[List[str]],
        'StringList': Optional[List[str]],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
    }
)


EKSCertificate = TypedDict(
    'EKSCertificate', {
        'String': Optional[str],
    }
)


EKSCluster = TypedDict(
    'EKSCluster', {
        'String': Optional[str],
        'String': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'VpcConfigResponse': Optional[EKSVpcConfigResponse],
        'Logging': Optional[EKSLogging],
        'ClusterStatus': Optional[str],
        'Certificate': Optional[EKSCertificate],
        'String': Optional[str],
        'String': Optional[str],
    }
)


EKSCreateClusterResponse = TypedDict(
    'EKSCreateClusterResponse', {
        'Cluster': Optional[EKSCluster],
    }
)


EKSDeleteClusterResponse = TypedDict(
    'EKSDeleteClusterResponse', {
        'Cluster': Optional[EKSCluster],
    }
)


EKSDescribeClusterResponse = TypedDict(
    'EKSDescribeClusterResponse', {
        'Cluster': Optional[EKSCluster],
    }
)


EKSUpdateParam = TypedDict(
    'EKSUpdateParam', {
        'UpdateParamType': Optional[str],
        'String': Optional[str],
    }
)


EKSErrorDetail = TypedDict(
    'EKSErrorDetail', {
        'ErrorCode': Optional[str],
        'String': Optional[str],
        'StringList': Optional[List[str]],
    }
)


EKSUpdate = TypedDict(
    'EKSUpdate', {
        'String': Optional[str],
        'UpdateStatus': Optional[str],
        'UpdateType': Optional[str],
        'UpdateParams': Optional[List[EKSUpdateParam]],
        'Timestamp': Optional[datetime.datetime],
        'ErrorDetails': Optional[List[EKSErrorDetail]],
    }
)


EKSDescribeUpdateResponse = TypedDict(
    'EKSDescribeUpdateResponse', {
        'Update': Optional[EKSUpdate],
    }
)


EKSListClustersResponse = TypedDict(
    'EKSListClustersResponse', {
        'StringList': Optional[List[str]],
        'String': Optional[str],
    }
)


EKSListUpdatesResponse = TypedDict(
    'EKSListUpdatesResponse', {
        'StringList': Optional[List[str]],
        'String': Optional[str],
    }
)


EKSUpdateClusterConfigResponse = TypedDict(
    'EKSUpdateClusterConfigResponse', {
        'Update': Optional[EKSUpdate],
    }
)


EKSUpdateClusterVersionResponse = TypedDict(
    'EKSUpdateClusterVersionResponse', {
        'Update': Optional[EKSUpdate],
    }
)


class ElastiCache(BaseClient):
    def add_tags_to_resource(self, *,
        ResourceName: str,
        Tags: List[ElastiCacheTag]
    ) -> ElastiCacheTagListMessage: ...

    def authorize_cache_security_group_ingress(self, *,
        CacheSecurityGroupName: str,
        EC2SecurityGroupName: str,
        EC2SecurityGroupOwnerId: str
    ) -> ElastiCacheAuthorizeCacheSecurityGroupIngressResult: ...

    def copy_snapshot(self, *,
        SourceSnapshotName: str,
        TargetSnapshotName: str,
        TargetBucket: str = ...
    ) -> ElastiCacheCopySnapshotResult: ...

    def create_cache_cluster(self, *,
        CacheClusterId: str,
        ReplicationGroupId: str = ...,
        AZMode: str = ...,
        PreferredAvailabilityZone: str = ...,
        PreferredAvailabilityZones: List[str] = ...,
        NumCacheNodes: int = ...,
        CacheNodeType: str = ...,
        Engine: str = ...,
        EngineVersion: str = ...,
        CacheParameterGroupName: str = ...,
        CacheSubnetGroupName: str = ...,
        CacheSecurityGroupNames: List[str] = ...,
        SecurityGroupIds: List[str] = ...,
        Tags: List[ElastiCacheTag] = ...,
        SnapshotArns: List[str] = ...,
        SnapshotName: str = ...,
        PreferredMaintenanceWindow: str = ...,
        Port: int = ...,
        NotificationTopicArn: str = ...,
        AutoMinorVersionUpgrade: bool = ...,
        SnapshotRetentionLimit: int = ...,
        SnapshotWindow: str = ...,
        AuthToken: str = ...
    ) -> ElastiCacheCreateCacheClusterResult: ...

    def create_cache_parameter_group(self, *,
        CacheParameterGroupName: str,
        CacheParameterGroupFamily: str,
        Description: str
    ) -> ElastiCacheCreateCacheParameterGroupResult: ...

    def create_cache_security_group(self, *,
        CacheSecurityGroupName: str,
        Description: str
    ) -> ElastiCacheCreateCacheSecurityGroupResult: ...

    def create_cache_subnet_group(self, *,
        CacheSubnetGroupName: str,
        CacheSubnetGroupDescription: str,
        SubnetIds: List[str]
    ) -> ElastiCacheCreateCacheSubnetGroupResult: ...

    def create_replication_group(self, *,
        ReplicationGroupId: str,
        ReplicationGroupDescription: str,
        PrimaryClusterId: str = ...,
        AutomaticFailoverEnabled: bool = ...,
        NumCacheClusters: int = ...,
        PreferredCacheClusterAZs: List[str] = ...,
        NumNodeGroups: int = ...,
        ReplicasPerNodeGroup: int = ...,
        NodeGroupConfiguration: List[ElastiCacheNodeGroupConfiguration] = ...,
        CacheNodeType: str = ...,
        Engine: str = ...,
        EngineVersion: str = ...,
        CacheParameterGroupName: str = ...,
        CacheSubnetGroupName: str = ...,
        CacheSecurityGroupNames: List[str] = ...,
        SecurityGroupIds: List[str] = ...,
        Tags: List[ElastiCacheTag] = ...,
        SnapshotArns: List[str] = ...,
        SnapshotName: str = ...,
        PreferredMaintenanceWindow: str = ...,
        Port: int = ...,
        NotificationTopicArn: str = ...,
        AutoMinorVersionUpgrade: bool = ...,
        SnapshotRetentionLimit: int = ...,
        SnapshotWindow: str = ...,
        AuthToken: str = ...,
        TransitEncryptionEnabled: bool = ...,
        AtRestEncryptionEnabled: bool = ...
    ) -> ElastiCacheCreateReplicationGroupResult: ...

    def create_snapshot(self, *,
        SnapshotName: str,
        ReplicationGroupId: str = ...,
        CacheClusterId: str = ...
    ) -> ElastiCacheCreateSnapshotResult: ...

    def decrease_replica_count(self, *,
        ReplicationGroupId: str,
        ApplyImmediately: bool,
        NewReplicaCount: int = ...,
        ReplicaConfiguration: List[ElastiCacheConfigureShard] = ...,
        ReplicasToRemove: List[str] = ...
    ) -> ElastiCacheDecreaseReplicaCountResult: ...

    def delete_cache_cluster(self, *,
        CacheClusterId: str,
        FinalSnapshotIdentifier: str = ...
    ) -> ElastiCacheDeleteCacheClusterResult: ...

    def delete_cache_parameter_group(self, *,
        CacheParameterGroupName: str
    ): ...

    def delete_cache_security_group(self, *,
        CacheSecurityGroupName: str
    ): ...

    def delete_cache_subnet_group(self, *,
        CacheSubnetGroupName: str
    ): ...

    def delete_replication_group(self, *,
        ReplicationGroupId: str,
        RetainPrimaryCluster: bool = ...,
        FinalSnapshotIdentifier: str = ...
    ) -> ElastiCacheDeleteReplicationGroupResult: ...

    def delete_snapshot(self, *,
        SnapshotName: str
    ) -> ElastiCacheDeleteSnapshotResult: ...

    def describe_cache_clusters(self, *,
        CacheClusterId: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        ShowCacheNodeInfo: bool = ...,
        ShowCacheClustersNotInReplicationGroups: bool = ...
    ) -> ElastiCacheCacheClusterMessage: ...

    def describe_cache_engine_versions(self, *,
        Engine: str = ...,
        EngineVersion: str = ...,
        CacheParameterGroupFamily: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        DefaultOnly: bool = ...
    ) -> ElastiCacheCacheEngineVersionMessage: ...

    def describe_cache_parameter_groups(self, *,
        CacheParameterGroupName: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> ElastiCacheCacheParameterGroupsMessage: ...

    def describe_cache_parameters(self, *,
        CacheParameterGroupName: str,
        Source: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> ElastiCacheCacheParameterGroupDetails: ...

    def describe_cache_security_groups(self, *,
        CacheSecurityGroupName: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> ElastiCacheCacheSecurityGroupMessage: ...

    def describe_cache_subnet_groups(self, *,
        CacheSubnetGroupName: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> ElastiCacheCacheSubnetGroupMessage: ...

    def describe_engine_default_parameters(self, *,
        CacheParameterGroupFamily: str,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> ElastiCacheDescribeEngineDefaultParametersResult: ...

    def describe_events(self, *,
        SourceIdentifier: str = ...,
        SourceType: str = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        Duration: int = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> ElastiCacheEventsMessage: ...

    def describe_replication_groups(self, *,
        ReplicationGroupId: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> ElastiCacheReplicationGroupMessage: ...

    def describe_reserved_cache_nodes(self, *,
        ReservedCacheNodeId: str = ...,
        ReservedCacheNodesOfferingId: str = ...,
        CacheNodeType: str = ...,
        Duration: str = ...,
        ProductDescription: str = ...,
        OfferingType: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> ElastiCacheReservedCacheNodeMessage: ...

    def describe_reserved_cache_nodes_offerings(self, *,
        ReservedCacheNodesOfferingId: str = ...,
        CacheNodeType: str = ...,
        Duration: str = ...,
        ProductDescription: str = ...,
        OfferingType: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> ElastiCacheReservedCacheNodesOfferingMessage: ...

    def describe_snapshots(self, *,
        ReplicationGroupId: str = ...,
        CacheClusterId: str = ...,
        SnapshotName: str = ...,
        SnapshotSource: str = ...,
        Marker: str = ...,
        MaxRecords: int = ...,
        ShowNodeGroupConfig: bool = ...
    ) -> ElastiCacheDescribeSnapshotsListMessage: ...

    def increase_replica_count(self, *,
        ReplicationGroupId: str,
        ApplyImmediately: bool,
        NewReplicaCount: int = ...,
        ReplicaConfiguration: List[ElastiCacheConfigureShard] = ...
    ) -> ElastiCacheIncreaseReplicaCountResult: ...

    def list_allowed_node_type_modifications(self, *,
        CacheClusterId: str = ...,
        ReplicationGroupId: str = ...
    ) -> ElastiCacheAllowedNodeTypeModificationsMessage: ...

    def list_tags_for_resource(self, *,
        ResourceName: str
    ) -> ElastiCacheTagListMessage: ...

    def modify_cache_cluster(self, *,
        CacheClusterId: str,
        NumCacheNodes: int = ...,
        CacheNodeIdsToRemove: List[str] = ...,
        AZMode: str = ...,
        NewAvailabilityZones: List[str] = ...,
        CacheSecurityGroupNames: List[str] = ...,
        SecurityGroupIds: List[str] = ...,
        PreferredMaintenanceWindow: str = ...,
        NotificationTopicArn: str = ...,
        CacheParameterGroupName: str = ...,
        NotificationTopicStatus: str = ...,
        ApplyImmediately: bool = ...,
        EngineVersion: str = ...,
        AutoMinorVersionUpgrade: bool = ...,
        SnapshotRetentionLimit: int = ...,
        SnapshotWindow: str = ...,
        CacheNodeType: str = ...
    ) -> ElastiCacheModifyCacheClusterResult: ...

    def modify_cache_parameter_group(self, *,
        CacheParameterGroupName: str,
        ParameterNameValues: List[ElastiCacheParameterNameValue]
    ) -> ElastiCacheCacheParameterGroupNameMessage: ...

    def modify_cache_subnet_group(self, *,
        CacheSubnetGroupName: str,
        CacheSubnetGroupDescription: str = ...,
        SubnetIds: List[str] = ...
    ) -> ElastiCacheModifyCacheSubnetGroupResult: ...

    def modify_replication_group(self, *,
        ReplicationGroupId: str,
        ReplicationGroupDescription: str = ...,
        PrimaryClusterId: str = ...,
        SnapshottingClusterId: str = ...,
        AutomaticFailoverEnabled: bool = ...,
        CacheSecurityGroupNames: List[str] = ...,
        SecurityGroupIds: List[str] = ...,
        PreferredMaintenanceWindow: str = ...,
        NotificationTopicArn: str = ...,
        CacheParameterGroupName: str = ...,
        NotificationTopicStatus: str = ...,
        ApplyImmediately: bool = ...,
        EngineVersion: str = ...,
        AutoMinorVersionUpgrade: bool = ...,
        SnapshotRetentionLimit: int = ...,
        SnapshotWindow: str = ...,
        CacheNodeType: str = ...,
        NodeGroupId: str = ...
    ) -> ElastiCacheModifyReplicationGroupResult: ...

    def modify_replication_group_shard_configuration(self, *,
        ReplicationGroupId: str,
        NodeGroupCount: int,
        ApplyImmediately: bool,
        ReshardingConfiguration: List[ElastiCacheReshardingConfiguration] = ...,
        NodeGroupsToRemove: List[str] = ...,
        NodeGroupsToRetain: List[str] = ...
    ) -> ElastiCacheModifyReplicationGroupShardConfigurationResult: ...

    def purchase_reserved_cache_nodes_offering(self, *,
        ReservedCacheNodesOfferingId: str,
        ReservedCacheNodeId: str = ...,
        CacheNodeCount: int = ...
    ) -> ElastiCachePurchaseReservedCacheNodesOfferingResult: ...

    def reboot_cache_cluster(self, *,
        CacheClusterId: str,
        CacheNodeIdsToReboot: List[str]
    ) -> ElastiCacheRebootCacheClusterResult: ...

    def remove_tags_from_resource(self, *,
        ResourceName: str,
        TagKeys: List[str]
    ) -> ElastiCacheTagListMessage: ...

    def reset_cache_parameter_group(self, *,
        CacheParameterGroupName: str,
        ResetAllParameters: bool = ...,
        ParameterNameValues: List[ElastiCacheParameterNameValue] = ...
    ) -> ElastiCacheCacheParameterGroupNameMessage: ...

    def revoke_cache_security_group_ingress(self, *,
        CacheSecurityGroupName: str,
        EC2SecurityGroupName: str,
        EC2SecurityGroupOwnerId: str
    ) -> ElastiCacheRevokeCacheSecurityGroupIngressResult: ...

    def test_failover(self, *,
        ReplicationGroupId: str,
        NodeGroupId: str
    ) -> ElastiCacheTestFailoverResult: ...


ElastiCacheTag = TypedDict(
    'ElastiCacheTag', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


ElastiCacheTagListMessage = TypedDict(
    'ElastiCacheTagListMessage', {
        'TagList': Optional[List[ElastiCacheTag]],
    }
)


ElastiCacheEC2SecurityGroup = TypedDict(
    'ElastiCacheEC2SecurityGroup', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


ElastiCacheCacheSecurityGroup = TypedDict(
    'ElastiCacheCacheSecurityGroup', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'EC2SecurityGroupList': Optional[List[ElastiCacheEC2SecurityGroup]],
    }
)


ElastiCacheAuthorizeCacheSecurityGroupIngressResult = TypedDict(
    'ElastiCacheAuthorizeCacheSecurityGroupIngressResult', {
        'CacheSecurityGroup': Optional[ElastiCacheCacheSecurityGroup],
    }
)


ElastiCacheNodeGroupConfiguration = TypedDict(
    'ElastiCacheNodeGroupConfiguration', {
        'AllowedNodeGroupId': Optional[str],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'AvailabilityZonesList': Optional[List[str]],
    }
)


ElastiCacheNodeSnapshot = TypedDict(
    'ElastiCacheNodeSnapshot', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'NodeGroupConfiguration': Optional[ElastiCacheNodeGroupConfiguration],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'TStamp': Optional[datetime.datetime],
    }
)


ElastiCacheSnapshot = TypedDict(
    'ElastiCacheSnapshot', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'AutomaticFailoverStatus': Optional[str],
        'NodeSnapshotList': Optional[List[ElastiCacheNodeSnapshot]],
    }
)


ElastiCacheCopySnapshotResult = TypedDict(
    'ElastiCacheCopySnapshotResult', {
        'Snapshot': Optional[ElastiCacheSnapshot],
    }
)


ElastiCacheEndpoint = TypedDict(
    'ElastiCacheEndpoint', {
        'String': Optional[str],
        'Integer': Optional[int],
    }
)


ElastiCachePendingModifiedValues = TypedDict(
    'ElastiCachePendingModifiedValues', {
        'IntegerOptional': Optional[int],
        'CacheNodeIdsList': Optional[List[str]],
        'String': Optional[str],
        'String': Optional[str],
    }
)


ElastiCacheNotificationConfiguration = TypedDict(
    'ElastiCacheNotificationConfiguration', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


ElastiCacheCacheSecurityGroupMembership = TypedDict(
    'ElastiCacheCacheSecurityGroupMembership', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


ElastiCacheCacheParameterGroupStatus = TypedDict(
    'ElastiCacheCacheParameterGroupStatus', {
        'String': Optional[str],
        'String': Optional[str],
        'CacheNodeIdsList': Optional[List[str]],
    }
)


ElastiCacheCacheNode = TypedDict(
    'ElastiCacheCacheNode', {
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'Endpoint': Optional[ElastiCacheEndpoint],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


ElastiCacheSecurityGroupMembership = TypedDict(
    'ElastiCacheSecurityGroupMembership', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


ElastiCacheCacheCluster = TypedDict(
    'ElastiCacheCacheCluster', {
        'String': Optional[str],
        'Endpoint': Optional[ElastiCacheEndpoint],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'PendingModifiedValues': Optional[ElastiCachePendingModifiedValues],
        'NotificationConfiguration': Optional[ElastiCacheNotificationConfiguration],
        'CacheSecurityGroupMembershipList': Optional[List[ElastiCacheCacheSecurityGroupMembership]],
        'CacheParameterGroupStatus': Optional[ElastiCacheCacheParameterGroupStatus],
        'String': Optional[str],
        'CacheNodeList': Optional[List[ElastiCacheCacheNode]],
        'Boolean': Optional[bool],
        'SecurityGroupMembershipList': Optional[List[ElastiCacheSecurityGroupMembership]],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'BooleanOptional': Optional[bool],
        'BooleanOptional': Optional[bool],
        'BooleanOptional': Optional[bool],
    }
)


ElastiCacheCreateCacheClusterResult = TypedDict(
    'ElastiCacheCreateCacheClusterResult', {
        'CacheCluster': Optional[ElastiCacheCacheCluster],
    }
)


ElastiCacheCacheParameterGroup = TypedDict(
    'ElastiCacheCacheParameterGroup', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


ElastiCacheCreateCacheParameterGroupResult = TypedDict(
    'ElastiCacheCreateCacheParameterGroupResult', {
        'CacheParameterGroup': Optional[ElastiCacheCacheParameterGroup],
    }
)


ElastiCacheCreateCacheSecurityGroupResult = TypedDict(
    'ElastiCacheCreateCacheSecurityGroupResult', {
        'CacheSecurityGroup': Optional[ElastiCacheCacheSecurityGroup],
    }
)


ElastiCacheAvailabilityZone = TypedDict(
    'ElastiCacheAvailabilityZone', {
        'String': Optional[str],
    }
)


ElastiCacheSubnet = TypedDict(
    'ElastiCacheSubnet', {
        'String': Optional[str],
        'AvailabilityZone': Optional[ElastiCacheAvailabilityZone],
    }
)


ElastiCacheCacheSubnetGroup = TypedDict(
    'ElastiCacheCacheSubnetGroup', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'SubnetList': Optional[List[ElastiCacheSubnet]],
    }
)


ElastiCacheCreateCacheSubnetGroupResult = TypedDict(
    'ElastiCacheCreateCacheSubnetGroupResult', {
        'CacheSubnetGroup': Optional[ElastiCacheCacheSubnetGroup],
    }
)


ElastiCacheSlotMigration = TypedDict(
    'ElastiCacheSlotMigration', {
        'Double': Optional[float],
    }
)


ElastiCacheReshardingStatus = TypedDict(
    'ElastiCacheReshardingStatus', {
        'SlotMigration': Optional[ElastiCacheSlotMigration],
    }
)


ElastiCacheReplicationGroupPendingModifiedValues = TypedDict(
    'ElastiCacheReplicationGroupPendingModifiedValues', {
        'String': Optional[str],
        'PendingAutomaticFailoverStatus': Optional[str],
        'ReshardingStatus': Optional[ElastiCacheReshardingStatus],
    }
)


ElastiCacheNodeGroupMember = TypedDict(
    'ElastiCacheNodeGroupMember', {
        'String': Optional[str],
        'String': Optional[str],
        'Endpoint': Optional[ElastiCacheEndpoint],
        'String': Optional[str],
        'String': Optional[str],
    }
)


ElastiCacheNodeGroup = TypedDict(
    'ElastiCacheNodeGroup', {
        'String': Optional[str],
        'String': Optional[str],
        'Endpoint': Optional[ElastiCacheEndpoint],
        'String': Optional[str],
        'NodeGroupMemberList': Optional[List[ElastiCacheNodeGroupMember]],
    }
)


ElastiCacheReplicationGroup = TypedDict(
    'ElastiCacheReplicationGroup', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'ReplicationGroupPendingModifiedValues': Optional[ElastiCacheReplicationGroupPendingModifiedValues],
        'ClusterIdList': Optional[List[str]],
        'NodeGroupList': Optional[List[ElastiCacheNodeGroup]],
        'String': Optional[str],
        'AutomaticFailoverStatus': Optional[str],
        'Endpoint': Optional[ElastiCacheEndpoint],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'BooleanOptional': Optional[bool],
        'String': Optional[str],
        'BooleanOptional': Optional[bool],
        'BooleanOptional': Optional[bool],
        'BooleanOptional': Optional[bool],
    }
)


ElastiCacheCreateReplicationGroupResult = TypedDict(
    'ElastiCacheCreateReplicationGroupResult', {
        'ReplicationGroup': Optional[ElastiCacheReplicationGroup],
    }
)


ElastiCacheCreateSnapshotResult = TypedDict(
    'ElastiCacheCreateSnapshotResult', {
        'Snapshot': Optional[ElastiCacheSnapshot],
    }
)


ElastiCacheConfigureShard = TypedDict(
    'ElastiCacheConfigureShard', {
        'AllowedNodeGroupId': str,
        'Integer': int,
        'PreferredAvailabilityZoneList': Optional[List[str]],
    }
)


ElastiCacheDecreaseReplicaCountResult = TypedDict(
    'ElastiCacheDecreaseReplicaCountResult', {
        'ReplicationGroup': Optional[ElastiCacheReplicationGroup],
    }
)


ElastiCacheDeleteCacheClusterResult = TypedDict(
    'ElastiCacheDeleteCacheClusterResult', {
        'CacheCluster': Optional[ElastiCacheCacheCluster],
    }
)


ElastiCacheDeleteReplicationGroupResult = TypedDict(
    'ElastiCacheDeleteReplicationGroupResult', {
        'ReplicationGroup': Optional[ElastiCacheReplicationGroup],
    }
)


ElastiCacheDeleteSnapshotResult = TypedDict(
    'ElastiCacheDeleteSnapshotResult', {
        'Snapshot': Optional[ElastiCacheSnapshot],
    }
)


ElastiCacheCacheClusterMessage = TypedDict(
    'ElastiCacheCacheClusterMessage', {
        'String': Optional[str],
        'CacheClusterList': Optional[List[ElastiCacheCacheCluster]],
    }
)


ElastiCacheCacheEngineVersion = TypedDict(
    'ElastiCacheCacheEngineVersion', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


ElastiCacheCacheEngineVersionMessage = TypedDict(
    'ElastiCacheCacheEngineVersionMessage', {
        'String': Optional[str],
        'CacheEngineVersionList': Optional[List[ElastiCacheCacheEngineVersion]],
    }
)


ElastiCacheCacheParameterGroupsMessage = TypedDict(
    'ElastiCacheCacheParameterGroupsMessage', {
        'String': Optional[str],
        'CacheParameterGroupList': Optional[List[ElastiCacheCacheParameterGroup]],
    }
)


ElastiCacheParameter = TypedDict(
    'ElastiCacheParameter', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'ChangeType': Optional[str],
    }
)


ElastiCacheCacheNodeTypeSpecificValue = TypedDict(
    'ElastiCacheCacheNodeTypeSpecificValue', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


ElastiCacheCacheNodeTypeSpecificParameter = TypedDict(
    'ElastiCacheCacheNodeTypeSpecificParameter', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'CacheNodeTypeSpecificValueList': Optional[List[ElastiCacheCacheNodeTypeSpecificValue]],
        'ChangeType': Optional[str],
    }
)


ElastiCacheCacheParameterGroupDetails = TypedDict(
    'ElastiCacheCacheParameterGroupDetails', {
        'String': Optional[str],
        'ParametersList': Optional[List[ElastiCacheParameter]],
        'CacheNodeTypeSpecificParametersList': Optional[List[ElastiCacheCacheNodeTypeSpecificParameter]],
    }
)


ElastiCacheCacheSecurityGroupMessage = TypedDict(
    'ElastiCacheCacheSecurityGroupMessage', {
        'String': Optional[str],
        'CacheSecurityGroups': Optional[List[ElastiCacheCacheSecurityGroup]],
    }
)


ElastiCacheCacheSubnetGroupMessage = TypedDict(
    'ElastiCacheCacheSubnetGroupMessage', {
        'String': Optional[str],
        'CacheSubnetGroups': Optional[List[ElastiCacheCacheSubnetGroup]],
    }
)


ElastiCacheEngineDefaults = TypedDict(
    'ElastiCacheEngineDefaults', {
        'String': Optional[str],
        'String': Optional[str],
        'ParametersList': Optional[List[ElastiCacheParameter]],
        'CacheNodeTypeSpecificParametersList': Optional[List[ElastiCacheCacheNodeTypeSpecificParameter]],
    }
)


ElastiCacheDescribeEngineDefaultParametersResult = TypedDict(
    'ElastiCacheDescribeEngineDefaultParametersResult', {
        'EngineDefaults': Optional[ElastiCacheEngineDefaults],
    }
)


ElastiCacheEvent = TypedDict(
    'ElastiCacheEvent', {
        'String': Optional[str],
        'SourceType': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
    }
)


ElastiCacheEventsMessage = TypedDict(
    'ElastiCacheEventsMessage', {
        'String': Optional[str],
        'EventList': Optional[List[ElastiCacheEvent]],
    }
)


ElastiCacheReplicationGroupMessage = TypedDict(
    'ElastiCacheReplicationGroupMessage', {
        'String': Optional[str],
        'ReplicationGroupList': Optional[List[ElastiCacheReplicationGroup]],
    }
)


ElastiCacheRecurringCharge = TypedDict(
    'ElastiCacheRecurringCharge', {
        'Double': Optional[float],
        'String': Optional[str],
    }
)


ElastiCacheReservedCacheNode = TypedDict(
    'ElastiCacheReservedCacheNode', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'Integer': Optional[int],
        'Double': Optional[float],
        'Double': Optional[float],
        'Integer': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'RecurringChargeList': Optional[List[ElastiCacheRecurringCharge]],
        'String': Optional[str],
    }
)


ElastiCacheReservedCacheNodeMessage = TypedDict(
    'ElastiCacheReservedCacheNodeMessage', {
        'String': Optional[str],
        'ReservedCacheNodeList': Optional[List[ElastiCacheReservedCacheNode]],
    }
)


ElastiCacheReservedCacheNodesOffering = TypedDict(
    'ElastiCacheReservedCacheNodesOffering', {
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'Double': Optional[float],
        'Double': Optional[float],
        'String': Optional[str],
        'String': Optional[str],
        'RecurringChargeList': Optional[List[ElastiCacheRecurringCharge]],
    }
)


ElastiCacheReservedCacheNodesOfferingMessage = TypedDict(
    'ElastiCacheReservedCacheNodesOfferingMessage', {
        'String': Optional[str],
        'ReservedCacheNodesOfferingList': Optional[List[ElastiCacheReservedCacheNodesOffering]],
    }
)


ElastiCacheDescribeSnapshotsListMessage = TypedDict(
    'ElastiCacheDescribeSnapshotsListMessage', {
        'String': Optional[str],
        'SnapshotList': Optional[List[ElastiCacheSnapshot]],
    }
)


ElastiCacheIncreaseReplicaCountResult = TypedDict(
    'ElastiCacheIncreaseReplicaCountResult', {
        'ReplicationGroup': Optional[ElastiCacheReplicationGroup],
    }
)


ElastiCacheAllowedNodeTypeModificationsMessage = TypedDict(
    'ElastiCacheAllowedNodeTypeModificationsMessage', {
        'NodeTypeList': Optional[List[str]],
    }
)


ElastiCacheModifyCacheClusterResult = TypedDict(
    'ElastiCacheModifyCacheClusterResult', {
        'CacheCluster': Optional[ElastiCacheCacheCluster],
    }
)


ElastiCacheParameterNameValue = TypedDict(
    'ElastiCacheParameterNameValue', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


ElastiCacheCacheParameterGroupNameMessage = TypedDict(
    'ElastiCacheCacheParameterGroupNameMessage', {
        'String': Optional[str],
    }
)


ElastiCacheModifyCacheSubnetGroupResult = TypedDict(
    'ElastiCacheModifyCacheSubnetGroupResult', {
        'CacheSubnetGroup': Optional[ElastiCacheCacheSubnetGroup],
    }
)


ElastiCacheModifyReplicationGroupResult = TypedDict(
    'ElastiCacheModifyReplicationGroupResult', {
        'ReplicationGroup': Optional[ElastiCacheReplicationGroup],
    }
)


ElastiCacheReshardingConfiguration = TypedDict(
    'ElastiCacheReshardingConfiguration', {
        'AllowedNodeGroupId': Optional[str],
        'AvailabilityZonesList': Optional[List[str]],
    }
)


ElastiCacheModifyReplicationGroupShardConfigurationResult = TypedDict(
    'ElastiCacheModifyReplicationGroupShardConfigurationResult', {
        'ReplicationGroup': Optional[ElastiCacheReplicationGroup],
    }
)


ElastiCachePurchaseReservedCacheNodesOfferingResult = TypedDict(
    'ElastiCachePurchaseReservedCacheNodesOfferingResult', {
        'ReservedCacheNode': Optional[ElastiCacheReservedCacheNode],
    }
)


ElastiCacheRebootCacheClusterResult = TypedDict(
    'ElastiCacheRebootCacheClusterResult', {
        'CacheCluster': Optional[ElastiCacheCacheCluster],
    }
)


ElastiCacheRevokeCacheSecurityGroupIngressResult = TypedDict(
    'ElastiCacheRevokeCacheSecurityGroupIngressResult', {
        'CacheSecurityGroup': Optional[ElastiCacheCacheSecurityGroup],
    }
)


ElastiCacheTestFailoverResult = TypedDict(
    'ElastiCacheTestFailoverResult', {
        'ReplicationGroup': Optional[ElastiCacheReplicationGroup],
    }
)


class ElasticBeanstalk(BaseClient):
    def abort_environment_update(self, *,
        EnvironmentId: str = ...,
        EnvironmentName: str = ...
    ): ...

    def apply_environment_managed_action(self, *,
        ActionId: str,
        EnvironmentName: str = ...,
        EnvironmentId: str = ...
    ) -> ElasticBeanstalkApplyEnvironmentManagedActionResult: ...

    def check_dns_availability(self, *,
        CNAMEPrefix: str
    ) -> ElasticBeanstalkCheckDNSAvailabilityResultMessage: ...

    def compose_environments(self, *,
        ApplicationName: str = ...,
        GroupName: str = ...,
        VersionLabels: List[str] = ...
    ) -> ElasticBeanstalkEnvironmentDescriptionsMessage: ...

    def create_application(self, *,
        ApplicationName: str,
        Description: str = ...,
        ResourceLifecycleConfig: ElasticBeanstalkApplicationResourceLifecycleConfig = ...,
        Tags: List[ElasticBeanstalkTag] = ...
    ) -> ElasticBeanstalkApplicationDescriptionMessage: ...

    def create_application_version(self, *,
        ApplicationName: str,
        VersionLabel: str,
        Description: str = ...,
        SourceBuildInformation: ElasticBeanstalkSourceBuildInformation = ...,
        SourceBundle: ElasticBeanstalkS3Location = ...,
        BuildConfiguration: ElasticBeanstalkBuildConfiguration = ...,
        AutoCreateApplication: bool = ...,
        Process: bool = ...,
        Tags: List[ElasticBeanstalkTag] = ...
    ) -> ElasticBeanstalkApplicationVersionDescriptionMessage: ...

    def create_configuration_template(self, *,
        ApplicationName: str,
        TemplateName: str,
        SolutionStackName: str = ...,
        PlatformArn: str = ...,
        SourceConfiguration: ElasticBeanstalkSourceConfiguration = ...,
        EnvironmentId: str = ...,
        Description: str = ...,
        OptionSettings: List[ElasticBeanstalkConfigurationOptionSetting] = ...,
        Tags: List[ElasticBeanstalkTag] = ...
    ) -> ElasticBeanstalkConfigurationSettingsDescription: ...

    def create_environment(self, *,
        ApplicationName: str,
        EnvironmentName: str = ...,
        GroupName: str = ...,
        Description: str = ...,
        CNAMEPrefix: str = ...,
        Tier: ElasticBeanstalkEnvironmentTier = ...,
        Tags: List[ElasticBeanstalkTag] = ...,
        VersionLabel: str = ...,
        TemplateName: str = ...,
        SolutionStackName: str = ...,
        PlatformArn: str = ...,
        OptionSettings: List[ElasticBeanstalkConfigurationOptionSetting] = ...,
        OptionsToRemove: List[ElasticBeanstalkOptionSpecification] = ...
    ) -> ElasticBeanstalkEnvironmentDescription: ...

    def create_platform_version(self, *,
        PlatformName: str,
        PlatformVersion: str,
        PlatformDefinitionBundle: ElasticBeanstalkS3Location,
        EnvironmentName: str = ...,
        OptionSettings: List[ElasticBeanstalkConfigurationOptionSetting] = ...,
        Tags: List[ElasticBeanstalkTag] = ...
    ) -> ElasticBeanstalkCreatePlatformVersionResult: ...

    def create_storage_location(self) -> ElasticBeanstalkCreateStorageLocationResultMessage: ...

    def delete_application(self, *,
        ApplicationName: str,
        TerminateEnvByForce: bool = ...
    ): ...

    def delete_application_version(self, *,
        ApplicationName: str,
        VersionLabel: str,
        DeleteSourceBundle: bool = ...
    ): ...

    def delete_configuration_template(self, *,
        ApplicationName: str,
        TemplateName: str
    ): ...

    def delete_environment_configuration(self, *,
        ApplicationName: str,
        EnvironmentName: str
    ): ...

    def delete_platform_version(self, *,
        PlatformArn: str = ...
    ) -> ElasticBeanstalkDeletePlatformVersionResult: ...

    def describe_account_attributes(self) -> ElasticBeanstalkDescribeAccountAttributesResult: ...

    def describe_application_versions(self, *,
        ApplicationName: str = ...,
        VersionLabels: List[str] = ...,
        MaxRecords: int = ...,
        NextToken: str = ...
    ) -> ElasticBeanstalkApplicationVersionDescriptionsMessage: ...

    def describe_applications(self, *,
        ApplicationNames: List[str] = ...
    ) -> ElasticBeanstalkApplicationDescriptionsMessage: ...

    def describe_configuration_options(self, *,
        ApplicationName: str = ...,
        TemplateName: str = ...,
        EnvironmentName: str = ...,
        SolutionStackName: str = ...,
        PlatformArn: str = ...,
        Options: List[ElasticBeanstalkOptionSpecification] = ...
    ) -> ElasticBeanstalkConfigurationOptionsDescription: ...

    def describe_configuration_settings(self, *,
        ApplicationName: str,
        TemplateName: str = ...,
        EnvironmentName: str = ...
    ) -> ElasticBeanstalkConfigurationSettingsDescriptions: ...

    def describe_environment_health(self, *,
        EnvironmentName: str = ...,
        EnvironmentId: str = ...,
        AttributeNames: List[str] = ...
    ) -> ElasticBeanstalkDescribeEnvironmentHealthResult: ...

    def describe_environment_managed_action_history(self, *,
        EnvironmentId: str = ...,
        EnvironmentName: str = ...,
        NextToken: str = ...,
        MaxItems: int = ...
    ) -> ElasticBeanstalkDescribeEnvironmentManagedActionHistoryResult: ...

    def describe_environment_managed_actions(self, *,
        EnvironmentName: str = ...,
        EnvironmentId: str = ...,
        Status: str = ...
    ) -> ElasticBeanstalkDescribeEnvironmentManagedActionsResult: ...

    def describe_environment_resources(self, *,
        EnvironmentId: str = ...,
        EnvironmentName: str = ...
    ) -> ElasticBeanstalkEnvironmentResourceDescriptionsMessage: ...

    def describe_environments(self, *,
        ApplicationName: str = ...,
        VersionLabel: str = ...,
        EnvironmentIds: List[str] = ...,
        EnvironmentNames: List[str] = ...,
        IncludeDeleted: bool = ...,
        IncludedDeletedBackTo: datetime.datetime = ...,
        MaxRecords: int = ...,
        NextToken: str = ...
    ) -> ElasticBeanstalkEnvironmentDescriptionsMessage: ...

    def describe_events(self, *,
        ApplicationName: str = ...,
        VersionLabel: str = ...,
        TemplateName: str = ...,
        EnvironmentId: str = ...,
        EnvironmentName: str = ...,
        PlatformArn: str = ...,
        RequestId: str = ...,
        Severity: str = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        MaxRecords: int = ...,
        NextToken: str = ...
    ) -> ElasticBeanstalkEventDescriptionsMessage: ...

    def describe_instances_health(self, *,
        EnvironmentName: str = ...,
        EnvironmentId: str = ...,
        AttributeNames: List[str] = ...,
        NextToken: str = ...
    ) -> ElasticBeanstalkDescribeInstancesHealthResult: ...

    def describe_platform_version(self, *,
        PlatformArn: str = ...
    ) -> ElasticBeanstalkDescribePlatformVersionResult: ...

    def list_available_solution_stacks(self) -> ElasticBeanstalkListAvailableSolutionStacksResultMessage: ...

    def list_platform_versions(self, *,
        Filters: List[ElasticBeanstalkPlatformFilter] = ...,
        MaxRecords: int = ...,
        NextToken: str = ...
    ) -> ElasticBeanstalkListPlatformVersionsResult: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> ElasticBeanstalkResourceTagsDescriptionMessage: ...

    def rebuild_environment(self, *,
        EnvironmentId: str = ...,
        EnvironmentName: str = ...
    ): ...

    def request_environment_info(self, *,
        InfoType: str,
        EnvironmentId: str = ...,
        EnvironmentName: str = ...
    ): ...

    def restart_app_server(self, *,
        EnvironmentId: str = ...,
        EnvironmentName: str = ...
    ): ...

    def retrieve_environment_info(self, *,
        InfoType: str,
        EnvironmentId: str = ...,
        EnvironmentName: str = ...
    ) -> ElasticBeanstalkRetrieveEnvironmentInfoResultMessage: ...

    def swap_environment_cnames(self, *,
        SourceEnvironmentId: str = ...,
        SourceEnvironmentName: str = ...,
        DestinationEnvironmentId: str = ...,
        DestinationEnvironmentName: str = ...
    ): ...

    def terminate_environment(self, *,
        EnvironmentId: str = ...,
        EnvironmentName: str = ...,
        TerminateResources: bool = ...,
        ForceTerminate: bool = ...
    ) -> ElasticBeanstalkEnvironmentDescription: ...

    def update_application(self, *,
        ApplicationName: str,
        Description: str = ...
    ) -> ElasticBeanstalkApplicationDescriptionMessage: ...

    def update_application_resource_lifecycle(self, *,
        ApplicationName: str,
        ResourceLifecycleConfig: ElasticBeanstalkApplicationResourceLifecycleConfig
    ) -> ElasticBeanstalkApplicationResourceLifecycleDescriptionMessage: ...

    def update_application_version(self, *,
        ApplicationName: str,
        VersionLabel: str,
        Description: str = ...
    ) -> ElasticBeanstalkApplicationVersionDescriptionMessage: ...

    def update_configuration_template(self, *,
        ApplicationName: str,
        TemplateName: str,
        Description: str = ...,
        OptionSettings: List[ElasticBeanstalkConfigurationOptionSetting] = ...,
        OptionsToRemove: List[ElasticBeanstalkOptionSpecification] = ...
    ) -> ElasticBeanstalkConfigurationSettingsDescription: ...

    def update_environment(self, *,
        ApplicationName: str = ...,
        EnvironmentId: str = ...,
        EnvironmentName: str = ...,
        GroupName: str = ...,
        Description: str = ...,
        Tier: ElasticBeanstalkEnvironmentTier = ...,
        VersionLabel: str = ...,
        TemplateName: str = ...,
        SolutionStackName: str = ...,
        PlatformArn: str = ...,
        OptionSettings: List[ElasticBeanstalkConfigurationOptionSetting] = ...,
        OptionsToRemove: List[ElasticBeanstalkOptionSpecification] = ...
    ) -> ElasticBeanstalkEnvironmentDescription: ...

    def update_tags_for_resource(self, *,
        ResourceArn: str,
        TagsToAdd: List[ElasticBeanstalkTag] = ...,
        TagsToRemove: List[str] = ...
    ): ...

    def validate_configuration_settings(self, *,
        ApplicationName: str,
        OptionSettings: List[ElasticBeanstalkConfigurationOptionSetting],
        TemplateName: str = ...,
        EnvironmentName: str = ...
    ) -> ElasticBeanstalkConfigurationSettingsValidationMessages: ...


ElasticBeanstalkApplyEnvironmentManagedActionResult = TypedDict(
    'ElasticBeanstalkApplyEnvironmentManagedActionResult', {
        'String': Optional[str],
        'String': Optional[str],
        'ActionType': Optional[str],
        'String': Optional[str],
    }
)


ElasticBeanstalkCheckDNSAvailabilityResultMessage = TypedDict(
    'ElasticBeanstalkCheckDNSAvailabilityResultMessage', {
        'CnameAvailability': Optional[bool],
        'DNSCname': Optional[str],
    }
)


ElasticBeanstalkListener = TypedDict(
    'ElasticBeanstalkListener', {
        'String': Optional[str],
        'Integer': Optional[int],
    }
)


ElasticBeanstalkLoadBalancerDescription = TypedDict(
    'ElasticBeanstalkLoadBalancerDescription', {
        'String': Optional[str],
        'String': Optional[str],
        'LoadBalancerListenersDescription': Optional[List[ElasticBeanstalkListener]],
    }
)


ElasticBeanstalkEnvironmentResourcesDescription = TypedDict(
    'ElasticBeanstalkEnvironmentResourcesDescription', {
        'LoadBalancerDescription': Optional[ElasticBeanstalkLoadBalancerDescription],
    }
)


ElasticBeanstalkEnvironmentTier = TypedDict(
    'ElasticBeanstalkEnvironmentTier', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


ElasticBeanstalkEnvironmentLink = TypedDict(
    'ElasticBeanstalkEnvironmentLink', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


ElasticBeanstalkEnvironmentDescription = TypedDict(
    'ElasticBeanstalkEnvironmentDescription', {
        'EnvironmentName': Optional[str],
        'EnvironmentId': Optional[str],
        'ApplicationName': Optional[str],
        'VersionLabel': Optional[str],
        'SolutionStackName': Optional[str],
        'PlatformArn': Optional[str],
        'ConfigurationTemplateName': Optional[str],
        'Description': Optional[str],
        'EndpointURL': Optional[str],
        'DNSCname': Optional[str],
        'CreationDate': Optional[datetime.datetime],
        'UpdateDate': Optional[datetime.datetime],
        'EnvironmentStatus': Optional[str],
        'AbortableOperationInProgress': Optional[bool],
        'EnvironmentHealth': Optional[str],
        'EnvironmentHealthStatus': Optional[str],
        'EnvironmentResourcesDescription': Optional[ElasticBeanstalkEnvironmentResourcesDescription],
        'EnvironmentTier': Optional[ElasticBeanstalkEnvironmentTier],
        'EnvironmentLinks': Optional[List[ElasticBeanstalkEnvironmentLink]],
        'EnvironmentArn': Optional[str],
    }
)


ElasticBeanstalkEnvironmentDescriptionsMessage = TypedDict(
    'ElasticBeanstalkEnvironmentDescriptionsMessage', {
        'EnvironmentDescriptionsList': Optional[List[ElasticBeanstalkEnvironmentDescription]],
        'Token': Optional[str],
    }
)


ElasticBeanstalkMaxCountRule = TypedDict(
    'ElasticBeanstalkMaxCountRule', {
        'BoxedBoolean': bool,
        'BoxedInt': Optional[int],
        'BoxedBoolean': Optional[bool],
    }
)


ElasticBeanstalkMaxAgeRule = TypedDict(
    'ElasticBeanstalkMaxAgeRule', {
        'BoxedBoolean': bool,
        'BoxedInt': Optional[int],
        'BoxedBoolean': Optional[bool],
    }
)


ElasticBeanstalkApplicationVersionLifecycleConfig = TypedDict(
    'ElasticBeanstalkApplicationVersionLifecycleConfig', {
        'MaxCountRule': Optional[ElasticBeanstalkMaxCountRule],
        'MaxAgeRule': Optional[ElasticBeanstalkMaxAgeRule],
    }
)


ElasticBeanstalkApplicationResourceLifecycleConfig = TypedDict(
    'ElasticBeanstalkApplicationResourceLifecycleConfig', {
        'String': Optional[str],
        'ApplicationVersionLifecycleConfig': Optional[ElasticBeanstalkApplicationVersionLifecycleConfig],
    }
)


ElasticBeanstalkTag = TypedDict(
    'ElasticBeanstalkTag', {
        'TagKey': Optional[str],
        'TagValue': Optional[str],
    }
)


ElasticBeanstalkApplicationDescription = TypedDict(
    'ElasticBeanstalkApplicationDescription', {
        'ApplicationArn': Optional[str],
        'ApplicationName': Optional[str],
        'Description': Optional[str],
        'CreationDate': Optional[datetime.datetime],
        'UpdateDate': Optional[datetime.datetime],
        'VersionLabelsList': Optional[List[str]],
        'ConfigurationTemplateNamesList': Optional[List[str]],
        'ApplicationResourceLifecycleConfig': Optional[ElasticBeanstalkApplicationResourceLifecycleConfig],
    }
)


ElasticBeanstalkApplicationDescriptionMessage = TypedDict(
    'ElasticBeanstalkApplicationDescriptionMessage', {
        'ApplicationDescription': Optional[ElasticBeanstalkApplicationDescription],
    }
)


ElasticBeanstalkSourceBuildInformation = TypedDict(
    'ElasticBeanstalkSourceBuildInformation', {
        'SourceType': str,
        'SourceRepository': str,
        'SourceLocation': str,
    }
)


ElasticBeanstalkS3Location = TypedDict(
    'ElasticBeanstalkS3Location', {
        'S3Bucket': Optional[str],
        'S3Key': Optional[str],
    }
)


ElasticBeanstalkBuildConfiguration = TypedDict(
    'ElasticBeanstalkBuildConfiguration', {
        'NonEmptyString': str,
        'NonEmptyString': str,
        'String': Optional[str],
        'ComputeType': Optional[str],
        'BoxedInt': Optional[int],
    }
)


ElasticBeanstalkApplicationVersionDescription = TypedDict(
    'ElasticBeanstalkApplicationVersionDescription', {
        'ApplicationVersionArn': Optional[str],
        'ApplicationName': Optional[str],
        'Description': Optional[str],
        'VersionLabel': Optional[str],
        'SourceBuildInformation': Optional[ElasticBeanstalkSourceBuildInformation],
        'String': Optional[str],
        'S3Location': Optional[ElasticBeanstalkS3Location],
        'CreationDate': Optional[datetime.datetime],
        'UpdateDate': Optional[datetime.datetime],
        'ApplicationVersionStatus': Optional[str],
    }
)


ElasticBeanstalkApplicationVersionDescriptionMessage = TypedDict(
    'ElasticBeanstalkApplicationVersionDescriptionMessage', {
        'ApplicationVersionDescription': Optional[ElasticBeanstalkApplicationVersionDescription],
    }
)


ElasticBeanstalkSourceConfiguration = TypedDict(
    'ElasticBeanstalkSourceConfiguration', {
        'ApplicationName': Optional[str],
        'ConfigurationTemplateName': Optional[str],
    }
)


ElasticBeanstalkConfigurationOptionSetting = TypedDict(
    'ElasticBeanstalkConfigurationOptionSetting', {
        'ResourceName': Optional[str],
        'OptionNamespace': Optional[str],
        'ConfigurationOptionName': Optional[str],
        'ConfigurationOptionValue': Optional[str],
    }
)


ElasticBeanstalkConfigurationSettingsDescription = TypedDict(
    'ElasticBeanstalkConfigurationSettingsDescription', {
        'SolutionStackName': Optional[str],
        'PlatformArn': Optional[str],
        'ApplicationName': Optional[str],
        'ConfigurationTemplateName': Optional[str],
        'Description': Optional[str],
        'EnvironmentName': Optional[str],
        'ConfigurationDeploymentStatus': Optional[str],
        'CreationDate': Optional[datetime.datetime],
        'UpdateDate': Optional[datetime.datetime],
        'ConfigurationOptionSettingsList': Optional[List[ElasticBeanstalkConfigurationOptionSetting]],
    }
)


ElasticBeanstalkOptionSpecification = TypedDict(
    'ElasticBeanstalkOptionSpecification', {
        'ResourceName': Optional[str],
        'OptionNamespace': Optional[str],
        'ConfigurationOptionName': Optional[str],
    }
)


ElasticBeanstalkPlatformSummary = TypedDict(
    'ElasticBeanstalkPlatformSummary', {
        'PlatformArn': Optional[str],
        'PlatformOwner': Optional[str],
        'PlatformStatus': Optional[str],
        'PlatformCategory': Optional[str],
        'OperatingSystemName': Optional[str],
        'OperatingSystemVersion': Optional[str],
        'SupportedTierList': Optional[List[str]],
        'SupportedAddonList': Optional[List[str]],
    }
)


ElasticBeanstalkBuilder = TypedDict(
    'ElasticBeanstalkBuilder', {
        'ARN': Optional[str],
    }
)


ElasticBeanstalkCreatePlatformVersionResult = TypedDict(
    'ElasticBeanstalkCreatePlatformVersionResult', {
        'PlatformSummary': Optional[ElasticBeanstalkPlatformSummary],
        'Builder': Optional[ElasticBeanstalkBuilder],
    }
)


ElasticBeanstalkCreateStorageLocationResultMessage = TypedDict(
    'ElasticBeanstalkCreateStorageLocationResultMessage', {
        'S3Bucket': Optional[str],
    }
)


ElasticBeanstalkDeletePlatformVersionResult = TypedDict(
    'ElasticBeanstalkDeletePlatformVersionResult', {
        'PlatformSummary': Optional[ElasticBeanstalkPlatformSummary],
    }
)


ElasticBeanstalkResourceQuota = TypedDict(
    'ElasticBeanstalkResourceQuota', {
        'BoxedInt': Optional[int],
    }
)


ElasticBeanstalkResourceQuotas = TypedDict(
    'ElasticBeanstalkResourceQuotas', {
        'ResourceQuota': Optional[ElasticBeanstalkResourceQuota],
        'ResourceQuota': Optional[ElasticBeanstalkResourceQuota],
        'ResourceQuota': Optional[ElasticBeanstalkResourceQuota],
        'ResourceQuota': Optional[ElasticBeanstalkResourceQuota],
        'ResourceQuota': Optional[ElasticBeanstalkResourceQuota],
    }
)


ElasticBeanstalkDescribeAccountAttributesResult = TypedDict(
    'ElasticBeanstalkDescribeAccountAttributesResult', {
        'ResourceQuotas': Optional[ElasticBeanstalkResourceQuotas],
    }
)


ElasticBeanstalkApplicationVersionDescriptionsMessage = TypedDict(
    'ElasticBeanstalkApplicationVersionDescriptionsMessage', {
        'ApplicationVersionDescriptionList': Optional[List[ElasticBeanstalkApplicationVersionDescription]],
        'Token': Optional[str],
    }
)


ElasticBeanstalkApplicationDescriptionsMessage = TypedDict(
    'ElasticBeanstalkApplicationDescriptionsMessage', {
        'ApplicationDescriptionList': Optional[List[ElasticBeanstalkApplicationDescription]],
    }
)


ElasticBeanstalkOptionRestrictionRegex = TypedDict(
    'ElasticBeanstalkOptionRestrictionRegex', {
        'RegexPattern': Optional[str],
        'RegexLabel': Optional[str],
    }
)


ElasticBeanstalkConfigurationOptionDescription = TypedDict(
    'ElasticBeanstalkConfigurationOptionDescription', {
        'OptionNamespace': Optional[str],
        'ConfigurationOptionName': Optional[str],
        'ConfigurationOptionDefaultValue': Optional[str],
        'ConfigurationOptionSeverity': Optional[str],
        'UserDefinedOption': Optional[bool],
        'ConfigurationOptionValueType': Optional[str],
        'ConfigurationOptionPossibleValues': Optional[List[str]],
        'OptionRestrictionMinValue': Optional[int],
        'OptionRestrictionMaxValue': Optional[int],
        'OptionRestrictionMaxLength': Optional[int],
        'OptionRestrictionRegex': Optional[ElasticBeanstalkOptionRestrictionRegex],
    }
)


ElasticBeanstalkConfigurationOptionsDescription = TypedDict(
    'ElasticBeanstalkConfigurationOptionsDescription', {
        'SolutionStackName': Optional[str],
        'PlatformArn': Optional[str],
        'ConfigurationOptionDescriptionsList': Optional[List[ElasticBeanstalkConfigurationOptionDescription]],
    }
)


ElasticBeanstalkConfigurationSettingsDescriptions = TypedDict(
    'ElasticBeanstalkConfigurationSettingsDescriptions', {
        'ConfigurationSettingsDescriptionList': Optional[List[ElasticBeanstalkConfigurationSettingsDescription]],
    }
)


ElasticBeanstalkStatusCodes = TypedDict(
    'ElasticBeanstalkStatusCodes', {
        'NullableInteger': Optional[int],
        'NullableInteger': Optional[int],
        'NullableInteger': Optional[int],
        'NullableInteger': Optional[int],
    }
)


ElasticBeanstalkLatency = TypedDict(
    'ElasticBeanstalkLatency', {
        'NullableDouble': Optional[float],
        'NullableDouble': Optional[float],
        'NullableDouble': Optional[float],
        'NullableDouble': Optional[float],
        'NullableDouble': Optional[float],
        'NullableDouble': Optional[float],
        'NullableDouble': Optional[float],
        'NullableDouble': Optional[float],
    }
)


ElasticBeanstalkApplicationMetrics = TypedDict(
    'ElasticBeanstalkApplicationMetrics', {
        'NullableInteger': Optional[int],
        'RequestCount': Optional[int],
        'StatusCodes': Optional[ElasticBeanstalkStatusCodes],
        'Latency': Optional[ElasticBeanstalkLatency],
    }
)


ElasticBeanstalkInstanceHealthSummary = TypedDict(
    'ElasticBeanstalkInstanceHealthSummary', {
        'NullableInteger': Optional[int],
        'NullableInteger': Optional[int],
        'NullableInteger': Optional[int],
        'NullableInteger': Optional[int],
        'NullableInteger': Optional[int],
        'NullableInteger': Optional[int],
        'NullableInteger': Optional[int],
        'NullableInteger': Optional[int],
    }
)


ElasticBeanstalkDescribeEnvironmentHealthResult = TypedDict(
    'ElasticBeanstalkDescribeEnvironmentHealthResult', {
        'EnvironmentName': Optional[str],
        'String': Optional[str],
        'EnvironmentHealth': Optional[str],
        'String': Optional[str],
        'Causes': Optional[List[str]],
        'ApplicationMetrics': Optional[ElasticBeanstalkApplicationMetrics],
        'InstanceHealthSummary': Optional[ElasticBeanstalkInstanceHealthSummary],
        'RefreshedAt': Optional[datetime.datetime],
    }
)


ElasticBeanstalkManagedActionHistoryItem = TypedDict(
    'ElasticBeanstalkManagedActionHistoryItem', {
        'String': Optional[str],
        'ActionType': Optional[str],
        'String': Optional[str],
        'FailureType': Optional[str],
        'ActionHistoryStatus': Optional[str],
        'String': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


ElasticBeanstalkDescribeEnvironmentManagedActionHistoryResult = TypedDict(
    'ElasticBeanstalkDescribeEnvironmentManagedActionHistoryResult', {
        'ManagedActionHistoryItems': Optional[List[ElasticBeanstalkManagedActionHistoryItem]],
        'String': Optional[str],
    }
)


ElasticBeanstalkManagedAction = TypedDict(
    'ElasticBeanstalkManagedAction', {
        'String': Optional[str],
        'String': Optional[str],
        'ActionType': Optional[str],
        'ActionStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


ElasticBeanstalkDescribeEnvironmentManagedActionsResult = TypedDict(
    'ElasticBeanstalkDescribeEnvironmentManagedActionsResult', {
        'ManagedActions': Optional[List[ElasticBeanstalkManagedAction]],
    }
)


ElasticBeanstalkAutoScalingGroup = TypedDict(
    'ElasticBeanstalkAutoScalingGroup', {
        'ResourceId': Optional[str],
    }
)


ElasticBeanstalkInstance = TypedDict(
    'ElasticBeanstalkInstance', {
        'ResourceId': Optional[str],
    }
)


ElasticBeanstalkLaunchConfiguration = TypedDict(
    'ElasticBeanstalkLaunchConfiguration', {
        'ResourceId': Optional[str],
    }
)


ElasticBeanstalkLaunchTemplate = TypedDict(
    'ElasticBeanstalkLaunchTemplate', {
        'ResourceId': Optional[str],
    }
)


ElasticBeanstalkLoadBalancer = TypedDict(
    'ElasticBeanstalkLoadBalancer', {
        'ResourceId': Optional[str],
    }
)


ElasticBeanstalkTrigger = TypedDict(
    'ElasticBeanstalkTrigger', {
        'ResourceId': Optional[str],
    }
)


ElasticBeanstalkQueue = TypedDict(
    'ElasticBeanstalkQueue', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


ElasticBeanstalkEnvironmentResourceDescription = TypedDict(
    'ElasticBeanstalkEnvironmentResourceDescription', {
        'EnvironmentName': Optional[str],
        'AutoScalingGroupList': Optional[List[ElasticBeanstalkAutoScalingGroup]],
        'InstanceList': Optional[List[ElasticBeanstalkInstance]],
        'LaunchConfigurationList': Optional[List[ElasticBeanstalkLaunchConfiguration]],
        'LaunchTemplateList': Optional[List[ElasticBeanstalkLaunchTemplate]],
        'LoadBalancerList': Optional[List[ElasticBeanstalkLoadBalancer]],
        'TriggerList': Optional[List[ElasticBeanstalkTrigger]],
        'QueueList': Optional[List[ElasticBeanstalkQueue]],
    }
)


ElasticBeanstalkEnvironmentResourceDescriptionsMessage = TypedDict(
    'ElasticBeanstalkEnvironmentResourceDescriptionsMessage', {
        'EnvironmentResourceDescription': Optional[ElasticBeanstalkEnvironmentResourceDescription],
    }
)


ElasticBeanstalkEventDescription = TypedDict(
    'ElasticBeanstalkEventDescription', {
        'EventDate': Optional[datetime.datetime],
        'EventMessage': Optional[str],
        'ApplicationName': Optional[str],
        'VersionLabel': Optional[str],
        'ConfigurationTemplateName': Optional[str],
        'EnvironmentName': Optional[str],
        'PlatformArn': Optional[str],
        'RequestId': Optional[str],
        'EventSeverity': Optional[str],
    }
)


ElasticBeanstalkEventDescriptionsMessage = TypedDict(
    'ElasticBeanstalkEventDescriptionsMessage', {
        'EventDescriptionList': Optional[List[ElasticBeanstalkEventDescription]],
        'Token': Optional[str],
    }
)


ElasticBeanstalkCPUUtilization = TypedDict(
    'ElasticBeanstalkCPUUtilization', {
        'NullableDouble': Optional[float],
        'NullableDouble': Optional[float],
        'NullableDouble': Optional[float],
        'NullableDouble': Optional[float],
        'NullableDouble': Optional[float],
        'NullableDouble': Optional[float],
        'NullableDouble': Optional[float],
        'NullableDouble': Optional[float],
    }
)


ElasticBeanstalkSystemStatus = TypedDict(
    'ElasticBeanstalkSystemStatus', {
        'CPUUtilization': Optional[ElasticBeanstalkCPUUtilization],
        'LoadAverage': Optional[List[float]],
    }
)


ElasticBeanstalkDeployment = TypedDict(
    'ElasticBeanstalkDeployment', {
        'String': Optional[str],
        'NullableLong': Optional[int],
        'String': Optional[str],
        'DeploymentTimestamp': Optional[datetime.datetime],
    }
)


ElasticBeanstalkSingleInstanceHealth = TypedDict(
    'ElasticBeanstalkSingleInstanceHealth', {
        'InstanceId': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Causes': Optional[List[str]],
        'LaunchedAt': Optional[datetime.datetime],
        'ApplicationMetrics': Optional[ElasticBeanstalkApplicationMetrics],
        'SystemStatus': Optional[ElasticBeanstalkSystemStatus],
        'Deployment': Optional[ElasticBeanstalkDeployment],
        'String': Optional[str],
        'String': Optional[str],
    }
)


ElasticBeanstalkDescribeInstancesHealthResult = TypedDict(
    'ElasticBeanstalkDescribeInstancesHealthResult', {
        'InstanceHealthList': Optional[List[ElasticBeanstalkSingleInstanceHealth]],
        'RefreshedAt': Optional[datetime.datetime],
        'NextToken': Optional[str],
    }
)


ElasticBeanstalkPlatformProgrammingLanguage = TypedDict(
    'ElasticBeanstalkPlatformProgrammingLanguage', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


ElasticBeanstalkPlatformFramework = TypedDict(
    'ElasticBeanstalkPlatformFramework', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


ElasticBeanstalkCustomAmi = TypedDict(
    'ElasticBeanstalkCustomAmi', {
        'VirtualizationType': Optional[str],
        'ImageId': Optional[str],
    }
)


ElasticBeanstalkPlatformDescription = TypedDict(
    'ElasticBeanstalkPlatformDescription', {
        'PlatformArn': Optional[str],
        'PlatformOwner': Optional[str],
        'PlatformName': Optional[str],
        'PlatformVersion': Optional[str],
        'SolutionStackName': Optional[str],
        'PlatformStatus': Optional[str],
        'CreationDate': Optional[datetime.datetime],
        'UpdateDate': Optional[datetime.datetime],
        'PlatformCategory': Optional[str],
        'Description': Optional[str],
        'Maintainer': Optional[str],
        'OperatingSystemName': Optional[str],
        'OperatingSystemVersion': Optional[str],
        'PlatformProgrammingLanguages': Optional[List[ElasticBeanstalkPlatformProgrammingLanguage]],
        'PlatformFrameworks': Optional[List[ElasticBeanstalkPlatformFramework]],
        'CustomAmiList': Optional[List[ElasticBeanstalkCustomAmi]],
        'SupportedTierList': Optional[List[str]],
        'SupportedAddonList': Optional[List[str]],
    }
)


ElasticBeanstalkDescribePlatformVersionResult = TypedDict(
    'ElasticBeanstalkDescribePlatformVersionResult', {
        'PlatformDescription': Optional[ElasticBeanstalkPlatformDescription],
    }
)


ElasticBeanstalkSolutionStackDescription = TypedDict(
    'ElasticBeanstalkSolutionStackDescription', {
        'SolutionStackName': Optional[str],
        'SolutionStackFileTypeList': Optional[List[str]],
    }
)


ElasticBeanstalkListAvailableSolutionStacksResultMessage = TypedDict(
    'ElasticBeanstalkListAvailableSolutionStacksResultMessage', {
        'AvailableSolutionStackNamesList': Optional[List[str]],
        'AvailableSolutionStackDetailsList': Optional[List[ElasticBeanstalkSolutionStackDescription]],
    }
)


ElasticBeanstalkPlatformFilter = TypedDict(
    'ElasticBeanstalkPlatformFilter', {
        'PlatformFilterType': Optional[str],
        'PlatformFilterOperator': Optional[str],
        'PlatformFilterValueList': Optional[List[str]],
    }
)


ElasticBeanstalkListPlatformVersionsResult = TypedDict(
    'ElasticBeanstalkListPlatformVersionsResult', {
        'PlatformSummaryList': Optional[List[ElasticBeanstalkPlatformSummary]],
        'Token': Optional[str],
    }
)


ElasticBeanstalkResourceTagsDescriptionMessage = TypedDict(
    'ElasticBeanstalkResourceTagsDescriptionMessage', {
        'ResourceArn': Optional[str],
        'TagList': Optional[List[ElasticBeanstalkTag]],
    }
)


ElasticBeanstalkEnvironmentInfoDescription = TypedDict(
    'ElasticBeanstalkEnvironmentInfoDescription', {
        'EnvironmentInfoType': Optional[str],
        'Ec2InstanceId': Optional[str],
        'SampleTimestamp': Optional[datetime.datetime],
        'Message': Optional[str],
    }
)


ElasticBeanstalkRetrieveEnvironmentInfoResultMessage = TypedDict(
    'ElasticBeanstalkRetrieveEnvironmentInfoResultMessage', {
        'EnvironmentInfoDescriptionList': Optional[List[ElasticBeanstalkEnvironmentInfoDescription]],
    }
)


ElasticBeanstalkApplicationResourceLifecycleDescriptionMessage = TypedDict(
    'ElasticBeanstalkApplicationResourceLifecycleDescriptionMessage', {
        'ApplicationName': Optional[str],
        'ApplicationResourceLifecycleConfig': Optional[ElasticBeanstalkApplicationResourceLifecycleConfig],
    }
)


ElasticBeanstalkValidationMessage = TypedDict(
    'ElasticBeanstalkValidationMessage', {
        'ValidationMessageString': Optional[str],
        'ValidationSeverity': Optional[str],
        'OptionNamespace': Optional[str],
        'ConfigurationOptionName': Optional[str],
    }
)


ElasticBeanstalkConfigurationSettingsValidationMessages = TypedDict(
    'ElasticBeanstalkConfigurationSettingsValidationMessages', {
        'ValidationMessagesList': Optional[List[ElasticBeanstalkValidationMessage]],
    }
)


class ElasticTranscoder(BaseClient):
    def cancel_job(self, *,
        Id: str
    ) -> ElasticTranscoderCancelJobResponse: ...

    def create_job(self, *,
        PipelineId: str,
        Input: ElasticTranscoderJobInput = ...,
        Inputs: List[ElasticTranscoderJobInput] = ...,
        Output: ElasticTranscoderCreateJobOutput = ...,
        Outputs: List[ElasticTranscoderCreateJobOutput] = ...,
        OutputKeyPrefix: str = ...,
        Playlists: List[ElasticTranscoderCreateJobPlaylist] = ...,
        UserMetadata: Dict[str, str] = ...
    ) -> ElasticTranscoderCreateJobResponse: ...

    def create_pipeline(self, *,
        Name: str,
        InputBucket: str,
        Role: str,
        OutputBucket: str = ...,
        AwsKmsKeyArn: str = ...,
        Notifications: ElasticTranscoderNotifications = ...,
        ContentConfig: ElasticTranscoderPipelineOutputConfig = ...,
        ThumbnailConfig: ElasticTranscoderPipelineOutputConfig = ...
    ) -> ElasticTranscoderCreatePipelineResponse: ...

    def create_preset(self, *,
        Name: str,
        Container: str,
        Description: str = ...,
        Video: ElasticTranscoderVideoParameters = ...,
        Audio: ElasticTranscoderAudioParameters = ...,
        Thumbnails: ElasticTranscoderThumbnails = ...
    ) -> ElasticTranscoderCreatePresetResponse: ...

    def delete_pipeline(self, *,
        Id: str
    ) -> ElasticTranscoderDeletePipelineResponse: ...

    def delete_preset(self, *,
        Id: str
    ) -> ElasticTranscoderDeletePresetResponse: ...

    def list_jobs_by_pipeline(self, *,
        PipelineId: str,
        Ascending: str = ...,
        PageToken: str = ...
    ) -> ElasticTranscoderListJobsByPipelineResponse: ...

    def list_jobs_by_status(self, *,
        Status: str,
        Ascending: str = ...,
        PageToken: str = ...
    ) -> ElasticTranscoderListJobsByStatusResponse: ...

    def list_pipelines(self, *,
        Ascending: str = ...,
        PageToken: str = ...
    ) -> ElasticTranscoderListPipelinesResponse: ...

    def list_presets(self, *,
        Ascending: str = ...,
        PageToken: str = ...
    ) -> ElasticTranscoderListPresetsResponse: ...

    def read_job(self, *,
        Id: str
    ) -> ElasticTranscoderReadJobResponse: ...

    def read_pipeline(self, *,
        Id: str
    ) -> ElasticTranscoderReadPipelineResponse: ...

    def read_preset(self, *,
        Id: str
    ) -> ElasticTranscoderReadPresetResponse: ...

    def test_role(self, *,
        Role: str,
        InputBucket: str,
        OutputBucket: str,
        Topics: List[str]
    ) -> ElasticTranscoderTestRoleResponse: ...

    def update_pipeline(self, *,
        Id: str,
        Name: str = ...,
        InputBucket: str = ...,
        Role: str = ...,
        AwsKmsKeyArn: str = ...,
        Notifications: ElasticTranscoderNotifications = ...,
        ContentConfig: ElasticTranscoderPipelineOutputConfig = ...,
        ThumbnailConfig: ElasticTranscoderPipelineOutputConfig = ...
    ) -> ElasticTranscoderUpdatePipelineResponse: ...

    def update_pipeline_notifications(self, *,
        Id: str,
        Notifications: ElasticTranscoderNotifications
    ) -> ElasticTranscoderUpdatePipelineNotificationsResponse: ...

    def update_pipeline_status(self, *,
        Id: str,
        Status: str
    ) -> ElasticTranscoderUpdatePipelineStatusResponse: ...


ElasticTranscoderCancelJobResponse = TypedDict(
    'ElasticTranscoderCancelJobResponse', {
    }
)


ElasticTranscoderEncryption = TypedDict(
    'ElasticTranscoderEncryption', {
        'EncryptionMode': Optional[str],
        'Base64EncodedString': Optional[str],
        'Base64EncodedString': Optional[str],
        'ZeroTo255String': Optional[str],
    }
)


ElasticTranscoderTimeSpan = TypedDict(
    'ElasticTranscoderTimeSpan', {
        'Time': Optional[str],
        'Time': Optional[str],
    }
)


ElasticTranscoderCaptionSource = TypedDict(
    'ElasticTranscoderCaptionSource', {
        'LongKey': Optional[str],
        'Key': Optional[str],
        'TimeOffset': Optional[str],
        'Name': Optional[str],
        'Encryption': Optional[ElasticTranscoderEncryption],
    }
)


ElasticTranscoderInputCaptions = TypedDict(
    'ElasticTranscoderInputCaptions', {
        'CaptionMergePolicy': Optional[str],
        'CaptionSources': Optional[List[ElasticTranscoderCaptionSource]],
    }
)


ElasticTranscoderDetectedProperties = TypedDict(
    'ElasticTranscoderDetectedProperties', {
        'NullableInteger': Optional[int],
        'NullableInteger': Optional[int],
        'FloatString': Optional[str],
        'NullableLong': Optional[int],
        'NullableLong': Optional[int],
    }
)


ElasticTranscoderJobInput = TypedDict(
    'ElasticTranscoderJobInput', {
        'LongKey': Optional[str],
        'FrameRate': Optional[str],
        'Resolution': Optional[str],
        'AspectRatio': Optional[str],
        'Interlaced': Optional[str],
        'JobContainer': Optional[str],
        'Encryption': Optional[ElasticTranscoderEncryption],
        'TimeSpan': Optional[ElasticTranscoderTimeSpan],
        'InputCaptions': Optional[ElasticTranscoderInputCaptions],
        'DetectedProperties': Optional[ElasticTranscoderDetectedProperties],
    }
)


ElasticTranscoderJobWatermark = TypedDict(
    'ElasticTranscoderJobWatermark', {
        'PresetWatermarkId': Optional[str],
        'WatermarkKey': Optional[str],
        'Encryption': Optional[ElasticTranscoderEncryption],
    }
)


ElasticTranscoderArtwork = TypedDict(
    'ElasticTranscoderArtwork', {
        'WatermarkKey': Optional[str],
        'DigitsOrAuto': Optional[str],
        'DigitsOrAuto': Optional[str],
        'SizingPolicy': Optional[str],
        'PaddingPolicy': Optional[str],
        'JpgOrPng': Optional[str],
        'Encryption': Optional[ElasticTranscoderEncryption],
    }
)


ElasticTranscoderJobAlbumArt = TypedDict(
    'ElasticTranscoderJobAlbumArt', {
        'MergePolicy': Optional[str],
        'Artworks': Optional[List[ElasticTranscoderArtwork]],
    }
)


ElasticTranscoderClip = TypedDict(
    'ElasticTranscoderClip', {
        'TimeSpan': Optional[ElasticTranscoderTimeSpan],
    }
)


ElasticTranscoderCaptionFormat = TypedDict(
    'ElasticTranscoderCaptionFormat', {
        'CaptionFormatFormat': Optional[str],
        'CaptionFormatPattern': Optional[str],
        'Encryption': Optional[ElasticTranscoderEncryption],
    }
)


ElasticTranscoderCaptions = TypedDict(
    'ElasticTranscoderCaptions', {
        'CaptionMergePolicy': Optional[str],
        'CaptionSources': Optional[List[ElasticTranscoderCaptionSource]],
        'CaptionFormats': Optional[List[ElasticTranscoderCaptionFormat]],
    }
)


ElasticTranscoderCreateJobOutput = TypedDict(
    'ElasticTranscoderCreateJobOutput', {
        'Key': Optional[str],
        'ThumbnailPattern': Optional[str],
        'Encryption': Optional[ElasticTranscoderEncryption],
        'Rotate': Optional[str],
        'Id': Optional[str],
        'FloatString': Optional[str],
        'JobWatermarks': Optional[List[ElasticTranscoderJobWatermark]],
        'JobAlbumArt': Optional[ElasticTranscoderJobAlbumArt],
        'Composition': Optional[List[ElasticTranscoderClip]],
        'Captions': Optional[ElasticTranscoderCaptions],
        'Encryption': Optional[ElasticTranscoderEncryption],
    }
)


ElasticTranscoderHlsContentProtection = TypedDict(
    'ElasticTranscoderHlsContentProtection', {
        'HlsContentProtectionMethod': Optional[str],
        'Base64EncodedString': Optional[str],
        'Base64EncodedString': Optional[str],
        'ZeroTo255String': Optional[str],
        'ZeroTo512String': Optional[str],
        'KeyStoragePolicy': Optional[str],
    }
)


ElasticTranscoderPlayReadyDrm = TypedDict(
    'ElasticTranscoderPlayReadyDrm', {
        'PlayReadyDrmFormatString': Optional[str],
        'NonEmptyBase64EncodedString': Optional[str],
        'NonEmptyBase64EncodedString': Optional[str],
        'KeyIdGuid': Optional[str],
        'ZeroTo255String': Optional[str],
        'OneTo512String': Optional[str],
    }
)


ElasticTranscoderCreateJobPlaylist = TypedDict(
    'ElasticTranscoderCreateJobPlaylist', {
        'Filename': Optional[str],
        'PlaylistFormat': Optional[str],
        'OutputKeys': Optional[List[str]],
        'HlsContentProtection': Optional[ElasticTranscoderHlsContentProtection],
        'PlayReadyDrm': Optional[ElasticTranscoderPlayReadyDrm],
    }
)


ElasticTranscoderJobOutput = TypedDict(
    'ElasticTranscoderJobOutput', {
        'String': Optional[str],
        'Key': Optional[str],
        'ThumbnailPattern': Optional[str],
        'Encryption': Optional[ElasticTranscoderEncryption],
        'Rotate': Optional[str],
        'Id': Optional[str],
        'FloatString': Optional[str],
        'JobStatus': Optional[str],
        'Description': Optional[str],
        'NullableLong': Optional[int],
        'NullableInteger': Optional[int],
        'NullableInteger': Optional[int],
        'FloatString': Optional[str],
        'NullableLong': Optional[int],
        'NullableLong': Optional[int],
        'JobWatermarks': Optional[List[ElasticTranscoderJobWatermark]],
        'JobAlbumArt': Optional[ElasticTranscoderJobAlbumArt],
        'Composition': Optional[List[ElasticTranscoderClip]],
        'Captions': Optional[ElasticTranscoderCaptions],
        'Encryption': Optional[ElasticTranscoderEncryption],
        'String': Optional[str],
    }
)


ElasticTranscoderPlaylist = TypedDict(
    'ElasticTranscoderPlaylist', {
        'Filename': Optional[str],
        'PlaylistFormat': Optional[str],
        'OutputKeys': Optional[List[str]],
        'HlsContentProtection': Optional[ElasticTranscoderHlsContentProtection],
        'PlayReadyDrm': Optional[ElasticTranscoderPlayReadyDrm],
        'JobStatus': Optional[str],
        'Description': Optional[str],
    }
)


ElasticTranscoderTiming = TypedDict(
    'ElasticTranscoderTiming', {
        'NullableLong': Optional[int],
        'NullableLong': Optional[int],
        'NullableLong': Optional[int],
    }
)


ElasticTranscoderJob = TypedDict(
    'ElasticTranscoderJob', {
        'Id': Optional[str],
        'String': Optional[str],
        'Id': Optional[str],
        'JobInput': Optional[ElasticTranscoderJobInput],
        'JobInputs': Optional[List[ElasticTranscoderJobInput]],
        'JobOutput': Optional[ElasticTranscoderJobOutput],
        'JobOutputs': Optional[List[ElasticTranscoderJobOutput]],
        'Key': Optional[str],
        'Playlists': Optional[List[ElasticTranscoderPlaylist]],
        'JobStatus': Optional[str],
        'UserMetadata': Optional[Dict[str, str]],
        'Timing': Optional[ElasticTranscoderTiming],
    }
)


ElasticTranscoderCreateJobResponse = TypedDict(
    'ElasticTranscoderCreateJobResponse', {
        'Job': Optional[ElasticTranscoderJob],
    }
)


ElasticTranscoderNotifications = TypedDict(
    'ElasticTranscoderNotifications', {
        'SnsTopic': Optional[str],
        'SnsTopic': Optional[str],
        'SnsTopic': Optional[str],
        'SnsTopic': Optional[str],
    }
)


ElasticTranscoderPermission = TypedDict(
    'ElasticTranscoderPermission', {
        'GranteeType': Optional[str],
        'Grantee': Optional[str],
        'AccessControls': Optional[List[str]],
    }
)


ElasticTranscoderPipelineOutputConfig = TypedDict(
    'ElasticTranscoderPipelineOutputConfig', {
        'BucketName': Optional[str],
        'StorageClass': Optional[str],
        'Permissions': Optional[List[ElasticTranscoderPermission]],
    }
)


ElasticTranscoderPipeline = TypedDict(
    'ElasticTranscoderPipeline', {
        'Id': Optional[str],
        'String': Optional[str],
        'Name': Optional[str],
        'PipelineStatus': Optional[str],
        'BucketName': Optional[str],
        'BucketName': Optional[str],
        'Role': Optional[str],
        'KeyArn': Optional[str],
        'Notifications': Optional[ElasticTranscoderNotifications],
        'PipelineOutputConfig': Optional[ElasticTranscoderPipelineOutputConfig],
        'PipelineOutputConfig': Optional[ElasticTranscoderPipelineOutputConfig],
    }
)


ElasticTranscoderWarning = TypedDict(
    'ElasticTranscoderWarning', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


ElasticTranscoderCreatePipelineResponse = TypedDict(
    'ElasticTranscoderCreatePipelineResponse', {
        'Pipeline': Optional[ElasticTranscoderPipeline],
        'Warnings': Optional[List[ElasticTranscoderWarning]],
    }
)


ElasticTranscoderPresetWatermark = TypedDict(
    'ElasticTranscoderPresetWatermark', {
        'PresetWatermarkId': Optional[str],
        'PixelsOrPercent': Optional[str],
        'PixelsOrPercent': Optional[str],
        'WatermarkSizingPolicy': Optional[str],
        'HorizontalAlign': Optional[str],
        'PixelsOrPercent': Optional[str],
        'VerticalAlign': Optional[str],
        'PixelsOrPercent': Optional[str],
        'Opacity': Optional[str],
        'Target': Optional[str],
    }
)


ElasticTranscoderVideoParameters = TypedDict(
    'ElasticTranscoderVideoParameters', {
        'VideoCodec': Optional[str],
        'CodecOptions': Optional[Dict[str, str]],
        'KeyframesMaxDist': Optional[str],
        'FixedGOP': Optional[str],
        'VideoBitRate': Optional[str],
        'FrameRate': Optional[str],
        'MaxFrameRate': Optional[str],
        'Resolution': Optional[str],
        'AspectRatio': Optional[str],
        'DigitsOrAuto': Optional[str],
        'DigitsOrAuto': Optional[str],
        'AspectRatio': Optional[str],
        'SizingPolicy': Optional[str],
        'PaddingPolicy': Optional[str],
        'PresetWatermarks': Optional[List[ElasticTranscoderPresetWatermark]],
    }
)


ElasticTranscoderAudioCodecOptions = TypedDict(
    'ElasticTranscoderAudioCodecOptions', {
        'AudioCodecProfile': Optional[str],
        'AudioBitDepth': Optional[str],
        'AudioBitOrder': Optional[str],
        'AudioSigned': Optional[str],
    }
)


ElasticTranscoderAudioParameters = TypedDict(
    'ElasticTranscoderAudioParameters', {
        'AudioCodec': Optional[str],
        'AudioSampleRate': Optional[str],
        'AudioBitRate': Optional[str],
        'AudioChannels': Optional[str],
        'AudioPackingMode': Optional[str],
        'AudioCodecOptions': Optional[ElasticTranscoderAudioCodecOptions],
    }
)


ElasticTranscoderThumbnails = TypedDict(
    'ElasticTranscoderThumbnails', {
        'JpgOrPng': Optional[str],
        'Digits': Optional[str],
        'ThumbnailResolution': Optional[str],
        'AspectRatio': Optional[str],
        'DigitsOrAuto': Optional[str],
        'DigitsOrAuto': Optional[str],
        'SizingPolicy': Optional[str],
        'PaddingPolicy': Optional[str],
    }
)


ElasticTranscoderPreset = TypedDict(
    'ElasticTranscoderPreset', {
        'Id': Optional[str],
        'String': Optional[str],
        'Name': Optional[str],
        'Description': Optional[str],
        'PresetContainer': Optional[str],
        'AudioParameters': Optional[ElasticTranscoderAudioParameters],
        'VideoParameters': Optional[ElasticTranscoderVideoParameters],
        'Thumbnails': Optional[ElasticTranscoderThumbnails],
        'PresetType': Optional[str],
    }
)


ElasticTranscoderCreatePresetResponse = TypedDict(
    'ElasticTranscoderCreatePresetResponse', {
        'Preset': Optional[ElasticTranscoderPreset],
        'String': Optional[str],
    }
)


ElasticTranscoderDeletePipelineResponse = TypedDict(
    'ElasticTranscoderDeletePipelineResponse', {
    }
)


ElasticTranscoderDeletePresetResponse = TypedDict(
    'ElasticTranscoderDeletePresetResponse', {
    }
)


ElasticTranscoderListJobsByPipelineResponse = TypedDict(
    'ElasticTranscoderListJobsByPipelineResponse', {
        'Jobs': Optional[List[ElasticTranscoderJob]],
        'Id': Optional[str],
    }
)


ElasticTranscoderListJobsByStatusResponse = TypedDict(
    'ElasticTranscoderListJobsByStatusResponse', {
        'Jobs': Optional[List[ElasticTranscoderJob]],
        'Id': Optional[str],
    }
)


ElasticTranscoderListPipelinesResponse = TypedDict(
    'ElasticTranscoderListPipelinesResponse', {
        'Pipelines': Optional[List[ElasticTranscoderPipeline]],
        'Id': Optional[str],
    }
)


ElasticTranscoderListPresetsResponse = TypedDict(
    'ElasticTranscoderListPresetsResponse', {
        'Presets': Optional[List[ElasticTranscoderPreset]],
        'Id': Optional[str],
    }
)


ElasticTranscoderReadJobResponse = TypedDict(
    'ElasticTranscoderReadJobResponse', {
        'Job': Optional[ElasticTranscoderJob],
    }
)


ElasticTranscoderReadPipelineResponse = TypedDict(
    'ElasticTranscoderReadPipelineResponse', {
        'Pipeline': Optional[ElasticTranscoderPipeline],
        'Warnings': Optional[List[ElasticTranscoderWarning]],
    }
)


ElasticTranscoderReadPresetResponse = TypedDict(
    'ElasticTranscoderReadPresetResponse', {
        'Preset': Optional[ElasticTranscoderPreset],
    }
)


ElasticTranscoderTestRoleResponse = TypedDict(
    'ElasticTranscoderTestRoleResponse', {
        'Success': Optional[str],
        'ExceptionMessages': Optional[List[str]],
    }
)


ElasticTranscoderUpdatePipelineResponse = TypedDict(
    'ElasticTranscoderUpdatePipelineResponse', {
        'Pipeline': Optional[ElasticTranscoderPipeline],
        'Warnings': Optional[List[ElasticTranscoderWarning]],
    }
)


ElasticTranscoderUpdatePipelineNotificationsResponse = TypedDict(
    'ElasticTranscoderUpdatePipelineNotificationsResponse', {
        'Pipeline': Optional[ElasticTranscoderPipeline],
    }
)


ElasticTranscoderUpdatePipelineStatusResponse = TypedDict(
    'ElasticTranscoderUpdatePipelineStatusResponse', {
        'Pipeline': Optional[ElasticTranscoderPipeline],
    }
)


class ElasticLoadBalancing(BaseClient):
    def add_tags(self, *,
        LoadBalancerNames: List[str],
        Tags: List[ElasticLoadBalancingTag]
    ) -> ElasticLoadBalancingAddTagsOutput: ...

    def apply_security_groups_to_load_balancer(self, *,
        LoadBalancerName: str,
        SecurityGroups: List[str]
    ) -> ElasticLoadBalancingApplySecurityGroupsToLoadBalancerOutput: ...

    def attach_load_balancer_to_subnets(self, *,
        LoadBalancerName: str,
        Subnets: List[str]
    ) -> ElasticLoadBalancingAttachLoadBalancerToSubnetsOutput: ...

    def configure_health_check(self, *,
        LoadBalancerName: str,
        HealthCheck: ElasticLoadBalancingHealthCheck
    ) -> ElasticLoadBalancingConfigureHealthCheckOutput: ...

    def create_app_cookie_stickiness_policy(self, *,
        LoadBalancerName: str,
        PolicyName: str,
        CookieName: str
    ) -> ElasticLoadBalancingCreateAppCookieStickinessPolicyOutput: ...

    def create_lb_cookie_stickiness_policy(self, *,
        LoadBalancerName: str,
        PolicyName: str,
        CookieExpirationPeriod: int = ...
    ) -> ElasticLoadBalancingCreateLBCookieStickinessPolicyOutput: ...

    def create_load_balancer(self, *,
        LoadBalancerName: str,
        Listeners: List[ElasticLoadBalancingListener],
        AvailabilityZones: List[str] = ...,
        Subnets: List[str] = ...,
        SecurityGroups: List[str] = ...,
        Scheme: str = ...,
        Tags: List[ElasticLoadBalancingTag] = ...
    ) -> ElasticLoadBalancingCreateAccessPointOutput: ...

    def create_load_balancer_listeners(self, *,
        LoadBalancerName: str,
        Listeners: List[ElasticLoadBalancingListener]
    ) -> ElasticLoadBalancingCreateLoadBalancerListenerOutput: ...

    def create_load_balancer_policy(self, *,
        LoadBalancerName: str,
        PolicyName: str,
        PolicyTypeName: str,
        PolicyAttributes: List[ElasticLoadBalancingPolicyAttribute] = ...
    ) -> ElasticLoadBalancingCreateLoadBalancerPolicyOutput: ...

    def delete_load_balancer(self, *,
        LoadBalancerName: str
    ) -> ElasticLoadBalancingDeleteAccessPointOutput: ...

    def delete_load_balancer_listeners(self, *,
        LoadBalancerName: str,
        LoadBalancerPorts: List[int]
    ) -> ElasticLoadBalancingDeleteLoadBalancerListenerOutput: ...

    def delete_load_balancer_policy(self, *,
        LoadBalancerName: str,
        PolicyName: str
    ) -> ElasticLoadBalancingDeleteLoadBalancerPolicyOutput: ...

    def deregister_instances_from_load_balancer(self, *,
        LoadBalancerName: str,
        Instances: List[ElasticLoadBalancingInstance]
    ) -> ElasticLoadBalancingDeregisterEndPointsOutput: ...

    def describe_account_limits(self, *,
        Marker: str = ...,
        PageSize: int = ...
    ) -> ElasticLoadBalancingDescribeAccountLimitsOutput: ...

    def describe_instance_health(self, *,
        LoadBalancerName: str,
        Instances: List[ElasticLoadBalancingInstance] = ...
    ) -> ElasticLoadBalancingDescribeEndPointStateOutput: ...

    def describe_load_balancer_attributes(self, *,
        LoadBalancerName: str
    ) -> ElasticLoadBalancingDescribeLoadBalancerAttributesOutput: ...

    def describe_load_balancer_policies(self, *,
        LoadBalancerName: str = ...,
        PolicyNames: List[str] = ...
    ) -> ElasticLoadBalancingDescribeLoadBalancerPoliciesOutput: ...

    def describe_load_balancer_policy_types(self, *,
        PolicyTypeNames: List[str] = ...
    ) -> ElasticLoadBalancingDescribeLoadBalancerPolicyTypesOutput: ...

    def describe_load_balancers(self, *,
        LoadBalancerNames: List[str] = ...,
        Marker: str = ...,
        PageSize: int = ...
    ) -> ElasticLoadBalancingDescribeAccessPointsOutput: ...

    def describe_tags(self, *,
        LoadBalancerNames: List[str]
    ) -> ElasticLoadBalancingDescribeTagsOutput: ...

    def detach_load_balancer_from_subnets(self, *,
        LoadBalancerName: str,
        Subnets: List[str]
    ) -> ElasticLoadBalancingDetachLoadBalancerFromSubnetsOutput: ...

    def disable_availability_zones_for_load_balancer(self, *,
        LoadBalancerName: str,
        AvailabilityZones: List[str]
    ) -> ElasticLoadBalancingRemoveAvailabilityZonesOutput: ...

    def enable_availability_zones_for_load_balancer(self, *,
        LoadBalancerName: str,
        AvailabilityZones: List[str]
    ) -> ElasticLoadBalancingAddAvailabilityZonesOutput: ...

    def modify_load_balancer_attributes(self, *,
        LoadBalancerName: str,
        LoadBalancerAttributes: ElasticLoadBalancingLoadBalancerAttributes
    ) -> ElasticLoadBalancingModifyLoadBalancerAttributesOutput: ...

    def register_instances_with_load_balancer(self, *,
        LoadBalancerName: str,
        Instances: List[ElasticLoadBalancingInstance]
    ) -> ElasticLoadBalancingRegisterEndPointsOutput: ...

    def remove_tags(self, *,
        LoadBalancerNames: List[str],
        Tags: List[ElasticLoadBalancingTagKeyOnly]
    ) -> ElasticLoadBalancingRemoveTagsOutput: ...

    def set_load_balancer_listener_ssl_certificate(self, *,
        LoadBalancerName: str,
        LoadBalancerPort: int,
        SSLCertificateId: str
    ) -> ElasticLoadBalancingSetLoadBalancerListenerSSLCertificateOutput: ...

    def set_load_balancer_policies_for_backend_server(self, *,
        LoadBalancerName: str,
        InstancePort: int,
        PolicyNames: List[str]
    ) -> ElasticLoadBalancingSetLoadBalancerPoliciesForBackendServerOutput: ...

    def set_load_balancer_policies_of_listener(self, *,
        LoadBalancerName: str,
        LoadBalancerPort: int,
        PolicyNames: List[str]
    ) -> ElasticLoadBalancingSetLoadBalancerPoliciesOfListenerOutput: ...


ElasticLoadBalancingTag = TypedDict(
    'ElasticLoadBalancingTag', {
        'TagKey': str,
        'TagValue': Optional[str],
    }
)


ElasticLoadBalancingAddTagsOutput = TypedDict(
    'ElasticLoadBalancingAddTagsOutput', {
    }
)


ElasticLoadBalancingApplySecurityGroupsToLoadBalancerOutput = TypedDict(
    'ElasticLoadBalancingApplySecurityGroupsToLoadBalancerOutput', {
        'SecurityGroups': Optional[List[str]],
    }
)


ElasticLoadBalancingAttachLoadBalancerToSubnetsOutput = TypedDict(
    'ElasticLoadBalancingAttachLoadBalancerToSubnetsOutput', {
        'Subnets': Optional[List[str]],
    }
)


ElasticLoadBalancingHealthCheck = TypedDict(
    'ElasticLoadBalancingHealthCheck', {
        'HealthCheckTarget': str,
        'HealthCheckInterval': int,
        'HealthCheckTimeout': int,
        'UnhealthyThreshold': int,
        'HealthyThreshold': int,
    }
)


ElasticLoadBalancingConfigureHealthCheckOutput = TypedDict(
    'ElasticLoadBalancingConfigureHealthCheckOutput', {
        'HealthCheck': Optional[ElasticLoadBalancingHealthCheck],
    }
)


ElasticLoadBalancingCreateAppCookieStickinessPolicyOutput = TypedDict(
    'ElasticLoadBalancingCreateAppCookieStickinessPolicyOutput', {
    }
)


ElasticLoadBalancingCreateLBCookieStickinessPolicyOutput = TypedDict(
    'ElasticLoadBalancingCreateLBCookieStickinessPolicyOutput', {
    }
)


ElasticLoadBalancingListener = TypedDict(
    'ElasticLoadBalancingListener', {
        'Protocol': str,
        'AccessPointPort': int,
        'InstancePort': int,
        'Protocol': Optional[str],
        'SSLCertificateId': Optional[str],
    }
)


ElasticLoadBalancingCreateAccessPointOutput = TypedDict(
    'ElasticLoadBalancingCreateAccessPointOutput', {
        'DNSName': Optional[str],
    }
)


ElasticLoadBalancingCreateLoadBalancerListenerOutput = TypedDict(
    'ElasticLoadBalancingCreateLoadBalancerListenerOutput', {
    }
)


ElasticLoadBalancingPolicyAttribute = TypedDict(
    'ElasticLoadBalancingPolicyAttribute', {
        'AttributeName': Optional[str],
        'AttributeValue': Optional[str],
    }
)


ElasticLoadBalancingCreateLoadBalancerPolicyOutput = TypedDict(
    'ElasticLoadBalancingCreateLoadBalancerPolicyOutput', {
    }
)


ElasticLoadBalancingDeleteAccessPointOutput = TypedDict(
    'ElasticLoadBalancingDeleteAccessPointOutput', {
    }
)


ElasticLoadBalancingDeleteLoadBalancerListenerOutput = TypedDict(
    'ElasticLoadBalancingDeleteLoadBalancerListenerOutput', {
    }
)


ElasticLoadBalancingDeleteLoadBalancerPolicyOutput = TypedDict(
    'ElasticLoadBalancingDeleteLoadBalancerPolicyOutput', {
    }
)


ElasticLoadBalancingInstance = TypedDict(
    'ElasticLoadBalancingInstance', {
        'InstanceId': Optional[str],
    }
)


ElasticLoadBalancingDeregisterEndPointsOutput = TypedDict(
    'ElasticLoadBalancingDeregisterEndPointsOutput', {
        'Instances': Optional[List[ElasticLoadBalancingInstance]],
    }
)


ElasticLoadBalancingLimit = TypedDict(
    'ElasticLoadBalancingLimit', {
        'Name': Optional[str],
        'Max': Optional[str],
    }
)


ElasticLoadBalancingDescribeAccountLimitsOutput = TypedDict(
    'ElasticLoadBalancingDescribeAccountLimitsOutput', {
        'Limits': Optional[List[ElasticLoadBalancingLimit]],
        'Marker': Optional[str],
    }
)


ElasticLoadBalancingInstanceState = TypedDict(
    'ElasticLoadBalancingInstanceState', {
        'InstanceId': Optional[str],
        'State': Optional[str],
        'ReasonCode': Optional[str],
        'Description': Optional[str],
    }
)


ElasticLoadBalancingDescribeEndPointStateOutput = TypedDict(
    'ElasticLoadBalancingDescribeEndPointStateOutput', {
        'InstanceStates': Optional[List[ElasticLoadBalancingInstanceState]],
    }
)


ElasticLoadBalancingCrossZoneLoadBalancing = TypedDict(
    'ElasticLoadBalancingCrossZoneLoadBalancing', {
        'CrossZoneLoadBalancingEnabled': bool,
    }
)


ElasticLoadBalancingAccessLog = TypedDict(
    'ElasticLoadBalancingAccessLog', {
        'AccessLogEnabled': bool,
        'S3BucketName': Optional[str],
        'AccessLogInterval': Optional[int],
        'AccessLogPrefix': Optional[str],
    }
)


ElasticLoadBalancingConnectionDraining = TypedDict(
    'ElasticLoadBalancingConnectionDraining', {
        'ConnectionDrainingEnabled': bool,
        'ConnectionDrainingTimeout': Optional[int],
    }
)


ElasticLoadBalancingConnectionSettings = TypedDict(
    'ElasticLoadBalancingConnectionSettings', {
        'IdleTimeout': int,
    }
)


ElasticLoadBalancingAdditionalAttribute = TypedDict(
    'ElasticLoadBalancingAdditionalAttribute', {
        'AdditionalAttributeKey': Optional[str],
        'AdditionalAttributeValue': Optional[str],
    }
)


ElasticLoadBalancingLoadBalancerAttributes = TypedDict(
    'ElasticLoadBalancingLoadBalancerAttributes', {
        'CrossZoneLoadBalancing': Optional[ElasticLoadBalancingCrossZoneLoadBalancing],
        'AccessLog': Optional[ElasticLoadBalancingAccessLog],
        'ConnectionDraining': Optional[ElasticLoadBalancingConnectionDraining],
        'ConnectionSettings': Optional[ElasticLoadBalancingConnectionSettings],
        'AdditionalAttributes': Optional[List[ElasticLoadBalancingAdditionalAttribute]],
    }
)


ElasticLoadBalancingDescribeLoadBalancerAttributesOutput = TypedDict(
    'ElasticLoadBalancingDescribeLoadBalancerAttributesOutput', {
        'LoadBalancerAttributes': Optional[ElasticLoadBalancingLoadBalancerAttributes],
    }
)


ElasticLoadBalancingPolicyAttributeDescription = TypedDict(
    'ElasticLoadBalancingPolicyAttributeDescription', {
        'AttributeName': Optional[str],
        'AttributeValue': Optional[str],
    }
)


ElasticLoadBalancingPolicyDescription = TypedDict(
    'ElasticLoadBalancingPolicyDescription', {
        'PolicyName': Optional[str],
        'PolicyTypeName': Optional[str],
        'PolicyAttributeDescriptions': Optional[List[ElasticLoadBalancingPolicyAttributeDescription]],
    }
)


ElasticLoadBalancingDescribeLoadBalancerPoliciesOutput = TypedDict(
    'ElasticLoadBalancingDescribeLoadBalancerPoliciesOutput', {
        'PolicyDescriptions': Optional[List[ElasticLoadBalancingPolicyDescription]],
    }
)


ElasticLoadBalancingPolicyAttributeTypeDescription = TypedDict(
    'ElasticLoadBalancingPolicyAttributeTypeDescription', {
        'AttributeName': Optional[str],
        'AttributeType': Optional[str],
        'Description': Optional[str],
        'DefaultValue': Optional[str],
        'Cardinality': Optional[str],
    }
)


ElasticLoadBalancingPolicyTypeDescription = TypedDict(
    'ElasticLoadBalancingPolicyTypeDescription', {
        'PolicyTypeName': Optional[str],
        'Description': Optional[str],
        'PolicyAttributeTypeDescriptions': Optional[List[ElasticLoadBalancingPolicyAttributeTypeDescription]],
    }
)


ElasticLoadBalancingDescribeLoadBalancerPolicyTypesOutput = TypedDict(
    'ElasticLoadBalancingDescribeLoadBalancerPolicyTypesOutput', {
        'PolicyTypeDescriptions': Optional[List[ElasticLoadBalancingPolicyTypeDescription]],
    }
)


ElasticLoadBalancingListenerDescription = TypedDict(
    'ElasticLoadBalancingListenerDescription', {
        'Listener': Optional[ElasticLoadBalancingListener],
        'PolicyNames': Optional[List[str]],
    }
)


ElasticLoadBalancingAppCookieStickinessPolicy = TypedDict(
    'ElasticLoadBalancingAppCookieStickinessPolicy', {
        'PolicyName': Optional[str],
        'CookieName': Optional[str],
    }
)


ElasticLoadBalancingLBCookieStickinessPolicy = TypedDict(
    'ElasticLoadBalancingLBCookieStickinessPolicy', {
        'PolicyName': Optional[str],
        'CookieExpirationPeriod': Optional[int],
    }
)


ElasticLoadBalancingPolicies = TypedDict(
    'ElasticLoadBalancingPolicies', {
        'AppCookieStickinessPolicies': Optional[List[ElasticLoadBalancingAppCookieStickinessPolicy]],
        'LBCookieStickinessPolicies': Optional[List[ElasticLoadBalancingLBCookieStickinessPolicy]],
        'PolicyNames': Optional[List[str]],
    }
)


ElasticLoadBalancingBackendServerDescription = TypedDict(
    'ElasticLoadBalancingBackendServerDescription', {
        'InstancePort': Optional[int],
        'PolicyNames': Optional[List[str]],
    }
)


ElasticLoadBalancingSourceSecurityGroup = TypedDict(
    'ElasticLoadBalancingSourceSecurityGroup', {
        'SecurityGroupOwnerAlias': Optional[str],
        'SecurityGroupName': Optional[str],
    }
)


ElasticLoadBalancingLoadBalancerDescription = TypedDict(
    'ElasticLoadBalancingLoadBalancerDescription', {
        'AccessPointName': Optional[str],
        'DNSName': Optional[str],
        'DNSName': Optional[str],
        'DNSName': Optional[str],
        'ListenerDescriptions': Optional[List[ElasticLoadBalancingListenerDescription]],
        'Policies': Optional[ElasticLoadBalancingPolicies],
        'BackendServerDescriptions': Optional[List[ElasticLoadBalancingBackendServerDescription]],
        'AvailabilityZones': Optional[List[str]],
        'Subnets': Optional[List[str]],
        'VPCId': Optional[str],
        'Instances': Optional[List[ElasticLoadBalancingInstance]],
        'HealthCheck': Optional[ElasticLoadBalancingHealthCheck],
        'SourceSecurityGroup': Optional[ElasticLoadBalancingSourceSecurityGroup],
        'SecurityGroups': Optional[List[str]],
        'CreatedTime': Optional[datetime.datetime],
        'LoadBalancerScheme': Optional[str],
    }
)


ElasticLoadBalancingDescribeAccessPointsOutput = TypedDict(
    'ElasticLoadBalancingDescribeAccessPointsOutput', {
        'LoadBalancerDescriptions': Optional[List[ElasticLoadBalancingLoadBalancerDescription]],
        'Marker': Optional[str],
    }
)


ElasticLoadBalancingTagDescription = TypedDict(
    'ElasticLoadBalancingTagDescription', {
        'AccessPointName': Optional[str],
        'TagList': Optional[List[ElasticLoadBalancingTag]],
    }
)


ElasticLoadBalancingDescribeTagsOutput = TypedDict(
    'ElasticLoadBalancingDescribeTagsOutput', {
        'TagDescriptions': Optional[List[ElasticLoadBalancingTagDescription]],
    }
)


ElasticLoadBalancingDetachLoadBalancerFromSubnetsOutput = TypedDict(
    'ElasticLoadBalancingDetachLoadBalancerFromSubnetsOutput', {
        'Subnets': Optional[List[str]],
    }
)


ElasticLoadBalancingRemoveAvailabilityZonesOutput = TypedDict(
    'ElasticLoadBalancingRemoveAvailabilityZonesOutput', {
        'AvailabilityZones': Optional[List[str]],
    }
)


ElasticLoadBalancingAddAvailabilityZonesOutput = TypedDict(
    'ElasticLoadBalancingAddAvailabilityZonesOutput', {
        'AvailabilityZones': Optional[List[str]],
    }
)


ElasticLoadBalancingModifyLoadBalancerAttributesOutput = TypedDict(
    'ElasticLoadBalancingModifyLoadBalancerAttributesOutput', {
        'AccessPointName': Optional[str],
        'LoadBalancerAttributes': Optional[ElasticLoadBalancingLoadBalancerAttributes],
    }
)


ElasticLoadBalancingRegisterEndPointsOutput = TypedDict(
    'ElasticLoadBalancingRegisterEndPointsOutput', {
        'Instances': Optional[List[ElasticLoadBalancingInstance]],
    }
)


ElasticLoadBalancingTagKeyOnly = TypedDict(
    'ElasticLoadBalancingTagKeyOnly', {
        'TagKey': Optional[str],
    }
)


ElasticLoadBalancingRemoveTagsOutput = TypedDict(
    'ElasticLoadBalancingRemoveTagsOutput', {
    }
)


ElasticLoadBalancingSetLoadBalancerListenerSSLCertificateOutput = TypedDict(
    'ElasticLoadBalancingSetLoadBalancerListenerSSLCertificateOutput', {
    }
)


ElasticLoadBalancingSetLoadBalancerPoliciesForBackendServerOutput = TypedDict(
    'ElasticLoadBalancingSetLoadBalancerPoliciesForBackendServerOutput', {
    }
)


ElasticLoadBalancingSetLoadBalancerPoliciesOfListenerOutput = TypedDict(
    'ElasticLoadBalancingSetLoadBalancerPoliciesOfListenerOutput', {
    }
)


class ElasticLoadBalancingv2(BaseClient):
    def add_listener_certificates(self, *,
        ListenerArn: str,
        Certificates: List[ElasticLoadBalancingv2Certificate]
    ) -> ElasticLoadBalancingv2AddListenerCertificatesOutput: ...

    def add_tags(self, *,
        ResourceArns: List[str],
        Tags: List[ElasticLoadBalancingv2Tag]
    ) -> ElasticLoadBalancingv2AddTagsOutput: ...

    def create_listener(self, *,
        LoadBalancerArn: str,
        Protocol: str,
        Port: int,
        DefaultActions: List[ElasticLoadBalancingv2Action],
        SslPolicy: str = ...,
        Certificates: List[ElasticLoadBalancingv2Certificate] = ...
    ) -> ElasticLoadBalancingv2CreateListenerOutput: ...

    def create_load_balancer(self, *,
        Name: str,
        Subnets: List[str] = ...,
        SubnetMappings: List[ElasticLoadBalancingv2SubnetMapping] = ...,
        SecurityGroups: List[str] = ...,
        Scheme: str = ...,
        Tags: List[ElasticLoadBalancingv2Tag] = ...,
        Type: str = ...,
        IpAddressType: str = ...
    ) -> ElasticLoadBalancingv2CreateLoadBalancerOutput: ...

    def create_rule(self, *,
        ListenerArn: str,
        Conditions: List[ElasticLoadBalancingv2RuleCondition],
        Priority: int,
        Actions: List[ElasticLoadBalancingv2Action]
    ) -> ElasticLoadBalancingv2CreateRuleOutput: ...

    def create_target_group(self, *,
        Name: str,
        Protocol: str = ...,
        Port: int = ...,
        VpcId: str = ...,
        HealthCheckProtocol: str = ...,
        HealthCheckPort: str = ...,
        HealthCheckEnabled: bool = ...,
        HealthCheckPath: str = ...,
        HealthCheckIntervalSeconds: int = ...,
        HealthCheckTimeoutSeconds: int = ...,
        HealthyThresholdCount: int = ...,
        UnhealthyThresholdCount: int = ...,
        Matcher: ElasticLoadBalancingv2Matcher = ...,
        TargetType: str = ...
    ) -> ElasticLoadBalancingv2CreateTargetGroupOutput: ...

    def delete_listener(self, *,
        ListenerArn: str
    ) -> ElasticLoadBalancingv2DeleteListenerOutput: ...

    def delete_load_balancer(self, *,
        LoadBalancerArn: str
    ) -> ElasticLoadBalancingv2DeleteLoadBalancerOutput: ...

    def delete_rule(self, *,
        RuleArn: str
    ) -> ElasticLoadBalancingv2DeleteRuleOutput: ...

    def delete_target_group(self, *,
        TargetGroupArn: str
    ) -> ElasticLoadBalancingv2DeleteTargetGroupOutput: ...

    def deregister_targets(self, *,
        TargetGroupArn: str,
        Targets: List[ElasticLoadBalancingv2TargetDescription]
    ) -> ElasticLoadBalancingv2DeregisterTargetsOutput: ...

    def describe_account_limits(self, *,
        Marker: str = ...,
        PageSize: int = ...
    ) -> ElasticLoadBalancingv2DescribeAccountLimitsOutput: ...

    def describe_listener_certificates(self, *,
        ListenerArn: str,
        Marker: str = ...,
        PageSize: int = ...
    ) -> ElasticLoadBalancingv2DescribeListenerCertificatesOutput: ...

    def describe_listeners(self, *,
        LoadBalancerArn: str = ...,
        ListenerArns: List[str] = ...,
        Marker: str = ...,
        PageSize: int = ...
    ) -> ElasticLoadBalancingv2DescribeListenersOutput: ...

    def describe_load_balancer_attributes(self, *,
        LoadBalancerArn: str
    ) -> ElasticLoadBalancingv2DescribeLoadBalancerAttributesOutput: ...

    def describe_load_balancers(self, *,
        LoadBalancerArns: List[str] = ...,
        Names: List[str] = ...,
        Marker: str = ...,
        PageSize: int = ...
    ) -> ElasticLoadBalancingv2DescribeLoadBalancersOutput: ...

    def describe_rules(self, *,
        ListenerArn: str = ...,
        RuleArns: List[str] = ...,
        Marker: str = ...,
        PageSize: int = ...
    ) -> ElasticLoadBalancingv2DescribeRulesOutput: ...

    def describe_ssl_policies(self, *,
        Names: List[str] = ...,
        Marker: str = ...,
        PageSize: int = ...
    ) -> ElasticLoadBalancingv2DescribeSSLPoliciesOutput: ...

    def describe_tags(self, *,
        ResourceArns: List[str]
    ) -> ElasticLoadBalancingv2DescribeTagsOutput: ...

    def describe_target_group_attributes(self, *,
        TargetGroupArn: str
    ) -> ElasticLoadBalancingv2DescribeTargetGroupAttributesOutput: ...

    def describe_target_groups(self, *,
        LoadBalancerArn: str = ...,
        TargetGroupArns: List[str] = ...,
        Names: List[str] = ...,
        Marker: str = ...,
        PageSize: int = ...
    ) -> ElasticLoadBalancingv2DescribeTargetGroupsOutput: ...

    def describe_target_health(self, *,
        TargetGroupArn: str,
        Targets: List[ElasticLoadBalancingv2TargetDescription] = ...
    ) -> ElasticLoadBalancingv2DescribeTargetHealthOutput: ...

    def modify_listener(self, *,
        ListenerArn: str,
        Port: int = ...,
        Protocol: str = ...,
        SslPolicy: str = ...,
        Certificates: List[ElasticLoadBalancingv2Certificate] = ...,
        DefaultActions: List[ElasticLoadBalancingv2Action] = ...
    ) -> ElasticLoadBalancingv2ModifyListenerOutput: ...

    def modify_load_balancer_attributes(self, *,
        LoadBalancerArn: str,
        Attributes: List[ElasticLoadBalancingv2LoadBalancerAttribute]
    ) -> ElasticLoadBalancingv2ModifyLoadBalancerAttributesOutput: ...

    def modify_rule(self, *,
        RuleArn: str,
        Conditions: List[ElasticLoadBalancingv2RuleCondition] = ...,
        Actions: List[ElasticLoadBalancingv2Action] = ...
    ) -> ElasticLoadBalancingv2ModifyRuleOutput: ...

    def modify_target_group(self, *,
        TargetGroupArn: str,
        HealthCheckProtocol: str = ...,
        HealthCheckPort: str = ...,
        HealthCheckPath: str = ...,
        HealthCheckEnabled: bool = ...,
        HealthCheckIntervalSeconds: int = ...,
        HealthCheckTimeoutSeconds: int = ...,
        HealthyThresholdCount: int = ...,
        UnhealthyThresholdCount: int = ...,
        Matcher: ElasticLoadBalancingv2Matcher = ...
    ) -> ElasticLoadBalancingv2ModifyTargetGroupOutput: ...

    def modify_target_group_attributes(self, *,
        TargetGroupArn: str,
        Attributes: List[ElasticLoadBalancingv2TargetGroupAttribute]
    ) -> ElasticLoadBalancingv2ModifyTargetGroupAttributesOutput: ...

    def register_targets(self, *,
        TargetGroupArn: str,
        Targets: List[ElasticLoadBalancingv2TargetDescription]
    ) -> ElasticLoadBalancingv2RegisterTargetsOutput: ...

    def remove_listener_certificates(self, *,
        ListenerArn: str,
        Certificates: List[ElasticLoadBalancingv2Certificate]
    ) -> ElasticLoadBalancingv2RemoveListenerCertificatesOutput: ...

    def remove_tags(self, *,
        ResourceArns: List[str],
        TagKeys: List[str]
    ) -> ElasticLoadBalancingv2RemoveTagsOutput: ...

    def set_ip_address_type(self, *,
        LoadBalancerArn: str,
        IpAddressType: str
    ) -> ElasticLoadBalancingv2SetIpAddressTypeOutput: ...

    def set_rule_priorities(self, *,
        RulePriorities: List[ElasticLoadBalancingv2RulePriorityPair]
    ) -> ElasticLoadBalancingv2SetRulePrioritiesOutput: ...

    def set_security_groups(self, *,
        LoadBalancerArn: str,
        SecurityGroups: List[str]
    ) -> ElasticLoadBalancingv2SetSecurityGroupsOutput: ...

    def set_subnets(self, *,
        LoadBalancerArn: str,
        Subnets: List[str] = ...,
        SubnetMappings: List[ElasticLoadBalancingv2SubnetMapping] = ...
    ) -> ElasticLoadBalancingv2SetSubnetsOutput: ...


ElasticLoadBalancingv2Certificate = TypedDict(
    'ElasticLoadBalancingv2Certificate', {
        'CertificateArn': Optional[str],
        'Default': Optional[bool],
    }
)


ElasticLoadBalancingv2AddListenerCertificatesOutput = TypedDict(
    'ElasticLoadBalancingv2AddListenerCertificatesOutput', {
        'CertificateList': Optional[List[ElasticLoadBalancingv2Certificate]],
    }
)


ElasticLoadBalancingv2Tag = TypedDict(
    'ElasticLoadBalancingv2Tag', {
        'TagKey': str,
        'TagValue': Optional[str],
    }
)


ElasticLoadBalancingv2AddTagsOutput = TypedDict(
    'ElasticLoadBalancingv2AddTagsOutput', {
    }
)


ElasticLoadBalancingv2AuthenticateOidcActionConfig = TypedDict(
    'ElasticLoadBalancingv2AuthenticateOidcActionConfig', {
        'AuthenticateOidcActionIssuer': str,
        'AuthenticateOidcActionAuthorizationEndpoint': str,
        'AuthenticateOidcActionTokenEndpoint': str,
        'AuthenticateOidcActionUserInfoEndpoint': str,
        'AuthenticateOidcActionClientId': str,
        'AuthenticateOidcActionClientSecret': Optional[str],
        'AuthenticateOidcActionSessionCookieName': Optional[str],
        'AuthenticateOidcActionScope': Optional[str],
        'AuthenticateOidcActionSessionTimeout': Optional[int],
        'AuthenticateOidcActionAuthenticationRequestExtraParams': Optional[Dict[str, str]],
        'AuthenticateOidcActionConditionalBehaviorEnum': Optional[str],
        'AuthenticateOidcActionUseExistingClientSecret': Optional[bool],
    }
)


ElasticLoadBalancingv2AuthenticateCognitoActionConfig = TypedDict(
    'ElasticLoadBalancingv2AuthenticateCognitoActionConfig', {
        'AuthenticateCognitoActionUserPoolArn': str,
        'AuthenticateCognitoActionUserPoolClientId': str,
        'AuthenticateCognitoActionUserPoolDomain': str,
        'AuthenticateCognitoActionSessionCookieName': Optional[str],
        'AuthenticateCognitoActionScope': Optional[str],
        'AuthenticateCognitoActionSessionTimeout': Optional[int],
        'AuthenticateCognitoActionAuthenticationRequestExtraParams': Optional[Dict[str, str]],
        'AuthenticateCognitoActionConditionalBehaviorEnum': Optional[str],
    }
)


ElasticLoadBalancingv2RedirectActionConfig = TypedDict(
    'ElasticLoadBalancingv2RedirectActionConfig', {
        'RedirectActionStatusCodeEnum': str,
        'RedirectActionProtocol': Optional[str],
        'RedirectActionPort': Optional[str],
        'RedirectActionHost': Optional[str],
        'RedirectActionPath': Optional[str],
        'RedirectActionQuery': Optional[str],
    }
)


ElasticLoadBalancingv2FixedResponseActionConfig = TypedDict(
    'ElasticLoadBalancingv2FixedResponseActionConfig', {
        'FixedResponseActionStatusCode': str,
        'FixedResponseActionMessage': Optional[str],
        'FixedResponseActionContentType': Optional[str],
    }
)


ElasticLoadBalancingv2Action = TypedDict(
    'ElasticLoadBalancingv2Action', {
        'ActionTypeEnum': str,
        'TargetGroupArn': Optional[str],
        'AuthenticateOidcActionConfig': Optional[ElasticLoadBalancingv2AuthenticateOidcActionConfig],
        'AuthenticateCognitoActionConfig': Optional[ElasticLoadBalancingv2AuthenticateCognitoActionConfig],
        'ActionOrder': Optional[int],
        'RedirectActionConfig': Optional[ElasticLoadBalancingv2RedirectActionConfig],
        'FixedResponseActionConfig': Optional[ElasticLoadBalancingv2FixedResponseActionConfig],
    }
)


ElasticLoadBalancingv2Listener = TypedDict(
    'ElasticLoadBalancingv2Listener', {
        'ListenerArn': Optional[str],
        'LoadBalancerArn': Optional[str],
        'Port': Optional[int],
        'ProtocolEnum': Optional[str],
        'CertificateList': Optional[List[ElasticLoadBalancingv2Certificate]],
        'SslPolicyName': Optional[str],
        'Actions': Optional[List[ElasticLoadBalancingv2Action]],
    }
)


ElasticLoadBalancingv2CreateListenerOutput = TypedDict(
    'ElasticLoadBalancingv2CreateListenerOutput', {
        'Listeners': Optional[List[ElasticLoadBalancingv2Listener]],
    }
)


ElasticLoadBalancingv2SubnetMapping = TypedDict(
    'ElasticLoadBalancingv2SubnetMapping', {
        'SubnetId': Optional[str],
        'AllocationId': Optional[str],
    }
)


ElasticLoadBalancingv2LoadBalancerState = TypedDict(
    'ElasticLoadBalancingv2LoadBalancerState', {
        'LoadBalancerStateEnum': Optional[str],
        'StateReason': Optional[str],
    }
)


ElasticLoadBalancingv2LoadBalancerAddress = TypedDict(
    'ElasticLoadBalancingv2LoadBalancerAddress', {
        'IpAddress': Optional[str],
        'AllocationId': Optional[str],
    }
)


ElasticLoadBalancingv2AvailabilityZone = TypedDict(
    'ElasticLoadBalancingv2AvailabilityZone', {
        'ZoneName': Optional[str],
        'SubnetId': Optional[str],
        'LoadBalancerAddresses': Optional[List[ElasticLoadBalancingv2LoadBalancerAddress]],
    }
)


ElasticLoadBalancingv2LoadBalancer = TypedDict(
    'ElasticLoadBalancingv2LoadBalancer', {
        'LoadBalancerArn': Optional[str],
        'DNSName': Optional[str],
        'CanonicalHostedZoneId': Optional[str],
        'CreatedTime': Optional[datetime.datetime],
        'LoadBalancerName': Optional[str],
        'LoadBalancerSchemeEnum': Optional[str],
        'VpcId': Optional[str],
        'LoadBalancerState': Optional[ElasticLoadBalancingv2LoadBalancerState],
        'LoadBalancerTypeEnum': Optional[str],
        'AvailabilityZones': Optional[List[ElasticLoadBalancingv2AvailabilityZone]],
        'SecurityGroups': Optional[List[str]],
        'IpAddressType': Optional[str],
    }
)


ElasticLoadBalancingv2CreateLoadBalancerOutput = TypedDict(
    'ElasticLoadBalancingv2CreateLoadBalancerOutput', {
        'LoadBalancers': Optional[List[ElasticLoadBalancingv2LoadBalancer]],
    }
)


ElasticLoadBalancingv2HostHeaderConditionConfig = TypedDict(
    'ElasticLoadBalancingv2HostHeaderConditionConfig', {
        'ListOfString': Optional[List[str]],
    }
)


ElasticLoadBalancingv2PathPatternConditionConfig = TypedDict(
    'ElasticLoadBalancingv2PathPatternConditionConfig', {
        'ListOfString': Optional[List[str]],
    }
)


ElasticLoadBalancingv2HttpHeaderConditionConfig = TypedDict(
    'ElasticLoadBalancingv2HttpHeaderConditionConfig', {
        'HttpHeaderConditionName': Optional[str],
        'ListOfString': Optional[List[str]],
    }
)


ElasticLoadBalancingv2QueryStringKeyValuePair = TypedDict(
    'ElasticLoadBalancingv2QueryStringKeyValuePair', {
        'StringValue': Optional[str],
        'StringValue': Optional[str],
    }
)


ElasticLoadBalancingv2QueryStringConditionConfig = TypedDict(
    'ElasticLoadBalancingv2QueryStringConditionConfig', {
        'QueryStringKeyValuePairList': Optional[List[ElasticLoadBalancingv2QueryStringKeyValuePair]],
    }
)


ElasticLoadBalancingv2HttpRequestMethodConditionConfig = TypedDict(
    'ElasticLoadBalancingv2HttpRequestMethodConditionConfig', {
        'ListOfString': Optional[List[str]],
    }
)


ElasticLoadBalancingv2SourceIpConditionConfig = TypedDict(
    'ElasticLoadBalancingv2SourceIpConditionConfig', {
        'ListOfString': Optional[List[str]],
    }
)


ElasticLoadBalancingv2RuleCondition = TypedDict(
    'ElasticLoadBalancingv2RuleCondition', {
        'ConditionFieldName': Optional[str],
        'ListOfString': Optional[List[str]],
        'HostHeaderConditionConfig': Optional[ElasticLoadBalancingv2HostHeaderConditionConfig],
        'PathPatternConditionConfig': Optional[ElasticLoadBalancingv2PathPatternConditionConfig],
        'HttpHeaderConditionConfig': Optional[ElasticLoadBalancingv2HttpHeaderConditionConfig],
        'QueryStringConditionConfig': Optional[ElasticLoadBalancingv2QueryStringConditionConfig],
        'HttpRequestMethodConditionConfig': Optional[ElasticLoadBalancingv2HttpRequestMethodConditionConfig],
        'SourceIpConditionConfig': Optional[ElasticLoadBalancingv2SourceIpConditionConfig],
    }
)


ElasticLoadBalancingv2Rule = TypedDict(
    'ElasticLoadBalancingv2Rule', {
        'RuleArn': Optional[str],
        'String': Optional[str],
        'RuleConditionList': Optional[List[ElasticLoadBalancingv2RuleCondition]],
        'Actions': Optional[List[ElasticLoadBalancingv2Action]],
        'IsDefault': Optional[bool],
    }
)


ElasticLoadBalancingv2CreateRuleOutput = TypedDict(
    'ElasticLoadBalancingv2CreateRuleOutput', {
        'Rules': Optional[List[ElasticLoadBalancingv2Rule]],
    }
)


ElasticLoadBalancingv2Matcher = TypedDict(
    'ElasticLoadBalancingv2Matcher', {
        'HttpCode': str,
    }
)


ElasticLoadBalancingv2TargetGroup = TypedDict(
    'ElasticLoadBalancingv2TargetGroup', {
        'TargetGroupArn': Optional[str],
        'TargetGroupName': Optional[str],
        'ProtocolEnum': Optional[str],
        'Port': Optional[int],
        'VpcId': Optional[str],
        'ProtocolEnum': Optional[str],
        'HealthCheckPort': Optional[str],
        'HealthCheckEnabled': Optional[bool],
        'HealthCheckIntervalSeconds': Optional[int],
        'HealthCheckTimeoutSeconds': Optional[int],
        'HealthCheckThresholdCount': Optional[int],
        'HealthCheckThresholdCount': Optional[int],
        'Path': Optional[str],
        'Matcher': Optional[ElasticLoadBalancingv2Matcher],
        'LoadBalancerArns': Optional[List[str]],
        'TargetTypeEnum': Optional[str],
    }
)


ElasticLoadBalancingv2CreateTargetGroupOutput = TypedDict(
    'ElasticLoadBalancingv2CreateTargetGroupOutput', {
        'TargetGroups': Optional[List[ElasticLoadBalancingv2TargetGroup]],
    }
)


ElasticLoadBalancingv2DeleteListenerOutput = TypedDict(
    'ElasticLoadBalancingv2DeleteListenerOutput', {
    }
)


ElasticLoadBalancingv2DeleteLoadBalancerOutput = TypedDict(
    'ElasticLoadBalancingv2DeleteLoadBalancerOutput', {
    }
)


ElasticLoadBalancingv2DeleteRuleOutput = TypedDict(
    'ElasticLoadBalancingv2DeleteRuleOutput', {
    }
)


ElasticLoadBalancingv2DeleteTargetGroupOutput = TypedDict(
    'ElasticLoadBalancingv2DeleteTargetGroupOutput', {
    }
)


ElasticLoadBalancingv2TargetDescription = TypedDict(
    'ElasticLoadBalancingv2TargetDescription', {
        'TargetId': str,
        'Port': Optional[int],
        'ZoneName': Optional[str],
    }
)


ElasticLoadBalancingv2DeregisterTargetsOutput = TypedDict(
    'ElasticLoadBalancingv2DeregisterTargetsOutput', {
    }
)


ElasticLoadBalancingv2Limit = TypedDict(
    'ElasticLoadBalancingv2Limit', {
        'Name': Optional[str],
        'Max': Optional[str],
    }
)


ElasticLoadBalancingv2DescribeAccountLimitsOutput = TypedDict(
    'ElasticLoadBalancingv2DescribeAccountLimitsOutput', {
        'Limits': Optional[List[ElasticLoadBalancingv2Limit]],
        'Marker': Optional[str],
    }
)


ElasticLoadBalancingv2DescribeListenerCertificatesOutput = TypedDict(
    'ElasticLoadBalancingv2DescribeListenerCertificatesOutput', {
        'CertificateList': Optional[List[ElasticLoadBalancingv2Certificate]],
        'Marker': Optional[str],
    }
)


ElasticLoadBalancingv2DescribeListenersOutput = TypedDict(
    'ElasticLoadBalancingv2DescribeListenersOutput', {
        'Listeners': Optional[List[ElasticLoadBalancingv2Listener]],
        'Marker': Optional[str],
    }
)


ElasticLoadBalancingv2LoadBalancerAttribute = TypedDict(
    'ElasticLoadBalancingv2LoadBalancerAttribute', {
        'LoadBalancerAttributeKey': Optional[str],
        'LoadBalancerAttributeValue': Optional[str],
    }
)


ElasticLoadBalancingv2DescribeLoadBalancerAttributesOutput = TypedDict(
    'ElasticLoadBalancingv2DescribeLoadBalancerAttributesOutput', {
        'LoadBalancerAttributes': Optional[List[ElasticLoadBalancingv2LoadBalancerAttribute]],
    }
)


ElasticLoadBalancingv2DescribeLoadBalancersOutput = TypedDict(
    'ElasticLoadBalancingv2DescribeLoadBalancersOutput', {
        'LoadBalancers': Optional[List[ElasticLoadBalancingv2LoadBalancer]],
        'Marker': Optional[str],
    }
)


ElasticLoadBalancingv2DescribeRulesOutput = TypedDict(
    'ElasticLoadBalancingv2DescribeRulesOutput', {
        'Rules': Optional[List[ElasticLoadBalancingv2Rule]],
        'Marker': Optional[str],
    }
)


ElasticLoadBalancingv2Cipher = TypedDict(
    'ElasticLoadBalancingv2Cipher', {
        'CipherName': Optional[str],
        'CipherPriority': Optional[int],
    }
)


ElasticLoadBalancingv2SslPolicy = TypedDict(
    'ElasticLoadBalancingv2SslPolicy', {
        'SslProtocols': Optional[List[str]],
        'Ciphers': Optional[List[ElasticLoadBalancingv2Cipher]],
        'SslPolicyName': Optional[str],
    }
)


ElasticLoadBalancingv2DescribeSSLPoliciesOutput = TypedDict(
    'ElasticLoadBalancingv2DescribeSSLPoliciesOutput', {
        'SslPolicies': Optional[List[ElasticLoadBalancingv2SslPolicy]],
        'Marker': Optional[str],
    }
)


ElasticLoadBalancingv2TagDescription = TypedDict(
    'ElasticLoadBalancingv2TagDescription', {
        'ResourceArn': Optional[str],
        'TagList': Optional[List[ElasticLoadBalancingv2Tag]],
    }
)


ElasticLoadBalancingv2DescribeTagsOutput = TypedDict(
    'ElasticLoadBalancingv2DescribeTagsOutput', {
        'TagDescriptions': Optional[List[ElasticLoadBalancingv2TagDescription]],
    }
)


ElasticLoadBalancingv2TargetGroupAttribute = TypedDict(
    'ElasticLoadBalancingv2TargetGroupAttribute', {
        'TargetGroupAttributeKey': Optional[str],
        'TargetGroupAttributeValue': Optional[str],
    }
)


ElasticLoadBalancingv2DescribeTargetGroupAttributesOutput = TypedDict(
    'ElasticLoadBalancingv2DescribeTargetGroupAttributesOutput', {
        'TargetGroupAttributes': Optional[List[ElasticLoadBalancingv2TargetGroupAttribute]],
    }
)


ElasticLoadBalancingv2DescribeTargetGroupsOutput = TypedDict(
    'ElasticLoadBalancingv2DescribeTargetGroupsOutput', {
        'TargetGroups': Optional[List[ElasticLoadBalancingv2TargetGroup]],
        'Marker': Optional[str],
    }
)


ElasticLoadBalancingv2TargetHealth = TypedDict(
    'ElasticLoadBalancingv2TargetHealth', {
        'TargetHealthStateEnum': Optional[str],
        'TargetHealthReasonEnum': Optional[str],
        'Description': Optional[str],
    }
)


ElasticLoadBalancingv2TargetHealthDescription = TypedDict(
    'ElasticLoadBalancingv2TargetHealthDescription', {
        'TargetDescription': Optional[ElasticLoadBalancingv2TargetDescription],
        'HealthCheckPort': Optional[str],
        'TargetHealth': Optional[ElasticLoadBalancingv2TargetHealth],
    }
)


ElasticLoadBalancingv2DescribeTargetHealthOutput = TypedDict(
    'ElasticLoadBalancingv2DescribeTargetHealthOutput', {
        'TargetHealthDescriptions': Optional[List[ElasticLoadBalancingv2TargetHealthDescription]],
    }
)


ElasticLoadBalancingv2ModifyListenerOutput = TypedDict(
    'ElasticLoadBalancingv2ModifyListenerOutput', {
        'Listeners': Optional[List[ElasticLoadBalancingv2Listener]],
    }
)


ElasticLoadBalancingv2ModifyLoadBalancerAttributesOutput = TypedDict(
    'ElasticLoadBalancingv2ModifyLoadBalancerAttributesOutput', {
        'LoadBalancerAttributes': Optional[List[ElasticLoadBalancingv2LoadBalancerAttribute]],
    }
)


ElasticLoadBalancingv2ModifyRuleOutput = TypedDict(
    'ElasticLoadBalancingv2ModifyRuleOutput', {
        'Rules': Optional[List[ElasticLoadBalancingv2Rule]],
    }
)


ElasticLoadBalancingv2ModifyTargetGroupOutput = TypedDict(
    'ElasticLoadBalancingv2ModifyTargetGroupOutput', {
        'TargetGroups': Optional[List[ElasticLoadBalancingv2TargetGroup]],
    }
)


ElasticLoadBalancingv2ModifyTargetGroupAttributesOutput = TypedDict(
    'ElasticLoadBalancingv2ModifyTargetGroupAttributesOutput', {
        'TargetGroupAttributes': Optional[List[ElasticLoadBalancingv2TargetGroupAttribute]],
    }
)


ElasticLoadBalancingv2RegisterTargetsOutput = TypedDict(
    'ElasticLoadBalancingv2RegisterTargetsOutput', {
    }
)


ElasticLoadBalancingv2RemoveListenerCertificatesOutput = TypedDict(
    'ElasticLoadBalancingv2RemoveListenerCertificatesOutput', {
    }
)


ElasticLoadBalancingv2RemoveTagsOutput = TypedDict(
    'ElasticLoadBalancingv2RemoveTagsOutput', {
    }
)


ElasticLoadBalancingv2SetIpAddressTypeOutput = TypedDict(
    'ElasticLoadBalancingv2SetIpAddressTypeOutput', {
        'IpAddressType': Optional[str],
    }
)


ElasticLoadBalancingv2RulePriorityPair = TypedDict(
    'ElasticLoadBalancingv2RulePriorityPair', {
        'RuleArn': Optional[str],
        'RulePriority': Optional[int],
    }
)


ElasticLoadBalancingv2SetRulePrioritiesOutput = TypedDict(
    'ElasticLoadBalancingv2SetRulePrioritiesOutput', {
        'Rules': Optional[List[ElasticLoadBalancingv2Rule]],
    }
)


ElasticLoadBalancingv2SetSecurityGroupsOutput = TypedDict(
    'ElasticLoadBalancingv2SetSecurityGroupsOutput', {
        'SecurityGroups': Optional[List[str]],
    }
)


ElasticLoadBalancingv2SetSubnetsOutput = TypedDict(
    'ElasticLoadBalancingv2SetSubnetsOutput', {
        'AvailabilityZones': Optional[List[ElasticLoadBalancingv2AvailabilityZone]],
    }
)


class ElasticsearchService(BaseClient):
    def add_tags(self, *,
        ARN: str,
        TagList: List[ElasticsearchServiceTag]
    ): ...

    def cancel_elasticsearch_service_software_update(self, *,
        DomainName: str
    ) -> ElasticsearchServiceCancelElasticsearchServiceSoftwareUpdateResponse: ...

    def create_elasticsearch_domain(self, *,
        DomainName: str,
        ElasticsearchVersion: str = ...,
        ElasticsearchClusterConfig: ElasticsearchServiceElasticsearchClusterConfig = ...,
        EBSOptions: ElasticsearchServiceEBSOptions = ...,
        AccessPolicies: str = ...,
        SnapshotOptions: ElasticsearchServiceSnapshotOptions = ...,
        VPCOptions: ElasticsearchServiceVPCOptions = ...,
        CognitoOptions: ElasticsearchServiceCognitoOptions = ...,
        EncryptionAtRestOptions: ElasticsearchServiceEncryptionAtRestOptions = ...,
        NodeToNodeEncryptionOptions: ElasticsearchServiceNodeToNodeEncryptionOptions = ...,
        AdvancedOptions: Dict[str, str] = ...,
        LogPublishingOptions: Dict[str, ElasticsearchServiceLogPublishingOption] = ...
    ) -> ElasticsearchServiceCreateElasticsearchDomainResponse: ...

    def delete_elasticsearch_domain(self, *,
        DomainName: str
    ) -> ElasticsearchServiceDeleteElasticsearchDomainResponse: ...

    def delete_elasticsearch_service_role(self): ...

    def describe_elasticsearch_domain(self, *,
        DomainName: str
    ) -> ElasticsearchServiceDescribeElasticsearchDomainResponse: ...

    def describe_elasticsearch_domain_config(self, *,
        DomainName: str
    ) -> ElasticsearchServiceDescribeElasticsearchDomainConfigResponse: ...

    def describe_elasticsearch_domains(self, *,
        DomainNames: List[str]
    ) -> ElasticsearchServiceDescribeElasticsearchDomainsResponse: ...

    def describe_elasticsearch_instance_type_limits(self, *,
        InstanceType: str,
        ElasticsearchVersion: str,
        DomainName: str = ...
    ) -> ElasticsearchServiceDescribeElasticsearchInstanceTypeLimitsResponse: ...

    def describe_reserved_elasticsearch_instance_offerings(self, *,
        ReservedElasticsearchInstanceOfferingId: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ElasticsearchServiceDescribeReservedElasticsearchInstanceOfferingsResponse: ...

    def describe_reserved_elasticsearch_instances(self, *,
        ReservedElasticsearchInstanceId: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ElasticsearchServiceDescribeReservedElasticsearchInstancesResponse: ...

    def get_compatible_elasticsearch_versions(self, *,
        DomainName: str = ...
    ) -> ElasticsearchServiceGetCompatibleElasticsearchVersionsResponse: ...

    def get_upgrade_history(self, *,
        DomainName: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ElasticsearchServiceGetUpgradeHistoryResponse: ...

    def get_upgrade_status(self, *,
        DomainName: str
    ) -> ElasticsearchServiceGetUpgradeStatusResponse: ...

    def list_domain_names(self) -> ElasticsearchServiceListDomainNamesResponse: ...

    def list_elasticsearch_instance_types(self, *,
        ElasticsearchVersion: str,
        DomainName: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ElasticsearchServiceListElasticsearchInstanceTypesResponse: ...

    def list_elasticsearch_versions(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ElasticsearchServiceListElasticsearchVersionsResponse: ...

    def list_tags(self, *,
        ARN: str
    ) -> ElasticsearchServiceListTagsResponse: ...

    def purchase_reserved_elasticsearch_instance_offering(self, *,
        ReservedElasticsearchInstanceOfferingId: str,
        ReservationName: str,
        InstanceCount: int = ...
    ) -> ElasticsearchServicePurchaseReservedElasticsearchInstanceOfferingResponse: ...

    def remove_tags(self, *,
        ARN: str,
        TagKeys: List[str]
    ): ...

    def start_elasticsearch_service_software_update(self, *,
        DomainName: str
    ) -> ElasticsearchServiceStartElasticsearchServiceSoftwareUpdateResponse: ...

    def update_elasticsearch_domain_config(self, *,
        DomainName: str,
        ElasticsearchClusterConfig: ElasticsearchServiceElasticsearchClusterConfig = ...,
        EBSOptions: ElasticsearchServiceEBSOptions = ...,
        SnapshotOptions: ElasticsearchServiceSnapshotOptions = ...,
        VPCOptions: ElasticsearchServiceVPCOptions = ...,
        CognitoOptions: ElasticsearchServiceCognitoOptions = ...,
        AdvancedOptions: Dict[str, str] = ...,
        AccessPolicies: str = ...,
        LogPublishingOptions: Dict[str, ElasticsearchServiceLogPublishingOption] = ...
    ) -> ElasticsearchServiceUpdateElasticsearchDomainConfigResponse: ...

    def upgrade_elasticsearch_domain(self, *,
        DomainName: str,
        TargetVersion: str,
        PerformCheckOnly: bool = ...
    ) -> ElasticsearchServiceUpgradeElasticsearchDomainResponse: ...


ElasticsearchServiceTag = TypedDict(
    'ElasticsearchServiceTag', {
        'TagKey': str,
        'TagValue': str,
    }
)


ElasticsearchServiceServiceSoftwareOptions = TypedDict(
    'ElasticsearchServiceServiceSoftwareOptions', {
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'DeploymentStatus': Optional[str],
        'String': Optional[str],
        'DeploymentCloseDateTimeStamp': Optional[datetime.datetime],
    }
)


ElasticsearchServiceCancelElasticsearchServiceSoftwareUpdateResponse = TypedDict(
    'ElasticsearchServiceCancelElasticsearchServiceSoftwareUpdateResponse', {
        'ServiceSoftwareOptions': Optional[ElasticsearchServiceServiceSoftwareOptions],
    }
)


ElasticsearchServiceZoneAwarenessConfig = TypedDict(
    'ElasticsearchServiceZoneAwarenessConfig', {
        'IntegerClass': Optional[int],
    }
)


ElasticsearchServiceElasticsearchClusterConfig = TypedDict(
    'ElasticsearchServiceElasticsearchClusterConfig', {
        'ESPartitionInstanceType': Optional[str],
        'IntegerClass': Optional[int],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'ZoneAwarenessConfig': Optional[ElasticsearchServiceZoneAwarenessConfig],
        'ESPartitionInstanceType': Optional[str],
        'IntegerClass': Optional[int],
    }
)


ElasticsearchServiceEBSOptions = TypedDict(
    'ElasticsearchServiceEBSOptions', {
        'Boolean': Optional[bool],
        'VolumeType': Optional[str],
        'IntegerClass': Optional[int],
        'IntegerClass': Optional[int],
    }
)


ElasticsearchServiceSnapshotOptions = TypedDict(
    'ElasticsearchServiceSnapshotOptions', {
        'IntegerClass': Optional[int],
    }
)


ElasticsearchServiceVPCOptions = TypedDict(
    'ElasticsearchServiceVPCOptions', {
        'StringList': Optional[List[str]],
        'StringList': Optional[List[str]],
    }
)


ElasticsearchServiceCognitoOptions = TypedDict(
    'ElasticsearchServiceCognitoOptions', {
        'Boolean': Optional[bool],
        'UserPoolId': Optional[str],
        'IdentityPoolId': Optional[str],
        'RoleArn': Optional[str],
    }
)


ElasticsearchServiceEncryptionAtRestOptions = TypedDict(
    'ElasticsearchServiceEncryptionAtRestOptions', {
        'Boolean': Optional[bool],
        'KmsKeyId': Optional[str],
    }
)


ElasticsearchServiceNodeToNodeEncryptionOptions = TypedDict(
    'ElasticsearchServiceNodeToNodeEncryptionOptions', {
        'Boolean': Optional[bool],
    }
)


ElasticsearchServiceLogPublishingOption = TypedDict(
    'ElasticsearchServiceLogPublishingOption', {
        'CloudWatchLogsLogGroupArn': Optional[str],
        'Boolean': Optional[bool],
    }
)


ElasticsearchServiceVPCDerivedInfo = TypedDict(
    'ElasticsearchServiceVPCDerivedInfo', {
        'String': Optional[str],
        'StringList': Optional[List[str]],
        'StringList': Optional[List[str]],
        'StringList': Optional[List[str]],
    }
)


ElasticsearchServiceElasticsearchDomainStatus = TypedDict(
    'ElasticsearchServiceElasticsearchDomainStatus', {
        'DomainId': str,
        'DomainName': str,
        'ARN': str,
        'ElasticsearchClusterConfig': ElasticsearchServiceElasticsearchClusterConfig,
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'ServiceUrl': Optional[str],
        'EndpointsMap': Optional[Dict[str, str]],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'ElasticsearchVersionString': Optional[str],
        'EBSOptions': Optional[ElasticsearchServiceEBSOptions],
        'PolicyDocument': Optional[str],
        'SnapshotOptions': Optional[ElasticsearchServiceSnapshotOptions],
        'VPCDerivedInfo': Optional[ElasticsearchServiceVPCDerivedInfo],
        'CognitoOptions': Optional[ElasticsearchServiceCognitoOptions],
        'EncryptionAtRestOptions': Optional[ElasticsearchServiceEncryptionAtRestOptions],
        'NodeToNodeEncryptionOptions': Optional[ElasticsearchServiceNodeToNodeEncryptionOptions],
        'AdvancedOptions': Optional[Dict[str, str]],
        'LogPublishingOptions': Optional[Dict[str, ElasticsearchServiceLogPublishingOption]],
        'ServiceSoftwareOptions': Optional[ElasticsearchServiceServiceSoftwareOptions],
    }
)


ElasticsearchServiceCreateElasticsearchDomainResponse = TypedDict(
    'ElasticsearchServiceCreateElasticsearchDomainResponse', {
        'ElasticsearchDomainStatus': Optional[ElasticsearchServiceElasticsearchDomainStatus],
    }
)


ElasticsearchServiceDeleteElasticsearchDomainResponse = TypedDict(
    'ElasticsearchServiceDeleteElasticsearchDomainResponse', {
        'ElasticsearchDomainStatus': Optional[ElasticsearchServiceElasticsearchDomainStatus],
    }
)


ElasticsearchServiceDescribeElasticsearchDomainResponse = TypedDict(
    'ElasticsearchServiceDescribeElasticsearchDomainResponse', {
        'ElasticsearchDomainStatus': ElasticsearchServiceElasticsearchDomainStatus,
    }
)


ElasticsearchServiceOptionStatus = TypedDict(
    'ElasticsearchServiceOptionStatus', {
        'UpdateTimestamp': datetime.datetime,
        'UpdateTimestamp': datetime.datetime,
        'OptionState': str,
        'UIntValue': Optional[int],
        'Boolean': Optional[bool],
    }
)


ElasticsearchServiceElasticsearchVersionStatus = TypedDict(
    'ElasticsearchServiceElasticsearchVersionStatus', {
        'ElasticsearchVersionString': str,
        'OptionStatus': ElasticsearchServiceOptionStatus,
    }
)


ElasticsearchServiceElasticsearchClusterConfigStatus = TypedDict(
    'ElasticsearchServiceElasticsearchClusterConfigStatus', {
        'ElasticsearchClusterConfig': ElasticsearchServiceElasticsearchClusterConfig,
        'OptionStatus': ElasticsearchServiceOptionStatus,
    }
)


ElasticsearchServiceEBSOptionsStatus = TypedDict(
    'ElasticsearchServiceEBSOptionsStatus', {
        'EBSOptions': ElasticsearchServiceEBSOptions,
        'OptionStatus': ElasticsearchServiceOptionStatus,
    }
)


ElasticsearchServiceAccessPoliciesStatus = TypedDict(
    'ElasticsearchServiceAccessPoliciesStatus', {
        'PolicyDocument': str,
        'OptionStatus': ElasticsearchServiceOptionStatus,
    }
)


ElasticsearchServiceSnapshotOptionsStatus = TypedDict(
    'ElasticsearchServiceSnapshotOptionsStatus', {
        'SnapshotOptions': ElasticsearchServiceSnapshotOptions,
        'OptionStatus': ElasticsearchServiceOptionStatus,
    }
)


ElasticsearchServiceVPCDerivedInfoStatus = TypedDict(
    'ElasticsearchServiceVPCDerivedInfoStatus', {
        'VPCDerivedInfo': ElasticsearchServiceVPCDerivedInfo,
        'OptionStatus': ElasticsearchServiceOptionStatus,
    }
)


ElasticsearchServiceCognitoOptionsStatus = TypedDict(
    'ElasticsearchServiceCognitoOptionsStatus', {
        'CognitoOptions': ElasticsearchServiceCognitoOptions,
        'OptionStatus': ElasticsearchServiceOptionStatus,
    }
)


ElasticsearchServiceEncryptionAtRestOptionsStatus = TypedDict(
    'ElasticsearchServiceEncryptionAtRestOptionsStatus', {
        'EncryptionAtRestOptions': ElasticsearchServiceEncryptionAtRestOptions,
        'OptionStatus': ElasticsearchServiceOptionStatus,
    }
)


ElasticsearchServiceNodeToNodeEncryptionOptionsStatus = TypedDict(
    'ElasticsearchServiceNodeToNodeEncryptionOptionsStatus', {
        'NodeToNodeEncryptionOptions': ElasticsearchServiceNodeToNodeEncryptionOptions,
        'OptionStatus': ElasticsearchServiceOptionStatus,
    }
)


ElasticsearchServiceAdvancedOptionsStatus = TypedDict(
    'ElasticsearchServiceAdvancedOptionsStatus', {
        'AdvancedOptions': Dict[str, str],
        'OptionStatus': ElasticsearchServiceOptionStatus,
    }
)


ElasticsearchServiceLogPublishingOptionsStatus = TypedDict(
    'ElasticsearchServiceLogPublishingOptionsStatus', {
        'LogPublishingOptions': Optional[Dict[str, ElasticsearchServiceLogPublishingOption]],
        'OptionStatus': Optional[ElasticsearchServiceOptionStatus],
    }
)


ElasticsearchServiceElasticsearchDomainConfig = TypedDict(
    'ElasticsearchServiceElasticsearchDomainConfig', {
        'ElasticsearchVersionStatus': Optional[ElasticsearchServiceElasticsearchVersionStatus],
        'ElasticsearchClusterConfigStatus': Optional[ElasticsearchServiceElasticsearchClusterConfigStatus],
        'EBSOptionsStatus': Optional[ElasticsearchServiceEBSOptionsStatus],
        'AccessPoliciesStatus': Optional[ElasticsearchServiceAccessPoliciesStatus],
        'SnapshotOptionsStatus': Optional[ElasticsearchServiceSnapshotOptionsStatus],
        'VPCDerivedInfoStatus': Optional[ElasticsearchServiceVPCDerivedInfoStatus],
        'CognitoOptionsStatus': Optional[ElasticsearchServiceCognitoOptionsStatus],
        'EncryptionAtRestOptionsStatus': Optional[ElasticsearchServiceEncryptionAtRestOptionsStatus],
        'NodeToNodeEncryptionOptionsStatus': Optional[ElasticsearchServiceNodeToNodeEncryptionOptionsStatus],
        'AdvancedOptionsStatus': Optional[ElasticsearchServiceAdvancedOptionsStatus],
        'LogPublishingOptionsStatus': Optional[ElasticsearchServiceLogPublishingOptionsStatus],
    }
)


ElasticsearchServiceDescribeElasticsearchDomainConfigResponse = TypedDict(
    'ElasticsearchServiceDescribeElasticsearchDomainConfigResponse', {
        'ElasticsearchDomainConfig': ElasticsearchServiceElasticsearchDomainConfig,
    }
)


ElasticsearchServiceDescribeElasticsearchDomainsResponse = TypedDict(
    'ElasticsearchServiceDescribeElasticsearchDomainsResponse', {
        'ElasticsearchDomainStatusList': List[ElasticsearchServiceElasticsearchDomainStatus],
    }
)


ElasticsearchServiceStorageTypeLimit = TypedDict(
    'ElasticsearchServiceStorageTypeLimit', {
        'LimitName': Optional[str],
        'LimitValueList': Optional[List[str]],
    }
)


ElasticsearchServiceStorageType = TypedDict(
    'ElasticsearchServiceStorageType', {
        'StorageTypeName': Optional[str],
        'StorageSubTypeName': Optional[str],
        'StorageTypeLimitList': Optional[List[ElasticsearchServiceStorageTypeLimit]],
    }
)


ElasticsearchServiceInstanceCountLimits = TypedDict(
    'ElasticsearchServiceInstanceCountLimits', {
        'MinimumInstanceCount': Optional[int],
        'MaximumInstanceCount': Optional[int],
    }
)


ElasticsearchServiceInstanceLimits = TypedDict(
    'ElasticsearchServiceInstanceLimits', {
        'InstanceCountLimits': Optional[ElasticsearchServiceInstanceCountLimits],
    }
)


ElasticsearchServiceAdditionalLimit = TypedDict(
    'ElasticsearchServiceAdditionalLimit', {
        'LimitName': Optional[str],
        'LimitValueList': Optional[List[str]],
    }
)


ElasticsearchServiceLimits = TypedDict(
    'ElasticsearchServiceLimits', {
        'StorageTypeList': Optional[List[ElasticsearchServiceStorageType]],
        'InstanceLimits': Optional[ElasticsearchServiceInstanceLimits],
        'AdditionalLimitList': Optional[List[ElasticsearchServiceAdditionalLimit]],
    }
)


ElasticsearchServiceDescribeElasticsearchInstanceTypeLimitsResponse = TypedDict(
    'ElasticsearchServiceDescribeElasticsearchInstanceTypeLimitsResponse', {
        'LimitsByRole': Optional[Dict[str, ElasticsearchServiceLimits]],
    }
)


ElasticsearchServiceRecurringCharge = TypedDict(
    'ElasticsearchServiceRecurringCharge', {
        'Double': Optional[float],
        'String': Optional[str],
    }
)


ElasticsearchServiceReservedElasticsearchInstanceOffering = TypedDict(
    'ElasticsearchServiceReservedElasticsearchInstanceOffering', {
        'GUID': Optional[str],
        'ESPartitionInstanceType': Optional[str],
        'Integer': Optional[int],
        'Double': Optional[float],
        'Double': Optional[float],
        'String': Optional[str],
        'ReservedElasticsearchInstancePaymentOption': Optional[str],
        'RecurringChargeList': Optional[List[ElasticsearchServiceRecurringCharge]],
    }
)


ElasticsearchServiceDescribeReservedElasticsearchInstanceOfferingsResponse = TypedDict(
    'ElasticsearchServiceDescribeReservedElasticsearchInstanceOfferingsResponse', {
        'NextToken': Optional[str],
        'ReservedElasticsearchInstanceOfferingList': Optional[List[ElasticsearchServiceReservedElasticsearchInstanceOffering]],
    }
)


ElasticsearchServiceReservedElasticsearchInstance = TypedDict(
    'ElasticsearchServiceReservedElasticsearchInstance', {
        'ReservationToken': Optional[str],
        'GUID': Optional[str],
        'String': Optional[str],
        'ESPartitionInstanceType': Optional[str],
        'UpdateTimestamp': Optional[datetime.datetime],
        'Integer': Optional[int],
        'Double': Optional[float],
        'Double': Optional[float],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'ReservedElasticsearchInstancePaymentOption': Optional[str],
        'RecurringChargeList': Optional[List[ElasticsearchServiceRecurringCharge]],
    }
)


ElasticsearchServiceDescribeReservedElasticsearchInstancesResponse = TypedDict(
    'ElasticsearchServiceDescribeReservedElasticsearchInstancesResponse', {
        'String': Optional[str],
        'ReservedElasticsearchInstanceList': Optional[List[ElasticsearchServiceReservedElasticsearchInstance]],
    }
)


ElasticsearchServiceCompatibleVersionsMap = TypedDict(
    'ElasticsearchServiceCompatibleVersionsMap', {
        'ElasticsearchVersionString': Optional[str],
        'ElasticsearchVersionList': Optional[List[str]],
    }
)


ElasticsearchServiceGetCompatibleElasticsearchVersionsResponse = TypedDict(
    'ElasticsearchServiceGetCompatibleElasticsearchVersionsResponse', {
        'CompatibleElasticsearchVersionsList': Optional[List[ElasticsearchServiceCompatibleVersionsMap]],
    }
)


ElasticsearchServiceUpgradeStepItem = TypedDict(
    'ElasticsearchServiceUpgradeStepItem', {
        'UpgradeStep': Optional[str],
        'UpgradeStatus': Optional[str],
        'Issues': Optional[List[str]],
        'Double': Optional[float],
    }
)


ElasticsearchServiceUpgradeHistory = TypedDict(
    'ElasticsearchServiceUpgradeHistory', {
        'UpgradeName': Optional[str],
        'StartTimestamp': Optional[datetime.datetime],
        'UpgradeStatus': Optional[str],
        'UpgradeStepsList': Optional[List[ElasticsearchServiceUpgradeStepItem]],
    }
)


ElasticsearchServiceGetUpgradeHistoryResponse = TypedDict(
    'ElasticsearchServiceGetUpgradeHistoryResponse', {
        'UpgradeHistoryList': Optional[List[ElasticsearchServiceUpgradeHistory]],
        'String': Optional[str],
    }
)


ElasticsearchServiceGetUpgradeStatusResponse = TypedDict(
    'ElasticsearchServiceGetUpgradeStatusResponse', {
        'UpgradeStep': Optional[str],
        'UpgradeStatus': Optional[str],
        'UpgradeName': Optional[str],
    }
)


ElasticsearchServiceDomainInfo = TypedDict(
    'ElasticsearchServiceDomainInfo', {
        'DomainName': Optional[str],
    }
)


ElasticsearchServiceListDomainNamesResponse = TypedDict(
    'ElasticsearchServiceListDomainNamesResponse', {
        'DomainInfoList': Optional[List[ElasticsearchServiceDomainInfo]],
    }
)


ElasticsearchServiceListElasticsearchInstanceTypesResponse = TypedDict(
    'ElasticsearchServiceListElasticsearchInstanceTypesResponse', {
        'ElasticsearchInstanceTypeList': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


ElasticsearchServiceListElasticsearchVersionsResponse = TypedDict(
    'ElasticsearchServiceListElasticsearchVersionsResponse', {
        'ElasticsearchVersionList': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


ElasticsearchServiceListTagsResponse = TypedDict(
    'ElasticsearchServiceListTagsResponse', {
        'TagList': Optional[List[ElasticsearchServiceTag]],
    }
)


ElasticsearchServicePurchaseReservedElasticsearchInstanceOfferingResponse = TypedDict(
    'ElasticsearchServicePurchaseReservedElasticsearchInstanceOfferingResponse', {
        'GUID': Optional[str],
        'ReservationToken': Optional[str],
    }
)


ElasticsearchServiceStartElasticsearchServiceSoftwareUpdateResponse = TypedDict(
    'ElasticsearchServiceStartElasticsearchServiceSoftwareUpdateResponse', {
        'ServiceSoftwareOptions': Optional[ElasticsearchServiceServiceSoftwareOptions],
    }
)


ElasticsearchServiceUpdateElasticsearchDomainConfigResponse = TypedDict(
    'ElasticsearchServiceUpdateElasticsearchDomainConfigResponse', {
        'ElasticsearchDomainConfig': ElasticsearchServiceElasticsearchDomainConfig,
    }
)


ElasticsearchServiceUpgradeElasticsearchDomainResponse = TypedDict(
    'ElasticsearchServiceUpgradeElasticsearchDomainResponse', {
        'DomainName': Optional[str],
        'ElasticsearchVersionString': Optional[str],
        'Boolean': Optional[bool],
    }
)


class CloudWatchEvents(BaseClient):
    def delete_rule(self, *,
        Name: str,
        Force: bool = ...
    ): ...

    def describe_event_bus(self) -> CloudWatchEventsDescribeEventBusResponse: ...

    def describe_rule(self, *,
        Name: str
    ) -> CloudWatchEventsDescribeRuleResponse: ...

    def disable_rule(self, *,
        Name: str
    ): ...

    def enable_rule(self, *,
        Name: str
    ): ...

    def list_rule_names_by_target(self, *,
        TargetArn: str,
        NextToken: str = ...,
        Limit: int = ...
    ) -> CloudWatchEventsListRuleNamesByTargetResponse: ...

    def list_rules(self, *,
        NamePrefix: str = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> CloudWatchEventsListRulesResponse: ...

    def list_tags_for_resource(self, *,
        ResourceARN: str
    ) -> CloudWatchEventsListTagsForResourceResponse: ...

    def list_targets_by_rule(self, *,
        Rule: str,
        NextToken: str = ...,
        Limit: int = ...
    ) -> CloudWatchEventsListTargetsByRuleResponse: ...

    def put_events(self, *,
        Entries: List[CloudWatchEventsPutEventsRequestEntry]
    ) -> CloudWatchEventsPutEventsResponse: ...

    def put_permission(self, *,
        Action: str,
        Principal: str,
        StatementId: str,
        Condition: CloudWatchEventsCondition = ...
    ): ...

    def put_rule(self, *,
        Name: str,
        ScheduleExpression: str = ...,
        EventPattern: str = ...,
        State: str = ...,
        Description: str = ...,
        RoleArn: str = ...,
        Tags: List[CloudWatchEventsTag] = ...
    ) -> CloudWatchEventsPutRuleResponse: ...

    def put_targets(self, *,
        Rule: str,
        Targets: List[CloudWatchEventsTarget]
    ) -> CloudWatchEventsPutTargetsResponse: ...

    def remove_permission(self, *,
        StatementId: str
    ): ...

    def remove_targets(self, *,
        Rule: str,
        Ids: List[str],
        Force: bool = ...
    ) -> CloudWatchEventsRemoveTargetsResponse: ...

    def tag_resource(self, *,
        ResourceARN: str,
        Tags: List[CloudWatchEventsTag]
    ) -> CloudWatchEventsTagResourceResponse: ...

    def test_event_pattern(self, *,
        EventPattern: str,
        Event: str
    ) -> CloudWatchEventsTestEventPatternResponse: ...

    def untag_resource(self, *,
        ResourceARN: str,
        TagKeys: List[str]
    ) -> CloudWatchEventsUntagResourceResponse: ...


CloudWatchEventsDescribeEventBusResponse = TypedDict(
    'CloudWatchEventsDescribeEventBusResponse', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


CloudWatchEventsDescribeRuleResponse = TypedDict(
    'CloudWatchEventsDescribeRuleResponse', {
        'RuleName': Optional[str],
        'RuleArn': Optional[str],
        'EventPattern': Optional[str],
        'ScheduleExpression': Optional[str],
        'RuleState': Optional[str],
        'RuleDescription': Optional[str],
        'RoleArn': Optional[str],
        'ManagedBy': Optional[str],
    }
)


CloudWatchEventsListRuleNamesByTargetResponse = TypedDict(
    'CloudWatchEventsListRuleNamesByTargetResponse', {
        'RuleNameList': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


CloudWatchEventsRule = TypedDict(
    'CloudWatchEventsRule', {
        'RuleName': Optional[str],
        'RuleArn': Optional[str],
        'EventPattern': Optional[str],
        'RuleState': Optional[str],
        'RuleDescription': Optional[str],
        'ScheduleExpression': Optional[str],
        'RoleArn': Optional[str],
        'ManagedBy': Optional[str],
    }
)


CloudWatchEventsListRulesResponse = TypedDict(
    'CloudWatchEventsListRulesResponse', {
        'RuleResponseList': Optional[List[CloudWatchEventsRule]],
        'NextToken': Optional[str],
    }
)


CloudWatchEventsTag = TypedDict(
    'CloudWatchEventsTag', {
        'TagKey': str,
        'TagValue': str,
    }
)


CloudWatchEventsListTagsForResourceResponse = TypedDict(
    'CloudWatchEventsListTagsForResourceResponse', {
        'TagList': Optional[List[CloudWatchEventsTag]],
    }
)


CloudWatchEventsInputTransformer = TypedDict(
    'CloudWatchEventsInputTransformer', {
        'TransformerInput': str,
        'TransformerPaths': Optional[Dict[str, str]],
    }
)


CloudWatchEventsKinesisParameters = TypedDict(
    'CloudWatchEventsKinesisParameters', {
        'TargetPartitionKeyPath': str,
    }
)


CloudWatchEventsRunCommandTarget = TypedDict(
    'CloudWatchEventsRunCommandTarget', {
        'RunCommandTargetKey': str,
        'RunCommandTargetValues': List[str],
    }
)


CloudWatchEventsRunCommandParameters = TypedDict(
    'CloudWatchEventsRunCommandParameters', {
        'RunCommandTargets': List[CloudWatchEventsRunCommandTarget],
    }
)


CloudWatchEventsAwsVpcConfiguration = TypedDict(
    'CloudWatchEventsAwsVpcConfiguration', {
        'StringList': List[str],
        'StringList': Optional[List[str]],
        'AssignPublicIp': Optional[str],
    }
)


CloudWatchEventsNetworkConfiguration = TypedDict(
    'CloudWatchEventsNetworkConfiguration', {
        'AwsVpcConfiguration': Optional[CloudWatchEventsAwsVpcConfiguration],
    }
)


CloudWatchEventsEcsParameters = TypedDict(
    'CloudWatchEventsEcsParameters', {
        'Arn': str,
        'LimitMin1': Optional[int],
        'LaunchType': Optional[str],
        'NetworkConfiguration': Optional[CloudWatchEventsNetworkConfiguration],
        'String': Optional[str],
        'String': Optional[str],
    }
)


CloudWatchEventsBatchArrayProperties = TypedDict(
    'CloudWatchEventsBatchArrayProperties', {
        'Integer': Optional[int],
    }
)


CloudWatchEventsBatchRetryStrategy = TypedDict(
    'CloudWatchEventsBatchRetryStrategy', {
        'Integer': Optional[int],
    }
)


CloudWatchEventsBatchParameters = TypedDict(
    'CloudWatchEventsBatchParameters', {
        'String': str,
        'String': str,
        'BatchArrayProperties': Optional[CloudWatchEventsBatchArrayProperties],
        'BatchRetryStrategy': Optional[CloudWatchEventsBatchRetryStrategy],
    }
)


CloudWatchEventsSqsParameters = TypedDict(
    'CloudWatchEventsSqsParameters', {
        'MessageGroupId': Optional[str],
    }
)


CloudWatchEventsTarget = TypedDict(
    'CloudWatchEventsTarget', {
        'TargetId': str,
        'TargetArn': str,
        'RoleArn': Optional[str],
        'TargetInput': Optional[str],
        'TargetInputPath': Optional[str],
        'InputTransformer': Optional[CloudWatchEventsInputTransformer],
        'KinesisParameters': Optional[CloudWatchEventsKinesisParameters],
        'RunCommandParameters': Optional[CloudWatchEventsRunCommandParameters],
        'EcsParameters': Optional[CloudWatchEventsEcsParameters],
        'BatchParameters': Optional[CloudWatchEventsBatchParameters],
        'SqsParameters': Optional[CloudWatchEventsSqsParameters],
    }
)


CloudWatchEventsListTargetsByRuleResponse = TypedDict(
    'CloudWatchEventsListTargetsByRuleResponse', {
        'TargetList': Optional[List[CloudWatchEventsTarget]],
        'NextToken': Optional[str],
    }
)


CloudWatchEventsPutEventsRequestEntry = TypedDict(
    'CloudWatchEventsPutEventsRequestEntry', {
        'EventTime': Optional[datetime.datetime],
        'String': Optional[str],
        'EventResourceList': Optional[List[str]],
        'String': Optional[str],
        'String': Optional[str],
    }
)


CloudWatchEventsPutEventsResultEntry = TypedDict(
    'CloudWatchEventsPutEventsResultEntry', {
        'EventId': Optional[str],
        'ErrorCode': Optional[str],
        'ErrorMessage': Optional[str],
    }
)


CloudWatchEventsPutEventsResponse = TypedDict(
    'CloudWatchEventsPutEventsResponse', {
        'Integer': Optional[int],
        'PutEventsResultEntryList': Optional[List[CloudWatchEventsPutEventsResultEntry]],
    }
)


CloudWatchEventsCondition = TypedDict(
    'CloudWatchEventsCondition', {
        'String': str,
        'String': str,
        'String': str,
    }
)


CloudWatchEventsPutRuleResponse = TypedDict(
    'CloudWatchEventsPutRuleResponse', {
        'RuleArn': Optional[str],
    }
)


CloudWatchEventsPutTargetsResultEntry = TypedDict(
    'CloudWatchEventsPutTargetsResultEntry', {
        'TargetId': Optional[str],
        'ErrorCode': Optional[str],
        'ErrorMessage': Optional[str],
    }
)


CloudWatchEventsPutTargetsResponse = TypedDict(
    'CloudWatchEventsPutTargetsResponse', {
        'Integer': Optional[int],
        'PutTargetsResultEntryList': Optional[List[CloudWatchEventsPutTargetsResultEntry]],
    }
)


CloudWatchEventsRemoveTargetsResultEntry = TypedDict(
    'CloudWatchEventsRemoveTargetsResultEntry', {
        'TargetId': Optional[str],
        'ErrorCode': Optional[str],
        'ErrorMessage': Optional[str],
    }
)


CloudWatchEventsRemoveTargetsResponse = TypedDict(
    'CloudWatchEventsRemoveTargetsResponse', {
        'Integer': Optional[int],
        'RemoveTargetsResultEntryList': Optional[List[CloudWatchEventsRemoveTargetsResultEntry]],
    }
)


CloudWatchEventsTagResourceResponse = TypedDict(
    'CloudWatchEventsTagResourceResponse', {
    }
)


CloudWatchEventsTestEventPatternResponse = TypedDict(
    'CloudWatchEventsTestEventPatternResponse', {
        'Boolean': Optional[bool],
    }
)


CloudWatchEventsUntagResourceResponse = TypedDict(
    'CloudWatchEventsUntagResourceResponse', {
    }
)


class Firehose(BaseClient):
    def create_delivery_stream(self, *,
        DeliveryStreamName: str,
        DeliveryStreamType: str = ...,
        KinesisStreamSourceConfiguration: FirehoseKinesisStreamSourceConfiguration = ...,
        S3DestinationConfiguration: FirehoseS3DestinationConfiguration = ...,
        ExtendedS3DestinationConfiguration: FirehoseExtendedS3DestinationConfiguration = ...,
        RedshiftDestinationConfiguration: FirehoseRedshiftDestinationConfiguration = ...,
        ElasticsearchDestinationConfiguration: FirehoseElasticsearchDestinationConfiguration = ...,
        SplunkDestinationConfiguration: FirehoseSplunkDestinationConfiguration = ...,
        Tags: List[FirehoseTag] = ...
    ) -> FirehoseCreateDeliveryStreamOutput: ...

    def delete_delivery_stream(self, *,
        DeliveryStreamName: str
    ) -> FirehoseDeleteDeliveryStreamOutput: ...

    def describe_delivery_stream(self, *,
        DeliveryStreamName: str,
        Limit: int = ...,
        ExclusiveStartDestinationId: str = ...
    ) -> FirehoseDescribeDeliveryStreamOutput: ...

    def list_delivery_streams(self, *,
        Limit: int = ...,
        DeliveryStreamType: str = ...,
        ExclusiveStartDeliveryStreamName: str = ...
    ) -> FirehoseListDeliveryStreamsOutput: ...

    def list_tags_for_delivery_stream(self, *,
        DeliveryStreamName: str,
        ExclusiveStartTagKey: str = ...,
        Limit: int = ...
    ) -> FirehoseListTagsForDeliveryStreamOutput: ...

    def put_record(self, *,
        DeliveryStreamName: str,
        Record: FirehoseRecord
    ) -> FirehosePutRecordOutput: ...

    def put_record_batch(self, *,
        DeliveryStreamName: str,
        Records: List[FirehoseRecord]
    ) -> FirehosePutRecordBatchOutput: ...

    def start_delivery_stream_encryption(self, *,
        DeliveryStreamName: str
    ) -> FirehoseStartDeliveryStreamEncryptionOutput: ...

    def stop_delivery_stream_encryption(self, *,
        DeliveryStreamName: str
    ) -> FirehoseStopDeliveryStreamEncryptionOutput: ...

    def tag_delivery_stream(self, *,
        DeliveryStreamName: str,
        Tags: List[FirehoseTag]
    ) -> FirehoseTagDeliveryStreamOutput: ...

    def untag_delivery_stream(self, *,
        DeliveryStreamName: str,
        TagKeys: List[str]
    ) -> FirehoseUntagDeliveryStreamOutput: ...

    def update_destination(self, *,
        DeliveryStreamName: str,
        CurrentDeliveryStreamVersionId: str,
        DestinationId: str,
        S3DestinationUpdate: FirehoseS3DestinationUpdate = ...,
        ExtendedS3DestinationUpdate: FirehoseExtendedS3DestinationUpdate = ...,
        RedshiftDestinationUpdate: FirehoseRedshiftDestinationUpdate = ...,
        ElasticsearchDestinationUpdate: FirehoseElasticsearchDestinationUpdate = ...,
        SplunkDestinationUpdate: FirehoseSplunkDestinationUpdate = ...
    ) -> FirehoseUpdateDestinationOutput: ...


FirehoseKinesisStreamSourceConfiguration = TypedDict(
    'FirehoseKinesisStreamSourceConfiguration', {
        'KinesisStreamARN': str,
        'RoleARN': str,
    }
)


FirehoseBufferingHints = TypedDict(
    'FirehoseBufferingHints', {
        'SizeInMBs': Optional[int],
        'IntervalInSeconds': Optional[int],
    }
)


FirehoseKMSEncryptionConfig = TypedDict(
    'FirehoseKMSEncryptionConfig', {
        'AWSKMSKeyARN': str,
    }
)


FirehoseEncryptionConfiguration = TypedDict(
    'FirehoseEncryptionConfiguration', {
        'NoEncryptionConfig': Optional[str],
        'KMSEncryptionConfig': Optional[FirehoseKMSEncryptionConfig],
    }
)


FirehoseCloudWatchLoggingOptions = TypedDict(
    'FirehoseCloudWatchLoggingOptions', {
        'BooleanObject': Optional[bool],
        'LogGroupName': Optional[str],
        'LogStreamName': Optional[str],
    }
)


FirehoseS3DestinationConfiguration = TypedDict(
    'FirehoseS3DestinationConfiguration', {
        'RoleARN': str,
        'BucketARN': str,
        'Prefix': Optional[str],
        'ErrorOutputPrefix': Optional[str],
        'BufferingHints': Optional[FirehoseBufferingHints],
        'CompressionFormat': Optional[str],
        'EncryptionConfiguration': Optional[FirehoseEncryptionConfiguration],
        'CloudWatchLoggingOptions': Optional[FirehoseCloudWatchLoggingOptions],
    }
)


FirehoseProcessorParameter = TypedDict(
    'FirehoseProcessorParameter', {
        'ProcessorParameterName': str,
        'ProcessorParameterValue': str,
    }
)


FirehoseProcessor = TypedDict(
    'FirehoseProcessor', {
        'ProcessorType': str,
        'ProcessorParameterList': Optional[List[FirehoseProcessorParameter]],
    }
)


FirehoseProcessingConfiguration = TypedDict(
    'FirehoseProcessingConfiguration', {
        'BooleanObject': Optional[bool],
        'ProcessorList': Optional[List[FirehoseProcessor]],
    }
)


FirehoseSchemaConfiguration = TypedDict(
    'FirehoseSchemaConfiguration', {
        'NonEmptyStringWithoutWhitespace': Optional[str],
        'NonEmptyStringWithoutWhitespace': Optional[str],
        'NonEmptyStringWithoutWhitespace': Optional[str],
        'NonEmptyStringWithoutWhitespace': Optional[str],
        'NonEmptyStringWithoutWhitespace': Optional[str],
        'NonEmptyStringWithoutWhitespace': Optional[str],
    }
)


FirehoseOpenXJsonSerDe = TypedDict(
    'FirehoseOpenXJsonSerDe', {
        'BooleanObject': Optional[bool],
        'BooleanObject': Optional[bool],
        'ColumnToJsonKeyMappings': Optional[Dict[str, str]],
    }
)


FirehoseHiveJsonSerDe = TypedDict(
    'FirehoseHiveJsonSerDe', {
        'ListOfNonEmptyStrings': Optional[List[str]],
    }
)


FirehoseDeserializer = TypedDict(
    'FirehoseDeserializer', {
        'OpenXJsonSerDe': Optional[FirehoseOpenXJsonSerDe],
        'HiveJsonSerDe': Optional[FirehoseHiveJsonSerDe],
    }
)


FirehoseInputFormatConfiguration = TypedDict(
    'FirehoseInputFormatConfiguration', {
        'Deserializer': Optional[FirehoseDeserializer],
    }
)


FirehoseParquetSerDe = TypedDict(
    'FirehoseParquetSerDe', {
        'BlockSizeBytes': Optional[int],
        'ParquetPageSizeBytes': Optional[int],
        'ParquetCompression': Optional[str],
        'BooleanObject': Optional[bool],
        'NonNegativeIntegerObject': Optional[int],
        'ParquetWriterVersion': Optional[str],
    }
)


FirehoseOrcSerDe = TypedDict(
    'FirehoseOrcSerDe', {
        'OrcStripeSizeBytes': Optional[int],
        'BlockSizeBytes': Optional[int],
        'OrcRowIndexStride': Optional[int],
        'BooleanObject': Optional[bool],
        'Proportion': Optional[float],
        'OrcCompression': Optional[str],
        'ListOfNonEmptyStringsWithoutWhitespace': Optional[List[str]],
        'Proportion': Optional[float],
        'Proportion': Optional[float],
        'OrcFormatVersion': Optional[str],
    }
)


FirehoseSerializer = TypedDict(
    'FirehoseSerializer', {
        'ParquetSerDe': Optional[FirehoseParquetSerDe],
        'OrcSerDe': Optional[FirehoseOrcSerDe],
    }
)


FirehoseOutputFormatConfiguration = TypedDict(
    'FirehoseOutputFormatConfiguration', {
        'Serializer': Optional[FirehoseSerializer],
    }
)


FirehoseDataFormatConversionConfiguration = TypedDict(
    'FirehoseDataFormatConversionConfiguration', {
        'SchemaConfiguration': Optional[FirehoseSchemaConfiguration],
        'InputFormatConfiguration': Optional[FirehoseInputFormatConfiguration],
        'OutputFormatConfiguration': Optional[FirehoseOutputFormatConfiguration],
        'BooleanObject': Optional[bool],
    }
)


FirehoseExtendedS3DestinationConfiguration = TypedDict(
    'FirehoseExtendedS3DestinationConfiguration', {
        'RoleARN': str,
        'BucketARN': str,
        'Prefix': Optional[str],
        'ErrorOutputPrefix': Optional[str],
        'BufferingHints': Optional[FirehoseBufferingHints],
        'CompressionFormat': Optional[str],
        'EncryptionConfiguration': Optional[FirehoseEncryptionConfiguration],
        'CloudWatchLoggingOptions': Optional[FirehoseCloudWatchLoggingOptions],
        'ProcessingConfiguration': Optional[FirehoseProcessingConfiguration],
        'S3BackupMode': Optional[str],
        'S3DestinationConfiguration': Optional[FirehoseS3DestinationConfiguration],
        'DataFormatConversionConfiguration': Optional[FirehoseDataFormatConversionConfiguration],
    }
)


FirehoseCopyCommand = TypedDict(
    'FirehoseCopyCommand', {
        'DataTableName': str,
        'DataTableColumns': Optional[str],
        'CopyOptions': Optional[str],
    }
)


FirehoseRedshiftRetryOptions = TypedDict(
    'FirehoseRedshiftRetryOptions', {
        'RedshiftRetryDurationInSeconds': Optional[int],
    }
)


FirehoseRedshiftDestinationConfiguration = TypedDict(
    'FirehoseRedshiftDestinationConfiguration', {
        'RoleARN': str,
        'ClusterJDBCURL': str,
        'CopyCommand': FirehoseCopyCommand,
        'Username': str,
        'Password': str,
        'S3DestinationConfiguration': FirehoseS3DestinationConfiguration,
        'RedshiftRetryOptions': Optional[FirehoseRedshiftRetryOptions],
        'ProcessingConfiguration': Optional[FirehoseProcessingConfiguration],
        'RedshiftS3BackupMode': Optional[str],
        'S3DestinationConfiguration': Optional[FirehoseS3DestinationConfiguration],
        'CloudWatchLoggingOptions': Optional[FirehoseCloudWatchLoggingOptions],
    }
)


FirehoseElasticsearchBufferingHints = TypedDict(
    'FirehoseElasticsearchBufferingHints', {
        'ElasticsearchBufferingIntervalInSeconds': Optional[int],
        'ElasticsearchBufferingSizeInMBs': Optional[int],
    }
)


FirehoseElasticsearchRetryOptions = TypedDict(
    'FirehoseElasticsearchRetryOptions', {
        'ElasticsearchRetryDurationInSeconds': Optional[int],
    }
)


FirehoseElasticsearchDestinationConfiguration = TypedDict(
    'FirehoseElasticsearchDestinationConfiguration', {
        'RoleARN': str,
        'ElasticsearchDomainARN': str,
        'ElasticsearchIndexName': str,
        'ElasticsearchTypeName': str,
        'S3DestinationConfiguration': FirehoseS3DestinationConfiguration,
        'ElasticsearchIndexRotationPeriod': Optional[str],
        'ElasticsearchBufferingHints': Optional[FirehoseElasticsearchBufferingHints],
        'ElasticsearchRetryOptions': Optional[FirehoseElasticsearchRetryOptions],
        'ElasticsearchS3BackupMode': Optional[str],
        'ProcessingConfiguration': Optional[FirehoseProcessingConfiguration],
        'CloudWatchLoggingOptions': Optional[FirehoseCloudWatchLoggingOptions],
    }
)


FirehoseSplunkRetryOptions = TypedDict(
    'FirehoseSplunkRetryOptions', {
        'SplunkRetryDurationInSeconds': Optional[int],
    }
)


FirehoseSplunkDestinationConfiguration = TypedDict(
    'FirehoseSplunkDestinationConfiguration', {
        'HECEndpoint': str,
        'HECEndpointType': str,
        'HECToken': str,
        'S3DestinationConfiguration': FirehoseS3DestinationConfiguration,
        'HECAcknowledgmentTimeoutInSeconds': Optional[int],
        'SplunkRetryOptions': Optional[FirehoseSplunkRetryOptions],
        'SplunkS3BackupMode': Optional[str],
        'ProcessingConfiguration': Optional[FirehoseProcessingConfiguration],
        'CloudWatchLoggingOptions': Optional[FirehoseCloudWatchLoggingOptions],
    }
)


FirehoseTag = TypedDict(
    'FirehoseTag', {
        'TagKey': str,
        'TagValue': Optional[str],
    }
)


FirehoseCreateDeliveryStreamOutput = TypedDict(
    'FirehoseCreateDeliveryStreamOutput', {
        'DeliveryStreamARN': Optional[str],
    }
)


FirehoseDeleteDeliveryStreamOutput = TypedDict(
    'FirehoseDeleteDeliveryStreamOutput', {
    }
)


FirehoseDeliveryStreamEncryptionConfiguration = TypedDict(
    'FirehoseDeliveryStreamEncryptionConfiguration', {
        'DeliveryStreamEncryptionStatus': Optional[str],
    }
)


FirehoseKinesisStreamSourceDescription = TypedDict(
    'FirehoseKinesisStreamSourceDescription', {
        'KinesisStreamARN': Optional[str],
        'RoleARN': Optional[str],
        'DeliveryStartTimestamp': Optional[datetime.datetime],
    }
)


FirehoseSourceDescription = TypedDict(
    'FirehoseSourceDescription', {
        'KinesisStreamSourceDescription': Optional[FirehoseKinesisStreamSourceDescription],
    }
)


FirehoseS3DestinationDescription = TypedDict(
    'FirehoseS3DestinationDescription', {
        'RoleARN': str,
        'BucketARN': str,
        'BufferingHints': FirehoseBufferingHints,
        'CompressionFormat': str,
        'EncryptionConfiguration': FirehoseEncryptionConfiguration,
        'Prefix': Optional[str],
        'ErrorOutputPrefix': Optional[str],
        'CloudWatchLoggingOptions': Optional[FirehoseCloudWatchLoggingOptions],
    }
)


FirehoseExtendedS3DestinationDescription = TypedDict(
    'FirehoseExtendedS3DestinationDescription', {
        'RoleARN': str,
        'BucketARN': str,
        'BufferingHints': FirehoseBufferingHints,
        'CompressionFormat': str,
        'EncryptionConfiguration': FirehoseEncryptionConfiguration,
        'Prefix': Optional[str],
        'ErrorOutputPrefix': Optional[str],
        'CloudWatchLoggingOptions': Optional[FirehoseCloudWatchLoggingOptions],
        'ProcessingConfiguration': Optional[FirehoseProcessingConfiguration],
        'S3BackupMode': Optional[str],
        'S3DestinationDescription': Optional[FirehoseS3DestinationDescription],
        'DataFormatConversionConfiguration': Optional[FirehoseDataFormatConversionConfiguration],
    }
)


FirehoseRedshiftDestinationDescription = TypedDict(
    'FirehoseRedshiftDestinationDescription', {
        'RoleARN': str,
        'ClusterJDBCURL': str,
        'CopyCommand': FirehoseCopyCommand,
        'Username': str,
        'S3DestinationDescription': FirehoseS3DestinationDescription,
        'RedshiftRetryOptions': Optional[FirehoseRedshiftRetryOptions],
        'ProcessingConfiguration': Optional[FirehoseProcessingConfiguration],
        'RedshiftS3BackupMode': Optional[str],
        'S3DestinationDescription': Optional[FirehoseS3DestinationDescription],
        'CloudWatchLoggingOptions': Optional[FirehoseCloudWatchLoggingOptions],
    }
)


FirehoseElasticsearchDestinationDescription = TypedDict(
    'FirehoseElasticsearchDestinationDescription', {
        'RoleARN': Optional[str],
        'ElasticsearchDomainARN': Optional[str],
        'ElasticsearchIndexName': Optional[str],
        'ElasticsearchTypeName': Optional[str],
        'ElasticsearchIndexRotationPeriod': Optional[str],
        'ElasticsearchBufferingHints': Optional[FirehoseElasticsearchBufferingHints],
        'ElasticsearchRetryOptions': Optional[FirehoseElasticsearchRetryOptions],
        'ElasticsearchS3BackupMode': Optional[str],
        'S3DestinationDescription': Optional[FirehoseS3DestinationDescription],
        'ProcessingConfiguration': Optional[FirehoseProcessingConfiguration],
        'CloudWatchLoggingOptions': Optional[FirehoseCloudWatchLoggingOptions],
    }
)


FirehoseSplunkDestinationDescription = TypedDict(
    'FirehoseSplunkDestinationDescription', {
        'HECEndpoint': Optional[str],
        'HECEndpointType': Optional[str],
        'HECToken': Optional[str],
        'HECAcknowledgmentTimeoutInSeconds': Optional[int],
        'SplunkRetryOptions': Optional[FirehoseSplunkRetryOptions],
        'SplunkS3BackupMode': Optional[str],
        'S3DestinationDescription': Optional[FirehoseS3DestinationDescription],
        'ProcessingConfiguration': Optional[FirehoseProcessingConfiguration],
        'CloudWatchLoggingOptions': Optional[FirehoseCloudWatchLoggingOptions],
    }
)


FirehoseDestinationDescription = TypedDict(
    'FirehoseDestinationDescription', {
        'DestinationId': str,
        'S3DestinationDescription': Optional[FirehoseS3DestinationDescription],
        'ExtendedS3DestinationDescription': Optional[FirehoseExtendedS3DestinationDescription],
        'RedshiftDestinationDescription': Optional[FirehoseRedshiftDestinationDescription],
        'ElasticsearchDestinationDescription': Optional[FirehoseElasticsearchDestinationDescription],
        'SplunkDestinationDescription': Optional[FirehoseSplunkDestinationDescription],
    }
)


FirehoseDeliveryStreamDescription = TypedDict(
    'FirehoseDeliveryStreamDescription', {
        'DeliveryStreamName': str,
        'DeliveryStreamARN': str,
        'DeliveryStreamStatus': str,
        'DeliveryStreamType': str,
        'DeliveryStreamVersionId': str,
        'DestinationDescriptionList': List[FirehoseDestinationDescription],
        'BooleanObject': bool,
        'DeliveryStreamEncryptionConfiguration': Optional[FirehoseDeliveryStreamEncryptionConfiguration],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'SourceDescription': Optional[FirehoseSourceDescription],
    }
)


FirehoseDescribeDeliveryStreamOutput = TypedDict(
    'FirehoseDescribeDeliveryStreamOutput', {
        'DeliveryStreamDescription': FirehoseDeliveryStreamDescription,
    }
)


FirehoseListDeliveryStreamsOutput = TypedDict(
    'FirehoseListDeliveryStreamsOutput', {
        'DeliveryStreamNameList': List[str],
        'BooleanObject': bool,
    }
)


FirehoseListTagsForDeliveryStreamOutput = TypedDict(
    'FirehoseListTagsForDeliveryStreamOutput', {
        'ListTagsForDeliveryStreamOutputTagList': List[FirehoseTag],
        'BooleanObject': bool,
    }
)


FirehoseRecord = TypedDict(
    'FirehoseRecord', {
        'Data': bytes,
    }
)


FirehosePutRecordOutput = TypedDict(
    'FirehosePutRecordOutput', {
        'PutResponseRecordId': str,
        'BooleanObject': Optional[bool],
    }
)


FirehosePutRecordBatchResponseEntry = TypedDict(
    'FirehosePutRecordBatchResponseEntry', {
        'PutResponseRecordId': Optional[str],
        'ErrorCode': Optional[str],
        'ErrorMessage': Optional[str],
    }
)


FirehosePutRecordBatchOutput = TypedDict(
    'FirehosePutRecordBatchOutput', {
        'NonNegativeIntegerObject': int,
        'PutRecordBatchResponseEntryList': List[FirehosePutRecordBatchResponseEntry],
        'BooleanObject': Optional[bool],
    }
)


FirehoseStartDeliveryStreamEncryptionOutput = TypedDict(
    'FirehoseStartDeliveryStreamEncryptionOutput', {
    }
)


FirehoseStopDeliveryStreamEncryptionOutput = TypedDict(
    'FirehoseStopDeliveryStreamEncryptionOutput', {
    }
)


FirehoseTagDeliveryStreamOutput = TypedDict(
    'FirehoseTagDeliveryStreamOutput', {
    }
)


FirehoseUntagDeliveryStreamOutput = TypedDict(
    'FirehoseUntagDeliveryStreamOutput', {
    }
)


FirehoseS3DestinationUpdate = TypedDict(
    'FirehoseS3DestinationUpdate', {
        'RoleARN': Optional[str],
        'BucketARN': Optional[str],
        'Prefix': Optional[str],
        'ErrorOutputPrefix': Optional[str],
        'BufferingHints': Optional[FirehoseBufferingHints],
        'CompressionFormat': Optional[str],
        'EncryptionConfiguration': Optional[FirehoseEncryptionConfiguration],
        'CloudWatchLoggingOptions': Optional[FirehoseCloudWatchLoggingOptions],
    }
)


FirehoseExtendedS3DestinationUpdate = TypedDict(
    'FirehoseExtendedS3DestinationUpdate', {
        'RoleARN': Optional[str],
        'BucketARN': Optional[str],
        'Prefix': Optional[str],
        'ErrorOutputPrefix': Optional[str],
        'BufferingHints': Optional[FirehoseBufferingHints],
        'CompressionFormat': Optional[str],
        'EncryptionConfiguration': Optional[FirehoseEncryptionConfiguration],
        'CloudWatchLoggingOptions': Optional[FirehoseCloudWatchLoggingOptions],
        'ProcessingConfiguration': Optional[FirehoseProcessingConfiguration],
        'S3BackupMode': Optional[str],
        'S3DestinationUpdate': Optional[FirehoseS3DestinationUpdate],
        'DataFormatConversionConfiguration': Optional[FirehoseDataFormatConversionConfiguration],
    }
)


FirehoseRedshiftDestinationUpdate = TypedDict(
    'FirehoseRedshiftDestinationUpdate', {
        'RoleARN': Optional[str],
        'ClusterJDBCURL': Optional[str],
        'CopyCommand': Optional[FirehoseCopyCommand],
        'Username': Optional[str],
        'Password': Optional[str],
        'RedshiftRetryOptions': Optional[FirehoseRedshiftRetryOptions],
        'S3DestinationUpdate': Optional[FirehoseS3DestinationUpdate],
        'ProcessingConfiguration': Optional[FirehoseProcessingConfiguration],
        'RedshiftS3BackupMode': Optional[str],
        'S3DestinationUpdate': Optional[FirehoseS3DestinationUpdate],
        'CloudWatchLoggingOptions': Optional[FirehoseCloudWatchLoggingOptions],
    }
)


FirehoseElasticsearchDestinationUpdate = TypedDict(
    'FirehoseElasticsearchDestinationUpdate', {
        'RoleARN': Optional[str],
        'ElasticsearchDomainARN': Optional[str],
        'ElasticsearchIndexName': Optional[str],
        'ElasticsearchTypeName': Optional[str],
        'ElasticsearchIndexRotationPeriod': Optional[str],
        'ElasticsearchBufferingHints': Optional[FirehoseElasticsearchBufferingHints],
        'ElasticsearchRetryOptions': Optional[FirehoseElasticsearchRetryOptions],
        'S3DestinationUpdate': Optional[FirehoseS3DestinationUpdate],
        'ProcessingConfiguration': Optional[FirehoseProcessingConfiguration],
        'CloudWatchLoggingOptions': Optional[FirehoseCloudWatchLoggingOptions],
    }
)


FirehoseSplunkDestinationUpdate = TypedDict(
    'FirehoseSplunkDestinationUpdate', {
        'HECEndpoint': Optional[str],
        'HECEndpointType': Optional[str],
        'HECToken': Optional[str],
        'HECAcknowledgmentTimeoutInSeconds': Optional[int],
        'SplunkRetryOptions': Optional[FirehoseSplunkRetryOptions],
        'SplunkS3BackupMode': Optional[str],
        'S3DestinationUpdate': Optional[FirehoseS3DestinationUpdate],
        'ProcessingConfiguration': Optional[FirehoseProcessingConfiguration],
        'CloudWatchLoggingOptions': Optional[FirehoseCloudWatchLoggingOptions],
    }
)


FirehoseUpdateDestinationOutput = TypedDict(
    'FirehoseUpdateDestinationOutput', {
    }
)


class FMS(BaseClient):
    def associate_admin_account(self, *,
        AdminAccount: str
    ): ...

    def delete_notification_channel(self): ...

    def delete_policy(self, *,
        PolicyId: str,
        DeleteAllPolicyResources: bool = ...
    ): ...

    def disassociate_admin_account(self): ...

    def get_admin_account(self) -> FMSGetAdminAccountResponse: ...

    def get_compliance_detail(self, *,
        PolicyId: str,
        MemberAccount: str
    ) -> FMSGetComplianceDetailResponse: ...

    def get_notification_channel(self) -> FMSGetNotificationChannelResponse: ...

    def get_policy(self, *,
        PolicyId: str
    ) -> FMSGetPolicyResponse: ...

    def get_protection_status(self, *,
        PolicyId: str,
        MemberAccountId: str = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> FMSGetProtectionStatusResponse: ...

    def list_compliance_status(self, *,
        PolicyId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> FMSListComplianceStatusResponse: ...

    def list_member_accounts(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> FMSListMemberAccountsResponse: ...

    def list_policies(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> FMSListPoliciesResponse: ...

    def put_notification_channel(self, *,
        SnsTopicArn: str,
        SnsRoleName: str
    ): ...

    def put_policy(self, *,
        Policy: FMSPolicy
    ) -> FMSPutPolicyResponse: ...


FMSGetAdminAccountResponse = TypedDict(
    'FMSGetAdminAccountResponse', {
        'AWSAccountId': Optional[str],
        'AccountRoleStatus': Optional[str],
    }
)


FMSComplianceViolator = TypedDict(
    'FMSComplianceViolator', {
        'ResourceId': Optional[str],
        'ViolationReason': Optional[str],
        'ResourceType': Optional[str],
    }
)


FMSPolicyComplianceDetail = TypedDict(
    'FMSPolicyComplianceDetail', {
        'AWSAccountId': Optional[str],
        'PolicyId': Optional[str],
        'AWSAccountId': Optional[str],
        'ComplianceViolators': Optional[List[FMSComplianceViolator]],
        'Boolean': Optional[bool],
        'TimeStamp': Optional[datetime.datetime],
        'IssueInfoMap': Optional[Dict[str, str]],
    }
)


FMSGetComplianceDetailResponse = TypedDict(
    'FMSGetComplianceDetailResponse', {
        'PolicyComplianceDetail': Optional[FMSPolicyComplianceDetail],
    }
)


FMSGetNotificationChannelResponse = TypedDict(
    'FMSGetNotificationChannelResponse', {
        'ResourceArn': Optional[str],
        'ResourceArn': Optional[str],
    }
)


FMSSecurityServicePolicyData = TypedDict(
    'FMSSecurityServicePolicyData', {
        'SecurityServiceType': str,
        'ManagedServiceData': Optional[str],
    }
)


FMSResourceTag = TypedDict(
    'FMSResourceTag', {
        'TagKey': str,
        'TagValue': Optional[str],
    }
)


FMSPolicy = TypedDict(
    'FMSPolicy', {
        'ResourceName': str,
        'SecurityServicePolicyData': FMSSecurityServicePolicyData,
        'ResourceType': str,
        'Boolean': bool,
        'Boolean': bool,
        'PolicyId': Optional[str],
        'PolicyUpdateToken': Optional[str],
        'ResourceTypeList': Optional[List[str]],
        'ResourceTags': Optional[List[FMSResourceTag]],
        'CustomerPolicyScopeMap': Optional[Dict[str, List[str]]],
        'CustomerPolicyScopeMap': Optional[Dict[str, List[str]]],
    }
)


FMSGetPolicyResponse = TypedDict(
    'FMSGetPolicyResponse', {
        'Policy': Optional[FMSPolicy],
        'ResourceArn': Optional[str],
    }
)


FMSGetProtectionStatusResponse = TypedDict(
    'FMSGetProtectionStatusResponse', {
        'AWSAccountId': Optional[str],
        'SecurityServiceType': Optional[str],
        'ProtectionData': Optional[str],
        'PaginationToken': Optional[str],
    }
)


FMSEvaluationResult = TypedDict(
    'FMSEvaluationResult', {
        'PolicyComplianceStatusType': Optional[str],
        'ResourceCount': Optional[int],
        'Boolean': Optional[bool],
    }
)


FMSPolicyComplianceStatus = TypedDict(
    'FMSPolicyComplianceStatus', {
        'AWSAccountId': Optional[str],
        'PolicyId': Optional[str],
        'ResourceName': Optional[str],
        'AWSAccountId': Optional[str],
        'EvaluationResults': Optional[List[FMSEvaluationResult]],
        'TimeStamp': Optional[datetime.datetime],
        'IssueInfoMap': Optional[Dict[str, str]],
    }
)


FMSListComplianceStatusResponse = TypedDict(
    'FMSListComplianceStatusResponse', {
        'PolicyComplianceStatusList': Optional[List[FMSPolicyComplianceStatus]],
        'PaginationToken': Optional[str],
    }
)


FMSListMemberAccountsResponse = TypedDict(
    'FMSListMemberAccountsResponse', {
        'MemberAccounts': Optional[List[str]],
        'PaginationToken': Optional[str],
    }
)


FMSPolicySummary = TypedDict(
    'FMSPolicySummary', {
        'ResourceArn': Optional[str],
        'PolicyId': Optional[str],
        'ResourceName': Optional[str],
        'ResourceType': Optional[str],
        'SecurityServiceType': Optional[str],
        'Boolean': Optional[bool],
    }
)


FMSListPoliciesResponse = TypedDict(
    'FMSListPoliciesResponse', {
        'PolicySummaryList': Optional[List[FMSPolicySummary]],
        'PaginationToken': Optional[str],
    }
)


FMSPutPolicyResponse = TypedDict(
    'FMSPutPolicyResponse', {
        'Policy': Optional[FMSPolicy],
        'ResourceArn': Optional[str],
    }
)


class FSx(BaseClient):
    def create_backup(self, *,
        FileSystemId: str,
        ClientRequestToken: str = ...,
        Tags: List[FSxTag] = ...
    ) -> FSxCreateBackupResponse: ...

    def create_file_system(self, *,
        FileSystemType: str,
        StorageCapacity: int,
        SubnetIds: List[str],
        ClientRequestToken: str = ...,
        SecurityGroupIds: List[str] = ...,
        Tags: List[FSxTag] = ...,
        KmsKeyId: str = ...,
        WindowsConfiguration: FSxCreateFileSystemWindowsConfiguration = ...,
        LustreConfiguration: FSxCreateFileSystemLustreConfiguration = ...
    ) -> FSxCreateFileSystemResponse: ...

    def create_file_system_from_backup(self, *,
        BackupId: str,
        SubnetIds: List[str],
        ClientRequestToken: str = ...,
        SecurityGroupIds: List[str] = ...,
        Tags: List[FSxTag] = ...,
        WindowsConfiguration: FSxCreateFileSystemWindowsConfiguration = ...
    ) -> FSxCreateFileSystemFromBackupResponse: ...

    def delete_backup(self, *,
        BackupId: str,
        ClientRequestToken: str = ...
    ) -> FSxDeleteBackupResponse: ...

    def delete_file_system(self, *,
        FileSystemId: str,
        ClientRequestToken: str = ...,
        WindowsConfiguration: FSxDeleteFileSystemWindowsConfiguration = ...
    ) -> FSxDeleteFileSystemResponse: ...

    def describe_backups(self, *,
        BackupIds: List[str] = ...,
        Filters: List[FSxFilter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> FSxDescribeBackupsResponse: ...

    def describe_file_systems(self, *,
        FileSystemIds: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> FSxDescribeFileSystemsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceARN: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> FSxListTagsForResourceResponse: ...

    def tag_resource(self, *,
        ResourceARN: str,
        Tags: List[FSxTag]
    ) -> FSxTagResourceResponse: ...

    def untag_resource(self, *,
        ResourceARN: str,
        TagKeys: List[str]
    ) -> FSxUntagResourceResponse: ...

    def update_file_system(self, *,
        FileSystemId: str,
        ClientRequestToken: str = ...,
        WindowsConfiguration: FSxUpdateFileSystemWindowsConfiguration = ...,
        LustreConfiguration: FSxUpdateFileSystemLustreConfiguration = ...
    ) -> FSxUpdateFileSystemResponse: ...


FSxTag = TypedDict(
    'FSxTag', {
        'TagKey': Optional[str],
        'TagValue': Optional[str],
    }
)


FSxBackupFailureDetails = TypedDict(
    'FSxBackupFailureDetails', {
        'ErrorMessage': Optional[str],
    }
)


FSxFileSystemFailureDetails = TypedDict(
    'FSxFileSystemFailureDetails', {
        'ErrorMessage': Optional[str],
    }
)


FSxWindowsFileSystemConfiguration = TypedDict(
    'FSxWindowsFileSystemConfiguration', {
        'DirectoryId': Optional[str],
        'MegabytesPerSecond': Optional[int],
        'FileSystemMaintenanceOperations': Optional[List[str]],
        'WeeklyTime': Optional[str],
        'DailyTime': Optional[str],
        'AutomaticBackupRetentionDays': Optional[int],
        'Flag': Optional[bool],
    }
)


FSxDataRepositoryConfiguration = TypedDict(
    'FSxDataRepositoryConfiguration', {
        'ArchivePath': Optional[str],
        'ArchivePath': Optional[str],
        'Megabytes': Optional[int],
    }
)


FSxLustreFileSystemConfiguration = TypedDict(
    'FSxLustreFileSystemConfiguration', {
        'WeeklyTime': Optional[str],
        'DataRepositoryConfiguration': Optional[FSxDataRepositoryConfiguration],
    }
)


FSxFileSystem = TypedDict(
    'FSxFileSystem', {
        'AWSAccountId': Optional[str],
        'CreationTime': Optional[datetime.datetime],
        'FileSystemId': Optional[str],
        'FileSystemType': Optional[str],
        'FileSystemLifecycle': Optional[str],
        'FileSystemFailureDetails': Optional[FSxFileSystemFailureDetails],
        'StorageCapacity': Optional[int],
        'VpcId': Optional[str],
        'SubnetIds': Optional[List[str]],
        'NetworkInterfaceIds': Optional[List[str]],
        'DNSName': Optional[str],
        'KmsKeyId': Optional[str],
        'ResourceARN': Optional[str],
        'Tags': Optional[List[FSxTag]],
        'WindowsFileSystemConfiguration': Optional[FSxWindowsFileSystemConfiguration],
        'LustreFileSystemConfiguration': Optional[FSxLustreFileSystemConfiguration],
    }
)


FSxBackup = TypedDict(
    'FSxBackup', {
        'BackupId': str,
        'BackupLifecycle': str,
        'BackupType': str,
        'CreationTime': datetime.datetime,
        'FileSystem': FSxFileSystem,
        'BackupFailureDetails': Optional[FSxBackupFailureDetails],
        'ProgressPercent': Optional[int],
        'KmsKeyId': Optional[str],
        'ResourceARN': Optional[str],
        'Tags': Optional[List[FSxTag]],
    }
)


FSxCreateBackupResponse = TypedDict(
    'FSxCreateBackupResponse', {
        'Backup': Optional[FSxBackup],
    }
)


FSxCreateFileSystemWindowsConfiguration = TypedDict(
    'FSxCreateFileSystemWindowsConfiguration', {
        'MegabytesPerSecond': int,
        'DirectoryId': Optional[str],
        'WeeklyTime': Optional[str],
        'DailyTime': Optional[str],
        'AutomaticBackupRetentionDays': Optional[int],
        'Flag': Optional[bool],
    }
)


FSxCreateFileSystemLustreConfiguration = TypedDict(
    'FSxCreateFileSystemLustreConfiguration', {
        'WeeklyTime': Optional[str],
        'ArchivePath': Optional[str],
        'ArchivePath': Optional[str],
        'Megabytes': Optional[int],
    }
)


FSxCreateFileSystemResponse = TypedDict(
    'FSxCreateFileSystemResponse', {
        'FileSystem': Optional[FSxFileSystem],
    }
)


FSxCreateFileSystemFromBackupResponse = TypedDict(
    'FSxCreateFileSystemFromBackupResponse', {
        'FileSystem': Optional[FSxFileSystem],
    }
)


FSxDeleteBackupResponse = TypedDict(
    'FSxDeleteBackupResponse', {
        'BackupId': Optional[str],
        'BackupLifecycle': Optional[str],
    }
)


FSxDeleteFileSystemWindowsConfiguration = TypedDict(
    'FSxDeleteFileSystemWindowsConfiguration', {
        'Flag': Optional[bool],
        'Tags': Optional[List[FSxTag]],
    }
)


FSxDeleteFileSystemWindowsResponse = TypedDict(
    'FSxDeleteFileSystemWindowsResponse', {
        'BackupId': Optional[str],
        'Tags': Optional[List[FSxTag]],
    }
)


FSxDeleteFileSystemResponse = TypedDict(
    'FSxDeleteFileSystemResponse', {
        'FileSystemId': Optional[str],
        'FileSystemLifecycle': Optional[str],
        'DeleteFileSystemWindowsResponse': Optional[FSxDeleteFileSystemWindowsResponse],
    }
)


FSxFilter = TypedDict(
    'FSxFilter', {
        'FilterName': Optional[str],
        'FilterValues': Optional[List[str]],
    }
)


FSxDescribeBackupsResponse = TypedDict(
    'FSxDescribeBackupsResponse', {
        'Backups': Optional[List[FSxBackup]],
        'NextToken': Optional[str],
    }
)


FSxDescribeFileSystemsResponse = TypedDict(
    'FSxDescribeFileSystemsResponse', {
        'FileSystems': Optional[List[FSxFileSystem]],
        'NextToken': Optional[str],
    }
)


FSxListTagsForResourceResponse = TypedDict(
    'FSxListTagsForResourceResponse', {
        'Tags': Optional[List[FSxTag]],
        'NextToken': Optional[str],
    }
)


FSxTagResourceResponse = TypedDict(
    'FSxTagResourceResponse', {
    }
)


FSxUntagResourceResponse = TypedDict(
    'FSxUntagResourceResponse', {
    }
)


FSxUpdateFileSystemWindowsConfiguration = TypedDict(
    'FSxUpdateFileSystemWindowsConfiguration', {
        'WeeklyTime': Optional[str],
        'DailyTime': Optional[str],
        'AutomaticBackupRetentionDays': Optional[int],
    }
)


FSxUpdateFileSystemLustreConfiguration = TypedDict(
    'FSxUpdateFileSystemLustreConfiguration', {
        'WeeklyTime': Optional[str],
    }
)


FSxUpdateFileSystemResponse = TypedDict(
    'FSxUpdateFileSystemResponse', {
        'FileSystem': Optional[FSxFileSystem],
    }
)


class GameLift(BaseClient):
    def accept_match(self, *,
        TicketId: str,
        PlayerIds: List[str],
        AcceptanceType: str
    ) -> GameLiftAcceptMatchOutput: ...

    def create_alias(self, *,
        Name: str,
        RoutingStrategy: GameLiftRoutingStrategy,
        Description: str = ...
    ) -> GameLiftCreateAliasOutput: ...

    def create_build(self, *,
        Name: str = ...,
        Version: str = ...,
        StorageLocation: GameLiftS3Location = ...,
        OperatingSystem: str = ...
    ) -> GameLiftCreateBuildOutput: ...

    def create_fleet(self, *,
        Name: str,
        EC2InstanceType: str,
        Description: str = ...,
        BuildId: str = ...,
        ScriptId: str = ...,
        ServerLaunchPath: str = ...,
        ServerLaunchParameters: str = ...,
        LogPaths: List[str] = ...,
        EC2InboundPermissions: List[GameLiftIpPermission] = ...,
        NewGameSessionProtectionPolicy: str = ...,
        RuntimeConfiguration: GameLiftRuntimeConfiguration = ...,
        ResourceCreationLimitPolicy: GameLiftResourceCreationLimitPolicy = ...,
        MetricGroups: List[str] = ...,
        PeerVpcAwsAccountId: str = ...,
        PeerVpcId: str = ...,
        FleetType: str = ...,
        InstanceRoleArn: str = ...
    ) -> GameLiftCreateFleetOutput: ...

    def create_game_session(self, *,
        MaximumPlayerSessionCount: int,
        FleetId: str = ...,
        AliasId: str = ...,
        Name: str = ...,
        GameProperties: List[GameLiftGameProperty] = ...,
        CreatorId: str = ...,
        GameSessionId: str = ...,
        IdempotencyToken: str = ...,
        GameSessionData: str = ...
    ) -> GameLiftCreateGameSessionOutput: ...

    def create_game_session_queue(self, *,
        Name: str,
        TimeoutInSeconds: int = ...,
        PlayerLatencyPolicies: List[GameLiftPlayerLatencyPolicy] = ...,
        Destinations: List[GameLiftGameSessionQueueDestination] = ...
    ) -> GameLiftCreateGameSessionQueueOutput: ...

    def create_matchmaking_configuration(self, *,
        Name: str,
        GameSessionQueueArns: List[str],
        RequestTimeoutSeconds: int,
        AcceptanceRequired: bool,
        RuleSetName: str,
        Description: str = ...,
        AcceptanceTimeoutSeconds: int = ...,
        NotificationTarget: str = ...,
        AdditionalPlayerCount: int = ...,
        CustomEventData: str = ...,
        GameProperties: List[GameLiftGameProperty] = ...,
        GameSessionData: str = ...
    ) -> GameLiftCreateMatchmakingConfigurationOutput: ...

    def create_matchmaking_rule_set(self, *,
        Name: str,
        RuleSetBody: str
    ) -> GameLiftCreateMatchmakingRuleSetOutput: ...

    def create_player_session(self, *,
        GameSessionId: str,
        PlayerId: str,
        PlayerData: str = ...
    ) -> GameLiftCreatePlayerSessionOutput: ...

    def create_player_sessions(self, *,
        GameSessionId: str,
        PlayerIds: List[str],
        PlayerDataMap: Dict[str, str] = ...
    ) -> GameLiftCreatePlayerSessionsOutput: ...

    def create_script(self, *,
        Name: str = ...,
        Version: str = ...,
        StorageLocation: GameLiftS3Location = ...,
        ZipFile: bytes = ...
    ) -> GameLiftCreateScriptOutput: ...

    def create_vpc_peering_authorization(self, *,
        GameLiftAwsAccountId: str,
        PeerVpcId: str
    ) -> GameLiftCreateVpcPeeringAuthorizationOutput: ...

    def create_vpc_peering_connection(self, *,
        FleetId: str,
        PeerVpcAwsAccountId: str,
        PeerVpcId: str
    ) -> GameLiftCreateVpcPeeringConnectionOutput: ...

    def delete_alias(self, *,
        AliasId: str
    ): ...

    def delete_build(self, *,
        BuildId: str
    ): ...

    def delete_fleet(self, *,
        FleetId: str
    ): ...

    def delete_game_session_queue(self, *,
        Name: str
    ) -> GameLiftDeleteGameSessionQueueOutput: ...

    def delete_matchmaking_configuration(self, *,
        Name: str
    ) -> GameLiftDeleteMatchmakingConfigurationOutput: ...

    def delete_matchmaking_rule_set(self, *,
        Name: str
    ) -> GameLiftDeleteMatchmakingRuleSetOutput: ...

    def delete_scaling_policy(self, *,
        Name: str,
        FleetId: str
    ): ...

    def delete_script(self, *,
        ScriptId: str
    ): ...

    def delete_vpc_peering_authorization(self, *,
        GameLiftAwsAccountId: str,
        PeerVpcId: str
    ) -> GameLiftDeleteVpcPeeringAuthorizationOutput: ...

    def delete_vpc_peering_connection(self, *,
        FleetId: str,
        VpcPeeringConnectionId: str
    ) -> GameLiftDeleteVpcPeeringConnectionOutput: ...

    def describe_alias(self, *,
        AliasId: str
    ) -> GameLiftDescribeAliasOutput: ...

    def describe_build(self, *,
        BuildId: str
    ) -> GameLiftDescribeBuildOutput: ...

    def describe_ec2_instance_limits(self, *,
        EC2InstanceType: str = ...
    ) -> GameLiftDescribeEC2InstanceLimitsOutput: ...

    def describe_fleet_attributes(self, *,
        FleetIds: List[str] = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftDescribeFleetAttributesOutput: ...

    def describe_fleet_capacity(self, *,
        FleetIds: List[str] = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftDescribeFleetCapacityOutput: ...

    def describe_fleet_events(self, *,
        FleetId: str,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftDescribeFleetEventsOutput: ...

    def describe_fleet_port_settings(self, *,
        FleetId: str
    ) -> GameLiftDescribeFleetPortSettingsOutput: ...

    def describe_fleet_utilization(self, *,
        FleetIds: List[str] = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftDescribeFleetUtilizationOutput: ...

    def describe_game_session_details(self, *,
        FleetId: str = ...,
        GameSessionId: str = ...,
        AliasId: str = ...,
        StatusFilter: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftDescribeGameSessionDetailsOutput: ...

    def describe_game_session_placement(self, *,
        PlacementId: str
    ) -> GameLiftDescribeGameSessionPlacementOutput: ...

    def describe_game_session_queues(self, *,
        Names: List[str] = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftDescribeGameSessionQueuesOutput: ...

    def describe_game_sessions(self, *,
        FleetId: str = ...,
        GameSessionId: str = ...,
        AliasId: str = ...,
        StatusFilter: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftDescribeGameSessionsOutput: ...

    def describe_instances(self, *,
        FleetId: str,
        InstanceId: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftDescribeInstancesOutput: ...

    def describe_matchmaking(self, *,
        TicketIds: List[str]
    ) -> GameLiftDescribeMatchmakingOutput: ...

    def describe_matchmaking_configurations(self, *,
        Names: List[str] = ...,
        RuleSetName: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftDescribeMatchmakingConfigurationsOutput: ...

    def describe_matchmaking_rule_sets(self, *,
        Names: List[str] = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftDescribeMatchmakingRuleSetsOutput: ...

    def describe_player_sessions(self, *,
        GameSessionId: str = ...,
        PlayerId: str = ...,
        PlayerSessionId: str = ...,
        PlayerSessionStatusFilter: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftDescribePlayerSessionsOutput: ...

    def describe_runtime_configuration(self, *,
        FleetId: str
    ) -> GameLiftDescribeRuntimeConfigurationOutput: ...

    def describe_scaling_policies(self, *,
        FleetId: str,
        StatusFilter: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftDescribeScalingPoliciesOutput: ...

    def describe_script(self, *,
        ScriptId: str
    ) -> GameLiftDescribeScriptOutput: ...

    def describe_vpc_peering_authorizations(self) -> GameLiftDescribeVpcPeeringAuthorizationsOutput: ...

    def describe_vpc_peering_connections(self, *,
        FleetId: str = ...
    ) -> GameLiftDescribeVpcPeeringConnectionsOutput: ...

    def get_game_session_log_url(self, *,
        GameSessionId: str
    ) -> GameLiftGetGameSessionLogUrlOutput: ...

    def get_instance_access(self, *,
        FleetId: str,
        InstanceId: str
    ) -> GameLiftGetInstanceAccessOutput: ...

    def list_aliases(self, *,
        RoutingStrategyType: str = ...,
        Name: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftListAliasesOutput: ...

    def list_builds(self, *,
        Status: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftListBuildsOutput: ...

    def list_fleets(self, *,
        BuildId: str = ...,
        ScriptId: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftListFleetsOutput: ...

    def list_scripts(self, *,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftListScriptsOutput: ...

    def put_scaling_policy(self, *,
        Name: str,
        FleetId: str,
        MetricName: str,
        ScalingAdjustment: int = ...,
        ScalingAdjustmentType: str = ...,
        Threshold: float = ...,
        ComparisonOperator: str = ...,
        EvaluationPeriods: int = ...,
        PolicyType: str = ...,
        TargetConfiguration: GameLiftTargetConfiguration = ...
    ) -> GameLiftPutScalingPolicyOutput: ...

    def request_upload_credentials(self, *,
        BuildId: str
    ) -> GameLiftRequestUploadCredentialsOutput: ...

    def resolve_alias(self, *,
        AliasId: str
    ) -> GameLiftResolveAliasOutput: ...

    def search_game_sessions(self, *,
        FleetId: str = ...,
        AliasId: str = ...,
        FilterExpression: str = ...,
        SortExpression: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftSearchGameSessionsOutput: ...

    def start_fleet_actions(self, *,
        FleetId: str,
        Actions: List[str]
    ) -> GameLiftStartFleetActionsOutput: ...

    def start_game_session_placement(self, *,
        PlacementId: str,
        GameSessionQueueName: str,
        MaximumPlayerSessionCount: int,
        GameProperties: List[GameLiftGameProperty] = ...,
        GameSessionName: str = ...,
        PlayerLatencies: List[GameLiftPlayerLatency] = ...,
        DesiredPlayerSessions: List[GameLiftDesiredPlayerSession] = ...,
        GameSessionData: str = ...
    ) -> GameLiftStartGameSessionPlacementOutput: ...

    def start_match_backfill(self, *,
        ConfigurationName: str,
        GameSessionArn: str,
        Players: List[GameLiftPlayer],
        TicketId: str = ...
    ) -> GameLiftStartMatchBackfillOutput: ...

    def start_matchmaking(self, *,
        ConfigurationName: str,
        Players: List[GameLiftPlayer],
        TicketId: str = ...
    ) -> GameLiftStartMatchmakingOutput: ...

    def stop_fleet_actions(self, *,
        FleetId: str,
        Actions: List[str]
    ) -> GameLiftStopFleetActionsOutput: ...

    def stop_game_session_placement(self, *,
        PlacementId: str
    ) -> GameLiftStopGameSessionPlacementOutput: ...

    def stop_matchmaking(self, *,
        TicketId: str
    ) -> GameLiftStopMatchmakingOutput: ...

    def update_alias(self, *,
        AliasId: str,
        Name: str = ...,
        Description: str = ...,
        RoutingStrategy: GameLiftRoutingStrategy = ...
    ) -> GameLiftUpdateAliasOutput: ...

    def update_build(self, *,
        BuildId: str,
        Name: str = ...,
        Version: str = ...
    ) -> GameLiftUpdateBuildOutput: ...

    def update_fleet_attributes(self, *,
        FleetId: str,
        Name: str = ...,
        Description: str = ...,
        NewGameSessionProtectionPolicy: str = ...,
        ResourceCreationLimitPolicy: GameLiftResourceCreationLimitPolicy = ...,
        MetricGroups: List[str] = ...
    ) -> GameLiftUpdateFleetAttributesOutput: ...

    def update_fleet_capacity(self, *,
        FleetId: str,
        DesiredInstances: int = ...,
        MinSize: int = ...,
        MaxSize: int = ...
    ) -> GameLiftUpdateFleetCapacityOutput: ...

    def update_fleet_port_settings(self, *,
        FleetId: str,
        InboundPermissionAuthorizations: List[GameLiftIpPermission] = ...,
        InboundPermissionRevocations: List[GameLiftIpPermission] = ...
    ) -> GameLiftUpdateFleetPortSettingsOutput: ...

    def update_game_session(self, *,
        GameSessionId: str,
        MaximumPlayerSessionCount: int = ...,
        Name: str = ...,
        PlayerSessionCreationPolicy: str = ...,
        ProtectionPolicy: str = ...
    ) -> GameLiftUpdateGameSessionOutput: ...

    def update_game_session_queue(self, *,
        Name: str,
        TimeoutInSeconds: int = ...,
        PlayerLatencyPolicies: List[GameLiftPlayerLatencyPolicy] = ...,
        Destinations: List[GameLiftGameSessionQueueDestination] = ...
    ) -> GameLiftUpdateGameSessionQueueOutput: ...

    def update_matchmaking_configuration(self, *,
        Name: str,
        Description: str = ...,
        GameSessionQueueArns: List[str] = ...,
        RequestTimeoutSeconds: int = ...,
        AcceptanceTimeoutSeconds: int = ...,
        AcceptanceRequired: bool = ...,
        RuleSetName: str = ...,
        NotificationTarget: str = ...,
        AdditionalPlayerCount: int = ...,
        CustomEventData: str = ...,
        GameProperties: List[GameLiftGameProperty] = ...,
        GameSessionData: str = ...
    ) -> GameLiftUpdateMatchmakingConfigurationOutput: ...

    def update_runtime_configuration(self, *,
        FleetId: str,
        RuntimeConfiguration: GameLiftRuntimeConfiguration
    ) -> GameLiftUpdateRuntimeConfigurationOutput: ...

    def update_script(self, *,
        ScriptId: str,
        Name: str = ...,
        Version: str = ...,
        StorageLocation: GameLiftS3Location = ...,
        ZipFile: bytes = ...
    ) -> GameLiftUpdateScriptOutput: ...

    def validate_matchmaking_rule_set(self, *,
        RuleSetBody: str
    ) -> GameLiftValidateMatchmakingRuleSetOutput: ...


GameLiftAcceptMatchOutput = TypedDict(
    'GameLiftAcceptMatchOutput', {
    }
)


GameLiftRoutingStrategy = TypedDict(
    'GameLiftRoutingStrategy', {
        'RoutingStrategyType': Optional[str],
        'FleetId': Optional[str],
        'FreeText': Optional[str],
    }
)


GameLiftAlias = TypedDict(
    'GameLiftAlias', {
        'AliasId': Optional[str],
        'NonBlankAndLengthConstraintString': Optional[str],
        'ArnStringModel': Optional[str],
        'FreeText': Optional[str],
        'RoutingStrategy': Optional[GameLiftRoutingStrategy],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


GameLiftCreateAliasOutput = TypedDict(
    'GameLiftCreateAliasOutput', {
        'Alias': Optional[GameLiftAlias],
    }
)


GameLiftS3Location = TypedDict(
    'GameLiftS3Location', {
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
    }
)


GameLiftBuild = TypedDict(
    'GameLiftBuild', {
        'BuildId': Optional[str],
        'FreeText': Optional[str],
        'FreeText': Optional[str],
        'BuildStatus': Optional[str],
        'PositiveLong': Optional[int],
        'OperatingSystem': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


GameLiftAwsCredentials = TypedDict(
    'GameLiftAwsCredentials', {
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
    }
)


GameLiftCreateBuildOutput = TypedDict(
    'GameLiftCreateBuildOutput', {
        'Build': Optional[GameLiftBuild],
        'AwsCredentials': Optional[GameLiftAwsCredentials],
        'S3Location': Optional[GameLiftS3Location],
    }
)


GameLiftIpPermission = TypedDict(
    'GameLiftIpPermission', {
        'PortNumber': int,
        'PortNumber': int,
        'NonBlankString': str,
        'IpProtocol': str,
    }
)


GameLiftServerProcess = TypedDict(
    'GameLiftServerProcess', {
        'NonZeroAndMaxString': str,
        'PositiveInteger': int,
        'NonZeroAndMaxString': Optional[str],
    }
)


GameLiftRuntimeConfiguration = TypedDict(
    'GameLiftRuntimeConfiguration', {
        'ServerProcessList': Optional[List[GameLiftServerProcess]],
        'MaxConcurrentGameSessionActivations': Optional[int],
        'GameSessionActivationTimeoutSeconds': Optional[int],
    }
)


GameLiftResourceCreationLimitPolicy = TypedDict(
    'GameLiftResourceCreationLimitPolicy', {
        'WholeNumber': Optional[int],
        'WholeNumber': Optional[int],
    }
)


GameLiftFleetAttributes = TypedDict(
    'GameLiftFleetAttributes', {
        'FleetId': Optional[str],
        'ArnStringModel': Optional[str],
        'FleetType': Optional[str],
        'EC2InstanceType': Optional[str],
        'NonZeroAndMaxString': Optional[str],
        'NonZeroAndMaxString': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'FleetStatus': Optional[str],
        'BuildId': Optional[str],
        'ScriptId': Optional[str],
        'NonZeroAndMaxString': Optional[str],
        'NonZeroAndMaxString': Optional[str],
        'StringList': Optional[List[str]],
        'ProtectionPolicy': Optional[str],
        'OperatingSystem': Optional[str],
        'ResourceCreationLimitPolicy': Optional[GameLiftResourceCreationLimitPolicy],
        'MetricGroupList': Optional[List[str]],
        'FleetActionList': Optional[List[str]],
        'NonEmptyString': Optional[str],
    }
)


GameLiftCreateFleetOutput = TypedDict(
    'GameLiftCreateFleetOutput', {
        'FleetAttributes': Optional[GameLiftFleetAttributes],
    }
)


GameLiftGameProperty = TypedDict(
    'GameLiftGameProperty', {
        'GamePropertyKey': str,
        'GamePropertyValue': str,
    }
)


GameLiftGameSession = TypedDict(
    'GameLiftGameSession', {
        'NonZeroAndMaxString': Optional[str],
        'NonZeroAndMaxString': Optional[str],
        'FleetId': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'WholeNumber': Optional[int],
        'WholeNumber': Optional[int],
        'GameSessionStatus': Optional[str],
        'GameSessionStatusReason': Optional[str],
        'GamePropertyList': Optional[List[GameLiftGameProperty]],
        'IpAddress': Optional[str],
        'PortNumber': Optional[int],
        'PlayerSessionCreationPolicy': Optional[str],
        'NonZeroAndMaxString': Optional[str],
        'GameSessionData': Optional[str],
        'MatchmakerData': Optional[str],
    }
)


GameLiftCreateGameSessionOutput = TypedDict(
    'GameLiftCreateGameSessionOutput', {
        'GameSession': Optional[GameLiftGameSession],
    }
)


GameLiftPlayerLatencyPolicy = TypedDict(
    'GameLiftPlayerLatencyPolicy', {
        'WholeNumber': Optional[int],
        'WholeNumber': Optional[int],
    }
)


GameLiftGameSessionQueueDestination = TypedDict(
    'GameLiftGameSessionQueueDestination', {
        'ArnStringModel': Optional[str],
    }
)


GameLiftGameSessionQueue = TypedDict(
    'GameLiftGameSessionQueue', {
        'GameSessionQueueName': Optional[str],
        'ArnStringModel': Optional[str],
        'WholeNumber': Optional[int],
        'PlayerLatencyPolicyList': Optional[List[GameLiftPlayerLatencyPolicy]],
        'GameSessionQueueDestinationList': Optional[List[GameLiftGameSessionQueueDestination]],
    }
)


GameLiftCreateGameSessionQueueOutput = TypedDict(
    'GameLiftCreateGameSessionQueueOutput', {
        'GameSessionQueue': Optional[GameLiftGameSessionQueue],
    }
)


GameLiftMatchmakingConfiguration = TypedDict(
    'GameLiftMatchmakingConfiguration', {
        'MatchmakingIdStringModel': Optional[str],
        'NonZeroAndMaxString': Optional[str],
        'QueueArnsList': Optional[List[str]],
        'MatchmakingRequestTimeoutInteger': Optional[int],
        'MatchmakingAcceptanceTimeoutInteger': Optional[int],
        'BooleanModel': Optional[bool],
        'MatchmakingIdStringModel': Optional[str],
        'SnsArnStringModel': Optional[str],
        'WholeNumber': Optional[int],
        'CustomEventData': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'GamePropertyList': Optional[List[GameLiftGameProperty]],
        'GameSessionData': Optional[str],
    }
)


GameLiftCreateMatchmakingConfigurationOutput = TypedDict(
    'GameLiftCreateMatchmakingConfigurationOutput', {
        'MatchmakingConfiguration': Optional[GameLiftMatchmakingConfiguration],
    }
)


GameLiftMatchmakingRuleSet = TypedDict(
    'GameLiftMatchmakingRuleSet', {
        'RuleSetBody': str,
        'MatchmakingIdStringModel': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


GameLiftCreateMatchmakingRuleSetOutput = TypedDict(
    'GameLiftCreateMatchmakingRuleSetOutput', {
        'MatchmakingRuleSet': GameLiftMatchmakingRuleSet,
    }
)


GameLiftPlayerSession = TypedDict(
    'GameLiftPlayerSession', {
        'PlayerSessionId': Optional[str],
        'NonZeroAndMaxString': Optional[str],
        'NonZeroAndMaxString': Optional[str],
        'FleetId': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'PlayerSessionStatus': Optional[str],
        'IpAddress': Optional[str],
        'PortNumber': Optional[int],
        'PlayerData': Optional[str],
    }
)


GameLiftCreatePlayerSessionOutput = TypedDict(
    'GameLiftCreatePlayerSessionOutput', {
        'PlayerSession': Optional[GameLiftPlayerSession],
    }
)


GameLiftCreatePlayerSessionsOutput = TypedDict(
    'GameLiftCreatePlayerSessionsOutput', {
        'PlayerSessionList': Optional[List[GameLiftPlayerSession]],
    }
)


GameLiftScript = TypedDict(
    'GameLiftScript', {
        'ScriptId': Optional[str],
        'NonZeroAndMaxString': Optional[str],
        'NonZeroAndMaxString': Optional[str],
        'PositiveLong': Optional[int],
        'Timestamp': Optional[datetime.datetime],
        'S3Location': Optional[GameLiftS3Location],
    }
)


GameLiftCreateScriptOutput = TypedDict(
    'GameLiftCreateScriptOutput', {
        'Script': Optional[GameLiftScript],
    }
)


GameLiftVpcPeeringAuthorization = TypedDict(
    'GameLiftVpcPeeringAuthorization', {
        'NonZeroAndMaxString': Optional[str],
        'NonZeroAndMaxString': Optional[str],
        'NonZeroAndMaxString': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


GameLiftCreateVpcPeeringAuthorizationOutput = TypedDict(
    'GameLiftCreateVpcPeeringAuthorizationOutput', {
        'VpcPeeringAuthorization': Optional[GameLiftVpcPeeringAuthorization],
    }
)


GameLiftCreateVpcPeeringConnectionOutput = TypedDict(
    'GameLiftCreateVpcPeeringConnectionOutput', {
    }
)


GameLiftDeleteGameSessionQueueOutput = TypedDict(
    'GameLiftDeleteGameSessionQueueOutput', {
    }
)


GameLiftDeleteMatchmakingConfigurationOutput = TypedDict(
    'GameLiftDeleteMatchmakingConfigurationOutput', {
    }
)


GameLiftDeleteMatchmakingRuleSetOutput = TypedDict(
    'GameLiftDeleteMatchmakingRuleSetOutput', {
    }
)


GameLiftDeleteVpcPeeringAuthorizationOutput = TypedDict(
    'GameLiftDeleteVpcPeeringAuthorizationOutput', {
    }
)


GameLiftDeleteVpcPeeringConnectionOutput = TypedDict(
    'GameLiftDeleteVpcPeeringConnectionOutput', {
    }
)


GameLiftDescribeAliasOutput = TypedDict(
    'GameLiftDescribeAliasOutput', {
        'Alias': Optional[GameLiftAlias],
    }
)


GameLiftDescribeBuildOutput = TypedDict(
    'GameLiftDescribeBuildOutput', {
        'Build': Optional[GameLiftBuild],
    }
)


GameLiftEC2InstanceLimit = TypedDict(
    'GameLiftEC2InstanceLimit', {
        'EC2InstanceType': Optional[str],
        'WholeNumber': Optional[int],
        'WholeNumber': Optional[int],
    }
)


GameLiftDescribeEC2InstanceLimitsOutput = TypedDict(
    'GameLiftDescribeEC2InstanceLimitsOutput', {
        'EC2InstanceLimitList': Optional[List[GameLiftEC2InstanceLimit]],
    }
)


GameLiftDescribeFleetAttributesOutput = TypedDict(
    'GameLiftDescribeFleetAttributesOutput', {
        'FleetAttributesList': Optional[List[GameLiftFleetAttributes]],
        'NonZeroAndMaxString': Optional[str],
    }
)


GameLiftEC2InstanceCounts = TypedDict(
    'GameLiftEC2InstanceCounts', {
        'WholeNumber': Optional[int],
        'WholeNumber': Optional[int],
        'WholeNumber': Optional[int],
        'WholeNumber': Optional[int],
        'WholeNumber': Optional[int],
        'WholeNumber': Optional[int],
        'WholeNumber': Optional[int],
    }
)


GameLiftFleetCapacity = TypedDict(
    'GameLiftFleetCapacity', {
        'FleetId': Optional[str],
        'EC2InstanceType': Optional[str],
        'EC2InstanceCounts': Optional[GameLiftEC2InstanceCounts],
    }
)


GameLiftDescribeFleetCapacityOutput = TypedDict(
    'GameLiftDescribeFleetCapacityOutput', {
        'FleetCapacityList': Optional[List[GameLiftFleetCapacity]],
        'NonZeroAndMaxString': Optional[str],
    }
)


GameLiftEvent = TypedDict(
    'GameLiftEvent', {
        'NonZeroAndMaxString': Optional[str],
        'NonZeroAndMaxString': Optional[str],
        'EventCode': Optional[str],
        'NonEmptyString': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'NonZeroAndMaxString': Optional[str],
    }
)


GameLiftDescribeFleetEventsOutput = TypedDict(
    'GameLiftDescribeFleetEventsOutput', {
        'EventList': Optional[List[GameLiftEvent]],
        'NonZeroAndMaxString': Optional[str],
    }
)


GameLiftDescribeFleetPortSettingsOutput = TypedDict(
    'GameLiftDescribeFleetPortSettingsOutput', {
        'IpPermissionsList': Optional[List[GameLiftIpPermission]],
    }
)


GameLiftFleetUtilization = TypedDict(
    'GameLiftFleetUtilization', {
        'FleetId': Optional[str],
        'WholeNumber': Optional[int],
        'WholeNumber': Optional[int],
        'WholeNumber': Optional[int],
        'WholeNumber': Optional[int],
    }
)


GameLiftDescribeFleetUtilizationOutput = TypedDict(
    'GameLiftDescribeFleetUtilizationOutput', {
        'FleetUtilizationList': Optional[List[GameLiftFleetUtilization]],
        'NonZeroAndMaxString': Optional[str],
    }
)


GameLiftGameSessionDetail = TypedDict(
    'GameLiftGameSessionDetail', {
        'GameSession': Optional[GameLiftGameSession],
        'ProtectionPolicy': Optional[str],
    }
)


GameLiftDescribeGameSessionDetailsOutput = TypedDict(
    'GameLiftDescribeGameSessionDetailsOutput', {
        'GameSessionDetailList': Optional[List[GameLiftGameSessionDetail]],
        'NonZeroAndMaxString': Optional[str],
    }
)


GameLiftPlayerLatency = TypedDict(
    'GameLiftPlayerLatency', {
        'NonZeroAndMaxString': Optional[str],
        'NonZeroAndMaxString': Optional[str],
        'Float': Optional[float],
    }
)


GameLiftPlacedPlayerSession = TypedDict(
    'GameLiftPlacedPlayerSession', {
        'NonZeroAndMaxString': Optional[str],
        'PlayerSessionId': Optional[str],
    }
)


GameLiftGameSessionPlacement = TypedDict(
    'GameLiftGameSessionPlacement', {
        'IdStringModel': Optional[str],
        'GameSessionQueueName': Optional[str],
        'GameSessionPlacementState': Optional[str],
        'GamePropertyList': Optional[List[GameLiftGameProperty]],
        'WholeNumber': Optional[int],
        'NonZeroAndMaxString': Optional[str],
        'NonZeroAndMaxString': Optional[str],
        'NonZeroAndMaxString': Optional[str],
        'NonZeroAndMaxString': Optional[str],
        'PlayerLatencyList': Optional[List[GameLiftPlayerLatency]],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'IpAddress': Optional[str],
        'PortNumber': Optional[int],
        'PlacedPlayerSessionList': Optional[List[GameLiftPlacedPlayerSession]],
        'GameSessionData': Optional[str],
        'MatchmakerData': Optional[str],
    }
)


GameLiftDescribeGameSessionPlacementOutput = TypedDict(
    'GameLiftDescribeGameSessionPlacementOutput', {
        'GameSessionPlacement': Optional[GameLiftGameSessionPlacement],
    }
)


GameLiftDescribeGameSessionQueuesOutput = TypedDict(
    'GameLiftDescribeGameSessionQueuesOutput', {
        'GameSessionQueueList': Optional[List[GameLiftGameSessionQueue]],
        'NonZeroAndMaxString': Optional[str],
    }
)


GameLiftDescribeGameSessionsOutput = TypedDict(
    'GameLiftDescribeGameSessionsOutput', {
        'GameSessionList': Optional[List[GameLiftGameSession]],
        'NonZeroAndMaxString': Optional[str],
    }
)


GameLiftInstance = TypedDict(
    'GameLiftInstance', {
        'FleetId': Optional[str],
        'InstanceId': Optional[str],
        'IpAddress': Optional[str],
        'OperatingSystem': Optional[str],
        'EC2InstanceType': Optional[str],
        'InstanceStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


GameLiftDescribeInstancesOutput = TypedDict(
    'GameLiftDescribeInstancesOutput', {
        'InstanceList': Optional[List[GameLiftInstance]],
        'NonZeroAndMaxString': Optional[str],
    }
)


GameLiftAttributeValue = TypedDict(
    'GameLiftAttributeValue', {
        'NonZeroAndMaxString': Optional[str],
        'DoubleObject': Optional[float],
        'StringList': Optional[List[str]],
        'StringDoubleMap': Optional[Dict[str, float]],
    }
)


GameLiftPlayer = TypedDict(
    'GameLiftPlayer', {
        'NonZeroAndMaxString': Optional[str],
        'PlayerAttributeMap': Optional[Dict[str, GameLiftAttributeValue]],
        'NonZeroAndMaxString': Optional[str],
        'LatencyMap': Optional[Dict[str, int]],
    }
)


GameLiftMatchedPlayerSession = TypedDict(
    'GameLiftMatchedPlayerSession', {
        'NonZeroAndMaxString': Optional[str],
        'PlayerSessionId': Optional[str],
    }
)


GameLiftGameSessionConnectionInfo = TypedDict(
    'GameLiftGameSessionConnectionInfo', {
        'ArnStringModel': Optional[str],
        'StringModel': Optional[str],
        'PositiveInteger': Optional[int],
        'MatchedPlayerSessionList': Optional[List[GameLiftMatchedPlayerSession]],
    }
)


GameLiftMatchmakingTicket = TypedDict(
    'GameLiftMatchmakingTicket', {
        'MatchmakingIdStringModel': Optional[str],
        'MatchmakingIdStringModel': Optional[str],
        'MatchmakingConfigurationStatus': Optional[str],
        'StringModel': Optional[str],
        'StringModel': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'PlayerList': Optional[List[GameLiftPlayer]],
        'GameSessionConnectionInfo': Optional[GameLiftGameSessionConnectionInfo],
        'WholeNumber': Optional[int],
    }
)


GameLiftDescribeMatchmakingOutput = TypedDict(
    'GameLiftDescribeMatchmakingOutput', {
        'MatchmakingTicketList': Optional[List[GameLiftMatchmakingTicket]],
    }
)


GameLiftDescribeMatchmakingConfigurationsOutput = TypedDict(
    'GameLiftDescribeMatchmakingConfigurationsOutput', {
        'MatchmakingConfigurationList': Optional[List[GameLiftMatchmakingConfiguration]],
        'NonZeroAndMaxString': Optional[str],
    }
)


GameLiftDescribeMatchmakingRuleSetsOutput = TypedDict(
    'GameLiftDescribeMatchmakingRuleSetsOutput', {
        'MatchmakingRuleSetList': List[GameLiftMatchmakingRuleSet],
        'NonZeroAndMaxString': Optional[str],
    }
)


GameLiftDescribePlayerSessionsOutput = TypedDict(
    'GameLiftDescribePlayerSessionsOutput', {
        'PlayerSessionList': Optional[List[GameLiftPlayerSession]],
        'NonZeroAndMaxString': Optional[str],
    }
)


GameLiftDescribeRuntimeConfigurationOutput = TypedDict(
    'GameLiftDescribeRuntimeConfigurationOutput', {
        'RuntimeConfiguration': Optional[GameLiftRuntimeConfiguration],
    }
)


GameLiftTargetConfiguration = TypedDict(
    'GameLiftTargetConfiguration', {
        'Double': float,
    }
)


GameLiftScalingPolicy = TypedDict(
    'GameLiftScalingPolicy', {
        'FleetId': Optional[str],
        'NonZeroAndMaxString': Optional[str],
        'ScalingStatusType': Optional[str],
        'Integer': Optional[int],
        'ScalingAdjustmentType': Optional[str],
        'ComparisonOperatorType': Optional[str],
        'Double': Optional[float],
        'PositiveInteger': Optional[int],
        'MetricName': Optional[str],
        'PolicyType': Optional[str],
        'TargetConfiguration': Optional[GameLiftTargetConfiguration],
    }
)


GameLiftDescribeScalingPoliciesOutput = TypedDict(
    'GameLiftDescribeScalingPoliciesOutput', {
        'ScalingPolicyList': Optional[List[GameLiftScalingPolicy]],
        'NonZeroAndMaxString': Optional[str],
    }
)


GameLiftDescribeScriptOutput = TypedDict(
    'GameLiftDescribeScriptOutput', {
        'Script': Optional[GameLiftScript],
    }
)


GameLiftDescribeVpcPeeringAuthorizationsOutput = TypedDict(
    'GameLiftDescribeVpcPeeringAuthorizationsOutput', {
        'VpcPeeringAuthorizationList': Optional[List[GameLiftVpcPeeringAuthorization]],
    }
)


GameLiftVpcPeeringConnectionStatus = TypedDict(
    'GameLiftVpcPeeringConnectionStatus', {
        'NonZeroAndMaxString': Optional[str],
        'NonZeroAndMaxString': Optional[str],
    }
)


GameLiftVpcPeeringConnection = TypedDict(
    'GameLiftVpcPeeringConnection', {
        'FleetId': Optional[str],
        'NonZeroAndMaxString': Optional[str],
        'NonZeroAndMaxString': Optional[str],
        'VpcPeeringConnectionStatus': Optional[GameLiftVpcPeeringConnectionStatus],
        'NonZeroAndMaxString': Optional[str],
        'NonZeroAndMaxString': Optional[str],
    }
)


GameLiftDescribeVpcPeeringConnectionsOutput = TypedDict(
    'GameLiftDescribeVpcPeeringConnectionsOutput', {
        'VpcPeeringConnectionList': Optional[List[GameLiftVpcPeeringConnection]],
    }
)


GameLiftGetGameSessionLogUrlOutput = TypedDict(
    'GameLiftGetGameSessionLogUrlOutput', {
        'NonZeroAndMaxString': Optional[str],
    }
)


GameLiftInstanceCredentials = TypedDict(
    'GameLiftInstanceCredentials', {
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
    }
)


GameLiftInstanceAccess = TypedDict(
    'GameLiftInstanceAccess', {
        'FleetId': Optional[str],
        'InstanceId': Optional[str],
        'IpAddress': Optional[str],
        'OperatingSystem': Optional[str],
        'InstanceCredentials': Optional[GameLiftInstanceCredentials],
    }
)


GameLiftGetInstanceAccessOutput = TypedDict(
    'GameLiftGetInstanceAccessOutput', {
        'InstanceAccess': Optional[GameLiftInstanceAccess],
    }
)


GameLiftListAliasesOutput = TypedDict(
    'GameLiftListAliasesOutput', {
        'AliasList': Optional[List[GameLiftAlias]],
        'NonEmptyString': Optional[str],
    }
)


GameLiftListBuildsOutput = TypedDict(
    'GameLiftListBuildsOutput', {
        'BuildList': Optional[List[GameLiftBuild]],
        'NonEmptyString': Optional[str],
    }
)


GameLiftListFleetsOutput = TypedDict(
    'GameLiftListFleetsOutput', {
        'FleetIdList': Optional[List[str]],
        'NonZeroAndMaxString': Optional[str],
    }
)


GameLiftListScriptsOutput = TypedDict(
    'GameLiftListScriptsOutput', {
        'ScriptList': Optional[List[GameLiftScript]],
        'NonEmptyString': Optional[str],
    }
)


GameLiftPutScalingPolicyOutput = TypedDict(
    'GameLiftPutScalingPolicyOutput', {
        'NonZeroAndMaxString': Optional[str],
    }
)


GameLiftRequestUploadCredentialsOutput = TypedDict(
    'GameLiftRequestUploadCredentialsOutput', {
        'AwsCredentials': Optional[GameLiftAwsCredentials],
        'S3Location': Optional[GameLiftS3Location],
    }
)


GameLiftResolveAliasOutput = TypedDict(
    'GameLiftResolveAliasOutput', {
        'FleetId': Optional[str],
    }
)


GameLiftSearchGameSessionsOutput = TypedDict(
    'GameLiftSearchGameSessionsOutput', {
        'GameSessionList': Optional[List[GameLiftGameSession]],
        'NonZeroAndMaxString': Optional[str],
    }
)


GameLiftStartFleetActionsOutput = TypedDict(
    'GameLiftStartFleetActionsOutput', {
    }
)


GameLiftDesiredPlayerSession = TypedDict(
    'GameLiftDesiredPlayerSession', {
        'NonZeroAndMaxString': Optional[str],
        'PlayerData': Optional[str],
    }
)


GameLiftStartGameSessionPlacementOutput = TypedDict(
    'GameLiftStartGameSessionPlacementOutput', {
        'GameSessionPlacement': Optional[GameLiftGameSessionPlacement],
    }
)


GameLiftStartMatchBackfillOutput = TypedDict(
    'GameLiftStartMatchBackfillOutput', {
        'MatchmakingTicket': Optional[GameLiftMatchmakingTicket],
    }
)


GameLiftStartMatchmakingOutput = TypedDict(
    'GameLiftStartMatchmakingOutput', {
        'MatchmakingTicket': Optional[GameLiftMatchmakingTicket],
    }
)


GameLiftStopFleetActionsOutput = TypedDict(
    'GameLiftStopFleetActionsOutput', {
    }
)


GameLiftStopGameSessionPlacementOutput = TypedDict(
    'GameLiftStopGameSessionPlacementOutput', {
        'GameSessionPlacement': Optional[GameLiftGameSessionPlacement],
    }
)


GameLiftStopMatchmakingOutput = TypedDict(
    'GameLiftStopMatchmakingOutput', {
    }
)


GameLiftUpdateAliasOutput = TypedDict(
    'GameLiftUpdateAliasOutput', {
        'Alias': Optional[GameLiftAlias],
    }
)


GameLiftUpdateBuildOutput = TypedDict(
    'GameLiftUpdateBuildOutput', {
        'Build': Optional[GameLiftBuild],
    }
)


GameLiftUpdateFleetAttributesOutput = TypedDict(
    'GameLiftUpdateFleetAttributesOutput', {
        'FleetId': Optional[str],
    }
)


GameLiftUpdateFleetCapacityOutput = TypedDict(
    'GameLiftUpdateFleetCapacityOutput', {
        'FleetId': Optional[str],
    }
)


GameLiftUpdateFleetPortSettingsOutput = TypedDict(
    'GameLiftUpdateFleetPortSettingsOutput', {
        'FleetId': Optional[str],
    }
)


GameLiftUpdateGameSessionOutput = TypedDict(
    'GameLiftUpdateGameSessionOutput', {
        'GameSession': Optional[GameLiftGameSession],
    }
)


GameLiftUpdateGameSessionQueueOutput = TypedDict(
    'GameLiftUpdateGameSessionQueueOutput', {
        'GameSessionQueue': Optional[GameLiftGameSessionQueue],
    }
)


GameLiftUpdateMatchmakingConfigurationOutput = TypedDict(
    'GameLiftUpdateMatchmakingConfigurationOutput', {
        'MatchmakingConfiguration': Optional[GameLiftMatchmakingConfiguration],
    }
)


GameLiftUpdateRuntimeConfigurationOutput = TypedDict(
    'GameLiftUpdateRuntimeConfigurationOutput', {
        'RuntimeConfiguration': Optional[GameLiftRuntimeConfiguration],
    }
)


GameLiftUpdateScriptOutput = TypedDict(
    'GameLiftUpdateScriptOutput', {
        'Script': Optional[GameLiftScript],
    }
)


GameLiftValidateMatchmakingRuleSetOutput = TypedDict(
    'GameLiftValidateMatchmakingRuleSetOutput', {
        'BooleanModel': Optional[bool],
    }
)


class Glacier(BaseClient):
    def abort_multipart_upload(self, *,
        accountId: str,
        vaultName: str,
        uploadId: str
    ): ...

    def abort_vault_lock(self, *,
        accountId: str,
        vaultName: str
    ): ...

    def add_tags_to_vault(self, *,
        accountId: str,
        vaultName: str,
        Tags: Dict[str, str] = ...
    ): ...

    def complete_multipart_upload(self, *,
        accountId: str,
        vaultName: str,
        uploadId: str,
        archiveSize: str = ...,
        checksum: str = ...
    ) -> GlacierArchiveCreationOutput: ...

    def complete_vault_lock(self, *,
        accountId: str,
        vaultName: str,
        lockId: str
    ): ...

    def create_vault(self, *,
        accountId: str,
        vaultName: str
    ) -> GlacierCreateVaultOutput: ...

    def delete_archive(self, *,
        accountId: str,
        vaultName: str,
        archiveId: str
    ): ...

    def delete_vault(self, *,
        accountId: str,
        vaultName: str
    ): ...

    def delete_vault_access_policy(self, *,
        accountId: str,
        vaultName: str
    ): ...

    def delete_vault_notifications(self, *,
        accountId: str,
        vaultName: str
    ): ...

    def describe_job(self, *,
        accountId: str,
        vaultName: str,
        jobId: str
    ) -> GlacierGlacierJobDescription: ...

    def describe_vault(self, *,
        accountId: str,
        vaultName: str
    ) -> GlacierDescribeVaultOutput: ...

    def get_data_retrieval_policy(self, *,
        accountId: str
    ) -> GlacierGetDataRetrievalPolicyOutput: ...

    def get_job_output(self, *,
        accountId: str,
        vaultName: str,
        jobId: str,
        range: str = ...
    ) -> GlacierGetJobOutputOutput: ...

    def get_vault_access_policy(self, *,
        accountId: str,
        vaultName: str
    ) -> GlacierGetVaultAccessPolicyOutput: ...

    def get_vault_lock(self, *,
        accountId: str,
        vaultName: str
    ) -> GlacierGetVaultLockOutput: ...

    def get_vault_notifications(self, *,
        accountId: str,
        vaultName: str
    ) -> GlacierGetVaultNotificationsOutput: ...

    def initiate_job(self, *,
        accountId: str,
        vaultName: str,
        jobParameters: GlacierJobParameters = ...
    ) -> GlacierInitiateJobOutput: ...

    def initiate_multipart_upload(self, *,
        accountId: str,
        vaultName: str,
        archiveDescription: str = ...,
        partSize: str = ...
    ) -> GlacierInitiateMultipartUploadOutput: ...

    def initiate_vault_lock(self, *,
        accountId: str,
        vaultName: str,
        policy: GlacierVaultLockPolicy = ...
    ) -> GlacierInitiateVaultLockOutput: ...

    def list_jobs(self, *,
        accountId: str,
        vaultName: str,
        limit: str = ...,
        marker: str = ...,
        statuscode: str = ...,
        completed: str = ...
    ) -> GlacierListJobsOutput: ...

    def list_multipart_uploads(self, *,
        accountId: str,
        vaultName: str,
        marker: str = ...,
        limit: str = ...
    ) -> GlacierListMultipartUploadsOutput: ...

    def list_parts(self, *,
        accountId: str,
        vaultName: str,
        uploadId: str,
        marker: str = ...,
        limit: str = ...
    ) -> GlacierListPartsOutput: ...

    def list_provisioned_capacity(self, *,
        accountId: str
    ) -> GlacierListProvisionedCapacityOutput: ...

    def list_tags_for_vault(self, *,
        accountId: str,
        vaultName: str
    ) -> GlacierListTagsForVaultOutput: ...

    def list_vaults(self, *,
        accountId: str,
        marker: str = ...,
        limit: str = ...
    ) -> GlacierListVaultsOutput: ...

    def purchase_provisioned_capacity(self, *,
        accountId: str
    ) -> GlacierPurchaseProvisionedCapacityOutput: ...

    def remove_tags_from_vault(self, *,
        accountId: str,
        vaultName: str,
        TagKeys: List[str] = ...
    ): ...

    def set_data_retrieval_policy(self, *,
        accountId: str,
        Policy: GlacierDataRetrievalPolicy = ...
    ): ...

    def set_vault_access_policy(self, *,
        accountId: str,
        vaultName: str,
        policy: GlacierVaultAccessPolicy = ...
    ): ...

    def set_vault_notifications(self, *,
        accountId: str,
        vaultName: str,
        vaultNotificationConfig: GlacierVaultNotificationConfig = ...
    ): ...

    def upload_archive(self, *,
        vaultName: str,
        accountId: str,
        archiveDescription: str = ...,
        checksum: str = ...,
        body: bytes = ...
    ) -> GlacierArchiveCreationOutput: ...

    def upload_multipart_part(self, *,
        accountId: str,
        vaultName: str,
        uploadId: str,
        checksum: str = ...,
        range: str = ...,
        body: bytes = ...
    ) -> GlacierUploadMultipartPartOutput: ...


GlacierArchiveCreationOutput = TypedDict(
    'GlacierArchiveCreationOutput', {
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
    }
)


GlacierCreateVaultOutput = TypedDict(
    'GlacierCreateVaultOutput', {
        'string': Optional[str],
    }
)


GlacierInventoryRetrievalJobDescription = TypedDict(
    'GlacierInventoryRetrievalJobDescription', {
        'string': Optional[str],
        'DateTime': Optional[str],
        'DateTime': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
    }
)


GlacierCSVInput = TypedDict(
    'GlacierCSVInput', {
        'FileHeaderInfo': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
    }
)


GlacierInputSerialization = TypedDict(
    'GlacierInputSerialization', {
        'CSVInput': Optional[GlacierCSVInput],
    }
)


GlacierCSVOutput = TypedDict(
    'GlacierCSVOutput', {
        'QuoteFields': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
    }
)


GlacierOutputSerialization = TypedDict(
    'GlacierOutputSerialization', {
        'CSVOutput': Optional[GlacierCSVOutput],
    }
)


GlacierSelectParameters = TypedDict(
    'GlacierSelectParameters', {
        'InputSerialization': Optional[GlacierInputSerialization],
        'ExpressionType': Optional[str],
        'string': Optional[str],
        'OutputSerialization': Optional[GlacierOutputSerialization],
    }
)


GlacierEncryption = TypedDict(
    'GlacierEncryption', {
        'EncryptionType': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
    }
)


GlacierGrantee = TypedDict(
    'GlacierGrantee', {
        'Type': str,
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
    }
)


GlacierGrant = TypedDict(
    'GlacierGrant', {
        'Grantee': Optional[GlacierGrantee],
        'Permission': Optional[str],
    }
)


GlacierS3Location = TypedDict(
    'GlacierS3Location', {
        'string': Optional[str],
        'string': Optional[str],
        'Encryption': Optional[GlacierEncryption],
        'CannedACL': Optional[str],
        'AccessControlPolicyList': Optional[List[GlacierGrant]],
        'hashmap': Optional[Dict[str, str]],
        'hashmap': Optional[Dict[str, str]],
        'StorageClass': Optional[str],
    }
)


GlacierOutputLocation = TypedDict(
    'GlacierOutputLocation', {
        'S3Location': Optional[GlacierS3Location],
    }
)


GlacierGlacierJobDescription = TypedDict(
    'GlacierGlacierJobDescription', {
        'string': Optional[str],
        'string': Optional[str],
        'ActionCode': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'boolean': Optional[bool],
        'StatusCode': Optional[str],
        'string': Optional[str],
        'Size': Optional[int],
        'Size': Optional[int],
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'InventoryRetrievalJobDescription': Optional[GlacierInventoryRetrievalJobDescription],
        'string': Optional[str],
        'SelectParameters': Optional[GlacierSelectParameters],
        'OutputLocation': Optional[GlacierOutputLocation],
    }
)


GlacierDescribeVaultOutput = TypedDict(
    'GlacierDescribeVaultOutput', {
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'long': Optional[int],
        'long': Optional[int],
    }
)


GlacierDataRetrievalRule = TypedDict(
    'GlacierDataRetrievalRule', {
        'string': Optional[str],
        'NullableLong': Optional[int],
    }
)


GlacierDataRetrievalPolicy = TypedDict(
    'GlacierDataRetrievalPolicy', {
        'DataRetrievalRulesList': Optional[List[GlacierDataRetrievalRule]],
    }
)


GlacierGetDataRetrievalPolicyOutput = TypedDict(
    'GlacierGetDataRetrievalPolicyOutput', {
        'DataRetrievalPolicy': Optional[GlacierDataRetrievalPolicy],
    }
)


GlacierGetJobOutputOutput = TypedDict(
    'GlacierGetJobOutputOutput', {
        'Stream': Optional[bytes],
        'string': Optional[str],
        'httpstatus': Optional[int],
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
    }
)


GlacierVaultAccessPolicy = TypedDict(
    'GlacierVaultAccessPolicy', {
        'string': Optional[str],
    }
)


GlacierGetVaultAccessPolicyOutput = TypedDict(
    'GlacierGetVaultAccessPolicyOutput', {
        'VaultAccessPolicy': Optional[GlacierVaultAccessPolicy],
    }
)


GlacierGetVaultLockOutput = TypedDict(
    'GlacierGetVaultLockOutput', {
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
    }
)


GlacierVaultNotificationConfig = TypedDict(
    'GlacierVaultNotificationConfig', {
        'string': Optional[str],
        'NotificationEventList': Optional[List[str]],
    }
)


GlacierGetVaultNotificationsOutput = TypedDict(
    'GlacierGetVaultNotificationsOutput', {
        'VaultNotificationConfig': Optional[GlacierVaultNotificationConfig],
    }
)


GlacierInventoryRetrievalJobInput = TypedDict(
    'GlacierInventoryRetrievalJobInput', {
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
    }
)


GlacierJobParameters = TypedDict(
    'GlacierJobParameters', {
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'InventoryRetrievalJobInput': Optional[GlacierInventoryRetrievalJobInput],
        'SelectParameters': Optional[GlacierSelectParameters],
        'OutputLocation': Optional[GlacierOutputLocation],
    }
)


GlacierInitiateJobOutput = TypedDict(
    'GlacierInitiateJobOutput', {
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
    }
)


GlacierInitiateMultipartUploadOutput = TypedDict(
    'GlacierInitiateMultipartUploadOutput', {
        'string': Optional[str],
        'string': Optional[str],
    }
)


GlacierVaultLockPolicy = TypedDict(
    'GlacierVaultLockPolicy', {
        'string': Optional[str],
    }
)


GlacierInitiateVaultLockOutput = TypedDict(
    'GlacierInitiateVaultLockOutput', {
        'string': Optional[str],
    }
)


GlacierListJobsOutput = TypedDict(
    'GlacierListJobsOutput', {
        'JobList': Optional[List[GlacierGlacierJobDescription]],
        'string': Optional[str],
    }
)


GlacierUploadListElement = TypedDict(
    'GlacierUploadListElement', {
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'long': Optional[int],
        'string': Optional[str],
    }
)


GlacierListMultipartUploadsOutput = TypedDict(
    'GlacierListMultipartUploadsOutput', {
        'UploadsList': Optional[List[GlacierUploadListElement]],
        'string': Optional[str],
    }
)


GlacierPartListElement = TypedDict(
    'GlacierPartListElement', {
        'string': Optional[str],
        'string': Optional[str],
    }
)


GlacierListPartsOutput = TypedDict(
    'GlacierListPartsOutput', {
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'long': Optional[int],
        'string': Optional[str],
        'PartList': Optional[List[GlacierPartListElement]],
        'string': Optional[str],
    }
)


GlacierProvisionedCapacityDescription = TypedDict(
    'GlacierProvisionedCapacityDescription', {
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
    }
)


GlacierListProvisionedCapacityOutput = TypedDict(
    'GlacierListProvisionedCapacityOutput', {
        'ProvisionedCapacityList': Optional[List[GlacierProvisionedCapacityDescription]],
    }
)


GlacierListTagsForVaultOutput = TypedDict(
    'GlacierListTagsForVaultOutput', {
        'TagMap': Optional[Dict[str, str]],
    }
)


GlacierListVaultsOutput = TypedDict(
    'GlacierListVaultsOutput', {
        'VaultList': Optional[List[GlacierDescribeVaultOutput]],
        'string': Optional[str],
    }
)


GlacierPurchaseProvisionedCapacityOutput = TypedDict(
    'GlacierPurchaseProvisionedCapacityOutput', {
        'string': Optional[str],
    }
)


GlacierUploadMultipartPartOutput = TypedDict(
    'GlacierUploadMultipartPartOutput', {
        'string': Optional[str],
    }
)


class GlobalAccelerator(BaseClient):
    def create_accelerator(self, *,
        Name: str,
        IdempotencyToken: str,
        IpAddressType: str = ...,
        Enabled: bool = ...
    ) -> GlobalAcceleratorCreateAcceleratorResponse: ...

    def create_endpoint_group(self, *,
        ListenerArn: str,
        EndpointGroupRegion: str,
        IdempotencyToken: str,
        EndpointConfigurations: List[GlobalAcceleratorEndpointConfiguration] = ...,
        TrafficDialPercentage: float = ...,
        HealthCheckPort: int = ...,
        HealthCheckProtocol: str = ...,
        HealthCheckPath: str = ...,
        HealthCheckIntervalSeconds: int = ...,
        ThresholdCount: int = ...
    ) -> GlobalAcceleratorCreateEndpointGroupResponse: ...

    def create_listener(self, *,
        AcceleratorArn: str,
        PortRanges: List[GlobalAcceleratorPortRange],
        Protocol: str,
        IdempotencyToken: str,
        ClientAffinity: str = ...
    ) -> GlobalAcceleratorCreateListenerResponse: ...

    def delete_accelerator(self, *,
        AcceleratorArn: str
    ): ...

    def delete_endpoint_group(self, *,
        EndpointGroupArn: str
    ): ...

    def delete_listener(self, *,
        ListenerArn: str
    ): ...

    def describe_accelerator(self, *,
        AcceleratorArn: str
    ) -> GlobalAcceleratorDescribeAcceleratorResponse: ...

    def describe_accelerator_attributes(self, *,
        AcceleratorArn: str = ...
    ) -> GlobalAcceleratorDescribeAcceleratorAttributesResponse: ...

    def describe_endpoint_group(self, *,
        EndpointGroupArn: str
    ) -> GlobalAcceleratorDescribeEndpointGroupResponse: ...

    def describe_listener(self, *,
        ListenerArn: str
    ) -> GlobalAcceleratorDescribeListenerResponse: ...

    def list_accelerators(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> GlobalAcceleratorListAcceleratorsResponse: ...

    def list_endpoint_groups(self, *,
        ListenerArn: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> GlobalAcceleratorListEndpointGroupsResponse: ...

    def list_listeners(self, *,
        AcceleratorArn: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> GlobalAcceleratorListListenersResponse: ...

    def update_accelerator(self, *,
        AcceleratorArn: str,
        Name: str = ...,
        IpAddressType: str = ...,
        Enabled: bool = ...
    ) -> GlobalAcceleratorUpdateAcceleratorResponse: ...

    def update_accelerator_attributes(self, *,
        AcceleratorArn: str = ...,
        FlowLogsEnabled: bool = ...,
        FlowLogsS3Bucket: str = ...,
        FlowLogsS3Prefix: str = ...
    ) -> GlobalAcceleratorUpdateAcceleratorAttributesResponse: ...

    def update_endpoint_group(self, *,
        EndpointGroupArn: str,
        EndpointConfigurations: List[GlobalAcceleratorEndpointConfiguration] = ...,
        TrafficDialPercentage: float = ...,
        HealthCheckPort: int = ...,
        HealthCheckProtocol: str = ...,
        HealthCheckPath: str = ...,
        HealthCheckIntervalSeconds: int = ...,
        ThresholdCount: int = ...
    ) -> GlobalAcceleratorUpdateEndpointGroupResponse: ...

    def update_listener(self, *,
        ListenerArn: str,
        PortRanges: List[GlobalAcceleratorPortRange] = ...,
        Protocol: str = ...,
        ClientAffinity: str = ...
    ) -> GlobalAcceleratorUpdateListenerResponse: ...


GlobalAcceleratorIpSet = TypedDict(
    'GlobalAcceleratorIpSet', {
        'GenericString': Optional[str],
        'IpAddresses': Optional[List[str]],
    }
)


GlobalAcceleratorAccelerator = TypedDict(
    'GlobalAcceleratorAccelerator', {
        'GenericString': Optional[str],
        'GenericString': Optional[str],
        'IpAddressType': Optional[str],
        'GenericBoolean': Optional[bool],
        'IpSets': Optional[List[GlobalAcceleratorIpSet]],
        'AcceleratorStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


GlobalAcceleratorCreateAcceleratorResponse = TypedDict(
    'GlobalAcceleratorCreateAcceleratorResponse', {
        'Accelerator': Optional[GlobalAcceleratorAccelerator],
    }
)


GlobalAcceleratorEndpointConfiguration = TypedDict(
    'GlobalAcceleratorEndpointConfiguration', {
        'GenericString': Optional[str],
        'EndpointWeight': Optional[int],
    }
)


GlobalAcceleratorEndpointDescription = TypedDict(
    'GlobalAcceleratorEndpointDescription', {
        'GenericString': Optional[str],
        'EndpointWeight': Optional[int],
        'HealthState': Optional[str],
        'GenericString': Optional[str],
    }
)


GlobalAcceleratorEndpointGroup = TypedDict(
    'GlobalAcceleratorEndpointGroup', {
        'GenericString': Optional[str],
        'GenericString': Optional[str],
        'EndpointDescriptions': Optional[List[GlobalAcceleratorEndpointDescription]],
        'TrafficDialPercentage': Optional[float],
        'HealthCheckPort': Optional[int],
        'HealthCheckProtocol': Optional[str],
        'GenericString': Optional[str],
        'HealthCheckIntervalSeconds': Optional[int],
        'ThresholdCount': Optional[int],
    }
)


GlobalAcceleratorCreateEndpointGroupResponse = TypedDict(
    'GlobalAcceleratorCreateEndpointGroupResponse', {
        'EndpointGroup': Optional[GlobalAcceleratorEndpointGroup],
    }
)


GlobalAcceleratorPortRange = TypedDict(
    'GlobalAcceleratorPortRange', {
        'PortNumber': Optional[int],
        'PortNumber': Optional[int],
    }
)


GlobalAcceleratorListener = TypedDict(
    'GlobalAcceleratorListener', {
        'GenericString': Optional[str],
        'PortRanges': Optional[List[GlobalAcceleratorPortRange]],
        'Protocol': Optional[str],
        'ClientAffinity': Optional[str],
    }
)


GlobalAcceleratorCreateListenerResponse = TypedDict(
    'GlobalAcceleratorCreateListenerResponse', {
        'Listener': Optional[GlobalAcceleratorListener],
    }
)


GlobalAcceleratorDescribeAcceleratorResponse = TypedDict(
    'GlobalAcceleratorDescribeAcceleratorResponse', {
        'Accelerator': Optional[GlobalAcceleratorAccelerator],
    }
)


GlobalAcceleratorAcceleratorAttributes = TypedDict(
    'GlobalAcceleratorAcceleratorAttributes', {
        'GenericBoolean': Optional[bool],
        'GenericString': Optional[str],
        'GenericString': Optional[str],
    }
)


GlobalAcceleratorDescribeAcceleratorAttributesResponse = TypedDict(
    'GlobalAcceleratorDescribeAcceleratorAttributesResponse', {
        'AcceleratorAttributes': Optional[GlobalAcceleratorAcceleratorAttributes],
    }
)


GlobalAcceleratorDescribeEndpointGroupResponse = TypedDict(
    'GlobalAcceleratorDescribeEndpointGroupResponse', {
        'EndpointGroup': Optional[GlobalAcceleratorEndpointGroup],
    }
)


GlobalAcceleratorDescribeListenerResponse = TypedDict(
    'GlobalAcceleratorDescribeListenerResponse', {
        'Listener': Optional[GlobalAcceleratorListener],
    }
)


GlobalAcceleratorListAcceleratorsResponse = TypedDict(
    'GlobalAcceleratorListAcceleratorsResponse', {
        'Accelerators': Optional[List[GlobalAcceleratorAccelerator]],
        'GenericString': Optional[str],
    }
)


GlobalAcceleratorListEndpointGroupsResponse = TypedDict(
    'GlobalAcceleratorListEndpointGroupsResponse', {
        'EndpointGroups': Optional[List[GlobalAcceleratorEndpointGroup]],
        'GenericString': Optional[str],
    }
)


GlobalAcceleratorListListenersResponse = TypedDict(
    'GlobalAcceleratorListListenersResponse', {
        'Listeners': Optional[List[GlobalAcceleratorListener]],
        'GenericString': Optional[str],
    }
)


GlobalAcceleratorUpdateAcceleratorResponse = TypedDict(
    'GlobalAcceleratorUpdateAcceleratorResponse', {
        'Accelerator': Optional[GlobalAcceleratorAccelerator],
    }
)


GlobalAcceleratorUpdateAcceleratorAttributesResponse = TypedDict(
    'GlobalAcceleratorUpdateAcceleratorAttributesResponse', {
        'AcceleratorAttributes': Optional[GlobalAcceleratorAcceleratorAttributes],
    }
)


GlobalAcceleratorUpdateEndpointGroupResponse = TypedDict(
    'GlobalAcceleratorUpdateEndpointGroupResponse', {
        'EndpointGroup': Optional[GlobalAcceleratorEndpointGroup],
    }
)


GlobalAcceleratorUpdateListenerResponse = TypedDict(
    'GlobalAcceleratorUpdateListenerResponse', {
        'Listener': Optional[GlobalAcceleratorListener],
    }
)


class Glue(BaseClient):
    def batch_create_partition(self, *,
        DatabaseName: str,
        TableName: str,
        PartitionInputList: List[GluePartitionInput],
        CatalogId: str = ...
    ) -> GlueBatchCreatePartitionResponse: ...

    def batch_delete_connection(self, *,
        ConnectionNameList: List[str],
        CatalogId: str = ...
    ) -> GlueBatchDeleteConnectionResponse: ...

    def batch_delete_partition(self, *,
        DatabaseName: str,
        TableName: str,
        PartitionsToDelete: List[GluePartitionValueList],
        CatalogId: str = ...
    ) -> GlueBatchDeletePartitionResponse: ...

    def batch_delete_table(self, *,
        DatabaseName: str,
        TablesToDelete: List[str],
        CatalogId: str = ...
    ) -> GlueBatchDeleteTableResponse: ...

    def batch_delete_table_version(self, *,
        DatabaseName: str,
        TableName: str,
        VersionIds: List[str],
        CatalogId: str = ...
    ) -> GlueBatchDeleteTableVersionResponse: ...

    def batch_get_crawlers(self, *,
        CrawlerNames: List[str]
    ) -> GlueBatchGetCrawlersResponse: ...

    def batch_get_dev_endpoints(self, *,
        DevEndpointNames: List[str]
    ) -> GlueBatchGetDevEndpointsResponse: ...

    def batch_get_jobs(self, *,
        JobNames: List[str]
    ) -> GlueBatchGetJobsResponse: ...

    def batch_get_partition(self, *,
        DatabaseName: str,
        TableName: str,
        PartitionsToGet: List[GluePartitionValueList],
        CatalogId: str = ...
    ) -> GlueBatchGetPartitionResponse: ...

    def batch_get_triggers(self, *,
        TriggerNames: List[str]
    ) -> GlueBatchGetTriggersResponse: ...

    def batch_stop_job_run(self, *,
        JobName: str,
        JobRunIds: List[str]
    ) -> GlueBatchStopJobRunResponse: ...

    def create_classifier(self, *,
        GrokClassifier: GlueCreateGrokClassifierRequest = ...,
        XMLClassifier: GlueCreateXMLClassifierRequest = ...,
        JsonClassifier: GlueCreateJsonClassifierRequest = ...,
        CsvClassifier: GlueCreateCsvClassifierRequest = ...
    ) -> GlueCreateClassifierResponse: ...

    def create_connection(self, *,
        ConnectionInput: GlueConnectionInput,
        CatalogId: str = ...
    ) -> GlueCreateConnectionResponse: ...

    def create_crawler(self, *,
        Name: str,
        Role: str,
        DatabaseName: str,
        Targets: GlueCrawlerTargets,
        Description: str = ...,
        Schedule: str = ...,
        Classifiers: List[str] = ...,
        TablePrefix: str = ...,
        SchemaChangePolicy: GlueSchemaChangePolicy = ...,
        Configuration: str = ...,
        CrawlerSecurityConfiguration: str = ...,
        Tags: Dict[str, str] = ...
    ) -> GlueCreateCrawlerResponse: ...

    def create_database(self, *,
        DatabaseInput: GlueDatabaseInput,
        CatalogId: str = ...
    ) -> GlueCreateDatabaseResponse: ...

    def create_dev_endpoint(self, *,
        EndpointName: str,
        RoleArn: str,
        SecurityGroupIds: List[str] = ...,
        SubnetId: str = ...,
        PublicKey: str = ...,
        PublicKeys: List[str] = ...,
        NumberOfNodes: int = ...,
        ExtraPythonLibsS3Path: str = ...,
        ExtraJarsS3Path: str = ...,
        SecurityConfiguration: str = ...,
        Tags: Dict[str, str] = ...,
        Arguments: Dict[str, str] = ...
    ) -> GlueCreateDevEndpointResponse: ...

    def create_job(self, *,
        Name: str,
        Role: str,
        Command: GlueJobCommand,
        Description: str = ...,
        LogUri: str = ...,
        ExecutionProperty: GlueExecutionProperty = ...,
        DefaultArguments: Dict[str, str] = ...,
        Connections: GlueConnectionsList = ...,
        MaxRetries: int = ...,
        AllocatedCapacity: int = ...,
        Timeout: int = ...,
        MaxCapacity: float = ...,
        NotificationProperty: GlueNotificationProperty = ...,
        WorkerType: str = ...,
        NumberOfWorkers: int = ...,
        SecurityConfiguration: str = ...,
        Tags: Dict[str, str] = ...
    ) -> GlueCreateJobResponse: ...

    def create_partition(self, *,
        DatabaseName: str,
        TableName: str,
        PartitionInput: GluePartitionInput,
        CatalogId: str = ...
    ) -> GlueCreatePartitionResponse: ...

    def create_script(self, *,
        DagNodes: List[GlueCodeGenNode] = ...,
        DagEdges: List[GlueCodeGenEdge] = ...,
        Language: str = ...
    ) -> GlueCreateScriptResponse: ...

    def create_security_configuration(self, *,
        Name: str,
        EncryptionConfiguration: GlueEncryptionConfiguration
    ) -> GlueCreateSecurityConfigurationResponse: ...

    def create_table(self, *,
        DatabaseName: str,
        TableInput: GlueTableInput,
        CatalogId: str = ...
    ) -> GlueCreateTableResponse: ...

    def create_trigger(self, *,
        Name: str,
        Type: str,
        Actions: List[GlueAction],
        Schedule: str = ...,
        Predicate: GluePredicate = ...,
        Description: str = ...,
        StartOnCreation: bool = ...,
        Tags: Dict[str, str] = ...
    ) -> GlueCreateTriggerResponse: ...

    def create_user_defined_function(self, *,
        DatabaseName: str,
        FunctionInput: GlueUserDefinedFunctionInput,
        CatalogId: str = ...
    ) -> GlueCreateUserDefinedFunctionResponse: ...

    def delete_classifier(self, *,
        Name: str
    ) -> GlueDeleteClassifierResponse: ...

    def delete_connection(self, *,
        ConnectionName: str,
        CatalogId: str = ...
    ) -> GlueDeleteConnectionResponse: ...

    def delete_crawler(self, *,
        Name: str
    ) -> GlueDeleteCrawlerResponse: ...

    def delete_database(self, *,
        Name: str,
        CatalogId: str = ...
    ) -> GlueDeleteDatabaseResponse: ...

    def delete_dev_endpoint(self, *,
        EndpointName: str
    ) -> GlueDeleteDevEndpointResponse: ...

    def delete_job(self, *,
        JobName: str
    ) -> GlueDeleteJobResponse: ...

    def delete_partition(self, *,
        DatabaseName: str,
        TableName: str,
        PartitionValues: List[str],
        CatalogId: str = ...
    ) -> GlueDeletePartitionResponse: ...

    def delete_resource_policy(self, *,
        PolicyHashCondition: str = ...
    ) -> GlueDeleteResourcePolicyResponse: ...

    def delete_security_configuration(self, *,
        Name: str
    ) -> GlueDeleteSecurityConfigurationResponse: ...

    def delete_table(self, *,
        DatabaseName: str,
        Name: str,
        CatalogId: str = ...
    ) -> GlueDeleteTableResponse: ...

    def delete_table_version(self, *,
        DatabaseName: str,
        TableName: str,
        VersionId: str,
        CatalogId: str = ...
    ) -> GlueDeleteTableVersionResponse: ...

    def delete_trigger(self, *,
        Name: str
    ) -> GlueDeleteTriggerResponse: ...

    def delete_user_defined_function(self, *,
        DatabaseName: str,
        FunctionName: str,
        CatalogId: str = ...
    ) -> GlueDeleteUserDefinedFunctionResponse: ...

    def get_catalog_import_status(self, *,
        CatalogId: str = ...
    ) -> GlueGetCatalogImportStatusResponse: ...

    def get_classifier(self, *,
        Name: str
    ) -> GlueGetClassifierResponse: ...

    def get_classifiers(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> GlueGetClassifiersResponse: ...

    def get_connection(self, *,
        Name: str,
        CatalogId: str = ...,
        HidePassword: bool = ...
    ) -> GlueGetConnectionResponse: ...

    def get_connections(self, *,
        CatalogId: str = ...,
        Filter: GlueGetConnectionsFilter = ...,
        HidePassword: bool = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> GlueGetConnectionsResponse: ...

    def get_crawler(self, *,
        Name: str
    ) -> GlueGetCrawlerResponse: ...

    def get_crawler_metrics(self, *,
        CrawlerNameList: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> GlueGetCrawlerMetricsResponse: ...

    def get_crawlers(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> GlueGetCrawlersResponse: ...

    def get_data_catalog_encryption_settings(self, *,
        CatalogId: str = ...
    ) -> GlueGetDataCatalogEncryptionSettingsResponse: ...

    def get_database(self, *,
        Name: str,
        CatalogId: str = ...
    ) -> GlueGetDatabaseResponse: ...

    def get_databases(self, *,
        CatalogId: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> GlueGetDatabasesResponse: ...

    def get_dataflow_graph(self, *,
        PythonScript: str = ...
    ) -> GlueGetDataflowGraphResponse: ...

    def get_dev_endpoint(self, *,
        EndpointName: str
    ) -> GlueGetDevEndpointResponse: ...

    def get_dev_endpoints(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> GlueGetDevEndpointsResponse: ...

    def get_job(self, *,
        JobName: str
    ) -> GlueGetJobResponse: ...

    def get_job_run(self, *,
        JobName: str,
        RunId: str,
        PredecessorsIncluded: bool = ...
    ) -> GlueGetJobRunResponse: ...

    def get_job_runs(self, *,
        JobName: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> GlueGetJobRunsResponse: ...

    def get_jobs(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> GlueGetJobsResponse: ...

    def get_mapping(self, *,
        Source: GlueCatalogEntry,
        Sinks: List[GlueCatalogEntry] = ...,
        Location: GlueLocation = ...
    ) -> GlueGetMappingResponse: ...

    def get_partition(self, *,
        DatabaseName: str,
        TableName: str,
        PartitionValues: List[str],
        CatalogId: str = ...
    ) -> GlueGetPartitionResponse: ...

    def get_partitions(self, *,
        DatabaseName: str,
        TableName: str,
        CatalogId: str = ...,
        Expression: str = ...,
        NextToken: str = ...,
        Segment: GlueSegment = ...,
        MaxResults: int = ...
    ) -> GlueGetPartitionsResponse: ...

    def get_plan(self, *,
        Mapping: List[GlueMappingEntry],
        Source: GlueCatalogEntry,
        Sinks: List[GlueCatalogEntry] = ...,
        Location: GlueLocation = ...,
        Language: str = ...
    ) -> GlueGetPlanResponse: ...

    def get_resource_policy(self) -> GlueGetResourcePolicyResponse: ...

    def get_security_configuration(self, *,
        Name: str
    ) -> GlueGetSecurityConfigurationResponse: ...

    def get_security_configurations(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> GlueGetSecurityConfigurationsResponse: ...

    def get_table(self, *,
        DatabaseName: str,
        Name: str,
        CatalogId: str = ...
    ) -> GlueGetTableResponse: ...

    def get_table_version(self, *,
        DatabaseName: str,
        TableName: str,
        CatalogId: str = ...,
        VersionId: str = ...
    ) -> GlueGetTableVersionResponse: ...

    def get_table_versions(self, *,
        DatabaseName: str,
        TableName: str,
        CatalogId: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> GlueGetTableVersionsResponse: ...

    def get_tables(self, *,
        DatabaseName: str,
        CatalogId: str = ...,
        Expression: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> GlueGetTablesResponse: ...

    def get_tags(self, *,
        ResourceArn: str
    ) -> GlueGetTagsResponse: ...

    def get_trigger(self, *,
        Name: str
    ) -> GlueGetTriggerResponse: ...

    def get_triggers(self, *,
        NextToken: str = ...,
        DependentJobName: str = ...,
        MaxResults: int = ...
    ) -> GlueGetTriggersResponse: ...

    def get_user_defined_function(self, *,
        DatabaseName: str,
        FunctionName: str,
        CatalogId: str = ...
    ) -> GlueGetUserDefinedFunctionResponse: ...

    def get_user_defined_functions(self, *,
        DatabaseName: str,
        Pattern: str,
        CatalogId: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> GlueGetUserDefinedFunctionsResponse: ...

    def import_catalog_to_glue(self, *,
        CatalogId: str = ...
    ) -> GlueImportCatalogToGlueResponse: ...

    def list_crawlers(self, *,
        MaxResults: int = ...,
        NextToken: str = ...,
        Tags: Dict[str, str] = ...
    ) -> GlueListCrawlersResponse: ...

    def list_dev_endpoints(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        Tags: Dict[str, str] = ...
    ) -> GlueListDevEndpointsResponse: ...

    def list_jobs(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        Tags: Dict[str, str] = ...
    ) -> GlueListJobsResponse: ...

    def list_triggers(self, *,
        NextToken: str = ...,
        DependentJobName: str = ...,
        MaxResults: int = ...,
        Tags: Dict[str, str] = ...
    ) -> GlueListTriggersResponse: ...

    def put_data_catalog_encryption_settings(self, *,
        DataCatalogEncryptionSettings: GlueDataCatalogEncryptionSettings,
        CatalogId: str = ...
    ) -> GluePutDataCatalogEncryptionSettingsResponse: ...

    def put_resource_policy(self, *,
        PolicyInJson: str,
        PolicyHashCondition: str = ...,
        PolicyExistsCondition: str = ...
    ) -> GluePutResourcePolicyResponse: ...

    def reset_job_bookmark(self, *,
        JobName: str
    ) -> GlueResetJobBookmarkResponse: ...

    def start_crawler(self, *,
        Name: str
    ) -> GlueStartCrawlerResponse: ...

    def start_crawler_schedule(self, *,
        CrawlerName: str
    ) -> GlueStartCrawlerScheduleResponse: ...

    def start_job_run(self, *,
        JobName: str,
        JobRunId: str = ...,
        Arguments: Dict[str, str] = ...,
        AllocatedCapacity: int = ...,
        Timeout: int = ...,
        MaxCapacity: float = ...,
        WorkerType: str = ...,
        NumberOfWorkers: int = ...,
        SecurityConfiguration: str = ...,
        NotificationProperty: GlueNotificationProperty = ...
    ) -> GlueStartJobRunResponse: ...

    def start_trigger(self, *,
        Name: str
    ) -> GlueStartTriggerResponse: ...

    def stop_crawler(self, *,
        Name: str
    ) -> GlueStopCrawlerResponse: ...

    def stop_crawler_schedule(self, *,
        CrawlerName: str
    ) -> GlueStopCrawlerScheduleResponse: ...

    def stop_trigger(self, *,
        Name: str
    ) -> GlueStopTriggerResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        TagsToAdd: Dict[str, str]
    ) -> GlueTagResourceResponse: ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagsToRemove: List[str]
    ) -> GlueUntagResourceResponse: ...

    def update_classifier(self, *,
        GrokClassifier: GlueUpdateGrokClassifierRequest = ...,
        XMLClassifier: GlueUpdateXMLClassifierRequest = ...,
        JsonClassifier: GlueUpdateJsonClassifierRequest = ...,
        CsvClassifier: GlueUpdateCsvClassifierRequest = ...
    ) -> GlueUpdateClassifierResponse: ...

    def update_connection(self, *,
        Name: str,
        ConnectionInput: GlueConnectionInput,
        CatalogId: str = ...
    ) -> GlueUpdateConnectionResponse: ...

    def update_crawler(self, *,
        Name: str,
        Role: str = ...,
        DatabaseName: str = ...,
        Description: str = ...,
        Targets: GlueCrawlerTargets = ...,
        Schedule: str = ...,
        Classifiers: List[str] = ...,
        TablePrefix: str = ...,
        SchemaChangePolicy: GlueSchemaChangePolicy = ...,
        Configuration: str = ...,
        CrawlerSecurityConfiguration: str = ...
    ) -> GlueUpdateCrawlerResponse: ...

    def update_crawler_schedule(self, *,
        CrawlerName: str,
        Schedule: str = ...
    ) -> GlueUpdateCrawlerScheduleResponse: ...

    def update_database(self, *,
        Name: str,
        DatabaseInput: GlueDatabaseInput,
        CatalogId: str = ...
    ) -> GlueUpdateDatabaseResponse: ...

    def update_dev_endpoint(self, *,
        EndpointName: str,
        PublicKey: str = ...,
        AddPublicKeys: List[str] = ...,
        DeletePublicKeys: List[str] = ...,
        CustomLibraries: GlueDevEndpointCustomLibraries = ...,
        UpdateEtlLibraries: bool = ...,
        DeleteArguments: List[str] = ...,
        AddArguments: Dict[str, str] = ...
    ) -> GlueUpdateDevEndpointResponse: ...

    def update_job(self, *,
        JobName: str,
        JobUpdate: GlueJobUpdate
    ) -> GlueUpdateJobResponse: ...

    def update_partition(self, *,
        DatabaseName: str,
        TableName: str,
        PartitionValueList: List[str],
        PartitionInput: GluePartitionInput,
        CatalogId: str = ...
    ) -> GlueUpdatePartitionResponse: ...

    def update_table(self, *,
        DatabaseName: str,
        TableInput: GlueTableInput,
        CatalogId: str = ...,
        SkipArchive: bool = ...
    ) -> GlueUpdateTableResponse: ...

    def update_trigger(self, *,
        Name: str,
        TriggerUpdate: GlueTriggerUpdate
    ) -> GlueUpdateTriggerResponse: ...

    def update_user_defined_function(self, *,
        DatabaseName: str,
        FunctionName: str,
        FunctionInput: GlueUserDefinedFunctionInput,
        CatalogId: str = ...
    ) -> GlueUpdateUserDefinedFunctionResponse: ...


GlueColumn = TypedDict(
    'GlueColumn', {
        'NameString': str,
        'ColumnTypeString': Optional[str],
        'CommentString': Optional[str],
    }
)


GlueSerDeInfo = TypedDict(
    'GlueSerDeInfo', {
        'NameString': Optional[str],
        'NameString': Optional[str],
        'ParametersMap': Optional[Dict[str, str]],
    }
)


GlueOrder = TypedDict(
    'GlueOrder', {
        'NameString': str,
        'IntegerFlag': int,
    }
)


GlueSkewedInfo = TypedDict(
    'GlueSkewedInfo', {
        'NameStringList': Optional[List[str]],
        'ColumnValueStringList': Optional[List[str]],
        'LocationMap': Optional[Dict[str, str]],
    }
)


GlueStorageDescriptor = TypedDict(
    'GlueStorageDescriptor', {
        'ColumnList': Optional[List[GlueColumn]],
        'LocationString': Optional[str],
        'FormatString': Optional[str],
        'FormatString': Optional[str],
        'Boolean': Optional[bool],
        'Integer': Optional[int],
        'SerDeInfo': Optional[GlueSerDeInfo],
        'NameStringList': Optional[List[str]],
        'OrderList': Optional[List[GlueOrder]],
        'ParametersMap': Optional[Dict[str, str]],
        'SkewedInfo': Optional[GlueSkewedInfo],
        'Boolean': Optional[bool],
    }
)


GluePartitionInput = TypedDict(
    'GluePartitionInput', {
        'ValueStringList': Optional[List[str]],
        'Timestamp': Optional[datetime.datetime],
        'StorageDescriptor': Optional[GlueStorageDescriptor],
        'ParametersMap': Optional[Dict[str, str]],
        'Timestamp': Optional[datetime.datetime],
    }
)


GlueErrorDetail = TypedDict(
    'GlueErrorDetail', {
        'NameString': Optional[str],
        'DescriptionString': Optional[str],
    }
)


GluePartitionError = TypedDict(
    'GluePartitionError', {
        'ValueStringList': Optional[List[str]],
        'ErrorDetail': Optional[GlueErrorDetail],
    }
)


GlueBatchCreatePartitionResponse = TypedDict(
    'GlueBatchCreatePartitionResponse', {
        'PartitionErrors': Optional[List[GluePartitionError]],
    }
)


GlueBatchDeleteConnectionResponse = TypedDict(
    'GlueBatchDeleteConnectionResponse', {
        'NameStringList': Optional[List[str]],
        'ErrorByName': Optional[Dict[str, GlueErrorDetail]],
    }
)


GluePartitionValueList = TypedDict(
    'GluePartitionValueList', {
        'ValueStringList': List[str],
    }
)


GlueBatchDeletePartitionResponse = TypedDict(
    'GlueBatchDeletePartitionResponse', {
        'PartitionErrors': Optional[List[GluePartitionError]],
    }
)


GlueTableError = TypedDict(
    'GlueTableError', {
        'NameString': Optional[str],
        'ErrorDetail': Optional[GlueErrorDetail],
    }
)


GlueBatchDeleteTableResponse = TypedDict(
    'GlueBatchDeleteTableResponse', {
        'TableErrors': Optional[List[GlueTableError]],
    }
)


GlueTableVersionError = TypedDict(
    'GlueTableVersionError', {
        'NameString': Optional[str],
        'VersionString': Optional[str],
        'ErrorDetail': Optional[GlueErrorDetail],
    }
)


GlueBatchDeleteTableVersionResponse = TypedDict(
    'GlueBatchDeleteTableVersionResponse', {
        'TableVersionErrors': Optional[List[GlueTableVersionError]],
    }
)


GlueS3Target = TypedDict(
    'GlueS3Target', {
        'Path': Optional[str],
        'PathList': Optional[List[str]],
    }
)


GlueJdbcTarget = TypedDict(
    'GlueJdbcTarget', {
        'ConnectionName': Optional[str],
        'Path': Optional[str],
        'PathList': Optional[List[str]],
    }
)


GlueDynamoDBTarget = TypedDict(
    'GlueDynamoDBTarget', {
        'Path': Optional[str],
    }
)


GlueCrawlerTargets = TypedDict(
    'GlueCrawlerTargets', {
        'S3TargetList': Optional[List[GlueS3Target]],
        'JdbcTargetList': Optional[List[GlueJdbcTarget]],
        'DynamoDBTargetList': Optional[List[GlueDynamoDBTarget]],
    }
)


GlueSchemaChangePolicy = TypedDict(
    'GlueSchemaChangePolicy', {
        'UpdateBehavior': Optional[str],
        'DeleteBehavior': Optional[str],
    }
)


GlueSchedule = TypedDict(
    'GlueSchedule', {
        'CronExpression': Optional[str],
        'ScheduleState': Optional[str],
    }
)


GlueLastCrawlInfo = TypedDict(
    'GlueLastCrawlInfo', {
        'LastCrawlStatus': Optional[str],
        'DescriptionString': Optional[str],
        'LogGroup': Optional[str],
        'LogStream': Optional[str],
        'MessagePrefix': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


GlueCrawler = TypedDict(
    'GlueCrawler', {
        'NameString': Optional[str],
        'Role': Optional[str],
        'CrawlerTargets': Optional[GlueCrawlerTargets],
        'DatabaseName': Optional[str],
        'DescriptionString': Optional[str],
        'ClassifierNameList': Optional[List[str]],
        'SchemaChangePolicy': Optional[GlueSchemaChangePolicy],
        'CrawlerState': Optional[str],
        'TablePrefix': Optional[str],
        'Schedule': Optional[GlueSchedule],
        'MillisecondsCount': Optional[int],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'LastCrawlInfo': Optional[GlueLastCrawlInfo],
        'VersionId': Optional[int],
        'CrawlerConfiguration': Optional[str],
        'CrawlerSecurityConfiguration': Optional[str],
    }
)


GlueBatchGetCrawlersResponse = TypedDict(
    'GlueBatchGetCrawlersResponse', {
        'CrawlerList': Optional[List[GlueCrawler]],
        'CrawlerNameList': Optional[List[str]],
    }
)


GlueDevEndpoint = TypedDict(
    'GlueDevEndpoint', {
        'GenericString': Optional[str],
        'RoleArn': Optional[str],
        'StringList': Optional[List[str]],
        'GenericString': Optional[str],
        'GenericString': Optional[str],
        'GenericString': Optional[str],
        'IntegerValue': Optional[int],
        'GenericString': Optional[str],
        'GenericString': Optional[str],
        'IntegerValue': Optional[int],
        'GenericString': Optional[str],
        'GenericString': Optional[str],
        'GenericString': Optional[str],
        'GenericString': Optional[str],
        'GenericString': Optional[str],
        'GenericString': Optional[str],
        'TimestampValue': Optional[datetime.datetime],
        'TimestampValue': Optional[datetime.datetime],
        'GenericString': Optional[str],
        'PublicKeysList': Optional[List[str]],
        'NameString': Optional[str],
        'MapValue': Optional[Dict[str, str]],
    }
)


GlueBatchGetDevEndpointsResponse = TypedDict(
    'GlueBatchGetDevEndpointsResponse', {
        'DevEndpointList': Optional[List[GlueDevEndpoint]],
        'DevEndpointNames': Optional[List[str]],
    }
)


GlueExecutionProperty = TypedDict(
    'GlueExecutionProperty', {
        'MaxConcurrentRuns': Optional[int],
    }
)


GlueJobCommand = TypedDict(
    'GlueJobCommand', {
        'GenericString': Optional[str],
        'ScriptLocationString': Optional[str],
    }
)


GlueConnectionsList = TypedDict(
    'GlueConnectionsList', {
        'StringList': Optional[List[str]],
    }
)


GlueNotificationProperty = TypedDict(
    'GlueNotificationProperty', {
        'NotifyDelayAfter': Optional[int],
    }
)


GlueJob = TypedDict(
    'GlueJob', {
        'NameString': Optional[str],
        'DescriptionString': Optional[str],
        'UriString': Optional[str],
        'RoleString': Optional[str],
        'TimestampValue': Optional[datetime.datetime],
        'TimestampValue': Optional[datetime.datetime],
        'ExecutionProperty': Optional[GlueExecutionProperty],
        'JobCommand': Optional[GlueJobCommand],
        'GenericMap': Optional[Dict[str, str]],
        'ConnectionsList': Optional[GlueConnectionsList],
        'MaxRetries': Optional[int],
        'IntegerValue': Optional[int],
        'Timeout': Optional[int],
        'NullableDouble': Optional[float],
        'WorkerType': Optional[str],
        'NullableInteger': Optional[int],
        'NameString': Optional[str],
        'NotificationProperty': Optional[GlueNotificationProperty],
    }
)


GlueBatchGetJobsResponse = TypedDict(
    'GlueBatchGetJobsResponse', {
        'JobList': Optional[List[GlueJob]],
        'JobNameList': Optional[List[str]],
    }
)


GluePartition = TypedDict(
    'GluePartition', {
        'ValueStringList': Optional[List[str]],
        'NameString': Optional[str],
        'NameString': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'StorageDescriptor': Optional[GlueStorageDescriptor],
        'ParametersMap': Optional[Dict[str, str]],
        'Timestamp': Optional[datetime.datetime],
    }
)


GlueBatchGetPartitionResponse = TypedDict(
    'GlueBatchGetPartitionResponse', {
        'PartitionList': Optional[List[GluePartition]],
        'BatchGetPartitionValueList': Optional[List[GluePartitionValueList]],
    }
)


GlueAction = TypedDict(
    'GlueAction', {
        'NameString': Optional[str],
        'GenericMap': Optional[Dict[str, str]],
        'Timeout': Optional[int],
        'NotificationProperty': Optional[GlueNotificationProperty],
        'NameString': Optional[str],
    }
)


GlueCondition = TypedDict(
    'GlueCondition', {
        'LogicalOperator': Optional[str],
        'NameString': Optional[str],
        'JobRunState': Optional[str],
    }
)


GluePredicate = TypedDict(
    'GluePredicate', {
        'Logical': Optional[str],
        'ConditionList': Optional[List[GlueCondition]],
    }
)


GlueTrigger = TypedDict(
    'GlueTrigger', {
        'NameString': Optional[str],
        'IdString': Optional[str],
        'TriggerType': Optional[str],
        'TriggerState': Optional[str],
        'DescriptionString': Optional[str],
        'GenericString': Optional[str],
        'ActionList': Optional[List[GlueAction]],
        'Predicate': Optional[GluePredicate],
    }
)


GlueBatchGetTriggersResponse = TypedDict(
    'GlueBatchGetTriggersResponse', {
        'TriggerList': Optional[List[GlueTrigger]],
        'TriggerNameList': Optional[List[str]],
    }
)


GlueBatchStopJobRunSuccessfulSubmission = TypedDict(
    'GlueBatchStopJobRunSuccessfulSubmission', {
        'NameString': Optional[str],
        'IdString': Optional[str],
    }
)


GlueBatchStopJobRunError = TypedDict(
    'GlueBatchStopJobRunError', {
        'NameString': Optional[str],
        'IdString': Optional[str],
        'ErrorDetail': Optional[GlueErrorDetail],
    }
)


GlueBatchStopJobRunResponse = TypedDict(
    'GlueBatchStopJobRunResponse', {
        'BatchStopJobRunSuccessfulSubmissionList': Optional[List[GlueBatchStopJobRunSuccessfulSubmission]],
        'BatchStopJobRunErrorList': Optional[List[GlueBatchStopJobRunError]],
    }
)


GlueCreateGrokClassifierRequest = TypedDict(
    'GlueCreateGrokClassifierRequest', {
        'Classification': str,
        'NameString': str,
        'GrokPattern': str,
        'CustomPatterns': Optional[str],
    }
)


GlueCreateXMLClassifierRequest = TypedDict(
    'GlueCreateXMLClassifierRequest', {
        'Classification': str,
        'NameString': str,
        'RowTag': Optional[str],
    }
)


GlueCreateJsonClassifierRequest = TypedDict(
    'GlueCreateJsonClassifierRequest', {
        'NameString': str,
        'JsonPath': str,
    }
)


GlueCreateCsvClassifierRequest = TypedDict(
    'GlueCreateCsvClassifierRequest', {
        'NameString': str,
        'CsvColumnDelimiter': Optional[str],
        'CsvQuoteSymbol': Optional[str],
        'CsvHeaderOption': Optional[str],
        'CsvHeader': Optional[List[str]],
        'NullableBoolean': Optional[bool],
        'NullableBoolean': Optional[bool],
    }
)


GlueCreateClassifierResponse = TypedDict(
    'GlueCreateClassifierResponse', {
    }
)


GluePhysicalConnectionRequirements = TypedDict(
    'GluePhysicalConnectionRequirements', {
        'NameString': Optional[str],
        'SecurityGroupIdList': Optional[List[str]],
        'NameString': Optional[str],
    }
)


GlueConnectionInput = TypedDict(
    'GlueConnectionInput', {
        'NameString': str,
        'ConnectionType': str,
        'ConnectionProperties': Dict[str, str],
        'DescriptionString': Optional[str],
        'MatchCriteria': Optional[List[str]],
        'PhysicalConnectionRequirements': Optional[GluePhysicalConnectionRequirements],
    }
)


GlueCreateConnectionResponse = TypedDict(
    'GlueCreateConnectionResponse', {
    }
)


GlueCreateCrawlerResponse = TypedDict(
    'GlueCreateCrawlerResponse', {
    }
)


GlueDatabaseInput = TypedDict(
    'GlueDatabaseInput', {
        'NameString': str,
        'DescriptionString': Optional[str],
        'URI': Optional[str],
        'ParametersMap': Optional[Dict[str, str]],
    }
)


GlueCreateDatabaseResponse = TypedDict(
    'GlueCreateDatabaseResponse', {
    }
)


GlueCreateDevEndpointResponse = TypedDict(
    'GlueCreateDevEndpointResponse', {
        'GenericString': Optional[str],
        'GenericString': Optional[str],
        'StringList': Optional[List[str]],
        'GenericString': Optional[str],
        'RoleArn': Optional[str],
        'GenericString': Optional[str],
        'IntegerValue': Optional[int],
        'IntegerValue': Optional[int],
        'GenericString': Optional[str],
        'GenericString': Optional[str],
        'GenericString': Optional[str],
        'GenericString': Optional[str],
        'GenericString': Optional[str],
        'NameString': Optional[str],
        'TimestampValue': Optional[datetime.datetime],
        'MapValue': Optional[Dict[str, str]],
    }
)


GlueCreateJobResponse = TypedDict(
    'GlueCreateJobResponse', {
        'NameString': Optional[str],
    }
)


GlueCreatePartitionResponse = TypedDict(
    'GlueCreatePartitionResponse', {
    }
)


GlueCodeGenNodeArg = TypedDict(
    'GlueCodeGenNodeArg', {
        'CodeGenArgName': str,
        'CodeGenArgValue': str,
        'Boolean': Optional[bool],
    }
)


GlueCodeGenNode = TypedDict(
    'GlueCodeGenNode', {
        'CodeGenIdentifier': str,
        'CodeGenNodeType': str,
        'CodeGenNodeArgs': List[GlueCodeGenNodeArg],
        'Integer': Optional[int],
    }
)


GlueCodeGenEdge = TypedDict(
    'GlueCodeGenEdge', {
        'CodeGenIdentifier': str,
        'CodeGenIdentifier': str,
        'CodeGenArgName': Optional[str],
    }
)


GlueCreateScriptResponse = TypedDict(
    'GlueCreateScriptResponse', {
        'PythonScript': Optional[str],
        'ScalaCode': Optional[str],
    }
)


GlueS3Encryption = TypedDict(
    'GlueS3Encryption', {
        'S3EncryptionMode': Optional[str],
        'KmsKeyArn': Optional[str],
    }
)


GlueCloudWatchEncryption = TypedDict(
    'GlueCloudWatchEncryption', {
        'CloudWatchEncryptionMode': Optional[str],
        'KmsKeyArn': Optional[str],
    }
)


GlueJobBookmarksEncryption = TypedDict(
    'GlueJobBookmarksEncryption', {
        'JobBookmarksEncryptionMode': Optional[str],
        'KmsKeyArn': Optional[str],
    }
)


GlueEncryptionConfiguration = TypedDict(
    'GlueEncryptionConfiguration', {
        'S3EncryptionList': Optional[List[GlueS3Encryption]],
        'CloudWatchEncryption': Optional[GlueCloudWatchEncryption],
        'JobBookmarksEncryption': Optional[GlueJobBookmarksEncryption],
    }
)


GlueCreateSecurityConfigurationResponse = TypedDict(
    'GlueCreateSecurityConfigurationResponse', {
        'NameString': Optional[str],
        'TimestampValue': Optional[datetime.datetime],
    }
)


GlueTableInput = TypedDict(
    'GlueTableInput', {
        'NameString': str,
        'DescriptionString': Optional[str],
        'NameString': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'NonNegativeInteger': Optional[int],
        'StorageDescriptor': Optional[GlueStorageDescriptor],
        'ColumnList': Optional[List[GlueColumn]],
        'ViewTextString': Optional[str],
        'ViewTextString': Optional[str],
        'TableTypeString': Optional[str],
        'ParametersMap': Optional[Dict[str, str]],
    }
)


GlueCreateTableResponse = TypedDict(
    'GlueCreateTableResponse', {
    }
)


GlueCreateTriggerResponse = TypedDict(
    'GlueCreateTriggerResponse', {
        'NameString': Optional[str],
    }
)


GlueResourceUri = TypedDict(
    'GlueResourceUri', {
        'ResourceType': Optional[str],
        'URI': Optional[str],
    }
)


GlueUserDefinedFunctionInput = TypedDict(
    'GlueUserDefinedFunctionInput', {
        'NameString': Optional[str],
        'NameString': Optional[str],
        'NameString': Optional[str],
        'PrincipalType': Optional[str],
        'ResourceUriList': Optional[List[GlueResourceUri]],
    }
)


GlueCreateUserDefinedFunctionResponse = TypedDict(
    'GlueCreateUserDefinedFunctionResponse', {
    }
)


GlueDeleteClassifierResponse = TypedDict(
    'GlueDeleteClassifierResponse', {
    }
)


GlueDeleteConnectionResponse = TypedDict(
    'GlueDeleteConnectionResponse', {
    }
)


GlueDeleteCrawlerResponse = TypedDict(
    'GlueDeleteCrawlerResponse', {
    }
)


GlueDeleteDatabaseResponse = TypedDict(
    'GlueDeleteDatabaseResponse', {
    }
)


GlueDeleteDevEndpointResponse = TypedDict(
    'GlueDeleteDevEndpointResponse', {
    }
)


GlueDeleteJobResponse = TypedDict(
    'GlueDeleteJobResponse', {
        'NameString': Optional[str],
    }
)


GlueDeletePartitionResponse = TypedDict(
    'GlueDeletePartitionResponse', {
    }
)


GlueDeleteResourcePolicyResponse = TypedDict(
    'GlueDeleteResourcePolicyResponse', {
    }
)


GlueDeleteSecurityConfigurationResponse = TypedDict(
    'GlueDeleteSecurityConfigurationResponse', {
    }
)


GlueDeleteTableResponse = TypedDict(
    'GlueDeleteTableResponse', {
    }
)


GlueDeleteTableVersionResponse = TypedDict(
    'GlueDeleteTableVersionResponse', {
    }
)


GlueDeleteTriggerResponse = TypedDict(
    'GlueDeleteTriggerResponse', {
        'NameString': Optional[str],
    }
)


GlueDeleteUserDefinedFunctionResponse = TypedDict(
    'GlueDeleteUserDefinedFunctionResponse', {
    }
)


GlueCatalogImportStatus = TypedDict(
    'GlueCatalogImportStatus', {
        'Boolean': Optional[bool],
        'Timestamp': Optional[datetime.datetime],
        'NameString': Optional[str],
    }
)


GlueGetCatalogImportStatusResponse = TypedDict(
    'GlueGetCatalogImportStatusResponse', {
        'CatalogImportStatus': Optional[GlueCatalogImportStatus],
    }
)


GlueGrokClassifier = TypedDict(
    'GlueGrokClassifier', {
        'NameString': str,
        'Classification': str,
        'GrokPattern': str,
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'VersionId': Optional[int],
        'CustomPatterns': Optional[str],
    }
)


GlueXMLClassifier = TypedDict(
    'GlueXMLClassifier', {
        'NameString': str,
        'Classification': str,
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'VersionId': Optional[int],
        'RowTag': Optional[str],
    }
)


GlueJsonClassifier = TypedDict(
    'GlueJsonClassifier', {
        'NameString': str,
        'JsonPath': str,
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'VersionId': Optional[int],
    }
)


GlueCsvClassifier = TypedDict(
    'GlueCsvClassifier', {
        'NameString': str,
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'VersionId': Optional[int],
        'CsvColumnDelimiter': Optional[str],
        'CsvQuoteSymbol': Optional[str],
        'CsvHeaderOption': Optional[str],
        'CsvHeader': Optional[List[str]],
        'NullableBoolean': Optional[bool],
        'NullableBoolean': Optional[bool],
    }
)


GlueClassifier = TypedDict(
    'GlueClassifier', {
        'GrokClassifier': Optional[GlueGrokClassifier],
        'XMLClassifier': Optional[GlueXMLClassifier],
        'JsonClassifier': Optional[GlueJsonClassifier],
        'CsvClassifier': Optional[GlueCsvClassifier],
    }
)


GlueGetClassifierResponse = TypedDict(
    'GlueGetClassifierResponse', {
        'Classifier': Optional[GlueClassifier],
    }
)


GlueGetClassifiersResponse = TypedDict(
    'GlueGetClassifiersResponse', {
        'ClassifierList': Optional[List[GlueClassifier]],
        'Token': Optional[str],
    }
)


GlueConnection = TypedDict(
    'GlueConnection', {
        'NameString': Optional[str],
        'DescriptionString': Optional[str],
        'ConnectionType': Optional[str],
        'MatchCriteria': Optional[List[str]],
        'ConnectionProperties': Optional[Dict[str, str]],
        'PhysicalConnectionRequirements': Optional[GluePhysicalConnectionRequirements],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'NameString': Optional[str],
    }
)


GlueGetConnectionResponse = TypedDict(
    'GlueGetConnectionResponse', {
        'Connection': Optional[GlueConnection],
    }
)


GlueGetConnectionsFilter = TypedDict(
    'GlueGetConnectionsFilter', {
        'MatchCriteria': Optional[List[str]],
        'ConnectionType': Optional[str],
    }
)


GlueGetConnectionsResponse = TypedDict(
    'GlueGetConnectionsResponse', {
        'ConnectionList': Optional[List[GlueConnection]],
        'Token': Optional[str],
    }
)


GlueGetCrawlerResponse = TypedDict(
    'GlueGetCrawlerResponse', {
        'Crawler': Optional[GlueCrawler],
    }
)


GlueCrawlerMetrics = TypedDict(
    'GlueCrawlerMetrics', {
        'NameString': Optional[str],
        'NonNegativeDouble': Optional[float],
        'Boolean': Optional[bool],
        'NonNegativeDouble': Optional[float],
        'NonNegativeDouble': Optional[float],
        'NonNegativeInteger': Optional[int],
        'NonNegativeInteger': Optional[int],
        'NonNegativeInteger': Optional[int],
    }
)


GlueGetCrawlerMetricsResponse = TypedDict(
    'GlueGetCrawlerMetricsResponse', {
        'CrawlerMetricsList': Optional[List[GlueCrawlerMetrics]],
        'Token': Optional[str],
    }
)


GlueGetCrawlersResponse = TypedDict(
    'GlueGetCrawlersResponse', {
        'CrawlerList': Optional[List[GlueCrawler]],
        'Token': Optional[str],
    }
)


GlueEncryptionAtRest = TypedDict(
    'GlueEncryptionAtRest', {
        'CatalogEncryptionMode': str,
        'NameString': Optional[str],
    }
)


GlueConnectionPasswordEncryption = TypedDict(
    'GlueConnectionPasswordEncryption', {
        'Boolean': bool,
        'NameString': Optional[str],
    }
)


GlueDataCatalogEncryptionSettings = TypedDict(
    'GlueDataCatalogEncryptionSettings', {
        'EncryptionAtRest': Optional[GlueEncryptionAtRest],
        'ConnectionPasswordEncryption': Optional[GlueConnectionPasswordEncryption],
    }
)


GlueGetDataCatalogEncryptionSettingsResponse = TypedDict(
    'GlueGetDataCatalogEncryptionSettingsResponse', {
        'DataCatalogEncryptionSettings': Optional[GlueDataCatalogEncryptionSettings],
    }
)


GlueDatabase = TypedDict(
    'GlueDatabase', {
        'NameString': str,
        'DescriptionString': Optional[str],
        'URI': Optional[str],
        'ParametersMap': Optional[Dict[str, str]],
        'Timestamp': Optional[datetime.datetime],
    }
)


GlueGetDatabaseResponse = TypedDict(
    'GlueGetDatabaseResponse', {
        'Database': Optional[GlueDatabase],
    }
)


GlueGetDatabasesResponse = TypedDict(
    'GlueGetDatabasesResponse', {
        'DatabaseList': List[GlueDatabase],
        'Token': Optional[str],
    }
)


GlueGetDataflowGraphResponse = TypedDict(
    'GlueGetDataflowGraphResponse', {
        'DagNodes': Optional[List[GlueCodeGenNode]],
        'DagEdges': Optional[List[GlueCodeGenEdge]],
    }
)


GlueGetDevEndpointResponse = TypedDict(
    'GlueGetDevEndpointResponse', {
        'DevEndpoint': Optional[GlueDevEndpoint],
    }
)


GlueGetDevEndpointsResponse = TypedDict(
    'GlueGetDevEndpointsResponse', {
        'DevEndpointList': Optional[List[GlueDevEndpoint]],
        'GenericString': Optional[str],
    }
)


GlueGetJobResponse = TypedDict(
    'GlueGetJobResponse', {
        'Job': Optional[GlueJob],
    }
)


GluePredecessor = TypedDict(
    'GluePredecessor', {
        'NameString': Optional[str],
        'IdString': Optional[str],
    }
)


GlueJobRun = TypedDict(
    'GlueJobRun', {
        'IdString': Optional[str],
        'AttemptCount': Optional[int],
        'IdString': Optional[str],
        'NameString': Optional[str],
        'NameString': Optional[str],
        'TimestampValue': Optional[datetime.datetime],
        'TimestampValue': Optional[datetime.datetime],
        'TimestampValue': Optional[datetime.datetime],
        'JobRunState': Optional[str],
        'GenericMap': Optional[Dict[str, str]],
        'ErrorString': Optional[str],
        'PredecessorList': Optional[List[GluePredecessor]],
        'IntegerValue': Optional[int],
        'ExecutionTime': Optional[int],
        'Timeout': Optional[int],
        'NullableDouble': Optional[float],
        'NotificationProperty': Optional[GlueNotificationProperty],
        'WorkerType': Optional[str],
        'NullableInteger': Optional[int],
        'NameString': Optional[str],
        'GenericString': Optional[str],
    }
)


GlueGetJobRunResponse = TypedDict(
    'GlueGetJobRunResponse', {
        'JobRun': Optional[GlueJobRun],
    }
)


GlueGetJobRunsResponse = TypedDict(
    'GlueGetJobRunsResponse', {
        'JobRunList': Optional[List[GlueJobRun]],
        'GenericString': Optional[str],
    }
)


GlueGetJobsResponse = TypedDict(
    'GlueGetJobsResponse', {
        'JobList': Optional[List[GlueJob]],
        'GenericString': Optional[str],
    }
)


GlueCatalogEntry = TypedDict(
    'GlueCatalogEntry', {
        'NameString': str,
        'NameString': str,
    }
)


GlueLocation = TypedDict(
    'GlueLocation', {
        'CodeGenNodeArgs': Optional[List[GlueCodeGenNodeArg]],
        'CodeGenNodeArgs': Optional[List[GlueCodeGenNodeArg]],
        'CodeGenNodeArgs': Optional[List[GlueCodeGenNodeArg]],
    }
)


GlueMappingEntry = TypedDict(
    'GlueMappingEntry', {
        'TableName': Optional[str],
        'SchemaPathString': Optional[str],
        'FieldType': Optional[str],
        'TableName': Optional[str],
        'SchemaPathString': Optional[str],
        'FieldType': Optional[str],
    }
)


GlueGetMappingResponse = TypedDict(
    'GlueGetMappingResponse', {
        'MappingList': List[GlueMappingEntry],
    }
)


GlueGetPartitionResponse = TypedDict(
    'GlueGetPartitionResponse', {
        'Partition': Optional[GluePartition],
    }
)


GlueSegment = TypedDict(
    'GlueSegment', {
        'NonNegativeInteger': int,
        'TotalSegmentsInteger': int,
    }
)


GlueGetPartitionsResponse = TypedDict(
    'GlueGetPartitionsResponse', {
        'PartitionList': Optional[List[GluePartition]],
        'Token': Optional[str],
    }
)


GlueGetPlanResponse = TypedDict(
    'GlueGetPlanResponse', {
        'PythonScript': Optional[str],
        'ScalaCode': Optional[str],
    }
)


GlueGetResourcePolicyResponse = TypedDict(
    'GlueGetResourcePolicyResponse', {
        'PolicyJsonString': Optional[str],
        'HashString': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


GlueSecurityConfiguration = TypedDict(
    'GlueSecurityConfiguration', {
        'NameString': Optional[str],
        'TimestampValue': Optional[datetime.datetime],
        'EncryptionConfiguration': Optional[GlueEncryptionConfiguration],
    }
)


GlueGetSecurityConfigurationResponse = TypedDict(
    'GlueGetSecurityConfigurationResponse', {
        'SecurityConfiguration': Optional[GlueSecurityConfiguration],
    }
)


GlueGetSecurityConfigurationsResponse = TypedDict(
    'GlueGetSecurityConfigurationsResponse', {
        'SecurityConfigurationList': Optional[List[GlueSecurityConfiguration]],
        'GenericString': Optional[str],
    }
)


GlueTable = TypedDict(
    'GlueTable', {
        'NameString': str,
        'NameString': Optional[str],
        'DescriptionString': Optional[str],
        'NameString': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'NonNegativeInteger': Optional[int],
        'StorageDescriptor': Optional[GlueStorageDescriptor],
        'ColumnList': Optional[List[GlueColumn]],
        'ViewTextString': Optional[str],
        'ViewTextString': Optional[str],
        'TableTypeString': Optional[str],
        'ParametersMap': Optional[Dict[str, str]],
        'NameString': Optional[str],
    }
)


GlueGetTableResponse = TypedDict(
    'GlueGetTableResponse', {
        'Table': Optional[GlueTable],
    }
)


GlueTableVersion = TypedDict(
    'GlueTableVersion', {
        'Table': Optional[GlueTable],
        'VersionString': Optional[str],
    }
)


GlueGetTableVersionResponse = TypedDict(
    'GlueGetTableVersionResponse', {
        'TableVersion': Optional[GlueTableVersion],
    }
)


GlueGetTableVersionsResponse = TypedDict(
    'GlueGetTableVersionsResponse', {
        'GetTableVersionsList': Optional[List[GlueTableVersion]],
        'Token': Optional[str],
    }
)


GlueGetTablesResponse = TypedDict(
    'GlueGetTablesResponse', {
        'TableList': Optional[List[GlueTable]],
        'Token': Optional[str],
    }
)


GlueGetTagsResponse = TypedDict(
    'GlueGetTagsResponse', {
        'TagsMap': Optional[Dict[str, str]],
    }
)


GlueGetTriggerResponse = TypedDict(
    'GlueGetTriggerResponse', {
        'Trigger': Optional[GlueTrigger],
    }
)


GlueGetTriggersResponse = TypedDict(
    'GlueGetTriggersResponse', {
        'TriggerList': Optional[List[GlueTrigger]],
        'GenericString': Optional[str],
    }
)


GlueUserDefinedFunction = TypedDict(
    'GlueUserDefinedFunction', {
        'NameString': Optional[str],
        'NameString': Optional[str],
        'NameString': Optional[str],
        'PrincipalType': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'ResourceUriList': Optional[List[GlueResourceUri]],
    }
)


GlueGetUserDefinedFunctionResponse = TypedDict(
    'GlueGetUserDefinedFunctionResponse', {
        'UserDefinedFunction': Optional[GlueUserDefinedFunction],
    }
)


GlueGetUserDefinedFunctionsResponse = TypedDict(
    'GlueGetUserDefinedFunctionsResponse', {
        'UserDefinedFunctionList': Optional[List[GlueUserDefinedFunction]],
        'Token': Optional[str],
    }
)


GlueImportCatalogToGlueResponse = TypedDict(
    'GlueImportCatalogToGlueResponse', {
    }
)


GlueListCrawlersResponse = TypedDict(
    'GlueListCrawlersResponse', {
        'CrawlerNameList': Optional[List[str]],
        'Token': Optional[str],
    }
)


GlueListDevEndpointsResponse = TypedDict(
    'GlueListDevEndpointsResponse', {
        'DevEndpointNameList': Optional[List[str]],
        'GenericString': Optional[str],
    }
)


GlueListJobsResponse = TypedDict(
    'GlueListJobsResponse', {
        'JobNameList': Optional[List[str]],
        'GenericString': Optional[str],
    }
)


GlueListTriggersResponse = TypedDict(
    'GlueListTriggersResponse', {
        'TriggerNameList': Optional[List[str]],
        'GenericString': Optional[str],
    }
)


GluePutDataCatalogEncryptionSettingsResponse = TypedDict(
    'GluePutDataCatalogEncryptionSettingsResponse', {
    }
)


GluePutResourcePolicyResponse = TypedDict(
    'GluePutResourcePolicyResponse', {
        'HashString': Optional[str],
    }
)


GlueJobBookmarkEntry = TypedDict(
    'GlueJobBookmarkEntry', {
        'JobName': Optional[str],
        'IntegerValue': Optional[int],
        'IntegerValue': Optional[int],
        'IntegerValue': Optional[int],
        'JsonValue': Optional[str],
    }
)


GlueResetJobBookmarkResponse = TypedDict(
    'GlueResetJobBookmarkResponse', {
        'JobBookmarkEntry': Optional[GlueJobBookmarkEntry],
    }
)


GlueStartCrawlerResponse = TypedDict(
    'GlueStartCrawlerResponse', {
    }
)


GlueStartCrawlerScheduleResponse = TypedDict(
    'GlueStartCrawlerScheduleResponse', {
    }
)


GlueStartJobRunResponse = TypedDict(
    'GlueStartJobRunResponse', {
        'IdString': Optional[str],
    }
)


GlueStartTriggerResponse = TypedDict(
    'GlueStartTriggerResponse', {
        'NameString': Optional[str],
    }
)


GlueStopCrawlerResponse = TypedDict(
    'GlueStopCrawlerResponse', {
    }
)


GlueStopCrawlerScheduleResponse = TypedDict(
    'GlueStopCrawlerScheduleResponse', {
    }
)


GlueStopTriggerResponse = TypedDict(
    'GlueStopTriggerResponse', {
        'NameString': Optional[str],
    }
)


GlueTagResourceResponse = TypedDict(
    'GlueTagResourceResponse', {
    }
)


GlueUntagResourceResponse = TypedDict(
    'GlueUntagResourceResponse', {
    }
)


GlueUpdateGrokClassifierRequest = TypedDict(
    'GlueUpdateGrokClassifierRequest', {
        'NameString': str,
        'Classification': Optional[str],
        'GrokPattern': Optional[str],
        'CustomPatterns': Optional[str],
    }
)


GlueUpdateXMLClassifierRequest = TypedDict(
    'GlueUpdateXMLClassifierRequest', {
        'NameString': str,
        'Classification': Optional[str],
        'RowTag': Optional[str],
    }
)


GlueUpdateJsonClassifierRequest = TypedDict(
    'GlueUpdateJsonClassifierRequest', {
        'NameString': str,
        'JsonPath': Optional[str],
    }
)


GlueUpdateCsvClassifierRequest = TypedDict(
    'GlueUpdateCsvClassifierRequest', {
        'NameString': str,
        'CsvColumnDelimiter': Optional[str],
        'CsvQuoteSymbol': Optional[str],
        'CsvHeaderOption': Optional[str],
        'CsvHeader': Optional[List[str]],
        'NullableBoolean': Optional[bool],
        'NullableBoolean': Optional[bool],
    }
)


GlueUpdateClassifierResponse = TypedDict(
    'GlueUpdateClassifierResponse', {
    }
)


GlueUpdateConnectionResponse = TypedDict(
    'GlueUpdateConnectionResponse', {
    }
)


GlueUpdateCrawlerResponse = TypedDict(
    'GlueUpdateCrawlerResponse', {
    }
)


GlueUpdateCrawlerScheduleResponse = TypedDict(
    'GlueUpdateCrawlerScheduleResponse', {
    }
)


GlueUpdateDatabaseResponse = TypedDict(
    'GlueUpdateDatabaseResponse', {
    }
)


GlueDevEndpointCustomLibraries = TypedDict(
    'GlueDevEndpointCustomLibraries', {
        'GenericString': Optional[str],
        'GenericString': Optional[str],
    }
)


GlueUpdateDevEndpointResponse = TypedDict(
    'GlueUpdateDevEndpointResponse', {
    }
)


GlueJobUpdate = TypedDict(
    'GlueJobUpdate', {
        'DescriptionString': Optional[str],
        'UriString': Optional[str],
        'RoleString': Optional[str],
        'ExecutionProperty': Optional[GlueExecutionProperty],
        'JobCommand': Optional[GlueJobCommand],
        'GenericMap': Optional[Dict[str, str]],
        'ConnectionsList': Optional[GlueConnectionsList],
        'MaxRetries': Optional[int],
        'IntegerValue': Optional[int],
        'Timeout': Optional[int],
        'NullableDouble': Optional[float],
        'WorkerType': Optional[str],
        'NullableInteger': Optional[int],
        'NameString': Optional[str],
        'NotificationProperty': Optional[GlueNotificationProperty],
    }
)


GlueUpdateJobResponse = TypedDict(
    'GlueUpdateJobResponse', {
        'NameString': Optional[str],
    }
)


GlueUpdatePartitionResponse = TypedDict(
    'GlueUpdatePartitionResponse', {
    }
)


GlueUpdateTableResponse = TypedDict(
    'GlueUpdateTableResponse', {
    }
)


GlueTriggerUpdate = TypedDict(
    'GlueTriggerUpdate', {
        'NameString': Optional[str],
        'DescriptionString': Optional[str],
        'GenericString': Optional[str],
        'ActionList': Optional[List[GlueAction]],
        'Predicate': Optional[GluePredicate],
    }
)


GlueUpdateTriggerResponse = TypedDict(
    'GlueUpdateTriggerResponse', {
        'Trigger': Optional[GlueTrigger],
    }
)


GlueUpdateUserDefinedFunctionResponse = TypedDict(
    'GlueUpdateUserDefinedFunctionResponse', {
    }
)


class Greengrass(BaseClient):
    def associate_role_to_group(self, *,
        GroupId: str,
        RoleArn: str = ...
    ) -> GreengrassAssociateRoleToGroupResponse: ...

    def associate_service_role_to_account(self, *,
        RoleArn: str = ...
    ) -> GreengrassAssociateServiceRoleToAccountResponse: ...

    def create_connector_definition(self, *,
        AmznClientToken: str = ...,
        InitialVersion: GreengrassConnectorDefinitionVersion = ...,
        Name: str = ...,
        tags: Dict[str, str] = ...
    ) -> GreengrassCreateConnectorDefinitionResponse: ...

    def create_connector_definition_version(self, *,
        ConnectorDefinitionId: str,
        AmznClientToken: str = ...,
        Connectors: List[GreengrassConnector] = ...
    ) -> GreengrassCreateConnectorDefinitionVersionResponse: ...

    def create_core_definition(self, *,
        AmznClientToken: str = ...,
        InitialVersion: GreengrassCoreDefinitionVersion = ...,
        Name: str = ...,
        tags: Dict[str, str] = ...
    ) -> GreengrassCreateCoreDefinitionResponse: ...

    def create_core_definition_version(self, *,
        CoreDefinitionId: str,
        AmznClientToken: str = ...,
        Cores: List[GreengrassCore] = ...
    ) -> GreengrassCreateCoreDefinitionVersionResponse: ...

    def create_deployment(self, *,
        GroupId: str,
        AmznClientToken: str = ...,
        DeploymentId: str = ...,
        DeploymentType: str = ...,
        GroupVersionId: str = ...
    ) -> GreengrassCreateDeploymentResponse: ...

    def create_device_definition(self, *,
        AmznClientToken: str = ...,
        InitialVersion: GreengrassDeviceDefinitionVersion = ...,
        Name: str = ...,
        tags: Dict[str, str] = ...
    ) -> GreengrassCreateDeviceDefinitionResponse: ...

    def create_device_definition_version(self, *,
        DeviceDefinitionId: str,
        AmznClientToken: str = ...,
        Devices: List[GreengrassDevice] = ...
    ) -> GreengrassCreateDeviceDefinitionVersionResponse: ...

    def create_function_definition(self, *,
        AmznClientToken: str = ...,
        InitialVersion: GreengrassFunctionDefinitionVersion = ...,
        Name: str = ...,
        tags: Dict[str, str] = ...
    ) -> GreengrassCreateFunctionDefinitionResponse: ...

    def create_function_definition_version(self, *,
        FunctionDefinitionId: str,
        AmznClientToken: str = ...,
        DefaultConfig: GreengrassFunctionDefaultConfig = ...,
        Functions: List[GreengrassFunction] = ...
    ) -> GreengrassCreateFunctionDefinitionVersionResponse: ...

    def create_group(self, *,
        AmznClientToken: str = ...,
        InitialVersion: GreengrassGroupVersion = ...,
        Name: str = ...,
        tags: Dict[str, str] = ...
    ) -> GreengrassCreateGroupResponse: ...

    def create_group_certificate_authority(self, *,
        GroupId: str,
        AmznClientToken: str = ...
    ) -> GreengrassCreateGroupCertificateAuthorityResponse: ...

    def create_group_version(self, *,
        GroupId: str,
        AmznClientToken: str = ...,
        ConnectorDefinitionVersionArn: str = ...,
        CoreDefinitionVersionArn: str = ...,
        DeviceDefinitionVersionArn: str = ...,
        FunctionDefinitionVersionArn: str = ...,
        LoggerDefinitionVersionArn: str = ...,
        ResourceDefinitionVersionArn: str = ...,
        SubscriptionDefinitionVersionArn: str = ...
    ) -> GreengrassCreateGroupVersionResponse: ...

    def create_logger_definition(self, *,
        AmznClientToken: str = ...,
        InitialVersion: GreengrassLoggerDefinitionVersion = ...,
        Name: str = ...,
        tags: Dict[str, str] = ...
    ) -> GreengrassCreateLoggerDefinitionResponse: ...

    def create_logger_definition_version(self, *,
        LoggerDefinitionId: str,
        AmznClientToken: str = ...,
        Loggers: List[GreengrassLogger] = ...
    ) -> GreengrassCreateLoggerDefinitionVersionResponse: ...

    def create_resource_definition(self, *,
        AmznClientToken: str = ...,
        InitialVersion: GreengrassResourceDefinitionVersion = ...,
        Name: str = ...,
        tags: Dict[str, str] = ...
    ) -> GreengrassCreateResourceDefinitionResponse: ...

    def create_resource_definition_version(self, *,
        ResourceDefinitionId: str,
        AmznClientToken: str = ...,
        Resources: List[GreengrassResource] = ...
    ) -> GreengrassCreateResourceDefinitionVersionResponse: ...

    def create_software_update_job(self, *,
        AmznClientToken: str = ...,
        S3UrlSignerRole: str = ...,
        SoftwareToUpdate: str = ...,
        UpdateAgentLogLevel: str = ...,
        UpdateTargets: List[str] = ...,
        UpdateTargetsArchitecture: str = ...,
        UpdateTargetsOperatingSystem: str = ...
    ) -> GreengrassCreateSoftwareUpdateJobResponse: ...

    def create_subscription_definition(self, *,
        AmznClientToken: str = ...,
        InitialVersion: GreengrassSubscriptionDefinitionVersion = ...,
        Name: str = ...,
        tags: Dict[str, str] = ...
    ) -> GreengrassCreateSubscriptionDefinitionResponse: ...

    def create_subscription_definition_version(self, *,
        SubscriptionDefinitionId: str,
        AmznClientToken: str = ...,
        Subscriptions: List[GreengrassSubscription] = ...
    ) -> GreengrassCreateSubscriptionDefinitionVersionResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        tags: Dict[str, str]
    ): ...

    def delete_connector_definition(self, *,
        ConnectorDefinitionId: str
    ) -> GreengrassDeleteConnectorDefinitionResponse: ...

    def delete_core_definition(self, *,
        CoreDefinitionId: str
    ) -> GreengrassDeleteCoreDefinitionResponse: ...

    def delete_device_definition(self, *,
        DeviceDefinitionId: str
    ) -> GreengrassDeleteDeviceDefinitionResponse: ...

    def delete_function_definition(self, *,
        FunctionDefinitionId: str
    ) -> GreengrassDeleteFunctionDefinitionResponse: ...

    def delete_group(self, *,
        GroupId: str
    ) -> GreengrassDeleteGroupResponse: ...

    def delete_logger_definition(self, *,
        LoggerDefinitionId: str
    ) -> GreengrassDeleteLoggerDefinitionResponse: ...

    def delete_resource_definition(self, *,
        ResourceDefinitionId: str
    ) -> GreengrassDeleteResourceDefinitionResponse: ...

    def delete_subscription_definition(self, *,
        SubscriptionDefinitionId: str
    ) -> GreengrassDeleteSubscriptionDefinitionResponse: ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ): ...

    def disassociate_role_from_group(self, *,
        GroupId: str
    ) -> GreengrassDisassociateRoleFromGroupResponse: ...

    def disassociate_service_role_from_account(self) -> GreengrassDisassociateServiceRoleFromAccountResponse: ...

    def get_associated_role(self, *,
        GroupId: str
    ) -> GreengrassGetAssociatedRoleResponse: ...

    def get_bulk_deployment_status(self, *,
        BulkDeploymentId: str
    ) -> GreengrassGetBulkDeploymentStatusResponse: ...

    def get_connectivity_info(self, *,
        ThingName: str
    ) -> GreengrassGetConnectivityInfoResponse: ...

    def get_connector_definition(self, *,
        ConnectorDefinitionId: str
    ) -> GreengrassGetConnectorDefinitionResponse: ...

    def get_connector_definition_version(self, *,
        ConnectorDefinitionId: str,
        ConnectorDefinitionVersionId: str,
        NextToken: str = ...
    ) -> GreengrassGetConnectorDefinitionVersionResponse: ...

    def get_core_definition(self, *,
        CoreDefinitionId: str
    ) -> GreengrassGetCoreDefinitionResponse: ...

    def get_core_definition_version(self, *,
        CoreDefinitionId: str,
        CoreDefinitionVersionId: str
    ) -> GreengrassGetCoreDefinitionVersionResponse: ...

    def get_deployment_status(self, *,
        DeploymentId: str,
        GroupId: str
    ) -> GreengrassGetDeploymentStatusResponse: ...

    def get_device_definition(self, *,
        DeviceDefinitionId: str
    ) -> GreengrassGetDeviceDefinitionResponse: ...

    def get_device_definition_version(self, *,
        DeviceDefinitionId: str,
        DeviceDefinitionVersionId: str,
        NextToken: str = ...
    ) -> GreengrassGetDeviceDefinitionVersionResponse: ...

    def get_function_definition(self, *,
        FunctionDefinitionId: str
    ) -> GreengrassGetFunctionDefinitionResponse: ...

    def get_function_definition_version(self, *,
        FunctionDefinitionId: str,
        FunctionDefinitionVersionId: str,
        NextToken: str = ...
    ) -> GreengrassGetFunctionDefinitionVersionResponse: ...

    def get_group(self, *,
        GroupId: str
    ) -> GreengrassGetGroupResponse: ...

    def get_group_certificate_authority(self, *,
        CertificateAuthorityId: str,
        GroupId: str
    ) -> GreengrassGetGroupCertificateAuthorityResponse: ...

    def get_group_certificate_configuration(self, *,
        GroupId: str
    ) -> GreengrassGetGroupCertificateConfigurationResponse: ...

    def get_group_version(self, *,
        GroupId: str,
        GroupVersionId: str
    ) -> GreengrassGetGroupVersionResponse: ...

    def get_logger_definition(self, *,
        LoggerDefinitionId: str
    ) -> GreengrassGetLoggerDefinitionResponse: ...

    def get_logger_definition_version(self, *,
        LoggerDefinitionId: str,
        LoggerDefinitionVersionId: str,
        NextToken: str = ...
    ) -> GreengrassGetLoggerDefinitionVersionResponse: ...

    def get_resource_definition(self, *,
        ResourceDefinitionId: str
    ) -> GreengrassGetResourceDefinitionResponse: ...

    def get_resource_definition_version(self, *,
        ResourceDefinitionId: str,
        ResourceDefinitionVersionId: str
    ) -> GreengrassGetResourceDefinitionVersionResponse: ...

    def get_service_role_for_account(self) -> GreengrassGetServiceRoleForAccountResponse: ...

    def get_subscription_definition(self, *,
        SubscriptionDefinitionId: str
    ) -> GreengrassGetSubscriptionDefinitionResponse: ...

    def get_subscription_definition_version(self, *,
        SubscriptionDefinitionId: str,
        SubscriptionDefinitionVersionId: str,
        NextToken: str = ...
    ) -> GreengrassGetSubscriptionDefinitionVersionResponse: ...

    def list_bulk_deployment_detailed_reports(self, *,
        BulkDeploymentId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListBulkDeploymentDetailedReportsResponse: ...

    def list_bulk_deployments(self, *,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListBulkDeploymentsResponse: ...

    def list_connector_definition_versions(self, *,
        ConnectorDefinitionId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListConnectorDefinitionVersionsResponse: ...

    def list_connector_definitions(self, *,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListConnectorDefinitionsResponse: ...

    def list_core_definition_versions(self, *,
        CoreDefinitionId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListCoreDefinitionVersionsResponse: ...

    def list_core_definitions(self, *,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListCoreDefinitionsResponse: ...

    def list_deployments(self, *,
        GroupId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListDeploymentsResponse: ...

    def list_device_definition_versions(self, *,
        DeviceDefinitionId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListDeviceDefinitionVersionsResponse: ...

    def list_device_definitions(self, *,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListDeviceDefinitionsResponse: ...

    def list_function_definition_versions(self, *,
        FunctionDefinitionId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListFunctionDefinitionVersionsResponse: ...

    def list_function_definitions(self, *,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListFunctionDefinitionsResponse: ...

    def list_group_certificate_authorities(self, *,
        GroupId: str
    ) -> GreengrassListGroupCertificateAuthoritiesResponse: ...

    def list_group_versions(self, *,
        GroupId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListGroupVersionsResponse: ...

    def list_groups(self, *,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListGroupsResponse: ...

    def list_logger_definition_versions(self, *,
        LoggerDefinitionId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListLoggerDefinitionVersionsResponse: ...

    def list_logger_definitions(self, *,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListLoggerDefinitionsResponse: ...

    def list_resource_definition_versions(self, *,
        ResourceDefinitionId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListResourceDefinitionVersionsResponse: ...

    def list_resource_definitions(self, *,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListResourceDefinitionsResponse: ...

    def list_subscription_definition_versions(self, *,
        SubscriptionDefinitionId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListSubscriptionDefinitionVersionsResponse: ...

    def list_subscription_definitions(self, *,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListSubscriptionDefinitionsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> GreengrassListTagsForResourceResponse: ...

    def reset_deployments(self, *,
        GroupId: str,
        AmznClientToken: str = ...,
        Force: bool = ...
    ) -> GreengrassResetDeploymentsResponse: ...

    def start_bulk_deployment(self, *,
        AmznClientToken: str = ...,
        ExecutionRoleArn: str = ...,
        InputFileUri: str = ...,
        tags: Dict[str, str] = ...
    ) -> GreengrassStartBulkDeploymentResponse: ...

    def stop_bulk_deployment(self, *,
        BulkDeploymentId: str
    ) -> GreengrassStopBulkDeploymentResponse: ...

    def update_connectivity_info(self, *,
        ThingName: str,
        ConnectivityInfo: List[GreengrassConnectivityInfo] = ...
    ) -> GreengrassUpdateConnectivityInfoResponse: ...

    def update_connector_definition(self, *,
        ConnectorDefinitionId: str,
        Name: str = ...
    ) -> GreengrassUpdateConnectorDefinitionResponse: ...

    def update_core_definition(self, *,
        CoreDefinitionId: str,
        Name: str = ...
    ) -> GreengrassUpdateCoreDefinitionResponse: ...

    def update_device_definition(self, *,
        DeviceDefinitionId: str,
        Name: str = ...
    ) -> GreengrassUpdateDeviceDefinitionResponse: ...

    def update_function_definition(self, *,
        FunctionDefinitionId: str,
        Name: str = ...
    ) -> GreengrassUpdateFunctionDefinitionResponse: ...

    def update_group(self, *,
        GroupId: str,
        Name: str = ...
    ) -> GreengrassUpdateGroupResponse: ...

    def update_group_certificate_configuration(self, *,
        GroupId: str,
        CertificateExpiryInMilliseconds: str = ...
    ) -> GreengrassUpdateGroupCertificateConfigurationResponse: ...

    def update_logger_definition(self, *,
        LoggerDefinitionId: str,
        Name: str = ...
    ) -> GreengrassUpdateLoggerDefinitionResponse: ...

    def update_resource_definition(self, *,
        ResourceDefinitionId: str,
        Name: str = ...
    ) -> GreengrassUpdateResourceDefinitionResponse: ...

    def update_subscription_definition(self, *,
        SubscriptionDefinitionId: str,
        Name: str = ...
    ) -> GreengrassUpdateSubscriptionDefinitionResponse: ...


GreengrassAssociateRoleToGroupResponse = TypedDict(
    'GreengrassAssociateRoleToGroupResponse', {
        '__string': Optional[str],
    }
)


GreengrassAssociateServiceRoleToAccountResponse = TypedDict(
    'GreengrassAssociateServiceRoleToAccountResponse', {
        '__string': Optional[str],
    }
)


GreengrassConnector = TypedDict(
    'GreengrassConnector', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__mapOf__string': Optional[Dict[str, str]],
    }
)


GreengrassConnectorDefinitionVersion = TypedDict(
    'GreengrassConnectorDefinitionVersion', {
        '__listOfConnector': Optional[List[GreengrassConnector]],
    }
)


GreengrassCreateConnectorDefinitionResponse = TypedDict(
    'GreengrassCreateConnectorDefinitionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassCreateConnectorDefinitionVersionResponse = TypedDict(
    'GreengrassCreateConnectorDefinitionVersionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassCore = TypedDict(
    'GreengrassCore', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
    }
)


GreengrassCoreDefinitionVersion = TypedDict(
    'GreengrassCoreDefinitionVersion', {
        '__listOfCore': Optional[List[GreengrassCore]],
    }
)


GreengrassCreateCoreDefinitionResponse = TypedDict(
    'GreengrassCreateCoreDefinitionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassCreateCoreDefinitionVersionResponse = TypedDict(
    'GreengrassCreateCoreDefinitionVersionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassCreateDeploymentResponse = TypedDict(
    'GreengrassCreateDeploymentResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassDevice = TypedDict(
    'GreengrassDevice', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
    }
)


GreengrassDeviceDefinitionVersion = TypedDict(
    'GreengrassDeviceDefinitionVersion', {
        '__listOfDevice': Optional[List[GreengrassDevice]],
    }
)


GreengrassCreateDeviceDefinitionResponse = TypedDict(
    'GreengrassCreateDeviceDefinitionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassCreateDeviceDefinitionVersionResponse = TypedDict(
    'GreengrassCreateDeviceDefinitionVersionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassFunctionRunAsConfig = TypedDict(
    'GreengrassFunctionRunAsConfig', {
        '__integer': Optional[int],
        '__integer': Optional[int],
    }
)


GreengrassFunctionDefaultExecutionConfig = TypedDict(
    'GreengrassFunctionDefaultExecutionConfig', {
        'FunctionIsolationMode': Optional[str],
        'FunctionRunAsConfig': Optional[GreengrassFunctionRunAsConfig],
    }
)


GreengrassFunctionDefaultConfig = TypedDict(
    'GreengrassFunctionDefaultConfig', {
        'FunctionDefaultExecutionConfig': Optional[GreengrassFunctionDefaultExecutionConfig],
    }
)


GreengrassFunctionExecutionConfig = TypedDict(
    'GreengrassFunctionExecutionConfig', {
        'FunctionIsolationMode': Optional[str],
        'FunctionRunAsConfig': Optional[GreengrassFunctionRunAsConfig],
    }
)


GreengrassResourceAccessPolicy = TypedDict(
    'GreengrassResourceAccessPolicy', {
        'Permission': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassFunctionConfigurationEnvironment = TypedDict(
    'GreengrassFunctionConfigurationEnvironment', {
        '__boolean': Optional[bool],
        'FunctionExecutionConfig': Optional[GreengrassFunctionExecutionConfig],
        '__listOfResourceAccessPolicy': Optional[List[GreengrassResourceAccessPolicy]],
        '__mapOf__string': Optional[Dict[str, str]],
    }
)


GreengrassFunctionConfiguration = TypedDict(
    'GreengrassFunctionConfiguration', {
        'EncodingType': Optional[str],
        'FunctionConfigurationEnvironment': Optional[GreengrassFunctionConfigurationEnvironment],
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
        '__boolean': Optional[bool],
        '__integer': Optional[int],
    }
)


GreengrassFunction = TypedDict(
    'GreengrassFunction', {
        '__string': Optional[str],
        'FunctionConfiguration': Optional[GreengrassFunctionConfiguration],
        '__string': Optional[str],
    }
)


GreengrassFunctionDefinitionVersion = TypedDict(
    'GreengrassFunctionDefinitionVersion', {
        'FunctionDefaultConfig': Optional[GreengrassFunctionDefaultConfig],
        '__listOfFunction': Optional[List[GreengrassFunction]],
    }
)


GreengrassCreateFunctionDefinitionResponse = TypedDict(
    'GreengrassCreateFunctionDefinitionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassCreateFunctionDefinitionVersionResponse = TypedDict(
    'GreengrassCreateFunctionDefinitionVersionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassGroupVersion = TypedDict(
    'GreengrassGroupVersion', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassCreateGroupResponse = TypedDict(
    'GreengrassCreateGroupResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassCreateGroupCertificateAuthorityResponse = TypedDict(
    'GreengrassCreateGroupCertificateAuthorityResponse', {
        '__string': Optional[str],
    }
)


GreengrassCreateGroupVersionResponse = TypedDict(
    'GreengrassCreateGroupVersionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassLogger = TypedDict(
    'GreengrassLogger', {
        'LoggerComponent': Optional[str],
        '__string': Optional[str],
        'LoggerLevel': Optional[str],
        '__integer': Optional[int],
        'LoggerType': Optional[str],
    }
)


GreengrassLoggerDefinitionVersion = TypedDict(
    'GreengrassLoggerDefinitionVersion', {
        '__listOfLogger': Optional[List[GreengrassLogger]],
    }
)


GreengrassCreateLoggerDefinitionResponse = TypedDict(
    'GreengrassCreateLoggerDefinitionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassCreateLoggerDefinitionVersionResponse = TypedDict(
    'GreengrassCreateLoggerDefinitionVersionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassGroupOwnerSetting = TypedDict(
    'GreengrassGroupOwnerSetting', {
        '__boolean': Optional[bool],
        '__string': Optional[str],
    }
)


GreengrassLocalDeviceResourceData = TypedDict(
    'GreengrassLocalDeviceResourceData', {
        'GroupOwnerSetting': Optional[GreengrassGroupOwnerSetting],
        '__string': Optional[str],
    }
)


GreengrassLocalVolumeResourceData = TypedDict(
    'GreengrassLocalVolumeResourceData', {
        '__string': Optional[str],
        'GroupOwnerSetting': Optional[GreengrassGroupOwnerSetting],
        '__string': Optional[str],
    }
)


GreengrassS3MachineLearningModelResourceData = TypedDict(
    'GreengrassS3MachineLearningModelResourceData', {
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassSageMakerMachineLearningModelResourceData = TypedDict(
    'GreengrassSageMakerMachineLearningModelResourceData', {
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassSecretsManagerSecretResourceData = TypedDict(
    'GreengrassSecretsManagerSecretResourceData', {
        '__string': Optional[str],
        '__listOf__string': Optional[List[str]],
    }
)


GreengrassResourceDataContainer = TypedDict(
    'GreengrassResourceDataContainer', {
        'LocalDeviceResourceData': Optional[GreengrassLocalDeviceResourceData],
        'LocalVolumeResourceData': Optional[GreengrassLocalVolumeResourceData],
        'S3MachineLearningModelResourceData': Optional[GreengrassS3MachineLearningModelResourceData],
        'SageMakerMachineLearningModelResourceData': Optional[GreengrassSageMakerMachineLearningModelResourceData],
        'SecretsManagerSecretResourceData': Optional[GreengrassSecretsManagerSecretResourceData],
    }
)


GreengrassResource = TypedDict(
    'GreengrassResource', {
        '__string': Optional[str],
        '__string': Optional[str],
        'ResourceDataContainer': Optional[GreengrassResourceDataContainer],
    }
)


GreengrassResourceDefinitionVersion = TypedDict(
    'GreengrassResourceDefinitionVersion', {
        '__listOfResource': Optional[List[GreengrassResource]],
    }
)


GreengrassCreateResourceDefinitionResponse = TypedDict(
    'GreengrassCreateResourceDefinitionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassCreateResourceDefinitionVersionResponse = TypedDict(
    'GreengrassCreateResourceDefinitionVersionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassCreateSoftwareUpdateJobResponse = TypedDict(
    'GreengrassCreateSoftwareUpdateJobResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassSubscription = TypedDict(
    'GreengrassSubscription', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassSubscriptionDefinitionVersion = TypedDict(
    'GreengrassSubscriptionDefinitionVersion', {
        '__listOfSubscription': Optional[List[GreengrassSubscription]],
    }
)


GreengrassCreateSubscriptionDefinitionResponse = TypedDict(
    'GreengrassCreateSubscriptionDefinitionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassCreateSubscriptionDefinitionVersionResponse = TypedDict(
    'GreengrassCreateSubscriptionDefinitionVersionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassDeleteConnectorDefinitionResponse = TypedDict(
    'GreengrassDeleteConnectorDefinitionResponse', {
    }
)


GreengrassDeleteCoreDefinitionResponse = TypedDict(
    'GreengrassDeleteCoreDefinitionResponse', {
    }
)


GreengrassDeleteDeviceDefinitionResponse = TypedDict(
    'GreengrassDeleteDeviceDefinitionResponse', {
    }
)


GreengrassDeleteFunctionDefinitionResponse = TypedDict(
    'GreengrassDeleteFunctionDefinitionResponse', {
    }
)


GreengrassDeleteGroupResponse = TypedDict(
    'GreengrassDeleteGroupResponse', {
    }
)


GreengrassDeleteLoggerDefinitionResponse = TypedDict(
    'GreengrassDeleteLoggerDefinitionResponse', {
    }
)


GreengrassDeleteResourceDefinitionResponse = TypedDict(
    'GreengrassDeleteResourceDefinitionResponse', {
    }
)


GreengrassDeleteSubscriptionDefinitionResponse = TypedDict(
    'GreengrassDeleteSubscriptionDefinitionResponse', {
    }
)


GreengrassDisassociateRoleFromGroupResponse = TypedDict(
    'GreengrassDisassociateRoleFromGroupResponse', {
        '__string': Optional[str],
    }
)


GreengrassDisassociateServiceRoleFromAccountResponse = TypedDict(
    'GreengrassDisassociateServiceRoleFromAccountResponse', {
        '__string': Optional[str],
    }
)


GreengrassGetAssociatedRoleResponse = TypedDict(
    'GreengrassGetAssociatedRoleResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassBulkDeploymentMetrics = TypedDict(
    'GreengrassBulkDeploymentMetrics', {
        '__integer': Optional[int],
        '__integer': Optional[int],
        '__integer': Optional[int],
    }
)


GreengrassErrorDetail = TypedDict(
    'GreengrassErrorDetail', {
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassGetBulkDeploymentStatusResponse = TypedDict(
    'GreengrassGetBulkDeploymentStatusResponse', {
        'BulkDeploymentMetrics': Optional[GreengrassBulkDeploymentMetrics],
        'BulkDeploymentStatus': Optional[str],
        '__string': Optional[str],
        'ErrorDetails': Optional[List[GreengrassErrorDetail]],
        '__string': Optional[str],
        '__mapOf__string': Optional[Dict[str, str]],
    }
)


GreengrassConnectivityInfo = TypedDict(
    'GreengrassConnectivityInfo', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
    }
)


GreengrassGetConnectivityInfoResponse = TypedDict(
    'GreengrassGetConnectivityInfoResponse', {
        '__listOfConnectivityInfo': Optional[List[GreengrassConnectivityInfo]],
        '__string': Optional[str],
    }
)


GreengrassGetConnectorDefinitionResponse = TypedDict(
    'GreengrassGetConnectorDefinitionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__mapOf__string': Optional[Dict[str, str]],
    }
)


GreengrassGetConnectorDefinitionVersionResponse = TypedDict(
    'GreengrassGetConnectorDefinitionVersionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        'ConnectorDefinitionVersion': Optional[GreengrassConnectorDefinitionVersion],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassGetCoreDefinitionResponse = TypedDict(
    'GreengrassGetCoreDefinitionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__mapOf__string': Optional[Dict[str, str]],
    }
)


GreengrassGetCoreDefinitionVersionResponse = TypedDict(
    'GreengrassGetCoreDefinitionVersionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        'CoreDefinitionVersion': Optional[GreengrassCoreDefinitionVersion],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassGetDeploymentStatusResponse = TypedDict(
    'GreengrassGetDeploymentStatusResponse', {
        '__string': Optional[str],
        'DeploymentType': Optional[str],
        'ErrorDetails': Optional[List[GreengrassErrorDetail]],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassGetDeviceDefinitionResponse = TypedDict(
    'GreengrassGetDeviceDefinitionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__mapOf__string': Optional[Dict[str, str]],
    }
)


GreengrassGetDeviceDefinitionVersionResponse = TypedDict(
    'GreengrassGetDeviceDefinitionVersionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        'DeviceDefinitionVersion': Optional[GreengrassDeviceDefinitionVersion],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassGetFunctionDefinitionResponse = TypedDict(
    'GreengrassGetFunctionDefinitionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__mapOf__string': Optional[Dict[str, str]],
    }
)


GreengrassGetFunctionDefinitionVersionResponse = TypedDict(
    'GreengrassGetFunctionDefinitionVersionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        'FunctionDefinitionVersion': Optional[GreengrassFunctionDefinitionVersion],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassGetGroupResponse = TypedDict(
    'GreengrassGetGroupResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__mapOf__string': Optional[Dict[str, str]],
    }
)


GreengrassGetGroupCertificateAuthorityResponse = TypedDict(
    'GreengrassGetGroupCertificateAuthorityResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassGetGroupCertificateConfigurationResponse = TypedDict(
    'GreengrassGetGroupCertificateConfigurationResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassGetGroupVersionResponse = TypedDict(
    'GreengrassGetGroupVersionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        'GroupVersion': Optional[GreengrassGroupVersion],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassGetLoggerDefinitionResponse = TypedDict(
    'GreengrassGetLoggerDefinitionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__mapOf__string': Optional[Dict[str, str]],
    }
)


GreengrassGetLoggerDefinitionVersionResponse = TypedDict(
    'GreengrassGetLoggerDefinitionVersionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        'LoggerDefinitionVersion': Optional[GreengrassLoggerDefinitionVersion],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassGetResourceDefinitionResponse = TypedDict(
    'GreengrassGetResourceDefinitionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__mapOf__string': Optional[Dict[str, str]],
    }
)


GreengrassGetResourceDefinitionVersionResponse = TypedDict(
    'GreengrassGetResourceDefinitionVersionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        'ResourceDefinitionVersion': Optional[GreengrassResourceDefinitionVersion],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassGetServiceRoleForAccountResponse = TypedDict(
    'GreengrassGetServiceRoleForAccountResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassGetSubscriptionDefinitionResponse = TypedDict(
    'GreengrassGetSubscriptionDefinitionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__mapOf__string': Optional[Dict[str, str]],
    }
)


GreengrassGetSubscriptionDefinitionVersionResponse = TypedDict(
    'GreengrassGetSubscriptionDefinitionVersionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        'SubscriptionDefinitionVersion': Optional[GreengrassSubscriptionDefinitionVersion],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassBulkDeploymentResult = TypedDict(
    'GreengrassBulkDeploymentResult', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'DeploymentType': Optional[str],
        'ErrorDetails': Optional[List[GreengrassErrorDetail]],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassListBulkDeploymentDetailedReportsResponse = TypedDict(
    'GreengrassListBulkDeploymentDetailedReportsResponse', {
        'BulkDeploymentResults': Optional[List[GreengrassBulkDeploymentResult]],
        '__string': Optional[str],
    }
)


GreengrassBulkDeployment = TypedDict(
    'GreengrassBulkDeployment', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassListBulkDeploymentsResponse = TypedDict(
    'GreengrassListBulkDeploymentsResponse', {
        'BulkDeployments': Optional[List[GreengrassBulkDeployment]],
        '__string': Optional[str],
    }
)


GreengrassVersionInformation = TypedDict(
    'GreengrassVersionInformation', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassListConnectorDefinitionVersionsResponse = TypedDict(
    'GreengrassListConnectorDefinitionVersionsResponse', {
        '__string': Optional[str],
        '__listOfVersionInformation': Optional[List[GreengrassVersionInformation]],
    }
)


GreengrassDefinitionInformation = TypedDict(
    'GreengrassDefinitionInformation', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'Tags': Optional[Dict[str, str]],
    }
)


GreengrassListConnectorDefinitionsResponse = TypedDict(
    'GreengrassListConnectorDefinitionsResponse', {
        '__listOfDefinitionInformation': Optional[List[GreengrassDefinitionInformation]],
        '__string': Optional[str],
    }
)


GreengrassListCoreDefinitionVersionsResponse = TypedDict(
    'GreengrassListCoreDefinitionVersionsResponse', {
        '__string': Optional[str],
        '__listOfVersionInformation': Optional[List[GreengrassVersionInformation]],
    }
)


GreengrassListCoreDefinitionsResponse = TypedDict(
    'GreengrassListCoreDefinitionsResponse', {
        '__listOfDefinitionInformation': Optional[List[GreengrassDefinitionInformation]],
        '__string': Optional[str],
    }
)


GreengrassDeployment = TypedDict(
    'GreengrassDeployment', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'DeploymentType': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassListDeploymentsResponse = TypedDict(
    'GreengrassListDeploymentsResponse', {
        'Deployments': Optional[List[GreengrassDeployment]],
        '__string': Optional[str],
    }
)


GreengrassListDeviceDefinitionVersionsResponse = TypedDict(
    'GreengrassListDeviceDefinitionVersionsResponse', {
        '__string': Optional[str],
        '__listOfVersionInformation': Optional[List[GreengrassVersionInformation]],
    }
)


GreengrassListDeviceDefinitionsResponse = TypedDict(
    'GreengrassListDeviceDefinitionsResponse', {
        '__listOfDefinitionInformation': Optional[List[GreengrassDefinitionInformation]],
        '__string': Optional[str],
    }
)


GreengrassListFunctionDefinitionVersionsResponse = TypedDict(
    'GreengrassListFunctionDefinitionVersionsResponse', {
        '__string': Optional[str],
        '__listOfVersionInformation': Optional[List[GreengrassVersionInformation]],
    }
)


GreengrassListFunctionDefinitionsResponse = TypedDict(
    'GreengrassListFunctionDefinitionsResponse', {
        '__listOfDefinitionInformation': Optional[List[GreengrassDefinitionInformation]],
        '__string': Optional[str],
    }
)


GreengrassGroupCertificateAuthorityProperties = TypedDict(
    'GreengrassGroupCertificateAuthorityProperties', {
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassListGroupCertificateAuthoritiesResponse = TypedDict(
    'GreengrassListGroupCertificateAuthoritiesResponse', {
        '__listOfGroupCertificateAuthorityProperties': Optional[List[GreengrassGroupCertificateAuthorityProperties]],
    }
)


GreengrassListGroupVersionsResponse = TypedDict(
    'GreengrassListGroupVersionsResponse', {
        '__string': Optional[str],
        '__listOfVersionInformation': Optional[List[GreengrassVersionInformation]],
    }
)


GreengrassGroupInformation = TypedDict(
    'GreengrassGroupInformation', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassListGroupsResponse = TypedDict(
    'GreengrassListGroupsResponse', {
        '__listOfGroupInformation': Optional[List[GreengrassGroupInformation]],
        '__string': Optional[str],
    }
)


GreengrassListLoggerDefinitionVersionsResponse = TypedDict(
    'GreengrassListLoggerDefinitionVersionsResponse', {
        '__string': Optional[str],
        '__listOfVersionInformation': Optional[List[GreengrassVersionInformation]],
    }
)


GreengrassListLoggerDefinitionsResponse = TypedDict(
    'GreengrassListLoggerDefinitionsResponse', {
        '__listOfDefinitionInformation': Optional[List[GreengrassDefinitionInformation]],
        '__string': Optional[str],
    }
)


GreengrassListResourceDefinitionVersionsResponse = TypedDict(
    'GreengrassListResourceDefinitionVersionsResponse', {
        '__string': Optional[str],
        '__listOfVersionInformation': Optional[List[GreengrassVersionInformation]],
    }
)


GreengrassListResourceDefinitionsResponse = TypedDict(
    'GreengrassListResourceDefinitionsResponse', {
        '__listOfDefinitionInformation': Optional[List[GreengrassDefinitionInformation]],
        '__string': Optional[str],
    }
)


GreengrassListSubscriptionDefinitionVersionsResponse = TypedDict(
    'GreengrassListSubscriptionDefinitionVersionsResponse', {
        '__string': Optional[str],
        '__listOfVersionInformation': Optional[List[GreengrassVersionInformation]],
    }
)


GreengrassListSubscriptionDefinitionsResponse = TypedDict(
    'GreengrassListSubscriptionDefinitionsResponse', {
        '__listOfDefinitionInformation': Optional[List[GreengrassDefinitionInformation]],
        '__string': Optional[str],
    }
)


GreengrassListTagsForResourceResponse = TypedDict(
    'GreengrassListTagsForResourceResponse', {
        '__mapOf__string': Optional[Dict[str, str]],
    }
)


GreengrassResetDeploymentsResponse = TypedDict(
    'GreengrassResetDeploymentsResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassStartBulkDeploymentResponse = TypedDict(
    'GreengrassStartBulkDeploymentResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassStopBulkDeploymentResponse = TypedDict(
    'GreengrassStopBulkDeploymentResponse', {
    }
)


GreengrassUpdateConnectivityInfoResponse = TypedDict(
    'GreengrassUpdateConnectivityInfoResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassUpdateConnectorDefinitionResponse = TypedDict(
    'GreengrassUpdateConnectorDefinitionResponse', {
    }
)


GreengrassUpdateCoreDefinitionResponse = TypedDict(
    'GreengrassUpdateCoreDefinitionResponse', {
    }
)


GreengrassUpdateDeviceDefinitionResponse = TypedDict(
    'GreengrassUpdateDeviceDefinitionResponse', {
    }
)


GreengrassUpdateFunctionDefinitionResponse = TypedDict(
    'GreengrassUpdateFunctionDefinitionResponse', {
    }
)


GreengrassUpdateGroupResponse = TypedDict(
    'GreengrassUpdateGroupResponse', {
    }
)


GreengrassUpdateGroupCertificateConfigurationResponse = TypedDict(
    'GreengrassUpdateGroupCertificateConfigurationResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GreengrassUpdateLoggerDefinitionResponse = TypedDict(
    'GreengrassUpdateLoggerDefinitionResponse', {
    }
)


GreengrassUpdateResourceDefinitionResponse = TypedDict(
    'GreengrassUpdateResourceDefinitionResponse', {
    }
)


GreengrassUpdateSubscriptionDefinitionResponse = TypedDict(
    'GreengrassUpdateSubscriptionDefinitionResponse', {
    }
)


class GuardDuty(BaseClient):
    def accept_invitation(self, *,
        DetectorId: str,
        InvitationId: str,
        MasterId: str
    ) -> GuardDutyAcceptInvitationResponse: ...

    def archive_findings(self, *,
        DetectorId: str,
        FindingIds: List[str]
    ) -> GuardDutyArchiveFindingsResponse: ...

    def create_detector(self, *,
        Enable: bool,
        ClientToken: str = ...,
        FindingPublishingFrequency: str = ...
    ) -> GuardDutyCreateDetectorResponse: ...

    def create_filter(self, *,
        DetectorId: str,
        FindingCriteria: GuardDutyFindingCriteria,
        Name: str,
        Action: str = ...,
        ClientToken: str = ...,
        Description: str = ...,
        Rank: int = ...
    ) -> GuardDutyCreateFilterResponse: ...

    def create_ip_set(self, *,
        Activate: bool,
        DetectorId: str,
        Format: str,
        Location: str,
        Name: str,
        ClientToken: str = ...
    ) -> GuardDutyCreateIPSetResponse: ...

    def create_members(self, *,
        AccountDetails: List[GuardDutyAccountDetail],
        DetectorId: str
    ) -> GuardDutyCreateMembersResponse: ...

    def create_sample_findings(self, *,
        DetectorId: str,
        FindingTypes: List[str] = ...
    ) -> GuardDutyCreateSampleFindingsResponse: ...

    def create_threat_intel_set(self, *,
        Activate: bool,
        DetectorId: str,
        Format: str,
        Location: str,
        Name: str,
        ClientToken: str = ...
    ) -> GuardDutyCreateThreatIntelSetResponse: ...

    def decline_invitations(self, *,
        AccountIds: List[str]
    ) -> GuardDutyDeclineInvitationsResponse: ...

    def delete_detector(self, *,
        DetectorId: str
    ) -> GuardDutyDeleteDetectorResponse: ...

    def delete_filter(self, *,
        DetectorId: str,
        FilterName: str
    ) -> GuardDutyDeleteFilterResponse: ...

    def delete_ip_set(self, *,
        DetectorId: str,
        IpSetId: str
    ) -> GuardDutyDeleteIPSetResponse: ...

    def delete_invitations(self, *,
        AccountIds: List[str]
    ) -> GuardDutyDeleteInvitationsResponse: ...

    def delete_members(self, *,
        AccountIds: List[str],
        DetectorId: str
    ) -> GuardDutyDeleteMembersResponse: ...

    def delete_threat_intel_set(self, *,
        DetectorId: str,
        ThreatIntelSetId: str
    ) -> GuardDutyDeleteThreatIntelSetResponse: ...

    def disassociate_from_master_account(self, *,
        DetectorId: str
    ) -> GuardDutyDisassociateFromMasterAccountResponse: ...

    def disassociate_members(self, *,
        AccountIds: List[str],
        DetectorId: str
    ) -> GuardDutyDisassociateMembersResponse: ...

    def get_detector(self, *,
        DetectorId: str
    ) -> GuardDutyGetDetectorResponse: ...

    def get_filter(self, *,
        DetectorId: str,
        FilterName: str
    ) -> GuardDutyGetFilterResponse: ...

    def get_findings(self, *,
        DetectorId: str,
        FindingIds: List[str],
        SortCriteria: GuardDutySortCriteria = ...
    ) -> GuardDutyGetFindingsResponse: ...

    def get_findings_statistics(self, *,
        DetectorId: str,
        FindingStatisticTypes: List[str],
        FindingCriteria: GuardDutyFindingCriteria = ...
    ) -> GuardDutyGetFindingsStatisticsResponse: ...

    def get_ip_set(self, *,
        DetectorId: str,
        IpSetId: str
    ) -> GuardDutyGetIPSetResponse: ...

    def get_invitations_count(self) -> GuardDutyGetInvitationsCountResponse: ...

    def get_master_account(self, *,
        DetectorId: str
    ) -> GuardDutyGetMasterAccountResponse: ...

    def get_members(self, *,
        AccountIds: List[str],
        DetectorId: str
    ) -> GuardDutyGetMembersResponse: ...

    def get_threat_intel_set(self, *,
        DetectorId: str,
        ThreatIntelSetId: str
    ) -> GuardDutyGetThreatIntelSetResponse: ...

    def invite_members(self, *,
        AccountIds: List[str],
        DetectorId: str,
        DisableEmailNotification: bool = ...,
        Message: str = ...
    ) -> GuardDutyInviteMembersResponse: ...

    def list_detectors(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> GuardDutyListDetectorsResponse: ...

    def list_filters(self, *,
        DetectorId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> GuardDutyListFiltersResponse: ...

    def list_findings(self, *,
        DetectorId: str,
        FindingCriteria: GuardDutyFindingCriteria = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        SortCriteria: GuardDutySortCriteria = ...
    ) -> GuardDutyListFindingsResponse: ...

    def list_ip_sets(self, *,
        DetectorId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> GuardDutyListIPSetsResponse: ...

    def list_invitations(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> GuardDutyListInvitationsResponse: ...

    def list_members(self, *,
        DetectorId: str,
        MaxResults: int = ...,
        NextToken: str = ...,
        OnlyAssociated: str = ...
    ) -> GuardDutyListMembersResponse: ...

    def list_threat_intel_sets(self, *,
        DetectorId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> GuardDutyListThreatIntelSetsResponse: ...

    def start_monitoring_members(self, *,
        AccountIds: List[str],
        DetectorId: str
    ) -> GuardDutyStartMonitoringMembersResponse: ...

    def stop_monitoring_members(self, *,
        AccountIds: List[str],
        DetectorId: str
    ) -> GuardDutyStopMonitoringMembersResponse: ...

    def unarchive_findings(self, *,
        DetectorId: str,
        FindingIds: List[str]
    ) -> GuardDutyUnarchiveFindingsResponse: ...

    def update_detector(self, *,
        DetectorId: str,
        Enable: bool = ...,
        FindingPublishingFrequency: str = ...
    ) -> GuardDutyUpdateDetectorResponse: ...

    def update_filter(self, *,
        DetectorId: str,
        FilterName: str,
        Action: str = ...,
        Description: str = ...,
        FindingCriteria: GuardDutyFindingCriteria = ...,
        Rank: int = ...
    ) -> GuardDutyUpdateFilterResponse: ...

    def update_findings_feedback(self, *,
        DetectorId: str,
        Feedback: str,
        FindingIds: List[str],
        Comments: str = ...
    ) -> GuardDutyUpdateFindingsFeedbackResponse: ...

    def update_ip_set(self, *,
        DetectorId: str,
        IpSetId: str,
        Activate: bool = ...,
        Location: str = ...,
        Name: str = ...
    ) -> GuardDutyUpdateIPSetResponse: ...

    def update_threat_intel_set(self, *,
        DetectorId: str,
        ThreatIntelSetId: str,
        Activate: bool = ...,
        Location: str = ...,
        Name: str = ...
    ) -> GuardDutyUpdateThreatIntelSetResponse: ...


GuardDutyAcceptInvitationResponse = TypedDict(
    'GuardDutyAcceptInvitationResponse', {
    }
)


GuardDutyArchiveFindingsResponse = TypedDict(
    'GuardDutyArchiveFindingsResponse', {
    }
)


GuardDutyCreateDetectorResponse = TypedDict(
    'GuardDutyCreateDetectorResponse', {
        'DetectorId': Optional[str],
    }
)


GuardDutyCondition = TypedDict(
    'GuardDutyCondition', {
        'Eq': Optional[List[str]],
        '__integer': Optional[int],
        '__integer': Optional[int],
        '__integer': Optional[int],
        '__integer': Optional[int],
        'Neq': Optional[List[str]],
    }
)


GuardDutyFindingCriteria = TypedDict(
    'GuardDutyFindingCriteria', {
        '__mapOfCondition': Optional[Dict[str, GuardDutyCondition]],
    }
)


GuardDutyCreateFilterResponse = TypedDict(
    'GuardDutyCreateFilterResponse', {
        'FilterName': Optional[str],
    }
)


GuardDutyCreateIPSetResponse = TypedDict(
    'GuardDutyCreateIPSetResponse', {
        'IpSetId': Optional[str],
    }
)


GuardDutyAccountDetail = TypedDict(
    'GuardDutyAccountDetail', {
        'AccountId': str,
        'Email': str,
    }
)


GuardDutyUnprocessedAccount = TypedDict(
    'GuardDutyUnprocessedAccount', {
        '__string': str,
        '__string': str,
    }
)


GuardDutyCreateMembersResponse = TypedDict(
    'GuardDutyCreateMembersResponse', {
        'UnprocessedAccounts': Optional[List[GuardDutyUnprocessedAccount]],
    }
)


GuardDutyCreateSampleFindingsResponse = TypedDict(
    'GuardDutyCreateSampleFindingsResponse', {
    }
)


GuardDutyCreateThreatIntelSetResponse = TypedDict(
    'GuardDutyCreateThreatIntelSetResponse', {
        'ThreatIntelSetId': Optional[str],
    }
)


GuardDutyDeclineInvitationsResponse = TypedDict(
    'GuardDutyDeclineInvitationsResponse', {
        'UnprocessedAccounts': Optional[List[GuardDutyUnprocessedAccount]],
    }
)


GuardDutyDeleteDetectorResponse = TypedDict(
    'GuardDutyDeleteDetectorResponse', {
    }
)


GuardDutyDeleteFilterResponse = TypedDict(
    'GuardDutyDeleteFilterResponse', {
    }
)


GuardDutyDeleteIPSetResponse = TypedDict(
    'GuardDutyDeleteIPSetResponse', {
    }
)


GuardDutyDeleteInvitationsResponse = TypedDict(
    'GuardDutyDeleteInvitationsResponse', {
        'UnprocessedAccounts': Optional[List[GuardDutyUnprocessedAccount]],
    }
)


GuardDutyDeleteMembersResponse = TypedDict(
    'GuardDutyDeleteMembersResponse', {
        'UnprocessedAccounts': Optional[List[GuardDutyUnprocessedAccount]],
    }
)


GuardDutyDeleteThreatIntelSetResponse = TypedDict(
    'GuardDutyDeleteThreatIntelSetResponse', {
    }
)


GuardDutyDisassociateFromMasterAccountResponse = TypedDict(
    'GuardDutyDisassociateFromMasterAccountResponse', {
    }
)


GuardDutyDisassociateMembersResponse = TypedDict(
    'GuardDutyDisassociateMembersResponse', {
        'UnprocessedAccounts': Optional[List[GuardDutyUnprocessedAccount]],
    }
)


GuardDutyGetDetectorResponse = TypedDict(
    'GuardDutyGetDetectorResponse', {
        'CreatedAt': Optional[str],
        'FindingPublishingFrequency': Optional[str],
        'ServiceRole': Optional[str],
        'DetectorStatus': Optional[str],
        'UpdatedAt': Optional[str],
    }
)


GuardDutyGetFilterResponse = TypedDict(
    'GuardDutyGetFilterResponse', {
        'FilterAction': Optional[str],
        'FilterDescription': Optional[str],
        'FindingCriteria': Optional[GuardDutyFindingCriteria],
        'FilterName': Optional[str],
        'FilterRank': Optional[int],
    }
)


GuardDutySortCriteria = TypedDict(
    'GuardDutySortCriteria', {
        '__string': Optional[str],
        'OrderBy': Optional[str],
    }
)


GuardDutyAccessKeyDetails = TypedDict(
    'GuardDutyAccessKeyDetails', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GuardDutyIamInstanceProfile = TypedDict(
    'GuardDutyIamInstanceProfile', {
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GuardDutyPrivateIpAddressDetails = TypedDict(
    'GuardDutyPrivateIpAddressDetails', {
        'PrivateDnsName': Optional[str],
        'PrivateIpAddress': Optional[str],
    }
)


GuardDutySecurityGroup = TypedDict(
    'GuardDutySecurityGroup', {
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GuardDutyNetworkInterface = TypedDict(
    'GuardDutyNetworkInterface', {
        'Ipv6Addresses': Optional[List[str]],
        'NetworkInterfaceId': Optional[str],
        'PrivateDnsName': Optional[str],
        'PrivateIpAddress': Optional[str],
        'PrivateIpAddresses': Optional[List[GuardDutyPrivateIpAddressDetails]],
        '__string': Optional[str],
        '__string': Optional[str],
        'SecurityGroups': Optional[List[GuardDutySecurityGroup]],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GuardDutyProductCode = TypedDict(
    'GuardDutyProductCode', {
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GuardDutyTag = TypedDict(
    'GuardDutyTag', {
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GuardDutyInstanceDetails = TypedDict(
    'GuardDutyInstanceDetails', {
        '__string': Optional[str],
        'IamInstanceProfile': Optional[GuardDutyIamInstanceProfile],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'NetworkInterfaces': Optional[List[GuardDutyNetworkInterface]],
        '__string': Optional[str],
        'ProductCodes': Optional[List[GuardDutyProductCode]],
        'Tags': Optional[List[GuardDutyTag]],
    }
)


GuardDutyResource = TypedDict(
    'GuardDutyResource', {
        'AccessKeyDetails': Optional[GuardDutyAccessKeyDetails],
        'InstanceDetails': Optional[GuardDutyInstanceDetails],
        '__string': Optional[str],
    }
)


GuardDutyDomainDetails = TypedDict(
    'GuardDutyDomainDetails', {
    }
)


GuardDutyCity = TypedDict(
    'GuardDutyCity', {
        '__string': Optional[str],
    }
)


GuardDutyCountry = TypedDict(
    'GuardDutyCountry', {
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GuardDutyGeoLocation = TypedDict(
    'GuardDutyGeoLocation', {
        '__double': Optional[float],
        '__double': Optional[float],
    }
)


GuardDutyOrganization = TypedDict(
    'GuardDutyOrganization', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GuardDutyRemoteIpDetails = TypedDict(
    'GuardDutyRemoteIpDetails', {
        'City': Optional[GuardDutyCity],
        'Country': Optional[GuardDutyCountry],
        'GeoLocation': Optional[GuardDutyGeoLocation],
        '__string': Optional[str],
        'Organization': Optional[GuardDutyOrganization],
    }
)


GuardDutyAwsApiCallAction = TypedDict(
    'GuardDutyAwsApiCallAction', {
        '__string': Optional[str],
        '__string': Optional[str],
        'DomainDetails': Optional[GuardDutyDomainDetails],
        'RemoteIpDetails': Optional[GuardDutyRemoteIpDetails],
        '__string': Optional[str],
    }
)


GuardDutyDnsRequestAction = TypedDict(
    'GuardDutyDnsRequestAction', {
        'Domain': Optional[str],
    }
)


GuardDutyLocalPortDetails = TypedDict(
    'GuardDutyLocalPortDetails', {
        '__integer': Optional[int],
        '__string': Optional[str],
    }
)


GuardDutyRemotePortDetails = TypedDict(
    'GuardDutyRemotePortDetails', {
        '__integer': Optional[int],
        '__string': Optional[str],
    }
)


GuardDutyNetworkConnectionAction = TypedDict(
    'GuardDutyNetworkConnectionAction', {
        '__boolean': Optional[bool],
        '__string': Optional[str],
        'LocalPortDetails': Optional[GuardDutyLocalPortDetails],
        '__string': Optional[str],
        'RemoteIpDetails': Optional[GuardDutyRemoteIpDetails],
        'RemotePortDetails': Optional[GuardDutyRemotePortDetails],
    }
)


GuardDutyPortProbeDetail = TypedDict(
    'GuardDutyPortProbeDetail', {
        'LocalPortDetails': Optional[GuardDutyLocalPortDetails],
        'RemoteIpDetails': Optional[GuardDutyRemoteIpDetails],
    }
)


GuardDutyPortProbeAction = TypedDict(
    'GuardDutyPortProbeAction', {
        '__boolean': Optional[bool],
        '__listOfPortProbeDetail': Optional[List[GuardDutyPortProbeDetail]],
    }
)


GuardDutyAction = TypedDict(
    'GuardDutyAction', {
        '__string': Optional[str],
        'AwsApiCallAction': Optional[GuardDutyAwsApiCallAction],
        'DnsRequestAction': Optional[GuardDutyDnsRequestAction],
        'NetworkConnectionAction': Optional[GuardDutyNetworkConnectionAction],
        'PortProbeAction': Optional[GuardDutyPortProbeAction],
    }
)


GuardDutyService = TypedDict(
    'GuardDutyService', {
        'Action': Optional[GuardDutyAction],
        '__boolean': Optional[bool],
        '__integer': Optional[int],
        'DetectorId': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


GuardDutyFinding = TypedDict(
    'GuardDutyFinding', {
        '__string': str,
        '__string': str,
        'CreatedAt': str,
        '__string': str,
        '__string': str,
        'Resource': GuardDutyResource,
        '__string': str,
        '__double': float,
        '__string': str,
        'UpdatedAt': str,
        '__double': Optional[float],
        '__string': Optional[str],
        '__string': Optional[str],
        'Service': Optional[GuardDutyService],
        '__string': Optional[str],
    }
)


GuardDutyGetFindingsResponse = TypedDict(
    'GuardDutyGetFindingsResponse', {
        'Findings': Optional[List[GuardDutyFinding]],
    }
)


GuardDutyFindingStatistics = TypedDict(
    'GuardDutyFindingStatistics', {
        '__mapOfCountBySeverityFindingStatistic': Optional[Dict[str, int]],
    }
)


GuardDutyGetFindingsStatisticsResponse = TypedDict(
    'GuardDutyGetFindingsStatisticsResponse', {
        'FindingStatistics': Optional[GuardDutyFindingStatistics],
    }
)


GuardDutyGetIPSetResponse = TypedDict(
    'GuardDutyGetIPSetResponse', {
        'IpSetFormat': Optional[str],
        'Location': Optional[str],
        'Name': Optional[str],
        'IpSetStatus': Optional[str],
    }
)


GuardDutyGetInvitationsCountResponse = TypedDict(
    'GuardDutyGetInvitationsCountResponse', {
        '__integer': Optional[int],
    }
)


GuardDutyMaster = TypedDict(
    'GuardDutyMaster', {
        '__string': Optional[str],
        'InvitationId': Optional[str],
        'InvitedAt': Optional[str],
        '__string': Optional[str],
    }
)


GuardDutyGetMasterAccountResponse = TypedDict(
    'GuardDutyGetMasterAccountResponse', {
        'Master': Optional[GuardDutyMaster],
    }
)


GuardDutyMember = TypedDict(
    'GuardDutyMember', {
        'AccountId': str,
        'Email': str,
        'MasterId': str,
        '__string': str,
        'UpdatedAt': str,
        'DetectorId': Optional[str],
        'InvitedAt': Optional[str],
    }
)


GuardDutyGetMembersResponse = TypedDict(
    'GuardDutyGetMembersResponse', {
        'Members': Optional[List[GuardDutyMember]],
        'UnprocessedAccounts': Optional[List[GuardDutyUnprocessedAccount]],
    }
)


GuardDutyGetThreatIntelSetResponse = TypedDict(
    'GuardDutyGetThreatIntelSetResponse', {
        'ThreatIntelSetFormat': Optional[str],
        'Location': Optional[str],
        'Name': Optional[str],
        'ThreatIntelSetStatus': Optional[str],
    }
)


GuardDutyInviteMembersResponse = TypedDict(
    'GuardDutyInviteMembersResponse', {
        'UnprocessedAccounts': Optional[List[GuardDutyUnprocessedAccount]],
    }
)


GuardDutyListDetectorsResponse = TypedDict(
    'GuardDutyListDetectorsResponse', {
        'DetectorIds': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


GuardDutyListFiltersResponse = TypedDict(
    'GuardDutyListFiltersResponse', {
        'FilterNames': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


GuardDutyListFindingsResponse = TypedDict(
    'GuardDutyListFindingsResponse', {
        'FindingIds': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


GuardDutyListIPSetsResponse = TypedDict(
    'GuardDutyListIPSetsResponse', {
        'IpSetIds': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


GuardDutyInvitation = TypedDict(
    'GuardDutyInvitation', {
        '__string': Optional[str],
        'InvitationId': Optional[str],
        'InvitedAt': Optional[str],
        '__string': Optional[str],
    }
)


GuardDutyListInvitationsResponse = TypedDict(
    'GuardDutyListInvitationsResponse', {
        'Invitations': Optional[List[GuardDutyInvitation]],
        'NextToken': Optional[str],
    }
)


GuardDutyListMembersResponse = TypedDict(
    'GuardDutyListMembersResponse', {
        'Members': Optional[List[GuardDutyMember]],
        'NextToken': Optional[str],
    }
)


GuardDutyListThreatIntelSetsResponse = TypedDict(
    'GuardDutyListThreatIntelSetsResponse', {
        'NextToken': Optional[str],
        'ThreatIntelSetIds': Optional[List[str]],
    }
)


GuardDutyStartMonitoringMembersResponse = TypedDict(
    'GuardDutyStartMonitoringMembersResponse', {
        'UnprocessedAccounts': Optional[List[GuardDutyUnprocessedAccount]],
    }
)


GuardDutyStopMonitoringMembersResponse = TypedDict(
    'GuardDutyStopMonitoringMembersResponse', {
        'UnprocessedAccounts': Optional[List[GuardDutyUnprocessedAccount]],
    }
)


GuardDutyUnarchiveFindingsResponse = TypedDict(
    'GuardDutyUnarchiveFindingsResponse', {
    }
)


GuardDutyUpdateDetectorResponse = TypedDict(
    'GuardDutyUpdateDetectorResponse', {
    }
)


GuardDutyUpdateFilterResponse = TypedDict(
    'GuardDutyUpdateFilterResponse', {
        'FilterName': Optional[str],
    }
)


GuardDutyUpdateFindingsFeedbackResponse = TypedDict(
    'GuardDutyUpdateFindingsFeedbackResponse', {
    }
)


GuardDutyUpdateIPSetResponse = TypedDict(
    'GuardDutyUpdateIPSetResponse', {
    }
)


GuardDutyUpdateThreatIntelSetResponse = TypedDict(
    'GuardDutyUpdateThreatIntelSetResponse', {
    }
)


class Health(BaseClient):
    def describe_affected_entities(self, *,
        filter: HealthEntityFilter,
        locale: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> HealthDescribeAffectedEntitiesResponse: ...

    def describe_entity_aggregates(self, *,
        eventArns: List[str] = ...
    ) -> HealthDescribeEntityAggregatesResponse: ...

    def describe_event_aggregates(self, *,
        aggregateField: str,
        filter: HealthEventFilter = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> HealthDescribeEventAggregatesResponse: ...

    def describe_event_details(self, *,
        eventArns: List[str],
        locale: str = ...
    ) -> HealthDescribeEventDetailsResponse: ...

    def describe_event_types(self, *,
        filter: HealthEventTypeFilter = ...,
        locale: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> HealthDescribeEventTypesResponse: ...

    def describe_events(self, *,
        filter: HealthEventFilter = ...,
        nextToken: str = ...,
        maxResults: int = ...,
        locale: str = ...
    ) -> HealthDescribeEventsResponse: ...


HealthDateTimeRange = TypedDict(
    'HealthDateTimeRange', {
        'timestamp': Optional[datetime.datetime],
        'timestamp': Optional[datetime.datetime],
    }
)


HealthEntityFilter = TypedDict(
    'HealthEntityFilter', {
        'eventArnList': List[str],
        'entityArnList': Optional[List[str]],
        'entityValueList': Optional[List[str]],
        'dateTimeRangeList': Optional[List[HealthDateTimeRange]],
        'tagFilter': Optional[List[Dict[str, str]]],
        'entityStatusCodeList': Optional[List[str]],
    }
)


HealthAffectedEntity = TypedDict(
    'HealthAffectedEntity', {
        'entityArn': Optional[str],
        'eventArn': Optional[str],
        'entityValue': Optional[str],
        'entityUrl': Optional[str],
        'accountId': Optional[str],
        'timestamp': Optional[datetime.datetime],
        'entityStatusCode': Optional[str],
        'tagSet': Optional[Dict[str, str]],
    }
)


HealthDescribeAffectedEntitiesResponse = TypedDict(
    'HealthDescribeAffectedEntitiesResponse', {
        'EntityList': Optional[List[HealthAffectedEntity]],
        'nextToken': Optional[str],
    }
)


HealthEntityAggregate = TypedDict(
    'HealthEntityAggregate', {
        'eventArn': Optional[str],
        'count': Optional[int],
    }
)


HealthDescribeEntityAggregatesResponse = TypedDict(
    'HealthDescribeEntityAggregatesResponse', {
        'EntityAggregateList': Optional[List[HealthEntityAggregate]],
    }
)


HealthEventFilter = TypedDict(
    'HealthEventFilter', {
        'eventArnList': Optional[List[str]],
        'eventTypeList': Optional[List[str]],
        'serviceList': Optional[List[str]],
        'regionList': Optional[List[str]],
        'availabilityZones': Optional[List[str]],
        'dateTimeRangeList': Optional[List[HealthDateTimeRange]],
        'dateTimeRangeList': Optional[List[HealthDateTimeRange]],
        'dateTimeRangeList': Optional[List[HealthDateTimeRange]],
        'entityArnList': Optional[List[str]],
        'entityValueList': Optional[List[str]],
        'eventTypeCategoryList': Optional[List[str]],
        'tagFilter': Optional[List[Dict[str, str]]],
        'eventStatusCodeList': Optional[List[str]],
    }
)


HealthEventAggregate = TypedDict(
    'HealthEventAggregate', {
        'aggregateValue': Optional[str],
        'count': Optional[int],
    }
)


HealthDescribeEventAggregatesResponse = TypedDict(
    'HealthDescribeEventAggregatesResponse', {
        'EventAggregateList': Optional[List[HealthEventAggregate]],
        'nextToken': Optional[str],
    }
)


HealthEvent = TypedDict(
    'HealthEvent', {
        'eventArn': Optional[str],
        'service': Optional[str],
        'eventTypeCode': Optional[str],
        'eventTypeCategory': Optional[str],
        'region': Optional[str],
        'availabilityZone': Optional[str],
        'timestamp': Optional[datetime.datetime],
        'timestamp': Optional[datetime.datetime],
        'timestamp': Optional[datetime.datetime],
        'eventStatusCode': Optional[str],
    }
)


HealthEventDescription = TypedDict(
    'HealthEventDescription', {
        'eventDescription': Optional[str],
    }
)


HealthEventDetails = TypedDict(
    'HealthEventDetails', {
        'Event': Optional[HealthEvent],
        'EventDescription': Optional[HealthEventDescription],
        'eventMetadata': Optional[Dict[str, str]],
    }
)


HealthEventDetailsErrorItem = TypedDict(
    'HealthEventDetailsErrorItem', {
        'eventArn': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
    }
)


HealthDescribeEventDetailsResponse = TypedDict(
    'HealthDescribeEventDetailsResponse', {
        'DescribeEventDetailsSuccessfulSet': Optional[List[HealthEventDetails]],
        'DescribeEventDetailsFailedSet': Optional[List[HealthEventDetailsErrorItem]],
    }
)


HealthEventTypeFilter = TypedDict(
    'HealthEventTypeFilter', {
        'EventTypeCodeList': Optional[List[str]],
        'serviceList': Optional[List[str]],
        'EventTypeCategoryList': Optional[List[str]],
    }
)


HealthEventType = TypedDict(
    'HealthEventType', {
        'service': Optional[str],
        'eventTypeCode': Optional[str],
        'eventTypeCategory': Optional[str],
    }
)


HealthDescribeEventTypesResponse = TypedDict(
    'HealthDescribeEventTypesResponse', {
        'EventTypeList': Optional[List[HealthEventType]],
        'nextToken': Optional[str],
    }
)


HealthDescribeEventsResponse = TypedDict(
    'HealthDescribeEventsResponse', {
        'EventList': Optional[List[HealthEvent]],
        'nextToken': Optional[str],
    }
)


class IAM(BaseClient):
    def add_client_id_to_open_id_connect_provider(self, *,
        OpenIDConnectProviderArn: str,
        ClientID: str
    ): ...

    def add_role_to_instance_profile(self, *,
        InstanceProfileName: str,
        RoleName: str
    ): ...

    def add_user_to_group(self, *,
        GroupName: str,
        UserName: str
    ): ...

    def attach_group_policy(self, *,
        GroupName: str,
        PolicyArn: str
    ): ...

    def attach_role_policy(self, *,
        RoleName: str,
        PolicyArn: str
    ): ...

    def attach_user_policy(self, *,
        UserName: str,
        PolicyArn: str
    ): ...

    def change_password(self, *,
        OldPassword: str,
        NewPassword: str
    ): ...

    def create_access_key(self, *,
        UserName: str = ...
    ) -> IAMCreateAccessKeyResponse: ...

    def create_account_alias(self, *,
        AccountAlias: str
    ): ...

    def create_group(self, *,
        GroupName: str,
        Path: str = ...
    ) -> IAMCreateGroupResponse: ...

    def create_instance_profile(self, *,
        InstanceProfileName: str,
        Path: str = ...
    ) -> IAMCreateInstanceProfileResponse: ...

    def create_login_profile(self, *,
        UserName: str,
        Password: str,
        PasswordResetRequired: bool = ...
    ) -> IAMCreateLoginProfileResponse: ...

    def create_open_id_connect_provider(self, *,
        Url: str,
        ThumbprintList: List[str],
        ClientIDList: List[str] = ...
    ) -> IAMCreateOpenIDConnectProviderResponse: ...

    def create_policy(self, *,
        PolicyName: str,
        PolicyDocument: str,
        Path: str = ...,
        Description: str = ...
    ) -> IAMCreatePolicyResponse: ...

    def create_policy_version(self, *,
        PolicyArn: str,
        PolicyDocument: str,
        SetAsDefault: bool = ...
    ) -> IAMCreatePolicyVersionResponse: ...

    def create_role(self, *,
        RoleName: str,
        AssumeRolePolicyDocument: str,
        Path: str = ...,
        Description: str = ...,
        MaxSessionDuration: int = ...,
        PermissionsBoundary: str = ...,
        Tags: List[IAMTag] = ...
    ) -> IAMCreateRoleResponse: ...

    def create_saml_provider(self, *,
        SAMLMetadataDocument: str,
        Name: str
    ) -> IAMCreateSAMLProviderResponse: ...

    def create_service_linked_role(self, *,
        AWSServiceName: str,
        Description: str = ...,
        CustomSuffix: str = ...
    ) -> IAMCreateServiceLinkedRoleResponse: ...

    def create_service_specific_credential(self, *,
        UserName: str,
        ServiceName: str
    ) -> IAMCreateServiceSpecificCredentialResponse: ...

    def create_user(self, *,
        UserName: str,
        Path: str = ...,
        PermissionsBoundary: str = ...,
        Tags: List[IAMTag] = ...
    ) -> IAMCreateUserResponse: ...

    def create_virtual_mfa_device(self, *,
        VirtualMFADeviceName: str,
        Path: str = ...
    ) -> IAMCreateVirtualMFADeviceResponse: ...

    def deactivate_mfa_device(self, *,
        UserName: str,
        SerialNumber: str
    ): ...

    def delete_access_key(self, *,
        AccessKeyId: str,
        UserName: str = ...
    ): ...

    def delete_account_alias(self, *,
        AccountAlias: str
    ): ...

    def delete_account_password_policy(self): ...

    def delete_group(self, *,
        GroupName: str
    ): ...

    def delete_group_policy(self, *,
        GroupName: str,
        PolicyName: str
    ): ...

    def delete_instance_profile(self, *,
        InstanceProfileName: str
    ): ...

    def delete_login_profile(self, *,
        UserName: str
    ): ...

    def delete_open_id_connect_provider(self, *,
        OpenIDConnectProviderArn: str
    ): ...

    def delete_policy(self, *,
        PolicyArn: str
    ): ...

    def delete_policy_version(self, *,
        PolicyArn: str,
        VersionId: str
    ): ...

    def delete_role(self, *,
        RoleName: str
    ): ...

    def delete_role_permissions_boundary(self, *,
        RoleName: str
    ): ...

    def delete_role_policy(self, *,
        RoleName: str,
        PolicyName: str
    ): ...

    def delete_saml_provider(self, *,
        SAMLProviderArn: str
    ): ...

    def delete_ssh_public_key(self, *,
        UserName: str,
        SSHPublicKeyId: str
    ): ...

    def delete_server_certificate(self, *,
        ServerCertificateName: str
    ): ...

    def delete_service_linked_role(self, *,
        RoleName: str
    ) -> IAMDeleteServiceLinkedRoleResponse: ...

    def delete_service_specific_credential(self, *,
        ServiceSpecificCredentialId: str,
        UserName: str = ...
    ): ...

    def delete_signing_certificate(self, *,
        CertificateId: str,
        UserName: str = ...
    ): ...

    def delete_user(self, *,
        UserName: str
    ): ...

    def delete_user_permissions_boundary(self, *,
        UserName: str
    ): ...

    def delete_user_policy(self, *,
        UserName: str,
        PolicyName: str
    ): ...

    def delete_virtual_mfa_device(self, *,
        SerialNumber: str
    ): ...

    def detach_group_policy(self, *,
        GroupName: str,
        PolicyArn: str
    ): ...

    def detach_role_policy(self, *,
        RoleName: str,
        PolicyArn: str
    ): ...

    def detach_user_policy(self, *,
        UserName: str,
        PolicyArn: str
    ): ...

    def enable_mfa_device(self, *,
        UserName: str,
        SerialNumber: str,
        AuthenticationCode1: str,
        AuthenticationCode2: str
    ): ...

    def generate_credential_report(self) -> IAMGenerateCredentialReportResponse: ...

    def generate_service_last_accessed_details(self, *,
        Arn: str
    ) -> IAMGenerateServiceLastAccessedDetailsResponse: ...

    def get_access_key_last_used(self, *,
        AccessKeyId: str
    ) -> IAMGetAccessKeyLastUsedResponse: ...

    def get_account_authorization_details(self, *,
        Filter: List[str] = ...,
        MaxItems: int = ...,
        Marker: str = ...
    ) -> IAMGetAccountAuthorizationDetailsResponse: ...

    def get_account_password_policy(self) -> IAMGetAccountPasswordPolicyResponse: ...

    def get_account_summary(self) -> IAMGetAccountSummaryResponse: ...

    def get_context_keys_for_custom_policy(self, *,
        PolicyInputList: List[str]
    ) -> IAMGetContextKeysForPolicyResponse: ...

    def get_context_keys_for_principal_policy(self, *,
        PolicySourceArn: str,
        PolicyInputList: List[str] = ...
    ) -> IAMGetContextKeysForPolicyResponse: ...

    def get_credential_report(self) -> IAMGetCredentialReportResponse: ...

    def get_group(self, *,
        GroupName: str,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMGetGroupResponse: ...

    def get_group_policy(self, *,
        GroupName: str,
        PolicyName: str
    ) -> IAMGetGroupPolicyResponse: ...

    def get_instance_profile(self, *,
        InstanceProfileName: str
    ) -> IAMGetInstanceProfileResponse: ...

    def get_login_profile(self, *,
        UserName: str
    ) -> IAMGetLoginProfileResponse: ...

    def get_open_id_connect_provider(self, *,
        OpenIDConnectProviderArn: str
    ) -> IAMGetOpenIDConnectProviderResponse: ...

    def get_policy(self, *,
        PolicyArn: str
    ) -> IAMGetPolicyResponse: ...

    def get_policy_version(self, *,
        PolicyArn: str,
        VersionId: str
    ) -> IAMGetPolicyVersionResponse: ...

    def get_role(self, *,
        RoleName: str
    ) -> IAMGetRoleResponse: ...

    def get_role_policy(self, *,
        RoleName: str,
        PolicyName: str
    ) -> IAMGetRolePolicyResponse: ...

    def get_saml_provider(self, *,
        SAMLProviderArn: str
    ) -> IAMGetSAMLProviderResponse: ...

    def get_ssh_public_key(self, *,
        UserName: str,
        SSHPublicKeyId: str,
        Encoding: str
    ) -> IAMGetSSHPublicKeyResponse: ...

    def get_server_certificate(self, *,
        ServerCertificateName: str
    ) -> IAMGetServerCertificateResponse: ...

    def get_service_last_accessed_details(self, *,
        JobId: str,
        MaxItems: int = ...,
        Marker: str = ...
    ) -> IAMGetServiceLastAccessedDetailsResponse: ...

    def get_service_last_accessed_details_with_entities(self, *,
        JobId: str,
        ServiceNamespace: str,
        MaxItems: int = ...,
        Marker: str = ...
    ) -> IAMGetServiceLastAccessedDetailsWithEntitiesResponse: ...

    def get_service_linked_role_deletion_status(self, *,
        DeletionTaskId: str
    ) -> IAMGetServiceLinkedRoleDeletionStatusResponse: ...

    def get_user(self, *,
        UserName: str = ...
    ) -> IAMGetUserResponse: ...

    def get_user_policy(self, *,
        UserName: str,
        PolicyName: str
    ) -> IAMGetUserPolicyResponse: ...

    def list_access_keys(self, *,
        UserName: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListAccessKeysResponse: ...

    def list_account_aliases(self, *,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListAccountAliasesResponse: ...

    def list_attached_group_policies(self, *,
        GroupName: str,
        PathPrefix: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListAttachedGroupPoliciesResponse: ...

    def list_attached_role_policies(self, *,
        RoleName: str,
        PathPrefix: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListAttachedRolePoliciesResponse: ...

    def list_attached_user_policies(self, *,
        UserName: str,
        PathPrefix: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListAttachedUserPoliciesResponse: ...

    def list_entities_for_policy(self, *,
        PolicyArn: str,
        EntityFilter: str = ...,
        PathPrefix: str = ...,
        PolicyUsageFilter: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListEntitiesForPolicyResponse: ...

    def list_group_policies(self, *,
        GroupName: str,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListGroupPoliciesResponse: ...

    def list_groups(self, *,
        PathPrefix: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListGroupsResponse: ...

    def list_groups_for_user(self, *,
        UserName: str,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListGroupsForUserResponse: ...

    def list_instance_profiles(self, *,
        PathPrefix: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListInstanceProfilesResponse: ...

    def list_instance_profiles_for_role(self, *,
        RoleName: str,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListInstanceProfilesForRoleResponse: ...

    def list_mfa_devices(self, *,
        UserName: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListMFADevicesResponse: ...

    def list_open_id_connect_providers(self) -> IAMListOpenIDConnectProvidersResponse: ...

    def list_policies(self, *,
        Scope: str = ...,
        OnlyAttached: bool = ...,
        PathPrefix: str = ...,
        PolicyUsageFilter: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListPoliciesResponse: ...

    def list_policies_granting_service_access(self, *,
        Arn: str,
        ServiceNamespaces: List[str],
        Marker: str = ...
    ) -> IAMListPoliciesGrantingServiceAccessResponse: ...

    def list_policy_versions(self, *,
        PolicyArn: str,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListPolicyVersionsResponse: ...

    def list_role_policies(self, *,
        RoleName: str,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListRolePoliciesResponse: ...

    def list_role_tags(self, *,
        RoleName: str,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListRoleTagsResponse: ...

    def list_roles(self, *,
        PathPrefix: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListRolesResponse: ...

    def list_saml_providers(self) -> IAMListSAMLProvidersResponse: ...

    def list_ssh_public_keys(self, *,
        UserName: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListSSHPublicKeysResponse: ...

    def list_server_certificates(self, *,
        PathPrefix: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListServerCertificatesResponse: ...

    def list_service_specific_credentials(self, *,
        UserName: str = ...,
        ServiceName: str = ...
    ) -> IAMListServiceSpecificCredentialsResponse: ...

    def list_signing_certificates(self, *,
        UserName: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListSigningCertificatesResponse: ...

    def list_user_policies(self, *,
        UserName: str,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListUserPoliciesResponse: ...

    def list_user_tags(self, *,
        UserName: str,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListUserTagsResponse: ...

    def list_users(self, *,
        PathPrefix: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListUsersResponse: ...

    def list_virtual_mfa_devices(self, *,
        AssignmentStatus: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListVirtualMFADevicesResponse: ...

    def put_group_policy(self, *,
        GroupName: str,
        PolicyName: str,
        PolicyDocument: str
    ): ...

    def put_role_permissions_boundary(self, *,
        RoleName: str,
        PermissionsBoundary: str
    ): ...

    def put_role_policy(self, *,
        RoleName: str,
        PolicyName: str,
        PolicyDocument: str
    ): ...

    def put_user_permissions_boundary(self, *,
        UserName: str,
        PermissionsBoundary: str
    ): ...

    def put_user_policy(self, *,
        UserName: str,
        PolicyName: str,
        PolicyDocument: str
    ): ...

    def remove_client_id_from_open_id_connect_provider(self, *,
        OpenIDConnectProviderArn: str,
        ClientID: str
    ): ...

    def remove_role_from_instance_profile(self, *,
        InstanceProfileName: str,
        RoleName: str
    ): ...

    def remove_user_from_group(self, *,
        GroupName: str,
        UserName: str
    ): ...

    def reset_service_specific_credential(self, *,
        ServiceSpecificCredentialId: str,
        UserName: str = ...
    ) -> IAMResetServiceSpecificCredentialResponse: ...

    def resync_mfa_device(self, *,
        UserName: str,
        SerialNumber: str,
        AuthenticationCode1: str,
        AuthenticationCode2: str
    ): ...

    def set_default_policy_version(self, *,
        PolicyArn: str,
        VersionId: str
    ): ...

    def set_security_token_service_preferences(self, *,
        GlobalEndpointTokenVersion: str
    ): ...

    def simulate_custom_policy(self, *,
        PolicyInputList: List[str],
        ActionNames: List[str],
        ResourceArns: List[str] = ...,
        ResourcePolicy: str = ...,
        ResourceOwner: str = ...,
        CallerArn: str = ...,
        ContextEntries: List[IAMContextEntry] = ...,
        ResourceHandlingOption: str = ...,
        MaxItems: int = ...,
        Marker: str = ...
    ) -> IAMSimulatePolicyResponse: ...

    def simulate_principal_policy(self, *,
        PolicySourceArn: str,
        ActionNames: List[str],
        PolicyInputList: List[str] = ...,
        ResourceArns: List[str] = ...,
        ResourcePolicy: str = ...,
        ResourceOwner: str = ...,
        CallerArn: str = ...,
        ContextEntries: List[IAMContextEntry] = ...,
        ResourceHandlingOption: str = ...,
        MaxItems: int = ...,
        Marker: str = ...
    ) -> IAMSimulatePolicyResponse: ...

    def tag_role(self, *,
        RoleName: str,
        Tags: List[IAMTag]
    ): ...

    def tag_user(self, *,
        UserName: str,
        Tags: List[IAMTag]
    ): ...

    def untag_role(self, *,
        RoleName: str,
        TagKeys: List[str]
    ): ...

    def untag_user(self, *,
        UserName: str,
        TagKeys: List[str]
    ): ...

    def update_access_key(self, *,
        AccessKeyId: str,
        Status: str,
        UserName: str = ...
    ): ...

    def update_account_password_policy(self, *,
        MinimumPasswordLength: int = ...,
        RequireSymbols: bool = ...,
        RequireNumbers: bool = ...,
        RequireUppercaseCharacters: bool = ...,
        RequireLowercaseCharacters: bool = ...,
        AllowUsersToChangePassword: bool = ...,
        MaxPasswordAge: int = ...,
        PasswordReusePrevention: int = ...,
        HardExpiry: bool = ...
    ): ...

    def update_assume_role_policy(self, *,
        RoleName: str,
        PolicyDocument: str
    ): ...

    def update_group(self, *,
        GroupName: str,
        NewPath: str = ...,
        NewGroupName: str = ...
    ): ...

    def update_login_profile(self, *,
        UserName: str,
        Password: str = ...,
        PasswordResetRequired: bool = ...
    ): ...

    def update_open_id_connect_provider_thumbprint(self, *,
        OpenIDConnectProviderArn: str,
        ThumbprintList: List[str]
    ): ...

    def update_role(self, *,
        RoleName: str,
        Description: str = ...,
        MaxSessionDuration: int = ...
    ) -> IAMUpdateRoleResponse: ...

    def update_role_description(self, *,
        RoleName: str,
        Description: str
    ) -> IAMUpdateRoleDescriptionResponse: ...

    def update_saml_provider(self, *,
        SAMLMetadataDocument: str,
        SAMLProviderArn: str
    ) -> IAMUpdateSAMLProviderResponse: ...

    def update_ssh_public_key(self, *,
        UserName: str,
        SSHPublicKeyId: str,
        Status: str
    ): ...

    def update_server_certificate(self, *,
        ServerCertificateName: str,
        NewPath: str = ...,
        NewServerCertificateName: str = ...
    ): ...

    def update_service_specific_credential(self, *,
        ServiceSpecificCredentialId: str,
        Status: str,
        UserName: str = ...
    ): ...

    def update_signing_certificate(self, *,
        CertificateId: str,
        Status: str,
        UserName: str = ...
    ): ...

    def update_user(self, *,
        UserName: str,
        NewPath: str = ...,
        NewUserName: str = ...
    ): ...

    def upload_ssh_public_key(self, *,
        UserName: str,
        SSHPublicKeyBody: str
    ) -> IAMUploadSSHPublicKeyResponse: ...

    def upload_server_certificate(self, *,
        ServerCertificateName: str,
        CertificateBody: str,
        PrivateKey: str,
        Path: str = ...,
        CertificateChain: str = ...
    ) -> IAMUploadServerCertificateResponse: ...

    def upload_signing_certificate(self, *,
        CertificateBody: str,
        UserName: str = ...
    ) -> IAMUploadSigningCertificateResponse: ...


IAMAccessKey = TypedDict(
    'IAMAccessKey', {
        'userNameType': str,
        'accessKeyIdType': str,
        'statusType': str,
        'accessKeySecretType': str,
        'dateType': Optional[datetime.datetime],
    }
)


IAMCreateAccessKeyResponse = TypedDict(
    'IAMCreateAccessKeyResponse', {
        'AccessKey': IAMAccessKey,
    }
)


IAMGroup = TypedDict(
    'IAMGroup', {
        'pathType': str,
        'groupNameType': str,
        'idType': str,
        'arnType': str,
        'dateType': datetime.datetime,
    }
)


IAMCreateGroupResponse = TypedDict(
    'IAMCreateGroupResponse', {
        'Group': IAMGroup,
    }
)


IAMAttachedPermissionsBoundary = TypedDict(
    'IAMAttachedPermissionsBoundary', {
        'PermissionsBoundaryAttachmentType': Optional[str],
        'arnType': Optional[str],
    }
)


IAMTag = TypedDict(
    'IAMTag', {
        'tagKeyType': str,
        'tagValueType': str,
    }
)


IAMRole = TypedDict(
    'IAMRole', {
        'pathType': str,
        'roleNameType': str,
        'idType': str,
        'arnType': str,
        'dateType': datetime.datetime,
        'policyDocumentType': Optional[str],
        'roleDescriptionType': Optional[str],
        'roleMaxSessionDurationType': Optional[int],
        'AttachedPermissionsBoundary': Optional[IAMAttachedPermissionsBoundary],
        'tagListType': Optional[List[IAMTag]],
    }
)


IAMInstanceProfile = TypedDict(
    'IAMInstanceProfile', {
        'pathType': str,
        'instanceProfileNameType': str,
        'idType': str,
        'arnType': str,
        'dateType': datetime.datetime,
        'roleListType': List[IAMRole],
    }
)


IAMCreateInstanceProfileResponse = TypedDict(
    'IAMCreateInstanceProfileResponse', {
        'InstanceProfile': IAMInstanceProfile,
    }
)


IAMLoginProfile = TypedDict(
    'IAMLoginProfile', {
        'userNameType': str,
        'dateType': datetime.datetime,
        'booleanType': Optional[bool],
    }
)


IAMCreateLoginProfileResponse = TypedDict(
    'IAMCreateLoginProfileResponse', {
        'LoginProfile': IAMLoginProfile,
    }
)


IAMCreateOpenIDConnectProviderResponse = TypedDict(
    'IAMCreateOpenIDConnectProviderResponse', {
        'arnType': Optional[str],
    }
)


IAMPolicy = TypedDict(
    'IAMPolicy', {
        'policyNameType': Optional[str],
        'idType': Optional[str],
        'arnType': Optional[str],
        'policyPathType': Optional[str],
        'policyVersionIdType': Optional[str],
        'attachmentCountType': Optional[int],
        'attachmentCountType': Optional[int],
        'booleanType': Optional[bool],
        'policyDescriptionType': Optional[str],
        'dateType': Optional[datetime.datetime],
        'dateType': Optional[datetime.datetime],
    }
)


IAMCreatePolicyResponse = TypedDict(
    'IAMCreatePolicyResponse', {
        'Policy': Optional[IAMPolicy],
    }
)


IAMPolicyVersion = TypedDict(
    'IAMPolicyVersion', {
        'policyDocumentType': Optional[str],
        'policyVersionIdType': Optional[str],
        'booleanType': Optional[bool],
        'dateType': Optional[datetime.datetime],
    }
)


IAMCreatePolicyVersionResponse = TypedDict(
    'IAMCreatePolicyVersionResponse', {
        'PolicyVersion': Optional[IAMPolicyVersion],
    }
)


IAMCreateRoleResponse = TypedDict(
    'IAMCreateRoleResponse', {
        'Role': IAMRole,
    }
)


IAMCreateSAMLProviderResponse = TypedDict(
    'IAMCreateSAMLProviderResponse', {
        'arnType': Optional[str],
    }
)


IAMCreateServiceLinkedRoleResponse = TypedDict(
    'IAMCreateServiceLinkedRoleResponse', {
        'Role': Optional[IAMRole],
    }
)


IAMServiceSpecificCredential = TypedDict(
    'IAMServiceSpecificCredential', {
        'dateType': datetime.datetime,
        'serviceName': str,
        'serviceUserName': str,
        'servicePassword': str,
        'serviceSpecificCredentialId': str,
        'userNameType': str,
        'statusType': str,
    }
)


IAMCreateServiceSpecificCredentialResponse = TypedDict(
    'IAMCreateServiceSpecificCredentialResponse', {
        'ServiceSpecificCredential': Optional[IAMServiceSpecificCredential],
    }
)


IAMUser = TypedDict(
    'IAMUser', {
        'pathType': str,
        'userNameType': str,
        'idType': str,
        'arnType': str,
        'dateType': datetime.datetime,
        'dateType': Optional[datetime.datetime],
        'AttachedPermissionsBoundary': Optional[IAMAttachedPermissionsBoundary],
        'tagListType': Optional[List[IAMTag]],
    }
)


IAMCreateUserResponse = TypedDict(
    'IAMCreateUserResponse', {
        'User': Optional[IAMUser],
    }
)


IAMVirtualMFADevice = TypedDict(
    'IAMVirtualMFADevice', {
        'serialNumberType': str,
        'BootstrapDatum': Optional[bytes],
        'BootstrapDatum': Optional[bytes],
        'User': Optional[IAMUser],
        'dateType': Optional[datetime.datetime],
    }
)


IAMCreateVirtualMFADeviceResponse = TypedDict(
    'IAMCreateVirtualMFADeviceResponse', {
        'VirtualMFADevice': IAMVirtualMFADevice,
    }
)


IAMDeleteServiceLinkedRoleResponse = TypedDict(
    'IAMDeleteServiceLinkedRoleResponse', {
        'DeletionTaskIdType': str,
    }
)


IAMGenerateCredentialReportResponse = TypedDict(
    'IAMGenerateCredentialReportResponse', {
        'ReportStateType': Optional[str],
        'ReportStateDescriptionType': Optional[str],
    }
)


IAMGenerateServiceLastAccessedDetailsResponse = TypedDict(
    'IAMGenerateServiceLastAccessedDetailsResponse', {
        'jobIDType': Optional[str],
    }
)


IAMAccessKeyLastUsed = TypedDict(
    'IAMAccessKeyLastUsed', {
        'dateType': datetime.datetime,
        'stringType': str,
        'stringType': str,
    }
)


IAMGetAccessKeyLastUsedResponse = TypedDict(
    'IAMGetAccessKeyLastUsedResponse', {
        'existingUserNameType': Optional[str],
        'AccessKeyLastUsed': Optional[IAMAccessKeyLastUsed],
    }
)


IAMPolicyDetail = TypedDict(
    'IAMPolicyDetail', {
        'policyNameType': Optional[str],
        'policyDocumentType': Optional[str],
    }
)


IAMAttachedPolicy = TypedDict(
    'IAMAttachedPolicy', {
        'policyNameType': Optional[str],
        'arnType': Optional[str],
    }
)


IAMUserDetail = TypedDict(
    'IAMUserDetail', {
        'pathType': Optional[str],
        'userNameType': Optional[str],
        'idType': Optional[str],
        'arnType': Optional[str],
        'dateType': Optional[datetime.datetime],
        'policyDetailListType': Optional[List[IAMPolicyDetail]],
        'groupNameListType': Optional[List[str]],
        'attachedPoliciesListType': Optional[List[IAMAttachedPolicy]],
        'AttachedPermissionsBoundary': Optional[IAMAttachedPermissionsBoundary],
        'tagListType': Optional[List[IAMTag]],
    }
)


IAMGroupDetail = TypedDict(
    'IAMGroupDetail', {
        'pathType': Optional[str],
        'groupNameType': Optional[str],
        'idType': Optional[str],
        'arnType': Optional[str],
        'dateType': Optional[datetime.datetime],
        'policyDetailListType': Optional[List[IAMPolicyDetail]],
        'attachedPoliciesListType': Optional[List[IAMAttachedPolicy]],
    }
)


IAMRoleDetail = TypedDict(
    'IAMRoleDetail', {
        'pathType': Optional[str],
        'roleNameType': Optional[str],
        'idType': Optional[str],
        'arnType': Optional[str],
        'dateType': Optional[datetime.datetime],
        'policyDocumentType': Optional[str],
        'instanceProfileListType': Optional[List[IAMInstanceProfile]],
        'policyDetailListType': Optional[List[IAMPolicyDetail]],
        'attachedPoliciesListType': Optional[List[IAMAttachedPolicy]],
        'AttachedPermissionsBoundary': Optional[IAMAttachedPermissionsBoundary],
        'tagListType': Optional[List[IAMTag]],
    }
)


IAMManagedPolicyDetail = TypedDict(
    'IAMManagedPolicyDetail', {
        'policyNameType': Optional[str],
        'idType': Optional[str],
        'arnType': Optional[str],
        'policyPathType': Optional[str],
        'policyVersionIdType': Optional[str],
        'attachmentCountType': Optional[int],
        'attachmentCountType': Optional[int],
        'booleanType': Optional[bool],
        'policyDescriptionType': Optional[str],
        'dateType': Optional[datetime.datetime],
        'dateType': Optional[datetime.datetime],
        'policyDocumentVersionListType': Optional[List[IAMPolicyVersion]],
    }
)


IAMGetAccountAuthorizationDetailsResponse = TypedDict(
    'IAMGetAccountAuthorizationDetailsResponse', {
        'userDetailListType': Optional[List[IAMUserDetail]],
        'groupDetailListType': Optional[List[IAMGroupDetail]],
        'roleDetailListType': Optional[List[IAMRoleDetail]],
        'ManagedPolicyDetailListType': Optional[List[IAMManagedPolicyDetail]],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMPasswordPolicy = TypedDict(
    'IAMPasswordPolicy', {
        'minimumPasswordLengthType': Optional[int],
        'booleanType': Optional[bool],
        'booleanType': Optional[bool],
        'booleanType': Optional[bool],
        'booleanType': Optional[bool],
        'booleanType': Optional[bool],
        'booleanType': Optional[bool],
        'maxPasswordAgeType': Optional[int],
        'passwordReusePreventionType': Optional[int],
        'booleanObjectType': Optional[bool],
    }
)


IAMGetAccountPasswordPolicyResponse = TypedDict(
    'IAMGetAccountPasswordPolicyResponse', {
        'PasswordPolicy': IAMPasswordPolicy,
    }
)


IAMGetAccountSummaryResponse = TypedDict(
    'IAMGetAccountSummaryResponse', {
        'summaryMapType': Optional[Dict[str, int]],
    }
)


IAMGetContextKeysForPolicyResponse = TypedDict(
    'IAMGetContextKeysForPolicyResponse', {
        'ContextKeyNamesResultListType': Optional[List[str]],
    }
)


IAMGetCredentialReportResponse = TypedDict(
    'IAMGetCredentialReportResponse', {
        'ReportContentType': Optional[bytes],
        'ReportFormatType': Optional[str],
        'dateType': Optional[datetime.datetime],
    }
)


IAMGetGroupResponse = TypedDict(
    'IAMGetGroupResponse', {
        'Group': IAMGroup,
        'userListType': List[IAMUser],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMGetGroupPolicyResponse = TypedDict(
    'IAMGetGroupPolicyResponse', {
        'groupNameType': str,
        'policyNameType': str,
        'policyDocumentType': str,
    }
)


IAMGetInstanceProfileResponse = TypedDict(
    'IAMGetInstanceProfileResponse', {
        'InstanceProfile': IAMInstanceProfile,
    }
)


IAMGetLoginProfileResponse = TypedDict(
    'IAMGetLoginProfileResponse', {
        'LoginProfile': IAMLoginProfile,
    }
)


IAMGetOpenIDConnectProviderResponse = TypedDict(
    'IAMGetOpenIDConnectProviderResponse', {
        'OpenIDConnectProviderUrlType': Optional[str],
        'clientIDListType': Optional[List[str]],
        'thumbprintListType': Optional[List[str]],
        'dateType': Optional[datetime.datetime],
    }
)


IAMGetPolicyResponse = TypedDict(
    'IAMGetPolicyResponse', {
        'Policy': Optional[IAMPolicy],
    }
)


IAMGetPolicyVersionResponse = TypedDict(
    'IAMGetPolicyVersionResponse', {
        'PolicyVersion': Optional[IAMPolicyVersion],
    }
)


IAMGetRoleResponse = TypedDict(
    'IAMGetRoleResponse', {
        'Role': IAMRole,
    }
)


IAMGetRolePolicyResponse = TypedDict(
    'IAMGetRolePolicyResponse', {
        'roleNameType': str,
        'policyNameType': str,
        'policyDocumentType': str,
    }
)


IAMGetSAMLProviderResponse = TypedDict(
    'IAMGetSAMLProviderResponse', {
        'SAMLMetadataDocumentType': Optional[str],
        'dateType': Optional[datetime.datetime],
        'dateType': Optional[datetime.datetime],
    }
)


IAMSSHPublicKey = TypedDict(
    'IAMSSHPublicKey', {
        'userNameType': str,
        'publicKeyIdType': str,
        'publicKeyFingerprintType': str,
        'publicKeyMaterialType': str,
        'statusType': str,
        'dateType': Optional[datetime.datetime],
    }
)


IAMGetSSHPublicKeyResponse = TypedDict(
    'IAMGetSSHPublicKeyResponse', {
        'SSHPublicKey': Optional[IAMSSHPublicKey],
    }
)


IAMServerCertificateMetadata = TypedDict(
    'IAMServerCertificateMetadata', {
        'pathType': str,
        'serverCertificateNameType': str,
        'idType': str,
        'arnType': str,
        'dateType': Optional[datetime.datetime],
        'dateType': Optional[datetime.datetime],
    }
)


IAMServerCertificate = TypedDict(
    'IAMServerCertificate', {
        'ServerCertificateMetadata': IAMServerCertificateMetadata,
        'certificateBodyType': str,
        'certificateChainType': Optional[str],
    }
)


IAMGetServerCertificateResponse = TypedDict(
    'IAMGetServerCertificateResponse', {
        'ServerCertificate': IAMServerCertificate,
    }
)


IAMServiceLastAccessed = TypedDict(
    'IAMServiceLastAccessed', {
        'serviceNameType': str,
        'serviceNamespaceType': str,
        'dateType': Optional[datetime.datetime],
        'arnType': Optional[str],
        'integerType': Optional[int],
    }
)


IAMErrorDetails = TypedDict(
    'IAMErrorDetails', {
        'stringType': str,
        'stringType': str,
    }
)


IAMGetServiceLastAccessedDetailsResponse = TypedDict(
    'IAMGetServiceLastAccessedDetailsResponse', {
        'jobStatusType': str,
        'dateType': datetime.datetime,
        'ServicesLastAccessed': List[IAMServiceLastAccessed],
        'dateType': datetime.datetime,
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
        'ErrorDetails': Optional[IAMErrorDetails],
    }
)


IAMEntityInfo = TypedDict(
    'IAMEntityInfo', {
        'arnType': str,
        'userNameType': str,
        'policyOwnerEntityType': str,
        'idType': str,
        'pathType': Optional[str],
    }
)


IAMEntityDetails = TypedDict(
    'IAMEntityDetails', {
        'EntityInfo': IAMEntityInfo,
        'dateType': Optional[datetime.datetime],
    }
)


IAMGetServiceLastAccessedDetailsWithEntitiesResponse = TypedDict(
    'IAMGetServiceLastAccessedDetailsWithEntitiesResponse', {
        'jobStatusType': str,
        'dateType': datetime.datetime,
        'dateType': datetime.datetime,
        'entityDetailsListType': List[IAMEntityDetails],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
        'ErrorDetails': Optional[IAMErrorDetails],
    }
)


IAMRoleUsageType = TypedDict(
    'IAMRoleUsageType', {
        'RegionNameType': Optional[str],
        'ArnListType': Optional[List[str]],
    }
)


IAMDeletionTaskFailureReasonType = TypedDict(
    'IAMDeletionTaskFailureReasonType', {
        'ReasonType': Optional[str],
        'RoleUsageListType': Optional[List[IAMRoleUsageType]],
    }
)


IAMGetServiceLinkedRoleDeletionStatusResponse = TypedDict(
    'IAMGetServiceLinkedRoleDeletionStatusResponse', {
        'DeletionTaskStatusType': str,
        'DeletionTaskFailureReasonType': Optional[IAMDeletionTaskFailureReasonType],
    }
)


IAMGetUserResponse = TypedDict(
    'IAMGetUserResponse', {
        'User': IAMUser,
    }
)


IAMGetUserPolicyResponse = TypedDict(
    'IAMGetUserPolicyResponse', {
        'existingUserNameType': str,
        'policyNameType': str,
        'policyDocumentType': str,
    }
)


IAMAccessKeyMetadata = TypedDict(
    'IAMAccessKeyMetadata', {
        'userNameType': Optional[str],
        'accessKeyIdType': Optional[str],
        'statusType': Optional[str],
        'dateType': Optional[datetime.datetime],
    }
)


IAMListAccessKeysResponse = TypedDict(
    'IAMListAccessKeysResponse', {
        'accessKeyMetadataListType': List[IAMAccessKeyMetadata],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMListAccountAliasesResponse = TypedDict(
    'IAMListAccountAliasesResponse', {
        'accountAliasListType': List[str],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMListAttachedGroupPoliciesResponse = TypedDict(
    'IAMListAttachedGroupPoliciesResponse', {
        'attachedPoliciesListType': Optional[List[IAMAttachedPolicy]],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMListAttachedRolePoliciesResponse = TypedDict(
    'IAMListAttachedRolePoliciesResponse', {
        'attachedPoliciesListType': Optional[List[IAMAttachedPolicy]],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMListAttachedUserPoliciesResponse = TypedDict(
    'IAMListAttachedUserPoliciesResponse', {
        'attachedPoliciesListType': Optional[List[IAMAttachedPolicy]],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMPolicyGroup = TypedDict(
    'IAMPolicyGroup', {
        'groupNameType': Optional[str],
        'idType': Optional[str],
    }
)


IAMPolicyUser = TypedDict(
    'IAMPolicyUser', {
        'userNameType': Optional[str],
        'idType': Optional[str],
    }
)


IAMPolicyRole = TypedDict(
    'IAMPolicyRole', {
        'roleNameType': Optional[str],
        'idType': Optional[str],
    }
)


IAMListEntitiesForPolicyResponse = TypedDict(
    'IAMListEntitiesForPolicyResponse', {
        'PolicyGroupListType': Optional[List[IAMPolicyGroup]],
        'PolicyUserListType': Optional[List[IAMPolicyUser]],
        'PolicyRoleListType': Optional[List[IAMPolicyRole]],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMListGroupPoliciesResponse = TypedDict(
    'IAMListGroupPoliciesResponse', {
        'policyNameListType': List[str],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMListGroupsResponse = TypedDict(
    'IAMListGroupsResponse', {
        'groupListType': List[IAMGroup],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMListGroupsForUserResponse = TypedDict(
    'IAMListGroupsForUserResponse', {
        'groupListType': List[IAMGroup],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMListInstanceProfilesResponse = TypedDict(
    'IAMListInstanceProfilesResponse', {
        'instanceProfileListType': List[IAMInstanceProfile],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMListInstanceProfilesForRoleResponse = TypedDict(
    'IAMListInstanceProfilesForRoleResponse', {
        'instanceProfileListType': List[IAMInstanceProfile],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMMFADevice = TypedDict(
    'IAMMFADevice', {
        'userNameType': str,
        'serialNumberType': str,
        'dateType': datetime.datetime,
    }
)


IAMListMFADevicesResponse = TypedDict(
    'IAMListMFADevicesResponse', {
        'mfaDeviceListType': List[IAMMFADevice],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMOpenIDConnectProviderListEntry = TypedDict(
    'IAMOpenIDConnectProviderListEntry', {
        'arnType': Optional[str],
    }
)


IAMListOpenIDConnectProvidersResponse = TypedDict(
    'IAMListOpenIDConnectProvidersResponse', {
        'OpenIDConnectProviderListType': Optional[List[IAMOpenIDConnectProviderListEntry]],
    }
)


IAMListPoliciesResponse = TypedDict(
    'IAMListPoliciesResponse', {
        'policyListType': Optional[List[IAMPolicy]],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMPolicyGrantingServiceAccess = TypedDict(
    'IAMPolicyGrantingServiceAccess', {
        'policyNameType': str,
        'policyType': str,
        'arnType': Optional[str],
        'policyOwnerEntityType': Optional[str],
        'entityNameType': Optional[str],
    }
)


IAMListPoliciesGrantingServiceAccessEntry = TypedDict(
    'IAMListPoliciesGrantingServiceAccessEntry', {
        'serviceNamespaceType': Optional[str],
        'policyGrantingServiceAccessListType': Optional[List[IAMPolicyGrantingServiceAccess]],
    }
)


IAMListPoliciesGrantingServiceAccessResponse = TypedDict(
    'IAMListPoliciesGrantingServiceAccessResponse', {
        'listPolicyGrantingServiceAccessResponseListType': List[IAMListPoliciesGrantingServiceAccessEntry],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMListPolicyVersionsResponse = TypedDict(
    'IAMListPolicyVersionsResponse', {
        'policyDocumentVersionListType': Optional[List[IAMPolicyVersion]],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMListRolePoliciesResponse = TypedDict(
    'IAMListRolePoliciesResponse', {
        'policyNameListType': List[str],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMListRoleTagsResponse = TypedDict(
    'IAMListRoleTagsResponse', {
        'tagListType': List[IAMTag],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMListRolesResponse = TypedDict(
    'IAMListRolesResponse', {
        'roleListType': List[IAMRole],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMSAMLProviderListEntry = TypedDict(
    'IAMSAMLProviderListEntry', {
        'arnType': Optional[str],
        'dateType': Optional[datetime.datetime],
        'dateType': Optional[datetime.datetime],
    }
)


IAMListSAMLProvidersResponse = TypedDict(
    'IAMListSAMLProvidersResponse', {
        'SAMLProviderListType': Optional[List[IAMSAMLProviderListEntry]],
    }
)


IAMSSHPublicKeyMetadata = TypedDict(
    'IAMSSHPublicKeyMetadata', {
        'userNameType': str,
        'publicKeyIdType': str,
        'statusType': str,
        'dateType': datetime.datetime,
    }
)


IAMListSSHPublicKeysResponse = TypedDict(
    'IAMListSSHPublicKeysResponse', {
        'SSHPublicKeyListType': Optional[List[IAMSSHPublicKeyMetadata]],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMListServerCertificatesResponse = TypedDict(
    'IAMListServerCertificatesResponse', {
        'serverCertificateMetadataListType': List[IAMServerCertificateMetadata],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMServiceSpecificCredentialMetadata = TypedDict(
    'IAMServiceSpecificCredentialMetadata', {
        'userNameType': str,
        'statusType': str,
        'serviceUserName': str,
        'dateType': datetime.datetime,
        'serviceSpecificCredentialId': str,
        'serviceName': str,
    }
)


IAMListServiceSpecificCredentialsResponse = TypedDict(
    'IAMListServiceSpecificCredentialsResponse', {
        'ServiceSpecificCredentialsListType': Optional[List[IAMServiceSpecificCredentialMetadata]],
    }
)


IAMSigningCertificate = TypedDict(
    'IAMSigningCertificate', {
        'userNameType': str,
        'certificateIdType': str,
        'certificateBodyType': str,
        'statusType': str,
        'dateType': Optional[datetime.datetime],
    }
)


IAMListSigningCertificatesResponse = TypedDict(
    'IAMListSigningCertificatesResponse', {
        'certificateListType': List[IAMSigningCertificate],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMListUserPoliciesResponse = TypedDict(
    'IAMListUserPoliciesResponse', {
        'policyNameListType': List[str],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMListUserTagsResponse = TypedDict(
    'IAMListUserTagsResponse', {
        'tagListType': List[IAMTag],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMListUsersResponse = TypedDict(
    'IAMListUsersResponse', {
        'userListType': List[IAMUser],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMListVirtualMFADevicesResponse = TypedDict(
    'IAMListVirtualMFADevicesResponse', {
        'virtualMFADeviceListType': List[IAMVirtualMFADevice],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMResetServiceSpecificCredentialResponse = TypedDict(
    'IAMResetServiceSpecificCredentialResponse', {
        'ServiceSpecificCredential': Optional[IAMServiceSpecificCredential],
    }
)


IAMContextEntry = TypedDict(
    'IAMContextEntry', {
        'ContextKeyNameType': Optional[str],
        'ContextKeyValueListType': Optional[List[str]],
        'ContextKeyTypeEnum': Optional[str],
    }
)


IAMPosition = TypedDict(
    'IAMPosition', {
        'LineNumber': Optional[int],
        'ColumnNumber': Optional[int],
    }
)


IAMStatement = TypedDict(
    'IAMStatement', {
        'PolicyIdentifierType': Optional[str],
        'PolicySourceType': Optional[str],
        'Position': Optional[IAMPosition],
        'Position': Optional[IAMPosition],
    }
)


IAMOrganizationsDecisionDetail = TypedDict(
    'IAMOrganizationsDecisionDetail', {
        'booleanType': Optional[bool],
    }
)


IAMResourceSpecificResult = TypedDict(
    'IAMResourceSpecificResult', {
        'ResourceNameType': str,
        'PolicyEvaluationDecisionType': str,
        'StatementListType': Optional[List[IAMStatement]],
        'ContextKeyNamesResultListType': Optional[List[str]],
        'EvalDecisionDetailsType': Optional[Dict[str, str]],
    }
)


IAMEvaluationResult = TypedDict(
    'IAMEvaluationResult', {
        'ActionNameType': str,
        'PolicyEvaluationDecisionType': str,
        'ResourceNameType': Optional[str],
        'StatementListType': Optional[List[IAMStatement]],
        'ContextKeyNamesResultListType': Optional[List[str]],
        'OrganizationsDecisionDetail': Optional[IAMOrganizationsDecisionDetail],
        'EvalDecisionDetailsType': Optional[Dict[str, str]],
        'ResourceSpecificResultListType': Optional[List[IAMResourceSpecificResult]],
    }
)


IAMSimulatePolicyResponse = TypedDict(
    'IAMSimulatePolicyResponse', {
        'EvaluationResultsListType': Optional[List[IAMEvaluationResult]],
        'booleanType': Optional[bool],
        'responseMarkerType': Optional[str],
    }
)


IAMUpdateRoleResponse = TypedDict(
    'IAMUpdateRoleResponse', {
    }
)


IAMUpdateRoleDescriptionResponse = TypedDict(
    'IAMUpdateRoleDescriptionResponse', {
        'Role': Optional[IAMRole],
    }
)


IAMUpdateSAMLProviderResponse = TypedDict(
    'IAMUpdateSAMLProviderResponse', {
        'arnType': Optional[str],
    }
)


IAMUploadSSHPublicKeyResponse = TypedDict(
    'IAMUploadSSHPublicKeyResponse', {
        'SSHPublicKey': Optional[IAMSSHPublicKey],
    }
)


IAMUploadServerCertificateResponse = TypedDict(
    'IAMUploadServerCertificateResponse', {
        'ServerCertificateMetadata': Optional[IAMServerCertificateMetadata],
    }
)


IAMUploadSigningCertificateResponse = TypedDict(
    'IAMUploadSigningCertificateResponse', {
        'SigningCertificate': IAMSigningCertificate,
    }
)


class ImportExport(BaseClient):
    def cancel_job(self, *,
        JobId: str,
        APIVersion: str = ...
    ) -> ImportExportCancelJobOutput: ...

    def create_job(self, *,
        JobType: str,
        Manifest: str,
        ValidateOnly: bool,
        ManifestAddendum: str = ...,
        APIVersion: str = ...
    ) -> ImportExportCreateJobOutput: ...

    def get_shipping_label(self, *,
        jobIds: List[str],
        name: str = ...,
        company: str = ...,
        phoneNumber: str = ...,
        country: str = ...,
        stateOrProvince: str = ...,
        city: str = ...,
        postalCode: str = ...,
        street1: str = ...,
        street2: str = ...,
        street3: str = ...,
        APIVersion: str = ...
    ) -> ImportExportGetShippingLabelOutput: ...

    def get_status(self, *,
        JobId: str,
        APIVersion: str = ...
    ) -> ImportExportGetStatusOutput: ...

    def list_jobs(self, *,
        MaxJobs: int = ...,
        Marker: str = ...,
        APIVersion: str = ...
    ) -> ImportExportListJobsOutput: ...

    def update_job(self, *,
        JobId: str,
        Manifest: str,
        JobType: str,
        ValidateOnly: bool,
        APIVersion: str = ...
    ) -> ImportExportUpdateJobOutput: ...


ImportExportCancelJobOutput = TypedDict(
    'ImportExportCancelJobOutput', {
        'Success': Optional[bool],
    }
)


ImportExportArtifact = TypedDict(
    'ImportExportArtifact', {
        'Description': Optional[str],
        'URL': Optional[str],
    }
)


ImportExportCreateJobOutput = TypedDict(
    'ImportExportCreateJobOutput', {
        'JobId': Optional[str],
        'JobType': Optional[str],
        'Signature': Optional[str],
        'SignatureFileContents': Optional[str],
        'WarningMessage': Optional[str],
        'ArtifactList': Optional[List[ImportExportArtifact]],
    }
)


ImportExportGetShippingLabelOutput = TypedDict(
    'ImportExportGetShippingLabelOutput', {
        'GenericString': Optional[str],
        'GenericString': Optional[str],
    }
)


ImportExportGetStatusOutput = TypedDict(
    'ImportExportGetStatusOutput', {
        'JobId': Optional[str],
        'JobType': Optional[str],
        'LocationCode': Optional[str],
        'LocationMessage': Optional[str],
        'ProgressCode': Optional[str],
        'ProgressMessage': Optional[str],
        'Carrier': Optional[str],
        'TrackingNumber': Optional[str],
        'LogBucket': Optional[str],
        'LogKey': Optional[str],
        'ErrorCount': Optional[int],
        'Signature': Optional[str],
        'Signature': Optional[str],
        'CurrentManifest': Optional[str],
        'CreationDate': Optional[datetime.datetime],
        'ArtifactList': Optional[List[ImportExportArtifact]],
    }
)


ImportExportJob = TypedDict(
    'ImportExportJob', {
        'JobId': Optional[str],
        'CreationDate': Optional[datetime.datetime],
        'IsCanceled': Optional[bool],
        'JobType': Optional[str],
    }
)


ImportExportListJobsOutput = TypedDict(
    'ImportExportListJobsOutput', {
        'JobsList': Optional[List[ImportExportJob]],
        'IsTruncated': Optional[bool],
    }
)


ImportExportUpdateJobOutput = TypedDict(
    'ImportExportUpdateJobOutput', {
        'Success': Optional[bool],
        'WarningMessage': Optional[str],
        'ArtifactList': Optional[List[ImportExportArtifact]],
    }
)


class Inspector(BaseClient):
    def add_attributes_to_findings(self, *,
        findingArns: List[str],
        attributes: List[InspectorAttribute]
    ) -> InspectorAddAttributesToFindingsResponse: ...

    def create_assessment_target(self, *,
        assessmentTargetName: str,
        resourceGroupArn: str = ...
    ) -> InspectorCreateAssessmentTargetResponse: ...

    def create_assessment_template(self, *,
        assessmentTargetArn: str,
        assessmentTemplateName: str,
        durationInSeconds: int,
        rulesPackageArns: List[str],
        userAttributesForFindings: List[InspectorAttribute] = ...
    ) -> InspectorCreateAssessmentTemplateResponse: ...

    def create_exclusions_preview(self, *,
        assessmentTemplateArn: str
    ) -> InspectorCreateExclusionsPreviewResponse: ...

    def create_resource_group(self, *,
        resourceGroupTags: List[InspectorResourceGroupTag]
    ) -> InspectorCreateResourceGroupResponse: ...

    def delete_assessment_run(self, *,
        assessmentRunArn: str
    ): ...

    def delete_assessment_target(self, *,
        assessmentTargetArn: str
    ): ...

    def delete_assessment_template(self, *,
        assessmentTemplateArn: str
    ): ...

    def describe_assessment_runs(self, *,
        assessmentRunArns: List[str]
    ) -> InspectorDescribeAssessmentRunsResponse: ...

    def describe_assessment_targets(self, *,
        assessmentTargetArns: List[str]
    ) -> InspectorDescribeAssessmentTargetsResponse: ...

    def describe_assessment_templates(self, *,
        assessmentTemplateArns: List[str]
    ) -> InspectorDescribeAssessmentTemplatesResponse: ...

    def describe_cross_account_access_role(self) -> InspectorDescribeCrossAccountAccessRoleResponse: ...

    def describe_exclusions(self, *,
        exclusionArns: List[str],
        locale: str = ...
    ) -> InspectorDescribeExclusionsResponse: ...

    def describe_findings(self, *,
        findingArns: List[str],
        locale: str = ...
    ) -> InspectorDescribeFindingsResponse: ...

    def describe_resource_groups(self, *,
        resourceGroupArns: List[str]
    ) -> InspectorDescribeResourceGroupsResponse: ...

    def describe_rules_packages(self, *,
        rulesPackageArns: List[str],
        locale: str = ...
    ) -> InspectorDescribeRulesPackagesResponse: ...

    def get_assessment_report(self, *,
        assessmentRunArn: str,
        reportFileFormat: str,
        reportType: str
    ) -> InspectorGetAssessmentReportResponse: ...

    def get_exclusions_preview(self, *,
        assessmentTemplateArn: str,
        previewToken: str,
        nextToken: str = ...,
        maxResults: int = ...,
        locale: str = ...
    ) -> InspectorGetExclusionsPreviewResponse: ...

    def get_telemetry_metadata(self, *,
        assessmentRunArn: str
    ) -> InspectorGetTelemetryMetadataResponse: ...

    def list_assessment_run_agents(self, *,
        assessmentRunArn: str,
        filter: InspectorAgentFilter = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> InspectorListAssessmentRunAgentsResponse: ...

    def list_assessment_runs(self, *,
        assessmentTemplateArns: List[str] = ...,
        filter: InspectorAssessmentRunFilter = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> InspectorListAssessmentRunsResponse: ...

    def list_assessment_targets(self, *,
        filter: InspectorAssessmentTargetFilter = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> InspectorListAssessmentTargetsResponse: ...

    def list_assessment_templates(self, *,
        assessmentTargetArns: List[str] = ...,
        filter: InspectorAssessmentTemplateFilter = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> InspectorListAssessmentTemplatesResponse: ...

    def list_event_subscriptions(self, *,
        resourceArn: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> InspectorListEventSubscriptionsResponse: ...

    def list_exclusions(self, *,
        assessmentRunArn: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> InspectorListExclusionsResponse: ...

    def list_findings(self, *,
        assessmentRunArns: List[str] = ...,
        filter: InspectorFindingFilter = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> InspectorListFindingsResponse: ...

    def list_rules_packages(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> InspectorListRulesPackagesResponse: ...

    def list_tags_for_resource(self, *,
        resourceArn: str
    ) -> InspectorListTagsForResourceResponse: ...

    def preview_agents(self, *,
        previewAgentsArn: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> InspectorPreviewAgentsResponse: ...

    def register_cross_account_access_role(self, *,
        roleArn: str
    ): ...

    def remove_attributes_from_findings(self, *,
        findingArns: List[str],
        attributeKeys: List[str]
    ) -> InspectorRemoveAttributesFromFindingsResponse: ...

    def set_tags_for_resource(self, *,
        resourceArn: str,
        tags: List[InspectorTag] = ...
    ): ...

    def start_assessment_run(self, *,
        assessmentTemplateArn: str,
        assessmentRunName: str = ...
    ) -> InspectorStartAssessmentRunResponse: ...

    def stop_assessment_run(self, *,
        assessmentRunArn: str,
        stopAction: str = ...
    ): ...

    def subscribe_to_event(self, *,
        resourceArn: str,
        event: str,
        topicArn: str
    ): ...

    def unsubscribe_from_event(self, *,
        resourceArn: str,
        event: str,
        topicArn: str
    ): ...

    def update_assessment_target(self, *,
        assessmentTargetArn: str,
        assessmentTargetName: str,
        resourceGroupArn: str = ...
    ): ...


InspectorAttribute = TypedDict(
    'InspectorAttribute', {
        'AttributeKey': str,
        'AttributeValue': Optional[str],
    }
)


InspectorFailedItemDetails = TypedDict(
    'InspectorFailedItemDetails', {
        'FailedItemErrorCode': str,
        'Bool': bool,
    }
)


InspectorAddAttributesToFindingsResponse = TypedDict(
    'InspectorAddAttributesToFindingsResponse', {
        'FailedItems': Dict[str, InspectorFailedItemDetails],
    }
)


InspectorCreateAssessmentTargetResponse = TypedDict(
    'InspectorCreateAssessmentTargetResponse', {
        'Arn': str,
    }
)


InspectorCreateAssessmentTemplateResponse = TypedDict(
    'InspectorCreateAssessmentTemplateResponse', {
        'Arn': str,
    }
)


InspectorCreateExclusionsPreviewResponse = TypedDict(
    'InspectorCreateExclusionsPreviewResponse', {
        'UUID': str,
    }
)


InspectorResourceGroupTag = TypedDict(
    'InspectorResourceGroupTag', {
        'TagKey': str,
        'TagValue': Optional[str],
    }
)


InspectorCreateResourceGroupResponse = TypedDict(
    'InspectorCreateResourceGroupResponse', {
        'Arn': str,
    }
)


InspectorAssessmentRunStateChange = TypedDict(
    'InspectorAssessmentRunStateChange', {
        'Timestamp': datetime.datetime,
        'AssessmentRunState': str,
    }
)


InspectorAssessmentRunNotification = TypedDict(
    'InspectorAssessmentRunNotification', {
        'Timestamp': datetime.datetime,
        'InspectorEvent': str,
        'Bool': bool,
        'Message': Optional[str],
        'Arn': Optional[str],
        'AssessmentRunNotificationSnsStatusCode': Optional[str],
    }
)


InspectorAssessmentRun = TypedDict(
    'InspectorAssessmentRun', {
        'Arn': str,
        'AssessmentRunName': str,
        'Arn': str,
        'AssessmentRunState': str,
        'AssessmentRunDuration': int,
        'AssessmentRulesPackageArnList': List[str],
        'UserAttributeList': List[InspectorAttribute],
        'Timestamp': datetime.datetime,
        'Timestamp': datetime.datetime,
        'Bool': bool,
        'AssessmentRunStateChangeList': List[InspectorAssessmentRunStateChange],
        'AssessmentRunNotificationList': List[InspectorAssessmentRunNotification],
        'AssessmentRunFindingCounts': Dict[str, int],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


InspectorDescribeAssessmentRunsResponse = TypedDict(
    'InspectorDescribeAssessmentRunsResponse', {
        'AssessmentRunList': List[InspectorAssessmentRun],
        'FailedItems': Dict[str, InspectorFailedItemDetails],
    }
)


InspectorAssessmentTarget = TypedDict(
    'InspectorAssessmentTarget', {
        'Arn': str,
        'AssessmentTargetName': str,
        'Timestamp': datetime.datetime,
        'Timestamp': datetime.datetime,
        'Arn': Optional[str],
    }
)


InspectorDescribeAssessmentTargetsResponse = TypedDict(
    'InspectorDescribeAssessmentTargetsResponse', {
        'AssessmentTargetList': List[InspectorAssessmentTarget],
        'FailedItems': Dict[str, InspectorFailedItemDetails],
    }
)


InspectorAssessmentTemplate = TypedDict(
    'InspectorAssessmentTemplate', {
        'Arn': str,
        'AssessmentTemplateName': str,
        'Arn': str,
        'AssessmentRunDuration': int,
        'AssessmentTemplateRulesPackageArnList': List[str],
        'UserAttributeList': List[InspectorAttribute],
        'ArnCount': int,
        'Timestamp': datetime.datetime,
        'Arn': Optional[str],
    }
)


InspectorDescribeAssessmentTemplatesResponse = TypedDict(
    'InspectorDescribeAssessmentTemplatesResponse', {
        'AssessmentTemplateList': List[InspectorAssessmentTemplate],
        'FailedItems': Dict[str, InspectorFailedItemDetails],
    }
)


InspectorDescribeCrossAccountAccessRoleResponse = TypedDict(
    'InspectorDescribeCrossAccountAccessRoleResponse', {
        'Arn': str,
        'Bool': bool,
        'Timestamp': datetime.datetime,
    }
)


InspectorScope = TypedDict(
    'InspectorScope', {
        'ScopeType': Optional[str],
        'ScopeValue': Optional[str],
    }
)


InspectorExclusion = TypedDict(
    'InspectorExclusion', {
        'Arn': str,
        'Text': str,
        'Text': str,
        'Text': str,
        'ScopeList': List[InspectorScope],
        'AttributeList': Optional[List[InspectorAttribute]],
    }
)


InspectorDescribeExclusionsResponse = TypedDict(
    'InspectorDescribeExclusionsResponse', {
        'ExclusionMap': Dict[str, InspectorExclusion],
        'FailedItems': Dict[str, InspectorFailedItemDetails],
    }
)


InspectorInspectorServiceAttributes = TypedDict(
    'InspectorInspectorServiceAttributes', {
        'NumericVersion': int,
        'Arn': Optional[str],
        'Arn': Optional[str],
    }
)


InspectorTag = TypedDict(
    'InspectorTag', {
        'TagKey': str,
        'TagValue': Optional[str],
    }
)


InspectorPrivateIp = TypedDict(
    'InspectorPrivateIp', {
        'Text': Optional[str],
        'Text': Optional[str],
    }
)


InspectorSecurityGroup = TypedDict(
    'InspectorSecurityGroup', {
        'Text': Optional[str],
        'Text': Optional[str],
    }
)


InspectorNetworkInterface = TypedDict(
    'InspectorNetworkInterface', {
        'Text': Optional[str],
        'Text': Optional[str],
        'Text': Optional[str],
        'Text': Optional[str],
        'Text': Optional[str],
        'PrivateIpAddresses': Optional[List[InspectorPrivateIp]],
        'Text': Optional[str],
        'Text': Optional[str],
        'Ipv6Addresses': Optional[List[str]],
        'SecurityGroups': Optional[List[InspectorSecurityGroup]],
    }
)


InspectorAssetAttributes = TypedDict(
    'InspectorAssetAttributes', {
        'NumericVersion': int,
        'AgentId': Optional[str],
        'AutoScalingGroup': Optional[str],
        'AmiId': Optional[str],
        'Hostname': Optional[str],
        'Ipv4AddressList': Optional[List[str]],
        'Tags': Optional[List[InspectorTag]],
        'NetworkInterfaces': Optional[List[InspectorNetworkInterface]],
    }
)


InspectorFinding = TypedDict(
    'InspectorFinding', {
        'Arn': str,
        'AttributeList': List[InspectorAttribute],
        'UserAttributeList': List[InspectorAttribute],
        'Timestamp': datetime.datetime,
        'Timestamp': datetime.datetime,
        'NumericVersion': Optional[int],
        'ServiceName': Optional[str],
        'InspectorServiceAttributes': Optional[InspectorInspectorServiceAttributes],
        'AssetType': Optional[str],
        'AssetAttributes': Optional[InspectorAssetAttributes],
        'FindingId': Optional[str],
        'Text': Optional[str],
        'Text': Optional[str],
        'Text': Optional[str],
        'Severity': Optional[str],
        'NumericSeverity': Optional[float],
        'IocConfidence': Optional[int],
        'Bool': Optional[bool],
    }
)


InspectorDescribeFindingsResponse = TypedDict(
    'InspectorDescribeFindingsResponse', {
        'FindingList': List[InspectorFinding],
        'FailedItems': Dict[str, InspectorFailedItemDetails],
    }
)


InspectorResourceGroup = TypedDict(
    'InspectorResourceGroup', {
        'Arn': str,
        'ResourceGroupTags': List[InspectorResourceGroupTag],
        'Timestamp': datetime.datetime,
    }
)


InspectorDescribeResourceGroupsResponse = TypedDict(
    'InspectorDescribeResourceGroupsResponse', {
        'ResourceGroupList': List[InspectorResourceGroup],
        'FailedItems': Dict[str, InspectorFailedItemDetails],
    }
)


InspectorRulesPackage = TypedDict(
    'InspectorRulesPackage', {
        'Arn': str,
        'RulesPackageName': str,
        'Version': str,
        'ProviderName': str,
        'Text': Optional[str],
    }
)


InspectorDescribeRulesPackagesResponse = TypedDict(
    'InspectorDescribeRulesPackagesResponse', {
        'RulesPackageList': List[InspectorRulesPackage],
        'FailedItems': Dict[str, InspectorFailedItemDetails],
    }
)


InspectorGetAssessmentReportResponse = TypedDict(
    'InspectorGetAssessmentReportResponse', {
        'ReportStatus': str,
        'Url': Optional[str],
    }
)


InspectorExclusionPreview = TypedDict(
    'InspectorExclusionPreview', {
        'Text': str,
        'Text': str,
        'Text': str,
        'ScopeList': List[InspectorScope],
        'AttributeList': Optional[List[InspectorAttribute]],
    }
)


InspectorGetExclusionsPreviewResponse = TypedDict(
    'InspectorGetExclusionsPreviewResponse', {
        'PreviewStatus': str,
        'ExclusionPreviewList': Optional[List[InspectorExclusionPreview]],
        'PaginationToken': Optional[str],
    }
)


InspectorTelemetryMetadata = TypedDict(
    'InspectorTelemetryMetadata', {
        'MessageType': str,
        'Long': int,
        'Long': Optional[int],
    }
)


InspectorGetTelemetryMetadataResponse = TypedDict(
    'InspectorGetTelemetryMetadataResponse', {
        'TelemetryMetadataList': List[InspectorTelemetryMetadata],
    }
)


InspectorAgentFilter = TypedDict(
    'InspectorAgentFilter', {
        'AgentHealthList': List[str],
        'AgentHealthCodeList': List[str],
    }
)


InspectorAssessmentRunAgent = TypedDict(
    'InspectorAssessmentRunAgent', {
        'AgentId': str,
        'Arn': str,
        'AgentHealth': str,
        'AgentHealthCode': str,
        'TelemetryMetadataList': List[InspectorTelemetryMetadata],
        'Message': Optional[str],
        'AutoScalingGroup': Optional[str],
    }
)


InspectorListAssessmentRunAgentsResponse = TypedDict(
    'InspectorListAssessmentRunAgentsResponse', {
        'AssessmentRunAgentList': List[InspectorAssessmentRunAgent],
        'PaginationToken': Optional[str],
    }
)


InspectorDurationRange = TypedDict(
    'InspectorDurationRange', {
        'AssessmentRunDuration': Optional[int],
        'AssessmentRunDuration': Optional[int],
    }
)


InspectorTimestampRange = TypedDict(
    'InspectorTimestampRange', {
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


InspectorAssessmentRunFilter = TypedDict(
    'InspectorAssessmentRunFilter', {
        'NamePattern': Optional[str],
        'AssessmentRunStateList': Optional[List[str]],
        'DurationRange': Optional[InspectorDurationRange],
        'FilterRulesPackageArnList': Optional[List[str]],
        'TimestampRange': Optional[InspectorTimestampRange],
        'TimestampRange': Optional[InspectorTimestampRange],
        'TimestampRange': Optional[InspectorTimestampRange],
    }
)


InspectorListAssessmentRunsResponse = TypedDict(
    'InspectorListAssessmentRunsResponse', {
        'ListReturnedArnList': List[str],
        'PaginationToken': Optional[str],
    }
)


InspectorAssessmentTargetFilter = TypedDict(
    'InspectorAssessmentTargetFilter', {
        'NamePattern': Optional[str],
    }
)


InspectorListAssessmentTargetsResponse = TypedDict(
    'InspectorListAssessmentTargetsResponse', {
        'ListReturnedArnList': List[str],
        'PaginationToken': Optional[str],
    }
)


InspectorAssessmentTemplateFilter = TypedDict(
    'InspectorAssessmentTemplateFilter', {
        'NamePattern': Optional[str],
        'DurationRange': Optional[InspectorDurationRange],
        'FilterRulesPackageArnList': Optional[List[str]],
    }
)


InspectorListAssessmentTemplatesResponse = TypedDict(
    'InspectorListAssessmentTemplatesResponse', {
        'ListReturnedArnList': List[str],
        'PaginationToken': Optional[str],
    }
)


InspectorEventSubscription = TypedDict(
    'InspectorEventSubscription', {
        'InspectorEvent': str,
        'Timestamp': datetime.datetime,
    }
)


InspectorSubscription = TypedDict(
    'InspectorSubscription', {
        'Arn': str,
        'Arn': str,
        'EventSubscriptionList': List[InspectorEventSubscription],
    }
)


InspectorListEventSubscriptionsResponse = TypedDict(
    'InspectorListEventSubscriptionsResponse', {
        'SubscriptionList': List[InspectorSubscription],
        'PaginationToken': Optional[str],
    }
)


InspectorListExclusionsResponse = TypedDict(
    'InspectorListExclusionsResponse', {
        'ListReturnedArnList': List[str],
        'PaginationToken': Optional[str],
    }
)


InspectorFindingFilter = TypedDict(
    'InspectorFindingFilter', {
        'AgentIdList': Optional[List[str]],
        'AutoScalingGroupList': Optional[List[str]],
        'RuleNameList': Optional[List[str]],
        'SeverityList': Optional[List[str]],
        'FilterRulesPackageArnList': Optional[List[str]],
        'AttributeList': Optional[List[InspectorAttribute]],
        'AttributeList': Optional[List[InspectorAttribute]],
        'TimestampRange': Optional[InspectorTimestampRange],
    }
)


InspectorListFindingsResponse = TypedDict(
    'InspectorListFindingsResponse', {
        'ListReturnedArnList': List[str],
        'PaginationToken': Optional[str],
    }
)


InspectorListRulesPackagesResponse = TypedDict(
    'InspectorListRulesPackagesResponse', {
        'ListReturnedArnList': List[str],
        'PaginationToken': Optional[str],
    }
)


InspectorListTagsForResourceResponse = TypedDict(
    'InspectorListTagsForResourceResponse', {
        'TagList': List[InspectorTag],
    }
)


InspectorAgentPreview = TypedDict(
    'InspectorAgentPreview', {
        'AgentId': str,
        'Hostname': Optional[str],
        'AutoScalingGroup': Optional[str],
        'AgentHealth': Optional[str],
        'AgentVersion': Optional[str],
        'OperatingSystem': Optional[str],
        'KernelVersion': Optional[str],
        'Ipv4Address': Optional[str],
    }
)


InspectorPreviewAgentsResponse = TypedDict(
    'InspectorPreviewAgentsResponse', {
        'AgentPreviewList': List[InspectorAgentPreview],
        'PaginationToken': Optional[str],
    }
)


InspectorRemoveAttributesFromFindingsResponse = TypedDict(
    'InspectorRemoveAttributesFromFindingsResponse', {
        'FailedItems': Dict[str, InspectorFailedItemDetails],
    }
)


InspectorStartAssessmentRunResponse = TypedDict(
    'InspectorStartAssessmentRunResponse', {
        'Arn': str,
    }
)


class IoT(BaseClient):
    def accept_certificate_transfer(self, *,
        certificateId: str,
        setAsActive: bool = ...
    ): ...

    def add_thing_to_billing_group(self, *,
        billingGroupName: str = ...,
        billingGroupArn: str = ...,
        thingName: str = ...,
        thingArn: str = ...
    ) -> IoTAddThingToBillingGroupResponse: ...

    def add_thing_to_thing_group(self, *,
        thingGroupName: str = ...,
        thingGroupArn: str = ...,
        thingName: str = ...,
        thingArn: str = ...,
        overrideDynamicGroups: bool = ...
    ) -> IoTAddThingToThingGroupResponse: ...

    def associate_targets_with_job(self, *,
        targets: List[str],
        jobId: str,
        comment: str = ...
    ) -> IoTAssociateTargetsWithJobResponse: ...

    def attach_policy(self, *,
        policyName: str,
        target: str
    ): ...

    def attach_principal_policy(self, *,
        policyName: str,
        principal: str
    ): ...

    def attach_security_profile(self, *,
        securityProfileName: str,
        securityProfileTargetArn: str
    ) -> IoTAttachSecurityProfileResponse: ...

    def attach_thing_principal(self, *,
        thingName: str,
        principal: str
    ) -> IoTAttachThingPrincipalResponse: ...

    def cancel_audit_task(self, *,
        taskId: str
    ) -> IoTCancelAuditTaskResponse: ...

    def cancel_certificate_transfer(self, *,
        certificateId: str
    ): ...

    def cancel_job(self, *,
        jobId: str,
        reasonCode: str = ...,
        comment: str = ...,
        force: bool = ...
    ) -> IoTCancelJobResponse: ...

    def cancel_job_execution(self, *,
        jobId: str,
        thingName: str,
        force: bool = ...,
        expectedVersion: int = ...,
        statusDetails: Dict[str, str] = ...
    ): ...

    def clear_default_authorizer(self) -> IoTClearDefaultAuthorizerResponse: ...

    def create_authorizer(self, *,
        authorizerName: str,
        authorizerFunctionArn: str,
        tokenKeyName: str,
        tokenSigningPublicKeys: Dict[str, str],
        status: str = ...
    ) -> IoTCreateAuthorizerResponse: ...

    def create_billing_group(self, *,
        billingGroupName: str,
        billingGroupProperties: IoTBillingGroupProperties = ...,
        tags: List[IoTTag] = ...
    ) -> IoTCreateBillingGroupResponse: ...

    def create_certificate_from_csr(self, *,
        certificateSigningRequest: str,
        setAsActive: bool = ...
    ) -> IoTCreateCertificateFromCsrResponse: ...

    def create_dynamic_thing_group(self, *,
        thingGroupName: str,
        queryString: str,
        thingGroupProperties: IoTThingGroupProperties = ...,
        indexName: str = ...,
        queryVersion: str = ...,
        tags: List[IoTTag] = ...
    ) -> IoTCreateDynamicThingGroupResponse: ...

    def create_job(self, *,
        jobId: str,
        targets: List[str],
        documentSource: str = ...,
        document: str = ...,
        description: str = ...,
        presignedUrlConfig: IoTPresignedUrlConfig = ...,
        targetSelection: str = ...,
        jobExecutionsRolloutConfig: IoTJobExecutionsRolloutConfig = ...,
        abortConfig: IoTAbortConfig = ...,
        timeoutConfig: IoTTimeoutConfig = ...,
        tags: List[IoTTag] = ...
    ) -> IoTCreateJobResponse: ...

    def create_keys_and_certificate(self, *,
        setAsActive: bool = ...
    ) -> IoTCreateKeysAndCertificateResponse: ...

    def create_ota_update(self, *,
        otaUpdateId: str,
        targets: List[str],
        files: List[IoTOTAUpdateFile],
        roleArn: str,
        description: str = ...,
        targetSelection: str = ...,
        awsJobExecutionsRolloutConfig: IoTAwsJobExecutionsRolloutConfig = ...,
        additionalParameters: Dict[str, str] = ...,
        tags: List[IoTTag] = ...
    ) -> IoTCreateOTAUpdateResponse: ...

    def create_policy(self, *,
        policyName: str,
        policyDocument: str
    ) -> IoTCreatePolicyResponse: ...

    def create_policy_version(self, *,
        policyName: str,
        policyDocument: str,
        setAsDefault: bool = ...
    ) -> IoTCreatePolicyVersionResponse: ...

    def create_role_alias(self, *,
        roleAlias: str,
        roleArn: str,
        credentialDurationSeconds: int = ...
    ) -> IoTCreateRoleAliasResponse: ...

    def create_scheduled_audit(self, *,
        frequency: str,
        targetCheckNames: List[str],
        scheduledAuditName: str,
        dayOfMonth: str = ...,
        dayOfWeek: str = ...,
        tags: List[IoTTag] = ...
    ) -> IoTCreateScheduledAuditResponse: ...

    def create_security_profile(self, *,
        securityProfileName: str,
        securityProfileDescription: str = ...,
        behaviors: List[IoTBehavior] = ...,
        alertTargets: Dict[str, IoTAlertTarget] = ...,
        additionalMetricsToRetain: List[str] = ...,
        tags: List[IoTTag] = ...
    ) -> IoTCreateSecurityProfileResponse: ...

    def create_stream(self, *,
        streamId: str,
        files: List[IoTStreamFile],
        roleArn: str,
        description: str = ...,
        tags: List[IoTTag] = ...
    ) -> IoTCreateStreamResponse: ...

    def create_thing(self, *,
        thingName: str,
        thingTypeName: str = ...,
        attributePayload: IoTAttributePayload = ...,
        billingGroupName: str = ...
    ) -> IoTCreateThingResponse: ...

    def create_thing_group(self, *,
        thingGroupName: str,
        parentGroupName: str = ...,
        thingGroupProperties: IoTThingGroupProperties = ...,
        tags: List[IoTTag] = ...
    ) -> IoTCreateThingGroupResponse: ...

    def create_thing_type(self, *,
        thingTypeName: str,
        thingTypeProperties: IoTThingTypeProperties = ...,
        tags: List[IoTTag] = ...
    ) -> IoTCreateThingTypeResponse: ...

    def create_topic_rule(self, *,
        ruleName: str,
        topicRulePayload: IoTTopicRulePayload,
        tags: str = ...
    ): ...

    def delete_account_audit_configuration(self, *,
        deleteScheduledAudits: bool = ...
    ) -> IoTDeleteAccountAuditConfigurationResponse: ...

    def delete_authorizer(self, *,
        authorizerName: str
    ) -> IoTDeleteAuthorizerResponse: ...

    def delete_billing_group(self, *,
        billingGroupName: str,
        expectedVersion: int = ...
    ) -> IoTDeleteBillingGroupResponse: ...

    def delete_ca_certificate(self, *,
        certificateId: str
    ) -> IoTDeleteCACertificateResponse: ...

    def delete_certificate(self, *,
        certificateId: str,
        forceDelete: bool = ...
    ): ...

    def delete_dynamic_thing_group(self, *,
        thingGroupName: str,
        expectedVersion: int = ...
    ) -> IoTDeleteDynamicThingGroupResponse: ...

    def delete_job(self, *,
        jobId: str,
        force: bool = ...
    ): ...

    def delete_job_execution(self, *,
        jobId: str,
        thingName: str,
        executionNumber: int,
        force: bool = ...
    ): ...

    def delete_ota_update(self, *,
        otaUpdateId: str,
        deleteStream: bool = ...,
        forceDeleteAWSJob: bool = ...
    ) -> IoTDeleteOTAUpdateResponse: ...

    def delete_policy(self, *,
        policyName: str
    ): ...

    def delete_policy_version(self, *,
        policyName: str,
        policyVersionId: str
    ): ...

    def delete_registration_code(self) -> IoTDeleteRegistrationCodeResponse: ...

    def delete_role_alias(self, *,
        roleAlias: str
    ) -> IoTDeleteRoleAliasResponse: ...

    def delete_scheduled_audit(self, *,
        scheduledAuditName: str
    ) -> IoTDeleteScheduledAuditResponse: ...

    def delete_security_profile(self, *,
        securityProfileName: str,
        expectedVersion: int = ...
    ) -> IoTDeleteSecurityProfileResponse: ...

    def delete_stream(self, *,
        streamId: str
    ) -> IoTDeleteStreamResponse: ...

    def delete_thing(self, *,
        thingName: str,
        expectedVersion: int = ...
    ) -> IoTDeleteThingResponse: ...

    def delete_thing_group(self, *,
        thingGroupName: str,
        expectedVersion: int = ...
    ) -> IoTDeleteThingGroupResponse: ...

    def delete_thing_type(self, *,
        thingTypeName: str
    ) -> IoTDeleteThingTypeResponse: ...

    def delete_topic_rule(self, *,
        ruleName: str
    ): ...

    def delete_v2_logging_level(self, *,
        targetType: str,
        targetName: str
    ): ...

    def deprecate_thing_type(self, *,
        thingTypeName: str,
        undoDeprecate: bool = ...
    ) -> IoTDeprecateThingTypeResponse: ...

    def describe_account_audit_configuration(self) -> IoTDescribeAccountAuditConfigurationResponse: ...

    def describe_audit_task(self, *,
        taskId: str
    ) -> IoTDescribeAuditTaskResponse: ...

    def describe_authorizer(self, *,
        authorizerName: str
    ) -> IoTDescribeAuthorizerResponse: ...

    def describe_billing_group(self, *,
        billingGroupName: str
    ) -> IoTDescribeBillingGroupResponse: ...

    def describe_ca_certificate(self, *,
        certificateId: str
    ) -> IoTDescribeCACertificateResponse: ...

    def describe_certificate(self, *,
        certificateId: str
    ) -> IoTDescribeCertificateResponse: ...

    def describe_default_authorizer(self) -> IoTDescribeDefaultAuthorizerResponse: ...

    def describe_endpoint(self, *,
        endpointType: str = ...
    ) -> IoTDescribeEndpointResponse: ...

    def describe_event_configurations(self) -> IoTDescribeEventConfigurationsResponse: ...

    def describe_index(self, *,
        indexName: str
    ) -> IoTDescribeIndexResponse: ...

    def describe_job(self, *,
        jobId: str
    ) -> IoTDescribeJobResponse: ...

    def describe_job_execution(self, *,
        jobId: str,
        thingName: str,
        executionNumber: int = ...
    ) -> IoTDescribeJobExecutionResponse: ...

    def describe_role_alias(self, *,
        roleAlias: str
    ) -> IoTDescribeRoleAliasResponse: ...

    def describe_scheduled_audit(self, *,
        scheduledAuditName: str
    ) -> IoTDescribeScheduledAuditResponse: ...

    def describe_security_profile(self, *,
        securityProfileName: str
    ) -> IoTDescribeSecurityProfileResponse: ...

    def describe_stream(self, *,
        streamId: str
    ) -> IoTDescribeStreamResponse: ...

    def describe_thing(self, *,
        thingName: str
    ) -> IoTDescribeThingResponse: ...

    def describe_thing_group(self, *,
        thingGroupName: str
    ) -> IoTDescribeThingGroupResponse: ...

    def describe_thing_registration_task(self, *,
        taskId: str
    ) -> IoTDescribeThingRegistrationTaskResponse: ...

    def describe_thing_type(self, *,
        thingTypeName: str
    ) -> IoTDescribeThingTypeResponse: ...

    def detach_policy(self, *,
        policyName: str,
        target: str
    ): ...

    def detach_principal_policy(self, *,
        policyName: str,
        principal: str
    ): ...

    def detach_security_profile(self, *,
        securityProfileName: str,
        securityProfileTargetArn: str
    ) -> IoTDetachSecurityProfileResponse: ...

    def detach_thing_principal(self, *,
        thingName: str,
        principal: str
    ) -> IoTDetachThingPrincipalResponse: ...

    def disable_topic_rule(self, *,
        ruleName: str
    ): ...

    def enable_topic_rule(self, *,
        ruleName: str
    ): ...

    def get_effective_policies(self, *,
        principal: str = ...,
        cognitoIdentityPoolId: str = ...,
        thingName: str = ...
    ) -> IoTGetEffectivePoliciesResponse: ...

    def get_indexing_configuration(self) -> IoTGetIndexingConfigurationResponse: ...

    def get_job_document(self, *,
        jobId: str
    ) -> IoTGetJobDocumentResponse: ...

    def get_logging_options(self) -> IoTGetLoggingOptionsResponse: ...

    def get_ota_update(self, *,
        otaUpdateId: str
    ) -> IoTGetOTAUpdateResponse: ...

    def get_policy(self, *,
        policyName: str
    ) -> IoTGetPolicyResponse: ...

    def get_policy_version(self, *,
        policyName: str,
        policyVersionId: str
    ) -> IoTGetPolicyVersionResponse: ...

    def get_registration_code(self) -> IoTGetRegistrationCodeResponse: ...

    def get_statistics(self, *,
        queryString: str,
        indexName: str = ...,
        aggregationField: str = ...,
        queryVersion: str = ...
    ) -> IoTGetStatisticsResponse: ...

    def get_topic_rule(self, *,
        ruleName: str
    ) -> IoTGetTopicRuleResponse: ...

    def get_v2_logging_options(self) -> IoTGetV2LoggingOptionsResponse: ...

    def list_active_violations(self, *,
        thingName: str = ...,
        securityProfileName: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTListActiveViolationsResponse: ...

    def list_attached_policies(self, *,
        target: str,
        recursive: bool = ...,
        marker: str = ...,
        pageSize: int = ...
    ) -> IoTListAttachedPoliciesResponse: ...

    def list_audit_findings(self, *,
        taskId: str = ...,
        checkName: str = ...,
        resourceIdentifier: IoTResourceIdentifier = ...,
        maxResults: int = ...,
        nextToken: str = ...,
        startTime: datetime.datetime = ...,
        endTime: datetime.datetime = ...
    ) -> IoTListAuditFindingsResponse: ...

    def list_audit_tasks(self, *,
        startTime: datetime.datetime,
        endTime: datetime.datetime,
        taskType: str = ...,
        taskStatus: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTListAuditTasksResponse: ...

    def list_authorizers(self, *,
        pageSize: int = ...,
        marker: str = ...,
        ascendingOrder: bool = ...,
        status: str = ...
    ) -> IoTListAuthorizersResponse: ...

    def list_billing_groups(self, *,
        nextToken: str = ...,
        maxResults: int = ...,
        namePrefixFilter: str = ...
    ) -> IoTListBillingGroupsResponse: ...

    def list_ca_certificates(self, *,
        pageSize: int = ...,
        marker: str = ...,
        ascendingOrder: bool = ...
    ) -> IoTListCACertificatesResponse: ...

    def list_certificates(self, *,
        pageSize: int = ...,
        marker: str = ...,
        ascendingOrder: bool = ...
    ) -> IoTListCertificatesResponse: ...

    def list_certificates_by_ca(self, *,
        caCertificateId: str,
        pageSize: int = ...,
        marker: str = ...,
        ascendingOrder: bool = ...
    ) -> IoTListCertificatesByCAResponse: ...

    def list_indices(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTListIndicesResponse: ...

    def list_job_executions_for_job(self, *,
        jobId: str,
        status: str = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> IoTListJobExecutionsForJobResponse: ...

    def list_job_executions_for_thing(self, *,
        thingName: str,
        status: str = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> IoTListJobExecutionsForThingResponse: ...

    def list_jobs(self, *,
        status: str = ...,
        targetSelection: str = ...,
        maxResults: int = ...,
        nextToken: str = ...,
        thingGroupName: str = ...,
        thingGroupId: str = ...
    ) -> IoTListJobsResponse: ...

    def list_ota_updates(self, *,
        maxResults: int = ...,
        nextToken: str = ...,
        otaUpdateStatus: str = ...
    ) -> IoTListOTAUpdatesResponse: ...

    def list_outgoing_certificates(self, *,
        pageSize: int = ...,
        marker: str = ...,
        ascendingOrder: bool = ...
    ) -> IoTListOutgoingCertificatesResponse: ...

    def list_policies(self, *,
        marker: str = ...,
        pageSize: int = ...,
        ascendingOrder: bool = ...
    ) -> IoTListPoliciesResponse: ...

    def list_policy_principals(self, *,
        policyName: str,
        marker: str = ...,
        pageSize: int = ...,
        ascendingOrder: bool = ...
    ) -> IoTListPolicyPrincipalsResponse: ...

    def list_policy_versions(self, *,
        policyName: str
    ) -> IoTListPolicyVersionsResponse: ...

    def list_principal_policies(self, *,
        principal: str,
        marker: str = ...,
        pageSize: int = ...,
        ascendingOrder: bool = ...
    ) -> IoTListPrincipalPoliciesResponse: ...

    def list_principal_things(self, *,
        principal: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTListPrincipalThingsResponse: ...

    def list_role_aliases(self, *,
        pageSize: int = ...,
        marker: str = ...,
        ascendingOrder: bool = ...
    ) -> IoTListRoleAliasesResponse: ...

    def list_scheduled_audits(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTListScheduledAuditsResponse: ...

    def list_security_profiles(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTListSecurityProfilesResponse: ...

    def list_security_profiles_for_target(self, *,
        securityProfileTargetArn: str,
        nextToken: str = ...,
        maxResults: int = ...,
        recursive: bool = ...
    ) -> IoTListSecurityProfilesForTargetResponse: ...

    def list_streams(self, *,
        maxResults: int = ...,
        nextToken: str = ...,
        ascendingOrder: bool = ...
    ) -> IoTListStreamsResponse: ...

    def list_tags_for_resource(self, *,
        resourceArn: str,
        nextToken: str = ...
    ) -> IoTListTagsForResourceResponse: ...

    def list_targets_for_policy(self, *,
        policyName: str,
        marker: str = ...,
        pageSize: int = ...
    ) -> IoTListTargetsForPolicyResponse: ...

    def list_targets_for_security_profile(self, *,
        securityProfileName: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTListTargetsForSecurityProfileResponse: ...

    def list_thing_groups(self, *,
        nextToken: str = ...,
        maxResults: int = ...,
        parentGroup: str = ...,
        namePrefixFilter: str = ...,
        recursive: bool = ...
    ) -> IoTListThingGroupsResponse: ...

    def list_thing_groups_for_thing(self, *,
        thingName: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTListThingGroupsForThingResponse: ...

    def list_thing_principals(self, *,
        thingName: str
    ) -> IoTListThingPrincipalsResponse: ...

    def list_thing_registration_task_reports(self, *,
        taskId: str,
        reportType: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTListThingRegistrationTaskReportsResponse: ...

    def list_thing_registration_tasks(self, *,
        nextToken: str = ...,
        maxResults: int = ...,
        status: str = ...
    ) -> IoTListThingRegistrationTasksResponse: ...

    def list_thing_types(self, *,
        nextToken: str = ...,
        maxResults: int = ...,
        thingTypeName: str = ...
    ) -> IoTListThingTypesResponse: ...

    def list_things(self, *,
        nextToken: str = ...,
        maxResults: int = ...,
        attributeName: str = ...,
        attributeValue: str = ...,
        thingTypeName: str = ...
    ) -> IoTListThingsResponse: ...

    def list_things_in_billing_group(self, *,
        billingGroupName: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTListThingsInBillingGroupResponse: ...

    def list_things_in_thing_group(self, *,
        thingGroupName: str,
        recursive: bool = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTListThingsInThingGroupResponse: ...

    def list_topic_rules(self, *,
        topic: str = ...,
        maxResults: int = ...,
        nextToken: str = ...,
        ruleDisabled: bool = ...
    ) -> IoTListTopicRulesResponse: ...

    def list_v2_logging_levels(self, *,
        targetType: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTListV2LoggingLevelsResponse: ...

    def list_violation_events(self, *,
        startTime: datetime.datetime,
        endTime: datetime.datetime,
        thingName: str = ...,
        securityProfileName: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTListViolationEventsResponse: ...

    def register_ca_certificate(self, *,
        caCertificate: str,
        verificationCertificate: str,
        setAsActive: bool = ...,
        allowAutoRegistration: bool = ...,
        registrationConfig: IoTRegistrationConfig = ...
    ) -> IoTRegisterCACertificateResponse: ...

    def register_certificate(self, *,
        certificatePem: str,
        caCertificatePem: str = ...,
        setAsActive: bool = ...,
        status: str = ...
    ) -> IoTRegisterCertificateResponse: ...

    def register_thing(self, *,
        templateBody: str,
        parameters: Dict[str, str] = ...
    ) -> IoTRegisterThingResponse: ...

    def reject_certificate_transfer(self, *,
        certificateId: str,
        rejectReason: str = ...
    ): ...

    def remove_thing_from_billing_group(self, *,
        billingGroupName: str = ...,
        billingGroupArn: str = ...,
        thingName: str = ...,
        thingArn: str = ...
    ) -> IoTRemoveThingFromBillingGroupResponse: ...

    def remove_thing_from_thing_group(self, *,
        thingGroupName: str = ...,
        thingGroupArn: str = ...,
        thingName: str = ...,
        thingArn: str = ...
    ) -> IoTRemoveThingFromThingGroupResponse: ...

    def replace_topic_rule(self, *,
        ruleName: str,
        topicRulePayload: IoTTopicRulePayload
    ): ...

    def search_index(self, *,
        queryString: str,
        indexName: str = ...,
        nextToken: str = ...,
        maxResults: int = ...,
        queryVersion: str = ...
    ) -> IoTSearchIndexResponse: ...

    def set_default_authorizer(self, *,
        authorizerName: str
    ) -> IoTSetDefaultAuthorizerResponse: ...

    def set_default_policy_version(self, *,
        policyName: str,
        policyVersionId: str
    ): ...

    def set_logging_options(self, *,
        loggingOptionsPayload: IoTLoggingOptionsPayload
    ): ...

    def set_v2_logging_level(self, *,
        logTarget: IoTLogTarget,
        logLevel: str
    ): ...

    def set_v2_logging_options(self, *,
        roleArn: str = ...,
        defaultLogLevel: str = ...,
        disableAllLogs: bool = ...
    ): ...

    def start_on_demand_audit_task(self, *,
        targetCheckNames: List[str]
    ) -> IoTStartOnDemandAuditTaskResponse: ...

    def start_thing_registration_task(self, *,
        templateBody: str,
        inputFileBucket: str,
        inputFileKey: str,
        roleArn: str
    ) -> IoTStartThingRegistrationTaskResponse: ...

    def stop_thing_registration_task(self, *,
        taskId: str
    ) -> IoTStopThingRegistrationTaskResponse: ...

    def tag_resource(self, *,
        resourceArn: str,
        tags: List[IoTTag]
    ) -> IoTTagResourceResponse: ...

    def test_authorization(self, *,
        authInfos: List[IoTAuthInfo],
        principal: str = ...,
        cognitoIdentityPoolId: str = ...,
        clientId: str = ...,
        policyNamesToAdd: List[str] = ...,
        policyNamesToSkip: List[str] = ...
    ) -> IoTTestAuthorizationResponse: ...

    def test_invoke_authorizer(self, *,
        authorizerName: str,
        token: str,
        tokenSignature: str
    ) -> IoTTestInvokeAuthorizerResponse: ...

    def transfer_certificate(self, *,
        certificateId: str,
        targetAwsAccount: str,
        transferMessage: str = ...
    ) -> IoTTransferCertificateResponse: ...

    def untag_resource(self, *,
        resourceArn: str,
        tagKeys: List[str]
    ) -> IoTUntagResourceResponse: ...

    def update_account_audit_configuration(self, *,
        roleArn: str = ...,
        auditNotificationTargetConfigurations: Dict[str, IoTAuditNotificationTarget] = ...,
        auditCheckConfigurations: Dict[str, IoTAuditCheckConfiguration] = ...
    ) -> IoTUpdateAccountAuditConfigurationResponse: ...

    def update_authorizer(self, *,
        authorizerName: str,
        authorizerFunctionArn: str = ...,
        tokenKeyName: str = ...,
        tokenSigningPublicKeys: Dict[str, str] = ...,
        status: str = ...
    ) -> IoTUpdateAuthorizerResponse: ...

    def update_billing_group(self, *,
        billingGroupName: str,
        billingGroupProperties: IoTBillingGroupProperties,
        expectedVersion: int = ...
    ) -> IoTUpdateBillingGroupResponse: ...

    def update_ca_certificate(self, *,
        certificateId: str,
        newStatus: str = ...,
        newAutoRegistrationStatus: str = ...,
        registrationConfig: IoTRegistrationConfig = ...,
        removeAutoRegistration: bool = ...
    ): ...

    def update_certificate(self, *,
        certificateId: str,
        newStatus: str
    ): ...

    def update_dynamic_thing_group(self, *,
        thingGroupName: str,
        thingGroupProperties: IoTThingGroupProperties,
        expectedVersion: int = ...,
        indexName: str = ...,
        queryString: str = ...,
        queryVersion: str = ...
    ) -> IoTUpdateDynamicThingGroupResponse: ...

    def update_event_configurations(self, *,
        eventConfigurations: Dict[str, IoTConfiguration] = ...
    ) -> IoTUpdateEventConfigurationsResponse: ...

    def update_indexing_configuration(self, *,
        thingIndexingConfiguration: IoTThingIndexingConfiguration = ...,
        thingGroupIndexingConfiguration: IoTThingGroupIndexingConfiguration = ...
    ) -> IoTUpdateIndexingConfigurationResponse: ...

    def update_job(self, *,
        jobId: str,
        description: str = ...,
        presignedUrlConfig: IoTPresignedUrlConfig = ...,
        jobExecutionsRolloutConfig: IoTJobExecutionsRolloutConfig = ...,
        abortConfig: IoTAbortConfig = ...,
        timeoutConfig: IoTTimeoutConfig = ...
    ): ...

    def update_role_alias(self, *,
        roleAlias: str,
        roleArn: str = ...,
        credentialDurationSeconds: int = ...
    ) -> IoTUpdateRoleAliasResponse: ...

    def update_scheduled_audit(self, *,
        scheduledAuditName: str,
        frequency: str = ...,
        dayOfMonth: str = ...,
        dayOfWeek: str = ...,
        targetCheckNames: List[str] = ...
    ) -> IoTUpdateScheduledAuditResponse: ...

    def update_security_profile(self, *,
        securityProfileName: str,
        securityProfileDescription: str = ...,
        behaviors: List[IoTBehavior] = ...,
        alertTargets: Dict[str, IoTAlertTarget] = ...,
        additionalMetricsToRetain: List[str] = ...,
        deleteBehaviors: bool = ...,
        deleteAlertTargets: bool = ...,
        deleteAdditionalMetricsToRetain: bool = ...,
        expectedVersion: int = ...
    ) -> IoTUpdateSecurityProfileResponse: ...

    def update_stream(self, *,
        streamId: str,
        description: str = ...,
        files: List[IoTStreamFile] = ...,
        roleArn: str = ...
    ) -> IoTUpdateStreamResponse: ...

    def update_thing(self, *,
        thingName: str,
        thingTypeName: str = ...,
        attributePayload: IoTAttributePayload = ...,
        expectedVersion: int = ...,
        removeThingType: bool = ...
    ) -> IoTUpdateThingResponse: ...

    def update_thing_group(self, *,
        thingGroupName: str,
        thingGroupProperties: IoTThingGroupProperties,
        expectedVersion: int = ...
    ) -> IoTUpdateThingGroupResponse: ...

    def update_thing_groups_for_thing(self, *,
        thingName: str = ...,
        thingGroupsToAdd: List[str] = ...,
        thingGroupsToRemove: List[str] = ...,
        overrideDynamicGroups: bool = ...
    ) -> IoTUpdateThingGroupsForThingResponse: ...

    def validate_security_profile_behaviors(self, *,
        behaviors: List[IoTBehavior]
    ) -> IoTValidateSecurityProfileBehaviorsResponse: ...


IoTAddThingToBillingGroupResponse = TypedDict(
    'IoTAddThingToBillingGroupResponse', {
    }
)


IoTAddThingToThingGroupResponse = TypedDict(
    'IoTAddThingToThingGroupResponse', {
    }
)


IoTAssociateTargetsWithJobResponse = TypedDict(
    'IoTAssociateTargetsWithJobResponse', {
        'JobArn': Optional[str],
        'JobId': Optional[str],
        'JobDescription': Optional[str],
    }
)


IoTAttachSecurityProfileResponse = TypedDict(
    'IoTAttachSecurityProfileResponse', {
    }
)


IoTAttachThingPrincipalResponse = TypedDict(
    'IoTAttachThingPrincipalResponse', {
    }
)


IoTCancelAuditTaskResponse = TypedDict(
    'IoTCancelAuditTaskResponse', {
    }
)


IoTCancelJobResponse = TypedDict(
    'IoTCancelJobResponse', {
        'JobArn': Optional[str],
        'JobId': Optional[str],
        'JobDescription': Optional[str],
    }
)


IoTClearDefaultAuthorizerResponse = TypedDict(
    'IoTClearDefaultAuthorizerResponse', {
    }
)


IoTCreateAuthorizerResponse = TypedDict(
    'IoTCreateAuthorizerResponse', {
        'AuthorizerName': Optional[str],
        'AuthorizerArn': Optional[str],
    }
)


IoTBillingGroupProperties = TypedDict(
    'IoTBillingGroupProperties', {
        'BillingGroupDescription': Optional[str],
    }
)


IoTTag = TypedDict(
    'IoTTag', {
        'TagKey': Optional[str],
        'TagValue': Optional[str],
    }
)


IoTCreateBillingGroupResponse = TypedDict(
    'IoTCreateBillingGroupResponse', {
        'BillingGroupName': Optional[str],
        'BillingGroupArn': Optional[str],
        'BillingGroupId': Optional[str],
    }
)


IoTCreateCertificateFromCsrResponse = TypedDict(
    'IoTCreateCertificateFromCsrResponse', {
        'CertificateArn': Optional[str],
        'CertificateId': Optional[str],
        'CertificatePem': Optional[str],
    }
)


IoTAttributePayload = TypedDict(
    'IoTAttributePayload', {
        'Attributes': Optional[Dict[str, str]],
        'Flag': Optional[bool],
    }
)


IoTThingGroupProperties = TypedDict(
    'IoTThingGroupProperties', {
        'ThingGroupDescription': Optional[str],
        'AttributePayload': Optional[IoTAttributePayload],
    }
)


IoTCreateDynamicThingGroupResponse = TypedDict(
    'IoTCreateDynamicThingGroupResponse', {
        'ThingGroupName': Optional[str],
        'ThingGroupArn': Optional[str],
        'ThingGroupId': Optional[str],
        'IndexName': Optional[str],
        'QueryString': Optional[str],
        'QueryVersion': Optional[str],
    }
)


IoTPresignedUrlConfig = TypedDict(
    'IoTPresignedUrlConfig', {
        'RoleArn': Optional[str],
        'ExpiresInSec': Optional[int],
    }
)


IoTRateIncreaseCriteria = TypedDict(
    'IoTRateIncreaseCriteria', {
        'NumberOfThings': Optional[int],
        'NumberOfThings': Optional[int],
    }
)


IoTExponentialRolloutRate = TypedDict(
    'IoTExponentialRolloutRate', {
        'RolloutRatePerMinute': int,
        'IncrementFactor': float,
        'RateIncreaseCriteria': IoTRateIncreaseCriteria,
    }
)


IoTJobExecutionsRolloutConfig = TypedDict(
    'IoTJobExecutionsRolloutConfig', {
        'MaxJobExecutionsPerMin': Optional[int],
        'ExponentialRolloutRate': Optional[IoTExponentialRolloutRate],
    }
)


IoTAbortCriteria = TypedDict(
    'IoTAbortCriteria', {
        'JobExecutionFailureType': str,
        'AbortAction': str,
        'AbortThresholdPercentage': float,
        'MinimumNumberOfExecutedThings': int,
    }
)


IoTAbortConfig = TypedDict(
    'IoTAbortConfig', {
        'AbortCriteriaList': List[IoTAbortCriteria],
    }
)


IoTTimeoutConfig = TypedDict(
    'IoTTimeoutConfig', {
        'InProgressTimeoutInMinutes': Optional[int],
    }
)


IoTCreateJobResponse = TypedDict(
    'IoTCreateJobResponse', {
        'JobArn': Optional[str],
        'JobId': Optional[str],
        'JobDescription': Optional[str],
    }
)


IoTKeyPair = TypedDict(
    'IoTKeyPair', {
        'PublicKey': Optional[str],
        'PrivateKey': Optional[str],
    }
)


IoTCreateKeysAndCertificateResponse = TypedDict(
    'IoTCreateKeysAndCertificateResponse', {
        'CertificateArn': Optional[str],
        'CertificateId': Optional[str],
        'CertificatePem': Optional[str],
        'KeyPair': Optional[IoTKeyPair],
    }
)


IoTAwsJobExecutionsRolloutConfig = TypedDict(
    'IoTAwsJobExecutionsRolloutConfig', {
        'MaximumPerMinute': Optional[int],
    }
)


IoTStream = TypedDict(
    'IoTStream', {
        'StreamId': Optional[str],
        'FileId': Optional[int],
    }
)


IoTS3Location = TypedDict(
    'IoTS3Location', {
        'S3Bucket': Optional[str],
        'S3Key': Optional[str],
        'S3Version': Optional[str],
    }
)


IoTFileLocation = TypedDict(
    'IoTFileLocation', {
        'Stream': Optional[IoTStream],
        'S3Location': Optional[IoTS3Location],
    }
)


IoTSigningProfileParameter = TypedDict(
    'IoTSigningProfileParameter', {
        'CertificateArn': Optional[str],
        'Platform': Optional[str],
        'CertificatePathOnDevice': Optional[str],
    }
)


IoTS3Destination = TypedDict(
    'IoTS3Destination', {
        'S3Bucket': Optional[str],
        'Prefix': Optional[str],
    }
)


IoTDestination = TypedDict(
    'IoTDestination', {
        'S3Destination': Optional[IoTS3Destination],
    }
)


IoTStartSigningJobParameter = TypedDict(
    'IoTStartSigningJobParameter', {
        'SigningProfileParameter': Optional[IoTSigningProfileParameter],
        'SigningProfileName': Optional[str],
        'Destination': Optional[IoTDestination],
    }
)


IoTCodeSigningSignature = TypedDict(
    'IoTCodeSigningSignature', {
        'Signature': Optional[bytes],
    }
)


IoTCodeSigningCertificateChain = TypedDict(
    'IoTCodeSigningCertificateChain', {
        'CertificateName': Optional[str],
        'InlineDocument': Optional[str],
    }
)


IoTCustomCodeSigning = TypedDict(
    'IoTCustomCodeSigning', {
        'CodeSigningSignature': Optional[IoTCodeSigningSignature],
        'CodeSigningCertificateChain': Optional[IoTCodeSigningCertificateChain],
        'HashAlgorithm': Optional[str],
        'SignatureAlgorithm': Optional[str],
    }
)


IoTCodeSigning = TypedDict(
    'IoTCodeSigning', {
        'SigningJobId': Optional[str],
        'StartSigningJobParameter': Optional[IoTStartSigningJobParameter],
        'CustomCodeSigning': Optional[IoTCustomCodeSigning],
    }
)


IoTOTAUpdateFile = TypedDict(
    'IoTOTAUpdateFile', {
        'FileName': Optional[str],
        'OTAUpdateFileVersion': Optional[str],
        'FileLocation': Optional[IoTFileLocation],
        'CodeSigning': Optional[IoTCodeSigning],
        'AttributesMap': Optional[Dict[str, str]],
    }
)


IoTCreateOTAUpdateResponse = TypedDict(
    'IoTCreateOTAUpdateResponse', {
        'OTAUpdateId': Optional[str],
        'AwsIotJobId': Optional[str],
        'OTAUpdateArn': Optional[str],
        'AwsIotJobArn': Optional[str],
        'OTAUpdateStatus': Optional[str],
    }
)


IoTCreatePolicyResponse = TypedDict(
    'IoTCreatePolicyResponse', {
        'PolicyName': Optional[str],
        'PolicyArn': Optional[str],
        'PolicyDocument': Optional[str],
        'PolicyVersionId': Optional[str],
    }
)


IoTCreatePolicyVersionResponse = TypedDict(
    'IoTCreatePolicyVersionResponse', {
        'PolicyArn': Optional[str],
        'PolicyDocument': Optional[str],
        'PolicyVersionId': Optional[str],
        'IsDefaultVersion': Optional[bool],
    }
)


IoTCreateRoleAliasResponse = TypedDict(
    'IoTCreateRoleAliasResponse', {
        'RoleAlias': Optional[str],
        'RoleAliasArn': Optional[str],
    }
)


IoTCreateScheduledAuditResponse = TypedDict(
    'IoTCreateScheduledAuditResponse', {
        'ScheduledAuditArn': Optional[str],
    }
)


IoTMetricValue = TypedDict(
    'IoTMetricValue', {
        'UnsignedLong': Optional[int],
        'Cidrs': Optional[List[str]],
        'Ports': Optional[List[int]],
    }
)


IoTStatisticalThreshold = TypedDict(
    'IoTStatisticalThreshold', {
        'EvaluationStatistic': Optional[str],
    }
)


IoTBehaviorCriteria = TypedDict(
    'IoTBehaviorCriteria', {
        'ComparisonOperator': Optional[str],
        'MetricValue': Optional[IoTMetricValue],
        'DurationSeconds': Optional[int],
        'ConsecutiveDatapointsToAlarm': Optional[int],
        'ConsecutiveDatapointsToClear': Optional[int],
        'StatisticalThreshold': Optional[IoTStatisticalThreshold],
    }
)


IoTBehavior = TypedDict(
    'IoTBehavior', {
        'BehaviorName': str,
        'BehaviorMetric': Optional[str],
        'BehaviorCriteria': Optional[IoTBehaviorCriteria],
    }
)


IoTAlertTarget = TypedDict(
    'IoTAlertTarget', {
        'AlertTargetArn': str,
        'RoleArn': str,
    }
)


IoTCreateSecurityProfileResponse = TypedDict(
    'IoTCreateSecurityProfileResponse', {
        'SecurityProfileName': Optional[str],
        'SecurityProfileArn': Optional[str],
    }
)


IoTStreamFile = TypedDict(
    'IoTStreamFile', {
        'FileId': Optional[int],
        'S3Location': Optional[IoTS3Location],
    }
)


IoTCreateStreamResponse = TypedDict(
    'IoTCreateStreamResponse', {
        'StreamId': Optional[str],
        'StreamArn': Optional[str],
        'StreamDescription': Optional[str],
        'StreamVersion': Optional[int],
    }
)


IoTCreateThingResponse = TypedDict(
    'IoTCreateThingResponse', {
        'ThingName': Optional[str],
        'ThingArn': Optional[str],
        'ThingId': Optional[str],
    }
)


IoTCreateThingGroupResponse = TypedDict(
    'IoTCreateThingGroupResponse', {
        'ThingGroupName': Optional[str],
        'ThingGroupArn': Optional[str],
        'ThingGroupId': Optional[str],
    }
)


IoTThingTypeProperties = TypedDict(
    'IoTThingTypeProperties', {
        'ThingTypeDescription': Optional[str],
        'SearchableAttributes': Optional[List[str]],
    }
)


IoTCreateThingTypeResponse = TypedDict(
    'IoTCreateThingTypeResponse', {
        'ThingTypeName': Optional[str],
        'ThingTypeArn': Optional[str],
        'ThingTypeId': Optional[str],
    }
)


IoTDynamoDBAction = TypedDict(
    'IoTDynamoDBAction', {
        'TableName': str,
        'AwsArn': str,
        'HashKeyField': str,
        'HashKeyValue': str,
        'DynamoOperation': Optional[str],
        'DynamoKeyType': Optional[str],
        'RangeKeyField': Optional[str],
        'RangeKeyValue': Optional[str],
        'DynamoKeyType': Optional[str],
        'PayloadField': Optional[str],
    }
)


IoTPutItemInput = TypedDict(
    'IoTPutItemInput', {
        'TableName': str,
    }
)


IoTDynamoDBv2Action = TypedDict(
    'IoTDynamoDBv2Action', {
        'AwsArn': str,
        'PutItemInput': IoTPutItemInput,
    }
)


IoTLambdaAction = TypedDict(
    'IoTLambdaAction', {
        'FunctionArn': str,
    }
)


IoTSnsAction = TypedDict(
    'IoTSnsAction', {
        'AwsArn': str,
        'AwsArn': str,
        'MessageFormat': Optional[str],
    }
)


IoTSqsAction = TypedDict(
    'IoTSqsAction', {
        'AwsArn': str,
        'QueueUrl': str,
        'UseBase64': Optional[bool],
    }
)


IoTKinesisAction = TypedDict(
    'IoTKinesisAction', {
        'AwsArn': str,
        'StreamName': str,
        'PartitionKey': Optional[str],
    }
)


IoTRepublishAction = TypedDict(
    'IoTRepublishAction', {
        'AwsArn': str,
        'TopicPattern': str,
    }
)


IoTS3Action = TypedDict(
    'IoTS3Action', {
        'AwsArn': str,
        'BucketName': str,
        'Key': str,
        'CannedAccessControlList': Optional[str],
    }
)


IoTFirehoseAction = TypedDict(
    'IoTFirehoseAction', {
        'AwsArn': str,
        'DeliveryStreamName': str,
        'FirehoseSeparator': Optional[str],
    }
)


IoTCloudwatchMetricAction = TypedDict(
    'IoTCloudwatchMetricAction', {
        'AwsArn': str,
        'String': str,
        'String': str,
        'String': str,
        'String': str,
        'String': Optional[str],
    }
)


IoTCloudwatchAlarmAction = TypedDict(
    'IoTCloudwatchAlarmAction', {
        'AwsArn': str,
        'AlarmName': str,
        'StateReason': str,
        'StateValue': str,
    }
)


IoTElasticsearchAction = TypedDict(
    'IoTElasticsearchAction', {
        'AwsArn': str,
        'ElasticsearchEndpoint': str,
        'ElasticsearchIndex': str,
        'ElasticsearchType': str,
        'ElasticsearchId': str,
    }
)


IoTSalesforceAction = TypedDict(
    'IoTSalesforceAction', {
        'SalesforceToken': str,
        'SalesforceEndpoint': str,
    }
)


IoTIotAnalyticsAction = TypedDict(
    'IoTIotAnalyticsAction', {
        'AwsArn': Optional[str],
        'ChannelName': Optional[str],
        'AwsArn': Optional[str],
    }
)


IoTIotEventsAction = TypedDict(
    'IoTIotEventsAction', {
        'InputName': str,
        'AwsArn': str,
        'MessageId': Optional[str],
    }
)


IoTStepFunctionsAction = TypedDict(
    'IoTStepFunctionsAction', {
        'StateMachineName': str,
        'AwsArn': str,
        'ExecutionNamePrefix': Optional[str],
    }
)


IoTAction = TypedDict(
    'IoTAction', {
        'DynamoDBAction': Optional[IoTDynamoDBAction],
        'DynamoDBv2Action': Optional[IoTDynamoDBv2Action],
        'LambdaAction': Optional[IoTLambdaAction],
        'SnsAction': Optional[IoTSnsAction],
        'SqsAction': Optional[IoTSqsAction],
        'KinesisAction': Optional[IoTKinesisAction],
        'RepublishAction': Optional[IoTRepublishAction],
        'S3Action': Optional[IoTS3Action],
        'FirehoseAction': Optional[IoTFirehoseAction],
        'CloudwatchMetricAction': Optional[IoTCloudwatchMetricAction],
        'CloudwatchAlarmAction': Optional[IoTCloudwatchAlarmAction],
        'ElasticsearchAction': Optional[IoTElasticsearchAction],
        'SalesforceAction': Optional[IoTSalesforceAction],
        'IotAnalyticsAction': Optional[IoTIotAnalyticsAction],
        'IotEventsAction': Optional[IoTIotEventsAction],
        'StepFunctionsAction': Optional[IoTStepFunctionsAction],
    }
)


IoTTopicRulePayload = TypedDict(
    'IoTTopicRulePayload', {
        'SQL': str,
        'ActionList': List[IoTAction],
        'Description': Optional[str],
        'IsDisabled': Optional[bool],
        'AwsIotSqlVersion': Optional[str],
        'Action': Optional[IoTAction],
    }
)


IoTDeleteAccountAuditConfigurationResponse = TypedDict(
    'IoTDeleteAccountAuditConfigurationResponse', {
    }
)


IoTDeleteAuthorizerResponse = TypedDict(
    'IoTDeleteAuthorizerResponse', {
    }
)


IoTDeleteBillingGroupResponse = TypedDict(
    'IoTDeleteBillingGroupResponse', {
    }
)


IoTDeleteCACertificateResponse = TypedDict(
    'IoTDeleteCACertificateResponse', {
    }
)


IoTDeleteDynamicThingGroupResponse = TypedDict(
    'IoTDeleteDynamicThingGroupResponse', {
    }
)


IoTDeleteOTAUpdateResponse = TypedDict(
    'IoTDeleteOTAUpdateResponse', {
    }
)


IoTDeleteRegistrationCodeResponse = TypedDict(
    'IoTDeleteRegistrationCodeResponse', {
    }
)


IoTDeleteRoleAliasResponse = TypedDict(
    'IoTDeleteRoleAliasResponse', {
    }
)


IoTDeleteScheduledAuditResponse = TypedDict(
    'IoTDeleteScheduledAuditResponse', {
    }
)


IoTDeleteSecurityProfileResponse = TypedDict(
    'IoTDeleteSecurityProfileResponse', {
    }
)


IoTDeleteStreamResponse = TypedDict(
    'IoTDeleteStreamResponse', {
    }
)


IoTDeleteThingResponse = TypedDict(
    'IoTDeleteThingResponse', {
    }
)


IoTDeleteThingGroupResponse = TypedDict(
    'IoTDeleteThingGroupResponse', {
    }
)


IoTDeleteThingTypeResponse = TypedDict(
    'IoTDeleteThingTypeResponse', {
    }
)


IoTDeprecateThingTypeResponse = TypedDict(
    'IoTDeprecateThingTypeResponse', {
    }
)


IoTAuditNotificationTarget = TypedDict(
    'IoTAuditNotificationTarget', {
        'TargetArn': Optional[str],
        'RoleArn': Optional[str],
        'Enabled': Optional[bool],
    }
)


IoTAuditCheckConfiguration = TypedDict(
    'IoTAuditCheckConfiguration', {
        'Enabled': Optional[bool],
    }
)


IoTDescribeAccountAuditConfigurationResponse = TypedDict(
    'IoTDescribeAccountAuditConfigurationResponse', {
        'RoleArn': Optional[str],
        'AuditNotificationTargetConfigurations': Optional[Dict[str, IoTAuditNotificationTarget]],
        'AuditCheckConfigurations': Optional[Dict[str, IoTAuditCheckConfiguration]],
    }
)


IoTTaskStatistics = TypedDict(
    'IoTTaskStatistics', {
        'TotalChecksCount': Optional[int],
        'InProgressChecksCount': Optional[int],
        'WaitingForDataCollectionChecksCount': Optional[int],
        'CompliantChecksCount': Optional[int],
        'NonCompliantChecksCount': Optional[int],
        'FailedChecksCount': Optional[int],
        'CanceledChecksCount': Optional[int],
    }
)


IoTAuditCheckDetails = TypedDict(
    'IoTAuditCheckDetails', {
        'AuditCheckRunStatus': Optional[str],
        'CheckCompliant': Optional[bool],
        'TotalResourcesCount': Optional[int],
        'NonCompliantResourcesCount': Optional[int],
        'ErrorCode': Optional[str],
        'ErrorMessage': Optional[str],
    }
)


IoTDescribeAuditTaskResponse = TypedDict(
    'IoTDescribeAuditTaskResponse', {
        'AuditTaskStatus': Optional[str],
        'AuditTaskType': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'TaskStatistics': Optional[IoTTaskStatistics],
        'ScheduledAuditName': Optional[str],
        'AuditDetails': Optional[Dict[str, IoTAuditCheckDetails]],
    }
)


IoTAuthorizerDescription = TypedDict(
    'IoTAuthorizerDescription', {
        'AuthorizerName': Optional[str],
        'AuthorizerArn': Optional[str],
        'AuthorizerFunctionArn': Optional[str],
        'TokenKeyName': Optional[str],
        'PublicKeyMap': Optional[Dict[str, str]],
        'AuthorizerStatus': Optional[str],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
    }
)


IoTDescribeAuthorizerResponse = TypedDict(
    'IoTDescribeAuthorizerResponse', {
        'AuthorizerDescription': Optional[IoTAuthorizerDescription],
    }
)


IoTBillingGroupMetadata = TypedDict(
    'IoTBillingGroupMetadata', {
        'CreationDate': Optional[datetime.datetime],
    }
)


IoTDescribeBillingGroupResponse = TypedDict(
    'IoTDescribeBillingGroupResponse', {
        'BillingGroupName': Optional[str],
        'BillingGroupId': Optional[str],
        'BillingGroupArn': Optional[str],
        'Version': Optional[int],
        'BillingGroupProperties': Optional[IoTBillingGroupProperties],
        'BillingGroupMetadata': Optional[IoTBillingGroupMetadata],
    }
)


IoTCertificateValidity = TypedDict(
    'IoTCertificateValidity', {
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
    }
)


IoTCACertificateDescription = TypedDict(
    'IoTCACertificateDescription', {
        'CertificateArn': Optional[str],
        'CertificateId': Optional[str],
        'CACertificateStatus': Optional[str],
        'CertificatePem': Optional[str],
        'AwsAccountId': Optional[str],
        'DateType': Optional[datetime.datetime],
        'AutoRegistrationStatus': Optional[str],
        'DateType': Optional[datetime.datetime],
        'CustomerVersion': Optional[int],
        'GenerationId': Optional[str],
        'CertificateValidity': Optional[IoTCertificateValidity],
    }
)


IoTRegistrationConfig = TypedDict(
    'IoTRegistrationConfig', {
        'TemplateBody': Optional[str],
        'RoleArn': Optional[str],
    }
)


IoTDescribeCACertificateResponse = TypedDict(
    'IoTDescribeCACertificateResponse', {
        'CACertificateDescription': Optional[IoTCACertificateDescription],
        'RegistrationConfig': Optional[IoTRegistrationConfig],
    }
)


IoTTransferData = TypedDict(
    'IoTTransferData', {
        'Message': Optional[str],
        'Message': Optional[str],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
    }
)


IoTCertificateDescription = TypedDict(
    'IoTCertificateDescription', {
        'CertificateArn': Optional[str],
        'CertificateId': Optional[str],
        'CertificateId': Optional[str],
        'CertificateStatus': Optional[str],
        'CertificatePem': Optional[str],
        'AwsAccountId': Optional[str],
        'AwsAccountId': Optional[str],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
        'CustomerVersion': Optional[int],
        'TransferData': Optional[IoTTransferData],
        'GenerationId': Optional[str],
        'CertificateValidity': Optional[IoTCertificateValidity],
    }
)


IoTDescribeCertificateResponse = TypedDict(
    'IoTDescribeCertificateResponse', {
        'CertificateDescription': Optional[IoTCertificateDescription],
    }
)


IoTDescribeDefaultAuthorizerResponse = TypedDict(
    'IoTDescribeDefaultAuthorizerResponse', {
        'AuthorizerDescription': Optional[IoTAuthorizerDescription],
    }
)


IoTDescribeEndpointResponse = TypedDict(
    'IoTDescribeEndpointResponse', {
        'EndpointAddress': Optional[str],
    }
)


IoTConfiguration = TypedDict(
    'IoTConfiguration', {
        'Enabled': Optional[bool],
    }
)


IoTDescribeEventConfigurationsResponse = TypedDict(
    'IoTDescribeEventConfigurationsResponse', {
        'EventConfigurations': Optional[Dict[str, IoTConfiguration]],
        'CreationDate': Optional[datetime.datetime],
        'LastModifiedDate': Optional[datetime.datetime],
    }
)


IoTDescribeIndexResponse = TypedDict(
    'IoTDescribeIndexResponse', {
        'IndexName': Optional[str],
        'IndexStatus': Optional[str],
        'IndexSchema': Optional[str],
    }
)


IoTJobProcessDetails = TypedDict(
    'IoTJobProcessDetails', {
        'ProcessingTargetNameList': Optional[List[str]],
        'CanceledThings': Optional[int],
        'SucceededThings': Optional[int],
        'FailedThings': Optional[int],
        'RejectedThings': Optional[int],
        'QueuedThings': Optional[int],
        'InProgressThings': Optional[int],
        'RemovedThings': Optional[int],
        'TimedOutThings': Optional[int],
    }
)


IoTJob = TypedDict(
    'IoTJob', {
        'JobArn': Optional[str],
        'JobId': Optional[str],
        'TargetSelection': Optional[str],
        'JobStatus': Optional[str],
        'Forced': Optional[bool],
        'ReasonCode': Optional[str],
        'Comment': Optional[str],
        'JobTargets': Optional[List[str]],
        'JobDescription': Optional[str],
        'PresignedUrlConfig': Optional[IoTPresignedUrlConfig],
        'JobExecutionsRolloutConfig': Optional[IoTJobExecutionsRolloutConfig],
        'AbortConfig': Optional[IoTAbortConfig],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
        'JobProcessDetails': Optional[IoTJobProcessDetails],
        'TimeoutConfig': Optional[IoTTimeoutConfig],
    }
)


IoTDescribeJobResponse = TypedDict(
    'IoTDescribeJobResponse', {
        'JobDocumentSource': Optional[str],
        'Job': Optional[IoTJob],
    }
)


IoTJobExecutionStatusDetails = TypedDict(
    'IoTJobExecutionStatusDetails', {
        'DetailsMap': Optional[Dict[str, str]],
    }
)


IoTJobExecution = TypedDict(
    'IoTJobExecution', {
        'JobId': Optional[str],
        'JobExecutionStatus': Optional[str],
        'Forced': Optional[bool],
        'JobExecutionStatusDetails': Optional[IoTJobExecutionStatusDetails],
        'ThingArn': Optional[str],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
        'ExecutionNumber': Optional[int],
        'VersionNumber': Optional[int],
        'ApproximateSecondsBeforeTimedOut': Optional[int],
    }
)


IoTDescribeJobExecutionResponse = TypedDict(
    'IoTDescribeJobExecutionResponse', {
        'JobExecution': Optional[IoTJobExecution],
    }
)


IoTRoleAliasDescription = TypedDict(
    'IoTRoleAliasDescription', {
        'RoleAlias': Optional[str],
        'RoleAliasArn': Optional[str],
        'RoleArn': Optional[str],
        'AwsAccountId': Optional[str],
        'CredentialDurationSeconds': Optional[int],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
    }
)


IoTDescribeRoleAliasResponse = TypedDict(
    'IoTDescribeRoleAliasResponse', {
        'RoleAliasDescription': Optional[IoTRoleAliasDescription],
    }
)


IoTDescribeScheduledAuditResponse = TypedDict(
    'IoTDescribeScheduledAuditResponse', {
        'AuditFrequency': Optional[str],
        'DayOfMonth': Optional[str],
        'DayOfWeek': Optional[str],
        'TargetAuditCheckNames': Optional[List[str]],
        'ScheduledAuditName': Optional[str],
        'ScheduledAuditArn': Optional[str],
    }
)


IoTDescribeSecurityProfileResponse = TypedDict(
    'IoTDescribeSecurityProfileResponse', {
        'SecurityProfileName': Optional[str],
        'SecurityProfileArn': Optional[str],
        'SecurityProfileDescription': Optional[str],
        'Behaviors': Optional[List[IoTBehavior]],
        'AlertTargets': Optional[Dict[str, IoTAlertTarget]],
        'AdditionalMetricsToRetainList': Optional[List[str]],
        'Version': Optional[int],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


IoTStreamInfo = TypedDict(
    'IoTStreamInfo', {
        'StreamId': Optional[str],
        'StreamArn': Optional[str],
        'StreamVersion': Optional[int],
        'StreamDescription': Optional[str],
        'StreamFiles': Optional[List[IoTStreamFile]],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
        'RoleArn': Optional[str],
    }
)


IoTDescribeStreamResponse = TypedDict(
    'IoTDescribeStreamResponse', {
        'StreamInfo': Optional[IoTStreamInfo],
    }
)


IoTDescribeThingResponse = TypedDict(
    'IoTDescribeThingResponse', {
        'ClientId': Optional[str],
        'ThingName': Optional[str],
        'ThingId': Optional[str],
        'ThingArn': Optional[str],
        'ThingTypeName': Optional[str],
        'Attributes': Optional[Dict[str, str]],
        'Version': Optional[int],
        'BillingGroupName': Optional[str],
    }
)


IoTGroupNameAndArn = TypedDict(
    'IoTGroupNameAndArn', {
        'ThingGroupName': Optional[str],
        'ThingGroupArn': Optional[str],
    }
)


IoTThingGroupMetadata = TypedDict(
    'IoTThingGroupMetadata', {
        'ThingGroupName': Optional[str],
        'ThingGroupNameAndArnList': Optional[List[IoTGroupNameAndArn]],
        'CreationDate': Optional[datetime.datetime],
    }
)


IoTDescribeThingGroupResponse = TypedDict(
    'IoTDescribeThingGroupResponse', {
        'ThingGroupName': Optional[str],
        'ThingGroupId': Optional[str],
        'ThingGroupArn': Optional[str],
        'Version': Optional[int],
        'ThingGroupProperties': Optional[IoTThingGroupProperties],
        'ThingGroupMetadata': Optional[IoTThingGroupMetadata],
        'IndexName': Optional[str],
        'QueryString': Optional[str],
        'QueryVersion': Optional[str],
        'DynamicGroupStatus': Optional[str],
    }
)


IoTDescribeThingRegistrationTaskResponse = TypedDict(
    'IoTDescribeThingRegistrationTaskResponse', {
        'TaskId': Optional[str],
        'CreationDate': Optional[datetime.datetime],
        'LastModifiedDate': Optional[datetime.datetime],
        'TemplateBody': Optional[str],
        'RegistryS3BucketName': Optional[str],
        'RegistryS3KeyName': Optional[str],
        'RoleArn': Optional[str],
        'Status': Optional[str],
        'ErrorMessage': Optional[str],
        'Count': Optional[int],
        'Count': Optional[int],
        'Percentage': Optional[int],
    }
)


IoTThingTypeMetadata = TypedDict(
    'IoTThingTypeMetadata', {
        'Boolean': Optional[bool],
        'DeprecationDate': Optional[datetime.datetime],
        'CreationDate': Optional[datetime.datetime],
    }
)


IoTDescribeThingTypeResponse = TypedDict(
    'IoTDescribeThingTypeResponse', {
        'ThingTypeName': Optional[str],
        'ThingTypeId': Optional[str],
        'ThingTypeArn': Optional[str],
        'ThingTypeProperties': Optional[IoTThingTypeProperties],
        'ThingTypeMetadata': Optional[IoTThingTypeMetadata],
    }
)


IoTDetachSecurityProfileResponse = TypedDict(
    'IoTDetachSecurityProfileResponse', {
    }
)


IoTDetachThingPrincipalResponse = TypedDict(
    'IoTDetachThingPrincipalResponse', {
    }
)


IoTEffectivePolicy = TypedDict(
    'IoTEffectivePolicy', {
        'PolicyName': Optional[str],
        'PolicyArn': Optional[str],
        'PolicyDocument': Optional[str],
    }
)


IoTGetEffectivePoliciesResponse = TypedDict(
    'IoTGetEffectivePoliciesResponse', {
        'EffectivePolicies': Optional[List[IoTEffectivePolicy]],
    }
)


IoTThingIndexingConfiguration = TypedDict(
    'IoTThingIndexingConfiguration', {
        'ThingIndexingMode': str,
        'ThingConnectivityIndexingMode': Optional[str],
    }
)


IoTThingGroupIndexingConfiguration = TypedDict(
    'IoTThingGroupIndexingConfiguration', {
        'ThingGroupIndexingMode': str,
    }
)


IoTGetIndexingConfigurationResponse = TypedDict(
    'IoTGetIndexingConfigurationResponse', {
        'ThingIndexingConfiguration': Optional[IoTThingIndexingConfiguration],
        'ThingGroupIndexingConfiguration': Optional[IoTThingGroupIndexingConfiguration],
    }
)


IoTGetJobDocumentResponse = TypedDict(
    'IoTGetJobDocumentResponse', {
        'JobDocument': Optional[str],
    }
)


IoTGetLoggingOptionsResponse = TypedDict(
    'IoTGetLoggingOptionsResponse', {
        'AwsArn': Optional[str],
        'LogLevel': Optional[str],
    }
)


IoTErrorInfo = TypedDict(
    'IoTErrorInfo', {
        'Code': Optional[str],
        'OTAUpdateErrorMessage': Optional[str],
    }
)


IoTOTAUpdateInfo = TypedDict(
    'IoTOTAUpdateInfo', {
        'OTAUpdateId': Optional[str],
        'OTAUpdateArn': Optional[str],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
        'OTAUpdateDescription': Optional[str],
        'Targets': Optional[List[str]],
        'AwsJobExecutionsRolloutConfig': Optional[IoTAwsJobExecutionsRolloutConfig],
        'TargetSelection': Optional[str],
        'OTAUpdateFiles': Optional[List[IoTOTAUpdateFile]],
        'OTAUpdateStatus': Optional[str],
        'AwsIotJobId': Optional[str],
        'AwsIotJobArn': Optional[str],
        'ErrorInfo': Optional[IoTErrorInfo],
        'AdditionalParameterMap': Optional[Dict[str, str]],
    }
)


IoTGetOTAUpdateResponse = TypedDict(
    'IoTGetOTAUpdateResponse', {
        'OTAUpdateInfo': Optional[IoTOTAUpdateInfo],
    }
)


IoTGetPolicyResponse = TypedDict(
    'IoTGetPolicyResponse', {
        'PolicyName': Optional[str],
        'PolicyArn': Optional[str],
        'PolicyDocument': Optional[str],
        'PolicyVersionId': Optional[str],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
        'GenerationId': Optional[str],
    }
)


IoTGetPolicyVersionResponse = TypedDict(
    'IoTGetPolicyVersionResponse', {
        'PolicyArn': Optional[str],
        'PolicyName': Optional[str],
        'PolicyDocument': Optional[str],
        'PolicyVersionId': Optional[str],
        'IsDefaultVersion': Optional[bool],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
        'GenerationId': Optional[str],
    }
)


IoTGetRegistrationCodeResponse = TypedDict(
    'IoTGetRegistrationCodeResponse', {
        'RegistrationCode': Optional[str],
    }
)


IoTStatistics = TypedDict(
    'IoTStatistics', {
        'Count': Optional[int],
    }
)


IoTGetStatisticsResponse = TypedDict(
    'IoTGetStatisticsResponse', {
        'Statistics': Optional[IoTStatistics],
    }
)


IoTTopicRule = TypedDict(
    'IoTTopicRule', {
        'RuleName': Optional[str],
        'SQL': Optional[str],
        'Description': Optional[str],
        'CreatedAtDate': Optional[datetime.datetime],
        'ActionList': Optional[List[IoTAction]],
        'IsDisabled': Optional[bool],
        'AwsIotSqlVersion': Optional[str],
        'Action': Optional[IoTAction],
    }
)


IoTGetTopicRuleResponse = TypedDict(
    'IoTGetTopicRuleResponse', {
        'RuleArn': Optional[str],
        'TopicRule': Optional[IoTTopicRule],
    }
)


IoTGetV2LoggingOptionsResponse = TypedDict(
    'IoTGetV2LoggingOptionsResponse', {
        'AwsArn': Optional[str],
        'LogLevel': Optional[str],
        'DisableAllLogs': Optional[bool],
    }
)


IoTActiveViolation = TypedDict(
    'IoTActiveViolation', {
        'ViolationId': Optional[str],
        'ThingName': Optional[str],
        'SecurityProfileName': Optional[str],
        'Behavior': Optional[IoTBehavior],
        'MetricValue': Optional[IoTMetricValue],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


IoTListActiveViolationsResponse = TypedDict(
    'IoTListActiveViolationsResponse', {
        'ActiveViolations': Optional[List[IoTActiveViolation]],
        'NextToken': Optional[str],
    }
)


IoTPolicy = TypedDict(
    'IoTPolicy', {
        'PolicyName': Optional[str],
        'PolicyArn': Optional[str],
    }
)


IoTListAttachedPoliciesResponse = TypedDict(
    'IoTListAttachedPoliciesResponse', {
        'Policies': Optional[List[IoTPolicy]],
        'Marker': Optional[str],
    }
)


IoTPolicyVersionIdentifier = TypedDict(
    'IoTPolicyVersionIdentifier', {
        'PolicyName': Optional[str],
        'PolicyVersionId': Optional[str],
    }
)


IoTResourceIdentifier = TypedDict(
    'IoTResourceIdentifier', {
        'CertificateId': Optional[str],
        'CertificateId': Optional[str],
        'CognitoIdentityPoolId': Optional[str],
        'ClientId': Optional[str],
        'PolicyVersionIdentifier': Optional[IoTPolicyVersionIdentifier],
        'AwsAccountId': Optional[str],
    }
)


IoTNonCompliantResource = TypedDict(
    'IoTNonCompliantResource', {
        'ResourceType': Optional[str],
        'ResourceIdentifier': Optional[IoTResourceIdentifier],
        'StringMap': Optional[Dict[str, str]],
    }
)


IoTRelatedResource = TypedDict(
    'IoTRelatedResource', {
        'ResourceType': Optional[str],
        'ResourceIdentifier': Optional[IoTResourceIdentifier],
        'StringMap': Optional[Dict[str, str]],
    }
)


IoTAuditFinding = TypedDict(
    'IoTAuditFinding', {
        'AuditTaskId': Optional[str],
        'AuditCheckName': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'AuditFindingSeverity': Optional[str],
        'NonCompliantResource': Optional[IoTNonCompliantResource],
        'RelatedResources': Optional[List[IoTRelatedResource]],
        'ReasonForNonCompliance': Optional[str],
        'ReasonForNonComplianceCode': Optional[str],
    }
)


IoTListAuditFindingsResponse = TypedDict(
    'IoTListAuditFindingsResponse', {
        'AuditFindings': Optional[List[IoTAuditFinding]],
        'NextToken': Optional[str],
    }
)


IoTAuditTaskMetadata = TypedDict(
    'IoTAuditTaskMetadata', {
        'AuditTaskId': Optional[str],
        'AuditTaskStatus': Optional[str],
        'AuditTaskType': Optional[str],
    }
)


IoTListAuditTasksResponse = TypedDict(
    'IoTListAuditTasksResponse', {
        'AuditTaskMetadataList': Optional[List[IoTAuditTaskMetadata]],
        'NextToken': Optional[str],
    }
)


IoTAuthorizerSummary = TypedDict(
    'IoTAuthorizerSummary', {
        'AuthorizerName': Optional[str],
        'AuthorizerArn': Optional[str],
    }
)


IoTListAuthorizersResponse = TypedDict(
    'IoTListAuthorizersResponse', {
        'Authorizers': Optional[List[IoTAuthorizerSummary]],
        'Marker': Optional[str],
    }
)


IoTListBillingGroupsResponse = TypedDict(
    'IoTListBillingGroupsResponse', {
        'BillingGroupNameAndArnList': Optional[List[IoTGroupNameAndArn]],
        'NextToken': Optional[str],
    }
)


IoTCACertificate = TypedDict(
    'IoTCACertificate', {
        'CertificateArn': Optional[str],
        'CertificateId': Optional[str],
        'CACertificateStatus': Optional[str],
        'DateType': Optional[datetime.datetime],
    }
)


IoTListCACertificatesResponse = TypedDict(
    'IoTListCACertificatesResponse', {
        'CACertificates': Optional[List[IoTCACertificate]],
        'Marker': Optional[str],
    }
)


IoTCertificate = TypedDict(
    'IoTCertificate', {
        'CertificateArn': Optional[str],
        'CertificateId': Optional[str],
        'CertificateStatus': Optional[str],
        'DateType': Optional[datetime.datetime],
    }
)


IoTListCertificatesResponse = TypedDict(
    'IoTListCertificatesResponse', {
        'Certificates': Optional[List[IoTCertificate]],
        'Marker': Optional[str],
    }
)


IoTListCertificatesByCAResponse = TypedDict(
    'IoTListCertificatesByCAResponse', {
        'Certificates': Optional[List[IoTCertificate]],
        'Marker': Optional[str],
    }
)


IoTListIndicesResponse = TypedDict(
    'IoTListIndicesResponse', {
        'IndexNamesList': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


IoTJobExecutionSummary = TypedDict(
    'IoTJobExecutionSummary', {
        'JobExecutionStatus': Optional[str],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
        'ExecutionNumber': Optional[int],
    }
)


IoTJobExecutionSummaryForJob = TypedDict(
    'IoTJobExecutionSummaryForJob', {
        'ThingArn': Optional[str],
        'JobExecutionSummary': Optional[IoTJobExecutionSummary],
    }
)


IoTListJobExecutionsForJobResponse = TypedDict(
    'IoTListJobExecutionsForJobResponse', {
        'JobExecutionSummaryForJobList': Optional[List[IoTJobExecutionSummaryForJob]],
        'NextToken': Optional[str],
    }
)


IoTJobExecutionSummaryForThing = TypedDict(
    'IoTJobExecutionSummaryForThing', {
        'JobId': Optional[str],
        'JobExecutionSummary': Optional[IoTJobExecutionSummary],
    }
)


IoTListJobExecutionsForThingResponse = TypedDict(
    'IoTListJobExecutionsForThingResponse', {
        'JobExecutionSummaryForThingList': Optional[List[IoTJobExecutionSummaryForThing]],
        'NextToken': Optional[str],
    }
)


IoTJobSummary = TypedDict(
    'IoTJobSummary', {
        'JobArn': Optional[str],
        'JobId': Optional[str],
        'ThingGroupId': Optional[str],
        'TargetSelection': Optional[str],
        'JobStatus': Optional[str],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
    }
)


IoTListJobsResponse = TypedDict(
    'IoTListJobsResponse', {
        'JobSummaryList': Optional[List[IoTJobSummary]],
        'NextToken': Optional[str],
    }
)


IoTOTAUpdateSummary = TypedDict(
    'IoTOTAUpdateSummary', {
        'OTAUpdateId': Optional[str],
        'OTAUpdateArn': Optional[str],
        'DateType': Optional[datetime.datetime],
    }
)


IoTListOTAUpdatesResponse = TypedDict(
    'IoTListOTAUpdatesResponse', {
        'OTAUpdatesSummary': Optional[List[IoTOTAUpdateSummary]],
        'NextToken': Optional[str],
    }
)


IoTOutgoingCertificate = TypedDict(
    'IoTOutgoingCertificate', {
        'CertificateArn': Optional[str],
        'CertificateId': Optional[str],
        'AwsAccountId': Optional[str],
        'DateType': Optional[datetime.datetime],
        'Message': Optional[str],
        'DateType': Optional[datetime.datetime],
    }
)


IoTListOutgoingCertificatesResponse = TypedDict(
    'IoTListOutgoingCertificatesResponse', {
        'OutgoingCertificates': Optional[List[IoTOutgoingCertificate]],
        'Marker': Optional[str],
    }
)


IoTListPoliciesResponse = TypedDict(
    'IoTListPoliciesResponse', {
        'Policies': Optional[List[IoTPolicy]],
        'Marker': Optional[str],
    }
)


IoTListPolicyPrincipalsResponse = TypedDict(
    'IoTListPolicyPrincipalsResponse', {
        'Principals': Optional[List[str]],
        'Marker': Optional[str],
    }
)


IoTPolicyVersion = TypedDict(
    'IoTPolicyVersion', {
        'PolicyVersionId': Optional[str],
        'IsDefaultVersion': Optional[bool],
        'DateType': Optional[datetime.datetime],
    }
)


IoTListPolicyVersionsResponse = TypedDict(
    'IoTListPolicyVersionsResponse', {
        'PolicyVersions': Optional[List[IoTPolicyVersion]],
    }
)


IoTListPrincipalPoliciesResponse = TypedDict(
    'IoTListPrincipalPoliciesResponse', {
        'Policies': Optional[List[IoTPolicy]],
        'Marker': Optional[str],
    }
)


IoTListPrincipalThingsResponse = TypedDict(
    'IoTListPrincipalThingsResponse', {
        'ThingNameList': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


IoTListRoleAliasesResponse = TypedDict(
    'IoTListRoleAliasesResponse', {
        'RoleAliases': Optional[List[str]],
        'Marker': Optional[str],
    }
)


IoTScheduledAuditMetadata = TypedDict(
    'IoTScheduledAuditMetadata', {
        'ScheduledAuditName': Optional[str],
        'ScheduledAuditArn': Optional[str],
        'AuditFrequency': Optional[str],
        'DayOfMonth': Optional[str],
        'DayOfWeek': Optional[str],
    }
)


IoTListScheduledAuditsResponse = TypedDict(
    'IoTListScheduledAuditsResponse', {
        'ScheduledAuditMetadataList': Optional[List[IoTScheduledAuditMetadata]],
        'NextToken': Optional[str],
    }
)


IoTSecurityProfileIdentifier = TypedDict(
    'IoTSecurityProfileIdentifier', {
        'SecurityProfileName': str,
        'SecurityProfileArn': str,
    }
)


IoTListSecurityProfilesResponse = TypedDict(
    'IoTListSecurityProfilesResponse', {
        'SecurityProfileIdentifiers': Optional[List[IoTSecurityProfileIdentifier]],
        'NextToken': Optional[str],
    }
)


IoTSecurityProfileTarget = TypedDict(
    'IoTSecurityProfileTarget', {
        'SecurityProfileTargetArn': str,
    }
)


IoTSecurityProfileTargetMapping = TypedDict(
    'IoTSecurityProfileTargetMapping', {
        'SecurityProfileIdentifier': Optional[IoTSecurityProfileIdentifier],
        'SecurityProfileTarget': Optional[IoTSecurityProfileTarget],
    }
)


IoTListSecurityProfilesForTargetResponse = TypedDict(
    'IoTListSecurityProfilesForTargetResponse', {
        'SecurityProfileTargetMappings': Optional[List[IoTSecurityProfileTargetMapping]],
        'NextToken': Optional[str],
    }
)


IoTStreamSummary = TypedDict(
    'IoTStreamSummary', {
        'StreamId': Optional[str],
        'StreamArn': Optional[str],
        'StreamVersion': Optional[int],
        'StreamDescription': Optional[str],
    }
)


IoTListStreamsResponse = TypedDict(
    'IoTListStreamsResponse', {
        'StreamsSummary': Optional[List[IoTStreamSummary]],
        'NextToken': Optional[str],
    }
)


IoTListTagsForResourceResponse = TypedDict(
    'IoTListTagsForResourceResponse', {
        'TagList': Optional[List[IoTTag]],
        'NextToken': Optional[str],
    }
)


IoTListTargetsForPolicyResponse = TypedDict(
    'IoTListTargetsForPolicyResponse', {
        'PolicyTargets': Optional[List[str]],
        'Marker': Optional[str],
    }
)


IoTListTargetsForSecurityProfileResponse = TypedDict(
    'IoTListTargetsForSecurityProfileResponse', {
        'SecurityProfileTargets': Optional[List[IoTSecurityProfileTarget]],
        'NextToken': Optional[str],
    }
)


IoTListThingGroupsResponse = TypedDict(
    'IoTListThingGroupsResponse', {
        'ThingGroupNameAndArnList': Optional[List[IoTGroupNameAndArn]],
        'NextToken': Optional[str],
    }
)


IoTListThingGroupsForThingResponse = TypedDict(
    'IoTListThingGroupsForThingResponse', {
        'ThingGroupNameAndArnList': Optional[List[IoTGroupNameAndArn]],
        'NextToken': Optional[str],
    }
)


IoTListThingPrincipalsResponse = TypedDict(
    'IoTListThingPrincipalsResponse', {
        'Principals': Optional[List[str]],
    }
)


IoTListThingRegistrationTaskReportsResponse = TypedDict(
    'IoTListThingRegistrationTaskReportsResponse', {
        'S3FileUrlList': Optional[List[str]],
        'ReportType': Optional[str],
        'NextToken': Optional[str],
    }
)


IoTListThingRegistrationTasksResponse = TypedDict(
    'IoTListThingRegistrationTasksResponse', {
        'TaskIdList': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


IoTThingTypeDefinition = TypedDict(
    'IoTThingTypeDefinition', {
        'ThingTypeName': Optional[str],
        'ThingTypeArn': Optional[str],
        'ThingTypeProperties': Optional[IoTThingTypeProperties],
        'ThingTypeMetadata': Optional[IoTThingTypeMetadata],
    }
)


IoTListThingTypesResponse = TypedDict(
    'IoTListThingTypesResponse', {
        'ThingTypeList': Optional[List[IoTThingTypeDefinition]],
        'NextToken': Optional[str],
    }
)


IoTThingAttribute = TypedDict(
    'IoTThingAttribute', {
        'ThingName': Optional[str],
        'ThingTypeName': Optional[str],
        'ThingArn': Optional[str],
        'Attributes': Optional[Dict[str, str]],
        'Version': Optional[int],
    }
)


IoTListThingsResponse = TypedDict(
    'IoTListThingsResponse', {
        'ThingAttributeList': Optional[List[IoTThingAttribute]],
        'NextToken': Optional[str],
    }
)


IoTListThingsInBillingGroupResponse = TypedDict(
    'IoTListThingsInBillingGroupResponse', {
        'ThingNameList': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


IoTListThingsInThingGroupResponse = TypedDict(
    'IoTListThingsInThingGroupResponse', {
        'ThingNameList': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


IoTTopicRuleListItem = TypedDict(
    'IoTTopicRuleListItem', {
        'RuleArn': Optional[str],
        'RuleName': Optional[str],
        'TopicPattern': Optional[str],
        'CreatedAtDate': Optional[datetime.datetime],
        'IsDisabled': Optional[bool],
    }
)


IoTListTopicRulesResponse = TypedDict(
    'IoTListTopicRulesResponse', {
        'TopicRuleList': Optional[List[IoTTopicRuleListItem]],
        'NextToken': Optional[str],
    }
)


IoTLogTarget = TypedDict(
    'IoTLogTarget', {
        'LogTargetType': str,
        'LogTargetName': Optional[str],
    }
)


IoTLogTargetConfiguration = TypedDict(
    'IoTLogTargetConfiguration', {
        'LogTarget': Optional[IoTLogTarget],
        'LogLevel': Optional[str],
    }
)


IoTListV2LoggingLevelsResponse = TypedDict(
    'IoTListV2LoggingLevelsResponse', {
        'LogTargetConfigurations': Optional[List[IoTLogTargetConfiguration]],
        'NextToken': Optional[str],
    }
)


IoTViolationEvent = TypedDict(
    'IoTViolationEvent', {
        'ViolationId': Optional[str],
        'ThingName': Optional[str],
        'SecurityProfileName': Optional[str],
        'Behavior': Optional[IoTBehavior],
        'MetricValue': Optional[IoTMetricValue],
        'ViolationEventType': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


IoTListViolationEventsResponse = TypedDict(
    'IoTListViolationEventsResponse', {
        'ViolationEvents': Optional[List[IoTViolationEvent]],
        'NextToken': Optional[str],
    }
)


IoTRegisterCACertificateResponse = TypedDict(
    'IoTRegisterCACertificateResponse', {
        'CertificateArn': Optional[str],
        'CertificateId': Optional[str],
    }
)


IoTRegisterCertificateResponse = TypedDict(
    'IoTRegisterCertificateResponse', {
        'CertificateArn': Optional[str],
        'CertificateId': Optional[str],
    }
)


IoTRegisterThingResponse = TypedDict(
    'IoTRegisterThingResponse', {
        'CertificatePem': Optional[str],
        'ResourceArns': Optional[Dict[str, str]],
    }
)


IoTRemoveThingFromBillingGroupResponse = TypedDict(
    'IoTRemoveThingFromBillingGroupResponse', {
    }
)


IoTRemoveThingFromThingGroupResponse = TypedDict(
    'IoTRemoveThingFromThingGroupResponse', {
    }
)


IoTThingConnectivity = TypedDict(
    'IoTThingConnectivity', {
        'Boolean': Optional[bool],
        'ConnectivityTimestamp': Optional[int],
    }
)


IoTThingDocument = TypedDict(
    'IoTThingDocument', {
        'ThingName': Optional[str],
        'ThingId': Optional[str],
        'ThingTypeName': Optional[str],
        'ThingGroupNameList': Optional[List[str]],
        'Attributes': Optional[Dict[str, str]],
        'JsonDocument': Optional[str],
        'ThingConnectivity': Optional[IoTThingConnectivity],
    }
)


IoTThingGroupDocument = TypedDict(
    'IoTThingGroupDocument', {
        'ThingGroupName': Optional[str],
        'ThingGroupId': Optional[str],
        'ThingGroupDescription': Optional[str],
        'Attributes': Optional[Dict[str, str]],
        'ThingGroupNameList': Optional[List[str]],
    }
)


IoTSearchIndexResponse = TypedDict(
    'IoTSearchIndexResponse', {
        'NextToken': Optional[str],
        'ThingDocumentList': Optional[List[IoTThingDocument]],
        'ThingGroupDocumentList': Optional[List[IoTThingGroupDocument]],
    }
)


IoTSetDefaultAuthorizerResponse = TypedDict(
    'IoTSetDefaultAuthorizerResponse', {
        'AuthorizerName': Optional[str],
        'AuthorizerArn': Optional[str],
    }
)


IoTLoggingOptionsPayload = TypedDict(
    'IoTLoggingOptionsPayload', {
        'AwsArn': str,
        'LogLevel': Optional[str],
    }
)


IoTStartOnDemandAuditTaskResponse = TypedDict(
    'IoTStartOnDemandAuditTaskResponse', {
        'AuditTaskId': Optional[str],
    }
)


IoTStartThingRegistrationTaskResponse = TypedDict(
    'IoTStartThingRegistrationTaskResponse', {
        'TaskId': Optional[str],
    }
)


IoTStopThingRegistrationTaskResponse = TypedDict(
    'IoTStopThingRegistrationTaskResponse', {
    }
)


IoTTagResourceResponse = TypedDict(
    'IoTTagResourceResponse', {
    }
)


IoTAuthInfo = TypedDict(
    'IoTAuthInfo', {
        'ActionType': Optional[str],
        'Resources': Optional[List[str]],
    }
)


IoTAllowed = TypedDict(
    'IoTAllowed', {
        'Policies': Optional[List[IoTPolicy]],
    }
)


IoTImplicitDeny = TypedDict(
    'IoTImplicitDeny', {
        'Policies': Optional[List[IoTPolicy]],
    }
)


IoTExplicitDeny = TypedDict(
    'IoTExplicitDeny', {
        'Policies': Optional[List[IoTPolicy]],
    }
)


IoTDenied = TypedDict(
    'IoTDenied', {
        'ImplicitDeny': Optional[IoTImplicitDeny],
        'ExplicitDeny': Optional[IoTExplicitDeny],
    }
)


IoTAuthResult = TypedDict(
    'IoTAuthResult', {
        'AuthInfo': Optional[IoTAuthInfo],
        'Allowed': Optional[IoTAllowed],
        'Denied': Optional[IoTDenied],
        'AuthDecision': Optional[str],
        'MissingContextValues': Optional[List[str]],
    }
)


IoTTestAuthorizationResponse = TypedDict(
    'IoTTestAuthorizationResponse', {
        'AuthResults': Optional[List[IoTAuthResult]],
    }
)


IoTTestInvokeAuthorizerResponse = TypedDict(
    'IoTTestInvokeAuthorizerResponse', {
        'IsAuthenticated': Optional[bool],
        'PrincipalId': Optional[str],
        'PolicyDocuments': Optional[List[str]],
        'Seconds': Optional[int],
        'Seconds': Optional[int],
    }
)


IoTTransferCertificateResponse = TypedDict(
    'IoTTransferCertificateResponse', {
        'CertificateArn': Optional[str],
    }
)


IoTUntagResourceResponse = TypedDict(
    'IoTUntagResourceResponse', {
    }
)


IoTUpdateAccountAuditConfigurationResponse = TypedDict(
    'IoTUpdateAccountAuditConfigurationResponse', {
    }
)


IoTUpdateAuthorizerResponse = TypedDict(
    'IoTUpdateAuthorizerResponse', {
        'AuthorizerName': Optional[str],
        'AuthorizerArn': Optional[str],
    }
)


IoTUpdateBillingGroupResponse = TypedDict(
    'IoTUpdateBillingGroupResponse', {
        'Version': Optional[int],
    }
)


IoTUpdateDynamicThingGroupResponse = TypedDict(
    'IoTUpdateDynamicThingGroupResponse', {
        'Version': Optional[int],
    }
)


IoTUpdateEventConfigurationsResponse = TypedDict(
    'IoTUpdateEventConfigurationsResponse', {
    }
)


IoTUpdateIndexingConfigurationResponse = TypedDict(
    'IoTUpdateIndexingConfigurationResponse', {
    }
)


IoTUpdateRoleAliasResponse = TypedDict(
    'IoTUpdateRoleAliasResponse', {
        'RoleAlias': Optional[str],
        'RoleAliasArn': Optional[str],
    }
)


IoTUpdateScheduledAuditResponse = TypedDict(
    'IoTUpdateScheduledAuditResponse', {
        'ScheduledAuditArn': Optional[str],
    }
)


IoTUpdateSecurityProfileResponse = TypedDict(
    'IoTUpdateSecurityProfileResponse', {
        'SecurityProfileName': Optional[str],
        'SecurityProfileArn': Optional[str],
        'SecurityProfileDescription': Optional[str],
        'Behaviors': Optional[List[IoTBehavior]],
        'AlertTargets': Optional[Dict[str, IoTAlertTarget]],
        'AdditionalMetricsToRetainList': Optional[List[str]],
        'Version': Optional[int],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


IoTUpdateStreamResponse = TypedDict(
    'IoTUpdateStreamResponse', {
        'StreamId': Optional[str],
        'StreamArn': Optional[str],
        'StreamDescription': Optional[str],
        'StreamVersion': Optional[int],
    }
)


IoTUpdateThingResponse = TypedDict(
    'IoTUpdateThingResponse', {
    }
)


IoTUpdateThingGroupResponse = TypedDict(
    'IoTUpdateThingGroupResponse', {
        'Version': Optional[int],
    }
)


IoTUpdateThingGroupsForThingResponse = TypedDict(
    'IoTUpdateThingGroupsForThingResponse', {
    }
)


IoTValidationError = TypedDict(
    'IoTValidationError', {
        'ErrorMessage': Optional[str],
    }
)


IoTValidateSecurityProfileBehaviorsResponse = TypedDict(
    'IoTValidateSecurityProfileBehaviorsResponse', {
        'Valid': Optional[bool],
        'ValidationErrors': Optional[List[IoTValidationError]],
    }
)


class IoTDataPlane(BaseClient):
    def delete_thing_shadow(self, *,
        thingName: str
    ) -> IoTDataPlaneDeleteThingShadowResponse: ...

    def get_thing_shadow(self, *,
        thingName: str
    ) -> IoTDataPlaneGetThingShadowResponse: ...

    def publish(self, *,
        topic: str,
        qos: int = ...,
        payload: bytes = ...
    ): ...

    def update_thing_shadow(self, *,
        thingName: str,
        payload: bytes
    ) -> IoTDataPlaneUpdateThingShadowResponse: ...


IoTDataPlaneDeleteThingShadowResponse = TypedDict(
    'IoTDataPlaneDeleteThingShadowResponse', {
        'JsonDocument': bytes,
    }
)


IoTDataPlaneGetThingShadowResponse = TypedDict(
    'IoTDataPlaneGetThingShadowResponse', {
        'JsonDocument': Optional[bytes],
    }
)


IoTDataPlaneUpdateThingShadowResponse = TypedDict(
    'IoTDataPlaneUpdateThingShadowResponse', {
        'JsonDocument': Optional[bytes],
    }
)


class IoTJobsDataPlane(BaseClient):
    def describe_job_execution(self, *,
        jobId: str,
        thingName: str,
        includeJobDocument: bool = ...,
        executionNumber: int = ...
    ) -> IoTJobsDataPlaneDescribeJobExecutionResponse: ...

    def get_pending_job_executions(self, *,
        thingName: str
    ) -> IoTJobsDataPlaneGetPendingJobExecutionsResponse: ...

    def start_next_pending_job_execution(self, *,
        thingName: str,
        statusDetails: Dict[str, str] = ...,
        stepTimeoutInMinutes: int = ...
    ) -> IoTJobsDataPlaneStartNextPendingJobExecutionResponse: ...

    def update_job_execution(self, *,
        jobId: str,
        thingName: str,
        status: str,
        statusDetails: Dict[str, str] = ...,
        stepTimeoutInMinutes: int = ...,
        expectedVersion: int = ...,
        includeJobExecutionState: bool = ...,
        includeJobDocument: bool = ...,
        executionNumber: int = ...
    ) -> IoTJobsDataPlaneUpdateJobExecutionResponse: ...


IoTJobsDataPlaneJobExecution = TypedDict(
    'IoTJobsDataPlaneJobExecution', {
        'JobId': Optional[str],
        'ThingName': Optional[str],
        'JobExecutionStatus': Optional[str],
        'DetailsMap': Optional[Dict[str, str]],
        'QueuedAt': Optional[int],
        'StartedAt': Optional[int],
        'LastUpdatedAt': Optional[int],
        'ApproximateSecondsBeforeTimedOut': Optional[int],
        'VersionNumber': Optional[int],
        'ExecutionNumber': Optional[int],
        'JobDocument': Optional[str],
    }
)


IoTJobsDataPlaneDescribeJobExecutionResponse = TypedDict(
    'IoTJobsDataPlaneDescribeJobExecutionResponse', {
        'JobExecution': Optional[IoTJobsDataPlaneJobExecution],
    }
)


IoTJobsDataPlaneJobExecutionSummary = TypedDict(
    'IoTJobsDataPlaneJobExecutionSummary', {
        'JobId': Optional[str],
        'QueuedAt': Optional[int],
        'StartedAt': Optional[int],
        'LastUpdatedAt': Optional[int],
        'VersionNumber': Optional[int],
        'ExecutionNumber': Optional[int],
    }
)


IoTJobsDataPlaneGetPendingJobExecutionsResponse = TypedDict(
    'IoTJobsDataPlaneGetPendingJobExecutionsResponse', {
        'JobExecutionSummaryList': Optional[List[IoTJobsDataPlaneJobExecutionSummary]],
        'JobExecutionSummaryList': Optional[List[IoTJobsDataPlaneJobExecutionSummary]],
    }
)


IoTJobsDataPlaneStartNextPendingJobExecutionResponse = TypedDict(
    'IoTJobsDataPlaneStartNextPendingJobExecutionResponse', {
        'JobExecution': Optional[IoTJobsDataPlaneJobExecution],
    }
)


IoTJobsDataPlaneJobExecutionState = TypedDict(
    'IoTJobsDataPlaneJobExecutionState', {
        'JobExecutionStatus': Optional[str],
        'DetailsMap': Optional[Dict[str, str]],
        'VersionNumber': Optional[int],
    }
)


IoTJobsDataPlaneUpdateJobExecutionResponse = TypedDict(
    'IoTJobsDataPlaneUpdateJobExecutionResponse', {
        'JobExecutionState': Optional[IoTJobsDataPlaneJobExecutionState],
        'JobDocument': Optional[str],
    }
)


class IoT1ClickDevicesService(BaseClient):
    def claim_devices_by_claim_code(self, *,
        ClaimCode: str
    ) -> IoT1ClickDevicesServiceClaimDevicesByClaimCodeResponse: ...

    def describe_device(self, *,
        DeviceId: str
    ) -> IoT1ClickDevicesServiceDescribeDeviceResponse: ...

    def finalize_device_claim(self, *,
        DeviceId: str,
        Tags: Dict[str, str] = ...
    ) -> IoT1ClickDevicesServiceFinalizeDeviceClaimResponse: ...

    def get_device_methods(self, *,
        DeviceId: str
    ) -> IoT1ClickDevicesServiceGetDeviceMethodsResponse: ...

    def initiate_device_claim(self, *,
        DeviceId: str
    ) -> IoT1ClickDevicesServiceInitiateDeviceClaimResponse: ...

    def invoke_device_method(self, *,
        DeviceId: str,
        DeviceMethod: IoT1ClickDevicesServiceDeviceMethod = ...,
        DeviceMethodParameters: str = ...
    ) -> IoT1ClickDevicesServiceInvokeDeviceMethodResponse: ...

    def list_device_events(self, *,
        DeviceId: str,
        FromTimeStamp: datetime.datetime,
        ToTimeStamp: datetime.datetime,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> IoT1ClickDevicesServiceListDeviceEventsResponse: ...

    def list_devices(self, *,
        DeviceType: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> IoT1ClickDevicesServiceListDevicesResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> IoT1ClickDevicesServiceListTagsForResourceResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: Dict[str, str]
    ): ...

    def unclaim_device(self, *,
        DeviceId: str
    ) -> IoT1ClickDevicesServiceUnclaimDeviceResponse: ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ): ...

    def update_device_state(self, *,
        DeviceId: str,
        Enabled: bool = ...
    ) -> IoT1ClickDevicesServiceUpdateDeviceStateResponse: ...


IoT1ClickDevicesServiceClaimDevicesByClaimCodeResponse = TypedDict(
    'IoT1ClickDevicesServiceClaimDevicesByClaimCodeResponse', {
        '__stringMin12Max40': Optional[str],
        '__integer': Optional[int],
    }
)


IoT1ClickDevicesServiceDeviceDescription = TypedDict(
    'IoT1ClickDevicesServiceDeviceDescription', {
        '__string': Optional[str],
        'DeviceAttributes': Optional[Dict[str, str]],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__doubleMin0Max100': Optional[float],
        '__string': Optional[str],
        '__mapOf__string': Optional[Dict[str, str]],
    }
)


IoT1ClickDevicesServiceDescribeDeviceResponse = TypedDict(
    'IoT1ClickDevicesServiceDescribeDeviceResponse', {
        'DeviceDescription': Optional[IoT1ClickDevicesServiceDeviceDescription],
    }
)


IoT1ClickDevicesServiceFinalizeDeviceClaimResponse = TypedDict(
    'IoT1ClickDevicesServiceFinalizeDeviceClaimResponse', {
        '__string': Optional[str],
    }
)


IoT1ClickDevicesServiceDeviceMethod = TypedDict(
    'IoT1ClickDevicesServiceDeviceMethod', {
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


IoT1ClickDevicesServiceGetDeviceMethodsResponse = TypedDict(
    'IoT1ClickDevicesServiceGetDeviceMethodsResponse', {
        '__listOfDeviceMethod': Optional[List[IoT1ClickDevicesServiceDeviceMethod]],
    }
)


IoT1ClickDevicesServiceInitiateDeviceClaimResponse = TypedDict(
    'IoT1ClickDevicesServiceInitiateDeviceClaimResponse', {
        '__string': Optional[str],
    }
)


IoT1ClickDevicesServiceInvokeDeviceMethodResponse = TypedDict(
    'IoT1ClickDevicesServiceInvokeDeviceMethodResponse', {
        '__string': Optional[str],
    }
)


IoT1ClickDevicesServiceAttributes = TypedDict(
    'IoT1ClickDevicesServiceAttributes', {
    }
)


IoT1ClickDevicesServiceDevice = TypedDict(
    'IoT1ClickDevicesServiceDevice', {
        'Attributes': Optional[IoT1ClickDevicesServiceAttributes],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


IoT1ClickDevicesServiceDeviceEvent = TypedDict(
    'IoT1ClickDevicesServiceDeviceEvent', {
        'Device': Optional[IoT1ClickDevicesServiceDevice],
        '__string': Optional[str],
    }
)


IoT1ClickDevicesServiceListDeviceEventsResponse = TypedDict(
    'IoT1ClickDevicesServiceListDeviceEventsResponse', {
        '__listOfDeviceEvent': Optional[List[IoT1ClickDevicesServiceDeviceEvent]],
        '__string': Optional[str],
    }
)


IoT1ClickDevicesServiceListDevicesResponse = TypedDict(
    'IoT1ClickDevicesServiceListDevicesResponse', {
        '__listOfDeviceDescription': Optional[List[IoT1ClickDevicesServiceDeviceDescription]],
        '__string': Optional[str],
    }
)


IoT1ClickDevicesServiceListTagsForResourceResponse = TypedDict(
    'IoT1ClickDevicesServiceListTagsForResourceResponse', {
        '__mapOf__string': Optional[Dict[str, str]],
    }
)


IoT1ClickDevicesServiceUnclaimDeviceResponse = TypedDict(
    'IoT1ClickDevicesServiceUnclaimDeviceResponse', {
        '__string': Optional[str],
    }
)


IoT1ClickDevicesServiceUpdateDeviceStateResponse = TypedDict(
    'IoT1ClickDevicesServiceUpdateDeviceStateResponse', {
    }
)


class IoT1ClickProjects(BaseClient):
    def associate_device_with_placement(self, *,
        projectName: str,
        placementName: str,
        deviceId: str,
        deviceTemplateName: str
    ) -> IoT1ClickProjectsAssociateDeviceWithPlacementResponse: ...

    def create_placement(self, *,
        placementName: str,
        projectName: str,
        attributes: Dict[str, str] = ...
    ) -> IoT1ClickProjectsCreatePlacementResponse: ...

    def create_project(self, *,
        projectName: str,
        description: str = ...,
        placementTemplate: IoT1ClickProjectsPlacementTemplate = ...,
        tags: Dict[str, str] = ...
    ) -> IoT1ClickProjectsCreateProjectResponse: ...

    def delete_placement(self, *,
        placementName: str,
        projectName: str
    ) -> IoT1ClickProjectsDeletePlacementResponse: ...

    def delete_project(self, *,
        projectName: str
    ) -> IoT1ClickProjectsDeleteProjectResponse: ...

    def describe_placement(self, *,
        placementName: str,
        projectName: str
    ) -> IoT1ClickProjectsDescribePlacementResponse: ...

    def describe_project(self, *,
        projectName: str
    ) -> IoT1ClickProjectsDescribeProjectResponse: ...

    def disassociate_device_from_placement(self, *,
        projectName: str,
        placementName: str,
        deviceTemplateName: str
    ) -> IoT1ClickProjectsDisassociateDeviceFromPlacementResponse: ...

    def get_devices_in_placement(self, *,
        projectName: str,
        placementName: str
    ) -> IoT1ClickProjectsGetDevicesInPlacementResponse: ...

    def list_placements(self, *,
        projectName: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoT1ClickProjectsListPlacementsResponse: ...

    def list_projects(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoT1ClickProjectsListProjectsResponse: ...

    def list_tags_for_resource(self, *,
        resourceArn: str
    ) -> IoT1ClickProjectsListTagsForResourceResponse: ...

    def tag_resource(self, *,
        resourceArn: str,
        tags: Dict[str, str]
    ) -> IoT1ClickProjectsTagResourceResponse: ...

    def untag_resource(self, *,
        resourceArn: str,
        tagKeys: List[str]
    ) -> IoT1ClickProjectsUntagResourceResponse: ...

    def update_placement(self, *,
        placementName: str,
        projectName: str,
        attributes: Dict[str, str] = ...
    ) -> IoT1ClickProjectsUpdatePlacementResponse: ...

    def update_project(self, *,
        projectName: str,
        description: str = ...,
        placementTemplate: IoT1ClickProjectsPlacementTemplate = ...
    ) -> IoT1ClickProjectsUpdateProjectResponse: ...


IoT1ClickProjectsAssociateDeviceWithPlacementResponse = TypedDict(
    'IoT1ClickProjectsAssociateDeviceWithPlacementResponse', {
    }
)


IoT1ClickProjectsCreatePlacementResponse = TypedDict(
    'IoT1ClickProjectsCreatePlacementResponse', {
    }
)


IoT1ClickProjectsDeviceTemplate = TypedDict(
    'IoT1ClickProjectsDeviceTemplate', {
        'DeviceType': Optional[str],
        'DeviceCallbackOverrideMap': Optional[Dict[str, str]],
    }
)


IoT1ClickProjectsPlacementTemplate = TypedDict(
    'IoT1ClickProjectsPlacementTemplate', {
        'DefaultPlacementAttributeMap': Optional[Dict[str, str]],
        'DeviceTemplateMap': Optional[Dict[str, IoT1ClickProjectsDeviceTemplate]],
    }
)


IoT1ClickProjectsCreateProjectResponse = TypedDict(
    'IoT1ClickProjectsCreateProjectResponse', {
    }
)


IoT1ClickProjectsDeletePlacementResponse = TypedDict(
    'IoT1ClickProjectsDeletePlacementResponse', {
    }
)


IoT1ClickProjectsDeleteProjectResponse = TypedDict(
    'IoT1ClickProjectsDeleteProjectResponse', {
    }
)


IoT1ClickProjectsPlacementDescription = TypedDict(
    'IoT1ClickProjectsPlacementDescription', {
        'ProjectName': str,
        'PlacementName': str,
        'PlacementAttributeMap': Dict[str, str],
        'Time': datetime.datetime,
        'Time': datetime.datetime,
    }
)


IoT1ClickProjectsDescribePlacementResponse = TypedDict(
    'IoT1ClickProjectsDescribePlacementResponse', {
        'PlacementDescription': IoT1ClickProjectsPlacementDescription,
    }
)


IoT1ClickProjectsProjectDescription = TypedDict(
    'IoT1ClickProjectsProjectDescription', {
        'ProjectName': str,
        'Time': datetime.datetime,
        'Time': datetime.datetime,
        'ProjectArn': Optional[str],
        'Description': Optional[str],
        'PlacementTemplate': Optional[IoT1ClickProjectsPlacementTemplate],
        'TagMap': Optional[Dict[str, str]],
    }
)


IoT1ClickProjectsDescribeProjectResponse = TypedDict(
    'IoT1ClickProjectsDescribeProjectResponse', {
        'ProjectDescription': IoT1ClickProjectsProjectDescription,
    }
)


IoT1ClickProjectsDisassociateDeviceFromPlacementResponse = TypedDict(
    'IoT1ClickProjectsDisassociateDeviceFromPlacementResponse', {
    }
)


IoT1ClickProjectsGetDevicesInPlacementResponse = TypedDict(
    'IoT1ClickProjectsGetDevicesInPlacementResponse', {
        'DeviceMap': Dict[str, str],
    }
)


IoT1ClickProjectsPlacementSummary = TypedDict(
    'IoT1ClickProjectsPlacementSummary', {
        'ProjectName': str,
        'PlacementName': str,
        'Time': datetime.datetime,
        'Time': datetime.datetime,
    }
)


IoT1ClickProjectsListPlacementsResponse = TypedDict(
    'IoT1ClickProjectsListPlacementsResponse', {
        'PlacementSummaryList': List[IoT1ClickProjectsPlacementSummary],
        'NextToken': Optional[str],
    }
)


IoT1ClickProjectsProjectSummary = TypedDict(
    'IoT1ClickProjectsProjectSummary', {
        'ProjectName': str,
        'Time': datetime.datetime,
        'Time': datetime.datetime,
        'ProjectArn': Optional[str],
        'TagMap': Optional[Dict[str, str]],
    }
)


IoT1ClickProjectsListProjectsResponse = TypedDict(
    'IoT1ClickProjectsListProjectsResponse', {
        'ProjectSummaryList': List[IoT1ClickProjectsProjectSummary],
        'NextToken': Optional[str],
    }
)


IoT1ClickProjectsListTagsForResourceResponse = TypedDict(
    'IoT1ClickProjectsListTagsForResourceResponse', {
        'TagMap': Optional[Dict[str, str]],
    }
)


IoT1ClickProjectsTagResourceResponse = TypedDict(
    'IoT1ClickProjectsTagResourceResponse', {
    }
)


IoT1ClickProjectsUntagResourceResponse = TypedDict(
    'IoT1ClickProjectsUntagResourceResponse', {
    }
)


IoT1ClickProjectsUpdatePlacementResponse = TypedDict(
    'IoT1ClickProjectsUpdatePlacementResponse', {
    }
)


IoT1ClickProjectsUpdateProjectResponse = TypedDict(
    'IoT1ClickProjectsUpdateProjectResponse', {
    }
)


class IoTAnalytics(BaseClient):
    def batch_put_message(self, *,
        channelName: str,
        messages: List[IoTAnalyticsMessage]
    ) -> IoTAnalyticsBatchPutMessageResponse: ...

    def cancel_pipeline_reprocessing(self, *,
        pipelineName: str,
        reprocessingId: str
    ) -> IoTAnalyticsCancelPipelineReprocessingResponse: ...

    def create_channel(self, *,
        channelName: str,
        retentionPeriod: IoTAnalyticsRetentionPeriod = ...,
        tags: List[IoTAnalyticsTag] = ...
    ) -> IoTAnalyticsCreateChannelResponse: ...

    def create_dataset(self, *,
        datasetName: str,
        actions: List[IoTAnalyticsDatasetAction],
        triggers: List[IoTAnalyticsDatasetTrigger] = ...,
        contentDeliveryRules: List[IoTAnalyticsDatasetContentDeliveryRule] = ...,
        retentionPeriod: IoTAnalyticsRetentionPeriod = ...,
        versioningConfiguration: IoTAnalyticsVersioningConfiguration = ...,
        tags: List[IoTAnalyticsTag] = ...
    ) -> IoTAnalyticsCreateDatasetResponse: ...

    def create_dataset_content(self, *,
        datasetName: str
    ) -> IoTAnalyticsCreateDatasetContentResponse: ...

    def create_datastore(self, *,
        datastoreName: str,
        retentionPeriod: IoTAnalyticsRetentionPeriod = ...,
        tags: List[IoTAnalyticsTag] = ...
    ) -> IoTAnalyticsCreateDatastoreResponse: ...

    def create_pipeline(self, *,
        pipelineName: str,
        pipelineActivities: List[IoTAnalyticsPipelineActivity],
        tags: List[IoTAnalyticsTag] = ...
    ) -> IoTAnalyticsCreatePipelineResponse: ...

    def delete_channel(self, *,
        channelName: str
    ): ...

    def delete_dataset(self, *,
        datasetName: str
    ): ...

    def delete_dataset_content(self, *,
        datasetName: str,
        versionId: str = ...
    ): ...

    def delete_datastore(self, *,
        datastoreName: str
    ): ...

    def delete_pipeline(self, *,
        pipelineName: str
    ): ...

    def describe_channel(self, *,
        channelName: str,
        includeStatistics: bool = ...
    ) -> IoTAnalyticsDescribeChannelResponse: ...

    def describe_dataset(self, *,
        datasetName: str
    ) -> IoTAnalyticsDescribeDatasetResponse: ...

    def describe_datastore(self, *,
        datastoreName: str,
        includeStatistics: bool = ...
    ) -> IoTAnalyticsDescribeDatastoreResponse: ...

    def describe_logging_options(self) -> IoTAnalyticsDescribeLoggingOptionsResponse: ...

    def describe_pipeline(self, *,
        pipelineName: str
    ) -> IoTAnalyticsDescribePipelineResponse: ...

    def get_dataset_content(self, *,
        datasetName: str,
        versionId: str = ...
    ) -> IoTAnalyticsGetDatasetContentResponse: ...

    def list_channels(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTAnalyticsListChannelsResponse: ...

    def list_dataset_contents(self, *,
        datasetName: str,
        nextToken: str = ...,
        maxResults: int = ...,
        scheduledOnOrAfter: datetime.datetime = ...,
        scheduledBefore: datetime.datetime = ...
    ) -> IoTAnalyticsListDatasetContentsResponse: ...

    def list_datasets(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTAnalyticsListDatasetsResponse: ...

    def list_datastores(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTAnalyticsListDatastoresResponse: ...

    def list_pipelines(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTAnalyticsListPipelinesResponse: ...

    def list_tags_for_resource(self, *,
        resourceArn: str
    ) -> IoTAnalyticsListTagsForResourceResponse: ...

    def put_logging_options(self, *,
        loggingOptions: IoTAnalyticsLoggingOptions
    ): ...

    def run_pipeline_activity(self, *,
        pipelineActivity: IoTAnalyticsPipelineActivity,
        payloads: List[bytes]
    ) -> IoTAnalyticsRunPipelineActivityResponse: ...

    def sample_channel_data(self, *,
        channelName: str,
        maxMessages: int = ...,
        startTime: datetime.datetime = ...,
        endTime: datetime.datetime = ...
    ) -> IoTAnalyticsSampleChannelDataResponse: ...

    def start_pipeline_reprocessing(self, *,
        pipelineName: str,
        startTime: datetime.datetime = ...,
        endTime: datetime.datetime = ...
    ) -> IoTAnalyticsStartPipelineReprocessingResponse: ...

    def tag_resource(self, *,
        resourceArn: str,
        tags: List[IoTAnalyticsTag]
    ) -> IoTAnalyticsTagResourceResponse: ...

    def untag_resource(self, *,
        resourceArn: str,
        tagKeys: List[str]
    ) -> IoTAnalyticsUntagResourceResponse: ...

    def update_channel(self, *,
        channelName: str,
        retentionPeriod: IoTAnalyticsRetentionPeriod = ...
    ): ...

    def update_dataset(self, *,
        datasetName: str,
        actions: List[IoTAnalyticsDatasetAction],
        triggers: List[IoTAnalyticsDatasetTrigger] = ...,
        contentDeliveryRules: List[IoTAnalyticsDatasetContentDeliveryRule] = ...,
        retentionPeriod: IoTAnalyticsRetentionPeriod = ...,
        versioningConfiguration: IoTAnalyticsVersioningConfiguration = ...
    ): ...

    def update_datastore(self, *,
        datastoreName: str,
        retentionPeriod: IoTAnalyticsRetentionPeriod = ...
    ): ...

    def update_pipeline(self, *,
        pipelineName: str,
        pipelineActivities: List[IoTAnalyticsPipelineActivity]
    ): ...


IoTAnalyticsMessage = TypedDict(
    'IoTAnalyticsMessage', {
        'MessageId': str,
        'MessagePayload': bytes,
    }
)


IoTAnalyticsBatchPutMessageErrorEntry = TypedDict(
    'IoTAnalyticsBatchPutMessageErrorEntry', {
        'MessageId': Optional[str],
        'ErrorCode': Optional[str],
        'ErrorMessage': Optional[str],
    }
)


IoTAnalyticsBatchPutMessageResponse = TypedDict(
    'IoTAnalyticsBatchPutMessageResponse', {
        'BatchPutMessageErrorEntries': Optional[List[IoTAnalyticsBatchPutMessageErrorEntry]],
    }
)


IoTAnalyticsCancelPipelineReprocessingResponse = TypedDict(
    'IoTAnalyticsCancelPipelineReprocessingResponse', {
    }
)


IoTAnalyticsRetentionPeriod = TypedDict(
    'IoTAnalyticsRetentionPeriod', {
        'UnlimitedRetentionPeriod': Optional[bool],
        'RetentionPeriodInDays': Optional[int],
    }
)


IoTAnalyticsTag = TypedDict(
    'IoTAnalyticsTag', {
        'TagKey': str,
        'TagValue': str,
    }
)


IoTAnalyticsCreateChannelResponse = TypedDict(
    'IoTAnalyticsCreateChannelResponse', {
        'ChannelName': Optional[str],
        'ChannelArn': Optional[str],
        'RetentionPeriod': Optional[IoTAnalyticsRetentionPeriod],
    }
)


IoTAnalyticsDeltaTime = TypedDict(
    'IoTAnalyticsDeltaTime', {
        'OffsetSeconds': int,
        'TimeExpression': str,
    }
)


IoTAnalyticsQueryFilter = TypedDict(
    'IoTAnalyticsQueryFilter', {
        'DeltaTime': Optional[IoTAnalyticsDeltaTime],
    }
)


IoTAnalyticsSqlQueryDatasetAction = TypedDict(
    'IoTAnalyticsSqlQueryDatasetAction', {
        'SqlQuery': str,
        'QueryFilters': Optional[List[IoTAnalyticsQueryFilter]],
    }
)


IoTAnalyticsResourceConfiguration = TypedDict(
    'IoTAnalyticsResourceConfiguration', {
        'ComputeType': str,
        'VolumeSizeInGB': int,
    }
)


IoTAnalyticsDatasetContentVersionValue = TypedDict(
    'IoTAnalyticsDatasetContentVersionValue', {
        'DatasetName': str,
    }
)


IoTAnalyticsOutputFileUriValue = TypedDict(
    'IoTAnalyticsOutputFileUriValue', {
        'OutputFileName': str,
    }
)


IoTAnalyticsVariable = TypedDict(
    'IoTAnalyticsVariable', {
        'VariableName': str,
        'StringValue': Optional[str],
        'DoubleValue': Optional[float],
        'DatasetContentVersionValue': Optional[IoTAnalyticsDatasetContentVersionValue],
        'OutputFileUriValue': Optional[IoTAnalyticsOutputFileUriValue],
    }
)


IoTAnalyticsContainerDatasetAction = TypedDict(
    'IoTAnalyticsContainerDatasetAction', {
        'Image': str,
        'RoleArn': str,
        'ResourceConfiguration': IoTAnalyticsResourceConfiguration,
        'Variables': Optional[List[IoTAnalyticsVariable]],
    }
)


IoTAnalyticsDatasetAction = TypedDict(
    'IoTAnalyticsDatasetAction', {
        'DatasetActionName': Optional[str],
        'SqlQueryDatasetAction': Optional[IoTAnalyticsSqlQueryDatasetAction],
        'ContainerDatasetAction': Optional[IoTAnalyticsContainerDatasetAction],
    }
)


IoTAnalyticsSchedule = TypedDict(
    'IoTAnalyticsSchedule', {
        'ScheduleExpression': Optional[str],
    }
)


IoTAnalyticsTriggeringDataset = TypedDict(
    'IoTAnalyticsTriggeringDataset', {
        'DatasetName': str,
    }
)


IoTAnalyticsDatasetTrigger = TypedDict(
    'IoTAnalyticsDatasetTrigger', {
        'Schedule': Optional[IoTAnalyticsSchedule],
        'TriggeringDataset': Optional[IoTAnalyticsTriggeringDataset],
    }
)


IoTAnalyticsIotEventsDestinationConfiguration = TypedDict(
    'IoTAnalyticsIotEventsDestinationConfiguration', {
        'IotEventsInputName': str,
        'RoleArn': str,
    }
)


IoTAnalyticsDatasetContentDeliveryDestination = TypedDict(
    'IoTAnalyticsDatasetContentDeliveryDestination', {
        'IotEventsDestinationConfiguration': Optional[IoTAnalyticsIotEventsDestinationConfiguration],
    }
)


IoTAnalyticsDatasetContentDeliveryRule = TypedDict(
    'IoTAnalyticsDatasetContentDeliveryRule', {
        'DatasetContentDeliveryDestination': IoTAnalyticsDatasetContentDeliveryDestination,
        'EntryName': Optional[str],
    }
)


IoTAnalyticsVersioningConfiguration = TypedDict(
    'IoTAnalyticsVersioningConfiguration', {
        'UnlimitedVersioning': Optional[bool],
        'MaxVersions': Optional[int],
    }
)


IoTAnalyticsCreateDatasetResponse = TypedDict(
    'IoTAnalyticsCreateDatasetResponse', {
        'DatasetName': Optional[str],
        'DatasetArn': Optional[str],
        'RetentionPeriod': Optional[IoTAnalyticsRetentionPeriod],
    }
)


IoTAnalyticsCreateDatasetContentResponse = TypedDict(
    'IoTAnalyticsCreateDatasetContentResponse', {
        'DatasetContentVersion': Optional[str],
    }
)


IoTAnalyticsCreateDatastoreResponse = TypedDict(
    'IoTAnalyticsCreateDatastoreResponse', {
        'DatastoreName': Optional[str],
        'DatastoreArn': Optional[str],
        'RetentionPeriod': Optional[IoTAnalyticsRetentionPeriod],
    }
)


IoTAnalyticsChannelActivity = TypedDict(
    'IoTAnalyticsChannelActivity', {
        'ActivityName': str,
        'ChannelName': str,
        'ActivityName': Optional[str],
    }
)


IoTAnalyticsLambdaActivity = TypedDict(
    'IoTAnalyticsLambdaActivity', {
        'ActivityName': str,
        'LambdaName': str,
        'ActivityBatchSize': int,
        'ActivityName': Optional[str],
    }
)


IoTAnalyticsDatastoreActivity = TypedDict(
    'IoTAnalyticsDatastoreActivity', {
        'ActivityName': str,
        'DatastoreName': str,
    }
)


IoTAnalyticsAddAttributesActivity = TypedDict(
    'IoTAnalyticsAddAttributesActivity', {
        'ActivityName': str,
        'AttributeNameMapping': Dict[str, str],
        'ActivityName': Optional[str],
    }
)


IoTAnalyticsRemoveAttributesActivity = TypedDict(
    'IoTAnalyticsRemoveAttributesActivity', {
        'ActivityName': str,
        'AttributeNames': List[str],
        'ActivityName': Optional[str],
    }
)


IoTAnalyticsSelectAttributesActivity = TypedDict(
    'IoTAnalyticsSelectAttributesActivity', {
        'ActivityName': str,
        'AttributeNames': List[str],
        'ActivityName': Optional[str],
    }
)


IoTAnalyticsFilterActivity = TypedDict(
    'IoTAnalyticsFilterActivity', {
        'ActivityName': str,
        'FilterExpression': str,
        'ActivityName': Optional[str],
    }
)


IoTAnalyticsMathActivity = TypedDict(
    'IoTAnalyticsMathActivity', {
        'ActivityName': str,
        'AttributeName': str,
        'MathExpression': str,
        'ActivityName': Optional[str],
    }
)


IoTAnalyticsDeviceRegistryEnrichActivity = TypedDict(
    'IoTAnalyticsDeviceRegistryEnrichActivity', {
        'ActivityName': str,
        'AttributeName': str,
        'AttributeName': str,
        'RoleArn': str,
        'ActivityName': Optional[str],
    }
)


IoTAnalyticsDeviceShadowEnrichActivity = TypedDict(
    'IoTAnalyticsDeviceShadowEnrichActivity', {
        'ActivityName': str,
        'AttributeName': str,
        'AttributeName': str,
        'RoleArn': str,
        'ActivityName': Optional[str],
    }
)


IoTAnalyticsPipelineActivity = TypedDict(
    'IoTAnalyticsPipelineActivity', {
        'ChannelActivity': Optional[IoTAnalyticsChannelActivity],
        'LambdaActivity': Optional[IoTAnalyticsLambdaActivity],
        'DatastoreActivity': Optional[IoTAnalyticsDatastoreActivity],
        'AddAttributesActivity': Optional[IoTAnalyticsAddAttributesActivity],
        'RemoveAttributesActivity': Optional[IoTAnalyticsRemoveAttributesActivity],
        'SelectAttributesActivity': Optional[IoTAnalyticsSelectAttributesActivity],
        'FilterActivity': Optional[IoTAnalyticsFilterActivity],
        'MathActivity': Optional[IoTAnalyticsMathActivity],
        'DeviceRegistryEnrichActivity': Optional[IoTAnalyticsDeviceRegistryEnrichActivity],
        'DeviceShadowEnrichActivity': Optional[IoTAnalyticsDeviceShadowEnrichActivity],
    }
)


IoTAnalyticsCreatePipelineResponse = TypedDict(
    'IoTAnalyticsCreatePipelineResponse', {
        'PipelineName': Optional[str],
        'PipelineArn': Optional[str],
    }
)


IoTAnalyticsChannel = TypedDict(
    'IoTAnalyticsChannel', {
        'ChannelName': Optional[str],
        'ChannelArn': Optional[str],
        'ChannelStatus': Optional[str],
        'RetentionPeriod': Optional[IoTAnalyticsRetentionPeriod],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


IoTAnalyticsEstimatedResourceSize = TypedDict(
    'IoTAnalyticsEstimatedResourceSize', {
        'SizeInBytes': Optional[float],
        'Timestamp': Optional[datetime.datetime],
    }
)


IoTAnalyticsChannelStatistics = TypedDict(
    'IoTAnalyticsChannelStatistics', {
        'EstimatedResourceSize': Optional[IoTAnalyticsEstimatedResourceSize],
    }
)


IoTAnalyticsDescribeChannelResponse = TypedDict(
    'IoTAnalyticsDescribeChannelResponse', {
        'Channel': Optional[IoTAnalyticsChannel],
        'ChannelStatistics': Optional[IoTAnalyticsChannelStatistics],
    }
)


IoTAnalyticsDataset = TypedDict(
    'IoTAnalyticsDataset', {
        'DatasetName': Optional[str],
        'DatasetArn': Optional[str],
        'DatasetActions': Optional[List[IoTAnalyticsDatasetAction]],
        'DatasetTriggers': Optional[List[IoTAnalyticsDatasetTrigger]],
        'DatasetContentDeliveryRules': Optional[List[IoTAnalyticsDatasetContentDeliveryRule]],
        'DatasetStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'RetentionPeriod': Optional[IoTAnalyticsRetentionPeriod],
        'VersioningConfiguration': Optional[IoTAnalyticsVersioningConfiguration],
    }
)


IoTAnalyticsDescribeDatasetResponse = TypedDict(
    'IoTAnalyticsDescribeDatasetResponse', {
        'Dataset': Optional[IoTAnalyticsDataset],
    }
)


IoTAnalyticsDatastore = TypedDict(
    'IoTAnalyticsDatastore', {
        'DatastoreName': Optional[str],
        'DatastoreArn': Optional[str],
        'DatastoreStatus': Optional[str],
        'RetentionPeriod': Optional[IoTAnalyticsRetentionPeriod],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


IoTAnalyticsDatastoreStatistics = TypedDict(
    'IoTAnalyticsDatastoreStatistics', {
        'EstimatedResourceSize': Optional[IoTAnalyticsEstimatedResourceSize],
    }
)


IoTAnalyticsDescribeDatastoreResponse = TypedDict(
    'IoTAnalyticsDescribeDatastoreResponse', {
        'Datastore': Optional[IoTAnalyticsDatastore],
        'DatastoreStatistics': Optional[IoTAnalyticsDatastoreStatistics],
    }
)


IoTAnalyticsLoggingOptions = TypedDict(
    'IoTAnalyticsLoggingOptions', {
        'RoleArn': str,
        'LoggingLevel': str,
        'LoggingEnabled': bool,
    }
)


IoTAnalyticsDescribeLoggingOptionsResponse = TypedDict(
    'IoTAnalyticsDescribeLoggingOptionsResponse', {
        'LoggingOptions': Optional[IoTAnalyticsLoggingOptions],
    }
)


IoTAnalyticsReprocessingSummary = TypedDict(
    'IoTAnalyticsReprocessingSummary', {
        'ReprocessingId': Optional[str],
        'ReprocessingStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


IoTAnalyticsPipeline = TypedDict(
    'IoTAnalyticsPipeline', {
        'PipelineName': Optional[str],
        'PipelineArn': Optional[str],
        'PipelineActivities': Optional[List[IoTAnalyticsPipelineActivity]],
        'ReprocessingSummaries': Optional[List[IoTAnalyticsReprocessingSummary]],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


IoTAnalyticsDescribePipelineResponse = TypedDict(
    'IoTAnalyticsDescribePipelineResponse', {
        'Pipeline': Optional[IoTAnalyticsPipeline],
    }
)


IoTAnalyticsDatasetEntry = TypedDict(
    'IoTAnalyticsDatasetEntry', {
        'EntryName': Optional[str],
        'PresignedURI': Optional[str],
    }
)


IoTAnalyticsDatasetContentStatus = TypedDict(
    'IoTAnalyticsDatasetContentStatus', {
        'DatasetContentState': Optional[str],
        'Reason': Optional[str],
    }
)


IoTAnalyticsGetDatasetContentResponse = TypedDict(
    'IoTAnalyticsGetDatasetContentResponse', {
        'DatasetEntries': Optional[List[IoTAnalyticsDatasetEntry]],
        'Timestamp': Optional[datetime.datetime],
        'DatasetContentStatus': Optional[IoTAnalyticsDatasetContentStatus],
    }
)


IoTAnalyticsChannelSummary = TypedDict(
    'IoTAnalyticsChannelSummary', {
        'ChannelName': Optional[str],
        'ChannelStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


IoTAnalyticsListChannelsResponse = TypedDict(
    'IoTAnalyticsListChannelsResponse', {
        'ChannelSummaries': Optional[List[IoTAnalyticsChannelSummary]],
        'NextToken': Optional[str],
    }
)


IoTAnalyticsDatasetContentSummary = TypedDict(
    'IoTAnalyticsDatasetContentSummary', {
        'DatasetContentVersion': Optional[str],
        'DatasetContentStatus': Optional[IoTAnalyticsDatasetContentStatus],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


IoTAnalyticsListDatasetContentsResponse = TypedDict(
    'IoTAnalyticsListDatasetContentsResponse', {
        'DatasetContentSummaries': Optional[List[IoTAnalyticsDatasetContentSummary]],
        'NextToken': Optional[str],
    }
)


IoTAnalyticsDatasetActionSummary = TypedDict(
    'IoTAnalyticsDatasetActionSummary', {
        'DatasetActionName': Optional[str],
        'DatasetActionType': Optional[str],
    }
)


IoTAnalyticsDatasetSummary = TypedDict(
    'IoTAnalyticsDatasetSummary', {
        'DatasetName': Optional[str],
        'DatasetStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'DatasetTriggers': Optional[List[IoTAnalyticsDatasetTrigger]],
        'DatasetActionSummaries': Optional[List[IoTAnalyticsDatasetActionSummary]],
    }
)


IoTAnalyticsListDatasetsResponse = TypedDict(
    'IoTAnalyticsListDatasetsResponse', {
        'DatasetSummaries': Optional[List[IoTAnalyticsDatasetSummary]],
        'NextToken': Optional[str],
    }
)


IoTAnalyticsDatastoreSummary = TypedDict(
    'IoTAnalyticsDatastoreSummary', {
        'DatastoreName': Optional[str],
        'DatastoreStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


IoTAnalyticsListDatastoresResponse = TypedDict(
    'IoTAnalyticsListDatastoresResponse', {
        'DatastoreSummaries': Optional[List[IoTAnalyticsDatastoreSummary]],
        'NextToken': Optional[str],
    }
)


IoTAnalyticsPipelineSummary = TypedDict(
    'IoTAnalyticsPipelineSummary', {
        'PipelineName': Optional[str],
        'ReprocessingSummaries': Optional[List[IoTAnalyticsReprocessingSummary]],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


IoTAnalyticsListPipelinesResponse = TypedDict(
    'IoTAnalyticsListPipelinesResponse', {
        'PipelineSummaries': Optional[List[IoTAnalyticsPipelineSummary]],
        'NextToken': Optional[str],
    }
)


IoTAnalyticsListTagsForResourceResponse = TypedDict(
    'IoTAnalyticsListTagsForResourceResponse', {
        'TagList': Optional[List[IoTAnalyticsTag]],
    }
)


IoTAnalyticsRunPipelineActivityResponse = TypedDict(
    'IoTAnalyticsRunPipelineActivityResponse', {
        'MessagePayloads': Optional[List[bytes]],
        'LogResult': Optional[str],
    }
)


IoTAnalyticsSampleChannelDataResponse = TypedDict(
    'IoTAnalyticsSampleChannelDataResponse', {
        'MessagePayloads': Optional[List[bytes]],
    }
)


IoTAnalyticsStartPipelineReprocessingResponse = TypedDict(
    'IoTAnalyticsStartPipelineReprocessingResponse', {
        'ReprocessingId': Optional[str],
    }
)


IoTAnalyticsTagResourceResponse = TypedDict(
    'IoTAnalyticsTagResourceResponse', {
    }
)


IoTAnalyticsUntagResourceResponse = TypedDict(
    'IoTAnalyticsUntagResourceResponse', {
    }
)


class Kafka(BaseClient):
    def create_cluster(self, *,
        BrokerNodeGroupInfo: KafkaBrokerNodeGroupInfo,
        ClusterName: str,
        KafkaVersion: str,
        NumberOfBrokerNodes: int,
        EncryptionInfo: KafkaEncryptionInfo = ...,
        EnhancedMonitoring: str = ...
    ) -> KafkaCreateClusterResponse: ...

    def delete_cluster(self, *,
        ClusterArn: str,
        CurrentVersion: str = ...
    ) -> KafkaDeleteClusterResponse: ...

    def describe_cluster(self, *,
        ClusterArn: str
    ) -> KafkaDescribeClusterResponse: ...

    def get_bootstrap_brokers(self, *,
        ClusterArn: str
    ) -> KafkaGetBootstrapBrokersResponse: ...

    def list_clusters(self, *,
        ClusterNameFilter: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> KafkaListClustersResponse: ...

    def list_nodes(self, *,
        ClusterArn: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> KafkaListNodesResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> KafkaListTagsForResourceResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: Dict[str, str]
    ): ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ): ...


KafkaEBSStorageInfo = TypedDict(
    'KafkaEBSStorageInfo', {
        '__integerMin1Max16384': Optional[int],
    }
)


KafkaStorageInfo = TypedDict(
    'KafkaStorageInfo', {
        'EBSStorageInfo': Optional[KafkaEBSStorageInfo],
    }
)


KafkaBrokerNodeGroupInfo = TypedDict(
    'KafkaBrokerNodeGroupInfo', {
        '__listOf__string': List[str],
        '__stringMin5Max32': str,
        'BrokerAZDistribution': Optional[str],
        '__listOf__string': Optional[List[str]],
        'StorageInfo': Optional[KafkaStorageInfo],
    }
)


KafkaEncryptionAtRest = TypedDict(
    'KafkaEncryptionAtRest', {
        '__string': str,
    }
)


KafkaEncryptionInfo = TypedDict(
    'KafkaEncryptionInfo', {
        'EncryptionAtRest': Optional[KafkaEncryptionAtRest],
    }
)


KafkaCreateClusterResponse = TypedDict(
    'KafkaCreateClusterResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        'ClusterState': Optional[str],
    }
)


KafkaDeleteClusterResponse = TypedDict(
    'KafkaDeleteClusterResponse', {
        '__string': Optional[str],
        'ClusterState': Optional[str],
    }
)


KafkaBrokerSoftwareInfo = TypedDict(
    'KafkaBrokerSoftwareInfo', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


KafkaClusterInfo = TypedDict(
    'KafkaClusterInfo', {
        'BrokerNodeGroupInfo': Optional[KafkaBrokerNodeGroupInfo],
        '__string': Optional[str],
        '__string': Optional[str],
        '__timestampIso8601': Optional[datetime.datetime],
        'BrokerSoftwareInfo': Optional[KafkaBrokerSoftwareInfo],
        '__string': Optional[str],
        'EncryptionInfo': Optional[KafkaEncryptionInfo],
        'EnhancedMonitoring': Optional[str],
        '__integer': Optional[int],
        'ClusterState': Optional[str],
        '__string': Optional[str],
    }
)


KafkaDescribeClusterResponse = TypedDict(
    'KafkaDescribeClusterResponse', {
        'ClusterInfo': Optional[KafkaClusterInfo],
    }
)


KafkaGetBootstrapBrokersResponse = TypedDict(
    'KafkaGetBootstrapBrokersResponse', {
        '__string': Optional[str],
    }
)


KafkaListClustersResponse = TypedDict(
    'KafkaListClustersResponse', {
        '__listOfClusterInfo': Optional[List[KafkaClusterInfo]],
        '__string': Optional[str],
    }
)


KafkaBrokerNodeInfo = TypedDict(
    'KafkaBrokerNodeInfo', {
        '__string': Optional[str],
        '__double': Optional[float],
        '__string': Optional[str],
        '__string': Optional[str],
        'BrokerSoftwareInfo': Optional[KafkaBrokerSoftwareInfo],
    }
)


KafkaZookeeperNodeInfo = TypedDict(
    'KafkaZookeeperNodeInfo', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__double': Optional[float],
        '__string': Optional[str],
    }
)


KafkaNodeInfo = TypedDict(
    'KafkaNodeInfo', {
        '__string': Optional[str],
        'BrokerNodeInfo': Optional[KafkaBrokerNodeInfo],
        '__string': Optional[str],
        '__string': Optional[str],
        'NodeType': Optional[str],
        'ZookeeperNodeInfo': Optional[KafkaZookeeperNodeInfo],
    }
)


KafkaListNodesResponse = TypedDict(
    'KafkaListNodesResponse', {
        '__string': Optional[str],
        '__listOfNodeInfo': Optional[List[KafkaNodeInfo]],
    }
)


KafkaListTagsForResourceResponse = TypedDict(
    'KafkaListTagsForResourceResponse', {
        '__mapOf__string': Optional[Dict[str, str]],
    }
)


class Kinesis(BaseClient):
    def add_tags_to_stream(self, *,
        StreamName: str,
        Tags: Dict[str, str]
    ): ...

    def create_stream(self, *,
        StreamName: str,
        ShardCount: int
    ): ...

    def decrease_stream_retention_period(self, *,
        StreamName: str,
        RetentionPeriodHours: int
    ): ...

    def delete_stream(self, *,
        StreamName: str,
        EnforceConsumerDeletion: bool = ...
    ): ...

    def deregister_stream_consumer(self, *,
        StreamARN: str = ...,
        ConsumerName: str = ...,
        ConsumerARN: str = ...
    ): ...

    def describe_limits(self) -> KinesisDescribeLimitsOutput: ...

    def describe_stream(self, *,
        StreamName: str,
        Limit: int = ...,
        ExclusiveStartShardId: str = ...
    ) -> KinesisDescribeStreamOutput: ...

    def describe_stream_consumer(self, *,
        StreamARN: str = ...,
        ConsumerName: str = ...,
        ConsumerARN: str = ...
    ) -> KinesisDescribeStreamConsumerOutput: ...

    def describe_stream_summary(self, *,
        StreamName: str
    ) -> KinesisDescribeStreamSummaryOutput: ...

    def disable_enhanced_monitoring(self, *,
        StreamName: str,
        ShardLevelMetrics: List[str]
    ) -> KinesisEnhancedMonitoringOutput: ...

    def enable_enhanced_monitoring(self, *,
        StreamName: str,
        ShardLevelMetrics: List[str]
    ) -> KinesisEnhancedMonitoringOutput: ...

    def get_records(self, *,
        ShardIterator: str,
        Limit: int = ...
    ) -> KinesisGetRecordsOutput: ...

    def get_shard_iterator(self, *,
        StreamName: str,
        ShardId: str,
        ShardIteratorType: str,
        StartingSequenceNumber: str = ...,
        Timestamp: datetime.datetime = ...
    ) -> KinesisGetShardIteratorOutput: ...

    def increase_stream_retention_period(self, *,
        StreamName: str,
        RetentionPeriodHours: int
    ): ...

    def list_shards(self, *,
        StreamName: str = ...,
        NextToken: str = ...,
        ExclusiveStartShardId: str = ...,
        MaxResults: int = ...,
        StreamCreationTimestamp: datetime.datetime = ...
    ) -> KinesisListShardsOutput: ...

    def list_stream_consumers(self, *,
        StreamARN: str,
        NextToken: str = ...,
        MaxResults: int = ...,
        StreamCreationTimestamp: datetime.datetime = ...
    ) -> KinesisListStreamConsumersOutput: ...

    def list_streams(self, *,
        Limit: int = ...,
        ExclusiveStartStreamName: str = ...
    ) -> KinesisListStreamsOutput: ...

    def list_tags_for_stream(self, *,
        StreamName: str,
        ExclusiveStartTagKey: str = ...,
        Limit: int = ...
    ) -> KinesisListTagsForStreamOutput: ...

    def merge_shards(self, *,
        StreamName: str,
        ShardToMerge: str,
        AdjacentShardToMerge: str
    ): ...

    def put_record(self, *,
        StreamName: str,
        Data: bytes,
        PartitionKey: str,
        ExplicitHashKey: str = ...,
        SequenceNumberForOrdering: str = ...
    ) -> KinesisPutRecordOutput: ...

    def put_records(self, *,
        Records: List[KinesisPutRecordsRequestEntry],
        StreamName: str
    ) -> KinesisPutRecordsOutput: ...

    def register_stream_consumer(self, *,
        StreamARN: str,
        ConsumerName: str
    ) -> KinesisRegisterStreamConsumerOutput: ...

    def remove_tags_from_stream(self, *,
        StreamName: str,
        TagKeys: List[str]
    ): ...

    def split_shard(self, *,
        StreamName: str,
        ShardToSplit: str,
        NewStartingHashKey: str
    ): ...

    def start_stream_encryption(self, *,
        StreamName: str,
        EncryptionType: str,
        KeyId: str
    ): ...

    def stop_stream_encryption(self, *,
        StreamName: str,
        EncryptionType: str,
        KeyId: str
    ): ...

    def subscribe_to_shard(self, *,
        ConsumerARN: str,
        ShardId: str,
        StartingPosition: KinesisStartingPosition
    ) -> KinesisSubscribeToShardOutput: ...

    def update_shard_count(self, *,
        StreamName: str,
        TargetShardCount: int,
        ScalingType: str
    ) -> KinesisUpdateShardCountOutput: ...


KinesisDescribeLimitsOutput = TypedDict(
    'KinesisDescribeLimitsOutput', {
        'ShardCountObject': int,
        'ShardCountObject': int,
    }
)


KinesisHashKeyRange = TypedDict(
    'KinesisHashKeyRange', {
        'HashKey': str,
        'HashKey': str,
    }
)


KinesisSequenceNumberRange = TypedDict(
    'KinesisSequenceNumberRange', {
        'SequenceNumber': str,
        'SequenceNumber': Optional[str],
    }
)


KinesisShard = TypedDict(
    'KinesisShard', {
        'ShardId': str,
        'HashKeyRange': KinesisHashKeyRange,
        'SequenceNumberRange': KinesisSequenceNumberRange,
        'ShardId': Optional[str],
        'ShardId': Optional[str],
    }
)


KinesisEnhancedMetrics = TypedDict(
    'KinesisEnhancedMetrics', {
        'MetricsNameList': Optional[List[str]],
    }
)


KinesisStreamDescription = TypedDict(
    'KinesisStreamDescription', {
        'StreamName': str,
        'StreamARN': str,
        'StreamStatus': str,
        'ShardList': List[KinesisShard],
        'BooleanObject': bool,
        'RetentionPeriodHours': int,
        'Timestamp': datetime.datetime,
        'EnhancedMonitoringList': List[KinesisEnhancedMetrics],
        'EncryptionType': Optional[str],
        'KeyId': Optional[str],
    }
)


KinesisDescribeStreamOutput = TypedDict(
    'KinesisDescribeStreamOutput', {
        'StreamDescription': KinesisStreamDescription,
    }
)


KinesisConsumerDescription = TypedDict(
    'KinesisConsumerDescription', {
        'ConsumerName': str,
        'ConsumerARN': str,
        'ConsumerStatus': str,
        'Timestamp': datetime.datetime,
        'StreamARN': str,
    }
)


KinesisDescribeStreamConsumerOutput = TypedDict(
    'KinesisDescribeStreamConsumerOutput', {
        'ConsumerDescription': KinesisConsumerDescription,
    }
)


KinesisStreamDescriptionSummary = TypedDict(
    'KinesisStreamDescriptionSummary', {
        'StreamName': str,
        'StreamARN': str,
        'StreamStatus': str,
        'PositiveIntegerObject': int,
        'Timestamp': datetime.datetime,
        'EnhancedMonitoringList': List[KinesisEnhancedMetrics],
        'ShardCountObject': int,
        'EncryptionType': Optional[str],
        'KeyId': Optional[str],
        'ConsumerCountObject': Optional[int],
    }
)


KinesisDescribeStreamSummaryOutput = TypedDict(
    'KinesisDescribeStreamSummaryOutput', {
        'StreamDescriptionSummary': KinesisStreamDescriptionSummary,
    }
)


KinesisEnhancedMonitoringOutput = TypedDict(
    'KinesisEnhancedMonitoringOutput', {
        'StreamName': Optional[str],
        'MetricsNameList': Optional[List[str]],
        'MetricsNameList': Optional[List[str]],
    }
)


KinesisRecord = TypedDict(
    'KinesisRecord', {
        'SequenceNumber': str,
        'Data': bytes,
        'PartitionKey': str,
        'Timestamp': Optional[datetime.datetime],
        'EncryptionType': Optional[str],
    }
)


KinesisGetRecordsOutput = TypedDict(
    'KinesisGetRecordsOutput', {
        'RecordList': List[KinesisRecord],
        'ShardIterator': Optional[str],
        'MillisBehindLatest': Optional[int],
    }
)


KinesisGetShardIteratorOutput = TypedDict(
    'KinesisGetShardIteratorOutput', {
        'ShardIterator': Optional[str],
    }
)


KinesisListShardsOutput = TypedDict(
    'KinesisListShardsOutput', {
        'ShardList': Optional[List[KinesisShard]],
        'NextToken': Optional[str],
    }
)


KinesisConsumer = TypedDict(
    'KinesisConsumer', {
        'ConsumerName': str,
        'ConsumerARN': str,
        'ConsumerStatus': str,
        'Timestamp': datetime.datetime,
    }
)


KinesisListStreamConsumersOutput = TypedDict(
    'KinesisListStreamConsumersOutput', {
        'ConsumerList': Optional[List[KinesisConsumer]],
        'NextToken': Optional[str],
    }
)


KinesisListStreamsOutput = TypedDict(
    'KinesisListStreamsOutput', {
        'StreamNameList': List[str],
        'BooleanObject': bool,
    }
)


KinesisTag = TypedDict(
    'KinesisTag', {
        'TagKey': str,
        'TagValue': Optional[str],
    }
)


KinesisListTagsForStreamOutput = TypedDict(
    'KinesisListTagsForStreamOutput', {
        'TagList': List[KinesisTag],
        'BooleanObject': bool,
    }
)


KinesisPutRecordOutput = TypedDict(
    'KinesisPutRecordOutput', {
        'ShardId': str,
        'SequenceNumber': str,
        'EncryptionType': Optional[str],
    }
)


KinesisPutRecordsRequestEntry = TypedDict(
    'KinesisPutRecordsRequestEntry', {
        'Data': bytes,
        'PartitionKey': str,
        'HashKey': Optional[str],
    }
)


KinesisPutRecordsResultEntry = TypedDict(
    'KinesisPutRecordsResultEntry', {
        'SequenceNumber': Optional[str],
        'ShardId': Optional[str],
        'ErrorCode': Optional[str],
        'ErrorMessage': Optional[str],
    }
)


KinesisPutRecordsOutput = TypedDict(
    'KinesisPutRecordsOutput', {
        'PutRecordsResultEntryList': List[KinesisPutRecordsResultEntry],
        'PositiveIntegerObject': Optional[int],
        'EncryptionType': Optional[str],
    }
)


KinesisRegisterStreamConsumerOutput = TypedDict(
    'KinesisRegisterStreamConsumerOutput', {
        'Consumer': KinesisConsumer,
    }
)


KinesisStartingPosition = TypedDict(
    'KinesisStartingPosition', {
        'ShardIteratorType': str,
        'SequenceNumber': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


KinesisSubscribeToShardEvent = TypedDict(
    'KinesisSubscribeToShardEvent', {
        'RecordList': List[KinesisRecord],
        'SequenceNumber': str,
        'MillisBehindLatest': int,
    }
)


KinesisResourceNotFoundException = TypedDict(
    'KinesisResourceNotFoundException', {
        'ErrorMessage': Optional[str],
    }
)


KinesisResourceInUseException = TypedDict(
    'KinesisResourceInUseException', {
        'ErrorMessage': Optional[str],
    }
)


KinesisKMSDisabledException = TypedDict(
    'KinesisKMSDisabledException', {
        'ErrorMessage': Optional[str],
    }
)


KinesisKMSInvalidStateException = TypedDict(
    'KinesisKMSInvalidStateException', {
        'ErrorMessage': Optional[str],
    }
)


KinesisKMSAccessDeniedException = TypedDict(
    'KinesisKMSAccessDeniedException', {
        'ErrorMessage': Optional[str],
    }
)


KinesisKMSNotFoundException = TypedDict(
    'KinesisKMSNotFoundException', {
        'ErrorMessage': Optional[str],
    }
)


KinesisKMSOptInRequired = TypedDict(
    'KinesisKMSOptInRequired', {
        'ErrorMessage': Optional[str],
    }
)


KinesisKMSThrottlingException = TypedDict(
    'KinesisKMSThrottlingException', {
        'ErrorMessage': Optional[str],
    }
)


KinesisInternalFailureException = TypedDict(
    'KinesisInternalFailureException', {
        'ErrorMessage': Optional[str],
    }
)


KinesisSubscribeToShardEventStream = TypedDict(
    'KinesisSubscribeToShardEventStream', {
        'SubscribeToShardEvent': KinesisSubscribeToShardEvent,
        'ResourceNotFoundException': Optional[KinesisResourceNotFoundException],
        'ResourceInUseException': Optional[KinesisResourceInUseException],
        'KMSDisabledException': Optional[KinesisKMSDisabledException],
        'KMSInvalidStateException': Optional[KinesisKMSInvalidStateException],
        'KMSAccessDeniedException': Optional[KinesisKMSAccessDeniedException],
        'KMSNotFoundException': Optional[KinesisKMSNotFoundException],
        'KMSOptInRequired': Optional[KinesisKMSOptInRequired],
        'KMSThrottlingException': Optional[KinesisKMSThrottlingException],
        'InternalFailureException': Optional[KinesisInternalFailureException],
    }
)


KinesisSubscribeToShardOutput = TypedDict(
    'KinesisSubscribeToShardOutput', {
        'SubscribeToShardEventStream': KinesisSubscribeToShardEventStream,
    }
)


KinesisUpdateShardCountOutput = TypedDict(
    'KinesisUpdateShardCountOutput', {
        'StreamName': Optional[str],
        'PositiveIntegerObject': Optional[int],
        'PositiveIntegerObject': Optional[int],
    }
)


class KinesisVideoArchivedMedia(BaseClient):
    def get_hls_streaming_session_url(self, *,
        StreamName: str = ...,
        StreamARN: str = ...,
        PlaybackMode: str = ...,
        HLSFragmentSelector: KinesisVideoArchivedMediaHLSFragmentSelector = ...,
        ContainerFormat: str = ...,
        DiscontinuityMode: str = ...,
        DisplayFragmentTimestamp: str = ...,
        Expires: int = ...,
        MaxMediaPlaylistFragmentResults: int = ...
    ) -> KinesisVideoArchivedMediaGetHLSStreamingSessionURLOutput: ...

    def get_media_for_fragment_list(self, *,
        StreamName: str,
        Fragments: List[str]
    ) -> KinesisVideoArchivedMediaGetMediaForFragmentListOutput: ...

    def list_fragments(self, *,
        StreamName: str,
        MaxResults: int = ...,
        NextToken: str = ...,
        FragmentSelector: KinesisVideoArchivedMediaFragmentSelector = ...
    ) -> KinesisVideoArchivedMediaListFragmentsOutput: ...


KinesisVideoArchivedMediaHLSTimestampRange = TypedDict(
    'KinesisVideoArchivedMediaHLSTimestampRange', {
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


KinesisVideoArchivedMediaHLSFragmentSelector = TypedDict(
    'KinesisVideoArchivedMediaHLSFragmentSelector', {
        'HLSFragmentSelectorType': Optional[str],
        'HLSTimestampRange': Optional[KinesisVideoArchivedMediaHLSTimestampRange],
    }
)


KinesisVideoArchivedMediaGetHLSStreamingSessionURLOutput = TypedDict(
    'KinesisVideoArchivedMediaGetHLSStreamingSessionURLOutput', {
        'HLSStreamingSessionURL': Optional[str],
    }
)


KinesisVideoArchivedMediaGetMediaForFragmentListOutput = TypedDict(
    'KinesisVideoArchivedMediaGetMediaForFragmentListOutput', {
        'ContentType': Optional[str],
        'Payload': Optional[bytes],
    }
)


KinesisVideoArchivedMediaTimestampRange = TypedDict(
    'KinesisVideoArchivedMediaTimestampRange', {
        'Timestamp': datetime.datetime,
        'Timestamp': datetime.datetime,
    }
)


KinesisVideoArchivedMediaFragmentSelector = TypedDict(
    'KinesisVideoArchivedMediaFragmentSelector', {
        'FragmentSelectorType': str,
        'TimestampRange': KinesisVideoArchivedMediaTimestampRange,
    }
)


KinesisVideoArchivedMediaFragment = TypedDict(
    'KinesisVideoArchivedMediaFragment', {
        'String': Optional[str],
        'Long': Optional[int],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Long': Optional[int],
    }
)


KinesisVideoArchivedMediaListFragmentsOutput = TypedDict(
    'KinesisVideoArchivedMediaListFragmentsOutput', {
        'FragmentList': Optional[List[KinesisVideoArchivedMediaFragment]],
        'String': Optional[str],
    }
)


class KinesisVideoMedia(BaseClient):
    def get_media(self, *,
        StartSelector: KinesisVideoMediaStartSelector,
        StreamName: str = ...,
        StreamARN: str = ...
    ) -> KinesisVideoMediaGetMediaOutput: ...


KinesisVideoMediaStartSelector = TypedDict(
    'KinesisVideoMediaStartSelector', {
        'StartSelectorType': str,
        'FragmentNumberString': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'ContinuationToken': Optional[str],
    }
)


KinesisVideoMediaGetMediaOutput = TypedDict(
    'KinesisVideoMediaGetMediaOutput', {
        'ContentType': Optional[str],
        'Payload': Optional[bytes],
    }
)


class KinesisAnalytics(BaseClient):
    def add_application_cloud_watch_logging_option(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        CloudWatchLoggingOption: KinesisAnalyticsCloudWatchLoggingOption
    ) -> KinesisAnalyticsAddApplicationCloudWatchLoggingOptionResponse: ...

    def add_application_input(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        Input: KinesisAnalyticsInput
    ) -> KinesisAnalyticsAddApplicationInputResponse: ...

    def add_application_input_processing_configuration(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        InputId: str,
        InputProcessingConfiguration: KinesisAnalyticsInputProcessingConfiguration
    ) -> KinesisAnalyticsAddApplicationInputProcessingConfigurationResponse: ...

    def add_application_output(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        Output: KinesisAnalyticsOutput
    ) -> KinesisAnalyticsAddApplicationOutputResponse: ...

    def add_application_reference_data_source(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        ReferenceDataSource: KinesisAnalyticsReferenceDataSource
    ) -> KinesisAnalyticsAddApplicationReferenceDataSourceResponse: ...

    def create_application(self, *,
        ApplicationName: str,
        ApplicationDescription: str = ...,
        Inputs: List[KinesisAnalyticsInput] = ...,
        Outputs: List[KinesisAnalyticsOutput] = ...,
        CloudWatchLoggingOptions: List[KinesisAnalyticsCloudWatchLoggingOption] = ...,
        ApplicationCode: str = ...,
        Tags: List[KinesisAnalyticsTag] = ...
    ) -> KinesisAnalyticsCreateApplicationResponse: ...

    def delete_application(self, *,
        ApplicationName: str,
        CreateTimestamp: datetime.datetime
    ) -> KinesisAnalyticsDeleteApplicationResponse: ...

    def delete_application_cloud_watch_logging_option(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        CloudWatchLoggingOptionId: str
    ) -> KinesisAnalyticsDeleteApplicationCloudWatchLoggingOptionResponse: ...

    def delete_application_input_processing_configuration(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        InputId: str
    ) -> KinesisAnalyticsDeleteApplicationInputProcessingConfigurationResponse: ...

    def delete_application_output(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        OutputId: str
    ) -> KinesisAnalyticsDeleteApplicationOutputResponse: ...

    def delete_application_reference_data_source(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        ReferenceId: str
    ) -> KinesisAnalyticsDeleteApplicationReferenceDataSourceResponse: ...

    def describe_application(self, *,
        ApplicationName: str
    ) -> KinesisAnalyticsDescribeApplicationResponse: ...

    def discover_input_schema(self, *,
        ResourceARN: str = ...,
        RoleARN: str = ...,
        InputStartingPositionConfiguration: KinesisAnalyticsInputStartingPositionConfiguration = ...,
        S3Configuration: KinesisAnalyticsS3Configuration = ...,
        InputProcessingConfiguration: KinesisAnalyticsInputProcessingConfiguration = ...
    ) -> KinesisAnalyticsDiscoverInputSchemaResponse: ...

    def list_applications(self, *,
        Limit: int = ...,
        ExclusiveStartApplicationName: str = ...
    ) -> KinesisAnalyticsListApplicationsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceARN: str
    ) -> KinesisAnalyticsListTagsForResourceResponse: ...

    def start_application(self, *,
        ApplicationName: str,
        InputConfigurations: List[KinesisAnalyticsInputConfiguration]
    ) -> KinesisAnalyticsStartApplicationResponse: ...

    def stop_application(self, *,
        ApplicationName: str
    ) -> KinesisAnalyticsStopApplicationResponse: ...

    def tag_resource(self, *,
        ResourceARN: str,
        Tags: List[KinesisAnalyticsTag]
    ) -> KinesisAnalyticsTagResourceResponse: ...

    def untag_resource(self, *,
        ResourceARN: str,
        TagKeys: List[str]
    ) -> KinesisAnalyticsUntagResourceResponse: ...

    def update_application(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        ApplicationUpdate: KinesisAnalyticsApplicationUpdate
    ) -> KinesisAnalyticsUpdateApplicationResponse: ...


KinesisAnalyticsCloudWatchLoggingOption = TypedDict(
    'KinesisAnalyticsCloudWatchLoggingOption', {
        'LogStreamARN': str,
        'RoleARN': str,
    }
)


KinesisAnalyticsAddApplicationCloudWatchLoggingOptionResponse = TypedDict(
    'KinesisAnalyticsAddApplicationCloudWatchLoggingOptionResponse', {
    }
)


KinesisAnalyticsInputLambdaProcessor = TypedDict(
    'KinesisAnalyticsInputLambdaProcessor', {
        'ResourceARN': str,
        'RoleARN': str,
    }
)


KinesisAnalyticsInputProcessingConfiguration = TypedDict(
    'KinesisAnalyticsInputProcessingConfiguration', {
        'InputLambdaProcessor': KinesisAnalyticsInputLambdaProcessor,
    }
)


KinesisAnalyticsKinesisStreamsInput = TypedDict(
    'KinesisAnalyticsKinesisStreamsInput', {
        'ResourceARN': str,
        'RoleARN': str,
    }
)


KinesisAnalyticsKinesisFirehoseInput = TypedDict(
    'KinesisAnalyticsKinesisFirehoseInput', {
        'ResourceARN': str,
        'RoleARN': str,
    }
)


KinesisAnalyticsInputParallelism = TypedDict(
    'KinesisAnalyticsInputParallelism', {
        'InputParallelismCount': Optional[int],
    }
)


KinesisAnalyticsJSONMappingParameters = TypedDict(
    'KinesisAnalyticsJSONMappingParameters', {
        'RecordRowPath': str,
    }
)


KinesisAnalyticsCSVMappingParameters = TypedDict(
    'KinesisAnalyticsCSVMappingParameters', {
        'RecordRowDelimiter': str,
        'RecordColumnDelimiter': str,
    }
)


KinesisAnalyticsMappingParameters = TypedDict(
    'KinesisAnalyticsMappingParameters', {
        'JSONMappingParameters': Optional[KinesisAnalyticsJSONMappingParameters],
        'CSVMappingParameters': Optional[KinesisAnalyticsCSVMappingParameters],
    }
)


KinesisAnalyticsRecordFormat = TypedDict(
    'KinesisAnalyticsRecordFormat', {
        'RecordFormatType': str,
        'MappingParameters': Optional[KinesisAnalyticsMappingParameters],
    }
)


KinesisAnalyticsRecordColumn = TypedDict(
    'KinesisAnalyticsRecordColumn', {
        'RecordColumnName': str,
        'RecordColumnSqlType': str,
        'RecordColumnMapping': Optional[str],
    }
)


KinesisAnalyticsSourceSchema = TypedDict(
    'KinesisAnalyticsSourceSchema', {
        'RecordFormat': KinesisAnalyticsRecordFormat,
        'RecordColumns': List[KinesisAnalyticsRecordColumn],
        'RecordEncoding': Optional[str],
    }
)


KinesisAnalyticsInput = TypedDict(
    'KinesisAnalyticsInput', {
        'InAppStreamName': str,
        'SourceSchema': KinesisAnalyticsSourceSchema,
        'InputProcessingConfiguration': Optional[KinesisAnalyticsInputProcessingConfiguration],
        'KinesisStreamsInput': Optional[KinesisAnalyticsKinesisStreamsInput],
        'KinesisFirehoseInput': Optional[KinesisAnalyticsKinesisFirehoseInput],
        'InputParallelism': Optional[KinesisAnalyticsInputParallelism],
    }
)


KinesisAnalyticsAddApplicationInputResponse = TypedDict(
    'KinesisAnalyticsAddApplicationInputResponse', {
    }
)


KinesisAnalyticsAddApplicationInputProcessingConfigurationResponse = TypedDict(
    'KinesisAnalyticsAddApplicationInputProcessingConfigurationResponse', {
    }
)


KinesisAnalyticsKinesisStreamsOutput = TypedDict(
    'KinesisAnalyticsKinesisStreamsOutput', {
        'ResourceARN': str,
        'RoleARN': str,
    }
)


KinesisAnalyticsKinesisFirehoseOutput = TypedDict(
    'KinesisAnalyticsKinesisFirehoseOutput', {
        'ResourceARN': str,
        'RoleARN': str,
    }
)


KinesisAnalyticsLambdaOutput = TypedDict(
    'KinesisAnalyticsLambdaOutput', {
        'ResourceARN': str,
        'RoleARN': str,
    }
)


KinesisAnalyticsDestinationSchema = TypedDict(
    'KinesisAnalyticsDestinationSchema', {
        'RecordFormatType': str,
    }
)


KinesisAnalyticsOutput = TypedDict(
    'KinesisAnalyticsOutput', {
        'InAppStreamName': str,
        'DestinationSchema': KinesisAnalyticsDestinationSchema,
        'KinesisStreamsOutput': Optional[KinesisAnalyticsKinesisStreamsOutput],
        'KinesisFirehoseOutput': Optional[KinesisAnalyticsKinesisFirehoseOutput],
        'LambdaOutput': Optional[KinesisAnalyticsLambdaOutput],
    }
)


KinesisAnalyticsAddApplicationOutputResponse = TypedDict(
    'KinesisAnalyticsAddApplicationOutputResponse', {
    }
)


KinesisAnalyticsS3ReferenceDataSource = TypedDict(
    'KinesisAnalyticsS3ReferenceDataSource', {
        'BucketARN': str,
        'FileKey': str,
        'RoleARN': str,
    }
)


KinesisAnalyticsReferenceDataSource = TypedDict(
    'KinesisAnalyticsReferenceDataSource', {
        'InAppTableName': str,
        'SourceSchema': KinesisAnalyticsSourceSchema,
        'S3ReferenceDataSource': Optional[KinesisAnalyticsS3ReferenceDataSource],
    }
)


KinesisAnalyticsAddApplicationReferenceDataSourceResponse = TypedDict(
    'KinesisAnalyticsAddApplicationReferenceDataSourceResponse', {
    }
)


KinesisAnalyticsTag = TypedDict(
    'KinesisAnalyticsTag', {
        'TagKey': str,
        'TagValue': Optional[str],
    }
)


KinesisAnalyticsApplicationSummary = TypedDict(
    'KinesisAnalyticsApplicationSummary', {
        'ApplicationName': str,
        'ResourceARN': str,
        'ApplicationStatus': str,
    }
)


KinesisAnalyticsCreateApplicationResponse = TypedDict(
    'KinesisAnalyticsCreateApplicationResponse', {
        'ApplicationSummary': KinesisAnalyticsApplicationSummary,
    }
)


KinesisAnalyticsDeleteApplicationResponse = TypedDict(
    'KinesisAnalyticsDeleteApplicationResponse', {
    }
)


KinesisAnalyticsDeleteApplicationCloudWatchLoggingOptionResponse = TypedDict(
    'KinesisAnalyticsDeleteApplicationCloudWatchLoggingOptionResponse', {
    }
)


KinesisAnalyticsDeleteApplicationInputProcessingConfigurationResponse = TypedDict(
    'KinesisAnalyticsDeleteApplicationInputProcessingConfigurationResponse', {
    }
)


KinesisAnalyticsDeleteApplicationOutputResponse = TypedDict(
    'KinesisAnalyticsDeleteApplicationOutputResponse', {
    }
)


KinesisAnalyticsDeleteApplicationReferenceDataSourceResponse = TypedDict(
    'KinesisAnalyticsDeleteApplicationReferenceDataSourceResponse', {
    }
)


KinesisAnalyticsInputLambdaProcessorDescription = TypedDict(
    'KinesisAnalyticsInputLambdaProcessorDescription', {
        'ResourceARN': Optional[str],
        'RoleARN': Optional[str],
    }
)


KinesisAnalyticsInputProcessingConfigurationDescription = TypedDict(
    'KinesisAnalyticsInputProcessingConfigurationDescription', {
        'InputLambdaProcessorDescription': Optional[KinesisAnalyticsInputLambdaProcessorDescription],
    }
)


KinesisAnalyticsKinesisStreamsInputDescription = TypedDict(
    'KinesisAnalyticsKinesisStreamsInputDescription', {
        'ResourceARN': Optional[str],
        'RoleARN': Optional[str],
    }
)


KinesisAnalyticsKinesisFirehoseInputDescription = TypedDict(
    'KinesisAnalyticsKinesisFirehoseInputDescription', {
        'ResourceARN': Optional[str],
        'RoleARN': Optional[str],
    }
)


KinesisAnalyticsInputStartingPositionConfiguration = TypedDict(
    'KinesisAnalyticsInputStartingPositionConfiguration', {
        'InputStartingPosition': Optional[str],
    }
)


KinesisAnalyticsInputDescription = TypedDict(
    'KinesisAnalyticsInputDescription', {
        'Id': Optional[str],
        'InAppStreamName': Optional[str],
        'InAppStreamNames': Optional[List[str]],
        'InputProcessingConfigurationDescription': Optional[KinesisAnalyticsInputProcessingConfigurationDescription],
        'KinesisStreamsInputDescription': Optional[KinesisAnalyticsKinesisStreamsInputDescription],
        'KinesisFirehoseInputDescription': Optional[KinesisAnalyticsKinesisFirehoseInputDescription],
        'SourceSchema': Optional[KinesisAnalyticsSourceSchema],
        'InputParallelism': Optional[KinesisAnalyticsInputParallelism],
        'InputStartingPositionConfiguration': Optional[KinesisAnalyticsInputStartingPositionConfiguration],
    }
)


KinesisAnalyticsKinesisStreamsOutputDescription = TypedDict(
    'KinesisAnalyticsKinesisStreamsOutputDescription', {
        'ResourceARN': Optional[str],
        'RoleARN': Optional[str],
    }
)


KinesisAnalyticsKinesisFirehoseOutputDescription = TypedDict(
    'KinesisAnalyticsKinesisFirehoseOutputDescription', {
        'ResourceARN': Optional[str],
        'RoleARN': Optional[str],
    }
)


KinesisAnalyticsLambdaOutputDescription = TypedDict(
    'KinesisAnalyticsLambdaOutputDescription', {
        'ResourceARN': Optional[str],
        'RoleARN': Optional[str],
    }
)


KinesisAnalyticsOutputDescription = TypedDict(
    'KinesisAnalyticsOutputDescription', {
        'Id': Optional[str],
        'InAppStreamName': Optional[str],
        'KinesisStreamsOutputDescription': Optional[KinesisAnalyticsKinesisStreamsOutputDescription],
        'KinesisFirehoseOutputDescription': Optional[KinesisAnalyticsKinesisFirehoseOutputDescription],
        'LambdaOutputDescription': Optional[KinesisAnalyticsLambdaOutputDescription],
        'DestinationSchema': Optional[KinesisAnalyticsDestinationSchema],
    }
)


KinesisAnalyticsS3ReferenceDataSourceDescription = TypedDict(
    'KinesisAnalyticsS3ReferenceDataSourceDescription', {
        'BucketARN': str,
        'FileKey': str,
        'RoleARN': str,
    }
)


KinesisAnalyticsReferenceDataSourceDescription = TypedDict(
    'KinesisAnalyticsReferenceDataSourceDescription', {
        'Id': str,
        'InAppTableName': str,
        'S3ReferenceDataSourceDescription': KinesisAnalyticsS3ReferenceDataSourceDescription,
        'SourceSchema': Optional[KinesisAnalyticsSourceSchema],
    }
)


KinesisAnalyticsCloudWatchLoggingOptionDescription = TypedDict(
    'KinesisAnalyticsCloudWatchLoggingOptionDescription', {
        'LogStreamARN': str,
        'RoleARN': str,
        'Id': Optional[str],
    }
)


KinesisAnalyticsApplicationDetail = TypedDict(
    'KinesisAnalyticsApplicationDetail', {
        'ApplicationName': str,
        'ResourceARN': str,
        'ApplicationStatus': str,
        'ApplicationVersionId': int,
        'ApplicationDescription': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'InputDescriptions': Optional[List[KinesisAnalyticsInputDescription]],
        'OutputDescriptions': Optional[List[KinesisAnalyticsOutputDescription]],
        'ReferenceDataSourceDescriptions': Optional[List[KinesisAnalyticsReferenceDataSourceDescription]],
        'CloudWatchLoggingOptionDescriptions': Optional[List[KinesisAnalyticsCloudWatchLoggingOptionDescription]],
        'ApplicationCode': Optional[str],
    }
)


KinesisAnalyticsDescribeApplicationResponse = TypedDict(
    'KinesisAnalyticsDescribeApplicationResponse', {
        'ApplicationDetail': KinesisAnalyticsApplicationDetail,
    }
)


KinesisAnalyticsS3Configuration = TypedDict(
    'KinesisAnalyticsS3Configuration', {
        'RoleARN': str,
        'BucketARN': str,
        'FileKey': str,
    }
)


KinesisAnalyticsDiscoverInputSchemaResponse = TypedDict(
    'KinesisAnalyticsDiscoverInputSchemaResponse', {
        'SourceSchema': Optional[KinesisAnalyticsSourceSchema],
        'ParsedInputRecords': Optional[List[List[str]]],
        'ProcessedInputRecords': Optional[List[str]],
        'RawInputRecords': Optional[List[str]],
    }
)


KinesisAnalyticsListApplicationsResponse = TypedDict(
    'KinesisAnalyticsListApplicationsResponse', {
        'ApplicationSummaries': List[KinesisAnalyticsApplicationSummary],
        'BooleanObject': bool,
    }
)


KinesisAnalyticsListTagsForResourceResponse = TypedDict(
    'KinesisAnalyticsListTagsForResourceResponse', {
        'Tags': Optional[List[KinesisAnalyticsTag]],
    }
)


KinesisAnalyticsInputConfiguration = TypedDict(
    'KinesisAnalyticsInputConfiguration', {
        'Id': str,
        'InputStartingPositionConfiguration': KinesisAnalyticsInputStartingPositionConfiguration,
    }
)


KinesisAnalyticsStartApplicationResponse = TypedDict(
    'KinesisAnalyticsStartApplicationResponse', {
    }
)


KinesisAnalyticsStopApplicationResponse = TypedDict(
    'KinesisAnalyticsStopApplicationResponse', {
    }
)


KinesisAnalyticsTagResourceResponse = TypedDict(
    'KinesisAnalyticsTagResourceResponse', {
    }
)


KinesisAnalyticsUntagResourceResponse = TypedDict(
    'KinesisAnalyticsUntagResourceResponse', {
    }
)


KinesisAnalyticsInputLambdaProcessorUpdate = TypedDict(
    'KinesisAnalyticsInputLambdaProcessorUpdate', {
        'ResourceARN': Optional[str],
        'RoleARN': Optional[str],
    }
)


KinesisAnalyticsInputProcessingConfigurationUpdate = TypedDict(
    'KinesisAnalyticsInputProcessingConfigurationUpdate', {
        'InputLambdaProcessorUpdate': KinesisAnalyticsInputLambdaProcessorUpdate,
    }
)


KinesisAnalyticsKinesisStreamsInputUpdate = TypedDict(
    'KinesisAnalyticsKinesisStreamsInputUpdate', {
        'ResourceARN': Optional[str],
        'RoleARN': Optional[str],
    }
)


KinesisAnalyticsKinesisFirehoseInputUpdate = TypedDict(
    'KinesisAnalyticsKinesisFirehoseInputUpdate', {
        'ResourceARN': Optional[str],
        'RoleARN': Optional[str],
    }
)


KinesisAnalyticsInputSchemaUpdate = TypedDict(
    'KinesisAnalyticsInputSchemaUpdate', {
        'RecordFormat': Optional[KinesisAnalyticsRecordFormat],
        'RecordEncoding': Optional[str],
        'RecordColumns': Optional[List[KinesisAnalyticsRecordColumn]],
    }
)


KinesisAnalyticsInputParallelismUpdate = TypedDict(
    'KinesisAnalyticsInputParallelismUpdate', {
        'InputParallelismCount': Optional[int],
    }
)


KinesisAnalyticsInputUpdate = TypedDict(
    'KinesisAnalyticsInputUpdate', {
        'Id': str,
        'InAppStreamName': Optional[str],
        'InputProcessingConfigurationUpdate': Optional[KinesisAnalyticsInputProcessingConfigurationUpdate],
        'KinesisStreamsInputUpdate': Optional[KinesisAnalyticsKinesisStreamsInputUpdate],
        'KinesisFirehoseInputUpdate': Optional[KinesisAnalyticsKinesisFirehoseInputUpdate],
        'InputSchemaUpdate': Optional[KinesisAnalyticsInputSchemaUpdate],
        'InputParallelismUpdate': Optional[KinesisAnalyticsInputParallelismUpdate],
    }
)


KinesisAnalyticsKinesisStreamsOutputUpdate = TypedDict(
    'KinesisAnalyticsKinesisStreamsOutputUpdate', {
        'ResourceARN': Optional[str],
        'RoleARN': Optional[str],
    }
)


KinesisAnalyticsKinesisFirehoseOutputUpdate = TypedDict(
    'KinesisAnalyticsKinesisFirehoseOutputUpdate', {
        'ResourceARN': Optional[str],
        'RoleARN': Optional[str],
    }
)


KinesisAnalyticsLambdaOutputUpdate = TypedDict(
    'KinesisAnalyticsLambdaOutputUpdate', {
        'ResourceARN': Optional[str],
        'RoleARN': Optional[str],
    }
)


KinesisAnalyticsOutputUpdate = TypedDict(
    'KinesisAnalyticsOutputUpdate', {
        'Id': str,
        'InAppStreamName': Optional[str],
        'KinesisStreamsOutputUpdate': Optional[KinesisAnalyticsKinesisStreamsOutputUpdate],
        'KinesisFirehoseOutputUpdate': Optional[KinesisAnalyticsKinesisFirehoseOutputUpdate],
        'LambdaOutputUpdate': Optional[KinesisAnalyticsLambdaOutputUpdate],
        'DestinationSchema': Optional[KinesisAnalyticsDestinationSchema],
    }
)


KinesisAnalyticsS3ReferenceDataSourceUpdate = TypedDict(
    'KinesisAnalyticsS3ReferenceDataSourceUpdate', {
        'BucketARN': Optional[str],
        'FileKey': Optional[str],
        'RoleARN': Optional[str],
    }
)


KinesisAnalyticsReferenceDataSourceUpdate = TypedDict(
    'KinesisAnalyticsReferenceDataSourceUpdate', {
        'Id': str,
        'InAppTableName': Optional[str],
        'S3ReferenceDataSourceUpdate': Optional[KinesisAnalyticsS3ReferenceDataSourceUpdate],
        'SourceSchema': Optional[KinesisAnalyticsSourceSchema],
    }
)


KinesisAnalyticsCloudWatchLoggingOptionUpdate = TypedDict(
    'KinesisAnalyticsCloudWatchLoggingOptionUpdate', {
        'Id': str,
        'LogStreamARN': Optional[str],
        'RoleARN': Optional[str],
    }
)


KinesisAnalyticsApplicationUpdate = TypedDict(
    'KinesisAnalyticsApplicationUpdate', {
        'InputUpdates': Optional[List[KinesisAnalyticsInputUpdate]],
        'ApplicationCode': Optional[str],
        'OutputUpdates': Optional[List[KinesisAnalyticsOutputUpdate]],
        'ReferenceDataSourceUpdates': Optional[List[KinesisAnalyticsReferenceDataSourceUpdate]],
        'CloudWatchLoggingOptionUpdates': Optional[List[KinesisAnalyticsCloudWatchLoggingOptionUpdate]],
    }
)


KinesisAnalyticsUpdateApplicationResponse = TypedDict(
    'KinesisAnalyticsUpdateApplicationResponse', {
    }
)


class KinesisAnalyticsV2(BaseClient):
    def add_application_cloud_watch_logging_option(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        CloudWatchLoggingOption: KinesisAnalyticsV2CloudWatchLoggingOption
    ) -> KinesisAnalyticsV2AddApplicationCloudWatchLoggingOptionResponse: ...

    def add_application_input(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        Input: KinesisAnalyticsV2Input
    ) -> KinesisAnalyticsV2AddApplicationInputResponse: ...

    def add_application_input_processing_configuration(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        InputId: str,
        InputProcessingConfiguration: KinesisAnalyticsV2InputProcessingConfiguration
    ) -> KinesisAnalyticsV2AddApplicationInputProcessingConfigurationResponse: ...

    def add_application_output(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        Output: KinesisAnalyticsV2Output
    ) -> KinesisAnalyticsV2AddApplicationOutputResponse: ...

    def add_application_reference_data_source(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        ReferenceDataSource: KinesisAnalyticsV2ReferenceDataSource
    ) -> KinesisAnalyticsV2AddApplicationReferenceDataSourceResponse: ...

    def create_application(self, *,
        ApplicationName: str,
        RuntimeEnvironment: str,
        ServiceExecutionRole: str,
        ApplicationDescription: str = ...,
        ApplicationConfiguration: KinesisAnalyticsV2ApplicationConfiguration = ...,
        CloudWatchLoggingOptions: List[KinesisAnalyticsV2CloudWatchLoggingOption] = ...,
        Tags: List[KinesisAnalyticsV2Tag] = ...
    ) -> KinesisAnalyticsV2CreateApplicationResponse: ...

    def create_application_snapshot(self, *,
        ApplicationName: str,
        SnapshotName: str
    ) -> KinesisAnalyticsV2CreateApplicationSnapshotResponse: ...

    def delete_application(self, *,
        ApplicationName: str,
        CreateTimestamp: datetime.datetime
    ) -> KinesisAnalyticsV2DeleteApplicationResponse: ...

    def delete_application_cloud_watch_logging_option(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        CloudWatchLoggingOptionId: str
    ) -> KinesisAnalyticsV2DeleteApplicationCloudWatchLoggingOptionResponse: ...

    def delete_application_input_processing_configuration(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        InputId: str
    ) -> KinesisAnalyticsV2DeleteApplicationInputProcessingConfigurationResponse: ...

    def delete_application_output(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        OutputId: str
    ) -> KinesisAnalyticsV2DeleteApplicationOutputResponse: ...

    def delete_application_reference_data_source(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        ReferenceId: str
    ) -> KinesisAnalyticsV2DeleteApplicationReferenceDataSourceResponse: ...

    def delete_application_snapshot(self, *,
        ApplicationName: str,
        SnapshotName: str,
        SnapshotCreationTimestamp: datetime.datetime
    ) -> KinesisAnalyticsV2DeleteApplicationSnapshotResponse: ...

    def describe_application(self, *,
        ApplicationName: str,
        IncludeAdditionalDetails: bool = ...
    ) -> KinesisAnalyticsV2DescribeApplicationResponse: ...

    def describe_application_snapshot(self, *,
        ApplicationName: str,
        SnapshotName: str
    ) -> KinesisAnalyticsV2DescribeApplicationSnapshotResponse: ...

    def discover_input_schema(self, *,
        ServiceExecutionRole: str,
        ResourceARN: str = ...,
        InputStartingPositionConfiguration: KinesisAnalyticsV2InputStartingPositionConfiguration = ...,
        S3Configuration: KinesisAnalyticsV2S3Configuration = ...,
        InputProcessingConfiguration: KinesisAnalyticsV2InputProcessingConfiguration = ...
    ) -> KinesisAnalyticsV2DiscoverInputSchemaResponse: ...

    def list_application_snapshots(self, *,
        ApplicationName: str,
        Limit: int = ...,
        NextToken: str = ...
    ) -> KinesisAnalyticsV2ListApplicationSnapshotsResponse: ...

    def list_applications(self, *,
        Limit: int = ...,
        NextToken: str = ...
    ) -> KinesisAnalyticsV2ListApplicationsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceARN: str
    ) -> KinesisAnalyticsV2ListTagsForResourceResponse: ...

    def start_application(self, *,
        ApplicationName: str,
        RunConfiguration: KinesisAnalyticsV2RunConfiguration
    ) -> KinesisAnalyticsV2StartApplicationResponse: ...

    def stop_application(self, *,
        ApplicationName: str
    ) -> KinesisAnalyticsV2StopApplicationResponse: ...

    def tag_resource(self, *,
        ResourceARN: str,
        Tags: List[KinesisAnalyticsV2Tag]
    ) -> KinesisAnalyticsV2TagResourceResponse: ...

    def untag_resource(self, *,
        ResourceARN: str,
        TagKeys: List[str]
    ) -> KinesisAnalyticsV2UntagResourceResponse: ...

    def update_application(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        ApplicationConfigurationUpdate: KinesisAnalyticsV2ApplicationConfigurationUpdate = ...,
        ServiceExecutionRoleUpdate: str = ...,
        RunConfigurationUpdate: KinesisAnalyticsV2RunConfigurationUpdate = ...,
        CloudWatchLoggingOptionUpdates: List[KinesisAnalyticsV2CloudWatchLoggingOptionUpdate] = ...
    ) -> KinesisAnalyticsV2UpdateApplicationResponse: ...


KinesisAnalyticsV2CloudWatchLoggingOption = TypedDict(
    'KinesisAnalyticsV2CloudWatchLoggingOption', {
        'LogStreamARN': str,
    }
)


KinesisAnalyticsV2CloudWatchLoggingOptionDescription = TypedDict(
    'KinesisAnalyticsV2CloudWatchLoggingOptionDescription', {
        'LogStreamARN': str,
        'Id': Optional[str],
        'RoleARN': Optional[str],
    }
)


KinesisAnalyticsV2AddApplicationCloudWatchLoggingOptionResponse = TypedDict(
    'KinesisAnalyticsV2AddApplicationCloudWatchLoggingOptionResponse', {
        'ResourceARN': Optional[str],
        'ApplicationVersionId': Optional[int],
        'CloudWatchLoggingOptionDescriptions': Optional[List[KinesisAnalyticsV2CloudWatchLoggingOptionDescription]],
    }
)


KinesisAnalyticsV2InputLambdaProcessor = TypedDict(
    'KinesisAnalyticsV2InputLambdaProcessor', {
        'ResourceARN': str,
    }
)


KinesisAnalyticsV2InputProcessingConfiguration = TypedDict(
    'KinesisAnalyticsV2InputProcessingConfiguration', {
        'InputLambdaProcessor': KinesisAnalyticsV2InputLambdaProcessor,
    }
)


KinesisAnalyticsV2KinesisStreamsInput = TypedDict(
    'KinesisAnalyticsV2KinesisStreamsInput', {
        'ResourceARN': str,
    }
)


KinesisAnalyticsV2KinesisFirehoseInput = TypedDict(
    'KinesisAnalyticsV2KinesisFirehoseInput', {
        'ResourceARN': str,
    }
)


KinesisAnalyticsV2InputParallelism = TypedDict(
    'KinesisAnalyticsV2InputParallelism', {
        'InputParallelismCount': Optional[int],
    }
)


KinesisAnalyticsV2JSONMappingParameters = TypedDict(
    'KinesisAnalyticsV2JSONMappingParameters', {
        'RecordRowPath': str,
    }
)


KinesisAnalyticsV2CSVMappingParameters = TypedDict(
    'KinesisAnalyticsV2CSVMappingParameters', {
        'RecordRowDelimiter': str,
        'RecordColumnDelimiter': str,
    }
)


KinesisAnalyticsV2MappingParameters = TypedDict(
    'KinesisAnalyticsV2MappingParameters', {
        'JSONMappingParameters': Optional[KinesisAnalyticsV2JSONMappingParameters],
        'CSVMappingParameters': Optional[KinesisAnalyticsV2CSVMappingParameters],
    }
)


KinesisAnalyticsV2RecordFormat = TypedDict(
    'KinesisAnalyticsV2RecordFormat', {
        'RecordFormatType': str,
        'MappingParameters': Optional[KinesisAnalyticsV2MappingParameters],
    }
)


KinesisAnalyticsV2RecordColumn = TypedDict(
    'KinesisAnalyticsV2RecordColumn', {
        'RecordColumnName': str,
        'RecordColumnSqlType': str,
        'RecordColumnMapping': Optional[str],
    }
)


KinesisAnalyticsV2SourceSchema = TypedDict(
    'KinesisAnalyticsV2SourceSchema', {
        'RecordFormat': KinesisAnalyticsV2RecordFormat,
        'RecordColumns': List[KinesisAnalyticsV2RecordColumn],
        'RecordEncoding': Optional[str],
    }
)


KinesisAnalyticsV2Input = TypedDict(
    'KinesisAnalyticsV2Input', {
        'InAppStreamName': str,
        'SourceSchema': KinesisAnalyticsV2SourceSchema,
        'InputProcessingConfiguration': Optional[KinesisAnalyticsV2InputProcessingConfiguration],
        'KinesisStreamsInput': Optional[KinesisAnalyticsV2KinesisStreamsInput],
        'KinesisFirehoseInput': Optional[KinesisAnalyticsV2KinesisFirehoseInput],
        'InputParallelism': Optional[KinesisAnalyticsV2InputParallelism],
    }
)


KinesisAnalyticsV2InputLambdaProcessorDescription = TypedDict(
    'KinesisAnalyticsV2InputLambdaProcessorDescription', {
        'ResourceARN': str,
        'RoleARN': Optional[str],
    }
)


KinesisAnalyticsV2InputProcessingConfigurationDescription = TypedDict(
    'KinesisAnalyticsV2InputProcessingConfigurationDescription', {
        'InputLambdaProcessorDescription': Optional[KinesisAnalyticsV2InputLambdaProcessorDescription],
    }
)


KinesisAnalyticsV2KinesisStreamsInputDescription = TypedDict(
    'KinesisAnalyticsV2KinesisStreamsInputDescription', {
        'ResourceARN': str,
        'RoleARN': Optional[str],
    }
)


KinesisAnalyticsV2KinesisFirehoseInputDescription = TypedDict(
    'KinesisAnalyticsV2KinesisFirehoseInputDescription', {
        'ResourceARN': str,
        'RoleARN': Optional[str],
    }
)


KinesisAnalyticsV2InputStartingPositionConfiguration = TypedDict(
    'KinesisAnalyticsV2InputStartingPositionConfiguration', {
        'InputStartingPosition': Optional[str],
    }
)


KinesisAnalyticsV2InputDescription = TypedDict(
    'KinesisAnalyticsV2InputDescription', {
        'Id': Optional[str],
        'InAppStreamName': Optional[str],
        'InAppStreamNames': Optional[List[str]],
        'InputProcessingConfigurationDescription': Optional[KinesisAnalyticsV2InputProcessingConfigurationDescription],
        'KinesisStreamsInputDescription': Optional[KinesisAnalyticsV2KinesisStreamsInputDescription],
        'KinesisFirehoseInputDescription': Optional[KinesisAnalyticsV2KinesisFirehoseInputDescription],
        'SourceSchema': Optional[KinesisAnalyticsV2SourceSchema],
        'InputParallelism': Optional[KinesisAnalyticsV2InputParallelism],
        'InputStartingPositionConfiguration': Optional[KinesisAnalyticsV2InputStartingPositionConfiguration],
    }
)


KinesisAnalyticsV2AddApplicationInputResponse = TypedDict(
    'KinesisAnalyticsV2AddApplicationInputResponse', {
        'ResourceARN': Optional[str],
        'ApplicationVersionId': Optional[int],
        'InputDescriptions': Optional[List[KinesisAnalyticsV2InputDescription]],
    }
)


KinesisAnalyticsV2AddApplicationInputProcessingConfigurationResponse = TypedDict(
    'KinesisAnalyticsV2AddApplicationInputProcessingConfigurationResponse', {
        'ResourceARN': Optional[str],
        'ApplicationVersionId': Optional[int],
        'Id': Optional[str],
        'InputProcessingConfigurationDescription': Optional[KinesisAnalyticsV2InputProcessingConfigurationDescription],
    }
)


KinesisAnalyticsV2KinesisStreamsOutput = TypedDict(
    'KinesisAnalyticsV2KinesisStreamsOutput', {
        'ResourceARN': str,
    }
)


KinesisAnalyticsV2KinesisFirehoseOutput = TypedDict(
    'KinesisAnalyticsV2KinesisFirehoseOutput', {
        'ResourceARN': str,
    }
)


KinesisAnalyticsV2LambdaOutput = TypedDict(
    'KinesisAnalyticsV2LambdaOutput', {
        'ResourceARN': str,
    }
)


KinesisAnalyticsV2DestinationSchema = TypedDict(
    'KinesisAnalyticsV2DestinationSchema', {
        'RecordFormatType': str,
    }
)


KinesisAnalyticsV2Output = TypedDict(
    'KinesisAnalyticsV2Output', {
        'InAppStreamName': str,
        'DestinationSchema': KinesisAnalyticsV2DestinationSchema,
        'KinesisStreamsOutput': Optional[KinesisAnalyticsV2KinesisStreamsOutput],
        'KinesisFirehoseOutput': Optional[KinesisAnalyticsV2KinesisFirehoseOutput],
        'LambdaOutput': Optional[KinesisAnalyticsV2LambdaOutput],
    }
)


KinesisAnalyticsV2KinesisStreamsOutputDescription = TypedDict(
    'KinesisAnalyticsV2KinesisStreamsOutputDescription', {
        'ResourceARN': str,
        'RoleARN': Optional[str],
    }
)


KinesisAnalyticsV2KinesisFirehoseOutputDescription = TypedDict(
    'KinesisAnalyticsV2KinesisFirehoseOutputDescription', {
        'ResourceARN': str,
        'RoleARN': Optional[str],
    }
)


KinesisAnalyticsV2LambdaOutputDescription = TypedDict(
    'KinesisAnalyticsV2LambdaOutputDescription', {
        'ResourceARN': str,
        'RoleARN': Optional[str],
    }
)


KinesisAnalyticsV2OutputDescription = TypedDict(
    'KinesisAnalyticsV2OutputDescription', {
        'Id': Optional[str],
        'InAppStreamName': Optional[str],
        'KinesisStreamsOutputDescription': Optional[KinesisAnalyticsV2KinesisStreamsOutputDescription],
        'KinesisFirehoseOutputDescription': Optional[KinesisAnalyticsV2KinesisFirehoseOutputDescription],
        'LambdaOutputDescription': Optional[KinesisAnalyticsV2LambdaOutputDescription],
        'DestinationSchema': Optional[KinesisAnalyticsV2DestinationSchema],
    }
)


KinesisAnalyticsV2AddApplicationOutputResponse = TypedDict(
    'KinesisAnalyticsV2AddApplicationOutputResponse', {
        'ResourceARN': Optional[str],
        'ApplicationVersionId': Optional[int],
        'OutputDescriptions': Optional[List[KinesisAnalyticsV2OutputDescription]],
    }
)


KinesisAnalyticsV2S3ReferenceDataSource = TypedDict(
    'KinesisAnalyticsV2S3ReferenceDataSource', {
        'BucketARN': Optional[str],
        'FileKey': Optional[str],
    }
)


KinesisAnalyticsV2ReferenceDataSource = TypedDict(
    'KinesisAnalyticsV2ReferenceDataSource', {
        'InAppTableName': str,
        'SourceSchema': KinesisAnalyticsV2SourceSchema,
        'S3ReferenceDataSource': Optional[KinesisAnalyticsV2S3ReferenceDataSource],
    }
)


KinesisAnalyticsV2S3ReferenceDataSourceDescription = TypedDict(
    'KinesisAnalyticsV2S3ReferenceDataSourceDescription', {
        'BucketARN': str,
        'FileKey': str,
        'RoleARN': Optional[str],
    }
)


KinesisAnalyticsV2ReferenceDataSourceDescription = TypedDict(
    'KinesisAnalyticsV2ReferenceDataSourceDescription', {
        'Id': str,
        'InAppTableName': str,
        'S3ReferenceDataSourceDescription': KinesisAnalyticsV2S3ReferenceDataSourceDescription,
        'SourceSchema': Optional[KinesisAnalyticsV2SourceSchema],
    }
)


KinesisAnalyticsV2AddApplicationReferenceDataSourceResponse = TypedDict(
    'KinesisAnalyticsV2AddApplicationReferenceDataSourceResponse', {
        'ResourceARN': Optional[str],
        'ApplicationVersionId': Optional[int],
        'ReferenceDataSourceDescriptions': Optional[List[KinesisAnalyticsV2ReferenceDataSourceDescription]],
    }
)


KinesisAnalyticsV2SqlApplicationConfiguration = TypedDict(
    'KinesisAnalyticsV2SqlApplicationConfiguration', {
        'Inputs': Optional[List[KinesisAnalyticsV2Input]],
        'Outputs': Optional[List[KinesisAnalyticsV2Output]],
        'ReferenceDataSources': Optional[List[KinesisAnalyticsV2ReferenceDataSource]],
    }
)


KinesisAnalyticsV2CheckpointConfiguration = TypedDict(
    'KinesisAnalyticsV2CheckpointConfiguration', {
        'ConfigurationType': str,
        'BooleanObject': Optional[bool],
        'CheckpointInterval': Optional[int],
        'MinPauseBetweenCheckpoints': Optional[int],
    }
)


KinesisAnalyticsV2MonitoringConfiguration = TypedDict(
    'KinesisAnalyticsV2MonitoringConfiguration', {
        'ConfigurationType': str,
        'MetricsLevel': Optional[str],
        'LogLevel': Optional[str],
    }
)


KinesisAnalyticsV2ParallelismConfiguration = TypedDict(
    'KinesisAnalyticsV2ParallelismConfiguration', {
        'ConfigurationType': str,
        'Parallelism': Optional[int],
        'ParallelismPerKPU': Optional[int],
        'BooleanObject': Optional[bool],
    }
)


KinesisAnalyticsV2FlinkApplicationConfiguration = TypedDict(
    'KinesisAnalyticsV2FlinkApplicationConfiguration', {
        'CheckpointConfiguration': Optional[KinesisAnalyticsV2CheckpointConfiguration],
        'MonitoringConfiguration': Optional[KinesisAnalyticsV2MonitoringConfiguration],
        'ParallelismConfiguration': Optional[KinesisAnalyticsV2ParallelismConfiguration],
    }
)


KinesisAnalyticsV2PropertyGroup = TypedDict(
    'KinesisAnalyticsV2PropertyGroup', {
        'Id': str,
        'PropertyMap': Dict[str, str],
    }
)


KinesisAnalyticsV2EnvironmentProperties = TypedDict(
    'KinesisAnalyticsV2EnvironmentProperties', {
        'PropertyGroups': List[KinesisAnalyticsV2PropertyGroup],
    }
)


KinesisAnalyticsV2S3ContentLocation = TypedDict(
    'KinesisAnalyticsV2S3ContentLocation', {
        'BucketARN': str,
        'FileKey': str,
        'ObjectVersion': Optional[str],
    }
)


KinesisAnalyticsV2CodeContent = TypedDict(
    'KinesisAnalyticsV2CodeContent', {
        'TextContent': Optional[str],
        'ZipFileContent': Optional[bytes],
        'S3ContentLocation': Optional[KinesisAnalyticsV2S3ContentLocation],
    }
)


KinesisAnalyticsV2ApplicationCodeConfiguration = TypedDict(
    'KinesisAnalyticsV2ApplicationCodeConfiguration', {
        'CodeContentType': str,
        'CodeContent': Optional[KinesisAnalyticsV2CodeContent],
    }
)


KinesisAnalyticsV2ApplicationSnapshotConfiguration = TypedDict(
    'KinesisAnalyticsV2ApplicationSnapshotConfiguration', {
        'BooleanObject': bool,
    }
)


KinesisAnalyticsV2ApplicationConfiguration = TypedDict(
    'KinesisAnalyticsV2ApplicationConfiguration', {
        'ApplicationCodeConfiguration': KinesisAnalyticsV2ApplicationCodeConfiguration,
        'SqlApplicationConfiguration': Optional[KinesisAnalyticsV2SqlApplicationConfiguration],
        'FlinkApplicationConfiguration': Optional[KinesisAnalyticsV2FlinkApplicationConfiguration],
        'EnvironmentProperties': Optional[KinesisAnalyticsV2EnvironmentProperties],
        'ApplicationSnapshotConfiguration': Optional[KinesisAnalyticsV2ApplicationSnapshotConfiguration],
    }
)


KinesisAnalyticsV2Tag = TypedDict(
    'KinesisAnalyticsV2Tag', {
        'TagKey': str,
        'TagValue': Optional[str],
    }
)


KinesisAnalyticsV2SqlApplicationConfigurationDescription = TypedDict(
    'KinesisAnalyticsV2SqlApplicationConfigurationDescription', {
        'InputDescriptions': Optional[List[KinesisAnalyticsV2InputDescription]],
        'OutputDescriptions': Optional[List[KinesisAnalyticsV2OutputDescription]],
        'ReferenceDataSourceDescriptions': Optional[List[KinesisAnalyticsV2ReferenceDataSourceDescription]],
    }
)


KinesisAnalyticsV2S3ApplicationCodeLocationDescription = TypedDict(
    'KinesisAnalyticsV2S3ApplicationCodeLocationDescription', {
        'BucketARN': str,
        'FileKey': str,
        'ObjectVersion': Optional[str],
    }
)


KinesisAnalyticsV2CodeContentDescription = TypedDict(
    'KinesisAnalyticsV2CodeContentDescription', {
        'TextContent': Optional[str],
        'CodeMD5': Optional[str],
        'CodeSize': Optional[int],
        'S3ApplicationCodeLocationDescription': Optional[KinesisAnalyticsV2S3ApplicationCodeLocationDescription],
    }
)


KinesisAnalyticsV2ApplicationCodeConfigurationDescription = TypedDict(
    'KinesisAnalyticsV2ApplicationCodeConfigurationDescription', {
        'CodeContentType': str,
        'CodeContentDescription': Optional[KinesisAnalyticsV2CodeContentDescription],
    }
)


KinesisAnalyticsV2ApplicationRestoreConfiguration = TypedDict(
    'KinesisAnalyticsV2ApplicationRestoreConfiguration', {
        'ApplicationRestoreType': str,
        'SnapshotName': Optional[str],
    }
)


KinesisAnalyticsV2RunConfigurationDescription = TypedDict(
    'KinesisAnalyticsV2RunConfigurationDescription', {
        'ApplicationRestoreConfiguration': Optional[KinesisAnalyticsV2ApplicationRestoreConfiguration],
    }
)


KinesisAnalyticsV2CheckpointConfigurationDescription = TypedDict(
    'KinesisAnalyticsV2CheckpointConfigurationDescription', {
        'ConfigurationType': Optional[str],
        'BooleanObject': Optional[bool],
        'CheckpointInterval': Optional[int],
        'MinPauseBetweenCheckpoints': Optional[int],
    }
)


KinesisAnalyticsV2MonitoringConfigurationDescription = TypedDict(
    'KinesisAnalyticsV2MonitoringConfigurationDescription', {
        'ConfigurationType': Optional[str],
        'MetricsLevel': Optional[str],
        'LogLevel': Optional[str],
    }
)


KinesisAnalyticsV2ParallelismConfigurationDescription = TypedDict(
    'KinesisAnalyticsV2ParallelismConfigurationDescription', {
        'ConfigurationType': Optional[str],
        'Parallelism': Optional[int],
        'ParallelismPerKPU': Optional[int],
        'Parallelism': Optional[int],
        'BooleanObject': Optional[bool],
    }
)


KinesisAnalyticsV2FlinkApplicationConfigurationDescription = TypedDict(
    'KinesisAnalyticsV2FlinkApplicationConfigurationDescription', {
        'CheckpointConfigurationDescription': Optional[KinesisAnalyticsV2CheckpointConfigurationDescription],
        'MonitoringConfigurationDescription': Optional[KinesisAnalyticsV2MonitoringConfigurationDescription],
        'ParallelismConfigurationDescription': Optional[KinesisAnalyticsV2ParallelismConfigurationDescription],
        'JobPlanDescription': Optional[str],
    }
)


KinesisAnalyticsV2EnvironmentPropertyDescriptions = TypedDict(
    'KinesisAnalyticsV2EnvironmentPropertyDescriptions', {
        'PropertyGroups': Optional[List[KinesisAnalyticsV2PropertyGroup]],
    }
)


KinesisAnalyticsV2ApplicationSnapshotConfigurationDescription = TypedDict(
    'KinesisAnalyticsV2ApplicationSnapshotConfigurationDescription', {
        'BooleanObject': bool,
    }
)


KinesisAnalyticsV2ApplicationConfigurationDescription = TypedDict(
    'KinesisAnalyticsV2ApplicationConfigurationDescription', {
        'SqlApplicationConfigurationDescription': Optional[KinesisAnalyticsV2SqlApplicationConfigurationDescription],
        'ApplicationCodeConfigurationDescription': Optional[KinesisAnalyticsV2ApplicationCodeConfigurationDescription],
        'RunConfigurationDescription': Optional[KinesisAnalyticsV2RunConfigurationDescription],
        'FlinkApplicationConfigurationDescription': Optional[KinesisAnalyticsV2FlinkApplicationConfigurationDescription],
        'EnvironmentPropertyDescriptions': Optional[KinesisAnalyticsV2EnvironmentPropertyDescriptions],
        'ApplicationSnapshotConfigurationDescription': Optional[KinesisAnalyticsV2ApplicationSnapshotConfigurationDescription],
    }
)


KinesisAnalyticsV2ApplicationDetail = TypedDict(
    'KinesisAnalyticsV2ApplicationDetail', {
        'ResourceARN': str,
        'ApplicationName': str,
        'RuntimeEnvironment': str,
        'ApplicationStatus': str,
        'ApplicationVersionId': int,
        'ApplicationDescription': Optional[str],
        'RoleARN': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'ApplicationConfigurationDescription': Optional[KinesisAnalyticsV2ApplicationConfigurationDescription],
        'CloudWatchLoggingOptionDescriptions': Optional[List[KinesisAnalyticsV2CloudWatchLoggingOptionDescription]],
    }
)


KinesisAnalyticsV2CreateApplicationResponse = TypedDict(
    'KinesisAnalyticsV2CreateApplicationResponse', {
        'ApplicationDetail': KinesisAnalyticsV2ApplicationDetail,
    }
)


KinesisAnalyticsV2CreateApplicationSnapshotResponse = TypedDict(
    'KinesisAnalyticsV2CreateApplicationSnapshotResponse', {
    }
)


KinesisAnalyticsV2DeleteApplicationResponse = TypedDict(
    'KinesisAnalyticsV2DeleteApplicationResponse', {
    }
)


KinesisAnalyticsV2DeleteApplicationCloudWatchLoggingOptionResponse = TypedDict(
    'KinesisAnalyticsV2DeleteApplicationCloudWatchLoggingOptionResponse', {
        'ResourceARN': Optional[str],
        'ApplicationVersionId': Optional[int],
        'CloudWatchLoggingOptionDescriptions': Optional[List[KinesisAnalyticsV2CloudWatchLoggingOptionDescription]],
    }
)


KinesisAnalyticsV2DeleteApplicationInputProcessingConfigurationResponse = TypedDict(
    'KinesisAnalyticsV2DeleteApplicationInputProcessingConfigurationResponse', {
        'ResourceARN': Optional[str],
        'ApplicationVersionId': Optional[int],
    }
)


KinesisAnalyticsV2DeleteApplicationOutputResponse = TypedDict(
    'KinesisAnalyticsV2DeleteApplicationOutputResponse', {
        'ResourceARN': Optional[str],
        'ApplicationVersionId': Optional[int],
    }
)


KinesisAnalyticsV2DeleteApplicationReferenceDataSourceResponse = TypedDict(
    'KinesisAnalyticsV2DeleteApplicationReferenceDataSourceResponse', {
        'ResourceARN': Optional[str],
        'ApplicationVersionId': Optional[int],
    }
)


KinesisAnalyticsV2DeleteApplicationSnapshotResponse = TypedDict(
    'KinesisAnalyticsV2DeleteApplicationSnapshotResponse', {
    }
)


KinesisAnalyticsV2DescribeApplicationResponse = TypedDict(
    'KinesisAnalyticsV2DescribeApplicationResponse', {
        'ApplicationDetail': KinesisAnalyticsV2ApplicationDetail,
    }
)


KinesisAnalyticsV2SnapshotDetails = TypedDict(
    'KinesisAnalyticsV2SnapshotDetails', {
        'SnapshotName': str,
        'SnapshotStatus': str,
        'ApplicationVersionId': int,
        'Timestamp': Optional[datetime.datetime],
    }
)


KinesisAnalyticsV2DescribeApplicationSnapshotResponse = TypedDict(
    'KinesisAnalyticsV2DescribeApplicationSnapshotResponse', {
        'SnapshotDetails': KinesisAnalyticsV2SnapshotDetails,
    }
)


KinesisAnalyticsV2S3Configuration = TypedDict(
    'KinesisAnalyticsV2S3Configuration', {
        'BucketARN': str,
        'FileKey': str,
    }
)


KinesisAnalyticsV2DiscoverInputSchemaResponse = TypedDict(
    'KinesisAnalyticsV2DiscoverInputSchemaResponse', {
        'SourceSchema': Optional[KinesisAnalyticsV2SourceSchema],
        'ParsedInputRecords': Optional[List[List[str]]],
        'ProcessedInputRecords': Optional[List[str]],
        'RawInputRecords': Optional[List[str]],
    }
)


KinesisAnalyticsV2ListApplicationSnapshotsResponse = TypedDict(
    'KinesisAnalyticsV2ListApplicationSnapshotsResponse', {
        'SnapshotSummaries': Optional[List[KinesisAnalyticsV2SnapshotDetails]],
        'NextToken': Optional[str],
    }
)


KinesisAnalyticsV2ApplicationSummary = TypedDict(
    'KinesisAnalyticsV2ApplicationSummary', {
        'ApplicationName': str,
        'ResourceARN': str,
        'ApplicationStatus': str,
        'ApplicationVersionId': int,
        'RuntimeEnvironment': str,
    }
)


KinesisAnalyticsV2ListApplicationsResponse = TypedDict(
    'KinesisAnalyticsV2ListApplicationsResponse', {
        'ApplicationSummaries': List[KinesisAnalyticsV2ApplicationSummary],
        'ApplicationName': Optional[str],
    }
)


KinesisAnalyticsV2ListTagsForResourceResponse = TypedDict(
    'KinesisAnalyticsV2ListTagsForResourceResponse', {
        'Tags': Optional[List[KinesisAnalyticsV2Tag]],
    }
)


KinesisAnalyticsV2SqlRunConfiguration = TypedDict(
    'KinesisAnalyticsV2SqlRunConfiguration', {
        'Id': str,
        'InputStartingPositionConfiguration': KinesisAnalyticsV2InputStartingPositionConfiguration,
    }
)


KinesisAnalyticsV2RunConfiguration = TypedDict(
    'KinesisAnalyticsV2RunConfiguration', {
        'SqlRunConfigurations': Optional[List[KinesisAnalyticsV2SqlRunConfiguration]],
        'ApplicationRestoreConfiguration': Optional[KinesisAnalyticsV2ApplicationRestoreConfiguration],
    }
)


KinesisAnalyticsV2StartApplicationResponse = TypedDict(
    'KinesisAnalyticsV2StartApplicationResponse', {
    }
)


KinesisAnalyticsV2StopApplicationResponse = TypedDict(
    'KinesisAnalyticsV2StopApplicationResponse', {
    }
)


KinesisAnalyticsV2TagResourceResponse = TypedDict(
    'KinesisAnalyticsV2TagResourceResponse', {
    }
)


KinesisAnalyticsV2UntagResourceResponse = TypedDict(
    'KinesisAnalyticsV2UntagResourceResponse', {
    }
)


KinesisAnalyticsV2InputLambdaProcessorUpdate = TypedDict(
    'KinesisAnalyticsV2InputLambdaProcessorUpdate', {
        'ResourceARN': str,
    }
)


KinesisAnalyticsV2InputProcessingConfigurationUpdate = TypedDict(
    'KinesisAnalyticsV2InputProcessingConfigurationUpdate', {
        'InputLambdaProcessorUpdate': KinesisAnalyticsV2InputLambdaProcessorUpdate,
    }
)


KinesisAnalyticsV2KinesisStreamsInputUpdate = TypedDict(
    'KinesisAnalyticsV2KinesisStreamsInputUpdate', {
        'ResourceARN': str,
    }
)


KinesisAnalyticsV2KinesisFirehoseInputUpdate = TypedDict(
    'KinesisAnalyticsV2KinesisFirehoseInputUpdate', {
        'ResourceARN': str,
    }
)


KinesisAnalyticsV2InputSchemaUpdate = TypedDict(
    'KinesisAnalyticsV2InputSchemaUpdate', {
        'RecordFormat': Optional[KinesisAnalyticsV2RecordFormat],
        'RecordEncoding': Optional[str],
        'RecordColumns': Optional[List[KinesisAnalyticsV2RecordColumn]],
    }
)


KinesisAnalyticsV2InputParallelismUpdate = TypedDict(
    'KinesisAnalyticsV2InputParallelismUpdate', {
        'InputParallelismCount': int,
    }
)


KinesisAnalyticsV2InputUpdate = TypedDict(
    'KinesisAnalyticsV2InputUpdate', {
        'Id': str,
        'InAppStreamName': Optional[str],
        'InputProcessingConfigurationUpdate': Optional[KinesisAnalyticsV2InputProcessingConfigurationUpdate],
        'KinesisStreamsInputUpdate': Optional[KinesisAnalyticsV2KinesisStreamsInputUpdate],
        'KinesisFirehoseInputUpdate': Optional[KinesisAnalyticsV2KinesisFirehoseInputUpdate],
        'InputSchemaUpdate': Optional[KinesisAnalyticsV2InputSchemaUpdate],
        'InputParallelismUpdate': Optional[KinesisAnalyticsV2InputParallelismUpdate],
    }
)


KinesisAnalyticsV2KinesisStreamsOutputUpdate = TypedDict(
    'KinesisAnalyticsV2KinesisStreamsOutputUpdate', {
        'ResourceARN': str,
    }
)


KinesisAnalyticsV2KinesisFirehoseOutputUpdate = TypedDict(
    'KinesisAnalyticsV2KinesisFirehoseOutputUpdate', {
        'ResourceARN': str,
    }
)


KinesisAnalyticsV2LambdaOutputUpdate = TypedDict(
    'KinesisAnalyticsV2LambdaOutputUpdate', {
        'ResourceARN': str,
    }
)


KinesisAnalyticsV2OutputUpdate = TypedDict(
    'KinesisAnalyticsV2OutputUpdate', {
        'Id': str,
        'InAppStreamName': Optional[str],
        'KinesisStreamsOutputUpdate': Optional[KinesisAnalyticsV2KinesisStreamsOutputUpdate],
        'KinesisFirehoseOutputUpdate': Optional[KinesisAnalyticsV2KinesisFirehoseOutputUpdate],
        'LambdaOutputUpdate': Optional[KinesisAnalyticsV2LambdaOutputUpdate],
        'DestinationSchema': Optional[KinesisAnalyticsV2DestinationSchema],
    }
)


KinesisAnalyticsV2S3ReferenceDataSourceUpdate = TypedDict(
    'KinesisAnalyticsV2S3ReferenceDataSourceUpdate', {
        'BucketARN': Optional[str],
        'FileKey': Optional[str],
    }
)


KinesisAnalyticsV2ReferenceDataSourceUpdate = TypedDict(
    'KinesisAnalyticsV2ReferenceDataSourceUpdate', {
        'Id': str,
        'InAppTableName': Optional[str],
        'S3ReferenceDataSourceUpdate': Optional[KinesisAnalyticsV2S3ReferenceDataSourceUpdate],
        'SourceSchema': Optional[KinesisAnalyticsV2SourceSchema],
    }
)


KinesisAnalyticsV2SqlApplicationConfigurationUpdate = TypedDict(
    'KinesisAnalyticsV2SqlApplicationConfigurationUpdate', {
        'InputUpdates': Optional[List[KinesisAnalyticsV2InputUpdate]],
        'OutputUpdates': Optional[List[KinesisAnalyticsV2OutputUpdate]],
        'ReferenceDataSourceUpdates': Optional[List[KinesisAnalyticsV2ReferenceDataSourceUpdate]],
    }
)


KinesisAnalyticsV2S3ContentLocationUpdate = TypedDict(
    'KinesisAnalyticsV2S3ContentLocationUpdate', {
        'BucketARN': Optional[str],
        'FileKey': Optional[str],
        'ObjectVersion': Optional[str],
    }
)


KinesisAnalyticsV2CodeContentUpdate = TypedDict(
    'KinesisAnalyticsV2CodeContentUpdate', {
        'TextContent': Optional[str],
        'ZipFileContent': Optional[bytes],
        'S3ContentLocationUpdate': Optional[KinesisAnalyticsV2S3ContentLocationUpdate],
    }
)


KinesisAnalyticsV2ApplicationCodeConfigurationUpdate = TypedDict(
    'KinesisAnalyticsV2ApplicationCodeConfigurationUpdate', {
        'CodeContentType': Optional[str],
        'CodeContentUpdate': Optional[KinesisAnalyticsV2CodeContentUpdate],
    }
)


KinesisAnalyticsV2CheckpointConfigurationUpdate = TypedDict(
    'KinesisAnalyticsV2CheckpointConfigurationUpdate', {
        'ConfigurationType': Optional[str],
        'BooleanObject': Optional[bool],
        'CheckpointInterval': Optional[int],
        'MinPauseBetweenCheckpoints': Optional[int],
    }
)


KinesisAnalyticsV2MonitoringConfigurationUpdate = TypedDict(
    'KinesisAnalyticsV2MonitoringConfigurationUpdate', {
        'ConfigurationType': Optional[str],
        'MetricsLevel': Optional[str],
        'LogLevel': Optional[str],
    }
)


KinesisAnalyticsV2ParallelismConfigurationUpdate = TypedDict(
    'KinesisAnalyticsV2ParallelismConfigurationUpdate', {
        'ConfigurationType': Optional[str],
        'Parallelism': Optional[int],
        'ParallelismPerKPU': Optional[int],
        'BooleanObject': Optional[bool],
    }
)


KinesisAnalyticsV2FlinkApplicationConfigurationUpdate = TypedDict(
    'KinesisAnalyticsV2FlinkApplicationConfigurationUpdate', {
        'CheckpointConfigurationUpdate': Optional[KinesisAnalyticsV2CheckpointConfigurationUpdate],
        'MonitoringConfigurationUpdate': Optional[KinesisAnalyticsV2MonitoringConfigurationUpdate],
        'ParallelismConfigurationUpdate': Optional[KinesisAnalyticsV2ParallelismConfigurationUpdate],
    }
)


KinesisAnalyticsV2EnvironmentPropertyUpdates = TypedDict(
    'KinesisAnalyticsV2EnvironmentPropertyUpdates', {
        'PropertyGroups': List[KinesisAnalyticsV2PropertyGroup],
    }
)


KinesisAnalyticsV2ApplicationSnapshotConfigurationUpdate = TypedDict(
    'KinesisAnalyticsV2ApplicationSnapshotConfigurationUpdate', {
        'BooleanObject': bool,
    }
)


KinesisAnalyticsV2ApplicationConfigurationUpdate = TypedDict(
    'KinesisAnalyticsV2ApplicationConfigurationUpdate', {
        'SqlApplicationConfigurationUpdate': Optional[KinesisAnalyticsV2SqlApplicationConfigurationUpdate],
        'ApplicationCodeConfigurationUpdate': Optional[KinesisAnalyticsV2ApplicationCodeConfigurationUpdate],
        'FlinkApplicationConfigurationUpdate': Optional[KinesisAnalyticsV2FlinkApplicationConfigurationUpdate],
        'EnvironmentPropertyUpdates': Optional[KinesisAnalyticsV2EnvironmentPropertyUpdates],
        'ApplicationSnapshotConfigurationUpdate': Optional[KinesisAnalyticsV2ApplicationSnapshotConfigurationUpdate],
    }
)


KinesisAnalyticsV2RunConfigurationUpdate = TypedDict(
    'KinesisAnalyticsV2RunConfigurationUpdate', {
        'ApplicationRestoreConfiguration': Optional[KinesisAnalyticsV2ApplicationRestoreConfiguration],
    }
)


KinesisAnalyticsV2CloudWatchLoggingOptionUpdate = TypedDict(
    'KinesisAnalyticsV2CloudWatchLoggingOptionUpdate', {
        'Id': str,
        'LogStreamARN': Optional[str],
    }
)


KinesisAnalyticsV2UpdateApplicationResponse = TypedDict(
    'KinesisAnalyticsV2UpdateApplicationResponse', {
        'ApplicationDetail': KinesisAnalyticsV2ApplicationDetail,
    }
)


class KinesisVideo(BaseClient):
    def create_stream(self, *,
        StreamName: str,
        DeviceName: str = ...,
        MediaType: str = ...,
        KmsKeyId: str = ...,
        DataRetentionInHours: int = ...,
        Tags: Dict[str, str] = ...
    ) -> KinesisVideoCreateStreamOutput: ...

    def delete_stream(self, *,
        StreamARN: str,
        CurrentVersion: str = ...
    ) -> KinesisVideoDeleteStreamOutput: ...

    def describe_stream(self, *,
        StreamName: str = ...,
        StreamARN: str = ...
    ) -> KinesisVideoDescribeStreamOutput: ...

    def get_data_endpoint(self, *,
        APIName: str,
        StreamName: str = ...,
        StreamARN: str = ...
    ) -> KinesisVideoGetDataEndpointOutput: ...

    def list_streams(self, *,
        MaxResults: int = ...,
        NextToken: str = ...,
        StreamNameCondition: KinesisVideoStreamNameCondition = ...
    ) -> KinesisVideoListStreamsOutput: ...

    def list_tags_for_stream(self, *,
        NextToken: str = ...,
        StreamARN: str = ...,
        StreamName: str = ...
    ) -> KinesisVideoListTagsForStreamOutput: ...

    def tag_stream(self, *,
        Tags: Dict[str, str],
        StreamARN: str = ...,
        StreamName: str = ...
    ) -> KinesisVideoTagStreamOutput: ...

    def untag_stream(self, *,
        TagKeyList: List[str],
        StreamARN: str = ...,
        StreamName: str = ...
    ) -> KinesisVideoUntagStreamOutput: ...

    def update_data_retention(self, *,
        CurrentVersion: str,
        Operation: str,
        DataRetentionChangeInHours: int,
        StreamName: str = ...,
        StreamARN: str = ...
    ) -> KinesisVideoUpdateDataRetentionOutput: ...

    def update_stream(self, *,
        CurrentVersion: str,
        StreamName: str = ...,
        StreamARN: str = ...,
        DeviceName: str = ...,
        MediaType: str = ...
    ) -> KinesisVideoUpdateStreamOutput: ...


KinesisVideoCreateStreamOutput = TypedDict(
    'KinesisVideoCreateStreamOutput', {
        'ResourceARN': Optional[str],
    }
)


KinesisVideoDeleteStreamOutput = TypedDict(
    'KinesisVideoDeleteStreamOutput', {
    }
)


KinesisVideoStreamInfo = TypedDict(
    'KinesisVideoStreamInfo', {
        'DeviceName': Optional[str],
        'StreamName': Optional[str],
        'ResourceARN': Optional[str],
        'MediaType': Optional[str],
        'KmsKeyId': Optional[str],
        'Version': Optional[str],
        'Status': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'DataRetentionInHours': Optional[int],
    }
)


KinesisVideoDescribeStreamOutput = TypedDict(
    'KinesisVideoDescribeStreamOutput', {
        'StreamInfo': Optional[KinesisVideoStreamInfo],
    }
)


KinesisVideoGetDataEndpointOutput = TypedDict(
    'KinesisVideoGetDataEndpointOutput', {
        'DataEndpoint': Optional[str],
    }
)


KinesisVideoStreamNameCondition = TypedDict(
    'KinesisVideoStreamNameCondition', {
        'ComparisonOperator': Optional[str],
        'StreamName': Optional[str],
    }
)


KinesisVideoListStreamsOutput = TypedDict(
    'KinesisVideoListStreamsOutput', {
        'StreamInfoList': Optional[List[KinesisVideoStreamInfo]],
        'NextToken': Optional[str],
    }
)


KinesisVideoListTagsForStreamOutput = TypedDict(
    'KinesisVideoListTagsForStreamOutput', {
        'NextToken': Optional[str],
        'ResourceTags': Optional[Dict[str, str]],
    }
)


KinesisVideoTagStreamOutput = TypedDict(
    'KinesisVideoTagStreamOutput', {
    }
)


KinesisVideoUntagStreamOutput = TypedDict(
    'KinesisVideoUntagStreamOutput', {
    }
)


KinesisVideoUpdateDataRetentionOutput = TypedDict(
    'KinesisVideoUpdateDataRetentionOutput', {
    }
)


KinesisVideoUpdateStreamOutput = TypedDict(
    'KinesisVideoUpdateStreamOutput', {
    }
)


class KMS(BaseClient):
    def cancel_key_deletion(self, *,
        KeyId: str
    ) -> KMSCancelKeyDeletionResponse: ...

    def connect_custom_key_store(self, *,
        CustomKeyStoreId: str
    ) -> KMSConnectCustomKeyStoreResponse: ...

    def create_alias(self, *,
        AliasName: str,
        TargetKeyId: str
    ): ...

    def create_custom_key_store(self, *,
        CustomKeyStoreName: str,
        CloudHsmClusterId: str,
        TrustAnchorCertificate: str,
        KeyStorePassword: str
    ) -> KMSCreateCustomKeyStoreResponse: ...

    def create_grant(self, *,
        KeyId: str,
        GranteePrincipal: str,
        Operations: List[str],
        RetiringPrincipal: str = ...,
        Constraints: KMSGrantConstraints = ...,
        GrantTokens: List[str] = ...,
        Name: str = ...
    ) -> KMSCreateGrantResponse: ...

    def create_key(self, *,
        Policy: str = ...,
        Description: str = ...,
        KeyUsage: str = ...,
        Origin: str = ...,
        CustomKeyStoreId: str = ...,
        BypassPolicyLockoutSafetyCheck: bool = ...,
        Tags: List[KMSTag] = ...
    ) -> KMSCreateKeyResponse: ...

    def decrypt(self, *,
        CiphertextBlob: bytes,
        EncryptionContext: Dict[str, str] = ...,
        GrantTokens: List[str] = ...
    ) -> KMSDecryptResponse: ...

    def delete_alias(self, *,
        AliasName: str
    ): ...

    def delete_custom_key_store(self, *,
        CustomKeyStoreId: str
    ) -> KMSDeleteCustomKeyStoreResponse: ...

    def delete_imported_key_material(self, *,
        KeyId: str
    ): ...

    def describe_custom_key_stores(self, *,
        CustomKeyStoreId: str = ...,
        CustomKeyStoreName: str = ...,
        Limit: int = ...,
        Marker: str = ...
    ) -> KMSDescribeCustomKeyStoresResponse: ...

    def describe_key(self, *,
        KeyId: str,
        GrantTokens: List[str] = ...
    ) -> KMSDescribeKeyResponse: ...

    def disable_key(self, *,
        KeyId: str
    ): ...

    def disable_key_rotation(self, *,
        KeyId: str
    ): ...

    def disconnect_custom_key_store(self, *,
        CustomKeyStoreId: str
    ) -> KMSDisconnectCustomKeyStoreResponse: ...

    def enable_key(self, *,
        KeyId: str
    ): ...

    def enable_key_rotation(self, *,
        KeyId: str
    ): ...

    def encrypt(self, *,
        KeyId: str,
        Plaintext: bytes,
        EncryptionContext: Dict[str, str] = ...,
        GrantTokens: List[str] = ...
    ) -> KMSEncryptResponse: ...

    def generate_data_key(self, *,
        KeyId: str,
        EncryptionContext: Dict[str, str] = ...,
        NumberOfBytes: int = ...,
        KeySpec: str = ...,
        GrantTokens: List[str] = ...
    ) -> KMSGenerateDataKeyResponse: ...

    def generate_data_key_without_plaintext(self, *,
        KeyId: str,
        EncryptionContext: Dict[str, str] = ...,
        KeySpec: str = ...,
        NumberOfBytes: int = ...,
        GrantTokens: List[str] = ...
    ) -> KMSGenerateDataKeyWithoutPlaintextResponse: ...

    def generate_random(self, *,
        NumberOfBytes: int = ...,
        CustomKeyStoreId: str = ...
    ) -> KMSGenerateRandomResponse: ...

    def get_key_policy(self, *,
        KeyId: str,
        PolicyName: str
    ) -> KMSGetKeyPolicyResponse: ...

    def get_key_rotation_status(self, *,
        KeyId: str
    ) -> KMSGetKeyRotationStatusResponse: ...

    def get_parameters_for_import(self, *,
        KeyId: str,
        WrappingAlgorithm: str,
        WrappingKeySpec: str
    ) -> KMSGetParametersForImportResponse: ...

    def import_key_material(self, *,
        KeyId: str,
        ImportToken: bytes,
        EncryptedKeyMaterial: bytes,
        ValidTo: datetime.datetime = ...,
        ExpirationModel: str = ...
    ) -> KMSImportKeyMaterialResponse: ...

    def list_aliases(self, *,
        KeyId: str = ...,
        Limit: int = ...,
        Marker: str = ...
    ) -> KMSListAliasesResponse: ...

    def list_grants(self, *,
        KeyId: str,
        Limit: int = ...,
        Marker: str = ...
    ) -> KMSListGrantsResponse: ...

    def list_key_policies(self, *,
        KeyId: str,
        Limit: int = ...,
        Marker: str = ...
    ) -> KMSListKeyPoliciesResponse: ...

    def list_keys(self, *,
        Limit: int = ...,
        Marker: str = ...
    ) -> KMSListKeysResponse: ...

    def list_resource_tags(self, *,
        KeyId: str,
        Limit: int = ...,
        Marker: str = ...
    ) -> KMSListResourceTagsResponse: ...

    def list_retirable_grants(self, *,
        RetiringPrincipal: str,
        Limit: int = ...,
        Marker: str = ...
    ) -> KMSListGrantsResponse: ...

    def put_key_policy(self, *,
        KeyId: str,
        PolicyName: str,
        Policy: str,
        BypassPolicyLockoutSafetyCheck: bool = ...
    ): ...

    def re_encrypt(self, *,
        CiphertextBlob: bytes,
        DestinationKeyId: str,
        SourceEncryptionContext: Dict[str, str] = ...,
        DestinationEncryptionContext: Dict[str, str] = ...,
        GrantTokens: List[str] = ...
    ) -> KMSReEncryptResponse: ...

    def retire_grant(self, *,
        GrantToken: str = ...,
        KeyId: str = ...,
        GrantId: str = ...
    ): ...

    def revoke_grant(self, *,
        KeyId: str,
        GrantId: str
    ): ...

    def schedule_key_deletion(self, *,
        KeyId: str,
        PendingWindowInDays: int = ...
    ) -> KMSScheduleKeyDeletionResponse: ...

    def tag_resource(self, *,
        KeyId: str,
        Tags: List[KMSTag]
    ): ...

    def untag_resource(self, *,
        KeyId: str,
        TagKeys: List[str]
    ): ...

    def update_alias(self, *,
        AliasName: str,
        TargetKeyId: str
    ): ...

    def update_custom_key_store(self, *,
        CustomKeyStoreId: str,
        NewCustomKeyStoreName: str = ...,
        KeyStorePassword: str = ...,
        CloudHsmClusterId: str = ...
    ) -> KMSUpdateCustomKeyStoreResponse: ...

    def update_key_description(self, *,
        KeyId: str,
        Description: str
    ): ...


KMSCancelKeyDeletionResponse = TypedDict(
    'KMSCancelKeyDeletionResponse', {
        'KeyIdType': Optional[str],
    }
)


KMSConnectCustomKeyStoreResponse = TypedDict(
    'KMSConnectCustomKeyStoreResponse', {
    }
)


KMSCreateCustomKeyStoreResponse = TypedDict(
    'KMSCreateCustomKeyStoreResponse', {
        'CustomKeyStoreIdType': Optional[str],
    }
)


KMSGrantConstraints = TypedDict(
    'KMSGrantConstraints', {
        'EncryptionContextType': Optional[Dict[str, str]],
        'EncryptionContextType': Optional[Dict[str, str]],
    }
)


KMSCreateGrantResponse = TypedDict(
    'KMSCreateGrantResponse', {
        'GrantTokenType': Optional[str],
        'GrantIdType': Optional[str],
    }
)


KMSTag = TypedDict(
    'KMSTag', {
        'TagKeyType': str,
        'TagValueType': str,
    }
)


KMSKeyMetadata = TypedDict(
    'KMSKeyMetadata', {
        'KeyIdType': str,
        'AWSAccountIdType': Optional[str],
        'ArnType': Optional[str],
        'DateType': Optional[datetime.datetime],
        'BooleanType': Optional[bool],
        'DescriptionType': Optional[str],
        'KeyUsageType': Optional[str],
        'KeyState': Optional[str],
        'DateType': Optional[datetime.datetime],
        'DateType': Optional[datetime.datetime],
        'OriginType': Optional[str],
        'CustomKeyStoreIdType': Optional[str],
        'CloudHsmClusterIdType': Optional[str],
        'ExpirationModelType': Optional[str],
        'KeyManagerType': Optional[str],
    }
)


KMSCreateKeyResponse = TypedDict(
    'KMSCreateKeyResponse', {
        'KeyMetadata': Optional[KMSKeyMetadata],
    }
)


KMSDecryptResponse = TypedDict(
    'KMSDecryptResponse', {
        'KeyIdType': Optional[str],
        'PlaintextType': Optional[bytes],
    }
)


KMSDeleteCustomKeyStoreResponse = TypedDict(
    'KMSDeleteCustomKeyStoreResponse', {
    }
)


KMSCustomKeyStoresListEntry = TypedDict(
    'KMSCustomKeyStoresListEntry', {
        'CustomKeyStoreIdType': Optional[str],
        'CustomKeyStoreNameType': Optional[str],
        'CloudHsmClusterIdType': Optional[str],
        'TrustAnchorCertificateType': Optional[str],
        'ConnectionStateType': Optional[str],
        'ConnectionErrorCodeType': Optional[str],
        'DateType': Optional[datetime.datetime],
    }
)


KMSDescribeCustomKeyStoresResponse = TypedDict(
    'KMSDescribeCustomKeyStoresResponse', {
        'CustomKeyStoresList': Optional[List[KMSCustomKeyStoresListEntry]],
        'MarkerType': Optional[str],
        'BooleanType': Optional[bool],
    }
)


KMSDescribeKeyResponse = TypedDict(
    'KMSDescribeKeyResponse', {
        'KeyMetadata': Optional[KMSKeyMetadata],
    }
)


KMSDisconnectCustomKeyStoreResponse = TypedDict(
    'KMSDisconnectCustomKeyStoreResponse', {
    }
)


KMSEncryptResponse = TypedDict(
    'KMSEncryptResponse', {
        'CiphertextType': Optional[bytes],
        'KeyIdType': Optional[str],
    }
)


KMSGenerateDataKeyResponse = TypedDict(
    'KMSGenerateDataKeyResponse', {
        'CiphertextType': Optional[bytes],
        'PlaintextType': Optional[bytes],
        'KeyIdType': Optional[str],
    }
)


KMSGenerateDataKeyWithoutPlaintextResponse = TypedDict(
    'KMSGenerateDataKeyWithoutPlaintextResponse', {
        'CiphertextType': Optional[bytes],
        'KeyIdType': Optional[str],
    }
)


KMSGenerateRandomResponse = TypedDict(
    'KMSGenerateRandomResponse', {
        'PlaintextType': Optional[bytes],
    }
)


KMSGetKeyPolicyResponse = TypedDict(
    'KMSGetKeyPolicyResponse', {
        'PolicyType': Optional[str],
    }
)


KMSGetKeyRotationStatusResponse = TypedDict(
    'KMSGetKeyRotationStatusResponse', {
        'BooleanType': Optional[bool],
    }
)


KMSGetParametersForImportResponse = TypedDict(
    'KMSGetParametersForImportResponse', {
        'KeyIdType': Optional[str],
        'CiphertextType': Optional[bytes],
        'PlaintextType': Optional[bytes],
        'DateType': Optional[datetime.datetime],
    }
)


KMSImportKeyMaterialResponse = TypedDict(
    'KMSImportKeyMaterialResponse', {
    }
)


KMSAliasListEntry = TypedDict(
    'KMSAliasListEntry', {
        'AliasNameType': Optional[str],
        'ArnType': Optional[str],
        'KeyIdType': Optional[str],
    }
)


KMSListAliasesResponse = TypedDict(
    'KMSListAliasesResponse', {
        'AliasList': Optional[List[KMSAliasListEntry]],
        'MarkerType': Optional[str],
        'BooleanType': Optional[bool],
    }
)


KMSGrantListEntry = TypedDict(
    'KMSGrantListEntry', {
        'KeyIdType': Optional[str],
        'GrantIdType': Optional[str],
        'GrantNameType': Optional[str],
        'DateType': Optional[datetime.datetime],
        'PrincipalIdType': Optional[str],
        'PrincipalIdType': Optional[str],
        'PrincipalIdType': Optional[str],
        'GrantOperationList': Optional[List[str]],
        'GrantConstraints': Optional[KMSGrantConstraints],
    }
)


KMSListGrantsResponse = TypedDict(
    'KMSListGrantsResponse', {
        'GrantList': Optional[List[KMSGrantListEntry]],
        'MarkerType': Optional[str],
        'BooleanType': Optional[bool],
    }
)


KMSListKeyPoliciesResponse = TypedDict(
    'KMSListKeyPoliciesResponse', {
        'PolicyNameList': Optional[List[str]],
        'MarkerType': Optional[str],
        'BooleanType': Optional[bool],
    }
)


KMSKeyListEntry = TypedDict(
    'KMSKeyListEntry', {
        'KeyIdType': Optional[str],
        'ArnType': Optional[str],
    }
)


KMSListKeysResponse = TypedDict(
    'KMSListKeysResponse', {
        'KeyList': Optional[List[KMSKeyListEntry]],
        'MarkerType': Optional[str],
        'BooleanType': Optional[bool],
    }
)


KMSListResourceTagsResponse = TypedDict(
    'KMSListResourceTagsResponse', {
        'TagList': Optional[List[KMSTag]],
        'MarkerType': Optional[str],
        'BooleanType': Optional[bool],
    }
)


KMSReEncryptResponse = TypedDict(
    'KMSReEncryptResponse', {
        'CiphertextType': Optional[bytes],
        'KeyIdType': Optional[str],
        'KeyIdType': Optional[str],
    }
)


KMSScheduleKeyDeletionResponse = TypedDict(
    'KMSScheduleKeyDeletionResponse', {
        'KeyIdType': Optional[str],
        'DateType': Optional[datetime.datetime],
    }
)


KMSUpdateCustomKeyStoreResponse = TypedDict(
    'KMSUpdateCustomKeyStoreResponse', {
    }
)


class Lambda(BaseClient):
    def add_layer_version_permission(self, *,
        LayerName: str,
        VersionNumber: int,
        StatementId: str,
        Action: str,
        Principal: str,
        OrganizationId: str = ...,
        RevisionId: str = ...
    ) -> LambdaAddLayerVersionPermissionResponse: ...

    def add_permission(self, *,
        FunctionName: str,
        StatementId: str,
        Action: str,
        Principal: str,
        SourceArn: str = ...,
        SourceAccount: str = ...,
        EventSourceToken: str = ...,
        Qualifier: str = ...,
        RevisionId: str = ...
    ) -> LambdaAddPermissionResponse: ...

    def create_alias(self, *,
        FunctionName: str,
        Name: str,
        FunctionVersion: str,
        Description: str = ...,
        RoutingConfig: LambdaAliasRoutingConfiguration = ...
    ) -> LambdaAliasConfiguration: ...

    def create_event_source_mapping(self, *,
        EventSourceArn: str,
        FunctionName: str,
        Enabled: bool = ...,
        BatchSize: int = ...,
        StartingPosition: str = ...,
        StartingPositionTimestamp: datetime.datetime = ...
    ) -> LambdaEventSourceMappingConfiguration: ...

    def create_function(self, *,
        FunctionName: str,
        Runtime: str,
        Role: str,
        Handler: str,
        Code: LambdaFunctionCode,
        Description: str = ...,
        Timeout: int = ...,
        MemorySize: int = ...,
        Publish: bool = ...,
        VpcConfig: LambdaVpcConfig = ...,
        DeadLetterConfig: LambdaDeadLetterConfig = ...,
        Environment: LambdaEnvironment = ...,
        KMSKeyArn: str = ...,
        TracingConfig: LambdaTracingConfig = ...,
        Tags: Dict[str, str] = ...,
        Layers: List[str] = ...
    ) -> LambdaFunctionConfiguration: ...

    def delete_alias(self, *,
        FunctionName: str,
        Name: str
    ): ...

    def delete_event_source_mapping(self, *,
        UUID: str
    ) -> LambdaEventSourceMappingConfiguration: ...

    def delete_function(self, *,
        FunctionName: str,
        Qualifier: str = ...
    ): ...

    def delete_function_concurrency(self, *,
        FunctionName: str
    ): ...

    def delete_layer_version(self, *,
        LayerName: str,
        VersionNumber: int
    ): ...

    def get_account_settings(self) -> LambdaGetAccountSettingsResponse: ...

    def get_alias(self, *,
        FunctionName: str,
        Name: str
    ) -> LambdaAliasConfiguration: ...

    def get_event_source_mapping(self, *,
        UUID: str
    ) -> LambdaEventSourceMappingConfiguration: ...

    def get_function(self, *,
        FunctionName: str,
        Qualifier: str = ...
    ) -> LambdaGetFunctionResponse: ...

    def get_function_configuration(self, *,
        FunctionName: str,
        Qualifier: str = ...
    ) -> LambdaFunctionConfiguration: ...

    def get_layer_version(self, *,
        LayerName: str,
        VersionNumber: int
    ) -> LambdaGetLayerVersionResponse: ...

    def get_layer_version_by_arn(self, *,
        Arn: str
    ) -> LambdaGetLayerVersionResponse: ...

    def get_layer_version_policy(self, *,
        LayerName: str,
        VersionNumber: int
    ) -> LambdaGetLayerVersionPolicyResponse: ...

    def get_policy(self, *,
        FunctionName: str,
        Qualifier: str = ...
    ) -> LambdaGetPolicyResponse: ...

    def invoke(self, *,
        FunctionName: str,
        InvocationType: str = ...,
        LogType: str = ...,
        ClientContext: str = ...,
        Payload: bytes = ...,
        Qualifier: str = ...
    ) -> LambdaInvocationResponse: ...

    def invoke_async(self, *,
        FunctionName: str,
        InvokeArgs: bytes
    ) -> LambdaInvokeAsyncResponse: ...

    def list_aliases(self, *,
        FunctionName: str,
        FunctionVersion: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> LambdaListAliasesResponse: ...

    def list_event_source_mappings(self, *,
        EventSourceArn: str = ...,
        FunctionName: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> LambdaListEventSourceMappingsResponse: ...

    def list_functions(self, *,
        MasterRegion: str = ...,
        FunctionVersion: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> LambdaListFunctionsResponse: ...

    def list_layer_versions(self, *,
        LayerName: str,
        CompatibleRuntime: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> LambdaListLayerVersionsResponse: ...

    def list_layers(self, *,
        CompatibleRuntime: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> LambdaListLayersResponse: ...

    def list_tags(self, *,
        Resource: str
    ) -> LambdaListTagsResponse: ...

    def list_versions_by_function(self, *,
        FunctionName: str,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> LambdaListVersionsByFunctionResponse: ...

    def publish_layer_version(self, *,
        LayerName: str,
        Content: LambdaLayerVersionContentInput,
        Description: str = ...,
        CompatibleRuntimes: List[str] = ...,
        LicenseInfo: str = ...
    ) -> LambdaPublishLayerVersionResponse: ...

    def publish_version(self, *,
        FunctionName: str,
        CodeSha256: str = ...,
        Description: str = ...,
        RevisionId: str = ...
    ) -> LambdaFunctionConfiguration: ...

    def put_function_concurrency(self, *,
        FunctionName: str,
        ReservedConcurrentExecutions: int
    ) -> LambdaConcurrency: ...

    def remove_layer_version_permission(self, *,
        LayerName: str,
        VersionNumber: int,
        StatementId: str,
        RevisionId: str = ...
    ): ...

    def remove_permission(self, *,
        FunctionName: str,
        StatementId: str,
        Qualifier: str = ...,
        RevisionId: str = ...
    ): ...

    def tag_resource(self, *,
        Resource: str,
        Tags: Dict[str, str]
    ): ...

    def untag_resource(self, *,
        Resource: str,
        TagKeys: List[str]
    ): ...

    def update_alias(self, *,
        FunctionName: str,
        Name: str,
        FunctionVersion: str = ...,
        Description: str = ...,
        RoutingConfig: LambdaAliasRoutingConfiguration = ...,
        RevisionId: str = ...
    ) -> LambdaAliasConfiguration: ...

    def update_event_source_mapping(self, *,
        UUID: str,
        FunctionName: str = ...,
        Enabled: bool = ...,
        BatchSize: int = ...
    ) -> LambdaEventSourceMappingConfiguration: ...

    def update_function_code(self, *,
        FunctionName: str,
        ZipFile: bytes = ...,
        S3Bucket: str = ...,
        S3Key: str = ...,
        S3ObjectVersion: str = ...,
        Publish: bool = ...,
        DryRun: bool = ...,
        RevisionId: str = ...
    ) -> LambdaFunctionConfiguration: ...

    def update_function_configuration(self, *,
        FunctionName: str,
        Role: str = ...,
        Handler: str = ...,
        Description: str = ...,
        Timeout: int = ...,
        MemorySize: int = ...,
        VpcConfig: LambdaVpcConfig = ...,
        Environment: LambdaEnvironment = ...,
        Runtime: str = ...,
        DeadLetterConfig: LambdaDeadLetterConfig = ...,
        KMSKeyArn: str = ...,
        TracingConfig: LambdaTracingConfig = ...,
        RevisionId: str = ...,
        Layers: List[str] = ...
    ) -> LambdaFunctionConfiguration: ...


LambdaAddLayerVersionPermissionResponse = TypedDict(
    'LambdaAddLayerVersionPermissionResponse', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


LambdaAddPermissionResponse = TypedDict(
    'LambdaAddPermissionResponse', {
        'String': Optional[str],
    }
)


LambdaAliasRoutingConfiguration = TypedDict(
    'LambdaAliasRoutingConfiguration', {
        'AdditionalVersionWeights': Optional[Dict[str, float]],
    }
)


LambdaAliasConfiguration = TypedDict(
    'LambdaAliasConfiguration', {
        'FunctionArn': Optional[str],
        'Alias': Optional[str],
        'Version': Optional[str],
        'Description': Optional[str],
        'AliasRoutingConfiguration': Optional[LambdaAliasRoutingConfiguration],
        'String': Optional[str],
    }
)


LambdaEventSourceMappingConfiguration = TypedDict(
    'LambdaEventSourceMappingConfiguration', {
        'String': Optional[str],
        'BatchSize': Optional[int],
        'Arn': Optional[str],
        'FunctionArn': Optional[str],
        'Date': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


LambdaFunctionCode = TypedDict(
    'LambdaFunctionCode', {
        'Blob': Optional[bytes],
        'S3Bucket': Optional[str],
        'S3Key': Optional[str],
        'S3ObjectVersion': Optional[str],
    }
)


LambdaVpcConfig = TypedDict(
    'LambdaVpcConfig', {
        'SubnetIds': Optional[List[str]],
        'SecurityGroupIds': Optional[List[str]],
    }
)


LambdaDeadLetterConfig = TypedDict(
    'LambdaDeadLetterConfig', {
        'ResourceArn': Optional[str],
    }
)


LambdaEnvironment = TypedDict(
    'LambdaEnvironment', {
        'EnvironmentVariables': Optional[Dict[str, str]],
    }
)


LambdaTracingConfig = TypedDict(
    'LambdaTracingConfig', {
        'TracingMode': Optional[str],
    }
)


LambdaVpcConfigResponse = TypedDict(
    'LambdaVpcConfigResponse', {
        'SubnetIds': Optional[List[str]],
        'SecurityGroupIds': Optional[List[str]],
        'VpcId': Optional[str],
    }
)


LambdaEnvironmentError = TypedDict(
    'LambdaEnvironmentError', {
        'String': Optional[str],
        'SensitiveString': Optional[str],
    }
)


LambdaEnvironmentResponse = TypedDict(
    'LambdaEnvironmentResponse', {
        'EnvironmentVariables': Optional[Dict[str, str]],
        'EnvironmentError': Optional[LambdaEnvironmentError],
    }
)


LambdaTracingConfigResponse = TypedDict(
    'LambdaTracingConfigResponse', {
        'TracingMode': Optional[str],
    }
)


LambdaLayer = TypedDict(
    'LambdaLayer', {
        'LayerVersionArn': Optional[str],
        'Long': Optional[int],
    }
)


LambdaFunctionConfiguration = TypedDict(
    'LambdaFunctionConfiguration', {
        'NamespacedFunctionName': Optional[str],
        'NameSpacedFunctionArn': Optional[str],
        'Runtime': Optional[str],
        'RoleArn': Optional[str],
        'Handler': Optional[str],
        'Long': Optional[int],
        'Description': Optional[str],
        'Timeout': Optional[int],
        'MemorySize': Optional[int],
        'Timestamp': Optional[str],
        'String': Optional[str],
        'Version': Optional[str],
        'VpcConfigResponse': Optional[LambdaVpcConfigResponse],
        'DeadLetterConfig': Optional[LambdaDeadLetterConfig],
        'EnvironmentResponse': Optional[LambdaEnvironmentResponse],
        'KMSKeyArn': Optional[str],
        'TracingConfigResponse': Optional[LambdaTracingConfigResponse],
        'FunctionArn': Optional[str],
        'String': Optional[str],
        'LayersReferenceList': Optional[List[LambdaLayer]],
    }
)


LambdaAccountLimit = TypedDict(
    'LambdaAccountLimit', {
        'Long': Optional[int],
        'Long': Optional[int],
        'Long': Optional[int],
        'Integer': Optional[int],
        'UnreservedConcurrentExecutions': Optional[int],
    }
)


LambdaAccountUsage = TypedDict(
    'LambdaAccountUsage', {
        'Long': Optional[int],
        'Long': Optional[int],
    }
)


LambdaGetAccountSettingsResponse = TypedDict(
    'LambdaGetAccountSettingsResponse', {
        'AccountLimit': Optional[LambdaAccountLimit],
        'AccountUsage': Optional[LambdaAccountUsage],
    }
)


LambdaFunctionCodeLocation = TypedDict(
    'LambdaFunctionCodeLocation', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


LambdaConcurrency = TypedDict(
    'LambdaConcurrency', {
        'ReservedConcurrentExecutions': Optional[int],
    }
)


LambdaGetFunctionResponse = TypedDict(
    'LambdaGetFunctionResponse', {
        'FunctionConfiguration': Optional[LambdaFunctionConfiguration],
        'FunctionCodeLocation': Optional[LambdaFunctionCodeLocation],
        'Tags': Optional[Dict[str, str]],
        'Concurrency': Optional[LambdaConcurrency],
    }
)


LambdaLayerVersionContentOutput = TypedDict(
    'LambdaLayerVersionContentOutput', {
        'String': Optional[str],
        'String': Optional[str],
        'Long': Optional[int],
    }
)


LambdaGetLayerVersionResponse = TypedDict(
    'LambdaGetLayerVersionResponse', {
        'LayerVersionContentOutput': Optional[LambdaLayerVersionContentOutput],
        'LayerArn': Optional[str],
        'LayerVersionArn': Optional[str],
        'Description': Optional[str],
        'Timestamp': Optional[str],
        'LayerVersionNumber': Optional[int],
        'CompatibleRuntimes': Optional[List[str]],
        'LicenseInfo': Optional[str],
    }
)


LambdaGetLayerVersionPolicyResponse = TypedDict(
    'LambdaGetLayerVersionPolicyResponse', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


LambdaGetPolicyResponse = TypedDict(
    'LambdaGetPolicyResponse', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


LambdaInvocationResponse = TypedDict(
    'LambdaInvocationResponse', {
        'Integer': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'Blob': Optional[bytes],
        'Version': Optional[str],
    }
)


LambdaInvokeAsyncResponse = TypedDict(
    'LambdaInvokeAsyncResponse', {
        'HttpStatus': Optional[int],
    }
)


LambdaListAliasesResponse = TypedDict(
    'LambdaListAliasesResponse', {
        'String': Optional[str],
        'AliasList': Optional[List[LambdaAliasConfiguration]],
    }
)


LambdaListEventSourceMappingsResponse = TypedDict(
    'LambdaListEventSourceMappingsResponse', {
        'String': Optional[str],
        'EventSourceMappingsList': Optional[List[LambdaEventSourceMappingConfiguration]],
    }
)


LambdaListFunctionsResponse = TypedDict(
    'LambdaListFunctionsResponse', {
        'String': Optional[str],
        'FunctionList': Optional[List[LambdaFunctionConfiguration]],
    }
)


LambdaLayerVersionsListItem = TypedDict(
    'LambdaLayerVersionsListItem', {
        'LayerVersionArn': Optional[str],
        'LayerVersionNumber': Optional[int],
        'Description': Optional[str],
        'Timestamp': Optional[str],
        'CompatibleRuntimes': Optional[List[str]],
        'LicenseInfo': Optional[str],
    }
)


LambdaListLayerVersionsResponse = TypedDict(
    'LambdaListLayerVersionsResponse', {
        'String': Optional[str],
        'LayerVersionsList': Optional[List[LambdaLayerVersionsListItem]],
    }
)


LambdaLayersListItem = TypedDict(
    'LambdaLayersListItem', {
        'LayerName': Optional[str],
        'LayerArn': Optional[str],
        'LayerVersionsListItem': Optional[LambdaLayerVersionsListItem],
    }
)


LambdaListLayersResponse = TypedDict(
    'LambdaListLayersResponse', {
        'String': Optional[str],
        'LayersList': Optional[List[LambdaLayersListItem]],
    }
)


LambdaListTagsResponse = TypedDict(
    'LambdaListTagsResponse', {
        'Tags': Optional[Dict[str, str]],
    }
)


LambdaListVersionsByFunctionResponse = TypedDict(
    'LambdaListVersionsByFunctionResponse', {
        'String': Optional[str],
        'FunctionList': Optional[List[LambdaFunctionConfiguration]],
    }
)


LambdaLayerVersionContentInput = TypedDict(
    'LambdaLayerVersionContentInput', {
        'S3Bucket': Optional[str],
        'S3Key': Optional[str],
        'S3ObjectVersion': Optional[str],
        'Blob': Optional[bytes],
    }
)


LambdaPublishLayerVersionResponse = TypedDict(
    'LambdaPublishLayerVersionResponse', {
        'LayerVersionContentOutput': Optional[LambdaLayerVersionContentOutput],
        'LayerArn': Optional[str],
        'LayerVersionArn': Optional[str],
        'Description': Optional[str],
        'Timestamp': Optional[str],
        'LayerVersionNumber': Optional[int],
        'CompatibleRuntimes': Optional[List[str]],
        'LicenseInfo': Optional[str],
    }
)


class LexModelBuildingService(BaseClient):
    def create_bot_version(self, *,
        name: str,
        checksum: str = ...
    ) -> LexModelBuildingServiceCreateBotVersionResponse: ...

    def create_intent_version(self, *,
        name: str,
        checksum: str = ...
    ) -> LexModelBuildingServiceCreateIntentVersionResponse: ...

    def create_slot_type_version(self, *,
        name: str,
        checksum: str = ...
    ) -> LexModelBuildingServiceCreateSlotTypeVersionResponse: ...

    def delete_bot(self, *,
        name: str
    ): ...

    def delete_bot_alias(self, *,
        name: str,
        botName: str
    ): ...

    def delete_bot_channel_association(self, *,
        name: str,
        botName: str,
        botAlias: str
    ): ...

    def delete_bot_version(self, *,
        name: str,
        version: str
    ): ...

    def delete_intent(self, *,
        name: str
    ): ...

    def delete_intent_version(self, *,
        name: str,
        version: str
    ): ...

    def delete_slot_type(self, *,
        name: str
    ): ...

    def delete_slot_type_version(self, *,
        name: str,
        version: str
    ): ...

    def delete_utterances(self, *,
        botName: str,
        userId: str
    ): ...

    def get_bot(self, *,
        name: str,
        versionOrAlias: str
    ) -> LexModelBuildingServiceGetBotResponse: ...

    def get_bot_alias(self, *,
        name: str,
        botName: str
    ) -> LexModelBuildingServiceGetBotAliasResponse: ...

    def get_bot_aliases(self, *,
        botName: str,
        nextToken: str = ...,
        maxResults: int = ...,
        nameContains: str = ...
    ) -> LexModelBuildingServiceGetBotAliasesResponse: ...

    def get_bot_channel_association(self, *,
        name: str,
        botName: str,
        botAlias: str
    ) -> LexModelBuildingServiceGetBotChannelAssociationResponse: ...

    def get_bot_channel_associations(self, *,
        botName: str,
        botAlias: str,
        nextToken: str = ...,
        maxResults: int = ...,
        nameContains: str = ...
    ) -> LexModelBuildingServiceGetBotChannelAssociationsResponse: ...

    def get_bot_versions(self, *,
        name: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> LexModelBuildingServiceGetBotVersionsResponse: ...

    def get_bots(self, *,
        nextToken: str = ...,
        maxResults: int = ...,
        nameContains: str = ...
    ) -> LexModelBuildingServiceGetBotsResponse: ...

    def get_builtin_intent(self, *,
        signature: str
    ) -> LexModelBuildingServiceGetBuiltinIntentResponse: ...

    def get_builtin_intents(self, *,
        locale: str = ...,
        signatureContains: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> LexModelBuildingServiceGetBuiltinIntentsResponse: ...

    def get_builtin_slot_types(self, *,
        locale: str = ...,
        signatureContains: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> LexModelBuildingServiceGetBuiltinSlotTypesResponse: ...

    def get_export(self, *,
        name: str,
        version: str,
        resourceType: str,
        exportType: str
    ) -> LexModelBuildingServiceGetExportResponse: ...

    def get_import(self, *,
        importId: str
    ) -> LexModelBuildingServiceGetImportResponse: ...

    def get_intent(self, *,
        name: str,
        version: str
    ) -> LexModelBuildingServiceGetIntentResponse: ...

    def get_intent_versions(self, *,
        name: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> LexModelBuildingServiceGetIntentVersionsResponse: ...

    def get_intents(self, *,
        nextToken: str = ...,
        maxResults: int = ...,
        nameContains: str = ...
    ) -> LexModelBuildingServiceGetIntentsResponse: ...

    def get_slot_type(self, *,
        name: str,
        version: str
    ) -> LexModelBuildingServiceGetSlotTypeResponse: ...

    def get_slot_type_versions(self, *,
        name: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> LexModelBuildingServiceGetSlotTypeVersionsResponse: ...

    def get_slot_types(self, *,
        nextToken: str = ...,
        maxResults: int = ...,
        nameContains: str = ...
    ) -> LexModelBuildingServiceGetSlotTypesResponse: ...

    def get_utterances_view(self, *,
        botName: str,
        botVersions: List[str],
        statusType: str
    ) -> LexModelBuildingServiceGetUtterancesViewResponse: ...

    def put_bot(self, *,
        name: str,
        locale: str,
        childDirected: bool,
        description: str = ...,
        intents: List[LexModelBuildingServiceIntent] = ...,
        clarificationPrompt: LexModelBuildingServicePrompt = ...,
        abortStatement: LexModelBuildingServiceStatement = ...,
        idleSessionTTLInSeconds: int = ...,
        voiceId: str = ...,
        checksum: str = ...,
        processBehavior: str = ...,
        createVersion: bool = ...
    ) -> LexModelBuildingServicePutBotResponse: ...

    def put_bot_alias(self, *,
        name: str,
        botVersion: str,
        botName: str,
        description: str = ...,
        checksum: str = ...
    ) -> LexModelBuildingServicePutBotAliasResponse: ...

    def put_intent(self, *,
        name: str,
        description: str = ...,
        slots: List[LexModelBuildingServiceSlot] = ...,
        sampleUtterances: List[str] = ...,
        confirmationPrompt: LexModelBuildingServicePrompt = ...,
        rejectionStatement: LexModelBuildingServiceStatement = ...,
        followUpPrompt: LexModelBuildingServiceFollowUpPrompt = ...,
        conclusionStatement: LexModelBuildingServiceStatement = ...,
        dialogCodeHook: LexModelBuildingServiceCodeHook = ...,
        fulfillmentActivity: LexModelBuildingServiceFulfillmentActivity = ...,
        parentIntentSignature: str = ...,
        checksum: str = ...,
        createVersion: bool = ...
    ) -> LexModelBuildingServicePutIntentResponse: ...

    def put_slot_type(self, *,
        name: str,
        description: str = ...,
        enumerationValues: List[LexModelBuildingServiceEnumerationValue] = ...,
        checksum: str = ...,
        valueSelectionStrategy: str = ...,
        createVersion: bool = ...
    ) -> LexModelBuildingServicePutSlotTypeResponse: ...

    def start_import(self, *,
        payload: bytes,
        resourceType: str,
        mergeStrategy: str
    ) -> LexModelBuildingServiceStartImportResponse: ...


LexModelBuildingServiceIntent = TypedDict(
    'LexModelBuildingServiceIntent', {
        'IntentName': str,
        'Version': str,
    }
)


LexModelBuildingServiceMessage = TypedDict(
    'LexModelBuildingServiceMessage', {
        'ContentType': str,
        'ContentString': str,
        'GroupNumber': Optional[int],
    }
)


LexModelBuildingServicePrompt = TypedDict(
    'LexModelBuildingServicePrompt', {
        'MessageList': List[LexModelBuildingServiceMessage],
        'PromptMaxAttempts': int,
        'ResponseCard': Optional[str],
    }
)


LexModelBuildingServiceStatement = TypedDict(
    'LexModelBuildingServiceStatement', {
        'MessageList': List[LexModelBuildingServiceMessage],
        'ResponseCard': Optional[str],
    }
)


LexModelBuildingServiceCreateBotVersionResponse = TypedDict(
    'LexModelBuildingServiceCreateBotVersionResponse', {
        'BotName': Optional[str],
        'Description': Optional[str],
        'IntentList': Optional[List[LexModelBuildingServiceIntent]],
        'Prompt': Optional[LexModelBuildingServicePrompt],
        'Statement': Optional[LexModelBuildingServiceStatement],
        'Status': Optional[str],
        'String': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'SessionTTL': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'Version': Optional[str],
        'Locale': Optional[str],
        'Boolean': Optional[bool],
    }
)


LexModelBuildingServiceSlot = TypedDict(
    'LexModelBuildingServiceSlot', {
        'SlotName': str,
        'SlotConstraint': str,
        'Description': Optional[str],
        'CustomOrBuiltinSlotTypeName': Optional[str],
        'Version': Optional[str],
        'Prompt': Optional[LexModelBuildingServicePrompt],
        'Priority': Optional[int],
        'SlotUtteranceList': Optional[List[str]],
        'ResponseCard': Optional[str],
    }
)


LexModelBuildingServiceFollowUpPrompt = TypedDict(
    'LexModelBuildingServiceFollowUpPrompt', {
        'Prompt': LexModelBuildingServicePrompt,
        'Statement': LexModelBuildingServiceStatement,
    }
)


LexModelBuildingServiceCodeHook = TypedDict(
    'LexModelBuildingServiceCodeHook', {
        'LambdaARN': str,
        'MessageVersion': str,
    }
)


LexModelBuildingServiceFulfillmentActivity = TypedDict(
    'LexModelBuildingServiceFulfillmentActivity', {
        'FulfillmentActivityType': str,
        'CodeHook': Optional[LexModelBuildingServiceCodeHook],
    }
)


LexModelBuildingServiceCreateIntentVersionResponse = TypedDict(
    'LexModelBuildingServiceCreateIntentVersionResponse', {
        'IntentName': Optional[str],
        'Description': Optional[str],
        'SlotList': Optional[List[LexModelBuildingServiceSlot]],
        'IntentUtteranceList': Optional[List[str]],
        'Prompt': Optional[LexModelBuildingServicePrompt],
        'Statement': Optional[LexModelBuildingServiceStatement],
        'FollowUpPrompt': Optional[LexModelBuildingServiceFollowUpPrompt],
        'Statement': Optional[LexModelBuildingServiceStatement],
        'CodeHook': Optional[LexModelBuildingServiceCodeHook],
        'FulfillmentActivity': Optional[LexModelBuildingServiceFulfillmentActivity],
        'BuiltinIntentSignature': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Version': Optional[str],
        'String': Optional[str],
    }
)


LexModelBuildingServiceEnumerationValue = TypedDict(
    'LexModelBuildingServiceEnumerationValue', {
        'Value': str,
        'SynonymList': Optional[List[str]],
    }
)


LexModelBuildingServiceCreateSlotTypeVersionResponse = TypedDict(
    'LexModelBuildingServiceCreateSlotTypeVersionResponse', {
        'SlotTypeName': Optional[str],
        'Description': Optional[str],
        'EnumerationValues': Optional[List[LexModelBuildingServiceEnumerationValue]],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Version': Optional[str],
        'String': Optional[str],
        'SlotValueSelectionStrategy': Optional[str],
    }
)


LexModelBuildingServiceGetBotResponse = TypedDict(
    'LexModelBuildingServiceGetBotResponse', {
        'BotName': Optional[str],
        'Description': Optional[str],
        'IntentList': Optional[List[LexModelBuildingServiceIntent]],
        'Prompt': Optional[LexModelBuildingServicePrompt],
        'Statement': Optional[LexModelBuildingServiceStatement],
        'Status': Optional[str],
        'String': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'SessionTTL': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'Version': Optional[str],
        'Locale': Optional[str],
        'Boolean': Optional[bool],
    }
)


LexModelBuildingServiceGetBotAliasResponse = TypedDict(
    'LexModelBuildingServiceGetBotAliasResponse', {
        'AliasName': Optional[str],
        'Description': Optional[str],
        'Version': Optional[str],
        'BotName': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'String': Optional[str],
    }
)


LexModelBuildingServiceBotAliasMetadata = TypedDict(
    'LexModelBuildingServiceBotAliasMetadata', {
        'AliasName': Optional[str],
        'Description': Optional[str],
        'Version': Optional[str],
        'BotName': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'String': Optional[str],
    }
)


LexModelBuildingServiceGetBotAliasesResponse = TypedDict(
    'LexModelBuildingServiceGetBotAliasesResponse', {
        'BotAliasMetadataList': Optional[List[LexModelBuildingServiceBotAliasMetadata]],
        'NextToken': Optional[str],
    }
)


LexModelBuildingServiceGetBotChannelAssociationResponse = TypedDict(
    'LexModelBuildingServiceGetBotChannelAssociationResponse', {
        'BotChannelName': Optional[str],
        'Description': Optional[str],
        'AliasName': Optional[str],
        'BotName': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'ChannelType': Optional[str],
        'ChannelConfigurationMap': Optional[Dict[str, str]],
        'ChannelStatus': Optional[str],
        'String': Optional[str],
    }
)


LexModelBuildingServiceBotChannelAssociation = TypedDict(
    'LexModelBuildingServiceBotChannelAssociation', {
        'BotChannelName': Optional[str],
        'Description': Optional[str],
        'AliasName': Optional[str],
        'BotName': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'ChannelType': Optional[str],
        'ChannelConfigurationMap': Optional[Dict[str, str]],
        'ChannelStatus': Optional[str],
        'String': Optional[str],
    }
)


LexModelBuildingServiceGetBotChannelAssociationsResponse = TypedDict(
    'LexModelBuildingServiceGetBotChannelAssociationsResponse', {
        'BotChannelAssociationList': Optional[List[LexModelBuildingServiceBotChannelAssociation]],
        'NextToken': Optional[str],
    }
)


LexModelBuildingServiceBotMetadata = TypedDict(
    'LexModelBuildingServiceBotMetadata', {
        'BotName': Optional[str],
        'Description': Optional[str],
        'Status': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Version': Optional[str],
    }
)


LexModelBuildingServiceGetBotVersionsResponse = TypedDict(
    'LexModelBuildingServiceGetBotVersionsResponse', {
        'BotMetadataList': Optional[List[LexModelBuildingServiceBotMetadata]],
        'NextToken': Optional[str],
    }
)


LexModelBuildingServiceGetBotsResponse = TypedDict(
    'LexModelBuildingServiceGetBotsResponse', {
        'BotMetadataList': Optional[List[LexModelBuildingServiceBotMetadata]],
        'NextToken': Optional[str],
    }
)


LexModelBuildingServiceBuiltinIntentSlot = TypedDict(
    'LexModelBuildingServiceBuiltinIntentSlot', {
        'String': Optional[str],
    }
)


LexModelBuildingServiceGetBuiltinIntentResponse = TypedDict(
    'LexModelBuildingServiceGetBuiltinIntentResponse', {
        'BuiltinIntentSignature': Optional[str],
        'LocaleList': Optional[List[str]],
        'BuiltinIntentSlotList': Optional[List[LexModelBuildingServiceBuiltinIntentSlot]],
    }
)


LexModelBuildingServiceBuiltinIntentMetadata = TypedDict(
    'LexModelBuildingServiceBuiltinIntentMetadata', {
        'BuiltinIntentSignature': Optional[str],
        'LocaleList': Optional[List[str]],
    }
)


LexModelBuildingServiceGetBuiltinIntentsResponse = TypedDict(
    'LexModelBuildingServiceGetBuiltinIntentsResponse', {
        'BuiltinIntentMetadataList': Optional[List[LexModelBuildingServiceBuiltinIntentMetadata]],
        'NextToken': Optional[str],
    }
)


LexModelBuildingServiceBuiltinSlotTypeMetadata = TypedDict(
    'LexModelBuildingServiceBuiltinSlotTypeMetadata', {
        'BuiltinSlotTypeSignature': Optional[str],
        'LocaleList': Optional[List[str]],
    }
)


LexModelBuildingServiceGetBuiltinSlotTypesResponse = TypedDict(
    'LexModelBuildingServiceGetBuiltinSlotTypesResponse', {
        'BuiltinSlotTypeMetadataList': Optional[List[LexModelBuildingServiceBuiltinSlotTypeMetadata]],
        'NextToken': Optional[str],
    }
)


LexModelBuildingServiceGetExportResponse = TypedDict(
    'LexModelBuildingServiceGetExportResponse', {
        'Name': Optional[str],
        'NumericalVersion': Optional[str],
        'ResourceType': Optional[str],
        'ExportType': Optional[str],
        'ExportStatus': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


LexModelBuildingServiceGetImportResponse = TypedDict(
    'LexModelBuildingServiceGetImportResponse', {
        'Name': Optional[str],
        'ResourceType': Optional[str],
        'MergeStrategy': Optional[str],
        'String': Optional[str],
        'ImportStatus': Optional[str],
        'StringList': Optional[List[str]],
        'Timestamp': Optional[datetime.datetime],
    }
)


LexModelBuildingServiceGetIntentResponse = TypedDict(
    'LexModelBuildingServiceGetIntentResponse', {
        'IntentName': Optional[str],
        'Description': Optional[str],
        'SlotList': Optional[List[LexModelBuildingServiceSlot]],
        'IntentUtteranceList': Optional[List[str]],
        'Prompt': Optional[LexModelBuildingServicePrompt],
        'Statement': Optional[LexModelBuildingServiceStatement],
        'FollowUpPrompt': Optional[LexModelBuildingServiceFollowUpPrompt],
        'Statement': Optional[LexModelBuildingServiceStatement],
        'CodeHook': Optional[LexModelBuildingServiceCodeHook],
        'FulfillmentActivity': Optional[LexModelBuildingServiceFulfillmentActivity],
        'BuiltinIntentSignature': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Version': Optional[str],
        'String': Optional[str],
    }
)


LexModelBuildingServiceIntentMetadata = TypedDict(
    'LexModelBuildingServiceIntentMetadata', {
        'IntentName': Optional[str],
        'Description': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Version': Optional[str],
    }
)


LexModelBuildingServiceGetIntentVersionsResponse = TypedDict(
    'LexModelBuildingServiceGetIntentVersionsResponse', {
        'IntentMetadataList': Optional[List[LexModelBuildingServiceIntentMetadata]],
        'NextToken': Optional[str],
    }
)


LexModelBuildingServiceGetIntentsResponse = TypedDict(
    'LexModelBuildingServiceGetIntentsResponse', {
        'IntentMetadataList': Optional[List[LexModelBuildingServiceIntentMetadata]],
        'NextToken': Optional[str],
    }
)


LexModelBuildingServiceGetSlotTypeResponse = TypedDict(
    'LexModelBuildingServiceGetSlotTypeResponse', {
        'SlotTypeName': Optional[str],
        'Description': Optional[str],
        'EnumerationValues': Optional[List[LexModelBuildingServiceEnumerationValue]],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Version': Optional[str],
        'String': Optional[str],
        'SlotValueSelectionStrategy': Optional[str],
    }
)


LexModelBuildingServiceSlotTypeMetadata = TypedDict(
    'LexModelBuildingServiceSlotTypeMetadata', {
        'SlotTypeName': Optional[str],
        'Description': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Version': Optional[str],
    }
)


LexModelBuildingServiceGetSlotTypeVersionsResponse = TypedDict(
    'LexModelBuildingServiceGetSlotTypeVersionsResponse', {
        'SlotTypeMetadataList': Optional[List[LexModelBuildingServiceSlotTypeMetadata]],
        'NextToken': Optional[str],
    }
)


LexModelBuildingServiceGetSlotTypesResponse = TypedDict(
    'LexModelBuildingServiceGetSlotTypesResponse', {
        'SlotTypeMetadataList': Optional[List[LexModelBuildingServiceSlotTypeMetadata]],
        'NextToken': Optional[str],
    }
)


LexModelBuildingServiceUtteranceData = TypedDict(
    'LexModelBuildingServiceUtteranceData', {
        'UtteranceString': Optional[str],
        'Count': Optional[int],
        'Count': Optional[int],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


LexModelBuildingServiceUtteranceList = TypedDict(
    'LexModelBuildingServiceUtteranceList', {
        'Version': Optional[str],
        'ListOfUtterance': Optional[List[LexModelBuildingServiceUtteranceData]],
    }
)


LexModelBuildingServiceGetUtterancesViewResponse = TypedDict(
    'LexModelBuildingServiceGetUtterancesViewResponse', {
        'BotName': Optional[str],
        'ListsOfUtterances': Optional[List[LexModelBuildingServiceUtteranceList]],
    }
)


LexModelBuildingServicePutBotResponse = TypedDict(
    'LexModelBuildingServicePutBotResponse', {
        'BotName': Optional[str],
        'Description': Optional[str],
        'IntentList': Optional[List[LexModelBuildingServiceIntent]],
        'Prompt': Optional[LexModelBuildingServicePrompt],
        'Statement': Optional[LexModelBuildingServiceStatement],
        'Status': Optional[str],
        'String': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'SessionTTL': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'Version': Optional[str],
        'Locale': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
    }
)


LexModelBuildingServicePutBotAliasResponse = TypedDict(
    'LexModelBuildingServicePutBotAliasResponse', {
        'AliasName': Optional[str],
        'Description': Optional[str],
        'Version': Optional[str],
        'BotName': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'String': Optional[str],
    }
)


LexModelBuildingServicePutIntentResponse = TypedDict(
    'LexModelBuildingServicePutIntentResponse', {
        'IntentName': Optional[str],
        'Description': Optional[str],
        'SlotList': Optional[List[LexModelBuildingServiceSlot]],
        'IntentUtteranceList': Optional[List[str]],
        'Prompt': Optional[LexModelBuildingServicePrompt],
        'Statement': Optional[LexModelBuildingServiceStatement],
        'FollowUpPrompt': Optional[LexModelBuildingServiceFollowUpPrompt],
        'Statement': Optional[LexModelBuildingServiceStatement],
        'CodeHook': Optional[LexModelBuildingServiceCodeHook],
        'FulfillmentActivity': Optional[LexModelBuildingServiceFulfillmentActivity],
        'BuiltinIntentSignature': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Version': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
    }
)


LexModelBuildingServicePutSlotTypeResponse = TypedDict(
    'LexModelBuildingServicePutSlotTypeResponse', {
        'SlotTypeName': Optional[str],
        'Description': Optional[str],
        'EnumerationValues': Optional[List[LexModelBuildingServiceEnumerationValue]],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Version': Optional[str],
        'String': Optional[str],
        'SlotValueSelectionStrategy': Optional[str],
        'Boolean': Optional[bool],
    }
)


LexModelBuildingServiceStartImportResponse = TypedDict(
    'LexModelBuildingServiceStartImportResponse', {
        'Name': Optional[str],
        'ResourceType': Optional[str],
        'MergeStrategy': Optional[str],
        'String': Optional[str],
        'ImportStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


class LexRuntimeService(BaseClient):
    def post_content(self, *,
        botName: str,
        botAlias: str,
        userId: str,
        contentType: str,
        inputStream: bytes,
        sessionAttributes: str = ...,
        requestAttributes: str = ...,
        accept: str = ...
    ) -> LexRuntimeServicePostContentResponse: ...

    def post_text(self, *,
        botName: str,
        botAlias: str,
        userId: str,
        inputText: str,
        sessionAttributes: Dict[str, str] = ...,
        requestAttributes: Dict[str, str] = ...
    ) -> LexRuntimeServicePostTextResponse: ...


LexRuntimeServicePostContentResponse = TypedDict(
    'LexRuntimeServicePostContentResponse', {
        'HttpContentType': Optional[str],
        'IntentName': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Text': Optional[str],
        'MessageFormatType': Optional[str],
        'DialogState': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'BlobStream': Optional[bytes],
    }
)


LexRuntimeServiceButton = TypedDict(
    'LexRuntimeServiceButton', {
        'ButtonTextStringWithLength': str,
        'ButtonValueStringWithLength': str,
    }
)


LexRuntimeServiceGenericAttachment = TypedDict(
    'LexRuntimeServiceGenericAttachment', {
        'StringWithLength': Optional[str],
        'StringWithLength': Optional[str],
        'StringUrlWithLength': Optional[str],
        'StringUrlWithLength': Optional[str],
        'listOfButtons': Optional[List[LexRuntimeServiceButton]],
    }
)


LexRuntimeServiceResponseCard = TypedDict(
    'LexRuntimeServiceResponseCard', {
        'String': Optional[str],
        'ContentType': Optional[str],
        'genericAttachmentList': Optional[List[LexRuntimeServiceGenericAttachment]],
    }
)


LexRuntimeServicePostTextResponse = TypedDict(
    'LexRuntimeServicePostTextResponse', {
        'IntentName': Optional[str],
        'StringMap': Optional[Dict[str, str]],
        'StringMap': Optional[Dict[str, str]],
        'Text': Optional[str],
        'MessageFormatType': Optional[str],
        'DialogState': Optional[str],
        'String': Optional[str],
        'ResponseCard': Optional[LexRuntimeServiceResponseCard],
    }
)


class LicenseManager(BaseClient):
    def create_license_configuration(self, *,
        Name: str,
        LicenseCountingType: str,
        Description: str = ...,
        LicenseCount: int = ...,
        LicenseCountHardLimit: bool = ...,
        LicenseRules: List[str] = ...,
        Tags: List[LicenseManagerTag] = ...
    ) -> LicenseManagerCreateLicenseConfigurationResponse: ...

    def delete_license_configuration(self, *,
        LicenseConfigurationArn: str
    ) -> LicenseManagerDeleteLicenseConfigurationResponse: ...

    def get_license_configuration(self, *,
        LicenseConfigurationArn: str
    ) -> LicenseManagerGetLicenseConfigurationResponse: ...

    def get_service_settings(self) -> LicenseManagerGetServiceSettingsResponse: ...

    def list_associations_for_license_configuration(self, *,
        LicenseConfigurationArn: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> LicenseManagerListAssociationsForLicenseConfigurationResponse: ...

    def list_license_configurations(self, *,
        LicenseConfigurationArns: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        Filters: List[LicenseManagerFilter] = ...
    ) -> LicenseManagerListLicenseConfigurationsResponse: ...

    def list_license_specifications_for_resource(self, *,
        ResourceArn: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> LicenseManagerListLicenseSpecificationsForResourceResponse: ...

    def list_resource_inventory(self, *,
        MaxResults: int = ...,
        NextToken: str = ...,
        Filters: List[LicenseManagerInventoryFilter] = ...
    ) -> LicenseManagerListResourceInventoryResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> LicenseManagerListTagsForResourceResponse: ...

    def list_usage_for_license_configuration(self, *,
        LicenseConfigurationArn: str,
        MaxResults: int = ...,
        NextToken: str = ...,
        Filters: List[LicenseManagerFilter] = ...
    ) -> LicenseManagerListUsageForLicenseConfigurationResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: List[LicenseManagerTag]
    ) -> LicenseManagerTagResourceResponse: ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ) -> LicenseManagerUntagResourceResponse: ...

    def update_license_configuration(self, *,
        LicenseConfigurationArn: str,
        LicenseConfigurationStatus: str = ...,
        LicenseRules: List[str] = ...,
        LicenseCount: int = ...,
        LicenseCountHardLimit: bool = ...,
        Name: str = ...,
        Description: str = ...
    ) -> LicenseManagerUpdateLicenseConfigurationResponse: ...

    def update_license_specifications_for_resource(self, *,
        ResourceArn: str,
        AddLicenseSpecifications: List[LicenseManagerLicenseSpecification] = ...,
        RemoveLicenseSpecifications: List[LicenseManagerLicenseSpecification] = ...
    ) -> LicenseManagerUpdateLicenseSpecificationsForResourceResponse: ...

    def update_service_settings(self, *,
        S3BucketArn: str = ...,
        SnsTopicArn: str = ...,
        OrganizationConfiguration: LicenseManagerOrganizationConfiguration = ...,
        EnableCrossAccountsDiscovery: bool = ...
    ) -> LicenseManagerUpdateServiceSettingsResponse: ...


LicenseManagerTag = TypedDict(
    'LicenseManagerTag', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


LicenseManagerCreateLicenseConfigurationResponse = TypedDict(
    'LicenseManagerCreateLicenseConfigurationResponse', {
        'String': Optional[str],
    }
)


LicenseManagerDeleteLicenseConfigurationResponse = TypedDict(
    'LicenseManagerDeleteLicenseConfigurationResponse', {
    }
)


LicenseManagerConsumedLicenseSummary = TypedDict(
    'LicenseManagerConsumedLicenseSummary', {
        'ResourceType': Optional[str],
        'BoxLong': Optional[int],
    }
)


LicenseManagerManagedResourceSummary = TypedDict(
    'LicenseManagerManagedResourceSummary', {
        'ResourceType': Optional[str],
        'BoxLong': Optional[int],
    }
)


LicenseManagerGetLicenseConfigurationResponse = TypedDict(
    'LicenseManagerGetLicenseConfigurationResponse', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'LicenseCountingType': Optional[str],
        'StringList': Optional[List[str]],
        'BoxLong': Optional[int],
        'BoxBoolean': Optional[bool],
        'BoxLong': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'ConsumedLicenseSummaryList': Optional[List[LicenseManagerConsumedLicenseSummary]],
        'ManagedResourceSummaryList': Optional[List[LicenseManagerManagedResourceSummary]],
        'TagList': Optional[List[LicenseManagerTag]],
    }
)


LicenseManagerOrganizationConfiguration = TypedDict(
    'LicenseManagerOrganizationConfiguration', {
        'Boolean': bool,
    }
)


LicenseManagerGetServiceSettingsResponse = TypedDict(
    'LicenseManagerGetServiceSettingsResponse', {
        'String': Optional[str],
        'String': Optional[str],
        'OrganizationConfiguration': Optional[LicenseManagerOrganizationConfiguration],
        'BoxBoolean': Optional[bool],
    }
)


LicenseManagerLicenseConfigurationAssociation = TypedDict(
    'LicenseManagerLicenseConfigurationAssociation', {
        'String': Optional[str],
        'ResourceType': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
    }
)


LicenseManagerListAssociationsForLicenseConfigurationResponse = TypedDict(
    'LicenseManagerListAssociationsForLicenseConfigurationResponse', {
        'LicenseConfigurationAssociations': Optional[List[LicenseManagerLicenseConfigurationAssociation]],
        'String': Optional[str],
    }
)


LicenseManagerFilter = TypedDict(
    'LicenseManagerFilter', {
        'FilterName': Optional[str],
        'FilterValues': Optional[List[str]],
    }
)


LicenseManagerLicenseConfiguration = TypedDict(
    'LicenseManagerLicenseConfiguration', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'LicenseCountingType': Optional[str],
        'StringList': Optional[List[str]],
        'BoxLong': Optional[int],
        'BoxBoolean': Optional[bool],
        'BoxLong': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'ConsumedLicenseSummaryList': Optional[List[LicenseManagerConsumedLicenseSummary]],
        'ManagedResourceSummaryList': Optional[List[LicenseManagerManagedResourceSummary]],
    }
)


LicenseManagerListLicenseConfigurationsResponse = TypedDict(
    'LicenseManagerListLicenseConfigurationsResponse', {
        'LicenseConfigurations': Optional[List[LicenseManagerLicenseConfiguration]],
        'String': Optional[str],
    }
)


LicenseManagerLicenseSpecification = TypedDict(
    'LicenseManagerLicenseSpecification', {
        'String': str,
    }
)


LicenseManagerListLicenseSpecificationsForResourceResponse = TypedDict(
    'LicenseManagerListLicenseSpecificationsForResourceResponse', {
        'LicenseSpecifications': Optional[List[LicenseManagerLicenseSpecification]],
        'String': Optional[str],
    }
)


LicenseManagerInventoryFilter = TypedDict(
    'LicenseManagerInventoryFilter', {
        'String': str,
        'InventoryFilterCondition': str,
        'String': Optional[str],
    }
)


LicenseManagerResourceInventory = TypedDict(
    'LicenseManagerResourceInventory', {
        'String': Optional[str],
        'ResourceType': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


LicenseManagerListResourceInventoryResponse = TypedDict(
    'LicenseManagerListResourceInventoryResponse', {
        'ResourceInventoryList': Optional[List[LicenseManagerResourceInventory]],
        'String': Optional[str],
    }
)


LicenseManagerListTagsForResourceResponse = TypedDict(
    'LicenseManagerListTagsForResourceResponse', {
        'TagList': Optional[List[LicenseManagerTag]],
    }
)


LicenseManagerLicenseConfigurationUsage = TypedDict(
    'LicenseManagerLicenseConfigurationUsage', {
        'String': Optional[str],
        'ResourceType': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'BoxLong': Optional[int],
    }
)


LicenseManagerListUsageForLicenseConfigurationResponse = TypedDict(
    'LicenseManagerListUsageForLicenseConfigurationResponse', {
        'LicenseConfigurationUsageList': Optional[List[LicenseManagerLicenseConfigurationUsage]],
        'String': Optional[str],
    }
)


LicenseManagerTagResourceResponse = TypedDict(
    'LicenseManagerTagResourceResponse', {
    }
)


LicenseManagerUntagResourceResponse = TypedDict(
    'LicenseManagerUntagResourceResponse', {
    }
)


LicenseManagerUpdateLicenseConfigurationResponse = TypedDict(
    'LicenseManagerUpdateLicenseConfigurationResponse', {
    }
)


LicenseManagerUpdateLicenseSpecificationsForResourceResponse = TypedDict(
    'LicenseManagerUpdateLicenseSpecificationsForResourceResponse', {
    }
)


LicenseManagerUpdateServiceSettingsResponse = TypedDict(
    'LicenseManagerUpdateServiceSettingsResponse', {
    }
)


class Lightsail(BaseClient):
    def allocate_static_ip(self, *,
        staticIpName: str
    ) -> LightsailAllocateStaticIpResult: ...

    def attach_disk(self, *,
        diskName: str,
        instanceName: str,
        diskPath: str
    ) -> LightsailAttachDiskResult: ...

    def attach_instances_to_load_balancer(self, *,
        loadBalancerName: str,
        instanceNames: List[str]
    ) -> LightsailAttachInstancesToLoadBalancerResult: ...

    def attach_load_balancer_tls_certificate(self, *,
        loadBalancerName: str,
        certificateName: str
    ) -> LightsailAttachLoadBalancerTlsCertificateResult: ...

    def attach_static_ip(self, *,
        staticIpName: str,
        instanceName: str
    ) -> LightsailAttachStaticIpResult: ...

    def close_instance_public_ports(self, *,
        portInfo: LightsailPortInfo,
        instanceName: str
    ) -> LightsailCloseInstancePublicPortsResult: ...

    def copy_snapshot(self, *,
        sourceSnapshotName: str,
        targetSnapshotName: str,
        sourceRegion: str
    ) -> LightsailCopySnapshotResult: ...

    def create_cloud_formation_stack(self, *,
        instances: List[LightsailInstanceEntry]
    ) -> LightsailCreateCloudFormationStackResult: ...

    def create_disk(self, *,
        diskName: str,
        availabilityZone: str,
        sizeInGb: int,
        tags: List[LightsailTag] = ...
    ) -> LightsailCreateDiskResult: ...

    def create_disk_from_snapshot(self, *,
        diskName: str,
        diskSnapshotName: str,
        availabilityZone: str,
        sizeInGb: int,
        tags: List[LightsailTag] = ...
    ) -> LightsailCreateDiskFromSnapshotResult: ...

    def create_disk_snapshot(self, *,
        diskSnapshotName: str,
        diskName: str = ...,
        instanceName: str = ...,
        tags: List[LightsailTag] = ...
    ) -> LightsailCreateDiskSnapshotResult: ...

    def create_domain(self, *,
        domainName: str,
        tags: List[LightsailTag] = ...
    ) -> LightsailCreateDomainResult: ...

    def create_domain_entry(self, *,
        domainName: str,
        domainEntry: LightsailDomainEntry
    ) -> LightsailCreateDomainEntryResult: ...

    def create_instance_snapshot(self, *,
        instanceSnapshotName: str,
        instanceName: str,
        tags: List[LightsailTag] = ...
    ) -> LightsailCreateInstanceSnapshotResult: ...

    def create_instances(self, *,
        instanceNames: List[str],
        availabilityZone: str,
        blueprintId: str,
        bundleId: str,
        customImageName: str = ...,
        userData: str = ...,
        keyPairName: str = ...,
        tags: List[LightsailTag] = ...
    ) -> LightsailCreateInstancesResult: ...

    def create_instances_from_snapshot(self, *,
        instanceNames: List[str],
        availabilityZone: str,
        instanceSnapshotName: str,
        bundleId: str,
        attachedDiskMapping: Dict[str, List[LightsailDiskMap]] = ...,
        userData: str = ...,
        keyPairName: str = ...,
        tags: List[LightsailTag] = ...
    ) -> LightsailCreateInstancesFromSnapshotResult: ...

    def create_key_pair(self, *,
        keyPairName: str,
        tags: List[LightsailTag] = ...
    ) -> LightsailCreateKeyPairResult: ...

    def create_load_balancer(self, *,
        loadBalancerName: str,
        instancePort: int,
        healthCheckPath: str = ...,
        certificateName: str = ...,
        certificateDomainName: str = ...,
        certificateAlternativeNames: List[str] = ...,
        tags: List[LightsailTag] = ...
    ) -> LightsailCreateLoadBalancerResult: ...

    def create_load_balancer_tls_certificate(self, *,
        loadBalancerName: str,
        certificateName: str,
        certificateDomainName: str,
        certificateAlternativeNames: List[str] = ...,
        tags: List[LightsailTag] = ...
    ) -> LightsailCreateLoadBalancerTlsCertificateResult: ...

    def create_relational_database(self, *,
        relationalDatabaseName: str,
        relationalDatabaseBlueprintId: str,
        relationalDatabaseBundleId: str,
        masterDatabaseName: str,
        masterUsername: str,
        availabilityZone: str = ...,
        masterUserPassword: str = ...,
        preferredBackupWindow: str = ...,
        preferredMaintenanceWindow: str = ...,
        publiclyAccessible: bool = ...,
        tags: List[LightsailTag] = ...
    ) -> LightsailCreateRelationalDatabaseResult: ...

    def create_relational_database_from_snapshot(self, *,
        relationalDatabaseName: str,
        availabilityZone: str = ...,
        publiclyAccessible: bool = ...,
        relationalDatabaseSnapshotName: str = ...,
        relationalDatabaseBundleId: str = ...,
        sourceRelationalDatabaseName: str = ...,
        restoreTime: datetime.datetime = ...,
        useLatestRestorableTime: bool = ...,
        tags: List[LightsailTag] = ...
    ) -> LightsailCreateRelationalDatabaseFromSnapshotResult: ...

    def create_relational_database_snapshot(self, *,
        relationalDatabaseName: str,
        relationalDatabaseSnapshotName: str,
        tags: List[LightsailTag] = ...
    ) -> LightsailCreateRelationalDatabaseSnapshotResult: ...

    def delete_disk(self, *,
        diskName: str
    ) -> LightsailDeleteDiskResult: ...

    def delete_disk_snapshot(self, *,
        diskSnapshotName: str
    ) -> LightsailDeleteDiskSnapshotResult: ...

    def delete_domain(self, *,
        domainName: str
    ) -> LightsailDeleteDomainResult: ...

    def delete_domain_entry(self, *,
        domainName: str,
        domainEntry: LightsailDomainEntry
    ) -> LightsailDeleteDomainEntryResult: ...

    def delete_instance(self, *,
        instanceName: str
    ) -> LightsailDeleteInstanceResult: ...

    def delete_instance_snapshot(self, *,
        instanceSnapshotName: str
    ) -> LightsailDeleteInstanceSnapshotResult: ...

    def delete_key_pair(self, *,
        keyPairName: str
    ) -> LightsailDeleteKeyPairResult: ...

    def delete_known_host_keys(self, *,
        instanceName: str
    ) -> LightsailDeleteKnownHostKeysResult: ...

    def delete_load_balancer(self, *,
        loadBalancerName: str
    ) -> LightsailDeleteLoadBalancerResult: ...

    def delete_load_balancer_tls_certificate(self, *,
        loadBalancerName: str,
        certificateName: str,
        force: bool = ...
    ) -> LightsailDeleteLoadBalancerTlsCertificateResult: ...

    def delete_relational_database(self, *,
        relationalDatabaseName: str,
        skipFinalSnapshot: bool = ...,
        finalRelationalDatabaseSnapshotName: str = ...
    ) -> LightsailDeleteRelationalDatabaseResult: ...

    def delete_relational_database_snapshot(self, *,
        relationalDatabaseSnapshotName: str
    ) -> LightsailDeleteRelationalDatabaseSnapshotResult: ...

    def detach_disk(self, *,
        diskName: str
    ) -> LightsailDetachDiskResult: ...

    def detach_instances_from_load_balancer(self, *,
        loadBalancerName: str,
        instanceNames: List[str]
    ) -> LightsailDetachInstancesFromLoadBalancerResult: ...

    def detach_static_ip(self, *,
        staticIpName: str
    ) -> LightsailDetachStaticIpResult: ...

    def download_default_key_pair(self) -> LightsailDownloadDefaultKeyPairResult: ...

    def export_snapshot(self, *,
        sourceSnapshotName: str
    ) -> LightsailExportSnapshotResult: ...

    def get_active_names(self, *,
        pageToken: str = ...
    ) -> LightsailGetActiveNamesResult: ...

    def get_blueprints(self, *,
        includeInactive: bool = ...,
        pageToken: str = ...
    ) -> LightsailGetBlueprintsResult: ...

    def get_bundles(self, *,
        includeInactive: bool = ...,
        pageToken: str = ...
    ) -> LightsailGetBundlesResult: ...

    def get_cloud_formation_stack_records(self, *,
        pageToken: str = ...
    ) -> LightsailGetCloudFormationStackRecordsResult: ...

    def get_disk(self, *,
        diskName: str
    ) -> LightsailGetDiskResult: ...

    def get_disk_snapshot(self, *,
        diskSnapshotName: str
    ) -> LightsailGetDiskSnapshotResult: ...

    def get_disk_snapshots(self, *,
        pageToken: str = ...
    ) -> LightsailGetDiskSnapshotsResult: ...

    def get_disks(self, *,
        pageToken: str = ...
    ) -> LightsailGetDisksResult: ...

    def get_domain(self, *,
        domainName: str
    ) -> LightsailGetDomainResult: ...

    def get_domains(self, *,
        pageToken: str = ...
    ) -> LightsailGetDomainsResult: ...

    def get_export_snapshot_records(self, *,
        pageToken: str = ...
    ) -> LightsailGetExportSnapshotRecordsResult: ...

    def get_instance(self, *,
        instanceName: str
    ) -> LightsailGetInstanceResult: ...

    def get_instance_access_details(self, *,
        instanceName: str,
        protocol: str = ...
    ) -> LightsailGetInstanceAccessDetailsResult: ...

    def get_instance_metric_data(self, *,
        instanceName: str,
        metricName: str,
        period: int,
        startTime: datetime.datetime,
        endTime: datetime.datetime,
        unit: str,
        statistics: List[str]
    ) -> LightsailGetInstanceMetricDataResult: ...

    def get_instance_port_states(self, *,
        instanceName: str
    ) -> LightsailGetInstancePortStatesResult: ...

    def get_instance_snapshot(self, *,
        instanceSnapshotName: str
    ) -> LightsailGetInstanceSnapshotResult: ...

    def get_instance_snapshots(self, *,
        pageToken: str = ...
    ) -> LightsailGetInstanceSnapshotsResult: ...

    def get_instance_state(self, *,
        instanceName: str
    ) -> LightsailGetInstanceStateResult: ...

    def get_instances(self, *,
        pageToken: str = ...
    ) -> LightsailGetInstancesResult: ...

    def get_key_pair(self, *,
        keyPairName: str
    ) -> LightsailGetKeyPairResult: ...

    def get_key_pairs(self, *,
        pageToken: str = ...
    ) -> LightsailGetKeyPairsResult: ...

    def get_load_balancer(self, *,
        loadBalancerName: str
    ) -> LightsailGetLoadBalancerResult: ...

    def get_load_balancer_metric_data(self, *,
        loadBalancerName: str,
        metricName: str,
        period: int,
        startTime: datetime.datetime,
        endTime: datetime.datetime,
        unit: str,
        statistics: List[str]
    ) -> LightsailGetLoadBalancerMetricDataResult: ...

    def get_load_balancer_tls_certificates(self, *,
        loadBalancerName: str
    ) -> LightsailGetLoadBalancerTlsCertificatesResult: ...

    def get_load_balancers(self, *,
        pageToken: str = ...
    ) -> LightsailGetLoadBalancersResult: ...

    def get_operation(self, *,
        operationId: str
    ) -> LightsailGetOperationResult: ...

    def get_operations(self, *,
        pageToken: str = ...
    ) -> LightsailGetOperationsResult: ...

    def get_operations_for_resource(self, *,
        resourceName: str,
        pageToken: str = ...
    ) -> LightsailGetOperationsForResourceResult: ...

    def get_regions(self, *,
        includeAvailabilityZones: bool = ...,
        includeRelationalDatabaseAvailabilityZones: bool = ...
    ) -> LightsailGetRegionsResult: ...

    def get_relational_database(self, *,
        relationalDatabaseName: str
    ) -> LightsailGetRelationalDatabaseResult: ...

    def get_relational_database_blueprints(self, *,
        pageToken: str = ...
    ) -> LightsailGetRelationalDatabaseBlueprintsResult: ...

    def get_relational_database_bundles(self, *,
        pageToken: str = ...
    ) -> LightsailGetRelationalDatabaseBundlesResult: ...

    def get_relational_database_events(self, *,
        relationalDatabaseName: str,
        durationInMinutes: int = ...,
        pageToken: str = ...
    ) -> LightsailGetRelationalDatabaseEventsResult: ...

    def get_relational_database_log_events(self, *,
        relationalDatabaseName: str,
        logStreamName: str,
        startTime: datetime.datetime = ...,
        endTime: datetime.datetime = ...,
        startFromHead: bool = ...,
        pageToken: str = ...
    ) -> LightsailGetRelationalDatabaseLogEventsResult: ...

    def get_relational_database_log_streams(self, *,
        relationalDatabaseName: str
    ) -> LightsailGetRelationalDatabaseLogStreamsResult: ...

    def get_relational_database_master_user_password(self, *,
        relationalDatabaseName: str,
        passwordVersion: str = ...
    ) -> LightsailGetRelationalDatabaseMasterUserPasswordResult: ...

    def get_relational_database_metric_data(self, *,
        relationalDatabaseName: str,
        metricName: str,
        period: int,
        startTime: datetime.datetime,
        endTime: datetime.datetime,
        unit: str,
        statistics: List[str]
    ) -> LightsailGetRelationalDatabaseMetricDataResult: ...

    def get_relational_database_parameters(self, *,
        relationalDatabaseName: str,
        pageToken: str = ...
    ) -> LightsailGetRelationalDatabaseParametersResult: ...

    def get_relational_database_snapshot(self, *,
        relationalDatabaseSnapshotName: str
    ) -> LightsailGetRelationalDatabaseSnapshotResult: ...

    def get_relational_database_snapshots(self, *,
        pageToken: str = ...
    ) -> LightsailGetRelationalDatabaseSnapshotsResult: ...

    def get_relational_databases(self, *,
        pageToken: str = ...
    ) -> LightsailGetRelationalDatabasesResult: ...

    def get_static_ip(self, *,
        staticIpName: str
    ) -> LightsailGetStaticIpResult: ...

    def get_static_ips(self, *,
        pageToken: str = ...
    ) -> LightsailGetStaticIpsResult: ...

    def import_key_pair(self, *,
        keyPairName: str,
        publicKeyBase64: str
    ) -> LightsailImportKeyPairResult: ...

    def is_vpc_peered(self) -> LightsailIsVpcPeeredResult: ...

    def open_instance_public_ports(self, *,
        portInfo: LightsailPortInfo,
        instanceName: str
    ) -> LightsailOpenInstancePublicPortsResult: ...

    def peer_vpc(self) -> LightsailPeerVpcResult: ...

    def put_instance_public_ports(self, *,
        portInfos: List[LightsailPortInfo],
        instanceName: str
    ) -> LightsailPutInstancePublicPortsResult: ...

    def reboot_instance(self, *,
        instanceName: str
    ) -> LightsailRebootInstanceResult: ...

    def reboot_relational_database(self, *,
        relationalDatabaseName: str
    ) -> LightsailRebootRelationalDatabaseResult: ...

    def release_static_ip(self, *,
        staticIpName: str
    ) -> LightsailReleaseStaticIpResult: ...

    def start_instance(self, *,
        instanceName: str
    ) -> LightsailStartInstanceResult: ...

    def start_relational_database(self, *,
        relationalDatabaseName: str
    ) -> LightsailStartRelationalDatabaseResult: ...

    def stop_instance(self, *,
        instanceName: str,
        force: bool = ...
    ) -> LightsailStopInstanceResult: ...

    def stop_relational_database(self, *,
        relationalDatabaseName: str,
        relationalDatabaseSnapshotName: str = ...
    ) -> LightsailStopRelationalDatabaseResult: ...

    def tag_resource(self, *,
        resourceName: str,
        tags: List[LightsailTag]
    ) -> LightsailTagResourceResult: ...

    def unpeer_vpc(self) -> LightsailUnpeerVpcResult: ...

    def untag_resource(self, *,
        resourceName: str,
        tagKeys: List[str]
    ) -> LightsailUntagResourceResult: ...

    def update_domain_entry(self, *,
        domainName: str,
        domainEntry: LightsailDomainEntry
    ) -> LightsailUpdateDomainEntryResult: ...

    def update_load_balancer_attribute(self, *,
        loadBalancerName: str,
        attributeName: str,
        attributeValue: str
    ) -> LightsailUpdateLoadBalancerAttributeResult: ...

    def update_relational_database(self, *,
        relationalDatabaseName: str,
        masterUserPassword: str = ...,
        rotateMasterUserPassword: bool = ...,
        preferredBackupWindow: str = ...,
        preferredMaintenanceWindow: str = ...,
        enableBackupRetention: bool = ...,
        disableBackupRetention: bool = ...,
        publiclyAccessible: bool = ...,
        applyImmediately: bool = ...
    ) -> LightsailUpdateRelationalDatabaseResult: ...

    def update_relational_database_parameters(self, *,
        relationalDatabaseName: str,
        parameters: List[LightsailRelationalDatabaseParameter]
    ) -> LightsailUpdateRelationalDatabaseParametersResult: ...


LightsailResourceLocation = TypedDict(
    'LightsailResourceLocation', {
        'string': Optional[str],
        'RegionName': Optional[str],
    }
)


LightsailOperation = TypedDict(
    'LightsailOperation', {
        'NonEmptyString': Optional[str],
        'ResourceName': Optional[str],
        'ResourceType': Optional[str],
        'IsoDate': Optional[datetime.datetime],
        'ResourceLocation': Optional[LightsailResourceLocation],
        'boolean': Optional[bool],
        'string': Optional[str],
        'OperationType': Optional[str],
        'OperationStatus': Optional[str],
        'IsoDate': Optional[datetime.datetime],
        'string': Optional[str],
        'string': Optional[str],
    }
)


LightsailAllocateStaticIpResult = TypedDict(
    'LightsailAllocateStaticIpResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailAttachDiskResult = TypedDict(
    'LightsailAttachDiskResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailAttachInstancesToLoadBalancerResult = TypedDict(
    'LightsailAttachInstancesToLoadBalancerResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailAttachLoadBalancerTlsCertificateResult = TypedDict(
    'LightsailAttachLoadBalancerTlsCertificateResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailAttachStaticIpResult = TypedDict(
    'LightsailAttachStaticIpResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailPortInfo = TypedDict(
    'LightsailPortInfo', {
        'Port': Optional[int],
        'Port': Optional[int],
        'NetworkProtocol': Optional[str],
    }
)


LightsailCloseInstancePublicPortsResult = TypedDict(
    'LightsailCloseInstancePublicPortsResult', {
        'Operation': Optional[LightsailOperation],
    }
)


LightsailCopySnapshotResult = TypedDict(
    'LightsailCopySnapshotResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailInstanceEntry = TypedDict(
    'LightsailInstanceEntry', {
        'ResourceName': str,
        'NonEmptyString': str,
        'PortInfoSourceType': str,
        'string': str,
        'string': Optional[str],
    }
)


LightsailCreateCloudFormationStackResult = TypedDict(
    'LightsailCreateCloudFormationStackResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailTag = TypedDict(
    'LightsailTag', {
        'TagKey': Optional[str],
        'TagValue': Optional[str],
    }
)


LightsailCreateDiskResult = TypedDict(
    'LightsailCreateDiskResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailCreateDiskFromSnapshotResult = TypedDict(
    'LightsailCreateDiskFromSnapshotResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailCreateDiskSnapshotResult = TypedDict(
    'LightsailCreateDiskSnapshotResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailCreateDomainResult = TypedDict(
    'LightsailCreateDomainResult', {
        'Operation': Optional[LightsailOperation],
    }
)


LightsailDomainEntry = TypedDict(
    'LightsailDomainEntry', {
        'NonEmptyString': Optional[str],
        'DomainName': Optional[str],
        'string': Optional[str],
        'boolean': Optional[bool],
        'DomainEntryType': Optional[str],
        'DomainEntryOptions': Optional[Dict[str, str]],
    }
)


LightsailCreateDomainEntryResult = TypedDict(
    'LightsailCreateDomainEntryResult', {
        'Operation': Optional[LightsailOperation],
    }
)


LightsailCreateInstanceSnapshotResult = TypedDict(
    'LightsailCreateInstanceSnapshotResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailCreateInstancesResult = TypedDict(
    'LightsailCreateInstancesResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailDiskMap = TypedDict(
    'LightsailDiskMap', {
        'NonEmptyString': Optional[str],
        'ResourceName': Optional[str],
    }
)


LightsailCreateInstancesFromSnapshotResult = TypedDict(
    'LightsailCreateInstancesFromSnapshotResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailKeyPair = TypedDict(
    'LightsailKeyPair', {
        'ResourceName': Optional[str],
        'NonEmptyString': Optional[str],
        'string': Optional[str],
        'IsoDate': Optional[datetime.datetime],
        'ResourceLocation': Optional[LightsailResourceLocation],
        'ResourceType': Optional[str],
        'TagList': Optional[List[LightsailTag]],
        'Base64': Optional[str],
    }
)


LightsailCreateKeyPairResult = TypedDict(
    'LightsailCreateKeyPairResult', {
        'KeyPair': Optional[LightsailKeyPair],
        'Base64': Optional[str],
        'Base64': Optional[str],
        'Operation': Optional[LightsailOperation],
    }
)


LightsailCreateLoadBalancerResult = TypedDict(
    'LightsailCreateLoadBalancerResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailCreateLoadBalancerTlsCertificateResult = TypedDict(
    'LightsailCreateLoadBalancerTlsCertificateResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailCreateRelationalDatabaseResult = TypedDict(
    'LightsailCreateRelationalDatabaseResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailCreateRelationalDatabaseFromSnapshotResult = TypedDict(
    'LightsailCreateRelationalDatabaseFromSnapshotResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailCreateRelationalDatabaseSnapshotResult = TypedDict(
    'LightsailCreateRelationalDatabaseSnapshotResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailDeleteDiskResult = TypedDict(
    'LightsailDeleteDiskResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailDeleteDiskSnapshotResult = TypedDict(
    'LightsailDeleteDiskSnapshotResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailDeleteDomainResult = TypedDict(
    'LightsailDeleteDomainResult', {
        'Operation': Optional[LightsailOperation],
    }
)


LightsailDeleteDomainEntryResult = TypedDict(
    'LightsailDeleteDomainEntryResult', {
        'Operation': Optional[LightsailOperation],
    }
)


LightsailDeleteInstanceResult = TypedDict(
    'LightsailDeleteInstanceResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailDeleteInstanceSnapshotResult = TypedDict(
    'LightsailDeleteInstanceSnapshotResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailDeleteKeyPairResult = TypedDict(
    'LightsailDeleteKeyPairResult', {
        'Operation': Optional[LightsailOperation],
    }
)


LightsailDeleteKnownHostKeysResult = TypedDict(
    'LightsailDeleteKnownHostKeysResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailDeleteLoadBalancerResult = TypedDict(
    'LightsailDeleteLoadBalancerResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailDeleteLoadBalancerTlsCertificateResult = TypedDict(
    'LightsailDeleteLoadBalancerTlsCertificateResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailDeleteRelationalDatabaseResult = TypedDict(
    'LightsailDeleteRelationalDatabaseResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailDeleteRelationalDatabaseSnapshotResult = TypedDict(
    'LightsailDeleteRelationalDatabaseSnapshotResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailDetachDiskResult = TypedDict(
    'LightsailDetachDiskResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailDetachInstancesFromLoadBalancerResult = TypedDict(
    'LightsailDetachInstancesFromLoadBalancerResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailDetachStaticIpResult = TypedDict(
    'LightsailDetachStaticIpResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailDownloadDefaultKeyPairResult = TypedDict(
    'LightsailDownloadDefaultKeyPairResult', {
        'Base64': Optional[str],
        'Base64': Optional[str],
    }
)


LightsailExportSnapshotResult = TypedDict(
    'LightsailExportSnapshotResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailGetActiveNamesResult = TypedDict(
    'LightsailGetActiveNamesResult', {
        'StringList': Optional[List[str]],
        'string': Optional[str],
    }
)


LightsailBlueprint = TypedDict(
    'LightsailBlueprint', {
        'NonEmptyString': Optional[str],
        'ResourceName': Optional[str],
        'NonEmptyString': Optional[str],
        'BlueprintType': Optional[str],
        'string': Optional[str],
        'boolean': Optional[bool],
        'integer': Optional[int],
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'InstancePlatform': Optional[str],
    }
)


LightsailGetBlueprintsResult = TypedDict(
    'LightsailGetBlueprintsResult', {
        'BlueprintList': Optional[List[LightsailBlueprint]],
        'string': Optional[str],
    }
)


LightsailBundle = TypedDict(
    'LightsailBundle', {
        'float': Optional[float],
        'integer': Optional[int],
        'integer': Optional[int],
        'NonEmptyString': Optional[str],
        'string': Optional[str],
        'boolean': Optional[bool],
        'string': Optional[str],
        'integer': Optional[int],
        'float': Optional[float],
        'integer': Optional[int],
        'InstancePlatformList': Optional[List[str]],
    }
)


LightsailGetBundlesResult = TypedDict(
    'LightsailGetBundlesResult', {
        'BundleList': Optional[List[LightsailBundle]],
        'string': Optional[str],
    }
)


LightsailCloudFormationStackRecordSourceInfo = TypedDict(
    'LightsailCloudFormationStackRecordSourceInfo', {
        'CloudFormationStackRecordSourceType': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
    }
)


LightsailDestinationInfo = TypedDict(
    'LightsailDestinationInfo', {
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
    }
)


LightsailCloudFormationStackRecord = TypedDict(
    'LightsailCloudFormationStackRecord', {
        'ResourceName': Optional[str],
        'NonEmptyString': Optional[str],
        'IsoDate': Optional[datetime.datetime],
        'ResourceLocation': Optional[LightsailResourceLocation],
        'ResourceType': Optional[str],
        'RecordState': Optional[str],
        'CloudFormationStackRecordSourceInfoList': Optional[List[LightsailCloudFormationStackRecordSourceInfo]],
        'DestinationInfo': Optional[LightsailDestinationInfo],
    }
)


LightsailGetCloudFormationStackRecordsResult = TypedDict(
    'LightsailGetCloudFormationStackRecordsResult', {
        'CloudFormationStackRecordList': Optional[List[LightsailCloudFormationStackRecord]],
        'string': Optional[str],
    }
)


LightsailDisk = TypedDict(
    'LightsailDisk', {
        'ResourceName': Optional[str],
        'NonEmptyString': Optional[str],
        'string': Optional[str],
        'IsoDate': Optional[datetime.datetime],
        'ResourceLocation': Optional[LightsailResourceLocation],
        'ResourceType': Optional[str],
        'TagList': Optional[List[LightsailTag]],
        'integer': Optional[int],
        'boolean': Optional[bool],
        'integer': Optional[int],
        'string': Optional[str],
        'DiskState': Optional[str],
        'ResourceName': Optional[str],
        'boolean': Optional[bool],
        'string': Optional[str],
        'integer': Optional[int],
    }
)


LightsailGetDiskResult = TypedDict(
    'LightsailGetDiskResult', {
        'Disk': Optional[LightsailDisk],
    }
)


LightsailDiskSnapshot = TypedDict(
    'LightsailDiskSnapshot', {
        'ResourceName': Optional[str],
        'NonEmptyString': Optional[str],
        'string': Optional[str],
        'IsoDate': Optional[datetime.datetime],
        'ResourceLocation': Optional[LightsailResourceLocation],
        'ResourceType': Optional[str],
        'TagList': Optional[List[LightsailTag]],
        'integer': Optional[int],
        'DiskSnapshotState': Optional[str],
        'string': Optional[str],
        'ResourceName': Optional[str],
        'NonEmptyString': Optional[str],
        'ResourceName': Optional[str],
        'NonEmptyString': Optional[str],
    }
)


LightsailGetDiskSnapshotResult = TypedDict(
    'LightsailGetDiskSnapshotResult', {
        'DiskSnapshot': Optional[LightsailDiskSnapshot],
    }
)


LightsailGetDiskSnapshotsResult = TypedDict(
    'LightsailGetDiskSnapshotsResult', {
        'DiskSnapshotList': Optional[List[LightsailDiskSnapshot]],
        'string': Optional[str],
    }
)


LightsailGetDisksResult = TypedDict(
    'LightsailGetDisksResult', {
        'DiskList': Optional[List[LightsailDisk]],
        'string': Optional[str],
    }
)


LightsailDomain = TypedDict(
    'LightsailDomain', {
        'ResourceName': Optional[str],
        'NonEmptyString': Optional[str],
        'string': Optional[str],
        'IsoDate': Optional[datetime.datetime],
        'ResourceLocation': Optional[LightsailResourceLocation],
        'ResourceType': Optional[str],
        'TagList': Optional[List[LightsailTag]],
        'DomainEntryList': Optional[List[LightsailDomainEntry]],
    }
)


LightsailGetDomainResult = TypedDict(
    'LightsailGetDomainResult', {
        'Domain': Optional[LightsailDomain],
    }
)


LightsailGetDomainsResult = TypedDict(
    'LightsailGetDomainsResult', {
        'DomainList': Optional[List[LightsailDomain]],
        'string': Optional[str],
    }
)


LightsailDiskInfo = TypedDict(
    'LightsailDiskInfo', {
        'string': Optional[str],
        'NonEmptyString': Optional[str],
        'integer': Optional[int],
        'boolean': Optional[bool],
    }
)


LightsailInstanceSnapshotInfo = TypedDict(
    'LightsailInstanceSnapshotInfo', {
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'DiskInfoList': Optional[List[LightsailDiskInfo]],
    }
)


LightsailDiskSnapshotInfo = TypedDict(
    'LightsailDiskSnapshotInfo', {
        'integer': Optional[int],
    }
)


LightsailExportSnapshotRecordSourceInfo = TypedDict(
    'LightsailExportSnapshotRecordSourceInfo', {
        'ExportSnapshotRecordSourceType': Optional[str],
        'IsoDate': Optional[datetime.datetime],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'InstanceSnapshotInfo': Optional[LightsailInstanceSnapshotInfo],
        'DiskSnapshotInfo': Optional[LightsailDiskSnapshotInfo],
    }
)


LightsailExportSnapshotRecord = TypedDict(
    'LightsailExportSnapshotRecord', {
        'ResourceName': Optional[str],
        'NonEmptyString': Optional[str],
        'IsoDate': Optional[datetime.datetime],
        'ResourceLocation': Optional[LightsailResourceLocation],
        'ResourceType': Optional[str],
        'RecordState': Optional[str],
        'ExportSnapshotRecordSourceInfo': Optional[LightsailExportSnapshotRecordSourceInfo],
        'DestinationInfo': Optional[LightsailDestinationInfo],
    }
)


LightsailGetExportSnapshotRecordsResult = TypedDict(
    'LightsailGetExportSnapshotRecordsResult', {
        'ExportSnapshotRecordList': Optional[List[LightsailExportSnapshotRecord]],
        'string': Optional[str],
    }
)


LightsailInstanceHardware = TypedDict(
    'LightsailInstanceHardware', {
        'integer': Optional[int],
        'DiskList': Optional[List[LightsailDisk]],
        'float': Optional[float],
    }
)


LightsailMonthlyTransfer = TypedDict(
    'LightsailMonthlyTransfer', {
        'integer': Optional[int],
    }
)


LightsailInstancePortInfo = TypedDict(
    'LightsailInstancePortInfo', {
        'Port': Optional[int],
        'Port': Optional[int],
        'NetworkProtocol': Optional[str],
        'string': Optional[str],
        'PortAccessType': Optional[str],
        'string': Optional[str],
        'AccessDirection': Optional[str],
    }
)


LightsailInstanceNetworking = TypedDict(
    'LightsailInstanceNetworking', {
        'MonthlyTransfer': Optional[LightsailMonthlyTransfer],
        'InstancePortInfoList': Optional[List[LightsailInstancePortInfo]],
    }
)


LightsailInstanceState = TypedDict(
    'LightsailInstanceState', {
        'integer': Optional[int],
        'string': Optional[str],
    }
)


LightsailInstance = TypedDict(
    'LightsailInstance', {
        'ResourceName': Optional[str],
        'NonEmptyString': Optional[str],
        'string': Optional[str],
        'IsoDate': Optional[datetime.datetime],
        'ResourceLocation': Optional[LightsailResourceLocation],
        'ResourceType': Optional[str],
        'TagList': Optional[List[LightsailTag]],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'boolean': Optional[bool],
        'IpAddress': Optional[str],
        'IpAddress': Optional[str],
        'IpV6Address': Optional[str],
        'InstanceHardware': Optional[LightsailInstanceHardware],
        'InstanceNetworking': Optional[LightsailInstanceNetworking],
        'InstanceState': Optional[LightsailInstanceState],
        'NonEmptyString': Optional[str],
        'ResourceName': Optional[str],
    }
)


LightsailGetInstanceResult = TypedDict(
    'LightsailGetInstanceResult', {
        'Instance': Optional[LightsailInstance],
    }
)


LightsailPasswordData = TypedDict(
    'LightsailPasswordData', {
        'string': Optional[str],
        'ResourceName': Optional[str],
    }
)


LightsailHostKeyAttributes = TypedDict(
    'LightsailHostKeyAttributes', {
        'string': Optional[str],
        'string': Optional[str],
        'IsoDate': Optional[datetime.datetime],
        'string': Optional[str],
        'string': Optional[str],
        'IsoDate': Optional[datetime.datetime],
        'IsoDate': Optional[datetime.datetime],
    }
)


LightsailInstanceAccessDetails = TypedDict(
    'LightsailInstanceAccessDetails', {
        'string': Optional[str],
        'IsoDate': Optional[datetime.datetime],
        'IpAddress': Optional[str],
        'string': Optional[str],
        'PasswordData': Optional[LightsailPasswordData],
        'string': Optional[str],
        'InstanceAccessProtocol': Optional[str],
        'ResourceName': Optional[str],
        'string': Optional[str],
        'HostKeysList': Optional[List[LightsailHostKeyAttributes]],
    }
)


LightsailGetInstanceAccessDetailsResult = TypedDict(
    'LightsailGetInstanceAccessDetailsResult', {
        'InstanceAccessDetails': Optional[LightsailInstanceAccessDetails],
    }
)


LightsailMetricDatapoint = TypedDict(
    'LightsailMetricDatapoint', {
        'double': Optional[float],
        'double': Optional[float],
        'double': Optional[float],
        'double': Optional[float],
        'double': Optional[float],
        'timestamp': Optional[datetime.datetime],
        'MetricUnit': Optional[str],
    }
)


LightsailGetInstanceMetricDataResult = TypedDict(
    'LightsailGetInstanceMetricDataResult', {
        'InstanceMetricName': Optional[str],
        'MetricDatapointList': Optional[List[LightsailMetricDatapoint]],
    }
)


LightsailInstancePortState = TypedDict(
    'LightsailInstancePortState', {
        'Port': Optional[int],
        'Port': Optional[int],
        'NetworkProtocol': Optional[str],
        'PortState': Optional[str],
    }
)


LightsailGetInstancePortStatesResult = TypedDict(
    'LightsailGetInstancePortStatesResult', {
        'InstancePortStateList': Optional[List[LightsailInstancePortState]],
    }
)


LightsailInstanceSnapshot = TypedDict(
    'LightsailInstanceSnapshot', {
        'ResourceName': Optional[str],
        'NonEmptyString': Optional[str],
        'string': Optional[str],
        'IsoDate': Optional[datetime.datetime],
        'ResourceLocation': Optional[LightsailResourceLocation],
        'ResourceType': Optional[str],
        'TagList': Optional[List[LightsailTag]],
        'InstanceSnapshotState': Optional[str],
        'string': Optional[str],
        'DiskList': Optional[List[LightsailDisk]],
        'ResourceName': Optional[str],
        'NonEmptyString': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'integer': Optional[int],
    }
)


LightsailGetInstanceSnapshotResult = TypedDict(
    'LightsailGetInstanceSnapshotResult', {
        'InstanceSnapshot': Optional[LightsailInstanceSnapshot],
    }
)


LightsailGetInstanceSnapshotsResult = TypedDict(
    'LightsailGetInstanceSnapshotsResult', {
        'InstanceSnapshotList': Optional[List[LightsailInstanceSnapshot]],
        'string': Optional[str],
    }
)


LightsailGetInstanceStateResult = TypedDict(
    'LightsailGetInstanceStateResult', {
        'InstanceState': Optional[LightsailInstanceState],
    }
)


LightsailGetInstancesResult = TypedDict(
    'LightsailGetInstancesResult', {
        'InstanceList': Optional[List[LightsailInstance]],
        'string': Optional[str],
    }
)


LightsailGetKeyPairResult = TypedDict(
    'LightsailGetKeyPairResult', {
        'KeyPair': Optional[LightsailKeyPair],
    }
)


LightsailGetKeyPairsResult = TypedDict(
    'LightsailGetKeyPairsResult', {
        'KeyPairList': Optional[List[LightsailKeyPair]],
        'string': Optional[str],
    }
)


LightsailInstanceHealthSummary = TypedDict(
    'LightsailInstanceHealthSummary', {
        'ResourceName': Optional[str],
        'InstanceHealthState': Optional[str],
        'InstanceHealthReason': Optional[str],
    }
)


LightsailLoadBalancerTlsCertificateSummary = TypedDict(
    'LightsailLoadBalancerTlsCertificateSummary', {
        'ResourceName': Optional[str],
        'boolean': Optional[bool],
    }
)


LightsailLoadBalancer = TypedDict(
    'LightsailLoadBalancer', {
        'ResourceName': Optional[str],
        'NonEmptyString': Optional[str],
        'string': Optional[str],
        'IsoDate': Optional[datetime.datetime],
        'ResourceLocation': Optional[LightsailResourceLocation],
        'ResourceType': Optional[str],
        'TagList': Optional[List[LightsailTag]],
        'NonEmptyString': Optional[str],
        'LoadBalancerState': Optional[str],
        'LoadBalancerProtocol': Optional[str],
        'PortList': Optional[List[int]],
        'NonEmptyString': Optional[str],
        'integer': Optional[int],
        'InstanceHealthSummaryList': Optional[List[LightsailInstanceHealthSummary]],
        'LoadBalancerTlsCertificateSummaryList': Optional[List[LightsailLoadBalancerTlsCertificateSummary]],
        'LoadBalancerConfigurationOptions': Optional[Dict[str, str]],
    }
)


LightsailGetLoadBalancerResult = TypedDict(
    'LightsailGetLoadBalancerResult', {
        'LoadBalancer': Optional[LightsailLoadBalancer],
    }
)


LightsailGetLoadBalancerMetricDataResult = TypedDict(
    'LightsailGetLoadBalancerMetricDataResult', {
        'LoadBalancerMetricName': Optional[str],
        'MetricDatapointList': Optional[List[LightsailMetricDatapoint]],
    }
)


LightsailLoadBalancerTlsCertificateDomainValidationRecord = TypedDict(
    'LightsailLoadBalancerTlsCertificateDomainValidationRecord', {
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'LoadBalancerTlsCertificateDomainStatus': Optional[str],
        'DomainName': Optional[str],
    }
)


LightsailLoadBalancerTlsCertificateDomainValidationOption = TypedDict(
    'LightsailLoadBalancerTlsCertificateDomainValidationOption', {
        'DomainName': Optional[str],
        'LoadBalancerTlsCertificateDomainStatus': Optional[str],
    }
)


LightsailLoadBalancerTlsCertificateRenewalSummary = TypedDict(
    'LightsailLoadBalancerTlsCertificateRenewalSummary', {
        'LoadBalancerTlsCertificateRenewalStatus': Optional[str],
        'LoadBalancerTlsCertificateDomainValidationOptionList': Optional[List[LightsailLoadBalancerTlsCertificateDomainValidationOption]],
    }
)


LightsailLoadBalancerTlsCertificate = TypedDict(
    'LightsailLoadBalancerTlsCertificate', {
        'ResourceName': Optional[str],
        'NonEmptyString': Optional[str],
        'string': Optional[str],
        'IsoDate': Optional[datetime.datetime],
        'ResourceLocation': Optional[LightsailResourceLocation],
        'ResourceType': Optional[str],
        'TagList': Optional[List[LightsailTag]],
        'ResourceName': Optional[str],
        'boolean': Optional[bool],
        'LoadBalancerTlsCertificateStatus': Optional[str],
        'DomainName': Optional[str],
        'LoadBalancerTlsCertificateDomainValidationRecordList': Optional[List[LightsailLoadBalancerTlsCertificateDomainValidationRecord]],
        'LoadBalancerTlsCertificateFailureReason': Optional[str],
        'IsoDate': Optional[datetime.datetime],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'IsoDate': Optional[datetime.datetime],
        'IsoDate': Optional[datetime.datetime],
        'LoadBalancerTlsCertificateRenewalSummary': Optional[LightsailLoadBalancerTlsCertificateRenewalSummary],
        'LoadBalancerTlsCertificateRevocationReason': Optional[str],
        'IsoDate': Optional[datetime.datetime],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'StringList': Optional[List[str]],
    }
)


LightsailGetLoadBalancerTlsCertificatesResult = TypedDict(
    'LightsailGetLoadBalancerTlsCertificatesResult', {
        'LoadBalancerTlsCertificateList': Optional[List[LightsailLoadBalancerTlsCertificate]],
    }
)


LightsailGetLoadBalancersResult = TypedDict(
    'LightsailGetLoadBalancersResult', {
        'LoadBalancerList': Optional[List[LightsailLoadBalancer]],
        'string': Optional[str],
    }
)


LightsailGetOperationResult = TypedDict(
    'LightsailGetOperationResult', {
        'Operation': Optional[LightsailOperation],
    }
)


LightsailGetOperationsResult = TypedDict(
    'LightsailGetOperationsResult', {
        'OperationList': Optional[List[LightsailOperation]],
        'string': Optional[str],
    }
)


LightsailGetOperationsForResourceResult = TypedDict(
    'LightsailGetOperationsForResourceResult', {
        'OperationList': Optional[List[LightsailOperation]],
        'string': Optional[str],
        'string': Optional[str],
    }
)


LightsailAvailabilityZone = TypedDict(
    'LightsailAvailabilityZone', {
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
    }
)


LightsailRegion = TypedDict(
    'LightsailRegion', {
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'RegionName': Optional[str],
        'AvailabilityZoneList': Optional[List[LightsailAvailabilityZone]],
        'AvailabilityZoneList': Optional[List[LightsailAvailabilityZone]],
    }
)


LightsailGetRegionsResult = TypedDict(
    'LightsailGetRegionsResult', {
        'RegionList': Optional[List[LightsailRegion]],
    }
)


LightsailRelationalDatabaseHardware = TypedDict(
    'LightsailRelationalDatabaseHardware', {
        'integer': Optional[int],
        'integer': Optional[int],
        'float': Optional[float],
    }
)


LightsailPendingModifiedRelationalDatabaseValues = TypedDict(
    'LightsailPendingModifiedRelationalDatabaseValues', {
        'string': Optional[str],
        'string': Optional[str],
        'boolean': Optional[bool],
    }
)


LightsailRelationalDatabaseEndpoint = TypedDict(
    'LightsailRelationalDatabaseEndpoint', {
        'integer': Optional[int],
        'NonEmptyString': Optional[str],
    }
)


LightsailPendingMaintenanceAction = TypedDict(
    'LightsailPendingMaintenanceAction', {
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'IsoDate': Optional[datetime.datetime],
    }
)


LightsailRelationalDatabase = TypedDict(
    'LightsailRelationalDatabase', {
        'ResourceName': Optional[str],
        'NonEmptyString': Optional[str],
        'string': Optional[str],
        'IsoDate': Optional[datetime.datetime],
        'ResourceLocation': Optional[LightsailResourceLocation],
        'ResourceType': Optional[str],
        'TagList': Optional[List[LightsailTag]],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'string': Optional[str],
        'RelationalDatabaseHardware': Optional[LightsailRelationalDatabaseHardware],
        'NonEmptyString': Optional[str],
        'string': Optional[str],
        'boolean': Optional[bool],
        'PendingModifiedRelationalDatabaseValues': Optional[LightsailPendingModifiedRelationalDatabaseValues],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'IsoDate': Optional[datetime.datetime],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'boolean': Optional[bool],
        'RelationalDatabaseEndpoint': Optional[LightsailRelationalDatabaseEndpoint],
        'PendingMaintenanceActionList': Optional[List[LightsailPendingMaintenanceAction]],
    }
)


LightsailGetRelationalDatabaseResult = TypedDict(
    'LightsailGetRelationalDatabaseResult', {
        'RelationalDatabase': Optional[LightsailRelationalDatabase],
    }
)


LightsailRelationalDatabaseBlueprint = TypedDict(
    'LightsailRelationalDatabaseBlueprint', {
        'string': Optional[str],
        'RelationalDatabaseEngine': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'boolean': Optional[bool],
    }
)


LightsailGetRelationalDatabaseBlueprintsResult = TypedDict(
    'LightsailGetRelationalDatabaseBlueprintsResult', {
        'RelationalDatabaseBlueprintList': Optional[List[LightsailRelationalDatabaseBlueprint]],
        'string': Optional[str],
    }
)


LightsailRelationalDatabaseBundle = TypedDict(
    'LightsailRelationalDatabaseBundle', {
        'string': Optional[str],
        'string': Optional[str],
        'float': Optional[float],
        'float': Optional[float],
        'integer': Optional[int],
        'integer': Optional[int],
        'integer': Optional[int],
        'boolean': Optional[bool],
        'boolean': Optional[bool],
    }
)


LightsailGetRelationalDatabaseBundlesResult = TypedDict(
    'LightsailGetRelationalDatabaseBundlesResult', {
        'RelationalDatabaseBundleList': Optional[List[LightsailRelationalDatabaseBundle]],
        'string': Optional[str],
    }
)


LightsailRelationalDatabaseEvent = TypedDict(
    'LightsailRelationalDatabaseEvent', {
        'ResourceName': Optional[str],
        'IsoDate': Optional[datetime.datetime],
        'string': Optional[str],
        'StringList': Optional[List[str]],
    }
)


LightsailGetRelationalDatabaseEventsResult = TypedDict(
    'LightsailGetRelationalDatabaseEventsResult', {
        'RelationalDatabaseEventList': Optional[List[LightsailRelationalDatabaseEvent]],
        'string': Optional[str],
    }
)


LightsailLogEvent = TypedDict(
    'LightsailLogEvent', {
        'IsoDate': Optional[datetime.datetime],
        'string': Optional[str],
    }
)


LightsailGetRelationalDatabaseLogEventsResult = TypedDict(
    'LightsailGetRelationalDatabaseLogEventsResult', {
        'LogEventList': Optional[List[LightsailLogEvent]],
        'string': Optional[str],
        'string': Optional[str],
    }
)


LightsailGetRelationalDatabaseLogStreamsResult = TypedDict(
    'LightsailGetRelationalDatabaseLogStreamsResult', {
        'StringList': Optional[List[str]],
    }
)


LightsailGetRelationalDatabaseMasterUserPasswordResult = TypedDict(
    'LightsailGetRelationalDatabaseMasterUserPasswordResult', {
        'SensitiveString': Optional[str],
        'IsoDate': Optional[datetime.datetime],
    }
)


LightsailGetRelationalDatabaseMetricDataResult = TypedDict(
    'LightsailGetRelationalDatabaseMetricDataResult', {
        'RelationalDatabaseMetricName': Optional[str],
        'MetricDatapointList': Optional[List[LightsailMetricDatapoint]],
    }
)


LightsailRelationalDatabaseParameter = TypedDict(
    'LightsailRelationalDatabaseParameter', {
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'boolean': Optional[bool],
        'string': Optional[str],
        'string': Optional[str],
    }
)


LightsailGetRelationalDatabaseParametersResult = TypedDict(
    'LightsailGetRelationalDatabaseParametersResult', {
        'RelationalDatabaseParameterList': Optional[List[LightsailRelationalDatabaseParameter]],
        'string': Optional[str],
    }
)


LightsailRelationalDatabaseSnapshot = TypedDict(
    'LightsailRelationalDatabaseSnapshot', {
        'ResourceName': Optional[str],
        'NonEmptyString': Optional[str],
        'string': Optional[str],
        'IsoDate': Optional[datetime.datetime],
        'ResourceLocation': Optional[LightsailResourceLocation],
        'ResourceType': Optional[str],
        'TagList': Optional[List[LightsailTag]],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'integer': Optional[int],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
    }
)


LightsailGetRelationalDatabaseSnapshotResult = TypedDict(
    'LightsailGetRelationalDatabaseSnapshotResult', {
        'RelationalDatabaseSnapshot': Optional[LightsailRelationalDatabaseSnapshot],
    }
)


LightsailGetRelationalDatabaseSnapshotsResult = TypedDict(
    'LightsailGetRelationalDatabaseSnapshotsResult', {
        'RelationalDatabaseSnapshotList': Optional[List[LightsailRelationalDatabaseSnapshot]],
        'string': Optional[str],
    }
)


LightsailGetRelationalDatabasesResult = TypedDict(
    'LightsailGetRelationalDatabasesResult', {
        'RelationalDatabaseList': Optional[List[LightsailRelationalDatabase]],
        'string': Optional[str],
    }
)


LightsailStaticIp = TypedDict(
    'LightsailStaticIp', {
        'ResourceName': Optional[str],
        'NonEmptyString': Optional[str],
        'string': Optional[str],
        'IsoDate': Optional[datetime.datetime],
        'ResourceLocation': Optional[LightsailResourceLocation],
        'ResourceType': Optional[str],
        'IpAddress': Optional[str],
        'ResourceName': Optional[str],
        'boolean': Optional[bool],
    }
)


LightsailGetStaticIpResult = TypedDict(
    'LightsailGetStaticIpResult', {
        'StaticIp': Optional[LightsailStaticIp],
    }
)


LightsailGetStaticIpsResult = TypedDict(
    'LightsailGetStaticIpsResult', {
        'StaticIpList': Optional[List[LightsailStaticIp]],
        'string': Optional[str],
    }
)


LightsailImportKeyPairResult = TypedDict(
    'LightsailImportKeyPairResult', {
        'Operation': Optional[LightsailOperation],
    }
)


LightsailIsVpcPeeredResult = TypedDict(
    'LightsailIsVpcPeeredResult', {
        'boolean': Optional[bool],
    }
)


LightsailOpenInstancePublicPortsResult = TypedDict(
    'LightsailOpenInstancePublicPortsResult', {
        'Operation': Optional[LightsailOperation],
    }
)


LightsailPeerVpcResult = TypedDict(
    'LightsailPeerVpcResult', {
        'Operation': Optional[LightsailOperation],
    }
)


LightsailPutInstancePublicPortsResult = TypedDict(
    'LightsailPutInstancePublicPortsResult', {
        'Operation': Optional[LightsailOperation],
    }
)


LightsailRebootInstanceResult = TypedDict(
    'LightsailRebootInstanceResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailRebootRelationalDatabaseResult = TypedDict(
    'LightsailRebootRelationalDatabaseResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailReleaseStaticIpResult = TypedDict(
    'LightsailReleaseStaticIpResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailStartInstanceResult = TypedDict(
    'LightsailStartInstanceResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailStartRelationalDatabaseResult = TypedDict(
    'LightsailStartRelationalDatabaseResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailStopInstanceResult = TypedDict(
    'LightsailStopInstanceResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailStopRelationalDatabaseResult = TypedDict(
    'LightsailStopRelationalDatabaseResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailTagResourceResult = TypedDict(
    'LightsailTagResourceResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailUnpeerVpcResult = TypedDict(
    'LightsailUnpeerVpcResult', {
        'Operation': Optional[LightsailOperation],
    }
)


LightsailUntagResourceResult = TypedDict(
    'LightsailUntagResourceResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailUpdateDomainEntryResult = TypedDict(
    'LightsailUpdateDomainEntryResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailUpdateLoadBalancerAttributeResult = TypedDict(
    'LightsailUpdateLoadBalancerAttributeResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailUpdateRelationalDatabaseResult = TypedDict(
    'LightsailUpdateRelationalDatabaseResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


LightsailUpdateRelationalDatabaseParametersResult = TypedDict(
    'LightsailUpdateRelationalDatabaseParametersResult', {
        'OperationList': Optional[List[LightsailOperation]],
    }
)


class MachineLearning(BaseClient):
    def add_tags(self, *,
        Tags: List[MachineLearningTag],
        ResourceId: str,
        ResourceType: str
    ) -> MachineLearningAddTagsOutput: ...

    def create_batch_prediction(self, *,
        BatchPredictionId: str,
        MLModelId: str,
        BatchPredictionDataSourceId: str,
        OutputUri: str,
        BatchPredictionName: str = ...
    ) -> MachineLearningCreateBatchPredictionOutput: ...

    def create_data_source_from_rds(self, *,
        DataSourceId: str,
        RDSData: MachineLearningRDSDataSpec,
        RoleARN: str,
        DataSourceName: str = ...,
        ComputeStatistics: bool = ...
    ) -> MachineLearningCreateDataSourceFromRDSOutput: ...

    def create_data_source_from_redshift(self, *,
        DataSourceId: str,
        DataSpec: MachineLearningRedshiftDataSpec,
        RoleARN: str,
        DataSourceName: str = ...,
        ComputeStatistics: bool = ...
    ) -> MachineLearningCreateDataSourceFromRedshiftOutput: ...

    def create_data_source_from_s3(self, *,
        DataSourceId: str,
        DataSpec: MachineLearningS3DataSpec,
        DataSourceName: str = ...,
        ComputeStatistics: bool = ...
    ) -> MachineLearningCreateDataSourceFromS3Output: ...

    def create_evaluation(self, *,
        EvaluationId: str,
        MLModelId: str,
        EvaluationDataSourceId: str,
        EvaluationName: str = ...
    ) -> MachineLearningCreateEvaluationOutput: ...

    def create_ml_model(self, *,
        MLModelId: str,
        MLModelType: str,
        TrainingDataSourceId: str,
        MLModelName: str = ...,
        Parameters: Dict[str, str] = ...,
        Recipe: str = ...,
        RecipeUri: str = ...
    ) -> MachineLearningCreateMLModelOutput: ...

    def create_realtime_endpoint(self, *,
        MLModelId: str
    ) -> MachineLearningCreateRealtimeEndpointOutput: ...

    def delete_batch_prediction(self, *,
        BatchPredictionId: str
    ) -> MachineLearningDeleteBatchPredictionOutput: ...

    def delete_data_source(self, *,
        DataSourceId: str
    ) -> MachineLearningDeleteDataSourceOutput: ...

    def delete_evaluation(self, *,
        EvaluationId: str
    ) -> MachineLearningDeleteEvaluationOutput: ...

    def delete_ml_model(self, *,
        MLModelId: str
    ) -> MachineLearningDeleteMLModelOutput: ...

    def delete_realtime_endpoint(self, *,
        MLModelId: str
    ) -> MachineLearningDeleteRealtimeEndpointOutput: ...

    def delete_tags(self, *,
        TagKeys: List[str],
        ResourceId: str,
        ResourceType: str
    ) -> MachineLearningDeleteTagsOutput: ...

    def describe_batch_predictions(self, *,
        FilterVariable: str = ...,
        EQ: str = ...,
        GT: str = ...,
        LT: str = ...,
        GE: str = ...,
        LE: str = ...,
        NE: str = ...,
        Prefix: str = ...,
        SortOrder: str = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> MachineLearningDescribeBatchPredictionsOutput: ...

    def describe_data_sources(self, *,
        FilterVariable: str = ...,
        EQ: str = ...,
        GT: str = ...,
        LT: str = ...,
        GE: str = ...,
        LE: str = ...,
        NE: str = ...,
        Prefix: str = ...,
        SortOrder: str = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> MachineLearningDescribeDataSourcesOutput: ...

    def describe_evaluations(self, *,
        FilterVariable: str = ...,
        EQ: str = ...,
        GT: str = ...,
        LT: str = ...,
        GE: str = ...,
        LE: str = ...,
        NE: str = ...,
        Prefix: str = ...,
        SortOrder: str = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> MachineLearningDescribeEvaluationsOutput: ...

    def describe_ml_models(self, *,
        FilterVariable: str = ...,
        EQ: str = ...,
        GT: str = ...,
        LT: str = ...,
        GE: str = ...,
        LE: str = ...,
        NE: str = ...,
        Prefix: str = ...,
        SortOrder: str = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> MachineLearningDescribeMLModelsOutput: ...

    def describe_tags(self, *,
        ResourceId: str,
        ResourceType: str
    ) -> MachineLearningDescribeTagsOutput: ...

    def get_batch_prediction(self, *,
        BatchPredictionId: str
    ) -> MachineLearningGetBatchPredictionOutput: ...

    def get_data_source(self, *,
        DataSourceId: str,
        Verbose: bool = ...
    ) -> MachineLearningGetDataSourceOutput: ...

    def get_evaluation(self, *,
        EvaluationId: str
    ) -> MachineLearningGetEvaluationOutput: ...

    def get_ml_model(self, *,
        MLModelId: str,
        Verbose: bool = ...
    ) -> MachineLearningGetMLModelOutput: ...

    def predict(self, *,
        MLModelId: str,
        Record: Dict[str, str],
        PredictEndpoint: str
    ) -> MachineLearningPredictOutput: ...

    def update_batch_prediction(self, *,
        BatchPredictionId: str,
        BatchPredictionName: str
    ) -> MachineLearningUpdateBatchPredictionOutput: ...

    def update_data_source(self, *,
        DataSourceId: str,
        DataSourceName: str
    ) -> MachineLearningUpdateDataSourceOutput: ...

    def update_evaluation(self, *,
        EvaluationId: str,
        EvaluationName: str
    ) -> MachineLearningUpdateEvaluationOutput: ...

    def update_ml_model(self, *,
        MLModelId: str,
        MLModelName: str = ...,
        ScoreThreshold: float = ...
    ) -> MachineLearningUpdateMLModelOutput: ...


MachineLearningTag = TypedDict(
    'MachineLearningTag', {
        'TagKey': Optional[str],
        'TagValue': Optional[str],
    }
)


MachineLearningAddTagsOutput = TypedDict(
    'MachineLearningAddTagsOutput', {
        'EntityId': Optional[str],
        'TaggableResourceType': Optional[str],
    }
)


MachineLearningCreateBatchPredictionOutput = TypedDict(
    'MachineLearningCreateBatchPredictionOutput', {
        'EntityId': Optional[str],
    }
)


MachineLearningRDSDatabase = TypedDict(
    'MachineLearningRDSDatabase', {
        'RDSInstanceIdentifier': str,
        'RDSDatabaseName': str,
    }
)


MachineLearningRDSDatabaseCredentials = TypedDict(
    'MachineLearningRDSDatabaseCredentials', {
        'RDSDatabaseUsername': str,
        'RDSDatabasePassword': str,
    }
)


MachineLearningRDSDataSpec = TypedDict(
    'MachineLearningRDSDataSpec', {
        'RDSDatabase': MachineLearningRDSDatabase,
        'RDSSelectSqlQuery': str,
        'RDSDatabaseCredentials': MachineLearningRDSDatabaseCredentials,
        'S3Url': str,
        'EDPResourceRole': str,
        'EDPServiceRole': str,
        'EDPSubnetId': str,
        'EDPSecurityGroupIds': List[str],
        'DataRearrangement': Optional[str],
        'DataSchema': Optional[str],
        'S3Url': Optional[str],
    }
)


MachineLearningCreateDataSourceFromRDSOutput = TypedDict(
    'MachineLearningCreateDataSourceFromRDSOutput', {
        'EntityId': Optional[str],
    }
)


MachineLearningRedshiftDatabase = TypedDict(
    'MachineLearningRedshiftDatabase', {
        'RedshiftDatabaseName': str,
        'RedshiftClusterIdentifier': str,
    }
)


MachineLearningRedshiftDatabaseCredentials = TypedDict(
    'MachineLearningRedshiftDatabaseCredentials', {
        'RedshiftDatabaseUsername': str,
        'RedshiftDatabasePassword': str,
    }
)


MachineLearningRedshiftDataSpec = TypedDict(
    'MachineLearningRedshiftDataSpec', {
        'RedshiftDatabase': MachineLearningRedshiftDatabase,
        'RedshiftSelectSqlQuery': str,
        'RedshiftDatabaseCredentials': MachineLearningRedshiftDatabaseCredentials,
        'S3Url': str,
        'DataRearrangement': Optional[str],
        'DataSchema': Optional[str],
        'S3Url': Optional[str],
    }
)


MachineLearningCreateDataSourceFromRedshiftOutput = TypedDict(
    'MachineLearningCreateDataSourceFromRedshiftOutput', {
        'EntityId': Optional[str],
    }
)


MachineLearningS3DataSpec = TypedDict(
    'MachineLearningS3DataSpec', {
        'S3Url': str,
        'DataRearrangement': Optional[str],
        'DataSchema': Optional[str],
        'S3Url': Optional[str],
    }
)


MachineLearningCreateDataSourceFromS3Output = TypedDict(
    'MachineLearningCreateDataSourceFromS3Output', {
        'EntityId': Optional[str],
    }
)


MachineLearningCreateEvaluationOutput = TypedDict(
    'MachineLearningCreateEvaluationOutput', {
        'EntityId': Optional[str],
    }
)


MachineLearningCreateMLModelOutput = TypedDict(
    'MachineLearningCreateMLModelOutput', {
        'EntityId': Optional[str],
    }
)


MachineLearningRealtimeEndpointInfo = TypedDict(
    'MachineLearningRealtimeEndpointInfo', {
        'IntegerType': Optional[int],
        'EpochTime': Optional[datetime.datetime],
        'VipURL': Optional[str],
        'RealtimeEndpointStatus': Optional[str],
    }
)


MachineLearningCreateRealtimeEndpointOutput = TypedDict(
    'MachineLearningCreateRealtimeEndpointOutput', {
        'EntityId': Optional[str],
        'RealtimeEndpointInfo': Optional[MachineLearningRealtimeEndpointInfo],
    }
)


MachineLearningDeleteBatchPredictionOutput = TypedDict(
    'MachineLearningDeleteBatchPredictionOutput', {
        'EntityId': Optional[str],
    }
)


MachineLearningDeleteDataSourceOutput = TypedDict(
    'MachineLearningDeleteDataSourceOutput', {
        'EntityId': Optional[str],
    }
)


MachineLearningDeleteEvaluationOutput = TypedDict(
    'MachineLearningDeleteEvaluationOutput', {
        'EntityId': Optional[str],
    }
)


MachineLearningDeleteMLModelOutput = TypedDict(
    'MachineLearningDeleteMLModelOutput', {
        'EntityId': Optional[str],
    }
)


MachineLearningDeleteRealtimeEndpointOutput = TypedDict(
    'MachineLearningDeleteRealtimeEndpointOutput', {
        'EntityId': Optional[str],
        'RealtimeEndpointInfo': Optional[MachineLearningRealtimeEndpointInfo],
    }
)


MachineLearningDeleteTagsOutput = TypedDict(
    'MachineLearningDeleteTagsOutput', {
        'EntityId': Optional[str],
        'TaggableResourceType': Optional[str],
    }
)


MachineLearningBatchPrediction = TypedDict(
    'MachineLearningBatchPrediction', {
        'EntityId': Optional[str],
        'EntityId': Optional[str],
        'EntityId': Optional[str],
        'S3Url': Optional[str],
        'AwsUserArn': Optional[str],
        'EpochTime': Optional[datetime.datetime],
        'EpochTime': Optional[datetime.datetime],
        'EntityName': Optional[str],
        'EntityStatus': Optional[str],
        'S3Url': Optional[str],
        'Message': Optional[str],
        'LongType': Optional[int],
        'EpochTime': Optional[datetime.datetime],
        'EpochTime': Optional[datetime.datetime],
        'LongType': Optional[int],
        'LongType': Optional[int],
    }
)


MachineLearningDescribeBatchPredictionsOutput = TypedDict(
    'MachineLearningDescribeBatchPredictionsOutput', {
        'BatchPredictions': Optional[List[MachineLearningBatchPrediction]],
        'StringType': Optional[str],
    }
)


MachineLearningRedshiftMetadata = TypedDict(
    'MachineLearningRedshiftMetadata', {
        'RedshiftDatabase': Optional[MachineLearningRedshiftDatabase],
        'RedshiftDatabaseUsername': Optional[str],
        'RedshiftSelectSqlQuery': Optional[str],
    }
)


MachineLearningRDSMetadata = TypedDict(
    'MachineLearningRDSMetadata', {
        'RDSDatabase': Optional[MachineLearningRDSDatabase],
        'RDSDatabaseUsername': Optional[str],
        'RDSSelectSqlQuery': Optional[str],
        'EDPResourceRole': Optional[str],
        'EDPServiceRole': Optional[str],
        'EDPPipelineId': Optional[str],
    }
)


MachineLearningDataSource = TypedDict(
    'MachineLearningDataSource', {
        'EntityId': Optional[str],
        'S3Url': Optional[str],
        'DataRearrangement': Optional[str],
        'AwsUserArn': Optional[str],
        'EpochTime': Optional[datetime.datetime],
        'EpochTime': Optional[datetime.datetime],
        'LongType': Optional[int],
        'LongType': Optional[int],
        'EntityName': Optional[str],
        'EntityStatus': Optional[str],
        'Message': Optional[str],
        'RedshiftMetadata': Optional[MachineLearningRedshiftMetadata],
        'RDSMetadata': Optional[MachineLearningRDSMetadata],
        'RoleARN': Optional[str],
        'ComputeStatistics': Optional[bool],
        'LongType': Optional[int],
        'EpochTime': Optional[datetime.datetime],
        'EpochTime': Optional[datetime.datetime],
    }
)


MachineLearningDescribeDataSourcesOutput = TypedDict(
    'MachineLearningDescribeDataSourcesOutput', {
        'DataSources': Optional[List[MachineLearningDataSource]],
        'StringType': Optional[str],
    }
)


MachineLearningPerformanceMetrics = TypedDict(
    'MachineLearningPerformanceMetrics', {
        'PerformanceMetricsProperties': Optional[Dict[str, str]],
    }
)


MachineLearningEvaluation = TypedDict(
    'MachineLearningEvaluation', {
        'EntityId': Optional[str],
        'EntityId': Optional[str],
        'EntityId': Optional[str],
        'S3Url': Optional[str],
        'AwsUserArn': Optional[str],
        'EpochTime': Optional[datetime.datetime],
        'EpochTime': Optional[datetime.datetime],
        'EntityName': Optional[str],
        'EntityStatus': Optional[str],
        'PerformanceMetrics': Optional[MachineLearningPerformanceMetrics],
        'Message': Optional[str],
        'LongType': Optional[int],
        'EpochTime': Optional[datetime.datetime],
        'EpochTime': Optional[datetime.datetime],
    }
)


MachineLearningDescribeEvaluationsOutput = TypedDict(
    'MachineLearningDescribeEvaluationsOutput', {
        'Evaluations': Optional[List[MachineLearningEvaluation]],
        'StringType': Optional[str],
    }
)


MachineLearningMLModel = TypedDict(
    'MachineLearningMLModel', {
        'EntityId': Optional[str],
        'EntityId': Optional[str],
        'AwsUserArn': Optional[str],
        'EpochTime': Optional[datetime.datetime],
        'EpochTime': Optional[datetime.datetime],
        'MLModelName': Optional[str],
        'EntityStatus': Optional[str],
        'LongType': Optional[int],
        'RealtimeEndpointInfo': Optional[MachineLearningRealtimeEndpointInfo],
        'TrainingParameters': Optional[Dict[str, str]],
        'S3Url': Optional[str],
        'Algorithm': Optional[str],
        'MLModelType': Optional[str],
        'ScoreThreshold': Optional[float],
        'EpochTime': Optional[datetime.datetime],
        'Message': Optional[str],
        'LongType': Optional[int],
        'EpochTime': Optional[datetime.datetime],
        'EpochTime': Optional[datetime.datetime],
    }
)


MachineLearningDescribeMLModelsOutput = TypedDict(
    'MachineLearningDescribeMLModelsOutput', {
        'MLModels': Optional[List[MachineLearningMLModel]],
        'StringType': Optional[str],
    }
)


MachineLearningDescribeTagsOutput = TypedDict(
    'MachineLearningDescribeTagsOutput', {
        'EntityId': Optional[str],
        'TaggableResourceType': Optional[str],
        'TagList': Optional[List[MachineLearningTag]],
    }
)


MachineLearningGetBatchPredictionOutput = TypedDict(
    'MachineLearningGetBatchPredictionOutput', {
        'EntityId': Optional[str],
        'EntityId': Optional[str],
        'EntityId': Optional[str],
        'S3Url': Optional[str],
        'AwsUserArn': Optional[str],
        'EpochTime': Optional[datetime.datetime],
        'EpochTime': Optional[datetime.datetime],
        'EntityName': Optional[str],
        'EntityStatus': Optional[str],
        'S3Url': Optional[str],
        'PresignedS3Url': Optional[str],
        'Message': Optional[str],
        'LongType': Optional[int],
        'EpochTime': Optional[datetime.datetime],
        'EpochTime': Optional[datetime.datetime],
        'LongType': Optional[int],
        'LongType': Optional[int],
    }
)


MachineLearningGetDataSourceOutput = TypedDict(
    'MachineLearningGetDataSourceOutput', {
        'EntityId': Optional[str],
        'S3Url': Optional[str],
        'DataRearrangement': Optional[str],
        'AwsUserArn': Optional[str],
        'EpochTime': Optional[datetime.datetime],
        'EpochTime': Optional[datetime.datetime],
        'LongType': Optional[int],
        'LongType': Optional[int],
        'EntityName': Optional[str],
        'EntityStatus': Optional[str],
        'PresignedS3Url': Optional[str],
        'Message': Optional[str],
        'RedshiftMetadata': Optional[MachineLearningRedshiftMetadata],
        'RDSMetadata': Optional[MachineLearningRDSMetadata],
        'RoleARN': Optional[str],
        'ComputeStatistics': Optional[bool],
        'LongType': Optional[int],
        'EpochTime': Optional[datetime.datetime],
        'EpochTime': Optional[datetime.datetime],
        'DataSchema': Optional[str],
    }
)


MachineLearningGetEvaluationOutput = TypedDict(
    'MachineLearningGetEvaluationOutput', {
        'EntityId': Optional[str],
        'EntityId': Optional[str],
        'EntityId': Optional[str],
        'S3Url': Optional[str],
        'AwsUserArn': Optional[str],
        'EpochTime': Optional[datetime.datetime],
        'EpochTime': Optional[datetime.datetime],
        'EntityName': Optional[str],
        'EntityStatus': Optional[str],
        'PerformanceMetrics': Optional[MachineLearningPerformanceMetrics],
        'PresignedS3Url': Optional[str],
        'Message': Optional[str],
        'LongType': Optional[int],
        'EpochTime': Optional[datetime.datetime],
        'EpochTime': Optional[datetime.datetime],
    }
)


MachineLearningGetMLModelOutput = TypedDict(
    'MachineLearningGetMLModelOutput', {
        'EntityId': Optional[str],
        'EntityId': Optional[str],
        'AwsUserArn': Optional[str],
        'EpochTime': Optional[datetime.datetime],
        'EpochTime': Optional[datetime.datetime],
        'MLModelName': Optional[str],
        'EntityStatus': Optional[str],
        'LongType': Optional[int],
        'RealtimeEndpointInfo': Optional[MachineLearningRealtimeEndpointInfo],
        'TrainingParameters': Optional[Dict[str, str]],
        'S3Url': Optional[str],
        'MLModelType': Optional[str],
        'ScoreThreshold': Optional[float],
        'EpochTime': Optional[datetime.datetime],
        'PresignedS3Url': Optional[str],
        'Message': Optional[str],
        'LongType': Optional[int],
        'EpochTime': Optional[datetime.datetime],
        'EpochTime': Optional[datetime.datetime],
        'Recipe': Optional[str],
        'DataSchema': Optional[str],
    }
)


MachineLearningPrediction = TypedDict(
    'MachineLearningPrediction', {
        'Label': Optional[str],
        'floatLabel': Optional[float],
        'ScoreValuePerLabelMap': Optional[Dict[str, float]],
        'DetailsMap': Optional[Dict[str, str]],
    }
)


MachineLearningPredictOutput = TypedDict(
    'MachineLearningPredictOutput', {
        'Prediction': Optional[MachineLearningPrediction],
    }
)


MachineLearningUpdateBatchPredictionOutput = TypedDict(
    'MachineLearningUpdateBatchPredictionOutput', {
        'EntityId': Optional[str],
    }
)


MachineLearningUpdateDataSourceOutput = TypedDict(
    'MachineLearningUpdateDataSourceOutput', {
        'EntityId': Optional[str],
    }
)


MachineLearningUpdateEvaluationOutput = TypedDict(
    'MachineLearningUpdateEvaluationOutput', {
        'EntityId': Optional[str],
    }
)


MachineLearningUpdateMLModelOutput = TypedDict(
    'MachineLearningUpdateMLModelOutput', {
        'EntityId': Optional[str],
    }
)


class Macie(BaseClient):
    def associate_member_account(self, *,
        memberAccountId: str
    ): ...

    def associate_s3_resources(self, *,
        s3Resources: List[MacieS3ResourceClassification],
        memberAccountId: str = ...
    ) -> MacieAssociateS3ResourcesResult: ...

    def disassociate_member_account(self, *,
        memberAccountId: str
    ): ...

    def disassociate_s3_resources(self, *,
        associatedS3Resources: List[MacieS3Resource],
        memberAccountId: str = ...
    ) -> MacieDisassociateS3ResourcesResult: ...

    def list_member_accounts(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> MacieListMemberAccountsResult: ...

    def list_s3_resources(self, *,
        memberAccountId: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> MacieListS3ResourcesResult: ...

    def update_s3_resources(self, *,
        s3ResourcesUpdate: List[MacieS3ResourceClassificationUpdate],
        memberAccountId: str = ...
    ) -> MacieUpdateS3ResourcesResult: ...


MacieClassificationType = TypedDict(
    'MacieClassificationType', {
        'S3OneTimeClassificationType': str,
        'S3ContinuousClassificationType': str,
    }
)


MacieS3ResourceClassification = TypedDict(
    'MacieS3ResourceClassification', {
        'BucketName': str,
        'ClassificationType': MacieClassificationType,
        'Prefix': Optional[str],
    }
)


MacieS3Resource = TypedDict(
    'MacieS3Resource', {
        'BucketName': str,
        'Prefix': Optional[str],
    }
)


MacieFailedS3Resource = TypedDict(
    'MacieFailedS3Resource', {
        'S3Resource': Optional[MacieS3Resource],
        'ErrorCode': Optional[str],
        'ExceptionMessage': Optional[str],
    }
)


MacieAssociateS3ResourcesResult = TypedDict(
    'MacieAssociateS3ResourcesResult', {
        'FailedS3Resources': Optional[List[MacieFailedS3Resource]],
    }
)


MacieDisassociateS3ResourcesResult = TypedDict(
    'MacieDisassociateS3ResourcesResult', {
        'FailedS3Resources': Optional[List[MacieFailedS3Resource]],
    }
)


MacieMemberAccount = TypedDict(
    'MacieMemberAccount', {
        'AWSAccountId': Optional[str],
    }
)


MacieListMemberAccountsResult = TypedDict(
    'MacieListMemberAccountsResult', {
        'MemberAccounts': Optional[List[MacieMemberAccount]],
        'NextToken': Optional[str],
    }
)


MacieListS3ResourcesResult = TypedDict(
    'MacieListS3ResourcesResult', {
        'S3ResourcesClassification': Optional[List[MacieS3ResourceClassification]],
        'NextToken': Optional[str],
    }
)


MacieClassificationTypeUpdate = TypedDict(
    'MacieClassificationTypeUpdate', {
        'S3OneTimeClassificationType': Optional[str],
        'S3ContinuousClassificationType': Optional[str],
    }
)


MacieS3ResourceClassificationUpdate = TypedDict(
    'MacieS3ResourceClassificationUpdate', {
        'BucketName': str,
        'ClassificationTypeUpdate': MacieClassificationTypeUpdate,
        'Prefix': Optional[str],
    }
)


MacieUpdateS3ResourcesResult = TypedDict(
    'MacieUpdateS3ResourcesResult', {
        'FailedS3Resources': Optional[List[MacieFailedS3Resource]],
    }
)


class ManagedBlockchain(BaseClient):
    def create_member(self, *,
        ClientRequestToken: str,
        InvitationId: str,
        NetworkId: str,
        MemberConfiguration: ManagedBlockchainMemberConfiguration
    ) -> ManagedBlockchainCreateMemberOutput: ...

    def create_network(self, *,
        ClientRequestToken: str,
        Name: str,
        Framework: str,
        FrameworkVersion: str,
        VotingPolicy: ManagedBlockchainVotingPolicy,
        MemberConfiguration: ManagedBlockchainMemberConfiguration,
        Description: str = ...,
        FrameworkConfiguration: ManagedBlockchainNetworkFrameworkConfiguration = ...
    ) -> ManagedBlockchainCreateNetworkOutput: ...

    def create_node(self, *,
        ClientRequestToken: str,
        NetworkId: str,
        MemberId: str,
        NodeConfiguration: ManagedBlockchainNodeConfiguration
    ) -> ManagedBlockchainCreateNodeOutput: ...

    def create_proposal(self, *,
        ClientRequestToken: str,
        NetworkId: str,
        MemberId: str,
        Actions: ManagedBlockchainProposalActions,
        Description: str = ...
    ) -> ManagedBlockchainCreateProposalOutput: ...

    def delete_member(self, *,
        NetworkId: str,
        MemberId: str
    ) -> ManagedBlockchainDeleteMemberOutput: ...

    def delete_node(self, *,
        NetworkId: str,
        MemberId: str,
        NodeId: str
    ) -> ManagedBlockchainDeleteNodeOutput: ...

    def get_member(self, *,
        NetworkId: str,
        MemberId: str
    ) -> ManagedBlockchainGetMemberOutput: ...

    def get_network(self, *,
        NetworkId: str
    ) -> ManagedBlockchainGetNetworkOutput: ...

    def get_node(self, *,
        NetworkId: str,
        MemberId: str,
        NodeId: str
    ) -> ManagedBlockchainGetNodeOutput: ...

    def get_proposal(self, *,
        NetworkId: str,
        ProposalId: str
    ) -> ManagedBlockchainGetProposalOutput: ...

    def list_invitations(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ManagedBlockchainListInvitationsOutput: ...

    def list_members(self, *,
        NetworkId: str,
        Name: str = ...,
        Status: str = ...,
        IsOwned: bool = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ManagedBlockchainListMembersOutput: ...

    def list_networks(self, *,
        Name: str = ...,
        Framework: str = ...,
        Status: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ManagedBlockchainListNetworksOutput: ...

    def list_nodes(self, *,
        NetworkId: str,
        MemberId: str,
        Status: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ManagedBlockchainListNodesOutput: ...

    def list_proposal_votes(self, *,
        NetworkId: str,
        ProposalId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ManagedBlockchainListProposalVotesOutput: ...

    def list_proposals(self, *,
        NetworkId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ManagedBlockchainListProposalsOutput: ...

    def reject_invitation(self, *,
        InvitationId: str
    ) -> ManagedBlockchainRejectInvitationOutput: ...

    def vote_on_proposal(self, *,
        NetworkId: str,
        ProposalId: str,
        VoterMemberId: str,
        Vote: str
    ) -> ManagedBlockchainVoteOnProposalOutput: ...


ManagedBlockchainMemberFabricConfiguration = TypedDict(
    'ManagedBlockchainMemberFabricConfiguration', {
        'UsernameString': str,
        'PasswordString': str,
    }
)


ManagedBlockchainMemberFrameworkConfiguration = TypedDict(
    'ManagedBlockchainMemberFrameworkConfiguration', {
        'MemberFabricConfiguration': Optional[ManagedBlockchainMemberFabricConfiguration],
    }
)


ManagedBlockchainMemberConfiguration = TypedDict(
    'ManagedBlockchainMemberConfiguration', {
        'NetworkMemberNameString': str,
        'MemberFrameworkConfiguration': ManagedBlockchainMemberFrameworkConfiguration,
        'DescriptionString': Optional[str],
    }
)


ManagedBlockchainCreateMemberOutput = TypedDict(
    'ManagedBlockchainCreateMemberOutput', {
        'ResourceIdString': Optional[str],
    }
)


ManagedBlockchainNetworkFabricConfiguration = TypedDict(
    'ManagedBlockchainNetworkFabricConfiguration', {
        'Edition': str,
    }
)


ManagedBlockchainNetworkFrameworkConfiguration = TypedDict(
    'ManagedBlockchainNetworkFrameworkConfiguration', {
        'NetworkFabricConfiguration': Optional[ManagedBlockchainNetworkFabricConfiguration],
    }
)


ManagedBlockchainApprovalThresholdPolicy = TypedDict(
    'ManagedBlockchainApprovalThresholdPolicy', {
        'ThresholdPercentageInt': Optional[int],
        'ProposalDurationInt': Optional[int],
        'ThresholdComparator': Optional[str],
    }
)


ManagedBlockchainVotingPolicy = TypedDict(
    'ManagedBlockchainVotingPolicy', {
        'ApprovalThresholdPolicy': Optional[ManagedBlockchainApprovalThresholdPolicy],
    }
)


ManagedBlockchainCreateNetworkOutput = TypedDict(
    'ManagedBlockchainCreateNetworkOutput', {
        'ResourceIdString': Optional[str],
        'ResourceIdString': Optional[str],
    }
)


ManagedBlockchainNodeConfiguration = TypedDict(
    'ManagedBlockchainNodeConfiguration', {
        'InstanceTypeString': str,
        'AvailabilityZoneString': str,
    }
)


ManagedBlockchainCreateNodeOutput = TypedDict(
    'ManagedBlockchainCreateNodeOutput', {
        'ResourceIdString': Optional[str],
    }
)


ManagedBlockchainInviteAction = TypedDict(
    'ManagedBlockchainInviteAction', {
        'PrincipalString': str,
    }
)


ManagedBlockchainRemoveAction = TypedDict(
    'ManagedBlockchainRemoveAction', {
        'ResourceIdString': str,
    }
)


ManagedBlockchainProposalActions = TypedDict(
    'ManagedBlockchainProposalActions', {
        'InviteActionList': Optional[List[ManagedBlockchainInviteAction]],
        'RemoveActionList': Optional[List[ManagedBlockchainRemoveAction]],
    }
)


ManagedBlockchainCreateProposalOutput = TypedDict(
    'ManagedBlockchainCreateProposalOutput', {
        'ResourceIdString': Optional[str],
    }
)


ManagedBlockchainDeleteMemberOutput = TypedDict(
    'ManagedBlockchainDeleteMemberOutput', {
    }
)


ManagedBlockchainDeleteNodeOutput = TypedDict(
    'ManagedBlockchainDeleteNodeOutput', {
    }
)


ManagedBlockchainMemberFabricAttributes = TypedDict(
    'ManagedBlockchainMemberFabricAttributes', {
        'UsernameString': Optional[str],
        'String': Optional[str],
    }
)


ManagedBlockchainMemberFrameworkAttributes = TypedDict(
    'ManagedBlockchainMemberFrameworkAttributes', {
        'MemberFabricAttributes': Optional[ManagedBlockchainMemberFabricAttributes],
    }
)


ManagedBlockchainMember = TypedDict(
    'ManagedBlockchainMember', {
        'ResourceIdString': Optional[str],
        'ResourceIdString': Optional[str],
        'NetworkMemberNameString': Optional[str],
        'DescriptionString': Optional[str],
        'MemberFrameworkAttributes': Optional[ManagedBlockchainMemberFrameworkAttributes],
        'MemberStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


ManagedBlockchainGetMemberOutput = TypedDict(
    'ManagedBlockchainGetMemberOutput', {
        'Member': Optional[ManagedBlockchainMember],
    }
)


ManagedBlockchainNetworkFabricAttributes = TypedDict(
    'ManagedBlockchainNetworkFabricAttributes', {
        'String': Optional[str],
        'Edition': Optional[str],
    }
)


ManagedBlockchainNetworkFrameworkAttributes = TypedDict(
    'ManagedBlockchainNetworkFrameworkAttributes', {
        'NetworkFabricAttributes': Optional[ManagedBlockchainNetworkFabricAttributes],
    }
)


ManagedBlockchainNetwork = TypedDict(
    'ManagedBlockchainNetwork', {
        'ResourceIdString': Optional[str],
        'NameString': Optional[str],
        'DescriptionString': Optional[str],
        'Framework': Optional[str],
        'FrameworkVersionString': Optional[str],
        'NetworkFrameworkAttributes': Optional[ManagedBlockchainNetworkFrameworkAttributes],
        'String': Optional[str],
        'VotingPolicy': Optional[ManagedBlockchainVotingPolicy],
        'NetworkStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


ManagedBlockchainGetNetworkOutput = TypedDict(
    'ManagedBlockchainGetNetworkOutput', {
        'Network': Optional[ManagedBlockchainNetwork],
    }
)


ManagedBlockchainNodeFabricAttributes = TypedDict(
    'ManagedBlockchainNodeFabricAttributes', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


ManagedBlockchainNodeFrameworkAttributes = TypedDict(
    'ManagedBlockchainNodeFrameworkAttributes', {
        'NodeFabricAttributes': Optional[ManagedBlockchainNodeFabricAttributes],
    }
)


ManagedBlockchainNode = TypedDict(
    'ManagedBlockchainNode', {
        'ResourceIdString': Optional[str],
        'ResourceIdString': Optional[str],
        'ResourceIdString': Optional[str],
        'InstanceTypeString': Optional[str],
        'AvailabilityZoneString': Optional[str],
        'NodeFrameworkAttributes': Optional[ManagedBlockchainNodeFrameworkAttributes],
        'NodeStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


ManagedBlockchainGetNodeOutput = TypedDict(
    'ManagedBlockchainGetNodeOutput', {
        'Node': Optional[ManagedBlockchainNode],
    }
)


ManagedBlockchainProposal = TypedDict(
    'ManagedBlockchainProposal', {
        'ResourceIdString': Optional[str],
        'ResourceIdString': Optional[str],
        'DescriptionString': Optional[str],
        'ProposalActions': Optional[ManagedBlockchainProposalActions],
        'ResourceIdString': Optional[str],
        'NetworkMemberNameString': Optional[str],
        'ProposalStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'VoteCount': Optional[int],
        'VoteCount': Optional[int],
        'VoteCount': Optional[int],
    }
)


ManagedBlockchainGetProposalOutput = TypedDict(
    'ManagedBlockchainGetProposalOutput', {
        'Proposal': Optional[ManagedBlockchainProposal],
    }
)


ManagedBlockchainNetworkSummary = TypedDict(
    'ManagedBlockchainNetworkSummary', {
        'ResourceIdString': Optional[str],
        'NameString': Optional[str],
        'DescriptionString': Optional[str],
        'Framework': Optional[str],
        'FrameworkVersionString': Optional[str],
        'NetworkStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


ManagedBlockchainInvitation = TypedDict(
    'ManagedBlockchainInvitation', {
        'ResourceIdString': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'InvitationStatus': Optional[str],
        'NetworkSummary': Optional[ManagedBlockchainNetworkSummary],
    }
)


ManagedBlockchainListInvitationsOutput = TypedDict(
    'ManagedBlockchainListInvitationsOutput', {
        'InvitationList': Optional[List[ManagedBlockchainInvitation]],
        'PaginationToken': Optional[str],
    }
)


ManagedBlockchainMemberSummary = TypedDict(
    'ManagedBlockchainMemberSummary', {
        'ResourceIdString': Optional[str],
        'NetworkMemberNameString': Optional[str],
        'DescriptionString': Optional[str],
        'MemberStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'IsOwned': Optional[bool],
    }
)


ManagedBlockchainListMembersOutput = TypedDict(
    'ManagedBlockchainListMembersOutput', {
        'MemberSummaryList': Optional[List[ManagedBlockchainMemberSummary]],
        'PaginationToken': Optional[str],
    }
)


ManagedBlockchainListNetworksOutput = TypedDict(
    'ManagedBlockchainListNetworksOutput', {
        'NetworkSummaryList': Optional[List[ManagedBlockchainNetworkSummary]],
        'PaginationToken': Optional[str],
    }
)


ManagedBlockchainNodeSummary = TypedDict(
    'ManagedBlockchainNodeSummary', {
        'ResourceIdString': Optional[str],
        'NodeStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'AvailabilityZoneString': Optional[str],
        'InstanceTypeString': Optional[str],
    }
)


ManagedBlockchainListNodesOutput = TypedDict(
    'ManagedBlockchainListNodesOutput', {
        'NodeSummaryList': Optional[List[ManagedBlockchainNodeSummary]],
        'PaginationToken': Optional[str],
    }
)


ManagedBlockchainVoteSummary = TypedDict(
    'ManagedBlockchainVoteSummary', {
        'VoteValue': Optional[str],
        'NetworkMemberNameString': Optional[str],
        'ResourceIdString': Optional[str],
    }
)


ManagedBlockchainListProposalVotesOutput = TypedDict(
    'ManagedBlockchainListProposalVotesOutput', {
        'ProposalVoteList': Optional[List[ManagedBlockchainVoteSummary]],
        'PaginationToken': Optional[str],
    }
)


ManagedBlockchainProposalSummary = TypedDict(
    'ManagedBlockchainProposalSummary', {
        'ResourceIdString': Optional[str],
        'DescriptionString': Optional[str],
        'ResourceIdString': Optional[str],
        'NetworkMemberNameString': Optional[str],
        'ProposalStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


ManagedBlockchainListProposalsOutput = TypedDict(
    'ManagedBlockchainListProposalsOutput', {
        'ProposalSummaryList': Optional[List[ManagedBlockchainProposalSummary]],
        'PaginationToken': Optional[str],
    }
)


ManagedBlockchainRejectInvitationOutput = TypedDict(
    'ManagedBlockchainRejectInvitationOutput', {
    }
)


ManagedBlockchainVoteOnProposalOutput = TypedDict(
    'ManagedBlockchainVoteOnProposalOutput', {
    }
)


class MarketplaceEntitlementService(BaseClient):
    def get_entitlements(self, *,
        ProductCode: str,
        Filter: Dict[str, List[str]] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MarketplaceEntitlementServiceGetEntitlementsResult: ...


MarketplaceEntitlementServiceEntitlementValue = TypedDict(
    'MarketplaceEntitlementServiceEntitlementValue', {
        'Integer': Optional[int],
        'Double': Optional[float],
        'Boolean': Optional[bool],
        'String': Optional[str],
    }
)


MarketplaceEntitlementServiceEntitlement = TypedDict(
    'MarketplaceEntitlementServiceEntitlement', {
        'ProductCode': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'EntitlementValue': Optional[MarketplaceEntitlementServiceEntitlementValue],
        'Timestamp': Optional[datetime.datetime],
    }
)


MarketplaceEntitlementServiceGetEntitlementsResult = TypedDict(
    'MarketplaceEntitlementServiceGetEntitlementsResult', {
        'EntitlementList': Optional[List[MarketplaceEntitlementServiceEntitlement]],
        'NonEmptyString': Optional[str],
    }
)


class MarketplaceCommerceAnalytics(BaseClient):
    def generate_data_set(self, *,
        dataSetType: str,
        dataSetPublicationDate: datetime.datetime,
        roleNameArn: str,
        destinationS3BucketName: str,
        snsTopicArn: str,
        destinationS3Prefix: str = ...,
        customerDefinedValues: Dict[str, str] = ...
    ) -> MarketplaceCommerceAnalyticsGenerateDataSetResult: ...

    def start_support_data_export(self, *,
        dataSetType: str,
        fromDate: datetime.datetime,
        roleNameArn: str,
        destinationS3BucketName: str,
        snsTopicArn: str,
        destinationS3Prefix: str = ...,
        customerDefinedValues: Dict[str, str] = ...
    ) -> MarketplaceCommerceAnalyticsStartSupportDataExportResult: ...


MarketplaceCommerceAnalyticsGenerateDataSetResult = TypedDict(
    'MarketplaceCommerceAnalyticsGenerateDataSetResult', {
        'DataSetRequestId': Optional[str],
    }
)


MarketplaceCommerceAnalyticsStartSupportDataExportResult = TypedDict(
    'MarketplaceCommerceAnalyticsStartSupportDataExportResult', {
        'DataSetRequestId': Optional[str],
    }
)


class MediaConnect(BaseClient):
    def add_flow_outputs(self, *,
        FlowArn: str,
        Outputs: List[MediaConnectAddOutputRequest]
    ) -> MediaConnectAddFlowOutputsResponse: ...

    def create_flow(self, *,
        Name: str,
        Source: MediaConnectSetSourceRequest,
        AvailabilityZone: str = ...,
        Entitlements: List[MediaConnectGrantEntitlementRequest] = ...,
        Outputs: List[MediaConnectAddOutputRequest] = ...
    ) -> MediaConnectCreateFlowResponse: ...

    def delete_flow(self, *,
        FlowArn: str
    ) -> MediaConnectDeleteFlowResponse: ...

    def describe_flow(self, *,
        FlowArn: str
    ) -> MediaConnectDescribeFlowResponse: ...

    def grant_flow_entitlements(self, *,
        Entitlements: List[MediaConnectGrantEntitlementRequest],
        FlowArn: str
    ) -> MediaConnectGrantFlowEntitlementsResponse: ...

    def list_entitlements(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MediaConnectListEntitlementsResponse: ...

    def list_flows(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MediaConnectListFlowsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> MediaConnectListTagsForResourceResponse: ...

    def remove_flow_output(self, *,
        FlowArn: str,
        OutputArn: str
    ) -> MediaConnectRemoveFlowOutputResponse: ...

    def revoke_flow_entitlement(self, *,
        EntitlementArn: str,
        FlowArn: str
    ) -> MediaConnectRevokeFlowEntitlementResponse: ...

    def start_flow(self, *,
        FlowArn: str
    ) -> MediaConnectStartFlowResponse: ...

    def stop_flow(self, *,
        FlowArn: str
    ) -> MediaConnectStopFlowResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: Dict[str, str]
    ): ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ): ...

    def update_flow_entitlement(self, *,
        EntitlementArn: str,
        FlowArn: str,
        Description: str = ...,
        Encryption: MediaConnectUpdateEncryption = ...,
        Subscribers: List[str] = ...
    ) -> MediaConnectUpdateFlowEntitlementResponse: ...

    def update_flow_output(self, *,
        FlowArn: str,
        OutputArn: str,
        Description: str = ...,
        Destination: str = ...,
        Encryption: MediaConnectUpdateEncryption = ...,
        MaxLatency: int = ...,
        Port: int = ...,
        Protocol: str = ...,
        SmoothingLatency: int = ...,
        StreamId: str = ...
    ) -> MediaConnectUpdateFlowOutputResponse: ...

    def update_flow_source(self, *,
        FlowArn: str,
        SourceArn: str,
        Decryption: MediaConnectUpdateEncryption = ...,
        Description: str = ...,
        EntitlementArn: str = ...,
        IngestPort: int = ...,
        MaxBitrate: int = ...,
        MaxLatency: int = ...,
        Protocol: str = ...,
        StreamId: str = ...,
        WhitelistCidr: str = ...
    ) -> MediaConnectUpdateFlowSourceResponse: ...


MediaConnectEncryption = TypedDict(
    'MediaConnectEncryption', {
        'Algorithm': str,
        '__string': str,
        '__string': str,
        'KeyType': Optional[str],
    }
)


MediaConnectAddOutputRequest = TypedDict(
    'MediaConnectAddOutputRequest', {
        '__string': str,
        '__integer': int,
        'Protocol': str,
        '__string': Optional[str],
        'Encryption': Optional[MediaConnectEncryption],
        '__integer': Optional[int],
        '__string': Optional[str],
        '__integer': Optional[int],
        '__string': Optional[str],
    }
)


MediaConnectTransport = TypedDict(
    'MediaConnectTransport', {
        'Protocol': str,
        '__integer': Optional[int],
        '__integer': Optional[int],
        '__integer': Optional[int],
        '__string': Optional[str],
    }
)


MediaConnectOutput = TypedDict(
    'MediaConnectOutput', {
        '__string': str,
        '__string': str,
        '__string': Optional[str],
        '__string': Optional[str],
        'Encryption': Optional[MediaConnectEncryption],
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
        'Transport': Optional[MediaConnectTransport],
    }
)


MediaConnectAddFlowOutputsResponse = TypedDict(
    'MediaConnectAddFlowOutputsResponse', {
        '__string': Optional[str],
        '__listOfOutput': Optional[List[MediaConnectOutput]],
    }
)


MediaConnectGrantEntitlementRequest = TypedDict(
    'MediaConnectGrantEntitlementRequest', {
        '__listOf__string': List[str],
        '__string': Optional[str],
        'Encryption': Optional[MediaConnectEncryption],
        '__string': Optional[str],
    }
)


MediaConnectSetSourceRequest = TypedDict(
    'MediaConnectSetSourceRequest', {
        'Encryption': Optional[MediaConnectEncryption],
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
        '__integer': Optional[int],
        '__integer': Optional[int],
        '__string': Optional[str],
        'Protocol': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


MediaConnectEntitlement = TypedDict(
    'MediaConnectEntitlement', {
        '__string': str,
        '__string': str,
        '__listOf__string': List[str],
        '__string': Optional[str],
        'Encryption': Optional[MediaConnectEncryption],
    }
)


MediaConnectSource = TypedDict(
    'MediaConnectSource', {
        '__string': str,
        '__string': str,
        'Encryption': Optional[MediaConnectEncryption],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
        'Transport': Optional[MediaConnectTransport],
        '__string': Optional[str],
    }
)


MediaConnectFlow = TypedDict(
    'MediaConnectFlow', {
        '__string': str,
        '__listOfEntitlement': List[MediaConnectEntitlement],
        '__string': str,
        '__string': str,
        '__listOfOutput': List[MediaConnectOutput],
        'Source': MediaConnectSource,
        'Status': str,
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


MediaConnectCreateFlowResponse = TypedDict(
    'MediaConnectCreateFlowResponse', {
        'Flow': Optional[MediaConnectFlow],
    }
)


MediaConnectDeleteFlowResponse = TypedDict(
    'MediaConnectDeleteFlowResponse', {
        '__string': Optional[str],
        'Status': Optional[str],
    }
)


MediaConnectMessages = TypedDict(
    'MediaConnectMessages', {
        '__listOf__string': List[str],
    }
)


MediaConnectDescribeFlowResponse = TypedDict(
    'MediaConnectDescribeFlowResponse', {
        'Flow': Optional[MediaConnectFlow],
        'Messages': Optional[MediaConnectMessages],
    }
)


MediaConnectGrantFlowEntitlementsResponse = TypedDict(
    'MediaConnectGrantFlowEntitlementsResponse', {
        '__listOfEntitlement': Optional[List[MediaConnectEntitlement]],
        '__string': Optional[str],
    }
)


MediaConnectListedEntitlement = TypedDict(
    'MediaConnectListedEntitlement', {
        '__string': str,
        '__string': str,
    }
)


MediaConnectListEntitlementsResponse = TypedDict(
    'MediaConnectListEntitlementsResponse', {
        '__listOfListedEntitlement': Optional[List[MediaConnectListedEntitlement]],
        '__string': Optional[str],
    }
)


MediaConnectListedFlow = TypedDict(
    'MediaConnectListedFlow', {
        '__string': str,
        '__string': str,
        '__string': str,
        '__string': str,
        'SourceType': str,
        'Status': str,
    }
)


MediaConnectListFlowsResponse = TypedDict(
    'MediaConnectListFlowsResponse', {
        '__listOfListedFlow': Optional[List[MediaConnectListedFlow]],
        '__string': Optional[str],
    }
)


MediaConnectListTagsForResourceResponse = TypedDict(
    'MediaConnectListTagsForResourceResponse', {
        '__mapOf__string': Optional[Dict[str, str]],
    }
)


MediaConnectRemoveFlowOutputResponse = TypedDict(
    'MediaConnectRemoveFlowOutputResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


MediaConnectRevokeFlowEntitlementResponse = TypedDict(
    'MediaConnectRevokeFlowEntitlementResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


MediaConnectStartFlowResponse = TypedDict(
    'MediaConnectStartFlowResponse', {
        '__string': Optional[str],
        'Status': Optional[str],
    }
)


MediaConnectStopFlowResponse = TypedDict(
    'MediaConnectStopFlowResponse', {
        '__string': Optional[str],
        'Status': Optional[str],
    }
)


MediaConnectUpdateEncryption = TypedDict(
    'MediaConnectUpdateEncryption', {
        'Algorithm': Optional[str],
        'KeyType': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


MediaConnectUpdateFlowEntitlementResponse = TypedDict(
    'MediaConnectUpdateFlowEntitlementResponse', {
        'Entitlement': Optional[MediaConnectEntitlement],
        '__string': Optional[str],
    }
)


MediaConnectUpdateFlowOutputResponse = TypedDict(
    'MediaConnectUpdateFlowOutputResponse', {
        '__string': Optional[str],
        'Output': Optional[MediaConnectOutput],
    }
)


MediaConnectUpdateFlowSourceResponse = TypedDict(
    'MediaConnectUpdateFlowSourceResponse', {
        '__string': Optional[str],
        'Source': Optional[MediaConnectSource],
    }
)


class MediaConvert(BaseClient):
    def associate_certificate(self, *,
        Arn: str
    ) -> MediaConvertAssociateCertificateResponse: ...

    def cancel_job(self, *,
        Id: str
    ) -> MediaConvertCancelJobResponse: ...

    def create_job(self, *,
        Role: str,
        Settings: MediaConvertJobSettings,
        AccelerationSettings: MediaConvertAccelerationSettings = ...,
        BillingTagsSource: str = ...,
        ClientRequestToken: str = ...,
        JobTemplate: str = ...,
        Queue: str = ...,
        StatusUpdateInterval: str = ...,
        UserMetadata: Dict[str, str] = ...
    ) -> MediaConvertCreateJobResponse: ...

    def create_job_template(self, *,
        Name: str,
        Settings: MediaConvertJobTemplateSettings,
        AccelerationSettings: MediaConvertAccelerationSettings = ...,
        Category: str = ...,
        Description: str = ...,
        Queue: str = ...,
        StatusUpdateInterval: str = ...,
        Tags: Dict[str, str] = ...
    ) -> MediaConvertCreateJobTemplateResponse: ...

    def create_preset(self, *,
        Name: str,
        Settings: MediaConvertPresetSettings,
        Category: str = ...,
        Description: str = ...,
        Tags: Dict[str, str] = ...
    ) -> MediaConvertCreatePresetResponse: ...

    def create_queue(self, *,
        Name: str,
        Description: str = ...,
        PricingPlan: str = ...,
        ReservationPlanSettings: MediaConvertReservationPlanSettings = ...,
        Tags: Dict[str, str] = ...
    ) -> MediaConvertCreateQueueResponse: ...

    def delete_job_template(self, *,
        Name: str
    ) -> MediaConvertDeleteJobTemplateResponse: ...

    def delete_preset(self, *,
        Name: str
    ) -> MediaConvertDeletePresetResponse: ...

    def delete_queue(self, *,
        Name: str
    ) -> MediaConvertDeleteQueueResponse: ...

    def describe_endpoints(self, *,
        MaxResults: int = ...,
        Mode: str = ...,
        NextToken: str = ...
    ) -> MediaConvertDescribeEndpointsResponse: ...

    def disassociate_certificate(self, *,
        Arn: str
    ) -> MediaConvertDisassociateCertificateResponse: ...

    def get_job(self, *,
        Id: str
    ) -> MediaConvertGetJobResponse: ...

    def get_job_template(self, *,
        Name: str
    ) -> MediaConvertGetJobTemplateResponse: ...

    def get_preset(self, *,
        Name: str
    ) -> MediaConvertGetPresetResponse: ...

    def get_queue(self, *,
        Name: str
    ) -> MediaConvertGetQueueResponse: ...

    def list_job_templates(self, *,
        Category: str = ...,
        ListBy: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        Order: str = ...
    ) -> MediaConvertListJobTemplatesResponse: ...

    def list_jobs(self, *,
        MaxResults: int = ...,
        NextToken: str = ...,
        Order: str = ...,
        Queue: str = ...,
        Status: str = ...
    ) -> MediaConvertListJobsResponse: ...

    def list_presets(self, *,
        Category: str = ...,
        ListBy: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        Order: str = ...
    ) -> MediaConvertListPresetsResponse: ...

    def list_queues(self, *,
        ListBy: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        Order: str = ...
    ) -> MediaConvertListQueuesResponse: ...

    def list_tags_for_resource(self, *,
        Arn: str
    ) -> MediaConvertListTagsForResourceResponse: ...

    def tag_resource(self, *,
        Arn: str,
        Tags: Dict[str, str]
    ) -> MediaConvertTagResourceResponse: ...

    def untag_resource(self, *,
        Arn: str,
        TagKeys: List[str] = ...
    ) -> MediaConvertUntagResourceResponse: ...

    def update_job_template(self, *,
        Name: str,
        AccelerationSettings: MediaConvertAccelerationSettings = ...,
        Category: str = ...,
        Description: str = ...,
        Queue: str = ...,
        Settings: MediaConvertJobTemplateSettings = ...,
        StatusUpdateInterval: str = ...
    ) -> MediaConvertUpdateJobTemplateResponse: ...

    def update_preset(self, *,
        Name: str,
        Category: str = ...,
        Description: str = ...,
        Settings: MediaConvertPresetSettings = ...
    ) -> MediaConvertUpdatePresetResponse: ...

    def update_queue(self, *,
        Name: str,
        Description: str = ...,
        ReservationPlanSettings: MediaConvertReservationPlanSettings = ...,
        Status: str = ...
    ) -> MediaConvertUpdateQueueResponse: ...


MediaConvertAssociateCertificateResponse = TypedDict(
    'MediaConvertAssociateCertificateResponse', {
    }
)


MediaConvertCancelJobResponse = TypedDict(
    'MediaConvertCancelJobResponse', {
    }
)


MediaConvertAccelerationSettings = TypedDict(
    'MediaConvertAccelerationSettings', {
        'AccelerationMode': str,
    }
)


MediaConvertAvailBlanking = TypedDict(
    'MediaConvertAvailBlanking', {
        '__stringMin14PatternS3BmpBMPPngPNG': Optional[str],
    }
)


MediaConvertEsamManifestConfirmConditionNotification = TypedDict(
    'MediaConvertEsamManifestConfirmConditionNotification', {
        '__stringPatternSNManifestConfirmConditionNotificationNS': Optional[str],
    }
)


MediaConvertEsamSignalProcessingNotification = TypedDict(
    'MediaConvertEsamSignalProcessingNotification', {
        '__stringPatternSNSignalProcessingNotificationNS': Optional[str],
    }
)


MediaConvertEsamSettings = TypedDict(
    'MediaConvertEsamSettings', {
        'EsamManifestConfirmConditionNotification': Optional[MediaConvertEsamManifestConfirmConditionNotification],
        '__integerMin0Max30000': Optional[int],
        'EsamSignalProcessingNotification': Optional[MediaConvertEsamSignalProcessingNotification],
    }
)


MediaConvertAudioSelectorGroup = TypedDict(
    'MediaConvertAudioSelectorGroup', {
        '__listOf__stringMin1': Optional[List[str]],
    }
)


MediaConvertOutputChannelMapping = TypedDict(
    'MediaConvertOutputChannelMapping', {
        '__listOf__integerMinNegative60Max6': Optional[List[int]],
    }
)


MediaConvertChannelMapping = TypedDict(
    'MediaConvertChannelMapping', {
        '__listOfOutputChannelMapping': Optional[List[MediaConvertOutputChannelMapping]],
    }
)


MediaConvertRemixSettings = TypedDict(
    'MediaConvertRemixSettings', {
        'ChannelMapping': Optional[MediaConvertChannelMapping],
        '__integerMin1Max16': Optional[int],
        '__integerMin1Max8': Optional[int],
    }
)


MediaConvertAudioSelector = TypedDict(
    'MediaConvertAudioSelector', {
        '__stringMin3Max3PatternAZaZ3': Optional[str],
        'AudioDefaultSelection': Optional[str],
        '__stringPatternS3MM2VVMMPPEEGGAAVVIIMMPP4FFLLVVMMPPTTMMPPGGMM4VVTTRRPPFF4VVMM2TTSSTTSS264HH264MMKKVVMMOOVVMMTTSSMM2TTWWMMVVAASSFFVVOOBB3GGPP3GGPPPPMMXXFFDDIIVVXXXXVVIIDDRRAAWWDDVVGGXXFFMM1VV3GG2VVMMFFMM3UU8LLCCHHGGXXFFMMPPEEGG2MMXXFFMMPPEEGG2MMXXFFHHDDWWAAVVYY4MMAAAACCAAIIFFFFMMPP2AACC3EECC3DDTTSSEE': Optional[str],
        'LanguageCode': Optional[str],
        '__integerMinNegative2147483648Max2147483647': Optional[int],
        '__listOf__integerMin1Max2147483647': Optional[List[int]],
        '__integerMin0Max8': Optional[int],
        'RemixSettings': Optional[MediaConvertRemixSettings],
        'AudioSelectorType': Optional[str],
        '__listOf__integerMin1Max2147483647': Optional[List[int]],
    }
)


MediaConvertAncillarySourceSettings = TypedDict(
    'MediaConvertAncillarySourceSettings', {
        '__integerMin1Max4': Optional[int],
    }
)


MediaConvertDvbSubSourceSettings = TypedDict(
    'MediaConvertDvbSubSourceSettings', {
        '__integerMin1Max2147483647': Optional[int],
    }
)


MediaConvertEmbeddedSourceSettings = TypedDict(
    'MediaConvertEmbeddedSourceSettings', {
        'EmbeddedConvert608To708': Optional[str],
        '__integerMin1Max4': Optional[int],
        '__integerMin1Max1': Optional[int],
    }
)


MediaConvertFileSourceSettings = TypedDict(
    'MediaConvertFileSourceSettings', {
        'FileSourceConvert608To708': Optional[str],
        '__stringMin14PatternS3SccSCCTtmlTTMLDfxpDFXPStlSTLSrtSRTSmiSMI': Optional[str],
        '__integerMinNegative2147483648Max2147483647': Optional[int],
    }
)


MediaConvertTeletextSourceSettings = TypedDict(
    'MediaConvertTeletextSourceSettings', {
        '__stringMin3Max3Pattern1809aFAF09aEAE': Optional[str],
    }
)


MediaConvertTrackSourceSettings = TypedDict(
    'MediaConvertTrackSourceSettings', {
        '__integerMin1Max2147483647': Optional[int],
    }
)


MediaConvertCaptionSourceSettings = TypedDict(
    'MediaConvertCaptionSourceSettings', {
        'AncillarySourceSettings': Optional[MediaConvertAncillarySourceSettings],
        'DvbSubSourceSettings': Optional[MediaConvertDvbSubSourceSettings],
        'EmbeddedSourceSettings': Optional[MediaConvertEmbeddedSourceSettings],
        'FileSourceSettings': Optional[MediaConvertFileSourceSettings],
        'CaptionSourceType': Optional[str],
        'TeletextSourceSettings': Optional[MediaConvertTeletextSourceSettings],
        'TrackSourceSettings': Optional[MediaConvertTrackSourceSettings],
    }
)


MediaConvertCaptionSelector = TypedDict(
    'MediaConvertCaptionSelector', {
        '__stringMin3Max3PatternAZaZ3': Optional[str],
        'LanguageCode': Optional[str],
        'CaptionSourceSettings': Optional[MediaConvertCaptionSourceSettings],
    }
)


MediaConvertInputDecryptionSettings = TypedDict(
    'MediaConvertInputDecryptionSettings', {
        'DecryptionMode': Optional[str],
        '__stringMin24Max512PatternAZaZ0902': Optional[str],
        '__stringMin16Max24PatternAZaZ0922AZaZ0916': Optional[str],
        '__stringMin9Max19PatternAZ26EastWestCentralNorthSouthEastWest1912': Optional[str],
    }
)


MediaConvertInsertableImage = TypedDict(
    'MediaConvertInsertableImage', {
        '__integerMin0Max2147483647': Optional[int],
        '__integerMin0Max2147483647': Optional[int],
        '__integerMin0Max2147483647': Optional[int],
        '__integerMin0Max2147483647': Optional[int],
        '__stringMin14PatternS3BmpBMPPngPNGTgaTGA': Optional[str],
        '__integerMin0Max2147483647': Optional[int],
        '__integerMin0Max2147483647': Optional[int],
        '__integerMin0Max99': Optional[int],
        '__integerMin0Max100': Optional[int],
        '__stringPattern01D20305D205D': Optional[str],
        '__integerMin0Max2147483647': Optional[int],
    }
)


MediaConvertImageInserter = TypedDict(
    'MediaConvertImageInserter', {
        '__listOfInsertableImage': Optional[List[MediaConvertInsertableImage]],
    }
)


MediaConvertInputClipping = TypedDict(
    'MediaConvertInputClipping', {
        '__stringPattern010920405090509092': Optional[str],
        '__stringPattern010920405090509092': Optional[str],
    }
)


MediaConvertHdr10Metadata = TypedDict(
    'MediaConvertHdr10Metadata', {
        '__integerMin0Max50000': Optional[int],
        '__integerMin0Max50000': Optional[int],
        '__integerMin0Max50000': Optional[int],
        '__integerMin0Max50000': Optional[int],
        '__integerMin0Max65535': Optional[int],
        '__integerMin0Max65535': Optional[int],
        '__integerMin0Max2147483647': Optional[int],
        '__integerMin0Max2147483647': Optional[int],
        '__integerMin0Max50000': Optional[int],
        '__integerMin0Max50000': Optional[int],
        '__integerMin0Max50000': Optional[int],
        '__integerMin0Max50000': Optional[int],
    }
)


MediaConvertVideoSelector = TypedDict(
    'MediaConvertVideoSelector', {
        'ColorSpace': Optional[str],
        'ColorSpaceUsage': Optional[str],
        'Hdr10Metadata': Optional[MediaConvertHdr10Metadata],
        '__integerMin1Max2147483647': Optional[int],
        '__integerMinNegative2147483648Max2147483647': Optional[int],
        'InputRotate': Optional[str],
    }
)


MediaConvertInput = TypedDict(
    'MediaConvertInput', {
        '__mapOfAudioSelectorGroup': Optional[Dict[str, MediaConvertAudioSelectorGroup]],
        '__mapOfAudioSelector': Optional[Dict[str, MediaConvertAudioSelector]],
        '__mapOfCaptionSelector': Optional[Dict[str, MediaConvertCaptionSelector]],
        'InputDeblockFilter': Optional[str],
        'InputDecryptionSettings': Optional[MediaConvertInputDecryptionSettings],
        'InputDenoiseFilter': Optional[str],
        '__stringPatternS3MM2VVMMPPEEGGAAVVIIMMPP4FFLLVVMMPPTTMMPPGGMM4VVTTRRPPFF4VVMM2TTSSTTSS264HH264MMKKVVMMOOVVMMTTSSMM2TTWWMMVVAASSFFVVOOBB3GGPP3GGPPPPMMXXFFDDIIVVXXXXVVIIDDRRAAWWDDVVGGXXFFMM1VV3GG2VVMMFFMM3UU8LLCCHHGGXXFFMMPPEEGG2MMXXFFMMPPEEGG2MMXXFFHHDDWWAAVVYY4MMXXMMLL': Optional[str],
        'InputFilterEnable': Optional[str],
        '__integerMinNegative5Max5': Optional[int],
        'ImageInserter': Optional[MediaConvertImageInserter],
        '__listOfInputClipping': Optional[List[MediaConvertInputClipping]],
        '__integerMin1Max2147483647': Optional[int],
        'InputPsiControl': Optional[str],
        '__listOf__stringPatternS3ASSETMAPXml': Optional[List[str]],
        'InputTimecodeSource': Optional[str],
        'VideoSelector': Optional[MediaConvertVideoSelector],
    }
)


MediaConvertMotionImageInsertionFramerate = TypedDict(
    'MediaConvertMotionImageInsertionFramerate', {
        '__integerMin1Max17895697': Optional[int],
        '__integerMin1Max2147483640': Optional[int],
    }
)


MediaConvertMotionImageInsertionOffset = TypedDict(
    'MediaConvertMotionImageInsertionOffset', {
        '__integerMin0Max2147483647': Optional[int],
        '__integerMin0Max2147483647': Optional[int],
    }
)


MediaConvertMotionImageInserter = TypedDict(
    'MediaConvertMotionImageInserter', {
        'MotionImageInsertionFramerate': Optional[MediaConvertMotionImageInsertionFramerate],
        '__stringMin14Max1285PatternS3Mov09Png': Optional[str],
        'MotionImageInsertionMode': Optional[str],
        'MotionImageInsertionOffset': Optional[MediaConvertMotionImageInsertionOffset],
        'MotionImagePlayback': Optional[str],
        '__stringMin11Max11Pattern01D20305D205D': Optional[str],
    }
)


MediaConvertNielsenConfiguration = TypedDict(
    'MediaConvertNielsenConfiguration', {
        '__integerMin0Max9': Optional[int],
        '__string': Optional[str],
    }
)


MediaConvertS3EncryptionSettings = TypedDict(
    'MediaConvertS3EncryptionSettings', {
        'S3ServerSideEncryptionType': Optional[str],
        '__stringPatternArnAwsUsGovKmsAZ26EastWestCentralNorthSouthEastWest1912D12KeyAFAF098AFAF094AFAF094AFAF094AFAF0912': Optional[str],
    }
)


MediaConvertS3DestinationSettings = TypedDict(
    'MediaConvertS3DestinationSettings', {
        'S3EncryptionSettings': Optional[MediaConvertS3EncryptionSettings],
    }
)


MediaConvertDestinationSettings = TypedDict(
    'MediaConvertDestinationSettings', {
        'S3DestinationSettings': Optional[MediaConvertS3DestinationSettings],
    }
)


MediaConvertStaticKeyProvider = TypedDict(
    'MediaConvertStaticKeyProvider', {
        '__stringPatternIdentityAZaZ26AZaZ09163': Optional[str],
        '__stringPatternDD': Optional[str],
        '__stringPatternAZaZ0932': Optional[str],
        '__string': Optional[str],
    }
)


MediaConvertCmafEncryptionSettings = TypedDict(
    'MediaConvertCmafEncryptionSettings', {
        '__stringMin32Max32Pattern09aFAF32': Optional[str],
        'CmafEncryptionType': Optional[str],
        'CmafInitializationVectorInManifest': Optional[str],
        'StaticKeyProvider': Optional[MediaConvertStaticKeyProvider],
        'CmafKeyProviderType': Optional[str],
    }
)


MediaConvertCmafGroupSettings = TypedDict(
    'MediaConvertCmafGroupSettings', {
        '__string': Optional[str],
        'CmafClientCache': Optional[str],
        'CmafCodecSpecification': Optional[str],
        '__stringPatternS3': Optional[str],
        'DestinationSettings': Optional[MediaConvertDestinationSettings],
        'CmafEncryptionSettings': Optional[MediaConvertCmafEncryptionSettings],
        '__integerMin1Max2147483647': Optional[int],
        'CmafManifestCompression': Optional[str],
        'CmafManifestDurationFormat': Optional[str],
        '__integerMin0Max2147483647': Optional[int],
        '__doubleMin0Max2147483647': Optional[float],
        'CmafSegmentControl': Optional[str],
        '__integerMin1Max2147483647': Optional[int],
        'CmafStreamInfResolution': Optional[str],
        'CmafWriteDASHManifest': Optional[str],
        'CmafWriteHLSManifest': Optional[str],
    }
)


MediaConvertSpekeKeyProvider = TypedDict(
    'MediaConvertSpekeKeyProvider', {
        '__stringPatternArnAwsUsGovAcm': Optional[str],
        '__string': Optional[str],
        '__listOf__stringPattern09aFAF809aFAF409aFAF409aFAF409aFAF12': Optional[List[str]],
        '__stringPatternHttps': Optional[str],
    }
)


MediaConvertDashIsoEncryptionSettings = TypedDict(
    'MediaConvertDashIsoEncryptionSettings', {
        'DashIsoPlaybackDeviceCompatibility': Optional[str],
        'SpekeKeyProvider': Optional[MediaConvertSpekeKeyProvider],
    }
)


MediaConvertDashIsoGroupSettings = TypedDict(
    'MediaConvertDashIsoGroupSettings', {
        '__string': Optional[str],
        '__stringPatternS3': Optional[str],
        'DestinationSettings': Optional[MediaConvertDestinationSettings],
        'DashIsoEncryptionSettings': Optional[MediaConvertDashIsoEncryptionSettings],
        '__integerMin1Max2147483647': Optional[int],
        'DashIsoHbbtvCompliance': Optional[str],
        '__integerMin0Max2147483647': Optional[int],
        'DashIsoSegmentControl': Optional[str],
        '__integerMin1Max2147483647': Optional[int],
        'DashIsoWriteSegmentTimelineInRepresentation': Optional[str],
    }
)


MediaConvertFileGroupSettings = TypedDict(
    'MediaConvertFileGroupSettings', {
        '__stringPatternS3': Optional[str],
        'DestinationSettings': Optional[MediaConvertDestinationSettings],
    }
)


MediaConvertHlsCaptionLanguageMapping = TypedDict(
    'MediaConvertHlsCaptionLanguageMapping', {
        '__integerMinNegative2147483648Max2147483647': Optional[int],
        '__stringMin3Max3PatternAZaZ3': Optional[str],
        'LanguageCode': Optional[str],
        '__string': Optional[str],
    }
)


MediaConvertHlsEncryptionSettings = TypedDict(
    'MediaConvertHlsEncryptionSettings', {
        '__stringMin32Max32Pattern09aFAF32': Optional[str],
        'HlsEncryptionType': Optional[str],
        'HlsInitializationVectorInManifest': Optional[str],
        'HlsOfflineEncrypted': Optional[str],
        'SpekeKeyProvider': Optional[MediaConvertSpekeKeyProvider],
        'StaticKeyProvider': Optional[MediaConvertStaticKeyProvider],
        'HlsKeyProviderType': Optional[str],
    }
)


MediaConvertHlsGroupSettings = TypedDict(
    'MediaConvertHlsGroupSettings', {
        '__listOfHlsAdMarkers': Optional[List[str]],
        '__string': Optional[str],
        '__listOfHlsCaptionLanguageMapping': Optional[List[MediaConvertHlsCaptionLanguageMapping]],
        'HlsCaptionLanguageSetting': Optional[str],
        'HlsClientCache': Optional[str],
        'HlsCodecSpecification': Optional[str],
        '__stringPatternS3': Optional[str],
        'DestinationSettings': Optional[MediaConvertDestinationSettings],
        'HlsDirectoryStructure': Optional[str],
        'HlsEncryptionSettings': Optional[MediaConvertHlsEncryptionSettings],
        'HlsManifestCompression': Optional[str],
        'HlsManifestDurationFormat': Optional[str],
        '__doubleMin0Max2147483647': Optional[float],
        '__integerMin0Max2147483647': Optional[int],
        'HlsOutputSelection': Optional[str],
        'HlsProgramDateTime': Optional[str],
        '__integerMin0Max3600': Optional[int],
        'HlsSegmentControl': Optional[str],
        '__integerMin1Max2147483647': Optional[int],
        '__integerMin1Max2147483647': Optional[int],
        'HlsStreamInfResolution': Optional[str],
        'HlsTimedMetadataId3Frame': Optional[str],
        '__integerMinNegative2147483648Max2147483647': Optional[int],
        '__integerMinNegative2147483648Max2147483647': Optional[int],
    }
)


MediaConvertMsSmoothEncryptionSettings = TypedDict(
    'MediaConvertMsSmoothEncryptionSettings', {
        'SpekeKeyProvider': Optional[MediaConvertSpekeKeyProvider],
    }
)


MediaConvertMsSmoothGroupSettings = TypedDict(
    'MediaConvertMsSmoothGroupSettings', {
        'MsSmoothAudioDeduplication': Optional[str],
        '__stringPatternS3': Optional[str],
        'DestinationSettings': Optional[MediaConvertDestinationSettings],
        'MsSmoothEncryptionSettings': Optional[MediaConvertMsSmoothEncryptionSettings],
        '__integerMin1Max2147483647': Optional[int],
        'MsSmoothManifestEncoding': Optional[str],
    }
)


MediaConvertOutputGroupSettings = TypedDict(
    'MediaConvertOutputGroupSettings', {
        'CmafGroupSettings': Optional[MediaConvertCmafGroupSettings],
        'DashIsoGroupSettings': Optional[MediaConvertDashIsoGroupSettings],
        'FileGroupSettings': Optional[MediaConvertFileGroupSettings],
        'HlsGroupSettings': Optional[MediaConvertHlsGroupSettings],
        'MsSmoothGroupSettings': Optional[MediaConvertMsSmoothGroupSettings],
        'OutputGroupType': Optional[str],
    }
)


MediaConvertAudioNormalizationSettings = TypedDict(
    'MediaConvertAudioNormalizationSettings', {
        'AudioNormalizationAlgorithm': Optional[str],
        'AudioNormalizationAlgorithmControl': Optional[str],
        '__integerMinNegative70Max0': Optional[int],
        'AudioNormalizationLoudnessLogging': Optional[str],
        'AudioNormalizationPeakCalculation': Optional[str],
        '__doubleMinNegative59Max0': Optional[float],
    }
)


MediaConvertAacSettings = TypedDict(
    'MediaConvertAacSettings', {
        'AacAudioDescriptionBroadcasterMix': Optional[str],
        '__integerMin6000Max1024000': Optional[int],
        'AacCodecProfile': Optional[str],
        'AacCodingMode': Optional[str],
        'AacRateControlMode': Optional[str],
        'AacRawFormat': Optional[str],
        '__integerMin8000Max96000': Optional[int],
        'AacSpecification': Optional[str],
        'AacVbrQuality': Optional[str],
    }
)


MediaConvertAc3Settings = TypedDict(
    'MediaConvertAc3Settings', {
        '__integerMin64000Max640000': Optional[int],
        'Ac3BitstreamMode': Optional[str],
        'Ac3CodingMode': Optional[str],
        '__integerMin1Max31': Optional[int],
        'Ac3DynamicRangeCompressionProfile': Optional[str],
        'Ac3LfeFilter': Optional[str],
        'Ac3MetadataControl': Optional[str],
        '__integerMin48000Max48000': Optional[int],
    }
)


MediaConvertAiffSettings = TypedDict(
    'MediaConvertAiffSettings', {
        '__integerMin16Max24': Optional[int],
        '__integerMin1Max2': Optional[int],
        '__integerMin8000Max192000': Optional[int],
    }
)


MediaConvertEac3Settings = TypedDict(
    'MediaConvertEac3Settings', {
        'Eac3AttenuationControl': Optional[str],
        '__integerMin64000Max640000': Optional[int],
        'Eac3BitstreamMode': Optional[str],
        'Eac3CodingMode': Optional[str],
        'Eac3DcFilter': Optional[str],
        '__integerMin1Max31': Optional[int],
        'Eac3DynamicRangeCompressionLine': Optional[str],
        'Eac3DynamicRangeCompressionRf': Optional[str],
        'Eac3LfeControl': Optional[str],
        'Eac3LfeFilter': Optional[str],
        '__doubleMinNegative60Max3': Optional[float],
        '__doubleMinNegative60MaxNegative1': Optional[float],
        '__doubleMinNegative60Max3': Optional[float],
        '__doubleMinNegative60MaxNegative1': Optional[float],
        'Eac3MetadataControl': Optional[str],
        'Eac3PassthroughControl': Optional[str],
        'Eac3PhaseControl': Optional[str],
        '__integerMin48000Max48000': Optional[int],
        'Eac3StereoDownmix': Optional[str],
        'Eac3SurroundExMode': Optional[str],
        'Eac3SurroundMode': Optional[str],
    }
)


MediaConvertMp2Settings = TypedDict(
    'MediaConvertMp2Settings', {
        '__integerMin32000Max384000': Optional[int],
        '__integerMin1Max2': Optional[int],
        '__integerMin32000Max48000': Optional[int],
    }
)


MediaConvertWavSettings = TypedDict(
    'MediaConvertWavSettings', {
        '__integerMin16Max24': Optional[int],
        '__integerMin1Max8': Optional[int],
        'WavFormat': Optional[str],
        '__integerMin8000Max192000': Optional[int],
    }
)


MediaConvertAudioCodecSettings = TypedDict(
    'MediaConvertAudioCodecSettings', {
        'AacSettings': Optional[MediaConvertAacSettings],
        'Ac3Settings': Optional[MediaConvertAc3Settings],
        'AiffSettings': Optional[MediaConvertAiffSettings],
        'AudioCodec': Optional[str],
        'Eac3Settings': Optional[MediaConvertEac3Settings],
        'Mp2Settings': Optional[MediaConvertMp2Settings],
        'WavSettings': Optional[MediaConvertWavSettings],
    }
)


MediaConvertAudioDescription = TypedDict(
    'MediaConvertAudioDescription', {
        'AudioNormalizationSettings': Optional[MediaConvertAudioNormalizationSettings],
        '__string': Optional[str],
        '__integerMin0Max255': Optional[int],
        'AudioTypeControl': Optional[str],
        'AudioCodecSettings': Optional[MediaConvertAudioCodecSettings],
        '__stringMin3Max3PatternAZaZ3': Optional[str],
        'LanguageCode': Optional[str],
        'AudioLanguageCodeControl': Optional[str],
        'RemixSettings': Optional[MediaConvertRemixSettings],
        '__stringPatternWS': Optional[str],
    }
)


MediaConvertBurninDestinationSettings = TypedDict(
    'MediaConvertBurninDestinationSettings', {
        'BurninSubtitleAlignment': Optional[str],
        'BurninSubtitleBackgroundColor': Optional[str],
        '__integerMin0Max255': Optional[int],
        'BurninSubtitleFontColor': Optional[str],
        '__integerMin0Max255': Optional[int],
        '__integerMin96Max600': Optional[int],
        'FontScript': Optional[str],
        '__integerMin0Max96': Optional[int],
        'BurninSubtitleOutlineColor': Optional[str],
        '__integerMin0Max10': Optional[int],
        'BurninSubtitleShadowColor': Optional[str],
        '__integerMin0Max255': Optional[int],
        '__integerMinNegative2147483648Max2147483647': Optional[int],
        '__integerMinNegative2147483648Max2147483647': Optional[int],
        'BurninSubtitleTeletextSpacing': Optional[str],
        '__integerMin0Max2147483647': Optional[int],
        '__integerMin0Max2147483647': Optional[int],
    }
)


MediaConvertDvbSubDestinationSettings = TypedDict(
    'MediaConvertDvbSubDestinationSettings', {
        'DvbSubtitleAlignment': Optional[str],
        'DvbSubtitleBackgroundColor': Optional[str],
        '__integerMin0Max255': Optional[int],
        'DvbSubtitleFontColor': Optional[str],
        '__integerMin0Max255': Optional[int],
        '__integerMin96Max600': Optional[int],
        'FontScript': Optional[str],
        '__integerMin0Max96': Optional[int],
        'DvbSubtitleOutlineColor': Optional[str],
        '__integerMin0Max10': Optional[int],
        'DvbSubtitleShadowColor': Optional[str],
        '__integerMin0Max255': Optional[int],
        '__integerMinNegative2147483648Max2147483647': Optional[int],
        '__integerMinNegative2147483648Max2147483647': Optional[int],
        'DvbSubtitleTeletextSpacing': Optional[str],
        '__integerMin0Max2147483647': Optional[int],
        '__integerMin0Max2147483647': Optional[int],
    }
)


MediaConvertEmbeddedDestinationSettings = TypedDict(
    'MediaConvertEmbeddedDestinationSettings', {
        '__integerMin1Max4': Optional[int],
    }
)


MediaConvertSccDestinationSettings = TypedDict(
    'MediaConvertSccDestinationSettings', {
        'SccDestinationFramerate': Optional[str],
    }
)


MediaConvertTeletextDestinationSettings = TypedDict(
    'MediaConvertTeletextDestinationSettings', {
        '__stringMin3Max3Pattern1809aFAF09aEAE': Optional[str],
    }
)


MediaConvertTtmlDestinationSettings = TypedDict(
    'MediaConvertTtmlDestinationSettings', {
        'TtmlStylePassthrough': Optional[str],
    }
)


MediaConvertCaptionDestinationSettings = TypedDict(
    'MediaConvertCaptionDestinationSettings', {
        'BurninDestinationSettings': Optional[MediaConvertBurninDestinationSettings],
        'CaptionDestinationType': Optional[str],
        'DvbSubDestinationSettings': Optional[MediaConvertDvbSubDestinationSettings],
        'EmbeddedDestinationSettings': Optional[MediaConvertEmbeddedDestinationSettings],
        'SccDestinationSettings': Optional[MediaConvertSccDestinationSettings],
        'TeletextDestinationSettings': Optional[MediaConvertTeletextDestinationSettings],
        'TtmlDestinationSettings': Optional[MediaConvertTtmlDestinationSettings],
    }
)


MediaConvertCaptionDescription = TypedDict(
    'MediaConvertCaptionDescription', {
        '__stringMin1': Optional[str],
        '__stringMin3Max3PatternAZaZ3': Optional[str],
        'CaptionDestinationSettings': Optional[MediaConvertCaptionDestinationSettings],
        'LanguageCode': Optional[str],
        '__string': Optional[str],
    }
)


MediaConvertF4vSettings = TypedDict(
    'MediaConvertF4vSettings', {
        'F4vMoovPlacement': Optional[str],
    }
)


MediaConvertDvbNitSettings = TypedDict(
    'MediaConvertDvbNitSettings', {
        '__integerMin0Max65535': Optional[int],
        '__stringMin1Max256': Optional[str],
        '__integerMin25Max10000': Optional[int],
    }
)


MediaConvertDvbSdtSettings = TypedDict(
    'MediaConvertDvbSdtSettings', {
        'OutputSdt': Optional[str],
        '__integerMin25Max2000': Optional[int],
        '__stringMin1Max256': Optional[str],
        '__stringMin1Max256': Optional[str],
    }
)


MediaConvertDvbTdtSettings = TypedDict(
    'MediaConvertDvbTdtSettings', {
        '__integerMin1000Max30000': Optional[int],
    }
)


MediaConvertM2tsScte35Esam = TypedDict(
    'MediaConvertM2tsScte35Esam', {
        '__integerMin32Max8182': Optional[int],
    }
)


MediaConvertM2tsSettings = TypedDict(
    'MediaConvertM2tsSettings', {
        'M2tsAudioBufferModel': Optional[str],
        '__integerMin0Max2147483647': Optional[int],
        '__listOf__integerMin32Max8182': Optional[List[int]],
        '__integerMin0Max2147483647': Optional[int],
        'M2tsBufferModel': Optional[str],
        'DvbNitSettings': Optional[MediaConvertDvbNitSettings],
        'DvbSdtSettings': Optional[MediaConvertDvbSdtSettings],
        '__listOf__integerMin32Max8182': Optional[List[int]],
        'DvbTdtSettings': Optional[MediaConvertDvbTdtSettings],
        '__integerMin32Max8182': Optional[int],
        'M2tsEbpAudioInterval': Optional[str],
        'M2tsEbpPlacement': Optional[str],
        'M2tsEsRateInPes': Optional[str],
        'M2tsForceTsVideoEbpOrder': Optional[str],
        '__doubleMin0': Optional[float],
        '__integerMin0Max500': Optional[int],
        '__integerMin0Max10000': Optional[int],
        'M2tsNielsenId3': Optional[str],
        '__doubleMin0': Optional[float],
        '__integerMin0Max1000': Optional[int],
        'M2tsPcrControl': Optional[str],
        '__integerMin32Max8182': Optional[int],
        '__integerMin0Max1000': Optional[int],
        '__integerMin32Max8182': Optional[int],
        '__integerMin32Max8182': Optional[int],
        '__integerMin0Max65535': Optional[int],
        'M2tsRateMode': Optional[str],
        'M2tsScte35Esam': Optional[MediaConvertM2tsScte35Esam],
        '__integerMin32Max8182': Optional[int],
        'M2tsScte35Source': Optional[str],
        'M2tsSegmentationMarkers': Optional[str],
        'M2tsSegmentationStyle': Optional[str],
        '__doubleMin0': Optional[float],
        '__integerMin32Max8182': Optional[int],
        '__integerMin0Max65535': Optional[int],
        '__integerMin32Max8182': Optional[int],
    }
)


MediaConvertM3u8Settings = TypedDict(
    'MediaConvertM3u8Settings', {
        '__integerMin0Max2147483647': Optional[int],
        '__listOf__integerMin32Max8182': Optional[List[int]],
        'M3u8NielsenId3': Optional[str],
        '__integerMin0Max1000': Optional[int],
        'M3u8PcrControl': Optional[str],
        '__integerMin32Max8182': Optional[int],
        '__integerMin0Max1000': Optional[int],
        '__integerMin32Max8182': Optional[int],
        '__integerMin32Max8182': Optional[int],
        '__integerMin0Max65535': Optional[int],
        '__integerMin32Max8182': Optional[int],
        'M3u8Scte35Source': Optional[str],
        'TimedMetadata': Optional[str],
        '__integerMin32Max8182': Optional[int],
        '__integerMin0Max65535': Optional[int],
        '__integerMin32Max8182': Optional[int],
    }
)


MediaConvertMovSettings = TypedDict(
    'MediaConvertMovSettings', {
        'MovClapAtom': Optional[str],
        'MovCslgAtom': Optional[str],
        'MovMpeg2FourCCControl': Optional[str],
        'MovPaddingControl': Optional[str],
        'MovReference': Optional[str],
    }
)


MediaConvertMp4Settings = TypedDict(
    'MediaConvertMp4Settings', {
        'Mp4CslgAtom': Optional[str],
        'Mp4FreeSpaceBox': Optional[str],
        'Mp4MoovPlacement': Optional[str],
        '__string': Optional[str],
    }
)


MediaConvertContainerSettings = TypedDict(
    'MediaConvertContainerSettings', {
        'ContainerType': Optional[str],
        'F4vSettings': Optional[MediaConvertF4vSettings],
        'M2tsSettings': Optional[MediaConvertM2tsSettings],
        'M3u8Settings': Optional[MediaConvertM3u8Settings],
        'MovSettings': Optional[MediaConvertMovSettings],
        'Mp4Settings': Optional[MediaConvertMp4Settings],
    }
)


MediaConvertHlsSettings = TypedDict(
    'MediaConvertHlsSettings', {
        '__string': Optional[str],
        '__string': Optional[str],
        'HlsAudioTrackType': Optional[str],
        'HlsIFrameOnlyManifest': Optional[str],
        '__string': Optional[str],
    }
)


MediaConvertOutputSettings = TypedDict(
    'MediaConvertOutputSettings', {
        'HlsSettings': Optional[MediaConvertHlsSettings],
    }
)


MediaConvertFrameCaptureSettings = TypedDict(
    'MediaConvertFrameCaptureSettings', {
        '__integerMin1Max2147483647': Optional[int],
        '__integerMin1Max2147483647': Optional[int],
        '__integerMin1Max10000000': Optional[int],
        '__integerMin1Max100': Optional[int],
    }
)


MediaConvertH264QvbrSettings = TypedDict(
    'MediaConvertH264QvbrSettings', {
        '__integerMin1000Max1152000000': Optional[int],
        '__integerMin1Max10': Optional[int],
    }
)


MediaConvertH264Settings = TypedDict(
    'MediaConvertH264Settings', {
        'H264AdaptiveQuantization': Optional[str],
        '__integerMin1000Max1152000000': Optional[int],
        'H264CodecLevel': Optional[str],
        'H264CodecProfile': Optional[str],
        'H264DynamicSubGop': Optional[str],
        'H264EntropyEncoding': Optional[str],
        'H264FieldEncoding': Optional[str],
        'H264FlickerAdaptiveQuantization': Optional[str],
        'H264FramerateControl': Optional[str],
        'H264FramerateConversionAlgorithm': Optional[str],
        '__integerMin1Max2147483647': Optional[int],
        '__integerMin1Max2147483647': Optional[int],
        'H264GopBReference': Optional[str],
        '__integerMin0Max2147483647': Optional[int],
        '__doubleMin0': Optional[float],
        'H264GopSizeUnits': Optional[str],
        '__integerMin0Max100': Optional[int],
        '__integerMin0Max1152000000': Optional[int],
        'H264InterlaceMode': Optional[str],
        '__integerMin1000Max1152000000': Optional[int],
        '__integerMin0Max30': Optional[int],
        '__integerMin0Max7': Optional[int],
        '__integerMin1Max6': Optional[int],
        'H264ParControl': Optional[str],
        '__integerMin1Max2147483647': Optional[int],
        '__integerMin1Max2147483647': Optional[int],
        'H264QualityTuningLevel': Optional[str],
        'H264QvbrSettings': Optional[MediaConvertH264QvbrSettings],
        'H264RateControlMode': Optional[str],
        'H264RepeatPps': Optional[str],
        'H264SceneChangeDetect': Optional[str],
        '__integerMin1Max32': Optional[int],
        'H264SlowPal': Optional[str],
        '__integerMin0Max128': Optional[int],
        'H264SpatialAdaptiveQuantization': Optional[str],
        'H264Syntax': Optional[str],
        'H264Telecine': Optional[str],
        'H264TemporalAdaptiveQuantization': Optional[str],
        'H264UnregisteredSeiTimecode': Optional[str],
    }
)


MediaConvertH265QvbrSettings = TypedDict(
    'MediaConvertH265QvbrSettings', {
        '__integerMin1000Max1466400000': Optional[int],
        '__integerMin1Max10': Optional[int],
    }
)


MediaConvertH265Settings = TypedDict(
    'MediaConvertH265Settings', {
        'H265AdaptiveQuantization': Optional[str],
        'H265AlternateTransferFunctionSei': Optional[str],
        '__integerMin1000Max1466400000': Optional[int],
        'H265CodecLevel': Optional[str],
        'H265CodecProfile': Optional[str],
        'H265DynamicSubGop': Optional[str],
        'H265FlickerAdaptiveQuantization': Optional[str],
        'H265FramerateControl': Optional[str],
        'H265FramerateConversionAlgorithm': Optional[str],
        '__integerMin1Max2147483647': Optional[int],
        '__integerMin1Max2147483647': Optional[int],
        'H265GopBReference': Optional[str],
        '__integerMin0Max2147483647': Optional[int],
        '__doubleMin0': Optional[float],
        'H265GopSizeUnits': Optional[str],
        '__integerMin0Max100': Optional[int],
        '__integerMin0Max1466400000': Optional[int],
        'H265InterlaceMode': Optional[str],
        '__integerMin1000Max1466400000': Optional[int],
        '__integerMin0Max30': Optional[int],
        '__integerMin0Max7': Optional[int],
        '__integerMin1Max6': Optional[int],
        'H265ParControl': Optional[str],
        '__integerMin1Max2147483647': Optional[int],
        '__integerMin1Max2147483647': Optional[int],
        'H265QualityTuningLevel': Optional[str],
        'H265QvbrSettings': Optional[MediaConvertH265QvbrSettings],
        'H265RateControlMode': Optional[str],
        'H265SampleAdaptiveOffsetFilterMode': Optional[str],
        'H265SceneChangeDetect': Optional[str],
        '__integerMin1Max32': Optional[int],
        'H265SlowPal': Optional[str],
        'H265SpatialAdaptiveQuantization': Optional[str],
        'H265Telecine': Optional[str],
        'H265TemporalAdaptiveQuantization': Optional[str],
        'H265TemporalIds': Optional[str],
        'H265Tiles': Optional[str],
        'H265UnregisteredSeiTimecode': Optional[str],
        'H265WriteMp4PackagingType': Optional[str],
    }
)


MediaConvertMpeg2Settings = TypedDict(
    'MediaConvertMpeg2Settings', {
        'Mpeg2AdaptiveQuantization': Optional[str],
        '__integerMin1000Max288000000': Optional[int],
        'Mpeg2CodecLevel': Optional[str],
        'Mpeg2CodecProfile': Optional[str],
        'Mpeg2DynamicSubGop': Optional[str],
        'Mpeg2FramerateControl': Optional[str],
        'Mpeg2FramerateConversionAlgorithm': Optional[str],
        '__integerMin1Max1001': Optional[int],
        '__integerMin24Max60000': Optional[int],
        '__integerMin0Max2147483647': Optional[int],
        '__doubleMin0': Optional[float],
        'Mpeg2GopSizeUnits': Optional[str],
        '__integerMin0Max100': Optional[int],
        '__integerMin0Max47185920': Optional[int],
        'Mpeg2InterlaceMode': Optional[str],
        'Mpeg2IntraDcPrecision': Optional[str],
        '__integerMin1000Max300000000': Optional[int],
        '__integerMin0Max30': Optional[int],
        '__integerMin0Max7': Optional[int],
        'Mpeg2ParControl': Optional[str],
        '__integerMin1Max2147483647': Optional[int],
        '__integerMin1Max2147483647': Optional[int],
        'Mpeg2QualityTuningLevel': Optional[str],
        'Mpeg2RateControlMode': Optional[str],
        'Mpeg2SceneChangeDetect': Optional[str],
        'Mpeg2SlowPal': Optional[str],
        '__integerMin0Max128': Optional[int],
        'Mpeg2SpatialAdaptiveQuantization': Optional[str],
        'Mpeg2Syntax': Optional[str],
        'Mpeg2Telecine': Optional[str],
        'Mpeg2TemporalAdaptiveQuantization': Optional[str],
    }
)


MediaConvertProresSettings = TypedDict(
    'MediaConvertProresSettings', {
        'ProresCodecProfile': Optional[str],
        'ProresFramerateControl': Optional[str],
        'ProresFramerateConversionAlgorithm': Optional[str],
        '__integerMin1Max2147483647': Optional[int],
        '__integerMin1Max2147483647': Optional[int],
        'ProresInterlaceMode': Optional[str],
        'ProresParControl': Optional[str],
        '__integerMin1Max2147483647': Optional[int],
        '__integerMin1Max2147483647': Optional[int],
        'ProresSlowPal': Optional[str],
        'ProresTelecine': Optional[str],
    }
)


MediaConvertVideoCodecSettings = TypedDict(
    'MediaConvertVideoCodecSettings', {
        'VideoCodec': Optional[str],
        'FrameCaptureSettings': Optional[MediaConvertFrameCaptureSettings],
        'H264Settings': Optional[MediaConvertH264Settings],
        'H265Settings': Optional[MediaConvertH265Settings],
        'Mpeg2Settings': Optional[MediaConvertMpeg2Settings],
        'ProresSettings': Optional[MediaConvertProresSettings],
    }
)


MediaConvertRectangle = TypedDict(
    'MediaConvertRectangle', {
        '__integerMin2Max2147483647': Optional[int],
        '__integerMin2Max2147483647': Optional[int],
        '__integerMin0Max2147483647': Optional[int],
        '__integerMin0Max2147483647': Optional[int],
    }
)


MediaConvertColorCorrector = TypedDict(
    'MediaConvertColorCorrector', {
        '__integerMin1Max100': Optional[int],
        'ColorSpaceConversion': Optional[str],
        '__integerMin1Max100': Optional[int],
        'Hdr10Metadata': Optional[MediaConvertHdr10Metadata],
        '__integerMinNegative180Max180': Optional[int],
        '__integerMin1Max100': Optional[int],
    }
)


MediaConvertDeinterlacer = TypedDict(
    'MediaConvertDeinterlacer', {
        'DeinterlaceAlgorithm': Optional[str],
        'DeinterlacerControl': Optional[str],
        'DeinterlacerMode': Optional[str],
    }
)


MediaConvertNoiseReducerFilterSettings = TypedDict(
    'MediaConvertNoiseReducerFilterSettings', {
        '__integerMin0Max3': Optional[int],
    }
)


MediaConvertNoiseReducerSpatialFilterSettings = TypedDict(
    'MediaConvertNoiseReducerSpatialFilterSettings', {
        '__integerMin0Max3': Optional[int],
        '__integerMinNegative2Max3': Optional[int],
        '__integerMin0Max16': Optional[int],
    }
)


MediaConvertNoiseReducer = TypedDict(
    'MediaConvertNoiseReducer', {
        'NoiseReducerFilter': Optional[str],
        'NoiseReducerFilterSettings': Optional[MediaConvertNoiseReducerFilterSettings],
        'NoiseReducerSpatialFilterSettings': Optional[MediaConvertNoiseReducerSpatialFilterSettings],
    }
)


MediaConvertTimecodeBurnin = TypedDict(
    'MediaConvertTimecodeBurnin', {
        '__integerMin10Max48': Optional[int],
        'TimecodeBurninPosition': Optional[str],
        '__stringPattern': Optional[str],
    }
)


MediaConvertVideoPreprocessor = TypedDict(
    'MediaConvertVideoPreprocessor', {
        'ColorCorrector': Optional[MediaConvertColorCorrector],
        'Deinterlacer': Optional[MediaConvertDeinterlacer],
        'ImageInserter': Optional[MediaConvertImageInserter],
        'NoiseReducer': Optional[MediaConvertNoiseReducer],
        'TimecodeBurnin': Optional[MediaConvertTimecodeBurnin],
    }
)


MediaConvertVideoDescription = TypedDict(
    'MediaConvertVideoDescription', {
        'AfdSignaling': Optional[str],
        'AntiAlias': Optional[str],
        'VideoCodecSettings': Optional[MediaConvertVideoCodecSettings],
        'ColorMetadata': Optional[str],
        'Rectangle': Optional[MediaConvertRectangle],
        'DropFrameTimecode': Optional[str],
        '__integerMin0Max15': Optional[int],
        '__integerMin32Max2160': Optional[int],
        'Rectangle': Optional[MediaConvertRectangle],
        'RespondToAfd': Optional[str],
        'ScalingBehavior': Optional[str],
        '__integerMin0Max100': Optional[int],
        'VideoTimecodeInsertion': Optional[str],
        'VideoPreprocessor': Optional[MediaConvertVideoPreprocessor],
        '__integerMin32Max4096': Optional[int],
    }
)


MediaConvertOutput = TypedDict(
    'MediaConvertOutput', {
        '__listOfAudioDescription': Optional[List[MediaConvertAudioDescription]],
        '__listOfCaptionDescription': Optional[List[MediaConvertCaptionDescription]],
        'ContainerSettings': Optional[MediaConvertContainerSettings],
        '__string': Optional[str],
        '__stringMin1': Optional[str],
        'OutputSettings': Optional[MediaConvertOutputSettings],
        '__stringMin0': Optional[str],
        'VideoDescription': Optional[MediaConvertVideoDescription],
    }
)


MediaConvertOutputGroup = TypedDict(
    'MediaConvertOutputGroup', {
        '__string': Optional[str],
        '__string': Optional[str],
        'OutputGroupSettings': Optional[MediaConvertOutputGroupSettings],
        '__listOfOutput': Optional[List[MediaConvertOutput]],
    }
)


MediaConvertTimecodeConfig = TypedDict(
    'MediaConvertTimecodeConfig', {
        '__stringPattern010920405090509092': Optional[str],
        'TimecodeSource': Optional[str],
        '__stringPattern010920405090509092': Optional[str],
        '__stringPattern0940191020191209301': Optional[str],
    }
)


MediaConvertId3Insertion = TypedDict(
    'MediaConvertId3Insertion', {
        '__stringPatternAZaZ0902': Optional[str],
        '__stringPattern010920405090509092': Optional[str],
    }
)


MediaConvertTimedMetadataInsertion = TypedDict(
    'MediaConvertTimedMetadataInsertion', {
        '__listOfId3Insertion': Optional[List[MediaConvertId3Insertion]],
    }
)


MediaConvertJobSettings = TypedDict(
    'MediaConvertJobSettings', {
        '__integerMinNegative1000Max1000': Optional[int],
        'AvailBlanking': Optional[MediaConvertAvailBlanking],
        'EsamSettings': Optional[MediaConvertEsamSettings],
        '__listOfInput': Optional[List[MediaConvertInput]],
        'MotionImageInserter': Optional[MediaConvertMotionImageInserter],
        'NielsenConfiguration': Optional[MediaConvertNielsenConfiguration],
        '__listOfOutputGroup': Optional[List[MediaConvertOutputGroup]],
        'TimecodeConfig': Optional[MediaConvertTimecodeConfig],
        'TimedMetadataInsertion': Optional[MediaConvertTimedMetadataInsertion],
    }
)


MediaConvertVideoDetail = TypedDict(
    'MediaConvertVideoDetail', {
        '__integer': Optional[int],
        '__integer': Optional[int],
    }
)


MediaConvertOutputDetail = TypedDict(
    'MediaConvertOutputDetail', {
        '__integer': Optional[int],
        'VideoDetail': Optional[MediaConvertVideoDetail],
    }
)


MediaConvertOutputGroupDetail = TypedDict(
    'MediaConvertOutputGroupDetail', {
        '__listOfOutputDetail': Optional[List[MediaConvertOutputDetail]],
    }
)


MediaConvertTiming = TypedDict(
    'MediaConvertTiming', {
        '__timestampUnix': Optional[datetime.datetime],
        '__timestampUnix': Optional[datetime.datetime],
        '__timestampUnix': Optional[datetime.datetime],
    }
)


MediaConvertJob = TypedDict(
    'MediaConvertJob', {
        '__string': str,
        'JobSettings': MediaConvertJobSettings,
        'AccelerationSettings': Optional[MediaConvertAccelerationSettings],
        '__string': Optional[str],
        'BillingTagsSource': Optional[str],
        '__timestampUnix': Optional[datetime.datetime],
        'JobPhase': Optional[str],
        '__integer': Optional[int],
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
        '__string': Optional[str],
        '__listOfOutputGroupDetail': Optional[List[MediaConvertOutputGroupDetail]],
        '__string': Optional[str],
        '__integer': Optional[int],
        'JobStatus': Optional[str],
        'StatusUpdateInterval': Optional[str],
        'Timing': Optional[MediaConvertTiming],
        '__mapOf__string': Optional[Dict[str, str]],
    }
)


MediaConvertCreateJobResponse = TypedDict(
    'MediaConvertCreateJobResponse', {
        'Job': Optional[MediaConvertJob],
    }
)


MediaConvertInputTemplate = TypedDict(
    'MediaConvertInputTemplate', {
        '__mapOfAudioSelectorGroup': Optional[Dict[str, MediaConvertAudioSelectorGroup]],
        '__mapOfAudioSelector': Optional[Dict[str, MediaConvertAudioSelector]],
        '__mapOfCaptionSelector': Optional[Dict[str, MediaConvertCaptionSelector]],
        'InputDeblockFilter': Optional[str],
        'InputDenoiseFilter': Optional[str],
        'InputFilterEnable': Optional[str],
        '__integerMinNegative5Max5': Optional[int],
        'ImageInserter': Optional[MediaConvertImageInserter],
        '__listOfInputClipping': Optional[List[MediaConvertInputClipping]],
        '__integerMin1Max2147483647': Optional[int],
        'InputPsiControl': Optional[str],
        'InputTimecodeSource': Optional[str],
        'VideoSelector': Optional[MediaConvertVideoSelector],
    }
)


MediaConvertJobTemplateSettings = TypedDict(
    'MediaConvertJobTemplateSettings', {
        '__integerMinNegative1000Max1000': Optional[int],
        'AvailBlanking': Optional[MediaConvertAvailBlanking],
        'EsamSettings': Optional[MediaConvertEsamSettings],
        '__listOfInputTemplate': Optional[List[MediaConvertInputTemplate]],
        'MotionImageInserter': Optional[MediaConvertMotionImageInserter],
        'NielsenConfiguration': Optional[MediaConvertNielsenConfiguration],
        '__listOfOutputGroup': Optional[List[MediaConvertOutputGroup]],
        'TimecodeConfig': Optional[MediaConvertTimecodeConfig],
        'TimedMetadataInsertion': Optional[MediaConvertTimedMetadataInsertion],
    }
)


MediaConvertJobTemplate = TypedDict(
    'MediaConvertJobTemplate', {
        '__string': str,
        'JobTemplateSettings': MediaConvertJobTemplateSettings,
        'AccelerationSettings': Optional[MediaConvertAccelerationSettings],
        '__string': Optional[str],
        '__string': Optional[str],
        '__timestampUnix': Optional[datetime.datetime],
        '__string': Optional[str],
        '__timestampUnix': Optional[datetime.datetime],
        '__string': Optional[str],
        'StatusUpdateInterval': Optional[str],
        'Type': Optional[str],
    }
)


MediaConvertCreateJobTemplateResponse = TypedDict(
    'MediaConvertCreateJobTemplateResponse', {
        'JobTemplate': Optional[MediaConvertJobTemplate],
    }
)


MediaConvertCaptionDescriptionPreset = TypedDict(
    'MediaConvertCaptionDescriptionPreset', {
        '__stringMin3Max3PatternAZaZ3': Optional[str],
        'CaptionDestinationSettings': Optional[MediaConvertCaptionDestinationSettings],
        'LanguageCode': Optional[str],
        '__string': Optional[str],
    }
)


MediaConvertPresetSettings = TypedDict(
    'MediaConvertPresetSettings', {
        '__listOfAudioDescription': Optional[List[MediaConvertAudioDescription]],
        '__listOfCaptionDescriptionPreset': Optional[List[MediaConvertCaptionDescriptionPreset]],
        'ContainerSettings': Optional[MediaConvertContainerSettings],
        'VideoDescription': Optional[MediaConvertVideoDescription],
    }
)


MediaConvertPreset = TypedDict(
    'MediaConvertPreset', {
        '__string': str,
        'PresetSettings': MediaConvertPresetSettings,
        '__string': Optional[str],
        '__string': Optional[str],
        '__timestampUnix': Optional[datetime.datetime],
        '__string': Optional[str],
        '__timestampUnix': Optional[datetime.datetime],
        'Type': Optional[str],
    }
)


MediaConvertCreatePresetResponse = TypedDict(
    'MediaConvertCreatePresetResponse', {
        'Preset': Optional[MediaConvertPreset],
    }
)


MediaConvertReservationPlanSettings = TypedDict(
    'MediaConvertReservationPlanSettings', {
        'Commitment': str,
        'RenewalType': str,
        '__integer': int,
    }
)


MediaConvertReservationPlan = TypedDict(
    'MediaConvertReservationPlan', {
        'Commitment': Optional[str],
        '__timestampUnix': Optional[datetime.datetime],
        '__timestampUnix': Optional[datetime.datetime],
        'RenewalType': Optional[str],
        '__integer': Optional[int],
        'ReservationPlanStatus': Optional[str],
    }
)


MediaConvertQueue = TypedDict(
    'MediaConvertQueue', {
        '__string': str,
        '__string': Optional[str],
        '__timestampUnix': Optional[datetime.datetime],
        '__string': Optional[str],
        '__timestampUnix': Optional[datetime.datetime],
        'PricingPlan': Optional[str],
        '__integer': Optional[int],
        'ReservationPlan': Optional[MediaConvertReservationPlan],
        'QueueStatus': Optional[str],
        '__integer': Optional[int],
        'Type': Optional[str],
    }
)


MediaConvertCreateQueueResponse = TypedDict(
    'MediaConvertCreateQueueResponse', {
        'Queue': Optional[MediaConvertQueue],
    }
)


MediaConvertDeleteJobTemplateResponse = TypedDict(
    'MediaConvertDeleteJobTemplateResponse', {
    }
)


MediaConvertDeletePresetResponse = TypedDict(
    'MediaConvertDeletePresetResponse', {
    }
)


MediaConvertDeleteQueueResponse = TypedDict(
    'MediaConvertDeleteQueueResponse', {
    }
)


MediaConvertEndpoint = TypedDict(
    'MediaConvertEndpoint', {
        '__string': Optional[str],
    }
)


MediaConvertDescribeEndpointsResponse = TypedDict(
    'MediaConvertDescribeEndpointsResponse', {
        '__listOfEndpoint': Optional[List[MediaConvertEndpoint]],
        '__string': Optional[str],
    }
)


MediaConvertDisassociateCertificateResponse = TypedDict(
    'MediaConvertDisassociateCertificateResponse', {
    }
)


MediaConvertGetJobResponse = TypedDict(
    'MediaConvertGetJobResponse', {
        'Job': Optional[MediaConvertJob],
    }
)


MediaConvertGetJobTemplateResponse = TypedDict(
    'MediaConvertGetJobTemplateResponse', {
        'JobTemplate': Optional[MediaConvertJobTemplate],
    }
)


MediaConvertGetPresetResponse = TypedDict(
    'MediaConvertGetPresetResponse', {
        'Preset': Optional[MediaConvertPreset],
    }
)


MediaConvertGetQueueResponse = TypedDict(
    'MediaConvertGetQueueResponse', {
        'Queue': Optional[MediaConvertQueue],
    }
)


MediaConvertListJobTemplatesResponse = TypedDict(
    'MediaConvertListJobTemplatesResponse', {
        '__listOfJobTemplate': Optional[List[MediaConvertJobTemplate]],
        '__string': Optional[str],
    }
)


MediaConvertListJobsResponse = TypedDict(
    'MediaConvertListJobsResponse', {
        '__listOfJob': Optional[List[MediaConvertJob]],
        '__string': Optional[str],
    }
)


MediaConvertListPresetsResponse = TypedDict(
    'MediaConvertListPresetsResponse', {
        '__string': Optional[str],
        '__listOfPreset': Optional[List[MediaConvertPreset]],
    }
)


MediaConvertListQueuesResponse = TypedDict(
    'MediaConvertListQueuesResponse', {
        '__string': Optional[str],
        '__listOfQueue': Optional[List[MediaConvertQueue]],
    }
)


MediaConvertResourceTags = TypedDict(
    'MediaConvertResourceTags', {
        '__string': Optional[str],
        '__mapOf__string': Optional[Dict[str, str]],
    }
)


MediaConvertListTagsForResourceResponse = TypedDict(
    'MediaConvertListTagsForResourceResponse', {
        'ResourceTags': Optional[MediaConvertResourceTags],
    }
)


MediaConvertTagResourceResponse = TypedDict(
    'MediaConvertTagResourceResponse', {
    }
)


MediaConvertUntagResourceResponse = TypedDict(
    'MediaConvertUntagResourceResponse', {
    }
)


MediaConvertUpdateJobTemplateResponse = TypedDict(
    'MediaConvertUpdateJobTemplateResponse', {
        'JobTemplate': Optional[MediaConvertJobTemplate],
    }
)


MediaConvertUpdatePresetResponse = TypedDict(
    'MediaConvertUpdatePresetResponse', {
        'Preset': Optional[MediaConvertPreset],
    }
)


MediaConvertUpdateQueueResponse = TypedDict(
    'MediaConvertUpdateQueueResponse', {
        'Queue': Optional[MediaConvertQueue],
    }
)


class MediaLive(BaseClient):
    def batch_update_schedule(self, *,
        ChannelId: str,
        Creates: MediaLiveBatchScheduleActionCreateRequest = ...,
        Deletes: MediaLiveBatchScheduleActionDeleteRequest = ...
    ) -> MediaLiveBatchUpdateScheduleResponse: ...

    def create_channel(self, *,
        ChannelClass: str = ...,
        Destinations: List[MediaLiveOutputDestination] = ...,
        EncoderSettings: MediaLiveEncoderSettings = ...,
        InputAttachments: List[MediaLiveInputAttachment] = ...,
        InputSpecification: MediaLiveInputSpecification = ...,
        LogLevel: str = ...,
        Name: str = ...,
        RequestId: str = ...,
        Reserved: str = ...,
        RoleArn: str = ...,
        Tags: Dict[str, str] = ...
    ) -> MediaLiveCreateChannelResponse: ...

    def create_input(self, *,
        Destinations: List[MediaLiveInputDestinationRequest] = ...,
        InputSecurityGroups: List[str] = ...,
        MediaConnectFlows: List[MediaLiveMediaConnectFlowRequest] = ...,
        Name: str = ...,
        RequestId: str = ...,
        RoleArn: str = ...,
        Sources: List[MediaLiveInputSourceRequest] = ...,
        Tags: Dict[str, str] = ...,
        Type: str = ...,
        Vpc: MediaLiveInputVpcRequest = ...
    ) -> MediaLiveCreateInputResponse: ...

    def create_input_security_group(self, *,
        Tags: Dict[str, str] = ...,
        WhitelistRules: List[MediaLiveInputWhitelistRuleCidr] = ...
    ) -> MediaLiveCreateInputSecurityGroupResponse: ...

    def create_tags(self, *,
        ResourceArn: str,
        Tags: Dict[str, str] = ...
    ): ...

    def delete_channel(self, *,
        ChannelId: str
    ) -> MediaLiveDeleteChannelResponse: ...

    def delete_input(self, *,
        InputId: str
    ) -> MediaLiveDeleteInputResponse: ...

    def delete_input_security_group(self, *,
        InputSecurityGroupId: str
    ) -> MediaLiveDeleteInputSecurityGroupResponse: ...

    def delete_reservation(self, *,
        ReservationId: str
    ) -> MediaLiveDeleteReservationResponse: ...

    def delete_schedule(self, *,
        ChannelId: str
    ) -> MediaLiveDeleteScheduleResponse: ...

    def delete_tags(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ): ...

    def describe_channel(self, *,
        ChannelId: str
    ) -> MediaLiveDescribeChannelResponse: ...

    def describe_input(self, *,
        InputId: str
    ) -> MediaLiveDescribeInputResponse: ...

    def describe_input_security_group(self, *,
        InputSecurityGroupId: str
    ) -> MediaLiveDescribeInputSecurityGroupResponse: ...

    def describe_offering(self, *,
        OfferingId: str
    ) -> MediaLiveDescribeOfferingResponse: ...

    def describe_reservation(self, *,
        ReservationId: str
    ) -> MediaLiveDescribeReservationResponse: ...

    def describe_schedule(self, *,
        ChannelId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MediaLiveDescribeScheduleResponse: ...

    def list_channels(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MediaLiveListChannelsResponse: ...

    def list_input_security_groups(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MediaLiveListInputSecurityGroupsResponse: ...

    def list_inputs(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MediaLiveListInputsResponse: ...

    def list_offerings(self, *,
        ChannelClass: str = ...,
        ChannelConfiguration: str = ...,
        Codec: str = ...,
        MaxResults: int = ...,
        MaximumBitrate: str = ...,
        MaximumFramerate: str = ...,
        NextToken: str = ...,
        Resolution: str = ...,
        ResourceType: str = ...,
        SpecialFeature: str = ...,
        VideoQuality: str = ...
    ) -> MediaLiveListOfferingsResponse: ...

    def list_reservations(self, *,
        ChannelClass: str = ...,
        Codec: str = ...,
        MaxResults: int = ...,
        MaximumBitrate: str = ...,
        MaximumFramerate: str = ...,
        NextToken: str = ...,
        Resolution: str = ...,
        ResourceType: str = ...,
        SpecialFeature: str = ...,
        VideoQuality: str = ...
    ) -> MediaLiveListReservationsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> MediaLiveListTagsForResourceResponse: ...

    def purchase_offering(self, *,
        Count: int,
        OfferingId: str,
        Name: str = ...,
        RequestId: str = ...,
        Start: str = ...,
        Tags: Dict[str, str] = ...
    ) -> MediaLivePurchaseOfferingResponse: ...

    def start_channel(self, *,
        ChannelId: str
    ) -> MediaLiveStartChannelResponse: ...

    def stop_channel(self, *,
        ChannelId: str
    ) -> MediaLiveStopChannelResponse: ...

    def update_channel(self, *,
        ChannelId: str,
        Destinations: List[MediaLiveOutputDestination] = ...,
        EncoderSettings: MediaLiveEncoderSettings = ...,
        InputAttachments: List[MediaLiveInputAttachment] = ...,
        InputSpecification: MediaLiveInputSpecification = ...,
        LogLevel: str = ...,
        Name: str = ...,
        RoleArn: str = ...
    ) -> MediaLiveUpdateChannelResponse: ...

    def update_channel_class(self, *,
        ChannelClass: str,
        ChannelId: str,
        Destinations: List[MediaLiveOutputDestination] = ...
    ) -> MediaLiveUpdateChannelClassResponse: ...

    def update_input(self, *,
        InputId: str,
        Destinations: List[MediaLiveInputDestinationRequest] = ...,
        InputSecurityGroups: List[str] = ...,
        MediaConnectFlows: List[MediaLiveMediaConnectFlowRequest] = ...,
        Name: str = ...,
        RoleArn: str = ...,
        Sources: List[MediaLiveInputSourceRequest] = ...
    ) -> MediaLiveUpdateInputResponse: ...

    def update_input_security_group(self, *,
        InputSecurityGroupId: str,
        Tags: Dict[str, str] = ...,
        WhitelistRules: List[MediaLiveInputWhitelistRuleCidr] = ...
    ) -> MediaLiveUpdateInputSecurityGroupResponse: ...

    def update_reservation(self, *,
        ReservationId: str,
        Name: str = ...
    ) -> MediaLiveUpdateReservationResponse: ...


MediaLiveHlsTimedMetadataScheduleActionSettings = TypedDict(
    'MediaLiveHlsTimedMetadataScheduleActionSettings', {
        '__string': str,
    }
)


MediaLiveInputSwitchScheduleActionSettings = TypedDict(
    'MediaLiveInputSwitchScheduleActionSettings', {
        '__string': str,
    }
)


MediaLivePipelinePauseStateSettings = TypedDict(
    'MediaLivePipelinePauseStateSettings', {
        'PipelineId': str,
    }
)


MediaLivePauseStateScheduleActionSettings = TypedDict(
    'MediaLivePauseStateScheduleActionSettings', {
        '__listOfPipelinePauseStateSettings': Optional[List[MediaLivePipelinePauseStateSettings]],
    }
)


MediaLiveScte35ReturnToNetworkScheduleActionSettings = TypedDict(
    'MediaLiveScte35ReturnToNetworkScheduleActionSettings', {
        '__integerMin0Max4294967295': int,
    }
)


MediaLiveScte35SpliceInsertScheduleActionSettings = TypedDict(
    'MediaLiveScte35SpliceInsertScheduleActionSettings', {
        '__integerMin0Max4294967295': int,
        '__integerMin0Max8589934591': Optional[int],
    }
)


MediaLiveScte35DeliveryRestrictions = TypedDict(
    'MediaLiveScte35DeliveryRestrictions', {
        'Scte35ArchiveAllowedFlag': str,
        'Scte35DeviceRestrictions': str,
        'Scte35NoRegionalBlackoutFlag': str,
        'Scte35WebDeliveryAllowedFlag': str,
    }
)


MediaLiveScte35SegmentationDescriptor = TypedDict(
    'MediaLiveScte35SegmentationDescriptor', {
        'Scte35SegmentationCancelIndicator': str,
        '__integerMin0Max4294967295': int,
        'Scte35DeliveryRestrictions': Optional[MediaLiveScte35DeliveryRestrictions],
        '__integerMin0Max255': Optional[int],
        '__integerMin0Max1099511627775': Optional[int],
        '__integerMin0Max255': Optional[int],
        '__string': Optional[str],
        '__integerMin0Max255': Optional[int],
        '__integerMin0Max255': Optional[int],
        '__integerMin0Max255': Optional[int],
        '__integerMin0Max255': Optional[int],
    }
)


MediaLiveScte35DescriptorSettings = TypedDict(
    'MediaLiveScte35DescriptorSettings', {
        'Scte35SegmentationDescriptor': MediaLiveScte35SegmentationDescriptor,
    }
)


MediaLiveScte35Descriptor = TypedDict(
    'MediaLiveScte35Descriptor', {
        'Scte35DescriptorSettings': MediaLiveScte35DescriptorSettings,
    }
)


MediaLiveScte35TimeSignalScheduleActionSettings = TypedDict(
    'MediaLiveScte35TimeSignalScheduleActionSettings', {
        '__listOfScte35Descriptor': List[MediaLiveScte35Descriptor],
    }
)


MediaLiveInputLocation = TypedDict(
    'MediaLiveInputLocation', {
        '__string': str,
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


MediaLiveStaticImageActivateScheduleActionSettings = TypedDict(
    'MediaLiveStaticImageActivateScheduleActionSettings', {
        'InputLocation': MediaLiveInputLocation,
        '__integerMin0': Optional[int],
        '__integerMin0': Optional[int],
        '__integerMin0': Optional[int],
        '__integerMin1': Optional[int],
        '__integerMin0': Optional[int],
        '__integerMin0': Optional[int],
        '__integerMin0Max7': Optional[int],
        '__integerMin0Max100': Optional[int],
        '__integerMin1': Optional[int],
    }
)


MediaLiveStaticImageDeactivateScheduleActionSettings = TypedDict(
    'MediaLiveStaticImageDeactivateScheduleActionSettings', {
        '__integerMin0': Optional[int],
        '__integerMin0Max7': Optional[int],
    }
)


MediaLiveScheduleActionSettings = TypedDict(
    'MediaLiveScheduleActionSettings', {
        'HlsTimedMetadataScheduleActionSettings': Optional[MediaLiveHlsTimedMetadataScheduleActionSettings],
        'InputSwitchScheduleActionSettings': Optional[MediaLiveInputSwitchScheduleActionSettings],
        'PauseStateScheduleActionSettings': Optional[MediaLivePauseStateScheduleActionSettings],
        'Scte35ReturnToNetworkScheduleActionSettings': Optional[MediaLiveScte35ReturnToNetworkScheduleActionSettings],
        'Scte35SpliceInsertScheduleActionSettings': Optional[MediaLiveScte35SpliceInsertScheduleActionSettings],
        'Scte35TimeSignalScheduleActionSettings': Optional[MediaLiveScte35TimeSignalScheduleActionSettings],
        'StaticImageActivateScheduleActionSettings': Optional[MediaLiveStaticImageActivateScheduleActionSettings],
        'StaticImageDeactivateScheduleActionSettings': Optional[MediaLiveStaticImageDeactivateScheduleActionSettings],
    }
)


MediaLiveFixedModeScheduleActionStartSettings = TypedDict(
    'MediaLiveFixedModeScheduleActionStartSettings', {
        '__string': str,
    }
)


MediaLiveFollowModeScheduleActionStartSettings = TypedDict(
    'MediaLiveFollowModeScheduleActionStartSettings', {
        'FollowPoint': str,
        '__string': str,
    }
)


MediaLiveScheduleActionStartSettings = TypedDict(
    'MediaLiveScheduleActionStartSettings', {
        'FixedModeScheduleActionStartSettings': Optional[MediaLiveFixedModeScheduleActionStartSettings],
        'FollowModeScheduleActionStartSettings': Optional[MediaLiveFollowModeScheduleActionStartSettings],
    }
)


MediaLiveScheduleAction = TypedDict(
    'MediaLiveScheduleAction', {
        '__string': str,
        'ScheduleActionSettings': MediaLiveScheduleActionSettings,
        'ScheduleActionStartSettings': MediaLiveScheduleActionStartSettings,
    }
)


MediaLiveBatchScheduleActionCreateRequest = TypedDict(
    'MediaLiveBatchScheduleActionCreateRequest', {
        '__listOfScheduleAction': List[MediaLiveScheduleAction],
    }
)


MediaLiveBatchScheduleActionDeleteRequest = TypedDict(
    'MediaLiveBatchScheduleActionDeleteRequest', {
        '__listOf__string': List[str],
    }
)


MediaLiveBatchScheduleActionCreateResult = TypedDict(
    'MediaLiveBatchScheduleActionCreateResult', {
        '__listOfScheduleAction': List[MediaLiveScheduleAction],
    }
)


MediaLiveBatchScheduleActionDeleteResult = TypedDict(
    'MediaLiveBatchScheduleActionDeleteResult', {
        '__listOfScheduleAction': List[MediaLiveScheduleAction],
    }
)


MediaLiveBatchUpdateScheduleResponse = TypedDict(
    'MediaLiveBatchUpdateScheduleResponse', {
        'BatchScheduleActionCreateResult': Optional[MediaLiveBatchScheduleActionCreateResult],
        'BatchScheduleActionDeleteResult': Optional[MediaLiveBatchScheduleActionDeleteResult],
    }
)


MediaLiveMediaPackageOutputDestinationSettings = TypedDict(
    'MediaLiveMediaPackageOutputDestinationSettings', {
        '__stringMin1': Optional[str],
    }
)


MediaLiveOutputDestinationSettings = TypedDict(
    'MediaLiveOutputDestinationSettings', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


MediaLiveOutputDestination = TypedDict(
    'MediaLiveOutputDestination', {
        '__string': Optional[str],
        '__listOfMediaPackageOutputDestinationSettings': Optional[List[MediaLiveMediaPackageOutputDestinationSettings]],
        '__listOfOutputDestinationSettings': Optional[List[MediaLiveOutputDestinationSettings]],
    }
)


MediaLiveAudioNormalizationSettings = TypedDict(
    'MediaLiveAudioNormalizationSettings', {
        'AudioNormalizationAlgorithm': Optional[str],
        'AudioNormalizationAlgorithmControl': Optional[str],
        '__doubleMinNegative59Max0': Optional[float],
    }
)


MediaLiveAacSettings = TypedDict(
    'MediaLiveAacSettings', {
        '__double': Optional[float],
        'AacCodingMode': Optional[str],
        'AacInputType': Optional[str],
        'AacProfile': Optional[str],
        'AacRateControlMode': Optional[str],
        'AacRawFormat': Optional[str],
        '__double': Optional[float],
        'AacSpec': Optional[str],
        'AacVbrQuality': Optional[str],
    }
)


MediaLiveAc3Settings = TypedDict(
    'MediaLiveAc3Settings', {
        '__double': Optional[float],
        'Ac3BitstreamMode': Optional[str],
        'Ac3CodingMode': Optional[str],
        '__integerMin1Max31': Optional[int],
        'Ac3DrcProfile': Optional[str],
        'Ac3LfeFilter': Optional[str],
        'Ac3MetadataControl': Optional[str],
    }
)


MediaLiveEac3Settings = TypedDict(
    'MediaLiveEac3Settings', {
        'Eac3AttenuationControl': Optional[str],
        '__double': Optional[float],
        'Eac3BitstreamMode': Optional[str],
        'Eac3CodingMode': Optional[str],
        'Eac3DcFilter': Optional[str],
        '__integerMin1Max31': Optional[int],
        'Eac3DrcLine': Optional[str],
        'Eac3DrcRf': Optional[str],
        'Eac3LfeControl': Optional[str],
        'Eac3LfeFilter': Optional[str],
        '__double': Optional[float],
        '__double': Optional[float],
        '__double': Optional[float],
        '__double': Optional[float],
        'Eac3MetadataControl': Optional[str],
        'Eac3PassthroughControl': Optional[str],
        'Eac3PhaseControl': Optional[str],
        'Eac3StereoDownmix': Optional[str],
        'Eac3SurroundExMode': Optional[str],
        'Eac3SurroundMode': Optional[str],
    }
)


MediaLiveMp2Settings = TypedDict(
    'MediaLiveMp2Settings', {
        '__double': Optional[float],
        'Mp2CodingMode': Optional[str],
        '__double': Optional[float],
    }
)


MediaLivePassThroughSettings = TypedDict(
    'MediaLivePassThroughSettings', {
    }
)


MediaLiveAudioCodecSettings = TypedDict(
    'MediaLiveAudioCodecSettings', {
        'AacSettings': Optional[MediaLiveAacSettings],
        'Ac3Settings': Optional[MediaLiveAc3Settings],
        'Eac3Settings': Optional[MediaLiveEac3Settings],
        'Mp2Settings': Optional[MediaLiveMp2Settings],
        'PassThroughSettings': Optional[MediaLivePassThroughSettings],
    }
)


MediaLiveInputChannelLevel = TypedDict(
    'MediaLiveInputChannelLevel', {
        '__integerMinNegative60Max6': int,
        '__integerMin0Max15': int,
    }
)


MediaLiveAudioChannelMapping = TypedDict(
    'MediaLiveAudioChannelMapping', {
        '__listOfInputChannelLevel': List[MediaLiveInputChannelLevel],
        '__integerMin0Max7': int,
    }
)


MediaLiveRemixSettings = TypedDict(
    'MediaLiveRemixSettings', {
        '__listOfAudioChannelMapping': List[MediaLiveAudioChannelMapping],
        '__integerMin1Max16': Optional[int],
        '__integerMin1Max8': Optional[int],
    }
)


MediaLiveAudioDescription = TypedDict(
    'MediaLiveAudioDescription', {
        '__string': str,
        '__string': str,
        'AudioNormalizationSettings': Optional[MediaLiveAudioNormalizationSettings],
        'AudioType': Optional[str],
        'AudioDescriptionAudioTypeControl': Optional[str],
        'AudioCodecSettings': Optional[MediaLiveAudioCodecSettings],
        '__stringMin3Max3': Optional[str],
        'AudioDescriptionLanguageCodeControl': Optional[str],
        'RemixSettings': Optional[MediaLiveRemixSettings],
        '__string': Optional[str],
    }
)


MediaLiveAvailBlanking = TypedDict(
    'MediaLiveAvailBlanking', {
        'InputLocation': Optional[MediaLiveInputLocation],
        'AvailBlankingState': Optional[str],
    }
)


MediaLiveScte35SpliceInsert = TypedDict(
    'MediaLiveScte35SpliceInsert', {
        '__integerMinNegative1000Max1000': Optional[int],
        'Scte35SpliceInsertNoRegionalBlackoutBehavior': Optional[str],
        'Scte35SpliceInsertWebDeliveryAllowedBehavior': Optional[str],
    }
)


MediaLiveScte35TimeSignalApos = TypedDict(
    'MediaLiveScte35TimeSignalApos', {
        '__integerMinNegative1000Max1000': Optional[int],
        'Scte35AposNoRegionalBlackoutBehavior': Optional[str],
        'Scte35AposWebDeliveryAllowedBehavior': Optional[str],
    }
)


MediaLiveAvailSettings = TypedDict(
    'MediaLiveAvailSettings', {
        'Scte35SpliceInsert': Optional[MediaLiveScte35SpliceInsert],
        'Scte35TimeSignalApos': Optional[MediaLiveScte35TimeSignalApos],
    }
)


MediaLiveAvailConfiguration = TypedDict(
    'MediaLiveAvailConfiguration', {
        'AvailSettings': Optional[MediaLiveAvailSettings],
    }
)


MediaLiveBlackoutSlate = TypedDict(
    'MediaLiveBlackoutSlate', {
        'InputLocation': Optional[MediaLiveInputLocation],
        'BlackoutSlateNetworkEndBlackout': Optional[str],
        'InputLocation': Optional[MediaLiveInputLocation],
        '__stringMin34Max34': Optional[str],
        'BlackoutSlateState': Optional[str],
    }
)


MediaLiveAribDestinationSettings = TypedDict(
    'MediaLiveAribDestinationSettings', {
    }
)


MediaLiveBurnInDestinationSettings = TypedDict(
    'MediaLiveBurnInDestinationSettings', {
        'BurnInAlignment': Optional[str],
        'BurnInBackgroundColor': Optional[str],
        '__integerMin0Max255': Optional[int],
        'InputLocation': Optional[MediaLiveInputLocation],
        'BurnInFontColor': Optional[str],
        '__integerMin0Max255': Optional[int],
        '__integerMin96Max600': Optional[int],
        '__string': Optional[str],
        'BurnInOutlineColor': Optional[str],
        '__integerMin0Max10': Optional[int],
        'BurnInShadowColor': Optional[str],
        '__integerMin0Max255': Optional[int],
        '__integer': Optional[int],
        '__integer': Optional[int],
        'BurnInTeletextGridControl': Optional[str],
        '__integerMin0': Optional[int],
        '__integerMin0': Optional[int],
    }
)


MediaLiveDvbSubDestinationSettings = TypedDict(
    'MediaLiveDvbSubDestinationSettings', {
        'DvbSubDestinationAlignment': Optional[str],
        'DvbSubDestinationBackgroundColor': Optional[str],
        '__integerMin0Max255': Optional[int],
        'InputLocation': Optional[MediaLiveInputLocation],
        'DvbSubDestinationFontColor': Optional[str],
        '__integerMin0Max255': Optional[int],
        '__integerMin96Max600': Optional[int],
        '__string': Optional[str],
        'DvbSubDestinationOutlineColor': Optional[str],
        '__integerMin0Max10': Optional[int],
        'DvbSubDestinationShadowColor': Optional[str],
        '__integerMin0Max255': Optional[int],
        '__integer': Optional[int],
        '__integer': Optional[int],
        'DvbSubDestinationTeletextGridControl': Optional[str],
        '__integerMin0': Optional[int],
        '__integerMin0': Optional[int],
    }
)


MediaLiveEmbeddedDestinationSettings = TypedDict(
    'MediaLiveEmbeddedDestinationSettings', {
    }
)


MediaLiveEmbeddedPlusScte20DestinationSettings = TypedDict(
    'MediaLiveEmbeddedPlusScte20DestinationSettings', {
    }
)


MediaLiveRtmpCaptionInfoDestinationSettings = TypedDict(
    'MediaLiveRtmpCaptionInfoDestinationSettings', {
    }
)


MediaLiveScte20PlusEmbeddedDestinationSettings = TypedDict(
    'MediaLiveScte20PlusEmbeddedDestinationSettings', {
    }
)


MediaLiveScte27DestinationSettings = TypedDict(
    'MediaLiveScte27DestinationSettings', {
    }
)


MediaLiveSmpteTtDestinationSettings = TypedDict(
    'MediaLiveSmpteTtDestinationSettings', {
    }
)


MediaLiveTeletextDestinationSettings = TypedDict(
    'MediaLiveTeletextDestinationSettings', {
    }
)


MediaLiveTtmlDestinationSettings = TypedDict(
    'MediaLiveTtmlDestinationSettings', {
        'TtmlDestinationStyleControl': Optional[str],
    }
)


MediaLiveWebvttDestinationSettings = TypedDict(
    'MediaLiveWebvttDestinationSettings', {
    }
)


MediaLiveCaptionDestinationSettings = TypedDict(
    'MediaLiveCaptionDestinationSettings', {
        'AribDestinationSettings': Optional[MediaLiveAribDestinationSettings],
        'BurnInDestinationSettings': Optional[MediaLiveBurnInDestinationSettings],
        'DvbSubDestinationSettings': Optional[MediaLiveDvbSubDestinationSettings],
        'EmbeddedDestinationSettings': Optional[MediaLiveEmbeddedDestinationSettings],
        'EmbeddedPlusScte20DestinationSettings': Optional[MediaLiveEmbeddedPlusScte20DestinationSettings],
        'RtmpCaptionInfoDestinationSettings': Optional[MediaLiveRtmpCaptionInfoDestinationSettings],
        'Scte20PlusEmbeddedDestinationSettings': Optional[MediaLiveScte20PlusEmbeddedDestinationSettings],
        'Scte27DestinationSettings': Optional[MediaLiveScte27DestinationSettings],
        'SmpteTtDestinationSettings': Optional[MediaLiveSmpteTtDestinationSettings],
        'TeletextDestinationSettings': Optional[MediaLiveTeletextDestinationSettings],
        'TtmlDestinationSettings': Optional[MediaLiveTtmlDestinationSettings],
        'WebvttDestinationSettings': Optional[MediaLiveWebvttDestinationSettings],
    }
)


MediaLiveCaptionDescription = TypedDict(
    'MediaLiveCaptionDescription', {
        '__string': str,
        '__string': str,
        'CaptionDestinationSettings': Optional[MediaLiveCaptionDestinationSettings],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


MediaLiveInputLossBehavior = TypedDict(
    'MediaLiveInputLossBehavior', {
        '__integerMin0Max1000000': Optional[int],
        '__stringMin6Max6': Optional[str],
        'InputLocation': Optional[MediaLiveInputLocation],
        'InputLossImageType': Optional[str],
        '__integerMin0Max1000000': Optional[int],
    }
)


MediaLiveGlobalConfiguration = TypedDict(
    'MediaLiveGlobalConfiguration', {
        '__integerMinNegative60Max60': Optional[int],
        'GlobalConfigurationInputEndAction': Optional[str],
        'InputLossBehavior': Optional[MediaLiveInputLossBehavior],
        'GlobalConfigurationOutputLockingMode': Optional[str],
        'GlobalConfigurationOutputTimingSource': Optional[str],
        'GlobalConfigurationLowFramerateInputs': Optional[str],
    }
)


MediaLiveOutputLocationRef = TypedDict(
    'MediaLiveOutputLocationRef', {
        '__string': Optional[str],
    }
)


MediaLiveArchiveGroupSettings = TypedDict(
    'MediaLiveArchiveGroupSettings', {
        'OutputLocationRef': MediaLiveOutputLocationRef,
        '__integerMin1': Optional[int],
    }
)


MediaLiveFrameCaptureGroupSettings = TypedDict(
    'MediaLiveFrameCaptureGroupSettings', {
        'OutputLocationRef': MediaLiveOutputLocationRef,
    }
)


MediaLiveCaptionLanguageMapping = TypedDict(
    'MediaLiveCaptionLanguageMapping', {
        '__integerMin1Max4': int,
        '__stringMin3Max3': str,
        '__stringMin1': str,
    }
)


MediaLiveHlsAkamaiSettings = TypedDict(
    'MediaLiveHlsAkamaiSettings', {
        '__integerMin0': Optional[int],
        '__integerMin0Max600': Optional[int],
        'HlsAkamaiHttpTransferMode': Optional[str],
        '__integerMin0': Optional[int],
        '__integerMin0Max15': Optional[int],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


MediaLiveHlsBasicPutSettings = TypedDict(
    'MediaLiveHlsBasicPutSettings', {
        '__integerMin0': Optional[int],
        '__integerMin0Max600': Optional[int],
        '__integerMin0': Optional[int],
        '__integerMin0Max15': Optional[int],
    }
)


MediaLiveHlsMediaStoreSettings = TypedDict(
    'MediaLiveHlsMediaStoreSettings', {
        '__integerMin0': Optional[int],
        '__integerMin0Max600': Optional[int],
        'HlsMediaStoreStorageClass': Optional[str],
        '__integerMin0': Optional[int],
        '__integerMin0Max15': Optional[int],
    }
)


MediaLiveHlsWebdavSettings = TypedDict(
    'MediaLiveHlsWebdavSettings', {
        '__integerMin0': Optional[int],
        '__integerMin0Max600': Optional[int],
        'HlsWebdavHttpTransferMode': Optional[str],
        '__integerMin0': Optional[int],
        '__integerMin0Max15': Optional[int],
    }
)


MediaLiveHlsCdnSettings = TypedDict(
    'MediaLiveHlsCdnSettings', {
        'HlsAkamaiSettings': Optional[MediaLiveHlsAkamaiSettings],
        'HlsBasicPutSettings': Optional[MediaLiveHlsBasicPutSettings],
        'HlsMediaStoreSettings': Optional[MediaLiveHlsMediaStoreSettings],
        'HlsWebdavSettings': Optional[MediaLiveHlsWebdavSettings],
    }
)


MediaLiveStaticKeySettings = TypedDict(
    'MediaLiveStaticKeySettings', {
        '__stringMin32Max32': str,
        'InputLocation': Optional[MediaLiveInputLocation],
    }
)


MediaLiveKeyProviderSettings = TypedDict(
    'MediaLiveKeyProviderSettings', {
        'StaticKeySettings': Optional[MediaLiveStaticKeySettings],
    }
)


MediaLiveHlsGroupSettings = TypedDict(
    'MediaLiveHlsGroupSettings', {
        'OutputLocationRef': MediaLiveOutputLocationRef,
        '__listOfHlsAdMarkers': Optional[List[str]],
        '__string': Optional[str],
        '__string': Optional[str],
        '__listOfCaptionLanguageMapping': Optional[List[MediaLiveCaptionLanguageMapping]],
        'HlsCaptionLanguageSetting': Optional[str],
        'HlsClientCache': Optional[str],
        'HlsCodecSpecification': Optional[str],
        '__stringMin32Max32': Optional[str],
        'HlsDirectoryStructure': Optional[str],
        'HlsEncryptionType': Optional[str],
        'HlsCdnSettings': Optional[MediaLiveHlsCdnSettings],
        'IFrameOnlyPlaylistType': Optional[str],
        '__integerMin3': Optional[int],
        'InputLossActionForHlsOut': Optional[str],
        'HlsIvInManifest': Optional[str],
        'HlsIvSource': Optional[str],
        '__integerMin1': Optional[int],
        '__string': Optional[str],
        '__string': Optional[str],
        'KeyProviderSettings': Optional[MediaLiveKeyProviderSettings],
        'HlsManifestCompression': Optional[str],
        'HlsManifestDurationFormat': Optional[str],
        '__integerMin0': Optional[int],
        'HlsMode': Optional[str],
        'HlsOutputSelection': Optional[str],
        'HlsProgramDateTime': Optional[str],
        '__integerMin0Max3600': Optional[int],
        'HlsRedundantManifest': Optional[str],
        '__integerMin1': Optional[int],
        'HlsSegmentationMode': Optional[str],
        '__integerMin1': Optional[int],
        'HlsStreamInfResolution': Optional[str],
        'HlsTimedMetadataId3Frame': Optional[str],
        '__integerMin0': Optional[int],
        '__integerMin0': Optional[int],
        'HlsTsFileMode': Optional[str],
    }
)


MediaLiveMediaPackageGroupSettings = TypedDict(
    'MediaLiveMediaPackageGroupSettings', {
        'OutputLocationRef': MediaLiveOutputLocationRef,
    }
)


MediaLiveMsSmoothGroupSettings = TypedDict(
    'MediaLiveMsSmoothGroupSettings', {
        'OutputLocationRef': MediaLiveOutputLocationRef,
        '__string': Optional[str],
        'SmoothGroupAudioOnlyTimecodeControl': Optional[str],
        'SmoothGroupCertificateMode': Optional[str],
        '__integerMin0': Optional[int],
        '__string': Optional[str],
        'SmoothGroupEventIdMode': Optional[str],
        'SmoothGroupEventStopBehavior': Optional[str],
        '__integerMin0': Optional[int],
        '__integerMin1': Optional[int],
        'InputLossActionForMsSmoothOut': Optional[str],
        '__integerMin0': Optional[int],
        '__integerMin0': Optional[int],
        'SmoothGroupSegmentationMode': Optional[str],
        '__integerMin0Max10000': Optional[int],
        'SmoothGroupSparseTrackType': Optional[str],
        'SmoothGroupStreamManifestBehavior': Optional[str],
        '__string': Optional[str],
        'SmoothGroupTimestampOffsetMode': Optional[str],
    }
)


MediaLiveRtmpGroupSettings = TypedDict(
    'MediaLiveRtmpGroupSettings', {
        'AuthenticationScheme': Optional[str],
        'RtmpCacheFullBehavior': Optional[str],
        '__integerMin30': Optional[int],
        'RtmpCaptionData': Optional[str],
        'InputLossActionForRtmpOut': Optional[str],
        '__integerMin0': Optional[int],
    }
)


MediaLiveUdpGroupSettings = TypedDict(
    'MediaLiveUdpGroupSettings', {
        'InputLossActionForUdpOut': Optional[str],
        'UdpTimedMetadataId3Frame': Optional[str],
        '__integerMin0': Optional[int],
    }
)


MediaLiveOutputGroupSettings = TypedDict(
    'MediaLiveOutputGroupSettings', {
        'ArchiveGroupSettings': Optional[MediaLiveArchiveGroupSettings],
        'FrameCaptureGroupSettings': Optional[MediaLiveFrameCaptureGroupSettings],
        'HlsGroupSettings': Optional[MediaLiveHlsGroupSettings],
        'MediaPackageGroupSettings': Optional[MediaLiveMediaPackageGroupSettings],
        'MsSmoothGroupSettings': Optional[MediaLiveMsSmoothGroupSettings],
        'RtmpGroupSettings': Optional[MediaLiveRtmpGroupSettings],
        'UdpGroupSettings': Optional[MediaLiveUdpGroupSettings],
    }
)


MediaLiveDvbNitSettings = TypedDict(
    'MediaLiveDvbNitSettings', {
        '__integerMin0Max65536': int,
        '__stringMin1Max256': str,
        '__integerMin25Max10000': Optional[int],
    }
)


MediaLiveDvbSdtSettings = TypedDict(
    'MediaLiveDvbSdtSettings', {
        'DvbSdtOutputSdt': Optional[str],
        '__integerMin25Max2000': Optional[int],
        '__stringMin1Max256': Optional[str],
        '__stringMin1Max256': Optional[str],
    }
)


MediaLiveDvbTdtSettings = TypedDict(
    'MediaLiveDvbTdtSettings', {
        '__integerMin1000Max30000': Optional[int],
    }
)


MediaLiveM2tsSettings = TypedDict(
    'MediaLiveM2tsSettings', {
        'M2tsAbsentInputAudioBehavior': Optional[str],
        'M2tsArib': Optional[str],
        '__string': Optional[str],
        'M2tsAribCaptionsPidControl': Optional[str],
        'M2tsAudioBufferModel': Optional[str],
        '__integerMin0': Optional[int],
        '__string': Optional[str],
        'M2tsAudioStreamType': Optional[str],
        '__integerMin0': Optional[int],
        'M2tsBufferModel': Optional[str],
        'M2tsCcDescriptor': Optional[str],
        'DvbNitSettings': Optional[MediaLiveDvbNitSettings],
        'DvbSdtSettings': Optional[MediaLiveDvbSdtSettings],
        '__string': Optional[str],
        'DvbTdtSettings': Optional[MediaLiveDvbTdtSettings],
        '__string': Optional[str],
        'M2tsEbifControl': Optional[str],
        'M2tsAudioInterval': Optional[str],
        '__integerMin0Max10000': Optional[int],
        'M2tsEbpPlacement': Optional[str],
        '__string': Optional[str],
        'M2tsEsRateInPes': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__doubleMin0': Optional[float],
        'M2tsKlv': Optional[str],
        '__string': Optional[str],
        '__doubleMin0': Optional[float],
        '__integerMin0Max1000': Optional[int],
        'M2tsPcrControl': Optional[str],
        '__integerMin0Max500': Optional[int],
        '__string': Optional[str],
        '__integerMin0Max1000': Optional[int],
        '__string': Optional[str],
        '__integerMin0Max65535': Optional[int],
        'M2tsRateMode': Optional[str],
        '__string': Optional[str],
        'M2tsScte35Control': Optional[str],
        '__string': Optional[str],
        'M2tsSegmentationMarkers': Optional[str],
        'M2tsSegmentationStyle': Optional[str],
        '__doubleMin1': Optional[float],
        'M2tsTimedMetadataBehavior': Optional[str],
        '__string': Optional[str],
        '__integerMin0Max65535': Optional[int],
        '__string': Optional[str],
    }
)


MediaLiveArchiveContainerSettings = TypedDict(
    'MediaLiveArchiveContainerSettings', {
        'M2tsSettings': Optional[MediaLiveM2tsSettings],
    }
)


MediaLiveArchiveOutputSettings = TypedDict(
    'MediaLiveArchiveOutputSettings', {
        'ArchiveContainerSettings': MediaLiveArchiveContainerSettings,
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


MediaLiveFrameCaptureOutputSettings = TypedDict(
    'MediaLiveFrameCaptureOutputSettings', {
        '__string': Optional[str],
    }
)


MediaLiveAudioOnlyHlsSettings = TypedDict(
    'MediaLiveAudioOnlyHlsSettings', {
        '__string': Optional[str],
        'InputLocation': Optional[MediaLiveInputLocation],
        'AudioOnlyHlsTrackType': Optional[str],
    }
)


MediaLiveM3u8Settings = TypedDict(
    'MediaLiveM3u8Settings', {
        '__integerMin0': Optional[int],
        '__string': Optional[str],
        '__string': Optional[str],
        '__integerMin0Max1000': Optional[int],
        'M3u8PcrControl': Optional[str],
        '__integerMin0Max500': Optional[int],
        '__string': Optional[str],
        '__integerMin0Max1000': Optional[int],
        '__string': Optional[str],
        '__integerMin0Max65535': Optional[int],
        'M3u8Scte35Behavior': Optional[str],
        '__string': Optional[str],
        'M3u8TimedMetadataBehavior': Optional[str],
        '__string': Optional[str],
        '__integerMin0Max65535': Optional[int],
        '__string': Optional[str],
    }
)


MediaLiveStandardHlsSettings = TypedDict(
    'MediaLiveStandardHlsSettings', {
        'M3u8Settings': MediaLiveM3u8Settings,
        '__string': Optional[str],
    }
)


MediaLiveHlsSettings = TypedDict(
    'MediaLiveHlsSettings', {
        'AudioOnlyHlsSettings': Optional[MediaLiveAudioOnlyHlsSettings],
        'StandardHlsSettings': Optional[MediaLiveStandardHlsSettings],
    }
)


MediaLiveHlsOutputSettings = TypedDict(
    'MediaLiveHlsOutputSettings', {
        'HlsSettings': MediaLiveHlsSettings,
        '__stringMin1': Optional[str],
        '__string': Optional[str],
    }
)


MediaLiveMediaPackageOutputSettings = TypedDict(
    'MediaLiveMediaPackageOutputSettings', {
    }
)


MediaLiveMsSmoothOutputSettings = TypedDict(
    'MediaLiveMsSmoothOutputSettings', {
        '__string': Optional[str],
    }
)


MediaLiveRtmpOutputSettings = TypedDict(
    'MediaLiveRtmpOutputSettings', {
        'OutputLocationRef': MediaLiveOutputLocationRef,
        'RtmpOutputCertificateMode': Optional[str],
        '__integerMin1': Optional[int],
        '__integerMin0': Optional[int],
    }
)


MediaLiveUdpContainerSettings = TypedDict(
    'MediaLiveUdpContainerSettings', {
        'M2tsSettings': Optional[MediaLiveM2tsSettings],
    }
)


MediaLiveFecOutputSettings = TypedDict(
    'MediaLiveFecOutputSettings', {
        '__integerMin4Max20': Optional[int],
        'FecOutputIncludeFec': Optional[str],
        '__integerMin1Max20': Optional[int],
    }
)


MediaLiveUdpOutputSettings = TypedDict(
    'MediaLiveUdpOutputSettings', {
        'UdpContainerSettings': MediaLiveUdpContainerSettings,
        'OutputLocationRef': MediaLiveOutputLocationRef,
        '__integerMin0Max10000': Optional[int],
        'FecOutputSettings': Optional[MediaLiveFecOutputSettings],
    }
)


MediaLiveOutputSettings = TypedDict(
    'MediaLiveOutputSettings', {
        'ArchiveOutputSettings': Optional[MediaLiveArchiveOutputSettings],
        'FrameCaptureOutputSettings': Optional[MediaLiveFrameCaptureOutputSettings],
        'HlsOutputSettings': Optional[MediaLiveHlsOutputSettings],
        'MediaPackageOutputSettings': Optional[MediaLiveMediaPackageOutputSettings],
        'MsSmoothOutputSettings': Optional[MediaLiveMsSmoothOutputSettings],
        'RtmpOutputSettings': Optional[MediaLiveRtmpOutputSettings],
        'UdpOutputSettings': Optional[MediaLiveUdpOutputSettings],
    }
)


MediaLiveOutput = TypedDict(
    'MediaLiveOutput', {
        'OutputSettings': MediaLiveOutputSettings,
        '__listOf__string': Optional[List[str]],
        '__listOf__string': Optional[List[str]],
        '__stringMin1Max255': Optional[str],
        '__string': Optional[str],
    }
)


MediaLiveOutputGroup = TypedDict(
    'MediaLiveOutputGroup', {
        'OutputGroupSettings': MediaLiveOutputGroupSettings,
        '__listOfOutput': List[MediaLiveOutput],
        '__stringMax32': Optional[str],
    }
)


MediaLiveTimecodeConfig = TypedDict(
    'MediaLiveTimecodeConfig', {
        'TimecodeConfigSource': str,
        '__integerMin1Max1000000': Optional[int],
    }
)


MediaLiveFrameCaptureSettings = TypedDict(
    'MediaLiveFrameCaptureSettings', {
        '__integerMin1Max3600': int,
    }
)


MediaLiveH264Settings = TypedDict(
    'MediaLiveH264Settings', {
        'H264AdaptiveQuantization': Optional[str],
        'AfdSignaling': Optional[str],
        '__integerMin1000': Optional[int],
        '__integerMin0Max100': Optional[int],
        '__integerMin0': Optional[int],
        'H264ColorMetadata': Optional[str],
        'H264EntropyEncoding': Optional[str],
        'FixedAfd': Optional[str],
        'H264FlickerAq': Optional[str],
        'H264FramerateControl': Optional[str],
        '__integerMin1': Optional[int],
        '__integerMin1': Optional[int],
        'H264GopBReference': Optional[str],
        '__integerMin0': Optional[int],
        '__integerMin0Max7': Optional[int],
        '__doubleMin1': Optional[float],
        'H264GopSizeUnits': Optional[str],
        'H264Level': Optional[str],
        'H264LookAheadRateControl': Optional[str],
        '__integerMin1000': Optional[int],
        '__integerMin0Max30': Optional[int],
        '__integerMin1Max6': Optional[int],
        'H264ParControl': Optional[str],
        '__integerMin1': Optional[int],
        '__integer': Optional[int],
        'H264Profile': Optional[str],
        '__integerMin1Max10': Optional[int],
        'H264RateControlMode': Optional[str],
        'H264ScanType': Optional[str],
        'H264SceneChangeDetect': Optional[str],
        '__integerMin1Max32': Optional[int],
        '__integerMin0Max128': Optional[int],
        'H264SpatialAq': Optional[str],
        'H264SubGopLength': Optional[str],
        'H264Syntax': Optional[str],
        'H264TemporalAq': Optional[str],
        'H264TimecodeInsertionBehavior': Optional[str],
    }
)


MediaLiveVideoCodecSettings = TypedDict(
    'MediaLiveVideoCodecSettings', {
        'FrameCaptureSettings': Optional[MediaLiveFrameCaptureSettings],
        'H264Settings': Optional[MediaLiveH264Settings],
    }
)


MediaLiveVideoDescription = TypedDict(
    'MediaLiveVideoDescription', {
        '__string': str,
        'VideoCodecSettings': Optional[MediaLiveVideoCodecSettings],
        '__integer': Optional[int],
        'VideoDescriptionRespondToAfd': Optional[str],
        'VideoDescriptionScalingBehavior': Optional[str],
        '__integerMin0Max100': Optional[int],
        '__integer': Optional[int],
    }
)


MediaLiveEncoderSettings = TypedDict(
    'MediaLiveEncoderSettings', {
        '__listOfAudioDescription': List[MediaLiveAudioDescription],
        '__listOfOutputGroup': List[MediaLiveOutputGroup],
        'TimecodeConfig': MediaLiveTimecodeConfig,
        '__listOfVideoDescription': List[MediaLiveVideoDescription],
        'AvailBlanking': Optional[MediaLiveAvailBlanking],
        'AvailConfiguration': Optional[MediaLiveAvailConfiguration],
        'BlackoutSlate': Optional[MediaLiveBlackoutSlate],
        '__listOfCaptionDescription': Optional[List[MediaLiveCaptionDescription]],
        'GlobalConfiguration': Optional[MediaLiveGlobalConfiguration],
    }
)


MediaLiveAudioLanguageSelection = TypedDict(
    'MediaLiveAudioLanguageSelection', {
        '__string': str,
        'AudioLanguageSelectionPolicy': Optional[str],
    }
)


MediaLiveAudioPidSelection = TypedDict(
    'MediaLiveAudioPidSelection', {
        '__integerMin0Max8191': int,
    }
)


MediaLiveAudioSelectorSettings = TypedDict(
    'MediaLiveAudioSelectorSettings', {
        'AudioLanguageSelection': Optional[MediaLiveAudioLanguageSelection],
        'AudioPidSelection': Optional[MediaLiveAudioPidSelection],
    }
)


MediaLiveAudioSelector = TypedDict(
    'MediaLiveAudioSelector', {
        '__stringMin1': str,
        'AudioSelectorSettings': Optional[MediaLiveAudioSelectorSettings],
    }
)


MediaLiveAribSourceSettings = TypedDict(
    'MediaLiveAribSourceSettings', {
    }
)


MediaLiveDvbSubSourceSettings = TypedDict(
    'MediaLiveDvbSubSourceSettings', {
        '__integerMin1': Optional[int],
    }
)


MediaLiveEmbeddedSourceSettings = TypedDict(
    'MediaLiveEmbeddedSourceSettings', {
        'EmbeddedConvert608To708': Optional[str],
        'EmbeddedScte20Detection': Optional[str],
        '__integerMin1Max4': Optional[int],
        '__integerMin1Max5': Optional[int],
    }
)


MediaLiveScte20SourceSettings = TypedDict(
    'MediaLiveScte20SourceSettings', {
        'Scte20Convert608To708': Optional[str],
        '__integerMin1Max4': Optional[int],
    }
)


MediaLiveScte27SourceSettings = TypedDict(
    'MediaLiveScte27SourceSettings', {
        '__integerMin1': Optional[int],
    }
)


MediaLiveTeletextSourceSettings = TypedDict(
    'MediaLiveTeletextSourceSettings', {
        '__string': Optional[str],
    }
)


MediaLiveCaptionSelectorSettings = TypedDict(
    'MediaLiveCaptionSelectorSettings', {
        'AribSourceSettings': Optional[MediaLiveAribSourceSettings],
        'DvbSubSourceSettings': Optional[MediaLiveDvbSubSourceSettings],
        'EmbeddedSourceSettings': Optional[MediaLiveEmbeddedSourceSettings],
        'Scte20SourceSettings': Optional[MediaLiveScte20SourceSettings],
        'Scte27SourceSettings': Optional[MediaLiveScte27SourceSettings],
        'TeletextSourceSettings': Optional[MediaLiveTeletextSourceSettings],
    }
)


MediaLiveCaptionSelector = TypedDict(
    'MediaLiveCaptionSelector', {
        '__stringMin1': str,
        '__string': Optional[str],
        'CaptionSelectorSettings': Optional[MediaLiveCaptionSelectorSettings],
    }
)


MediaLiveHlsInputSettings = TypedDict(
    'MediaLiveHlsInputSettings', {
        '__integerMin0': Optional[int],
        '__integerMin0': Optional[int],
        '__integerMin0': Optional[int],
        '__integerMin0': Optional[int],
    }
)


MediaLiveNetworkInputSettings = TypedDict(
    'MediaLiveNetworkInputSettings', {
        'HlsInputSettings': Optional[MediaLiveHlsInputSettings],
        'NetworkInputServerValidation': Optional[str],
    }
)


MediaLiveVideoSelectorPid = TypedDict(
    'MediaLiveVideoSelectorPid', {
        '__integerMin0Max8191': Optional[int],
    }
)


MediaLiveVideoSelectorProgramId = TypedDict(
    'MediaLiveVideoSelectorProgramId', {
        '__integerMin0Max65536': Optional[int],
    }
)


MediaLiveVideoSelectorSettings = TypedDict(
    'MediaLiveVideoSelectorSettings', {
        'VideoSelectorPid': Optional[MediaLiveVideoSelectorPid],
        'VideoSelectorProgramId': Optional[MediaLiveVideoSelectorProgramId],
    }
)


MediaLiveVideoSelector = TypedDict(
    'MediaLiveVideoSelector', {
        'VideoSelectorColorSpace': Optional[str],
        'VideoSelectorColorSpaceUsage': Optional[str],
        'VideoSelectorSettings': Optional[MediaLiveVideoSelectorSettings],
    }
)


MediaLiveInputSettings = TypedDict(
    'MediaLiveInputSettings', {
        '__listOfAudioSelector': Optional[List[MediaLiveAudioSelector]],
        '__listOfCaptionSelector': Optional[List[MediaLiveCaptionSelector]],
        'InputDeblockFilter': Optional[str],
        'InputDenoiseFilter': Optional[str],
        '__integerMin1Max5': Optional[int],
        'InputFilter': Optional[str],
        'NetworkInputSettings': Optional[MediaLiveNetworkInputSettings],
        'InputSourceEndBehavior': Optional[str],
        'VideoSelector': Optional[MediaLiveVideoSelector],
    }
)


MediaLiveInputAttachment = TypedDict(
    'MediaLiveInputAttachment', {
        '__string': Optional[str],
        '__string': Optional[str],
        'InputSettings': Optional[MediaLiveInputSettings],
    }
)


MediaLiveInputSpecification = TypedDict(
    'MediaLiveInputSpecification', {
        'InputCodec': Optional[str],
        'InputMaximumBitrate': Optional[str],
        'InputResolution': Optional[str],
    }
)


MediaLiveChannelEgressEndpoint = TypedDict(
    'MediaLiveChannelEgressEndpoint', {
        '__string': Optional[str],
    }
)


MediaLiveChannel = TypedDict(
    'MediaLiveChannel', {
        '__string': Optional[str],
        'ChannelClass': Optional[str],
        '__listOfOutputDestination': Optional[List[MediaLiveOutputDestination]],
        '__listOfChannelEgressEndpoint': Optional[List[MediaLiveChannelEgressEndpoint]],
        'EncoderSettings': Optional[MediaLiveEncoderSettings],
        '__string': Optional[str],
        '__listOfInputAttachment': Optional[List[MediaLiveInputAttachment]],
        'InputSpecification': Optional[MediaLiveInputSpecification],
        'LogLevel': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
        '__string': Optional[str],
        'ChannelState': Optional[str],
        'Tags': Optional[Dict[str, str]],
    }
)


MediaLiveCreateChannelResponse = TypedDict(
    'MediaLiveCreateChannelResponse', {
        'Channel': Optional[MediaLiveChannel],
    }
)


MediaLiveInputDestinationRequest = TypedDict(
    'MediaLiveInputDestinationRequest', {
        '__string': Optional[str],
    }
)


MediaLiveMediaConnectFlowRequest = TypedDict(
    'MediaLiveMediaConnectFlowRequest', {
        '__string': Optional[str],
    }
)


MediaLiveInputSourceRequest = TypedDict(
    'MediaLiveInputSourceRequest', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


MediaLiveInputVpcRequest = TypedDict(
    'MediaLiveInputVpcRequest', {
        '__listOf__string': List[str],
        '__listOf__string': Optional[List[str]],
    }
)


MediaLiveInputDestinationVpc = TypedDict(
    'MediaLiveInputDestinationVpc', {
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


MediaLiveInputDestination = TypedDict(
    'MediaLiveInputDestination', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'InputDestinationVpc': Optional[MediaLiveInputDestinationVpc],
    }
)


MediaLiveMediaConnectFlow = TypedDict(
    'MediaLiveMediaConnectFlow', {
        '__string': Optional[str],
    }
)


MediaLiveInputSource = TypedDict(
    'MediaLiveInputSource', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


MediaLiveInput = TypedDict(
    'MediaLiveInput', {
        '__string': Optional[str],
        '__listOf__string': Optional[List[str]],
        '__listOfInputDestination': Optional[List[MediaLiveInputDestination]],
        '__string': Optional[str],
        'InputClass': Optional[str],
        '__listOfMediaConnectFlow': Optional[List[MediaLiveMediaConnectFlow]],
        '__string': Optional[str],
        '__string': Optional[str],
        '__listOf__string': Optional[List[str]],
        '__listOfInputSource': Optional[List[MediaLiveInputSource]],
        'InputState': Optional[str],
        'Tags': Optional[Dict[str, str]],
        'InputType': Optional[str],
    }
)


MediaLiveCreateInputResponse = TypedDict(
    'MediaLiveCreateInputResponse', {
        'Input': Optional[MediaLiveInput],
    }
)


MediaLiveInputWhitelistRuleCidr = TypedDict(
    'MediaLiveInputWhitelistRuleCidr', {
        '__string': Optional[str],
    }
)


MediaLiveInputWhitelistRule = TypedDict(
    'MediaLiveInputWhitelistRule', {
        '__string': Optional[str],
    }
)


MediaLiveInputSecurityGroup = TypedDict(
    'MediaLiveInputSecurityGroup', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__listOf__string': Optional[List[str]],
        'InputSecurityGroupState': Optional[str],
        'Tags': Optional[Dict[str, str]],
        '__listOfInputWhitelistRule': Optional[List[MediaLiveInputWhitelistRule]],
    }
)


MediaLiveCreateInputSecurityGroupResponse = TypedDict(
    'MediaLiveCreateInputSecurityGroupResponse', {
        'InputSecurityGroup': Optional[MediaLiveInputSecurityGroup],
    }
)


MediaLiveDeleteChannelResponse = TypedDict(
    'MediaLiveDeleteChannelResponse', {
        '__string': Optional[str],
        'ChannelClass': Optional[str],
        '__listOfOutputDestination': Optional[List[MediaLiveOutputDestination]],
        '__listOfChannelEgressEndpoint': Optional[List[MediaLiveChannelEgressEndpoint]],
        'EncoderSettings': Optional[MediaLiveEncoderSettings],
        '__string': Optional[str],
        '__listOfInputAttachment': Optional[List[MediaLiveInputAttachment]],
        'InputSpecification': Optional[MediaLiveInputSpecification],
        'LogLevel': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
        '__string': Optional[str],
        'ChannelState': Optional[str],
        'Tags': Optional[Dict[str, str]],
    }
)


MediaLiveDeleteInputResponse = TypedDict(
    'MediaLiveDeleteInputResponse', {
    }
)


MediaLiveDeleteInputSecurityGroupResponse = TypedDict(
    'MediaLiveDeleteInputSecurityGroupResponse', {
    }
)


MediaLiveReservationResourceSpecification = TypedDict(
    'MediaLiveReservationResourceSpecification', {
        'ChannelClass': Optional[str],
        'ReservationCodec': Optional[str],
        'ReservationMaximumBitrate': Optional[str],
        'ReservationMaximumFramerate': Optional[str],
        'ReservationResolution': Optional[str],
        'ReservationResourceType': Optional[str],
        'ReservationSpecialFeature': Optional[str],
        'ReservationVideoQuality': Optional[str],
    }
)


MediaLiveDeleteReservationResponse = TypedDict(
    'MediaLiveDeleteReservationResponse', {
        '__string': Optional[str],
        '__integer': Optional[int],
        '__string': Optional[str],
        '__integer': Optional[int],
        'OfferingDurationUnits': Optional[str],
        '__string': Optional[str],
        '__double': Optional[float],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'OfferingType': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'ReservationResourceSpecification': Optional[MediaLiveReservationResourceSpecification],
        '__string': Optional[str],
        'ReservationState': Optional[str],
        'Tags': Optional[Dict[str, str]],
        '__double': Optional[float],
    }
)


MediaLiveDeleteScheduleResponse = TypedDict(
    'MediaLiveDeleteScheduleResponse', {
    }
)


MediaLiveDescribeChannelResponse = TypedDict(
    'MediaLiveDescribeChannelResponse', {
        '__string': Optional[str],
        'ChannelClass': Optional[str],
        '__listOfOutputDestination': Optional[List[MediaLiveOutputDestination]],
        '__listOfChannelEgressEndpoint': Optional[List[MediaLiveChannelEgressEndpoint]],
        'EncoderSettings': Optional[MediaLiveEncoderSettings],
        '__string': Optional[str],
        '__listOfInputAttachment': Optional[List[MediaLiveInputAttachment]],
        'InputSpecification': Optional[MediaLiveInputSpecification],
        'LogLevel': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
        '__string': Optional[str],
        'ChannelState': Optional[str],
        'Tags': Optional[Dict[str, str]],
    }
)


MediaLiveDescribeInputResponse = TypedDict(
    'MediaLiveDescribeInputResponse', {
        '__string': Optional[str],
        '__listOf__string': Optional[List[str]],
        '__listOfInputDestination': Optional[List[MediaLiveInputDestination]],
        '__string': Optional[str],
        'InputClass': Optional[str],
        '__listOfMediaConnectFlow': Optional[List[MediaLiveMediaConnectFlow]],
        '__string': Optional[str],
        '__string': Optional[str],
        '__listOf__string': Optional[List[str]],
        '__listOfInputSource': Optional[List[MediaLiveInputSource]],
        'InputState': Optional[str],
        'Tags': Optional[Dict[str, str]],
        'InputType': Optional[str],
    }
)


MediaLiveDescribeInputSecurityGroupResponse = TypedDict(
    'MediaLiveDescribeInputSecurityGroupResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__listOf__string': Optional[List[str]],
        'InputSecurityGroupState': Optional[str],
        'Tags': Optional[Dict[str, str]],
        '__listOfInputWhitelistRule': Optional[List[MediaLiveInputWhitelistRule]],
    }
)


MediaLiveDescribeOfferingResponse = TypedDict(
    'MediaLiveDescribeOfferingResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
        'OfferingDurationUnits': Optional[str],
        '__double': Optional[float],
        '__string': Optional[str],
        '__string': Optional[str],
        'OfferingType': Optional[str],
        '__string': Optional[str],
        'ReservationResourceSpecification': Optional[MediaLiveReservationResourceSpecification],
        '__double': Optional[float],
    }
)


MediaLiveDescribeReservationResponse = TypedDict(
    'MediaLiveDescribeReservationResponse', {
        '__string': Optional[str],
        '__integer': Optional[int],
        '__string': Optional[str],
        '__integer': Optional[int],
        'OfferingDurationUnits': Optional[str],
        '__string': Optional[str],
        '__double': Optional[float],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'OfferingType': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'ReservationResourceSpecification': Optional[MediaLiveReservationResourceSpecification],
        '__string': Optional[str],
        'ReservationState': Optional[str],
        'Tags': Optional[Dict[str, str]],
        '__double': Optional[float],
    }
)


MediaLiveDescribeScheduleResponse = TypedDict(
    'MediaLiveDescribeScheduleResponse', {
        '__string': Optional[str],
        '__listOfScheduleAction': Optional[List[MediaLiveScheduleAction]],
    }
)


MediaLiveChannelSummary = TypedDict(
    'MediaLiveChannelSummary', {
        '__string': Optional[str],
        'ChannelClass': Optional[str],
        '__listOfOutputDestination': Optional[List[MediaLiveOutputDestination]],
        '__listOfChannelEgressEndpoint': Optional[List[MediaLiveChannelEgressEndpoint]],
        '__string': Optional[str],
        '__listOfInputAttachment': Optional[List[MediaLiveInputAttachment]],
        'InputSpecification': Optional[MediaLiveInputSpecification],
        'LogLevel': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
        '__string': Optional[str],
        'ChannelState': Optional[str],
        'Tags': Optional[Dict[str, str]],
    }
)


MediaLiveListChannelsResponse = TypedDict(
    'MediaLiveListChannelsResponse', {
        '__listOfChannelSummary': Optional[List[MediaLiveChannelSummary]],
        '__string': Optional[str],
    }
)


MediaLiveListInputSecurityGroupsResponse = TypedDict(
    'MediaLiveListInputSecurityGroupsResponse', {
        '__listOfInputSecurityGroup': Optional[List[MediaLiveInputSecurityGroup]],
        '__string': Optional[str],
    }
)


MediaLiveListInputsResponse = TypedDict(
    'MediaLiveListInputsResponse', {
        '__listOfInput': Optional[List[MediaLiveInput]],
        '__string': Optional[str],
    }
)


MediaLiveOffering = TypedDict(
    'MediaLiveOffering', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
        'OfferingDurationUnits': Optional[str],
        '__double': Optional[float],
        '__string': Optional[str],
        '__string': Optional[str],
        'OfferingType': Optional[str],
        '__string': Optional[str],
        'ReservationResourceSpecification': Optional[MediaLiveReservationResourceSpecification],
        '__double': Optional[float],
    }
)


MediaLiveListOfferingsResponse = TypedDict(
    'MediaLiveListOfferingsResponse', {
        '__string': Optional[str],
        '__listOfOffering': Optional[List[MediaLiveOffering]],
    }
)


MediaLiveReservation = TypedDict(
    'MediaLiveReservation', {
        '__string': Optional[str],
        '__integer': Optional[int],
        '__string': Optional[str],
        '__integer': Optional[int],
        'OfferingDurationUnits': Optional[str],
        '__string': Optional[str],
        '__double': Optional[float],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'OfferingType': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'ReservationResourceSpecification': Optional[MediaLiveReservationResourceSpecification],
        '__string': Optional[str],
        'ReservationState': Optional[str],
        'Tags': Optional[Dict[str, str]],
        '__double': Optional[float],
    }
)


MediaLiveListReservationsResponse = TypedDict(
    'MediaLiveListReservationsResponse', {
        '__string': Optional[str],
        '__listOfReservation': Optional[List[MediaLiveReservation]],
    }
)


MediaLiveListTagsForResourceResponse = TypedDict(
    'MediaLiveListTagsForResourceResponse', {
        'Tags': Optional[Dict[str, str]],
    }
)


MediaLivePurchaseOfferingResponse = TypedDict(
    'MediaLivePurchaseOfferingResponse', {
        'Reservation': Optional[MediaLiveReservation],
    }
)


MediaLiveStartChannelResponse = TypedDict(
    'MediaLiveStartChannelResponse', {
        '__string': Optional[str],
        'ChannelClass': Optional[str],
        '__listOfOutputDestination': Optional[List[MediaLiveOutputDestination]],
        '__listOfChannelEgressEndpoint': Optional[List[MediaLiveChannelEgressEndpoint]],
        'EncoderSettings': Optional[MediaLiveEncoderSettings],
        '__string': Optional[str],
        '__listOfInputAttachment': Optional[List[MediaLiveInputAttachment]],
        'InputSpecification': Optional[MediaLiveInputSpecification],
        'LogLevel': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
        '__string': Optional[str],
        'ChannelState': Optional[str],
        'Tags': Optional[Dict[str, str]],
    }
)


MediaLiveStopChannelResponse = TypedDict(
    'MediaLiveStopChannelResponse', {
        '__string': Optional[str],
        'ChannelClass': Optional[str],
        '__listOfOutputDestination': Optional[List[MediaLiveOutputDestination]],
        '__listOfChannelEgressEndpoint': Optional[List[MediaLiveChannelEgressEndpoint]],
        'EncoderSettings': Optional[MediaLiveEncoderSettings],
        '__string': Optional[str],
        '__listOfInputAttachment': Optional[List[MediaLiveInputAttachment]],
        'InputSpecification': Optional[MediaLiveInputSpecification],
        'LogLevel': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
        '__string': Optional[str],
        'ChannelState': Optional[str],
        'Tags': Optional[Dict[str, str]],
    }
)


MediaLiveUpdateChannelResponse = TypedDict(
    'MediaLiveUpdateChannelResponse', {
        'Channel': Optional[MediaLiveChannel],
    }
)


MediaLiveUpdateChannelClassResponse = TypedDict(
    'MediaLiveUpdateChannelClassResponse', {
        'Channel': Optional[MediaLiveChannel],
    }
)


MediaLiveUpdateInputResponse = TypedDict(
    'MediaLiveUpdateInputResponse', {
        'Input': Optional[MediaLiveInput],
    }
)


MediaLiveUpdateInputSecurityGroupResponse = TypedDict(
    'MediaLiveUpdateInputSecurityGroupResponse', {
        'InputSecurityGroup': Optional[MediaLiveInputSecurityGroup],
    }
)


MediaLiveUpdateReservationResponse = TypedDict(
    'MediaLiveUpdateReservationResponse', {
        'Reservation': Optional[MediaLiveReservation],
    }
)


class MediaPackage(BaseClient):
    def create_channel(self, *,
        Id: str,
        Description: str = ...,
        Tags: Dict[str, str] = ...
    ) -> MediaPackageCreateChannelResponse: ...

    def create_origin_endpoint(self, *,
        ChannelId: str,
        Id: str,
        CmafPackage: MediaPackageCmafPackageCreateOrUpdateParameters = ...,
        DashPackage: MediaPackageDashPackage = ...,
        Description: str = ...,
        HlsPackage: MediaPackageHlsPackage = ...,
        ManifestName: str = ...,
        MssPackage: MediaPackageMssPackage = ...,
        StartoverWindowSeconds: int = ...,
        Tags: Dict[str, str] = ...,
        TimeDelaySeconds: int = ...,
        Whitelist: List[str] = ...
    ) -> MediaPackageCreateOriginEndpointResponse: ...

    def delete_channel(self, *,
        Id: str
    ) -> MediaPackageDeleteChannelResponse: ...

    def delete_origin_endpoint(self, *,
        Id: str
    ) -> MediaPackageDeleteOriginEndpointResponse: ...

    def describe_channel(self, *,
        Id: str
    ) -> MediaPackageDescribeChannelResponse: ...

    def describe_origin_endpoint(self, *,
        Id: str
    ) -> MediaPackageDescribeOriginEndpointResponse: ...

    def list_channels(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MediaPackageListChannelsResponse: ...

    def list_origin_endpoints(self, *,
        ChannelId: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MediaPackageListOriginEndpointsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> MediaPackageListTagsForResourceResponse: ...

    def rotate_channel_credentials(self, *,
        Id: str
    ) -> MediaPackageRotateChannelCredentialsResponse: ...

    def rotate_ingest_endpoint_credentials(self, *,
        Id: str,
        IngestEndpointId: str
    ) -> MediaPackageRotateIngestEndpointCredentialsResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: Dict[str, str]
    ): ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ): ...

    def update_channel(self, *,
        Id: str,
        Description: str = ...
    ) -> MediaPackageUpdateChannelResponse: ...

    def update_origin_endpoint(self, *,
        Id: str,
        CmafPackage: MediaPackageCmafPackageCreateOrUpdateParameters = ...,
        DashPackage: MediaPackageDashPackage = ...,
        Description: str = ...,
        HlsPackage: MediaPackageHlsPackage = ...,
        ManifestName: str = ...,
        MssPackage: MediaPackageMssPackage = ...,
        StartoverWindowSeconds: int = ...,
        TimeDelaySeconds: int = ...,
        Whitelist: List[str] = ...
    ) -> MediaPackageUpdateOriginEndpointResponse: ...


MediaPackageIngestEndpoint = TypedDict(
    'MediaPackageIngestEndpoint', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


MediaPackageHlsIngest = TypedDict(
    'MediaPackageHlsIngest', {
        '__listOfIngestEndpoint': Optional[List[MediaPackageIngestEndpoint]],
    }
)


MediaPackageCreateChannelResponse = TypedDict(
    'MediaPackageCreateChannelResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        'HlsIngest': Optional[MediaPackageHlsIngest],
        '__string': Optional[str],
        'Tags': Optional[Dict[str, str]],
    }
)


MediaPackageSpekeKeyProvider = TypedDict(
    'MediaPackageSpekeKeyProvider', {
        '__string': str,
        '__string': str,
        '__listOf__string': List[str],
        '__string': str,
        '__string': Optional[str],
    }
)


MediaPackageCmafEncryption = TypedDict(
    'MediaPackageCmafEncryption', {
        'SpekeKeyProvider': MediaPackageSpekeKeyProvider,
        '__integer': Optional[int],
    }
)


MediaPackageHlsManifestCreateOrUpdateParameters = TypedDict(
    'MediaPackageHlsManifestCreateOrUpdateParameters', {
        '__string': str,
        'AdMarkers': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        'PlaylistType': Optional[str],
        '__integer': Optional[int],
        '__integer': Optional[int],
    }
)


MediaPackageStreamSelection = TypedDict(
    'MediaPackageStreamSelection', {
        '__integer': Optional[int],
        '__integer': Optional[int],
        'StreamOrder': Optional[str],
    }
)


MediaPackageCmafPackageCreateOrUpdateParameters = TypedDict(
    'MediaPackageCmafPackageCreateOrUpdateParameters', {
        'CmafEncryption': Optional[MediaPackageCmafEncryption],
        '__listOfHlsManifestCreateOrUpdateParameters': Optional[List[MediaPackageHlsManifestCreateOrUpdateParameters]],
        '__integer': Optional[int],
        '__string': Optional[str],
        'StreamSelection': Optional[MediaPackageStreamSelection],
    }
)


MediaPackageDashEncryption = TypedDict(
    'MediaPackageDashEncryption', {
        'SpekeKeyProvider': MediaPackageSpekeKeyProvider,
        '__integer': Optional[int],
    }
)


MediaPackageDashPackage = TypedDict(
    'MediaPackageDashPackage', {
        'DashEncryption': Optional[MediaPackageDashEncryption],
        'ManifestLayout': Optional[str],
        '__integer': Optional[int],
        '__integer': Optional[int],
        '__integer': Optional[int],
        '__listOf__PeriodTriggersElement': Optional[List[str]],
        'Profile': Optional[str],
        '__integer': Optional[int],
        'SegmentTemplateFormat': Optional[str],
        'StreamSelection': Optional[MediaPackageStreamSelection],
        '__integer': Optional[int],
    }
)


MediaPackageHlsEncryption = TypedDict(
    'MediaPackageHlsEncryption', {
        'SpekeKeyProvider': MediaPackageSpekeKeyProvider,
        '__string': Optional[str],
        'EncryptionMethod': Optional[str],
        '__integer': Optional[int],
        '__boolean': Optional[bool],
    }
)


MediaPackageHlsPackage = TypedDict(
    'MediaPackageHlsPackage', {
        'AdMarkers': Optional[str],
        'HlsEncryption': Optional[MediaPackageHlsEncryption],
        '__boolean': Optional[bool],
        'PlaylistType': Optional[str],
        '__integer': Optional[int],
        '__integer': Optional[int],
        '__integer': Optional[int],
        'StreamSelection': Optional[MediaPackageStreamSelection],
        '__boolean': Optional[bool],
    }
)


MediaPackageMssEncryption = TypedDict(
    'MediaPackageMssEncryption', {
        'SpekeKeyProvider': MediaPackageSpekeKeyProvider,
    }
)


MediaPackageMssPackage = TypedDict(
    'MediaPackageMssPackage', {
        'MssEncryption': Optional[MediaPackageMssEncryption],
        '__integer': Optional[int],
        '__integer': Optional[int],
        'StreamSelection': Optional[MediaPackageStreamSelection],
    }
)


MediaPackageHlsManifest = TypedDict(
    'MediaPackageHlsManifest', {
        '__string': str,
        'AdMarkers': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        'PlaylistType': Optional[str],
        '__integer': Optional[int],
        '__integer': Optional[int],
        '__string': Optional[str],
    }
)


MediaPackageCmafPackage = TypedDict(
    'MediaPackageCmafPackage', {
        'CmafEncryption': Optional[MediaPackageCmafEncryption],
        '__listOfHlsManifest': Optional[List[MediaPackageHlsManifest]],
        '__integer': Optional[int],
        '__string': Optional[str],
        'StreamSelection': Optional[MediaPackageStreamSelection],
    }
)


MediaPackageCreateOriginEndpointResponse = TypedDict(
    'MediaPackageCreateOriginEndpointResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        'CmafPackage': Optional[MediaPackageCmafPackage],
        'DashPackage': Optional[MediaPackageDashPackage],
        '__string': Optional[str],
        'HlsPackage': Optional[MediaPackageHlsPackage],
        '__string': Optional[str],
        '__string': Optional[str],
        'MssPackage': Optional[MediaPackageMssPackage],
        '__integer': Optional[int],
        'Tags': Optional[Dict[str, str]],
        '__integer': Optional[int],
        '__string': Optional[str],
        '__listOf__string': Optional[List[str]],
    }
)


MediaPackageDeleteChannelResponse = TypedDict(
    'MediaPackageDeleteChannelResponse', {
    }
)


MediaPackageDeleteOriginEndpointResponse = TypedDict(
    'MediaPackageDeleteOriginEndpointResponse', {
    }
)


MediaPackageDescribeChannelResponse = TypedDict(
    'MediaPackageDescribeChannelResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        'HlsIngest': Optional[MediaPackageHlsIngest],
        '__string': Optional[str],
        'Tags': Optional[Dict[str, str]],
    }
)


MediaPackageDescribeOriginEndpointResponse = TypedDict(
    'MediaPackageDescribeOriginEndpointResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        'CmafPackage': Optional[MediaPackageCmafPackage],
        'DashPackage': Optional[MediaPackageDashPackage],
        '__string': Optional[str],
        'HlsPackage': Optional[MediaPackageHlsPackage],
        '__string': Optional[str],
        '__string': Optional[str],
        'MssPackage': Optional[MediaPackageMssPackage],
        '__integer': Optional[int],
        'Tags': Optional[Dict[str, str]],
        '__integer': Optional[int],
        '__string': Optional[str],
        '__listOf__string': Optional[List[str]],
    }
)


MediaPackageChannel = TypedDict(
    'MediaPackageChannel', {
        '__string': Optional[str],
        '__string': Optional[str],
        'HlsIngest': Optional[MediaPackageHlsIngest],
        '__string': Optional[str],
        'Tags': Optional[Dict[str, str]],
    }
)


MediaPackageListChannelsResponse = TypedDict(
    'MediaPackageListChannelsResponse', {
        '__listOfChannel': Optional[List[MediaPackageChannel]],
        '__string': Optional[str],
    }
)


MediaPackageOriginEndpoint = TypedDict(
    'MediaPackageOriginEndpoint', {
        '__string': Optional[str],
        '__string': Optional[str],
        'CmafPackage': Optional[MediaPackageCmafPackage],
        'DashPackage': Optional[MediaPackageDashPackage],
        '__string': Optional[str],
        'HlsPackage': Optional[MediaPackageHlsPackage],
        '__string': Optional[str],
        '__string': Optional[str],
        'MssPackage': Optional[MediaPackageMssPackage],
        '__integer': Optional[int],
        'Tags': Optional[Dict[str, str]],
        '__integer': Optional[int],
        '__string': Optional[str],
        '__listOf__string': Optional[List[str]],
    }
)


MediaPackageListOriginEndpointsResponse = TypedDict(
    'MediaPackageListOriginEndpointsResponse', {
        '__string': Optional[str],
        '__listOfOriginEndpoint': Optional[List[MediaPackageOriginEndpoint]],
    }
)


MediaPackageListTagsForResourceResponse = TypedDict(
    'MediaPackageListTagsForResourceResponse', {
        '__mapOf__string': Optional[Dict[str, str]],
    }
)


MediaPackageRotateChannelCredentialsResponse = TypedDict(
    'MediaPackageRotateChannelCredentialsResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        'HlsIngest': Optional[MediaPackageHlsIngest],
        '__string': Optional[str],
        'Tags': Optional[Dict[str, str]],
    }
)


MediaPackageRotateIngestEndpointCredentialsResponse = TypedDict(
    'MediaPackageRotateIngestEndpointCredentialsResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        'HlsIngest': Optional[MediaPackageHlsIngest],
        '__string': Optional[str],
        'Tags': Optional[Dict[str, str]],
    }
)


MediaPackageUpdateChannelResponse = TypedDict(
    'MediaPackageUpdateChannelResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        'HlsIngest': Optional[MediaPackageHlsIngest],
        '__string': Optional[str],
        'Tags': Optional[Dict[str, str]],
    }
)


MediaPackageUpdateOriginEndpointResponse = TypedDict(
    'MediaPackageUpdateOriginEndpointResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        'CmafPackage': Optional[MediaPackageCmafPackage],
        'DashPackage': Optional[MediaPackageDashPackage],
        '__string': Optional[str],
        'HlsPackage': Optional[MediaPackageHlsPackage],
        '__string': Optional[str],
        '__string': Optional[str],
        'MssPackage': Optional[MediaPackageMssPackage],
        '__integer': Optional[int],
        'Tags': Optional[Dict[str, str]],
        '__integer': Optional[int],
        '__string': Optional[str],
        '__listOf__string': Optional[List[str]],
    }
)


class MediaStore(BaseClient):
    def create_container(self, *,
        ContainerName: str
    ) -> MediaStoreCreateContainerOutput: ...

    def delete_container(self, *,
        ContainerName: str
    ) -> MediaStoreDeleteContainerOutput: ...

    def delete_container_policy(self, *,
        ContainerName: str
    ) -> MediaStoreDeleteContainerPolicyOutput: ...

    def delete_cors_policy(self, *,
        ContainerName: str
    ) -> MediaStoreDeleteCorsPolicyOutput: ...

    def delete_lifecycle_policy(self, *,
        ContainerName: str
    ) -> MediaStoreDeleteLifecyclePolicyOutput: ...

    def describe_container(self, *,
        ContainerName: str = ...
    ) -> MediaStoreDescribeContainerOutput: ...

    def get_container_policy(self, *,
        ContainerName: str
    ) -> MediaStoreGetContainerPolicyOutput: ...

    def get_cors_policy(self, *,
        ContainerName: str
    ) -> MediaStoreGetCorsPolicyOutput: ...

    def get_lifecycle_policy(self, *,
        ContainerName: str
    ) -> MediaStoreGetLifecyclePolicyOutput: ...

    def list_containers(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MediaStoreListContainersOutput: ...

    def put_container_policy(self, *,
        ContainerName: str,
        Policy: str
    ) -> MediaStorePutContainerPolicyOutput: ...

    def put_cors_policy(self, *,
        ContainerName: str,
        CorsPolicy: List[MediaStoreCorsRule]
    ) -> MediaStorePutCorsPolicyOutput: ...

    def put_lifecycle_policy(self, *,
        ContainerName: str,
        LifecyclePolicy: str
    ) -> MediaStorePutLifecyclePolicyOutput: ...

    def start_access_logging(self, *,
        ContainerName: str
    ) -> MediaStoreStartAccessLoggingOutput: ...

    def stop_access_logging(self, *,
        ContainerName: str
    ) -> MediaStoreStopAccessLoggingOutput: ...


MediaStoreContainer = TypedDict(
    'MediaStoreContainer', {
        'Endpoint': Optional[str],
        'TimeStamp': Optional[datetime.datetime],
        'ContainerARN': Optional[str],
        'ContainerName': Optional[str],
        'ContainerStatus': Optional[str],
        'ContainerAccessLoggingEnabled': Optional[bool],
    }
)


MediaStoreCreateContainerOutput = TypedDict(
    'MediaStoreCreateContainerOutput', {
        'Container': MediaStoreContainer,
    }
)


MediaStoreDeleteContainerOutput = TypedDict(
    'MediaStoreDeleteContainerOutput', {
    }
)


MediaStoreDeleteContainerPolicyOutput = TypedDict(
    'MediaStoreDeleteContainerPolicyOutput', {
    }
)


MediaStoreDeleteCorsPolicyOutput = TypedDict(
    'MediaStoreDeleteCorsPolicyOutput', {
    }
)


MediaStoreDeleteLifecyclePolicyOutput = TypedDict(
    'MediaStoreDeleteLifecyclePolicyOutput', {
    }
)


MediaStoreDescribeContainerOutput = TypedDict(
    'MediaStoreDescribeContainerOutput', {
        'Container': Optional[MediaStoreContainer],
    }
)


MediaStoreGetContainerPolicyOutput = TypedDict(
    'MediaStoreGetContainerPolicyOutput', {
        'ContainerPolicy': str,
    }
)


MediaStoreCorsRule = TypedDict(
    'MediaStoreCorsRule', {
        'AllowedOrigins': List[str],
        'AllowedHeaders': List[str],
        'AllowedMethods': Optional[List[str]],
        'MaxAgeSeconds': Optional[int],
        'ExposeHeaders': Optional[List[str]],
    }
)


MediaStoreGetCorsPolicyOutput = TypedDict(
    'MediaStoreGetCorsPolicyOutput', {
        'CorsPolicy': List[MediaStoreCorsRule],
    }
)


MediaStoreGetLifecyclePolicyOutput = TypedDict(
    'MediaStoreGetLifecyclePolicyOutput', {
        'LifecyclePolicy': str,
    }
)


MediaStoreListContainersOutput = TypedDict(
    'MediaStoreListContainersOutput', {
        'ContainerList': List[MediaStoreContainer],
        'PaginationToken': Optional[str],
    }
)


MediaStorePutContainerPolicyOutput = TypedDict(
    'MediaStorePutContainerPolicyOutput', {
    }
)


MediaStorePutCorsPolicyOutput = TypedDict(
    'MediaStorePutCorsPolicyOutput', {
    }
)


MediaStorePutLifecyclePolicyOutput = TypedDict(
    'MediaStorePutLifecyclePolicyOutput', {
    }
)


MediaStoreStartAccessLoggingOutput = TypedDict(
    'MediaStoreStartAccessLoggingOutput', {
    }
)


MediaStoreStopAccessLoggingOutput = TypedDict(
    'MediaStoreStopAccessLoggingOutput', {
    }
)


class MediaStoreData(BaseClient):
    def delete_object(self, *,
        Path: str
    ) -> MediaStoreDataDeleteObjectResponse: ...

    def describe_object(self, *,
        Path: str
    ) -> MediaStoreDataDescribeObjectResponse: ...

    def get_object(self, *,
        Path: str,
        Range: str = ...
    ) -> MediaStoreDataGetObjectResponse: ...

    def list_items(self, *,
        Path: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MediaStoreDataListItemsResponse: ...

    def put_object(self, *,
        Body: bytes,
        Path: str,
        ContentType: str = ...,
        CacheControl: str = ...,
        StorageClass: str = ...
    ) -> MediaStoreDataPutObjectResponse: ...


MediaStoreDataDeleteObjectResponse = TypedDict(
    'MediaStoreDataDeleteObjectResponse', {
    }
)


MediaStoreDataDescribeObjectResponse = TypedDict(
    'MediaStoreDataDescribeObjectResponse', {
        'ETag': Optional[str],
        'ContentType': Optional[str],
        'NonNegativeLong': Optional[int],
        'StringPrimitive': Optional[str],
        'TimeStamp': Optional[datetime.datetime],
    }
)


MediaStoreDataGetObjectResponse = TypedDict(
    'MediaStoreDataGetObjectResponse', {
        'statusCode': int,
        'PayloadBlob': Optional[bytes],
        'StringPrimitive': Optional[str],
        'ContentRangePattern': Optional[str],
        'NonNegativeLong': Optional[int],
        'ContentType': Optional[str],
        'ETag': Optional[str],
        'TimeStamp': Optional[datetime.datetime],
    }
)


MediaStoreDataItem = TypedDict(
    'MediaStoreDataItem', {
        'ItemName': Optional[str],
        'ItemType': Optional[str],
        'ETag': Optional[str],
        'TimeStamp': Optional[datetime.datetime],
        'ContentType': Optional[str],
        'NonNegativeLong': Optional[int],
    }
)


MediaStoreDataListItemsResponse = TypedDict(
    'MediaStoreDataListItemsResponse', {
        'ItemList': Optional[List[MediaStoreDataItem]],
        'PaginationToken': Optional[str],
    }
)


MediaStoreDataPutObjectResponse = TypedDict(
    'MediaStoreDataPutObjectResponse', {
        'SHA256Hash': Optional[str],
        'ETag': Optional[str],
        'StorageClass': Optional[str],
    }
)


class MediaTailor(BaseClient):
    def delete_playback_configuration(self, *,
        Name: str
    ) -> MediaTailorDeletePlaybackConfigurationResponse: ...

    def get_playback_configuration(self, *,
        Name: str
    ) -> MediaTailorGetPlaybackConfigurationResponse: ...

    def list_playback_configurations(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MediaTailorListPlaybackConfigurationsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> MediaTailorListTagsForResourceResponse: ...

    def put_playback_configuration(self, *,
        AdDecisionServerUrl: str = ...,
        CdnConfiguration: MediaTailorCdnConfiguration = ...,
        DashConfiguration: MediaTailorDashConfigurationForPut = ...,
        Name: str = ...,
        SlateAdUrl: str = ...,
        Tags: Dict[str, str] = ...,
        TranscodeProfileName: str = ...,
        VideoContentSourceUrl: str = ...
    ) -> MediaTailorPutPlaybackConfigurationResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: Dict[str, str]
    ): ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ): ...


MediaTailorDeletePlaybackConfigurationResponse = TypedDict(
    'MediaTailorDeletePlaybackConfigurationResponse', {
    }
)


MediaTailorCdnConfiguration = TypedDict(
    'MediaTailorCdnConfiguration', {
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


MediaTailorDashConfiguration = TypedDict(
    'MediaTailorDashConfiguration', {
        '__string': Optional[str],
        '__string': Optional[str],
        'OriginManifestType': Optional[str],
    }
)


MediaTailorHlsConfiguration = TypedDict(
    'MediaTailorHlsConfiguration', {
        '__string': Optional[str],
    }
)


MediaTailorGetPlaybackConfigurationResponse = TypedDict(
    'MediaTailorGetPlaybackConfigurationResponse', {
        '__string': Optional[str],
        'CdnConfiguration': Optional[MediaTailorCdnConfiguration],
        'DashConfiguration': Optional[MediaTailorDashConfiguration],
        'HlsConfiguration': Optional[MediaTailorHlsConfiguration],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__mapOf__string': Optional[Dict[str, str]],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


MediaTailorPlaybackConfiguration = TypedDict(
    'MediaTailorPlaybackConfiguration', {
        '__string': Optional[str],
        'CdnConfiguration': Optional[MediaTailorCdnConfiguration],
        'DashConfiguration': Optional[MediaTailorDashConfiguration],
        'HlsConfiguration': Optional[MediaTailorHlsConfiguration],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__mapOf__string': Optional[Dict[str, str]],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


MediaTailorListPlaybackConfigurationsResponse = TypedDict(
    'MediaTailorListPlaybackConfigurationsResponse', {
        '__listOfPlaybackConfigurations': Optional[List[MediaTailorPlaybackConfiguration]],
        '__string': Optional[str],
    }
)


MediaTailorListTagsForResourceResponse = TypedDict(
    'MediaTailorListTagsForResourceResponse', {
        '__mapOf__string': Optional[Dict[str, str]],
    }
)


MediaTailorDashConfigurationForPut = TypedDict(
    'MediaTailorDashConfigurationForPut', {
        '__string': Optional[str],
        'OriginManifestType': Optional[str],
    }
)


MediaTailorPutPlaybackConfigurationResponse = TypedDict(
    'MediaTailorPutPlaybackConfigurationResponse', {
        '__string': Optional[str],
        'CdnConfiguration': Optional[MediaTailorCdnConfiguration],
        'DashConfiguration': Optional[MediaTailorDashConfiguration],
        'HlsConfiguration': Optional[MediaTailorHlsConfiguration],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__mapOf__string': Optional[Dict[str, str]],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


class MarketplaceMetering(BaseClient):
    def batch_meter_usage(self, *,
        UsageRecords: List[MarketplaceMeteringUsageRecord],
        ProductCode: str
    ) -> MarketplaceMeteringBatchMeterUsageResult: ...

    def meter_usage(self, *,
        ProductCode: str,
        Timestamp: datetime.datetime,
        UsageDimension: str,
        UsageQuantity: int = ...,
        DryRun: bool = ...
    ) -> MarketplaceMeteringMeterUsageResult: ...

    def register_usage(self, *,
        ProductCode: str,
        PublicKeyVersion: int,
        Nonce: str = ...
    ) -> MarketplaceMeteringRegisterUsageResult: ...

    def resolve_customer(self, *,
        RegistrationToken: str
    ) -> MarketplaceMeteringResolveCustomerResult: ...


MarketplaceMeteringUsageRecord = TypedDict(
    'MarketplaceMeteringUsageRecord', {
        'Timestamp': datetime.datetime,
        'CustomerIdentifier': str,
        'UsageDimension': str,
        'UsageQuantity': Optional[int],
    }
)


MarketplaceMeteringUsageRecordResult = TypedDict(
    'MarketplaceMeteringUsageRecordResult', {
        'UsageRecord': Optional[MarketplaceMeteringUsageRecord],
        'String': Optional[str],
        'UsageRecordResultStatus': Optional[str],
    }
)


MarketplaceMeteringBatchMeterUsageResult = TypedDict(
    'MarketplaceMeteringBatchMeterUsageResult', {
        'UsageRecordResultList': Optional[List[MarketplaceMeteringUsageRecordResult]],
        'UsageRecordList': Optional[List[MarketplaceMeteringUsageRecord]],
    }
)


MarketplaceMeteringMeterUsageResult = TypedDict(
    'MarketplaceMeteringMeterUsageResult', {
        'String': Optional[str],
    }
)


MarketplaceMeteringRegisterUsageResult = TypedDict(
    'MarketplaceMeteringRegisterUsageResult', {
        'Timestamp': Optional[datetime.datetime],
        'NonEmptyString': Optional[str],
    }
)


MarketplaceMeteringResolveCustomerResult = TypedDict(
    'MarketplaceMeteringResolveCustomerResult', {
        'CustomerIdentifier': Optional[str],
        'ProductCode': Optional[str],
    }
)


class MigrationHub(BaseClient):
    def associate_created_artifact(self, *,
        ProgressUpdateStream: str,
        MigrationTaskName: str,
        CreatedArtifact: MigrationHubCreatedArtifact,
        DryRun: bool = ...
    ) -> MigrationHubAssociateCreatedArtifactResult: ...

    def associate_discovered_resource(self, *,
        ProgressUpdateStream: str,
        MigrationTaskName: str,
        DiscoveredResource: MigrationHubDiscoveredResource,
        DryRun: bool = ...
    ) -> MigrationHubAssociateDiscoveredResourceResult: ...

    def create_progress_update_stream(self, *,
        ProgressUpdateStreamName: str,
        DryRun: bool = ...
    ) -> MigrationHubCreateProgressUpdateStreamResult: ...

    def delete_progress_update_stream(self, *,
        ProgressUpdateStreamName: str,
        DryRun: bool = ...
    ) -> MigrationHubDeleteProgressUpdateStreamResult: ...

    def describe_application_state(self, *,
        ApplicationId: str
    ) -> MigrationHubDescribeApplicationStateResult: ...

    def describe_migration_task(self, *,
        ProgressUpdateStream: str,
        MigrationTaskName: str
    ) -> MigrationHubDescribeMigrationTaskResult: ...

    def disassociate_created_artifact(self, *,
        ProgressUpdateStream: str,
        MigrationTaskName: str,
        CreatedArtifactName: str,
        DryRun: bool = ...
    ) -> MigrationHubDisassociateCreatedArtifactResult: ...

    def disassociate_discovered_resource(self, *,
        ProgressUpdateStream: str,
        MigrationTaskName: str,
        ConfigurationId: str,
        DryRun: bool = ...
    ) -> MigrationHubDisassociateDiscoveredResourceResult: ...

    def import_migration_task(self, *,
        ProgressUpdateStream: str,
        MigrationTaskName: str,
        DryRun: bool = ...
    ) -> MigrationHubImportMigrationTaskResult: ...

    def list_created_artifacts(self, *,
        ProgressUpdateStream: str,
        MigrationTaskName: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MigrationHubListCreatedArtifactsResult: ...

    def list_discovered_resources(self, *,
        ProgressUpdateStream: str,
        MigrationTaskName: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MigrationHubListDiscoveredResourcesResult: ...

    def list_migration_tasks(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        ResourceName: str = ...
    ) -> MigrationHubListMigrationTasksResult: ...

    def list_progress_update_streams(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MigrationHubListProgressUpdateStreamsResult: ...

    def notify_application_state(self, *,
        ApplicationId: str,
        Status: str,
        DryRun: bool = ...
    ) -> MigrationHubNotifyApplicationStateResult: ...

    def notify_migration_task_state(self, *,
        ProgressUpdateStream: str,
        MigrationTaskName: str,
        Task: MigrationHubTask,
        UpdateDateTime: datetime.datetime,
        NextUpdateSeconds: int,
        DryRun: bool = ...
    ) -> MigrationHubNotifyMigrationTaskStateResult: ...

    def put_resource_attributes(self, *,
        ProgressUpdateStream: str,
        MigrationTaskName: str,
        ResourceAttributeList: List[MigrationHubResourceAttribute],
        DryRun: bool = ...
    ) -> MigrationHubPutResourceAttributesResult: ...


MigrationHubCreatedArtifact = TypedDict(
    'MigrationHubCreatedArtifact', {
        'CreatedArtifactName': str,
        'CreatedArtifactDescription': Optional[str],
    }
)


MigrationHubAssociateCreatedArtifactResult = TypedDict(
    'MigrationHubAssociateCreatedArtifactResult', {
    }
)


MigrationHubDiscoveredResource = TypedDict(
    'MigrationHubDiscoveredResource', {
        'ConfigurationId': str,
        'DiscoveredResourceDescription': Optional[str],
    }
)


MigrationHubAssociateDiscoveredResourceResult = TypedDict(
    'MigrationHubAssociateDiscoveredResourceResult', {
    }
)


MigrationHubCreateProgressUpdateStreamResult = TypedDict(
    'MigrationHubCreateProgressUpdateStreamResult', {
    }
)


MigrationHubDeleteProgressUpdateStreamResult = TypedDict(
    'MigrationHubDeleteProgressUpdateStreamResult', {
    }
)


MigrationHubDescribeApplicationStateResult = TypedDict(
    'MigrationHubDescribeApplicationStateResult', {
        'ApplicationStatus': Optional[str],
        'UpdateDateTime': Optional[datetime.datetime],
    }
)


MigrationHubTask = TypedDict(
    'MigrationHubTask', {
        'Status': str,
        'StatusDetail': Optional[str],
        'ProgressPercent': Optional[int],
    }
)


MigrationHubResourceAttribute = TypedDict(
    'MigrationHubResourceAttribute', {
        'ResourceAttributeType': str,
        'ResourceAttributeValue': str,
    }
)


MigrationHubMigrationTask = TypedDict(
    'MigrationHubMigrationTask', {
        'ProgressUpdateStream': Optional[str],
        'MigrationTaskName': Optional[str],
        'Task': Optional[MigrationHubTask],
        'UpdateDateTime': Optional[datetime.datetime],
        'LatestResourceAttributeList': Optional[List[MigrationHubResourceAttribute]],
    }
)


MigrationHubDescribeMigrationTaskResult = TypedDict(
    'MigrationHubDescribeMigrationTaskResult', {
        'MigrationTask': Optional[MigrationHubMigrationTask],
    }
)


MigrationHubDisassociateCreatedArtifactResult = TypedDict(
    'MigrationHubDisassociateCreatedArtifactResult', {
    }
)


MigrationHubDisassociateDiscoveredResourceResult = TypedDict(
    'MigrationHubDisassociateDiscoveredResourceResult', {
    }
)


MigrationHubImportMigrationTaskResult = TypedDict(
    'MigrationHubImportMigrationTaskResult', {
    }
)


MigrationHubListCreatedArtifactsResult = TypedDict(
    'MigrationHubListCreatedArtifactsResult', {
        'Token': Optional[str],
        'CreatedArtifactList': Optional[List[MigrationHubCreatedArtifact]],
    }
)


MigrationHubListDiscoveredResourcesResult = TypedDict(
    'MigrationHubListDiscoveredResourcesResult', {
        'Token': Optional[str],
        'DiscoveredResourceList': Optional[List[MigrationHubDiscoveredResource]],
    }
)


MigrationHubMigrationTaskSummary = TypedDict(
    'MigrationHubMigrationTaskSummary', {
        'ProgressUpdateStream': Optional[str],
        'MigrationTaskName': Optional[str],
        'Status': Optional[str],
        'ProgressPercent': Optional[int],
        'StatusDetail': Optional[str],
        'UpdateDateTime': Optional[datetime.datetime],
    }
)


MigrationHubListMigrationTasksResult = TypedDict(
    'MigrationHubListMigrationTasksResult', {
        'Token': Optional[str],
        'MigrationTaskSummaryList': Optional[List[MigrationHubMigrationTaskSummary]],
    }
)


MigrationHubProgressUpdateStreamSummary = TypedDict(
    'MigrationHubProgressUpdateStreamSummary', {
        'ProgressUpdateStream': Optional[str],
    }
)


MigrationHubListProgressUpdateStreamsResult = TypedDict(
    'MigrationHubListProgressUpdateStreamsResult', {
        'ProgressUpdateStreamSummaryList': Optional[List[MigrationHubProgressUpdateStreamSummary]],
        'Token': Optional[str],
    }
)


MigrationHubNotifyApplicationStateResult = TypedDict(
    'MigrationHubNotifyApplicationStateResult', {
    }
)


MigrationHubNotifyMigrationTaskStateResult = TypedDict(
    'MigrationHubNotifyMigrationTaskStateResult', {
    }
)


MigrationHubPutResourceAttributesResult = TypedDict(
    'MigrationHubPutResourceAttributesResult', {
    }
)


class Mobile(BaseClient):
    def create_project(self, *,
        name: str = ...,
        region: str = ...,
        contents: bytes = ...,
        snapshotId: str = ...
    ) -> MobileCreateProjectResult: ...

    def delete_project(self, *,
        projectId: str
    ) -> MobileDeleteProjectResult: ...

    def describe_bundle(self, *,
        bundleId: str
    ) -> MobileDescribeBundleResult: ...

    def describe_project(self, *,
        projectId: str,
        syncFromResources: bool = ...
    ) -> MobileDescribeProjectResult: ...

    def export_bundle(self, *,
        bundleId: str,
        projectId: str = ...,
        platform: str = ...
    ) -> MobileExportBundleResult: ...

    def export_project(self, *,
        projectId: str
    ) -> MobileExportProjectResult: ...

    def list_bundles(self, *,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> MobileListBundlesResult: ...

    def list_projects(self, *,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> MobileListProjectsResult: ...

    def update_project(self, *,
        projectId: str,
        contents: bytes = ...
    ) -> MobileUpdateProjectResult: ...


MobileResource = TypedDict(
    'MobileResource', {
        'ResourceType': Optional[str],
        'ResourceName': Optional[str],
        'ResourceArn': Optional[str],
        'Feature': Optional[str],
        'Attributes': Optional[Dict[str, str]],
    }
)


MobileProjectDetails = TypedDict(
    'MobileProjectDetails', {
        'ProjectName': Optional[str],
        'ProjectId': Optional[str],
        'ProjectRegion': Optional[str],
        'ProjectState': Optional[str],
        'Date': Optional[datetime.datetime],
        'Date': Optional[datetime.datetime],
        'ConsoleUrl': Optional[str],
        'Resources': Optional[List[MobileResource]],
    }
)


MobileCreateProjectResult = TypedDict(
    'MobileCreateProjectResult', {
        'ProjectDetails': Optional[MobileProjectDetails],
    }
)


MobileDeleteProjectResult = TypedDict(
    'MobileDeleteProjectResult', {
        'Resources': Optional[List[MobileResource]],
        'Resources': Optional[List[MobileResource]],
    }
)


MobileBundleDetails = TypedDict(
    'MobileBundleDetails', {
        'BundleId': Optional[str],
        'BundleTitle': Optional[str],
        'BundleVersion': Optional[str],
        'BundleDescription': Optional[str],
        'IconUrl': Optional[str],
        'Platforms': Optional[List[str]],
    }
)


MobileDescribeBundleResult = TypedDict(
    'MobileDescribeBundleResult', {
        'BundleDetails': Optional[MobileBundleDetails],
    }
)


MobileDescribeProjectResult = TypedDict(
    'MobileDescribeProjectResult', {
        'ProjectDetails': Optional[MobileProjectDetails],
    }
)


MobileExportBundleResult = TypedDict(
    'MobileExportBundleResult', {
        'DownloadUrl': Optional[str],
    }
)


MobileExportProjectResult = TypedDict(
    'MobileExportProjectResult', {
        'DownloadUrl': Optional[str],
        'ShareUrl': Optional[str],
        'SnapshotId': Optional[str],
    }
)


MobileListBundlesResult = TypedDict(
    'MobileListBundlesResult', {
        'BundleList': Optional[List[MobileBundleDetails]],
        'NextToken': Optional[str],
    }
)


MobileProjectSummary = TypedDict(
    'MobileProjectSummary', {
        'ProjectName': Optional[str],
        'ProjectId': Optional[str],
    }
)


MobileListProjectsResult = TypedDict(
    'MobileListProjectsResult', {
        'ProjectSummaries': Optional[List[MobileProjectSummary]],
        'NextToken': Optional[str],
    }
)


MobileUpdateProjectResult = TypedDict(
    'MobileUpdateProjectResult', {
        'ProjectDetails': Optional[MobileProjectDetails],
    }
)


class MQ(BaseClient):
    def create_broker(self, *,
        AutoMinorVersionUpgrade: bool = ...,
        BrokerName: str = ...,
        Configuration: MQConfigurationId = ...,
        CreatorRequestId: str = ...,
        DeploymentMode: str = ...,
        EngineType: str = ...,
        EngineVersion: str = ...,
        HostInstanceType: str = ...,
        Logs: MQLogs = ...,
        MaintenanceWindowStartTime: MQWeeklyStartTime = ...,
        PubliclyAccessible: bool = ...,
        SecurityGroups: List[str] = ...,
        SubnetIds: List[str] = ...,
        Tags: Dict[str, str] = ...,
        Users: List[MQUser] = ...
    ) -> MQCreateBrokerResponse: ...

    def create_configuration(self, *,
        EngineType: str = ...,
        EngineVersion: str = ...,
        Name: str = ...,
        Tags: Dict[str, str] = ...
    ) -> MQCreateConfigurationResponse: ...

    def create_tags(self, *,
        ResourceArn: str,
        Tags: Dict[str, str] = ...
    ): ...

    def create_user(self, *,
        BrokerId: str,
        Username: str,
        ConsoleAccess: bool = ...,
        Groups: List[str] = ...,
        Password: str = ...
    ) -> MQCreateUserResponse: ...

    def delete_broker(self, *,
        BrokerId: str
    ) -> MQDeleteBrokerResponse: ...

    def delete_tags(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ): ...

    def delete_user(self, *,
        BrokerId: str,
        Username: str
    ) -> MQDeleteUserResponse: ...

    def describe_broker(self, *,
        BrokerId: str
    ) -> MQDescribeBrokerResponse: ...

    def describe_broker_engine_types(self, *,
        EngineType: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MQDescribeBrokerEngineTypesResponse: ...

    def describe_broker_instance_options(self, *,
        EngineType: str = ...,
        HostInstanceType: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MQDescribeBrokerInstanceOptionsResponse: ...

    def describe_configuration(self, *,
        ConfigurationId: str
    ) -> MQDescribeConfigurationResponse: ...

    def describe_configuration_revision(self, *,
        ConfigurationId: str,
        ConfigurationRevision: str
    ) -> MQDescribeConfigurationRevisionResponse: ...

    def describe_user(self, *,
        BrokerId: str,
        Username: str
    ) -> MQDescribeUserResponse: ...

    def list_brokers(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MQListBrokersResponse: ...

    def list_configuration_revisions(self, *,
        ConfigurationId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MQListConfigurationRevisionsResponse: ...

    def list_configurations(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MQListConfigurationsResponse: ...

    def list_tags(self, *,
        ResourceArn: str
    ) -> MQListTagsResponse: ...

    def list_users(self, *,
        BrokerId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MQListUsersResponse: ...

    def reboot_broker(self, *,
        BrokerId: str
    ) -> MQRebootBrokerResponse: ...

    def update_broker(self, *,
        BrokerId: str,
        AutoMinorVersionUpgrade: bool = ...,
        Configuration: MQConfigurationId = ...,
        EngineVersion: str = ...,
        Logs: MQLogs = ...
    ) -> MQUpdateBrokerResponse: ...

    def update_configuration(self, *,
        ConfigurationId: str,
        Data: str = ...,
        Description: str = ...
    ) -> MQUpdateConfigurationResponse: ...

    def update_user(self, *,
        BrokerId: str,
        Username: str,
        ConsoleAccess: bool = ...,
        Groups: List[str] = ...,
        Password: str = ...
    ) -> MQUpdateUserResponse: ...


MQConfigurationId = TypedDict(
    'MQConfigurationId', {
        '__string': Optional[str],
        '__integer': Optional[int],
    }
)


MQLogs = TypedDict(
    'MQLogs', {
        '__boolean': Optional[bool],
        '__boolean': Optional[bool],
    }
)


MQWeeklyStartTime = TypedDict(
    'MQWeeklyStartTime', {
        'DayOfWeek': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


MQUser = TypedDict(
    'MQUser', {
        '__boolean': Optional[bool],
        '__listOf__string': Optional[List[str]],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


MQCreateBrokerResponse = TypedDict(
    'MQCreateBrokerResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


MQConfigurationRevision = TypedDict(
    'MQConfigurationRevision', {
        '__timestampIso8601': Optional[datetime.datetime],
        '__string': Optional[str],
        '__integer': Optional[int],
    }
)


MQCreateConfigurationResponse = TypedDict(
    'MQCreateConfigurationResponse', {
        '__string': Optional[str],
        '__timestampIso8601': Optional[datetime.datetime],
        '__string': Optional[str],
        'ConfigurationRevision': Optional[MQConfigurationRevision],
        '__string': Optional[str],
    }
)


MQCreateUserResponse = TypedDict(
    'MQCreateUserResponse', {
    }
)


MQDeleteBrokerResponse = TypedDict(
    'MQDeleteBrokerResponse', {
        '__string': Optional[str],
    }
)


MQDeleteUserResponse = TypedDict(
    'MQDeleteUserResponse', {
    }
)


MQBrokerInstance = TypedDict(
    'MQBrokerInstance', {
        '__string': Optional[str],
        '__listOf__string': Optional[List[str]],
        '__string': Optional[str],
    }
)


MQConfigurations = TypedDict(
    'MQConfigurations', {
        'ConfigurationId': Optional[MQConfigurationId],
        '__listOfConfigurationId': Optional[List[MQConfigurationId]],
        'ConfigurationId': Optional[MQConfigurationId],
    }
)


MQPendingLogs = TypedDict(
    'MQPendingLogs', {
        '__boolean': Optional[bool],
        '__boolean': Optional[bool],
    }
)


MQLogsSummary = TypedDict(
    'MQLogsSummary', {
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        'PendingLogs': Optional[MQPendingLogs],
    }
)


MQUserSummary = TypedDict(
    'MQUserSummary', {
        'ChangeType': Optional[str],
        '__string': Optional[str],
    }
)


MQDescribeBrokerResponse = TypedDict(
    'MQDescribeBrokerResponse', {
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__string': Optional[str],
        '__listOfBrokerInstance': Optional[List[MQBrokerInstance]],
        '__string': Optional[str],
        'BrokerState': Optional[str],
        'Configurations': Optional[MQConfigurations],
        '__timestampIso8601': Optional[datetime.datetime],
        'DeploymentMode': Optional[str],
        'EngineType': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'LogsSummary': Optional[MQLogsSummary],
        'WeeklyStartTime': Optional[MQWeeklyStartTime],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__listOf__string': Optional[List[str]],
        '__listOf__string': Optional[List[str]],
        '__mapOf__string': Optional[Dict[str, str]],
        '__listOfUserSummary': Optional[List[MQUserSummary]],
    }
)


MQEngineVersion = TypedDict(
    'MQEngineVersion', {
        '__string': Optional[str],
    }
)


MQBrokerEngineType = TypedDict(
    'MQBrokerEngineType', {
        'EngineType': Optional[str],
        '__listOfEngineVersion': Optional[List[MQEngineVersion]],
    }
)


MQDescribeBrokerEngineTypesResponse = TypedDict(
    'MQDescribeBrokerEngineTypesResponse', {
        '__listOfBrokerEngineType': Optional[List[MQBrokerEngineType]],
        '__integerMin5Max100': Optional[int],
        '__string': Optional[str],
    }
)


MQAvailabilityZone = TypedDict(
    'MQAvailabilityZone', {
        '__string': Optional[str],
    }
)


MQBrokerInstanceOption = TypedDict(
    'MQBrokerInstanceOption', {
        '__listOfAvailabilityZone': Optional[List[MQAvailabilityZone]],
        'EngineType': Optional[str],
        '__string': Optional[str],
        '__listOf__string': Optional[List[str]],
    }
)


MQDescribeBrokerInstanceOptionsResponse = TypedDict(
    'MQDescribeBrokerInstanceOptionsResponse', {
        '__listOfBrokerInstanceOption': Optional[List[MQBrokerInstanceOption]],
        '__integerMin5Max100': Optional[int],
        '__string': Optional[str],
    }
)


MQDescribeConfigurationResponse = TypedDict(
    'MQDescribeConfigurationResponse', {
        '__string': Optional[str],
        '__timestampIso8601': Optional[datetime.datetime],
        '__string': Optional[str],
        'EngineType': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'ConfigurationRevision': Optional[MQConfigurationRevision],
        '__string': Optional[str],
        '__mapOf__string': Optional[Dict[str, str]],
    }
)


MQDescribeConfigurationRevisionResponse = TypedDict(
    'MQDescribeConfigurationRevisionResponse', {
        '__string': Optional[str],
        '__timestampIso8601': Optional[datetime.datetime],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


MQUserPendingChanges = TypedDict(
    'MQUserPendingChanges', {
        '__boolean': Optional[bool],
        '__listOf__string': Optional[List[str]],
        'ChangeType': Optional[str],
    }
)


MQDescribeUserResponse = TypedDict(
    'MQDescribeUserResponse', {
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__listOf__string': Optional[List[str]],
        'UserPendingChanges': Optional[MQUserPendingChanges],
        '__string': Optional[str],
    }
)


MQBrokerSummary = TypedDict(
    'MQBrokerSummary', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'BrokerState': Optional[str],
        '__timestampIso8601': Optional[datetime.datetime],
        'DeploymentMode': Optional[str],
        '__string': Optional[str],
    }
)


MQListBrokersResponse = TypedDict(
    'MQListBrokersResponse', {
        '__listOfBrokerSummary': Optional[List[MQBrokerSummary]],
        '__string': Optional[str],
    }
)


MQListConfigurationRevisionsResponse = TypedDict(
    'MQListConfigurationRevisionsResponse', {
        '__string': Optional[str],
        '__integer': Optional[int],
        '__string': Optional[str],
        '__listOfConfigurationRevision': Optional[List[MQConfigurationRevision]],
    }
)


MQConfiguration = TypedDict(
    'MQConfiguration', {
        '__string': Optional[str],
        '__timestampIso8601': Optional[datetime.datetime],
        '__string': Optional[str],
        'EngineType': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'ConfigurationRevision': Optional[MQConfigurationRevision],
        '__string': Optional[str],
        '__mapOf__string': Optional[Dict[str, str]],
    }
)


MQListConfigurationsResponse = TypedDict(
    'MQListConfigurationsResponse', {
        '__listOfConfiguration': Optional[List[MQConfiguration]],
        '__integer': Optional[int],
        '__string': Optional[str],
    }
)


MQListTagsResponse = TypedDict(
    'MQListTagsResponse', {
        '__mapOf__string': Optional[Dict[str, str]],
    }
)


MQListUsersResponse = TypedDict(
    'MQListUsersResponse', {
        '__string': Optional[str],
        '__integerMin5Max100': Optional[int],
        '__string': Optional[str],
        '__listOfUserSummary': Optional[List[MQUserSummary]],
    }
)


MQRebootBrokerResponse = TypedDict(
    'MQRebootBrokerResponse', {
    }
)


MQUpdateBrokerResponse = TypedDict(
    'MQUpdateBrokerResponse', {
        '__boolean': Optional[bool],
        '__string': Optional[str],
        'ConfigurationId': Optional[MQConfigurationId],
        '__string': Optional[str],
        'Logs': Optional[MQLogs],
    }
)


MQSanitizationWarning = TypedDict(
    'MQSanitizationWarning', {
        '__string': Optional[str],
        '__string': Optional[str],
        'SanitizationWarningReason': Optional[str],
    }
)


MQUpdateConfigurationResponse = TypedDict(
    'MQUpdateConfigurationResponse', {
        '__string': Optional[str],
        '__timestampIso8601': Optional[datetime.datetime],
        '__string': Optional[str],
        'ConfigurationRevision': Optional[MQConfigurationRevision],
        '__string': Optional[str],
        '__listOfSanitizationWarning': Optional[List[MQSanitizationWarning]],
    }
)


MQUpdateUserResponse = TypedDict(
    'MQUpdateUserResponse', {
    }
)


class MTurk(BaseClient):
    def accept_qualification_request(self, *,
        QualificationRequestId: str,
        IntegerValue: int = ...
    ) -> MTurkAcceptQualificationRequestResponse: ...

    def approve_assignment(self, *,
        AssignmentId: str,
        RequesterFeedback: str = ...,
        OverrideRejection: bool = ...
    ) -> MTurkApproveAssignmentResponse: ...

    def associate_qualification_with_worker(self, *,
        QualificationTypeId: str,
        WorkerId: str,
        IntegerValue: int = ...,
        SendNotification: bool = ...
    ) -> MTurkAssociateQualificationWithWorkerResponse: ...

    def create_additional_assignments_for_hit(self, *,
        HITId: str,
        NumberOfAdditionalAssignments: int,
        UniqueRequestToken: str = ...
    ) -> MTurkCreateAdditionalAssignmentsForHITResponse: ...

    def create_hit(self, *,
        LifetimeInSeconds: int,
        AssignmentDurationInSeconds: int,
        Reward: str,
        Title: str,
        Description: str,
        MaxAssignments: int = ...,
        AutoApprovalDelayInSeconds: int = ...,
        Keywords: str = ...,
        Question: str = ...,
        RequesterAnnotation: str = ...,
        QualificationRequirements: List[MTurkQualificationRequirement] = ...,
        UniqueRequestToken: str = ...,
        AssignmentReviewPolicy: MTurkReviewPolicy = ...,
        HITReviewPolicy: MTurkReviewPolicy = ...,
        HITLayoutId: str = ...,
        HITLayoutParameters: List[MTurkHITLayoutParameter] = ...
    ) -> MTurkCreateHITResponse: ...

    def create_hit_type(self, *,
        AssignmentDurationInSeconds: int,
        Reward: str,
        Title: str,
        Description: str,
        AutoApprovalDelayInSeconds: int = ...,
        Keywords: str = ...,
        QualificationRequirements: List[MTurkQualificationRequirement] = ...
    ) -> MTurkCreateHITTypeResponse: ...

    def create_hit_with_hit_type(self, *,
        HITTypeId: str,
        LifetimeInSeconds: int,
        MaxAssignments: int = ...,
        Question: str = ...,
        RequesterAnnotation: str = ...,
        UniqueRequestToken: str = ...,
        AssignmentReviewPolicy: MTurkReviewPolicy = ...,
        HITReviewPolicy: MTurkReviewPolicy = ...,
        HITLayoutId: str = ...,
        HITLayoutParameters: List[MTurkHITLayoutParameter] = ...
    ) -> MTurkCreateHITWithHITTypeResponse: ...

    def create_qualification_type(self, *,
        Name: str,
        Description: str,
        QualificationTypeStatus: str,
        Keywords: str = ...,
        RetryDelayInSeconds: int = ...,
        Test: str = ...,
        AnswerKey: str = ...,
        TestDurationInSeconds: int = ...,
        AutoGranted: bool = ...,
        AutoGrantedValue: int = ...
    ) -> MTurkCreateQualificationTypeResponse: ...

    def create_worker_block(self, *,
        WorkerId: str,
        Reason: str
    ) -> MTurkCreateWorkerBlockResponse: ...

    def delete_hit(self, *,
        HITId: str
    ) -> MTurkDeleteHITResponse: ...

    def delete_qualification_type(self, *,
        QualificationTypeId: str
    ) -> MTurkDeleteQualificationTypeResponse: ...

    def delete_worker_block(self, *,
        WorkerId: str,
        Reason: str = ...
    ) -> MTurkDeleteWorkerBlockResponse: ...

    def disassociate_qualification_from_worker(self, *,
        WorkerId: str,
        QualificationTypeId: str,
        Reason: str = ...
    ) -> MTurkDisassociateQualificationFromWorkerResponse: ...

    def get_account_balance(self) -> MTurkGetAccountBalanceResponse: ...

    def get_assignment(self, *,
        AssignmentId: str
    ) -> MTurkGetAssignmentResponse: ...

    def get_file_upload_url(self, *,
        AssignmentId: str,
        QuestionIdentifier: str
    ) -> MTurkGetFileUploadURLResponse: ...

    def get_hit(self, *,
        HITId: str
    ) -> MTurkGetHITResponse: ...

    def get_qualification_score(self, *,
        QualificationTypeId: str,
        WorkerId: str
    ) -> MTurkGetQualificationScoreResponse: ...

    def get_qualification_type(self, *,
        QualificationTypeId: str
    ) -> MTurkGetQualificationTypeResponse: ...

    def list_assignments_for_hit(self, *,
        HITId: str,
        NextToken: str = ...,
        MaxResults: int = ...,
        AssignmentStatuses: List[str] = ...
    ) -> MTurkListAssignmentsForHITResponse: ...

    def list_bonus_payments(self, *,
        HITId: str = ...,
        AssignmentId: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MTurkListBonusPaymentsResponse: ...

    def list_hits(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MTurkListHITsResponse: ...

    def list_hits_for_qualification_type(self, *,
        QualificationTypeId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MTurkListHITsForQualificationTypeResponse: ...

    def list_qualification_requests(self, *,
        QualificationTypeId: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MTurkListQualificationRequestsResponse: ...

    def list_qualification_types(self, *,
        MustBeRequestable: bool,
        Query: str = ...,
        MustBeOwnedByCaller: bool = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MTurkListQualificationTypesResponse: ...

    def list_review_policy_results_for_hit(self, *,
        HITId: str,
        PolicyLevels: List[str] = ...,
        RetrieveActions: bool = ...,
        RetrieveResults: bool = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MTurkListReviewPolicyResultsForHITResponse: ...

    def list_reviewable_hits(self, *,
        HITTypeId: str = ...,
        Status: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MTurkListReviewableHITsResponse: ...

    def list_worker_blocks(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MTurkListWorkerBlocksResponse: ...

    def list_workers_with_qualification_type(self, *,
        QualificationTypeId: str,
        Status: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MTurkListWorkersWithQualificationTypeResponse: ...

    def notify_workers(self, *,
        Subject: str,
        MessageText: str,
        WorkerIds: List[str]
    ) -> MTurkNotifyWorkersResponse: ...

    def reject_assignment(self, *,
        AssignmentId: str,
        RequesterFeedback: str
    ) -> MTurkRejectAssignmentResponse: ...

    def reject_qualification_request(self, *,
        QualificationRequestId: str,
        Reason: str = ...
    ) -> MTurkRejectQualificationRequestResponse: ...

    def send_bonus(self, *,
        WorkerId: str,
        BonusAmount: str,
        AssignmentId: str,
        Reason: str,
        UniqueRequestToken: str = ...
    ) -> MTurkSendBonusResponse: ...

    def send_test_event_notification(self, *,
        Notification: MTurkNotificationSpecification,
        TestEventType: str
    ) -> MTurkSendTestEventNotificationResponse: ...

    def update_expiration_for_hit(self, *,
        HITId: str,
        ExpireAt: datetime.datetime
    ) -> MTurkUpdateExpirationForHITResponse: ...

    def update_hit_review_status(self, *,
        HITId: str,
        Revert: bool = ...
    ) -> MTurkUpdateHITReviewStatusResponse: ...

    def update_hit_type_of_hit(self, *,
        HITId: str,
        HITTypeId: str
    ) -> MTurkUpdateHITTypeOfHITResponse: ...

    def update_notification_settings(self, *,
        HITTypeId: str,
        Notification: MTurkNotificationSpecification = ...,
        Active: bool = ...
    ) -> MTurkUpdateNotificationSettingsResponse: ...

    def update_qualification_type(self, *,
        QualificationTypeId: str,
        Description: str = ...,
        QualificationTypeStatus: str = ...,
        Test: str = ...,
        AnswerKey: str = ...,
        TestDurationInSeconds: int = ...,
        RetryDelayInSeconds: int = ...,
        AutoGranted: bool = ...,
        AutoGrantedValue: int = ...
    ) -> MTurkUpdateQualificationTypeResponse: ...


MTurkAcceptQualificationRequestResponse = TypedDict(
    'MTurkAcceptQualificationRequestResponse', {
    }
)


MTurkApproveAssignmentResponse = TypedDict(
    'MTurkApproveAssignmentResponse', {
    }
)


MTurkAssociateQualificationWithWorkerResponse = TypedDict(
    'MTurkAssociateQualificationWithWorkerResponse', {
    }
)


MTurkCreateAdditionalAssignmentsForHITResponse = TypedDict(
    'MTurkCreateAdditionalAssignmentsForHITResponse', {
    }
)


MTurkLocale = TypedDict(
    'MTurkLocale', {
        'CountryParameters': str,
        'CountryParameters': Optional[str],
    }
)


MTurkQualificationRequirement = TypedDict(
    'MTurkQualificationRequirement', {
        'String': str,
        'Comparator': str,
        'IntegerList': Optional[List[int]],
        'LocaleList': Optional[List[MTurkLocale]],
        'Boolean': Optional[bool],
        'HITAccessActions': Optional[str],
    }
)


MTurkParameterMapEntry = TypedDict(
    'MTurkParameterMapEntry', {
        'String': Optional[str],
        'StringList': Optional[List[str]],
    }
)


MTurkPolicyParameter = TypedDict(
    'MTurkPolicyParameter', {
        'String': Optional[str],
        'StringList': Optional[List[str]],
        'ParameterMapEntryList': Optional[List[MTurkParameterMapEntry]],
    }
)


MTurkReviewPolicy = TypedDict(
    'MTurkReviewPolicy', {
        'String': str,
        'PolicyParameterList': Optional[List[MTurkPolicyParameter]],
    }
)


MTurkHITLayoutParameter = TypedDict(
    'MTurkHITLayoutParameter', {
        'String': str,
        'String': str,
    }
)


MTurkHIT = TypedDict(
    'MTurkHIT', {
        'EntityId': Optional[str],
        'EntityId': Optional[str],
        'EntityId': Optional[str],
        'EntityId': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'HITStatus': Optional[str],
        'Integer': Optional[int],
        'CurrencyAmount': Optional[str],
        'Long': Optional[int],
        'Timestamp': Optional[datetime.datetime],
        'Long': Optional[int],
        'String': Optional[str],
        'QualificationRequirementList': Optional[List[MTurkQualificationRequirement]],
        'HITReviewStatus': Optional[str],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
    }
)


MTurkCreateHITResponse = TypedDict(
    'MTurkCreateHITResponse', {
        'HIT': Optional[MTurkHIT],
    }
)


MTurkCreateHITTypeResponse = TypedDict(
    'MTurkCreateHITTypeResponse', {
        'EntityId': Optional[str],
    }
)


MTurkCreateHITWithHITTypeResponse = TypedDict(
    'MTurkCreateHITWithHITTypeResponse', {
        'HIT': Optional[MTurkHIT],
    }
)


MTurkQualificationType = TypedDict(
    'MTurkQualificationType', {
        'EntityId': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'QualificationTypeStatus': Optional[str],
        'String': Optional[str],
        'Long': Optional[int],
        'String': Optional[str],
        'Long': Optional[int],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Integer': Optional[int],
    }
)


MTurkCreateQualificationTypeResponse = TypedDict(
    'MTurkCreateQualificationTypeResponse', {
        'QualificationType': Optional[MTurkQualificationType],
    }
)


MTurkCreateWorkerBlockResponse = TypedDict(
    'MTurkCreateWorkerBlockResponse', {
    }
)


MTurkDeleteHITResponse = TypedDict(
    'MTurkDeleteHITResponse', {
    }
)


MTurkDeleteQualificationTypeResponse = TypedDict(
    'MTurkDeleteQualificationTypeResponse', {
    }
)


MTurkDeleteWorkerBlockResponse = TypedDict(
    'MTurkDeleteWorkerBlockResponse', {
    }
)


MTurkDisassociateQualificationFromWorkerResponse = TypedDict(
    'MTurkDisassociateQualificationFromWorkerResponse', {
    }
)


MTurkGetAccountBalanceResponse = TypedDict(
    'MTurkGetAccountBalanceResponse', {
        'CurrencyAmount': Optional[str],
        'CurrencyAmount': Optional[str],
    }
)


MTurkAssignment = TypedDict(
    'MTurkAssignment', {
        'EntityId': Optional[str],
        'CustomerId': Optional[str],
        'EntityId': Optional[str],
        'AssignmentStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
    }
)


MTurkGetAssignmentResponse = TypedDict(
    'MTurkGetAssignmentResponse', {
        'Assignment': Optional[MTurkAssignment],
        'HIT': Optional[MTurkHIT],
    }
)


MTurkGetFileUploadURLResponse = TypedDict(
    'MTurkGetFileUploadURLResponse', {
        'String': Optional[str],
    }
)


MTurkGetHITResponse = TypedDict(
    'MTurkGetHITResponse', {
        'HIT': Optional[MTurkHIT],
    }
)


MTurkQualification = TypedDict(
    'MTurkQualification', {
        'EntityId': Optional[str],
        'CustomerId': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Integer': Optional[int],
        'Locale': Optional[MTurkLocale],
        'QualificationStatus': Optional[str],
    }
)


MTurkGetQualificationScoreResponse = TypedDict(
    'MTurkGetQualificationScoreResponse', {
        'Qualification': Optional[MTurkQualification],
    }
)


MTurkGetQualificationTypeResponse = TypedDict(
    'MTurkGetQualificationTypeResponse', {
        'QualificationType': Optional[MTurkQualificationType],
    }
)


MTurkListAssignmentsForHITResponse = TypedDict(
    'MTurkListAssignmentsForHITResponse', {
        'PaginationToken': Optional[str],
        'Integer': Optional[int],
        'AssignmentList': Optional[List[MTurkAssignment]],
    }
)


MTurkBonusPayment = TypedDict(
    'MTurkBonusPayment', {
        'CustomerId': Optional[str],
        'CurrencyAmount': Optional[str],
        'EntityId': Optional[str],
        'String': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


MTurkListBonusPaymentsResponse = TypedDict(
    'MTurkListBonusPaymentsResponse', {
        'Integer': Optional[int],
        'PaginationToken': Optional[str],
        'BonusPaymentList': Optional[List[MTurkBonusPayment]],
    }
)


MTurkListHITsResponse = TypedDict(
    'MTurkListHITsResponse', {
        'PaginationToken': Optional[str],
        'Integer': Optional[int],
        'HITList': Optional[List[MTurkHIT]],
    }
)


MTurkListHITsForQualificationTypeResponse = TypedDict(
    'MTurkListHITsForQualificationTypeResponse', {
        'PaginationToken': Optional[str],
        'Integer': Optional[int],
        'HITList': Optional[List[MTurkHIT]],
    }
)


MTurkQualificationRequest = TypedDict(
    'MTurkQualificationRequest', {
        'String': Optional[str],
        'EntityId': Optional[str],
        'CustomerId': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


MTurkListQualificationRequestsResponse = TypedDict(
    'MTurkListQualificationRequestsResponse', {
        'Integer': Optional[int],
        'PaginationToken': Optional[str],
        'QualificationRequestList': Optional[List[MTurkQualificationRequest]],
    }
)


MTurkListQualificationTypesResponse = TypedDict(
    'MTurkListQualificationTypesResponse', {
        'Integer': Optional[int],
        'PaginationToken': Optional[str],
        'QualificationTypeList': Optional[List[MTurkQualificationType]],
    }
)


MTurkReviewResultDetail = TypedDict(
    'MTurkReviewResultDetail', {
        'EntityId': Optional[str],
        'EntityId': Optional[str],
        'String': Optional[str],
        'EntityId': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


MTurkReviewActionDetail = TypedDict(
    'MTurkReviewActionDetail', {
        'EntityId': Optional[str],
        'String': Optional[str],
        'EntityId': Optional[str],
        'String': Optional[str],
        'ReviewActionStatus': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
    }
)


MTurkReviewReport = TypedDict(
    'MTurkReviewReport', {
        'ReviewResultDetailList': Optional[List[MTurkReviewResultDetail]],
        'ReviewActionDetailList': Optional[List[MTurkReviewActionDetail]],
    }
)


MTurkListReviewPolicyResultsForHITResponse = TypedDict(
    'MTurkListReviewPolicyResultsForHITResponse', {
        'EntityId': Optional[str],
        'ReviewPolicy': Optional[MTurkReviewPolicy],
        'ReviewPolicy': Optional[MTurkReviewPolicy],
        'ReviewReport': Optional[MTurkReviewReport],
        'ReviewReport': Optional[MTurkReviewReport],
        'PaginationToken': Optional[str],
    }
)


MTurkListReviewableHITsResponse = TypedDict(
    'MTurkListReviewableHITsResponse', {
        'PaginationToken': Optional[str],
        'Integer': Optional[int],
        'HITList': Optional[List[MTurkHIT]],
    }
)


MTurkWorkerBlock = TypedDict(
    'MTurkWorkerBlock', {
        'CustomerId': Optional[str],
        'String': Optional[str],
    }
)


MTurkListWorkerBlocksResponse = TypedDict(
    'MTurkListWorkerBlocksResponse', {
        'PaginationToken': Optional[str],
        'Integer': Optional[int],
        'WorkerBlockList': Optional[List[MTurkWorkerBlock]],
    }
)


MTurkListWorkersWithQualificationTypeResponse = TypedDict(
    'MTurkListWorkersWithQualificationTypeResponse', {
        'PaginationToken': Optional[str],
        'Integer': Optional[int],
        'QualificationList': Optional[List[MTurkQualification]],
    }
)


MTurkNotifyWorkersFailureStatus = TypedDict(
    'MTurkNotifyWorkersFailureStatus', {
        'NotifyWorkersFailureCode': Optional[str],
        'String': Optional[str],
        'CustomerId': Optional[str],
    }
)


MTurkNotifyWorkersResponse = TypedDict(
    'MTurkNotifyWorkersResponse', {
        'NotifyWorkersFailureStatusList': Optional[List[MTurkNotifyWorkersFailureStatus]],
    }
)


MTurkRejectAssignmentResponse = TypedDict(
    'MTurkRejectAssignmentResponse', {
    }
)


MTurkRejectQualificationRequestResponse = TypedDict(
    'MTurkRejectQualificationRequestResponse', {
    }
)


MTurkSendBonusResponse = TypedDict(
    'MTurkSendBonusResponse', {
    }
)


MTurkNotificationSpecification = TypedDict(
    'MTurkNotificationSpecification', {
        'String': str,
        'NotificationTransport': str,
        'String': str,
        'EventTypeList': List[str],
    }
)


MTurkSendTestEventNotificationResponse = TypedDict(
    'MTurkSendTestEventNotificationResponse', {
    }
)


MTurkUpdateExpirationForHITResponse = TypedDict(
    'MTurkUpdateExpirationForHITResponse', {
    }
)


MTurkUpdateHITReviewStatusResponse = TypedDict(
    'MTurkUpdateHITReviewStatusResponse', {
    }
)


MTurkUpdateHITTypeOfHITResponse = TypedDict(
    'MTurkUpdateHITTypeOfHITResponse', {
    }
)


MTurkUpdateNotificationSettingsResponse = TypedDict(
    'MTurkUpdateNotificationSettingsResponse', {
    }
)


MTurkUpdateQualificationTypeResponse = TypedDict(
    'MTurkUpdateQualificationTypeResponse', {
        'QualificationType': Optional[MTurkQualificationType],
    }
)


class Neptune(BaseClient):
    def add_role_to_db_cluster(self, *,
        DBClusterIdentifier: str,
        RoleArn: str
    ): ...

    def add_source_identifier_to_subscription(self, *,
        SubscriptionName: str,
        SourceIdentifier: str
    ) -> NeptuneAddSourceIdentifierToSubscriptionResult: ...

    def add_tags_to_resource(self, *,
        ResourceName: str,
        Tags: List[NeptuneTag]
    ): ...

    def apply_pending_maintenance_action(self, *,
        ResourceIdentifier: str,
        ApplyAction: str,
        OptInType: str
    ) -> NeptuneApplyPendingMaintenanceActionResult: ...

    def copy_db_cluster_parameter_group(self, *,
        SourceDBClusterParameterGroupIdentifier: str,
        TargetDBClusterParameterGroupIdentifier: str,
        TargetDBClusterParameterGroupDescription: str,
        Tags: List[NeptuneTag] = ...
    ) -> NeptuneCopyDBClusterParameterGroupResult: ...

    def copy_db_cluster_snapshot(self, *,
        SourceDBClusterSnapshotIdentifier: str,
        TargetDBClusterSnapshotIdentifier: str,
        KmsKeyId: str = ...,
        PreSignedUrl: str = ...,
        CopyTags: bool = ...,
        Tags: List[NeptuneTag] = ...,
        SourceRegion: str = ...
    ) -> NeptuneCopyDBClusterSnapshotResult: ...

    def copy_db_parameter_group(self, *,
        SourceDBParameterGroupIdentifier: str,
        TargetDBParameterGroupIdentifier: str,
        TargetDBParameterGroupDescription: str,
        Tags: List[NeptuneTag] = ...
    ) -> NeptuneCopyDBParameterGroupResult: ...

    def create_db_cluster(self, *,
        DBClusterIdentifier: str,
        Engine: str,
        AvailabilityZones: List[str] = ...,
        BackupRetentionPeriod: int = ...,
        CharacterSetName: str = ...,
        DatabaseName: str = ...,
        DBClusterParameterGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        DBSubnetGroupName: str = ...,
        EngineVersion: str = ...,
        Port: int = ...,
        MasterUsername: str = ...,
        MasterUserPassword: str = ...,
        OptionGroupName: str = ...,
        PreferredBackupWindow: str = ...,
        PreferredMaintenanceWindow: str = ...,
        ReplicationSourceIdentifier: str = ...,
        Tags: List[NeptuneTag] = ...,
        StorageEncrypted: bool = ...,
        KmsKeyId: str = ...,
        PreSignedUrl: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        SourceRegion: str = ...
    ) -> NeptuneCreateDBClusterResult: ...

    def create_db_cluster_parameter_group(self, *,
        DBClusterParameterGroupName: str,
        DBParameterGroupFamily: str,
        Description: str,
        Tags: List[NeptuneTag] = ...
    ) -> NeptuneCreateDBClusterParameterGroupResult: ...

    def create_db_cluster_snapshot(self, *,
        DBClusterSnapshotIdentifier: str,
        DBClusterIdentifier: str,
        Tags: List[NeptuneTag] = ...
    ) -> NeptuneCreateDBClusterSnapshotResult: ...

    def create_db_instance(self, *,
        DBInstanceIdentifier: str,
        DBInstanceClass: str,
        Engine: str,
        DBName: str = ...,
        AllocatedStorage: int = ...,
        MasterUsername: str = ...,
        MasterUserPassword: str = ...,
        DBSecurityGroups: List[str] = ...,
        VpcSecurityGroupIds: List[str] = ...,
        AvailabilityZone: str = ...,
        DBSubnetGroupName: str = ...,
        PreferredMaintenanceWindow: str = ...,
        DBParameterGroupName: str = ...,
        BackupRetentionPeriod: int = ...,
        PreferredBackupWindow: str = ...,
        Port: int = ...,
        MultiAZ: bool = ...,
        EngineVersion: str = ...,
        AutoMinorVersionUpgrade: bool = ...,
        LicenseModel: str = ...,
        Iops: int = ...,
        OptionGroupName: str = ...,
        CharacterSetName: str = ...,
        PubliclyAccessible: bool = ...,
        Tags: List[NeptuneTag] = ...,
        DBClusterIdentifier: str = ...,
        StorageType: str = ...,
        TdeCredentialArn: str = ...,
        TdeCredentialPassword: str = ...,
        StorageEncrypted: bool = ...,
        KmsKeyId: str = ...,
        Domain: str = ...,
        CopyTagsToSnapshot: bool = ...,
        MonitoringInterval: int = ...,
        MonitoringRoleArn: str = ...,
        DomainIAMRoleName: str = ...,
        PromotionTier: int = ...,
        Timezone: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        EnablePerformanceInsights: bool = ...,
        PerformanceInsightsKMSKeyId: str = ...,
        EnableCloudwatchLogsExports: List[str] = ...
    ) -> NeptuneCreateDBInstanceResult: ...

    def create_db_parameter_group(self, *,
        DBParameterGroupName: str,
        DBParameterGroupFamily: str,
        Description: str,
        Tags: List[NeptuneTag] = ...
    ) -> NeptuneCreateDBParameterGroupResult: ...

    def create_db_subnet_group(self, *,
        DBSubnetGroupName: str,
        DBSubnetGroupDescription: str,
        SubnetIds: List[str],
        Tags: List[NeptuneTag] = ...
    ) -> NeptuneCreateDBSubnetGroupResult: ...

    def create_event_subscription(self, *,
        SubscriptionName: str,
        SnsTopicArn: str,
        SourceType: str = ...,
        EventCategories: List[str] = ...,
        SourceIds: List[str] = ...,
        Enabled: bool = ...,
        Tags: List[NeptuneTag] = ...
    ) -> NeptuneCreateEventSubscriptionResult: ...

    def delete_db_cluster(self, *,
        DBClusterIdentifier: str,
        SkipFinalSnapshot: bool = ...,
        FinalDBSnapshotIdentifier: str = ...
    ) -> NeptuneDeleteDBClusterResult: ...

    def delete_db_cluster_parameter_group(self, *,
        DBClusterParameterGroupName: str
    ): ...

    def delete_db_cluster_snapshot(self, *,
        DBClusterSnapshotIdentifier: str
    ) -> NeptuneDeleteDBClusterSnapshotResult: ...

    def delete_db_instance(self, *,
        DBInstanceIdentifier: str,
        SkipFinalSnapshot: bool = ...,
        FinalDBSnapshotIdentifier: str = ...
    ) -> NeptuneDeleteDBInstanceResult: ...

    def delete_db_parameter_group(self, *,
        DBParameterGroupName: str
    ): ...

    def delete_db_subnet_group(self, *,
        DBSubnetGroupName: str
    ): ...

    def delete_event_subscription(self, *,
        SubscriptionName: str
    ) -> NeptuneDeleteEventSubscriptionResult: ...

    def describe_db_cluster_parameter_groups(self, *,
        DBClusterParameterGroupName: str = ...,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> NeptuneDBClusterParameterGroupsMessage: ...

    def describe_db_cluster_parameters(self, *,
        DBClusterParameterGroupName: str,
        Source: str = ...,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> NeptuneDBClusterParameterGroupDetails: ...

    def describe_db_cluster_snapshot_attributes(self, *,
        DBClusterSnapshotIdentifier: str
    ) -> NeptuneDescribeDBClusterSnapshotAttributesResult: ...

    def describe_db_cluster_snapshots(self, *,
        DBClusterIdentifier: str = ...,
        DBClusterSnapshotIdentifier: str = ...,
        SnapshotType: str = ...,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        IncludeShared: bool = ...,
        IncludePublic: bool = ...
    ) -> NeptuneDBClusterSnapshotMessage: ...

    def describe_db_clusters(self, *,
        DBClusterIdentifier: str = ...,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> NeptuneDBClusterMessage: ...

    def describe_db_engine_versions(self, *,
        Engine: str = ...,
        EngineVersion: str = ...,
        DBParameterGroupFamily: str = ...,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        DefaultOnly: bool = ...,
        ListSupportedCharacterSets: bool = ...,
        ListSupportedTimezones: bool = ...
    ) -> NeptuneDBEngineVersionMessage: ...

    def describe_db_instances(self, *,
        DBInstanceIdentifier: str = ...,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> NeptuneDBInstanceMessage: ...

    def describe_db_parameter_groups(self, *,
        DBParameterGroupName: str = ...,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> NeptuneDBParameterGroupsMessage: ...

    def describe_db_parameters(self, *,
        DBParameterGroupName: str,
        Source: str = ...,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> NeptuneDBParameterGroupDetails: ...

    def describe_db_subnet_groups(self, *,
        DBSubnetGroupName: str = ...,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> NeptuneDBSubnetGroupMessage: ...

    def describe_engine_default_cluster_parameters(self, *,
        DBParameterGroupFamily: str,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> NeptuneDescribeEngineDefaultClusterParametersResult: ...

    def describe_engine_default_parameters(self, *,
        DBParameterGroupFamily: str,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> NeptuneDescribeEngineDefaultParametersResult: ...

    def describe_event_categories(self, *,
        SourceType: str = ...,
        Filters: List[NeptuneFilter] = ...
    ) -> NeptuneEventCategoriesMessage: ...

    def describe_event_subscriptions(self, *,
        SubscriptionName: str = ...,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> NeptuneEventSubscriptionsMessage: ...

    def describe_events(self, *,
        SourceIdentifier: str = ...,
        SourceType: str = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        Duration: int = ...,
        EventCategories: List[str] = ...,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> NeptuneEventsMessage: ...

    def describe_orderable_db_instance_options(self, *,
        Engine: str,
        EngineVersion: str = ...,
        DBInstanceClass: str = ...,
        LicenseModel: str = ...,
        Vpc: bool = ...,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> NeptuneOrderableDBInstanceOptionsMessage: ...

    def describe_pending_maintenance_actions(self, *,
        ResourceIdentifier: str = ...,
        Filters: List[NeptuneFilter] = ...,
        Marker: str = ...,
        MaxRecords: int = ...
    ) -> NeptunePendingMaintenanceActionsMessage: ...

    def describe_valid_db_instance_modifications(self, *,
        DBInstanceIdentifier: str
    ) -> NeptuneDescribeValidDBInstanceModificationsResult: ...

    def failover_db_cluster(self, *,
        DBClusterIdentifier: str = ...,
        TargetDBInstanceIdentifier: str = ...
    ) -> NeptuneFailoverDBClusterResult: ...

    def list_tags_for_resource(self, *,
        ResourceName: str,
        Filters: List[NeptuneFilter] = ...
    ) -> NeptuneTagListMessage: ...

    def modify_db_cluster(self, *,
        DBClusterIdentifier: str,
        NewDBClusterIdentifier: str = ...,
        ApplyImmediately: bool = ...,
        BackupRetentionPeriod: int = ...,
        DBClusterParameterGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        Port: int = ...,
        MasterUserPassword: str = ...,
        OptionGroupName: str = ...,
        PreferredBackupWindow: str = ...,
        PreferredMaintenanceWindow: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        EngineVersion: str = ...
    ) -> NeptuneModifyDBClusterResult: ...

    def modify_db_cluster_parameter_group(self, *,
        DBClusterParameterGroupName: str,
        Parameters: List[NeptuneParameter]
    ) -> NeptuneDBClusterParameterGroupNameMessage: ...

    def modify_db_cluster_snapshot_attribute(self, *,
        DBClusterSnapshotIdentifier: str,
        AttributeName: str,
        ValuesToAdd: List[str] = ...,
        ValuesToRemove: List[str] = ...
    ) -> NeptuneModifyDBClusterSnapshotAttributeResult: ...

    def modify_db_instance(self, *,
        DBInstanceIdentifier: str,
        AllocatedStorage: int = ...,
        DBInstanceClass: str = ...,
        DBSubnetGroupName: str = ...,
        DBSecurityGroups: List[str] = ...,
        VpcSecurityGroupIds: List[str] = ...,
        ApplyImmediately: bool = ...,
        MasterUserPassword: str = ...,
        DBParameterGroupName: str = ...,
        BackupRetentionPeriod: int = ...,
        PreferredBackupWindow: str = ...,
        PreferredMaintenanceWindow: str = ...,
        MultiAZ: bool = ...,
        EngineVersion: str = ...,
        AllowMajorVersionUpgrade: bool = ...,
        AutoMinorVersionUpgrade: bool = ...,
        LicenseModel: str = ...,
        Iops: int = ...,
        OptionGroupName: str = ...,
        NewDBInstanceIdentifier: str = ...,
        StorageType: str = ...,
        TdeCredentialArn: str = ...,
        TdeCredentialPassword: str = ...,
        CACertificateIdentifier: str = ...,
        Domain: str = ...,
        CopyTagsToSnapshot: bool = ...,
        MonitoringInterval: int = ...,
        DBPortNumber: int = ...,
        PubliclyAccessible: bool = ...,
        MonitoringRoleArn: str = ...,
        DomainIAMRoleName: str = ...,
        PromotionTier: int = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        EnablePerformanceInsights: bool = ...,
        PerformanceInsightsKMSKeyId: str = ...,
        CloudwatchLogsExportConfiguration: NeptuneCloudwatchLogsExportConfiguration = ...
    ) -> NeptuneModifyDBInstanceResult: ...

    def modify_db_parameter_group(self, *,
        DBParameterGroupName: str,
        Parameters: List[NeptuneParameter]
    ) -> NeptuneDBParameterGroupNameMessage: ...

    def modify_db_subnet_group(self, *,
        DBSubnetGroupName: str,
        SubnetIds: List[str],
        DBSubnetGroupDescription: str = ...
    ) -> NeptuneModifyDBSubnetGroupResult: ...

    def modify_event_subscription(self, *,
        SubscriptionName: str,
        SnsTopicArn: str = ...,
        SourceType: str = ...,
        EventCategories: List[str] = ...,
        Enabled: bool = ...
    ) -> NeptuneModifyEventSubscriptionResult: ...

    def promote_read_replica_db_cluster(self, *,
        DBClusterIdentifier: str
    ) -> NeptunePromoteReadReplicaDBClusterResult: ...

    def reboot_db_instance(self, *,
        DBInstanceIdentifier: str,
        ForceFailover: bool = ...
    ) -> NeptuneRebootDBInstanceResult: ...

    def remove_role_from_db_cluster(self, *,
        DBClusterIdentifier: str,
        RoleArn: str
    ): ...

    def remove_source_identifier_from_subscription(self, *,
        SubscriptionName: str,
        SourceIdentifier: str
    ) -> NeptuneRemoveSourceIdentifierFromSubscriptionResult: ...

    def remove_tags_from_resource(self, *,
        ResourceName: str,
        TagKeys: List[str]
    ): ...

    def reset_db_cluster_parameter_group(self, *,
        DBClusterParameterGroupName: str,
        ResetAllParameters: bool = ...,
        Parameters: List[NeptuneParameter] = ...
    ) -> NeptuneDBClusterParameterGroupNameMessage: ...

    def reset_db_parameter_group(self, *,
        DBParameterGroupName: str,
        ResetAllParameters: bool = ...,
        Parameters: List[NeptuneParameter] = ...
    ) -> NeptuneDBParameterGroupNameMessage: ...

    def restore_db_cluster_from_snapshot(self, *,
        DBClusterIdentifier: str,
        SnapshotIdentifier: str,
        Engine: str,
        AvailabilityZones: List[str] = ...,
        EngineVersion: str = ...,
        Port: int = ...,
        DBSubnetGroupName: str = ...,
        DatabaseName: str = ...,
        OptionGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        Tags: List[NeptuneTag] = ...,
        KmsKeyId: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        DBClusterParameterGroupName: str = ...
    ) -> NeptuneRestoreDBClusterFromSnapshotResult: ...

    def restore_db_cluster_to_point_in_time(self, *,
        DBClusterIdentifier: str,
        SourceDBClusterIdentifier: str,
        RestoreType: str = ...,
        RestoreToTime: datetime.datetime = ...,
        UseLatestRestorableTime: bool = ...,
        Port: int = ...,
        DBSubnetGroupName: str = ...,
        OptionGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        Tags: List[NeptuneTag] = ...,
        KmsKeyId: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        DBClusterParameterGroupName: str = ...
    ) -> NeptuneRestoreDBClusterToPointInTimeResult: ...


NeptuneEventSubscription = TypedDict(
    'NeptuneEventSubscription', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'SourceIdsList': Optional[List[str]],
        'EventCategoriesList': Optional[List[str]],
        'Boolean': Optional[bool],
        'String': Optional[str],
    }
)


NeptuneAddSourceIdentifierToSubscriptionResult = TypedDict(
    'NeptuneAddSourceIdentifierToSubscriptionResult', {
        'EventSubscription': Optional[NeptuneEventSubscription],
    }
)


NeptuneTag = TypedDict(
    'NeptuneTag', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


NeptunePendingMaintenanceAction = TypedDict(
    'NeptunePendingMaintenanceAction', {
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
    }
)


NeptuneResourcePendingMaintenanceActions = TypedDict(
    'NeptuneResourcePendingMaintenanceActions', {
        'String': Optional[str],
        'PendingMaintenanceActionDetails': Optional[List[NeptunePendingMaintenanceAction]],
    }
)


NeptuneApplyPendingMaintenanceActionResult = TypedDict(
    'NeptuneApplyPendingMaintenanceActionResult', {
        'ResourcePendingMaintenanceActions': Optional[NeptuneResourcePendingMaintenanceActions],
    }
)


NeptuneDBClusterParameterGroup = TypedDict(
    'NeptuneDBClusterParameterGroup', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


NeptuneCopyDBClusterParameterGroupResult = TypedDict(
    'NeptuneCopyDBClusterParameterGroupResult', {
        'DBClusterParameterGroup': Optional[NeptuneDBClusterParameterGroup],
    }
)


NeptuneDBClusterSnapshot = TypedDict(
    'NeptuneDBClusterSnapshot', {
        'AvailabilityZones': Optional[List[str]],
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
    }
)


NeptuneCopyDBClusterSnapshotResult = TypedDict(
    'NeptuneCopyDBClusterSnapshotResult', {
        'DBClusterSnapshot': Optional[NeptuneDBClusterSnapshot],
    }
)


NeptuneDBParameterGroup = TypedDict(
    'NeptuneDBParameterGroup', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


NeptuneCopyDBParameterGroupResult = TypedDict(
    'NeptuneCopyDBParameterGroupResult', {
        'DBParameterGroup': Optional[NeptuneDBParameterGroup],
    }
)


NeptuneDBClusterOptionGroupStatus = TypedDict(
    'NeptuneDBClusterOptionGroupStatus', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


NeptuneDBClusterMember = TypedDict(
    'NeptuneDBClusterMember', {
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
    }
)


NeptuneVpcSecurityGroupMembership = TypedDict(
    'NeptuneVpcSecurityGroupMembership', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


NeptuneDBClusterRole = TypedDict(
    'NeptuneDBClusterRole', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


NeptuneDBCluster = TypedDict(
    'NeptuneDBCluster', {
        'IntegerOptional': Optional[int],
        'AvailabilityZones': Optional[List[str]],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'DBClusterOptionGroupMemberships': Optional[List[NeptuneDBClusterOptionGroupStatus]],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'ReadReplicaIdentifierList': Optional[List[str]],
        'DBClusterMemberList': Optional[List[NeptuneDBClusterMember]],
        'VpcSecurityGroupMembershipList': Optional[List[NeptuneVpcSecurityGroupMembership]],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DBClusterRoles': Optional[List[NeptuneDBClusterRole]],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
    }
)


NeptuneCreateDBClusterResult = TypedDict(
    'NeptuneCreateDBClusterResult', {
        'DBCluster': Optional[NeptuneDBCluster],
    }
)


NeptuneCreateDBClusterParameterGroupResult = TypedDict(
    'NeptuneCreateDBClusterParameterGroupResult', {
        'DBClusterParameterGroup': Optional[NeptuneDBClusterParameterGroup],
    }
)


NeptuneCreateDBClusterSnapshotResult = TypedDict(
    'NeptuneCreateDBClusterSnapshotResult', {
        'DBClusterSnapshot': Optional[NeptuneDBClusterSnapshot],
    }
)


NeptuneEndpoint = TypedDict(
    'NeptuneEndpoint', {
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
    }
)


NeptuneDBSecurityGroupMembership = TypedDict(
    'NeptuneDBSecurityGroupMembership', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


NeptuneDBParameterGroupStatus = TypedDict(
    'NeptuneDBParameterGroupStatus', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


NeptuneAvailabilityZone = TypedDict(
    'NeptuneAvailabilityZone', {
        'String': Optional[str],
    }
)


NeptuneSubnet = TypedDict(
    'NeptuneSubnet', {
        'String': Optional[str],
        'AvailabilityZone': Optional[NeptuneAvailabilityZone],
        'String': Optional[str],
    }
)


NeptuneDBSubnetGroup = TypedDict(
    'NeptuneDBSubnetGroup', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'SubnetList': Optional[List[NeptuneSubnet]],
        'String': Optional[str],
    }
)


NeptunePendingCloudwatchLogsExports = TypedDict(
    'NeptunePendingCloudwatchLogsExports', {
        'LogTypeList': Optional[List[str]],
        'LogTypeList': Optional[List[str]],
    }
)


NeptunePendingModifiedValues = TypedDict(
    'NeptunePendingModifiedValues', {
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'IntegerOptional': Optional[int],
        'BooleanOptional': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'PendingCloudwatchLogsExports': Optional[NeptunePendingCloudwatchLogsExports],
    }
)


NeptuneOptionGroupMembership = TypedDict(
    'NeptuneOptionGroupMembership', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


NeptuneDBInstanceStatusInfo = TypedDict(
    'NeptuneDBInstanceStatusInfo', {
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
    }
)


NeptuneDomainMembership = TypedDict(
    'NeptuneDomainMembership', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


NeptuneDBInstance = TypedDict(
    'NeptuneDBInstance', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Endpoint': Optional[NeptuneEndpoint],
        'Integer': Optional[int],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'Integer': Optional[int],
        'DBSecurityGroupMembershipList': Optional[List[NeptuneDBSecurityGroupMembership]],
        'VpcSecurityGroupMembershipList': Optional[List[NeptuneVpcSecurityGroupMembership]],
        'DBParameterGroupStatusList': Optional[List[NeptuneDBParameterGroupStatus]],
        'String': Optional[str],
        'DBSubnetGroup': Optional[NeptuneDBSubnetGroup],
        'String': Optional[str],
        'PendingModifiedValues': Optional[NeptunePendingModifiedValues],
        'TStamp': Optional[datetime.datetime],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'ReadReplicaDBInstanceIdentifierList': Optional[List[str]],
        'ReadReplicaDBClusterIdentifierList': Optional[List[str]],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'OptionGroupMembershipList': Optional[List[NeptuneOptionGroupMembership]],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'DBInstanceStatusInfoList': Optional[List[NeptuneDBInstanceStatusInfo]],
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DomainMembershipList': Optional[List[NeptuneDomainMembership]],
        'Boolean': Optional[bool],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'BooleanOptional': Optional[bool],
        'String': Optional[str],
        'LogTypeList': Optional[List[str]],
    }
)


NeptuneCreateDBInstanceResult = TypedDict(
    'NeptuneCreateDBInstanceResult', {
        'DBInstance': Optional[NeptuneDBInstance],
    }
)


NeptuneCreateDBParameterGroupResult = TypedDict(
    'NeptuneCreateDBParameterGroupResult', {
        'DBParameterGroup': Optional[NeptuneDBParameterGroup],
    }
)


NeptuneCreateDBSubnetGroupResult = TypedDict(
    'NeptuneCreateDBSubnetGroupResult', {
        'DBSubnetGroup': Optional[NeptuneDBSubnetGroup],
    }
)


NeptuneCreateEventSubscriptionResult = TypedDict(
    'NeptuneCreateEventSubscriptionResult', {
        'EventSubscription': Optional[NeptuneEventSubscription],
    }
)


NeptuneDeleteDBClusterResult = TypedDict(
    'NeptuneDeleteDBClusterResult', {
        'DBCluster': Optional[NeptuneDBCluster],
    }
)


NeptuneDeleteDBClusterSnapshotResult = TypedDict(
    'NeptuneDeleteDBClusterSnapshotResult', {
        'DBClusterSnapshot': Optional[NeptuneDBClusterSnapshot],
    }
)


NeptuneDeleteDBInstanceResult = TypedDict(
    'NeptuneDeleteDBInstanceResult', {
        'DBInstance': Optional[NeptuneDBInstance],
    }
)


NeptuneDeleteEventSubscriptionResult = TypedDict(
    'NeptuneDeleteEventSubscriptionResult', {
        'EventSubscription': Optional[NeptuneEventSubscription],
    }
)


NeptuneFilter = TypedDict(
    'NeptuneFilter', {
        'String': str,
        'FilterValueList': List[str],
    }
)


NeptuneDBClusterParameterGroupsMessage = TypedDict(
    'NeptuneDBClusterParameterGroupsMessage', {
        'String': Optional[str],
        'DBClusterParameterGroupList': Optional[List[NeptuneDBClusterParameterGroup]],
    }
)


NeptuneParameter = TypedDict(
    'NeptuneParameter', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'ApplyMethod': Optional[str],
    }
)


NeptuneDBClusterParameterGroupDetails = TypedDict(
    'NeptuneDBClusterParameterGroupDetails', {
        'ParametersList': Optional[List[NeptuneParameter]],
        'String': Optional[str],
    }
)


NeptuneDBClusterSnapshotAttribute = TypedDict(
    'NeptuneDBClusterSnapshotAttribute', {
        'String': Optional[str],
        'AttributeValueList': Optional[List[str]],
    }
)


NeptuneDBClusterSnapshotAttributesResult = TypedDict(
    'NeptuneDBClusterSnapshotAttributesResult', {
        'String': Optional[str],
        'DBClusterSnapshotAttributeList': Optional[List[NeptuneDBClusterSnapshotAttribute]],
    }
)


NeptuneDescribeDBClusterSnapshotAttributesResult = TypedDict(
    'NeptuneDescribeDBClusterSnapshotAttributesResult', {
        'DBClusterSnapshotAttributesResult': Optional[NeptuneDBClusterSnapshotAttributesResult],
    }
)


NeptuneDBClusterSnapshotMessage = TypedDict(
    'NeptuneDBClusterSnapshotMessage', {
        'String': Optional[str],
        'DBClusterSnapshotList': Optional[List[NeptuneDBClusterSnapshot]],
    }
)


NeptuneDBClusterMessage = TypedDict(
    'NeptuneDBClusterMessage', {
        'String': Optional[str],
        'DBClusterList': Optional[List[NeptuneDBCluster]],
    }
)


NeptuneCharacterSet = TypedDict(
    'NeptuneCharacterSet', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


NeptuneUpgradeTarget = TypedDict(
    'NeptuneUpgradeTarget', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
    }
)


NeptuneTimezone = TypedDict(
    'NeptuneTimezone', {
        'String': Optional[str],
    }
)


NeptuneDBEngineVersion = TypedDict(
    'NeptuneDBEngineVersion', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'CharacterSet': Optional[NeptuneCharacterSet],
        'SupportedCharacterSetsList': Optional[List[NeptuneCharacterSet]],
        'ValidUpgradeTargetList': Optional[List[NeptuneUpgradeTarget]],
        'SupportedTimezonesList': Optional[List[NeptuneTimezone]],
        'LogTypeList': Optional[List[str]],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
    }
)


NeptuneDBEngineVersionMessage = TypedDict(
    'NeptuneDBEngineVersionMessage', {
        'String': Optional[str],
        'DBEngineVersionList': Optional[List[NeptuneDBEngineVersion]],
    }
)


NeptuneDBInstanceMessage = TypedDict(
    'NeptuneDBInstanceMessage', {
        'String': Optional[str],
        'DBInstanceList': Optional[List[NeptuneDBInstance]],
    }
)


NeptuneDBParameterGroupsMessage = TypedDict(
    'NeptuneDBParameterGroupsMessage', {
        'String': Optional[str],
        'DBParameterGroupList': Optional[List[NeptuneDBParameterGroup]],
    }
)


NeptuneDBParameterGroupDetails = TypedDict(
    'NeptuneDBParameterGroupDetails', {
        'ParametersList': Optional[List[NeptuneParameter]],
        'String': Optional[str],
    }
)


NeptuneDBSubnetGroupMessage = TypedDict(
    'NeptuneDBSubnetGroupMessage', {
        'String': Optional[str],
        'DBSubnetGroups': Optional[List[NeptuneDBSubnetGroup]],
    }
)


NeptuneEngineDefaults = TypedDict(
    'NeptuneEngineDefaults', {
        'String': Optional[str],
        'String': Optional[str],
        'ParametersList': Optional[List[NeptuneParameter]],
    }
)


NeptuneDescribeEngineDefaultClusterParametersResult = TypedDict(
    'NeptuneDescribeEngineDefaultClusterParametersResult', {
        'EngineDefaults': Optional[NeptuneEngineDefaults],
    }
)


NeptuneDescribeEngineDefaultParametersResult = TypedDict(
    'NeptuneDescribeEngineDefaultParametersResult', {
        'EngineDefaults': Optional[NeptuneEngineDefaults],
    }
)


NeptuneEventCategoriesMap = TypedDict(
    'NeptuneEventCategoriesMap', {
        'String': Optional[str],
        'EventCategoriesList': Optional[List[str]],
    }
)


NeptuneEventCategoriesMessage = TypedDict(
    'NeptuneEventCategoriesMessage', {
        'EventCategoriesMapList': Optional[List[NeptuneEventCategoriesMap]],
    }
)


NeptuneEventSubscriptionsMessage = TypedDict(
    'NeptuneEventSubscriptionsMessage', {
        'String': Optional[str],
        'EventSubscriptionsList': Optional[List[NeptuneEventSubscription]],
    }
)


NeptuneEvent = TypedDict(
    'NeptuneEvent', {
        'String': Optional[str],
        'SourceType': Optional[str],
        'String': Optional[str],
        'EventCategoriesList': Optional[List[str]],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
    }
)


NeptuneEventsMessage = TypedDict(
    'NeptuneEventsMessage', {
        'String': Optional[str],
        'EventList': Optional[List[NeptuneEvent]],
    }
)


NeptuneOrderableDBInstanceOption = TypedDict(
    'NeptuneOrderableDBInstanceOption', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'AvailabilityZoneList': Optional[List[NeptuneAvailabilityZone]],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'IntegerOptional': Optional[int],
        'IntegerOptional': Optional[int],
        'IntegerOptional': Optional[int],
        'IntegerOptional': Optional[int],
        'DoubleOptional': Optional[float],
        'DoubleOptional': Optional[float],
    }
)


NeptuneOrderableDBInstanceOptionsMessage = TypedDict(
    'NeptuneOrderableDBInstanceOptionsMessage', {
        'OrderableDBInstanceOptionsList': Optional[List[NeptuneOrderableDBInstanceOption]],
        'String': Optional[str],
    }
)


NeptunePendingMaintenanceActionsMessage = TypedDict(
    'NeptunePendingMaintenanceActionsMessage', {
        'PendingMaintenanceActions': Optional[List[NeptuneResourcePendingMaintenanceActions]],
        'String': Optional[str],
    }
)


NeptuneRange = TypedDict(
    'NeptuneRange', {
        'Integer': Optional[int],
        'Integer': Optional[int],
        'IntegerOptional': Optional[int],
    }
)


NeptuneDoubleRange = TypedDict(
    'NeptuneDoubleRange', {
        'Double': Optional[float],
        'Double': Optional[float],
    }
)


NeptuneValidStorageOptions = TypedDict(
    'NeptuneValidStorageOptions', {
        'String': Optional[str],
        'RangeList': Optional[List[NeptuneRange]],
        'RangeList': Optional[List[NeptuneRange]],
        'DoubleRangeList': Optional[List[NeptuneDoubleRange]],
    }
)


NeptuneValidDBInstanceModificationsMessage = TypedDict(
    'NeptuneValidDBInstanceModificationsMessage', {
        'ValidStorageOptionsList': Optional[List[NeptuneValidStorageOptions]],
    }
)


NeptuneDescribeValidDBInstanceModificationsResult = TypedDict(
    'NeptuneDescribeValidDBInstanceModificationsResult', {
        'ValidDBInstanceModificationsMessage': Optional[NeptuneValidDBInstanceModificationsMessage],
    }
)


NeptuneFailoverDBClusterResult = TypedDict(
    'NeptuneFailoverDBClusterResult', {
        'DBCluster': Optional[NeptuneDBCluster],
    }
)


NeptuneTagListMessage = TypedDict(
    'NeptuneTagListMessage', {
        'TagList': Optional[List[NeptuneTag]],
    }
)


NeptuneModifyDBClusterResult = TypedDict(
    'NeptuneModifyDBClusterResult', {
        'DBCluster': Optional[NeptuneDBCluster],
    }
)


NeptuneDBClusterParameterGroupNameMessage = TypedDict(
    'NeptuneDBClusterParameterGroupNameMessage', {
        'String': Optional[str],
    }
)


NeptuneModifyDBClusterSnapshotAttributeResult = TypedDict(
    'NeptuneModifyDBClusterSnapshotAttributeResult', {
        'DBClusterSnapshotAttributesResult': Optional[NeptuneDBClusterSnapshotAttributesResult],
    }
)


NeptuneCloudwatchLogsExportConfiguration = TypedDict(
    'NeptuneCloudwatchLogsExportConfiguration', {
        'LogTypeList': Optional[List[str]],
        'LogTypeList': Optional[List[str]],
    }
)


NeptuneModifyDBInstanceResult = TypedDict(
    'NeptuneModifyDBInstanceResult', {
        'DBInstance': Optional[NeptuneDBInstance],
    }
)


NeptuneDBParameterGroupNameMessage = TypedDict(
    'NeptuneDBParameterGroupNameMessage', {
        'String': Optional[str],
    }
)


NeptuneModifyDBSubnetGroupResult = TypedDict(
    'NeptuneModifyDBSubnetGroupResult', {
        'DBSubnetGroup': Optional[NeptuneDBSubnetGroup],
    }
)


NeptuneModifyEventSubscriptionResult = TypedDict(
    'NeptuneModifyEventSubscriptionResult', {
        'EventSubscription': Optional[NeptuneEventSubscription],
    }
)


NeptunePromoteReadReplicaDBClusterResult = TypedDict(
    'NeptunePromoteReadReplicaDBClusterResult', {
        'DBCluster': Optional[NeptuneDBCluster],
    }
)


NeptuneRebootDBInstanceResult = TypedDict(
    'NeptuneRebootDBInstanceResult', {
        'DBInstance': Optional[NeptuneDBInstance],
    }
)


NeptuneRemoveSourceIdentifierFromSubscriptionResult = TypedDict(
    'NeptuneRemoveSourceIdentifierFromSubscriptionResult', {
        'EventSubscription': Optional[NeptuneEventSubscription],
    }
)


NeptuneRestoreDBClusterFromSnapshotResult = TypedDict(
    'NeptuneRestoreDBClusterFromSnapshotResult', {
        'DBCluster': Optional[NeptuneDBCluster],
    }
)


NeptuneRestoreDBClusterToPointInTimeResult = TypedDict(
    'NeptuneRestoreDBClusterToPointInTimeResult', {
        'DBCluster': Optional[NeptuneDBCluster],
    }
)


class OpsWorks(BaseClient):
    def assign_instance(self, *,
        InstanceId: str,
        LayerIds: List[str]
    ): ...

    def assign_volume(self, *,
        VolumeId: str,
        InstanceId: str = ...
    ): ...

    def associate_elastic_ip(self, *,
        ElasticIp: str,
        InstanceId: str = ...
    ): ...

    def attach_elastic_load_balancer(self, *,
        ElasticLoadBalancerName: str,
        LayerId: str
    ): ...

    def clone_stack(self, *,
        SourceStackId: str,
        ServiceRoleArn: str,
        Name: str = ...,
        Region: str = ...,
        VpcId: str = ...,
        Attributes: Dict[str, str] = ...,
        DefaultInstanceProfileArn: str = ...,
        DefaultOs: str = ...,
        HostnameTheme: str = ...,
        DefaultAvailabilityZone: str = ...,
        DefaultSubnetId: str = ...,
        CustomJson: str = ...,
        ConfigurationManager: OpsWorksStackConfigurationManager = ...,
        ChefConfiguration: OpsWorksChefConfiguration = ...,
        UseCustomCookbooks: bool = ...,
        UseOpsworksSecurityGroups: bool = ...,
        CustomCookbooksSource: OpsWorksSource = ...,
        DefaultSshKeyName: str = ...,
        ClonePermissions: bool = ...,
        CloneAppIds: List[str] = ...,
        DefaultRootDeviceType: str = ...,
        AgentVersion: str = ...
    ) -> OpsWorksCloneStackResult: ...

    def create_app(self, *,
        StackId: str,
        Name: str,
        Type: str,
        Shortname: str = ...,
        Description: str = ...,
        DataSources: List[OpsWorksDataSource] = ...,
        AppSource: OpsWorksSource = ...,
        Domains: List[str] = ...,
        EnableSsl: bool = ...,
        SslConfiguration: OpsWorksSslConfiguration = ...,
        Attributes: Dict[str, str] = ...,
        Environment: List[OpsWorksEnvironmentVariable] = ...
    ) -> OpsWorksCreateAppResult: ...

    def create_deployment(self, *,
        StackId: str,
        Command: OpsWorksDeploymentCommand,
        AppId: str = ...,
        InstanceIds: List[str] = ...,
        LayerIds: List[str] = ...,
        Comment: str = ...,
        CustomJson: str = ...
    ) -> OpsWorksCreateDeploymentResult: ...

    def create_instance(self, *,
        StackId: str,
        LayerIds: List[str],
        InstanceType: str,
        AutoScalingType: str = ...,
        Hostname: str = ...,
        Os: str = ...,
        AmiId: str = ...,
        SshKeyName: str = ...,
        AvailabilityZone: str = ...,
        VirtualizationType: str = ...,
        SubnetId: str = ...,
        Architecture: str = ...,
        RootDeviceType: str = ...,
        BlockDeviceMappings: List[OpsWorksBlockDeviceMapping] = ...,
        InstallUpdatesOnBoot: bool = ...,
        EbsOptimized: bool = ...,
        AgentVersion: str = ...,
        Tenancy: str = ...
    ) -> OpsWorksCreateInstanceResult: ...

    def create_layer(self, *,
        StackId: str,
        Type: str,
        Name: str,
        Shortname: str,
        Attributes: Dict[str, str] = ...,
        CloudWatchLogsConfiguration: OpsWorksCloudWatchLogsConfiguration = ...,
        CustomInstanceProfileArn: str = ...,
        CustomJson: str = ...,
        CustomSecurityGroupIds: List[str] = ...,
        Packages: List[str] = ...,
        VolumeConfigurations: List[OpsWorksVolumeConfiguration] = ...,
        EnableAutoHealing: bool = ...,
        AutoAssignElasticIps: bool = ...,
        AutoAssignPublicIps: bool = ...,
        CustomRecipes: OpsWorksRecipes = ...,
        InstallUpdatesOnBoot: bool = ...,
        UseEbsOptimizedInstances: bool = ...,
        LifecycleEventConfiguration: OpsWorksLifecycleEventConfiguration = ...
    ) -> OpsWorksCreateLayerResult: ...

    def create_stack(self, *,
        Name: str,
        Region: str,
        ServiceRoleArn: str,
        DefaultInstanceProfileArn: str,
        VpcId: str = ...,
        Attributes: Dict[str, str] = ...,
        DefaultOs: str = ...,
        HostnameTheme: str = ...,
        DefaultAvailabilityZone: str = ...,
        DefaultSubnetId: str = ...,
        CustomJson: str = ...,
        ConfigurationManager: OpsWorksStackConfigurationManager = ...,
        ChefConfiguration: OpsWorksChefConfiguration = ...,
        UseCustomCookbooks: bool = ...,
        UseOpsworksSecurityGroups: bool = ...,
        CustomCookbooksSource: OpsWorksSource = ...,
        DefaultSshKeyName: str = ...,
        DefaultRootDeviceType: str = ...,
        AgentVersion: str = ...
    ) -> OpsWorksCreateStackResult: ...

    def create_user_profile(self, *,
        IamUserArn: str,
        SshUsername: str = ...,
        SshPublicKey: str = ...,
        AllowSelfManagement: bool = ...
    ) -> OpsWorksCreateUserProfileResult: ...

    def delete_app(self, *,
        AppId: str
    ): ...

    def delete_instance(self, *,
        InstanceId: str,
        DeleteElasticIp: bool = ...,
        DeleteVolumes: bool = ...
    ): ...

    def delete_layer(self, *,
        LayerId: str
    ): ...

    def delete_stack(self, *,
        StackId: str
    ): ...

    def delete_user_profile(self, *,
        IamUserArn: str
    ): ...

    def deregister_ecs_cluster(self, *,
        EcsClusterArn: str
    ): ...

    def deregister_elastic_ip(self, *,
        ElasticIp: str
    ): ...

    def deregister_instance(self, *,
        InstanceId: str
    ): ...

    def deregister_rds_db_instance(self, *,
        RdsDbInstanceArn: str
    ): ...

    def deregister_volume(self, *,
        VolumeId: str
    ): ...

    def describe_agent_versions(self, *,
        StackId: str = ...,
        ConfigurationManager: OpsWorksStackConfigurationManager = ...
    ) -> OpsWorksDescribeAgentVersionsResult: ...

    def describe_apps(self, *,
        StackId: str = ...,
        AppIds: List[str] = ...
    ) -> OpsWorksDescribeAppsResult: ...

    def describe_commands(self, *,
        DeploymentId: str = ...,
        InstanceId: str = ...,
        CommandIds: List[str] = ...
    ) -> OpsWorksDescribeCommandsResult: ...

    def describe_deployments(self, *,
        StackId: str = ...,
        AppId: str = ...,
        DeploymentIds: List[str] = ...
    ) -> OpsWorksDescribeDeploymentsResult: ...

    def describe_ecs_clusters(self, *,
        EcsClusterArns: List[str] = ...,
        StackId: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> OpsWorksDescribeEcsClustersResult: ...

    def describe_elastic_ips(self, *,
        InstanceId: str = ...,
        StackId: str = ...,
        Ips: List[str] = ...
    ) -> OpsWorksDescribeElasticIpsResult: ...

    def describe_elastic_load_balancers(self, *,
        StackId: str = ...,
        LayerIds: List[str] = ...
    ) -> OpsWorksDescribeElasticLoadBalancersResult: ...

    def describe_instances(self, *,
        StackId: str = ...,
        LayerId: str = ...,
        InstanceIds: List[str] = ...
    ) -> OpsWorksDescribeInstancesResult: ...

    def describe_layers(self, *,
        StackId: str = ...,
        LayerIds: List[str] = ...
    ) -> OpsWorksDescribeLayersResult: ...

    def describe_load_based_auto_scaling(self, *,
        LayerIds: List[str]
    ) -> OpsWorksDescribeLoadBasedAutoScalingResult: ...

    def describe_my_user_profile(self) -> OpsWorksDescribeMyUserProfileResult: ...

    def describe_operating_systems(self) -> OpsWorksDescribeOperatingSystemsResponse: ...

    def describe_permissions(self, *,
        IamUserArn: str = ...,
        StackId: str = ...
    ) -> OpsWorksDescribePermissionsResult: ...

    def describe_raid_arrays(self, *,
        InstanceId: str = ...,
        StackId: str = ...,
        RaidArrayIds: List[str] = ...
    ) -> OpsWorksDescribeRaidArraysResult: ...

    def describe_rds_db_instances(self, *,
        StackId: str,
        RdsDbInstanceArns: List[str] = ...
    ) -> OpsWorksDescribeRdsDbInstancesResult: ...

    def describe_service_errors(self, *,
        StackId: str = ...,
        InstanceId: str = ...,
        ServiceErrorIds: List[str] = ...
    ) -> OpsWorksDescribeServiceErrorsResult: ...

    def describe_stack_provisioning_parameters(self, *,
        StackId: str
    ) -> OpsWorksDescribeStackProvisioningParametersResult: ...

    def describe_stack_summary(self, *,
        StackId: str
    ) -> OpsWorksDescribeStackSummaryResult: ...

    def describe_stacks(self, *,
        StackIds: List[str] = ...
    ) -> OpsWorksDescribeStacksResult: ...

    def describe_time_based_auto_scaling(self, *,
        InstanceIds: List[str]
    ) -> OpsWorksDescribeTimeBasedAutoScalingResult: ...

    def describe_user_profiles(self, *,
        IamUserArns: List[str] = ...
    ) -> OpsWorksDescribeUserProfilesResult: ...

    def describe_volumes(self, *,
        InstanceId: str = ...,
        StackId: str = ...,
        RaidArrayId: str = ...,
        VolumeIds: List[str] = ...
    ) -> OpsWorksDescribeVolumesResult: ...

    def detach_elastic_load_balancer(self, *,
        ElasticLoadBalancerName: str,
        LayerId: str
    ): ...

    def disassociate_elastic_ip(self, *,
        ElasticIp: str
    ): ...

    def get_hostname_suggestion(self, *,
        LayerId: str
    ) -> OpsWorksGetHostnameSuggestionResult: ...

    def grant_access(self, *,
        InstanceId: str,
        ValidForInMinutes: int = ...
    ) -> OpsWorksGrantAccessResult: ...

    def list_tags(self, *,
        ResourceArn: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> OpsWorksListTagsResult: ...

    def reboot_instance(self, *,
        InstanceId: str
    ): ...

    def register_ecs_cluster(self, *,
        EcsClusterArn: str,
        StackId: str
    ) -> OpsWorksRegisterEcsClusterResult: ...

    def register_elastic_ip(self, *,
        ElasticIp: str,
        StackId: str
    ) -> OpsWorksRegisterElasticIpResult: ...

    def register_instance(self, *,
        StackId: str,
        Hostname: str = ...,
        PublicIp: str = ...,
        PrivateIp: str = ...,
        RsaPublicKey: str = ...,
        RsaPublicKeyFingerprint: str = ...,
        InstanceIdentity: OpsWorksInstanceIdentity = ...
    ) -> OpsWorksRegisterInstanceResult: ...

    def register_rds_db_instance(self, *,
        StackId: str,
        RdsDbInstanceArn: str,
        DbUser: str,
        DbPassword: str
    ): ...

    def register_volume(self, *,
        StackId: str,
        Ec2VolumeId: str = ...
    ) -> OpsWorksRegisterVolumeResult: ...

    def set_load_based_auto_scaling(self, *,
        LayerId: str,
        Enable: bool = ...,
        UpScaling: OpsWorksAutoScalingThresholds = ...,
        DownScaling: OpsWorksAutoScalingThresholds = ...
    ): ...

    def set_permission(self, *,
        StackId: str,
        IamUserArn: str,
        AllowSsh: bool = ...,
        AllowSudo: bool = ...,
        Level: str = ...
    ): ...

    def set_time_based_auto_scaling(self, *,
        InstanceId: str,
        AutoScalingSchedule: OpsWorksWeeklyAutoScalingSchedule = ...
    ): ...

    def start_instance(self, *,
        InstanceId: str
    ): ...

    def start_stack(self, *,
        StackId: str
    ): ...

    def stop_instance(self, *,
        InstanceId: str,
        Force: bool = ...
    ): ...

    def stop_stack(self, *,
        StackId: str
    ): ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: Dict[str, str]
    ): ...

    def unassign_instance(self, *,
        InstanceId: str
    ): ...

    def unassign_volume(self, *,
        VolumeId: str
    ): ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ): ...

    def update_app(self, *,
        AppId: str,
        Name: str = ...,
        Description: str = ...,
        DataSources: List[OpsWorksDataSource] = ...,
        Type: str = ...,
        AppSource: OpsWorksSource = ...,
        Domains: List[str] = ...,
        EnableSsl: bool = ...,
        SslConfiguration: OpsWorksSslConfiguration = ...,
        Attributes: Dict[str, str] = ...,
        Environment: List[OpsWorksEnvironmentVariable] = ...
    ): ...

    def update_elastic_ip(self, *,
        ElasticIp: str,
        Name: str = ...
    ): ...

    def update_instance(self, *,
        InstanceId: str,
        LayerIds: List[str] = ...,
        InstanceType: str = ...,
        AutoScalingType: str = ...,
        Hostname: str = ...,
        Os: str = ...,
        AmiId: str = ...,
        SshKeyName: str = ...,
        Architecture: str = ...,
        InstallUpdatesOnBoot: bool = ...,
        EbsOptimized: bool = ...,
        AgentVersion: str = ...
    ): ...

    def update_layer(self, *,
        LayerId: str,
        Name: str = ...,
        Shortname: str = ...,
        Attributes: Dict[str, str] = ...,
        CloudWatchLogsConfiguration: OpsWorksCloudWatchLogsConfiguration = ...,
        CustomInstanceProfileArn: str = ...,
        CustomJson: str = ...,
        CustomSecurityGroupIds: List[str] = ...,
        Packages: List[str] = ...,
        VolumeConfigurations: List[OpsWorksVolumeConfiguration] = ...,
        EnableAutoHealing: bool = ...,
        AutoAssignElasticIps: bool = ...,
        AutoAssignPublicIps: bool = ...,
        CustomRecipes: OpsWorksRecipes = ...,
        InstallUpdatesOnBoot: bool = ...,
        UseEbsOptimizedInstances: bool = ...,
        LifecycleEventConfiguration: OpsWorksLifecycleEventConfiguration = ...
    ): ...

    def update_my_user_profile(self, *,
        SshPublicKey: str = ...
    ): ...

    def update_rds_db_instance(self, *,
        RdsDbInstanceArn: str,
        DbUser: str = ...,
        DbPassword: str = ...
    ): ...

    def update_stack(self, *,
        StackId: str,
        Name: str = ...,
        Attributes: Dict[str, str] = ...,
        ServiceRoleArn: str = ...,
        DefaultInstanceProfileArn: str = ...,
        DefaultOs: str = ...,
        HostnameTheme: str = ...,
        DefaultAvailabilityZone: str = ...,
        DefaultSubnetId: str = ...,
        CustomJson: str = ...,
        ConfigurationManager: OpsWorksStackConfigurationManager = ...,
        ChefConfiguration: OpsWorksChefConfiguration = ...,
        UseCustomCookbooks: bool = ...,
        CustomCookbooksSource: OpsWorksSource = ...,
        DefaultSshKeyName: str = ...,
        DefaultRootDeviceType: str = ...,
        UseOpsworksSecurityGroups: bool = ...,
        AgentVersion: str = ...
    ): ...

    def update_user_profile(self, *,
        IamUserArn: str,
        SshUsername: str = ...,
        SshPublicKey: str = ...,
        AllowSelfManagement: bool = ...
    ): ...

    def update_volume(self, *,
        VolumeId: str,
        Name: str = ...,
        MountPoint: str = ...
    ): ...


OpsWorksStackConfigurationManager = TypedDict(
    'OpsWorksStackConfigurationManager', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


OpsWorksChefConfiguration = TypedDict(
    'OpsWorksChefConfiguration', {
        'Boolean': Optional[bool],
        'String': Optional[str],
    }
)


OpsWorksSource = TypedDict(
    'OpsWorksSource', {
        'SourceType': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


OpsWorksCloneStackResult = TypedDict(
    'OpsWorksCloneStackResult', {
        'String': Optional[str],
    }
)


OpsWorksDataSource = TypedDict(
    'OpsWorksDataSource', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


OpsWorksSslConfiguration = TypedDict(
    'OpsWorksSslConfiguration', {
        'String': str,
        'String': str,
        'String': Optional[str],
    }
)


OpsWorksEnvironmentVariable = TypedDict(
    'OpsWorksEnvironmentVariable', {
        'String': str,
        'String': str,
        'Boolean': Optional[bool],
    }
)


OpsWorksCreateAppResult = TypedDict(
    'OpsWorksCreateAppResult', {
        'String': Optional[str],
    }
)


OpsWorksDeploymentCommand = TypedDict(
    'OpsWorksDeploymentCommand', {
        'DeploymentCommandName': str,
        'DeploymentCommandArgs': Optional[Dict[str, List[str]]],
    }
)


OpsWorksCreateDeploymentResult = TypedDict(
    'OpsWorksCreateDeploymentResult', {
        'String': Optional[str],
    }
)


OpsWorksEbsBlockDevice = TypedDict(
    'OpsWorksEbsBlockDevice', {
        'String': Optional[str],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'VolumeType': Optional[str],
        'Boolean': Optional[bool],
    }
)


OpsWorksBlockDeviceMapping = TypedDict(
    'OpsWorksBlockDeviceMapping', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'EbsBlockDevice': Optional[OpsWorksEbsBlockDevice],
    }
)


OpsWorksCreateInstanceResult = TypedDict(
    'OpsWorksCreateInstanceResult', {
        'String': Optional[str],
    }
)


OpsWorksCloudWatchLogsLogStream = TypedDict(
    'OpsWorksCloudWatchLogsLogStream', {
        'String': Optional[str],
        'String': Optional[str],
        'CloudWatchLogsTimeZone': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'CloudWatchLogsInitialPosition': Optional[str],
        'CloudWatchLogsEncoding': Optional[str],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
    }
)


OpsWorksCloudWatchLogsConfiguration = TypedDict(
    'OpsWorksCloudWatchLogsConfiguration', {
        'Boolean': Optional[bool],
        'CloudWatchLogsLogStreams': Optional[List[OpsWorksCloudWatchLogsLogStream]],
    }
)


OpsWorksVolumeConfiguration = TypedDict(
    'OpsWorksVolumeConfiguration', {
        'String': str,
        'Integer': int,
        'Integer': int,
        'Integer': Optional[int],
        'String': Optional[str],
        'Integer': Optional[int],
        'Boolean': Optional[bool],
    }
)


OpsWorksRecipes = TypedDict(
    'OpsWorksRecipes', {
        'Strings': Optional[List[str]],
        'Strings': Optional[List[str]],
        'Strings': Optional[List[str]],
        'Strings': Optional[List[str]],
        'Strings': Optional[List[str]],
    }
)


OpsWorksShutdownEventConfiguration = TypedDict(
    'OpsWorksShutdownEventConfiguration', {
        'Integer': Optional[int],
        'Boolean': Optional[bool],
    }
)


OpsWorksLifecycleEventConfiguration = TypedDict(
    'OpsWorksLifecycleEventConfiguration', {
        'ShutdownEventConfiguration': Optional[OpsWorksShutdownEventConfiguration],
    }
)


OpsWorksCreateLayerResult = TypedDict(
    'OpsWorksCreateLayerResult', {
        'String': Optional[str],
    }
)


OpsWorksCreateStackResult = TypedDict(
    'OpsWorksCreateStackResult', {
        'String': Optional[str],
    }
)


OpsWorksCreateUserProfileResult = TypedDict(
    'OpsWorksCreateUserProfileResult', {
        'String': Optional[str],
    }
)


OpsWorksAgentVersion = TypedDict(
    'OpsWorksAgentVersion', {
        'String': Optional[str],
        'StackConfigurationManager': Optional[OpsWorksStackConfigurationManager],
    }
)


OpsWorksDescribeAgentVersionsResult = TypedDict(
    'OpsWorksDescribeAgentVersionsResult', {
        'AgentVersions': Optional[List[OpsWorksAgentVersion]],
    }
)


OpsWorksApp = TypedDict(
    'OpsWorksApp', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DataSources': Optional[List[OpsWorksDataSource]],
        'AppType': Optional[str],
        'Source': Optional[OpsWorksSource],
        'Strings': Optional[List[str]],
        'Boolean': Optional[bool],
        'SslConfiguration': Optional[OpsWorksSslConfiguration],
        'AppAttributes': Optional[Dict[str, str]],
        'String': Optional[str],
        'EnvironmentVariables': Optional[List[OpsWorksEnvironmentVariable]],
    }
)


OpsWorksDescribeAppsResult = TypedDict(
    'OpsWorksDescribeAppsResult', {
        'Apps': Optional[List[OpsWorksApp]],
    }
)


OpsWorksCommand = TypedDict(
    'OpsWorksCommand', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[str],
        'DateTime': Optional[str],
        'DateTime': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
    }
)


OpsWorksDescribeCommandsResult = TypedDict(
    'OpsWorksDescribeCommandsResult', {
        'Commands': Optional[List[OpsWorksCommand]],
    }
)


OpsWorksDeployment = TypedDict(
    'OpsWorksDeployment', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[str],
        'DateTime': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'DeploymentCommand': Optional[OpsWorksDeploymentCommand],
        'String': Optional[str],
        'String': Optional[str],
        'Strings': Optional[List[str]],
    }
)


OpsWorksDescribeDeploymentsResult = TypedDict(
    'OpsWorksDescribeDeploymentsResult', {
        'Deployments': Optional[List[OpsWorksDeployment]],
    }
)


OpsWorksEcsCluster = TypedDict(
    'OpsWorksEcsCluster', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[str],
    }
)


OpsWorksDescribeEcsClustersResult = TypedDict(
    'OpsWorksDescribeEcsClustersResult', {
        'EcsClusters': Optional[List[OpsWorksEcsCluster]],
        'String': Optional[str],
    }
)


OpsWorksElasticIp = TypedDict(
    'OpsWorksElasticIp', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


OpsWorksDescribeElasticIpsResult = TypedDict(
    'OpsWorksDescribeElasticIpsResult', {
        'ElasticIps': Optional[List[OpsWorksElasticIp]],
    }
)


OpsWorksElasticLoadBalancer = TypedDict(
    'OpsWorksElasticLoadBalancer', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Strings': Optional[List[str]],
        'Strings': Optional[List[str]],
        'Strings': Optional[List[str]],
    }
)


OpsWorksDescribeElasticLoadBalancersResult = TypedDict(
    'OpsWorksDescribeElasticLoadBalancersResult', {
        'ElasticLoadBalancers': Optional[List[OpsWorksElasticLoadBalancer]],
    }
)


OpsWorksReportedOs = TypedDict(
    'OpsWorksReportedOs', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


OpsWorksInstance = TypedDict(
    'OpsWorksInstance', {
        'String': Optional[str],
        'String': Optional[str],
        'Architecture': Optional[str],
        'String': Optional[str],
        'AutoScalingType': Optional[str],
        'String': Optional[str],
        'BlockDeviceMappings': Optional[List[OpsWorksBlockDeviceMapping]],
        'DateTime': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Strings': Optional[List[str]],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'ReportedOs': Optional[OpsWorksReportedOs],
        'RootDeviceType': Optional[str],
        'String': Optional[str],
        'Strings': Optional[List[str]],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'VirtualizationType': Optional[str],
    }
)


OpsWorksDescribeInstancesResult = TypedDict(
    'OpsWorksDescribeInstancesResult', {
        'Instances': Optional[List[OpsWorksInstance]],
    }
)


OpsWorksLayer = TypedDict(
    'OpsWorksLayer', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'LayerType': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'LayerAttributes': Optional[Dict[str, str]],
        'CloudWatchLogsConfiguration': Optional[OpsWorksCloudWatchLogsConfiguration],
        'String': Optional[str],
        'String': Optional[str],
        'Strings': Optional[List[str]],
        'Strings': Optional[List[str]],
        'Strings': Optional[List[str]],
        'VolumeConfigurations': Optional[List[OpsWorksVolumeConfiguration]],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Recipes': Optional[OpsWorksRecipes],
        'Recipes': Optional[OpsWorksRecipes],
        'DateTime': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'LifecycleEventConfiguration': Optional[OpsWorksLifecycleEventConfiguration],
    }
)


OpsWorksDescribeLayersResult = TypedDict(
    'OpsWorksDescribeLayersResult', {
        'Layers': Optional[List[OpsWorksLayer]],
    }
)


OpsWorksAutoScalingThresholds = TypedDict(
    'OpsWorksAutoScalingThresholds', {
        'Integer': Optional[int],
        'Minute': Optional[int],
        'Minute': Optional[int],
        'Double': Optional[float],
        'Double': Optional[float],
        'Double': Optional[float],
        'Strings': Optional[List[str]],
    }
)


OpsWorksLoadBasedAutoScalingConfiguration = TypedDict(
    'OpsWorksLoadBasedAutoScalingConfiguration', {
        'String': Optional[str],
        'Boolean': Optional[bool],
        'AutoScalingThresholds': Optional[OpsWorksAutoScalingThresholds],
        'AutoScalingThresholds': Optional[OpsWorksAutoScalingThresholds],
    }
)


OpsWorksDescribeLoadBasedAutoScalingResult = TypedDict(
    'OpsWorksDescribeLoadBasedAutoScalingResult', {
        'LoadBasedAutoScalingConfigurations': Optional[List[OpsWorksLoadBasedAutoScalingConfiguration]],
    }
)


OpsWorksSelfUserProfile = TypedDict(
    'OpsWorksSelfUserProfile', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


OpsWorksDescribeMyUserProfileResult = TypedDict(
    'OpsWorksDescribeMyUserProfileResult', {
        'SelfUserProfile': Optional[OpsWorksSelfUserProfile],
    }
)


OpsWorksOperatingSystemConfigurationManager = TypedDict(
    'OpsWorksOperatingSystemConfigurationManager', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


OpsWorksOperatingSystem = TypedDict(
    'OpsWorksOperatingSystem', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'OperatingSystemConfigurationManagers': Optional[List[OpsWorksOperatingSystemConfigurationManager]],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
    }
)


OpsWorksDescribeOperatingSystemsResponse = TypedDict(
    'OpsWorksDescribeOperatingSystemsResponse', {
        'OperatingSystems': Optional[List[OpsWorksOperatingSystem]],
    }
)


OpsWorksPermission = TypedDict(
    'OpsWorksPermission', {
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'String': Optional[str],
    }
)


OpsWorksDescribePermissionsResult = TypedDict(
    'OpsWorksDescribePermissionsResult', {
        'Permissions': Optional[List[OpsWorksPermission]],
    }
)


OpsWorksRaidArray = TypedDict(
    'OpsWorksRaidArray', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
    }
)


OpsWorksDescribeRaidArraysResult = TypedDict(
    'OpsWorksDescribeRaidArraysResult', {
        'RaidArrays': Optional[List[OpsWorksRaidArray]],
    }
)


OpsWorksRdsDbInstance = TypedDict(
    'OpsWorksRdsDbInstance', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
    }
)


OpsWorksDescribeRdsDbInstancesResult = TypedDict(
    'OpsWorksDescribeRdsDbInstancesResult', {
        'RdsDbInstances': Optional[List[OpsWorksRdsDbInstance]],
    }
)


OpsWorksServiceError = TypedDict(
    'OpsWorksServiceError', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[str],
    }
)


OpsWorksDescribeServiceErrorsResult = TypedDict(
    'OpsWorksDescribeServiceErrorsResult', {
        'ServiceErrors': Optional[List[OpsWorksServiceError]],
    }
)


OpsWorksDescribeStackProvisioningParametersResult = TypedDict(
    'OpsWorksDescribeStackProvisioningParametersResult', {
        'String': Optional[str],
        'Parameters': Optional[Dict[str, str]],
    }
)


OpsWorksInstancesCount = TypedDict(
    'OpsWorksInstancesCount', {
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
    }
)


OpsWorksStackSummary = TypedDict(
    'OpsWorksStackSummary', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'InstancesCount': Optional[OpsWorksInstancesCount],
    }
)


OpsWorksDescribeStackSummaryResult = TypedDict(
    'OpsWorksDescribeStackSummaryResult', {
        'StackSummary': Optional[OpsWorksStackSummary],
    }
)


OpsWorksStack = TypedDict(
    'OpsWorksStack', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'StackAttributes': Optional[Dict[str, str]],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'StackConfigurationManager': Optional[OpsWorksStackConfigurationManager],
        'ChefConfiguration': Optional[OpsWorksChefConfiguration],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Source': Optional[OpsWorksSource],
        'String': Optional[str],
        'DateTime': Optional[str],
        'RootDeviceType': Optional[str],
        'String': Optional[str],
    }
)


OpsWorksDescribeStacksResult = TypedDict(
    'OpsWorksDescribeStacksResult', {
        'Stacks': Optional[List[OpsWorksStack]],
    }
)


OpsWorksWeeklyAutoScalingSchedule = TypedDict(
    'OpsWorksWeeklyAutoScalingSchedule', {
        'DailyAutoScalingSchedule': Optional[Dict[str, str]],
        'DailyAutoScalingSchedule': Optional[Dict[str, str]],
        'DailyAutoScalingSchedule': Optional[Dict[str, str]],
        'DailyAutoScalingSchedule': Optional[Dict[str, str]],
        'DailyAutoScalingSchedule': Optional[Dict[str, str]],
        'DailyAutoScalingSchedule': Optional[Dict[str, str]],
        'DailyAutoScalingSchedule': Optional[Dict[str, str]],
    }
)


OpsWorksTimeBasedAutoScalingConfiguration = TypedDict(
    'OpsWorksTimeBasedAutoScalingConfiguration', {
        'String': Optional[str],
        'WeeklyAutoScalingSchedule': Optional[OpsWorksWeeklyAutoScalingSchedule],
    }
)


OpsWorksDescribeTimeBasedAutoScalingResult = TypedDict(
    'OpsWorksDescribeTimeBasedAutoScalingResult', {
        'TimeBasedAutoScalingConfigurations': Optional[List[OpsWorksTimeBasedAutoScalingConfiguration]],
    }
)


OpsWorksUserProfile = TypedDict(
    'OpsWorksUserProfile', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
    }
)


OpsWorksDescribeUserProfilesResult = TypedDict(
    'OpsWorksDescribeUserProfilesResult', {
        'UserProfiles': Optional[List[OpsWorksUserProfile]],
    }
)


OpsWorksVolume = TypedDict(
    'OpsWorksVolume', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'Boolean': Optional[bool],
    }
)


OpsWorksDescribeVolumesResult = TypedDict(
    'OpsWorksDescribeVolumesResult', {
        'Volumes': Optional[List[OpsWorksVolume]],
    }
)


OpsWorksGetHostnameSuggestionResult = TypedDict(
    'OpsWorksGetHostnameSuggestionResult', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


OpsWorksTemporaryCredential = TypedDict(
    'OpsWorksTemporaryCredential', {
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
    }
)


OpsWorksGrantAccessResult = TypedDict(
    'OpsWorksGrantAccessResult', {
        'TemporaryCredential': Optional[OpsWorksTemporaryCredential],
    }
)


OpsWorksListTagsResult = TypedDict(
    'OpsWorksListTagsResult', {
        'Tags': Optional[Dict[str, str]],
        'NextToken': Optional[str],
    }
)


OpsWorksRegisterEcsClusterResult = TypedDict(
    'OpsWorksRegisterEcsClusterResult', {
        'String': Optional[str],
    }
)


OpsWorksRegisterElasticIpResult = TypedDict(
    'OpsWorksRegisterElasticIpResult', {
        'String': Optional[str],
    }
)


OpsWorksInstanceIdentity = TypedDict(
    'OpsWorksInstanceIdentity', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


OpsWorksRegisterInstanceResult = TypedDict(
    'OpsWorksRegisterInstanceResult', {
        'String': Optional[str],
    }
)


OpsWorksRegisterVolumeResult = TypedDict(
    'OpsWorksRegisterVolumeResult', {
        'String': Optional[str],
    }
)


class OpsWorksCM(BaseClient):
    def associate_node(self, *,
        ServerName: str,
        NodeName: str,
        EngineAttributes: List[OpsWorksCMEngineAttribute]
    ) -> OpsWorksCMAssociateNodeResponse: ...

    def create_backup(self, *,
        ServerName: str,
        Description: str = ...
    ) -> OpsWorksCMCreateBackupResponse: ...

    def create_server(self, *,
        ServerName: str,
        InstanceProfileArn: str,
        InstanceType: str,
        ServiceRoleArn: str,
        AssociatePublicIpAddress: bool = ...,
        DisableAutomatedBackup: bool = ...,
        Engine: str = ...,
        EngineModel: str = ...,
        EngineVersion: str = ...,
        EngineAttributes: List[OpsWorksCMEngineAttribute] = ...,
        BackupRetentionCount: int = ...,
        KeyPair: str = ...,
        PreferredMaintenanceWindow: str = ...,
        PreferredBackupWindow: str = ...,
        SecurityGroupIds: List[str] = ...,
        SubnetIds: List[str] = ...,
        BackupId: str = ...
    ) -> OpsWorksCMCreateServerResponse: ...

    def delete_backup(self, *,
        BackupId: str
    ) -> OpsWorksCMDeleteBackupResponse: ...

    def delete_server(self, *,
        ServerName: str
    ) -> OpsWorksCMDeleteServerResponse: ...

    def describe_account_attributes(self) -> OpsWorksCMDescribeAccountAttributesResponse: ...

    def describe_backups(self, *,
        BackupId: str = ...,
        ServerName: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> OpsWorksCMDescribeBackupsResponse: ...

    def describe_events(self, *,
        ServerName: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> OpsWorksCMDescribeEventsResponse: ...

    def describe_node_association_status(self, *,
        NodeAssociationStatusToken: str,
        ServerName: str
    ) -> OpsWorksCMDescribeNodeAssociationStatusResponse: ...

    def describe_servers(self, *,
        ServerName: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> OpsWorksCMDescribeServersResponse: ...

    def disassociate_node(self, *,
        ServerName: str,
        NodeName: str,
        EngineAttributes: List[OpsWorksCMEngineAttribute] = ...
    ) -> OpsWorksCMDisassociateNodeResponse: ...

    def export_server_engine_attribute(self, *,
        ExportAttributeName: str,
        ServerName: str,
        InputAttributes: List[OpsWorksCMEngineAttribute] = ...
    ) -> OpsWorksCMExportServerEngineAttributeResponse: ...

    def restore_server(self, *,
        BackupId: str,
        ServerName: str,
        InstanceType: str = ...,
        KeyPair: str = ...
    ) -> OpsWorksCMRestoreServerResponse: ...

    def start_maintenance(self, *,
        ServerName: str,
        EngineAttributes: List[OpsWorksCMEngineAttribute] = ...
    ) -> OpsWorksCMStartMaintenanceResponse: ...

    def update_server(self, *,
        ServerName: str,
        DisableAutomatedBackup: bool = ...,
        BackupRetentionCount: int = ...,
        PreferredMaintenanceWindow: str = ...,
        PreferredBackupWindow: str = ...
    ) -> OpsWorksCMUpdateServerResponse: ...

    def update_server_engine_attributes(self, *,
        ServerName: str,
        AttributeName: str,
        AttributeValue: str = ...
    ) -> OpsWorksCMUpdateServerEngineAttributesResponse: ...


OpsWorksCMEngineAttribute = TypedDict(
    'OpsWorksCMEngineAttribute', {
        'EngineAttributeName': Optional[str],
        'EngineAttributeValue': Optional[str],
    }
)


OpsWorksCMAssociateNodeResponse = TypedDict(
    'OpsWorksCMAssociateNodeResponse', {
        'NodeAssociationStatusToken': Optional[str],
    }
)


OpsWorksCMBackup = TypedDict(
    'OpsWorksCMBackup', {
        'String': Optional[str],
        'BackupId': Optional[str],
        'BackupType': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'TimeWindowDefinition': Optional[str],
        'TimeWindowDefinition': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'Strings': Optional[List[str]],
        'ServerName': Optional[str],
        'String': Optional[str],
        'BackupStatus': Optional[str],
        'String': Optional[str],
        'Strings': Optional[List[str]],
        'String': Optional[str],
        'String': Optional[str],
    }
)


OpsWorksCMCreateBackupResponse = TypedDict(
    'OpsWorksCMCreateBackupResponse', {
        'Backup': Optional[OpsWorksCMBackup],
    }
)


OpsWorksCMServer = TypedDict(
    'OpsWorksCMServer', {
        'Boolean': Optional[bool],
        'Integer': Optional[int],
        'String': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'EngineAttributes': Optional[List[OpsWorksCMEngineAttribute]],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'MaintenanceStatus': Optional[str],
        'TimeWindowDefinition': Optional[str],
        'TimeWindowDefinition': Optional[str],
        'Strings': Optional[List[str]],
        'String': Optional[str],
        'ServerStatus': Optional[str],
        'String': Optional[str],
        'Strings': Optional[List[str]],
        'String': Optional[str],
    }
)


OpsWorksCMCreateServerResponse = TypedDict(
    'OpsWorksCMCreateServerResponse', {
        'Server': Optional[OpsWorksCMServer],
    }
)


OpsWorksCMDeleteBackupResponse = TypedDict(
    'OpsWorksCMDeleteBackupResponse', {
    }
)


OpsWorksCMDeleteServerResponse = TypedDict(
    'OpsWorksCMDeleteServerResponse', {
    }
)


OpsWorksCMAccountAttribute = TypedDict(
    'OpsWorksCMAccountAttribute', {
        'String': Optional[str],
        'Integer': Optional[int],
        'Integer': Optional[int],
    }
)


OpsWorksCMDescribeAccountAttributesResponse = TypedDict(
    'OpsWorksCMDescribeAccountAttributesResponse', {
        'AccountAttributes': Optional[List[OpsWorksCMAccountAttribute]],
    }
)


OpsWorksCMDescribeBackupsResponse = TypedDict(
    'OpsWorksCMDescribeBackupsResponse', {
        'Backups': Optional[List[OpsWorksCMBackup]],
        'String': Optional[str],
    }
)


OpsWorksCMServerEvent = TypedDict(
    'OpsWorksCMServerEvent', {
        'Timestamp': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


OpsWorksCMDescribeEventsResponse = TypedDict(
    'OpsWorksCMDescribeEventsResponse', {
        'ServerEvents': Optional[List[OpsWorksCMServerEvent]],
        'String': Optional[str],
    }
)


OpsWorksCMDescribeNodeAssociationStatusResponse = TypedDict(
    'OpsWorksCMDescribeNodeAssociationStatusResponse', {
        'NodeAssociationStatus': Optional[str],
        'EngineAttributes': Optional[List[OpsWorksCMEngineAttribute]],
    }
)


OpsWorksCMDescribeServersResponse = TypedDict(
    'OpsWorksCMDescribeServersResponse', {
        'Servers': Optional[List[OpsWorksCMServer]],
        'String': Optional[str],
    }
)


OpsWorksCMDisassociateNodeResponse = TypedDict(
    'OpsWorksCMDisassociateNodeResponse', {
        'NodeAssociationStatusToken': Optional[str],
    }
)


OpsWorksCMExportServerEngineAttributeResponse = TypedDict(
    'OpsWorksCMExportServerEngineAttributeResponse', {
        'EngineAttribute': Optional[OpsWorksCMEngineAttribute],
        'ServerName': Optional[str],
    }
)


OpsWorksCMRestoreServerResponse = TypedDict(
    'OpsWorksCMRestoreServerResponse', {
    }
)


OpsWorksCMStartMaintenanceResponse = TypedDict(
    'OpsWorksCMStartMaintenanceResponse', {
        'Server': Optional[OpsWorksCMServer],
    }
)


OpsWorksCMUpdateServerResponse = TypedDict(
    'OpsWorksCMUpdateServerResponse', {
        'Server': Optional[OpsWorksCMServer],
    }
)


OpsWorksCMUpdateServerEngineAttributesResponse = TypedDict(
    'OpsWorksCMUpdateServerEngineAttributesResponse', {
        'Server': Optional[OpsWorksCMServer],
    }
)


class PI(BaseClient):
    def describe_dimension_keys(self, *,
        ServiceType: str,
        Identifier: str,
        StartTime: datetime.datetime,
        EndTime: datetime.datetime,
        Metric: str,
        GroupBy: PIDimensionGroup,
        PeriodInSeconds: int = ...,
        PartitionBy: PIDimensionGroup = ...,
        Filter: Dict[str, str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> PIDescribeDimensionKeysResponse: ...

    def get_resource_metrics(self, *,
        ServiceType: str,
        Identifier: str,
        MetricQueries: List[PIMetricQuery],
        StartTime: datetime.datetime,
        EndTime: datetime.datetime,
        PeriodInSeconds: int = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> PIGetResourceMetricsResponse: ...


PIDimensionGroup = TypedDict(
    'PIDimensionGroup', {
        'String': str,
        'StringList': Optional[List[str]],
        'Limit': Optional[int],
    }
)


PIResponsePartitionKey = TypedDict(
    'PIResponsePartitionKey', {
        'DimensionMap': Dict[str, str],
    }
)


PIDimensionKeyDescription = TypedDict(
    'PIDimensionKeyDescription', {
        'DimensionMap': Optional[Dict[str, str]],
        'Double': Optional[float],
        'MetricValuesList': Optional[List[float]],
    }
)


PIDescribeDimensionKeysResponse = TypedDict(
    'PIDescribeDimensionKeysResponse', {
        'ISOTimestamp': Optional[datetime.datetime],
        'ISOTimestamp': Optional[datetime.datetime],
        'ResponsePartitionKeyList': Optional[List[PIResponsePartitionKey]],
        'DimensionKeyDescriptionList': Optional[List[PIDimensionKeyDescription]],
        'String': Optional[str],
    }
)


PIMetricQuery = TypedDict(
    'PIMetricQuery', {
        'String': str,
        'DimensionGroup': Optional[PIDimensionGroup],
        'MetricQueryFilterMap': Optional[Dict[str, str]],
    }
)


PIResponseResourceMetricKey = TypedDict(
    'PIResponseResourceMetricKey', {
        'String': str,
        'DimensionMap': Optional[Dict[str, str]],
    }
)


PIDataPoint = TypedDict(
    'PIDataPoint', {
        'ISOTimestamp': datetime.datetime,
        'Double': float,
    }
)


PIMetricKeyDataPoints = TypedDict(
    'PIMetricKeyDataPoints', {
        'ResponseResourceMetricKey': Optional[PIResponseResourceMetricKey],
        'DataPointsList': Optional[List[PIDataPoint]],
    }
)


PIGetResourceMetricsResponse = TypedDict(
    'PIGetResourceMetricsResponse', {
        'ISOTimestamp': Optional[datetime.datetime],
        'ISOTimestamp': Optional[datetime.datetime],
        'String': Optional[str],
        'MetricKeyDataPointsList': Optional[List[PIMetricKeyDataPoints]],
        'String': Optional[str],
    }
)


class Pinpoint(BaseClient):
    def create_app(self, *,
        CreateApplicationRequest: PinpointCreateApplicationRequest
    ) -> PinpointCreateAppResponse: ...

    def create_campaign(self, *,
        ApplicationId: str,
        WriteCampaignRequest: PinpointWriteCampaignRequest
    ) -> PinpointCreateCampaignResponse: ...

    def create_export_job(self, *,
        ApplicationId: str,
        ExportJobRequest: PinpointExportJobRequest
    ) -> PinpointCreateExportJobResponse: ...

    def create_import_job(self, *,
        ApplicationId: str,
        ImportJobRequest: PinpointImportJobRequest
    ) -> PinpointCreateImportJobResponse: ...

    def create_segment(self, *,
        ApplicationId: str,
        WriteSegmentRequest: PinpointWriteSegmentRequest
    ) -> PinpointCreateSegmentResponse: ...

    def delete_adm_channel(self, *,
        ApplicationId: str
    ) -> PinpointDeleteAdmChannelResponse: ...

    def delete_apns_channel(self, *,
        ApplicationId: str
    ) -> PinpointDeleteApnsChannelResponse: ...

    def delete_apns_sandbox_channel(self, *,
        ApplicationId: str
    ) -> PinpointDeleteApnsSandboxChannelResponse: ...

    def delete_apns_voip_channel(self, *,
        ApplicationId: str
    ) -> PinpointDeleteApnsVoipChannelResponse: ...

    def delete_apns_voip_sandbox_channel(self, *,
        ApplicationId: str
    ) -> PinpointDeleteApnsVoipSandboxChannelResponse: ...

    def delete_app(self, *,
        ApplicationId: str
    ) -> PinpointDeleteAppResponse: ...

    def delete_baidu_channel(self, *,
        ApplicationId: str
    ) -> PinpointDeleteBaiduChannelResponse: ...

    def delete_campaign(self, *,
        ApplicationId: str,
        CampaignId: str
    ) -> PinpointDeleteCampaignResponse: ...

    def delete_email_channel(self, *,
        ApplicationId: str
    ) -> PinpointDeleteEmailChannelResponse: ...

    def delete_endpoint(self, *,
        ApplicationId: str,
        EndpointId: str
    ) -> PinpointDeleteEndpointResponse: ...

    def delete_event_stream(self, *,
        ApplicationId: str
    ) -> PinpointDeleteEventStreamResponse: ...

    def delete_gcm_channel(self, *,
        ApplicationId: str
    ) -> PinpointDeleteGcmChannelResponse: ...

    def delete_segment(self, *,
        ApplicationId: str,
        SegmentId: str
    ) -> PinpointDeleteSegmentResponse: ...

    def delete_sms_channel(self, *,
        ApplicationId: str
    ) -> PinpointDeleteSmsChannelResponse: ...

    def delete_user_endpoints(self, *,
        ApplicationId: str,
        UserId: str
    ) -> PinpointDeleteUserEndpointsResponse: ...

    def delete_voice_channel(self, *,
        ApplicationId: str
    ) -> PinpointDeleteVoiceChannelResponse: ...

    def get_adm_channel(self, *,
        ApplicationId: str
    ) -> PinpointGetAdmChannelResponse: ...

    def get_apns_channel(self, *,
        ApplicationId: str
    ) -> PinpointGetApnsChannelResponse: ...

    def get_apns_sandbox_channel(self, *,
        ApplicationId: str
    ) -> PinpointGetApnsSandboxChannelResponse: ...

    def get_apns_voip_channel(self, *,
        ApplicationId: str
    ) -> PinpointGetApnsVoipChannelResponse: ...

    def get_apns_voip_sandbox_channel(self, *,
        ApplicationId: str
    ) -> PinpointGetApnsVoipSandboxChannelResponse: ...

    def get_app(self, *,
        ApplicationId: str
    ) -> PinpointGetAppResponse: ...

    def get_application_settings(self, *,
        ApplicationId: str
    ) -> PinpointGetApplicationSettingsResponse: ...

    def get_apps(self, *,
        PageSize: str = ...,
        Token: str = ...
    ) -> PinpointGetAppsResponse: ...

    def get_baidu_channel(self, *,
        ApplicationId: str
    ) -> PinpointGetBaiduChannelResponse: ...

    def get_campaign(self, *,
        ApplicationId: str,
        CampaignId: str
    ) -> PinpointGetCampaignResponse: ...

    def get_campaign_activities(self, *,
        ApplicationId: str,
        CampaignId: str,
        PageSize: str = ...,
        Token: str = ...
    ) -> PinpointGetCampaignActivitiesResponse: ...

    def get_campaign_version(self, *,
        ApplicationId: str,
        CampaignId: str,
        Version: str
    ) -> PinpointGetCampaignVersionResponse: ...

    def get_campaign_versions(self, *,
        ApplicationId: str,
        CampaignId: str,
        PageSize: str = ...,
        Token: str = ...
    ) -> PinpointGetCampaignVersionsResponse: ...

    def get_campaigns(self, *,
        ApplicationId: str,
        PageSize: str = ...,
        Token: str = ...
    ) -> PinpointGetCampaignsResponse: ...

    def get_channels(self, *,
        ApplicationId: str
    ) -> PinpointGetChannelsResponse: ...

    def get_email_channel(self, *,
        ApplicationId: str
    ) -> PinpointGetEmailChannelResponse: ...

    def get_endpoint(self, *,
        ApplicationId: str,
        EndpointId: str
    ) -> PinpointGetEndpointResponse: ...

    def get_event_stream(self, *,
        ApplicationId: str
    ) -> PinpointGetEventStreamResponse: ...

    def get_export_job(self, *,
        ApplicationId: str,
        JobId: str
    ) -> PinpointGetExportJobResponse: ...

    def get_export_jobs(self, *,
        ApplicationId: str,
        PageSize: str = ...,
        Token: str = ...
    ) -> PinpointGetExportJobsResponse: ...

    def get_gcm_channel(self, *,
        ApplicationId: str
    ) -> PinpointGetGcmChannelResponse: ...

    def get_import_job(self, *,
        ApplicationId: str,
        JobId: str
    ) -> PinpointGetImportJobResponse: ...

    def get_import_jobs(self, *,
        ApplicationId: str,
        PageSize: str = ...,
        Token: str = ...
    ) -> PinpointGetImportJobsResponse: ...

    def get_segment(self, *,
        ApplicationId: str,
        SegmentId: str
    ) -> PinpointGetSegmentResponse: ...

    def get_segment_export_jobs(self, *,
        ApplicationId: str,
        SegmentId: str,
        PageSize: str = ...,
        Token: str = ...
    ) -> PinpointGetSegmentExportJobsResponse: ...

    def get_segment_import_jobs(self, *,
        ApplicationId: str,
        SegmentId: str,
        PageSize: str = ...,
        Token: str = ...
    ) -> PinpointGetSegmentImportJobsResponse: ...

    def get_segment_version(self, *,
        ApplicationId: str,
        SegmentId: str,
        Version: str
    ) -> PinpointGetSegmentVersionResponse: ...

    def get_segment_versions(self, *,
        ApplicationId: str,
        SegmentId: str,
        PageSize: str = ...,
        Token: str = ...
    ) -> PinpointGetSegmentVersionsResponse: ...

    def get_segments(self, *,
        ApplicationId: str,
        PageSize: str = ...,
        Token: str = ...
    ) -> PinpointGetSegmentsResponse: ...

    def get_sms_channel(self, *,
        ApplicationId: str
    ) -> PinpointGetSmsChannelResponse: ...

    def get_user_endpoints(self, *,
        ApplicationId: str,
        UserId: str
    ) -> PinpointGetUserEndpointsResponse: ...

    def get_voice_channel(self, *,
        ApplicationId: str
    ) -> PinpointGetVoiceChannelResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> PinpointListTagsForResourceResponse: ...

    def phone_number_validate(self, *,
        NumberValidateRequest: PinpointNumberValidateRequest
    ) -> PinpointPhoneNumberValidateResponse: ...

    def put_event_stream(self, *,
        ApplicationId: str,
        WriteEventStream: PinpointWriteEventStream
    ) -> PinpointPutEventStreamResponse: ...

    def put_events(self, *,
        ApplicationId: str,
        EventsRequest: PinpointEventsRequest
    ) -> PinpointPutEventsResponse: ...

    def remove_attributes(self, *,
        ApplicationId: str,
        AttributeType: str,
        UpdateAttributesRequest: PinpointUpdateAttributesRequest
    ) -> PinpointRemoveAttributesResponse: ...

    def send_messages(self, *,
        ApplicationId: str,
        MessageRequest: PinpointMessageRequest
    ) -> PinpointSendMessagesResponse: ...

    def send_users_messages(self, *,
        ApplicationId: str,
        SendUsersMessageRequest: PinpointSendUsersMessageRequest
    ) -> PinpointSendUsersMessagesResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        TagsModel: PinpointTagsModel
    ): ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ): ...

    def update_adm_channel(self, *,
        ADMChannelRequest: PinpointADMChannelRequest,
        ApplicationId: str
    ) -> PinpointUpdateAdmChannelResponse: ...

    def update_apns_channel(self, *,
        APNSChannelRequest: PinpointAPNSChannelRequest,
        ApplicationId: str
    ) -> PinpointUpdateApnsChannelResponse: ...

    def update_apns_sandbox_channel(self, *,
        APNSSandboxChannelRequest: PinpointAPNSSandboxChannelRequest,
        ApplicationId: str
    ) -> PinpointUpdateApnsSandboxChannelResponse: ...

    def update_apns_voip_channel(self, *,
        APNSVoipChannelRequest: PinpointAPNSVoipChannelRequest,
        ApplicationId: str
    ) -> PinpointUpdateApnsVoipChannelResponse: ...

    def update_apns_voip_sandbox_channel(self, *,
        APNSVoipSandboxChannelRequest: PinpointAPNSVoipSandboxChannelRequest,
        ApplicationId: str
    ) -> PinpointUpdateApnsVoipSandboxChannelResponse: ...

    def update_application_settings(self, *,
        ApplicationId: str,
        WriteApplicationSettingsRequest: PinpointWriteApplicationSettingsRequest
    ) -> PinpointUpdateApplicationSettingsResponse: ...

    def update_baidu_channel(self, *,
        ApplicationId: str,
        BaiduChannelRequest: PinpointBaiduChannelRequest
    ) -> PinpointUpdateBaiduChannelResponse: ...

    def update_campaign(self, *,
        ApplicationId: str,
        CampaignId: str,
        WriteCampaignRequest: PinpointWriteCampaignRequest
    ) -> PinpointUpdateCampaignResponse: ...

    def update_email_channel(self, *,
        ApplicationId: str,
        EmailChannelRequest: PinpointEmailChannelRequest
    ) -> PinpointUpdateEmailChannelResponse: ...

    def update_endpoint(self, *,
        ApplicationId: str,
        EndpointId: str,
        EndpointRequest: PinpointEndpointRequest
    ) -> PinpointUpdateEndpointResponse: ...

    def update_endpoints_batch(self, *,
        ApplicationId: str,
        EndpointBatchRequest: PinpointEndpointBatchRequest
    ) -> PinpointUpdateEndpointsBatchResponse: ...

    def update_gcm_channel(self, *,
        ApplicationId: str,
        GCMChannelRequest: PinpointGCMChannelRequest
    ) -> PinpointUpdateGcmChannelResponse: ...

    def update_segment(self, *,
        ApplicationId: str,
        SegmentId: str,
        WriteSegmentRequest: PinpointWriteSegmentRequest
    ) -> PinpointUpdateSegmentResponse: ...

    def update_sms_channel(self, *,
        ApplicationId: str,
        SMSChannelRequest: PinpointSMSChannelRequest
    ) -> PinpointUpdateSmsChannelResponse: ...

    def update_voice_channel(self, *,
        ApplicationId: str,
        VoiceChannelRequest: PinpointVoiceChannelRequest
    ) -> PinpointUpdateVoiceChannelResponse: ...


PinpointCreateApplicationRequest = TypedDict(
    'PinpointCreateApplicationRequest', {
        '__string': Optional[str],
        'MapOf__string': Optional[Dict[str, str]],
    }
)


PinpointApplicationResponse = TypedDict(
    'PinpointApplicationResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'MapOf__string': Optional[Dict[str, str]],
    }
)


PinpointCreateAppResponse = TypedDict(
    'PinpointCreateAppResponse', {
        'ApplicationResponse': PinpointApplicationResponse,
    }
)


PinpointMessage = TypedDict(
    'PinpointMessage', {
        'Action': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__integer': Optional[int],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointCampaignEmailMessage = TypedDict(
    'PinpointCampaignEmailMessage', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointCampaignSmsMessage = TypedDict(
    'PinpointCampaignSmsMessage', {
        '__string': Optional[str],
        'MessageType': Optional[str],
        '__string': Optional[str],
    }
)


PinpointMessageConfiguration = TypedDict(
    'PinpointMessageConfiguration', {
        'Message': Optional[PinpointMessage],
        'Message': Optional[PinpointMessage],
        'Message': Optional[PinpointMessage],
        'Message': Optional[PinpointMessage],
        'CampaignEmailMessage': Optional[PinpointCampaignEmailMessage],
        'Message': Optional[PinpointMessage],
        'CampaignSmsMessage': Optional[PinpointCampaignSmsMessage],
    }
)


PinpointAttributeDimension = TypedDict(
    'PinpointAttributeDimension', {
        'AttributeType': Optional[str],
        'ListOf__string': Optional[List[str]],
    }
)


PinpointSetDimension = TypedDict(
    'PinpointSetDimension', {
        'DimensionType': Optional[str],
        'ListOf__string': Optional[List[str]],
    }
)


PinpointMetricDimension = TypedDict(
    'PinpointMetricDimension', {
        '__string': Optional[str],
        '__double': Optional[float],
    }
)


PinpointEventDimensions = TypedDict(
    'PinpointEventDimensions', {
        'MapOfAttributeDimension': Optional[Dict[str, PinpointAttributeDimension]],
        'SetDimension': Optional[PinpointSetDimension],
        'MapOfMetricDimension': Optional[Dict[str, PinpointMetricDimension]],
    }
)


PinpointCampaignEventFilter = TypedDict(
    'PinpointCampaignEventFilter', {
        'EventDimensions': Optional[PinpointEventDimensions],
        'FilterType': Optional[str],
    }
)


PinpointQuietTime = TypedDict(
    'PinpointQuietTime', {
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointSchedule = TypedDict(
    'PinpointSchedule', {
        '__string': Optional[str],
        'CampaignEventFilter': Optional[PinpointCampaignEventFilter],
        'Frequency': Optional[str],
        '__boolean': Optional[bool],
        'QuietTime': Optional[PinpointQuietTime],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointWriteTreatmentResource = TypedDict(
    'PinpointWriteTreatmentResource', {
        'MessageConfiguration': Optional[PinpointMessageConfiguration],
        'Schedule': Optional[PinpointSchedule],
        '__integer': Optional[int],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointCampaignHook = TypedDict(
    'PinpointCampaignHook', {
        '__string': Optional[str],
        'Mode': Optional[str],
        '__string': Optional[str],
    }
)


PinpointCampaignLimits = TypedDict(
    'PinpointCampaignLimits', {
        '__integer': Optional[int],
        '__integer': Optional[int],
        '__integer': Optional[int],
        '__integer': Optional[int],
    }
)


PinpointWriteCampaignRequest = TypedDict(
    'PinpointWriteCampaignRequest', {
        'ListOfWriteTreatmentResource': Optional[List[PinpointWriteTreatmentResource]],
        '__string': Optional[str],
        '__integer': Optional[int],
        'CampaignHook': Optional[PinpointCampaignHook],
        '__boolean': Optional[bool],
        'CampaignLimits': Optional[PinpointCampaignLimits],
        'MessageConfiguration': Optional[PinpointMessageConfiguration],
        '__string': Optional[str],
        'Schedule': Optional[PinpointSchedule],
        '__string': Optional[str],
        '__integer': Optional[int],
        'MapOf__string': Optional[Dict[str, str]],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointCampaignState = TypedDict(
    'PinpointCampaignState', {
        'CampaignStatus': Optional[str],
    }
)


PinpointTreatmentResource = TypedDict(
    'PinpointTreatmentResource', {
        '__string': Optional[str],
        'MessageConfiguration': Optional[PinpointMessageConfiguration],
        'Schedule': Optional[PinpointSchedule],
        '__integer': Optional[int],
        'CampaignState': Optional[PinpointCampaignState],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointCampaignResponse = TypedDict(
    'PinpointCampaignResponse', {
        'ListOfTreatmentResource': Optional[List[PinpointTreatmentResource]],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'CampaignState': Optional[PinpointCampaignState],
        '__string': Optional[str],
        '__integer': Optional[int],
        'CampaignHook': Optional[PinpointCampaignHook],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        'CampaignLimits': Optional[PinpointCampaignLimits],
        'MessageConfiguration': Optional[PinpointMessageConfiguration],
        '__string': Optional[str],
        'Schedule': Optional[PinpointSchedule],
        '__string': Optional[str],
        '__integer': Optional[int],
        'CampaignState': Optional[PinpointCampaignState],
        'MapOf__string': Optional[Dict[str, str]],
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
    }
)


PinpointCreateCampaignResponse = TypedDict(
    'PinpointCreateCampaignResponse', {
        'CampaignResponse': PinpointCampaignResponse,
    }
)


PinpointExportJobRequest = TypedDict(
    'PinpointExportJobRequest', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
    }
)


PinpointExportJobResource = TypedDict(
    'PinpointExportJobResource', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
    }
)


PinpointExportJobResponse = TypedDict(
    'PinpointExportJobResponse', {
        '__string': Optional[str],
        '__integer': Optional[int],
        '__string': Optional[str],
        '__string': Optional[str],
        'ExportJobResource': Optional[PinpointExportJobResource],
        '__integer': Optional[int],
        'ListOf__string': Optional[List[str]],
        '__string': Optional[str],
        'JobStatus': Optional[str],
        '__integer': Optional[int],
        '__integer': Optional[int],
        '__integer': Optional[int],
        '__string': Optional[str],
    }
)


PinpointCreateExportJobResponse = TypedDict(
    'PinpointCreateExportJobResponse', {
        'ExportJobResponse': PinpointExportJobResponse,
    }
)


PinpointImportJobRequest = TypedDict(
    'PinpointImportJobRequest', {
        '__boolean': Optional[bool],
        '__string': Optional[str],
        'Format': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointImportJobResource = TypedDict(
    'PinpointImportJobResource', {
        '__boolean': Optional[bool],
        '__string': Optional[str],
        'Format': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointImportJobResponse = TypedDict(
    'PinpointImportJobResponse', {
        '__string': Optional[str],
        '__integer': Optional[int],
        '__string': Optional[str],
        '__string': Optional[str],
        'ImportJobResource': Optional[PinpointImportJobResource],
        '__integer': Optional[int],
        'ListOf__string': Optional[List[str]],
        '__string': Optional[str],
        'JobStatus': Optional[str],
        '__integer': Optional[int],
        '__integer': Optional[int],
        '__integer': Optional[int],
        '__string': Optional[str],
    }
)


PinpointCreateImportJobResponse = TypedDict(
    'PinpointCreateImportJobResponse', {
        'ImportJobResponse': PinpointImportJobResponse,
    }
)


PinpointRecencyDimension = TypedDict(
    'PinpointRecencyDimension', {
        'Duration': Optional[str],
        'RecencyType': Optional[str],
    }
)


PinpointSegmentBehaviors = TypedDict(
    'PinpointSegmentBehaviors', {
        'RecencyDimension': Optional[PinpointRecencyDimension],
    }
)


PinpointSegmentDemographics = TypedDict(
    'PinpointSegmentDemographics', {
        'SetDimension': Optional[PinpointSetDimension],
        'SetDimension': Optional[PinpointSetDimension],
        'SetDimension': Optional[PinpointSetDimension],
        'SetDimension': Optional[PinpointSetDimension],
        'SetDimension': Optional[PinpointSetDimension],
        'SetDimension': Optional[PinpointSetDimension],
    }
)


PinpointGPSCoordinates = TypedDict(
    'PinpointGPSCoordinates', {
        '__double': Optional[float],
        '__double': Optional[float],
    }
)


PinpointGPSPointDimension = TypedDict(
    'PinpointGPSPointDimension', {
        'GPSCoordinates': Optional[PinpointGPSCoordinates],
        '__double': Optional[float],
    }
)


PinpointSegmentLocation = TypedDict(
    'PinpointSegmentLocation', {
        'SetDimension': Optional[PinpointSetDimension],
        'GPSPointDimension': Optional[PinpointGPSPointDimension],
    }
)


PinpointSegmentDimensions = TypedDict(
    'PinpointSegmentDimensions', {
        'MapOfAttributeDimension': Optional[Dict[str, PinpointAttributeDimension]],
        'SegmentBehaviors': Optional[PinpointSegmentBehaviors],
        'SegmentDemographics': Optional[PinpointSegmentDemographics],
        'SegmentLocation': Optional[PinpointSegmentLocation],
        'MapOfMetricDimension': Optional[Dict[str, PinpointMetricDimension]],
        'MapOfAttributeDimension': Optional[Dict[str, PinpointAttributeDimension]],
    }
)


PinpointSegmentReference = TypedDict(
    'PinpointSegmentReference', {
        '__string': Optional[str],
        '__integer': Optional[int],
    }
)


PinpointSegmentGroup = TypedDict(
    'PinpointSegmentGroup', {
        'ListOfSegmentDimensions': Optional[List[PinpointSegmentDimensions]],
        'ListOfSegmentReference': Optional[List[PinpointSegmentReference]],
        'SourceType': Optional[str],
        'Type': Optional[str],
    }
)


PinpointSegmentGroupList = TypedDict(
    'PinpointSegmentGroupList', {
        'ListOfSegmentGroup': Optional[List[PinpointSegmentGroup]],
        'Include': Optional[str],
    }
)


PinpointWriteSegmentRequest = TypedDict(
    'PinpointWriteSegmentRequest', {
        'SegmentDimensions': Optional[PinpointSegmentDimensions],
        '__string': Optional[str],
        'SegmentGroupList': Optional[PinpointSegmentGroupList],
        'MapOf__string': Optional[Dict[str, str]],
    }
)


PinpointSegmentImportResource = TypedDict(
    'PinpointSegmentImportResource', {
        'MapOf__integer': Optional[Dict[str, int]],
        '__string': Optional[str],
        'Format': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
    }
)


PinpointSegmentResponse = TypedDict(
    'PinpointSegmentResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'SegmentDimensions': Optional[PinpointSegmentDimensions],
        '__string': Optional[str],
        'SegmentImportResource': Optional[PinpointSegmentImportResource],
        '__string': Optional[str],
        '__string': Optional[str],
        'SegmentGroupList': Optional[PinpointSegmentGroupList],
        'SegmentType': Optional[str],
        'MapOf__string': Optional[Dict[str, str]],
        '__integer': Optional[int],
    }
)


PinpointCreateSegmentResponse = TypedDict(
    'PinpointCreateSegmentResponse', {
        'SegmentResponse': PinpointSegmentResponse,
    }
)


PinpointADMChannelResponse = TypedDict(
    'PinpointADMChannelResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
    }
)


PinpointDeleteAdmChannelResponse = TypedDict(
    'PinpointDeleteAdmChannelResponse', {
        'ADMChannelResponse': PinpointADMChannelResponse,
    }
)


PinpointAPNSChannelResponse = TypedDict(
    'PinpointAPNSChannelResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__boolean': Optional[bool],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
    }
)


PinpointDeleteApnsChannelResponse = TypedDict(
    'PinpointDeleteApnsChannelResponse', {
        'APNSChannelResponse': PinpointAPNSChannelResponse,
    }
)


PinpointAPNSSandboxChannelResponse = TypedDict(
    'PinpointAPNSSandboxChannelResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__boolean': Optional[bool],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
    }
)


PinpointDeleteApnsSandboxChannelResponse = TypedDict(
    'PinpointDeleteApnsSandboxChannelResponse', {
        'APNSSandboxChannelResponse': PinpointAPNSSandboxChannelResponse,
    }
)


PinpointAPNSVoipChannelResponse = TypedDict(
    'PinpointAPNSVoipChannelResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__boolean': Optional[bool],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
    }
)


PinpointDeleteApnsVoipChannelResponse = TypedDict(
    'PinpointDeleteApnsVoipChannelResponse', {
        'APNSVoipChannelResponse': PinpointAPNSVoipChannelResponse,
    }
)


PinpointAPNSVoipSandboxChannelResponse = TypedDict(
    'PinpointAPNSVoipSandboxChannelResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__boolean': Optional[bool],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
    }
)


PinpointDeleteApnsVoipSandboxChannelResponse = TypedDict(
    'PinpointDeleteApnsVoipSandboxChannelResponse', {
        'APNSVoipSandboxChannelResponse': PinpointAPNSVoipSandboxChannelResponse,
    }
)


PinpointDeleteAppResponse = TypedDict(
    'PinpointDeleteAppResponse', {
        'ApplicationResponse': PinpointApplicationResponse,
    }
)


PinpointBaiduChannelResponse = TypedDict(
    'PinpointBaiduChannelResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
    }
)


PinpointDeleteBaiduChannelResponse = TypedDict(
    'PinpointDeleteBaiduChannelResponse', {
        'BaiduChannelResponse': PinpointBaiduChannelResponse,
    }
)


PinpointDeleteCampaignResponse = TypedDict(
    'PinpointDeleteCampaignResponse', {
        'CampaignResponse': PinpointCampaignResponse,
    }
)


PinpointEmailChannelResponse = TypedDict(
    'PinpointEmailChannelResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
    }
)


PinpointDeleteEmailChannelResponse = TypedDict(
    'PinpointDeleteEmailChannelResponse', {
        'EmailChannelResponse': PinpointEmailChannelResponse,
    }
)


PinpointEndpointDemographic = TypedDict(
    'PinpointEndpointDemographic', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointEndpointLocation = TypedDict(
    'PinpointEndpointLocation', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__double': Optional[float],
        '__double': Optional[float],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointEndpointUser = TypedDict(
    'PinpointEndpointUser', {
        'MapOfListOf__string': Optional[Dict[str, List[str]]],
        '__string': Optional[str],
    }
)


PinpointEndpointResponse = TypedDict(
    'PinpointEndpointResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        'MapOfListOf__string': Optional[Dict[str, List[str]]],
        'ChannelType': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'EndpointDemographic': Optional[PinpointEndpointDemographic],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'EndpointLocation': Optional[PinpointEndpointLocation],
        'MapOf__double': Optional[Dict[str, float]],
        '__string': Optional[str],
        '__string': Optional[str],
        'EndpointUser': Optional[PinpointEndpointUser],
    }
)


PinpointDeleteEndpointResponse = TypedDict(
    'PinpointDeleteEndpointResponse', {
        'EndpointResponse': PinpointEndpointResponse,
    }
)


PinpointEventStream = TypedDict(
    'PinpointEventStream', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointDeleteEventStreamResponse = TypedDict(
    'PinpointDeleteEventStreamResponse', {
        'EventStream': PinpointEventStream,
    }
)


PinpointGCMChannelResponse = TypedDict(
    'PinpointGCMChannelResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
    }
)


PinpointDeleteGcmChannelResponse = TypedDict(
    'PinpointDeleteGcmChannelResponse', {
        'GCMChannelResponse': PinpointGCMChannelResponse,
    }
)


PinpointDeleteSegmentResponse = TypedDict(
    'PinpointDeleteSegmentResponse', {
        'SegmentResponse': PinpointSegmentResponse,
    }
)


PinpointSMSChannelResponse = TypedDict(
    'PinpointSMSChannelResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
        '__integer': Optional[int],
    }
)


PinpointDeleteSmsChannelResponse = TypedDict(
    'PinpointDeleteSmsChannelResponse', {
        'SMSChannelResponse': PinpointSMSChannelResponse,
    }
)


PinpointEndpointsResponse = TypedDict(
    'PinpointEndpointsResponse', {
        'ListOfEndpointResponse': Optional[List[PinpointEndpointResponse]],
    }
)


PinpointDeleteUserEndpointsResponse = TypedDict(
    'PinpointDeleteUserEndpointsResponse', {
        'EndpointsResponse': PinpointEndpointsResponse,
    }
)


PinpointVoiceChannelResponse = TypedDict(
    'PinpointVoiceChannelResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
    }
)


PinpointDeleteVoiceChannelResponse = TypedDict(
    'PinpointDeleteVoiceChannelResponse', {
        'VoiceChannelResponse': PinpointVoiceChannelResponse,
    }
)


PinpointGetAdmChannelResponse = TypedDict(
    'PinpointGetAdmChannelResponse', {
        'ADMChannelResponse': PinpointADMChannelResponse,
    }
)


PinpointGetApnsChannelResponse = TypedDict(
    'PinpointGetApnsChannelResponse', {
        'APNSChannelResponse': PinpointAPNSChannelResponse,
    }
)


PinpointGetApnsSandboxChannelResponse = TypedDict(
    'PinpointGetApnsSandboxChannelResponse', {
        'APNSSandboxChannelResponse': PinpointAPNSSandboxChannelResponse,
    }
)


PinpointGetApnsVoipChannelResponse = TypedDict(
    'PinpointGetApnsVoipChannelResponse', {
        'APNSVoipChannelResponse': PinpointAPNSVoipChannelResponse,
    }
)


PinpointGetApnsVoipSandboxChannelResponse = TypedDict(
    'PinpointGetApnsVoipSandboxChannelResponse', {
        'APNSVoipSandboxChannelResponse': PinpointAPNSVoipSandboxChannelResponse,
    }
)


PinpointGetAppResponse = TypedDict(
    'PinpointGetAppResponse', {
        'ApplicationResponse': PinpointApplicationResponse,
    }
)


PinpointApplicationSettingsResource = TypedDict(
    'PinpointApplicationSettingsResource', {
        '__string': Optional[str],
        'CampaignHook': Optional[PinpointCampaignHook],
        '__string': Optional[str],
        'CampaignLimits': Optional[PinpointCampaignLimits],
        'QuietTime': Optional[PinpointQuietTime],
    }
)


PinpointGetApplicationSettingsResponse = TypedDict(
    'PinpointGetApplicationSettingsResponse', {
        'ApplicationSettingsResource': PinpointApplicationSettingsResource,
    }
)


PinpointApplicationsResponse = TypedDict(
    'PinpointApplicationsResponse', {
        'ListOfApplicationResponse': Optional[List[PinpointApplicationResponse]],
        '__string': Optional[str],
    }
)


PinpointGetAppsResponse = TypedDict(
    'PinpointGetAppsResponse', {
        'ApplicationsResponse': PinpointApplicationsResponse,
    }
)


PinpointGetBaiduChannelResponse = TypedDict(
    'PinpointGetBaiduChannelResponse', {
        'BaiduChannelResponse': PinpointBaiduChannelResponse,
    }
)


PinpointGetCampaignResponse = TypedDict(
    'PinpointGetCampaignResponse', {
        'CampaignResponse': PinpointCampaignResponse,
    }
)


PinpointActivityResponse = TypedDict(
    'PinpointActivityResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
        '__integer': Optional[int],
        '__integer': Optional[int],
        '__integer': Optional[int],
        '__string': Optional[str],
    }
)


PinpointActivitiesResponse = TypedDict(
    'PinpointActivitiesResponse', {
        'ListOfActivityResponse': Optional[List[PinpointActivityResponse]],
        '__string': Optional[str],
    }
)


PinpointGetCampaignActivitiesResponse = TypedDict(
    'PinpointGetCampaignActivitiesResponse', {
        'ActivitiesResponse': PinpointActivitiesResponse,
    }
)


PinpointGetCampaignVersionResponse = TypedDict(
    'PinpointGetCampaignVersionResponse', {
        'CampaignResponse': PinpointCampaignResponse,
    }
)


PinpointCampaignsResponse = TypedDict(
    'PinpointCampaignsResponse', {
        'ListOfCampaignResponse': Optional[List[PinpointCampaignResponse]],
        '__string': Optional[str],
    }
)


PinpointGetCampaignVersionsResponse = TypedDict(
    'PinpointGetCampaignVersionsResponse', {
        'CampaignsResponse': PinpointCampaignsResponse,
    }
)


PinpointGetCampaignsResponse = TypedDict(
    'PinpointGetCampaignsResponse', {
        'CampaignsResponse': PinpointCampaignsResponse,
    }
)


PinpointChannelResponse = TypedDict(
    'PinpointChannelResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
    }
)


PinpointChannelsResponse = TypedDict(
    'PinpointChannelsResponse', {
        'MapOfChannelResponse': Optional[Dict[str, PinpointChannelResponse]],
    }
)


PinpointGetChannelsResponse = TypedDict(
    'PinpointGetChannelsResponse', {
        'ChannelsResponse': PinpointChannelsResponse,
    }
)


PinpointGetEmailChannelResponse = TypedDict(
    'PinpointGetEmailChannelResponse', {
        'EmailChannelResponse': PinpointEmailChannelResponse,
    }
)


PinpointGetEndpointResponse = TypedDict(
    'PinpointGetEndpointResponse', {
        'EndpointResponse': PinpointEndpointResponse,
    }
)


PinpointGetEventStreamResponse = TypedDict(
    'PinpointGetEventStreamResponse', {
        'EventStream': PinpointEventStream,
    }
)


PinpointGetExportJobResponse = TypedDict(
    'PinpointGetExportJobResponse', {
        'ExportJobResponse': PinpointExportJobResponse,
    }
)


PinpointExportJobsResponse = TypedDict(
    'PinpointExportJobsResponse', {
        'ListOfExportJobResponse': Optional[List[PinpointExportJobResponse]],
        '__string': Optional[str],
    }
)


PinpointGetExportJobsResponse = TypedDict(
    'PinpointGetExportJobsResponse', {
        'ExportJobsResponse': PinpointExportJobsResponse,
    }
)


PinpointGetGcmChannelResponse = TypedDict(
    'PinpointGetGcmChannelResponse', {
        'GCMChannelResponse': PinpointGCMChannelResponse,
    }
)


PinpointGetImportJobResponse = TypedDict(
    'PinpointGetImportJobResponse', {
        'ImportJobResponse': PinpointImportJobResponse,
    }
)


PinpointImportJobsResponse = TypedDict(
    'PinpointImportJobsResponse', {
        'ListOfImportJobResponse': Optional[List[PinpointImportJobResponse]],
        '__string': Optional[str],
    }
)


PinpointGetImportJobsResponse = TypedDict(
    'PinpointGetImportJobsResponse', {
        'ImportJobsResponse': PinpointImportJobsResponse,
    }
)


PinpointGetSegmentResponse = TypedDict(
    'PinpointGetSegmentResponse', {
        'SegmentResponse': PinpointSegmentResponse,
    }
)


PinpointGetSegmentExportJobsResponse = TypedDict(
    'PinpointGetSegmentExportJobsResponse', {
        'ExportJobsResponse': PinpointExportJobsResponse,
    }
)


PinpointGetSegmentImportJobsResponse = TypedDict(
    'PinpointGetSegmentImportJobsResponse', {
        'ImportJobsResponse': PinpointImportJobsResponse,
    }
)


PinpointGetSegmentVersionResponse = TypedDict(
    'PinpointGetSegmentVersionResponse', {
        'SegmentResponse': PinpointSegmentResponse,
    }
)


PinpointSegmentsResponse = TypedDict(
    'PinpointSegmentsResponse', {
        'ListOfSegmentResponse': Optional[List[PinpointSegmentResponse]],
        '__string': Optional[str],
    }
)


PinpointGetSegmentVersionsResponse = TypedDict(
    'PinpointGetSegmentVersionsResponse', {
        'SegmentsResponse': PinpointSegmentsResponse,
    }
)


PinpointGetSegmentsResponse = TypedDict(
    'PinpointGetSegmentsResponse', {
        'SegmentsResponse': PinpointSegmentsResponse,
    }
)


PinpointGetSmsChannelResponse = TypedDict(
    'PinpointGetSmsChannelResponse', {
        'SMSChannelResponse': PinpointSMSChannelResponse,
    }
)


PinpointGetUserEndpointsResponse = TypedDict(
    'PinpointGetUserEndpointsResponse', {
        'EndpointsResponse': PinpointEndpointsResponse,
    }
)


PinpointGetVoiceChannelResponse = TypedDict(
    'PinpointGetVoiceChannelResponse', {
        'VoiceChannelResponse': PinpointVoiceChannelResponse,
    }
)


PinpointTagsModel = TypedDict(
    'PinpointTagsModel', {
        'MapOf__string': Dict[str, str],
    }
)


PinpointListTagsForResourceResponse = TypedDict(
    'PinpointListTagsForResourceResponse', {
        'TagsModel': PinpointTagsModel,
    }
)


PinpointNumberValidateRequest = TypedDict(
    'PinpointNumberValidateRequest', {
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointNumberValidateResponse = TypedDict(
    'PinpointNumberValidateResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointPhoneNumberValidateResponse = TypedDict(
    'PinpointPhoneNumberValidateResponse', {
        'NumberValidateResponse': PinpointNumberValidateResponse,
    }
)


PinpointWriteEventStream = TypedDict(
    'PinpointWriteEventStream', {
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointPutEventStreamResponse = TypedDict(
    'PinpointPutEventStreamResponse', {
        'EventStream': PinpointEventStream,
    }
)


PinpointPublicEndpoint = TypedDict(
    'PinpointPublicEndpoint', {
        '__string': Optional[str],
        'MapOfListOf__string': Optional[Dict[str, List[str]]],
        'ChannelType': Optional[str],
        'EndpointDemographic': Optional[PinpointEndpointDemographic],
        '__string': Optional[str],
        '__string': Optional[str],
        'EndpointLocation': Optional[PinpointEndpointLocation],
        'MapOf__double': Optional[Dict[str, float]],
        '__string': Optional[str],
        '__string': Optional[str],
        'EndpointUser': Optional[PinpointEndpointUser],
    }
)


PinpointSession = TypedDict(
    'PinpointSession', {
        '__integer': Optional[int],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointEvent = TypedDict(
    'PinpointEvent', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'MapOf__string': Optional[Dict[str, str]],
        '__string': Optional[str],
        '__string': Optional[str],
        'MapOf__double': Optional[Dict[str, float]],
        '__string': Optional[str],
        'Session': Optional[PinpointSession],
        '__string': Optional[str],
    }
)


PinpointEventsBatch = TypedDict(
    'PinpointEventsBatch', {
        'PublicEndpoint': Optional[PinpointPublicEndpoint],
        'MapOfEvent': Optional[Dict[str, PinpointEvent]],
    }
)


PinpointEventsRequest = TypedDict(
    'PinpointEventsRequest', {
        'MapOfEventsBatch': Optional[Dict[str, PinpointEventsBatch]],
    }
)


PinpointEndpointItemResponse = TypedDict(
    'PinpointEndpointItemResponse', {
        '__string': Optional[str],
        '__integer': Optional[int],
    }
)


PinpointEventItemResponse = TypedDict(
    'PinpointEventItemResponse', {
        '__string': Optional[str],
        '__integer': Optional[int],
    }
)


PinpointItemResponse = TypedDict(
    'PinpointItemResponse', {
        'EndpointItemResponse': Optional[PinpointEndpointItemResponse],
        'MapOfEventItemResponse': Optional[Dict[str, PinpointEventItemResponse]],
    }
)


PinpointEventsResponse = TypedDict(
    'PinpointEventsResponse', {
        'MapOfItemResponse': Optional[Dict[str, PinpointItemResponse]],
    }
)


PinpointPutEventsResponse = TypedDict(
    'PinpointPutEventsResponse', {
        'EventsResponse': PinpointEventsResponse,
    }
)


PinpointUpdateAttributesRequest = TypedDict(
    'PinpointUpdateAttributesRequest', {
        'ListOf__string': Optional[List[str]],
    }
)


PinpointAttributesResource = TypedDict(
    'PinpointAttributesResource', {
        '__string': Optional[str],
        '__string': Optional[str],
        'ListOf__string': Optional[List[str]],
    }
)


PinpointRemoveAttributesResponse = TypedDict(
    'PinpointRemoveAttributesResponse', {
        'AttributesResource': PinpointAttributesResource,
    }
)


PinpointAddressConfiguration = TypedDict(
    'PinpointAddressConfiguration', {
        '__string': Optional[str],
        'ChannelType': Optional[str],
        'MapOf__string': Optional[Dict[str, str]],
        '__string': Optional[str],
        'MapOfListOf__string': Optional[Dict[str, List[str]]],
        '__string': Optional[str],
    }
)


PinpointEndpointSendConfiguration = TypedDict(
    'PinpointEndpointSendConfiguration', {
        '__string': Optional[str],
        'MapOf__string': Optional[Dict[str, str]],
        '__string': Optional[str],
        'MapOfListOf__string': Optional[Dict[str, List[str]]],
        '__string': Optional[str],
    }
)


PinpointADMMessage = TypedDict(
    'PinpointADMMessage', {
        'Action': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'MapOf__string': Optional[Dict[str, str]],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__string': Optional[str],
        'MapOfListOf__string': Optional[Dict[str, List[str]]],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointAPNSMessage = TypedDict(
    'PinpointAPNSMessage', {
        'Action': Optional[str],
        '__integer': Optional[int],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'MapOf__string': Optional[Dict[str, str]],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        'MapOfListOf__string': Optional[Dict[str, List[str]]],
        '__string': Optional[str],
        '__integer': Optional[int],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointBaiduMessage = TypedDict(
    'PinpointBaiduMessage', {
        'Action': Optional[str],
        '__string': Optional[str],
        'MapOf__string': Optional[Dict[str, str]],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__string': Optional[str],
        'MapOfListOf__string': Optional[Dict[str, List[str]]],
        '__integer': Optional[int],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointDefaultMessage = TypedDict(
    'PinpointDefaultMessage', {
        '__string': Optional[str],
        'MapOfListOf__string': Optional[Dict[str, List[str]]],
    }
)


PinpointDefaultPushNotificationMessage = TypedDict(
    'PinpointDefaultPushNotificationMessage', {
        'Action': Optional[str],
        '__string': Optional[str],
        'MapOf__string': Optional[Dict[str, str]],
        '__boolean': Optional[bool],
        'MapOfListOf__string': Optional[Dict[str, List[str]]],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointRawEmail = TypedDict(
    'PinpointRawEmail', {
        '__blob': Optional[bytes],
    }
)


PinpointSimpleEmailPart = TypedDict(
    'PinpointSimpleEmailPart', {
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointSimpleEmail = TypedDict(
    'PinpointSimpleEmail', {
        'SimpleEmailPart': Optional[PinpointSimpleEmailPart],
        'SimpleEmailPart': Optional[PinpointSimpleEmailPart],
        'SimpleEmailPart': Optional[PinpointSimpleEmailPart],
    }
)


PinpointEmailMessage = TypedDict(
    'PinpointEmailMessage', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'RawEmail': Optional[PinpointRawEmail],
        'ListOf__string': Optional[List[str]],
        'SimpleEmail': Optional[PinpointSimpleEmail],
        'MapOfListOf__string': Optional[Dict[str, List[str]]],
    }
)


PinpointGCMMessage = TypedDict(
    'PinpointGCMMessage', {
        'Action': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'MapOf__string': Optional[Dict[str, str]],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__string': Optional[str],
        'MapOfListOf__string': Optional[Dict[str, List[str]]],
        '__integer': Optional[int],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointSMSMessage = TypedDict(
    'PinpointSMSMessage', {
        '__string': Optional[str],
        '__string': Optional[str],
        'MessageType': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'MapOfListOf__string': Optional[Dict[str, List[str]]],
    }
)


PinpointVoiceMessage = TypedDict(
    'PinpointVoiceMessage', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'MapOfListOf__string': Optional[Dict[str, List[str]]],
        '__string': Optional[str],
    }
)


PinpointDirectMessageConfiguration = TypedDict(
    'PinpointDirectMessageConfiguration', {
        'ADMMessage': Optional[PinpointADMMessage],
        'APNSMessage': Optional[PinpointAPNSMessage],
        'BaiduMessage': Optional[PinpointBaiduMessage],
        'DefaultMessage': Optional[PinpointDefaultMessage],
        'DefaultPushNotificationMessage': Optional[PinpointDefaultPushNotificationMessage],
        'EmailMessage': Optional[PinpointEmailMessage],
        'GCMMessage': Optional[PinpointGCMMessage],
        'SMSMessage': Optional[PinpointSMSMessage],
        'VoiceMessage': Optional[PinpointVoiceMessage],
    }
)


PinpointMessageRequest = TypedDict(
    'PinpointMessageRequest', {
        'MapOfAddressConfiguration': Optional[Dict[str, PinpointAddressConfiguration]],
        'MapOf__string': Optional[Dict[str, str]],
        'MapOfEndpointSendConfiguration': Optional[Dict[str, PinpointEndpointSendConfiguration]],
        'DirectMessageConfiguration': Optional[PinpointDirectMessageConfiguration],
        '__string': Optional[str],
    }
)


PinpointEndpointMessageResult = TypedDict(
    'PinpointEndpointMessageResult', {
        '__string': Optional[str],
        'DeliveryStatus': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointMessageResult = TypedDict(
    'PinpointMessageResult', {
        'DeliveryStatus': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointMessageResponse = TypedDict(
    'PinpointMessageResponse', {
        '__string': Optional[str],
        'MapOfEndpointMessageResult': Optional[Dict[str, PinpointEndpointMessageResult]],
        '__string': Optional[str],
        'MapOfMessageResult': Optional[Dict[str, PinpointMessageResult]],
    }
)


PinpointSendMessagesResponse = TypedDict(
    'PinpointSendMessagesResponse', {
        'MessageResponse': PinpointMessageResponse,
    }
)


PinpointSendUsersMessageRequest = TypedDict(
    'PinpointSendUsersMessageRequest', {
        'MapOf__string': Optional[Dict[str, str]],
        'DirectMessageConfiguration': Optional[PinpointDirectMessageConfiguration],
        '__string': Optional[str],
        'MapOfEndpointSendConfiguration': Optional[Dict[str, PinpointEndpointSendConfiguration]],
    }
)


PinpointSendUsersMessageResponse = TypedDict(
    'PinpointSendUsersMessageResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        'MapOfMapOfEndpointMessageResult': Optional[Dict[str, Dict[str, PinpointEndpointMessageResult]]],
    }
)


PinpointSendUsersMessagesResponse = TypedDict(
    'PinpointSendUsersMessagesResponse', {
        'SendUsersMessageResponse': PinpointSendUsersMessageResponse,
    }
)


PinpointADMChannelRequest = TypedDict(
    'PinpointADMChannelRequest', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__boolean': Optional[bool],
    }
)


PinpointUpdateAdmChannelResponse = TypedDict(
    'PinpointUpdateAdmChannelResponse', {
        'ADMChannelResponse': PinpointADMChannelResponse,
    }
)


PinpointAPNSChannelRequest = TypedDict(
    'PinpointAPNSChannelRequest', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointUpdateApnsChannelResponse = TypedDict(
    'PinpointUpdateApnsChannelResponse', {
        'APNSChannelResponse': PinpointAPNSChannelResponse,
    }
)


PinpointAPNSSandboxChannelRequest = TypedDict(
    'PinpointAPNSSandboxChannelRequest', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointUpdateApnsSandboxChannelResponse = TypedDict(
    'PinpointUpdateApnsSandboxChannelResponse', {
        'APNSSandboxChannelResponse': PinpointAPNSSandboxChannelResponse,
    }
)


PinpointAPNSVoipChannelRequest = TypedDict(
    'PinpointAPNSVoipChannelRequest', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointUpdateApnsVoipChannelResponse = TypedDict(
    'PinpointUpdateApnsVoipChannelResponse', {
        'APNSVoipChannelResponse': PinpointAPNSVoipChannelResponse,
    }
)


PinpointAPNSVoipSandboxChannelRequest = TypedDict(
    'PinpointAPNSVoipSandboxChannelRequest', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointUpdateApnsVoipSandboxChannelResponse = TypedDict(
    'PinpointUpdateApnsVoipSandboxChannelResponse', {
        'APNSVoipSandboxChannelResponse': PinpointAPNSVoipSandboxChannelResponse,
    }
)


PinpointWriteApplicationSettingsRequest = TypedDict(
    'PinpointWriteApplicationSettingsRequest', {
        'CampaignHook': Optional[PinpointCampaignHook],
        '__boolean': Optional[bool],
        'CampaignLimits': Optional[PinpointCampaignLimits],
        'QuietTime': Optional[PinpointQuietTime],
    }
)


PinpointUpdateApplicationSettingsResponse = TypedDict(
    'PinpointUpdateApplicationSettingsResponse', {
        'ApplicationSettingsResource': PinpointApplicationSettingsResource,
    }
)


PinpointBaiduChannelRequest = TypedDict(
    'PinpointBaiduChannelRequest', {
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
    }
)


PinpointUpdateBaiduChannelResponse = TypedDict(
    'PinpointUpdateBaiduChannelResponse', {
        'BaiduChannelResponse': PinpointBaiduChannelResponse,
    }
)


PinpointUpdateCampaignResponse = TypedDict(
    'PinpointUpdateCampaignResponse', {
        'CampaignResponse': PinpointCampaignResponse,
    }
)


PinpointEmailChannelRequest = TypedDict(
    'PinpointEmailChannelRequest', {
        '__string': Optional[str],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointUpdateEmailChannelResponse = TypedDict(
    'PinpointUpdateEmailChannelResponse', {
        'EmailChannelResponse': PinpointEmailChannelResponse,
    }
)


PinpointEndpointRequest = TypedDict(
    'PinpointEndpointRequest', {
        '__string': Optional[str],
        'MapOfListOf__string': Optional[Dict[str, List[str]]],
        'ChannelType': Optional[str],
        'EndpointDemographic': Optional[PinpointEndpointDemographic],
        '__string': Optional[str],
        '__string': Optional[str],
        'EndpointLocation': Optional[PinpointEndpointLocation],
        'MapOf__double': Optional[Dict[str, float]],
        '__string': Optional[str],
        '__string': Optional[str],
        'EndpointUser': Optional[PinpointEndpointUser],
    }
)


PinpointMessageBody = TypedDict(
    'PinpointMessageBody', {
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointUpdateEndpointResponse = TypedDict(
    'PinpointUpdateEndpointResponse', {
        'MessageBody': PinpointMessageBody,
    }
)


PinpointEndpointBatchItem = TypedDict(
    'PinpointEndpointBatchItem', {
        '__string': Optional[str],
        'MapOfListOf__string': Optional[Dict[str, List[str]]],
        'ChannelType': Optional[str],
        'EndpointDemographic': Optional[PinpointEndpointDemographic],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'EndpointLocation': Optional[PinpointEndpointLocation],
        'MapOf__double': Optional[Dict[str, float]],
        '__string': Optional[str],
        '__string': Optional[str],
        'EndpointUser': Optional[PinpointEndpointUser],
    }
)


PinpointEndpointBatchRequest = TypedDict(
    'PinpointEndpointBatchRequest', {
        'ListOfEndpointBatchItem': Optional[List[PinpointEndpointBatchItem]],
    }
)


PinpointUpdateEndpointsBatchResponse = TypedDict(
    'PinpointUpdateEndpointsBatchResponse', {
        'MessageBody': PinpointMessageBody,
    }
)


PinpointGCMChannelRequest = TypedDict(
    'PinpointGCMChannelRequest', {
        '__string': Optional[str],
        '__boolean': Optional[bool],
    }
)


PinpointUpdateGcmChannelResponse = TypedDict(
    'PinpointUpdateGcmChannelResponse', {
        'GCMChannelResponse': PinpointGCMChannelResponse,
    }
)


PinpointUpdateSegmentResponse = TypedDict(
    'PinpointUpdateSegmentResponse', {
        'SegmentResponse': PinpointSegmentResponse,
    }
)


PinpointSMSChannelRequest = TypedDict(
    'PinpointSMSChannelRequest', {
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


PinpointUpdateSmsChannelResponse = TypedDict(
    'PinpointUpdateSmsChannelResponse', {
        'SMSChannelResponse': PinpointSMSChannelResponse,
    }
)


PinpointVoiceChannelRequest = TypedDict(
    'PinpointVoiceChannelRequest', {
        '__boolean': Optional[bool],
    }
)


PinpointUpdateVoiceChannelResponse = TypedDict(
    'PinpointUpdateVoiceChannelResponse', {
        'VoiceChannelResponse': PinpointVoiceChannelResponse,
    }
)


class PinpointEmail(BaseClient):
    def create_configuration_set(self, *,
        ConfigurationSetName: str = ...,
        TrackingOptions: PinpointEmailTrackingOptions = ...,
        DeliveryOptions: PinpointEmailDeliveryOptions = ...,
        ReputationOptions: PinpointEmailReputationOptions = ...,
        SendingOptions: PinpointEmailSendingOptions = ...,
        Tags: List[PinpointEmailTag] = ...
    ) -> PinpointEmailCreateConfigurationSetResponse: ...

    def create_configuration_set_event_destination(self, *,
        ConfigurationSetName: str,
        EventDestinationName: str,
        EventDestination: PinpointEmailEventDestinationDefinition
    ) -> PinpointEmailCreateConfigurationSetEventDestinationResponse: ...

    def create_dedicated_ip_pool(self, *,
        PoolName: str,
        Tags: List[PinpointEmailTag] = ...
    ) -> PinpointEmailCreateDedicatedIpPoolResponse: ...

    def create_deliverability_test_report(self, *,
        FromEmailAddress: str,
        Content: PinpointEmailEmailContent,
        ReportName: str = ...,
        Tags: List[PinpointEmailTag] = ...
    ) -> PinpointEmailCreateDeliverabilityTestReportResponse: ...

    def create_email_identity(self, *,
        EmailIdentity: str,
        Tags: List[PinpointEmailTag] = ...
    ) -> PinpointEmailCreateEmailIdentityResponse: ...

    def delete_configuration_set(self, *,
        ConfigurationSetName: str
    ) -> PinpointEmailDeleteConfigurationSetResponse: ...

    def delete_configuration_set_event_destination(self, *,
        ConfigurationSetName: str,
        EventDestinationName: str
    ) -> PinpointEmailDeleteConfigurationSetEventDestinationResponse: ...

    def delete_dedicated_ip_pool(self, *,
        PoolName: str
    ) -> PinpointEmailDeleteDedicatedIpPoolResponse: ...

    def delete_email_identity(self, *,
        EmailIdentity: str
    ) -> PinpointEmailDeleteEmailIdentityResponse: ...

    def get_account(self) -> PinpointEmailGetAccountResponse: ...

    def get_blacklist_reports(self, *,
        BlacklistItemNames: List[str]
    ) -> PinpointEmailGetBlacklistReportsResponse: ...

    def get_configuration_set(self, *,
        ConfigurationSetName: str
    ) -> PinpointEmailGetConfigurationSetResponse: ...

    def get_configuration_set_event_destinations(self, *,
        ConfigurationSetName: str
    ) -> PinpointEmailGetConfigurationSetEventDestinationsResponse: ...

    def get_dedicated_ip(self, *,
        Ip: str
    ) -> PinpointEmailGetDedicatedIpResponse: ...

    def get_dedicated_ips(self, *,
        PoolName: str = ...,
        NextToken: str = ...,
        PageSize: int = ...
    ) -> PinpointEmailGetDedicatedIpsResponse: ...

    def get_deliverability_dashboard_options(self) -> PinpointEmailGetDeliverabilityDashboardOptionsResponse: ...

    def get_deliverability_test_report(self, *,
        ReportId: str
    ) -> PinpointEmailGetDeliverabilityTestReportResponse: ...

    def get_domain_statistics_report(self, *,
        Domain: str,
        StartDate: datetime.datetime,
        EndDate: datetime.datetime
    ) -> PinpointEmailGetDomainStatisticsReportResponse: ...

    def get_email_identity(self, *,
        EmailIdentity: str
    ) -> PinpointEmailGetEmailIdentityResponse: ...

    def list_configuration_sets(self, *,
        NextToken: str = ...,
        PageSize: int = ...
    ) -> PinpointEmailListConfigurationSetsResponse: ...

    def list_dedicated_ip_pools(self, *,
        NextToken: str = ...,
        PageSize: int = ...
    ) -> PinpointEmailListDedicatedIpPoolsResponse: ...

    def list_deliverability_test_reports(self, *,
        NextToken: str = ...,
        PageSize: int = ...
    ) -> PinpointEmailListDeliverabilityTestReportsResponse: ...

    def list_email_identities(self, *,
        NextToken: str = ...,
        PageSize: int = ...
    ) -> PinpointEmailListEmailIdentitiesResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> PinpointEmailListTagsForResourceResponse: ...

    def put_account_dedicated_ip_warmup_attributes(self, *,
        AutoWarmupEnabled: bool = ...
    ) -> PinpointEmailPutAccountDedicatedIpWarmupAttributesResponse: ...

    def put_account_sending_attributes(self, *,
        SendingEnabled: bool = ...
    ) -> PinpointEmailPutAccountSendingAttributesResponse: ...

    def put_configuration_set_delivery_options(self, *,
        ConfigurationSetName: str,
        SendingPoolName: str = ...
    ) -> PinpointEmailPutConfigurationSetDeliveryOptionsResponse: ...

    def put_configuration_set_reputation_options(self, *,
        ConfigurationSetName: str,
        ReputationMetricsEnabled: bool = ...
    ) -> PinpointEmailPutConfigurationSetReputationOptionsResponse: ...

    def put_configuration_set_sending_options(self, *,
        ConfigurationSetName: str,
        SendingEnabled: bool = ...
    ) -> PinpointEmailPutConfigurationSetSendingOptionsResponse: ...

    def put_configuration_set_tracking_options(self, *,
        ConfigurationSetName: str,
        CustomRedirectDomain: str = ...
    ) -> PinpointEmailPutConfigurationSetTrackingOptionsResponse: ...

    def put_dedicated_ip_in_pool(self, *,
        Ip: str,
        DestinationPoolName: str
    ) -> PinpointEmailPutDedicatedIpInPoolResponse: ...

    def put_dedicated_ip_warmup_attributes(self, *,
        Ip: str,
        WarmupPercentage: int
    ) -> PinpointEmailPutDedicatedIpWarmupAttributesResponse: ...

    def put_deliverability_dashboard_option(self, *,
        DashboardEnabled: bool
    ) -> PinpointEmailPutDeliverabilityDashboardOptionResponse: ...

    def put_email_identity_dkim_attributes(self, *,
        EmailIdentity: str,
        SigningEnabled: bool = ...
    ) -> PinpointEmailPutEmailIdentityDkimAttributesResponse: ...

    def put_email_identity_feedback_attributes(self, *,
        EmailIdentity: str,
        EmailForwardingEnabled: bool = ...
    ) -> PinpointEmailPutEmailIdentityFeedbackAttributesResponse: ...

    def put_email_identity_mail_from_attributes(self, *,
        EmailIdentity: str,
        MailFromDomain: str = ...,
        BehaviorOnMxFailure: str = ...
    ) -> PinpointEmailPutEmailIdentityMailFromAttributesResponse: ...

    def send_email(self, *,
        Destination: PinpointEmailDestination,
        Content: PinpointEmailEmailContent,
        FromEmailAddress: str = ...,
        ReplyToAddresses: List[str] = ...,
        FeedbackForwardingEmailAddress: str = ...,
        EmailTags: List[PinpointEmailMessageTag] = ...,
        ConfigurationSetName: str = ...
    ) -> PinpointEmailSendEmailResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: List[PinpointEmailTag]
    ) -> PinpointEmailTagResourceResponse: ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ) -> PinpointEmailUntagResourceResponse: ...

    def update_configuration_set_event_destination(self, *,
        ConfigurationSetName: str,
        EventDestinationName: str,
        EventDestination: PinpointEmailEventDestinationDefinition
    ) -> PinpointEmailUpdateConfigurationSetEventDestinationResponse: ...


PinpointEmailTrackingOptions = TypedDict(
    'PinpointEmailTrackingOptions', {
        'CustomRedirectDomain': str,
    }
)


PinpointEmailDeliveryOptions = TypedDict(
    'PinpointEmailDeliveryOptions', {
        'PoolName': Optional[str],
    }
)


PinpointEmailReputationOptions = TypedDict(
    'PinpointEmailReputationOptions', {
        'Enabled': Optional[bool],
        'LastFreshStart': Optional[datetime.datetime],
    }
)


PinpointEmailSendingOptions = TypedDict(
    'PinpointEmailSendingOptions', {
        'Enabled': Optional[bool],
    }
)


PinpointEmailTag = TypedDict(
    'PinpointEmailTag', {
        'TagKey': str,
        'TagValue': str,
    }
)


PinpointEmailCreateConfigurationSetResponse = TypedDict(
    'PinpointEmailCreateConfigurationSetResponse', {
    }
)


PinpointEmailKinesisFirehoseDestination = TypedDict(
    'PinpointEmailKinesisFirehoseDestination', {
        'AmazonResourceName': str,
        'AmazonResourceName': str,
    }
)


PinpointEmailCloudWatchDimensionConfiguration = TypedDict(
    'PinpointEmailCloudWatchDimensionConfiguration', {
        'DimensionName': str,
        'DimensionValueSource': str,
        'DefaultDimensionValue': str,
    }
)


PinpointEmailCloudWatchDestination = TypedDict(
    'PinpointEmailCloudWatchDestination', {
        'CloudWatchDimensionConfigurations': List[PinpointEmailCloudWatchDimensionConfiguration],
    }
)


PinpointEmailSnsDestination = TypedDict(
    'PinpointEmailSnsDestination', {
        'AmazonResourceName': str,
    }
)


PinpointEmailPinpointDestination = TypedDict(
    'PinpointEmailPinpointDestination', {
        'AmazonResourceName': Optional[str],
    }
)


PinpointEmailEventDestinationDefinition = TypedDict(
    'PinpointEmailEventDestinationDefinition', {
        'Enabled': Optional[bool],
        'EventTypes': Optional[List[str]],
        'KinesisFirehoseDestination': Optional[PinpointEmailKinesisFirehoseDestination],
        'CloudWatchDestination': Optional[PinpointEmailCloudWatchDestination],
        'SnsDestination': Optional[PinpointEmailSnsDestination],
        'PinpointDestination': Optional[PinpointEmailPinpointDestination],
    }
)


PinpointEmailCreateConfigurationSetEventDestinationResponse = TypedDict(
    'PinpointEmailCreateConfigurationSetEventDestinationResponse', {
    }
)


PinpointEmailCreateDedicatedIpPoolResponse = TypedDict(
    'PinpointEmailCreateDedicatedIpPoolResponse', {
    }
)


PinpointEmailContent = TypedDict(
    'PinpointEmailContent', {
        'MessageData': str,
        'Charset': Optional[str],
    }
)


PinpointEmailBody = TypedDict(
    'PinpointEmailBody', {
        'Content': Optional[PinpointEmailContent],
        'Content': Optional[PinpointEmailContent],
    }
)


PinpointEmailMessage = TypedDict(
    'PinpointEmailMessage', {
        'Content': PinpointEmailContent,
        'Body': PinpointEmailBody,
    }
)


PinpointEmailRawMessage = TypedDict(
    'PinpointEmailRawMessage', {
        'RawMessageData': bytes,
    }
)


PinpointEmailEmailContent = TypedDict(
    'PinpointEmailEmailContent', {
        'Message': Optional[PinpointEmailMessage],
        'RawMessage': Optional[PinpointEmailRawMessage],
    }
)


PinpointEmailCreateDeliverabilityTestReportResponse = TypedDict(
    'PinpointEmailCreateDeliverabilityTestReportResponse', {
        'ReportId': str,
        'DeliverabilityTestStatus': str,
    }
)


PinpointEmailDkimAttributes = TypedDict(
    'PinpointEmailDkimAttributes', {
        'Enabled': Optional[bool],
        'DkimStatus': Optional[str],
        'DnsTokenList': Optional[List[str]],
    }
)


PinpointEmailCreateEmailIdentityResponse = TypedDict(
    'PinpointEmailCreateEmailIdentityResponse', {
        'IdentityType': Optional[str],
        'Enabled': Optional[bool],
        'DkimAttributes': Optional[PinpointEmailDkimAttributes],
    }
)


PinpointEmailDeleteConfigurationSetResponse = TypedDict(
    'PinpointEmailDeleteConfigurationSetResponse', {
    }
)


PinpointEmailDeleteConfigurationSetEventDestinationResponse = TypedDict(
    'PinpointEmailDeleteConfigurationSetEventDestinationResponse', {
    }
)


PinpointEmailDeleteDedicatedIpPoolResponse = TypedDict(
    'PinpointEmailDeleteDedicatedIpPoolResponse', {
    }
)


PinpointEmailDeleteEmailIdentityResponse = TypedDict(
    'PinpointEmailDeleteEmailIdentityResponse', {
    }
)


PinpointEmailSendQuota = TypedDict(
    'PinpointEmailSendQuota', {
        'Max24HourSend': Optional[float],
        'MaxSendRate': Optional[float],
        'SentLast24Hours': Optional[float],
    }
)


PinpointEmailGetAccountResponse = TypedDict(
    'PinpointEmailGetAccountResponse', {
        'SendQuota': Optional[PinpointEmailSendQuota],
        'Enabled': Optional[bool],
        'Enabled': Optional[bool],
        'GeneralEnforcementStatus': Optional[str],
        'Enabled': Optional[bool],
    }
)


PinpointEmailBlacklistEntry = TypedDict(
    'PinpointEmailBlacklistEntry', {
        'RblName': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'BlacklistingDescription': Optional[str],
    }
)


PinpointEmailGetBlacklistReportsResponse = TypedDict(
    'PinpointEmailGetBlacklistReportsResponse', {
        'BlacklistReport': Dict[str, List[PinpointEmailBlacklistEntry]],
    }
)


PinpointEmailGetConfigurationSetResponse = TypedDict(
    'PinpointEmailGetConfigurationSetResponse', {
        'ConfigurationSetName': Optional[str],
        'TrackingOptions': Optional[PinpointEmailTrackingOptions],
        'DeliveryOptions': Optional[PinpointEmailDeliveryOptions],
        'ReputationOptions': Optional[PinpointEmailReputationOptions],
        'SendingOptions': Optional[PinpointEmailSendingOptions],
    }
)


PinpointEmailEventDestination = TypedDict(
    'PinpointEmailEventDestination', {
        'EventDestinationName': str,
        'EventTypes': List[str],
        'Enabled': Optional[bool],
        'KinesisFirehoseDestination': Optional[PinpointEmailKinesisFirehoseDestination],
        'CloudWatchDestination': Optional[PinpointEmailCloudWatchDestination],
        'SnsDestination': Optional[PinpointEmailSnsDestination],
        'PinpointDestination': Optional[PinpointEmailPinpointDestination],
    }
)


PinpointEmailGetConfigurationSetEventDestinationsResponse = TypedDict(
    'PinpointEmailGetConfigurationSetEventDestinationsResponse', {
        'EventDestinations': Optional[List[PinpointEmailEventDestination]],
    }
)


PinpointEmailDedicatedIp = TypedDict(
    'PinpointEmailDedicatedIp', {
        'Ip': str,
        'WarmupStatus': str,
        'Percentage100Wrapper': int,
        'PoolName': Optional[str],
    }
)


PinpointEmailGetDedicatedIpResponse = TypedDict(
    'PinpointEmailGetDedicatedIpResponse', {
        'DedicatedIp': Optional[PinpointEmailDedicatedIp],
    }
)


PinpointEmailGetDedicatedIpsResponse = TypedDict(
    'PinpointEmailGetDedicatedIpsResponse', {
        'DedicatedIpList': Optional[List[PinpointEmailDedicatedIp]],
        'NextToken': Optional[str],
    }
)


PinpointEmailGetDeliverabilityDashboardOptionsResponse = TypedDict(
    'PinpointEmailGetDeliverabilityDashboardOptionsResponse', {
        'Enabled': bool,
    }
)


PinpointEmailDeliverabilityTestReport = TypedDict(
    'PinpointEmailDeliverabilityTestReport', {
        'ReportId': Optional[str],
        'ReportName': Optional[str],
        'DeliverabilityTestSubject': Optional[str],
        'EmailAddress': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'DeliverabilityTestStatus': Optional[str],
    }
)


PinpointEmailPlacementStatistics = TypedDict(
    'PinpointEmailPlacementStatistics', {
        'Percentage': Optional[float],
        'Percentage': Optional[float],
        'Percentage': Optional[float],
        'Percentage': Optional[float],
        'Percentage': Optional[float],
    }
)


PinpointEmailIspPlacement = TypedDict(
    'PinpointEmailIspPlacement', {
        'IspName': Optional[str],
        'PlacementStatistics': Optional[PinpointEmailPlacementStatistics],
    }
)


PinpointEmailGetDeliverabilityTestReportResponse = TypedDict(
    'PinpointEmailGetDeliverabilityTestReportResponse', {
        'DeliverabilityTestReport': PinpointEmailDeliverabilityTestReport,
        'PlacementStatistics': PinpointEmailPlacementStatistics,
        'IspPlacements': List[PinpointEmailIspPlacement],
        'MessageContent': Optional[str],
    }
)


PinpointEmailVolumeStatistics = TypedDict(
    'PinpointEmailVolumeStatistics', {
        'Volume': Optional[int],
        'Volume': Optional[int],
        'Volume': Optional[int],
        'Volume': Optional[int],
    }
)


PinpointEmailDomainIspPlacement = TypedDict(
    'PinpointEmailDomainIspPlacement', {
        'IspName': Optional[str],
        'Volume': Optional[int],
        'Volume': Optional[int],
        'Percentage': Optional[float],
        'Percentage': Optional[float],
    }
)


PinpointEmailOverallVolume = TypedDict(
    'PinpointEmailOverallVolume', {
        'VolumeStatistics': Optional[PinpointEmailVolumeStatistics],
        'Percentage': Optional[float],
        'DomainIspPlacements': Optional[List[PinpointEmailDomainIspPlacement]],
    }
)


PinpointEmailDailyVolume = TypedDict(
    'PinpointEmailDailyVolume', {
        'Timestamp': Optional[datetime.datetime],
        'VolumeStatistics': Optional[PinpointEmailVolumeStatistics],
        'DomainIspPlacements': Optional[List[PinpointEmailDomainIspPlacement]],
    }
)


PinpointEmailGetDomainStatisticsReportResponse = TypedDict(
    'PinpointEmailGetDomainStatisticsReportResponse', {
        'OverallVolume': PinpointEmailOverallVolume,
        'DailyVolumes': List[PinpointEmailDailyVolume],
    }
)


PinpointEmailMailFromAttributes = TypedDict(
    'PinpointEmailMailFromAttributes', {
        'MailFromDomainName': str,
        'MailFromDomainStatus': str,
        'BehaviorOnMxFailure': str,
    }
)


PinpointEmailGetEmailIdentityResponse = TypedDict(
    'PinpointEmailGetEmailIdentityResponse', {
        'IdentityType': Optional[str],
        'Enabled': Optional[bool],
        'Enabled': Optional[bool],
        'DkimAttributes': Optional[PinpointEmailDkimAttributes],
        'MailFromAttributes': Optional[PinpointEmailMailFromAttributes],
    }
)


PinpointEmailListConfigurationSetsResponse = TypedDict(
    'PinpointEmailListConfigurationSetsResponse', {
        'ConfigurationSetNameList': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


PinpointEmailListDedicatedIpPoolsResponse = TypedDict(
    'PinpointEmailListDedicatedIpPoolsResponse', {
        'ListOfDedicatedIpPools': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


PinpointEmailListDeliverabilityTestReportsResponse = TypedDict(
    'PinpointEmailListDeliverabilityTestReportsResponse', {
        'DeliverabilityTestReports': List[PinpointEmailDeliverabilityTestReport],
        'NextToken': Optional[str],
    }
)


PinpointEmailIdentityInfo = TypedDict(
    'PinpointEmailIdentityInfo', {
        'IdentityType': Optional[str],
        'Identity': Optional[str],
        'Enabled': Optional[bool],
    }
)


PinpointEmailListEmailIdentitiesResponse = TypedDict(
    'PinpointEmailListEmailIdentitiesResponse', {
        'IdentityInfoList': Optional[List[PinpointEmailIdentityInfo]],
        'NextToken': Optional[str],
    }
)


PinpointEmailListTagsForResourceResponse = TypedDict(
    'PinpointEmailListTagsForResourceResponse', {
        'TagList': List[PinpointEmailTag],
    }
)


PinpointEmailPutAccountDedicatedIpWarmupAttributesResponse = TypedDict(
    'PinpointEmailPutAccountDedicatedIpWarmupAttributesResponse', {
    }
)


PinpointEmailPutAccountSendingAttributesResponse = TypedDict(
    'PinpointEmailPutAccountSendingAttributesResponse', {
    }
)


PinpointEmailPutConfigurationSetDeliveryOptionsResponse = TypedDict(
    'PinpointEmailPutConfigurationSetDeliveryOptionsResponse', {
    }
)


PinpointEmailPutConfigurationSetReputationOptionsResponse = TypedDict(
    'PinpointEmailPutConfigurationSetReputationOptionsResponse', {
    }
)


PinpointEmailPutConfigurationSetSendingOptionsResponse = TypedDict(
    'PinpointEmailPutConfigurationSetSendingOptionsResponse', {
    }
)


PinpointEmailPutConfigurationSetTrackingOptionsResponse = TypedDict(
    'PinpointEmailPutConfigurationSetTrackingOptionsResponse', {
    }
)


PinpointEmailPutDedicatedIpInPoolResponse = TypedDict(
    'PinpointEmailPutDedicatedIpInPoolResponse', {
    }
)


PinpointEmailPutDedicatedIpWarmupAttributesResponse = TypedDict(
    'PinpointEmailPutDedicatedIpWarmupAttributesResponse', {
    }
)


PinpointEmailPutDeliverabilityDashboardOptionResponse = TypedDict(
    'PinpointEmailPutDeliverabilityDashboardOptionResponse', {
    }
)


PinpointEmailPutEmailIdentityDkimAttributesResponse = TypedDict(
    'PinpointEmailPutEmailIdentityDkimAttributesResponse', {
    }
)


PinpointEmailPutEmailIdentityFeedbackAttributesResponse = TypedDict(
    'PinpointEmailPutEmailIdentityFeedbackAttributesResponse', {
    }
)


PinpointEmailPutEmailIdentityMailFromAttributesResponse = TypedDict(
    'PinpointEmailPutEmailIdentityMailFromAttributesResponse', {
    }
)


PinpointEmailDestination = TypedDict(
    'PinpointEmailDestination', {
        'EmailAddressList': Optional[List[str]],
        'EmailAddressList': Optional[List[str]],
        'EmailAddressList': Optional[List[str]],
    }
)


PinpointEmailMessageTag = TypedDict(
    'PinpointEmailMessageTag', {
        'MessageTagName': str,
        'MessageTagValue': str,
    }
)


PinpointEmailSendEmailResponse = TypedDict(
    'PinpointEmailSendEmailResponse', {
        'OutboundMessageId': Optional[str],
    }
)


PinpointEmailTagResourceResponse = TypedDict(
    'PinpointEmailTagResourceResponse', {
    }
)


PinpointEmailUntagResourceResponse = TypedDict(
    'PinpointEmailUntagResourceResponse', {
    }
)


PinpointEmailUpdateConfigurationSetEventDestinationResponse = TypedDict(
    'PinpointEmailUpdateConfigurationSetEventDestinationResponse', {
    }
)


class PinpointSMSVoice(BaseClient):
    def create_configuration_set(self, *,
        ConfigurationSetName: str = ...
    ) -> PinpointSMSVoiceCreateConfigurationSetResponse: ...

    def create_configuration_set_event_destination(self, *,
        ConfigurationSetName: str,
        EventDestination: PinpointSMSVoiceEventDestinationDefinition = ...,
        EventDestinationName: str = ...
    ) -> PinpointSMSVoiceCreateConfigurationSetEventDestinationResponse: ...

    def delete_configuration_set(self, *,
        ConfigurationSetName: str
    ) -> PinpointSMSVoiceDeleteConfigurationSetResponse: ...

    def delete_configuration_set_event_destination(self, *,
        ConfigurationSetName: str,
        EventDestinationName: str
    ) -> PinpointSMSVoiceDeleteConfigurationSetEventDestinationResponse: ...

    def get_configuration_set_event_destinations(self, *,
        ConfigurationSetName: str
    ) -> PinpointSMSVoiceGetConfigurationSetEventDestinationsResponse: ...

    def send_voice_message(self, *,
        CallerId: str = ...,
        ConfigurationSetName: str = ...,
        Content: PinpointSMSVoiceVoiceMessageContent = ...,
        DestinationPhoneNumber: str = ...,
        OriginationPhoneNumber: str = ...
    ) -> PinpointSMSVoiceSendVoiceMessageResponse: ...

    def update_configuration_set_event_destination(self, *,
        ConfigurationSetName: str,
        EventDestinationName: str,
        EventDestination: PinpointSMSVoiceEventDestinationDefinition = ...
    ) -> PinpointSMSVoiceUpdateConfigurationSetEventDestinationResponse: ...


PinpointSMSVoiceCreateConfigurationSetResponse = TypedDict(
    'PinpointSMSVoiceCreateConfigurationSetResponse', {
    }
)


PinpointSMSVoiceCloudWatchLogsDestination = TypedDict(
    'PinpointSMSVoiceCloudWatchLogsDestination', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


PinpointSMSVoiceKinesisFirehoseDestination = TypedDict(
    'PinpointSMSVoiceKinesisFirehoseDestination', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


PinpointSMSVoiceSnsDestination = TypedDict(
    'PinpointSMSVoiceSnsDestination', {
        'String': Optional[str],
    }
)


PinpointSMSVoiceEventDestinationDefinition = TypedDict(
    'PinpointSMSVoiceEventDestinationDefinition', {
        'CloudWatchLogsDestination': Optional[PinpointSMSVoiceCloudWatchLogsDestination],
        'Boolean': Optional[bool],
        'KinesisFirehoseDestination': Optional[PinpointSMSVoiceKinesisFirehoseDestination],
        'EventTypes': Optional[List[str]],
        'SnsDestination': Optional[PinpointSMSVoiceSnsDestination],
    }
)


PinpointSMSVoiceCreateConfigurationSetEventDestinationResponse = TypedDict(
    'PinpointSMSVoiceCreateConfigurationSetEventDestinationResponse', {
    }
)


PinpointSMSVoiceDeleteConfigurationSetResponse = TypedDict(
    'PinpointSMSVoiceDeleteConfigurationSetResponse', {
    }
)


PinpointSMSVoiceDeleteConfigurationSetEventDestinationResponse = TypedDict(
    'PinpointSMSVoiceDeleteConfigurationSetEventDestinationResponse', {
    }
)


PinpointSMSVoiceEventDestination = TypedDict(
    'PinpointSMSVoiceEventDestination', {
        'CloudWatchLogsDestination': Optional[PinpointSMSVoiceCloudWatchLogsDestination],
        'Boolean': Optional[bool],
        'KinesisFirehoseDestination': Optional[PinpointSMSVoiceKinesisFirehoseDestination],
        'EventTypes': Optional[List[str]],
        'String': Optional[str],
        'SnsDestination': Optional[PinpointSMSVoiceSnsDestination],
    }
)


PinpointSMSVoiceGetConfigurationSetEventDestinationsResponse = TypedDict(
    'PinpointSMSVoiceGetConfigurationSetEventDestinationsResponse', {
        'EventDestinations': Optional[List[PinpointSMSVoiceEventDestination]],
    }
)


PinpointSMSVoiceCallInstructionsMessageType = TypedDict(
    'PinpointSMSVoiceCallInstructionsMessageType', {
        'NonEmptyString': Optional[str],
    }
)


PinpointSMSVoicePlainTextMessageType = TypedDict(
    'PinpointSMSVoicePlainTextMessageType', {
        'String': Optional[str],
        'NonEmptyString': Optional[str],
        'String': Optional[str],
    }
)


PinpointSMSVoiceSSMLMessageType = TypedDict(
    'PinpointSMSVoiceSSMLMessageType', {
        'String': Optional[str],
        'NonEmptyString': Optional[str],
        'String': Optional[str],
    }
)


PinpointSMSVoiceVoiceMessageContent = TypedDict(
    'PinpointSMSVoiceVoiceMessageContent', {
        'CallInstructionsMessageType': Optional[PinpointSMSVoiceCallInstructionsMessageType],
        'PlainTextMessageType': Optional[PinpointSMSVoicePlainTextMessageType],
        'SSMLMessageType': Optional[PinpointSMSVoiceSSMLMessageType],
    }
)


PinpointSMSVoiceSendVoiceMessageResponse = TypedDict(
    'PinpointSMSVoiceSendVoiceMessageResponse', {
        'String': Optional[str],
    }
)


PinpointSMSVoiceUpdateConfigurationSetEventDestinationResponse = TypedDict(
    'PinpointSMSVoiceUpdateConfigurationSetEventDestinationResponse', {
    }
)


class Polly(BaseClient):
    def delete_lexicon(self, *,
        Name: str
    ) -> PollyDeleteLexiconOutput: ...

    def describe_voices(self, *,
        LanguageCode: str = ...,
        IncludeAdditionalLanguageCodes: bool = ...,
        NextToken: str = ...
    ) -> PollyDescribeVoicesOutput: ...

    def get_lexicon(self, *,
        Name: str
    ) -> PollyGetLexiconOutput: ...

    def get_speech_synthesis_task(self, *,
        TaskId: str
    ) -> PollyGetSpeechSynthesisTaskOutput: ...

    def list_lexicons(self, *,
        NextToken: str = ...
    ) -> PollyListLexiconsOutput: ...

    def list_speech_synthesis_tasks(self, *,
        MaxResults: int = ...,
        NextToken: str = ...,
        Status: str = ...
    ) -> PollyListSpeechSynthesisTasksOutput: ...

    def put_lexicon(self, *,
        Name: str,
        Content: str
    ) -> PollyPutLexiconOutput: ...

    def start_speech_synthesis_task(self, *,
        OutputFormat: str,
        OutputS3BucketName: str,
        Text: str,
        VoiceId: str,
        LexiconNames: List[str] = ...,
        OutputS3KeyPrefix: str = ...,
        SampleRate: str = ...,
        SnsTopicArn: str = ...,
        SpeechMarkTypes: List[str] = ...,
        TextType: str = ...,
        LanguageCode: str = ...
    ) -> PollyStartSpeechSynthesisTaskOutput: ...

    def synthesize_speech(self, *,
        OutputFormat: str,
        Text: str,
        VoiceId: str,
        LexiconNames: List[str] = ...,
        SampleRate: str = ...,
        SpeechMarkTypes: List[str] = ...,
        TextType: str = ...,
        LanguageCode: str = ...
    ) -> PollySynthesizeSpeechOutput: ...


PollyDeleteLexiconOutput = TypedDict(
    'PollyDeleteLexiconOutput', {
    }
)


PollyVoice = TypedDict(
    'PollyVoice', {
        'Gender': Optional[str],
        'VoiceId': Optional[str],
        'LanguageCode': Optional[str],
        'LanguageName': Optional[str],
        'VoiceName': Optional[str],
        'LanguageCodeList': Optional[List[str]],
    }
)


PollyDescribeVoicesOutput = TypedDict(
    'PollyDescribeVoicesOutput', {
        'VoiceList': Optional[List[PollyVoice]],
        'NextToken': Optional[str],
    }
)


PollyLexicon = TypedDict(
    'PollyLexicon', {
        'LexiconContent': Optional[str],
        'LexiconName': Optional[str],
    }
)


PollyLexiconAttributes = TypedDict(
    'PollyLexiconAttributes', {
        'Alphabet': Optional[str],
        'LanguageCode': Optional[str],
        'LastModified': Optional[datetime.datetime],
        'LexiconArn': Optional[str],
        'LexemesCount': Optional[int],
        'Size': Optional[int],
    }
)


PollyGetLexiconOutput = TypedDict(
    'PollyGetLexiconOutput', {
        'Lexicon': Optional[PollyLexicon],
        'LexiconAttributes': Optional[PollyLexiconAttributes],
    }
)


PollySynthesisTask = TypedDict(
    'PollySynthesisTask', {
        'TaskId': Optional[str],
        'TaskStatus': Optional[str],
        'TaskStatusReason': Optional[str],
        'OutputUri': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'RequestCharacters': Optional[int],
        'SnsTopicArn': Optional[str],
        'LexiconNameList': Optional[List[str]],
        'OutputFormat': Optional[str],
        'SampleRate': Optional[str],
        'SpeechMarkTypeList': Optional[List[str]],
        'TextType': Optional[str],
        'VoiceId': Optional[str],
        'LanguageCode': Optional[str],
    }
)


PollyGetSpeechSynthesisTaskOutput = TypedDict(
    'PollyGetSpeechSynthesisTaskOutput', {
        'SynthesisTask': Optional[PollySynthesisTask],
    }
)


PollyLexiconDescription = TypedDict(
    'PollyLexiconDescription', {
        'LexiconName': Optional[str],
        'LexiconAttributes': Optional[PollyLexiconAttributes],
    }
)


PollyListLexiconsOutput = TypedDict(
    'PollyListLexiconsOutput', {
        'LexiconDescriptionList': Optional[List[PollyLexiconDescription]],
        'NextToken': Optional[str],
    }
)


PollyListSpeechSynthesisTasksOutput = TypedDict(
    'PollyListSpeechSynthesisTasksOutput', {
        'NextToken': Optional[str],
        'SynthesisTasks': Optional[List[PollySynthesisTask]],
    }
)


PollyPutLexiconOutput = TypedDict(
    'PollyPutLexiconOutput', {
    }
)


PollyStartSpeechSynthesisTaskOutput = TypedDict(
    'PollyStartSpeechSynthesisTaskOutput', {
        'SynthesisTask': Optional[PollySynthesisTask],
    }
)


PollySynthesizeSpeechOutput = TypedDict(
    'PollySynthesizeSpeechOutput', {
        'AudioStream': Optional[bytes],
        'ContentType': Optional[str],
        'RequestCharacters': Optional[int],
    }
)


class Pricing(BaseClient):
    def describe_services(self, *,
        ServiceCode: str = ...,
        FormatVersion: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> PricingDescribeServicesResponse: ...

    def get_attribute_values(self, *,
        ServiceCode: str,
        AttributeName: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> PricingGetAttributeValuesResponse: ...

    def get_products(self, *,
        ServiceCode: str = ...,
        Filters: List[PricingFilter] = ...,
        FormatVersion: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> PricingGetProductsResponse: ...


PricingService = TypedDict(
    'PricingService', {
        'String': Optional[str],
        'AttributeNameList': Optional[List[str]],
    }
)


PricingDescribeServicesResponse = TypedDict(
    'PricingDescribeServicesResponse', {
        'ServiceList': Optional[List[PricingService]],
        'String': Optional[str],
        'String': Optional[str],
    }
)


PricingAttributeValue = TypedDict(
    'PricingAttributeValue', {
        'String': Optional[str],
    }
)


PricingGetAttributeValuesResponse = TypedDict(
    'PricingGetAttributeValuesResponse', {
        'AttributeValueList': Optional[List[PricingAttributeValue]],
        'String': Optional[str],
    }
)


PricingFilter = TypedDict(
    'PricingFilter', {
        'FilterType': str,
        'String': str,
        'String': str,
    }
)


PricingGetProductsResponse = TypedDict(
    'PricingGetProductsResponse', {
        'String': Optional[str],
        'PriceList': Optional[List[str]],
        'String': Optional[str],
    }
)


class QuickSight(BaseClient):
    def create_group(self, *,
        GroupName: str,
        AwsAccountId: str,
        Namespace: str,
        Description: str = ...
    ) -> QuickSightCreateGroupResponse: ...

    def create_group_membership(self, *,
        MemberName: str,
        GroupName: str,
        AwsAccountId: str,
        Namespace: str
    ) -> QuickSightCreateGroupMembershipResponse: ...

    def delete_group(self, *,
        GroupName: str,
        AwsAccountId: str,
        Namespace: str
    ) -> QuickSightDeleteGroupResponse: ...

    def delete_group_membership(self, *,
        MemberName: str,
        GroupName: str,
        AwsAccountId: str,
        Namespace: str
    ) -> QuickSightDeleteGroupMembershipResponse: ...

    def delete_user(self, *,
        UserName: str,
        AwsAccountId: str,
        Namespace: str
    ) -> QuickSightDeleteUserResponse: ...

    def delete_user_by_principal_id(self, *,
        PrincipalId: str,
        AwsAccountId: str,
        Namespace: str
    ) -> QuickSightDeleteUserByPrincipalIdResponse: ...

    def describe_group(self, *,
        GroupName: str,
        AwsAccountId: str,
        Namespace: str
    ) -> QuickSightDescribeGroupResponse: ...

    def describe_user(self, *,
        UserName: str,
        AwsAccountId: str,
        Namespace: str
    ) -> QuickSightDescribeUserResponse: ...

    def get_dashboard_embed_url(self, *,
        AwsAccountId: str,
        DashboardId: str,
        IdentityType: str,
        SessionLifetimeInMinutes: int = ...,
        UndoRedoDisabled: bool = ...,
        ResetDisabled: bool = ...
    ) -> QuickSightGetDashboardEmbedUrlResponse: ...

    def list_group_memberships(self, *,
        GroupName: str,
        AwsAccountId: str,
        Namespace: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> QuickSightListGroupMembershipsResponse: ...

    def list_groups(self, *,
        AwsAccountId: str,
        Namespace: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> QuickSightListGroupsResponse: ...

    def list_user_groups(self, *,
        UserName: str,
        AwsAccountId: str,
        Namespace: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> QuickSightListUserGroupsResponse: ...

    def list_users(self, *,
        AwsAccountId: str,
        Namespace: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> QuickSightListUsersResponse: ...

    def register_user(self, *,
        IdentityType: str,
        Email: str,
        UserRole: str,
        AwsAccountId: str,
        Namespace: str,
        IamArn: str = ...,
        SessionName: str = ...,
        UserName: str = ...
    ) -> QuickSightRegisterUserResponse: ...

    def update_group(self, *,
        GroupName: str,
        AwsAccountId: str,
        Namespace: str,
        Description: str = ...
    ) -> QuickSightUpdateGroupResponse: ...

    def update_user(self, *,
        UserName: str,
        AwsAccountId: str,
        Namespace: str,
        Email: str,
        Role: str
    ) -> QuickSightUpdateUserResponse: ...


QuickSightGroup = TypedDict(
    'QuickSightGroup', {
        'Arn': Optional[str],
        'GroupName': Optional[str],
        'GroupDescription': Optional[str],
        'String': Optional[str],
    }
)


QuickSightCreateGroupResponse = TypedDict(
    'QuickSightCreateGroupResponse', {
        'Group': Optional[QuickSightGroup],
        'String': Optional[str],
        'StatusCode': Optional[int],
    }
)


QuickSightGroupMember = TypedDict(
    'QuickSightGroupMember', {
        'Arn': Optional[str],
        'GroupMemberName': Optional[str],
    }
)


QuickSightCreateGroupMembershipResponse = TypedDict(
    'QuickSightCreateGroupMembershipResponse', {
        'GroupMember': Optional[QuickSightGroupMember],
        'String': Optional[str],
        'StatusCode': Optional[int],
    }
)


QuickSightDeleteGroupResponse = TypedDict(
    'QuickSightDeleteGroupResponse', {
        'String': Optional[str],
        'StatusCode': Optional[int],
    }
)


QuickSightDeleteGroupMembershipResponse = TypedDict(
    'QuickSightDeleteGroupMembershipResponse', {
        'String': Optional[str],
        'StatusCode': Optional[int],
    }
)


QuickSightDeleteUserResponse = TypedDict(
    'QuickSightDeleteUserResponse', {
        'String': Optional[str],
        'StatusCode': Optional[int],
    }
)


QuickSightDeleteUserByPrincipalIdResponse = TypedDict(
    'QuickSightDeleteUserByPrincipalIdResponse', {
        'String': Optional[str],
        'StatusCode': Optional[int],
    }
)


QuickSightDescribeGroupResponse = TypedDict(
    'QuickSightDescribeGroupResponse', {
        'Group': Optional[QuickSightGroup],
        'String': Optional[str],
        'StatusCode': Optional[int],
    }
)


QuickSightUser = TypedDict(
    'QuickSightUser', {
        'Arn': Optional[str],
        'UserName': Optional[str],
        'String': Optional[str],
        'UserRole': Optional[str],
        'IdentityType': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
    }
)


QuickSightDescribeUserResponse = TypedDict(
    'QuickSightDescribeUserResponse', {
        'User': Optional[QuickSightUser],
        'String': Optional[str],
        'StatusCode': Optional[int],
    }
)


QuickSightGetDashboardEmbedUrlResponse = TypedDict(
    'QuickSightGetDashboardEmbedUrlResponse', {
        'EmbeddingUrl': Optional[str],
        'StatusCode': Optional[int],
        'String': Optional[str],
    }
)


QuickSightListGroupMembershipsResponse = TypedDict(
    'QuickSightListGroupMembershipsResponse', {
        'GroupMemberList': Optional[List[QuickSightGroupMember]],
        'String': Optional[str],
        'String': Optional[str],
        'StatusCode': Optional[int],
    }
)


QuickSightListGroupsResponse = TypedDict(
    'QuickSightListGroupsResponse', {
        'GroupList': Optional[List[QuickSightGroup]],
        'String': Optional[str],
        'String': Optional[str],
        'StatusCode': Optional[int],
    }
)


QuickSightListUserGroupsResponse = TypedDict(
    'QuickSightListUserGroupsResponse', {
        'GroupList': Optional[List[QuickSightGroup]],
        'String': Optional[str],
        'String': Optional[str],
        'StatusCode': Optional[int],
    }
)


QuickSightListUsersResponse = TypedDict(
    'QuickSightListUsersResponse', {
        'UserList': Optional[List[QuickSightUser]],
        'String': Optional[str],
        'String': Optional[str],
        'StatusCode': Optional[int],
    }
)


QuickSightRegisterUserResponse = TypedDict(
    'QuickSightRegisterUserResponse', {
        'User': Optional[QuickSightUser],
        'String': Optional[str],
        'String': Optional[str],
        'StatusCode': Optional[int],
    }
)


QuickSightUpdateGroupResponse = TypedDict(
    'QuickSightUpdateGroupResponse', {
        'Group': Optional[QuickSightGroup],
        'String': Optional[str],
        'StatusCode': Optional[int],
    }
)


QuickSightUpdateUserResponse = TypedDict(
    'QuickSightUpdateUserResponse', {
        'User': Optional[QuickSightUser],
        'String': Optional[str],
        'StatusCode': Optional[int],
    }
)


class RAM(BaseClient):
    def accept_resource_share_invitation(self, *,
        resourceShareInvitationArn: str,
        clientToken: str = ...
    ) -> RAMAcceptResourceShareInvitationResponse: ...

    def associate_resource_share(self, *,
        resourceShareArn: str,
        resourceArns: List[str] = ...,
        principals: List[str] = ...,
        clientToken: str = ...
    ) -> RAMAssociateResourceShareResponse: ...

    def create_resource_share(self, *,
        name: str,
        resourceArns: List[str] = ...,
        principals: List[str] = ...,
        tags: List[RAMTag] = ...,
        allowExternalPrincipals: bool = ...,
        clientToken: str = ...
    ) -> RAMCreateResourceShareResponse: ...

    def delete_resource_share(self, *,
        resourceShareArn: str,
        clientToken: str = ...
    ) -> RAMDeleteResourceShareResponse: ...

    def disassociate_resource_share(self, *,
        resourceShareArn: str,
        resourceArns: List[str] = ...,
        principals: List[str] = ...,
        clientToken: str = ...
    ) -> RAMDisassociateResourceShareResponse: ...

    def enable_sharing_with_aws_organization(self) -> RAMEnableSharingWithAwsOrganizationResponse: ...

    def get_resource_policies(self, *,
        resourceArns: List[str],
        principal: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> RAMGetResourcePoliciesResponse: ...

    def get_resource_share_associations(self, *,
        associationType: str,
        resourceShareArns: List[str] = ...,
        resourceArn: str = ...,
        principal: str = ...,
        associationStatus: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> RAMGetResourceShareAssociationsResponse: ...

    def get_resource_share_invitations(self, *,
        resourceShareInvitationArns: List[str] = ...,
        resourceShareArns: List[str] = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> RAMGetResourceShareInvitationsResponse: ...

    def get_resource_shares(self, *,
        resourceOwner: str,
        resourceShareArns: List[str] = ...,
        resourceShareStatus: str = ...,
        name: str = ...,
        tagFilters: List[RAMTagFilter] = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> RAMGetResourceSharesResponse: ...

    def list_principals(self, *,
        resourceOwner: str,
        resourceArn: str = ...,
        principals: List[str] = ...,
        resourceType: str = ...,
        resourceShareArns: List[str] = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> RAMListPrincipalsResponse: ...

    def list_resources(self, *,
        resourceOwner: str,
        principal: str = ...,
        resourceType: str = ...,
        resourceArns: List[str] = ...,
        resourceShareArns: List[str] = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> RAMListResourcesResponse: ...

    def reject_resource_share_invitation(self, *,
        resourceShareInvitationArn: str,
        clientToken: str = ...
    ) -> RAMRejectResourceShareInvitationResponse: ...

    def tag_resource(self, *,
        resourceShareArn: str,
        tags: List[RAMTag]
    ) -> RAMTagResourceResponse: ...

    def untag_resource(self, *,
        resourceShareArn: str,
        tagKeys: List[str]
    ) -> RAMUntagResourceResponse: ...

    def update_resource_share(self, *,
        resourceShareArn: str,
        name: str = ...,
        allowExternalPrincipals: bool = ...,
        clientToken: str = ...
    ) -> RAMUpdateResourceShareResponse: ...


RAMResourceShareAssociation = TypedDict(
    'RAMResourceShareAssociation', {
        'String': Optional[str],
        'String': Optional[str],
        'ResourceShareAssociationType': Optional[str],
        'ResourceShareAssociationStatus': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
        'Boolean': Optional[bool],
    }
)


RAMResourceShareInvitation = TypedDict(
    'RAMResourceShareInvitation', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'ResourceShareInvitationStatus': Optional[str],
        'ResourceShareAssociationList': Optional[List[RAMResourceShareAssociation]],
    }
)


RAMAcceptResourceShareInvitationResponse = TypedDict(
    'RAMAcceptResourceShareInvitationResponse', {
        'ResourceShareInvitation': Optional[RAMResourceShareInvitation],
        'String': Optional[str],
    }
)


RAMAssociateResourceShareResponse = TypedDict(
    'RAMAssociateResourceShareResponse', {
        'ResourceShareAssociationList': Optional[List[RAMResourceShareAssociation]],
        'String': Optional[str],
    }
)


RAMTag = TypedDict(
    'RAMTag', {
        'TagKey': Optional[str],
        'TagValue': Optional[str],
    }
)


RAMResourceShare = TypedDict(
    'RAMResourceShare', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'ResourceShareStatus': Optional[str],
        'String': Optional[str],
        'TagList': Optional[List[RAMTag]],
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
    }
)


RAMCreateResourceShareResponse = TypedDict(
    'RAMCreateResourceShareResponse', {
        'ResourceShare': Optional[RAMResourceShare],
        'String': Optional[str],
    }
)


RAMDeleteResourceShareResponse = TypedDict(
    'RAMDeleteResourceShareResponse', {
        'Boolean': Optional[bool],
        'String': Optional[str],
    }
)


RAMDisassociateResourceShareResponse = TypedDict(
    'RAMDisassociateResourceShareResponse', {
        'ResourceShareAssociationList': Optional[List[RAMResourceShareAssociation]],
        'String': Optional[str],
    }
)


RAMEnableSharingWithAwsOrganizationResponse = TypedDict(
    'RAMEnableSharingWithAwsOrganizationResponse', {
        'Boolean': Optional[bool],
    }
)


RAMGetResourcePoliciesResponse = TypedDict(
    'RAMGetResourcePoliciesResponse', {
        'PolicyList': Optional[List[str]],
        'String': Optional[str],
    }
)


RAMGetResourceShareAssociationsResponse = TypedDict(
    'RAMGetResourceShareAssociationsResponse', {
        'ResourceShareAssociationList': Optional[List[RAMResourceShareAssociation]],
        'String': Optional[str],
    }
)


RAMGetResourceShareInvitationsResponse = TypedDict(
    'RAMGetResourceShareInvitationsResponse', {
        'ResourceShareInvitationList': Optional[List[RAMResourceShareInvitation]],
        'String': Optional[str],
    }
)


RAMTagFilter = TypedDict(
    'RAMTagFilter', {
        'TagKey': Optional[str],
        'TagValueList': Optional[List[str]],
    }
)


RAMGetResourceSharesResponse = TypedDict(
    'RAMGetResourceSharesResponse', {
        'ResourceShareList': Optional[List[RAMResourceShare]],
        'String': Optional[str],
    }
)


RAMPrincipal = TypedDict(
    'RAMPrincipal', {
        'String': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
        'Boolean': Optional[bool],
    }
)


RAMListPrincipalsResponse = TypedDict(
    'RAMListPrincipalsResponse', {
        'PrincipalList': Optional[List[RAMPrincipal]],
        'String': Optional[str],
    }
)


RAMResource = TypedDict(
    'RAMResource', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'ResourceStatus': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
    }
)


RAMListResourcesResponse = TypedDict(
    'RAMListResourcesResponse', {
        'ResourceList': Optional[List[RAMResource]],
        'String': Optional[str],
    }
)


RAMRejectResourceShareInvitationResponse = TypedDict(
    'RAMRejectResourceShareInvitationResponse', {
        'ResourceShareInvitation': Optional[RAMResourceShareInvitation],
        'String': Optional[str],
    }
)


RAMTagResourceResponse = TypedDict(
    'RAMTagResourceResponse', {
    }
)


RAMUntagResourceResponse = TypedDict(
    'RAMUntagResourceResponse', {
    }
)


RAMUpdateResourceShareResponse = TypedDict(
    'RAMUpdateResourceShareResponse', {
        'ResourceShare': Optional[RAMResourceShare],
        'String': Optional[str],
    }
)


class RDS(BaseClient):
    def add_role_to_db_cluster(self, *,
        DBClusterIdentifier: str,
        RoleArn: str,
        FeatureName: str = ...
    ): ...

    def add_role_to_db_instance(self, *,
        DBInstanceIdentifier: str,
        RoleArn: str,
        FeatureName: str
    ): ...

    def add_source_identifier_to_subscription(self, *,
        SubscriptionName: str,
        SourceIdentifier: str
    ) -> RDSAddSourceIdentifierToSubscriptionResult: ...

    def add_tags_to_resource(self, *,
        ResourceName: str,
        Tags: List[RDSTag]
    ): ...

    def apply_pending_maintenance_action(self, *,
        ResourceIdentifier: str,
        ApplyAction: str,
        OptInType: str
    ) -> RDSApplyPendingMaintenanceActionResult: ...

    def authorize_db_security_group_ingress(self, *,
        DBSecurityGroupName: str,
        CIDRIP: str = ...,
        EC2SecurityGroupName: str = ...,
        EC2SecurityGroupId: str = ...,
        EC2SecurityGroupOwnerId: str = ...
    ) -> RDSAuthorizeDBSecurityGroupIngressResult: ...

    def backtrack_db_cluster(self, *,
        DBClusterIdentifier: str,
        BacktrackTo: datetime.datetime,
        Force: bool = ...,
        UseEarliestTimeOnPointInTimeUnavailable: bool = ...
    ) -> RDSDBClusterBacktrack: ...

    def copy_db_cluster_parameter_group(self, *,
        SourceDBClusterParameterGroupIdentifier: str,
        TargetDBClusterParameterGroupIdentifier: str,
        TargetDBClusterParameterGroupDescription: str,
        Tags: List[RDSTag] = ...
    ) -> RDSCopyDBClusterParameterGroupResult: ...

    def copy_db_cluster_snapshot(self, *,
        SourceDBClusterSnapshotIdentifier: str,
        TargetDBClusterSnapshotIdentifier: str,
        KmsKeyId: str = ...,
        PreSignedUrl: str = ...,
        CopyTags: bool = ...,
        Tags: List[RDSTag] = ...,
        SourceRegion: str = ...
    ) -> RDSCopyDBClusterSnapshotResult: ...

    def copy_db_parameter_group(self, *,
        SourceDBParameterGroupIdentifier: str,
        TargetDBParameterGroupIdentifier: str,
        TargetDBParameterGroupDescription: str,
        Tags: List[RDSTag] = ...
    ) -> RDSCopyDBParameterGroupResult: ...

    def copy_db_snapshot(self, *,
        SourceDBSnapshotIdentifier: str,
        TargetDBSnapshotIdentifier: str,
        KmsKeyId: str = ...,
        Tags: List[RDSTag] = ...,
        CopyTags: bool = ...,
        PreSignedUrl: str = ...,
        OptionGroupName: str = ...,
        SourceRegion: str = ...
    ) -> RDSCopyDBSnapshotResult: ...

    def copy_option_group(self, *,
        SourceOptionGroupIdentifier: str,
        TargetOptionGroupIdentifier: str,
        TargetOptionGroupDescription: str,
        Tags: List[RDSTag] = ...
    ) -> RDSCopyOptionGroupResult: ...

    def create_db_cluster(self, *,
        DBClusterIdentifier: str,
        Engine: str,
        AvailabilityZones: List[str] = ...,
        BackupRetentionPeriod: int = ...,
        CharacterSetName: str = ...,
        DatabaseName: str = ...,
        DBClusterParameterGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        DBSubnetGroupName: str = ...,
        EngineVersion: str = ...,
        Port: int = ...,
        MasterUsername: str = ...,
        MasterUserPassword: str = ...,
        OptionGroupName: str = ...,
        PreferredBackupWindow: str = ...,
        PreferredMaintenanceWindow: str = ...,
        ReplicationSourceIdentifier: str = ...,
        Tags: List[RDSTag] = ...,
        StorageEncrypted: bool = ...,
        KmsKeyId: str = ...,
        PreSignedUrl: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        BacktrackWindow: int = ...,
        EnableCloudwatchLogsExports: List[str] = ...,
        EngineMode: str = ...,
        ScalingConfiguration: RDSScalingConfiguration = ...,
        DeletionProtection: bool = ...,
        GlobalClusterIdentifier: str = ...,
        CopyTagsToSnapshot: bool = ...,
        SourceRegion: str = ...
    ) -> RDSCreateDBClusterResult: ...

    def create_db_cluster_endpoint(self, *,
        DBClusterIdentifier: str,
        DBClusterEndpointIdentifier: str,
        EndpointType: str,
        StaticMembers: List[str] = ...,
        ExcludedMembers: List[str] = ...
    ) -> RDSDBClusterEndpoint: ...

    def create_db_cluster_parameter_group(self, *,
        DBClusterParameterGroupName: str,
        DBParameterGroupFamily: str,
        Description: str,
        Tags: List[RDSTag] = ...
    ) -> RDSCreateDBClusterParameterGroupResult: ...

    def create_db_cluster_snapshot(self, *,
        DBClusterSnapshotIdentifier: str,
        DBClusterIdentifier: str,
        Tags: List[RDSTag] = ...
    ) -> RDSCreateDBClusterSnapshotResult: ...

    def create_db_instance(self, *,
        DBInstanceIdentifier: str,
        DBInstanceClass: str,
        Engine: str,
        DBName: str = ...,
        AllocatedStorage: int = ...,
        MasterUsername: str = ...,
        MasterUserPassword: str = ...,
        DBSecurityGroups: List[str] = ...,
        VpcSecurityGroupIds: List[str] = ...,
        AvailabilityZone: str = ...,
        DBSubnetGroupName: str = ...,
        PreferredMaintenanceWindow: str = ...,
        DBParameterGroupName: str = ...,
        BackupRetentionPeriod: int = ...,
        PreferredBackupWindow: str = ...,
        Port: int = ...,
        MultiAZ: bool = ...,
        EngineVersion: str = ...,
        AutoMinorVersionUpgrade: bool = ...,
        LicenseModel: str = ...,
        Iops: int = ...,
        OptionGroupName: str = ...,
        CharacterSetName: str = ...,
        PubliclyAccessible: bool = ...,
        Tags: List[RDSTag] = ...,
        DBClusterIdentifier: str = ...,
        StorageType: str = ...,
        TdeCredentialArn: str = ...,
        TdeCredentialPassword: str = ...,
        StorageEncrypted: bool = ...,
        KmsKeyId: str = ...,
        Domain: str = ...,
        CopyTagsToSnapshot: bool = ...,
        MonitoringInterval: int = ...,
        MonitoringRoleArn: str = ...,
        DomainIAMRoleName: str = ...,
        PromotionTier: int = ...,
        Timezone: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        EnablePerformanceInsights: bool = ...,
        PerformanceInsightsKMSKeyId: str = ...,
        PerformanceInsightsRetentionPeriod: int = ...,
        EnableCloudwatchLogsExports: List[str] = ...,
        ProcessorFeatures: List[RDSProcessorFeature] = ...,
        DeletionProtection: bool = ...
    ) -> RDSCreateDBInstanceResult: ...

    def create_db_instance_read_replica(self, *,
        DBInstanceIdentifier: str,
        SourceDBInstanceIdentifier: str,
        DBInstanceClass: str = ...,
        AvailabilityZone: str = ...,
        Port: int = ...,
        MultiAZ: bool = ...,
        AutoMinorVersionUpgrade: bool = ...,
        Iops: int = ...,
        OptionGroupName: str = ...,
        PubliclyAccessible: bool = ...,
        Tags: List[RDSTag] = ...,
        DBSubnetGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        StorageType: str = ...,
        CopyTagsToSnapshot: bool = ...,
        MonitoringInterval: int = ...,
        MonitoringRoleArn: str = ...,
        KmsKeyId: str = ...,
        PreSignedUrl: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        EnablePerformanceInsights: bool = ...,
        PerformanceInsightsKMSKeyId: str = ...,
        PerformanceInsightsRetentionPeriod: int = ...,
        EnableCloudwatchLogsExports: List[str] = ...,
        ProcessorFeatures: List[RDSProcessorFeature] = ...,
        UseDefaultProcessorFeatures: bool = ...,
        DeletionProtection: bool = ...,
        SourceRegion: str = ...
    ) -> RDSCreateDBInstanceReadReplicaResult: ...

    def create_db_parameter_group(self, *,
        DBParameterGroupName: str,
        DBParameterGroupFamily: str,
        Description: str,
        Tags: List[RDSTag] = ...
    ) -> RDSCreateDBParameterGroupResult: ...

    def create_db_security_group(self, *,
        DBSecurityGroupName: str,
        DBSecurityGroupDescription: str,
        Tags: List[RDSTag] = ...
    ) -> RDSCreateDBSecurityGroupResult: ...

    def create_db_snapshot(self, *,
        DBSnapshotIdentifier: str,
        DBInstanceIdentifier: str,
        Tags: List[RDSTag] = ...
    ) -> RDSCreateDBSnapshotResult: ...

    def create_db_subnet_group(self, *,
        DBSubnetGroupName: str,
        DBSubnetGroupDescription: str,
        SubnetIds: List[str],
        Tags: List[RDSTag] = ...
    ) -> RDSCreateDBSubnetGroupResult: ...

    def create_event_subscription(self, *,
        SubscriptionName: str,
        SnsTopicArn: str,
        SourceType: str = ...,
        EventCategories: List[str] = ...,
        SourceIds: List[str] = ...,
        Enabled: bool = ...,
        Tags: List[RDSTag] = ...
    ) -> RDSCreateEventSubscriptionResult: ...

    def create_global_cluster(self, *,
        GlobalClusterIdentifier: str = ...,
        SourceDBClusterIdentifier: str = ...,
        Engine: str = ...,
        EngineVersion: str = ...,
        DeletionProtection: bool = ...,
        DatabaseName: str = ...,
        StorageEncrypted: bool = ...
    ) -> RDSCreateGlobalClusterResult: ...

    def create_option_group(self, *,
        OptionGroupName: str,
        EngineName: str,
        MajorEngineVersion: str,
        OptionGroupDescription: str,
        Tags: List[RDSTag] = ...
    ) -> RDSCreateOptionGroupResult: ...

    def delete_db_cluster(self, *,
        DBClusterIdentifier: str,
        SkipFinalSnapshot: bool = ...,
        FinalDBSnapshotIdentifier: str = ...
    ) -> RDSDeleteDBClusterResult: ...

    def delete_db_cluster_endpoint(self, *,
        DBClusterEndpointIdentifier: str
    ) -> RDSDBClusterEndpoint: ...

    def delete_db_cluster_parameter_group(self, *,
        DBClusterParameterGroupName: str
    ): ...

    def delete_db_cluster_snapshot(self, *,
        DBClusterSnapshotIdentifier: str
    ) -> RDSDeleteDBClusterSnapshotResult: ...

    def delete_db_instance(self, *,
        DBInstanceIdentifier: str,
        SkipFinalSnapshot: bool = ...,
        FinalDBSnapshotIdentifier: str = ...,
        DeleteAutomatedBackups: bool = ...
    ) -> RDSDeleteDBInstanceResult: ...

    def delete_db_instance_automated_backup(self, *,
        DbiResourceId: str
    ) -> RDSDeleteDBInstanceAutomatedBackupResult: ...

    def delete_db_parameter_group(self, *,
        DBParameterGroupName: str
    ): ...

    def delete_db_security_group(self, *,
        DBSecurityGroupName: str
    ): ...

    def delete_db_snapshot(self, *,
        DBSnapshotIdentifier: str
    ) -> RDSDeleteDBSnapshotResult: ...

    def delete_db_subnet_group(self, *,
        DBSubnetGroupName: str
    ): ...

    def delete_event_subscription(self, *,
        SubscriptionName: str
    ) -> RDSDeleteEventSubscriptionResult: ...

    def delete_global_cluster(self, *,
        GlobalClusterIdentifier: str
    ) -> RDSDeleteGlobalClusterResult: ...

    def delete_option_group(self, *,
        OptionGroupName: str
    ): ...

    def describe_account_attributes(self) -> RDSAccountAttributesMessage: ...

    def describe_certificates(self, *,
        CertificateIdentifier: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSCertificateMessage: ...

    def describe_db_cluster_backtracks(self, *,
        DBClusterIdentifier: str,
        BacktrackIdentifier: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDBClusterBacktrackMessage: ...

    def describe_db_cluster_endpoints(self, *,
        DBClusterIdentifier: str = ...,
        DBClusterEndpointIdentifier: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDBClusterEndpointMessage: ...

    def describe_db_cluster_parameter_groups(self, *,
        DBClusterParameterGroupName: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDBClusterParameterGroupsMessage: ...

    def describe_db_cluster_parameters(self, *,
        DBClusterParameterGroupName: str,
        Source: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDBClusterParameterGroupDetails: ...

    def describe_db_cluster_snapshot_attributes(self, *,
        DBClusterSnapshotIdentifier: str
    ) -> RDSDescribeDBClusterSnapshotAttributesResult: ...

    def describe_db_cluster_snapshots(self, *,
        DBClusterIdentifier: str = ...,
        DBClusterSnapshotIdentifier: str = ...,
        SnapshotType: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        IncludeShared: bool = ...,
        IncludePublic: bool = ...
    ) -> RDSDBClusterSnapshotMessage: ...

    def describe_db_clusters(self, *,
        DBClusterIdentifier: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDBClusterMessage: ...

    def describe_db_engine_versions(self, *,
        Engine: str = ...,
        EngineVersion: str = ...,
        DBParameterGroupFamily: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        DefaultOnly: bool = ...,
        ListSupportedCharacterSets: bool = ...,
        ListSupportedTimezones: bool = ...
    ) -> RDSDBEngineVersionMessage: ...

    def describe_db_instance_automated_backups(self, *,
        DbiResourceId: str = ...,
        DBInstanceIdentifier: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDBInstanceAutomatedBackupMessage: ...

    def describe_db_instances(self, *,
        DBInstanceIdentifier: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDBInstanceMessage: ...

    def describe_db_log_files(self, *,
        DBInstanceIdentifier: str,
        FilenameContains: str = ...,
        FileLastWritten: int = ...,
        FileSize: int = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDescribeDBLogFilesResponse: ...

    def describe_db_parameter_groups(self, *,
        DBParameterGroupName: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDBParameterGroupsMessage: ...

    def describe_db_parameters(self, *,
        DBParameterGroupName: str,
        Source: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDBParameterGroupDetails: ...

    def describe_db_security_groups(self, *,
        DBSecurityGroupName: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDBSecurityGroupMessage: ...

    def describe_db_snapshot_attributes(self, *,
        DBSnapshotIdentifier: str
    ) -> RDSDescribeDBSnapshotAttributesResult: ...

    def describe_db_snapshots(self, *,
        DBInstanceIdentifier: str = ...,
        DBSnapshotIdentifier: str = ...,
        SnapshotType: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        IncludeShared: bool = ...,
        IncludePublic: bool = ...,
        DbiResourceId: str = ...
    ) -> RDSDBSnapshotMessage: ...

    def describe_db_subnet_groups(self, *,
        DBSubnetGroupName: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDBSubnetGroupMessage: ...

    def describe_engine_default_cluster_parameters(self, *,
        DBParameterGroupFamily: str,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDescribeEngineDefaultClusterParametersResult: ...

    def describe_engine_default_parameters(self, *,
        DBParameterGroupFamily: str,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDescribeEngineDefaultParametersResult: ...

    def describe_event_categories(self, *,
        SourceType: str = ...,
        Filters: List[RDSFilter] = ...
    ) -> RDSEventCategoriesMessage: ...

    def describe_event_subscriptions(self, *,
        SubscriptionName: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSEventSubscriptionsMessage: ...

    def describe_events(self, *,
        SourceIdentifier: str = ...,
        SourceType: str = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        Duration: int = ...,
        EventCategories: List[str] = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSEventsMessage: ...

    def describe_global_clusters(self, *,
        GlobalClusterIdentifier: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSGlobalClustersMessage: ...

    def describe_option_group_options(self, *,
        EngineName: str,
        MajorEngineVersion: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSOptionGroupOptionsMessage: ...

    def describe_option_groups(self, *,
        OptionGroupName: str = ...,
        Filters: List[RDSFilter] = ...,
        Marker: str = ...,
        MaxRecords: int = ...,
        EngineName: str = ...,
        MajorEngineVersion: str = ...
    ) -> RDSOptionGroups: ...

    def describe_orderable_db_instance_options(self, *,
        Engine: str,
        EngineVersion: str = ...,
        DBInstanceClass: str = ...,
        LicenseModel: str = ...,
        Vpc: bool = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSOrderableDBInstanceOptionsMessage: ...

    def describe_pending_maintenance_actions(self, *,
        ResourceIdentifier: str = ...,
        Filters: List[RDSFilter] = ...,
        Marker: str = ...,
        MaxRecords: int = ...
    ) -> RDSPendingMaintenanceActionsMessage: ...

    def describe_reserved_db_instances(self, *,
        ReservedDBInstanceId: str = ...,
        ReservedDBInstancesOfferingId: str = ...,
        DBInstanceClass: str = ...,
        Duration: str = ...,
        ProductDescription: str = ...,
        OfferingType: str = ...,
        MultiAZ: bool = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSReservedDBInstanceMessage: ...

    def describe_reserved_db_instances_offerings(self, *,
        ReservedDBInstancesOfferingId: str = ...,
        DBInstanceClass: str = ...,
        Duration: str = ...,
        ProductDescription: str = ...,
        OfferingType: str = ...,
        MultiAZ: bool = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSReservedDBInstancesOfferingMessage: ...

    def describe_source_regions(self, *,
        RegionName: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        Filters: List[RDSFilter] = ...
    ) -> RDSSourceRegionMessage: ...

    def describe_valid_db_instance_modifications(self, *,
        DBInstanceIdentifier: str
    ) -> RDSDescribeValidDBInstanceModificationsResult: ...

    def download_db_log_file_portion(self, *,
        DBInstanceIdentifier: str,
        LogFileName: str,
        Marker: str = ...,
        NumberOfLines: int = ...
    ) -> RDSDownloadDBLogFilePortionDetails: ...

    def failover_db_cluster(self, *,
        DBClusterIdentifier: str,
        TargetDBInstanceIdentifier: str = ...
    ) -> RDSFailoverDBClusterResult: ...

    def list_tags_for_resource(self, *,
        ResourceName: str,
        Filters: List[RDSFilter] = ...
    ) -> RDSTagListMessage: ...

    def modify_current_db_cluster_capacity(self, *,
        DBClusterIdentifier: str,
        Capacity: int = ...,
        SecondsBeforeTimeout: int = ...,
        TimeoutAction: str = ...
    ) -> RDSDBClusterCapacityInfo: ...

    def modify_db_cluster(self, *,
        DBClusterIdentifier: str,
        NewDBClusterIdentifier: str = ...,
        ApplyImmediately: bool = ...,
        BackupRetentionPeriod: int = ...,
        DBClusterParameterGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        Port: int = ...,
        MasterUserPassword: str = ...,
        OptionGroupName: str = ...,
        PreferredBackupWindow: str = ...,
        PreferredMaintenanceWindow: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        BacktrackWindow: int = ...,
        CloudwatchLogsExportConfiguration: RDSCloudwatchLogsExportConfiguration = ...,
        EngineVersion: str = ...,
        ScalingConfiguration: RDSScalingConfiguration = ...,
        DeletionProtection: bool = ...,
        EnableHttpEndpoint: bool = ...,
        CopyTagsToSnapshot: bool = ...
    ) -> RDSModifyDBClusterResult: ...

    def modify_db_cluster_endpoint(self, *,
        DBClusterEndpointIdentifier: str,
        EndpointType: str = ...,
        StaticMembers: List[str] = ...,
        ExcludedMembers: List[str] = ...
    ) -> RDSDBClusterEndpoint: ...

    def modify_db_cluster_parameter_group(self, *,
        DBClusterParameterGroupName: str,
        Parameters: List[RDSParameter]
    ) -> RDSDBClusterParameterGroupNameMessage: ...

    def modify_db_cluster_snapshot_attribute(self, *,
        DBClusterSnapshotIdentifier: str,
        AttributeName: str,
        ValuesToAdd: List[str] = ...,
        ValuesToRemove: List[str] = ...
    ) -> RDSModifyDBClusterSnapshotAttributeResult: ...

    def modify_db_instance(self, *,
        DBInstanceIdentifier: str,
        AllocatedStorage: int = ...,
        DBInstanceClass: str = ...,
        DBSubnetGroupName: str = ...,
        DBSecurityGroups: List[str] = ...,
        VpcSecurityGroupIds: List[str] = ...,
        ApplyImmediately: bool = ...,
        MasterUserPassword: str = ...,
        DBParameterGroupName: str = ...,
        BackupRetentionPeriod: int = ...,
        PreferredBackupWindow: str = ...,
        PreferredMaintenanceWindow: str = ...,
        MultiAZ: bool = ...,
        EngineVersion: str = ...,
        AllowMajorVersionUpgrade: bool = ...,
        AutoMinorVersionUpgrade: bool = ...,
        LicenseModel: str = ...,
        Iops: int = ...,
        OptionGroupName: str = ...,
        NewDBInstanceIdentifier: str = ...,
        StorageType: str = ...,
        TdeCredentialArn: str = ...,
        TdeCredentialPassword: str = ...,
        CACertificateIdentifier: str = ...,
        Domain: str = ...,
        CopyTagsToSnapshot: bool = ...,
        MonitoringInterval: int = ...,
        DBPortNumber: int = ...,
        PubliclyAccessible: bool = ...,
        MonitoringRoleArn: str = ...,
        DomainIAMRoleName: str = ...,
        PromotionTier: int = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        EnablePerformanceInsights: bool = ...,
        PerformanceInsightsKMSKeyId: str = ...,
        PerformanceInsightsRetentionPeriod: int = ...,
        CloudwatchLogsExportConfiguration: RDSCloudwatchLogsExportConfiguration = ...,
        ProcessorFeatures: List[RDSProcessorFeature] = ...,
        UseDefaultProcessorFeatures: bool = ...,
        DeletionProtection: bool = ...
    ) -> RDSModifyDBInstanceResult: ...

    def modify_db_parameter_group(self, *,
        DBParameterGroupName: str,
        Parameters: List[RDSParameter]
    ) -> RDSDBParameterGroupNameMessage: ...

    def modify_db_snapshot(self, *,
        DBSnapshotIdentifier: str,
        EngineVersion: str = ...,
        OptionGroupName: str = ...
    ) -> RDSModifyDBSnapshotResult: ...

    def modify_db_snapshot_attribute(self, *,
        DBSnapshotIdentifier: str,
        AttributeName: str,
        ValuesToAdd: List[str] = ...,
        ValuesToRemove: List[str] = ...
    ) -> RDSModifyDBSnapshotAttributeResult: ...

    def modify_db_subnet_group(self, *,
        DBSubnetGroupName: str,
        SubnetIds: List[str],
        DBSubnetGroupDescription: str = ...
    ) -> RDSModifyDBSubnetGroupResult: ...

    def modify_event_subscription(self, *,
        SubscriptionName: str,
        SnsTopicArn: str = ...,
        SourceType: str = ...,
        EventCategories: List[str] = ...,
        Enabled: bool = ...
    ) -> RDSModifyEventSubscriptionResult: ...

    def modify_global_cluster(self, *,
        GlobalClusterIdentifier: str = ...,
        NewGlobalClusterIdentifier: str = ...,
        DeletionProtection: bool = ...
    ) -> RDSModifyGlobalClusterResult: ...

    def modify_option_group(self, *,
        OptionGroupName: str,
        OptionsToInclude: List[RDSOptionConfiguration] = ...,
        OptionsToRemove: List[str] = ...,
        ApplyImmediately: bool = ...
    ) -> RDSModifyOptionGroupResult: ...

    def promote_read_replica(self, *,
        DBInstanceIdentifier: str,
        BackupRetentionPeriod: int = ...,
        PreferredBackupWindow: str = ...
    ) -> RDSPromoteReadReplicaResult: ...

    def promote_read_replica_db_cluster(self, *,
        DBClusterIdentifier: str
    ) -> RDSPromoteReadReplicaDBClusterResult: ...

    def purchase_reserved_db_instances_offering(self, *,
        ReservedDBInstancesOfferingId: str,
        ReservedDBInstanceId: str = ...,
        DBInstanceCount: int = ...,
        Tags: List[RDSTag] = ...
    ) -> RDSPurchaseReservedDBInstancesOfferingResult: ...

    def reboot_db_instance(self, *,
        DBInstanceIdentifier: str,
        ForceFailover: bool = ...
    ) -> RDSRebootDBInstanceResult: ...

    def remove_from_global_cluster(self, *,
        GlobalClusterIdentifier: str = ...,
        DbClusterIdentifier: str = ...
    ) -> RDSRemoveFromGlobalClusterResult: ...

    def remove_role_from_db_cluster(self, *,
        DBClusterIdentifier: str,
        RoleArn: str,
        FeatureName: str = ...
    ): ...

    def remove_role_from_db_instance(self, *,
        DBInstanceIdentifier: str,
        RoleArn: str,
        FeatureName: str
    ): ...

    def remove_source_identifier_from_subscription(self, *,
        SubscriptionName: str,
        SourceIdentifier: str
    ) -> RDSRemoveSourceIdentifierFromSubscriptionResult: ...

    def remove_tags_from_resource(self, *,
        ResourceName: str,
        TagKeys: List[str]
    ): ...

    def reset_db_cluster_parameter_group(self, *,
        DBClusterParameterGroupName: str,
        ResetAllParameters: bool = ...,
        Parameters: List[RDSParameter] = ...
    ) -> RDSDBClusterParameterGroupNameMessage: ...

    def reset_db_parameter_group(self, *,
        DBParameterGroupName: str,
        ResetAllParameters: bool = ...,
        Parameters: List[RDSParameter] = ...
    ) -> RDSDBParameterGroupNameMessage: ...

    def restore_db_cluster_from_s3(self, *,
        DBClusterIdentifier: str,
        Engine: str,
        MasterUsername: str,
        MasterUserPassword: str,
        SourceEngine: str,
        SourceEngineVersion: str,
        S3BucketName: str,
        S3IngestionRoleArn: str,
        AvailabilityZones: List[str] = ...,
        BackupRetentionPeriod: int = ...,
        CharacterSetName: str = ...,
        DatabaseName: str = ...,
        DBClusterParameterGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        DBSubnetGroupName: str = ...,
        EngineVersion: str = ...,
        Port: int = ...,
        OptionGroupName: str = ...,
        PreferredBackupWindow: str = ...,
        PreferredMaintenanceWindow: str = ...,
        Tags: List[RDSTag] = ...,
        StorageEncrypted: bool = ...,
        KmsKeyId: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        S3Prefix: str = ...,
        BacktrackWindow: int = ...,
        EnableCloudwatchLogsExports: List[str] = ...,
        DeletionProtection: bool = ...,
        CopyTagsToSnapshot: bool = ...
    ) -> RDSRestoreDBClusterFromS3Result: ...

    def restore_db_cluster_from_snapshot(self, *,
        DBClusterIdentifier: str,
        SnapshotIdentifier: str,
        Engine: str,
        AvailabilityZones: List[str] = ...,
        EngineVersion: str = ...,
        Port: int = ...,
        DBSubnetGroupName: str = ...,
        DatabaseName: str = ...,
        OptionGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        Tags: List[RDSTag] = ...,
        KmsKeyId: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        BacktrackWindow: int = ...,
        EnableCloudwatchLogsExports: List[str] = ...,
        EngineMode: str = ...,
        ScalingConfiguration: RDSScalingConfiguration = ...,
        DBClusterParameterGroupName: str = ...,
        DeletionProtection: bool = ...,
        CopyTagsToSnapshot: bool = ...
    ) -> RDSRestoreDBClusterFromSnapshotResult: ...

    def restore_db_cluster_to_point_in_time(self, *,
        DBClusterIdentifier: str,
        SourceDBClusterIdentifier: str,
        RestoreType: str = ...,
        RestoreToTime: datetime.datetime = ...,
        UseLatestRestorableTime: bool = ...,
        Port: int = ...,
        DBSubnetGroupName: str = ...,
        OptionGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        Tags: List[RDSTag] = ...,
        KmsKeyId: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        BacktrackWindow: int = ...,
        EnableCloudwatchLogsExports: List[str] = ...,
        DBClusterParameterGroupName: str = ...,
        DeletionProtection: bool = ...,
        CopyTagsToSnapshot: bool = ...
    ) -> RDSRestoreDBClusterToPointInTimeResult: ...

    def restore_db_instance_from_db_snapshot(self, *,
        DBInstanceIdentifier: str,
        DBSnapshotIdentifier: str,
        DBInstanceClass: str = ...,
        Port: int = ...,
        AvailabilityZone: str = ...,
        DBSubnetGroupName: str = ...,
        MultiAZ: bool = ...,
        PubliclyAccessible: bool = ...,
        AutoMinorVersionUpgrade: bool = ...,
        LicenseModel: str = ...,
        DBName: str = ...,
        Engine: str = ...,
        Iops: int = ...,
        OptionGroupName: str = ...,
        Tags: List[RDSTag] = ...,
        StorageType: str = ...,
        TdeCredentialArn: str = ...,
        TdeCredentialPassword: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        Domain: str = ...,
        CopyTagsToSnapshot: bool = ...,
        DomainIAMRoleName: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        EnableCloudwatchLogsExports: List[str] = ...,
        ProcessorFeatures: List[RDSProcessorFeature] = ...,
        UseDefaultProcessorFeatures: bool = ...,
        DBParameterGroupName: str = ...,
        DeletionProtection: bool = ...
    ) -> RDSRestoreDBInstanceFromDBSnapshotResult: ...

    def restore_db_instance_from_s3(self, *,
        DBInstanceIdentifier: str,
        DBInstanceClass: str,
        Engine: str,
        SourceEngine: str,
        SourceEngineVersion: str,
        S3BucketName: str,
        S3IngestionRoleArn: str,
        DBName: str = ...,
        AllocatedStorage: int = ...,
        MasterUsername: str = ...,
        MasterUserPassword: str = ...,
        DBSecurityGroups: List[str] = ...,
        VpcSecurityGroupIds: List[str] = ...,
        AvailabilityZone: str = ...,
        DBSubnetGroupName: str = ...,
        PreferredMaintenanceWindow: str = ...,
        DBParameterGroupName: str = ...,
        BackupRetentionPeriod: int = ...,
        PreferredBackupWindow: str = ...,
        Port: int = ...,
        MultiAZ: bool = ...,
        EngineVersion: str = ...,
        AutoMinorVersionUpgrade: bool = ...,
        LicenseModel: str = ...,
        Iops: int = ...,
        OptionGroupName: str = ...,
        PubliclyAccessible: bool = ...,
        Tags: List[RDSTag] = ...,
        StorageType: str = ...,
        StorageEncrypted: bool = ...,
        KmsKeyId: str = ...,
        CopyTagsToSnapshot: bool = ...,
        MonitoringInterval: int = ...,
        MonitoringRoleArn: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        S3Prefix: str = ...,
        EnablePerformanceInsights: bool = ...,
        PerformanceInsightsKMSKeyId: str = ...,
        PerformanceInsightsRetentionPeriod: int = ...,
        EnableCloudwatchLogsExports: List[str] = ...,
        ProcessorFeatures: List[RDSProcessorFeature] = ...,
        UseDefaultProcessorFeatures: bool = ...,
        DeletionProtection: bool = ...
    ) -> RDSRestoreDBInstanceFromS3Result: ...

    def restore_db_instance_to_point_in_time(self, *,
        TargetDBInstanceIdentifier: str,
        SourceDBInstanceIdentifier: str = ...,
        RestoreTime: datetime.datetime = ...,
        UseLatestRestorableTime: bool = ...,
        DBInstanceClass: str = ...,
        Port: int = ...,
        AvailabilityZone: str = ...,
        DBSubnetGroupName: str = ...,
        MultiAZ: bool = ...,
        PubliclyAccessible: bool = ...,
        AutoMinorVersionUpgrade: bool = ...,
        LicenseModel: str = ...,
        DBName: str = ...,
        Engine: str = ...,
        Iops: int = ...,
        OptionGroupName: str = ...,
        CopyTagsToSnapshot: bool = ...,
        Tags: List[RDSTag] = ...,
        StorageType: str = ...,
        TdeCredentialArn: str = ...,
        TdeCredentialPassword: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        Domain: str = ...,
        DomainIAMRoleName: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        EnableCloudwatchLogsExports: List[str] = ...,
        ProcessorFeatures: List[RDSProcessorFeature] = ...,
        UseDefaultProcessorFeatures: bool = ...,
        DBParameterGroupName: str = ...,
        DeletionProtection: bool = ...,
        SourceDbiResourceId: str = ...
    ) -> RDSRestoreDBInstanceToPointInTimeResult: ...

    def revoke_db_security_group_ingress(self, *,
        DBSecurityGroupName: str,
        CIDRIP: str = ...,
        EC2SecurityGroupName: str = ...,
        EC2SecurityGroupId: str = ...,
        EC2SecurityGroupOwnerId: str = ...
    ) -> RDSRevokeDBSecurityGroupIngressResult: ...

    def start_db_cluster(self, *,
        DBClusterIdentifier: str
    ) -> RDSStartDBClusterResult: ...

    def start_db_instance(self, *,
        DBInstanceIdentifier: str
    ) -> RDSStartDBInstanceResult: ...

    def stop_db_cluster(self, *,
        DBClusterIdentifier: str
    ) -> RDSStopDBClusterResult: ...

    def stop_db_instance(self, *,
        DBInstanceIdentifier: str,
        DBSnapshotIdentifier: str = ...
    ) -> RDSStopDBInstanceResult: ...


RDSEventSubscription = TypedDict(
    'RDSEventSubscription', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'SourceIdsList': Optional[List[str]],
        'EventCategoriesList': Optional[List[str]],
        'Boolean': Optional[bool],
        'String': Optional[str],
    }
)


RDSAddSourceIdentifierToSubscriptionResult = TypedDict(
    'RDSAddSourceIdentifierToSubscriptionResult', {
        'EventSubscription': Optional[RDSEventSubscription],
    }
)


RDSTag = TypedDict(
    'RDSTag', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


RDSPendingMaintenanceAction = TypedDict(
    'RDSPendingMaintenanceAction', {
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
    }
)


RDSResourcePendingMaintenanceActions = TypedDict(
    'RDSResourcePendingMaintenanceActions', {
        'String': Optional[str],
        'PendingMaintenanceActionDetails': Optional[List[RDSPendingMaintenanceAction]],
    }
)


RDSApplyPendingMaintenanceActionResult = TypedDict(
    'RDSApplyPendingMaintenanceActionResult', {
        'ResourcePendingMaintenanceActions': Optional[RDSResourcePendingMaintenanceActions],
    }
)


RDSEC2SecurityGroup = TypedDict(
    'RDSEC2SecurityGroup', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


RDSIPRange = TypedDict(
    'RDSIPRange', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


RDSDBSecurityGroup = TypedDict(
    'RDSDBSecurityGroup', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'EC2SecurityGroupList': Optional[List[RDSEC2SecurityGroup]],
        'IPRangeList': Optional[List[RDSIPRange]],
        'String': Optional[str],
    }
)


RDSAuthorizeDBSecurityGroupIngressResult = TypedDict(
    'RDSAuthorizeDBSecurityGroupIngressResult', {
        'DBSecurityGroup': Optional[RDSDBSecurityGroup],
    }
)


RDSDBClusterBacktrack = TypedDict(
    'RDSDBClusterBacktrack', {
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'TStamp': Optional[datetime.datetime],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
    }
)


RDSDBClusterParameterGroup = TypedDict(
    'RDSDBClusterParameterGroup', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


RDSCopyDBClusterParameterGroupResult = TypedDict(
    'RDSCopyDBClusterParameterGroupResult', {
        'DBClusterParameterGroup': Optional[RDSDBClusterParameterGroup],
    }
)


RDSDBClusterSnapshot = TypedDict(
    'RDSDBClusterSnapshot', {
        'AvailabilityZones': Optional[List[str]],
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
    }
)


RDSCopyDBClusterSnapshotResult = TypedDict(
    'RDSCopyDBClusterSnapshotResult', {
        'DBClusterSnapshot': Optional[RDSDBClusterSnapshot],
    }
)


RDSDBParameterGroup = TypedDict(
    'RDSDBParameterGroup', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


RDSCopyDBParameterGroupResult = TypedDict(
    'RDSCopyDBParameterGroupResult', {
        'DBParameterGroup': Optional[RDSDBParameterGroup],
    }
)


RDSProcessorFeature = TypedDict(
    'RDSProcessorFeature', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


RDSDBSnapshot = TypedDict(
    'RDSDBSnapshot', {
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'ProcessorFeatureList': Optional[List[RDSProcessorFeature]],
        'String': Optional[str],
    }
)


RDSCopyDBSnapshotResult = TypedDict(
    'RDSCopyDBSnapshotResult', {
        'DBSnapshot': Optional[RDSDBSnapshot],
    }
)


RDSOptionSetting = TypedDict(
    'RDSOptionSetting', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
    }
)


RDSDBSecurityGroupMembership = TypedDict(
    'RDSDBSecurityGroupMembership', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


RDSVpcSecurityGroupMembership = TypedDict(
    'RDSVpcSecurityGroupMembership', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


RDSOption = TypedDict(
    'RDSOption', {
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'OptionSettingConfigurationList': Optional[List[RDSOptionSetting]],
        'DBSecurityGroupMembershipList': Optional[List[RDSDBSecurityGroupMembership]],
        'VpcSecurityGroupMembershipList': Optional[List[RDSVpcSecurityGroupMembership]],
    }
)


RDSOptionGroup = TypedDict(
    'RDSOptionGroup', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'OptionsList': Optional[List[RDSOption]],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
    }
)


RDSCopyOptionGroupResult = TypedDict(
    'RDSCopyOptionGroupResult', {
        'OptionGroup': Optional[RDSOptionGroup],
    }
)


RDSScalingConfiguration = TypedDict(
    'RDSScalingConfiguration', {
        'IntegerOptional': Optional[int],
        'IntegerOptional': Optional[int],
        'BooleanOptional': Optional[bool],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
    }
)


RDSDBClusterOptionGroupStatus = TypedDict(
    'RDSDBClusterOptionGroupStatus', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


RDSDBClusterMember = TypedDict(
    'RDSDBClusterMember', {
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
    }
)


RDSDBClusterRole = TypedDict(
    'RDSDBClusterRole', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


RDSScalingConfigurationInfo = TypedDict(
    'RDSScalingConfigurationInfo', {
        'IntegerOptional': Optional[int],
        'IntegerOptional': Optional[int],
        'BooleanOptional': Optional[bool],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
    }
)


RDSDBCluster = TypedDict(
    'RDSDBCluster', {
        'IntegerOptional': Optional[int],
        'AvailabilityZones': Optional[List[str]],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'StringList': Optional[List[str]],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'DBClusterOptionGroupMemberships': Optional[List[RDSDBClusterOptionGroupStatus]],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'ReadReplicaIdentifierList': Optional[List[str]],
        'DBClusterMemberList': Optional[List[RDSDBClusterMember]],
        'VpcSecurityGroupMembershipList': Optional[List[RDSVpcSecurityGroupMembership]],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DBClusterRoles': Optional[List[RDSDBClusterRole]],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'TStamp': Optional[datetime.datetime],
        'LongOptional': Optional[int],
        'LongOptional': Optional[int],
        'LogTypeList': Optional[List[str]],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'ScalingConfigurationInfo': Optional[RDSScalingConfigurationInfo],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
    }
)


RDSCreateDBClusterResult = TypedDict(
    'RDSCreateDBClusterResult', {
        'DBCluster': Optional[RDSDBCluster],
    }
)


RDSDBClusterEndpoint = TypedDict(
    'RDSDBClusterEndpoint', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'StringList': Optional[List[str]],
        'StringList': Optional[List[str]],
        'String': Optional[str],
    }
)


RDSCreateDBClusterParameterGroupResult = TypedDict(
    'RDSCreateDBClusterParameterGroupResult', {
        'DBClusterParameterGroup': Optional[RDSDBClusterParameterGroup],
    }
)


RDSCreateDBClusterSnapshotResult = TypedDict(
    'RDSCreateDBClusterSnapshotResult', {
        'DBClusterSnapshot': Optional[RDSDBClusterSnapshot],
    }
)


RDSEndpoint = TypedDict(
    'RDSEndpoint', {
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
    }
)


RDSDBParameterGroupStatus = TypedDict(
    'RDSDBParameterGroupStatus', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


RDSAvailabilityZone = TypedDict(
    'RDSAvailabilityZone', {
        'String': Optional[str],
    }
)


RDSSubnet = TypedDict(
    'RDSSubnet', {
        'String': Optional[str],
        'AvailabilityZone': Optional[RDSAvailabilityZone],
        'String': Optional[str],
    }
)


RDSDBSubnetGroup = TypedDict(
    'RDSDBSubnetGroup', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'SubnetList': Optional[List[RDSSubnet]],
        'String': Optional[str],
    }
)


RDSPendingCloudwatchLogsExports = TypedDict(
    'RDSPendingCloudwatchLogsExports', {
        'LogTypeList': Optional[List[str]],
        'LogTypeList': Optional[List[str]],
    }
)


RDSPendingModifiedValues = TypedDict(
    'RDSPendingModifiedValues', {
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'IntegerOptional': Optional[int],
        'BooleanOptional': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'PendingCloudwatchLogsExports': Optional[RDSPendingCloudwatchLogsExports],
        'ProcessorFeatureList': Optional[List[RDSProcessorFeature]],
    }
)


RDSOptionGroupMembership = TypedDict(
    'RDSOptionGroupMembership', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


RDSDBInstanceStatusInfo = TypedDict(
    'RDSDBInstanceStatusInfo', {
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
    }
)


RDSDomainMembership = TypedDict(
    'RDSDomainMembership', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


RDSDBInstanceRole = TypedDict(
    'RDSDBInstanceRole', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


RDSDBInstance = TypedDict(
    'RDSDBInstance', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Endpoint': Optional[RDSEndpoint],
        'Integer': Optional[int],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'Integer': Optional[int],
        'DBSecurityGroupMembershipList': Optional[List[RDSDBSecurityGroupMembership]],
        'VpcSecurityGroupMembershipList': Optional[List[RDSVpcSecurityGroupMembership]],
        'DBParameterGroupStatusList': Optional[List[RDSDBParameterGroupStatus]],
        'String': Optional[str],
        'DBSubnetGroup': Optional[RDSDBSubnetGroup],
        'String': Optional[str],
        'PendingModifiedValues': Optional[RDSPendingModifiedValues],
        'TStamp': Optional[datetime.datetime],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'ReadReplicaDBInstanceIdentifierList': Optional[List[str]],
        'ReadReplicaDBClusterIdentifierList': Optional[List[str]],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'OptionGroupMembershipList': Optional[List[RDSOptionGroupMembership]],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'DBInstanceStatusInfoList': Optional[List[RDSDBInstanceStatusInfo]],
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DomainMembershipList': Optional[List[RDSDomainMembership]],
        'Boolean': Optional[bool],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'BooleanOptional': Optional[bool],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'LogTypeList': Optional[List[str]],
        'ProcessorFeatureList': Optional[List[RDSProcessorFeature]],
        'Boolean': Optional[bool],
        'DBInstanceRoles': Optional[List[RDSDBInstanceRole]],
        'Endpoint': Optional[RDSEndpoint],
    }
)


RDSCreateDBInstanceResult = TypedDict(
    'RDSCreateDBInstanceResult', {
        'DBInstance': Optional[RDSDBInstance],
    }
)


RDSCreateDBInstanceReadReplicaResult = TypedDict(
    'RDSCreateDBInstanceReadReplicaResult', {
        'DBInstance': Optional[RDSDBInstance],
    }
)


RDSCreateDBParameterGroupResult = TypedDict(
    'RDSCreateDBParameterGroupResult', {
        'DBParameterGroup': Optional[RDSDBParameterGroup],
    }
)


RDSCreateDBSecurityGroupResult = TypedDict(
    'RDSCreateDBSecurityGroupResult', {
        'DBSecurityGroup': Optional[RDSDBSecurityGroup],
    }
)


RDSCreateDBSnapshotResult = TypedDict(
    'RDSCreateDBSnapshotResult', {
        'DBSnapshot': Optional[RDSDBSnapshot],
    }
)


RDSCreateDBSubnetGroupResult = TypedDict(
    'RDSCreateDBSubnetGroupResult', {
        'DBSubnetGroup': Optional[RDSDBSubnetGroup],
    }
)


RDSCreateEventSubscriptionResult = TypedDict(
    'RDSCreateEventSubscriptionResult', {
        'EventSubscription': Optional[RDSEventSubscription],
    }
)


RDSGlobalClusterMember = TypedDict(
    'RDSGlobalClusterMember', {
        'String': Optional[str],
        'ReadersArnList': Optional[List[str]],
        'Boolean': Optional[bool],
    }
)


RDSGlobalCluster = TypedDict(
    'RDSGlobalCluster', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'BooleanOptional': Optional[bool],
        'BooleanOptional': Optional[bool],
        'GlobalClusterMemberList': Optional[List[RDSGlobalClusterMember]],
    }
)


RDSCreateGlobalClusterResult = TypedDict(
    'RDSCreateGlobalClusterResult', {
        'GlobalCluster': Optional[RDSGlobalCluster],
    }
)


RDSCreateOptionGroupResult = TypedDict(
    'RDSCreateOptionGroupResult', {
        'OptionGroup': Optional[RDSOptionGroup],
    }
)


RDSDeleteDBClusterResult = TypedDict(
    'RDSDeleteDBClusterResult', {
        'DBCluster': Optional[RDSDBCluster],
    }
)


RDSDeleteDBClusterSnapshotResult = TypedDict(
    'RDSDeleteDBClusterSnapshotResult', {
        'DBClusterSnapshot': Optional[RDSDBClusterSnapshot],
    }
)


RDSDeleteDBInstanceResult = TypedDict(
    'RDSDeleteDBInstanceResult', {
        'DBInstance': Optional[RDSDBInstance],
    }
)


RDSRestoreWindow = TypedDict(
    'RDSRestoreWindow', {
        'TStamp': Optional[datetime.datetime],
        'TStamp': Optional[datetime.datetime],
    }
)


RDSDBInstanceAutomatedBackup = TypedDict(
    'RDSDBInstanceAutomatedBackup', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'RestoreWindow': Optional[RDSRestoreWindow],
        'Integer': Optional[int],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
    }
)


RDSDeleteDBInstanceAutomatedBackupResult = TypedDict(
    'RDSDeleteDBInstanceAutomatedBackupResult', {
        'DBInstanceAutomatedBackup': Optional[RDSDBInstanceAutomatedBackup],
    }
)


RDSDeleteDBSnapshotResult = TypedDict(
    'RDSDeleteDBSnapshotResult', {
        'DBSnapshot': Optional[RDSDBSnapshot],
    }
)


RDSDeleteEventSubscriptionResult = TypedDict(
    'RDSDeleteEventSubscriptionResult', {
        'EventSubscription': Optional[RDSEventSubscription],
    }
)


RDSDeleteGlobalClusterResult = TypedDict(
    'RDSDeleteGlobalClusterResult', {
        'GlobalCluster': Optional[RDSGlobalCluster],
    }
)


RDSAccountQuota = TypedDict(
    'RDSAccountQuota', {
        'String': Optional[str],
        'Long': Optional[int],
        'Long': Optional[int],
    }
)


RDSAccountAttributesMessage = TypedDict(
    'RDSAccountAttributesMessage', {
        'AccountQuotaList': Optional[List[RDSAccountQuota]],
    }
)


RDSFilter = TypedDict(
    'RDSFilter', {
        'String': str,
        'FilterValueList': List[str],
    }
)


RDSCertificate = TypedDict(
    'RDSCertificate', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
    }
)


RDSCertificateMessage = TypedDict(
    'RDSCertificateMessage', {
        'CertificateList': Optional[List[RDSCertificate]],
        'String': Optional[str],
    }
)


RDSDBClusterBacktrackMessage = TypedDict(
    'RDSDBClusterBacktrackMessage', {
        'String': Optional[str],
        'DBClusterBacktrackList': Optional[List[RDSDBClusterBacktrack]],
    }
)


RDSDBClusterEndpointMessage = TypedDict(
    'RDSDBClusterEndpointMessage', {
        'String': Optional[str],
        'DBClusterEndpointList': Optional[List[RDSDBClusterEndpoint]],
    }
)


RDSDBClusterParameterGroupsMessage = TypedDict(
    'RDSDBClusterParameterGroupsMessage', {
        'String': Optional[str],
        'DBClusterParameterGroupList': Optional[List[RDSDBClusterParameterGroup]],
    }
)


RDSParameter = TypedDict(
    'RDSParameter', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'ApplyMethod': Optional[str],
        'EngineModeList': Optional[List[str]],
    }
)


RDSDBClusterParameterGroupDetails = TypedDict(
    'RDSDBClusterParameterGroupDetails', {
        'ParametersList': Optional[List[RDSParameter]],
        'String': Optional[str],
    }
)


RDSDBClusterSnapshotAttribute = TypedDict(
    'RDSDBClusterSnapshotAttribute', {
        'String': Optional[str],
        'AttributeValueList': Optional[List[str]],
    }
)


RDSDBClusterSnapshotAttributesResult = TypedDict(
    'RDSDBClusterSnapshotAttributesResult', {
        'String': Optional[str],
        'DBClusterSnapshotAttributeList': Optional[List[RDSDBClusterSnapshotAttribute]],
    }
)


RDSDescribeDBClusterSnapshotAttributesResult = TypedDict(
    'RDSDescribeDBClusterSnapshotAttributesResult', {
        'DBClusterSnapshotAttributesResult': Optional[RDSDBClusterSnapshotAttributesResult],
    }
)


RDSDBClusterSnapshotMessage = TypedDict(
    'RDSDBClusterSnapshotMessage', {
        'String': Optional[str],
        'DBClusterSnapshotList': Optional[List[RDSDBClusterSnapshot]],
    }
)


RDSDBClusterMessage = TypedDict(
    'RDSDBClusterMessage', {
        'String': Optional[str],
        'DBClusterList': Optional[List[RDSDBCluster]],
    }
)


RDSCharacterSet = TypedDict(
    'RDSCharacterSet', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


RDSUpgradeTarget = TypedDict(
    'RDSUpgradeTarget', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
    }
)


RDSTimezone = TypedDict(
    'RDSTimezone', {
        'String': Optional[str],
    }
)


RDSDBEngineVersion = TypedDict(
    'RDSDBEngineVersion', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'CharacterSet': Optional[RDSCharacterSet],
        'SupportedCharacterSetsList': Optional[List[RDSCharacterSet]],
        'ValidUpgradeTargetList': Optional[List[RDSUpgradeTarget]],
        'SupportedTimezonesList': Optional[List[RDSTimezone]],
        'LogTypeList': Optional[List[str]],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'EngineModeList': Optional[List[str]],
        'FeatureNameList': Optional[List[str]],
    }
)


RDSDBEngineVersionMessage = TypedDict(
    'RDSDBEngineVersionMessage', {
        'String': Optional[str],
        'DBEngineVersionList': Optional[List[RDSDBEngineVersion]],
    }
)


RDSDBInstanceAutomatedBackupMessage = TypedDict(
    'RDSDBInstanceAutomatedBackupMessage', {
        'String': Optional[str],
        'DBInstanceAutomatedBackupList': Optional[List[RDSDBInstanceAutomatedBackup]],
    }
)


RDSDBInstanceMessage = TypedDict(
    'RDSDBInstanceMessage', {
        'String': Optional[str],
        'DBInstanceList': Optional[List[RDSDBInstance]],
    }
)


RDSDescribeDBLogFilesDetails = TypedDict(
    'RDSDescribeDBLogFilesDetails', {
        'String': Optional[str],
        'Long': Optional[int],
        'Long': Optional[int],
    }
)


RDSDescribeDBLogFilesResponse = TypedDict(
    'RDSDescribeDBLogFilesResponse', {
        'DescribeDBLogFilesList': Optional[List[RDSDescribeDBLogFilesDetails]],
        'String': Optional[str],
    }
)


RDSDBParameterGroupsMessage = TypedDict(
    'RDSDBParameterGroupsMessage', {
        'String': Optional[str],
        'DBParameterGroupList': Optional[List[RDSDBParameterGroup]],
    }
)


RDSDBParameterGroupDetails = TypedDict(
    'RDSDBParameterGroupDetails', {
        'ParametersList': Optional[List[RDSParameter]],
        'String': Optional[str],
    }
)


RDSDBSecurityGroupMessage = TypedDict(
    'RDSDBSecurityGroupMessage', {
        'String': Optional[str],
        'DBSecurityGroups': Optional[List[RDSDBSecurityGroup]],
    }
)


RDSDBSnapshotAttribute = TypedDict(
    'RDSDBSnapshotAttribute', {
        'String': Optional[str],
        'AttributeValueList': Optional[List[str]],
    }
)


RDSDBSnapshotAttributesResult = TypedDict(
    'RDSDBSnapshotAttributesResult', {
        'String': Optional[str],
        'DBSnapshotAttributeList': Optional[List[RDSDBSnapshotAttribute]],
    }
)


RDSDescribeDBSnapshotAttributesResult = TypedDict(
    'RDSDescribeDBSnapshotAttributesResult', {
        'DBSnapshotAttributesResult': Optional[RDSDBSnapshotAttributesResult],
    }
)


RDSDBSnapshotMessage = TypedDict(
    'RDSDBSnapshotMessage', {
        'String': Optional[str],
        'DBSnapshotList': Optional[List[RDSDBSnapshot]],
    }
)


RDSDBSubnetGroupMessage = TypedDict(
    'RDSDBSubnetGroupMessage', {
        'String': Optional[str],
        'DBSubnetGroups': Optional[List[RDSDBSubnetGroup]],
    }
)


RDSEngineDefaults = TypedDict(
    'RDSEngineDefaults', {
        'String': Optional[str],
        'String': Optional[str],
        'ParametersList': Optional[List[RDSParameter]],
    }
)


RDSDescribeEngineDefaultClusterParametersResult = TypedDict(
    'RDSDescribeEngineDefaultClusterParametersResult', {
        'EngineDefaults': Optional[RDSEngineDefaults],
    }
)


RDSDescribeEngineDefaultParametersResult = TypedDict(
    'RDSDescribeEngineDefaultParametersResult', {
        'EngineDefaults': Optional[RDSEngineDefaults],
    }
)


RDSEventCategoriesMap = TypedDict(
    'RDSEventCategoriesMap', {
        'String': Optional[str],
        'EventCategoriesList': Optional[List[str]],
    }
)


RDSEventCategoriesMessage = TypedDict(
    'RDSEventCategoriesMessage', {
        'EventCategoriesMapList': Optional[List[RDSEventCategoriesMap]],
    }
)


RDSEventSubscriptionsMessage = TypedDict(
    'RDSEventSubscriptionsMessage', {
        'String': Optional[str],
        'EventSubscriptionsList': Optional[List[RDSEventSubscription]],
    }
)


RDSEvent = TypedDict(
    'RDSEvent', {
        'String': Optional[str],
        'SourceType': Optional[str],
        'String': Optional[str],
        'EventCategoriesList': Optional[List[str]],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
    }
)


RDSEventsMessage = TypedDict(
    'RDSEventsMessage', {
        'String': Optional[str],
        'EventList': Optional[List[RDSEvent]],
    }
)


RDSGlobalClustersMessage = TypedDict(
    'RDSGlobalClustersMessage', {
        'String': Optional[str],
        'GlobalClusterList': Optional[List[RDSGlobalCluster]],
    }
)


RDSMinimumEngineVersionPerAllowedValue = TypedDict(
    'RDSMinimumEngineVersionPerAllowedValue', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


RDSOptionGroupOptionSetting = TypedDict(
    'RDSOptionGroupOptionSetting', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'MinimumEngineVersionPerAllowedValueList': Optional[List[RDSMinimumEngineVersionPerAllowedValue]],
    }
)


RDSOptionVersion = TypedDict(
    'RDSOptionVersion', {
        'String': Optional[str],
        'Boolean': Optional[bool],
    }
)


RDSOptionGroupOption = TypedDict(
    'RDSOptionGroupOption', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'IntegerOptional': Optional[int],
        'OptionsDependedOn': Optional[List[str]],
        'OptionsConflictsWith': Optional[List[str]],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'BooleanOptional': Optional[bool],
        'OptionGroupOptionSettingsList': Optional[List[RDSOptionGroupOptionSetting]],
        'OptionGroupOptionVersionsList': Optional[List[RDSOptionVersion]],
    }
)


RDSOptionGroupOptionsMessage = TypedDict(
    'RDSOptionGroupOptionsMessage', {
        'OptionGroupOptionsList': Optional[List[RDSOptionGroupOption]],
        'String': Optional[str],
    }
)


RDSOptionGroups = TypedDict(
    'RDSOptionGroups', {
        'OptionGroupsList': Optional[List[RDSOptionGroup]],
        'String': Optional[str],
    }
)


RDSAvailableProcessorFeature = TypedDict(
    'RDSAvailableProcessorFeature', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


RDSOrderableDBInstanceOption = TypedDict(
    'RDSOrderableDBInstanceOption', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'AvailabilityZoneList': Optional[List[RDSAvailabilityZone]],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'IntegerOptional': Optional[int],
        'IntegerOptional': Optional[int],
        'IntegerOptional': Optional[int],
        'IntegerOptional': Optional[int],
        'DoubleOptional': Optional[float],
        'DoubleOptional': Optional[float],
        'AvailableProcessorFeatureList': Optional[List[RDSAvailableProcessorFeature]],
        'EngineModeList': Optional[List[str]],
    }
)


RDSOrderableDBInstanceOptionsMessage = TypedDict(
    'RDSOrderableDBInstanceOptionsMessage', {
        'OrderableDBInstanceOptionsList': Optional[List[RDSOrderableDBInstanceOption]],
        'String': Optional[str],
    }
)


RDSPendingMaintenanceActionsMessage = TypedDict(
    'RDSPendingMaintenanceActionsMessage', {
        'PendingMaintenanceActions': Optional[List[RDSResourcePendingMaintenanceActions]],
        'String': Optional[str],
    }
)


RDSRecurringCharge = TypedDict(
    'RDSRecurringCharge', {
        'Double': Optional[float],
        'String': Optional[str],
    }
)


RDSReservedDBInstance = TypedDict(
    'RDSReservedDBInstance', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'Integer': Optional[int],
        'Double': Optional[float],
        'Double': Optional[float],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'RecurringChargeList': Optional[List[RDSRecurringCharge]],
        'String': Optional[str],
    }
)


RDSReservedDBInstanceMessage = TypedDict(
    'RDSReservedDBInstanceMessage', {
        'String': Optional[str],
        'ReservedDBInstanceList': Optional[List[RDSReservedDBInstance]],
    }
)


RDSReservedDBInstancesOffering = TypedDict(
    'RDSReservedDBInstancesOffering', {
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'Double': Optional[float],
        'Double': Optional[float],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'RecurringChargeList': Optional[List[RDSRecurringCharge]],
    }
)


RDSReservedDBInstancesOfferingMessage = TypedDict(
    'RDSReservedDBInstancesOfferingMessage', {
        'String': Optional[str],
        'ReservedDBInstancesOfferingList': Optional[List[RDSReservedDBInstancesOffering]],
    }
)


RDSSourceRegion = TypedDict(
    'RDSSourceRegion', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


RDSSourceRegionMessage = TypedDict(
    'RDSSourceRegionMessage', {
        'String': Optional[str],
        'SourceRegionList': Optional[List[RDSSourceRegion]],
    }
)


RDSRange = TypedDict(
    'RDSRange', {
        'Integer': Optional[int],
        'Integer': Optional[int],
        'IntegerOptional': Optional[int],
    }
)


RDSDoubleRange = TypedDict(
    'RDSDoubleRange', {
        'Double': Optional[float],
        'Double': Optional[float],
    }
)


RDSValidStorageOptions = TypedDict(
    'RDSValidStorageOptions', {
        'String': Optional[str],
        'RangeList': Optional[List[RDSRange]],
        'RangeList': Optional[List[RDSRange]],
        'DoubleRangeList': Optional[List[RDSDoubleRange]],
    }
)


RDSValidDBInstanceModificationsMessage = TypedDict(
    'RDSValidDBInstanceModificationsMessage', {
        'ValidStorageOptionsList': Optional[List[RDSValidStorageOptions]],
        'AvailableProcessorFeatureList': Optional[List[RDSAvailableProcessorFeature]],
    }
)


RDSDescribeValidDBInstanceModificationsResult = TypedDict(
    'RDSDescribeValidDBInstanceModificationsResult', {
        'ValidDBInstanceModificationsMessage': Optional[RDSValidDBInstanceModificationsMessage],
    }
)


RDSDownloadDBLogFilePortionDetails = TypedDict(
    'RDSDownloadDBLogFilePortionDetails', {
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
    }
)


RDSFailoverDBClusterResult = TypedDict(
    'RDSFailoverDBClusterResult', {
        'DBCluster': Optional[RDSDBCluster],
    }
)


RDSTagListMessage = TypedDict(
    'RDSTagListMessage', {
        'TagList': Optional[List[RDSTag]],
    }
)


RDSDBClusterCapacityInfo = TypedDict(
    'RDSDBClusterCapacityInfo', {
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'IntegerOptional': Optional[int],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
    }
)


RDSCloudwatchLogsExportConfiguration = TypedDict(
    'RDSCloudwatchLogsExportConfiguration', {
        'LogTypeList': Optional[List[str]],
        'LogTypeList': Optional[List[str]],
    }
)


RDSModifyDBClusterResult = TypedDict(
    'RDSModifyDBClusterResult', {
        'DBCluster': Optional[RDSDBCluster],
    }
)


RDSDBClusterParameterGroupNameMessage = TypedDict(
    'RDSDBClusterParameterGroupNameMessage', {
        'String': Optional[str],
    }
)


RDSModifyDBClusterSnapshotAttributeResult = TypedDict(
    'RDSModifyDBClusterSnapshotAttributeResult', {
        'DBClusterSnapshotAttributesResult': Optional[RDSDBClusterSnapshotAttributesResult],
    }
)


RDSModifyDBInstanceResult = TypedDict(
    'RDSModifyDBInstanceResult', {
        'DBInstance': Optional[RDSDBInstance],
    }
)


RDSDBParameterGroupNameMessage = TypedDict(
    'RDSDBParameterGroupNameMessage', {
        'String': Optional[str],
    }
)


RDSModifyDBSnapshotResult = TypedDict(
    'RDSModifyDBSnapshotResult', {
        'DBSnapshot': Optional[RDSDBSnapshot],
    }
)


RDSModifyDBSnapshotAttributeResult = TypedDict(
    'RDSModifyDBSnapshotAttributeResult', {
        'DBSnapshotAttributesResult': Optional[RDSDBSnapshotAttributesResult],
    }
)


RDSModifyDBSubnetGroupResult = TypedDict(
    'RDSModifyDBSubnetGroupResult', {
        'DBSubnetGroup': Optional[RDSDBSubnetGroup],
    }
)


RDSModifyEventSubscriptionResult = TypedDict(
    'RDSModifyEventSubscriptionResult', {
        'EventSubscription': Optional[RDSEventSubscription],
    }
)


RDSModifyGlobalClusterResult = TypedDict(
    'RDSModifyGlobalClusterResult', {
        'GlobalCluster': Optional[RDSGlobalCluster],
    }
)


RDSOptionConfiguration = TypedDict(
    'RDSOptionConfiguration', {
        'String': str,
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'DBSecurityGroupNameList': Optional[List[str]],
        'VpcSecurityGroupIdList': Optional[List[str]],
        'OptionSettingsList': Optional[List[RDSOptionSetting]],
    }
)


RDSModifyOptionGroupResult = TypedDict(
    'RDSModifyOptionGroupResult', {
        'OptionGroup': Optional[RDSOptionGroup],
    }
)


RDSPromoteReadReplicaResult = TypedDict(
    'RDSPromoteReadReplicaResult', {
        'DBInstance': Optional[RDSDBInstance],
    }
)


RDSPromoteReadReplicaDBClusterResult = TypedDict(
    'RDSPromoteReadReplicaDBClusterResult', {
        'DBCluster': Optional[RDSDBCluster],
    }
)


RDSPurchaseReservedDBInstancesOfferingResult = TypedDict(
    'RDSPurchaseReservedDBInstancesOfferingResult', {
        'ReservedDBInstance': Optional[RDSReservedDBInstance],
    }
)


RDSRebootDBInstanceResult = TypedDict(
    'RDSRebootDBInstanceResult', {
        'DBInstance': Optional[RDSDBInstance],
    }
)


RDSRemoveFromGlobalClusterResult = TypedDict(
    'RDSRemoveFromGlobalClusterResult', {
        'GlobalCluster': Optional[RDSGlobalCluster],
    }
)


RDSRemoveSourceIdentifierFromSubscriptionResult = TypedDict(
    'RDSRemoveSourceIdentifierFromSubscriptionResult', {
        'EventSubscription': Optional[RDSEventSubscription],
    }
)


RDSRestoreDBClusterFromS3Result = TypedDict(
    'RDSRestoreDBClusterFromS3Result', {
        'DBCluster': Optional[RDSDBCluster],
    }
)


RDSRestoreDBClusterFromSnapshotResult = TypedDict(
    'RDSRestoreDBClusterFromSnapshotResult', {
        'DBCluster': Optional[RDSDBCluster],
    }
)


RDSRestoreDBClusterToPointInTimeResult = TypedDict(
    'RDSRestoreDBClusterToPointInTimeResult', {
        'DBCluster': Optional[RDSDBCluster],
    }
)


RDSRestoreDBInstanceFromDBSnapshotResult = TypedDict(
    'RDSRestoreDBInstanceFromDBSnapshotResult', {
        'DBInstance': Optional[RDSDBInstance],
    }
)


RDSRestoreDBInstanceFromS3Result = TypedDict(
    'RDSRestoreDBInstanceFromS3Result', {
        'DBInstance': Optional[RDSDBInstance],
    }
)


RDSRestoreDBInstanceToPointInTimeResult = TypedDict(
    'RDSRestoreDBInstanceToPointInTimeResult', {
        'DBInstance': Optional[RDSDBInstance],
    }
)


RDSRevokeDBSecurityGroupIngressResult = TypedDict(
    'RDSRevokeDBSecurityGroupIngressResult', {
        'DBSecurityGroup': Optional[RDSDBSecurityGroup],
    }
)


RDSStartDBClusterResult = TypedDict(
    'RDSStartDBClusterResult', {
        'DBCluster': Optional[RDSDBCluster],
    }
)


RDSStartDBInstanceResult = TypedDict(
    'RDSStartDBInstanceResult', {
        'DBInstance': Optional[RDSDBInstance],
    }
)


RDSStopDBClusterResult = TypedDict(
    'RDSStopDBClusterResult', {
        'DBCluster': Optional[RDSDBCluster],
    }
)


RDSStopDBInstanceResult = TypedDict(
    'RDSStopDBInstanceResult', {
        'DBInstance': Optional[RDSDBInstance],
    }
)


class Redshift(BaseClient):
    def accept_reserved_node_exchange(self, *,
        ReservedNodeId: str,
        TargetReservedNodeOfferingId: str
    ) -> RedshiftAcceptReservedNodeExchangeOutputMessage: ...

    def authorize_cluster_security_group_ingress(self, *,
        ClusterSecurityGroupName: str,
        CIDRIP: str = ...,
        EC2SecurityGroupName: str = ...,
        EC2SecurityGroupOwnerId: str = ...
    ) -> RedshiftAuthorizeClusterSecurityGroupIngressResult: ...

    def authorize_snapshot_access(self, *,
        SnapshotIdentifier: str,
        AccountWithRestoreAccess: str,
        SnapshotClusterIdentifier: str = ...
    ) -> RedshiftAuthorizeSnapshotAccessResult: ...

    def batch_delete_cluster_snapshots(self, *,
        Identifiers: List[RedshiftDeleteClusterSnapshotMessage]
    ) -> RedshiftBatchDeleteClusterSnapshotsResult: ...

    def batch_modify_cluster_snapshots(self, *,
        SnapshotIdentifierList: List[str],
        ManualSnapshotRetentionPeriod: int = ...,
        Force: bool = ...
    ) -> RedshiftBatchModifyClusterSnapshotsOutputMessage: ...

    def cancel_resize(self, *,
        ClusterIdentifier: str
    ) -> RedshiftResizeProgressMessage: ...

    def copy_cluster_snapshot(self, *,
        SourceSnapshotIdentifier: str,
        TargetSnapshotIdentifier: str,
        SourceSnapshotClusterIdentifier: str = ...,
        ManualSnapshotRetentionPeriod: int = ...
    ) -> RedshiftCopyClusterSnapshotResult: ...

    def create_cluster(self, *,
        ClusterIdentifier: str,
        NodeType: str,
        MasterUsername: str,
        MasterUserPassword: str,
        DBName: str = ...,
        ClusterType: str = ...,
        ClusterSecurityGroups: List[str] = ...,
        VpcSecurityGroupIds: List[str] = ...,
        ClusterSubnetGroupName: str = ...,
        AvailabilityZone: str = ...,
        PreferredMaintenanceWindow: str = ...,
        ClusterParameterGroupName: str = ...,
        AutomatedSnapshotRetentionPeriod: int = ...,
        ManualSnapshotRetentionPeriod: int = ...,
        Port: int = ...,
        ClusterVersion: str = ...,
        AllowVersionUpgrade: bool = ...,
        NumberOfNodes: int = ...,
        PubliclyAccessible: bool = ...,
        Encrypted: bool = ...,
        HsmClientCertificateIdentifier: str = ...,
        HsmConfigurationIdentifier: str = ...,
        ElasticIp: str = ...,
        Tags: List[RedshiftTag] = ...,
        KmsKeyId: str = ...,
        EnhancedVpcRouting: bool = ...,
        AdditionalInfo: str = ...,
        IamRoles: List[str] = ...,
        MaintenanceTrackName: str = ...,
        SnapshotScheduleIdentifier: str = ...
    ) -> RedshiftCreateClusterResult: ...

    def create_cluster_parameter_group(self, *,
        ParameterGroupName: str,
        ParameterGroupFamily: str,
        Description: str,
        Tags: List[RedshiftTag] = ...
    ) -> RedshiftCreateClusterParameterGroupResult: ...

    def create_cluster_security_group(self, *,
        ClusterSecurityGroupName: str,
        Description: str,
        Tags: List[RedshiftTag] = ...
    ) -> RedshiftCreateClusterSecurityGroupResult: ...

    def create_cluster_snapshot(self, *,
        SnapshotIdentifier: str,
        ClusterIdentifier: str,
        ManualSnapshotRetentionPeriod: int = ...,
        Tags: List[RedshiftTag] = ...
    ) -> RedshiftCreateClusterSnapshotResult: ...

    def create_cluster_subnet_group(self, *,
        ClusterSubnetGroupName: str,
        Description: str,
        SubnetIds: List[str],
        Tags: List[RedshiftTag] = ...
    ) -> RedshiftCreateClusterSubnetGroupResult: ...

    def create_event_subscription(self, *,
        SubscriptionName: str,
        SnsTopicArn: str,
        SourceType: str = ...,
        SourceIds: List[str] = ...,
        EventCategories: List[str] = ...,
        Severity: str = ...,
        Enabled: bool = ...,
        Tags: List[RedshiftTag] = ...
    ) -> RedshiftCreateEventSubscriptionResult: ...

    def create_hsm_client_certificate(self, *,
        HsmClientCertificateIdentifier: str,
        Tags: List[RedshiftTag] = ...
    ) -> RedshiftCreateHsmClientCertificateResult: ...

    def create_hsm_configuration(self, *,
        HsmConfigurationIdentifier: str,
        Description: str,
        HsmIpAddress: str,
        HsmPartitionName: str,
        HsmPartitionPassword: str,
        HsmServerPublicCertificate: str,
        Tags: List[RedshiftTag] = ...
    ) -> RedshiftCreateHsmConfigurationResult: ...

    def create_snapshot_copy_grant(self, *,
        SnapshotCopyGrantName: str,
        KmsKeyId: str = ...,
        Tags: List[RedshiftTag] = ...
    ) -> RedshiftCreateSnapshotCopyGrantResult: ...

    def create_snapshot_schedule(self, *,
        ScheduleDefinitions: List[str] = ...,
        ScheduleIdentifier: str = ...,
        ScheduleDescription: str = ...,
        Tags: List[RedshiftTag] = ...,
        DryRun: bool = ...,
        NextInvocations: int = ...
    ) -> RedshiftSnapshotSchedule: ...

    def create_tags(self, *,
        ResourceName: str,
        Tags: List[RedshiftTag]
    ): ...

    def delete_cluster(self, *,
        ClusterIdentifier: str,
        SkipFinalClusterSnapshot: bool = ...,
        FinalClusterSnapshotIdentifier: str = ...,
        FinalClusterSnapshotRetentionPeriod: int = ...
    ) -> RedshiftDeleteClusterResult: ...

    def delete_cluster_parameter_group(self, *,
        ParameterGroupName: str
    ): ...

    def delete_cluster_security_group(self, *,
        ClusterSecurityGroupName: str
    ): ...

    def delete_cluster_snapshot(self, *,
        SnapshotIdentifier: str,
        SnapshotClusterIdentifier: str = ...
    ) -> RedshiftDeleteClusterSnapshotResult: ...

    def delete_cluster_subnet_group(self, *,
        ClusterSubnetGroupName: str
    ): ...

    def delete_event_subscription(self, *,
        SubscriptionName: str
    ): ...

    def delete_hsm_client_certificate(self, *,
        HsmClientCertificateIdentifier: str
    ): ...

    def delete_hsm_configuration(self, *,
        HsmConfigurationIdentifier: str
    ): ...

    def delete_snapshot_copy_grant(self, *,
        SnapshotCopyGrantName: str
    ): ...

    def delete_snapshot_schedule(self, *,
        ScheduleIdentifier: str
    ): ...

    def delete_tags(self, *,
        ResourceName: str,
        TagKeys: List[str]
    ): ...

    def describe_account_attributes(self, *,
        AttributeNames: List[str] = ...
    ) -> RedshiftAccountAttributeList: ...

    def describe_cluster_db_revisions(self, *,
        ClusterIdentifier: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RedshiftClusterDbRevisionsMessage: ...

    def describe_cluster_parameter_groups(self, *,
        ParameterGroupName: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        TagKeys: List[str] = ...,
        TagValues: List[str] = ...
    ) -> RedshiftClusterParameterGroupsMessage: ...

    def describe_cluster_parameters(self, *,
        ParameterGroupName: str,
        Source: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RedshiftClusterParameterGroupDetails: ...

    def describe_cluster_security_groups(self, *,
        ClusterSecurityGroupName: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        TagKeys: List[str] = ...,
        TagValues: List[str] = ...
    ) -> RedshiftClusterSecurityGroupMessage: ...

    def describe_cluster_snapshots(self, *,
        ClusterIdentifier: str = ...,
        SnapshotIdentifier: str = ...,
        SnapshotType: str = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        OwnerAccount: str = ...,
        TagKeys: List[str] = ...,
        TagValues: List[str] = ...,
        ClusterExists: bool = ...,
        SortingEntities: List[RedshiftSnapshotSortingEntity] = ...
    ) -> RedshiftSnapshotMessage: ...

    def describe_cluster_subnet_groups(self, *,
        ClusterSubnetGroupName: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        TagKeys: List[str] = ...,
        TagValues: List[str] = ...
    ) -> RedshiftClusterSubnetGroupMessage: ...

    def describe_cluster_tracks(self, *,
        MaintenanceTrackName: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RedshiftTrackListMessage: ...

    def describe_cluster_versions(self, *,
        ClusterVersion: str = ...,
        ClusterParameterGroupFamily: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RedshiftClusterVersionsMessage: ...

    def describe_clusters(self, *,
        ClusterIdentifier: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        TagKeys: List[str] = ...,
        TagValues: List[str] = ...
    ) -> RedshiftClustersMessage: ...

    def describe_default_cluster_parameters(self, *,
        ParameterGroupFamily: str,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RedshiftDescribeDefaultClusterParametersResult: ...

    def describe_event_categories(self, *,
        SourceType: str = ...
    ) -> RedshiftEventCategoriesMessage: ...

    def describe_event_subscriptions(self, *,
        SubscriptionName: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        TagKeys: List[str] = ...,
        TagValues: List[str] = ...
    ) -> RedshiftEventSubscriptionsMessage: ...

    def describe_events(self, *,
        SourceIdentifier: str = ...,
        SourceType: str = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        Duration: int = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RedshiftEventsMessage: ...

    def describe_hsm_client_certificates(self, *,
        HsmClientCertificateIdentifier: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        TagKeys: List[str] = ...,
        TagValues: List[str] = ...
    ) -> RedshiftHsmClientCertificateMessage: ...

    def describe_hsm_configurations(self, *,
        HsmConfigurationIdentifier: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        TagKeys: List[str] = ...,
        TagValues: List[str] = ...
    ) -> RedshiftHsmConfigurationMessage: ...

    def describe_logging_status(self, *,
        ClusterIdentifier: str
    ) -> RedshiftLoggingStatus: ...

    def describe_orderable_cluster_options(self, *,
        ClusterVersion: str = ...,
        NodeType: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RedshiftOrderableClusterOptionsMessage: ...

    def describe_reserved_node_offerings(self, *,
        ReservedNodeOfferingId: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RedshiftReservedNodeOfferingsMessage: ...

    def describe_reserved_nodes(self, *,
        ReservedNodeId: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RedshiftReservedNodesMessage: ...

    def describe_resize(self, *,
        ClusterIdentifier: str
    ) -> RedshiftResizeProgressMessage: ...

    def describe_snapshot_copy_grants(self, *,
        SnapshotCopyGrantName: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        TagKeys: List[str] = ...,
        TagValues: List[str] = ...
    ) -> RedshiftSnapshotCopyGrantMessage: ...

    def describe_snapshot_schedules(self, *,
        ClusterIdentifier: str = ...,
        ScheduleIdentifier: str = ...,
        TagKeys: List[str] = ...,
        TagValues: List[str] = ...,
        Marker: str = ...,
        MaxRecords: int = ...
    ) -> RedshiftDescribeSnapshotSchedulesOutputMessage: ...

    def describe_storage(self) -> RedshiftCustomerStorageMessage: ...

    def describe_table_restore_status(self, *,
        ClusterIdentifier: str = ...,
        TableRestoreRequestId: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RedshiftTableRestoreStatusMessage: ...

    def describe_tags(self, *,
        ResourceName: str = ...,
        ResourceType: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        TagKeys: List[str] = ...,
        TagValues: List[str] = ...
    ) -> RedshiftTaggedResourceListMessage: ...

    def disable_logging(self, *,
        ClusterIdentifier: str
    ) -> RedshiftLoggingStatus: ...

    def disable_snapshot_copy(self, *,
        ClusterIdentifier: str
    ) -> RedshiftDisableSnapshotCopyResult: ...

    def enable_logging(self, *,
        ClusterIdentifier: str,
        BucketName: str,
        S3KeyPrefix: str = ...
    ) -> RedshiftLoggingStatus: ...

    def enable_snapshot_copy(self, *,
        ClusterIdentifier: str,
        DestinationRegion: str,
        RetentionPeriod: int = ...,
        SnapshotCopyGrantName: str = ...,
        ManualSnapshotRetentionPeriod: int = ...
    ) -> RedshiftEnableSnapshotCopyResult: ...

    def get_cluster_credentials(self, *,
        DbUser: str,
        ClusterIdentifier: str,
        DbName: str = ...,
        DurationSeconds: int = ...,
        AutoCreate: bool = ...,
        DbGroups: List[str] = ...
    ) -> RedshiftClusterCredentials: ...

    def get_reserved_node_exchange_offerings(self, *,
        ReservedNodeId: str,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RedshiftGetReservedNodeExchangeOfferingsOutputMessage: ...

    def modify_cluster(self, *,
        ClusterIdentifier: str,
        ClusterType: str = ...,
        NodeType: str = ...,
        NumberOfNodes: int = ...,
        ClusterSecurityGroups: List[str] = ...,
        VpcSecurityGroupIds: List[str] = ...,
        MasterUserPassword: str = ...,
        ClusterParameterGroupName: str = ...,
        AutomatedSnapshotRetentionPeriod: int = ...,
        ManualSnapshotRetentionPeriod: int = ...,
        PreferredMaintenanceWindow: str = ...,
        ClusterVersion: str = ...,
        AllowVersionUpgrade: bool = ...,
        HsmClientCertificateIdentifier: str = ...,
        HsmConfigurationIdentifier: str = ...,
        NewClusterIdentifier: str = ...,
        PubliclyAccessible: bool = ...,
        ElasticIp: str = ...,
        EnhancedVpcRouting: bool = ...,
        MaintenanceTrackName: str = ...,
        Encrypted: bool = ...,
        KmsKeyId: str = ...
    ) -> RedshiftModifyClusterResult: ...

    def modify_cluster_db_revision(self, *,
        ClusterIdentifier: str,
        RevisionTarget: str
    ) -> RedshiftModifyClusterDbRevisionResult: ...

    def modify_cluster_iam_roles(self, *,
        ClusterIdentifier: str,
        AddIamRoles: List[str] = ...,
        RemoveIamRoles: List[str] = ...
    ) -> RedshiftModifyClusterIamRolesResult: ...

    def modify_cluster_maintenance(self, *,
        ClusterIdentifier: str,
        DeferMaintenance: bool = ...,
        DeferMaintenanceIdentifier: str = ...,
        DeferMaintenanceStartTime: datetime.datetime = ...,
        DeferMaintenanceEndTime: datetime.datetime = ...,
        DeferMaintenanceDuration: int = ...
    ) -> RedshiftModifyClusterMaintenanceResult: ...

    def modify_cluster_parameter_group(self, *,
        ParameterGroupName: str,
        Parameters: List[RedshiftParameter]
    ) -> RedshiftClusterParameterGroupNameMessage: ...

    def modify_cluster_snapshot(self, *,
        SnapshotIdentifier: str,
        ManualSnapshotRetentionPeriod: int = ...,
        Force: bool = ...
    ) -> RedshiftModifyClusterSnapshotResult: ...

    def modify_cluster_snapshot_schedule(self, *,
        ClusterIdentifier: str,
        ScheduleIdentifier: str = ...,
        DisassociateSchedule: bool = ...
    ): ...

    def modify_cluster_subnet_group(self, *,
        ClusterSubnetGroupName: str,
        SubnetIds: List[str],
        Description: str = ...
    ) -> RedshiftModifyClusterSubnetGroupResult: ...

    def modify_event_subscription(self, *,
        SubscriptionName: str,
        SnsTopicArn: str = ...,
        SourceType: str = ...,
        SourceIds: List[str] = ...,
        EventCategories: List[str] = ...,
        Severity: str = ...,
        Enabled: bool = ...
    ) -> RedshiftModifyEventSubscriptionResult: ...

    def modify_snapshot_copy_retention_period(self, *,
        ClusterIdentifier: str,
        RetentionPeriod: int,
        Manual: bool = ...
    ) -> RedshiftModifySnapshotCopyRetentionPeriodResult: ...

    def modify_snapshot_schedule(self, *,
        ScheduleIdentifier: str,
        ScheduleDefinitions: List[str]
    ) -> RedshiftSnapshotSchedule: ...

    def purchase_reserved_node_offering(self, *,
        ReservedNodeOfferingId: str,
        NodeCount: int = ...
    ) -> RedshiftPurchaseReservedNodeOfferingResult: ...

    def reboot_cluster(self, *,
        ClusterIdentifier: str
    ) -> RedshiftRebootClusterResult: ...

    def reset_cluster_parameter_group(self, *,
        ParameterGroupName: str,
        ResetAllParameters: bool = ...,
        Parameters: List[RedshiftParameter] = ...
    ) -> RedshiftClusterParameterGroupNameMessage: ...

    def resize_cluster(self, *,
        ClusterIdentifier: str,
        NumberOfNodes: int,
        ClusterType: str = ...,
        NodeType: str = ...,
        Classic: bool = ...
    ) -> RedshiftResizeClusterResult: ...

    def restore_from_cluster_snapshot(self, *,
        ClusterIdentifier: str,
        SnapshotIdentifier: str,
        SnapshotClusterIdentifier: str = ...,
        Port: int = ...,
        AvailabilityZone: str = ...,
        AllowVersionUpgrade: bool = ...,
        ClusterSubnetGroupName: str = ...,
        PubliclyAccessible: bool = ...,
        OwnerAccount: str = ...,
        HsmClientCertificateIdentifier: str = ...,
        HsmConfigurationIdentifier: str = ...,
        ElasticIp: str = ...,
        ClusterParameterGroupName: str = ...,
        ClusterSecurityGroups: List[str] = ...,
        VpcSecurityGroupIds: List[str] = ...,
        PreferredMaintenanceWindow: str = ...,
        AutomatedSnapshotRetentionPeriod: int = ...,
        ManualSnapshotRetentionPeriod: int = ...,
        KmsKeyId: str = ...,
        NodeType: str = ...,
        EnhancedVpcRouting: bool = ...,
        AdditionalInfo: str = ...,
        IamRoles: List[str] = ...,
        MaintenanceTrackName: str = ...,
        SnapshotScheduleIdentifier: str = ...
    ) -> RedshiftRestoreFromClusterSnapshotResult: ...

    def restore_table_from_cluster_snapshot(self, *,
        ClusterIdentifier: str,
        SnapshotIdentifier: str,
        SourceDatabaseName: str,
        SourceTableName: str,
        NewTableName: str,
        SourceSchemaName: str = ...,
        TargetDatabaseName: str = ...,
        TargetSchemaName: str = ...
    ) -> RedshiftRestoreTableFromClusterSnapshotResult: ...

    def revoke_cluster_security_group_ingress(self, *,
        ClusterSecurityGroupName: str,
        CIDRIP: str = ...,
        EC2SecurityGroupName: str = ...,
        EC2SecurityGroupOwnerId: str = ...
    ) -> RedshiftRevokeClusterSecurityGroupIngressResult: ...

    def revoke_snapshot_access(self, *,
        SnapshotIdentifier: str,
        AccountWithRestoreAccess: str,
        SnapshotClusterIdentifier: str = ...
    ) -> RedshiftRevokeSnapshotAccessResult: ...

    def rotate_encryption_key(self, *,
        ClusterIdentifier: str
    ) -> RedshiftRotateEncryptionKeyResult: ...


RedshiftRecurringCharge = TypedDict(
    'RedshiftRecurringCharge', {
        'Double': Optional[float],
        'String': Optional[str],
    }
)


RedshiftReservedNode = TypedDict(
    'RedshiftReservedNode', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'Integer': Optional[int],
        'Double': Optional[float],
        'Double': Optional[float],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'RecurringChargeList': Optional[List[RedshiftRecurringCharge]],
        'ReservedNodeOfferingType': Optional[str],
    }
)


RedshiftAcceptReservedNodeExchangeOutputMessage = TypedDict(
    'RedshiftAcceptReservedNodeExchangeOutputMessage', {
        'ReservedNode': Optional[RedshiftReservedNode],
    }
)


RedshiftTag = TypedDict(
    'RedshiftTag', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


RedshiftEC2SecurityGroup = TypedDict(
    'RedshiftEC2SecurityGroup', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'TagList': Optional[List[RedshiftTag]],
    }
)


RedshiftIPRange = TypedDict(
    'RedshiftIPRange', {
        'String': Optional[str],
        'String': Optional[str],
        'TagList': Optional[List[RedshiftTag]],
    }
)


RedshiftClusterSecurityGroup = TypedDict(
    'RedshiftClusterSecurityGroup', {
        'String': Optional[str],
        'String': Optional[str],
        'EC2SecurityGroupList': Optional[List[RedshiftEC2SecurityGroup]],
        'IPRangeList': Optional[List[RedshiftIPRange]],
        'TagList': Optional[List[RedshiftTag]],
    }
)


RedshiftAuthorizeClusterSecurityGroupIngressResult = TypedDict(
    'RedshiftAuthorizeClusterSecurityGroupIngressResult', {
        'ClusterSecurityGroup': Optional[RedshiftClusterSecurityGroup],
    }
)


RedshiftAccountWithRestoreAccess = TypedDict(
    'RedshiftAccountWithRestoreAccess', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


RedshiftSnapshot = TypedDict(
    'RedshiftSnapshot', {
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'AccountsWithRestoreAccessList': Optional[List[RedshiftAccountWithRestoreAccess]],
        'String': Optional[str],
        'Double': Optional[float],
        'Double': Optional[float],
        'Double': Optional[float],
        'Double': Optional[float],
        'Long': Optional[int],
        'Long': Optional[int],
        'String': Optional[str],
        'TagList': Optional[List[RedshiftTag]],
        'RestorableNodeTypeList': Optional[List[str]],
        'Boolean': Optional[bool],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'IntegerOptional': Optional[int],
        'TStamp': Optional[datetime.datetime],
    }
)


RedshiftAuthorizeSnapshotAccessResult = TypedDict(
    'RedshiftAuthorizeSnapshotAccessResult', {
        'Snapshot': Optional[RedshiftSnapshot],
    }
)


RedshiftDeleteClusterSnapshotMessage = TypedDict(
    'RedshiftDeleteClusterSnapshotMessage', {
        'String': str,
        'String': Optional[str],
    }
)


RedshiftSnapshotErrorMessage = TypedDict(
    'RedshiftSnapshotErrorMessage', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


RedshiftBatchDeleteClusterSnapshotsResult = TypedDict(
    'RedshiftBatchDeleteClusterSnapshotsResult', {
        'SnapshotIdentifierList': Optional[List[str]],
        'BatchSnapshotOperationErrorList': Optional[List[RedshiftSnapshotErrorMessage]],
    }
)


RedshiftBatchModifyClusterSnapshotsOutputMessage = TypedDict(
    'RedshiftBatchModifyClusterSnapshotsOutputMessage', {
        'SnapshotIdentifierList': Optional[List[str]],
        'BatchSnapshotOperationErrors': Optional[List[RedshiftSnapshotErrorMessage]],
    }
)


RedshiftResizeProgressMessage = TypedDict(
    'RedshiftResizeProgressMessage', {
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'ImportTablesCompleted': Optional[List[str]],
        'ImportTablesInProgress': Optional[List[str]],
        'ImportTablesNotStarted': Optional[List[str]],
        'DoubleOptional': Optional[float],
        'LongOptional': Optional[int],
        'LongOptional': Optional[int],
        'LongOptional': Optional[int],
        'LongOptional': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'DoubleOptional': Optional[float],
    }
)


RedshiftCopyClusterSnapshotResult = TypedDict(
    'RedshiftCopyClusterSnapshotResult', {
        'Snapshot': Optional[RedshiftSnapshot],
    }
)


RedshiftEndpoint = TypedDict(
    'RedshiftEndpoint', {
        'String': Optional[str],
        'Integer': Optional[int],
    }
)


RedshiftClusterSecurityGroupMembership = TypedDict(
    'RedshiftClusterSecurityGroupMembership', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


RedshiftVpcSecurityGroupMembership = TypedDict(
    'RedshiftVpcSecurityGroupMembership', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


RedshiftClusterParameterStatus = TypedDict(
    'RedshiftClusterParameterStatus', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


RedshiftClusterParameterGroupStatus = TypedDict(
    'RedshiftClusterParameterGroupStatus', {
        'String': Optional[str],
        'String': Optional[str],
        'ClusterParameterStatusList': Optional[List[RedshiftClusterParameterStatus]],
    }
)


RedshiftPendingModifiedValues = TypedDict(
    'RedshiftPendingModifiedValues', {
        'String': Optional[str],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'IntegerOptional': Optional[int],
        'String': Optional[str],
        'BooleanOptional': Optional[bool],
        'BooleanOptional': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
    }
)


RedshiftRestoreStatus = TypedDict(
    'RedshiftRestoreStatus', {
        'String': Optional[str],
        'Double': Optional[float],
        'Long': Optional[int],
        'Long': Optional[int],
        'Long': Optional[int],
        'Long': Optional[int],
    }
)


RedshiftDataTransferProgress = TypedDict(
    'RedshiftDataTransferProgress', {
        'String': Optional[str],
        'DoubleOptional': Optional[float],
        'Long': Optional[int],
        'Long': Optional[int],
        'LongOptional': Optional[int],
        'LongOptional': Optional[int],
    }
)


RedshiftHsmStatus = TypedDict(
    'RedshiftHsmStatus', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


RedshiftClusterSnapshotCopyStatus = TypedDict(
    'RedshiftClusterSnapshotCopyStatus', {
        'String': Optional[str],
        'Long': Optional[int],
        'Integer': Optional[int],
        'String': Optional[str],
    }
)


RedshiftClusterNode = TypedDict(
    'RedshiftClusterNode', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


RedshiftElasticIpStatus = TypedDict(
    'RedshiftElasticIpStatus', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


RedshiftClusterIamRole = TypedDict(
    'RedshiftClusterIamRole', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


RedshiftDeferredMaintenanceWindow = TypedDict(
    'RedshiftDeferredMaintenanceWindow', {
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'TStamp': Optional[datetime.datetime],
    }
)


RedshiftResizeInfo = TypedDict(
    'RedshiftResizeInfo', {
        'String': Optional[str],
        'Boolean': Optional[bool],
    }
)


RedshiftCluster = TypedDict(
    'RedshiftCluster', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Endpoint': Optional[RedshiftEndpoint],
        'TStamp': Optional[datetime.datetime],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'ClusterSecurityGroupMembershipList': Optional[List[RedshiftClusterSecurityGroupMembership]],
        'VpcSecurityGroupMembershipList': Optional[List[RedshiftVpcSecurityGroupMembership]],
        'ClusterParameterGroupStatusList': Optional[List[RedshiftClusterParameterGroupStatus]],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'PendingModifiedValues': Optional[RedshiftPendingModifiedValues],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'Integer': Optional[int],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'RestoreStatus': Optional[RedshiftRestoreStatus],
        'DataTransferProgress': Optional[RedshiftDataTransferProgress],
        'HsmStatus': Optional[RedshiftHsmStatus],
        'ClusterSnapshotCopyStatus': Optional[RedshiftClusterSnapshotCopyStatus],
        'String': Optional[str],
        'ClusterNodesList': Optional[List[RedshiftClusterNode]],
        'ElasticIpStatus': Optional[RedshiftElasticIpStatus],
        'String': Optional[str],
        'TagList': Optional[List[RedshiftTag]],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'ClusterIamRoleList': Optional[List[RedshiftClusterIamRole]],
        'PendingActionsList': Optional[List[str]],
        'String': Optional[str],
        'String': Optional[str],
        'DeferredMaintenanceWindowsList': Optional[List[RedshiftDeferredMaintenanceWindow]],
        'String': Optional[str],
        'ScheduleState': Optional[str],
        'ResizeInfo': Optional[RedshiftResizeInfo],
    }
)


RedshiftCreateClusterResult = TypedDict(
    'RedshiftCreateClusterResult', {
        'Cluster': Optional[RedshiftCluster],
    }
)


RedshiftClusterParameterGroup = TypedDict(
    'RedshiftClusterParameterGroup', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'TagList': Optional[List[RedshiftTag]],
    }
)


RedshiftCreateClusterParameterGroupResult = TypedDict(
    'RedshiftCreateClusterParameterGroupResult', {
        'ClusterParameterGroup': Optional[RedshiftClusterParameterGroup],
    }
)


RedshiftCreateClusterSecurityGroupResult = TypedDict(
    'RedshiftCreateClusterSecurityGroupResult', {
        'ClusterSecurityGroup': Optional[RedshiftClusterSecurityGroup],
    }
)


RedshiftCreateClusterSnapshotResult = TypedDict(
    'RedshiftCreateClusterSnapshotResult', {
        'Snapshot': Optional[RedshiftSnapshot],
    }
)


RedshiftSupportedPlatform = TypedDict(
    'RedshiftSupportedPlatform', {
        'String': Optional[str],
    }
)


RedshiftAvailabilityZone = TypedDict(
    'RedshiftAvailabilityZone', {
        'String': Optional[str],
        'SupportedPlatformsList': Optional[List[RedshiftSupportedPlatform]],
    }
)


RedshiftSubnet = TypedDict(
    'RedshiftSubnet', {
        'String': Optional[str],
        'AvailabilityZone': Optional[RedshiftAvailabilityZone],
        'String': Optional[str],
    }
)


RedshiftClusterSubnetGroup = TypedDict(
    'RedshiftClusterSubnetGroup', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'SubnetList': Optional[List[RedshiftSubnet]],
        'TagList': Optional[List[RedshiftTag]],
    }
)


RedshiftCreateClusterSubnetGroupResult = TypedDict(
    'RedshiftCreateClusterSubnetGroupResult', {
        'ClusterSubnetGroup': Optional[RedshiftClusterSubnetGroup],
    }
)


RedshiftEventSubscription = TypedDict(
    'RedshiftEventSubscription', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
        'SourceIdsList': Optional[List[str]],
        'EventCategoriesList': Optional[List[str]],
        'String': Optional[str],
        'Boolean': Optional[bool],
        'TagList': Optional[List[RedshiftTag]],
    }
)


RedshiftCreateEventSubscriptionResult = TypedDict(
    'RedshiftCreateEventSubscriptionResult', {
        'EventSubscription': Optional[RedshiftEventSubscription],
    }
)


RedshiftHsmClientCertificate = TypedDict(
    'RedshiftHsmClientCertificate', {
        'String': Optional[str],
        'String': Optional[str],
        'TagList': Optional[List[RedshiftTag]],
    }
)


RedshiftCreateHsmClientCertificateResult = TypedDict(
    'RedshiftCreateHsmClientCertificateResult', {
        'HsmClientCertificate': Optional[RedshiftHsmClientCertificate],
    }
)


RedshiftHsmConfiguration = TypedDict(
    'RedshiftHsmConfiguration', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'TagList': Optional[List[RedshiftTag]],
    }
)


RedshiftCreateHsmConfigurationResult = TypedDict(
    'RedshiftCreateHsmConfigurationResult', {
        'HsmConfiguration': Optional[RedshiftHsmConfiguration],
    }
)


RedshiftSnapshotCopyGrant = TypedDict(
    'RedshiftSnapshotCopyGrant', {
        'String': Optional[str],
        'String': Optional[str],
        'TagList': Optional[List[RedshiftTag]],
    }
)


RedshiftCreateSnapshotCopyGrantResult = TypedDict(
    'RedshiftCreateSnapshotCopyGrantResult', {
        'SnapshotCopyGrant': Optional[RedshiftSnapshotCopyGrant],
    }
)


RedshiftClusterAssociatedToSchedule = TypedDict(
    'RedshiftClusterAssociatedToSchedule', {
        'String': Optional[str],
        'ScheduleState': Optional[str],
    }
)


RedshiftSnapshotSchedule = TypedDict(
    'RedshiftSnapshotSchedule', {
        'ScheduleDefinitionList': Optional[List[str]],
        'String': Optional[str],
        'String': Optional[str],
        'TagList': Optional[List[RedshiftTag]],
        'ScheduledSnapshotTimeList': Optional[List[datetime.datetime]],
        'IntegerOptional': Optional[int],
        'AssociatedClusterList': Optional[List[RedshiftClusterAssociatedToSchedule]],
    }
)


RedshiftDeleteClusterResult = TypedDict(
    'RedshiftDeleteClusterResult', {
        'Cluster': Optional[RedshiftCluster],
    }
)


RedshiftDeleteClusterSnapshotResult = TypedDict(
    'RedshiftDeleteClusterSnapshotResult', {
        'Snapshot': Optional[RedshiftSnapshot],
    }
)


RedshiftAttributeValueTarget = TypedDict(
    'RedshiftAttributeValueTarget', {
        'String': Optional[str],
    }
)


RedshiftAccountAttribute = TypedDict(
    'RedshiftAccountAttribute', {
        'String': Optional[str],
        'AttributeValueList': Optional[List[RedshiftAttributeValueTarget]],
    }
)


RedshiftAccountAttributeList = TypedDict(
    'RedshiftAccountAttributeList', {
        'AttributeList': Optional[List[RedshiftAccountAttribute]],
    }
)


RedshiftRevisionTarget = TypedDict(
    'RedshiftRevisionTarget', {
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
    }
)


RedshiftClusterDbRevision = TypedDict(
    'RedshiftClusterDbRevision', {
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'RevisionTargetsList': Optional[List[RedshiftRevisionTarget]],
    }
)


RedshiftClusterDbRevisionsMessage = TypedDict(
    'RedshiftClusterDbRevisionsMessage', {
        'String': Optional[str],
        'ClusterDbRevisionsList': Optional[List[RedshiftClusterDbRevision]],
    }
)


RedshiftClusterParameterGroupsMessage = TypedDict(
    'RedshiftClusterParameterGroupsMessage', {
        'String': Optional[str],
        'ParameterGroupList': Optional[List[RedshiftClusterParameterGroup]],
    }
)


RedshiftParameter = TypedDict(
    'RedshiftParameter', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'ParameterApplyType': Optional[str],
        'Boolean': Optional[bool],
        'String': Optional[str],
    }
)


RedshiftClusterParameterGroupDetails = TypedDict(
    'RedshiftClusterParameterGroupDetails', {
        'ParametersList': Optional[List[RedshiftParameter]],
        'String': Optional[str],
    }
)


RedshiftClusterSecurityGroupMessage = TypedDict(
    'RedshiftClusterSecurityGroupMessage', {
        'String': Optional[str],
        'ClusterSecurityGroups': Optional[List[RedshiftClusterSecurityGroup]],
    }
)


RedshiftSnapshotSortingEntity = TypedDict(
    'RedshiftSnapshotSortingEntity', {
        'SnapshotAttributeToSortBy': str,
        'SortByOrder': Optional[str],
    }
)


RedshiftSnapshotMessage = TypedDict(
    'RedshiftSnapshotMessage', {
        'String': Optional[str],
        'SnapshotList': Optional[List[RedshiftSnapshot]],
    }
)


RedshiftClusterSubnetGroupMessage = TypedDict(
    'RedshiftClusterSubnetGroupMessage', {
        'String': Optional[str],
        'ClusterSubnetGroups': Optional[List[RedshiftClusterSubnetGroup]],
    }
)


RedshiftSupportedOperation = TypedDict(
    'RedshiftSupportedOperation', {
        'String': Optional[str],
    }
)


RedshiftUpdateTarget = TypedDict(
    'RedshiftUpdateTarget', {
        'String': Optional[str],
        'String': Optional[str],
        'SupportedOperationList': Optional[List[RedshiftSupportedOperation]],
    }
)


RedshiftMaintenanceTrack = TypedDict(
    'RedshiftMaintenanceTrack', {
        'String': Optional[str],
        'String': Optional[str],
        'EligibleTracksToUpdateList': Optional[List[RedshiftUpdateTarget]],
    }
)


RedshiftTrackListMessage = TypedDict(
    'RedshiftTrackListMessage', {
        'TrackList': Optional[List[RedshiftMaintenanceTrack]],
        'String': Optional[str],
    }
)


RedshiftClusterVersion = TypedDict(
    'RedshiftClusterVersion', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


RedshiftClusterVersionsMessage = TypedDict(
    'RedshiftClusterVersionsMessage', {
        'String': Optional[str],
        'ClusterVersionList': Optional[List[RedshiftClusterVersion]],
    }
)


RedshiftClustersMessage = TypedDict(
    'RedshiftClustersMessage', {
        'String': Optional[str],
        'ClusterList': Optional[List[RedshiftCluster]],
    }
)


RedshiftDefaultClusterParameters = TypedDict(
    'RedshiftDefaultClusterParameters', {
        'String': Optional[str],
        'String': Optional[str],
        'ParametersList': Optional[List[RedshiftParameter]],
    }
)


RedshiftDescribeDefaultClusterParametersResult = TypedDict(
    'RedshiftDescribeDefaultClusterParametersResult', {
        'DefaultClusterParameters': Optional[RedshiftDefaultClusterParameters],
    }
)


RedshiftEventInfoMap = TypedDict(
    'RedshiftEventInfoMap', {
        'String': Optional[str],
        'EventCategoriesList': Optional[List[str]],
        'String': Optional[str],
        'String': Optional[str],
    }
)


RedshiftEventCategoriesMap = TypedDict(
    'RedshiftEventCategoriesMap', {
        'String': Optional[str],
        'EventInfoMapList': Optional[List[RedshiftEventInfoMap]],
    }
)


RedshiftEventCategoriesMessage = TypedDict(
    'RedshiftEventCategoriesMessage', {
        'EventCategoriesMapList': Optional[List[RedshiftEventCategoriesMap]],
    }
)


RedshiftEventSubscriptionsMessage = TypedDict(
    'RedshiftEventSubscriptionsMessage', {
        'String': Optional[str],
        'EventSubscriptionsList': Optional[List[RedshiftEventSubscription]],
    }
)


RedshiftEvent = TypedDict(
    'RedshiftEvent', {
        'String': Optional[str],
        'SourceType': Optional[str],
        'String': Optional[str],
        'EventCategoriesList': Optional[List[str]],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
    }
)


RedshiftEventsMessage = TypedDict(
    'RedshiftEventsMessage', {
        'String': Optional[str],
        'EventList': Optional[List[RedshiftEvent]],
    }
)


RedshiftHsmClientCertificateMessage = TypedDict(
    'RedshiftHsmClientCertificateMessage', {
        'String': Optional[str],
        'HsmClientCertificateList': Optional[List[RedshiftHsmClientCertificate]],
    }
)


RedshiftHsmConfigurationMessage = TypedDict(
    'RedshiftHsmConfigurationMessage', {
        'String': Optional[str],
        'HsmConfigurationList': Optional[List[RedshiftHsmConfiguration]],
    }
)


RedshiftLoggingStatus = TypedDict(
    'RedshiftLoggingStatus', {
        'Boolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'TStamp': Optional[datetime.datetime],
        'String': Optional[str],
    }
)


RedshiftOrderableClusterOption = TypedDict(
    'RedshiftOrderableClusterOption', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'AvailabilityZoneList': Optional[List[RedshiftAvailabilityZone]],
    }
)


RedshiftOrderableClusterOptionsMessage = TypedDict(
    'RedshiftOrderableClusterOptionsMessage', {
        'OrderableClusterOptionsList': Optional[List[RedshiftOrderableClusterOption]],
        'String': Optional[str],
    }
)


RedshiftReservedNodeOffering = TypedDict(
    'RedshiftReservedNodeOffering', {
        'String': Optional[str],
        'String': Optional[str],
        'Integer': Optional[int],
        'Double': Optional[float],
        'Double': Optional[float],
        'String': Optional[str],
        'String': Optional[str],
        'RecurringChargeList': Optional[List[RedshiftRecurringCharge]],
        'ReservedNodeOfferingType': Optional[str],
    }
)


RedshiftReservedNodeOfferingsMessage = TypedDict(
    'RedshiftReservedNodeOfferingsMessage', {
        'String': Optional[str],
        'ReservedNodeOfferingList': Optional[List[RedshiftReservedNodeOffering]],
    }
)


RedshiftReservedNodesMessage = TypedDict(
    'RedshiftReservedNodesMessage', {
        'String': Optional[str],
        'ReservedNodeList': Optional[List[RedshiftReservedNode]],
    }
)


RedshiftSnapshotCopyGrantMessage = TypedDict(
    'RedshiftSnapshotCopyGrantMessage', {
        'String': Optional[str],
        'SnapshotCopyGrantList': Optional[List[RedshiftSnapshotCopyGrant]],
    }
)


RedshiftDescribeSnapshotSchedulesOutputMessage = TypedDict(
    'RedshiftDescribeSnapshotSchedulesOutputMessage', {
        'SnapshotScheduleList': Optional[List[RedshiftSnapshotSchedule]],
        'String': Optional[str],
    }
)


RedshiftCustomerStorageMessage = TypedDict(
    'RedshiftCustomerStorageMessage', {
        'Double': Optional[float],
        'Double': Optional[float],
    }
)


RedshiftTableRestoreStatus = TypedDict(
    'RedshiftTableRestoreStatus', {
        'String': Optional[str],
        'TableRestoreStatusType': Optional[str],
        'String': Optional[str],
        'TStamp': Optional[datetime.datetime],
        'LongOptional': Optional[int],
        'LongOptional': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


RedshiftTableRestoreStatusMessage = TypedDict(
    'RedshiftTableRestoreStatusMessage', {
        'TableRestoreStatusList': Optional[List[RedshiftTableRestoreStatus]],
        'String': Optional[str],
    }
)


RedshiftTaggedResource = TypedDict(
    'RedshiftTaggedResource', {
        'Tag': Optional[RedshiftTag],
        'String': Optional[str],
        'String': Optional[str],
    }
)


RedshiftTaggedResourceListMessage = TypedDict(
    'RedshiftTaggedResourceListMessage', {
        'TaggedResourceList': Optional[List[RedshiftTaggedResource]],
        'String': Optional[str],
    }
)


RedshiftDisableSnapshotCopyResult = TypedDict(
    'RedshiftDisableSnapshotCopyResult', {
        'Cluster': Optional[RedshiftCluster],
    }
)


RedshiftEnableSnapshotCopyResult = TypedDict(
    'RedshiftEnableSnapshotCopyResult', {
        'Cluster': Optional[RedshiftCluster],
    }
)


RedshiftClusterCredentials = TypedDict(
    'RedshiftClusterCredentials', {
        'String': Optional[str],
        'SensitiveString': Optional[str],
        'TStamp': Optional[datetime.datetime],
    }
)


RedshiftGetReservedNodeExchangeOfferingsOutputMessage = TypedDict(
    'RedshiftGetReservedNodeExchangeOfferingsOutputMessage', {
        'String': Optional[str],
        'ReservedNodeOfferingList': Optional[List[RedshiftReservedNodeOffering]],
    }
)


RedshiftModifyClusterResult = TypedDict(
    'RedshiftModifyClusterResult', {
        'Cluster': Optional[RedshiftCluster],
    }
)


RedshiftModifyClusterDbRevisionResult = TypedDict(
    'RedshiftModifyClusterDbRevisionResult', {
        'Cluster': Optional[RedshiftCluster],
    }
)


RedshiftModifyClusterIamRolesResult = TypedDict(
    'RedshiftModifyClusterIamRolesResult', {
        'Cluster': Optional[RedshiftCluster],
    }
)


RedshiftModifyClusterMaintenanceResult = TypedDict(
    'RedshiftModifyClusterMaintenanceResult', {
        'Cluster': Optional[RedshiftCluster],
    }
)


RedshiftClusterParameterGroupNameMessage = TypedDict(
    'RedshiftClusterParameterGroupNameMessage', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


RedshiftModifyClusterSnapshotResult = TypedDict(
    'RedshiftModifyClusterSnapshotResult', {
        'Snapshot': Optional[RedshiftSnapshot],
    }
)


RedshiftModifyClusterSubnetGroupResult = TypedDict(
    'RedshiftModifyClusterSubnetGroupResult', {
        'ClusterSubnetGroup': Optional[RedshiftClusterSubnetGroup],
    }
)


RedshiftModifyEventSubscriptionResult = TypedDict(
    'RedshiftModifyEventSubscriptionResult', {
        'EventSubscription': Optional[RedshiftEventSubscription],
    }
)


RedshiftModifySnapshotCopyRetentionPeriodResult = TypedDict(
    'RedshiftModifySnapshotCopyRetentionPeriodResult', {
        'Cluster': Optional[RedshiftCluster],
    }
)


RedshiftPurchaseReservedNodeOfferingResult = TypedDict(
    'RedshiftPurchaseReservedNodeOfferingResult', {
        'ReservedNode': Optional[RedshiftReservedNode],
    }
)


RedshiftRebootClusterResult = TypedDict(
    'RedshiftRebootClusterResult', {
        'Cluster': Optional[RedshiftCluster],
    }
)


RedshiftResizeClusterResult = TypedDict(
    'RedshiftResizeClusterResult', {
        'Cluster': Optional[RedshiftCluster],
    }
)


RedshiftRestoreFromClusterSnapshotResult = TypedDict(
    'RedshiftRestoreFromClusterSnapshotResult', {
        'Cluster': Optional[RedshiftCluster],
    }
)


RedshiftRestoreTableFromClusterSnapshotResult = TypedDict(
    'RedshiftRestoreTableFromClusterSnapshotResult', {
        'TableRestoreStatus': Optional[RedshiftTableRestoreStatus],
    }
)


RedshiftRevokeClusterSecurityGroupIngressResult = TypedDict(
    'RedshiftRevokeClusterSecurityGroupIngressResult', {
        'ClusterSecurityGroup': Optional[RedshiftClusterSecurityGroup],
    }
)


RedshiftRevokeSnapshotAccessResult = TypedDict(
    'RedshiftRevokeSnapshotAccessResult', {
        'Snapshot': Optional[RedshiftSnapshot],
    }
)


RedshiftRotateEncryptionKeyResult = TypedDict(
    'RedshiftRotateEncryptionKeyResult', {
        'Cluster': Optional[RedshiftCluster],
    }
)


class Rekognition(BaseClient):
    def compare_faces(self, *,
        SourceImage: RekognitionImage,
        TargetImage: RekognitionImage,
        SimilarityThreshold: float = ...
    ) -> RekognitionCompareFacesResponse: ...

    def create_collection(self, *,
        CollectionId: str
    ) -> RekognitionCreateCollectionResponse: ...

    def create_stream_processor(self, *,
        Input: RekognitionStreamProcessorInput,
        Output: RekognitionStreamProcessorOutput,
        Name: str,
        Settings: RekognitionStreamProcessorSettings,
        RoleArn: str
    ) -> RekognitionCreateStreamProcessorResponse: ...

    def delete_collection(self, *,
        CollectionId: str
    ) -> RekognitionDeleteCollectionResponse: ...

    def delete_faces(self, *,
        CollectionId: str,
        FaceIds: List[str]
    ) -> RekognitionDeleteFacesResponse: ...

    def delete_stream_processor(self, *,
        Name: str
    ) -> RekognitionDeleteStreamProcessorResponse: ...

    def describe_collection(self, *,
        CollectionId: str
    ) -> RekognitionDescribeCollectionResponse: ...

    def describe_stream_processor(self, *,
        Name: str
    ) -> RekognitionDescribeStreamProcessorResponse: ...

    def detect_faces(self, *,
        Image: RekognitionImage,
        Attributes: List[str] = ...
    ) -> RekognitionDetectFacesResponse: ...

    def detect_labels(self, *,
        Image: RekognitionImage,
        MaxLabels: int = ...,
        MinConfidence: float = ...
    ) -> RekognitionDetectLabelsResponse: ...

    def detect_moderation_labels(self, *,
        Image: RekognitionImage,
        MinConfidence: float = ...
    ) -> RekognitionDetectModerationLabelsResponse: ...

    def detect_text(self, *,
        Image: RekognitionImage
    ) -> RekognitionDetectTextResponse: ...

    def get_celebrity_info(self, *,
        Id: str
    ) -> RekognitionGetCelebrityInfoResponse: ...

    def get_celebrity_recognition(self, *,
        JobId: str,
        MaxResults: int = ...,
        NextToken: str = ...,
        SortBy: str = ...
    ) -> RekognitionGetCelebrityRecognitionResponse: ...

    def get_content_moderation(self, *,
        JobId: str,
        MaxResults: int = ...,
        NextToken: str = ...,
        SortBy: str = ...
    ) -> RekognitionGetContentModerationResponse: ...

    def get_face_detection(self, *,
        JobId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> RekognitionGetFaceDetectionResponse: ...

    def get_face_search(self, *,
        JobId: str,
        MaxResults: int = ...,
        NextToken: str = ...,
        SortBy: str = ...
    ) -> RekognitionGetFaceSearchResponse: ...

    def get_label_detection(self, *,
        JobId: str,
        MaxResults: int = ...,
        NextToken: str = ...,
        SortBy: str = ...
    ) -> RekognitionGetLabelDetectionResponse: ...

    def get_person_tracking(self, *,
        JobId: str,
        MaxResults: int = ...,
        NextToken: str = ...,
        SortBy: str = ...
    ) -> RekognitionGetPersonTrackingResponse: ...

    def index_faces(self, *,
        CollectionId: str,
        Image: RekognitionImage,
        ExternalImageId: str = ...,
        DetectionAttributes: List[str] = ...,
        MaxFaces: int = ...,
        QualityFilter: str = ...
    ) -> RekognitionIndexFacesResponse: ...

    def list_collections(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> RekognitionListCollectionsResponse: ...

    def list_faces(self, *,
        CollectionId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> RekognitionListFacesResponse: ...

    def list_stream_processors(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> RekognitionListStreamProcessorsResponse: ...

    def recognize_celebrities(self, *,
        Image: RekognitionImage
    ) -> RekognitionRecognizeCelebritiesResponse: ...

    def search_faces(self, *,
        CollectionId: str,
        FaceId: str,
        MaxFaces: int = ...,
        FaceMatchThreshold: float = ...
    ) -> RekognitionSearchFacesResponse: ...

    def search_faces_by_image(self, *,
        CollectionId: str,
        Image: RekognitionImage,
        MaxFaces: int = ...,
        FaceMatchThreshold: float = ...
    ) -> RekognitionSearchFacesByImageResponse: ...

    def start_celebrity_recognition(self, *,
        Video: RekognitionVideo,
        ClientRequestToken: str = ...,
        NotificationChannel: RekognitionNotificationChannel = ...,
        JobTag: str = ...
    ) -> RekognitionStartCelebrityRecognitionResponse: ...

    def start_content_moderation(self, *,
        Video: RekognitionVideo,
        MinConfidence: float = ...,
        ClientRequestToken: str = ...,
        NotificationChannel: RekognitionNotificationChannel = ...,
        JobTag: str = ...
    ) -> RekognitionStartContentModerationResponse: ...

    def start_face_detection(self, *,
        Video: RekognitionVideo,
        ClientRequestToken: str = ...,
        NotificationChannel: RekognitionNotificationChannel = ...,
        FaceAttributes: str = ...,
        JobTag: str = ...
    ) -> RekognitionStartFaceDetectionResponse: ...

    def start_face_search(self, *,
        Video: RekognitionVideo,
        CollectionId: str,
        ClientRequestToken: str = ...,
        FaceMatchThreshold: float = ...,
        NotificationChannel: RekognitionNotificationChannel = ...,
        JobTag: str = ...
    ) -> RekognitionStartFaceSearchResponse: ...

    def start_label_detection(self, *,
        Video: RekognitionVideo,
        ClientRequestToken: str = ...,
        MinConfidence: float = ...,
        NotificationChannel: RekognitionNotificationChannel = ...,
        JobTag: str = ...
    ) -> RekognitionStartLabelDetectionResponse: ...

    def start_person_tracking(self, *,
        Video: RekognitionVideo,
        ClientRequestToken: str = ...,
        NotificationChannel: RekognitionNotificationChannel = ...,
        JobTag: str = ...
    ) -> RekognitionStartPersonTrackingResponse: ...

    def start_stream_processor(self, *,
        Name: str
    ) -> RekognitionStartStreamProcessorResponse: ...

    def stop_stream_processor(self, *,
        Name: str
    ) -> RekognitionStopStreamProcessorResponse: ...


RekognitionS3Object = TypedDict(
    'RekognitionS3Object', {
        'S3Bucket': Optional[str],
        'S3ObjectName': Optional[str],
        'S3ObjectVersion': Optional[str],
    }
)


RekognitionImage = TypedDict(
    'RekognitionImage', {
        'ImageBlob': Optional[bytes],
        'S3Object': Optional[RekognitionS3Object],
    }
)


RekognitionBoundingBox = TypedDict(
    'RekognitionBoundingBox', {
        'Float': Optional[float],
        'Float': Optional[float],
        'Float': Optional[float],
        'Float': Optional[float],
    }
)


RekognitionComparedSourceImageFace = TypedDict(
    'RekognitionComparedSourceImageFace', {
        'BoundingBox': Optional[RekognitionBoundingBox],
        'Percent': Optional[float],
    }
)


RekognitionLandmark = TypedDict(
    'RekognitionLandmark', {
        'LandmarkType': Optional[str],
        'Float': Optional[float],
        'Float': Optional[float],
    }
)


RekognitionPose = TypedDict(
    'RekognitionPose', {
        'Degree': Optional[float],
        'Degree': Optional[float],
        'Degree': Optional[float],
    }
)


RekognitionImageQuality = TypedDict(
    'RekognitionImageQuality', {
        'Float': Optional[float],
        'Float': Optional[float],
    }
)


RekognitionComparedFace = TypedDict(
    'RekognitionComparedFace', {
        'BoundingBox': Optional[RekognitionBoundingBox],
        'Percent': Optional[float],
        'Landmarks': Optional[List[RekognitionLandmark]],
        'Pose': Optional[RekognitionPose],
        'ImageQuality': Optional[RekognitionImageQuality],
    }
)


RekognitionCompareFacesMatch = TypedDict(
    'RekognitionCompareFacesMatch', {
        'Percent': Optional[float],
        'ComparedFace': Optional[RekognitionComparedFace],
    }
)


RekognitionCompareFacesResponse = TypedDict(
    'RekognitionCompareFacesResponse', {
        'ComparedSourceImageFace': Optional[RekognitionComparedSourceImageFace],
        'CompareFacesMatchList': Optional[List[RekognitionCompareFacesMatch]],
        'CompareFacesUnmatchList': Optional[List[RekognitionComparedFace]],
        'OrientationCorrection': Optional[str],
        'OrientationCorrection': Optional[str],
    }
)


RekognitionCreateCollectionResponse = TypedDict(
    'RekognitionCreateCollectionResponse', {
        'UInteger': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
    }
)


RekognitionKinesisVideoStream = TypedDict(
    'RekognitionKinesisVideoStream', {
        'KinesisVideoArn': Optional[str],
    }
)


RekognitionStreamProcessorInput = TypedDict(
    'RekognitionStreamProcessorInput', {
        'KinesisVideoStream': Optional[RekognitionKinesisVideoStream],
    }
)


RekognitionKinesisDataStream = TypedDict(
    'RekognitionKinesisDataStream', {
        'KinesisDataArn': Optional[str],
    }
)


RekognitionStreamProcessorOutput = TypedDict(
    'RekognitionStreamProcessorOutput', {
        'KinesisDataStream': Optional[RekognitionKinesisDataStream],
    }
)


RekognitionFaceSearchSettings = TypedDict(
    'RekognitionFaceSearchSettings', {
        'CollectionId': Optional[str],
        'Percent': Optional[float],
    }
)


RekognitionStreamProcessorSettings = TypedDict(
    'RekognitionStreamProcessorSettings', {
        'FaceSearchSettings': Optional[RekognitionFaceSearchSettings],
    }
)


RekognitionCreateStreamProcessorResponse = TypedDict(
    'RekognitionCreateStreamProcessorResponse', {
        'StreamProcessorArn': Optional[str],
    }
)


RekognitionDeleteCollectionResponse = TypedDict(
    'RekognitionDeleteCollectionResponse', {
        'UInteger': Optional[int],
    }
)


RekognitionDeleteFacesResponse = TypedDict(
    'RekognitionDeleteFacesResponse', {
        'FaceIdList': Optional[List[str]],
    }
)


RekognitionDeleteStreamProcessorResponse = TypedDict(
    'RekognitionDeleteStreamProcessorResponse', {
    }
)


RekognitionDescribeCollectionResponse = TypedDict(
    'RekognitionDescribeCollectionResponse', {
        'ULong': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
    }
)


RekognitionDescribeStreamProcessorResponse = TypedDict(
    'RekognitionDescribeStreamProcessorResponse', {
        'StreamProcessorName': Optional[str],
        'StreamProcessorArn': Optional[str],
        'StreamProcessorStatus': Optional[str],
        'String': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
        'StreamProcessorInput': Optional[RekognitionStreamProcessorInput],
        'StreamProcessorOutput': Optional[RekognitionStreamProcessorOutput],
        'RoleArn': Optional[str],
        'StreamProcessorSettings': Optional[RekognitionStreamProcessorSettings],
    }
)


RekognitionAgeRange = TypedDict(
    'RekognitionAgeRange', {
        'UInteger': Optional[int],
        'UInteger': Optional[int],
    }
)


RekognitionSmile = TypedDict(
    'RekognitionSmile', {
        'Boolean': Optional[bool],
        'Percent': Optional[float],
    }
)


RekognitionEyeglasses = TypedDict(
    'RekognitionEyeglasses', {
        'Boolean': Optional[bool],
        'Percent': Optional[float],
    }
)


RekognitionSunglasses = TypedDict(
    'RekognitionSunglasses', {
        'Boolean': Optional[bool],
        'Percent': Optional[float],
    }
)


RekognitionGender = TypedDict(
    'RekognitionGender', {
        'GenderType': Optional[str],
        'Percent': Optional[float],
    }
)


RekognitionBeard = TypedDict(
    'RekognitionBeard', {
        'Boolean': Optional[bool],
        'Percent': Optional[float],
    }
)


RekognitionMustache = TypedDict(
    'RekognitionMustache', {
        'Boolean': Optional[bool],
        'Percent': Optional[float],
    }
)


RekognitionEyeOpen = TypedDict(
    'RekognitionEyeOpen', {
        'Boolean': Optional[bool],
        'Percent': Optional[float],
    }
)


RekognitionMouthOpen = TypedDict(
    'RekognitionMouthOpen', {
        'Boolean': Optional[bool],
        'Percent': Optional[float],
    }
)


RekognitionEmotion = TypedDict(
    'RekognitionEmotion', {
        'EmotionName': Optional[str],
        'Percent': Optional[float],
    }
)


RekognitionFaceDetail = TypedDict(
    'RekognitionFaceDetail', {
        'BoundingBox': Optional[RekognitionBoundingBox],
        'AgeRange': Optional[RekognitionAgeRange],
        'Smile': Optional[RekognitionSmile],
        'Eyeglasses': Optional[RekognitionEyeglasses],
        'Sunglasses': Optional[RekognitionSunglasses],
        'Gender': Optional[RekognitionGender],
        'Beard': Optional[RekognitionBeard],
        'Mustache': Optional[RekognitionMustache],
        'EyeOpen': Optional[RekognitionEyeOpen],
        'MouthOpen': Optional[RekognitionMouthOpen],
        'Emotions': Optional[List[RekognitionEmotion]],
        'Landmarks': Optional[List[RekognitionLandmark]],
        'Pose': Optional[RekognitionPose],
        'ImageQuality': Optional[RekognitionImageQuality],
        'Percent': Optional[float],
    }
)


RekognitionDetectFacesResponse = TypedDict(
    'RekognitionDetectFacesResponse', {
        'FaceDetailList': Optional[List[RekognitionFaceDetail]],
        'OrientationCorrection': Optional[str],
    }
)


RekognitionInstance = TypedDict(
    'RekognitionInstance', {
        'BoundingBox': Optional[RekognitionBoundingBox],
        'Percent': Optional[float],
    }
)


RekognitionParent = TypedDict(
    'RekognitionParent', {
        'String': Optional[str],
    }
)


RekognitionLabel = TypedDict(
    'RekognitionLabel', {
        'String': Optional[str],
        'Percent': Optional[float],
        'Instances': Optional[List[RekognitionInstance]],
        'Parents': Optional[List[RekognitionParent]],
    }
)


RekognitionDetectLabelsResponse = TypedDict(
    'RekognitionDetectLabelsResponse', {
        'Labels': Optional[List[RekognitionLabel]],
        'OrientationCorrection': Optional[str],
        'String': Optional[str],
    }
)


RekognitionModerationLabel = TypedDict(
    'RekognitionModerationLabel', {
        'Percent': Optional[float],
        'String': Optional[str],
        'String': Optional[str],
    }
)


RekognitionDetectModerationLabelsResponse = TypedDict(
    'RekognitionDetectModerationLabelsResponse', {
        'ModerationLabels': Optional[List[RekognitionModerationLabel]],
        'String': Optional[str],
    }
)


RekognitionPoint = TypedDict(
    'RekognitionPoint', {
        'Float': Optional[float],
        'Float': Optional[float],
    }
)


RekognitionGeometry = TypedDict(
    'RekognitionGeometry', {
        'BoundingBox': Optional[RekognitionBoundingBox],
        'Polygon': Optional[List[RekognitionPoint]],
    }
)


RekognitionTextDetection = TypedDict(
    'RekognitionTextDetection', {
        'String': Optional[str],
        'TextTypes': Optional[str],
        'UInteger': Optional[int],
        'UInteger': Optional[int],
        'Percent': Optional[float],
        'Geometry': Optional[RekognitionGeometry],
    }
)


RekognitionDetectTextResponse = TypedDict(
    'RekognitionDetectTextResponse', {
        'TextDetectionList': Optional[List[RekognitionTextDetection]],
    }
)


RekognitionGetCelebrityInfoResponse = TypedDict(
    'RekognitionGetCelebrityInfoResponse', {
        'Urls': Optional[List[str]],
        'String': Optional[str],
    }
)


RekognitionVideoMetadata = TypedDict(
    'RekognitionVideoMetadata', {
        'String': Optional[str],
        'ULong': Optional[int],
        'String': Optional[str],
        'Float': Optional[float],
        'ULong': Optional[int],
        'ULong': Optional[int],
    }
)


RekognitionCelebrityDetail = TypedDict(
    'RekognitionCelebrityDetail', {
        'Urls': Optional[List[str]],
        'String': Optional[str],
        'RekognitionUniqueId': Optional[str],
        'Percent': Optional[float],
        'BoundingBox': Optional[RekognitionBoundingBox],
        'FaceDetail': Optional[RekognitionFaceDetail],
    }
)


RekognitionCelebrityRecognition = TypedDict(
    'RekognitionCelebrityRecognition', {
        'Timestamp': Optional[int],
        'CelebrityDetail': Optional[RekognitionCelebrityDetail],
    }
)


RekognitionGetCelebrityRecognitionResponse = TypedDict(
    'RekognitionGetCelebrityRecognitionResponse', {
        'VideoJobStatus': Optional[str],
        'StatusMessage': Optional[str],
        'VideoMetadata': Optional[RekognitionVideoMetadata],
        'PaginationToken': Optional[str],
        'CelebrityRecognitions': Optional[List[RekognitionCelebrityRecognition]],
    }
)


RekognitionContentModerationDetection = TypedDict(
    'RekognitionContentModerationDetection', {
        'Timestamp': Optional[int],
        'ModerationLabel': Optional[RekognitionModerationLabel],
    }
)


RekognitionGetContentModerationResponse = TypedDict(
    'RekognitionGetContentModerationResponse', {
        'VideoJobStatus': Optional[str],
        'StatusMessage': Optional[str],
        'VideoMetadata': Optional[RekognitionVideoMetadata],
        'ContentModerationDetections': Optional[List[RekognitionContentModerationDetection]],
        'PaginationToken': Optional[str],
        'String': Optional[str],
    }
)


RekognitionFaceDetection = TypedDict(
    'RekognitionFaceDetection', {
        'Timestamp': Optional[int],
        'FaceDetail': Optional[RekognitionFaceDetail],
    }
)


RekognitionGetFaceDetectionResponse = TypedDict(
    'RekognitionGetFaceDetectionResponse', {
        'VideoJobStatus': Optional[str],
        'StatusMessage': Optional[str],
        'VideoMetadata': Optional[RekognitionVideoMetadata],
        'PaginationToken': Optional[str],
        'FaceDetections': Optional[List[RekognitionFaceDetection]],
    }
)


RekognitionPersonDetail = TypedDict(
    'RekognitionPersonDetail', {
        'PersonIndex': Optional[int],
        'BoundingBox': Optional[RekognitionBoundingBox],
        'FaceDetail': Optional[RekognitionFaceDetail],
    }
)


RekognitionFace = TypedDict(
    'RekognitionFace', {
        'FaceId': Optional[str],
        'BoundingBox': Optional[RekognitionBoundingBox],
        'ImageId': Optional[str],
        'ExternalImageId': Optional[str],
        'Percent': Optional[float],
    }
)


RekognitionFaceMatch = TypedDict(
    'RekognitionFaceMatch', {
        'Percent': Optional[float],
        'Face': Optional[RekognitionFace],
    }
)


RekognitionPersonMatch = TypedDict(
    'RekognitionPersonMatch', {
        'Timestamp': Optional[int],
        'PersonDetail': Optional[RekognitionPersonDetail],
        'FaceMatchList': Optional[List[RekognitionFaceMatch]],
    }
)


RekognitionGetFaceSearchResponse = TypedDict(
    'RekognitionGetFaceSearchResponse', {
        'VideoJobStatus': Optional[str],
        'StatusMessage': Optional[str],
        'PaginationToken': Optional[str],
        'VideoMetadata': Optional[RekognitionVideoMetadata],
        'PersonMatches': Optional[List[RekognitionPersonMatch]],
    }
)


RekognitionLabelDetection = TypedDict(
    'RekognitionLabelDetection', {
        'Timestamp': Optional[int],
        'Label': Optional[RekognitionLabel],
    }
)


RekognitionGetLabelDetectionResponse = TypedDict(
    'RekognitionGetLabelDetectionResponse', {
        'VideoJobStatus': Optional[str],
        'StatusMessage': Optional[str],
        'VideoMetadata': Optional[RekognitionVideoMetadata],
        'PaginationToken': Optional[str],
        'LabelDetections': Optional[List[RekognitionLabelDetection]],
        'String': Optional[str],
    }
)


RekognitionPersonDetection = TypedDict(
    'RekognitionPersonDetection', {
        'Timestamp': Optional[int],
        'PersonDetail': Optional[RekognitionPersonDetail],
    }
)


RekognitionGetPersonTrackingResponse = TypedDict(
    'RekognitionGetPersonTrackingResponse', {
        'VideoJobStatus': Optional[str],
        'StatusMessage': Optional[str],
        'VideoMetadata': Optional[RekognitionVideoMetadata],
        'PaginationToken': Optional[str],
        'PersonDetections': Optional[List[RekognitionPersonDetection]],
    }
)


RekognitionFaceRecord = TypedDict(
    'RekognitionFaceRecord', {
        'Face': Optional[RekognitionFace],
        'FaceDetail': Optional[RekognitionFaceDetail],
    }
)


RekognitionUnindexedFace = TypedDict(
    'RekognitionUnindexedFace', {
        'Reasons': Optional[List[str]],
        'FaceDetail': Optional[RekognitionFaceDetail],
    }
)


RekognitionIndexFacesResponse = TypedDict(
    'RekognitionIndexFacesResponse', {
        'FaceRecordList': Optional[List[RekognitionFaceRecord]],
        'OrientationCorrection': Optional[str],
        'String': Optional[str],
        'UnindexedFaces': Optional[List[RekognitionUnindexedFace]],
    }
)


RekognitionListCollectionsResponse = TypedDict(
    'RekognitionListCollectionsResponse', {
        'CollectionIdList': Optional[List[str]],
        'PaginationToken': Optional[str],
        'FaceModelVersionList': Optional[List[str]],
    }
)


RekognitionListFacesResponse = TypedDict(
    'RekognitionListFacesResponse', {
        'FaceList': Optional[List[RekognitionFace]],
        'String': Optional[str],
        'String': Optional[str],
    }
)


RekognitionStreamProcessor = TypedDict(
    'RekognitionStreamProcessor', {
        'StreamProcessorName': Optional[str],
        'StreamProcessorStatus': Optional[str],
    }
)


RekognitionListStreamProcessorsResponse = TypedDict(
    'RekognitionListStreamProcessorsResponse', {
        'PaginationToken': Optional[str],
        'StreamProcessorList': Optional[List[RekognitionStreamProcessor]],
    }
)


RekognitionCelebrity = TypedDict(
    'RekognitionCelebrity', {
        'Urls': Optional[List[str]],
        'String': Optional[str],
        'RekognitionUniqueId': Optional[str],
        'ComparedFace': Optional[RekognitionComparedFace],
        'Percent': Optional[float],
    }
)


RekognitionRecognizeCelebritiesResponse = TypedDict(
    'RekognitionRecognizeCelebritiesResponse', {
        'CelebrityList': Optional[List[RekognitionCelebrity]],
        'ComparedFaceList': Optional[List[RekognitionComparedFace]],
        'OrientationCorrection': Optional[str],
    }
)


RekognitionSearchFacesResponse = TypedDict(
    'RekognitionSearchFacesResponse', {
        'FaceId': Optional[str],
        'FaceMatchList': Optional[List[RekognitionFaceMatch]],
        'String': Optional[str],
    }
)


RekognitionSearchFacesByImageResponse = TypedDict(
    'RekognitionSearchFacesByImageResponse', {
        'BoundingBox': Optional[RekognitionBoundingBox],
        'Percent': Optional[float],
        'FaceMatchList': Optional[List[RekognitionFaceMatch]],
        'String': Optional[str],
    }
)


RekognitionVideo = TypedDict(
    'RekognitionVideo', {
        'S3Object': Optional[RekognitionS3Object],
    }
)


RekognitionNotificationChannel = TypedDict(
    'RekognitionNotificationChannel', {
        'SNSTopicArn': str,
        'RoleArn': str,
    }
)


RekognitionStartCelebrityRecognitionResponse = TypedDict(
    'RekognitionStartCelebrityRecognitionResponse', {
        'JobId': Optional[str],
    }
)


RekognitionStartContentModerationResponse = TypedDict(
    'RekognitionStartContentModerationResponse', {
        'JobId': Optional[str],
    }
)


RekognitionStartFaceDetectionResponse = TypedDict(
    'RekognitionStartFaceDetectionResponse', {
        'JobId': Optional[str],
    }
)


RekognitionStartFaceSearchResponse = TypedDict(
    'RekognitionStartFaceSearchResponse', {
        'JobId': Optional[str],
    }
)


RekognitionStartLabelDetectionResponse = TypedDict(
    'RekognitionStartLabelDetectionResponse', {
        'JobId': Optional[str],
    }
)


RekognitionStartPersonTrackingResponse = TypedDict(
    'RekognitionStartPersonTrackingResponse', {
        'JobId': Optional[str],
    }
)


RekognitionStartStreamProcessorResponse = TypedDict(
    'RekognitionStartStreamProcessorResponse', {
    }
)


RekognitionStopStreamProcessorResponse = TypedDict(
    'RekognitionStopStreamProcessorResponse', {
    }
)


class ResourceGroups(BaseClient):
    def create_group(self, *,
        Name: str,
        ResourceQuery: ResourceGroupsResourceQuery,
        Description: str = ...,
        Tags: Dict[str, str] = ...
    ) -> ResourceGroupsCreateGroupOutput: ...

    def delete_group(self, *,
        GroupName: str
    ) -> ResourceGroupsDeleteGroupOutput: ...

    def get_group(self, *,
        GroupName: str
    ) -> ResourceGroupsGetGroupOutput: ...

    def get_group_query(self, *,
        GroupName: str
    ) -> ResourceGroupsGetGroupQueryOutput: ...

    def get_tags(self, *,
        Arn: str
    ) -> ResourceGroupsGetTagsOutput: ...

    def list_group_resources(self, *,
        GroupName: str,
        Filters: List[ResourceGroupsResourceFilter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ResourceGroupsListGroupResourcesOutput: ...

    def list_groups(self, *,
        Filters: List[ResourceGroupsGroupFilter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ResourceGroupsListGroupsOutput: ...

    def search_resources(self, *,
        ResourceQuery: ResourceGroupsResourceQuery,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ResourceGroupsSearchResourcesOutput: ...

    def tag(self, *,
        Arn: str,
        Tags: Dict[str, str]
    ) -> ResourceGroupsTagOutput: ...

    def untag(self, *,
        Arn: str,
        Keys: List[str]
    ) -> ResourceGroupsUntagOutput: ...

    def update_group(self, *,
        GroupName: str,
        Description: str = ...
    ) -> ResourceGroupsUpdateGroupOutput: ...

    def update_group_query(self, *,
        GroupName: str,
        ResourceQuery: ResourceGroupsResourceQuery
    ) -> ResourceGroupsUpdateGroupQueryOutput: ...


ResourceGroupsResourceQuery = TypedDict(
    'ResourceGroupsResourceQuery', {
        'QueryType': str,
        'Query': str,
    }
)


ResourceGroupsGroup = TypedDict(
    'ResourceGroupsGroup', {
        'GroupArn': str,
        'GroupName': str,
        'GroupDescription': Optional[str],
    }
)


ResourceGroupsCreateGroupOutput = TypedDict(
    'ResourceGroupsCreateGroupOutput', {
        'Group': Optional[ResourceGroupsGroup],
        'ResourceQuery': Optional[ResourceGroupsResourceQuery],
        'Tags': Optional[Dict[str, str]],
    }
)


ResourceGroupsDeleteGroupOutput = TypedDict(
    'ResourceGroupsDeleteGroupOutput', {
        'Group': Optional[ResourceGroupsGroup],
    }
)


ResourceGroupsGetGroupOutput = TypedDict(
    'ResourceGroupsGetGroupOutput', {
        'Group': Optional[ResourceGroupsGroup],
    }
)


ResourceGroupsGroupQuery = TypedDict(
    'ResourceGroupsGroupQuery', {
        'GroupName': str,
        'ResourceQuery': ResourceGroupsResourceQuery,
    }
)


ResourceGroupsGetGroupQueryOutput = TypedDict(
    'ResourceGroupsGetGroupQueryOutput', {
        'GroupQuery': Optional[ResourceGroupsGroupQuery],
    }
)


ResourceGroupsGetTagsOutput = TypedDict(
    'ResourceGroupsGetTagsOutput', {
        'GroupArn': Optional[str],
        'Tags': Optional[Dict[str, str]],
    }
)


ResourceGroupsResourceFilter = TypedDict(
    'ResourceGroupsResourceFilter', {
        'ResourceFilterName': str,
        'ResourceFilterValues': List[str],
    }
)


ResourceGroupsResourceIdentifier = TypedDict(
    'ResourceGroupsResourceIdentifier', {
        'ResourceArn': Optional[str],
        'ResourceType': Optional[str],
    }
)


ResourceGroupsQueryError = TypedDict(
    'ResourceGroupsQueryError', {
        'QueryErrorCode': Optional[str],
        'QueryErrorMessage': Optional[str],
    }
)


ResourceGroupsListGroupResourcesOutput = TypedDict(
    'ResourceGroupsListGroupResourcesOutput', {
        'ResourceIdentifierList': Optional[List[ResourceGroupsResourceIdentifier]],
        'NextToken': Optional[str],
        'QueryErrorList': Optional[List[ResourceGroupsQueryError]],
    }
)


ResourceGroupsGroupFilter = TypedDict(
    'ResourceGroupsGroupFilter', {
        'GroupFilterName': str,
        'GroupFilterValues': List[str],
    }
)


ResourceGroupsGroupIdentifier = TypedDict(
    'ResourceGroupsGroupIdentifier', {
        'GroupName': Optional[str],
        'GroupArn': Optional[str],
    }
)


ResourceGroupsListGroupsOutput = TypedDict(
    'ResourceGroupsListGroupsOutput', {
        'GroupIdentifierList': Optional[List[ResourceGroupsGroupIdentifier]],
        'GroupList': Optional[List[ResourceGroupsGroup]],
        'NextToken': Optional[str],
    }
)


ResourceGroupsSearchResourcesOutput = TypedDict(
    'ResourceGroupsSearchResourcesOutput', {
        'ResourceIdentifierList': Optional[List[ResourceGroupsResourceIdentifier]],
        'NextToken': Optional[str],
        'QueryErrorList': Optional[List[ResourceGroupsQueryError]],
    }
)


ResourceGroupsTagOutput = TypedDict(
    'ResourceGroupsTagOutput', {
        'GroupArn': Optional[str],
        'Tags': Optional[Dict[str, str]],
    }
)


ResourceGroupsUntagOutput = TypedDict(
    'ResourceGroupsUntagOutput', {
        'GroupArn': Optional[str],
        'TagKeyList': Optional[List[str]],
    }
)


ResourceGroupsUpdateGroupOutput = TypedDict(
    'ResourceGroupsUpdateGroupOutput', {
        'Group': Optional[ResourceGroupsGroup],
    }
)


ResourceGroupsUpdateGroupQueryOutput = TypedDict(
    'ResourceGroupsUpdateGroupQueryOutput', {
        'GroupQuery': Optional[ResourceGroupsGroupQuery],
    }
)


class ResourceGroupsTaggingAPI(BaseClient):
    def get_resources(self, *,
        PaginationToken: str = ...,
        TagFilters: List[ResourceGroupsTaggingAPITagFilter] = ...,
        ResourcesPerPage: int = ...,
        TagsPerPage: int = ...,
        ResourceTypeFilters: List[str] = ...
    ) -> ResourceGroupsTaggingAPIGetResourcesOutput: ...

    def get_tag_keys(self, *,
        PaginationToken: str = ...
    ) -> ResourceGroupsTaggingAPIGetTagKeysOutput: ...

    def get_tag_values(self, *,
        Key: str,
        PaginationToken: str = ...
    ) -> ResourceGroupsTaggingAPIGetTagValuesOutput: ...

    def tag_resources(self, *,
        ResourceARNList: List[str],
        Tags: Dict[str, str]
    ) -> ResourceGroupsTaggingAPITagResourcesOutput: ...

    def untag_resources(self, *,
        ResourceARNList: List[str],
        TagKeys: List[str]
    ) -> ResourceGroupsTaggingAPIUntagResourcesOutput: ...


ResourceGroupsTaggingAPITagFilter = TypedDict(
    'ResourceGroupsTaggingAPITagFilter', {
        'TagKey': Optional[str],
        'TagValueList': Optional[List[str]],
    }
)


ResourceGroupsTaggingAPITag = TypedDict(
    'ResourceGroupsTaggingAPITag', {
        'TagKey': str,
        'TagValue': str,
    }
)


ResourceGroupsTaggingAPIResourceTagMapping = TypedDict(
    'ResourceGroupsTaggingAPIResourceTagMapping', {
        'ResourceARN': Optional[str],
        'TagList': Optional[List[ResourceGroupsTaggingAPITag]],
    }
)


ResourceGroupsTaggingAPIGetResourcesOutput = TypedDict(
    'ResourceGroupsTaggingAPIGetResourcesOutput', {
        'PaginationToken': Optional[str],
        'ResourceTagMappingList': Optional[List[ResourceGroupsTaggingAPIResourceTagMapping]],
    }
)


ResourceGroupsTaggingAPIGetTagKeysOutput = TypedDict(
    'ResourceGroupsTaggingAPIGetTagKeysOutput', {
        'PaginationToken': Optional[str],
        'TagKeyList': Optional[List[str]],
    }
)


ResourceGroupsTaggingAPIGetTagValuesOutput = TypedDict(
    'ResourceGroupsTaggingAPIGetTagValuesOutput', {
        'PaginationToken': Optional[str],
        'TagValuesOutputList': Optional[List[str]],
    }
)


ResourceGroupsTaggingAPIFailureInfo = TypedDict(
    'ResourceGroupsTaggingAPIFailureInfo', {
        'StatusCode': Optional[int],
        'ErrorCode': Optional[str],
        'ErrorMessage': Optional[str],
    }
)


ResourceGroupsTaggingAPITagResourcesOutput = TypedDict(
    'ResourceGroupsTaggingAPITagResourcesOutput', {
        'FailedResourcesMap': Optional[Dict[str, ResourceGroupsTaggingAPIFailureInfo]],
    }
)


ResourceGroupsTaggingAPIUntagResourcesOutput = TypedDict(
    'ResourceGroupsTaggingAPIUntagResourcesOutput', {
        'FailedResourcesMap': Optional[Dict[str, ResourceGroupsTaggingAPIFailureInfo]],
    }
)


class RoboMaker(BaseClient):
    def batch_describe_simulation_job(self, *,
        jobs: List[str]
    ) -> RoboMakerBatchDescribeSimulationJobResponse: ...

    def cancel_simulation_job(self, *,
        job: str
    ) -> RoboMakerCancelSimulationJobResponse: ...

    def create_deployment_job(self, *,
        clientRequestToken: str,
        fleet: str,
        deploymentApplicationConfigs: List[RoboMakerDeploymentApplicationConfig],
        deploymentConfig: RoboMakerDeploymentConfig = ...,
        tags: Dict[str, str] = ...
    ) -> RoboMakerCreateDeploymentJobResponse: ...

    def create_fleet(self, *,
        name: str,
        tags: Dict[str, str] = ...
    ) -> RoboMakerCreateFleetResponse: ...

    def create_robot(self, *,
        name: str,
        architecture: str,
        greengrassGroupId: str,
        tags: Dict[str, str] = ...
    ) -> RoboMakerCreateRobotResponse: ...

    def create_robot_application(self, *,
        name: str,
        sources: List[RoboMakerSourceConfig],
        robotSoftwareSuite: RoboMakerRobotSoftwareSuite,
        tags: Dict[str, str] = ...
    ) -> RoboMakerCreateRobotApplicationResponse: ...

    def create_robot_application_version(self, *,
        application: str,
        currentRevisionId: str = ...
    ) -> RoboMakerCreateRobotApplicationVersionResponse: ...

    def create_simulation_application(self, *,
        name: str,
        sources: List[RoboMakerSourceConfig],
        simulationSoftwareSuite: RoboMakerSimulationSoftwareSuite,
        robotSoftwareSuite: RoboMakerRobotSoftwareSuite,
        renderingEngine: RoboMakerRenderingEngine,
        tags: Dict[str, str] = ...
    ) -> RoboMakerCreateSimulationApplicationResponse: ...

    def create_simulation_application_version(self, *,
        application: str,
        currentRevisionId: str = ...
    ) -> RoboMakerCreateSimulationApplicationVersionResponse: ...

    def create_simulation_job(self, *,
        maxJobDurationInSeconds: int,
        iamRole: str,
        clientRequestToken: str = ...,
        outputLocation: RoboMakerOutputLocation = ...,
        failureBehavior: str = ...,
        robotApplications: List[RoboMakerRobotApplicationConfig] = ...,
        simulationApplications: List[RoboMakerSimulationApplicationConfig] = ...,
        tags: Dict[str, str] = ...,
        vpcConfig: RoboMakerVPCConfig = ...
    ) -> RoboMakerCreateSimulationJobResponse: ...

    def delete_fleet(self, *,
        fleet: str
    ) -> RoboMakerDeleteFleetResponse: ...

    def delete_robot(self, *,
        robot: str
    ) -> RoboMakerDeleteRobotResponse: ...

    def delete_robot_application(self, *,
        application: str,
        applicationVersion: str = ...
    ) -> RoboMakerDeleteRobotApplicationResponse: ...

    def delete_simulation_application(self, *,
        application: str,
        applicationVersion: str = ...
    ) -> RoboMakerDeleteSimulationApplicationResponse: ...

    def deregister_robot(self, *,
        fleet: str,
        robot: str
    ) -> RoboMakerDeregisterRobotResponse: ...

    def describe_deployment_job(self, *,
        job: str
    ) -> RoboMakerDescribeDeploymentJobResponse: ...

    def describe_fleet(self, *,
        fleet: str
    ) -> RoboMakerDescribeFleetResponse: ...

    def describe_robot(self, *,
        robot: str
    ) -> RoboMakerDescribeRobotResponse: ...

    def describe_robot_application(self, *,
        application: str,
        applicationVersion: str = ...
    ) -> RoboMakerDescribeRobotApplicationResponse: ...

    def describe_simulation_application(self, *,
        application: str,
        applicationVersion: str = ...
    ) -> RoboMakerDescribeSimulationApplicationResponse: ...

    def describe_simulation_job(self, *,
        job: str
    ) -> RoboMakerDescribeSimulationJobResponse: ...

    def list_deployment_jobs(self, *,
        filters: List[RoboMakerFilter] = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> RoboMakerListDeploymentJobsResponse: ...

    def list_fleets(self, *,
        nextToken: str = ...,
        maxResults: int = ...,
        filters: List[RoboMakerFilter] = ...
    ) -> RoboMakerListFleetsResponse: ...

    def list_robot_applications(self, *,
        versionQualifier: str = ...,
        nextToken: str = ...,
        maxResults: int = ...,
        filters: List[RoboMakerFilter] = ...
    ) -> RoboMakerListRobotApplicationsResponse: ...

    def list_robots(self, *,
        nextToken: str = ...,
        maxResults: int = ...,
        filters: List[RoboMakerFilter] = ...
    ) -> RoboMakerListRobotsResponse: ...

    def list_simulation_applications(self, *,
        versionQualifier: str = ...,
        nextToken: str = ...,
        maxResults: int = ...,
        filters: List[RoboMakerFilter] = ...
    ) -> RoboMakerListSimulationApplicationsResponse: ...

    def list_simulation_jobs(self, *,
        nextToken: str = ...,
        maxResults: int = ...,
        filters: List[RoboMakerFilter] = ...
    ) -> RoboMakerListSimulationJobsResponse: ...

    def list_tags_for_resource(self, *,
        resourceArn: str
    ) -> RoboMakerListTagsForResourceResponse: ...

    def register_robot(self, *,
        fleet: str,
        robot: str
    ) -> RoboMakerRegisterRobotResponse: ...

    def restart_simulation_job(self, *,
        job: str
    ) -> RoboMakerRestartSimulationJobResponse: ...

    def sync_deployment_job(self, *,
        clientRequestToken: str,
        fleet: str
    ) -> RoboMakerSyncDeploymentJobResponse: ...

    def tag_resource(self, *,
        resourceArn: str,
        tags: Dict[str, str]
    ) -> RoboMakerTagResourceResponse: ...

    def untag_resource(self, *,
        resourceArn: str,
        tagKeys: List[str]
    ) -> RoboMakerUntagResourceResponse: ...

    def update_robot_application(self, *,
        application: str,
        sources: List[RoboMakerSourceConfig],
        robotSoftwareSuite: RoboMakerRobotSoftwareSuite,
        currentRevisionId: str = ...
    ) -> RoboMakerUpdateRobotApplicationResponse: ...

    def update_simulation_application(self, *,
        application: str,
        sources: List[RoboMakerSourceConfig],
        simulationSoftwareSuite: RoboMakerSimulationSoftwareSuite,
        robotSoftwareSuite: RoboMakerRobotSoftwareSuite,
        renderingEngine: RoboMakerRenderingEngine,
        currentRevisionId: str = ...
    ) -> RoboMakerUpdateSimulationApplicationResponse: ...


RoboMakerOutputLocation = TypedDict(
    'RoboMakerOutputLocation', {
        'S3Bucket': Optional[str],
        'S3Key': Optional[str],
    }
)


RoboMakerLaunchConfig = TypedDict(
    'RoboMakerLaunchConfig', {
        'Command': str,
        'Command': str,
        'EnvironmentVariableMap': Optional[Dict[str, str]],
    }
)


RoboMakerRobotApplicationConfig = TypedDict(
    'RoboMakerRobotApplicationConfig', {
        'Arn': str,
        'LaunchConfig': RoboMakerLaunchConfig,
        'Version': Optional[str],
    }
)


RoboMakerSimulationApplicationConfig = TypedDict(
    'RoboMakerSimulationApplicationConfig', {
        'Arn': str,
        'LaunchConfig': RoboMakerLaunchConfig,
        'Version': Optional[str],
    }
)


RoboMakerVPCConfigResponse = TypedDict(
    'RoboMakerVPCConfigResponse', {
        'Subnets': Optional[List[str]],
        'SecurityGroups': Optional[List[str]],
        'GenericString': Optional[str],
        'Boolean': Optional[bool],
    }
)


RoboMakerSimulationJob = TypedDict(
    'RoboMakerSimulationJob', {
        'Arn': Optional[str],
        'Name': Optional[str],
        'SimulationJobStatus': Optional[str],
        'LastUpdatedAt': Optional[datetime.datetime],
        'FailureBehavior': Optional[str],
        'SimulationJobErrorCode': Optional[str],
        'GenericString': Optional[str],
        'ClientRequestToken': Optional[str],
        'OutputLocation': Optional[RoboMakerOutputLocation],
        'JobDuration': Optional[int],
        'SimulationTimeMillis': Optional[int],
        'IamRole': Optional[str],
        'RobotApplicationConfigs': Optional[List[RoboMakerRobotApplicationConfig]],
        'SimulationApplicationConfigs': Optional[List[RoboMakerSimulationApplicationConfig]],
        'TagMap': Optional[Dict[str, str]],
        'VPCConfigResponse': Optional[RoboMakerVPCConfigResponse],
    }
)


RoboMakerBatchDescribeSimulationJobResponse = TypedDict(
    'RoboMakerBatchDescribeSimulationJobResponse', {
        'SimulationJobs': Optional[List[RoboMakerSimulationJob]],
        'Arns': Optional[List[str]],
    }
)


RoboMakerCancelSimulationJobResponse = TypedDict(
    'RoboMakerCancelSimulationJobResponse', {
    }
)


RoboMakerDeploymentConfig = TypedDict(
    'RoboMakerDeploymentConfig', {
        'Percentage': Optional[int],
        'Percentage': Optional[int],
    }
)


RoboMakerDeploymentLaunchConfig = TypedDict(
    'RoboMakerDeploymentLaunchConfig', {
        'Command': str,
        'Command': str,
        'Path': Optional[str],
        'Path': Optional[str],
        'EnvironmentVariableMap': Optional[Dict[str, str]],
    }
)


RoboMakerDeploymentApplicationConfig = TypedDict(
    'RoboMakerDeploymentApplicationConfig', {
        'Arn': str,
        'DeploymentVersion': str,
        'DeploymentLaunchConfig': RoboMakerDeploymentLaunchConfig,
    }
)


RoboMakerCreateDeploymentJobResponse = TypedDict(
    'RoboMakerCreateDeploymentJobResponse', {
        'Arn': Optional[str],
        'Arn': Optional[str],
        'DeploymentStatus': Optional[str],
        'DeploymentApplicationConfigs': Optional[List[RoboMakerDeploymentApplicationConfig]],
        'GenericString': Optional[str],
        'DeploymentJobErrorCode': Optional[str],
        'CreatedAt': Optional[datetime.datetime],
        'DeploymentConfig': Optional[RoboMakerDeploymentConfig],
        'TagMap': Optional[Dict[str, str]],
    }
)


RoboMakerCreateFleetResponse = TypedDict(
    'RoboMakerCreateFleetResponse', {
        'Arn': Optional[str],
        'Name': Optional[str],
        'CreatedAt': Optional[datetime.datetime],
        'TagMap': Optional[Dict[str, str]],
    }
)


RoboMakerCreateRobotResponse = TypedDict(
    'RoboMakerCreateRobotResponse', {
        'Arn': Optional[str],
        'Name': Optional[str],
        'CreatedAt': Optional[datetime.datetime],
        'Id': Optional[str],
        'Architecture': Optional[str],
        'TagMap': Optional[Dict[str, str]],
    }
)


RoboMakerSourceConfig = TypedDict(
    'RoboMakerSourceConfig', {
        'S3Bucket': Optional[str],
        'S3Key': Optional[str],
        'Architecture': Optional[str],
    }
)


RoboMakerRobotSoftwareSuite = TypedDict(
    'RoboMakerRobotSoftwareSuite', {
        'RobotSoftwareSuiteType': Optional[str],
        'RobotSoftwareSuiteVersionType': Optional[str],
    }
)


RoboMakerSource = TypedDict(
    'RoboMakerSource', {
        'S3Bucket': Optional[str],
        'S3Key': Optional[str],
        'S3Etag': Optional[str],
        'Architecture': Optional[str],
    }
)


RoboMakerCreateRobotApplicationResponse = TypedDict(
    'RoboMakerCreateRobotApplicationResponse', {
        'Arn': Optional[str],
        'Name': Optional[str],
        'Version': Optional[str],
        'Sources': Optional[List[RoboMakerSource]],
        'RobotSoftwareSuite': Optional[RoboMakerRobotSoftwareSuite],
        'LastUpdatedAt': Optional[datetime.datetime],
        'RevisionId': Optional[str],
        'TagMap': Optional[Dict[str, str]],
    }
)


RoboMakerCreateRobotApplicationVersionResponse = TypedDict(
    'RoboMakerCreateRobotApplicationVersionResponse', {
        'Arn': Optional[str],
        'Name': Optional[str],
        'Version': Optional[str],
        'Sources': Optional[List[RoboMakerSource]],
        'RobotSoftwareSuite': Optional[RoboMakerRobotSoftwareSuite],
        'LastUpdatedAt': Optional[datetime.datetime],
        'RevisionId': Optional[str],
    }
)


RoboMakerSimulationSoftwareSuite = TypedDict(
    'RoboMakerSimulationSoftwareSuite', {
        'SimulationSoftwareSuiteType': Optional[str],
        'SimulationSoftwareSuiteVersionType': Optional[str],
    }
)


RoboMakerRenderingEngine = TypedDict(
    'RoboMakerRenderingEngine', {
        'RenderingEngineType': Optional[str],
        'RenderingEngineVersionType': Optional[str],
    }
)


RoboMakerCreateSimulationApplicationResponse = TypedDict(
    'RoboMakerCreateSimulationApplicationResponse', {
        'Arn': Optional[str],
        'Name': Optional[str],
        'Version': Optional[str],
        'Sources': Optional[List[RoboMakerSource]],
        'SimulationSoftwareSuite': Optional[RoboMakerSimulationSoftwareSuite],
        'RobotSoftwareSuite': Optional[RoboMakerRobotSoftwareSuite],
        'RenderingEngine': Optional[RoboMakerRenderingEngine],
        'LastUpdatedAt': Optional[datetime.datetime],
        'RevisionId': Optional[str],
        'TagMap': Optional[Dict[str, str]],
    }
)


RoboMakerCreateSimulationApplicationVersionResponse = TypedDict(
    'RoboMakerCreateSimulationApplicationVersionResponse', {
        'Arn': Optional[str],
        'Name': Optional[str],
        'Version': Optional[str],
        'Sources': Optional[List[RoboMakerSource]],
        'SimulationSoftwareSuite': Optional[RoboMakerSimulationSoftwareSuite],
        'RobotSoftwareSuite': Optional[RoboMakerRobotSoftwareSuite],
        'RenderingEngine': Optional[RoboMakerRenderingEngine],
        'LastUpdatedAt': Optional[datetime.datetime],
        'RevisionId': Optional[str],
    }
)


RoboMakerVPCConfig = TypedDict(
    'RoboMakerVPCConfig', {
        'Subnets': List[str],
        'SecurityGroups': Optional[List[str]],
        'Boolean': Optional[bool],
    }
)


RoboMakerCreateSimulationJobResponse = TypedDict(
    'RoboMakerCreateSimulationJobResponse', {
        'Arn': Optional[str],
        'SimulationJobStatus': Optional[str],
        'LastUpdatedAt': Optional[datetime.datetime],
        'FailureBehavior': Optional[str],
        'SimulationJobErrorCode': Optional[str],
        'ClientRequestToken': Optional[str],
        'OutputLocation': Optional[RoboMakerOutputLocation],
        'JobDuration': Optional[int],
        'SimulationTimeMillis': Optional[int],
        'IamRole': Optional[str],
        'RobotApplicationConfigs': Optional[List[RoboMakerRobotApplicationConfig]],
        'SimulationApplicationConfigs': Optional[List[RoboMakerSimulationApplicationConfig]],
        'TagMap': Optional[Dict[str, str]],
        'VPCConfigResponse': Optional[RoboMakerVPCConfigResponse],
    }
)


RoboMakerDeleteFleetResponse = TypedDict(
    'RoboMakerDeleteFleetResponse', {
    }
)


RoboMakerDeleteRobotResponse = TypedDict(
    'RoboMakerDeleteRobotResponse', {
    }
)


RoboMakerDeleteRobotApplicationResponse = TypedDict(
    'RoboMakerDeleteRobotApplicationResponse', {
    }
)


RoboMakerDeleteSimulationApplicationResponse = TypedDict(
    'RoboMakerDeleteSimulationApplicationResponse', {
    }
)


RoboMakerDeregisterRobotResponse = TypedDict(
    'RoboMakerDeregisterRobotResponse', {
        'Arn': Optional[str],
        'Arn': Optional[str],
    }
)


RoboMakerProgressDetail = TypedDict(
    'RoboMakerProgressDetail', {
        'RobotDeploymentStep': Optional[str],
        'PercentDone': Optional[float],
        'GenericInteger': Optional[int],
        'GenericString': Optional[str],
    }
)


RoboMakerRobotDeployment = TypedDict(
    'RoboMakerRobotDeployment', {
        'Arn': Optional[str],
        'CreatedAt': Optional[datetime.datetime],
        'CreatedAt': Optional[datetime.datetime],
        'RobotStatus': Optional[str],
        'ProgressDetail': Optional[RoboMakerProgressDetail],
        'GenericString': Optional[str],
        'DeploymentJobErrorCode': Optional[str],
    }
)


RoboMakerDescribeDeploymentJobResponse = TypedDict(
    'RoboMakerDescribeDeploymentJobResponse', {
        'Arn': Optional[str],
        'Arn': Optional[str],
        'DeploymentStatus': Optional[str],
        'DeploymentConfig': Optional[RoboMakerDeploymentConfig],
        'DeploymentApplicationConfigs': Optional[List[RoboMakerDeploymentApplicationConfig]],
        'GenericString': Optional[str],
        'DeploymentJobErrorCode': Optional[str],
        'CreatedAt': Optional[datetime.datetime],
        'RobotDeploymentSummary': Optional[List[RoboMakerRobotDeployment]],
        'TagMap': Optional[Dict[str, str]],
    }
)


RoboMakerRobot = TypedDict(
    'RoboMakerRobot', {
        'Arn': Optional[str],
        'Name': Optional[str],
        'Arn': Optional[str],
        'RobotStatus': Optional[str],
        'Id': Optional[str],
        'CreatedAt': Optional[datetime.datetime],
        'Architecture': Optional[str],
        'Arn': Optional[str],
        'CreatedAt': Optional[datetime.datetime],
    }
)


RoboMakerDescribeFleetResponse = TypedDict(
    'RoboMakerDescribeFleetResponse', {
        'Name': Optional[str],
        'Arn': Optional[str],
        'Robots': Optional[List[RoboMakerRobot]],
        'CreatedAt': Optional[datetime.datetime],
        'DeploymentStatus': Optional[str],
        'Arn': Optional[str],
        'CreatedAt': Optional[datetime.datetime],
        'TagMap': Optional[Dict[str, str]],
    }
)


RoboMakerDescribeRobotResponse = TypedDict(
    'RoboMakerDescribeRobotResponse', {
        'Arn': Optional[str],
        'Name': Optional[str],
        'Arn': Optional[str],
        'RobotStatus': Optional[str],
        'Id': Optional[str],
        'CreatedAt': Optional[datetime.datetime],
        'Architecture': Optional[str],
        'Arn': Optional[str],
        'CreatedAt': Optional[datetime.datetime],
        'TagMap': Optional[Dict[str, str]],
    }
)


RoboMakerDescribeRobotApplicationResponse = TypedDict(
    'RoboMakerDescribeRobotApplicationResponse', {
        'Arn': Optional[str],
        'Name': Optional[str],
        'Version': Optional[str],
        'Sources': Optional[List[RoboMakerSource]],
        'RobotSoftwareSuite': Optional[RoboMakerRobotSoftwareSuite],
        'RevisionId': Optional[str],
        'LastUpdatedAt': Optional[datetime.datetime],
        'TagMap': Optional[Dict[str, str]],
    }
)


RoboMakerDescribeSimulationApplicationResponse = TypedDict(
    'RoboMakerDescribeSimulationApplicationResponse', {
        'Arn': Optional[str],
        'Name': Optional[str],
        'Version': Optional[str],
        'Sources': Optional[List[RoboMakerSource]],
        'SimulationSoftwareSuite': Optional[RoboMakerSimulationSoftwareSuite],
        'RobotSoftwareSuite': Optional[RoboMakerRobotSoftwareSuite],
        'RenderingEngine': Optional[RoboMakerRenderingEngine],
        'RevisionId': Optional[str],
        'LastUpdatedAt': Optional[datetime.datetime],
        'TagMap': Optional[Dict[str, str]],
    }
)


RoboMakerDescribeSimulationJobResponse = TypedDict(
    'RoboMakerDescribeSimulationJobResponse', {
        'Arn': Optional[str],
        'Name': Optional[str],
        'SimulationJobStatus': Optional[str],
        'LastUpdatedAt': Optional[datetime.datetime],
        'FailureBehavior': Optional[str],
        'SimulationJobErrorCode': Optional[str],
        'GenericString': Optional[str],
        'ClientRequestToken': Optional[str],
        'OutputLocation': Optional[RoboMakerOutputLocation],
        'JobDuration': Optional[int],
        'SimulationTimeMillis': Optional[int],
        'IamRole': Optional[str],
        'RobotApplicationConfigs': Optional[List[RoboMakerRobotApplicationConfig]],
        'SimulationApplicationConfigs': Optional[List[RoboMakerSimulationApplicationConfig]],
        'TagMap': Optional[Dict[str, str]],
        'VPCConfigResponse': Optional[RoboMakerVPCConfigResponse],
    }
)


RoboMakerFilter = TypedDict(
    'RoboMakerFilter', {
        'Name': Optional[str],
        'FilterValues': Optional[List[str]],
    }
)


RoboMakerDeploymentJob = TypedDict(
    'RoboMakerDeploymentJob', {
        'Arn': Optional[str],
        'Arn': Optional[str],
        'DeploymentStatus': Optional[str],
        'DeploymentApplicationConfigs': Optional[List[RoboMakerDeploymentApplicationConfig]],
        'DeploymentConfig': Optional[RoboMakerDeploymentConfig],
        'GenericString': Optional[str],
        'DeploymentJobErrorCode': Optional[str],
        'CreatedAt': Optional[datetime.datetime],
    }
)


RoboMakerListDeploymentJobsResponse = TypedDict(
    'RoboMakerListDeploymentJobsResponse', {
        'DeploymentJobs': Optional[List[RoboMakerDeploymentJob]],
        'PaginationToken': Optional[str],
    }
)


RoboMakerFleet = TypedDict(
    'RoboMakerFleet', {
        'Name': Optional[str],
        'Arn': Optional[str],
        'CreatedAt': Optional[datetime.datetime],
        'DeploymentStatus': Optional[str],
        'Arn': Optional[str],
        'CreatedAt': Optional[datetime.datetime],
    }
)


RoboMakerListFleetsResponse = TypedDict(
    'RoboMakerListFleetsResponse', {
        'Fleets': Optional[List[RoboMakerFleet]],
        'PaginationToken': Optional[str],
    }
)


RoboMakerRobotApplicationSummary = TypedDict(
    'RoboMakerRobotApplicationSummary', {
        'Name': Optional[str],
        'Arn': Optional[str],
        'Version': Optional[str],
        'LastUpdatedAt': Optional[datetime.datetime],
    }
)


RoboMakerListRobotApplicationsResponse = TypedDict(
    'RoboMakerListRobotApplicationsResponse', {
        'RobotApplicationSummaries': Optional[List[RoboMakerRobotApplicationSummary]],
        'PaginationToken': Optional[str],
    }
)


RoboMakerListRobotsResponse = TypedDict(
    'RoboMakerListRobotsResponse', {
        'Robots': Optional[List[RoboMakerRobot]],
        'PaginationToken': Optional[str],
    }
)


RoboMakerSimulationApplicationSummary = TypedDict(
    'RoboMakerSimulationApplicationSummary', {
        'Name': Optional[str],
        'Arn': Optional[str],
        'Version': Optional[str],
        'LastUpdatedAt': Optional[datetime.datetime],
    }
)


RoboMakerListSimulationApplicationsResponse = TypedDict(
    'RoboMakerListSimulationApplicationsResponse', {
        'SimulationApplicationSummaries': Optional[List[RoboMakerSimulationApplicationSummary]],
        'PaginationToken': Optional[str],
    }
)


RoboMakerSimulationJobSummary = TypedDict(
    'RoboMakerSimulationJobSummary', {
        'Arn': Optional[str],
        'LastUpdatedAt': Optional[datetime.datetime],
        'Name': Optional[str],
        'SimulationJobStatus': Optional[str],
        'SimulationApplicationNames': Optional[List[str]],
        'RobotApplicationNames': Optional[List[str]],
    }
)


RoboMakerListSimulationJobsResponse = TypedDict(
    'RoboMakerListSimulationJobsResponse', {
        'SimulationJobSummaries': List[RoboMakerSimulationJobSummary],
        'PaginationToken': Optional[str],
    }
)


RoboMakerListTagsForResourceResponse = TypedDict(
    'RoboMakerListTagsForResourceResponse', {
        'TagMap': Optional[Dict[str, str]],
    }
)


RoboMakerRegisterRobotResponse = TypedDict(
    'RoboMakerRegisterRobotResponse', {
        'Arn': Optional[str],
        'Arn': Optional[str],
    }
)


RoboMakerRestartSimulationJobResponse = TypedDict(
    'RoboMakerRestartSimulationJobResponse', {
    }
)


RoboMakerSyncDeploymentJobResponse = TypedDict(
    'RoboMakerSyncDeploymentJobResponse', {
        'Arn': Optional[str],
        'Arn': Optional[str],
        'DeploymentStatus': Optional[str],
        'DeploymentConfig': Optional[RoboMakerDeploymentConfig],
        'DeploymentApplicationConfigs': Optional[List[RoboMakerDeploymentApplicationConfig]],
        'GenericString': Optional[str],
        'DeploymentJobErrorCode': Optional[str],
        'CreatedAt': Optional[datetime.datetime],
    }
)


RoboMakerTagResourceResponse = TypedDict(
    'RoboMakerTagResourceResponse', {
    }
)


RoboMakerUntagResourceResponse = TypedDict(
    'RoboMakerUntagResourceResponse', {
    }
)


RoboMakerUpdateRobotApplicationResponse = TypedDict(
    'RoboMakerUpdateRobotApplicationResponse', {
        'Arn': Optional[str],
        'Name': Optional[str],
        'Version': Optional[str],
        'Sources': Optional[List[RoboMakerSource]],
        'RobotSoftwareSuite': Optional[RoboMakerRobotSoftwareSuite],
        'LastUpdatedAt': Optional[datetime.datetime],
        'RevisionId': Optional[str],
    }
)


RoboMakerUpdateSimulationApplicationResponse = TypedDict(
    'RoboMakerUpdateSimulationApplicationResponse', {
        'Arn': Optional[str],
        'Name': Optional[str],
        'Version': Optional[str],
        'Sources': Optional[List[RoboMakerSource]],
        'SimulationSoftwareSuite': Optional[RoboMakerSimulationSoftwareSuite],
        'RobotSoftwareSuite': Optional[RoboMakerRobotSoftwareSuite],
        'RenderingEngine': Optional[RoboMakerRenderingEngine],
        'LastUpdatedAt': Optional[datetime.datetime],
        'RevisionId': Optional[str],
    }
)


class Route53(BaseClient):
    def associate_vpc_with_hosted_zone(self, *,
        HostedZoneId: str,
        VPC: Route53VPC,
        Comment: str = ...
    ) -> Route53AssociateVPCWithHostedZoneResponse: ...

    def change_resource_record_sets(self, *,
        HostedZoneId: str,
        ChangeBatch: Route53ChangeBatch
    ) -> Route53ChangeResourceRecordSetsResponse: ...

    def change_tags_for_resource(self, *,
        ResourceType: str,
        ResourceId: str,
        AddTags: List[Route53Tag] = ...,
        RemoveTagKeys: List[str] = ...
    ) -> Route53ChangeTagsForResourceResponse: ...

    def create_health_check(self, *,
        CallerReference: str,
        HealthCheckConfig: Route53HealthCheckConfig
    ) -> Route53CreateHealthCheckResponse: ...

    def create_hosted_zone(self, *,
        Name: str,
        CallerReference: str,
        VPC: Route53VPC = ...,
        HostedZoneConfig: Route53HostedZoneConfig = ...,
        DelegationSetId: str = ...
    ) -> Route53CreateHostedZoneResponse: ...

    def create_query_logging_config(self, *,
        HostedZoneId: str,
        CloudWatchLogsLogGroupArn: str
    ) -> Route53CreateQueryLoggingConfigResponse: ...

    def create_reusable_delegation_set(self, *,
        CallerReference: str,
        HostedZoneId: str = ...
    ) -> Route53CreateReusableDelegationSetResponse: ...

    def create_traffic_policy(self, *,
        Name: str,
        Document: str,
        Comment: str = ...
    ) -> Route53CreateTrafficPolicyResponse: ...

    def create_traffic_policy_instance(self, *,
        HostedZoneId: str,
        Name: str,
        TTL: int,
        TrafficPolicyId: str,
        TrafficPolicyVersion: int
    ) -> Route53CreateTrafficPolicyInstanceResponse: ...

    def create_traffic_policy_version(self, *,
        Id: str,
        Document: str,
        Comment: str = ...
    ) -> Route53CreateTrafficPolicyVersionResponse: ...

    def create_vpc_association_authorization(self, *,
        HostedZoneId: str,
        VPC: Route53VPC
    ) -> Route53CreateVPCAssociationAuthorizationResponse: ...

    def delete_health_check(self, *,
        HealthCheckId: str
    ) -> Route53DeleteHealthCheckResponse: ...

    def delete_hosted_zone(self, *,
        Id: str
    ) -> Route53DeleteHostedZoneResponse: ...

    def delete_query_logging_config(self, *,
        Id: str
    ) -> Route53DeleteQueryLoggingConfigResponse: ...

    def delete_reusable_delegation_set(self, *,
        Id: str
    ) -> Route53DeleteReusableDelegationSetResponse: ...

    def delete_traffic_policy(self, *,
        Id: str,
        Version: int
    ) -> Route53DeleteTrafficPolicyResponse: ...

    def delete_traffic_policy_instance(self, *,
        Id: str
    ) -> Route53DeleteTrafficPolicyInstanceResponse: ...

    def delete_vpc_association_authorization(self, *,
        HostedZoneId: str,
        VPC: Route53VPC
    ) -> Route53DeleteVPCAssociationAuthorizationResponse: ...

    def disassociate_vpc_from_hosted_zone(self, *,
        HostedZoneId: str,
        VPC: Route53VPC,
        Comment: str = ...
    ) -> Route53DisassociateVPCFromHostedZoneResponse: ...

    def get_account_limit(self, *,
        Type: str
    ) -> Route53GetAccountLimitResponse: ...

    def get_change(self, *,
        Id: str
    ) -> Route53GetChangeResponse: ...

    def get_checker_ip_ranges(self) -> Route53GetCheckerIpRangesResponse: ...

    def get_geo_location(self, *,
        ContinentCode: str = ...,
        CountryCode: str = ...,
        SubdivisionCode: str = ...
    ) -> Route53GetGeoLocationResponse: ...

    def get_health_check(self, *,
        HealthCheckId: str
    ) -> Route53GetHealthCheckResponse: ...

    def get_health_check_count(self) -> Route53GetHealthCheckCountResponse: ...

    def get_health_check_last_failure_reason(self, *,
        HealthCheckId: str
    ) -> Route53GetHealthCheckLastFailureReasonResponse: ...

    def get_health_check_status(self, *,
        HealthCheckId: str
    ) -> Route53GetHealthCheckStatusResponse: ...

    def get_hosted_zone(self, *,
        Id: str
    ) -> Route53GetHostedZoneResponse: ...

    def get_hosted_zone_count(self) -> Route53GetHostedZoneCountResponse: ...

    def get_hosted_zone_limit(self, *,
        Type: str,
        HostedZoneId: str
    ) -> Route53GetHostedZoneLimitResponse: ...

    def get_query_logging_config(self, *,
        Id: str
    ) -> Route53GetQueryLoggingConfigResponse: ...

    def get_reusable_delegation_set(self, *,
        Id: str
    ) -> Route53GetReusableDelegationSetResponse: ...

    def get_reusable_delegation_set_limit(self, *,
        Type: str,
        DelegationSetId: str
    ) -> Route53GetReusableDelegationSetLimitResponse: ...

    def get_traffic_policy(self, *,
        Id: str,
        Version: int
    ) -> Route53GetTrafficPolicyResponse: ...

    def get_traffic_policy_instance(self, *,
        Id: str
    ) -> Route53GetTrafficPolicyInstanceResponse: ...

    def get_traffic_policy_instance_count(self) -> Route53GetTrafficPolicyInstanceCountResponse: ...

    def list_geo_locations(self, *,
        StartContinentCode: str = ...,
        StartCountryCode: str = ...,
        StartSubdivisionCode: str = ...,
        MaxItems: str = ...
    ) -> Route53ListGeoLocationsResponse: ...

    def list_health_checks(self, *,
        Marker: str = ...,
        MaxItems: str = ...
    ) -> Route53ListHealthChecksResponse: ...

    def list_hosted_zones(self, *,
        Marker: str = ...,
        MaxItems: str = ...,
        DelegationSetId: str = ...
    ) -> Route53ListHostedZonesResponse: ...

    def list_hosted_zones_by_name(self, *,
        DNSName: str = ...,
        HostedZoneId: str = ...,
        MaxItems: str = ...
    ) -> Route53ListHostedZonesByNameResponse: ...

    def list_query_logging_configs(self, *,
        HostedZoneId: str = ...,
        NextToken: str = ...,
        MaxResults: str = ...
    ) -> Route53ListQueryLoggingConfigsResponse: ...

    def list_resource_record_sets(self, *,
        HostedZoneId: str,
        StartRecordName: str = ...,
        StartRecordType: str = ...,
        StartRecordIdentifier: str = ...,
        MaxItems: str = ...
    ) -> Route53ListResourceRecordSetsResponse: ...

    def list_reusable_delegation_sets(self, *,
        Marker: str = ...,
        MaxItems: str = ...
    ) -> Route53ListReusableDelegationSetsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceType: str,
        ResourceId: str
    ) -> Route53ListTagsForResourceResponse: ...

    def list_tags_for_resources(self, *,
        ResourceType: str,
        ResourceIds: List[str]
    ) -> Route53ListTagsForResourcesResponse: ...

    def list_traffic_policies(self, *,
        TrafficPolicyIdMarker: str = ...,
        MaxItems: str = ...
    ) -> Route53ListTrafficPoliciesResponse: ...

    def list_traffic_policy_instances(self, *,
        HostedZoneIdMarker: str = ...,
        TrafficPolicyInstanceNameMarker: str = ...,
        TrafficPolicyInstanceTypeMarker: str = ...,
        MaxItems: str = ...
    ) -> Route53ListTrafficPolicyInstancesResponse: ...

    def list_traffic_policy_instances_by_hosted_zone(self, *,
        HostedZoneId: str,
        TrafficPolicyInstanceNameMarker: str = ...,
        TrafficPolicyInstanceTypeMarker: str = ...,
        MaxItems: str = ...
    ) -> Route53ListTrafficPolicyInstancesByHostedZoneResponse: ...

    def list_traffic_policy_instances_by_policy(self, *,
        TrafficPolicyId: str,
        TrafficPolicyVersion: int,
        HostedZoneIdMarker: str = ...,
        TrafficPolicyInstanceNameMarker: str = ...,
        TrafficPolicyInstanceTypeMarker: str = ...,
        MaxItems: str = ...
    ) -> Route53ListTrafficPolicyInstancesByPolicyResponse: ...

    def list_traffic_policy_versions(self, *,
        Id: str,
        TrafficPolicyVersionMarker: str = ...,
        MaxItems: str = ...
    ) -> Route53ListTrafficPolicyVersionsResponse: ...

    def list_vpc_association_authorizations(self, *,
        HostedZoneId: str,
        NextToken: str = ...,
        MaxResults: str = ...
    ) -> Route53ListVPCAssociationAuthorizationsResponse: ...

    def test_dns_answer(self, *,
        HostedZoneId: str,
        RecordName: str,
        RecordType: str,
        ResolverIP: str = ...,
        EDNS0ClientSubnetIP: str = ...,
        EDNS0ClientSubnetMask: str = ...
    ) -> Route53TestDNSAnswerResponse: ...

    def update_health_check(self, *,
        HealthCheckId: str,
        HealthCheckVersion: int = ...,
        IPAddress: str = ...,
        Port: int = ...,
        ResourcePath: str = ...,
        FullyQualifiedDomainName: str = ...,
        SearchString: str = ...,
        FailureThreshold: int = ...,
        Inverted: bool = ...,
        Disabled: bool = ...,
        HealthThreshold: int = ...,
        ChildHealthChecks: List[str] = ...,
        EnableSNI: bool = ...,
        Regions: List[str] = ...,
        AlarmIdentifier: Route53AlarmIdentifier = ...,
        InsufficientDataHealthStatus: str = ...,
        ResetElements: List[str] = ...
    ) -> Route53UpdateHealthCheckResponse: ...

    def update_hosted_zone_comment(self, *,
        Id: str,
        Comment: str = ...
    ) -> Route53UpdateHostedZoneCommentResponse: ...

    def update_traffic_policy_comment(self, *,
        Id: str,
        Version: int,
        Comment: str
    ) -> Route53UpdateTrafficPolicyCommentResponse: ...

    def update_traffic_policy_instance(self, *,
        Id: str,
        TTL: int,
        TrafficPolicyId: str,
        TrafficPolicyVersion: int
    ) -> Route53UpdateTrafficPolicyInstanceResponse: ...


Route53VPC = TypedDict(
    'Route53VPC', {
        'VPCRegion': Optional[str],
        'VPCId': Optional[str],
    }
)


Route53ChangeInfo = TypedDict(
    'Route53ChangeInfo', {
        'ResourceId': str,
        'ChangeStatus': str,
        'TimeStamp': datetime.datetime,
        'ResourceDescription': Optional[str],
    }
)


Route53AssociateVPCWithHostedZoneResponse = TypedDict(
    'Route53AssociateVPCWithHostedZoneResponse', {
        'ChangeInfo': Route53ChangeInfo,
    }
)


Route53GeoLocation = TypedDict(
    'Route53GeoLocation', {
        'GeoLocationContinentCode': Optional[str],
        'GeoLocationCountryCode': Optional[str],
        'GeoLocationSubdivisionCode': Optional[str],
    }
)


Route53ResourceRecord = TypedDict(
    'Route53ResourceRecord', {
        'RData': str,
    }
)


Route53AliasTarget = TypedDict(
    'Route53AliasTarget', {
        'ResourceId': str,
        'DNSName': str,
        'AliasHealthEnabled': bool,
    }
)


Route53ResourceRecordSet = TypedDict(
    'Route53ResourceRecordSet', {
        'DNSName': str,
        'RRType': str,
        'ResourceRecordSetIdentifier': Optional[str],
        'ResourceRecordSetWeight': Optional[int],
        'ResourceRecordSetRegion': Optional[str],
        'GeoLocation': Optional[Route53GeoLocation],
        'ResourceRecordSetFailover': Optional[str],
        'ResourceRecordSetMultiValueAnswer': Optional[bool],
        'TTL': Optional[int],
        'ResourceRecords': Optional[List[Route53ResourceRecord]],
        'AliasTarget': Optional[Route53AliasTarget],
        'HealthCheckId': Optional[str],
        'TrafficPolicyInstanceId': Optional[str],
    }
)


Route53Change = TypedDict(
    'Route53Change', {
        'ChangeAction': str,
        'ResourceRecordSet': Route53ResourceRecordSet,
    }
)


Route53ChangeBatch = TypedDict(
    'Route53ChangeBatch', {
        'Changes': List[Route53Change],
        'ResourceDescription': Optional[str],
    }
)


Route53ChangeResourceRecordSetsResponse = TypedDict(
    'Route53ChangeResourceRecordSetsResponse', {
        'ChangeInfo': Route53ChangeInfo,
    }
)


Route53Tag = TypedDict(
    'Route53Tag', {
        'TagKey': Optional[str],
        'TagValue': Optional[str],
    }
)


Route53ChangeTagsForResourceResponse = TypedDict(
    'Route53ChangeTagsForResourceResponse', {
    }
)


Route53AlarmIdentifier = TypedDict(
    'Route53AlarmIdentifier', {
        'CloudWatchRegion': str,
        'AlarmName': str,
    }
)


Route53HealthCheckConfig = TypedDict(
    'Route53HealthCheckConfig', {
        'HealthCheckType': str,
        'IPAddress': Optional[str],
        'Port': Optional[int],
        'ResourcePath': Optional[str],
        'FullyQualifiedDomainName': Optional[str],
        'SearchString': Optional[str],
        'RequestInterval': Optional[int],
        'FailureThreshold': Optional[int],
        'MeasureLatency': Optional[bool],
        'Inverted': Optional[bool],
        'Disabled': Optional[bool],
        'HealthThreshold': Optional[int],
        'ChildHealthCheckList': Optional[List[str]],
        'EnableSNI': Optional[bool],
        'HealthCheckRegionList': Optional[List[str]],
        'AlarmIdentifier': Optional[Route53AlarmIdentifier],
        'InsufficientDataHealthStatus': Optional[str],
    }
)


Route53LinkedService = TypedDict(
    'Route53LinkedService', {
        'ServicePrincipal': Optional[str],
        'ResourceDescription': Optional[str],
    }
)


Route53Dimension = TypedDict(
    'Route53Dimension', {
        'DimensionField': str,
        'DimensionField': str,
    }
)


Route53CloudWatchAlarmConfiguration = TypedDict(
    'Route53CloudWatchAlarmConfiguration', {
        'EvaluationPeriods': int,
        'Threshold': float,
        'ComparisonOperator': str,
        'Period': int,
        'MetricName': str,
        'Namespace': str,
        'Statistic': str,
        'DimensionList': Optional[List[Route53Dimension]],
    }
)


Route53HealthCheck = TypedDict(
    'Route53HealthCheck', {
        'HealthCheckId': str,
        'HealthCheckNonce': str,
        'HealthCheckConfig': Route53HealthCheckConfig,
        'HealthCheckVersion': int,
        'LinkedService': Optional[Route53LinkedService],
        'CloudWatchAlarmConfiguration': Optional[Route53CloudWatchAlarmConfiguration],
    }
)


Route53CreateHealthCheckResponse = TypedDict(
    'Route53CreateHealthCheckResponse', {
        'HealthCheck': Route53HealthCheck,
        'ResourceURI': str,
    }
)


Route53HostedZoneConfig = TypedDict(
    'Route53HostedZoneConfig', {
        'ResourceDescription': Optional[str],
        'IsPrivateZone': Optional[bool],
    }
)


Route53HostedZone = TypedDict(
    'Route53HostedZone', {
        'ResourceId': str,
        'DNSName': str,
        'Nonce': str,
        'HostedZoneConfig': Optional[Route53HostedZoneConfig],
        'HostedZoneRRSetCount': Optional[int],
        'LinkedService': Optional[Route53LinkedService],
    }
)


Route53DelegationSet = TypedDict(
    'Route53DelegationSet', {
        'DelegationSetNameServers': List[str],
        'ResourceId': Optional[str],
        'Nonce': Optional[str],
    }
)


Route53CreateHostedZoneResponse = TypedDict(
    'Route53CreateHostedZoneResponse', {
        'HostedZone': Route53HostedZone,
        'ChangeInfo': Route53ChangeInfo,
        'DelegationSet': Route53DelegationSet,
        'ResourceURI': str,
        'VPC': Optional[Route53VPC],
    }
)


Route53QueryLoggingConfig = TypedDict(
    'Route53QueryLoggingConfig', {
        'QueryLoggingConfigId': str,
        'ResourceId': str,
        'CloudWatchLogsLogGroupArn': str,
    }
)


Route53CreateQueryLoggingConfigResponse = TypedDict(
    'Route53CreateQueryLoggingConfigResponse', {
        'QueryLoggingConfig': Route53QueryLoggingConfig,
        'ResourceURI': str,
    }
)


Route53CreateReusableDelegationSetResponse = TypedDict(
    'Route53CreateReusableDelegationSetResponse', {
        'DelegationSet': Route53DelegationSet,
        'ResourceURI': str,
    }
)


Route53TrafficPolicy = TypedDict(
    'Route53TrafficPolicy', {
        'TrafficPolicyId': str,
        'TrafficPolicyVersion': int,
        'TrafficPolicyName': str,
        'RRType': str,
        'TrafficPolicyDocument': str,
        'TrafficPolicyComment': Optional[str],
    }
)


Route53CreateTrafficPolicyResponse = TypedDict(
    'Route53CreateTrafficPolicyResponse', {
        'TrafficPolicy': Route53TrafficPolicy,
        'ResourceURI': str,
    }
)


Route53TrafficPolicyInstance = TypedDict(
    'Route53TrafficPolicyInstance', {
        'TrafficPolicyInstanceId': str,
        'ResourceId': str,
        'DNSName': str,
        'TTL': int,
        'TrafficPolicyInstanceState': str,
        'Message': str,
        'TrafficPolicyId': str,
        'TrafficPolicyVersion': int,
        'RRType': str,
    }
)


Route53CreateTrafficPolicyInstanceResponse = TypedDict(
    'Route53CreateTrafficPolicyInstanceResponse', {
        'TrafficPolicyInstance': Route53TrafficPolicyInstance,
        'ResourceURI': str,
    }
)


Route53CreateTrafficPolicyVersionResponse = TypedDict(
    'Route53CreateTrafficPolicyVersionResponse', {
        'TrafficPolicy': Route53TrafficPolicy,
        'ResourceURI': str,
    }
)


Route53CreateVPCAssociationAuthorizationResponse = TypedDict(
    'Route53CreateVPCAssociationAuthorizationResponse', {
        'ResourceId': str,
        'VPC': Route53VPC,
    }
)


Route53DeleteHealthCheckResponse = TypedDict(
    'Route53DeleteHealthCheckResponse', {
    }
)


Route53DeleteHostedZoneResponse = TypedDict(
    'Route53DeleteHostedZoneResponse', {
        'ChangeInfo': Route53ChangeInfo,
    }
)


Route53DeleteQueryLoggingConfigResponse = TypedDict(
    'Route53DeleteQueryLoggingConfigResponse', {
    }
)


Route53DeleteReusableDelegationSetResponse = TypedDict(
    'Route53DeleteReusableDelegationSetResponse', {
    }
)


Route53DeleteTrafficPolicyResponse = TypedDict(
    'Route53DeleteTrafficPolicyResponse', {
    }
)


Route53DeleteTrafficPolicyInstanceResponse = TypedDict(
    'Route53DeleteTrafficPolicyInstanceResponse', {
    }
)


Route53DeleteVPCAssociationAuthorizationResponse = TypedDict(
    'Route53DeleteVPCAssociationAuthorizationResponse', {
    }
)


Route53DisassociateVPCFromHostedZoneResponse = TypedDict(
    'Route53DisassociateVPCFromHostedZoneResponse', {
        'ChangeInfo': Route53ChangeInfo,
    }
)


Route53AccountLimit = TypedDict(
    'Route53AccountLimit', {
        'AccountLimitType': str,
        'LimitValue': int,
    }
)


Route53GetAccountLimitResponse = TypedDict(
    'Route53GetAccountLimitResponse', {
        'AccountLimit': Route53AccountLimit,
        'UsageCount': int,
    }
)


Route53GetChangeResponse = TypedDict(
    'Route53GetChangeResponse', {
        'ChangeInfo': Route53ChangeInfo,
    }
)


Route53GetCheckerIpRangesResponse = TypedDict(
    'Route53GetCheckerIpRangesResponse', {
        'CheckerIpRanges': List[str],
    }
)


Route53GeoLocationDetails = TypedDict(
    'Route53GeoLocationDetails', {
        'GeoLocationContinentCode': Optional[str],
        'GeoLocationContinentName': Optional[str],
        'GeoLocationCountryCode': Optional[str],
        'GeoLocationCountryName': Optional[str],
        'GeoLocationSubdivisionCode': Optional[str],
        'GeoLocationSubdivisionName': Optional[str],
    }
)


Route53GetGeoLocationResponse = TypedDict(
    'Route53GetGeoLocationResponse', {
        'GeoLocationDetails': Route53GeoLocationDetails,
    }
)


Route53GetHealthCheckResponse = TypedDict(
    'Route53GetHealthCheckResponse', {
        'HealthCheck': Route53HealthCheck,
    }
)


Route53GetHealthCheckCountResponse = TypedDict(
    'Route53GetHealthCheckCountResponse', {
        'HealthCheckCount': int,
    }
)


Route53StatusReport = TypedDict(
    'Route53StatusReport', {
        'Status': Optional[str],
        'TimeStamp': Optional[datetime.datetime],
    }
)


Route53HealthCheckObservation = TypedDict(
    'Route53HealthCheckObservation', {
        'HealthCheckRegion': Optional[str],
        'IPAddress': Optional[str],
        'StatusReport': Optional[Route53StatusReport],
    }
)


Route53GetHealthCheckLastFailureReasonResponse = TypedDict(
    'Route53GetHealthCheckLastFailureReasonResponse', {
        'HealthCheckObservations': List[Route53HealthCheckObservation],
    }
)


Route53GetHealthCheckStatusResponse = TypedDict(
    'Route53GetHealthCheckStatusResponse', {
        'HealthCheckObservations': List[Route53HealthCheckObservation],
    }
)


Route53GetHostedZoneResponse = TypedDict(
    'Route53GetHostedZoneResponse', {
        'HostedZone': Route53HostedZone,
        'DelegationSet': Optional[Route53DelegationSet],
        'VPCs': Optional[List[Route53VPC]],
    }
)


Route53GetHostedZoneCountResponse = TypedDict(
    'Route53GetHostedZoneCountResponse', {
        'HostedZoneCount': int,
    }
)


Route53HostedZoneLimit = TypedDict(
    'Route53HostedZoneLimit', {
        'HostedZoneLimitType': str,
        'LimitValue': int,
    }
)


Route53GetHostedZoneLimitResponse = TypedDict(
    'Route53GetHostedZoneLimitResponse', {
        'HostedZoneLimit': Route53HostedZoneLimit,
        'UsageCount': int,
    }
)


Route53GetQueryLoggingConfigResponse = TypedDict(
    'Route53GetQueryLoggingConfigResponse', {
        'QueryLoggingConfig': Route53QueryLoggingConfig,
    }
)


Route53GetReusableDelegationSetResponse = TypedDict(
    'Route53GetReusableDelegationSetResponse', {
        'DelegationSet': Route53DelegationSet,
    }
)


Route53ReusableDelegationSetLimit = TypedDict(
    'Route53ReusableDelegationSetLimit', {
        'ReusableDelegationSetLimitType': str,
        'LimitValue': int,
    }
)


Route53GetReusableDelegationSetLimitResponse = TypedDict(
    'Route53GetReusableDelegationSetLimitResponse', {
        'ReusableDelegationSetLimit': Route53ReusableDelegationSetLimit,
        'UsageCount': int,
    }
)


Route53GetTrafficPolicyResponse = TypedDict(
    'Route53GetTrafficPolicyResponse', {
        'TrafficPolicy': Route53TrafficPolicy,
    }
)


Route53GetTrafficPolicyInstanceResponse = TypedDict(
    'Route53GetTrafficPolicyInstanceResponse', {
        'TrafficPolicyInstance': Route53TrafficPolicyInstance,
    }
)


Route53GetTrafficPolicyInstanceCountResponse = TypedDict(
    'Route53GetTrafficPolicyInstanceCountResponse', {
        'TrafficPolicyInstanceCount': int,
    }
)


Route53ListGeoLocationsResponse = TypedDict(
    'Route53ListGeoLocationsResponse', {
        'GeoLocationDetailsList': List[Route53GeoLocationDetails],
        'PageTruncated': bool,
        'PageMaxItems': str,
        'GeoLocationContinentCode': Optional[str],
        'GeoLocationCountryCode': Optional[str],
        'GeoLocationSubdivisionCode': Optional[str],
    }
)


Route53ListHealthChecksResponse = TypedDict(
    'Route53ListHealthChecksResponse', {
        'HealthChecks': List[Route53HealthCheck],
        'PageMarker': str,
        'PageTruncated': bool,
        'PageMaxItems': str,
        'PageMarker': Optional[str],
    }
)


Route53ListHostedZonesResponse = TypedDict(
    'Route53ListHostedZonesResponse', {
        'HostedZones': List[Route53HostedZone],
        'PageMarker': str,
        'PageTruncated': bool,
        'PageMaxItems': str,
        'PageMarker': Optional[str],
    }
)


Route53ListHostedZonesByNameResponse = TypedDict(
    'Route53ListHostedZonesByNameResponse', {
        'HostedZones': List[Route53HostedZone],
        'PageTruncated': bool,
        'PageMaxItems': str,
        'DNSName': Optional[str],
        'ResourceId': Optional[str],
        'DNSName': Optional[str],
        'ResourceId': Optional[str],
    }
)


Route53ListQueryLoggingConfigsResponse = TypedDict(
    'Route53ListQueryLoggingConfigsResponse', {
        'QueryLoggingConfigs': List[Route53QueryLoggingConfig],
        'PaginationToken': Optional[str],
    }
)


Route53ListResourceRecordSetsResponse = TypedDict(
    'Route53ListResourceRecordSetsResponse', {
        'ResourceRecordSets': List[Route53ResourceRecordSet],
        'PageTruncated': bool,
        'PageMaxItems': str,
        'DNSName': Optional[str],
        'RRType': Optional[str],
        'ResourceRecordSetIdentifier': Optional[str],
    }
)


Route53ListReusableDelegationSetsResponse = TypedDict(
    'Route53ListReusableDelegationSetsResponse', {
        'DelegationSets': List[Route53DelegationSet],
        'PageMarker': str,
        'PageTruncated': bool,
        'PageMaxItems': str,
        'PageMarker': Optional[str],
    }
)


Route53ResourceTagSet = TypedDict(
    'Route53ResourceTagSet', {
        'TagResourceType': Optional[str],
        'TagResourceId': Optional[str],
        'TagList': Optional[List[Route53Tag]],
    }
)


Route53ListTagsForResourceResponse = TypedDict(
    'Route53ListTagsForResourceResponse', {
        'ResourceTagSet': Route53ResourceTagSet,
    }
)


Route53ListTagsForResourcesResponse = TypedDict(
    'Route53ListTagsForResourcesResponse', {
        'ResourceTagSetList': List[Route53ResourceTagSet],
    }
)


Route53TrafficPolicySummary = TypedDict(
    'Route53TrafficPolicySummary', {
        'TrafficPolicyId': str,
        'TrafficPolicyName': str,
        'RRType': str,
        'TrafficPolicyVersion': int,
        'TrafficPolicyVersion': int,
    }
)


Route53ListTrafficPoliciesResponse = TypedDict(
    'Route53ListTrafficPoliciesResponse', {
        'TrafficPolicySummaries': List[Route53TrafficPolicySummary],
        'PageTruncated': bool,
        'TrafficPolicyId': str,
        'PageMaxItems': str,
    }
)


Route53ListTrafficPolicyInstancesResponse = TypedDict(
    'Route53ListTrafficPolicyInstancesResponse', {
        'TrafficPolicyInstances': List[Route53TrafficPolicyInstance],
        'PageTruncated': bool,
        'PageMaxItems': str,
        'ResourceId': Optional[str],
        'DNSName': Optional[str],
        'RRType': Optional[str],
    }
)


Route53ListTrafficPolicyInstancesByHostedZoneResponse = TypedDict(
    'Route53ListTrafficPolicyInstancesByHostedZoneResponse', {
        'TrafficPolicyInstances': List[Route53TrafficPolicyInstance],
        'PageTruncated': bool,
        'PageMaxItems': str,
        'DNSName': Optional[str],
        'RRType': Optional[str],
    }
)


Route53ListTrafficPolicyInstancesByPolicyResponse = TypedDict(
    'Route53ListTrafficPolicyInstancesByPolicyResponse', {
        'TrafficPolicyInstances': List[Route53TrafficPolicyInstance],
        'PageTruncated': bool,
        'PageMaxItems': str,
        'ResourceId': Optional[str],
        'DNSName': Optional[str],
        'RRType': Optional[str],
    }
)


Route53ListTrafficPolicyVersionsResponse = TypedDict(
    'Route53ListTrafficPolicyVersionsResponse', {
        'TrafficPolicies': List[Route53TrafficPolicy],
        'PageTruncated': bool,
        'TrafficPolicyVersionMarker': str,
        'PageMaxItems': str,
    }
)


Route53ListVPCAssociationAuthorizationsResponse = TypedDict(
    'Route53ListVPCAssociationAuthorizationsResponse', {
        'ResourceId': str,
        'VPCs': List[Route53VPC],
        'PaginationToken': Optional[str],
    }
)


Route53TestDNSAnswerResponse = TypedDict(
    'Route53TestDNSAnswerResponse', {
        'Nameserver': str,
        'DNSName': str,
        'RRType': str,
        'RecordData': List[str],
        'DNSRCode': str,
        'TransportProtocol': str,
    }
)


Route53UpdateHealthCheckResponse = TypedDict(
    'Route53UpdateHealthCheckResponse', {
        'HealthCheck': Route53HealthCheck,
    }
)


Route53UpdateHostedZoneCommentResponse = TypedDict(
    'Route53UpdateHostedZoneCommentResponse', {
        'HostedZone': Route53HostedZone,
    }
)


Route53UpdateTrafficPolicyCommentResponse = TypedDict(
    'Route53UpdateTrafficPolicyCommentResponse', {
        'TrafficPolicy': Route53TrafficPolicy,
    }
)


Route53UpdateTrafficPolicyInstanceResponse = TypedDict(
    'Route53UpdateTrafficPolicyInstanceResponse', {
        'TrafficPolicyInstance': Route53TrafficPolicyInstance,
    }
)


class Route53Domains(BaseClient):
    def check_domain_availability(self, *,
        DomainName: str,
        IdnLangCode: str = ...
    ) -> Route53DomainsCheckDomainAvailabilityResponse: ...

    def check_domain_transferability(self, *,
        DomainName: str,
        AuthCode: str = ...
    ) -> Route53DomainsCheckDomainTransferabilityResponse: ...

    def delete_tags_for_domain(self, *,
        DomainName: str,
        TagsToDelete: List[str]
    ) -> Route53DomainsDeleteTagsForDomainResponse: ...

    def disable_domain_auto_renew(self, *,
        DomainName: str
    ) -> Route53DomainsDisableDomainAutoRenewResponse: ...

    def disable_domain_transfer_lock(self, *,
        DomainName: str
    ) -> Route53DomainsDisableDomainTransferLockResponse: ...

    def enable_domain_auto_renew(self, *,
        DomainName: str
    ) -> Route53DomainsEnableDomainAutoRenewResponse: ...

    def enable_domain_transfer_lock(self, *,
        DomainName: str
    ) -> Route53DomainsEnableDomainTransferLockResponse: ...

    def get_contact_reachability_status(self, *,
        domainName: str = ...
    ) -> Route53DomainsGetContactReachabilityStatusResponse: ...

    def get_domain_detail(self, *,
        DomainName: str
    ) -> Route53DomainsGetDomainDetailResponse: ...

    def get_domain_suggestions(self, *,
        DomainName: str,
        SuggestionCount: int,
        OnlyAvailable: bool
    ) -> Route53DomainsGetDomainSuggestionsResponse: ...

    def get_operation_detail(self, *,
        OperationId: str
    ) -> Route53DomainsGetOperationDetailResponse: ...

    def list_domains(self, *,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> Route53DomainsListDomainsResponse: ...

    def list_operations(self, *,
        SubmittedSince: datetime.datetime = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> Route53DomainsListOperationsResponse: ...

    def list_tags_for_domain(self, *,
        DomainName: str
    ) -> Route53DomainsListTagsForDomainResponse: ...

    def register_domain(self, *,
        DomainName: str,
        DurationInYears: int,
        AdminContact: Route53DomainsContactDetail,
        RegistrantContact: Route53DomainsContactDetail,
        TechContact: Route53DomainsContactDetail,
        IdnLangCode: str = ...,
        AutoRenew: bool = ...,
        PrivacyProtectAdminContact: bool = ...,
        PrivacyProtectRegistrantContact: bool = ...,
        PrivacyProtectTechContact: bool = ...
    ) -> Route53DomainsRegisterDomainResponse: ...

    def renew_domain(self, *,
        DomainName: str,
        CurrentExpiryYear: int,
        DurationInYears: int = ...
    ) -> Route53DomainsRenewDomainResponse: ...

    def resend_contact_reachability_email(self, *,
        domainName: str = ...
    ) -> Route53DomainsResendContactReachabilityEmailResponse: ...

    def retrieve_domain_auth_code(self, *,
        DomainName: str
    ) -> Route53DomainsRetrieveDomainAuthCodeResponse: ...

    def transfer_domain(self, *,
        DomainName: str,
        DurationInYears: int,
        AdminContact: Route53DomainsContactDetail,
        RegistrantContact: Route53DomainsContactDetail,
        TechContact: Route53DomainsContactDetail,
        IdnLangCode: str = ...,
        Nameservers: List[Route53DomainsNameserver] = ...,
        AuthCode: str = ...,
        AutoRenew: bool = ...,
        PrivacyProtectAdminContact: bool = ...,
        PrivacyProtectRegistrantContact: bool = ...,
        PrivacyProtectTechContact: bool = ...
    ) -> Route53DomainsTransferDomainResponse: ...

    def update_domain_contact(self, *,
        DomainName: str,
        AdminContact: Route53DomainsContactDetail = ...,
        RegistrantContact: Route53DomainsContactDetail = ...,
        TechContact: Route53DomainsContactDetail = ...
    ) -> Route53DomainsUpdateDomainContactResponse: ...

    def update_domain_contact_privacy(self, *,
        DomainName: str,
        AdminPrivacy: bool = ...,
        RegistrantPrivacy: bool = ...,
        TechPrivacy: bool = ...
    ) -> Route53DomainsUpdateDomainContactPrivacyResponse: ...

    def update_domain_nameservers(self, *,
        DomainName: str,
        Nameservers: List[Route53DomainsNameserver],
        FIAuthKey: str = ...
    ) -> Route53DomainsUpdateDomainNameserversResponse: ...

    def update_tags_for_domain(self, *,
        DomainName: str,
        TagsToUpdate: List[Route53DomainsTag] = ...
    ) -> Route53DomainsUpdateTagsForDomainResponse: ...

    def view_billing(self, *,
        Start: datetime.datetime = ...,
        End: datetime.datetime = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> Route53DomainsViewBillingResponse: ...


Route53DomainsCheckDomainAvailabilityResponse = TypedDict(
    'Route53DomainsCheckDomainAvailabilityResponse', {
        'DomainAvailability': str,
    }
)


Route53DomainsDomainTransferability = TypedDict(
    'Route53DomainsDomainTransferability', {
        'Transferable': Optional[str],
    }
)


Route53DomainsCheckDomainTransferabilityResponse = TypedDict(
    'Route53DomainsCheckDomainTransferabilityResponse', {
        'DomainTransferability': Route53DomainsDomainTransferability,
    }
)


Route53DomainsDeleteTagsForDomainResponse = TypedDict(
    'Route53DomainsDeleteTagsForDomainResponse', {
    }
)


Route53DomainsDisableDomainAutoRenewResponse = TypedDict(
    'Route53DomainsDisableDomainAutoRenewResponse', {
    }
)


Route53DomainsDisableDomainTransferLockResponse = TypedDict(
    'Route53DomainsDisableDomainTransferLockResponse', {
        'OperationId': str,
    }
)


Route53DomainsEnableDomainAutoRenewResponse = TypedDict(
    'Route53DomainsEnableDomainAutoRenewResponse', {
    }
)


Route53DomainsEnableDomainTransferLockResponse = TypedDict(
    'Route53DomainsEnableDomainTransferLockResponse', {
        'OperationId': str,
    }
)


Route53DomainsGetContactReachabilityStatusResponse = TypedDict(
    'Route53DomainsGetContactReachabilityStatusResponse', {
        'DomainName': Optional[str],
        'ReachabilityStatus': Optional[str],
    }
)


Route53DomainsNameserver = TypedDict(
    'Route53DomainsNameserver', {
        'HostName': str,
        'GlueIpList': Optional[List[str]],
    }
)


Route53DomainsExtraParam = TypedDict(
    'Route53DomainsExtraParam', {
        'ExtraParamName': str,
        'ExtraParamValue': str,
    }
)


Route53DomainsContactDetail = TypedDict(
    'Route53DomainsContactDetail', {
        'ContactName': Optional[str],
        'ContactName': Optional[str],
        'ContactType': Optional[str],
        'ContactName': Optional[str],
        'AddressLine': Optional[str],
        'AddressLine': Optional[str],
        'City': Optional[str],
        'State': Optional[str],
        'CountryCode': Optional[str],
        'ZipCode': Optional[str],
        'ContactNumber': Optional[str],
        'Email': Optional[str],
        'ContactNumber': Optional[str],
        'ExtraParamList': Optional[List[Route53DomainsExtraParam]],
    }
)


Route53DomainsGetDomainDetailResponse = TypedDict(
    'Route53DomainsGetDomainDetailResponse', {
        'DomainName': str,
        'NameserverList': List[Route53DomainsNameserver],
        'ContactDetail': Route53DomainsContactDetail,
        'ContactDetail': Route53DomainsContactDetail,
        'ContactDetail': Route53DomainsContactDetail,
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'RegistrarName': Optional[str],
        'RegistrarWhoIsServer': Optional[str],
        'RegistrarUrl': Optional[str],
        'Email': Optional[str],
        'ContactNumber': Optional[str],
        'RegistryDomainId': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Reseller': Optional[str],
        'DNSSec': Optional[str],
        'DomainStatusList': Optional[List[str]],
    }
)


Route53DomainsDomainSuggestion = TypedDict(
    'Route53DomainsDomainSuggestion', {
        'DomainName': Optional[str],
        'String': Optional[str],
    }
)


Route53DomainsGetDomainSuggestionsResponse = TypedDict(
    'Route53DomainsGetDomainSuggestionsResponse', {
        'DomainSuggestionsList': Optional[List[Route53DomainsDomainSuggestion]],
    }
)


Route53DomainsGetOperationDetailResponse = TypedDict(
    'Route53DomainsGetOperationDetailResponse', {
        'OperationId': Optional[str],
        'OperationStatus': Optional[str],
        'ErrorMessage': Optional[str],
        'DomainName': Optional[str],
        'OperationType': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


Route53DomainsDomainSummary = TypedDict(
    'Route53DomainsDomainSummary', {
        'DomainName': str,
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Timestamp': Optional[datetime.datetime],
    }
)


Route53DomainsListDomainsResponse = TypedDict(
    'Route53DomainsListDomainsResponse', {
        'DomainSummaryList': List[Route53DomainsDomainSummary],
        'PageMarker': Optional[str],
    }
)


Route53DomainsOperationSummary = TypedDict(
    'Route53DomainsOperationSummary', {
        'OperationId': str,
        'OperationStatus': str,
        'OperationType': str,
        'Timestamp': datetime.datetime,
    }
)


Route53DomainsListOperationsResponse = TypedDict(
    'Route53DomainsListOperationsResponse', {
        'OperationSummaryList': List[Route53DomainsOperationSummary],
        'PageMarker': Optional[str],
    }
)


Route53DomainsTag = TypedDict(
    'Route53DomainsTag', {
        'TagKey': Optional[str],
        'TagValue': Optional[str],
    }
)


Route53DomainsListTagsForDomainResponse = TypedDict(
    'Route53DomainsListTagsForDomainResponse', {
        'TagList': List[Route53DomainsTag],
    }
)


Route53DomainsRegisterDomainResponse = TypedDict(
    'Route53DomainsRegisterDomainResponse', {
        'OperationId': str,
    }
)


Route53DomainsRenewDomainResponse = TypedDict(
    'Route53DomainsRenewDomainResponse', {
        'OperationId': str,
    }
)


Route53DomainsResendContactReachabilityEmailResponse = TypedDict(
    'Route53DomainsResendContactReachabilityEmailResponse', {
        'DomainName': Optional[str],
        'Email': Optional[str],
        'Boolean': Optional[bool],
    }
)


Route53DomainsRetrieveDomainAuthCodeResponse = TypedDict(
    'Route53DomainsRetrieveDomainAuthCodeResponse', {
        'DomainAuthCode': str,
    }
)


Route53DomainsTransferDomainResponse = TypedDict(
    'Route53DomainsTransferDomainResponse', {
        'OperationId': str,
    }
)


Route53DomainsUpdateDomainContactResponse = TypedDict(
    'Route53DomainsUpdateDomainContactResponse', {
        'OperationId': str,
    }
)


Route53DomainsUpdateDomainContactPrivacyResponse = TypedDict(
    'Route53DomainsUpdateDomainContactPrivacyResponse', {
        'OperationId': str,
    }
)


Route53DomainsUpdateDomainNameserversResponse = TypedDict(
    'Route53DomainsUpdateDomainNameserversResponse', {
        'OperationId': str,
    }
)


Route53DomainsUpdateTagsForDomainResponse = TypedDict(
    'Route53DomainsUpdateTagsForDomainResponse', {
    }
)


Route53DomainsBillingRecord = TypedDict(
    'Route53DomainsBillingRecord', {
        'DomainName': Optional[str],
        'OperationType': Optional[str],
        'InvoiceId': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Price': Optional[float],
    }
)


Route53DomainsViewBillingResponse = TypedDict(
    'Route53DomainsViewBillingResponse', {
        'PageMarker': Optional[str],
        'BillingRecords': Optional[List[Route53DomainsBillingRecord]],
    }
)


class Route53Resolver(BaseClient):
    def associate_resolver_endpoint_ip_address(self, *,
        ResolverEndpointId: str,
        IpAddress: Route53ResolverIpAddressUpdate
    ) -> Route53ResolverAssociateResolverEndpointIpAddressResponse: ...

    def associate_resolver_rule(self, *,
        ResolverRuleId: str,
        VPCId: str,
        Name: str = ...
    ) -> Route53ResolverAssociateResolverRuleResponse: ...

    def create_resolver_endpoint(self, *,
        CreatorRequestId: str,
        SecurityGroupIds: List[str],
        Direction: str,
        IpAddresses: List[Route53ResolverIpAddressRequest],
        Name: str = ...,
        Tags: List[Route53ResolverTag] = ...
    ) -> Route53ResolverCreateResolverEndpointResponse: ...

    def create_resolver_rule(self, *,
        CreatorRequestId: str,
        RuleType: str,
        DomainName: str,
        Name: str = ...,
        TargetIps: List[Route53ResolverTargetAddress] = ...,
        ResolverEndpointId: str = ...,
        Tags: List[Route53ResolverTag] = ...
    ) -> Route53ResolverCreateResolverRuleResponse: ...

    def delete_resolver_endpoint(self, *,
        ResolverEndpointId: str
    ) -> Route53ResolverDeleteResolverEndpointResponse: ...

    def delete_resolver_rule(self, *,
        ResolverRuleId: str
    ) -> Route53ResolverDeleteResolverRuleResponse: ...

    def disassociate_resolver_endpoint_ip_address(self, *,
        ResolverEndpointId: str,
        IpAddress: Route53ResolverIpAddressUpdate
    ) -> Route53ResolverDisassociateResolverEndpointIpAddressResponse: ...

    def disassociate_resolver_rule(self, *,
        VPCId: str,
        ResolverRuleId: str
    ) -> Route53ResolverDisassociateResolverRuleResponse: ...

    def get_resolver_endpoint(self, *,
        ResolverEndpointId: str
    ) -> Route53ResolverGetResolverEndpointResponse: ...

    def get_resolver_rule(self, *,
        ResolverRuleId: str
    ) -> Route53ResolverGetResolverRuleResponse: ...

    def get_resolver_rule_association(self, *,
        ResolverRuleAssociationId: str
    ) -> Route53ResolverGetResolverRuleAssociationResponse: ...

    def get_resolver_rule_policy(self, *,
        Arn: str
    ) -> Route53ResolverGetResolverRulePolicyResponse: ...

    def list_resolver_endpoint_ip_addresses(self, *,
        ResolverEndpointId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> Route53ResolverListResolverEndpointIpAddressesResponse: ...

    def list_resolver_endpoints(self, *,
        MaxResults: int = ...,
        NextToken: str = ...,
        Filters: List[Route53ResolverFilter] = ...
    ) -> Route53ResolverListResolverEndpointsResponse: ...

    def list_resolver_rule_associations(self, *,
        MaxResults: int = ...,
        NextToken: str = ...,
        Filters: List[Route53ResolverFilter] = ...
    ) -> Route53ResolverListResolverRuleAssociationsResponse: ...

    def list_resolver_rules(self, *,
        MaxResults: int = ...,
        NextToken: str = ...,
        Filters: List[Route53ResolverFilter] = ...
    ) -> Route53ResolverListResolverRulesResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> Route53ResolverListTagsForResourceResponse: ...

    def put_resolver_rule_policy(self, *,
        Arn: str,
        ResolverRulePolicy: str
    ) -> Route53ResolverPutResolverRulePolicyResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: List[Route53ResolverTag]
    ) -> Route53ResolverTagResourceResponse: ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ) -> Route53ResolverUntagResourceResponse: ...

    def update_resolver_endpoint(self, *,
        ResolverEndpointId: str,
        Name: str = ...
    ) -> Route53ResolverUpdateResolverEndpointResponse: ...

    def update_resolver_rule(self, *,
        ResolverRuleId: str,
        Config: Route53ResolverResolverRuleConfig
    ) -> Route53ResolverUpdateResolverRuleResponse: ...


Route53ResolverIpAddressUpdate = TypedDict(
    'Route53ResolverIpAddressUpdate', {
        'ResourceId': Optional[str],
        'SubnetId': Optional[str],
        'Ip': Optional[str],
    }
)


Route53ResolverResolverEndpoint = TypedDict(
    'Route53ResolverResolverEndpoint', {
        'ResourceId': Optional[str],
        'CreatorRequestId': Optional[str],
        'Arn': Optional[str],
        'Name': Optional[str],
        'SecurityGroupIds': Optional[List[str]],
        'ResolverEndpointDirection': Optional[str],
        'IpAddressCount': Optional[int],
        'ResourceId': Optional[str],
        'ResolverEndpointStatus': Optional[str],
        'StatusMessage': Optional[str],
        'Rfc3339TimeString': Optional[str],
        'Rfc3339TimeString': Optional[str],
    }
)


Route53ResolverAssociateResolverEndpointIpAddressResponse = TypedDict(
    'Route53ResolverAssociateResolverEndpointIpAddressResponse', {
        'ResolverEndpoint': Optional[Route53ResolverResolverEndpoint],
    }
)


Route53ResolverResolverRuleAssociation = TypedDict(
    'Route53ResolverResolverRuleAssociation', {
        'ResourceId': Optional[str],
        'ResourceId': Optional[str],
        'Name': Optional[str],
        'ResourceId': Optional[str],
        'ResolverRuleAssociationStatus': Optional[str],
        'StatusMessage': Optional[str],
    }
)


Route53ResolverAssociateResolverRuleResponse = TypedDict(
    'Route53ResolverAssociateResolverRuleResponse', {
        'ResolverRuleAssociation': Optional[Route53ResolverResolverRuleAssociation],
    }
)


Route53ResolverIpAddressRequest = TypedDict(
    'Route53ResolverIpAddressRequest', {
        'SubnetId': str,
        'Ip': Optional[str],
    }
)


Route53ResolverTag = TypedDict(
    'Route53ResolverTag', {
        'TagKey': Optional[str],
        'TagValue': Optional[str],
    }
)


Route53ResolverCreateResolverEndpointResponse = TypedDict(
    'Route53ResolverCreateResolverEndpointResponse', {
        'ResolverEndpoint': Optional[Route53ResolverResolverEndpoint],
    }
)


Route53ResolverTargetAddress = TypedDict(
    'Route53ResolverTargetAddress', {
        'Ip': str,
        'Port': Optional[int],
    }
)


Route53ResolverResolverRule = TypedDict(
    'Route53ResolverResolverRule', {
        'ResourceId': Optional[str],
        'CreatorRequestId': Optional[str],
        'Arn': Optional[str],
        'DomainName': Optional[str],
        'ResolverRuleStatus': Optional[str],
        'StatusMessage': Optional[str],
        'RuleTypeOption': Optional[str],
        'Name': Optional[str],
        'TargetList': Optional[List[Route53ResolverTargetAddress]],
        'ResourceId': Optional[str],
        'AccountId': Optional[str],
        'ShareStatus': Optional[str],
    }
)


Route53ResolverCreateResolverRuleResponse = TypedDict(
    'Route53ResolverCreateResolverRuleResponse', {
        'ResolverRule': Optional[Route53ResolverResolverRule],
    }
)


Route53ResolverDeleteResolverEndpointResponse = TypedDict(
    'Route53ResolverDeleteResolverEndpointResponse', {
        'ResolverEndpoint': Optional[Route53ResolverResolverEndpoint],
    }
)


Route53ResolverDeleteResolverRuleResponse = TypedDict(
    'Route53ResolverDeleteResolverRuleResponse', {
        'ResolverRule': Optional[Route53ResolverResolverRule],
    }
)


Route53ResolverDisassociateResolverEndpointIpAddressResponse = TypedDict(
    'Route53ResolverDisassociateResolverEndpointIpAddressResponse', {
        'ResolverEndpoint': Optional[Route53ResolverResolverEndpoint],
    }
)


Route53ResolverDisassociateResolverRuleResponse = TypedDict(
    'Route53ResolverDisassociateResolverRuleResponse', {
        'ResolverRuleAssociation': Optional[Route53ResolverResolverRuleAssociation],
    }
)


Route53ResolverGetResolverEndpointResponse = TypedDict(
    'Route53ResolverGetResolverEndpointResponse', {
        'ResolverEndpoint': Optional[Route53ResolverResolverEndpoint],
    }
)


Route53ResolverGetResolverRuleResponse = TypedDict(
    'Route53ResolverGetResolverRuleResponse', {
        'ResolverRule': Optional[Route53ResolverResolverRule],
    }
)


Route53ResolverGetResolverRuleAssociationResponse = TypedDict(
    'Route53ResolverGetResolverRuleAssociationResponse', {
        'ResolverRuleAssociation': Optional[Route53ResolverResolverRuleAssociation],
    }
)


Route53ResolverGetResolverRulePolicyResponse = TypedDict(
    'Route53ResolverGetResolverRulePolicyResponse', {
        'ResolverRulePolicy': Optional[str],
    }
)


Route53ResolverIpAddressResponse = TypedDict(
    'Route53ResolverIpAddressResponse', {
        'ResourceId': Optional[str],
        'SubnetId': Optional[str],
        'Ip': Optional[str],
        'IpAddressStatus': Optional[str],
        'StatusMessage': Optional[str],
        'Rfc3339TimeString': Optional[str],
        'Rfc3339TimeString': Optional[str],
    }
)


Route53ResolverListResolverEndpointIpAddressesResponse = TypedDict(
    'Route53ResolverListResolverEndpointIpAddressesResponse', {
        'NextToken': Optional[str],
        'MaxResults': Optional[int],
        'IpAddressesResponse': Optional[List[Route53ResolverIpAddressResponse]],
    }
)


Route53ResolverFilter = TypedDict(
    'Route53ResolverFilter', {
        'FilterName': Optional[str],
        'FilterValues': Optional[List[str]],
    }
)


Route53ResolverListResolverEndpointsResponse = TypedDict(
    'Route53ResolverListResolverEndpointsResponse', {
        'NextToken': Optional[str],
        'MaxResults': Optional[int],
        'ResolverEndpoints': Optional[List[Route53ResolverResolverEndpoint]],
    }
)


Route53ResolverListResolverRuleAssociationsResponse = TypedDict(
    'Route53ResolverListResolverRuleAssociationsResponse', {
        'NextToken': Optional[str],
        'MaxResults': Optional[int],
        'ResolverRuleAssociations': Optional[List[Route53ResolverResolverRuleAssociation]],
    }
)


Route53ResolverListResolverRulesResponse = TypedDict(
    'Route53ResolverListResolverRulesResponse', {
        'NextToken': Optional[str],
        'MaxResults': Optional[int],
        'ResolverRules': Optional[List[Route53ResolverResolverRule]],
    }
)


Route53ResolverListTagsForResourceResponse = TypedDict(
    'Route53ResolverListTagsForResourceResponse', {
        'TagList': Optional[List[Route53ResolverTag]],
        'NextToken': Optional[str],
    }
)


Route53ResolverPutResolverRulePolicyResponse = TypedDict(
    'Route53ResolverPutResolverRulePolicyResponse', {
        'Boolean': Optional[bool],
    }
)


Route53ResolverTagResourceResponse = TypedDict(
    'Route53ResolverTagResourceResponse', {
    }
)


Route53ResolverUntagResourceResponse = TypedDict(
    'Route53ResolverUntagResourceResponse', {
    }
)


Route53ResolverUpdateResolverEndpointResponse = TypedDict(
    'Route53ResolverUpdateResolverEndpointResponse', {
        'ResolverEndpoint': Optional[Route53ResolverResolverEndpoint],
    }
)


Route53ResolverResolverRuleConfig = TypedDict(
    'Route53ResolverResolverRuleConfig', {
        'Name': Optional[str],
        'TargetList': Optional[List[Route53ResolverTargetAddress]],
        'ResourceId': Optional[str],
    }
)


Route53ResolverUpdateResolverRuleResponse = TypedDict(
    'Route53ResolverUpdateResolverRuleResponse', {
        'ResolverRule': Optional[Route53ResolverResolverRule],
    }
)


class S3(BaseClient):
    def abort_multipart_upload(self, *,
        Bucket: str,
        Key: str,
        UploadId: str,
        RequestPayer: str = ...
    ) -> S3AbortMultipartUploadOutput: ...

    def complete_multipart_upload(self, *,
        Bucket: str,
        Key: str,
        UploadId: str,
        MultipartUpload: S3CompletedMultipartUpload = ...,
        RequestPayer: str = ...
    ) -> S3CompleteMultipartUploadOutput: ...

    def copy_object(self, *,
        Bucket: str,
        CopySource: str,
        Key: str,
        ACL: str = ...,
        CacheControl: str = ...,
        ContentDisposition: str = ...,
        ContentEncoding: str = ...,
        ContentLanguage: str = ...,
        ContentType: str = ...,
        CopySourceIfMatch: str = ...,
        CopySourceIfModifiedSince: datetime.datetime = ...,
        CopySourceIfNoneMatch: str = ...,
        CopySourceIfUnmodifiedSince: datetime.datetime = ...,
        Expires: datetime.datetime = ...,
        GrantFullControl: str = ...,
        GrantRead: str = ...,
        GrantReadACP: str = ...,
        GrantWriteACP: str = ...,
        Metadata: Dict[str, str] = ...,
        MetadataDirective: str = ...,
        TaggingDirective: str = ...,
        ServerSideEncryption: str = ...,
        StorageClass: str = ...,
        WebsiteRedirectLocation: str = ...,
        SSECustomerAlgorithm: str = ...,
        SSECustomerKey: str = ...,
        SSECustomerKeyMD5: str = ...,
        SSEKMSKeyId: str = ...,
        CopySourceSSECustomerAlgorithm: str = ...,
        CopySourceSSECustomerKey: str = ...,
        CopySourceSSECustomerKeyMD5: str = ...,
        RequestPayer: str = ...,
        Tagging: str = ...,
        ObjectLockMode: str = ...,
        ObjectLockRetainUntilDate: datetime.datetime = ...,
        ObjectLockLegalHoldStatus: str = ...
    ) -> S3CopyObjectOutput: ...

    def create_bucket(self, *,
        Bucket: str,
        ACL: str = ...,
        CreateBucketConfiguration: S3CreateBucketConfiguration = ...,
        GrantFullControl: str = ...,
        GrantRead: str = ...,
        GrantReadACP: str = ...,
        GrantWrite: str = ...,
        GrantWriteACP: str = ...,
        ObjectLockEnabledForBucket: bool = ...
    ) -> S3CreateBucketOutput: ...

    def create_multipart_upload(self, *,
        Bucket: str,
        Key: str,
        ACL: str = ...,
        CacheControl: str = ...,
        ContentDisposition: str = ...,
        ContentEncoding: str = ...,
        ContentLanguage: str = ...,
        ContentType: str = ...,
        Expires: datetime.datetime = ...,
        GrantFullControl: str = ...,
        GrantRead: str = ...,
        GrantReadACP: str = ...,
        GrantWriteACP: str = ...,
        Metadata: Dict[str, str] = ...,
        ServerSideEncryption: str = ...,
        StorageClass: str = ...,
        WebsiteRedirectLocation: str = ...,
        SSECustomerAlgorithm: str = ...,
        SSECustomerKey: str = ...,
        SSECustomerKeyMD5: str = ...,
        SSEKMSKeyId: str = ...,
        RequestPayer: str = ...,
        Tagging: str = ...,
        ObjectLockMode: str = ...,
        ObjectLockRetainUntilDate: datetime.datetime = ...,
        ObjectLockLegalHoldStatus: str = ...
    ) -> S3CreateMultipartUploadOutput: ...

    def delete_bucket(self, *,
        Bucket: str
    ): ...

    def delete_bucket_analytics_configuration(self, *,
        Bucket: str,
        Id: str
    ): ...

    def delete_bucket_cors(self, *,
        Bucket: str
    ): ...

    def delete_bucket_encryption(self, *,
        Bucket: str
    ): ...

    def delete_bucket_inventory_configuration(self, *,
        Bucket: str,
        Id: str
    ): ...

    def delete_bucket_lifecycle(self, *,
        Bucket: str
    ): ...

    def delete_bucket_metrics_configuration(self, *,
        Bucket: str,
        Id: str
    ): ...

    def delete_bucket_policy(self, *,
        Bucket: str
    ): ...

    def delete_bucket_replication(self, *,
        Bucket: str
    ): ...

    def delete_bucket_tagging(self, *,
        Bucket: str
    ): ...

    def delete_bucket_website(self, *,
        Bucket: str
    ): ...

    def delete_object(self, *,
        Bucket: str,
        Key: str,
        MFA: str = ...,
        VersionId: str = ...,
        RequestPayer: str = ...,
        BypassGovernanceRetention: bool = ...
    ) -> S3DeleteObjectOutput: ...

    def delete_object_tagging(self, *,
        Bucket: str,
        Key: str,
        VersionId: str = ...
    ) -> S3DeleteObjectTaggingOutput: ...

    def delete_objects(self, *,
        Bucket: str,
        Delete: S3Delete,
        MFA: str = ...,
        RequestPayer: str = ...,
        BypassGovernanceRetention: bool = ...
    ) -> S3DeleteObjectsOutput: ...

    def delete_public_access_block(self, *,
        Bucket: str
    ): ...

    def get_bucket_accelerate_configuration(self, *,
        Bucket: str
    ) -> S3GetBucketAccelerateConfigurationOutput: ...

    def get_bucket_acl(self, *,
        Bucket: str
    ) -> S3GetBucketAclOutput: ...

    def get_bucket_analytics_configuration(self, *,
        Bucket: str,
        Id: str
    ) -> S3GetBucketAnalyticsConfigurationOutput: ...

    def get_bucket_cors(self, *,
        Bucket: str
    ) -> S3GetBucketCorsOutput: ...

    def get_bucket_encryption(self, *,
        Bucket: str
    ) -> S3GetBucketEncryptionOutput: ...

    def get_bucket_inventory_configuration(self, *,
        Bucket: str,
        Id: str
    ) -> S3GetBucketInventoryConfigurationOutput: ...

    def get_bucket_lifecycle(self, *,
        Bucket: str
    ) -> S3GetBucketLifecycleOutput: ...

    def get_bucket_lifecycle_configuration(self, *,
        Bucket: str
    ) -> S3GetBucketLifecycleConfigurationOutput: ...

    def get_bucket_location(self, *,
        Bucket: str
    ) -> S3GetBucketLocationOutput: ...

    def get_bucket_logging(self, *,
        Bucket: str
    ) -> S3GetBucketLoggingOutput: ...

    def get_bucket_metrics_configuration(self, *,
        Bucket: str,
        Id: str
    ) -> S3GetBucketMetricsConfigurationOutput: ...

    def get_bucket_notification(self, *,
        Bucket: str
    ) -> S3NotificationConfigurationDeprecated: ...

    def get_bucket_notification_configuration(self, *,
        Bucket: str
    ) -> S3NotificationConfiguration: ...

    def get_bucket_policy(self, *,
        Bucket: str
    ) -> S3GetBucketPolicyOutput: ...

    def get_bucket_policy_status(self, *,
        Bucket: str
    ) -> S3GetBucketPolicyStatusOutput: ...

    def get_bucket_replication(self, *,
        Bucket: str
    ) -> S3GetBucketReplicationOutput: ...

    def get_bucket_request_payment(self, *,
        Bucket: str
    ) -> S3GetBucketRequestPaymentOutput: ...

    def get_bucket_tagging(self, *,
        Bucket: str
    ) -> S3GetBucketTaggingOutput: ...

    def get_bucket_versioning(self, *,
        Bucket: str
    ) -> S3GetBucketVersioningOutput: ...

    def get_bucket_website(self, *,
        Bucket: str
    ) -> S3GetBucketWebsiteOutput: ...

    def get_object(self, *,
        Bucket: str,
        Key: str,
        IfMatch: str = ...,
        IfModifiedSince: datetime.datetime = ...,
        IfNoneMatch: str = ...,
        IfUnmodifiedSince: datetime.datetime = ...,
        Range: str = ...,
        ResponseCacheControl: str = ...,
        ResponseContentDisposition: str = ...,
        ResponseContentEncoding: str = ...,
        ResponseContentLanguage: str = ...,
        ResponseContentType: str = ...,
        ResponseExpires: datetime.datetime = ...,
        VersionId: str = ...,
        SSECustomerAlgorithm: str = ...,
        SSECustomerKey: str = ...,
        SSECustomerKeyMD5: str = ...,
        RequestPayer: str = ...,
        PartNumber: int = ...
    ) -> S3GetObjectOutput: ...

    def get_object_acl(self, *,
        Bucket: str,
        Key: str,
        VersionId: str = ...,
        RequestPayer: str = ...
    ) -> S3GetObjectAclOutput: ...

    def get_object_legal_hold(self, *,
        Bucket: str,
        Key: str,
        VersionId: str = ...,
        RequestPayer: str = ...
    ) -> S3GetObjectLegalHoldOutput: ...

    def get_object_lock_configuration(self, *,
        Bucket: str
    ) -> S3GetObjectLockConfigurationOutput: ...

    def get_object_retention(self, *,
        Bucket: str,
        Key: str,
        VersionId: str = ...,
        RequestPayer: str = ...
    ) -> S3GetObjectRetentionOutput: ...

    def get_object_tagging(self, *,
        Bucket: str,
        Key: str,
        VersionId: str = ...
    ) -> S3GetObjectTaggingOutput: ...

    def get_object_torrent(self, *,
        Bucket: str,
        Key: str,
        RequestPayer: str = ...
    ) -> S3GetObjectTorrentOutput: ...

    def get_public_access_block(self, *,
        Bucket: str
    ) -> S3GetPublicAccessBlockOutput: ...

    def head_bucket(self, *,
        Bucket: str
    ): ...

    def head_object(self, *,
        Bucket: str,
        Key: str,
        IfMatch: str = ...,
        IfModifiedSince: datetime.datetime = ...,
        IfNoneMatch: str = ...,
        IfUnmodifiedSince: datetime.datetime = ...,
        Range: str = ...,
        VersionId: str = ...,
        SSECustomerAlgorithm: str = ...,
        SSECustomerKey: str = ...,
        SSECustomerKeyMD5: str = ...,
        RequestPayer: str = ...,
        PartNumber: int = ...
    ) -> S3HeadObjectOutput: ...

    def list_bucket_analytics_configurations(self, *,
        Bucket: str,
        ContinuationToken: str = ...
    ) -> S3ListBucketAnalyticsConfigurationsOutput: ...

    def list_bucket_inventory_configurations(self, *,
        Bucket: str,
        ContinuationToken: str = ...
    ) -> S3ListBucketInventoryConfigurationsOutput: ...

    def list_bucket_metrics_configurations(self, *,
        Bucket: str,
        ContinuationToken: str = ...
    ) -> S3ListBucketMetricsConfigurationsOutput: ...

    def list_buckets(self) -> S3ListBucketsOutput: ...

    def list_multipart_uploads(self, *,
        Bucket: str,
        Delimiter: str = ...,
        EncodingType: str = ...,
        KeyMarker: str = ...,
        MaxUploads: int = ...,
        Prefix: str = ...,
        UploadIdMarker: str = ...
    ) -> S3ListMultipartUploadsOutput: ...

    def list_object_versions(self, *,
        Bucket: str,
        Delimiter: str = ...,
        EncodingType: str = ...,
        KeyMarker: str = ...,
        MaxKeys: int = ...,
        Prefix: str = ...,
        VersionIdMarker: str = ...
    ) -> S3ListObjectVersionsOutput: ...

    def list_objects(self, *,
        Bucket: str,
        Delimiter: str = ...,
        EncodingType: str = ...,
        Marker: str = ...,
        MaxKeys: int = ...,
        Prefix: str = ...,
        RequestPayer: str = ...
    ) -> S3ListObjectsOutput: ...

    def list_objects_v2(self, *,
        Bucket: str,
        Delimiter: str = ...,
        EncodingType: str = ...,
        MaxKeys: int = ...,
        Prefix: str = ...,
        ContinuationToken: str = ...,
        FetchOwner: bool = ...,
        StartAfter: str = ...,
        RequestPayer: str = ...
    ) -> S3ListObjectsV2Output: ...

    def list_parts(self, *,
        Bucket: str,
        Key: str,
        UploadId: str,
        MaxParts: int = ...,
        PartNumberMarker: int = ...,
        RequestPayer: str = ...
    ) -> S3ListPartsOutput: ...

    def put_bucket_accelerate_configuration(self, *,
        Bucket: str,
        AccelerateConfiguration: S3AccelerateConfiguration
    ): ...

    def put_bucket_acl(self, *,
        Bucket: str,
        ACL: str = ...,
        AccessControlPolicy: S3AccessControlPolicy = ...,
        ContentMD5: str = ...,
        GrantFullControl: str = ...,
        GrantRead: str = ...,
        GrantReadACP: str = ...,
        GrantWrite: str = ...,
        GrantWriteACP: str = ...
    ): ...

    def put_bucket_analytics_configuration(self, *,
        Bucket: str,
        Id: str,
        AnalyticsConfiguration: S3AnalyticsConfiguration
    ): ...

    def put_bucket_cors(self, *,
        Bucket: str,
        CORSConfiguration: S3CORSConfiguration,
        ContentMD5: str = ...
    ): ...

    def put_bucket_encryption(self, *,
        Bucket: str,
        ServerSideEncryptionConfiguration: S3ServerSideEncryptionConfiguration,
        ContentMD5: str = ...
    ): ...

    def put_bucket_inventory_configuration(self, *,
        Bucket: str,
        Id: str,
        InventoryConfiguration: S3InventoryConfiguration
    ): ...

    def put_bucket_lifecycle(self, *,
        Bucket: str,
        ContentMD5: str = ...,
        LifecycleConfiguration: S3LifecycleConfiguration = ...
    ): ...

    def put_bucket_lifecycle_configuration(self, *,
        Bucket: str,
        LifecycleConfiguration: S3BucketLifecycleConfiguration = ...
    ): ...

    def put_bucket_logging(self, *,
        Bucket: str,
        BucketLoggingStatus: S3BucketLoggingStatus,
        ContentMD5: str = ...
    ): ...

    def put_bucket_metrics_configuration(self, *,
        Bucket: str,
        Id: str,
        MetricsConfiguration: S3MetricsConfiguration
    ): ...

    def put_bucket_notification(self, *,
        Bucket: str,
        NotificationConfiguration: S3NotificationConfigurationDeprecated,
        ContentMD5: str = ...
    ): ...

    def put_bucket_notification_configuration(self, *,
        Bucket: str,
        NotificationConfiguration: S3NotificationConfiguration
    ): ...

    def put_bucket_policy(self, *,
        Bucket: str,
        Policy: str,
        ContentMD5: str = ...,
        ConfirmRemoveSelfBucketAccess: bool = ...
    ): ...

    def put_bucket_replication(self, *,
        Bucket: str,
        ReplicationConfiguration: S3ReplicationConfiguration,
        ContentMD5: str = ...
    ): ...

    def put_bucket_request_payment(self, *,
        Bucket: str,
        RequestPaymentConfiguration: S3RequestPaymentConfiguration,
        ContentMD5: str = ...
    ): ...

    def put_bucket_tagging(self, *,
        Bucket: str,
        Tagging: S3Tagging,
        ContentMD5: str = ...
    ): ...

    def put_bucket_versioning(self, *,
        Bucket: str,
        VersioningConfiguration: S3VersioningConfiguration,
        ContentMD5: str = ...,
        MFA: str = ...
    ): ...

    def put_bucket_website(self, *,
        Bucket: str,
        WebsiteConfiguration: S3WebsiteConfiguration,
        ContentMD5: str = ...
    ): ...

    def put_object(self, *,
        Bucket: str,
        Key: str,
        ACL: str = ...,
        Body: bytes = ...,
        CacheControl: str = ...,
        ContentDisposition: str = ...,
        ContentEncoding: str = ...,
        ContentLanguage: str = ...,
        ContentLength: int = ...,
        ContentMD5: str = ...,
        ContentType: str = ...,
        Expires: datetime.datetime = ...,
        GrantFullControl: str = ...,
        GrantRead: str = ...,
        GrantReadACP: str = ...,
        GrantWriteACP: str = ...,
        Metadata: Dict[str, str] = ...,
        ServerSideEncryption: str = ...,
        StorageClass: str = ...,
        WebsiteRedirectLocation: str = ...,
        SSECustomerAlgorithm: str = ...,
        SSECustomerKey: str = ...,
        SSECustomerKeyMD5: str = ...,
        SSEKMSKeyId: str = ...,
        RequestPayer: str = ...,
        Tagging: str = ...,
        ObjectLockMode: str = ...,
        ObjectLockRetainUntilDate: datetime.datetime = ...,
        ObjectLockLegalHoldStatus: str = ...
    ) -> S3PutObjectOutput: ...

    def put_object_acl(self, *,
        Bucket: str,
        Key: str,
        ACL: str = ...,
        AccessControlPolicy: S3AccessControlPolicy = ...,
        ContentMD5: str = ...,
        GrantFullControl: str = ...,
        GrantRead: str = ...,
        GrantReadACP: str = ...,
        GrantWrite: str = ...,
        GrantWriteACP: str = ...,
        RequestPayer: str = ...,
        VersionId: str = ...
    ) -> S3PutObjectAclOutput: ...

    def put_object_legal_hold(self, *,
        Bucket: str,
        Key: str,
        LegalHold: S3ObjectLockLegalHold = ...,
        RequestPayer: str = ...,
        VersionId: str = ...,
        ContentMD5: str = ...
    ) -> S3PutObjectLegalHoldOutput: ...

    def put_object_lock_configuration(self, *,
        Bucket: str,
        ObjectLockConfiguration: S3ObjectLockConfiguration = ...,
        RequestPayer: str = ...,
        Token: str = ...,
        ContentMD5: str = ...
    ) -> S3PutObjectLockConfigurationOutput: ...

    def put_object_retention(self, *,
        Bucket: str,
        Key: str,
        Retention: S3ObjectLockRetention = ...,
        RequestPayer: str = ...,
        VersionId: str = ...,
        BypassGovernanceRetention: bool = ...,
        ContentMD5: str = ...
    ) -> S3PutObjectRetentionOutput: ...

    def put_object_tagging(self, *,
        Bucket: str,
        Key: str,
        Tagging: S3Tagging,
        VersionId: str = ...,
        ContentMD5: str = ...
    ) -> S3PutObjectTaggingOutput: ...

    def put_public_access_block(self, *,
        Bucket: str,
        PublicAccessBlockConfiguration: S3PublicAccessBlockConfiguration,
        ContentMD5: str = ...
    ): ...

    def restore_object(self, *,
        Bucket: str,
        Key: str,
        VersionId: str = ...,
        RestoreRequest: S3RestoreRequest = ...,
        RequestPayer: str = ...
    ) -> S3RestoreObjectOutput: ...

    def select_object_content(self, *,
        Bucket: str,
        Key: str,
        Expression: str,
        ExpressionType: str,
        InputSerialization: S3InputSerialization,
        OutputSerialization: S3OutputSerialization,
        SSECustomerAlgorithm: str = ...,
        SSECustomerKey: str = ...,
        SSECustomerKeyMD5: str = ...,
        RequestProgress: S3RequestProgress = ...
    ) -> S3SelectObjectContentOutput: ...

    def upload_part(self, *,
        Bucket: str,
        Key: str,
        PartNumber: int,
        UploadId: str,
        Body: bytes = ...,
        ContentLength: int = ...,
        ContentMD5: str = ...,
        SSECustomerAlgorithm: str = ...,
        SSECustomerKey: str = ...,
        SSECustomerKeyMD5: str = ...,
        RequestPayer: str = ...
    ) -> S3UploadPartOutput: ...

    def upload_part_copy(self, *,
        Bucket: str,
        CopySource: str,
        Key: str,
        PartNumber: int,
        UploadId: str,
        CopySourceIfMatch: str = ...,
        CopySourceIfModifiedSince: datetime.datetime = ...,
        CopySourceIfNoneMatch: str = ...,
        CopySourceIfUnmodifiedSince: datetime.datetime = ...,
        CopySourceRange: str = ...,
        SSECustomerAlgorithm: str = ...,
        SSECustomerKey: str = ...,
        SSECustomerKeyMD5: str = ...,
        CopySourceSSECustomerAlgorithm: str = ...,
        CopySourceSSECustomerKey: str = ...,
        CopySourceSSECustomerKeyMD5: str = ...,
        RequestPayer: str = ...
    ) -> S3UploadPartCopyOutput: ...


S3AbortMultipartUploadOutput = TypedDict(
    'S3AbortMultipartUploadOutput', {
        'RequestCharged': Optional[str],
    }
)


S3CompletedPart = TypedDict(
    'S3CompletedPart', {
        'ETag': Optional[str],
        'PartNumber': Optional[int],
    }
)


S3CompletedMultipartUpload = TypedDict(
    'S3CompletedMultipartUpload', {
        'CompletedPartList': Optional[List[S3CompletedPart]],
    }
)


S3CompleteMultipartUploadOutput = TypedDict(
    'S3CompleteMultipartUploadOutput', {
        'Location': Optional[str],
        'BucketName': Optional[str],
        'ObjectKey': Optional[str],
        'Expiration': Optional[str],
        'ETag': Optional[str],
        'ServerSideEncryption': Optional[str],
        'ObjectVersionId': Optional[str],
        'SSEKMSKeyId': Optional[str],
        'RequestCharged': Optional[str],
    }
)


S3CopyObjectResult = TypedDict(
    'S3CopyObjectResult', {
        'ETag': Optional[str],
        'LastModified': Optional[datetime.datetime],
    }
)


S3CopyObjectOutput = TypedDict(
    'S3CopyObjectOutput', {
        'CopyObjectResult': Optional[S3CopyObjectResult],
        'Expiration': Optional[str],
        'CopySourceVersionId': Optional[str],
        'ObjectVersionId': Optional[str],
        'ServerSideEncryption': Optional[str],
        'SSECustomerAlgorithm': Optional[str],
        'SSECustomerKeyMD5': Optional[str],
        'SSEKMSKeyId': Optional[str],
        'RequestCharged': Optional[str],
    }
)


S3CreateBucketConfiguration = TypedDict(
    'S3CreateBucketConfiguration', {
        'BucketLocationConstraint': Optional[str],
    }
)


S3CreateBucketOutput = TypedDict(
    'S3CreateBucketOutput', {
        'Location': Optional[str],
    }
)


S3CreateMultipartUploadOutput = TypedDict(
    'S3CreateMultipartUploadOutput', {
        'AbortDate': Optional[datetime.datetime],
        'AbortRuleId': Optional[str],
        'BucketName': Optional[str],
        'ObjectKey': Optional[str],
        'MultipartUploadId': Optional[str],
        'ServerSideEncryption': Optional[str],
        'SSECustomerAlgorithm': Optional[str],
        'SSECustomerKeyMD5': Optional[str],
        'SSEKMSKeyId': Optional[str],
        'RequestCharged': Optional[str],
    }
)


S3DeleteObjectOutput = TypedDict(
    'S3DeleteObjectOutput', {
        'DeleteMarker': Optional[bool],
        'ObjectVersionId': Optional[str],
        'RequestCharged': Optional[str],
    }
)


S3DeleteObjectTaggingOutput = TypedDict(
    'S3DeleteObjectTaggingOutput', {
        'ObjectVersionId': Optional[str],
    }
)


S3ObjectIdentifier = TypedDict(
    'S3ObjectIdentifier', {
        'ObjectKey': str,
        'ObjectVersionId': Optional[str],
    }
)


S3Delete = TypedDict(
    'S3Delete', {
        'ObjectIdentifierList': List[S3ObjectIdentifier],
        'Quiet': Optional[bool],
    }
)


S3DeletedObject = TypedDict(
    'S3DeletedObject', {
        'ObjectKey': Optional[str],
        'ObjectVersionId': Optional[str],
        'DeleteMarker': Optional[bool],
        'DeleteMarkerVersionId': Optional[str],
    }
)


S3Error = TypedDict(
    'S3Error', {
        'ObjectKey': Optional[str],
        'ObjectVersionId': Optional[str],
        'Code': Optional[str],
        'Message': Optional[str],
    }
)


S3DeleteObjectsOutput = TypedDict(
    'S3DeleteObjectsOutput', {
        'DeletedObjects': Optional[List[S3DeletedObject]],
        'RequestCharged': Optional[str],
        'Errors': Optional[List[S3Error]],
    }
)


S3GetBucketAccelerateConfigurationOutput = TypedDict(
    'S3GetBucketAccelerateConfigurationOutput', {
        'BucketAccelerateStatus': Optional[str],
    }
)


S3Owner = TypedDict(
    'S3Owner', {
        'DisplayName': Optional[str],
        'ID': Optional[str],
    }
)


S3Grantee = TypedDict(
    'S3Grantee', {
        'Type': str,
        'DisplayName': Optional[str],
        'EmailAddress': Optional[str],
        'ID': Optional[str],
        'URI': Optional[str],
    }
)


S3Grant = TypedDict(
    'S3Grant', {
        'Grantee': Optional[S3Grantee],
        'Permission': Optional[str],
    }
)


S3GetBucketAclOutput = TypedDict(
    'S3GetBucketAclOutput', {
        'Owner': Optional[S3Owner],
        'Grants': Optional[List[S3Grant]],
    }
)


S3Tag = TypedDict(
    'S3Tag', {
        'ObjectKey': str,
        'Value': str,
    }
)


S3AnalyticsAndOperator = TypedDict(
    'S3AnalyticsAndOperator', {
        'Prefix': Optional[str],
        'TagSet': Optional[List[S3Tag]],
    }
)


S3AnalyticsFilter = TypedDict(
    'S3AnalyticsFilter', {
        'Prefix': Optional[str],
        'Tag': Optional[S3Tag],
        'AnalyticsAndOperator': Optional[S3AnalyticsAndOperator],
    }
)


S3AnalyticsS3BucketDestination = TypedDict(
    'S3AnalyticsS3BucketDestination', {
        'AnalyticsS3ExportFileFormat': str,
        'BucketName': str,
        'AccountId': Optional[str],
        'Prefix': Optional[str],
    }
)


S3AnalyticsExportDestination = TypedDict(
    'S3AnalyticsExportDestination', {
        'AnalyticsS3BucketDestination': S3AnalyticsS3BucketDestination,
    }
)


S3StorageClassAnalysisDataExport = TypedDict(
    'S3StorageClassAnalysisDataExport', {
        'StorageClassAnalysisSchemaVersion': str,
        'AnalyticsExportDestination': S3AnalyticsExportDestination,
    }
)


S3StorageClassAnalysis = TypedDict(
    'S3StorageClassAnalysis', {
        'StorageClassAnalysisDataExport': Optional[S3StorageClassAnalysisDataExport],
    }
)


S3AnalyticsConfiguration = TypedDict(
    'S3AnalyticsConfiguration', {
        'AnalyticsId': str,
        'StorageClassAnalysis': S3StorageClassAnalysis,
        'AnalyticsFilter': Optional[S3AnalyticsFilter],
    }
)


S3GetBucketAnalyticsConfigurationOutput = TypedDict(
    'S3GetBucketAnalyticsConfigurationOutput', {
        'AnalyticsConfiguration': Optional[S3AnalyticsConfiguration],
    }
)


S3CORSRule = TypedDict(
    'S3CORSRule', {
        'AllowedMethods': List[str],
        'AllowedOrigins': List[str],
        'AllowedHeaders': Optional[List[str]],
        'ExposeHeaders': Optional[List[str]],
        'MaxAgeSeconds': Optional[int],
    }
)


S3GetBucketCorsOutput = TypedDict(
    'S3GetBucketCorsOutput', {
        'CORSRules': Optional[List[S3CORSRule]],
    }
)


S3ServerSideEncryptionByDefault = TypedDict(
    'S3ServerSideEncryptionByDefault', {
        'ServerSideEncryption': str,
        'SSEKMSKeyId': Optional[str],
    }
)


S3ServerSideEncryptionRule = TypedDict(
    'S3ServerSideEncryptionRule', {
        'ServerSideEncryptionByDefault': Optional[S3ServerSideEncryptionByDefault],
    }
)


S3ServerSideEncryptionConfiguration = TypedDict(
    'S3ServerSideEncryptionConfiguration', {
        'ServerSideEncryptionRules': List[S3ServerSideEncryptionRule],
    }
)


S3GetBucketEncryptionOutput = TypedDict(
    'S3GetBucketEncryptionOutput', {
        'ServerSideEncryptionConfiguration': Optional[S3ServerSideEncryptionConfiguration],
    }
)


S3SSES3 = TypedDict(
    'S3SSES3', {
    }
)


S3SSEKMS = TypedDict(
    'S3SSEKMS', {
        'SSEKMSKeyId': str,
    }
)


S3InventoryEncryption = TypedDict(
    'S3InventoryEncryption', {
        'SSES3': Optional[S3SSES3],
        'SSEKMS': Optional[S3SSEKMS],
    }
)


S3InventoryS3BucketDestination = TypedDict(
    'S3InventoryS3BucketDestination', {
        'BucketName': str,
        'InventoryFormat': str,
        'AccountId': Optional[str],
        'Prefix': Optional[str],
        'InventoryEncryption': Optional[S3InventoryEncryption],
    }
)


S3InventoryDestination = TypedDict(
    'S3InventoryDestination', {
        'InventoryS3BucketDestination': S3InventoryS3BucketDestination,
    }
)


S3InventoryFilter = TypedDict(
    'S3InventoryFilter', {
        'Prefix': str,
    }
)


S3InventorySchedule = TypedDict(
    'S3InventorySchedule', {
        'InventoryFrequency': str,
    }
)


S3InventoryConfiguration = TypedDict(
    'S3InventoryConfiguration', {
        'InventoryDestination': S3InventoryDestination,
        'IsEnabled': bool,
        'InventoryId': str,
        'InventoryIncludedObjectVersions': str,
        'InventorySchedule': S3InventorySchedule,
        'InventoryFilter': Optional[S3InventoryFilter],
        'InventoryOptionalFields': Optional[List[str]],
    }
)


S3GetBucketInventoryConfigurationOutput = TypedDict(
    'S3GetBucketInventoryConfigurationOutput', {
        'InventoryConfiguration': Optional[S3InventoryConfiguration],
    }
)


S3LifecycleExpiration = TypedDict(
    'S3LifecycleExpiration', {
        'Date': Optional[datetime.datetime],
        'Days': Optional[int],
        'ExpiredObjectDeleteMarker': Optional[bool],
    }
)


S3Transition = TypedDict(
    'S3Transition', {
        'Date': Optional[datetime.datetime],
        'Days': Optional[int],
        'TransitionStorageClass': Optional[str],
    }
)


S3NoncurrentVersionTransition = TypedDict(
    'S3NoncurrentVersionTransition', {
        'Days': Optional[int],
        'TransitionStorageClass': Optional[str],
    }
)


S3NoncurrentVersionExpiration = TypedDict(
    'S3NoncurrentVersionExpiration', {
        'Days': Optional[int],
    }
)


S3AbortIncompleteMultipartUpload = TypedDict(
    'S3AbortIncompleteMultipartUpload', {
        'DaysAfterInitiation': Optional[int],
    }
)


S3Rule = TypedDict(
    'S3Rule', {
        'Prefix': str,
        'ExpirationStatus': str,
        'LifecycleExpiration': Optional[S3LifecycleExpiration],
        'ID': Optional[str],
        'Transition': Optional[S3Transition],
        'NoncurrentVersionTransition': Optional[S3NoncurrentVersionTransition],
        'NoncurrentVersionExpiration': Optional[S3NoncurrentVersionExpiration],
        'AbortIncompleteMultipartUpload': Optional[S3AbortIncompleteMultipartUpload],
    }
)


S3GetBucketLifecycleOutput = TypedDict(
    'S3GetBucketLifecycleOutput', {
        'Rules': Optional[List[S3Rule]],
    }
)


S3LifecycleRuleAndOperator = TypedDict(
    'S3LifecycleRuleAndOperator', {
        'Prefix': Optional[str],
        'TagSet': Optional[List[S3Tag]],
    }
)


S3LifecycleRuleFilter = TypedDict(
    'S3LifecycleRuleFilter', {
        'Prefix': Optional[str],
        'Tag': Optional[S3Tag],
        'LifecycleRuleAndOperator': Optional[S3LifecycleRuleAndOperator],
    }
)


S3LifecycleRule = TypedDict(
    'S3LifecycleRule', {
        'ExpirationStatus': str,
        'LifecycleExpiration': Optional[S3LifecycleExpiration],
        'ID': Optional[str],
        'Prefix': Optional[str],
        'LifecycleRuleFilter': Optional[S3LifecycleRuleFilter],
        'TransitionList': Optional[List[S3Transition]],
        'NoncurrentVersionTransitionList': Optional[List[S3NoncurrentVersionTransition]],
        'NoncurrentVersionExpiration': Optional[S3NoncurrentVersionExpiration],
        'AbortIncompleteMultipartUpload': Optional[S3AbortIncompleteMultipartUpload],
    }
)


S3GetBucketLifecycleConfigurationOutput = TypedDict(
    'S3GetBucketLifecycleConfigurationOutput', {
        'LifecycleRules': Optional[List[S3LifecycleRule]],
    }
)


S3GetBucketLocationOutput = TypedDict(
    'S3GetBucketLocationOutput', {
        'BucketLocationConstraint': Optional[str],
    }
)


S3TargetGrant = TypedDict(
    'S3TargetGrant', {
        'Grantee': Optional[S3Grantee],
        'BucketLogsPermission': Optional[str],
    }
)


S3LoggingEnabled = TypedDict(
    'S3LoggingEnabled', {
        'TargetBucket': str,
        'TargetPrefix': str,
        'TargetGrants': Optional[List[S3TargetGrant]],
    }
)


S3GetBucketLoggingOutput = TypedDict(
    'S3GetBucketLoggingOutput', {
        'LoggingEnabled': Optional[S3LoggingEnabled],
    }
)


S3MetricsAndOperator = TypedDict(
    'S3MetricsAndOperator', {
        'Prefix': Optional[str],
        'TagSet': Optional[List[S3Tag]],
    }
)


S3MetricsFilter = TypedDict(
    'S3MetricsFilter', {
        'Prefix': Optional[str],
        'Tag': Optional[S3Tag],
        'MetricsAndOperator': Optional[S3MetricsAndOperator],
    }
)


S3MetricsConfiguration = TypedDict(
    'S3MetricsConfiguration', {
        'MetricsId': str,
        'MetricsFilter': Optional[S3MetricsFilter],
    }
)


S3GetBucketMetricsConfigurationOutput = TypedDict(
    'S3GetBucketMetricsConfigurationOutput', {
        'MetricsConfiguration': Optional[S3MetricsConfiguration],
    }
)


S3TopicConfigurationDeprecated = TypedDict(
    'S3TopicConfigurationDeprecated', {
        'NotificationId': Optional[str],
        'EventList': Optional[List[str]],
        'Event': Optional[str],
        'TopicArn': Optional[str],
    }
)


S3QueueConfigurationDeprecated = TypedDict(
    'S3QueueConfigurationDeprecated', {
        'NotificationId': Optional[str],
        'Event': Optional[str],
        'EventList': Optional[List[str]],
        'QueueArn': Optional[str],
    }
)


S3CloudFunctionConfiguration = TypedDict(
    'S3CloudFunctionConfiguration', {
        'NotificationId': Optional[str],
        'Event': Optional[str],
        'EventList': Optional[List[str]],
        'CloudFunction': Optional[str],
        'CloudFunctionInvocationRole': Optional[str],
    }
)


S3NotificationConfigurationDeprecated = TypedDict(
    'S3NotificationConfigurationDeprecated', {
        'TopicConfigurationDeprecated': Optional[S3TopicConfigurationDeprecated],
        'QueueConfigurationDeprecated': Optional[S3QueueConfigurationDeprecated],
        'CloudFunctionConfiguration': Optional[S3CloudFunctionConfiguration],
    }
)


S3FilterRule = TypedDict(
    'S3FilterRule', {
        'FilterRuleName': Optional[str],
        'FilterRuleValue': Optional[str],
    }
)


S3S3KeyFilter = TypedDict(
    'S3S3KeyFilter', {
        'FilterRuleList': Optional[List[S3FilterRule]],
    }
)


S3NotificationConfigurationFilter = TypedDict(
    'S3NotificationConfigurationFilter', {
        'S3KeyFilter': Optional[S3S3KeyFilter],
    }
)


S3TopicConfiguration = TypedDict(
    'S3TopicConfiguration', {
        'TopicArn': str,
        'EventList': List[str],
        'NotificationId': Optional[str],
        'NotificationConfigurationFilter': Optional[S3NotificationConfigurationFilter],
    }
)


S3QueueConfiguration = TypedDict(
    'S3QueueConfiguration', {
        'QueueArn': str,
        'EventList': List[str],
        'NotificationId': Optional[str],
        'NotificationConfigurationFilter': Optional[S3NotificationConfigurationFilter],
    }
)


S3LambdaFunctionConfiguration = TypedDict(
    'S3LambdaFunctionConfiguration', {
        'LambdaFunctionArn': str,
        'EventList': List[str],
        'NotificationId': Optional[str],
        'NotificationConfigurationFilter': Optional[S3NotificationConfigurationFilter],
    }
)


S3NotificationConfiguration = TypedDict(
    'S3NotificationConfiguration', {
        'TopicConfigurationList': Optional[List[S3TopicConfiguration]],
        'QueueConfigurationList': Optional[List[S3QueueConfiguration]],
        'LambdaFunctionConfigurationList': Optional[List[S3LambdaFunctionConfiguration]],
    }
)


S3GetBucketPolicyOutput = TypedDict(
    'S3GetBucketPolicyOutput', {
        'Policy': Optional[str],
    }
)


S3PolicyStatus = TypedDict(
    'S3PolicyStatus', {
        'IsPublic': Optional[bool],
    }
)


S3GetBucketPolicyStatusOutput = TypedDict(
    'S3GetBucketPolicyStatusOutput', {
        'PolicyStatus': Optional[S3PolicyStatus],
    }
)


S3ReplicationRuleAndOperator = TypedDict(
    'S3ReplicationRuleAndOperator', {
        'Prefix': Optional[str],
        'TagSet': Optional[List[S3Tag]],
    }
)


S3ReplicationRuleFilter = TypedDict(
    'S3ReplicationRuleFilter', {
        'Prefix': Optional[str],
        'Tag': Optional[S3Tag],
        'ReplicationRuleAndOperator': Optional[S3ReplicationRuleAndOperator],
    }
)


S3SseKmsEncryptedObjects = TypedDict(
    'S3SseKmsEncryptedObjects', {
        'SseKmsEncryptedObjectsStatus': str,
    }
)


S3SourceSelectionCriteria = TypedDict(
    'S3SourceSelectionCriteria', {
        'SseKmsEncryptedObjects': Optional[S3SseKmsEncryptedObjects],
    }
)


S3AccessControlTranslation = TypedDict(
    'S3AccessControlTranslation', {
        'OwnerOverride': str,
    }
)


S3EncryptionConfiguration = TypedDict(
    'S3EncryptionConfiguration', {
        'ReplicaKmsKeyID': Optional[str],
    }
)


S3Destination = TypedDict(
    'S3Destination', {
        'BucketName': str,
        'AccountId': Optional[str],
        'StorageClass': Optional[str],
        'AccessControlTranslation': Optional[S3AccessControlTranslation],
        'EncryptionConfiguration': Optional[S3EncryptionConfiguration],
    }
)


S3DeleteMarkerReplication = TypedDict(
    'S3DeleteMarkerReplication', {
        'DeleteMarkerReplicationStatus': Optional[str],
    }
)


S3ReplicationRule = TypedDict(
    'S3ReplicationRule', {
        'ReplicationRuleStatus': str,
        'Destination': S3Destination,
        'ID': Optional[str],
        'Priority': Optional[int],
        'Prefix': Optional[str],
        'ReplicationRuleFilter': Optional[S3ReplicationRuleFilter],
        'SourceSelectionCriteria': Optional[S3SourceSelectionCriteria],
        'DeleteMarkerReplication': Optional[S3DeleteMarkerReplication],
    }
)


S3ReplicationConfiguration = TypedDict(
    'S3ReplicationConfiguration', {
        'Role': str,
        'ReplicationRules': List[S3ReplicationRule],
    }
)


S3GetBucketReplicationOutput = TypedDict(
    'S3GetBucketReplicationOutput', {
        'ReplicationConfiguration': Optional[S3ReplicationConfiguration],
    }
)


S3GetBucketRequestPaymentOutput = TypedDict(
    'S3GetBucketRequestPaymentOutput', {
        'Payer': Optional[str],
    }
)


S3GetBucketTaggingOutput = TypedDict(
    'S3GetBucketTaggingOutput', {
        'TagSet': List[S3Tag],
    }
)


S3GetBucketVersioningOutput = TypedDict(
    'S3GetBucketVersioningOutput', {
        'BucketVersioningStatus': Optional[str],
        'MFADeleteStatus': Optional[str],
    }
)


S3RedirectAllRequestsTo = TypedDict(
    'S3RedirectAllRequestsTo', {
        'HostName': str,
        'Protocol': Optional[str],
    }
)


S3IndexDocument = TypedDict(
    'S3IndexDocument', {
        'Suffix': str,
    }
)


S3ErrorDocument = TypedDict(
    'S3ErrorDocument', {
        'ObjectKey': str,
    }
)


S3Condition = TypedDict(
    'S3Condition', {
        'HttpErrorCodeReturnedEquals': Optional[str],
        'KeyPrefixEquals': Optional[str],
    }
)


S3Redirect = TypedDict(
    'S3Redirect', {
        'HostName': Optional[str],
        'HttpRedirectCode': Optional[str],
        'Protocol': Optional[str],
        'ReplaceKeyPrefixWith': Optional[str],
        'ReplaceKeyWith': Optional[str],
    }
)


S3RoutingRule = TypedDict(
    'S3RoutingRule', {
        'Redirect': S3Redirect,
        'Condition': Optional[S3Condition],
    }
)


S3GetBucketWebsiteOutput = TypedDict(
    'S3GetBucketWebsiteOutput', {
        'RedirectAllRequestsTo': Optional[S3RedirectAllRequestsTo],
        'IndexDocument': Optional[S3IndexDocument],
        'ErrorDocument': Optional[S3ErrorDocument],
        'RoutingRules': Optional[List[S3RoutingRule]],
    }
)


S3GetObjectOutput = TypedDict(
    'S3GetObjectOutput', {
        'Body': Optional[bytes],
        'DeleteMarker': Optional[bool],
        'AcceptRanges': Optional[str],
        'Expiration': Optional[str],
        'Restore': Optional[str],
        'LastModified': Optional[datetime.datetime],
        'ContentLength': Optional[int],
        'ETag': Optional[str],
        'MissingMeta': Optional[int],
        'ObjectVersionId': Optional[str],
        'CacheControl': Optional[str],
        'ContentDisposition': Optional[str],
        'ContentEncoding': Optional[str],
        'ContentLanguage': Optional[str],
        'ContentRange': Optional[str],
        'ContentType': Optional[str],
        'Expires': Optional[datetime.datetime],
        'WebsiteRedirectLocation': Optional[str],
        'ServerSideEncryption': Optional[str],
        'Metadata': Optional[Dict[str, str]],
        'SSECustomerAlgorithm': Optional[str],
        'SSECustomerKeyMD5': Optional[str],
        'SSEKMSKeyId': Optional[str],
        'StorageClass': Optional[str],
        'RequestCharged': Optional[str],
        'ReplicationStatus': Optional[str],
        'PartsCount': Optional[int],
        'TagCount': Optional[int],
        'ObjectLockMode': Optional[str],
        'ObjectLockRetainUntilDate': Optional[datetime.datetime],
        'ObjectLockLegalHoldStatus': Optional[str],
    }
)


S3GetObjectAclOutput = TypedDict(
    'S3GetObjectAclOutput', {
        'Owner': Optional[S3Owner],
        'Grants': Optional[List[S3Grant]],
        'RequestCharged': Optional[str],
    }
)


S3ObjectLockLegalHold = TypedDict(
    'S3ObjectLockLegalHold', {
        'ObjectLockLegalHoldStatus': Optional[str],
    }
)


S3GetObjectLegalHoldOutput = TypedDict(
    'S3GetObjectLegalHoldOutput', {
        'ObjectLockLegalHold': Optional[S3ObjectLockLegalHold],
    }
)


S3DefaultRetention = TypedDict(
    'S3DefaultRetention', {
        'ObjectLockRetentionMode': Optional[str],
        'Days': Optional[int],
        'Years': Optional[int],
    }
)


S3ObjectLockRule = TypedDict(
    'S3ObjectLockRule', {
        'DefaultRetention': Optional[S3DefaultRetention],
    }
)


S3ObjectLockConfiguration = TypedDict(
    'S3ObjectLockConfiguration', {
        'ObjectLockEnabled': Optional[str],
        'ObjectLockRule': Optional[S3ObjectLockRule],
    }
)


S3GetObjectLockConfigurationOutput = TypedDict(
    'S3GetObjectLockConfigurationOutput', {
        'ObjectLockConfiguration': Optional[S3ObjectLockConfiguration],
    }
)


S3ObjectLockRetention = TypedDict(
    'S3ObjectLockRetention', {
        'ObjectLockRetentionMode': Optional[str],
        'Date': Optional[datetime.datetime],
    }
)


S3GetObjectRetentionOutput = TypedDict(
    'S3GetObjectRetentionOutput', {
        'ObjectLockRetention': Optional[S3ObjectLockRetention],
    }
)


S3GetObjectTaggingOutput = TypedDict(
    'S3GetObjectTaggingOutput', {
        'TagSet': List[S3Tag],
        'ObjectVersionId': Optional[str],
    }
)


S3GetObjectTorrentOutput = TypedDict(
    'S3GetObjectTorrentOutput', {
        'Body': Optional[bytes],
        'RequestCharged': Optional[str],
    }
)


S3PublicAccessBlockConfiguration = TypedDict(
    'S3PublicAccessBlockConfiguration', {
        'Setting': Optional[bool],
        'Setting': Optional[bool],
        'Setting': Optional[bool],
        'Setting': Optional[bool],
    }
)


S3GetPublicAccessBlockOutput = TypedDict(
    'S3GetPublicAccessBlockOutput', {
        'PublicAccessBlockConfiguration': Optional[S3PublicAccessBlockConfiguration],
    }
)


S3HeadObjectOutput = TypedDict(
    'S3HeadObjectOutput', {
        'DeleteMarker': Optional[bool],
        'AcceptRanges': Optional[str],
        'Expiration': Optional[str],
        'Restore': Optional[str],
        'LastModified': Optional[datetime.datetime],
        'ContentLength': Optional[int],
        'ETag': Optional[str],
        'MissingMeta': Optional[int],
        'ObjectVersionId': Optional[str],
        'CacheControl': Optional[str],
        'ContentDisposition': Optional[str],
        'ContentEncoding': Optional[str],
        'ContentLanguage': Optional[str],
        'ContentType': Optional[str],
        'Expires': Optional[datetime.datetime],
        'WebsiteRedirectLocation': Optional[str],
        'ServerSideEncryption': Optional[str],
        'Metadata': Optional[Dict[str, str]],
        'SSECustomerAlgorithm': Optional[str],
        'SSECustomerKeyMD5': Optional[str],
        'SSEKMSKeyId': Optional[str],
        'StorageClass': Optional[str],
        'RequestCharged': Optional[str],
        'ReplicationStatus': Optional[str],
        'PartsCount': Optional[int],
        'ObjectLockMode': Optional[str],
        'ObjectLockRetainUntilDate': Optional[datetime.datetime],
        'ObjectLockLegalHoldStatus': Optional[str],
    }
)


S3ListBucketAnalyticsConfigurationsOutput = TypedDict(
    'S3ListBucketAnalyticsConfigurationsOutput', {
        'IsTruncated': Optional[bool],
        'Token': Optional[str],
        'NextToken': Optional[str],
        'AnalyticsConfigurationList': Optional[List[S3AnalyticsConfiguration]],
    }
)


S3ListBucketInventoryConfigurationsOutput = TypedDict(
    'S3ListBucketInventoryConfigurationsOutput', {
        'Token': Optional[str],
        'InventoryConfigurationList': Optional[List[S3InventoryConfiguration]],
        'IsTruncated': Optional[bool],
        'NextToken': Optional[str],
    }
)


S3ListBucketMetricsConfigurationsOutput = TypedDict(
    'S3ListBucketMetricsConfigurationsOutput', {
        'IsTruncated': Optional[bool],
        'Token': Optional[str],
        'NextToken': Optional[str],
        'MetricsConfigurationList': Optional[List[S3MetricsConfiguration]],
    }
)


S3Bucket = TypedDict(
    'S3Bucket', {
        'BucketName': Optional[str],
        'CreationDate': Optional[datetime.datetime],
    }
)


S3ListBucketsOutput = TypedDict(
    'S3ListBucketsOutput', {
        'Buckets': Optional[List[S3Bucket]],
        'Owner': Optional[S3Owner],
    }
)


S3Initiator = TypedDict(
    'S3Initiator', {
        'ID': Optional[str],
        'DisplayName': Optional[str],
    }
)


S3MultipartUpload = TypedDict(
    'S3MultipartUpload', {
        'MultipartUploadId': Optional[str],
        'ObjectKey': Optional[str],
        'Initiated': Optional[datetime.datetime],
        'StorageClass': Optional[str],
        'Owner': Optional[S3Owner],
        'Initiator': Optional[S3Initiator],
    }
)


S3CommonPrefix = TypedDict(
    'S3CommonPrefix', {
        'Prefix': Optional[str],
    }
)


S3ListMultipartUploadsOutput = TypedDict(
    'S3ListMultipartUploadsOutput', {
        'BucketName': Optional[str],
        'KeyMarker': Optional[str],
        'UploadIdMarker': Optional[str],
        'NextKeyMarker': Optional[str],
        'Prefix': Optional[str],
        'Delimiter': Optional[str],
        'NextUploadIdMarker': Optional[str],
        'MaxUploads': Optional[int],
        'IsTruncated': Optional[bool],
        'MultipartUploadList': Optional[List[S3MultipartUpload]],
        'CommonPrefixList': Optional[List[S3CommonPrefix]],
        'EncodingType': Optional[str],
    }
)


S3ObjectVersion = TypedDict(
    'S3ObjectVersion', {
        'ETag': Optional[str],
        'Size': Optional[int],
        'ObjectVersionStorageClass': Optional[str],
        'ObjectKey': Optional[str],
        'ObjectVersionId': Optional[str],
        'IsLatest': Optional[bool],
        'LastModified': Optional[datetime.datetime],
        'Owner': Optional[S3Owner],
    }
)


S3DeleteMarkerEntry = TypedDict(
    'S3DeleteMarkerEntry', {
        'Owner': Optional[S3Owner],
        'ObjectKey': Optional[str],
        'ObjectVersionId': Optional[str],
        'IsLatest': Optional[bool],
        'LastModified': Optional[datetime.datetime],
    }
)


S3ListObjectVersionsOutput = TypedDict(
    'S3ListObjectVersionsOutput', {
        'IsTruncated': Optional[bool],
        'KeyMarker': Optional[str],
        'VersionIdMarker': Optional[str],
        'NextKeyMarker': Optional[str],
        'NextVersionIdMarker': Optional[str],
        'ObjectVersionList': Optional[List[S3ObjectVersion]],
        'DeleteMarkers': Optional[List[S3DeleteMarkerEntry]],
        'BucketName': Optional[str],
        'Prefix': Optional[str],
        'Delimiter': Optional[str],
        'MaxKeys': Optional[int],
        'CommonPrefixList': Optional[List[S3CommonPrefix]],
        'EncodingType': Optional[str],
    }
)


S3Object = TypedDict(
    'S3Object', {
        'ObjectKey': Optional[str],
        'LastModified': Optional[datetime.datetime],
        'ETag': Optional[str],
        'Size': Optional[int],
        'ObjectStorageClass': Optional[str],
        'Owner': Optional[S3Owner],
    }
)


S3ListObjectsOutput = TypedDict(
    'S3ListObjectsOutput', {
        'IsTruncated': Optional[bool],
        'Marker': Optional[str],
        'NextMarker': Optional[str],
        'ObjectList': Optional[List[S3Object]],
        'BucketName': Optional[str],
        'Prefix': Optional[str],
        'Delimiter': Optional[str],
        'MaxKeys': Optional[int],
        'CommonPrefixList': Optional[List[S3CommonPrefix]],
        'EncodingType': Optional[str],
    }
)


S3ListObjectsV2Output = TypedDict(
    'S3ListObjectsV2Output', {
        'IsTruncated': Optional[bool],
        'ObjectList': Optional[List[S3Object]],
        'BucketName': Optional[str],
        'Prefix': Optional[str],
        'Delimiter': Optional[str],
        'MaxKeys': Optional[int],
        'CommonPrefixList': Optional[List[S3CommonPrefix]],
        'EncodingType': Optional[str],
        'KeyCount': Optional[int],
        'Token': Optional[str],
        'NextToken': Optional[str],
        'StartAfter': Optional[str],
    }
)


S3Part = TypedDict(
    'S3Part', {
        'PartNumber': Optional[int],
        'LastModified': Optional[datetime.datetime],
        'ETag': Optional[str],
        'Size': Optional[int],
    }
)


S3ListPartsOutput = TypedDict(
    'S3ListPartsOutput', {
        'AbortDate': Optional[datetime.datetime],
        'AbortRuleId': Optional[str],
        'BucketName': Optional[str],
        'ObjectKey': Optional[str],
        'MultipartUploadId': Optional[str],
        'PartNumberMarker': Optional[int],
        'NextPartNumberMarker': Optional[int],
        'MaxParts': Optional[int],
        'IsTruncated': Optional[bool],
        'Parts': Optional[List[S3Part]],
        'Initiator': Optional[S3Initiator],
        'Owner': Optional[S3Owner],
        'StorageClass': Optional[str],
        'RequestCharged': Optional[str],
    }
)


S3AccelerateConfiguration = TypedDict(
    'S3AccelerateConfiguration', {
        'BucketAccelerateStatus': Optional[str],
    }
)


S3AccessControlPolicy = TypedDict(
    'S3AccessControlPolicy', {
        'Grants': Optional[List[S3Grant]],
        'Owner': Optional[S3Owner],
    }
)


S3CORSConfiguration = TypedDict(
    'S3CORSConfiguration', {
        'CORSRules': List[S3CORSRule],
    }
)


S3LifecycleConfiguration = TypedDict(
    'S3LifecycleConfiguration', {
        'Rules': List[S3Rule],
    }
)


S3BucketLifecycleConfiguration = TypedDict(
    'S3BucketLifecycleConfiguration', {
        'LifecycleRules': List[S3LifecycleRule],
    }
)


S3BucketLoggingStatus = TypedDict(
    'S3BucketLoggingStatus', {
        'LoggingEnabled': Optional[S3LoggingEnabled],
    }
)


S3RequestPaymentConfiguration = TypedDict(
    'S3RequestPaymentConfiguration', {
        'Payer': str,
    }
)


S3Tagging = TypedDict(
    'S3Tagging', {
        'TagSet': List[S3Tag],
    }
)


S3VersioningConfiguration = TypedDict(
    'S3VersioningConfiguration', {
        'MFADelete': Optional[str],
        'BucketVersioningStatus': Optional[str],
    }
)


S3WebsiteConfiguration = TypedDict(
    'S3WebsiteConfiguration', {
        'ErrorDocument': Optional[S3ErrorDocument],
        'IndexDocument': Optional[S3IndexDocument],
        'RedirectAllRequestsTo': Optional[S3RedirectAllRequestsTo],
        'RoutingRules': Optional[List[S3RoutingRule]],
    }
)


S3PutObjectOutput = TypedDict(
    'S3PutObjectOutput', {
        'Expiration': Optional[str],
        'ETag': Optional[str],
        'ServerSideEncryption': Optional[str],
        'ObjectVersionId': Optional[str],
        'SSECustomerAlgorithm': Optional[str],
        'SSECustomerKeyMD5': Optional[str],
        'SSEKMSKeyId': Optional[str],
        'RequestCharged': Optional[str],
    }
)


S3PutObjectAclOutput = TypedDict(
    'S3PutObjectAclOutput', {
        'RequestCharged': Optional[str],
    }
)


S3PutObjectLegalHoldOutput = TypedDict(
    'S3PutObjectLegalHoldOutput', {
        'RequestCharged': Optional[str],
    }
)


S3PutObjectLockConfigurationOutput = TypedDict(
    'S3PutObjectLockConfigurationOutput', {
        'RequestCharged': Optional[str],
    }
)


S3PutObjectRetentionOutput = TypedDict(
    'S3PutObjectRetentionOutput', {
        'RequestCharged': Optional[str],
    }
)


S3PutObjectTaggingOutput = TypedDict(
    'S3PutObjectTaggingOutput', {
        'ObjectVersionId': Optional[str],
    }
)


S3GlacierJobParameters = TypedDict(
    'S3GlacierJobParameters', {
        'Tier': str,
    }
)


S3CSVInput = TypedDict(
    'S3CSVInput', {
        'FileHeaderInfo': Optional[str],
        'Comments': Optional[str],
        'QuoteEscapeCharacter': Optional[str],
        'RecordDelimiter': Optional[str],
        'FieldDelimiter': Optional[str],
        'QuoteCharacter': Optional[str],
        'AllowQuotedRecordDelimiter': Optional[bool],
    }
)


S3JSONInput = TypedDict(
    'S3JSONInput', {
        'JSONType': Optional[str],
    }
)


S3ParquetInput = TypedDict(
    'S3ParquetInput', {
    }
)


S3InputSerialization = TypedDict(
    'S3InputSerialization', {
        'CSVInput': Optional[S3CSVInput],
        'CompressionType': Optional[str],
        'JSONInput': Optional[S3JSONInput],
        'ParquetInput': Optional[S3ParquetInput],
    }
)


S3CSVOutput = TypedDict(
    'S3CSVOutput', {
        'QuoteFields': Optional[str],
        'QuoteEscapeCharacter': Optional[str],
        'RecordDelimiter': Optional[str],
        'FieldDelimiter': Optional[str],
        'QuoteCharacter': Optional[str],
    }
)


S3JSONOutput = TypedDict(
    'S3JSONOutput', {
        'RecordDelimiter': Optional[str],
    }
)


S3OutputSerialization = TypedDict(
    'S3OutputSerialization', {
        'CSVOutput': Optional[S3CSVOutput],
        'JSONOutput': Optional[S3JSONOutput],
    }
)


S3SelectParameters = TypedDict(
    'S3SelectParameters', {
        'InputSerialization': S3InputSerialization,
        'ExpressionType': str,
        'Expression': str,
        'OutputSerialization': S3OutputSerialization,
    }
)


S3Encryption = TypedDict(
    'S3Encryption', {
        'ServerSideEncryption': str,
        'SSEKMSKeyId': Optional[str],
        'KMSContext': Optional[str],
    }
)


S3MetadataEntry = TypedDict(
    'S3MetadataEntry', {
        'MetadataKey': Optional[str],
        'MetadataValue': Optional[str],
    }
)


S3S3Location = TypedDict(
    'S3S3Location', {
        'BucketName': str,
        'LocationPrefix': str,
        'Encryption': Optional[S3Encryption],
        'ObjectCannedACL': Optional[str],
        'Grants': Optional[List[S3Grant]],
        'Tagging': Optional[S3Tagging],
        'UserMetadata': Optional[List[S3MetadataEntry]],
        'StorageClass': Optional[str],
    }
)


S3OutputLocation = TypedDict(
    'S3OutputLocation', {
        'S3Location': Optional[S3S3Location],
    }
)


S3RestoreRequest = TypedDict(
    'S3RestoreRequest', {
        'Days': Optional[int],
        'GlacierJobParameters': Optional[S3GlacierJobParameters],
        'RestoreRequestType': Optional[str],
        'Tier': Optional[str],
        'Description': Optional[str],
        'SelectParameters': Optional[S3SelectParameters],
        'OutputLocation': Optional[S3OutputLocation],
    }
)


S3RestoreObjectOutput = TypedDict(
    'S3RestoreObjectOutput', {
        'RequestCharged': Optional[str],
        'RestoreOutputPath': Optional[str],
    }
)


S3RequestProgress = TypedDict(
    'S3RequestProgress', {
        'EnableRequestProgress': Optional[bool],
    }
)


S3RecordsEvent = TypedDict(
    'S3RecordsEvent', {
        'Body': Optional[bytes],
    }
)


S3Stats = TypedDict(
    'S3Stats', {
        'BytesScanned': Optional[int],
        'BytesProcessed': Optional[int],
        'BytesReturned': Optional[int],
    }
)


S3StatsEvent = TypedDict(
    'S3StatsEvent', {
        'Stats': Optional[S3Stats],
    }
)


S3Progress = TypedDict(
    'S3Progress', {
        'BytesScanned': Optional[int],
        'BytesProcessed': Optional[int],
        'BytesReturned': Optional[int],
    }
)


S3ProgressEvent = TypedDict(
    'S3ProgressEvent', {
        'Progress': Optional[S3Progress],
    }
)


S3ContinuationEvent = TypedDict(
    'S3ContinuationEvent', {
    }
)


S3EndEvent = TypedDict(
    'S3EndEvent', {
    }
)


S3SelectObjectContentEventStream = TypedDict(
    'S3SelectObjectContentEventStream', {
        'RecordsEvent': Optional[S3RecordsEvent],
        'StatsEvent': Optional[S3StatsEvent],
        'ProgressEvent': Optional[S3ProgressEvent],
        'ContinuationEvent': Optional[S3ContinuationEvent],
        'EndEvent': Optional[S3EndEvent],
    }
)


S3SelectObjectContentOutput = TypedDict(
    'S3SelectObjectContentOutput', {
        'SelectObjectContentEventStream': Optional[S3SelectObjectContentEventStream],
    }
)


S3UploadPartOutput = TypedDict(
    'S3UploadPartOutput', {
        'ServerSideEncryption': Optional[str],
        'ETag': Optional[str],
        'SSECustomerAlgorithm': Optional[str],
        'SSECustomerKeyMD5': Optional[str],
        'SSEKMSKeyId': Optional[str],
        'RequestCharged': Optional[str],
    }
)


S3CopyPartResult = TypedDict(
    'S3CopyPartResult', {
        'ETag': Optional[str],
        'LastModified': Optional[datetime.datetime],
    }
)


S3UploadPartCopyOutput = TypedDict(
    'S3UploadPartCopyOutput', {
        'CopySourceVersionId': Optional[str],
        'CopyPartResult': Optional[S3CopyPartResult],
        'ServerSideEncryption': Optional[str],
        'SSECustomerAlgorithm': Optional[str],
        'SSECustomerKeyMD5': Optional[str],
        'SSEKMSKeyId': Optional[str],
        'RequestCharged': Optional[str],
    }
)


class S3Control(BaseClient):
    def create_job(self, *,
        AccountId: str,
        Operation: S3ControlJobOperation,
        Report: S3ControlJobReport,
        ClientRequestToken: str,
        Manifest: S3ControlJobManifest,
        Priority: int,
        RoleArn: str,
        ConfirmationRequired: bool = ...,
        Description: str = ...
    ) -> S3ControlCreateJobResult: ...

    def delete_public_access_block(self, *,
        AccountId: str
    ): ...

    def describe_job(self, *,
        AccountId: str,
        JobId: str
    ) -> S3ControlDescribeJobResult: ...

    def get_public_access_block(self, *,
        AccountId: str
    ) -> S3ControlGetPublicAccessBlockOutput: ...

    def list_jobs(self, *,
        AccountId: str,
        JobStatuses: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> S3ControlListJobsResult: ...

    def put_public_access_block(self, *,
        PublicAccessBlockConfiguration: S3ControlPublicAccessBlockConfiguration,
        AccountId: str
    ): ...

    def update_job_priority(self, *,
        AccountId: str,
        JobId: str,
        Priority: int
    ) -> S3ControlUpdateJobPriorityResult: ...

    def update_job_status(self, *,
        AccountId: str,
        JobId: str,
        RequestedJobStatus: str,
        StatusUpdateReason: str = ...
    ) -> S3ControlUpdateJobStatusResult: ...


S3ControlLambdaInvokeOperation = TypedDict(
    'S3ControlLambdaInvokeOperation', {
        'NonEmptyMaxLength1024String': Optional[str],
    }
)


S3ControlS3Grantee = TypedDict(
    'S3ControlS3Grantee', {
        'S3GranteeTypeIdentifier': Optional[str],
        'NonEmptyMaxLength1024String': Optional[str],
        'NonEmptyMaxLength1024String': Optional[str],
    }
)


S3ControlS3Grant = TypedDict(
    'S3ControlS3Grant', {
        'S3Grantee': Optional[S3ControlS3Grantee],
        'S3Permission': Optional[str],
    }
)


S3ControlS3ObjectMetadata = TypedDict(
    'S3ControlS3ObjectMetadata', {
        'NonEmptyMaxLength1024String': Optional[str],
        'NonEmptyMaxLength1024String': Optional[str],
        'NonEmptyMaxLength1024String': Optional[str],
        'NonEmptyMaxLength1024String': Optional[str],
        'S3UserMetadata': Optional[Dict[str, str]],
        'S3ContentLength': Optional[int],
        'NonEmptyMaxLength1024String': Optional[str],
        'NonEmptyMaxLength1024String': Optional[str],
        'TimeStamp': Optional[datetime.datetime],
        'Boolean': Optional[bool],
        'S3SSEAlgorithm': Optional[str],
    }
)


S3ControlS3Tag = TypedDict(
    'S3ControlS3Tag', {
        'NonEmptyMaxLength1024String': str,
        'MaxLength1024String': str,
    }
)


S3ControlS3CopyObjectOperation = TypedDict(
    'S3ControlS3CopyObjectOperation', {
        'S3BucketArnString': Optional[str],
        'S3CannedAccessControlList': Optional[str],
        'S3GrantList': Optional[List[S3ControlS3Grant]],
        'S3MetadataDirective': Optional[str],
        'TimeStamp': Optional[datetime.datetime],
        'S3ObjectMetadata': Optional[S3ControlS3ObjectMetadata],
        'S3TagSet': Optional[List[S3ControlS3Tag]],
        'NonEmptyMaxLength2048String': Optional[str],
        'Boolean': Optional[bool],
        'S3StorageClass': Optional[str],
        'TimeStamp': Optional[datetime.datetime],
        'KmsKeyArnString': Optional[str],
        'NonEmptyMaxLength1024String': Optional[str],
        'S3ObjectLockLegalHoldStatus': Optional[str],
        'S3ObjectLockMode': Optional[str],
        'TimeStamp': Optional[datetime.datetime],
    }
)


S3ControlS3ObjectOwner = TypedDict(
    'S3ControlS3ObjectOwner', {
        'NonEmptyMaxLength1024String': Optional[str],
        'NonEmptyMaxLength1024String': Optional[str],
    }
)


S3ControlS3AccessControlList = TypedDict(
    'S3ControlS3AccessControlList', {
        'S3ObjectOwner': S3ControlS3ObjectOwner,
        'S3GrantList': Optional[List[S3ControlS3Grant]],
    }
)


S3ControlS3AccessControlPolicy = TypedDict(
    'S3ControlS3AccessControlPolicy', {
        'S3AccessControlList': Optional[S3ControlS3AccessControlList],
        'S3CannedAccessControlList': Optional[str],
    }
)


S3ControlS3SetObjectAclOperation = TypedDict(
    'S3ControlS3SetObjectAclOperation', {
        'S3AccessControlPolicy': Optional[S3ControlS3AccessControlPolicy],
    }
)


S3ControlS3SetObjectTaggingOperation = TypedDict(
    'S3ControlS3SetObjectTaggingOperation', {
        'S3TagSet': Optional[List[S3ControlS3Tag]],
    }
)


S3ControlS3InitiateRestoreObjectOperation = TypedDict(
    'S3ControlS3InitiateRestoreObjectOperation', {
        'S3ExpirationInDays': Optional[int],
        'S3GlacierJobTier': Optional[str],
    }
)


S3ControlJobOperation = TypedDict(
    'S3ControlJobOperation', {
        'LambdaInvokeOperation': Optional[S3ControlLambdaInvokeOperation],
        'S3CopyObjectOperation': Optional[S3ControlS3CopyObjectOperation],
        'S3SetObjectAclOperation': Optional[S3ControlS3SetObjectAclOperation],
        'S3SetObjectTaggingOperation': Optional[S3ControlS3SetObjectTaggingOperation],
        'S3InitiateRestoreObjectOperation': Optional[S3ControlS3InitiateRestoreObjectOperation],
    }
)


S3ControlJobReport = TypedDict(
    'S3ControlJobReport', {
        'Boolean': bool,
        'S3BucketArnString': Optional[str],
        'JobReportFormat': Optional[str],
        'ReportPrefixString': Optional[str],
        'JobReportScope': Optional[str],
    }
)


S3ControlJobManifestSpec = TypedDict(
    'S3ControlJobManifestSpec', {
        'JobManifestFormat': str,
        'JobManifestFieldList': Optional[List[str]],
    }
)


S3ControlJobManifestLocation = TypedDict(
    'S3ControlJobManifestLocation', {
        'S3KeyArnString': str,
        'NonEmptyMaxLength1024String': str,
        'S3ObjectVersionId': Optional[str],
    }
)


S3ControlJobManifest = TypedDict(
    'S3ControlJobManifest', {
        'JobManifestSpec': S3ControlJobManifestSpec,
        'JobManifestLocation': S3ControlJobManifestLocation,
    }
)


S3ControlCreateJobResult = TypedDict(
    'S3ControlCreateJobResult', {
        'JobId': Optional[str],
    }
)


S3ControlJobProgressSummary = TypedDict(
    'S3ControlJobProgressSummary', {
        'JobTotalNumberOfTasks': Optional[int],
        'JobNumberOfTasksSucceeded': Optional[int],
        'JobNumberOfTasksFailed': Optional[int],
    }
)


S3ControlJobFailure = TypedDict(
    'S3ControlJobFailure', {
        'JobFailureCode': Optional[str],
        'JobFailureReason': Optional[str],
    }
)


S3ControlJobDescriptor = TypedDict(
    'S3ControlJobDescriptor', {
        'JobId': Optional[str],
        'ConfirmationRequired': Optional[bool],
        'NonEmptyMaxLength256String': Optional[str],
        'JobArn': Optional[str],
        'JobStatus': Optional[str],
        'JobManifest': Optional[S3ControlJobManifest],
        'JobOperation': Optional[S3ControlJobOperation],
        'JobPriority': Optional[int],
        'JobProgressSummary': Optional[S3ControlJobProgressSummary],
        'JobStatusUpdateReason': Optional[str],
        'JobFailureList': Optional[List[S3ControlJobFailure]],
        'JobReport': Optional[S3ControlJobReport],
        'JobCreationTime': Optional[datetime.datetime],
        'JobTerminationDate': Optional[datetime.datetime],
        'IAMRoleArn': Optional[str],
        'SuspendedDate': Optional[datetime.datetime],
        'SuspendedCause': Optional[str],
    }
)


S3ControlDescribeJobResult = TypedDict(
    'S3ControlDescribeJobResult', {
        'JobDescriptor': Optional[S3ControlJobDescriptor],
    }
)


S3ControlPublicAccessBlockConfiguration = TypedDict(
    'S3ControlPublicAccessBlockConfiguration', {
        'Setting': Optional[bool],
        'Setting': Optional[bool],
        'Setting': Optional[bool],
        'Setting': Optional[bool],
    }
)


S3ControlGetPublicAccessBlockOutput = TypedDict(
    'S3ControlGetPublicAccessBlockOutput', {
        'PublicAccessBlockConfiguration': Optional[S3ControlPublicAccessBlockConfiguration],
    }
)


S3ControlJobListDescriptor = TypedDict(
    'S3ControlJobListDescriptor', {
        'JobId': Optional[str],
        'NonEmptyMaxLength256String': Optional[str],
        'OperationName': Optional[str],
        'JobPriority': Optional[int],
        'JobStatus': Optional[str],
        'JobCreationTime': Optional[datetime.datetime],
        'JobTerminationDate': Optional[datetime.datetime],
        'JobProgressSummary': Optional[S3ControlJobProgressSummary],
    }
)


S3ControlListJobsResult = TypedDict(
    'S3ControlListJobsResult', {
        'NonEmptyMaxLength1024String': Optional[str],
        'JobListDescriptorList': Optional[List[S3ControlJobListDescriptor]],
    }
)


S3ControlUpdateJobPriorityResult = TypedDict(
    'S3ControlUpdateJobPriorityResult', {
        'JobId': str,
        'JobPriority': int,
    }
)


S3ControlUpdateJobStatusResult = TypedDict(
    'S3ControlUpdateJobStatusResult', {
        'JobId': Optional[str],
        'JobStatus': Optional[str],
        'JobStatusUpdateReason': Optional[str],
    }
)


class SageMakerRuntime(BaseClient):
    def invoke_endpoint(self, *,
        EndpointName: str,
        Body: bytes,
        ContentType: str = ...,
        Accept: str = ...,
        CustomAttributes: str = ...
    ) -> SageMakerRuntimeInvokeEndpointOutput: ...


SageMakerRuntimeInvokeEndpointOutput = TypedDict(
    'SageMakerRuntimeInvokeEndpointOutput', {
        'BodyBlob': bytes,
        'Header': Optional[str],
        'Header': Optional[str],
        'CustomAttributesHeader': Optional[str],
    }
)


class SimpleDB(BaseClient):
    def batch_delete_attributes(self, *,
        DomainName: str,
        Items: List[SimpleDBDeletableItem]
    ): ...

    def batch_put_attributes(self, *,
        DomainName: str,
        Items: List[SimpleDBReplaceableItem]
    ): ...

    def create_domain(self, *,
        DomainName: str
    ): ...

    def delete_attributes(self, *,
        DomainName: str,
        ItemName: str,
        Attributes: List[SimpleDBAttribute] = ...,
        Expected: SimpleDBUpdateCondition = ...
    ): ...

    def delete_domain(self, *,
        DomainName: str
    ): ...

    def domain_metadata(self, *,
        DomainName: str
    ) -> SimpleDBDomainMetadataResult: ...

    def get_attributes(self, *,
        DomainName: str,
        ItemName: str,
        AttributeNames: List[str] = ...,
        ConsistentRead: bool = ...
    ) -> SimpleDBGetAttributesResult: ...

    def list_domains(self, *,
        MaxNumberOfDomains: int = ...,
        NextToken: str = ...
    ) -> SimpleDBListDomainsResult: ...

    def put_attributes(self, *,
        DomainName: str,
        ItemName: str,
        Attributes: List[SimpleDBReplaceableAttribute],
        Expected: SimpleDBUpdateCondition = ...
    ): ...

    def select(self, *,
        SelectExpression: str,
        NextToken: str = ...,
        ConsistentRead: bool = ...
    ) -> SimpleDBSelectResult: ...


SimpleDBAttribute = TypedDict(
    'SimpleDBAttribute', {
        'String': str,
        'String': str,
        'String': Optional[str],
        'String': Optional[str],
    }
)


SimpleDBDeletableItem = TypedDict(
    'SimpleDBDeletableItem', {
        'String': str,
        'AttributeList': Optional[List[SimpleDBAttribute]],
    }
)


SimpleDBReplaceableAttribute = TypedDict(
    'SimpleDBReplaceableAttribute', {
        'String': str,
        'String': str,
        'Boolean': Optional[bool],
    }
)


SimpleDBReplaceableItem = TypedDict(
    'SimpleDBReplaceableItem', {
        'String': str,
        'ReplaceableAttributeList': List[SimpleDBReplaceableAttribute],
    }
)


SimpleDBUpdateCondition = TypedDict(
    'SimpleDBUpdateCondition', {
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
    }
)


SimpleDBDomainMetadataResult = TypedDict(
    'SimpleDBDomainMetadataResult', {
        'Integer': Optional[int],
        'Long': Optional[int],
        'Integer': Optional[int],
        'Long': Optional[int],
        'Integer': Optional[int],
        'Long': Optional[int],
        'Integer': Optional[int],
    }
)


SimpleDBGetAttributesResult = TypedDict(
    'SimpleDBGetAttributesResult', {
        'AttributeList': Optional[List[SimpleDBAttribute]],
    }
)


SimpleDBListDomainsResult = TypedDict(
    'SimpleDBListDomainsResult', {
        'DomainNameList': Optional[List[str]],
        'String': Optional[str],
    }
)


SimpleDBItem = TypedDict(
    'SimpleDBItem', {
        'String': str,
        'AttributeList': List[SimpleDBAttribute],
        'String': Optional[str],
    }
)


SimpleDBSelectResult = TypedDict(
    'SimpleDBSelectResult', {
        'ItemList': Optional[List[SimpleDBItem]],
        'String': Optional[str],
    }
)


class SecretsManager(BaseClient):
    def cancel_rotate_secret(self, *,
        SecretId: str
    ) -> SecretsManagerCancelRotateSecretResponse: ...

    def create_secret(self, *,
        Name: str,
        ClientRequestToken: str = ...,
        Description: str = ...,
        KmsKeyId: str = ...,
        SecretBinary: bytes = ...,
        SecretString: str = ...,
        Tags: List[SecretsManagerTag] = ...
    ) -> SecretsManagerCreateSecretResponse: ...

    def delete_resource_policy(self, *,
        SecretId: str
    ) -> SecretsManagerDeleteResourcePolicyResponse: ...

    def delete_secret(self, *,
        SecretId: str,
        RecoveryWindowInDays: int = ...,
        ForceDeleteWithoutRecovery: bool = ...
    ) -> SecretsManagerDeleteSecretResponse: ...

    def describe_secret(self, *,
        SecretId: str
    ) -> SecretsManagerDescribeSecretResponse: ...

    def get_random_password(self, *,
        PasswordLength: int = ...,
        ExcludeCharacters: str = ...,
        ExcludeNumbers: bool = ...,
        ExcludePunctuation: bool = ...,
        ExcludeUppercase: bool = ...,
        ExcludeLowercase: bool = ...,
        IncludeSpace: bool = ...,
        RequireEachIncludedType: bool = ...
    ) -> SecretsManagerGetRandomPasswordResponse: ...

    def get_resource_policy(self, *,
        SecretId: str
    ) -> SecretsManagerGetResourcePolicyResponse: ...

    def get_secret_value(self, *,
        SecretId: str,
        VersionId: str = ...,
        VersionStage: str = ...
    ) -> SecretsManagerGetSecretValueResponse: ...

    def list_secret_version_ids(self, *,
        SecretId: str,
        MaxResults: int = ...,
        NextToken: str = ...,
        IncludeDeprecated: bool = ...
    ) -> SecretsManagerListSecretVersionIdsResponse: ...

    def list_secrets(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SecretsManagerListSecretsResponse: ...

    def put_resource_policy(self, *,
        SecretId: str,
        ResourcePolicy: str
    ) -> SecretsManagerPutResourcePolicyResponse: ...

    def put_secret_value(self, *,
        SecretId: str,
        ClientRequestToken: str = ...,
        SecretBinary: bytes = ...,
        SecretString: str = ...,
        VersionStages: List[str] = ...
    ) -> SecretsManagerPutSecretValueResponse: ...

    def restore_secret(self, *,
        SecretId: str
    ) -> SecretsManagerRestoreSecretResponse: ...

    def rotate_secret(self, *,
        SecretId: str,
        ClientRequestToken: str = ...,
        RotationLambdaARN: str = ...,
        RotationRules: SecretsManagerRotationRulesType = ...
    ) -> SecretsManagerRotateSecretResponse: ...

    def tag_resource(self, *,
        SecretId: str,
        Tags: List[SecretsManagerTag]
    ): ...

    def untag_resource(self, *,
        SecretId: str,
        TagKeys: List[str]
    ): ...

    def update_secret(self, *,
        SecretId: str,
        ClientRequestToken: str = ...,
        Description: str = ...,
        KmsKeyId: str = ...,
        SecretBinary: bytes = ...,
        SecretString: str = ...
    ) -> SecretsManagerUpdateSecretResponse: ...

    def update_secret_version_stage(self, *,
        SecretId: str,
        VersionStage: str,
        RemoveFromVersionId: str = ...,
        MoveToVersionId: str = ...
    ) -> SecretsManagerUpdateSecretVersionStageResponse: ...


SecretsManagerCancelRotateSecretResponse = TypedDict(
    'SecretsManagerCancelRotateSecretResponse', {
        'SecretARNType': Optional[str],
        'SecretNameType': Optional[str],
        'SecretVersionIdType': Optional[str],
    }
)


SecretsManagerTag = TypedDict(
    'SecretsManagerTag', {
        'TagKeyType': Optional[str],
        'TagValueType': Optional[str],
    }
)


SecretsManagerCreateSecretResponse = TypedDict(
    'SecretsManagerCreateSecretResponse', {
        'SecretARNType': Optional[str],
        'SecretNameType': Optional[str],
        'SecretVersionIdType': Optional[str],
    }
)


SecretsManagerDeleteResourcePolicyResponse = TypedDict(
    'SecretsManagerDeleteResourcePolicyResponse', {
        'SecretARNType': Optional[str],
        'NameType': Optional[str],
    }
)


SecretsManagerDeleteSecretResponse = TypedDict(
    'SecretsManagerDeleteSecretResponse', {
        'SecretARNType': Optional[str],
        'SecretNameType': Optional[str],
        'DeletionDateType': Optional[datetime.datetime],
    }
)


SecretsManagerRotationRulesType = TypedDict(
    'SecretsManagerRotationRulesType', {
        'AutomaticallyRotateAfterDaysType': Optional[int],
    }
)


SecretsManagerDescribeSecretResponse = TypedDict(
    'SecretsManagerDescribeSecretResponse', {
        'SecretARNType': Optional[str],
        'SecretNameType': Optional[str],
        'DescriptionType': Optional[str],
        'KmsKeyIdType': Optional[str],
        'RotationEnabledType': Optional[bool],
        'RotationLambdaARNType': Optional[str],
        'RotationRulesType': Optional[SecretsManagerRotationRulesType],
        'LastRotatedDateType': Optional[datetime.datetime],
        'LastChangedDateType': Optional[datetime.datetime],
        'LastAccessedDateType': Optional[datetime.datetime],
        'DeletedDateType': Optional[datetime.datetime],
        'TagListType': Optional[List[SecretsManagerTag]],
        'SecretVersionsToStagesMapType': Optional[Dict[str, List[str]]],
    }
)


SecretsManagerGetRandomPasswordResponse = TypedDict(
    'SecretsManagerGetRandomPasswordResponse', {
        'RandomPasswordType': Optional[str],
    }
)


SecretsManagerGetResourcePolicyResponse = TypedDict(
    'SecretsManagerGetResourcePolicyResponse', {
        'SecretARNType': Optional[str],
        'NameType': Optional[str],
        'NonEmptyResourcePolicyType': Optional[str],
    }
)


SecretsManagerGetSecretValueResponse = TypedDict(
    'SecretsManagerGetSecretValueResponse', {
        'SecretARNType': Optional[str],
        'SecretNameType': Optional[str],
        'SecretVersionIdType': Optional[str],
        'SecretBinaryType': Optional[bytes],
        'SecretStringType': Optional[str],
        'SecretVersionStagesType': Optional[List[str]],
        'CreatedDateType': Optional[datetime.datetime],
    }
)


SecretsManagerSecretVersionsListEntry = TypedDict(
    'SecretsManagerSecretVersionsListEntry', {
        'SecretVersionIdType': Optional[str],
        'SecretVersionStagesType': Optional[List[str]],
        'LastAccessedDateType': Optional[datetime.datetime],
        'CreatedDateType': Optional[datetime.datetime],
    }
)


SecretsManagerListSecretVersionIdsResponse = TypedDict(
    'SecretsManagerListSecretVersionIdsResponse', {
        'SecretVersionsListType': Optional[List[SecretsManagerSecretVersionsListEntry]],
        'NextTokenType': Optional[str],
        'SecretARNType': Optional[str],
        'SecretNameType': Optional[str],
    }
)


SecretsManagerSecretListEntry = TypedDict(
    'SecretsManagerSecretListEntry', {
        'SecretARNType': Optional[str],
        'SecretNameType': Optional[str],
        'DescriptionType': Optional[str],
        'KmsKeyIdType': Optional[str],
        'RotationEnabledType': Optional[bool],
        'RotationLambdaARNType': Optional[str],
        'RotationRulesType': Optional[SecretsManagerRotationRulesType],
        'LastRotatedDateType': Optional[datetime.datetime],
        'LastChangedDateType': Optional[datetime.datetime],
        'LastAccessedDateType': Optional[datetime.datetime],
        'DeletedDateType': Optional[datetime.datetime],
        'TagListType': Optional[List[SecretsManagerTag]],
        'SecretVersionsToStagesMapType': Optional[Dict[str, List[str]]],
    }
)


SecretsManagerListSecretsResponse = TypedDict(
    'SecretsManagerListSecretsResponse', {
        'SecretListType': Optional[List[SecretsManagerSecretListEntry]],
        'NextTokenType': Optional[str],
    }
)


SecretsManagerPutResourcePolicyResponse = TypedDict(
    'SecretsManagerPutResourcePolicyResponse', {
        'SecretARNType': Optional[str],
        'NameType': Optional[str],
    }
)


SecretsManagerPutSecretValueResponse = TypedDict(
    'SecretsManagerPutSecretValueResponse', {
        'SecretARNType': Optional[str],
        'SecretNameType': Optional[str],
        'SecretVersionIdType': Optional[str],
        'SecretVersionStagesType': Optional[List[str]],
    }
)


SecretsManagerRestoreSecretResponse = TypedDict(
    'SecretsManagerRestoreSecretResponse', {
        'SecretARNType': Optional[str],
        'SecretNameType': Optional[str],
    }
)


SecretsManagerRotateSecretResponse = TypedDict(
    'SecretsManagerRotateSecretResponse', {
        'SecretARNType': Optional[str],
        'SecretNameType': Optional[str],
        'SecretVersionIdType': Optional[str],
    }
)


SecretsManagerUpdateSecretResponse = TypedDict(
    'SecretsManagerUpdateSecretResponse', {
        'SecretARNType': Optional[str],
        'SecretNameType': Optional[str],
        'SecretVersionIdType': Optional[str],
    }
)


SecretsManagerUpdateSecretVersionStageResponse = TypedDict(
    'SecretsManagerUpdateSecretVersionStageResponse', {
        'SecretARNType': Optional[str],
        'SecretNameType': Optional[str],
    }
)


class SecurityHub(BaseClient):
    def accept_invitation(self, *,
        MasterId: str = ...,
        InvitationId: str = ...
    ) -> SecurityHubAcceptInvitationResponse: ...

    def batch_disable_standards(self, *,
        StandardsSubscriptionArns: List[str]
    ) -> SecurityHubBatchDisableStandardsResponse: ...

    def batch_enable_standards(self, *,
        StandardsSubscriptionRequests: List[SecurityHubStandardsSubscriptionRequest]
    ) -> SecurityHubBatchEnableStandardsResponse: ...

    def batch_import_findings(self, *,
        Findings: List[SecurityHubAwsSecurityFinding]
    ) -> SecurityHubBatchImportFindingsResponse: ...

    def create_insight(self, *,
        Name: str,
        Filters: SecurityHubAwsSecurityFindingFilters,
        GroupByAttribute: str
    ) -> SecurityHubCreateInsightResponse: ...

    def create_members(self, *,
        AccountDetails: List[SecurityHubAccountDetails] = ...
    ) -> SecurityHubCreateMembersResponse: ...

    def decline_invitations(self, *,
        AccountIds: List[str] = ...
    ) -> SecurityHubDeclineInvitationsResponse: ...

    def delete_insight(self, *,
        InsightArn: str
    ) -> SecurityHubDeleteInsightResponse: ...

    def delete_invitations(self, *,
        AccountIds: List[str] = ...
    ) -> SecurityHubDeleteInvitationsResponse: ...

    def delete_members(self, *,
        AccountIds: List[str] = ...
    ) -> SecurityHubDeleteMembersResponse: ...

    def disable_import_findings_for_product(self, *,
        ProductSubscriptionArn: str
    ) -> SecurityHubDisableImportFindingsForProductResponse: ...

    def disable_security_hub(self) -> SecurityHubDisableSecurityHubResponse: ...

    def disassociate_from_master_account(self) -> SecurityHubDisassociateFromMasterAccountResponse: ...

    def disassociate_members(self, *,
        AccountIds: List[str] = ...
    ) -> SecurityHubDisassociateMembersResponse: ...

    def enable_import_findings_for_product(self, *,
        ProductArn: str
    ) -> SecurityHubEnableImportFindingsForProductResponse: ...

    def enable_security_hub(self) -> SecurityHubEnableSecurityHubResponse: ...

    def get_enabled_standards(self, *,
        StandardsSubscriptionArns: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> SecurityHubGetEnabledStandardsResponse: ...

    def get_findings(self, *,
        Filters: SecurityHubAwsSecurityFindingFilters = ...,
        SortCriteria: List[SecurityHubSortCriterion] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> SecurityHubGetFindingsResponse: ...

    def get_insight_results(self, *,
        InsightArn: str
    ) -> SecurityHubGetInsightResultsResponse: ...

    def get_insights(self, *,
        InsightArns: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> SecurityHubGetInsightsResponse: ...

    def get_invitations_count(self) -> SecurityHubGetInvitationsCountResponse: ...

    def get_master_account(self) -> SecurityHubGetMasterAccountResponse: ...

    def get_members(self, *,
        AccountIds: List[str]
    ) -> SecurityHubGetMembersResponse: ...

    def invite_members(self, *,
        AccountIds: List[str] = ...
    ) -> SecurityHubInviteMembersResponse: ...

    def list_enabled_products_for_import(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> SecurityHubListEnabledProductsForImportResponse: ...

    def list_invitations(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SecurityHubListInvitationsResponse: ...

    def list_members(self, *,
        OnlyAssociated: bool = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SecurityHubListMembersResponse: ...

    def update_findings(self, *,
        Filters: SecurityHubAwsSecurityFindingFilters,
        Note: SecurityHubNoteUpdate = ...,
        RecordState: str = ...
    ) -> SecurityHubUpdateFindingsResponse: ...

    def update_insight(self, *,
        InsightArn: str,
        Name: str = ...,
        Filters: SecurityHubAwsSecurityFindingFilters = ...,
        GroupByAttribute: str = ...
    ) -> SecurityHubUpdateInsightResponse: ...


SecurityHubAcceptInvitationResponse = TypedDict(
    'SecurityHubAcceptInvitationResponse', {
    }
)


SecurityHubStandardsSubscription = TypedDict(
    'SecurityHubStandardsSubscription', {
        'NonEmptyString': str,
        'NonEmptyString': str,
        'StandardsInputParameterMap': Dict[str, str],
        'StandardsStatus': str,
    }
)


SecurityHubBatchDisableStandardsResponse = TypedDict(
    'SecurityHubBatchDisableStandardsResponse', {
        'StandardsSubscriptions': Optional[List[SecurityHubStandardsSubscription]],
    }
)


SecurityHubStandardsSubscriptionRequest = TypedDict(
    'SecurityHubStandardsSubscriptionRequest', {
        'NonEmptyString': str,
        'StandardsInputParameterMap': Optional[Dict[str, str]],
    }
)


SecurityHubBatchEnableStandardsResponse = TypedDict(
    'SecurityHubBatchEnableStandardsResponse', {
        'StandardsSubscriptions': Optional[List[SecurityHubStandardsSubscription]],
    }
)


SecurityHubSeverity = TypedDict(
    'SecurityHubSeverity', {
        'Integer': int,
        'Double': Optional[float],
    }
)


SecurityHubRecommendation = TypedDict(
    'SecurityHubRecommendation', {
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
    }
)


SecurityHubRemediation = TypedDict(
    'SecurityHubRemediation', {
        'Recommendation': Optional[SecurityHubRecommendation],
    }
)


SecurityHubMalware = TypedDict(
    'SecurityHubMalware', {
        'NonEmptyString': str,
        'MalwareType': Optional[str],
        'NonEmptyString': Optional[str],
        'MalwareState': Optional[str],
    }
)


SecurityHubNetwork = TypedDict(
    'SecurityHubNetwork', {
        'NetworkDirection': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'Integer': Optional[int],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'Integer': Optional[int],
        'NonEmptyString': Optional[str],
    }
)


SecurityHubProcessDetails = TypedDict(
    'SecurityHubProcessDetails', {
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
    }
)


SecurityHubThreatIntelIndicator = TypedDict(
    'SecurityHubThreatIntelIndicator', {
        'ThreatIntelIndicatorType': Optional[str],
        'NonEmptyString': Optional[str],
        'ThreatIntelIndicatorCategory': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
    }
)


SecurityHubAwsEc2InstanceDetails = TypedDict(
    'SecurityHubAwsEc2InstanceDetails', {
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'StringList': Optional[List[str]],
        'StringList': Optional[List[str]],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
    }
)


SecurityHubAwsS3BucketDetails = TypedDict(
    'SecurityHubAwsS3BucketDetails', {
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
    }
)


SecurityHubAwsIamAccessKeyDetails = TypedDict(
    'SecurityHubAwsIamAccessKeyDetails', {
        'NonEmptyString': Optional[str],
        'AwsIamAccessKeyStatus': Optional[str],
        'NonEmptyString': Optional[str],
    }
)


SecurityHubContainerDetails = TypedDict(
    'SecurityHubContainerDetails', {
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
    }
)


SecurityHubResourceDetails = TypedDict(
    'SecurityHubResourceDetails', {
        'AwsEc2InstanceDetails': Optional[SecurityHubAwsEc2InstanceDetails],
        'AwsS3BucketDetails': Optional[SecurityHubAwsS3BucketDetails],
        'AwsIamAccessKeyDetails': Optional[SecurityHubAwsIamAccessKeyDetails],
        'ContainerDetails': Optional[SecurityHubContainerDetails],
        'FieldMap': Optional[Dict[str, str]],
    }
)


SecurityHubResource = TypedDict(
    'SecurityHubResource', {
        'NonEmptyString': str,
        'NonEmptyString': str,
        'Partition': Optional[str],
        'NonEmptyString': Optional[str],
        'FieldMap': Optional[Dict[str, str]],
        'ResourceDetails': Optional[SecurityHubResourceDetails],
    }
)


SecurityHubCompliance = TypedDict(
    'SecurityHubCompliance', {
        'ComplianceStatus': Optional[str],
    }
)


SecurityHubRelatedFinding = TypedDict(
    'SecurityHubRelatedFinding', {
        'NonEmptyString': str,
        'NonEmptyString': str,
    }
)


SecurityHubNote = TypedDict(
    'SecurityHubNote', {
        'NonEmptyString': str,
        'NonEmptyString': str,
        'NonEmptyString': str,
    }
)


SecurityHubAwsSecurityFinding = TypedDict(
    'SecurityHubAwsSecurityFinding', {
        'NonEmptyString': str,
        'NonEmptyString': str,
        'NonEmptyString': str,
        'NonEmptyString': str,
        'NonEmptyString': str,
        'TypeList': List[str],
        'NonEmptyString': str,
        'NonEmptyString': str,
        'Severity': SecurityHubSeverity,
        'ResourceList': List[SecurityHubResource],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'Remediation': Optional[SecurityHubRemediation],
        'NonEmptyString': Optional[str],
        'FieldMap': Optional[Dict[str, str]],
        'FieldMap': Optional[Dict[str, str]],
        'MalwareList': Optional[List[SecurityHubMalware]],
        'Network': Optional[SecurityHubNetwork],
        'ProcessDetails': Optional[SecurityHubProcessDetails],
        'ThreatIntelIndicatorList': Optional[List[SecurityHubThreatIntelIndicator]],
        'Compliance': Optional[SecurityHubCompliance],
        'VerificationState': Optional[str],
        'WorkflowState': Optional[str],
        'RecordState': Optional[str],
        'RelatedFindingList': Optional[List[SecurityHubRelatedFinding]],
        'Note': Optional[SecurityHubNote],
    }
)


SecurityHubImportFindingsError = TypedDict(
    'SecurityHubImportFindingsError', {
        'NonEmptyString': str,
        'NonEmptyString': str,
        'NonEmptyString': str,
    }
)


SecurityHubBatchImportFindingsResponse = TypedDict(
    'SecurityHubBatchImportFindingsResponse', {
        'Integer': int,
        'Integer': int,
        'ImportFindingsErrorList': Optional[List[SecurityHubImportFindingsError]],
    }
)


SecurityHubStringFilter = TypedDict(
    'SecurityHubStringFilter', {
        'NonEmptyString': Optional[str],
        'StringFilterComparison': Optional[str],
    }
)


SecurityHubDateRange = TypedDict(
    'SecurityHubDateRange', {
        'Integer': Optional[int],
        'DateRangeUnit': Optional[str],
    }
)


SecurityHubDateFilter = TypedDict(
    'SecurityHubDateFilter', {
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'DateRange': Optional[SecurityHubDateRange],
    }
)


SecurityHubNumberFilter = TypedDict(
    'SecurityHubNumberFilter', {
        'Double': Optional[float],
        'Double': Optional[float],
        'Double': Optional[float],
    }
)


SecurityHubMapFilter = TypedDict(
    'SecurityHubMapFilter', {
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'MapFilterComparison': Optional[str],
    }
)


SecurityHubIpFilter = TypedDict(
    'SecurityHubIpFilter', {
        'NonEmptyString': Optional[str],
    }
)


SecurityHubKeywordFilter = TypedDict(
    'SecurityHubKeywordFilter', {
        'NonEmptyString': Optional[str],
    }
)


SecurityHubAwsSecurityFindingFilters = TypedDict(
    'SecurityHubAwsSecurityFindingFilters', {
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'DateFilterList': Optional[List[SecurityHubDateFilter]],
        'DateFilterList': Optional[List[SecurityHubDateFilter]],
        'DateFilterList': Optional[List[SecurityHubDateFilter]],
        'DateFilterList': Optional[List[SecurityHubDateFilter]],
        'NumberFilterList': Optional[List[SecurityHubNumberFilter]],
        'NumberFilterList': Optional[List[SecurityHubNumberFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'NumberFilterList': Optional[List[SecurityHubNumberFilter]],
        'NumberFilterList': Optional[List[SecurityHubNumberFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'MapFilterList': Optional[List[SecurityHubMapFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'MapFilterList': Optional[List[SecurityHubMapFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'IpFilterList': Optional[List[SecurityHubIpFilter]],
        'IpFilterList': Optional[List[SecurityHubIpFilter]],
        'NumberFilterList': Optional[List[SecurityHubNumberFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'IpFilterList': Optional[List[SecurityHubIpFilter]],
        'IpFilterList': Optional[List[SecurityHubIpFilter]],
        'NumberFilterList': Optional[List[SecurityHubNumberFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'NumberFilterList': Optional[List[SecurityHubNumberFilter]],
        'NumberFilterList': Optional[List[SecurityHubNumberFilter]],
        'DateFilterList': Optional[List[SecurityHubDateFilter]],
        'DateFilterList': Optional[List[SecurityHubDateFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'DateFilterList': Optional[List[SecurityHubDateFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'MapFilterList': Optional[List[SecurityHubMapFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'IpFilterList': Optional[List[SecurityHubIpFilter]],
        'IpFilterList': Optional[List[SecurityHubIpFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'DateFilterList': Optional[List[SecurityHubDateFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'DateFilterList': Optional[List[SecurityHubDateFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'DateFilterList': Optional[List[SecurityHubDateFilter]],
        'MapFilterList': Optional[List[SecurityHubMapFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'DateFilterList': Optional[List[SecurityHubDateFilter]],
        'StringFilterList': Optional[List[SecurityHubStringFilter]],
        'KeywordFilterList': Optional[List[SecurityHubKeywordFilter]],
    }
)


SecurityHubCreateInsightResponse = TypedDict(
    'SecurityHubCreateInsightResponse', {
        'NonEmptyString': str,
    }
)


SecurityHubAccountDetails = TypedDict(
    'SecurityHubAccountDetails', {
        'AccountId': Optional[str],
        'NonEmptyString': Optional[str],
    }
)


SecurityHubResult = TypedDict(
    'SecurityHubResult', {
        'AccountId': Optional[str],
        'NonEmptyString': Optional[str],
    }
)


SecurityHubCreateMembersResponse = TypedDict(
    'SecurityHubCreateMembersResponse', {
        'ResultList': Optional[List[SecurityHubResult]],
    }
)


SecurityHubDeclineInvitationsResponse = TypedDict(
    'SecurityHubDeclineInvitationsResponse', {
        'ResultList': Optional[List[SecurityHubResult]],
    }
)


SecurityHubDeleteInsightResponse = TypedDict(
    'SecurityHubDeleteInsightResponse', {
        'NonEmptyString': str,
    }
)


SecurityHubDeleteInvitationsResponse = TypedDict(
    'SecurityHubDeleteInvitationsResponse', {
        'ResultList': Optional[List[SecurityHubResult]],
    }
)


SecurityHubDeleteMembersResponse = TypedDict(
    'SecurityHubDeleteMembersResponse', {
        'ResultList': Optional[List[SecurityHubResult]],
    }
)


SecurityHubDisableImportFindingsForProductResponse = TypedDict(
    'SecurityHubDisableImportFindingsForProductResponse', {
    }
)


SecurityHubDisableSecurityHubResponse = TypedDict(
    'SecurityHubDisableSecurityHubResponse', {
    }
)


SecurityHubDisassociateFromMasterAccountResponse = TypedDict(
    'SecurityHubDisassociateFromMasterAccountResponse', {
    }
)


SecurityHubDisassociateMembersResponse = TypedDict(
    'SecurityHubDisassociateMembersResponse', {
    }
)


SecurityHubEnableImportFindingsForProductResponse = TypedDict(
    'SecurityHubEnableImportFindingsForProductResponse', {
        'NonEmptyString': Optional[str],
    }
)


SecurityHubEnableSecurityHubResponse = TypedDict(
    'SecurityHubEnableSecurityHubResponse', {
    }
)


SecurityHubGetEnabledStandardsResponse = TypedDict(
    'SecurityHubGetEnabledStandardsResponse', {
        'StandardsSubscriptions': Optional[List[SecurityHubStandardsSubscription]],
        'NextToken': Optional[str],
    }
)


SecurityHubSortCriterion = TypedDict(
    'SecurityHubSortCriterion', {
        'NonEmptyString': Optional[str],
        'SortOrder': Optional[str],
    }
)


SecurityHubGetFindingsResponse = TypedDict(
    'SecurityHubGetFindingsResponse', {
        'AwsSecurityFindingList': List[SecurityHubAwsSecurityFinding],
        'NextToken': Optional[str],
    }
)


SecurityHubInsightResultValue = TypedDict(
    'SecurityHubInsightResultValue', {
        'NonEmptyString': str,
        'Integer': int,
    }
)


SecurityHubInsightResults = TypedDict(
    'SecurityHubInsightResults', {
        'NonEmptyString': str,
        'NonEmptyString': str,
        'InsightResultValueList': List[SecurityHubInsightResultValue],
    }
)


SecurityHubGetInsightResultsResponse = TypedDict(
    'SecurityHubGetInsightResultsResponse', {
        'InsightResults': SecurityHubInsightResults,
    }
)


SecurityHubInsight = TypedDict(
    'SecurityHubInsight', {
        'NonEmptyString': str,
        'NonEmptyString': str,
        'AwsSecurityFindingFilters': SecurityHubAwsSecurityFindingFilters,
        'NonEmptyString': str,
    }
)


SecurityHubGetInsightsResponse = TypedDict(
    'SecurityHubGetInsightsResponse', {
        'InsightList': List[SecurityHubInsight],
        'NextToken': Optional[str],
    }
)


SecurityHubGetInvitationsCountResponse = TypedDict(
    'SecurityHubGetInvitationsCountResponse', {
        'Integer': Optional[int],
    }
)


SecurityHubInvitation = TypedDict(
    'SecurityHubInvitation', {
        'AccountId': Optional[str],
        'NonEmptyString': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'NonEmptyString': Optional[str],
    }
)


SecurityHubGetMasterAccountResponse = TypedDict(
    'SecurityHubGetMasterAccountResponse', {
        'Invitation': Optional[SecurityHubInvitation],
    }
)


SecurityHubMember = TypedDict(
    'SecurityHubMember', {
        'AccountId': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'NonEmptyString': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


SecurityHubGetMembersResponse = TypedDict(
    'SecurityHubGetMembersResponse', {
        'MemberList': Optional[List[SecurityHubMember]],
        'ResultList': Optional[List[SecurityHubResult]],
    }
)


SecurityHubInviteMembersResponse = TypedDict(
    'SecurityHubInviteMembersResponse', {
        'ResultList': Optional[List[SecurityHubResult]],
    }
)


SecurityHubListEnabledProductsForImportResponse = TypedDict(
    'SecurityHubListEnabledProductsForImportResponse', {
        'ProductSubscriptionArnList': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


SecurityHubListInvitationsResponse = TypedDict(
    'SecurityHubListInvitationsResponse', {
        'InvitationList': Optional[List[SecurityHubInvitation]],
        'NonEmptyString': Optional[str],
    }
)


SecurityHubListMembersResponse = TypedDict(
    'SecurityHubListMembersResponse', {
        'MemberList': Optional[List[SecurityHubMember]],
        'NonEmptyString': Optional[str],
    }
)


SecurityHubNoteUpdate = TypedDict(
    'SecurityHubNoteUpdate', {
        'NonEmptyString': str,
        'NonEmptyString': str,
    }
)


SecurityHubUpdateFindingsResponse = TypedDict(
    'SecurityHubUpdateFindingsResponse', {
    }
)


SecurityHubUpdateInsightResponse = TypedDict(
    'SecurityHubUpdateInsightResponse', {
    }
)


class ServerlessApplicationRepository(BaseClient):
    def create_application(self, *,
        Author: str,
        Description: str,
        Name: str,
        HomePageUrl: str = ...,
        Labels: List[str] = ...,
        LicenseBody: str = ...,
        LicenseUrl: str = ...,
        ReadmeBody: str = ...,
        ReadmeUrl: str = ...,
        SemanticVersion: str = ...,
        SourceCodeArchiveUrl: str = ...,
        SourceCodeUrl: str = ...,
        SpdxLicenseId: str = ...,
        TemplateBody: str = ...,
        TemplateUrl: str = ...
    ) -> ServerlessApplicationRepositoryCreateApplicationResponse: ...

    def create_application_version(self, *,
        ApplicationId: str,
        SemanticVersion: str,
        SourceCodeArchiveUrl: str = ...,
        SourceCodeUrl: str = ...,
        TemplateBody: str = ...,
        TemplateUrl: str = ...
    ) -> ServerlessApplicationRepositoryCreateApplicationVersionResponse: ...

    def create_cloud_formation_change_set(self, *,
        ApplicationId: str,
        StackName: str,
        Capabilities: List[str] = ...,
        ChangeSetName: str = ...,
        ClientToken: str = ...,
        Description: str = ...,
        NotificationArns: List[str] = ...,
        ParameterOverrides: List[ServerlessApplicationRepositoryParameterValue] = ...,
        ResourceTypes: List[str] = ...,
        RollbackConfiguration: ServerlessApplicationRepositoryRollbackConfiguration = ...,
        SemanticVersion: str = ...,
        Tags: List[ServerlessApplicationRepositoryTag] = ...,
        TemplateId: str = ...
    ) -> ServerlessApplicationRepositoryCreateCloudFormationChangeSetResponse: ...

    def create_cloud_formation_template(self, *,
        ApplicationId: str,
        SemanticVersion: str = ...
    ) -> ServerlessApplicationRepositoryCreateCloudFormationTemplateResponse: ...

    def delete_application(self, *,
        ApplicationId: str
    ): ...

    def get_application(self, *,
        ApplicationId: str,
        SemanticVersion: str = ...
    ) -> ServerlessApplicationRepositoryGetApplicationResponse: ...

    def get_application_policy(self, *,
        ApplicationId: str
    ) -> ServerlessApplicationRepositoryGetApplicationPolicyResponse: ...

    def get_cloud_formation_template(self, *,
        ApplicationId: str,
        TemplateId: str
    ) -> ServerlessApplicationRepositoryGetCloudFormationTemplateResponse: ...

    def list_application_dependencies(self, *,
        ApplicationId: str,
        MaxItems: int = ...,
        NextToken: str = ...,
        SemanticVersion: str = ...
    ) -> ServerlessApplicationRepositoryListApplicationDependenciesResponse: ...

    def list_application_versions(self, *,
        ApplicationId: str,
        MaxItems: int = ...,
        NextToken: str = ...
    ) -> ServerlessApplicationRepositoryListApplicationVersionsResponse: ...

    def list_applications(self, *,
        MaxItems: int = ...,
        NextToken: str = ...
    ) -> ServerlessApplicationRepositoryListApplicationsResponse: ...

    def put_application_policy(self, *,
        ApplicationId: str,
        Statements: List[ServerlessApplicationRepositoryApplicationPolicyStatement]
    ) -> ServerlessApplicationRepositoryPutApplicationPolicyResponse: ...

    def update_application(self, *,
        ApplicationId: str,
        Author: str = ...,
        Description: str = ...,
        HomePageUrl: str = ...,
        Labels: List[str] = ...,
        ReadmeBody: str = ...,
        ReadmeUrl: str = ...
    ) -> ServerlessApplicationRepositoryUpdateApplicationResponse: ...


ServerlessApplicationRepositoryParameterDefinition = TypedDict(
    'ServerlessApplicationRepositoryParameterDefinition', {
        '__string': str,
        '__listOf__string': List[str],
        '__string': Optional[str],
        '__listOf__string': Optional[List[str]],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__integer': Optional[int],
        '__integer': Optional[int],
        '__integer': Optional[int],
        '__integer': Optional[int],
        '__boolean': Optional[bool],
        '__string': Optional[str],
    }
)


ServerlessApplicationRepositoryVersion = TypedDict(
    'ServerlessApplicationRepositoryVersion', {
        '__string': str,
        '__string': str,
        '__listOfParameterDefinition': List[ServerlessApplicationRepositoryParameterDefinition],
        '__listOfCapability': List[str],
        '__boolean': bool,
        '__string': str,
        '__string': str,
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


ServerlessApplicationRepositoryCreateApplicationResponse = TypedDict(
    'ServerlessApplicationRepositoryCreateApplicationResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__listOf__string': Optional[List[str]],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'Version': Optional[ServerlessApplicationRepositoryVersion],
    }
)


ServerlessApplicationRepositoryCreateApplicationVersionResponse = TypedDict(
    'ServerlessApplicationRepositoryCreateApplicationVersionResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__listOfParameterDefinition': Optional[List[ServerlessApplicationRepositoryParameterDefinition]],
        '__listOfCapability': Optional[List[str]],
        '__boolean': Optional[bool],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


ServerlessApplicationRepositoryParameterValue = TypedDict(
    'ServerlessApplicationRepositoryParameterValue', {
        '__string': str,
        '__string': str,
    }
)


ServerlessApplicationRepositoryRollbackTrigger = TypedDict(
    'ServerlessApplicationRepositoryRollbackTrigger', {
        '__string': str,
        '__string': str,
    }
)


ServerlessApplicationRepositoryRollbackConfiguration = TypedDict(
    'ServerlessApplicationRepositoryRollbackConfiguration', {
        '__integer': Optional[int],
        '__listOfRollbackTrigger': Optional[List[ServerlessApplicationRepositoryRollbackTrigger]],
    }
)


ServerlessApplicationRepositoryTag = TypedDict(
    'ServerlessApplicationRepositoryTag', {
        '__string': str,
        '__string': str,
    }
)


ServerlessApplicationRepositoryCreateCloudFormationChangeSetResponse = TypedDict(
    'ServerlessApplicationRepositoryCreateCloudFormationChangeSetResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


ServerlessApplicationRepositoryCreateCloudFormationTemplateResponse = TypedDict(
    'ServerlessApplicationRepositoryCreateCloudFormationTemplateResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'Status': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


ServerlessApplicationRepositoryGetApplicationResponse = TypedDict(
    'ServerlessApplicationRepositoryGetApplicationResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__listOf__string': Optional[List[str]],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'Version': Optional[ServerlessApplicationRepositoryVersion],
    }
)


ServerlessApplicationRepositoryApplicationPolicyStatement = TypedDict(
    'ServerlessApplicationRepositoryApplicationPolicyStatement', {
        '__listOf__string': List[str],
        '__listOf__string': List[str],
        '__string': Optional[str],
    }
)


ServerlessApplicationRepositoryGetApplicationPolicyResponse = TypedDict(
    'ServerlessApplicationRepositoryGetApplicationPolicyResponse', {
        '__listOfApplicationPolicyStatement': Optional[List[ServerlessApplicationRepositoryApplicationPolicyStatement]],
    }
)


ServerlessApplicationRepositoryGetCloudFormationTemplateResponse = TypedDict(
    'ServerlessApplicationRepositoryGetCloudFormationTemplateResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'Status': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
    }
)


ServerlessApplicationRepositoryApplicationDependencySummary = TypedDict(
    'ServerlessApplicationRepositoryApplicationDependencySummary', {
        '__string': str,
        '__string': str,
    }
)


ServerlessApplicationRepositoryListApplicationDependenciesResponse = TypedDict(
    'ServerlessApplicationRepositoryListApplicationDependenciesResponse', {
        '__listOfApplicationDependencySummary': Optional[List[ServerlessApplicationRepositoryApplicationDependencySummary]],
        '__string': Optional[str],
    }
)


ServerlessApplicationRepositoryVersionSummary = TypedDict(
    'ServerlessApplicationRepositoryVersionSummary', {
        '__string': str,
        '__string': str,
        '__string': str,
        '__string': Optional[str],
    }
)


ServerlessApplicationRepositoryListApplicationVersionsResponse = TypedDict(
    'ServerlessApplicationRepositoryListApplicationVersionsResponse', {
        '__string': Optional[str],
        '__listOfVersionSummary': Optional[List[ServerlessApplicationRepositoryVersionSummary]],
    }
)


ServerlessApplicationRepositoryApplicationSummary = TypedDict(
    'ServerlessApplicationRepositoryApplicationSummary', {
        '__string': str,
        '__string': str,
        '__string': str,
        '__string': str,
        '__string': Optional[str],
        '__string': Optional[str],
        '__listOf__string': Optional[List[str]],
        '__string': Optional[str],
    }
)


ServerlessApplicationRepositoryListApplicationsResponse = TypedDict(
    'ServerlessApplicationRepositoryListApplicationsResponse', {
        '__listOfApplicationSummary': Optional[List[ServerlessApplicationRepositoryApplicationSummary]],
        '__string': Optional[str],
    }
)


ServerlessApplicationRepositoryPutApplicationPolicyResponse = TypedDict(
    'ServerlessApplicationRepositoryPutApplicationPolicyResponse', {
        '__listOfApplicationPolicyStatement': Optional[List[ServerlessApplicationRepositoryApplicationPolicyStatement]],
    }
)


ServerlessApplicationRepositoryUpdateApplicationResponse = TypedDict(
    'ServerlessApplicationRepositoryUpdateApplicationResponse', {
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__listOf__string': Optional[List[str]],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        '__string': Optional[str],
        'Version': Optional[ServerlessApplicationRepositoryVersion],
    }
)


class ServiceCatalog(BaseClient):
    def accept_portfolio_share(self, *,
        PortfolioId: str,
        AcceptLanguage: str = ...,
        PortfolioShareType: str = ...
    ) -> ServiceCatalogAcceptPortfolioShareOutput: ...

    def associate_budget_with_resource(self, *,
        BudgetName: str,
        ResourceId: str
    ) -> ServiceCatalogAssociateBudgetWithResourceOutput: ...

    def associate_principal_with_portfolio(self, *,
        PortfolioId: str,
        PrincipalARN: str,
        PrincipalType: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogAssociatePrincipalWithPortfolioOutput: ...

    def associate_product_with_portfolio(self, *,
        ProductId: str,
        PortfolioId: str,
        AcceptLanguage: str = ...,
        SourcePortfolioId: str = ...
    ) -> ServiceCatalogAssociateProductWithPortfolioOutput: ...

    def associate_service_action_with_provisioning_artifact(self, *,
        ProductId: str,
        ProvisioningArtifactId: str,
        ServiceActionId: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogAssociateServiceActionWithProvisioningArtifactOutput: ...

    def associate_tag_option_with_resource(self, *,
        ResourceId: str,
        TagOptionId: str
    ) -> ServiceCatalogAssociateTagOptionWithResourceOutput: ...

    def batch_associate_service_action_with_provisioning_artifact(self, *,
        ServiceActionAssociations: List[ServiceCatalogServiceActionAssociation],
        AcceptLanguage: str = ...
    ) -> ServiceCatalogBatchAssociateServiceActionWithProvisioningArtifactOutput: ...

    def batch_disassociate_service_action_from_provisioning_artifact(self, *,
        ServiceActionAssociations: List[ServiceCatalogServiceActionAssociation],
        AcceptLanguage: str = ...
    ) -> ServiceCatalogBatchDisassociateServiceActionFromProvisioningArtifactOutput: ...

    def copy_product(self, *,
        SourceProductArn: str,
        IdempotencyToken: str,
        AcceptLanguage: str = ...,
        TargetProductId: str = ...,
        TargetProductName: str = ...,
        SourceProvisioningArtifactIdentifiers: List[Dict[str, str]] = ...,
        CopyOptions: List[str] = ...
    ) -> ServiceCatalogCopyProductOutput: ...

    def create_constraint(self, *,
        PortfolioId: str,
        ProductId: str,
        Parameters: str,
        Type: str,
        IdempotencyToken: str,
        AcceptLanguage: str = ...,
        Description: str = ...
    ) -> ServiceCatalogCreateConstraintOutput: ...

    def create_portfolio(self, *,
        DisplayName: str,
        ProviderName: str,
        IdempotencyToken: str,
        AcceptLanguage: str = ...,
        Description: str = ...,
        Tags: List[ServiceCatalogTag] = ...
    ) -> ServiceCatalogCreatePortfolioOutput: ...

    def create_portfolio_share(self, *,
        PortfolioId: str,
        AcceptLanguage: str = ...,
        AccountId: str = ...,
        OrganizationNode: ServiceCatalogOrganizationNode = ...
    ) -> ServiceCatalogCreatePortfolioShareOutput: ...

    def create_product(self, *,
        Name: str,
        Owner: str,
        ProductType: str,
        ProvisioningArtifactParameters: ServiceCatalogProvisioningArtifactProperties,
        IdempotencyToken: str,
        AcceptLanguage: str = ...,
        Description: str = ...,
        Distributor: str = ...,
        SupportDescription: str = ...,
        SupportEmail: str = ...,
        SupportUrl: str = ...,
        Tags: List[ServiceCatalogTag] = ...
    ) -> ServiceCatalogCreateProductOutput: ...

    def create_provisioned_product_plan(self, *,
        PlanName: str,
        PlanType: str,
        ProductId: str,
        ProvisionedProductName: str,
        ProvisioningArtifactId: str,
        IdempotencyToken: str,
        AcceptLanguage: str = ...,
        NotificationArns: List[str] = ...,
        PathId: str = ...,
        ProvisioningParameters: List[ServiceCatalogUpdateProvisioningParameter] = ...,
        Tags: List[ServiceCatalogTag] = ...
    ) -> ServiceCatalogCreateProvisionedProductPlanOutput: ...

    def create_provisioning_artifact(self, *,
        ProductId: str,
        Parameters: ServiceCatalogProvisioningArtifactProperties,
        IdempotencyToken: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogCreateProvisioningArtifactOutput: ...

    def create_service_action(self, *,
        Name: str,
        DefinitionType: str,
        Definition: Dict[str, str],
        IdempotencyToken: str,
        Description: str = ...,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogCreateServiceActionOutput: ...

    def create_tag_option(self, *,
        Key: str,
        Value: str
    ) -> ServiceCatalogCreateTagOptionOutput: ...

    def delete_constraint(self, *,
        Id: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDeleteConstraintOutput: ...

    def delete_portfolio(self, *,
        Id: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDeletePortfolioOutput: ...

    def delete_portfolio_share(self, *,
        PortfolioId: str,
        AcceptLanguage: str = ...,
        AccountId: str = ...,
        OrganizationNode: ServiceCatalogOrganizationNode = ...
    ) -> ServiceCatalogDeletePortfolioShareOutput: ...

    def delete_product(self, *,
        Id: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDeleteProductOutput: ...

    def delete_provisioned_product_plan(self, *,
        PlanId: str,
        AcceptLanguage: str = ...,
        IgnoreErrors: bool = ...
    ) -> ServiceCatalogDeleteProvisionedProductPlanOutput: ...

    def delete_provisioning_artifact(self, *,
        ProductId: str,
        ProvisioningArtifactId: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDeleteProvisioningArtifactOutput: ...

    def delete_service_action(self, *,
        Id: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDeleteServiceActionOutput: ...

    def delete_tag_option(self, *,
        Id: str
    ) -> ServiceCatalogDeleteTagOptionOutput: ...

    def describe_constraint(self, *,
        Id: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDescribeConstraintOutput: ...

    def describe_copy_product_status(self, *,
        CopyProductToken: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDescribeCopyProductStatusOutput: ...

    def describe_portfolio(self, *,
        Id: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDescribePortfolioOutput: ...

    def describe_portfolio_share_status(self, *,
        PortfolioShareToken: str
    ) -> ServiceCatalogDescribePortfolioShareStatusOutput: ...

    def describe_product(self, *,
        Id: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDescribeProductOutput: ...

    def describe_product_as_admin(self, *,
        Id: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDescribeProductAsAdminOutput: ...

    def describe_product_view(self, *,
        Id: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDescribeProductViewOutput: ...

    def describe_provisioned_product(self, *,
        Id: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDescribeProvisionedProductOutput: ...

    def describe_provisioned_product_plan(self, *,
        PlanId: str,
        AcceptLanguage: str = ...,
        PageSize: int = ...,
        PageToken: str = ...
    ) -> ServiceCatalogDescribeProvisionedProductPlanOutput: ...

    def describe_provisioning_artifact(self, *,
        ProvisioningArtifactId: str,
        ProductId: str,
        AcceptLanguage: str = ...,
        Verbose: bool = ...
    ) -> ServiceCatalogDescribeProvisioningArtifactOutput: ...

    def describe_provisioning_parameters(self, *,
        ProductId: str,
        ProvisioningArtifactId: str,
        AcceptLanguage: str = ...,
        PathId: str = ...
    ) -> ServiceCatalogDescribeProvisioningParametersOutput: ...

    def describe_record(self, *,
        Id: str,
        AcceptLanguage: str = ...,
        PageToken: str = ...,
        PageSize: int = ...
    ) -> ServiceCatalogDescribeRecordOutput: ...

    def describe_service_action(self, *,
        Id: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDescribeServiceActionOutput: ...

    def describe_tag_option(self, *,
        Id: str
    ) -> ServiceCatalogDescribeTagOptionOutput: ...

    def disable_aws_organizations_access(self) -> ServiceCatalogDisableAWSOrganizationsAccessOutput: ...

    def disassociate_budget_from_resource(self, *,
        BudgetName: str,
        ResourceId: str
    ) -> ServiceCatalogDisassociateBudgetFromResourceOutput: ...

    def disassociate_principal_from_portfolio(self, *,
        PortfolioId: str,
        PrincipalARN: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDisassociatePrincipalFromPortfolioOutput: ...

    def disassociate_product_from_portfolio(self, *,
        ProductId: str,
        PortfolioId: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDisassociateProductFromPortfolioOutput: ...

    def disassociate_service_action_from_provisioning_artifact(self, *,
        ProductId: str,
        ProvisioningArtifactId: str,
        ServiceActionId: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDisassociateServiceActionFromProvisioningArtifactOutput: ...

    def disassociate_tag_option_from_resource(self, *,
        ResourceId: str,
        TagOptionId: str
    ) -> ServiceCatalogDisassociateTagOptionFromResourceOutput: ...

    def enable_aws_organizations_access(self) -> ServiceCatalogEnableAWSOrganizationsAccessOutput: ...

    def execute_provisioned_product_plan(self, *,
        PlanId: str,
        IdempotencyToken: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogExecuteProvisionedProductPlanOutput: ...

    def execute_provisioned_product_service_action(self, *,
        ProvisionedProductId: str,
        ServiceActionId: str,
        ExecuteToken: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogExecuteProvisionedProductServiceActionOutput: ...

    def get_aws_organizations_access_status(self) -> ServiceCatalogGetAWSOrganizationsAccessStatusOutput: ...

    def list_accepted_portfolio_shares(self, *,
        AcceptLanguage: str = ...,
        PageToken: str = ...,
        PageSize: int = ...,
        PortfolioShareType: str = ...
    ) -> ServiceCatalogListAcceptedPortfolioSharesOutput: ...

    def list_budgets_for_resource(self, *,
        ResourceId: str,
        AcceptLanguage: str = ...,
        PageSize: int = ...,
        PageToken: str = ...
    ) -> ServiceCatalogListBudgetsForResourceOutput: ...

    def list_constraints_for_portfolio(self, *,
        PortfolioId: str,
        AcceptLanguage: str = ...,
        ProductId: str = ...,
        PageSize: int = ...,
        PageToken: str = ...
    ) -> ServiceCatalogListConstraintsForPortfolioOutput: ...

    def list_launch_paths(self, *,
        ProductId: str,
        AcceptLanguage: str = ...,
        PageSize: int = ...,
        PageToken: str = ...
    ) -> ServiceCatalogListLaunchPathsOutput: ...

    def list_organization_portfolio_access(self, *,
        PortfolioId: str,
        OrganizationNodeType: str,
        AcceptLanguage: str = ...,
        PageToken: str = ...,
        PageSize: int = ...
    ) -> ServiceCatalogListOrganizationPortfolioAccessOutput: ...

    def list_portfolio_access(self, *,
        PortfolioId: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogListPortfolioAccessOutput: ...

    def list_portfolios(self, *,
        AcceptLanguage: str = ...,
        PageToken: str = ...,
        PageSize: int = ...
    ) -> ServiceCatalogListPortfoliosOutput: ...

    def list_portfolios_for_product(self, *,
        ProductId: str,
        AcceptLanguage: str = ...,
        PageToken: str = ...,
        PageSize: int = ...
    ) -> ServiceCatalogListPortfoliosForProductOutput: ...

    def list_principals_for_portfolio(self, *,
        PortfolioId: str,
        AcceptLanguage: str = ...,
        PageSize: int = ...,
        PageToken: str = ...
    ) -> ServiceCatalogListPrincipalsForPortfolioOutput: ...

    def list_provisioned_product_plans(self, *,
        AcceptLanguage: str = ...,
        ProvisionProductId: str = ...,
        PageSize: int = ...,
        PageToken: str = ...,
        AccessLevelFilter: ServiceCatalogAccessLevelFilter = ...
    ) -> ServiceCatalogListProvisionedProductPlansOutput: ...

    def list_provisioning_artifacts(self, *,
        ProductId: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogListProvisioningArtifactsOutput: ...

    def list_provisioning_artifacts_for_service_action(self, *,
        ServiceActionId: str,
        PageSize: int = ...,
        PageToken: str = ...,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogListProvisioningArtifactsForServiceActionOutput: ...

    def list_record_history(self, *,
        AcceptLanguage: str = ...,
        AccessLevelFilter: ServiceCatalogAccessLevelFilter = ...,
        SearchFilter: ServiceCatalogListRecordHistorySearchFilter = ...,
        PageSize: int = ...,
        PageToken: str = ...
    ) -> ServiceCatalogListRecordHistoryOutput: ...

    def list_resources_for_tag_option(self, *,
        TagOptionId: str,
        ResourceType: str = ...,
        PageSize: int = ...,
        PageToken: str = ...
    ) -> ServiceCatalogListResourcesForTagOptionOutput: ...

    def list_service_actions(self, *,
        AcceptLanguage: str = ...,
        PageSize: int = ...,
        PageToken: str = ...
    ) -> ServiceCatalogListServiceActionsOutput: ...

    def list_service_actions_for_provisioning_artifact(self, *,
        ProductId: str,
        ProvisioningArtifactId: str,
        PageSize: int = ...,
        PageToken: str = ...,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogListServiceActionsForProvisioningArtifactOutput: ...

    def list_tag_options(self, *,
        Filters: ServiceCatalogListTagOptionsFilters = ...,
        PageSize: int = ...,
        PageToken: str = ...
    ) -> ServiceCatalogListTagOptionsOutput: ...

    def provision_product(self, *,
        ProductId: str,
        ProvisioningArtifactId: str,
        ProvisionedProductName: str,
        ProvisionToken: str,
        AcceptLanguage: str = ...,
        PathId: str = ...,
        ProvisioningParameters: List[ServiceCatalogProvisioningParameter] = ...,
        ProvisioningPreferences: ServiceCatalogProvisioningPreferences = ...,
        Tags: List[ServiceCatalogTag] = ...,
        NotificationArns: List[str] = ...
    ) -> ServiceCatalogProvisionProductOutput: ...

    def reject_portfolio_share(self, *,
        PortfolioId: str,
        AcceptLanguage: str = ...,
        PortfolioShareType: str = ...
    ) -> ServiceCatalogRejectPortfolioShareOutput: ...

    def scan_provisioned_products(self, *,
        AcceptLanguage: str = ...,
        AccessLevelFilter: ServiceCatalogAccessLevelFilter = ...,
        PageSize: int = ...,
        PageToken: str = ...
    ) -> ServiceCatalogScanProvisionedProductsOutput: ...

    def search_products(self, *,
        AcceptLanguage: str = ...,
        Filters: Dict[str, List[str]] = ...,
        PageSize: int = ...,
        SortBy: str = ...,
        SortOrder: str = ...,
        PageToken: str = ...
    ) -> ServiceCatalogSearchProductsOutput: ...

    def search_products_as_admin(self, *,
        AcceptLanguage: str = ...,
        PortfolioId: str = ...,
        Filters: Dict[str, List[str]] = ...,
        SortBy: str = ...,
        SortOrder: str = ...,
        PageToken: str = ...,
        PageSize: int = ...,
        ProductSource: str = ...
    ) -> ServiceCatalogSearchProductsAsAdminOutput: ...

    def search_provisioned_products(self, *,
        AcceptLanguage: str = ...,
        AccessLevelFilter: ServiceCatalogAccessLevelFilter = ...,
        Filters: Dict[str, List[str]] = ...,
        SortBy: str = ...,
        SortOrder: str = ...,
        PageSize: int = ...,
        PageToken: str = ...
    ) -> ServiceCatalogSearchProvisionedProductsOutput: ...

    def terminate_provisioned_product(self, *,
        TerminateToken: str,
        ProvisionedProductName: str = ...,
        ProvisionedProductId: str = ...,
        IgnoreErrors: bool = ...,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogTerminateProvisionedProductOutput: ...

    def update_constraint(self, *,
        Id: str,
        AcceptLanguage: str = ...,
        Description: str = ...,
        Parameters: str = ...
    ) -> ServiceCatalogUpdateConstraintOutput: ...

    def update_portfolio(self, *,
        Id: str,
        AcceptLanguage: str = ...,
        DisplayName: str = ...,
        Description: str = ...,
        ProviderName: str = ...,
        AddTags: List[ServiceCatalogTag] = ...,
        RemoveTags: List[str] = ...
    ) -> ServiceCatalogUpdatePortfolioOutput: ...

    def update_product(self, *,
        Id: str,
        AcceptLanguage: str = ...,
        Name: str = ...,
        Owner: str = ...,
        Description: str = ...,
        Distributor: str = ...,
        SupportDescription: str = ...,
        SupportEmail: str = ...,
        SupportUrl: str = ...,
        AddTags: List[ServiceCatalogTag] = ...,
        RemoveTags: List[str] = ...
    ) -> ServiceCatalogUpdateProductOutput: ...

    def update_provisioned_product(self, *,
        UpdateToken: str,
        AcceptLanguage: str = ...,
        ProvisionedProductName: str = ...,
        ProvisionedProductId: str = ...,
        ProductId: str = ...,
        ProvisioningArtifactId: str = ...,
        PathId: str = ...,
        ProvisioningParameters: List[ServiceCatalogUpdateProvisioningParameter] = ...,
        ProvisioningPreferences: ServiceCatalogUpdateProvisioningPreferences = ...,
        Tags: List[ServiceCatalogTag] = ...
    ) -> ServiceCatalogUpdateProvisionedProductOutput: ...

    def update_provisioning_artifact(self, *,
        ProductId: str,
        ProvisioningArtifactId: str,
        AcceptLanguage: str = ...,
        Name: str = ...,
        Description: str = ...,
        Active: bool = ...
    ) -> ServiceCatalogUpdateProvisioningArtifactOutput: ...

    def update_service_action(self, *,
        Id: str,
        Name: str = ...,
        Definition: Dict[str, str] = ...,
        Description: str = ...,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogUpdateServiceActionOutput: ...

    def update_tag_option(self, *,
        Id: str,
        Value: str = ...,
        Active: bool = ...
    ) -> ServiceCatalogUpdateTagOptionOutput: ...


ServiceCatalogAcceptPortfolioShareOutput = TypedDict(
    'ServiceCatalogAcceptPortfolioShareOutput', {
    }
)


ServiceCatalogAssociateBudgetWithResourceOutput = TypedDict(
    'ServiceCatalogAssociateBudgetWithResourceOutput', {
    }
)


ServiceCatalogAssociatePrincipalWithPortfolioOutput = TypedDict(
    'ServiceCatalogAssociatePrincipalWithPortfolioOutput', {
    }
)


ServiceCatalogAssociateProductWithPortfolioOutput = TypedDict(
    'ServiceCatalogAssociateProductWithPortfolioOutput', {
    }
)


ServiceCatalogAssociateServiceActionWithProvisioningArtifactOutput = TypedDict(
    'ServiceCatalogAssociateServiceActionWithProvisioningArtifactOutput', {
    }
)


ServiceCatalogAssociateTagOptionWithResourceOutput = TypedDict(
    'ServiceCatalogAssociateTagOptionWithResourceOutput', {
    }
)


ServiceCatalogServiceActionAssociation = TypedDict(
    'ServiceCatalogServiceActionAssociation', {
        'Id': str,
        'Id': str,
        'Id': str,
    }
)


ServiceCatalogFailedServiceActionAssociation = TypedDict(
    'ServiceCatalogFailedServiceActionAssociation', {
        'Id': Optional[str],
        'Id': Optional[str],
        'Id': Optional[str],
        'ServiceActionAssociationErrorCode': Optional[str],
        'ServiceActionAssociationErrorMessage': Optional[str],
    }
)


ServiceCatalogBatchAssociateServiceActionWithProvisioningArtifactOutput = TypedDict(
    'ServiceCatalogBatchAssociateServiceActionWithProvisioningArtifactOutput', {
        'FailedServiceActionAssociations': Optional[List[ServiceCatalogFailedServiceActionAssociation]],
    }
)


ServiceCatalogBatchDisassociateServiceActionFromProvisioningArtifactOutput = TypedDict(
    'ServiceCatalogBatchDisassociateServiceActionFromProvisioningArtifactOutput', {
        'FailedServiceActionAssociations': Optional[List[ServiceCatalogFailedServiceActionAssociation]],
    }
)


ServiceCatalogCopyProductOutput = TypedDict(
    'ServiceCatalogCopyProductOutput', {
        'Id': Optional[str],
    }
)


ServiceCatalogConstraintDetail = TypedDict(
    'ServiceCatalogConstraintDetail', {
        'Id': Optional[str],
        'ConstraintType': Optional[str],
        'ConstraintDescription': Optional[str],
        'AccountId': Optional[str],
    }
)


ServiceCatalogCreateConstraintOutput = TypedDict(
    'ServiceCatalogCreateConstraintOutput', {
        'ConstraintDetail': Optional[ServiceCatalogConstraintDetail],
        'ConstraintParameters': Optional[str],
        'Status': Optional[str],
    }
)


ServiceCatalogTag = TypedDict(
    'ServiceCatalogTag', {
        'TagKey': str,
        'TagValue': str,
    }
)


ServiceCatalogPortfolioDetail = TypedDict(
    'ServiceCatalogPortfolioDetail', {
        'Id': Optional[str],
        'ResourceARN': Optional[str],
        'PortfolioDisplayName': Optional[str],
        'PortfolioDescription': Optional[str],
        'CreationTime': Optional[datetime.datetime],
        'ProviderName': Optional[str],
    }
)


ServiceCatalogCreatePortfolioOutput = TypedDict(
    'ServiceCatalogCreatePortfolioOutput', {
        'PortfolioDetail': Optional[ServiceCatalogPortfolioDetail],
        'Tags': Optional[List[ServiceCatalogTag]],
    }
)


ServiceCatalogOrganizationNode = TypedDict(
    'ServiceCatalogOrganizationNode', {
        'OrganizationNodeType': Optional[str],
        'OrganizationNodeValue': Optional[str],
    }
)


ServiceCatalogCreatePortfolioShareOutput = TypedDict(
    'ServiceCatalogCreatePortfolioShareOutput', {
        'Id': Optional[str],
    }
)


ServiceCatalogProvisioningArtifactProperties = TypedDict(
    'ServiceCatalogProvisioningArtifactProperties', {
        'ProvisioningArtifactInfo': Dict[str, str],
        'ProvisioningArtifactName': Optional[str],
        'ProvisioningArtifactDescription': Optional[str],
        'ProvisioningArtifactType': Optional[str],
        'DisableTemplateValidation': Optional[bool],
    }
)


ServiceCatalogProductViewSummary = TypedDict(
    'ServiceCatalogProductViewSummary', {
        'Id': Optional[str],
        'Id': Optional[str],
        'ProductViewName': Optional[str],
        'ProductViewOwner': Optional[str],
        'ProductViewShortDescription': Optional[str],
        'ProductType': Optional[str],
        'ProductViewDistributor': Optional[str],
        'HasDefaultPath': Optional[bool],
        'SupportEmail': Optional[str],
        'SupportDescription': Optional[str],
        'SupportUrl': Optional[str],
    }
)


ServiceCatalogProductViewDetail = TypedDict(
    'ServiceCatalogProductViewDetail', {
        'ProductViewSummary': Optional[ServiceCatalogProductViewSummary],
        'Status': Optional[str],
        'ResourceARN': Optional[str],
        'CreatedTime': Optional[datetime.datetime],
    }
)


ServiceCatalogProvisioningArtifactDetail = TypedDict(
    'ServiceCatalogProvisioningArtifactDetail', {
        'Id': Optional[str],
        'ProvisioningArtifactName': Optional[str],
        'ProvisioningArtifactName': Optional[str],
        'ProvisioningArtifactType': Optional[str],
        'CreationTime': Optional[datetime.datetime],
        'ProvisioningArtifactActive': Optional[bool],
    }
)


ServiceCatalogCreateProductOutput = TypedDict(
    'ServiceCatalogCreateProductOutput', {
        'ProductViewDetail': Optional[ServiceCatalogProductViewDetail],
        'ProvisioningArtifactDetail': Optional[ServiceCatalogProvisioningArtifactDetail],
        'Tags': Optional[List[ServiceCatalogTag]],
    }
)


ServiceCatalogUpdateProvisioningParameter = TypedDict(
    'ServiceCatalogUpdateProvisioningParameter', {
        'ParameterKey': Optional[str],
        'ParameterValue': Optional[str],
        'UsePreviousValue': Optional[bool],
    }
)


ServiceCatalogCreateProvisionedProductPlanOutput = TypedDict(
    'ServiceCatalogCreateProvisionedProductPlanOutput', {
        'ProvisionedProductPlanName': Optional[str],
        'Id': Optional[str],
        'Id': Optional[str],
        'ProvisionedProductName': Optional[str],
        'Id': Optional[str],
    }
)


ServiceCatalogCreateProvisioningArtifactOutput = TypedDict(
    'ServiceCatalogCreateProvisioningArtifactOutput', {
        'ProvisioningArtifactDetail': Optional[ServiceCatalogProvisioningArtifactDetail],
        'ProvisioningArtifactInfo': Optional[Dict[str, str]],
        'Status': Optional[str],
    }
)


ServiceCatalogServiceActionSummary = TypedDict(
    'ServiceCatalogServiceActionSummary', {
        'Id': Optional[str],
        'ServiceActionName': Optional[str],
        'ServiceActionDescription': Optional[str],
        'ServiceActionDefinitionType': Optional[str],
    }
)


ServiceCatalogServiceActionDetail = TypedDict(
    'ServiceCatalogServiceActionDetail', {
        'ServiceActionSummary': Optional[ServiceCatalogServiceActionSummary],
        'ServiceActionDefinitionMap': Optional[Dict[str, str]],
    }
)


ServiceCatalogCreateServiceActionOutput = TypedDict(
    'ServiceCatalogCreateServiceActionOutput', {
        'ServiceActionDetail': Optional[ServiceCatalogServiceActionDetail],
    }
)


ServiceCatalogTagOptionDetail = TypedDict(
    'ServiceCatalogTagOptionDetail', {
        'TagOptionKey': Optional[str],
        'TagOptionValue': Optional[str],
        'TagOptionActive': Optional[bool],
        'TagOptionId': Optional[str],
    }
)


ServiceCatalogCreateTagOptionOutput = TypedDict(
    'ServiceCatalogCreateTagOptionOutput', {
        'TagOptionDetail': Optional[ServiceCatalogTagOptionDetail],
    }
)


ServiceCatalogDeleteConstraintOutput = TypedDict(
    'ServiceCatalogDeleteConstraintOutput', {
    }
)


ServiceCatalogDeletePortfolioOutput = TypedDict(
    'ServiceCatalogDeletePortfolioOutput', {
    }
)


ServiceCatalogDeletePortfolioShareOutput = TypedDict(
    'ServiceCatalogDeletePortfolioShareOutput', {
        'Id': Optional[str],
    }
)


ServiceCatalogDeleteProductOutput = TypedDict(
    'ServiceCatalogDeleteProductOutput', {
    }
)


ServiceCatalogDeleteProvisionedProductPlanOutput = TypedDict(
    'ServiceCatalogDeleteProvisionedProductPlanOutput', {
    }
)


ServiceCatalogDeleteProvisioningArtifactOutput = TypedDict(
    'ServiceCatalogDeleteProvisioningArtifactOutput', {
    }
)


ServiceCatalogDeleteServiceActionOutput = TypedDict(
    'ServiceCatalogDeleteServiceActionOutput', {
    }
)


ServiceCatalogDeleteTagOptionOutput = TypedDict(
    'ServiceCatalogDeleteTagOptionOutput', {
    }
)


ServiceCatalogDescribeConstraintOutput = TypedDict(
    'ServiceCatalogDescribeConstraintOutput', {
        'ConstraintDetail': Optional[ServiceCatalogConstraintDetail],
        'ConstraintParameters': Optional[str],
        'Status': Optional[str],
    }
)


ServiceCatalogDescribeCopyProductStatusOutput = TypedDict(
    'ServiceCatalogDescribeCopyProductStatusOutput', {
        'CopyProductStatus': Optional[str],
        'Id': Optional[str],
        'StatusDetail': Optional[str],
    }
)


ServiceCatalogBudgetDetail = TypedDict(
    'ServiceCatalogBudgetDetail', {
        'BudgetName': Optional[str],
    }
)


ServiceCatalogDescribePortfolioOutput = TypedDict(
    'ServiceCatalogDescribePortfolioOutput', {
        'PortfolioDetail': Optional[ServiceCatalogPortfolioDetail],
        'Tags': Optional[List[ServiceCatalogTag]],
        'TagOptionDetails': Optional[List[ServiceCatalogTagOptionDetail]],
        'Budgets': Optional[List[ServiceCatalogBudgetDetail]],
    }
)


ServiceCatalogShareError = TypedDict(
    'ServiceCatalogShareError', {
        'Namespaces': Optional[List[str]],
        'Message': Optional[str],
        'Error': Optional[str],
    }
)


ServiceCatalogShareDetails = TypedDict(
    'ServiceCatalogShareDetails', {
        'SuccessfulShares': Optional[List[str]],
        'ShareErrors': Optional[List[ServiceCatalogShareError]],
    }
)


ServiceCatalogDescribePortfolioShareStatusOutput = TypedDict(
    'ServiceCatalogDescribePortfolioShareStatusOutput', {
        'Id': Optional[str],
        'Id': Optional[str],
        'OrganizationNodeValue': Optional[str],
        'ShareStatus': Optional[str],
        'ShareDetails': Optional[ServiceCatalogShareDetails],
    }
)


ServiceCatalogProvisioningArtifact = TypedDict(
    'ServiceCatalogProvisioningArtifact', {
        'Id': Optional[str],
        'ProvisioningArtifactName': Optional[str],
        'ProvisioningArtifactDescription': Optional[str],
        'ProvisioningArtifactCreatedTime': Optional[datetime.datetime],
    }
)


ServiceCatalogDescribeProductOutput = TypedDict(
    'ServiceCatalogDescribeProductOutput', {
        'ProductViewSummary': Optional[ServiceCatalogProductViewSummary],
        'ProvisioningArtifacts': Optional[List[ServiceCatalogProvisioningArtifact]],
        'Budgets': Optional[List[ServiceCatalogBudgetDetail]],
    }
)


ServiceCatalogProvisioningArtifactSummary = TypedDict(
    'ServiceCatalogProvisioningArtifactSummary', {
        'Id': Optional[str],
        'ProvisioningArtifactName': Optional[str],
        'ProvisioningArtifactDescription': Optional[str],
        'ProvisioningArtifactCreatedTime': Optional[datetime.datetime],
        'ProvisioningArtifactInfo': Optional[Dict[str, str]],
    }
)


ServiceCatalogDescribeProductAsAdminOutput = TypedDict(
    'ServiceCatalogDescribeProductAsAdminOutput', {
        'ProductViewDetail': Optional[ServiceCatalogProductViewDetail],
        'ProvisioningArtifactSummaries': Optional[List[ServiceCatalogProvisioningArtifactSummary]],
        'Tags': Optional[List[ServiceCatalogTag]],
        'TagOptionDetails': Optional[List[ServiceCatalogTagOptionDetail]],
        'Budgets': Optional[List[ServiceCatalogBudgetDetail]],
    }
)


ServiceCatalogDescribeProductViewOutput = TypedDict(
    'ServiceCatalogDescribeProductViewOutput', {
        'ProductViewSummary': Optional[ServiceCatalogProductViewSummary],
        'ProvisioningArtifacts': Optional[List[ServiceCatalogProvisioningArtifact]],
    }
)


ServiceCatalogProvisionedProductDetail = TypedDict(
    'ServiceCatalogProvisionedProductDetail', {
        'ProvisionedProductNameOrArn': Optional[str],
        'ProvisionedProductNameOrArn': Optional[str],
        'ProvisionedProductType': Optional[str],
        'ProvisionedProductId': Optional[str],
        'ProvisionedProductStatus': Optional[str],
        'ProvisionedProductStatusMessage': Optional[str],
        'CreatedTime': Optional[datetime.datetime],
        'IdempotencyToken': Optional[str],
        'LastRequestId': Optional[str],
        'Id': Optional[str],
        'Id': Optional[str],
    }
)


ServiceCatalogCloudWatchDashboard = TypedDict(
    'ServiceCatalogCloudWatchDashboard', {
        'CloudWatchDashboardName': Optional[str],
    }
)


ServiceCatalogDescribeProvisionedProductOutput = TypedDict(
    'ServiceCatalogDescribeProvisionedProductOutput', {
        'ProvisionedProductDetail': Optional[ServiceCatalogProvisionedProductDetail],
        'CloudWatchDashboards': Optional[List[ServiceCatalogCloudWatchDashboard]],
    }
)


ServiceCatalogProvisionedProductPlanDetails = TypedDict(
    'ServiceCatalogProvisionedProductPlanDetails', {
        'CreatedTime': Optional[datetime.datetime],
        'Id': Optional[str],
        'Id': Optional[str],
        'ProvisionedProductPlanName': Optional[str],
        'Id': Optional[str],
        'Id': Optional[str],
        'ProvisionedProductName': Optional[str],
        'ProvisionedProductPlanType': Optional[str],
        'Id': Optional[str],
        'ProvisionedProductPlanStatus': Optional[str],
        'UpdatedTime': Optional[datetime.datetime],
        'NotificationArns': Optional[List[str]],
        'UpdateProvisioningParameters': Optional[List[ServiceCatalogUpdateProvisioningParameter]],
        'Tags': Optional[List[ServiceCatalogTag]],
        'StatusMessage': Optional[str],
    }
)


ServiceCatalogResourceTargetDefinition = TypedDict(
    'ServiceCatalogResourceTargetDefinition', {
        'ResourceAttribute': Optional[str],
        'PropertyName': Optional[str],
        'RequiresRecreation': Optional[str],
    }
)


ServiceCatalogResourceChangeDetail = TypedDict(
    'ServiceCatalogResourceChangeDetail', {
        'ResourceTargetDefinition': Optional[ServiceCatalogResourceTargetDefinition],
        'EvaluationType': Optional[str],
        'CausingEntity': Optional[str],
    }
)


ServiceCatalogResourceChange = TypedDict(
    'ServiceCatalogResourceChange', {
        'ChangeAction': Optional[str],
        'LogicalResourceId': Optional[str],
        'PhysicalResourceId': Optional[str],
        'PlanResourceType': Optional[str],
        'Replacement': Optional[str],
        'Scope': Optional[List[str]],
        'ResourceChangeDetails': Optional[List[ServiceCatalogResourceChangeDetail]],
    }
)


ServiceCatalogDescribeProvisionedProductPlanOutput = TypedDict(
    'ServiceCatalogDescribeProvisionedProductPlanOutput', {
        'ProvisionedProductPlanDetails': Optional[ServiceCatalogProvisionedProductPlanDetails],
        'ResourceChanges': Optional[List[ServiceCatalogResourceChange]],
        'PageToken': Optional[str],
    }
)


ServiceCatalogDescribeProvisioningArtifactOutput = TypedDict(
    'ServiceCatalogDescribeProvisioningArtifactOutput', {
        'ProvisioningArtifactDetail': Optional[ServiceCatalogProvisioningArtifactDetail],
        'ProvisioningArtifactInfo': Optional[Dict[str, str]],
        'Status': Optional[str],
    }
)


ServiceCatalogParameterConstraints = TypedDict(
    'ServiceCatalogParameterConstraints', {
        'AllowedValues': Optional[List[str]],
    }
)


ServiceCatalogProvisioningArtifactParameter = TypedDict(
    'ServiceCatalogProvisioningArtifactParameter', {
        'ParameterKey': Optional[str],
        'DefaultValue': Optional[str],
        'ParameterType': Optional[str],
        'NoEcho': Optional[bool],
        'Description': Optional[str],
        'ParameterConstraints': Optional[ServiceCatalogParameterConstraints],
    }
)


ServiceCatalogConstraintSummary = TypedDict(
    'ServiceCatalogConstraintSummary', {
        'ConstraintType': Optional[str],
        'ConstraintDescription': Optional[str],
    }
)


ServiceCatalogUsageInstruction = TypedDict(
    'ServiceCatalogUsageInstruction', {
        'InstructionType': Optional[str],
        'InstructionValue': Optional[str],
    }
)


ServiceCatalogTagOptionSummary = TypedDict(
    'ServiceCatalogTagOptionSummary', {
        'TagOptionKey': Optional[str],
        'TagOptionValues': Optional[List[str]],
    }
)


ServiceCatalogProvisioningArtifactPreferences = TypedDict(
    'ServiceCatalogProvisioningArtifactPreferences', {
        'StackSetAccounts': Optional[List[str]],
        'StackSetRegions': Optional[List[str]],
    }
)


ServiceCatalogDescribeProvisioningParametersOutput = TypedDict(
    'ServiceCatalogDescribeProvisioningParametersOutput', {
        'ProvisioningArtifactParameters': Optional[List[ServiceCatalogProvisioningArtifactParameter]],
        'ConstraintSummaries': Optional[List[ServiceCatalogConstraintSummary]],
        'UsageInstructions': Optional[List[ServiceCatalogUsageInstruction]],
        'TagOptionSummaries': Optional[List[ServiceCatalogTagOptionSummary]],
        'ProvisioningArtifactPreferences': Optional[ServiceCatalogProvisioningArtifactPreferences],
    }
)


ServiceCatalogRecordError = TypedDict(
    'ServiceCatalogRecordError', {
        'ErrorCode': Optional[str],
        'ErrorDescription': Optional[str],
    }
)


ServiceCatalogRecordTag = TypedDict(
    'ServiceCatalogRecordTag', {
        'RecordTagKey': Optional[str],
        'RecordTagValue': Optional[str],
    }
)


ServiceCatalogRecordDetail = TypedDict(
    'ServiceCatalogRecordDetail', {
        'Id': Optional[str],
        'ProvisionedProductName': Optional[str],
        'RecordStatus': Optional[str],
        'CreatedTime': Optional[datetime.datetime],
        'UpdatedTime': Optional[datetime.datetime],
        'ProvisionedProductType': Optional[str],
        'RecordType': Optional[str],
        'Id': Optional[str],
        'Id': Optional[str],
        'Id': Optional[str],
        'Id': Optional[str],
        'RecordErrors': Optional[List[ServiceCatalogRecordError]],
        'RecordTags': Optional[List[ServiceCatalogRecordTag]],
    }
)


ServiceCatalogRecordOutput = TypedDict(
    'ServiceCatalogRecordOutput', {
        'OutputKey': Optional[str],
        'OutputValue': Optional[str],
        'Description': Optional[str],
    }
)


ServiceCatalogDescribeRecordOutput = TypedDict(
    'ServiceCatalogDescribeRecordOutput', {
        'RecordDetail': Optional[ServiceCatalogRecordDetail],
        'RecordOutputs': Optional[List[ServiceCatalogRecordOutput]],
        'PageToken': Optional[str],
    }
)


ServiceCatalogDescribeServiceActionOutput = TypedDict(
    'ServiceCatalogDescribeServiceActionOutput', {
        'ServiceActionDetail': Optional[ServiceCatalogServiceActionDetail],
    }
)


ServiceCatalogDescribeTagOptionOutput = TypedDict(
    'ServiceCatalogDescribeTagOptionOutput', {
        'TagOptionDetail': Optional[ServiceCatalogTagOptionDetail],
    }
)


ServiceCatalogDisableAWSOrganizationsAccessOutput = TypedDict(
    'ServiceCatalogDisableAWSOrganizationsAccessOutput', {
    }
)


ServiceCatalogDisassociateBudgetFromResourceOutput = TypedDict(
    'ServiceCatalogDisassociateBudgetFromResourceOutput', {
    }
)


ServiceCatalogDisassociatePrincipalFromPortfolioOutput = TypedDict(
    'ServiceCatalogDisassociatePrincipalFromPortfolioOutput', {
    }
)


ServiceCatalogDisassociateProductFromPortfolioOutput = TypedDict(
    'ServiceCatalogDisassociateProductFromPortfolioOutput', {
    }
)


ServiceCatalogDisassociateServiceActionFromProvisioningArtifactOutput = TypedDict(
    'ServiceCatalogDisassociateServiceActionFromProvisioningArtifactOutput', {
    }
)


ServiceCatalogDisassociateTagOptionFromResourceOutput = TypedDict(
    'ServiceCatalogDisassociateTagOptionFromResourceOutput', {
    }
)


ServiceCatalogEnableAWSOrganizationsAccessOutput = TypedDict(
    'ServiceCatalogEnableAWSOrganizationsAccessOutput', {
    }
)


ServiceCatalogExecuteProvisionedProductPlanOutput = TypedDict(
    'ServiceCatalogExecuteProvisionedProductPlanOutput', {
        'RecordDetail': Optional[ServiceCatalogRecordDetail],
    }
)


ServiceCatalogExecuteProvisionedProductServiceActionOutput = TypedDict(
    'ServiceCatalogExecuteProvisionedProductServiceActionOutput', {
        'RecordDetail': Optional[ServiceCatalogRecordDetail],
    }
)


ServiceCatalogGetAWSOrganizationsAccessStatusOutput = TypedDict(
    'ServiceCatalogGetAWSOrganizationsAccessStatusOutput', {
        'AccessStatus': Optional[str],
    }
)


ServiceCatalogListAcceptedPortfolioSharesOutput = TypedDict(
    'ServiceCatalogListAcceptedPortfolioSharesOutput', {
        'PortfolioDetails': Optional[List[ServiceCatalogPortfolioDetail]],
        'PageToken': Optional[str],
    }
)


ServiceCatalogListBudgetsForResourceOutput = TypedDict(
    'ServiceCatalogListBudgetsForResourceOutput', {
        'Budgets': Optional[List[ServiceCatalogBudgetDetail]],
        'PageToken': Optional[str],
    }
)


ServiceCatalogListConstraintsForPortfolioOutput = TypedDict(
    'ServiceCatalogListConstraintsForPortfolioOutput', {
        'ConstraintDetails': Optional[List[ServiceCatalogConstraintDetail]],
        'PageToken': Optional[str],
    }
)


ServiceCatalogLaunchPathSummary = TypedDict(
    'ServiceCatalogLaunchPathSummary', {
        'Id': Optional[str],
        'ConstraintSummaries': Optional[List[ServiceCatalogConstraintSummary]],
        'Tags': Optional[List[ServiceCatalogTag]],
        'PortfolioName': Optional[str],
    }
)


ServiceCatalogListLaunchPathsOutput = TypedDict(
    'ServiceCatalogListLaunchPathsOutput', {
        'LaunchPathSummaries': Optional[List[ServiceCatalogLaunchPathSummary]],
        'PageToken': Optional[str],
    }
)


ServiceCatalogListOrganizationPortfolioAccessOutput = TypedDict(
    'ServiceCatalogListOrganizationPortfolioAccessOutput', {
        'OrganizationNodes': Optional[List[ServiceCatalogOrganizationNode]],
        'PageToken': Optional[str],
    }
)


ServiceCatalogListPortfolioAccessOutput = TypedDict(
    'ServiceCatalogListPortfolioAccessOutput', {
        'AccountIds': Optional[List[str]],
        'PageToken': Optional[str],
    }
)


ServiceCatalogListPortfoliosOutput = TypedDict(
    'ServiceCatalogListPortfoliosOutput', {
        'PortfolioDetails': Optional[List[ServiceCatalogPortfolioDetail]],
        'PageToken': Optional[str],
    }
)


ServiceCatalogListPortfoliosForProductOutput = TypedDict(
    'ServiceCatalogListPortfoliosForProductOutput', {
        'PortfolioDetails': Optional[List[ServiceCatalogPortfolioDetail]],
        'PageToken': Optional[str],
    }
)


ServiceCatalogPrincipal = TypedDict(
    'ServiceCatalogPrincipal', {
        'PrincipalARN': Optional[str],
        'PrincipalType': Optional[str],
    }
)


ServiceCatalogListPrincipalsForPortfolioOutput = TypedDict(
    'ServiceCatalogListPrincipalsForPortfolioOutput', {
        'Principals': Optional[List[ServiceCatalogPrincipal]],
        'PageToken': Optional[str],
    }
)


ServiceCatalogAccessLevelFilter = TypedDict(
    'ServiceCatalogAccessLevelFilter', {
        'AccessLevelFilterKey': Optional[str],
        'AccessLevelFilterValue': Optional[str],
    }
)


ServiceCatalogProvisionedProductPlanSummary = TypedDict(
    'ServiceCatalogProvisionedProductPlanSummary', {
        'ProvisionedProductPlanName': Optional[str],
        'Id': Optional[str],
        'Id': Optional[str],
        'ProvisionedProductName': Optional[str],
        'ProvisionedProductPlanType': Optional[str],
        'Id': Optional[str],
    }
)


ServiceCatalogListProvisionedProductPlansOutput = TypedDict(
    'ServiceCatalogListProvisionedProductPlansOutput', {
        'ProvisionedProductPlans': Optional[List[ServiceCatalogProvisionedProductPlanSummary]],
        'PageToken': Optional[str],
    }
)


ServiceCatalogListProvisioningArtifactsOutput = TypedDict(
    'ServiceCatalogListProvisioningArtifactsOutput', {
        'ProvisioningArtifactDetails': Optional[List[ServiceCatalogProvisioningArtifactDetail]],
        'PageToken': Optional[str],
    }
)


ServiceCatalogProvisioningArtifactView = TypedDict(
    'ServiceCatalogProvisioningArtifactView', {
        'ProductViewSummary': Optional[ServiceCatalogProductViewSummary],
        'ProvisioningArtifact': Optional[ServiceCatalogProvisioningArtifact],
    }
)


ServiceCatalogListProvisioningArtifactsForServiceActionOutput = TypedDict(
    'ServiceCatalogListProvisioningArtifactsForServiceActionOutput', {
        'ProvisioningArtifactViews': Optional[List[ServiceCatalogProvisioningArtifactView]],
        'PageToken': Optional[str],
    }
)


ServiceCatalogListRecordHistorySearchFilter = TypedDict(
    'ServiceCatalogListRecordHistorySearchFilter', {
        'SearchFilterKey': Optional[str],
        'SearchFilterValue': Optional[str],
    }
)


ServiceCatalogListRecordHistoryOutput = TypedDict(
    'ServiceCatalogListRecordHistoryOutput', {
        'RecordDetails': Optional[List[ServiceCatalogRecordDetail]],
        'PageToken': Optional[str],
    }
)


ServiceCatalogResourceDetail = TypedDict(
    'ServiceCatalogResourceDetail', {
        'ResourceDetailId': Optional[str],
        'ResourceDetailARN': Optional[str],
        'ResourceDetailName': Optional[str],
        'ResourceDetailDescription': Optional[str],
        'ResourceDetailCreatedTime': Optional[datetime.datetime],
    }
)


ServiceCatalogListResourcesForTagOptionOutput = TypedDict(
    'ServiceCatalogListResourcesForTagOptionOutput', {
        'ResourceDetails': Optional[List[ServiceCatalogResourceDetail]],
        'PageToken': Optional[str],
    }
)


ServiceCatalogListServiceActionsOutput = TypedDict(
    'ServiceCatalogListServiceActionsOutput', {
        'ServiceActionSummaries': Optional[List[ServiceCatalogServiceActionSummary]],
        'PageToken': Optional[str],
    }
)


ServiceCatalogListServiceActionsForProvisioningArtifactOutput = TypedDict(
    'ServiceCatalogListServiceActionsForProvisioningArtifactOutput', {
        'ServiceActionSummaries': Optional[List[ServiceCatalogServiceActionSummary]],
        'PageToken': Optional[str],
    }
)


ServiceCatalogListTagOptionsFilters = TypedDict(
    'ServiceCatalogListTagOptionsFilters', {
        'TagOptionKey': Optional[str],
        'TagOptionValue': Optional[str],
        'TagOptionActive': Optional[bool],
    }
)


ServiceCatalogListTagOptionsOutput = TypedDict(
    'ServiceCatalogListTagOptionsOutput', {
        'TagOptionDetails': Optional[List[ServiceCatalogTagOptionDetail]],
        'PageToken': Optional[str],
    }
)


ServiceCatalogProvisioningParameter = TypedDict(
    'ServiceCatalogProvisioningParameter', {
        'ParameterKey': Optional[str],
        'ParameterValue': Optional[str],
    }
)


ServiceCatalogProvisioningPreferences = TypedDict(
    'ServiceCatalogProvisioningPreferences', {
        'StackSetAccounts': Optional[List[str]],
        'StackSetRegions': Optional[List[str]],
        'StackSetFailureToleranceCount': Optional[int],
        'StackSetFailureTolerancePercentage': Optional[int],
        'StackSetMaxConcurrencyCount': Optional[int],
        'StackSetMaxConcurrencyPercentage': Optional[int],
    }
)


ServiceCatalogProvisionProductOutput = TypedDict(
    'ServiceCatalogProvisionProductOutput', {
        'RecordDetail': Optional[ServiceCatalogRecordDetail],
    }
)


ServiceCatalogRejectPortfolioShareOutput = TypedDict(
    'ServiceCatalogRejectPortfolioShareOutput', {
    }
)


ServiceCatalogScanProvisionedProductsOutput = TypedDict(
    'ServiceCatalogScanProvisionedProductsOutput', {
        'ProvisionedProductDetails': Optional[List[ServiceCatalogProvisionedProductDetail]],
        'PageToken': Optional[str],
    }
)


ServiceCatalogProductViewAggregationValue = TypedDict(
    'ServiceCatalogProductViewAggregationValue', {
        'AttributeValue': Optional[str],
        'ApproximateCount': Optional[int],
    }
)


ServiceCatalogSearchProductsOutput = TypedDict(
    'ServiceCatalogSearchProductsOutput', {
        'ProductViewSummaries': Optional[List[ServiceCatalogProductViewSummary]],
        'ProductViewAggregations': Optional[Dict[str, List[ServiceCatalogProductViewAggregationValue]]],
        'PageToken': Optional[str],
    }
)


ServiceCatalogSearchProductsAsAdminOutput = TypedDict(
    'ServiceCatalogSearchProductsAsAdminOutput', {
        'ProductViewDetails': Optional[List[ServiceCatalogProductViewDetail]],
        'PageToken': Optional[str],
    }
)


ServiceCatalogProvisionedProductAttribute = TypedDict(
    'ServiceCatalogProvisionedProductAttribute', {
        'ProvisionedProductNameOrArn': Optional[str],
        'ProvisionedProductNameOrArn': Optional[str],
        'ProvisionedProductType': Optional[str],
        'Id': Optional[str],
        'ProvisionedProductStatus': Optional[str],
        'ProvisionedProductStatusMessage': Optional[str],
        'CreatedTime': Optional[datetime.datetime],
        'IdempotencyToken': Optional[str],
        'Id': Optional[str],
        'Tags': Optional[List[ServiceCatalogTag]],
        'PhysicalId': Optional[str],
        'Id': Optional[str],
        'Id': Optional[str],
        'UserArn': Optional[str],
        'UserArnSession': Optional[str],
    }
)


ServiceCatalogSearchProvisionedProductsOutput = TypedDict(
    'ServiceCatalogSearchProvisionedProductsOutput', {
        'ProvisionedProductAttributes': Optional[List[ServiceCatalogProvisionedProductAttribute]],
        'TotalResultsCount': Optional[int],
        'PageToken': Optional[str],
    }
)


ServiceCatalogTerminateProvisionedProductOutput = TypedDict(
    'ServiceCatalogTerminateProvisionedProductOutput', {
        'RecordDetail': Optional[ServiceCatalogRecordDetail],
    }
)


ServiceCatalogUpdateConstraintOutput = TypedDict(
    'ServiceCatalogUpdateConstraintOutput', {
        'ConstraintDetail': Optional[ServiceCatalogConstraintDetail],
        'ConstraintParameters': Optional[str],
        'Status': Optional[str],
    }
)


ServiceCatalogUpdatePortfolioOutput = TypedDict(
    'ServiceCatalogUpdatePortfolioOutput', {
        'PortfolioDetail': Optional[ServiceCatalogPortfolioDetail],
        'Tags': Optional[List[ServiceCatalogTag]],
    }
)


ServiceCatalogUpdateProductOutput = TypedDict(
    'ServiceCatalogUpdateProductOutput', {
        'ProductViewDetail': Optional[ServiceCatalogProductViewDetail],
        'Tags': Optional[List[ServiceCatalogTag]],
    }
)


ServiceCatalogUpdateProvisioningPreferences = TypedDict(
    'ServiceCatalogUpdateProvisioningPreferences', {
        'StackSetAccounts': Optional[List[str]],
        'StackSetRegions': Optional[List[str]],
        'StackSetFailureToleranceCount': Optional[int],
        'StackSetFailureTolerancePercentage': Optional[int],
        'StackSetMaxConcurrencyCount': Optional[int],
        'StackSetMaxConcurrencyPercentage': Optional[int],
        'StackSetOperationType': Optional[str],
    }
)


ServiceCatalogUpdateProvisionedProductOutput = TypedDict(
    'ServiceCatalogUpdateProvisionedProductOutput', {
        'RecordDetail': Optional[ServiceCatalogRecordDetail],
    }
)


ServiceCatalogUpdateProvisioningArtifactOutput = TypedDict(
    'ServiceCatalogUpdateProvisioningArtifactOutput', {
        'ProvisioningArtifactDetail': Optional[ServiceCatalogProvisioningArtifactDetail],
        'ProvisioningArtifactInfo': Optional[Dict[str, str]],
        'Status': Optional[str],
    }
)


ServiceCatalogUpdateServiceActionOutput = TypedDict(
    'ServiceCatalogUpdateServiceActionOutput', {
        'ServiceActionDetail': Optional[ServiceCatalogServiceActionDetail],
    }
)


ServiceCatalogUpdateTagOptionOutput = TypedDict(
    'ServiceCatalogUpdateTagOptionOutput', {
        'TagOptionDetail': Optional[ServiceCatalogTagOptionDetail],
    }
)


class ServiceDiscovery(BaseClient):
    def create_http_namespace(self, *,
        Name: str,
        CreatorRequestId: str = ...,
        Description: str = ...
    ) -> ServiceDiscoveryCreateHttpNamespaceResponse: ...

    def create_private_dns_namespace(self, *,
        Name: str,
        Vpc: str,
        CreatorRequestId: str = ...,
        Description: str = ...
    ) -> ServiceDiscoveryCreatePrivateDnsNamespaceResponse: ...

    def create_public_dns_namespace(self, *,
        Name: str,
        CreatorRequestId: str = ...,
        Description: str = ...
    ) -> ServiceDiscoveryCreatePublicDnsNamespaceResponse: ...

    def create_service(self, *,
        Name: str,
        NamespaceId: str = ...,
        CreatorRequestId: str = ...,
        Description: str = ...,
        DnsConfig: ServiceDiscoveryDnsConfig = ...,
        HealthCheckConfig: ServiceDiscoveryHealthCheckConfig = ...,
        HealthCheckCustomConfig: ServiceDiscoveryHealthCheckCustomConfig = ...
    ) -> ServiceDiscoveryCreateServiceResponse: ...

    def delete_namespace(self, *,
        Id: str
    ) -> ServiceDiscoveryDeleteNamespaceResponse: ...

    def delete_service(self, *,
        Id: str
    ) -> ServiceDiscoveryDeleteServiceResponse: ...

    def deregister_instance(self, *,
        ServiceId: str,
        InstanceId: str
    ) -> ServiceDiscoveryDeregisterInstanceResponse: ...

    def discover_instances(self, *,
        NamespaceName: str,
        ServiceName: str,
        MaxResults: int = ...,
        QueryParameters: Dict[str, str] = ...,
        HealthStatus: str = ...
    ) -> ServiceDiscoveryDiscoverInstancesResponse: ...

    def get_instance(self, *,
        ServiceId: str,
        InstanceId: str
    ) -> ServiceDiscoveryGetInstanceResponse: ...

    def get_instances_health_status(self, *,
        ServiceId: str,
        Instances: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ServiceDiscoveryGetInstancesHealthStatusResponse: ...

    def get_namespace(self, *,
        Id: str
    ) -> ServiceDiscoveryGetNamespaceResponse: ...

    def get_operation(self, *,
        OperationId: str
    ) -> ServiceDiscoveryGetOperationResponse: ...

    def get_service(self, *,
        Id: str
    ) -> ServiceDiscoveryGetServiceResponse: ...

    def list_instances(self, *,
        ServiceId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ServiceDiscoveryListInstancesResponse: ...

    def list_namespaces(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        Filters: List[ServiceDiscoveryNamespaceFilter] = ...
    ) -> ServiceDiscoveryListNamespacesResponse: ...

    def list_operations(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        Filters: List[ServiceDiscoveryOperationFilter] = ...
    ) -> ServiceDiscoveryListOperationsResponse: ...

    def list_services(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        Filters: List[ServiceDiscoveryServiceFilter] = ...
    ) -> ServiceDiscoveryListServicesResponse: ...

    def register_instance(self, *,
        ServiceId: str,
        InstanceId: str,
        Attributes: Dict[str, str],
        CreatorRequestId: str = ...
    ) -> ServiceDiscoveryRegisterInstanceResponse: ...

    def update_instance_custom_health_status(self, *,
        ServiceId: str,
        InstanceId: str,
        Status: str
    ): ...

    def update_service(self, *,
        Id: str,
        Service: ServiceDiscoveryServiceChange
    ) -> ServiceDiscoveryUpdateServiceResponse: ...


ServiceDiscoveryCreateHttpNamespaceResponse = TypedDict(
    'ServiceDiscoveryCreateHttpNamespaceResponse', {
        'OperationId': Optional[str],
    }
)


ServiceDiscoveryCreatePrivateDnsNamespaceResponse = TypedDict(
    'ServiceDiscoveryCreatePrivateDnsNamespaceResponse', {
        'OperationId': Optional[str],
    }
)


ServiceDiscoveryCreatePublicDnsNamespaceResponse = TypedDict(
    'ServiceDiscoveryCreatePublicDnsNamespaceResponse', {
        'OperationId': Optional[str],
    }
)


ServiceDiscoveryDnsRecord = TypedDict(
    'ServiceDiscoveryDnsRecord', {
        'RecordType': str,
        'RecordTTL': int,
    }
)


ServiceDiscoveryDnsConfig = TypedDict(
    'ServiceDiscoveryDnsConfig', {
        'DnsRecordList': List[ServiceDiscoveryDnsRecord],
        'ResourceId': Optional[str],
        'RoutingPolicy': Optional[str],
    }
)


ServiceDiscoveryHealthCheckConfig = TypedDict(
    'ServiceDiscoveryHealthCheckConfig', {
        'HealthCheckType': str,
        'ResourcePath': Optional[str],
        'FailureThreshold': Optional[int],
    }
)


ServiceDiscoveryHealthCheckCustomConfig = TypedDict(
    'ServiceDiscoveryHealthCheckCustomConfig', {
        'FailureThreshold': Optional[int],
    }
)


ServiceDiscoveryService = TypedDict(
    'ServiceDiscoveryService', {
        'ResourceId': Optional[str],
        'Arn': Optional[str],
        'ServiceName': Optional[str],
        'ResourceId': Optional[str],
        'ResourceDescription': Optional[str],
        'ResourceCount': Optional[int],
        'DnsConfig': Optional[ServiceDiscoveryDnsConfig],
        'HealthCheckConfig': Optional[ServiceDiscoveryHealthCheckConfig],
        'HealthCheckCustomConfig': Optional[ServiceDiscoveryHealthCheckCustomConfig],
        'Timestamp': Optional[datetime.datetime],
        'ResourceId': Optional[str],
    }
)


ServiceDiscoveryCreateServiceResponse = TypedDict(
    'ServiceDiscoveryCreateServiceResponse', {
        'Service': Optional[ServiceDiscoveryService],
    }
)


ServiceDiscoveryDeleteNamespaceResponse = TypedDict(
    'ServiceDiscoveryDeleteNamespaceResponse', {
        'OperationId': Optional[str],
    }
)


ServiceDiscoveryDeleteServiceResponse = TypedDict(
    'ServiceDiscoveryDeleteServiceResponse', {
    }
)


ServiceDiscoveryDeregisterInstanceResponse = TypedDict(
    'ServiceDiscoveryDeregisterInstanceResponse', {
        'OperationId': Optional[str],
    }
)


ServiceDiscoveryHttpInstanceSummary = TypedDict(
    'ServiceDiscoveryHttpInstanceSummary', {
        'ResourceId': Optional[str],
        'NamespaceName': Optional[str],
        'ServiceName': Optional[str],
        'HealthStatus': Optional[str],
        'Attributes': Optional[Dict[str, str]],
    }
)


ServiceDiscoveryDiscoverInstancesResponse = TypedDict(
    'ServiceDiscoveryDiscoverInstancesResponse', {
        'HttpInstanceSummaryList': Optional[List[ServiceDiscoveryHttpInstanceSummary]],
    }
)


ServiceDiscoveryInstance = TypedDict(
    'ServiceDiscoveryInstance', {
        'ResourceId': str,
        'ResourceId': Optional[str],
        'Attributes': Optional[Dict[str, str]],
    }
)


ServiceDiscoveryGetInstanceResponse = TypedDict(
    'ServiceDiscoveryGetInstanceResponse', {
        'Instance': Optional[ServiceDiscoveryInstance],
    }
)


ServiceDiscoveryGetInstancesHealthStatusResponse = TypedDict(
    'ServiceDiscoveryGetInstancesHealthStatusResponse', {
        'InstanceHealthStatusMap': Optional[Dict[str, str]],
        'NextToken': Optional[str],
    }
)


ServiceDiscoveryDnsProperties = TypedDict(
    'ServiceDiscoveryDnsProperties', {
        'ResourceId': Optional[str],
    }
)


ServiceDiscoveryHttpProperties = TypedDict(
    'ServiceDiscoveryHttpProperties', {
        'NamespaceName': Optional[str],
    }
)


ServiceDiscoveryNamespaceProperties = TypedDict(
    'ServiceDiscoveryNamespaceProperties', {
        'DnsProperties': Optional[ServiceDiscoveryDnsProperties],
        'HttpProperties': Optional[ServiceDiscoveryHttpProperties],
    }
)


ServiceDiscoveryNamespace = TypedDict(
    'ServiceDiscoveryNamespace', {
        'ResourceId': Optional[str],
        'Arn': Optional[str],
        'NamespaceName': Optional[str],
        'NamespaceType': Optional[str],
        'ResourceDescription': Optional[str],
        'ResourceCount': Optional[int],
        'NamespaceProperties': Optional[ServiceDiscoveryNamespaceProperties],
        'Timestamp': Optional[datetime.datetime],
        'ResourceId': Optional[str],
    }
)


ServiceDiscoveryGetNamespaceResponse = TypedDict(
    'ServiceDiscoveryGetNamespaceResponse', {
        'Namespace': Optional[ServiceDiscoveryNamespace],
    }
)


ServiceDiscoveryOperation = TypedDict(
    'ServiceDiscoveryOperation', {
        'OperationId': Optional[str],
        'OperationType': Optional[str],
        'OperationStatus': Optional[str],
        'Message': Optional[str],
        'Code': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'OperationTargetsMap': Optional[Dict[str, str]],
    }
)


ServiceDiscoveryGetOperationResponse = TypedDict(
    'ServiceDiscoveryGetOperationResponse', {
        'Operation': Optional[ServiceDiscoveryOperation],
    }
)


ServiceDiscoveryGetServiceResponse = TypedDict(
    'ServiceDiscoveryGetServiceResponse', {
        'Service': Optional[ServiceDiscoveryService],
    }
)


ServiceDiscoveryInstanceSummary = TypedDict(
    'ServiceDiscoveryInstanceSummary', {
        'ResourceId': Optional[str],
        'Attributes': Optional[Dict[str, str]],
    }
)


ServiceDiscoveryListInstancesResponse = TypedDict(
    'ServiceDiscoveryListInstancesResponse', {
        'InstanceSummaryList': Optional[List[ServiceDiscoveryInstanceSummary]],
        'NextToken': Optional[str],
    }
)


ServiceDiscoveryNamespaceFilter = TypedDict(
    'ServiceDiscoveryNamespaceFilter', {
        'NamespaceFilterName': str,
        'FilterValues': List[str],
        'FilterCondition': Optional[str],
    }
)


ServiceDiscoveryNamespaceSummary = TypedDict(
    'ServiceDiscoveryNamespaceSummary', {
        'ResourceId': Optional[str],
        'Arn': Optional[str],
        'NamespaceName': Optional[str],
        'NamespaceType': Optional[str],
        'ResourceDescription': Optional[str],
        'ResourceCount': Optional[int],
        'NamespaceProperties': Optional[ServiceDiscoveryNamespaceProperties],
        'Timestamp': Optional[datetime.datetime],
    }
)


ServiceDiscoveryListNamespacesResponse = TypedDict(
    'ServiceDiscoveryListNamespacesResponse', {
        'NamespaceSummariesList': Optional[List[ServiceDiscoveryNamespaceSummary]],
        'NextToken': Optional[str],
    }
)


ServiceDiscoveryOperationFilter = TypedDict(
    'ServiceDiscoveryOperationFilter', {
        'OperationFilterName': str,
        'FilterValues': List[str],
        'FilterCondition': Optional[str],
    }
)


ServiceDiscoveryOperationSummary = TypedDict(
    'ServiceDiscoveryOperationSummary', {
        'OperationId': Optional[str],
        'OperationStatus': Optional[str],
    }
)


ServiceDiscoveryListOperationsResponse = TypedDict(
    'ServiceDiscoveryListOperationsResponse', {
        'OperationSummaryList': Optional[List[ServiceDiscoveryOperationSummary]],
        'NextToken': Optional[str],
    }
)


ServiceDiscoveryServiceFilter = TypedDict(
    'ServiceDiscoveryServiceFilter', {
        'ServiceFilterName': str,
        'FilterValues': List[str],
        'FilterCondition': Optional[str],
    }
)


ServiceDiscoveryServiceSummary = TypedDict(
    'ServiceDiscoveryServiceSummary', {
        'ResourceId': Optional[str],
        'Arn': Optional[str],
        'ServiceName': Optional[str],
        'ResourceDescription': Optional[str],
        'ResourceCount': Optional[int],
        'DnsConfig': Optional[ServiceDiscoveryDnsConfig],
        'HealthCheckConfig': Optional[ServiceDiscoveryHealthCheckConfig],
        'HealthCheckCustomConfig': Optional[ServiceDiscoveryHealthCheckCustomConfig],
        'Timestamp': Optional[datetime.datetime],
    }
)


ServiceDiscoveryListServicesResponse = TypedDict(
    'ServiceDiscoveryListServicesResponse', {
        'ServiceSummariesList': Optional[List[ServiceDiscoveryServiceSummary]],
        'NextToken': Optional[str],
    }
)


ServiceDiscoveryRegisterInstanceResponse = TypedDict(
    'ServiceDiscoveryRegisterInstanceResponse', {
        'OperationId': Optional[str],
    }
)


ServiceDiscoveryDnsConfigChange = TypedDict(
    'ServiceDiscoveryDnsConfigChange', {
        'DnsRecordList': List[ServiceDiscoveryDnsRecord],
    }
)


ServiceDiscoveryServiceChange = TypedDict(
    'ServiceDiscoveryServiceChange', {
        'DnsConfigChange': ServiceDiscoveryDnsConfigChange,
        'ResourceDescription': Optional[str],
        'HealthCheckConfig': Optional[ServiceDiscoveryHealthCheckConfig],
    }
)


ServiceDiscoveryUpdateServiceResponse = TypedDict(
    'ServiceDiscoveryUpdateServiceResponse', {
        'OperationId': Optional[str],
    }
)


class SES(BaseClient):
    def clone_receipt_rule_set(self, *,
        RuleSetName: str,
        OriginalRuleSetName: str
    ) -> SESCloneReceiptRuleSetResponse: ...

    def create_configuration_set(self, *,
        ConfigurationSet: SESConfigurationSet
    ) -> SESCreateConfigurationSetResponse: ...

    def create_configuration_set_event_destination(self, *,
        ConfigurationSetName: str,
        EventDestination: SESEventDestination
    ) -> SESCreateConfigurationSetEventDestinationResponse: ...

    def create_configuration_set_tracking_options(self, *,
        ConfigurationSetName: str,
        TrackingOptions: SESTrackingOptions
    ) -> SESCreateConfigurationSetTrackingOptionsResponse: ...

    def create_custom_verification_email_template(self, *,
        TemplateName: str,
        FromEmailAddress: str,
        TemplateSubject: str,
        TemplateContent: str,
        SuccessRedirectionURL: str,
        FailureRedirectionURL: str
    ): ...

    def create_receipt_filter(self, *,
        Filter: SESReceiptFilter
    ) -> SESCreateReceiptFilterResponse: ...

    def create_receipt_rule(self, *,
        RuleSetName: str,
        Rule: SESReceiptRule,
        After: str = ...
    ) -> SESCreateReceiptRuleResponse: ...

    def create_receipt_rule_set(self, *,
        RuleSetName: str
    ) -> SESCreateReceiptRuleSetResponse: ...

    def create_template(self, *,
        Template: SESTemplate
    ) -> SESCreateTemplateResponse: ...

    def delete_configuration_set(self, *,
        ConfigurationSetName: str
    ) -> SESDeleteConfigurationSetResponse: ...

    def delete_configuration_set_event_destination(self, *,
        ConfigurationSetName: str,
        EventDestinationName: str
    ) -> SESDeleteConfigurationSetEventDestinationResponse: ...

    def delete_configuration_set_tracking_options(self, *,
        ConfigurationSetName: str
    ) -> SESDeleteConfigurationSetTrackingOptionsResponse: ...

    def delete_custom_verification_email_template(self, *,
        TemplateName: str
    ): ...

    def delete_identity(self, *,
        Identity: str
    ) -> SESDeleteIdentityResponse: ...

    def delete_identity_policy(self, *,
        Identity: str,
        PolicyName: str
    ) -> SESDeleteIdentityPolicyResponse: ...

    def delete_receipt_filter(self, *,
        FilterName: str
    ) -> SESDeleteReceiptFilterResponse: ...

    def delete_receipt_rule(self, *,
        RuleSetName: str,
        RuleName: str
    ) -> SESDeleteReceiptRuleResponse: ...

    def delete_receipt_rule_set(self, *,
        RuleSetName: str
    ) -> SESDeleteReceiptRuleSetResponse: ...

    def delete_template(self, *,
        TemplateName: str
    ) -> SESDeleteTemplateResponse: ...

    def delete_verified_email_address(self, *,
        EmailAddress: str
    ): ...

    def describe_active_receipt_rule_set(self) -> SESDescribeActiveReceiptRuleSetResponse: ...

    def describe_configuration_set(self, *,
        ConfigurationSetName: str,
        ConfigurationSetAttributeNames: List[str] = ...
    ) -> SESDescribeConfigurationSetResponse: ...

    def describe_receipt_rule(self, *,
        RuleSetName: str,
        RuleName: str
    ) -> SESDescribeReceiptRuleResponse: ...

    def describe_receipt_rule_set(self, *,
        RuleSetName: str
    ) -> SESDescribeReceiptRuleSetResponse: ...

    def get_account_sending_enabled(self) -> SESGetAccountSendingEnabledResponse: ...

    def get_custom_verification_email_template(self, *,
        TemplateName: str
    ) -> SESGetCustomVerificationEmailTemplateResponse: ...

    def get_identity_dkim_attributes(self, *,
        Identities: List[str]
    ) -> SESGetIdentityDkimAttributesResponse: ...

    def get_identity_mail_from_domain_attributes(self, *,
        Identities: List[str]
    ) -> SESGetIdentityMailFromDomainAttributesResponse: ...

    def get_identity_notification_attributes(self, *,
        Identities: List[str]
    ) -> SESGetIdentityNotificationAttributesResponse: ...

    def get_identity_policies(self, *,
        Identity: str,
        PolicyNames: List[str]
    ) -> SESGetIdentityPoliciesResponse: ...

    def get_identity_verification_attributes(self, *,
        Identities: List[str]
    ) -> SESGetIdentityVerificationAttributesResponse: ...

    def get_send_quota(self) -> SESGetSendQuotaResponse: ...

    def get_send_statistics(self) -> SESGetSendStatisticsResponse: ...

    def get_template(self, *,
        TemplateName: str
    ) -> SESGetTemplateResponse: ...

    def list_configuration_sets(self, *,
        NextToken: str = ...,
        MaxItems: int = ...
    ) -> SESListConfigurationSetsResponse: ...

    def list_custom_verification_email_templates(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> SESListCustomVerificationEmailTemplatesResponse: ...

    def list_identities(self, *,
        IdentityType: str = ...,
        NextToken: str = ...,
        MaxItems: int = ...
    ) -> SESListIdentitiesResponse: ...

    def list_identity_policies(self, *,
        Identity: str
    ) -> SESListIdentityPoliciesResponse: ...

    def list_receipt_filters(self) -> SESListReceiptFiltersResponse: ...

    def list_receipt_rule_sets(self, *,
        NextToken: str = ...
    ) -> SESListReceiptRuleSetsResponse: ...

    def list_templates(self, *,
        NextToken: str = ...,
        MaxItems: int = ...
    ) -> SESListTemplatesResponse: ...

    def list_verified_email_addresses(self) -> SESListVerifiedEmailAddressesResponse: ...

    def put_identity_policy(self, *,
        Identity: str,
        PolicyName: str,
        Policy: str
    ) -> SESPutIdentityPolicyResponse: ...

    def reorder_receipt_rule_set(self, *,
        RuleSetName: str,
        RuleNames: List[str]
    ) -> SESReorderReceiptRuleSetResponse: ...

    def send_bounce(self, *,
        OriginalMessageId: str,
        BounceSender: str,
        BouncedRecipientInfoList: List[SESBouncedRecipientInfo],
        Explanation: str = ...,
        MessageDsn: SESMessageDsn = ...,
        BounceSenderArn: str = ...
    ) -> SESSendBounceResponse: ...

    def send_bulk_templated_email(self, *,
        Source: str,
        Template: str,
        Destinations: List[SESBulkEmailDestination],
        SourceArn: str = ...,
        ReplyToAddresses: List[str] = ...,
        ReturnPath: str = ...,
        ReturnPathArn: str = ...,
        ConfigurationSetName: str = ...,
        DefaultTags: List[SESMessageTag] = ...,
        TemplateArn: str = ...,
        DefaultTemplateData: str = ...
    ) -> SESSendBulkTemplatedEmailResponse: ...

    def send_custom_verification_email(self, *,
        EmailAddress: str,
        TemplateName: str,
        ConfigurationSetName: str = ...
    ) -> SESSendCustomVerificationEmailResponse: ...

    def send_email(self, *,
        Source: str,
        Destination: SESDestination,
        Message: SESMessage,
        ReplyToAddresses: List[str] = ...,
        ReturnPath: str = ...,
        SourceArn: str = ...,
        ReturnPathArn: str = ...,
        Tags: List[SESMessageTag] = ...,
        ConfigurationSetName: str = ...
    ) -> SESSendEmailResponse: ...

    def send_raw_email(self, *,
        RawMessage: SESRawMessage,
        Source: str = ...,
        Destinations: List[str] = ...,
        FromArn: str = ...,
        SourceArn: str = ...,
        ReturnPathArn: str = ...,
        Tags: List[SESMessageTag] = ...,
        ConfigurationSetName: str = ...
    ) -> SESSendRawEmailResponse: ...

    def send_templated_email(self, *,
        Source: str,
        Destination: SESDestination,
        Template: str,
        TemplateData: str,
        ReplyToAddresses: List[str] = ...,
        ReturnPath: str = ...,
        SourceArn: str = ...,
        ReturnPathArn: str = ...,
        Tags: List[SESMessageTag] = ...,
        ConfigurationSetName: str = ...,
        TemplateArn: str = ...
    ) -> SESSendTemplatedEmailResponse: ...

    def set_active_receipt_rule_set(self, *,
        RuleSetName: str = ...
    ) -> SESSetActiveReceiptRuleSetResponse: ...

    def set_identity_dkim_enabled(self, *,
        Identity: str,
        DkimEnabled: bool
    ) -> SESSetIdentityDkimEnabledResponse: ...

    def set_identity_feedback_forwarding_enabled(self, *,
        Identity: str,
        ForwardingEnabled: bool
    ) -> SESSetIdentityFeedbackForwardingEnabledResponse: ...

    def set_identity_headers_in_notifications_enabled(self, *,
        Identity: str,
        NotificationType: str,
        Enabled: bool
    ) -> SESSetIdentityHeadersInNotificationsEnabledResponse: ...

    def set_identity_mail_from_domain(self, *,
        Identity: str,
        MailFromDomain: str = ...,
        BehaviorOnMXFailure: str = ...
    ) -> SESSetIdentityMailFromDomainResponse: ...

    def set_identity_notification_topic(self, *,
        Identity: str,
        NotificationType: str,
        SnsTopic: str = ...
    ) -> SESSetIdentityNotificationTopicResponse: ...

    def set_receipt_rule_position(self, *,
        RuleSetName: str,
        RuleName: str,
        After: str = ...
    ) -> SESSetReceiptRulePositionResponse: ...

    def test_render_template(self, *,
        TemplateName: str,
        TemplateData: str
    ) -> SESTestRenderTemplateResponse: ...

    def update_account_sending_enabled(self, *,
        Enabled: bool = ...
    ): ...

    def update_configuration_set_event_destination(self, *,
        ConfigurationSetName: str,
        EventDestination: SESEventDestination
    ) -> SESUpdateConfigurationSetEventDestinationResponse: ...

    def update_configuration_set_reputation_metrics_enabled(self, *,
        ConfigurationSetName: str,
        Enabled: bool
    ): ...

    def update_configuration_set_sending_enabled(self, *,
        ConfigurationSetName: str,
        Enabled: bool
    ): ...

    def update_configuration_set_tracking_options(self, *,
        ConfigurationSetName: str,
        TrackingOptions: SESTrackingOptions
    ) -> SESUpdateConfigurationSetTrackingOptionsResponse: ...

    def update_custom_verification_email_template(self, *,
        TemplateName: str,
        FromEmailAddress: str = ...,
        TemplateSubject: str = ...,
        TemplateContent: str = ...,
        SuccessRedirectionURL: str = ...,
        FailureRedirectionURL: str = ...
    ): ...

    def update_receipt_rule(self, *,
        RuleSetName: str,
        Rule: SESReceiptRule
    ) -> SESUpdateReceiptRuleResponse: ...

    def update_template(self, *,
        Template: SESTemplate
    ) -> SESUpdateTemplateResponse: ...

    def verify_domain_dkim(self, *,
        Domain: str
    ) -> SESVerifyDomainDkimResponse: ...

    def verify_domain_identity(self, *,
        Domain: str
    ) -> SESVerifyDomainIdentityResponse: ...

    def verify_email_address(self, *,
        EmailAddress: str
    ): ...

    def verify_email_identity(self, *,
        EmailAddress: str
    ) -> SESVerifyEmailIdentityResponse: ...


SESCloneReceiptRuleSetResponse = TypedDict(
    'SESCloneReceiptRuleSetResponse', {
    }
)


SESConfigurationSet = TypedDict(
    'SESConfigurationSet', {
        'ConfigurationSetName': str,
    }
)


SESCreateConfigurationSetResponse = TypedDict(
    'SESCreateConfigurationSetResponse', {
    }
)


SESKinesisFirehoseDestination = TypedDict(
    'SESKinesisFirehoseDestination', {
        'AmazonResourceName': str,
        'AmazonResourceName': str,
    }
)


SESCloudWatchDimensionConfiguration = TypedDict(
    'SESCloudWatchDimensionConfiguration', {
        'DimensionName': str,
        'DimensionValueSource': str,
        'DefaultDimensionValue': str,
    }
)


SESCloudWatchDestination = TypedDict(
    'SESCloudWatchDestination', {
        'CloudWatchDimensionConfigurations': List[SESCloudWatchDimensionConfiguration],
    }
)


SESSNSDestination = TypedDict(
    'SESSNSDestination', {
        'AmazonResourceName': str,
    }
)


SESEventDestination = TypedDict(
    'SESEventDestination', {
        'EventDestinationName': str,
        'EventTypes': List[str],
        'Enabled': Optional[bool],
        'KinesisFirehoseDestination': Optional[SESKinesisFirehoseDestination],
        'CloudWatchDestination': Optional[SESCloudWatchDestination],
        'SNSDestination': Optional[SESSNSDestination],
    }
)


SESCreateConfigurationSetEventDestinationResponse = TypedDict(
    'SESCreateConfigurationSetEventDestinationResponse', {
    }
)


SESTrackingOptions = TypedDict(
    'SESTrackingOptions', {
        'CustomRedirectDomain': Optional[str],
    }
)


SESCreateConfigurationSetTrackingOptionsResponse = TypedDict(
    'SESCreateConfigurationSetTrackingOptionsResponse', {
    }
)


SESReceiptIpFilter = TypedDict(
    'SESReceiptIpFilter', {
        'ReceiptFilterPolicy': str,
        'Cidr': str,
    }
)


SESReceiptFilter = TypedDict(
    'SESReceiptFilter', {
        'ReceiptFilterName': str,
        'ReceiptIpFilter': SESReceiptIpFilter,
    }
)


SESCreateReceiptFilterResponse = TypedDict(
    'SESCreateReceiptFilterResponse', {
    }
)


SESS3Action = TypedDict(
    'SESS3Action', {
        'S3BucketName': str,
        'AmazonResourceName': Optional[str],
        'S3KeyPrefix': Optional[str],
        'AmazonResourceName': Optional[str],
    }
)


SESBounceAction = TypedDict(
    'SESBounceAction', {
        'BounceSmtpReplyCode': str,
        'BounceMessage': str,
        'Address': str,
        'AmazonResourceName': Optional[str],
        'BounceStatusCode': Optional[str],
    }
)


SESWorkmailAction = TypedDict(
    'SESWorkmailAction', {
        'AmazonResourceName': str,
        'AmazonResourceName': Optional[str],
    }
)


SESLambdaAction = TypedDict(
    'SESLambdaAction', {
        'AmazonResourceName': str,
        'AmazonResourceName': Optional[str],
        'InvocationType': Optional[str],
    }
)


SESStopAction = TypedDict(
    'SESStopAction', {
        'StopScope': str,
        'AmazonResourceName': Optional[str],
    }
)


SESAddHeaderAction = TypedDict(
    'SESAddHeaderAction', {
        'HeaderName': str,
        'HeaderValue': str,
    }
)


SESSNSAction = TypedDict(
    'SESSNSAction', {
        'AmazonResourceName': str,
        'SNSActionEncoding': Optional[str],
    }
)


SESReceiptAction = TypedDict(
    'SESReceiptAction', {
        'S3Action': Optional[SESS3Action],
        'BounceAction': Optional[SESBounceAction],
        'WorkmailAction': Optional[SESWorkmailAction],
        'LambdaAction': Optional[SESLambdaAction],
        'StopAction': Optional[SESStopAction],
        'AddHeaderAction': Optional[SESAddHeaderAction],
        'SNSAction': Optional[SESSNSAction],
    }
)


SESReceiptRule = TypedDict(
    'SESReceiptRule', {
        'ReceiptRuleName': str,
        'Enabled': Optional[bool],
        'TlsPolicy': Optional[str],
        'RecipientsList': Optional[List[str]],
        'ReceiptActionsList': Optional[List[SESReceiptAction]],
        'Enabled': Optional[bool],
    }
)


SESCreateReceiptRuleResponse = TypedDict(
    'SESCreateReceiptRuleResponse', {
    }
)


SESCreateReceiptRuleSetResponse = TypedDict(
    'SESCreateReceiptRuleSetResponse', {
    }
)


SESTemplate = TypedDict(
    'SESTemplate', {
        'TemplateName': str,
        'SubjectPart': Optional[str],
        'TextPart': Optional[str],
        'HtmlPart': Optional[str],
    }
)


SESCreateTemplateResponse = TypedDict(
    'SESCreateTemplateResponse', {
    }
)


SESDeleteConfigurationSetResponse = TypedDict(
    'SESDeleteConfigurationSetResponse', {
    }
)


SESDeleteConfigurationSetEventDestinationResponse = TypedDict(
    'SESDeleteConfigurationSetEventDestinationResponse', {
    }
)


SESDeleteConfigurationSetTrackingOptionsResponse = TypedDict(
    'SESDeleteConfigurationSetTrackingOptionsResponse', {
    }
)


SESDeleteIdentityResponse = TypedDict(
    'SESDeleteIdentityResponse', {
    }
)


SESDeleteIdentityPolicyResponse = TypedDict(
    'SESDeleteIdentityPolicyResponse', {
    }
)


SESDeleteReceiptFilterResponse = TypedDict(
    'SESDeleteReceiptFilterResponse', {
    }
)


SESDeleteReceiptRuleResponse = TypedDict(
    'SESDeleteReceiptRuleResponse', {
    }
)


SESDeleteReceiptRuleSetResponse = TypedDict(
    'SESDeleteReceiptRuleSetResponse', {
    }
)


SESDeleteTemplateResponse = TypedDict(
    'SESDeleteTemplateResponse', {
    }
)


SESReceiptRuleSetMetadata = TypedDict(
    'SESReceiptRuleSetMetadata', {
        'ReceiptRuleSetName': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


SESDescribeActiveReceiptRuleSetResponse = TypedDict(
    'SESDescribeActiveReceiptRuleSetResponse', {
        'ReceiptRuleSetMetadata': Optional[SESReceiptRuleSetMetadata],
        'ReceiptRulesList': Optional[List[SESReceiptRule]],
    }
)


SESReputationOptions = TypedDict(
    'SESReputationOptions', {
        'Enabled': Optional[bool],
        'Enabled': Optional[bool],
        'LastFreshStart': Optional[datetime.datetime],
    }
)


SESDescribeConfigurationSetResponse = TypedDict(
    'SESDescribeConfigurationSetResponse', {
        'ConfigurationSet': Optional[SESConfigurationSet],
        'EventDestinations': Optional[List[SESEventDestination]],
        'TrackingOptions': Optional[SESTrackingOptions],
        'ReputationOptions': Optional[SESReputationOptions],
    }
)


SESDescribeReceiptRuleResponse = TypedDict(
    'SESDescribeReceiptRuleResponse', {
        'ReceiptRule': Optional[SESReceiptRule],
    }
)


SESDescribeReceiptRuleSetResponse = TypedDict(
    'SESDescribeReceiptRuleSetResponse', {
        'ReceiptRuleSetMetadata': Optional[SESReceiptRuleSetMetadata],
        'ReceiptRulesList': Optional[List[SESReceiptRule]],
    }
)


SESGetAccountSendingEnabledResponse = TypedDict(
    'SESGetAccountSendingEnabledResponse', {
        'Enabled': Optional[bool],
    }
)


SESGetCustomVerificationEmailTemplateResponse = TypedDict(
    'SESGetCustomVerificationEmailTemplateResponse', {
        'TemplateName': Optional[str],
        'FromAddress': Optional[str],
        'Subject': Optional[str],
        'TemplateContent': Optional[str],
        'SuccessRedirectionURL': Optional[str],
        'FailureRedirectionURL': Optional[str],
    }
)


SESIdentityDkimAttributes = TypedDict(
    'SESIdentityDkimAttributes', {
        'Enabled': bool,
        'VerificationStatus': str,
        'VerificationTokenList': Optional[List[str]],
    }
)


SESGetIdentityDkimAttributesResponse = TypedDict(
    'SESGetIdentityDkimAttributesResponse', {
        'DkimAttributes': Dict[str, SESIdentityDkimAttributes],
    }
)


SESIdentityMailFromDomainAttributes = TypedDict(
    'SESIdentityMailFromDomainAttributes', {
        'MailFromDomainName': str,
        'CustomMailFromStatus': str,
        'BehaviorOnMXFailure': str,
    }
)


SESGetIdentityMailFromDomainAttributesResponse = TypedDict(
    'SESGetIdentityMailFromDomainAttributesResponse', {
        'MailFromDomainAttributes': Dict[str, SESIdentityMailFromDomainAttributes],
    }
)


SESIdentityNotificationAttributes = TypedDict(
    'SESIdentityNotificationAttributes', {
        'NotificationTopic': str,
        'NotificationTopic': str,
        'NotificationTopic': str,
        'Enabled': bool,
        'Enabled': Optional[bool],
        'Enabled': Optional[bool],
        'Enabled': Optional[bool],
    }
)


SESGetIdentityNotificationAttributesResponse = TypedDict(
    'SESGetIdentityNotificationAttributesResponse', {
        'NotificationAttributes': Dict[str, SESIdentityNotificationAttributes],
    }
)


SESGetIdentityPoliciesResponse = TypedDict(
    'SESGetIdentityPoliciesResponse', {
        'PolicyMap': Dict[str, str],
    }
)


SESIdentityVerificationAttributes = TypedDict(
    'SESIdentityVerificationAttributes', {
        'VerificationStatus': str,
        'VerificationToken': Optional[str],
    }
)


SESGetIdentityVerificationAttributesResponse = TypedDict(
    'SESGetIdentityVerificationAttributesResponse', {
        'VerificationAttributes': Dict[str, SESIdentityVerificationAttributes],
    }
)


SESGetSendQuotaResponse = TypedDict(
    'SESGetSendQuotaResponse', {
        'Max24HourSend': Optional[float],
        'MaxSendRate': Optional[float],
        'SentLast24Hours': Optional[float],
    }
)


SESSendDataPoint = TypedDict(
    'SESSendDataPoint', {
        'Timestamp': Optional[datetime.datetime],
        'Counter': Optional[int],
        'Counter': Optional[int],
        'Counter': Optional[int],
        'Counter': Optional[int],
    }
)


SESGetSendStatisticsResponse = TypedDict(
    'SESGetSendStatisticsResponse', {
        'SendDataPointList': Optional[List[SESSendDataPoint]],
    }
)


SESGetTemplateResponse = TypedDict(
    'SESGetTemplateResponse', {
        'Template': Optional[SESTemplate],
    }
)


SESListConfigurationSetsResponse = TypedDict(
    'SESListConfigurationSetsResponse', {
        'ConfigurationSets': Optional[List[SESConfigurationSet]],
        'NextToken': Optional[str],
    }
)


SESCustomVerificationEmailTemplate = TypedDict(
    'SESCustomVerificationEmailTemplate', {
        'TemplateName': Optional[str],
        'FromAddress': Optional[str],
        'Subject': Optional[str],
        'SuccessRedirectionURL': Optional[str],
        'FailureRedirectionURL': Optional[str],
    }
)


SESListCustomVerificationEmailTemplatesResponse = TypedDict(
    'SESListCustomVerificationEmailTemplatesResponse', {
        'CustomVerificationEmailTemplates': Optional[List[SESCustomVerificationEmailTemplate]],
        'NextToken': Optional[str],
    }
)


SESListIdentitiesResponse = TypedDict(
    'SESListIdentitiesResponse', {
        'IdentityList': List[str],
        'NextToken': Optional[str],
    }
)


SESListIdentityPoliciesResponse = TypedDict(
    'SESListIdentityPoliciesResponse', {
        'PolicyNameList': List[str],
    }
)


SESListReceiptFiltersResponse = TypedDict(
    'SESListReceiptFiltersResponse', {
        'ReceiptFilterList': Optional[List[SESReceiptFilter]],
    }
)


SESListReceiptRuleSetsResponse = TypedDict(
    'SESListReceiptRuleSetsResponse', {
        'ReceiptRuleSetsLists': Optional[List[SESReceiptRuleSetMetadata]],
        'NextToken': Optional[str],
    }
)


SESTemplateMetadata = TypedDict(
    'SESTemplateMetadata', {
        'TemplateName': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


SESListTemplatesResponse = TypedDict(
    'SESListTemplatesResponse', {
        'TemplateMetadataList': Optional[List[SESTemplateMetadata]],
        'NextToken': Optional[str],
    }
)


SESListVerifiedEmailAddressesResponse = TypedDict(
    'SESListVerifiedEmailAddressesResponse', {
        'AddressList': Optional[List[str]],
    }
)


SESPutIdentityPolicyResponse = TypedDict(
    'SESPutIdentityPolicyResponse', {
    }
)


SESReorderReceiptRuleSetResponse = TypedDict(
    'SESReorderReceiptRuleSetResponse', {
    }
)


SESExtensionField = TypedDict(
    'SESExtensionField', {
        'ExtensionFieldName': str,
        'ExtensionFieldValue': str,
    }
)


SESMessageDsn = TypedDict(
    'SESMessageDsn', {
        'ReportingMta': str,
        'ArrivalDate': Optional[datetime.datetime],
        'ExtensionFieldList': Optional[List[SESExtensionField]],
    }
)


SESRecipientDsnFields = TypedDict(
    'SESRecipientDsnFields', {
        'DsnAction': str,
        'DsnStatus': str,
        'Address': Optional[str],
        'RemoteMta': Optional[str],
        'DiagnosticCode': Optional[str],
        'LastAttemptDate': Optional[datetime.datetime],
        'ExtensionFieldList': Optional[List[SESExtensionField]],
    }
)


SESBouncedRecipientInfo = TypedDict(
    'SESBouncedRecipientInfo', {
        'Address': str,
        'AmazonResourceName': Optional[str],
        'BounceType': Optional[str],
        'RecipientDsnFields': Optional[SESRecipientDsnFields],
    }
)


SESSendBounceResponse = TypedDict(
    'SESSendBounceResponse', {
        'MessageId': Optional[str],
    }
)


SESMessageTag = TypedDict(
    'SESMessageTag', {
        'MessageTagName': str,
        'MessageTagValue': str,
    }
)


SESDestination = TypedDict(
    'SESDestination', {
        'AddressList': Optional[List[str]],
        'AddressList': Optional[List[str]],
        'AddressList': Optional[List[str]],
    }
)


SESBulkEmailDestination = TypedDict(
    'SESBulkEmailDestination', {
        'Destination': SESDestination,
        'MessageTagList': Optional[List[SESMessageTag]],
        'TemplateData': Optional[str],
    }
)


SESBulkEmailDestinationStatus = TypedDict(
    'SESBulkEmailDestinationStatus', {
        'BulkEmailStatus': Optional[str],
        'Error': Optional[str],
        'MessageId': Optional[str],
    }
)


SESSendBulkTemplatedEmailResponse = TypedDict(
    'SESSendBulkTemplatedEmailResponse', {
        'BulkEmailDestinationStatusList': List[SESBulkEmailDestinationStatus],
    }
)


SESSendCustomVerificationEmailResponse = TypedDict(
    'SESSendCustomVerificationEmailResponse', {
        'MessageId': Optional[str],
    }
)


SESContent = TypedDict(
    'SESContent', {
        'MessageData': str,
        'Charset': Optional[str],
    }
)


SESBody = TypedDict(
    'SESBody', {
        'Content': Optional[SESContent],
        'Content': Optional[SESContent],
    }
)


SESMessage = TypedDict(
    'SESMessage', {
        'Content': SESContent,
        'Body': SESBody,
    }
)


SESSendEmailResponse = TypedDict(
    'SESSendEmailResponse', {
        'MessageId': str,
    }
)


SESRawMessage = TypedDict(
    'SESRawMessage', {
        'RawMessageData': bytes,
    }
)


SESSendRawEmailResponse = TypedDict(
    'SESSendRawEmailResponse', {
        'MessageId': str,
    }
)


SESSendTemplatedEmailResponse = TypedDict(
    'SESSendTemplatedEmailResponse', {
        'MessageId': str,
    }
)


SESSetActiveReceiptRuleSetResponse = TypedDict(
    'SESSetActiveReceiptRuleSetResponse', {
    }
)


SESSetIdentityDkimEnabledResponse = TypedDict(
    'SESSetIdentityDkimEnabledResponse', {
    }
)


SESSetIdentityFeedbackForwardingEnabledResponse = TypedDict(
    'SESSetIdentityFeedbackForwardingEnabledResponse', {
    }
)


SESSetIdentityHeadersInNotificationsEnabledResponse = TypedDict(
    'SESSetIdentityHeadersInNotificationsEnabledResponse', {
    }
)


SESSetIdentityMailFromDomainResponse = TypedDict(
    'SESSetIdentityMailFromDomainResponse', {
    }
)


SESSetIdentityNotificationTopicResponse = TypedDict(
    'SESSetIdentityNotificationTopicResponse', {
    }
)


SESSetReceiptRulePositionResponse = TypedDict(
    'SESSetReceiptRulePositionResponse', {
    }
)


SESTestRenderTemplateResponse = TypedDict(
    'SESTestRenderTemplateResponse', {
        'RenderedTemplate': Optional[str],
    }
)


SESUpdateConfigurationSetEventDestinationResponse = TypedDict(
    'SESUpdateConfigurationSetEventDestinationResponse', {
    }
)


SESUpdateConfigurationSetTrackingOptionsResponse = TypedDict(
    'SESUpdateConfigurationSetTrackingOptionsResponse', {
    }
)


SESUpdateReceiptRuleResponse = TypedDict(
    'SESUpdateReceiptRuleResponse', {
    }
)


SESUpdateTemplateResponse = TypedDict(
    'SESUpdateTemplateResponse', {
    }
)


SESVerifyDomainDkimResponse = TypedDict(
    'SESVerifyDomainDkimResponse', {
        'VerificationTokenList': List[str],
    }
)


SESVerifyDomainIdentityResponse = TypedDict(
    'SESVerifyDomainIdentityResponse', {
        'VerificationToken': str,
    }
)


SESVerifyEmailIdentityResponse = TypedDict(
    'SESVerifyEmailIdentityResponse', {
    }
)


class Shield(BaseClient):
    def associate_drt_log_bucket(self, *,
        LogBucket: str
    ) -> ShieldAssociateDRTLogBucketResponse: ...

    def associate_drt_role(self, *,
        RoleArn: str
    ) -> ShieldAssociateDRTRoleResponse: ...

    def create_protection(self, *,
        Name: str,
        ResourceArn: str
    ) -> ShieldCreateProtectionResponse: ...

    def create_subscription(self) -> ShieldCreateSubscriptionResponse: ...

    def delete_protection(self, *,
        ProtectionId: str
    ) -> ShieldDeleteProtectionResponse: ...

    def delete_subscription(self) -> ShieldDeleteSubscriptionResponse: ...

    def describe_attack(self, *,
        AttackId: str
    ) -> ShieldDescribeAttackResponse: ...

    def describe_drt_access(self) -> ShieldDescribeDRTAccessResponse: ...

    def describe_emergency_contact_settings(self) -> ShieldDescribeEmergencyContactSettingsResponse: ...

    def describe_protection(self, *,
        ProtectionId: str = ...,
        ResourceArn: str = ...
    ) -> ShieldDescribeProtectionResponse: ...

    def describe_subscription(self) -> ShieldDescribeSubscriptionResponse: ...

    def disassociate_drt_log_bucket(self, *,
        LogBucket: str
    ) -> ShieldDisassociateDRTLogBucketResponse: ...

    def disassociate_drt_role(self) -> ShieldDisassociateDRTRoleResponse: ...

    def get_subscription_state(self) -> ShieldGetSubscriptionStateResponse: ...

    def list_attacks(self, *,
        ResourceArns: List[str] = ...,
        StartTime: ShieldTimeRange = ...,
        EndTime: ShieldTimeRange = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ShieldListAttacksResponse: ...

    def list_protections(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ShieldListProtectionsResponse: ...

    def update_emergency_contact_settings(self, *,
        EmergencyContactList: List[ShieldEmergencyContact] = ...
    ) -> ShieldUpdateEmergencyContactSettingsResponse: ...

    def update_subscription(self, *,
        AutoRenew: str = ...
    ) -> ShieldUpdateSubscriptionResponse: ...


ShieldAssociateDRTLogBucketResponse = TypedDict(
    'ShieldAssociateDRTLogBucketResponse', {
    }
)


ShieldAssociateDRTRoleResponse = TypedDict(
    'ShieldAssociateDRTRoleResponse', {
    }
)


ShieldCreateProtectionResponse = TypedDict(
    'ShieldCreateProtectionResponse', {
        'ProtectionId': Optional[str],
    }
)


ShieldCreateSubscriptionResponse = TypedDict(
    'ShieldCreateSubscriptionResponse', {
    }
)


ShieldDeleteProtectionResponse = TypedDict(
    'ShieldDeleteProtectionResponse', {
    }
)


ShieldDeleteSubscriptionResponse = TypedDict(
    'ShieldDeleteSubscriptionResponse', {
    }
)


ShieldSummarizedCounter = TypedDict(
    'ShieldSummarizedCounter', {
        'String': Optional[str],
        'Double': Optional[float],
        'Double': Optional[float],
        'Double': Optional[float],
        'Integer': Optional[int],
        'String': Optional[str],
    }
)


ShieldSummarizedAttackVector = TypedDict(
    'ShieldSummarizedAttackVector', {
        'String': str,
        'SummarizedCounterList': Optional[List[ShieldSummarizedCounter]],
    }
)


ShieldSubResourceSummary = TypedDict(
    'ShieldSubResourceSummary', {
        'SubResourceType': Optional[str],
        'String': Optional[str],
        'SummarizedAttackVectorList': Optional[List[ShieldSummarizedAttackVector]],
        'SummarizedCounterList': Optional[List[ShieldSummarizedCounter]],
    }
)


ShieldContributor = TypedDict(
    'ShieldContributor', {
        'String': Optional[str],
        'Long': Optional[int],
    }
)


ShieldAttackProperty = TypedDict(
    'ShieldAttackProperty', {
        'AttackLayer': Optional[str],
        'AttackPropertyIdentifier': Optional[str],
        'TopContributors': Optional[List[ShieldContributor]],
        'Unit': Optional[str],
        'Long': Optional[int],
    }
)


ShieldMitigation = TypedDict(
    'ShieldMitigation', {
        'String': Optional[str],
    }
)


ShieldAttackDetail = TypedDict(
    'ShieldAttackDetail', {
        'AttackId': Optional[str],
        'ResourceArn': Optional[str],
        'SubResourceSummaryList': Optional[List[ShieldSubResourceSummary]],
        'AttackTimestamp': Optional[datetime.datetime],
        'AttackTimestamp': Optional[datetime.datetime],
        'SummarizedCounterList': Optional[List[ShieldSummarizedCounter]],
        'AttackProperties': Optional[List[ShieldAttackProperty]],
        'MitigationList': Optional[List[ShieldMitigation]],
    }
)


ShieldDescribeAttackResponse = TypedDict(
    'ShieldDescribeAttackResponse', {
        'AttackDetail': Optional[ShieldAttackDetail],
    }
)


ShieldDescribeDRTAccessResponse = TypedDict(
    'ShieldDescribeDRTAccessResponse', {
        'RoleArn': Optional[str],
        'LogBucketList': Optional[List[str]],
    }
)


ShieldEmergencyContact = TypedDict(
    'ShieldEmergencyContact', {
        'EmailAddress': str,
    }
)


ShieldDescribeEmergencyContactSettingsResponse = TypedDict(
    'ShieldDescribeEmergencyContactSettingsResponse', {
        'EmergencyContactList': Optional[List[ShieldEmergencyContact]],
    }
)


ShieldProtection = TypedDict(
    'ShieldProtection', {
        'ProtectionId': Optional[str],
        'ProtectionName': Optional[str],
        'ResourceArn': Optional[str],
    }
)


ShieldDescribeProtectionResponse = TypedDict(
    'ShieldDescribeProtectionResponse', {
        'Protection': Optional[ShieldProtection],
    }
)


ShieldLimit = TypedDict(
    'ShieldLimit', {
        'String': Optional[str],
        'Long': Optional[int],
    }
)


ShieldSubscription = TypedDict(
    'ShieldSubscription', {
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'DurationInSeconds': Optional[int],
        'AutoRenew': Optional[str],
        'Limits': Optional[List[ShieldLimit]],
    }
)


ShieldDescribeSubscriptionResponse = TypedDict(
    'ShieldDescribeSubscriptionResponse', {
        'Subscription': Optional[ShieldSubscription],
    }
)


ShieldDisassociateDRTLogBucketResponse = TypedDict(
    'ShieldDisassociateDRTLogBucketResponse', {
    }
)


ShieldDisassociateDRTRoleResponse = TypedDict(
    'ShieldDisassociateDRTRoleResponse', {
    }
)


ShieldGetSubscriptionStateResponse = TypedDict(
    'ShieldGetSubscriptionStateResponse', {
        'SubscriptionState': str,
    }
)


ShieldTimeRange = TypedDict(
    'ShieldTimeRange', {
        'AttackTimestamp': Optional[datetime.datetime],
        'AttackTimestamp': Optional[datetime.datetime],
    }
)


ShieldAttackVectorDescription = TypedDict(
    'ShieldAttackVectorDescription', {
        'String': str,
    }
)


ShieldAttackSummary = TypedDict(
    'ShieldAttackSummary', {
        'String': Optional[str],
        'String': Optional[str],
        'AttackTimestamp': Optional[datetime.datetime],
        'AttackTimestamp': Optional[datetime.datetime],
        'AttackVectorDescriptionList': Optional[List[ShieldAttackVectorDescription]],
    }
)


ShieldListAttacksResponse = TypedDict(
    'ShieldListAttacksResponse', {
        'AttackSummaries': Optional[List[ShieldAttackSummary]],
        'Token': Optional[str],
    }
)


ShieldListProtectionsResponse = TypedDict(
    'ShieldListProtectionsResponse', {
        'Protections': Optional[List[ShieldProtection]],
        'Token': Optional[str],
    }
)


ShieldUpdateEmergencyContactSettingsResponse = TypedDict(
    'ShieldUpdateEmergencyContactSettingsResponse', {
    }
)


ShieldUpdateSubscriptionResponse = TypedDict(
    'ShieldUpdateSubscriptionResponse', {
    }
)


class signer(BaseClient):
    def cancel_signing_profile(self, *,
        profileName: str
    ): ...

    def describe_signing_job(self, *,
        jobId: str
    ) -> signerDescribeSigningJobResponse: ...

    def get_signing_platform(self, *,
        platformId: str
    ) -> signerGetSigningPlatformResponse: ...

    def get_signing_profile(self, *,
        profileName: str
    ) -> signerGetSigningProfileResponse: ...

    def list_signing_jobs(self, *,
        status: str = ...,
        platformId: str = ...,
        requestedBy: str = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> signerListSigningJobsResponse: ...

    def list_signing_platforms(self, *,
        category: str = ...,
        partner: str = ...,
        target: str = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> signerListSigningPlatformsResponse: ...

    def list_signing_profiles(self, *,
        includeCanceled: bool = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> signerListSigningProfilesResponse: ...

    def put_signing_profile(self, *,
        profileName: str,
        signingMaterial: signerSigningMaterial,
        platformId: str,
        overrides: signerSigningPlatformOverrides = ...,
        signingParameters: Dict[str, str] = ...
    ) -> signerPutSigningProfileResponse: ...

    def start_signing_job(self, *,
        source: signerSource,
        destination: signerDestination,
        clientRequestToken: str,
        profileName: str = ...
    ) -> signerStartSigningJobResponse: ...


signerS3Source = TypedDict(
    'signerS3Source', {
        'BucketName': str,
        'Key': str,
        'Version': str,
    }
)


signerSource = TypedDict(
    'signerSource', {
        'S3Source': Optional[signerS3Source],
    }
)


signerSigningMaterial = TypedDict(
    'signerSigningMaterial', {
        'CertificateArn': str,
    }
)


signerSigningConfigurationOverrides = TypedDict(
    'signerSigningConfigurationOverrides', {
        'EncryptionAlgorithm': Optional[str],
        'HashAlgorithm': Optional[str],
    }
)


signerSigningPlatformOverrides = TypedDict(
    'signerSigningPlatformOverrides', {
        'SigningConfigurationOverrides': Optional[signerSigningConfigurationOverrides],
    }
)


signerS3SignedObject = TypedDict(
    'signerS3SignedObject', {
        'BucketName': Optional[str],
        'key': Optional[str],
    }
)


signerSignedObject = TypedDict(
    'signerSignedObject', {
        'S3SignedObject': Optional[signerS3SignedObject],
    }
)


signerDescribeSigningJobResponse = TypedDict(
    'signerDescribeSigningJobResponse', {
        'JobId': Optional[str],
        'Source': Optional[signerSource],
        'SigningMaterial': Optional[signerSigningMaterial],
        'PlatformId': Optional[str],
        'ProfileName': Optional[str],
        'SigningPlatformOverrides': Optional[signerSigningPlatformOverrides],
        'SigningParameters': Optional[Dict[str, str]],
        'CreatedAt': Optional[datetime.datetime],
        'CompletedAt': Optional[datetime.datetime],
        'RequestedBy': Optional[str],
        'SigningStatus': Optional[str],
        'StatusReason': Optional[str],
        'SignedObject': Optional[signerSignedObject],
    }
)


signerEncryptionAlgorithmOptions = TypedDict(
    'signerEncryptionAlgorithmOptions', {
        'EncryptionAlgorithms': List[str],
        'EncryptionAlgorithm': str,
    }
)


signerHashAlgorithmOptions = TypedDict(
    'signerHashAlgorithmOptions', {
        'HashAlgorithms': List[str],
        'HashAlgorithm': str,
    }
)


signerSigningConfiguration = TypedDict(
    'signerSigningConfiguration', {
        'EncryptionAlgorithmOptions': signerEncryptionAlgorithmOptions,
        'HashAlgorithmOptions': signerHashAlgorithmOptions,
    }
)


signerSigningImageFormat = TypedDict(
    'signerSigningImageFormat', {
        'ImageFormats': List[str],
        'ImageFormat': str,
    }
)


signerGetSigningPlatformResponse = TypedDict(
    'signerGetSigningPlatformResponse', {
        'PlatformId': Optional[str],
        'DisplayName': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Category': Optional[str],
        'SigningConfiguration': Optional[signerSigningConfiguration],
        'SigningImageFormat': Optional[signerSigningImageFormat],
        'MaxSizeInMB': Optional[int],
    }
)


signerGetSigningProfileResponse = TypedDict(
    'signerGetSigningProfileResponse', {
        'ProfileName': Optional[str],
        'SigningMaterial': Optional[signerSigningMaterial],
        'PlatformId': Optional[str],
        'SigningPlatformOverrides': Optional[signerSigningPlatformOverrides],
        'SigningParameters': Optional[Dict[str, str]],
        'SigningProfileStatus': Optional[str],
    }
)


signerSigningJob = TypedDict(
    'signerSigningJob', {
        'JobId': Optional[str],
        'Source': Optional[signerSource],
        'SignedObject': Optional[signerSignedObject],
        'SigningMaterial': Optional[signerSigningMaterial],
        'CreatedAt': Optional[datetime.datetime],
        'SigningStatus': Optional[str],
    }
)


signerListSigningJobsResponse = TypedDict(
    'signerListSigningJobsResponse', {
        'SigningJobs': Optional[List[signerSigningJob]],
        'NextToken': Optional[str],
    }
)


signerSigningPlatform = TypedDict(
    'signerSigningPlatform', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Category': Optional[str],
        'SigningConfiguration': Optional[signerSigningConfiguration],
        'SigningImageFormat': Optional[signerSigningImageFormat],
        'MaxSizeInMB': Optional[int],
    }
)


signerListSigningPlatformsResponse = TypedDict(
    'signerListSigningPlatformsResponse', {
        'SigningPlatforms': Optional[List[signerSigningPlatform]],
        'String': Optional[str],
    }
)


signerSigningProfile = TypedDict(
    'signerSigningProfile', {
        'ProfileName': Optional[str],
        'SigningMaterial': Optional[signerSigningMaterial],
        'PlatformId': Optional[str],
        'SigningParameters': Optional[Dict[str, str]],
        'SigningProfileStatus': Optional[str],
    }
)


signerListSigningProfilesResponse = TypedDict(
    'signerListSigningProfilesResponse', {
        'SigningProfiles': Optional[List[signerSigningProfile]],
        'NextToken': Optional[str],
    }
)


signerPutSigningProfileResponse = TypedDict(
    'signerPutSigningProfileResponse', {
        'string': Optional[str],
    }
)


signerS3Destination = TypedDict(
    'signerS3Destination', {
        'BucketName': Optional[str],
        'Prefix': Optional[str],
    }
)


signerDestination = TypedDict(
    'signerDestination', {
        'S3Destination': Optional[signerS3Destination],
    }
)


signerStartSigningJobResponse = TypedDict(
    'signerStartSigningJobResponse', {
        'JobId': Optional[str],
    }
)


class SMS(BaseClient):
    def create_app(self, *,
        name: str = ...,
        description: str = ...,
        roleName: str = ...,
        clientToken: str = ...,
        serverGroups: List[SMSServerGroup] = ...,
        tags: List[SMSTag] = ...
    ) -> SMSCreateAppResponse: ...

    def create_replication_job(self, *,
        serverId: str,
        seedReplicationTime: datetime.datetime,
        frequency: int = ...,
        runOnce: bool = ...,
        licenseType: str = ...,
        roleName: str = ...,
        description: str = ...,
        numberOfRecentAmisToKeep: int = ...,
        encrypted: bool = ...,
        kmsKeyId: str = ...
    ) -> SMSCreateReplicationJobResponse: ...

    def delete_app(self, *,
        appId: str = ...,
        forceStopAppReplication: bool = ...,
        forceTerminateApp: bool = ...
    ) -> SMSDeleteAppResponse: ...

    def delete_app_launch_configuration(self, *,
        appId: str = ...
    ) -> SMSDeleteAppLaunchConfigurationResponse: ...

    def delete_app_replication_configuration(self, *,
        appId: str = ...
    ) -> SMSDeleteAppReplicationConfigurationResponse: ...

    def delete_replication_job(self, *,
        replicationJobId: str
    ) -> SMSDeleteReplicationJobResponse: ...

    def delete_server_catalog(self) -> SMSDeleteServerCatalogResponse: ...

    def disassociate_connector(self, *,
        connectorId: str
    ) -> SMSDisassociateConnectorResponse: ...

    def generate_change_set(self, *,
        appId: str = ...,
        changesetFormat: str = ...
    ) -> SMSGenerateChangeSetResponse: ...

    def generate_template(self, *,
        appId: str = ...,
        templateFormat: str = ...
    ) -> SMSGenerateTemplateResponse: ...

    def get_app(self, *,
        appId: str = ...
    ) -> SMSGetAppResponse: ...

    def get_app_launch_configuration(self, *,
        appId: str = ...
    ) -> SMSGetAppLaunchConfigurationResponse: ...

    def get_app_replication_configuration(self, *,
        appId: str = ...
    ) -> SMSGetAppReplicationConfigurationResponse: ...

    def get_connectors(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> SMSGetConnectorsResponse: ...

    def get_replication_jobs(self, *,
        replicationJobId: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> SMSGetReplicationJobsResponse: ...

    def get_replication_runs(self, *,
        replicationJobId: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> SMSGetReplicationRunsResponse: ...

    def get_servers(self, *,
        nextToken: str = ...,
        maxResults: int = ...,
        vmServerAddressList: List[SMSVmServerAddress] = ...
    ) -> SMSGetServersResponse: ...

    def import_server_catalog(self) -> SMSImportServerCatalogResponse: ...

    def launch_app(self, *,
        appId: str = ...
    ) -> SMSLaunchAppResponse: ...

    def list_apps(self, *,
        appIds: List[str] = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> SMSListAppsResponse: ...

    def put_app_launch_configuration(self, *,
        appId: str = ...,
        roleName: str = ...,
        serverGroupLaunchConfigurations: List[SMSServerGroupLaunchConfiguration] = ...
    ) -> SMSPutAppLaunchConfigurationResponse: ...

    def put_app_replication_configuration(self, *,
        appId: str = ...,
        serverGroupReplicationConfigurations: List[SMSServerGroupReplicationConfiguration] = ...
    ) -> SMSPutAppReplicationConfigurationResponse: ...

    def start_app_replication(self, *,
        appId: str = ...
    ) -> SMSStartAppReplicationResponse: ...

    def start_on_demand_replication_run(self, *,
        replicationJobId: str,
        description: str = ...
    ) -> SMSStartOnDemandReplicationRunResponse: ...

    def stop_app_replication(self, *,
        appId: str = ...
    ) -> SMSStopAppReplicationResponse: ...

    def terminate_app(self, *,
        appId: str = ...
    ) -> SMSTerminateAppResponse: ...

    def update_app(self, *,
        appId: str = ...,
        name: str = ...,
        description: str = ...,
        roleName: str = ...,
        serverGroups: List[SMSServerGroup] = ...,
        tags: List[SMSTag] = ...
    ) -> SMSUpdateAppResponse: ...

    def update_replication_job(self, *,
        replicationJobId: str,
        frequency: int = ...,
        nextReplicationRunStartTime: datetime.datetime = ...,
        licenseType: str = ...,
        roleName: str = ...,
        description: str = ...,
        numberOfRecentAmisToKeep: int = ...,
        encrypted: bool = ...,
        kmsKeyId: str = ...
    ) -> SMSUpdateReplicationJobResponse: ...


SMSVmServerAddress = TypedDict(
    'SMSVmServerAddress', {
        'VmManagerId': Optional[str],
        'VmId': Optional[str],
    }
)


SMSVmServer = TypedDict(
    'SMSVmServer', {
        'VmServerAddress': Optional[SMSVmServerAddress],
        'VmName': Optional[str],
        'VmManagerName': Optional[str],
        'VmManagerType': Optional[str],
        'VmPath': Optional[str],
    }
)


SMSServer = TypedDict(
    'SMSServer', {
        'ServerId': Optional[str],
        'ServerType': Optional[str],
        'VmServer': Optional[SMSVmServer],
        'ReplicationJobId': Optional[str],
        'ReplicationJobTerminated': Optional[bool],
    }
)


SMSServerGroup = TypedDict(
    'SMSServerGroup', {
        'ServerGroupId': Optional[str],
        'ServerGroupName': Optional[str],
        'ServerList': Optional[List[SMSServer]],
    }
)


SMSTag = TypedDict(
    'SMSTag', {
        'TagKey': Optional[str],
        'TagValue': Optional[str],
    }
)


SMSLaunchDetails = TypedDict(
    'SMSLaunchDetails', {
        'Timestamp': Optional[datetime.datetime],
        'StackName': Optional[str],
        'StackId': Optional[str],
    }
)


SMSAppSummary = TypedDict(
    'SMSAppSummary', {
        'AppId': Optional[str],
        'AppName': Optional[str],
        'AppDescription': Optional[str],
        'AppStatus': Optional[str],
        'AppStatusMessage': Optional[str],
        'AppReplicationStatus': Optional[str],
        'AppReplicationStatusMessage': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'AppLaunchStatus': Optional[str],
        'AppLaunchStatusMessage': Optional[str],
        'LaunchDetails': Optional[SMSLaunchDetails],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'RoleName': Optional[str],
        'TotalServerGroups': Optional[int],
        'TotalServers': Optional[int],
    }
)


SMSCreateAppResponse = TypedDict(
    'SMSCreateAppResponse', {
        'AppSummary': Optional[SMSAppSummary],
        'ServerGroups': Optional[List[SMSServerGroup]],
        'Tags': Optional[List[SMSTag]],
    }
)


SMSCreateReplicationJobResponse = TypedDict(
    'SMSCreateReplicationJobResponse', {
        'ReplicationJobId': Optional[str],
    }
)


SMSDeleteAppResponse = TypedDict(
    'SMSDeleteAppResponse', {
    }
)


SMSDeleteAppLaunchConfigurationResponse = TypedDict(
    'SMSDeleteAppLaunchConfigurationResponse', {
    }
)


SMSDeleteAppReplicationConfigurationResponse = TypedDict(
    'SMSDeleteAppReplicationConfigurationResponse', {
    }
)


SMSDeleteReplicationJobResponse = TypedDict(
    'SMSDeleteReplicationJobResponse', {
    }
)


SMSDeleteServerCatalogResponse = TypedDict(
    'SMSDeleteServerCatalogResponse', {
    }
)


SMSDisassociateConnectorResponse = TypedDict(
    'SMSDisassociateConnectorResponse', {
    }
)


SMSS3Location = TypedDict(
    'SMSS3Location', {
        'BucketName': Optional[str],
        'KeyName': Optional[str],
    }
)


SMSGenerateChangeSetResponse = TypedDict(
    'SMSGenerateChangeSetResponse', {
        'S3Location': Optional[SMSS3Location],
    }
)


SMSGenerateTemplateResponse = TypedDict(
    'SMSGenerateTemplateResponse', {
        'S3Location': Optional[SMSS3Location],
    }
)


SMSGetAppResponse = TypedDict(
    'SMSGetAppResponse', {
        'AppSummary': Optional[SMSAppSummary],
        'ServerGroups': Optional[List[SMSServerGroup]],
        'Tags': Optional[List[SMSTag]],
    }
)


SMSUserData = TypedDict(
    'SMSUserData', {
        'S3Location': Optional[SMSS3Location],
    }
)


SMSServerLaunchConfiguration = TypedDict(
    'SMSServerLaunchConfiguration', {
        'Server': Optional[SMSServer],
        'LogicalId': Optional[str],
        'VPC': Optional[str],
        'Subnet': Optional[str],
        'SecurityGroup': Optional[str],
        'EC2KeyName': Optional[str],
        'UserData': Optional[SMSUserData],
        'InstanceType': Optional[str],
        'AssociatePublicIpAddress': Optional[bool],
    }
)


SMSServerGroupLaunchConfiguration = TypedDict(
    'SMSServerGroupLaunchConfiguration', {
        'ServerGroupId': Optional[str],
        'LaunchOrder': Optional[int],
        'ServerLaunchConfigurations': Optional[List[SMSServerLaunchConfiguration]],
    }
)


SMSGetAppLaunchConfigurationResponse = TypedDict(
    'SMSGetAppLaunchConfigurationResponse', {
        'AppId': Optional[str],
        'RoleName': Optional[str],
        'ServerGroupLaunchConfigurations': Optional[List[SMSServerGroupLaunchConfiguration]],
    }
)


SMSServerReplicationParameters = TypedDict(
    'SMSServerReplicationParameters', {
        'Timestamp': Optional[datetime.datetime],
        'Frequency': Optional[int],
        'RunOnce': Optional[bool],
        'LicenseType': Optional[str],
        'NumberOfRecentAmisToKeep': Optional[int],
        'Encrypted': Optional[bool],
        'KmsKeyId': Optional[str],
    }
)


SMSServerReplicationConfiguration = TypedDict(
    'SMSServerReplicationConfiguration', {
        'Server': Optional[SMSServer],
        'ServerReplicationParameters': Optional[SMSServerReplicationParameters],
    }
)


SMSServerGroupReplicationConfiguration = TypedDict(
    'SMSServerGroupReplicationConfiguration', {
        'ServerGroupId': Optional[str],
        'ServerReplicationConfigurations': Optional[List[SMSServerReplicationConfiguration]],
    }
)


SMSGetAppReplicationConfigurationResponse = TypedDict(
    'SMSGetAppReplicationConfigurationResponse', {
        'ServerGroupReplicationConfigurations': Optional[List[SMSServerGroupReplicationConfiguration]],
    }
)


SMSConnector = TypedDict(
    'SMSConnector', {
        'ConnectorId': Optional[str],
        'ConnectorVersion': Optional[str],
        'ConnectorStatus': Optional[str],
        'ConnectorCapabilityList': Optional[List[str]],
        'VmManagerName': Optional[str],
        'VmManagerType': Optional[str],
        'VmManagerId': Optional[str],
        'IpAddress': Optional[str],
        'MacAddress': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


SMSGetConnectorsResponse = TypedDict(
    'SMSGetConnectorsResponse', {
        'ConnectorList': Optional[List[SMSConnector]],
        'NextToken': Optional[str],
    }
)


SMSReplicationRunStageDetails = TypedDict(
    'SMSReplicationRunStageDetails', {
        'ReplicationRunStage': Optional[str],
        'ReplicationRunStageProgress': Optional[str],
    }
)


SMSReplicationRun = TypedDict(
    'SMSReplicationRun', {
        'ReplicationRunId': Optional[str],
        'ReplicationRunState': Optional[str],
        'ReplicationRunType': Optional[str],
        'ReplicationRunStageDetails': Optional[SMSReplicationRunStageDetails],
        'ReplicationRunStatusMessage': Optional[str],
        'AmiId': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'Description': Optional[str],
        'Encrypted': Optional[bool],
        'KmsKeyId': Optional[str],
    }
)


SMSReplicationJob = TypedDict(
    'SMSReplicationJob', {
        'ReplicationJobId': Optional[str],
        'ServerId': Optional[str],
        'ServerType': Optional[str],
        'VmServer': Optional[SMSVmServer],
        'Timestamp': Optional[datetime.datetime],
        'Frequency': Optional[int],
        'RunOnce': Optional[bool],
        'Timestamp': Optional[datetime.datetime],
        'LicenseType': Optional[str],
        'RoleName': Optional[str],
        'AmiId': Optional[str],
        'ReplicationJobState': Optional[str],
        'ReplicationJobStatusMessage': Optional[str],
        'Description': Optional[str],
        'NumberOfRecentAmisToKeep': Optional[int],
        'Encrypted': Optional[bool],
        'KmsKeyId': Optional[str],
        'ReplicationRunList': Optional[List[SMSReplicationRun]],
    }
)


SMSGetReplicationJobsResponse = TypedDict(
    'SMSGetReplicationJobsResponse', {
        'ReplicationJobList': Optional[List[SMSReplicationJob]],
        'NextToken': Optional[str],
    }
)


SMSGetReplicationRunsResponse = TypedDict(
    'SMSGetReplicationRunsResponse', {
        'ReplicationJob': Optional[SMSReplicationJob],
        'ReplicationRunList': Optional[List[SMSReplicationRun]],
        'NextToken': Optional[str],
    }
)


SMSGetServersResponse = TypedDict(
    'SMSGetServersResponse', {
        'Timestamp': Optional[datetime.datetime],
        'ServerCatalogStatus': Optional[str],
        'ServerList': Optional[List[SMSServer]],
        'NextToken': Optional[str],
    }
)


SMSImportServerCatalogResponse = TypedDict(
    'SMSImportServerCatalogResponse', {
    }
)


SMSLaunchAppResponse = TypedDict(
    'SMSLaunchAppResponse', {
    }
)


SMSListAppsResponse = TypedDict(
    'SMSListAppsResponse', {
        'Apps': Optional[List[SMSAppSummary]],
        'NextToken': Optional[str],
    }
)


SMSPutAppLaunchConfigurationResponse = TypedDict(
    'SMSPutAppLaunchConfigurationResponse', {
    }
)


SMSPutAppReplicationConfigurationResponse = TypedDict(
    'SMSPutAppReplicationConfigurationResponse', {
    }
)


SMSStartAppReplicationResponse = TypedDict(
    'SMSStartAppReplicationResponse', {
    }
)


SMSStartOnDemandReplicationRunResponse = TypedDict(
    'SMSStartOnDemandReplicationRunResponse', {
        'ReplicationRunId': Optional[str],
    }
)


SMSStopAppReplicationResponse = TypedDict(
    'SMSStopAppReplicationResponse', {
    }
)


SMSTerminateAppResponse = TypedDict(
    'SMSTerminateAppResponse', {
    }
)


SMSUpdateAppResponse = TypedDict(
    'SMSUpdateAppResponse', {
        'AppSummary': Optional[SMSAppSummary],
        'ServerGroups': Optional[List[SMSServerGroup]],
        'Tags': Optional[List[SMSTag]],
    }
)


SMSUpdateReplicationJobResponse = TypedDict(
    'SMSUpdateReplicationJobResponse', {
    }
)


class PinpointSMSVoice(BaseClient):
    def create_configuration_set(self, *,
        ConfigurationSetName: str = ...
    ) -> PinpointSMSVoiceCreateConfigurationSetResponse: ...

    def create_configuration_set_event_destination(self, *,
        ConfigurationSetName: str,
        EventDestination: PinpointSMSVoiceEventDestinationDefinition = ...,
        EventDestinationName: str = ...
    ) -> PinpointSMSVoiceCreateConfigurationSetEventDestinationResponse: ...

    def delete_configuration_set(self, *,
        ConfigurationSetName: str
    ) -> PinpointSMSVoiceDeleteConfigurationSetResponse: ...

    def delete_configuration_set_event_destination(self, *,
        ConfigurationSetName: str,
        EventDestinationName: str
    ) -> PinpointSMSVoiceDeleteConfigurationSetEventDestinationResponse: ...

    def get_configuration_set_event_destinations(self, *,
        ConfigurationSetName: str
    ) -> PinpointSMSVoiceGetConfigurationSetEventDestinationsResponse: ...

    def list_configuration_sets(self, *,
        NextToken: str = ...,
        PageSize: str = ...
    ) -> PinpointSMSVoiceListConfigurationSetsResponse: ...

    def send_voice_message(self, *,
        CallerId: str = ...,
        ConfigurationSetName: str = ...,
        Content: PinpointSMSVoiceVoiceMessageContent = ...,
        DestinationPhoneNumber: str = ...,
        OriginationPhoneNumber: str = ...
    ) -> PinpointSMSVoiceSendVoiceMessageResponse: ...

    def update_configuration_set_event_destination(self, *,
        ConfigurationSetName: str,
        EventDestinationName: str,
        EventDestination: PinpointSMSVoiceEventDestinationDefinition = ...
    ) -> PinpointSMSVoiceUpdateConfigurationSetEventDestinationResponse: ...


PinpointSMSVoiceCreateConfigurationSetResponse = TypedDict(
    'PinpointSMSVoiceCreateConfigurationSetResponse', {
    }
)


PinpointSMSVoiceCloudWatchLogsDestination = TypedDict(
    'PinpointSMSVoiceCloudWatchLogsDestination', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


PinpointSMSVoiceKinesisFirehoseDestination = TypedDict(
    'PinpointSMSVoiceKinesisFirehoseDestination', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


PinpointSMSVoiceSnsDestination = TypedDict(
    'PinpointSMSVoiceSnsDestination', {
        'String': Optional[str],
    }
)


PinpointSMSVoiceEventDestinationDefinition = TypedDict(
    'PinpointSMSVoiceEventDestinationDefinition', {
        'CloudWatchLogsDestination': Optional[PinpointSMSVoiceCloudWatchLogsDestination],
        'Boolean': Optional[bool],
        'KinesisFirehoseDestination': Optional[PinpointSMSVoiceKinesisFirehoseDestination],
        'EventTypes': Optional[List[str]],
        'SnsDestination': Optional[PinpointSMSVoiceSnsDestination],
    }
)


PinpointSMSVoiceCreateConfigurationSetEventDestinationResponse = TypedDict(
    'PinpointSMSVoiceCreateConfigurationSetEventDestinationResponse', {
    }
)


PinpointSMSVoiceDeleteConfigurationSetResponse = TypedDict(
    'PinpointSMSVoiceDeleteConfigurationSetResponse', {
    }
)


PinpointSMSVoiceDeleteConfigurationSetEventDestinationResponse = TypedDict(
    'PinpointSMSVoiceDeleteConfigurationSetEventDestinationResponse', {
    }
)


PinpointSMSVoiceEventDestination = TypedDict(
    'PinpointSMSVoiceEventDestination', {
        'CloudWatchLogsDestination': Optional[PinpointSMSVoiceCloudWatchLogsDestination],
        'Boolean': Optional[bool],
        'KinesisFirehoseDestination': Optional[PinpointSMSVoiceKinesisFirehoseDestination],
        'EventTypes': Optional[List[str]],
        'String': Optional[str],
        'SnsDestination': Optional[PinpointSMSVoiceSnsDestination],
    }
)


PinpointSMSVoiceGetConfigurationSetEventDestinationsResponse = TypedDict(
    'PinpointSMSVoiceGetConfigurationSetEventDestinationsResponse', {
        'EventDestinations': Optional[List[PinpointSMSVoiceEventDestination]],
    }
)


PinpointSMSVoiceListConfigurationSetsResponse = TypedDict(
    'PinpointSMSVoiceListConfigurationSetsResponse', {
        'ConfigurationSets': Optional[List[str]],
        'NextTokenString': Optional[str],
    }
)


PinpointSMSVoiceCallInstructionsMessageType = TypedDict(
    'PinpointSMSVoiceCallInstructionsMessageType', {
        'NonEmptyString': Optional[str],
    }
)


PinpointSMSVoicePlainTextMessageType = TypedDict(
    'PinpointSMSVoicePlainTextMessageType', {
        'String': Optional[str],
        'NonEmptyString': Optional[str],
        'String': Optional[str],
    }
)


PinpointSMSVoiceSSMLMessageType = TypedDict(
    'PinpointSMSVoiceSSMLMessageType', {
        'String': Optional[str],
        'NonEmptyString': Optional[str],
        'String': Optional[str],
    }
)


PinpointSMSVoiceVoiceMessageContent = TypedDict(
    'PinpointSMSVoiceVoiceMessageContent', {
        'CallInstructionsMessageType': Optional[PinpointSMSVoiceCallInstructionsMessageType],
        'PlainTextMessageType': Optional[PinpointSMSVoicePlainTextMessageType],
        'SSMLMessageType': Optional[PinpointSMSVoiceSSMLMessageType],
    }
)


PinpointSMSVoiceSendVoiceMessageResponse = TypedDict(
    'PinpointSMSVoiceSendVoiceMessageResponse', {
        'String': Optional[str],
    }
)


PinpointSMSVoiceUpdateConfigurationSetEventDestinationResponse = TypedDict(
    'PinpointSMSVoiceUpdateConfigurationSetEventDestinationResponse', {
    }
)


class Snowball(BaseClient):
    def cancel_cluster(self, *,
        ClusterId: str
    ) -> SnowballCancelClusterResult: ...

    def cancel_job(self, *,
        JobId: str
    ) -> SnowballCancelJobResult: ...

    def create_address(self, *,
        Address: SnowballAddress
    ) -> SnowballCreateAddressResult: ...

    def create_cluster(self, *,
        JobType: str,
        Resources: SnowballJobResource,
        AddressId: str,
        RoleARN: str,
        ShippingOption: str,
        Description: str = ...,
        KmsKeyARN: str = ...,
        SnowballType: str = ...,
        Notification: SnowballNotification = ...,
        ForwardingAddressId: str = ...
    ) -> SnowballCreateClusterResult: ...

    def create_job(self, *,
        JobType: str = ...,
        Resources: SnowballJobResource = ...,
        Description: str = ...,
        AddressId: str = ...,
        KmsKeyARN: str = ...,
        RoleARN: str = ...,
        SnowballCapacityPreference: str = ...,
        ShippingOption: str = ...,
        Notification: SnowballNotification = ...,
        ClusterId: str = ...,
        SnowballType: str = ...,
        ForwardingAddressId: str = ...
    ) -> SnowballCreateJobResult: ...

    def describe_address(self, *,
        AddressId: str
    ) -> SnowballDescribeAddressResult: ...

    def describe_addresses(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SnowballDescribeAddressesResult: ...

    def describe_cluster(self, *,
        ClusterId: str
    ) -> SnowballDescribeClusterResult: ...

    def describe_job(self, *,
        JobId: str
    ) -> SnowballDescribeJobResult: ...

    def get_job_manifest(self, *,
        JobId: str
    ) -> SnowballGetJobManifestResult: ...

    def get_job_unlock_code(self, *,
        JobId: str
    ) -> SnowballGetJobUnlockCodeResult: ...

    def get_snowball_usage(self) -> SnowballGetSnowballUsageResult: ...

    def list_cluster_jobs(self, *,
        ClusterId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SnowballListClusterJobsResult: ...

    def list_clusters(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SnowballListClustersResult: ...

    def list_compatible_images(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SnowballListCompatibleImagesResult: ...

    def list_jobs(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SnowballListJobsResult: ...

    def update_cluster(self, *,
        ClusterId: str,
        RoleARN: str = ...,
        Description: str = ...,
        Resources: SnowballJobResource = ...,
        AddressId: str = ...,
        ShippingOption: str = ...,
        Notification: SnowballNotification = ...,
        ForwardingAddressId: str = ...
    ) -> SnowballUpdateClusterResult: ...

    def update_job(self, *,
        JobId: str,
        RoleARN: str = ...,
        Notification: SnowballNotification = ...,
        Resources: SnowballJobResource = ...,
        AddressId: str = ...,
        ShippingOption: str = ...,
        Description: str = ...,
        SnowballCapacityPreference: str = ...,
        ForwardingAddressId: str = ...
    ) -> SnowballUpdateJobResult: ...


SnowballCancelClusterResult = TypedDict(
    'SnowballCancelClusterResult', {
    }
)


SnowballCancelJobResult = TypedDict(
    'SnowballCancelJobResult', {
    }
)


SnowballAddress = TypedDict(
    'SnowballAddress', {
        'AddressId': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
    }
)


SnowballCreateAddressResult = TypedDict(
    'SnowballCreateAddressResult', {
        'String': Optional[str],
    }
)


SnowballKeyRange = TypedDict(
    'SnowballKeyRange', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


SnowballS3Resource = TypedDict(
    'SnowballS3Resource', {
        'ResourceARN': Optional[str],
        'KeyRange': Optional[SnowballKeyRange],
    }
)


SnowballEventTriggerDefinition = TypedDict(
    'SnowballEventTriggerDefinition', {
        'ResourceARN': Optional[str],
    }
)


SnowballLambdaResource = TypedDict(
    'SnowballLambdaResource', {
        'ResourceARN': Optional[str],
        'EventTriggerDefinitionList': Optional[List[SnowballEventTriggerDefinition]],
    }
)


SnowballEc2AmiResource = TypedDict(
    'SnowballEc2AmiResource', {
        'AmiId': str,
        'String': Optional[str],
    }
)


SnowballJobResource = TypedDict(
    'SnowballJobResource', {
        'S3ResourceList': Optional[List[SnowballS3Resource]],
        'LambdaResourceList': Optional[List[SnowballLambdaResource]],
        'Ec2AmiResourceList': Optional[List[SnowballEc2AmiResource]],
    }
)


SnowballNotification = TypedDict(
    'SnowballNotification', {
        'SnsTopicARN': Optional[str],
        'JobStateList': Optional[List[str]],
        'Boolean': Optional[bool],
    }
)


SnowballCreateClusterResult = TypedDict(
    'SnowballCreateClusterResult', {
        'ClusterId': Optional[str],
    }
)


SnowballCreateJobResult = TypedDict(
    'SnowballCreateJobResult', {
        'JobId': Optional[str],
    }
)


SnowballDescribeAddressResult = TypedDict(
    'SnowballDescribeAddressResult', {
        'Address': Optional[SnowballAddress],
    }
)


SnowballDescribeAddressesResult = TypedDict(
    'SnowballDescribeAddressesResult', {
        'AddressList': Optional[List[SnowballAddress]],
        'String': Optional[str],
    }
)


SnowballClusterMetadata = TypedDict(
    'SnowballClusterMetadata', {
        'String': Optional[str],
        'String': Optional[str],
        'KmsKeyARN': Optional[str],
        'RoleARN': Optional[str],
        'ClusterState': Optional[str],
        'JobType': Optional[str],
        'SnowballType': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'JobResource': Optional[SnowballJobResource],
        'AddressId': Optional[str],
        'ShippingOption': Optional[str],
        'Notification': Optional[SnowballNotification],
        'AddressId': Optional[str],
    }
)


SnowballDescribeClusterResult = TypedDict(
    'SnowballDescribeClusterResult', {
        'ClusterMetadata': Optional[SnowballClusterMetadata],
    }
)


SnowballShipment = TypedDict(
    'SnowballShipment', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


SnowballShippingDetails = TypedDict(
    'SnowballShippingDetails', {
        'ShippingOption': Optional[str],
        'Shipment': Optional[SnowballShipment],
        'Shipment': Optional[SnowballShipment],
    }
)


SnowballDataTransfer = TypedDict(
    'SnowballDataTransfer', {
        'Long': Optional[int],
        'Long': Optional[int],
        'Long': Optional[int],
        'Long': Optional[int],
    }
)


SnowballJobLogs = TypedDict(
    'SnowballJobLogs', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


SnowballJobMetadata = TypedDict(
    'SnowballJobMetadata', {
        'String': Optional[str],
        'JobState': Optional[str],
        'JobType': Optional[str],
        'SnowballType': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'JobResource': Optional[SnowballJobResource],
        'String': Optional[str],
        'KmsKeyARN': Optional[str],
        'RoleARN': Optional[str],
        'AddressId': Optional[str],
        'ShippingDetails': Optional[SnowballShippingDetails],
        'SnowballCapacity': Optional[str],
        'Notification': Optional[SnowballNotification],
        'DataTransfer': Optional[SnowballDataTransfer],
        'JobLogs': Optional[SnowballJobLogs],
        'String': Optional[str],
        'AddressId': Optional[str],
    }
)


SnowballDescribeJobResult = TypedDict(
    'SnowballDescribeJobResult', {
        'JobMetadata': Optional[SnowballJobMetadata],
        'JobMetadataList': Optional[List[SnowballJobMetadata]],
    }
)


SnowballGetJobManifestResult = TypedDict(
    'SnowballGetJobManifestResult', {
        'String': Optional[str],
    }
)


SnowballGetJobUnlockCodeResult = TypedDict(
    'SnowballGetJobUnlockCodeResult', {
        'String': Optional[str],
    }
)


SnowballGetSnowballUsageResult = TypedDict(
    'SnowballGetSnowballUsageResult', {
        'Integer': Optional[int],
        'Integer': Optional[int],
    }
)


SnowballJobListEntry = TypedDict(
    'SnowballJobListEntry', {
        'String': Optional[str],
        'JobState': Optional[str],
        'Boolean': Optional[bool],
        'JobType': Optional[str],
        'SnowballType': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'String': Optional[str],
    }
)


SnowballListClusterJobsResult = TypedDict(
    'SnowballListClusterJobsResult', {
        'JobListEntryList': Optional[List[SnowballJobListEntry]],
        'String': Optional[str],
    }
)


SnowballClusterListEntry = TypedDict(
    'SnowballClusterListEntry', {
        'String': Optional[str],
        'ClusterState': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'String': Optional[str],
    }
)


SnowballListClustersResult = TypedDict(
    'SnowballListClustersResult', {
        'ClusterListEntryList': Optional[List[SnowballClusterListEntry]],
        'String': Optional[str],
    }
)


SnowballCompatibleImage = TypedDict(
    'SnowballCompatibleImage', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


SnowballListCompatibleImagesResult = TypedDict(
    'SnowballListCompatibleImagesResult', {
        'CompatibleImageList': Optional[List[SnowballCompatibleImage]],
        'String': Optional[str],
    }
)


SnowballListJobsResult = TypedDict(
    'SnowballListJobsResult', {
        'JobListEntryList': Optional[List[SnowballJobListEntry]],
        'String': Optional[str],
    }
)


SnowballUpdateClusterResult = TypedDict(
    'SnowballUpdateClusterResult', {
    }
)


SnowballUpdateJobResult = TypedDict(
    'SnowballUpdateJobResult', {
    }
)


class SNS(BaseClient):
    def add_permission(self, *,
        TopicArn: str,
        Label: str,
        AWSAccountId: List[str],
        ActionName: List[str]
    ): ...

    def check_if_phone_number_is_opted_out(self, *,
        phoneNumber: str
    ) -> SNSCheckIfPhoneNumberIsOptedOutResponse: ...

    def confirm_subscription(self, *,
        TopicArn: str,
        Token: str,
        AuthenticateOnUnsubscribe: str = ...
    ) -> SNSConfirmSubscriptionResponse: ...

    def create_platform_application(self, *,
        Name: str,
        Platform: str,
        Attributes: Dict[str, str]
    ) -> SNSCreatePlatformApplicationResponse: ...

    def create_platform_endpoint(self, *,
        PlatformApplicationArn: str,
        Token: str,
        CustomUserData: str = ...,
        Attributes: Dict[str, str] = ...
    ) -> SNSCreateEndpointResponse: ...

    def create_topic(self, *,
        Name: str,
        Attributes: Dict[str, str] = ...,
        Tags: List[SNSTag] = ...
    ) -> SNSCreateTopicResponse: ...

    def delete_endpoint(self, *,
        EndpointArn: str
    ): ...

    def delete_platform_application(self, *,
        PlatformApplicationArn: str
    ): ...

    def delete_topic(self, *,
        TopicArn: str
    ): ...

    def get_endpoint_attributes(self, *,
        EndpointArn: str
    ) -> SNSGetEndpointAttributesResponse: ...

    def get_platform_application_attributes(self, *,
        PlatformApplicationArn: str
    ) -> SNSGetPlatformApplicationAttributesResponse: ...

    def get_sms_attributes(self, *,
        attributes: List[str] = ...
    ) -> SNSGetSMSAttributesResponse: ...

    def get_subscription_attributes(self, *,
        SubscriptionArn: str
    ) -> SNSGetSubscriptionAttributesResponse: ...

    def get_topic_attributes(self, *,
        TopicArn: str
    ) -> SNSGetTopicAttributesResponse: ...

    def list_endpoints_by_platform_application(self, *,
        PlatformApplicationArn: str,
        NextToken: str = ...
    ) -> SNSListEndpointsByPlatformApplicationResponse: ...

    def list_phone_numbers_opted_out(self, *,
        nextToken: str = ...
    ) -> SNSListPhoneNumbersOptedOutResponse: ...

    def list_platform_applications(self, *,
        NextToken: str = ...
    ) -> SNSListPlatformApplicationsResponse: ...

    def list_subscriptions(self, *,
        NextToken: str = ...
    ) -> SNSListSubscriptionsResponse: ...

    def list_subscriptions_by_topic(self, *,
        TopicArn: str,
        NextToken: str = ...
    ) -> SNSListSubscriptionsByTopicResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> SNSListTagsForResourceResponse: ...

    def list_topics(self, *,
        NextToken: str = ...
    ) -> SNSListTopicsResponse: ...

    def opt_in_phone_number(self, *,
        phoneNumber: str
    ) -> SNSOptInPhoneNumberResponse: ...

    def publish(self, *,
        Message: str,
        TopicArn: str = ...,
        TargetArn: str = ...,
        PhoneNumber: str = ...,
        Subject: str = ...,
        MessageStructure: str = ...,
        MessageAttributes: Dict[str, SNSMessageAttributeValue] = ...
    ) -> SNSPublishResponse: ...

    def remove_permission(self, *,
        TopicArn: str,
        Label: str
    ): ...

    def set_endpoint_attributes(self, *,
        EndpointArn: str,
        Attributes: Dict[str, str]
    ): ...

    def set_platform_application_attributes(self, *,
        PlatformApplicationArn: str,
        Attributes: Dict[str, str]
    ): ...

    def set_sms_attributes(self, *,
        attributes: Dict[str, str]
    ) -> SNSSetSMSAttributesResponse: ...

    def set_subscription_attributes(self, *,
        SubscriptionArn: str,
        AttributeName: str,
        AttributeValue: str = ...
    ): ...

    def set_topic_attributes(self, *,
        TopicArn: str,
        AttributeName: str,
        AttributeValue: str = ...
    ): ...

    def subscribe(self, *,
        TopicArn: str,
        Protocol: str,
        Endpoint: str = ...,
        Attributes: Dict[str, str] = ...,
        ReturnSubscriptionArn: bool = ...
    ) -> SNSSubscribeResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: List[SNSTag]
    ) -> SNSTagResourceResponse: ...

    def unsubscribe(self, *,
        SubscriptionArn: str
    ): ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ) -> SNSUntagResourceResponse: ...


SNSCheckIfPhoneNumberIsOptedOutResponse = TypedDict(
    'SNSCheckIfPhoneNumberIsOptedOutResponse', {
        'boolean': Optional[bool],
    }
)


SNSConfirmSubscriptionResponse = TypedDict(
    'SNSConfirmSubscriptionResponse', {
        'subscriptionARN': Optional[str],
    }
)


SNSCreatePlatformApplicationResponse = TypedDict(
    'SNSCreatePlatformApplicationResponse', {
        'String': Optional[str],
    }
)


SNSCreateEndpointResponse = TypedDict(
    'SNSCreateEndpointResponse', {
        'String': Optional[str],
    }
)


SNSTag = TypedDict(
    'SNSTag', {
        'TagKey': str,
        'TagValue': str,
    }
)


SNSCreateTopicResponse = TypedDict(
    'SNSCreateTopicResponse', {
        'topicARN': Optional[str],
    }
)


SNSGetEndpointAttributesResponse = TypedDict(
    'SNSGetEndpointAttributesResponse', {
        'MapStringToString': Optional[Dict[str, str]],
    }
)


SNSGetPlatformApplicationAttributesResponse = TypedDict(
    'SNSGetPlatformApplicationAttributesResponse', {
        'MapStringToString': Optional[Dict[str, str]],
    }
)


SNSGetSMSAttributesResponse = TypedDict(
    'SNSGetSMSAttributesResponse', {
        'MapStringToString': Optional[Dict[str, str]],
    }
)


SNSGetSubscriptionAttributesResponse = TypedDict(
    'SNSGetSubscriptionAttributesResponse', {
        'SubscriptionAttributesMap': Optional[Dict[str, str]],
    }
)


SNSGetTopicAttributesResponse = TypedDict(
    'SNSGetTopicAttributesResponse', {
        'TopicAttributesMap': Optional[Dict[str, str]],
    }
)


SNSEndpoint = TypedDict(
    'SNSEndpoint', {
        'String': Optional[str],
        'MapStringToString': Optional[Dict[str, str]],
    }
)


SNSListEndpointsByPlatformApplicationResponse = TypedDict(
    'SNSListEndpointsByPlatformApplicationResponse', {
        'ListOfEndpoints': Optional[List[SNSEndpoint]],
        'String': Optional[str],
    }
)


SNSListPhoneNumbersOptedOutResponse = TypedDict(
    'SNSListPhoneNumbersOptedOutResponse', {
        'PhoneNumberList': Optional[List[str]],
        'string': Optional[str],
    }
)


SNSPlatformApplication = TypedDict(
    'SNSPlatformApplication', {
        'String': Optional[str],
        'MapStringToString': Optional[Dict[str, str]],
    }
)


SNSListPlatformApplicationsResponse = TypedDict(
    'SNSListPlatformApplicationsResponse', {
        'ListOfPlatformApplications': Optional[List[SNSPlatformApplication]],
        'String': Optional[str],
    }
)


SNSSubscription = TypedDict(
    'SNSSubscription', {
        'subscriptionARN': Optional[str],
        'account': Optional[str],
        'protocol': Optional[str],
        'endpoint': Optional[str],
        'topicARN': Optional[str],
    }
)


SNSListSubscriptionsResponse = TypedDict(
    'SNSListSubscriptionsResponse', {
        'SubscriptionsList': Optional[List[SNSSubscription]],
        'nextToken': Optional[str],
    }
)


SNSListSubscriptionsByTopicResponse = TypedDict(
    'SNSListSubscriptionsByTopicResponse', {
        'SubscriptionsList': Optional[List[SNSSubscription]],
        'nextToken': Optional[str],
    }
)


SNSListTagsForResourceResponse = TypedDict(
    'SNSListTagsForResourceResponse', {
        'TagList': Optional[List[SNSTag]],
    }
)


SNSTopic = TypedDict(
    'SNSTopic', {
        'topicARN': Optional[str],
    }
)


SNSListTopicsResponse = TypedDict(
    'SNSListTopicsResponse', {
        'TopicsList': Optional[List[SNSTopic]],
        'nextToken': Optional[str],
    }
)


SNSOptInPhoneNumberResponse = TypedDict(
    'SNSOptInPhoneNumberResponse', {
    }
)


SNSMessageAttributeValue = TypedDict(
    'SNSMessageAttributeValue', {
        'String': str,
        'String': Optional[str],
        'Binary': Optional[bytes],
    }
)


SNSPublishResponse = TypedDict(
    'SNSPublishResponse', {
        'messageId': Optional[str],
    }
)


SNSSetSMSAttributesResponse = TypedDict(
    'SNSSetSMSAttributesResponse', {
    }
)


SNSSubscribeResponse = TypedDict(
    'SNSSubscribeResponse', {
        'subscriptionARN': Optional[str],
    }
)


SNSTagResourceResponse = TypedDict(
    'SNSTagResourceResponse', {
    }
)


SNSUntagResourceResponse = TypedDict(
    'SNSUntagResourceResponse', {
    }
)


class SQS(BaseClient):
    def add_permission(self, *,
        QueueUrl: str,
        Label: str,
        AWSAccountIds: List[str],
        Actions: List[str]
    ): ...

    def change_message_visibility(self, *,
        QueueUrl: str,
        ReceiptHandle: str,
        VisibilityTimeout: int
    ): ...

    def change_message_visibility_batch(self, *,
        QueueUrl: str,
        Entries: List[SQSChangeMessageVisibilityBatchRequestEntry]
    ) -> SQSChangeMessageVisibilityBatchResult: ...

    def create_queue(self, *,
        QueueName: str,
        Attributes: Dict[str, str] = ...
    ) -> SQSCreateQueueResult: ...

    def delete_message(self, *,
        QueueUrl: str,
        ReceiptHandle: str
    ): ...

    def delete_message_batch(self, *,
        QueueUrl: str,
        Entries: List[SQSDeleteMessageBatchRequestEntry]
    ) -> SQSDeleteMessageBatchResult: ...

    def delete_queue(self, *,
        QueueUrl: str
    ): ...

    def get_queue_attributes(self, *,
        QueueUrl: str,
        AttributeNames: List[str] = ...
    ) -> SQSGetQueueAttributesResult: ...

    def get_queue_url(self, *,
        QueueName: str,
        QueueOwnerAWSAccountId: str = ...
    ) -> SQSGetQueueUrlResult: ...

    def list_dead_letter_source_queues(self, *,
        QueueUrl: str
    ) -> SQSListDeadLetterSourceQueuesResult: ...

    def list_queue_tags(self, *,
        QueueUrl: str
    ) -> SQSListQueueTagsResult: ...

    def list_queues(self, *,
        QueueNamePrefix: str = ...
    ) -> SQSListQueuesResult: ...

    def purge_queue(self, *,
        QueueUrl: str
    ): ...

    def receive_message(self, *,
        QueueUrl: str,
        AttributeNames: List[str] = ...,
        MessageAttributeNames: List[str] = ...,
        MaxNumberOfMessages: int = ...,
        VisibilityTimeout: int = ...,
        WaitTimeSeconds: int = ...,
        ReceiveRequestAttemptId: str = ...
    ) -> SQSReceiveMessageResult: ...

    def remove_permission(self, *,
        QueueUrl: str,
        Label: str
    ): ...

    def send_message(self, *,
        QueueUrl: str,
        MessageBody: str,
        DelaySeconds: int = ...,
        MessageAttributes: Dict[str, SQSMessageAttributeValue] = ...,
        MessageDeduplicationId: str = ...,
        MessageGroupId: str = ...
    ) -> SQSSendMessageResult: ...

    def send_message_batch(self, *,
        QueueUrl: str,
        Entries: List[SQSSendMessageBatchRequestEntry]
    ) -> SQSSendMessageBatchResult: ...

    def set_queue_attributes(self, *,
        QueueUrl: str,
        Attributes: Dict[str, str]
    ): ...

    def tag_queue(self, *,
        QueueUrl: str,
        Tags: Dict[str, str]
    ): ...

    def untag_queue(self, *,
        QueueUrl: str,
        TagKeys: List[str]
    ): ...


SQSChangeMessageVisibilityBatchRequestEntry = TypedDict(
    'SQSChangeMessageVisibilityBatchRequestEntry', {
        'String': str,
        'String': str,
        'Integer': Optional[int],
    }
)


SQSChangeMessageVisibilityBatchResultEntry = TypedDict(
    'SQSChangeMessageVisibilityBatchResultEntry', {
        'String': str,
    }
)


SQSBatchResultErrorEntry = TypedDict(
    'SQSBatchResultErrorEntry', {
        'String': str,
        'Boolean': bool,
        'String': str,
        'String': Optional[str],
    }
)


SQSChangeMessageVisibilityBatchResult = TypedDict(
    'SQSChangeMessageVisibilityBatchResult', {
        'ChangeMessageVisibilityBatchResultEntryList': List[SQSChangeMessageVisibilityBatchResultEntry],
        'BatchResultErrorEntryList': List[SQSBatchResultErrorEntry],
    }
)


SQSCreateQueueResult = TypedDict(
    'SQSCreateQueueResult', {
        'String': Optional[str],
    }
)


SQSDeleteMessageBatchRequestEntry = TypedDict(
    'SQSDeleteMessageBatchRequestEntry', {
        'String': str,
        'String': str,
    }
)


SQSDeleteMessageBatchResultEntry = TypedDict(
    'SQSDeleteMessageBatchResultEntry', {
        'String': str,
    }
)


SQSDeleteMessageBatchResult = TypedDict(
    'SQSDeleteMessageBatchResult', {
        'DeleteMessageBatchResultEntryList': List[SQSDeleteMessageBatchResultEntry],
        'BatchResultErrorEntryList': List[SQSBatchResultErrorEntry],
    }
)


SQSGetQueueAttributesResult = TypedDict(
    'SQSGetQueueAttributesResult', {
        'QueueAttributeMap': Optional[Dict[str, str]],
    }
)


SQSGetQueueUrlResult = TypedDict(
    'SQSGetQueueUrlResult', {
        'String': Optional[str],
    }
)


SQSListDeadLetterSourceQueuesResult = TypedDict(
    'SQSListDeadLetterSourceQueuesResult', {
        'QueueUrlList': List[str],
    }
)


SQSListQueueTagsResult = TypedDict(
    'SQSListQueueTagsResult', {
        'TagMap': Optional[Dict[str, str]],
    }
)


SQSListQueuesResult = TypedDict(
    'SQSListQueuesResult', {
        'QueueUrlList': Optional[List[str]],
    }
)


SQSMessageAttributeValue = TypedDict(
    'SQSMessageAttributeValue', {
        'String': str,
        'String': Optional[str],
        'Binary': Optional[bytes],
        'StringList': Optional[List[str]],
        'BinaryList': Optional[List[bytes]],
    }
)


SQSMessage = TypedDict(
    'SQSMessage', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'MessageSystemAttributeMap': Optional[Dict[str, str]],
        'String': Optional[str],
        'MessageBodyAttributeMap': Optional[Dict[str, SQSMessageAttributeValue]],
    }
)


SQSReceiveMessageResult = TypedDict(
    'SQSReceiveMessageResult', {
        'MessageList': Optional[List[SQSMessage]],
    }
)


SQSSendMessageResult = TypedDict(
    'SQSSendMessageResult', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


SQSSendMessageBatchRequestEntry = TypedDict(
    'SQSSendMessageBatchRequestEntry', {
        'String': str,
        'String': str,
        'Integer': Optional[int],
        'MessageBodyAttributeMap': Optional[Dict[str, SQSMessageAttributeValue]],
        'String': Optional[str],
        'String': Optional[str],
    }
)


SQSSendMessageBatchResultEntry = TypedDict(
    'SQSSendMessageBatchResultEntry', {
        'String': str,
        'String': str,
        'String': str,
        'String': Optional[str],
        'String': Optional[str],
    }
)


SQSSendMessageBatchResult = TypedDict(
    'SQSSendMessageBatchResult', {
        'SendMessageBatchResultEntryList': List[SQSSendMessageBatchResultEntry],
        'BatchResultErrorEntryList': List[SQSBatchResultErrorEntry],
    }
)


class SFN(BaseClient):
    def create_activity(self, *,
        name: str,
        tags: List[SFNTag] = ...
    ) -> SFNCreateActivityOutput: ...

    def create_state_machine(self, *,
        name: str,
        definition: str,
        roleArn: str,
        tags: List[SFNTag] = ...
    ) -> SFNCreateStateMachineOutput: ...

    def delete_activity(self, *,
        activityArn: str
    ) -> SFNDeleteActivityOutput: ...

    def delete_state_machine(self, *,
        stateMachineArn: str
    ) -> SFNDeleteStateMachineOutput: ...

    def describe_activity(self, *,
        activityArn: str
    ) -> SFNDescribeActivityOutput: ...

    def describe_execution(self, *,
        executionArn: str
    ) -> SFNDescribeExecutionOutput: ...

    def describe_state_machine(self, *,
        stateMachineArn: str
    ) -> SFNDescribeStateMachineOutput: ...

    def describe_state_machine_for_execution(self, *,
        executionArn: str
    ) -> SFNDescribeStateMachineForExecutionOutput: ...

    def get_activity_task(self, *,
        activityArn: str,
        workerName: str = ...
    ) -> SFNGetActivityTaskOutput: ...

    def get_execution_history(self, *,
        executionArn: str,
        maxResults: int = ...,
        reverseOrder: bool = ...,
        nextToken: str = ...
    ) -> SFNGetExecutionHistoryOutput: ...

    def list_activities(self, *,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> SFNListActivitiesOutput: ...

    def list_executions(self, *,
        stateMachineArn: str,
        statusFilter: str = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> SFNListExecutionsOutput: ...

    def list_state_machines(self, *,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> SFNListStateMachinesOutput: ...

    def list_tags_for_resource(self, *,
        resourceArn: str
    ) -> SFNListTagsForResourceOutput: ...

    def send_task_failure(self, *,
        taskToken: str,
        error: str = ...,
        cause: str = ...
    ) -> SFNSendTaskFailureOutput: ...

    def send_task_heartbeat(self, *,
        taskToken: str
    ) -> SFNSendTaskHeartbeatOutput: ...

    def send_task_success(self, *,
        taskToken: str,
        output: str
    ) -> SFNSendTaskSuccessOutput: ...

    def start_execution(self, *,
        stateMachineArn: str,
        name: str = ...,
        input: str = ...
    ) -> SFNStartExecutionOutput: ...

    def stop_execution(self, *,
        executionArn: str,
        error: str = ...,
        cause: str = ...
    ) -> SFNStopExecutionOutput: ...

    def tag_resource(self, *,
        resourceArn: str,
        tags: List[SFNTag]
    ) -> SFNTagResourceOutput: ...

    def untag_resource(self, *,
        resourceArn: str,
        tagKeys: List[str]
    ) -> SFNUntagResourceOutput: ...

    def update_state_machine(self, *,
        stateMachineArn: str,
        definition: str = ...,
        roleArn: str = ...
    ) -> SFNUpdateStateMachineOutput: ...


SFNTag = TypedDict(
    'SFNTag', {
        'TagKey': Optional[str],
        'TagValue': Optional[str],
    }
)


SFNCreateActivityOutput = TypedDict(
    'SFNCreateActivityOutput', {
        'Arn': str,
        'Timestamp': datetime.datetime,
    }
)


SFNCreateStateMachineOutput = TypedDict(
    'SFNCreateStateMachineOutput', {
        'Arn': str,
        'Timestamp': datetime.datetime,
    }
)


SFNDeleteActivityOutput = TypedDict(
    'SFNDeleteActivityOutput', {
    }
)


SFNDeleteStateMachineOutput = TypedDict(
    'SFNDeleteStateMachineOutput', {
    }
)


SFNDescribeActivityOutput = TypedDict(
    'SFNDescribeActivityOutput', {
        'Arn': str,
        'Name': str,
        'Timestamp': datetime.datetime,
    }
)


SFNDescribeExecutionOutput = TypedDict(
    'SFNDescribeExecutionOutput', {
        'Arn': str,
        'Arn': str,
        'ExecutionStatus': str,
        'Timestamp': datetime.datetime,
        'SensitiveData': str,
        'Name': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'SensitiveData': Optional[str],
    }
)


SFNDescribeStateMachineOutput = TypedDict(
    'SFNDescribeStateMachineOutput', {
        'Arn': str,
        'Name': str,
        'Definition': str,
        'Arn': str,
        'Timestamp': datetime.datetime,
        'StateMachineStatus': Optional[str],
    }
)


SFNDescribeStateMachineForExecutionOutput = TypedDict(
    'SFNDescribeStateMachineForExecutionOutput', {
        'Arn': str,
        'Name': str,
        'Definition': str,
        'Arn': str,
        'Timestamp': datetime.datetime,
    }
)


SFNGetActivityTaskOutput = TypedDict(
    'SFNGetActivityTaskOutput', {
        'TaskToken': Optional[str],
        'SensitiveDataJobInput': Optional[str],
    }
)


SFNActivityFailedEventDetails = TypedDict(
    'SFNActivityFailedEventDetails', {
        'SensitiveError': Optional[str],
        'SensitiveCause': Optional[str],
    }
)


SFNActivityScheduleFailedEventDetails = TypedDict(
    'SFNActivityScheduleFailedEventDetails', {
        'SensitiveError': Optional[str],
        'SensitiveCause': Optional[str],
    }
)


SFNActivityScheduledEventDetails = TypedDict(
    'SFNActivityScheduledEventDetails', {
        'Arn': str,
        'SensitiveData': Optional[str],
        'TimeoutInSeconds': Optional[int],
        'TimeoutInSeconds': Optional[int],
    }
)


SFNActivityStartedEventDetails = TypedDict(
    'SFNActivityStartedEventDetails', {
        'Identity': Optional[str],
    }
)


SFNActivitySucceededEventDetails = TypedDict(
    'SFNActivitySucceededEventDetails', {
        'SensitiveData': Optional[str],
    }
)


SFNActivityTimedOutEventDetails = TypedDict(
    'SFNActivityTimedOutEventDetails', {
        'SensitiveError': Optional[str],
        'SensitiveCause': Optional[str],
    }
)


SFNTaskFailedEventDetails = TypedDict(
    'SFNTaskFailedEventDetails', {
        'Name': str,
        'Name': str,
        'SensitiveError': Optional[str],
        'SensitiveCause': Optional[str],
    }
)


SFNTaskScheduledEventDetails = TypedDict(
    'SFNTaskScheduledEventDetails', {
        'Name': str,
        'Name': str,
        'Name': str,
        'ConnectorParameters': str,
        'TimeoutInSeconds': Optional[int],
    }
)


SFNTaskStartFailedEventDetails = TypedDict(
    'SFNTaskStartFailedEventDetails', {
        'Name': str,
        'Name': str,
        'SensitiveError': Optional[str],
        'SensitiveCause': Optional[str],
    }
)


SFNTaskStartedEventDetails = TypedDict(
    'SFNTaskStartedEventDetails', {
        'Name': str,
        'Name': str,
    }
)


SFNTaskSubmitFailedEventDetails = TypedDict(
    'SFNTaskSubmitFailedEventDetails', {
        'Name': str,
        'Name': str,
        'SensitiveError': Optional[str],
        'SensitiveCause': Optional[str],
    }
)


SFNTaskSubmittedEventDetails = TypedDict(
    'SFNTaskSubmittedEventDetails', {
        'Name': str,
        'Name': str,
        'SensitiveData': Optional[str],
    }
)


SFNTaskSucceededEventDetails = TypedDict(
    'SFNTaskSucceededEventDetails', {
        'Name': str,
        'Name': str,
        'SensitiveData': Optional[str],
    }
)


SFNTaskTimedOutEventDetails = TypedDict(
    'SFNTaskTimedOutEventDetails', {
        'Name': str,
        'Name': str,
        'SensitiveError': Optional[str],
        'SensitiveCause': Optional[str],
    }
)


SFNExecutionFailedEventDetails = TypedDict(
    'SFNExecutionFailedEventDetails', {
        'SensitiveError': Optional[str],
        'SensitiveCause': Optional[str],
    }
)


SFNExecutionStartedEventDetails = TypedDict(
    'SFNExecutionStartedEventDetails', {
        'SensitiveData': Optional[str],
        'Arn': Optional[str],
    }
)


SFNExecutionSucceededEventDetails = TypedDict(
    'SFNExecutionSucceededEventDetails', {
        'SensitiveData': Optional[str],
    }
)


SFNExecutionAbortedEventDetails = TypedDict(
    'SFNExecutionAbortedEventDetails', {
        'SensitiveError': Optional[str],
        'SensitiveCause': Optional[str],
    }
)


SFNExecutionTimedOutEventDetails = TypedDict(
    'SFNExecutionTimedOutEventDetails', {
        'SensitiveError': Optional[str],
        'SensitiveCause': Optional[str],
    }
)


SFNLambdaFunctionFailedEventDetails = TypedDict(
    'SFNLambdaFunctionFailedEventDetails', {
        'SensitiveError': Optional[str],
        'SensitiveCause': Optional[str],
    }
)


SFNLambdaFunctionScheduleFailedEventDetails = TypedDict(
    'SFNLambdaFunctionScheduleFailedEventDetails', {
        'SensitiveError': Optional[str],
        'SensitiveCause': Optional[str],
    }
)


SFNLambdaFunctionScheduledEventDetails = TypedDict(
    'SFNLambdaFunctionScheduledEventDetails', {
        'Arn': str,
        'SensitiveData': Optional[str],
        'TimeoutInSeconds': Optional[int],
    }
)


SFNLambdaFunctionStartFailedEventDetails = TypedDict(
    'SFNLambdaFunctionStartFailedEventDetails', {
        'SensitiveError': Optional[str],
        'SensitiveCause': Optional[str],
    }
)


SFNLambdaFunctionSucceededEventDetails = TypedDict(
    'SFNLambdaFunctionSucceededEventDetails', {
        'SensitiveData': Optional[str],
    }
)


SFNLambdaFunctionTimedOutEventDetails = TypedDict(
    'SFNLambdaFunctionTimedOutEventDetails', {
        'SensitiveError': Optional[str],
        'SensitiveCause': Optional[str],
    }
)


SFNStateEnteredEventDetails = TypedDict(
    'SFNStateEnteredEventDetails', {
        'Name': str,
        'SensitiveData': Optional[str],
    }
)


SFNStateExitedEventDetails = TypedDict(
    'SFNStateExitedEventDetails', {
        'Name': str,
        'SensitiveData': Optional[str],
    }
)


SFNHistoryEvent = TypedDict(
    'SFNHistoryEvent', {
        'Timestamp': datetime.datetime,
        'HistoryEventType': str,
        'EventId': int,
        'EventId': Optional[int],
        'ActivityFailedEventDetails': Optional[SFNActivityFailedEventDetails],
        'ActivityScheduleFailedEventDetails': Optional[SFNActivityScheduleFailedEventDetails],
        'ActivityScheduledEventDetails': Optional[SFNActivityScheduledEventDetails],
        'ActivityStartedEventDetails': Optional[SFNActivityStartedEventDetails],
        'ActivitySucceededEventDetails': Optional[SFNActivitySucceededEventDetails],
        'ActivityTimedOutEventDetails': Optional[SFNActivityTimedOutEventDetails],
        'TaskFailedEventDetails': Optional[SFNTaskFailedEventDetails],
        'TaskScheduledEventDetails': Optional[SFNTaskScheduledEventDetails],
        'TaskStartFailedEventDetails': Optional[SFNTaskStartFailedEventDetails],
        'TaskStartedEventDetails': Optional[SFNTaskStartedEventDetails],
        'TaskSubmitFailedEventDetails': Optional[SFNTaskSubmitFailedEventDetails],
        'TaskSubmittedEventDetails': Optional[SFNTaskSubmittedEventDetails],
        'TaskSucceededEventDetails': Optional[SFNTaskSucceededEventDetails],
        'TaskTimedOutEventDetails': Optional[SFNTaskTimedOutEventDetails],
        'ExecutionFailedEventDetails': Optional[SFNExecutionFailedEventDetails],
        'ExecutionStartedEventDetails': Optional[SFNExecutionStartedEventDetails],
        'ExecutionSucceededEventDetails': Optional[SFNExecutionSucceededEventDetails],
        'ExecutionAbortedEventDetails': Optional[SFNExecutionAbortedEventDetails],
        'ExecutionTimedOutEventDetails': Optional[SFNExecutionTimedOutEventDetails],
        'LambdaFunctionFailedEventDetails': Optional[SFNLambdaFunctionFailedEventDetails],
        'LambdaFunctionScheduleFailedEventDetails': Optional[SFNLambdaFunctionScheduleFailedEventDetails],
        'LambdaFunctionScheduledEventDetails': Optional[SFNLambdaFunctionScheduledEventDetails],
        'LambdaFunctionStartFailedEventDetails': Optional[SFNLambdaFunctionStartFailedEventDetails],
        'LambdaFunctionSucceededEventDetails': Optional[SFNLambdaFunctionSucceededEventDetails],
        'LambdaFunctionTimedOutEventDetails': Optional[SFNLambdaFunctionTimedOutEventDetails],
        'StateEnteredEventDetails': Optional[SFNStateEnteredEventDetails],
        'StateExitedEventDetails': Optional[SFNStateExitedEventDetails],
    }
)


SFNGetExecutionHistoryOutput = TypedDict(
    'SFNGetExecutionHistoryOutput', {
        'HistoryEventList': List[SFNHistoryEvent],
        'PageToken': Optional[str],
    }
)


SFNActivityListItem = TypedDict(
    'SFNActivityListItem', {
        'Arn': str,
        'Name': str,
        'Timestamp': datetime.datetime,
    }
)


SFNListActivitiesOutput = TypedDict(
    'SFNListActivitiesOutput', {
        'ActivityList': List[SFNActivityListItem],
        'PageToken': Optional[str],
    }
)


SFNExecutionListItem = TypedDict(
    'SFNExecutionListItem', {
        'Arn': str,
        'Arn': str,
        'Name': str,
        'ExecutionStatus': str,
        'Timestamp': datetime.datetime,
        'Timestamp': Optional[datetime.datetime],
    }
)


SFNListExecutionsOutput = TypedDict(
    'SFNListExecutionsOutput', {
        'ExecutionList': List[SFNExecutionListItem],
        'PageToken': Optional[str],
    }
)


SFNStateMachineListItem = TypedDict(
    'SFNStateMachineListItem', {
        'Arn': str,
        'Name': str,
        'Timestamp': datetime.datetime,
    }
)


SFNListStateMachinesOutput = TypedDict(
    'SFNListStateMachinesOutput', {
        'StateMachineList': List[SFNStateMachineListItem],
        'PageToken': Optional[str],
    }
)


SFNListTagsForResourceOutput = TypedDict(
    'SFNListTagsForResourceOutput', {
        'TagList': Optional[List[SFNTag]],
    }
)


SFNSendTaskFailureOutput = TypedDict(
    'SFNSendTaskFailureOutput', {
    }
)


SFNSendTaskHeartbeatOutput = TypedDict(
    'SFNSendTaskHeartbeatOutput', {
    }
)


SFNSendTaskSuccessOutput = TypedDict(
    'SFNSendTaskSuccessOutput', {
    }
)


SFNStartExecutionOutput = TypedDict(
    'SFNStartExecutionOutput', {
        'Arn': str,
        'Timestamp': datetime.datetime,
    }
)


SFNStopExecutionOutput = TypedDict(
    'SFNStopExecutionOutput', {
        'Timestamp': datetime.datetime,
    }
)


SFNTagResourceOutput = TypedDict(
    'SFNTagResourceOutput', {
    }
)


SFNUntagResourceOutput = TypedDict(
    'SFNUntagResourceOutput', {
    }
)


SFNUpdateStateMachineOutput = TypedDict(
    'SFNUpdateStateMachineOutput', {
        'Timestamp': datetime.datetime,
    }
)


class StorageGateway(BaseClient):
    def activate_gateway(self, *,
        ActivationKey: str,
        GatewayName: str,
        GatewayTimezone: str,
        GatewayRegion: str,
        GatewayType: str = ...,
        TapeDriveType: str = ...,
        MediumChangerType: str = ...,
        Tags: List[StorageGatewayTag] = ...
    ) -> StorageGatewayActivateGatewayOutput: ...

    def add_cache(self, *,
        GatewayARN: str,
        DiskIds: List[str]
    ) -> StorageGatewayAddCacheOutput: ...

    def add_tags_to_resource(self, *,
        ResourceARN: str,
        Tags: List[StorageGatewayTag]
    ) -> StorageGatewayAddTagsToResourceOutput: ...

    def add_upload_buffer(self, *,
        GatewayARN: str,
        DiskIds: List[str]
    ) -> StorageGatewayAddUploadBufferOutput: ...

    def add_working_storage(self, *,
        GatewayARN: str,
        DiskIds: List[str]
    ) -> StorageGatewayAddWorkingStorageOutput: ...

    def attach_volume(self, *,
        GatewayARN: str,
        VolumeARN: str,
        NetworkInterfaceId: str,
        TargetName: str = ...,
        DiskId: str = ...
    ) -> StorageGatewayAttachVolumeOutput: ...

    def cancel_archival(self, *,
        GatewayARN: str,
        TapeARN: str
    ) -> StorageGatewayCancelArchivalOutput: ...

    def cancel_retrieval(self, *,
        GatewayARN: str,
        TapeARN: str
    ) -> StorageGatewayCancelRetrievalOutput: ...

    def create_cached_iscsi_volume(self, *,
        GatewayARN: str,
        VolumeSizeInBytes: int,
        TargetName: str,
        NetworkInterfaceId: str,
        ClientToken: str,
        SnapshotId: str = ...,
        SourceVolumeARN: str = ...,
        KMSEncrypted: bool = ...,
        KMSKey: str = ...,
        Tags: List[StorageGatewayTag] = ...
    ) -> StorageGatewayCreateCachediSCSIVolumeOutput: ...

    def create_nfs_file_share(self, *,
        ClientToken: str,
        GatewayARN: str,
        Role: str,
        LocationARN: str,
        NFSFileShareDefaults: StorageGatewayNFSFileShareDefaults = ...,
        KMSEncrypted: bool = ...,
        KMSKey: str = ...,
        DefaultStorageClass: str = ...,
        ObjectACL: str = ...,
        ClientList: List[str] = ...,
        Squash: str = ...,
        ReadOnly: bool = ...,
        GuessMIMETypeEnabled: bool = ...,
        RequesterPays: bool = ...,
        Tags: List[StorageGatewayTag] = ...
    ) -> StorageGatewayCreateNFSFileShareOutput: ...

    def create_smb_file_share(self, *,
        ClientToken: str,
        GatewayARN: str,
        Role: str,
        LocationARN: str,
        KMSEncrypted: bool = ...,
        KMSKey: str = ...,
        DefaultStorageClass: str = ...,
        ObjectACL: str = ...,
        ReadOnly: bool = ...,
        GuessMIMETypeEnabled: bool = ...,
        RequesterPays: bool = ...,
        SMBACLEnabled: bool = ...,
        AdminUserList: List[str] = ...,
        ValidUserList: List[str] = ...,
        InvalidUserList: List[str] = ...,
        Authentication: str = ...,
        Tags: List[StorageGatewayTag] = ...
    ) -> StorageGatewayCreateSMBFileShareOutput: ...

    def create_snapshot(self, *,
        VolumeARN: str,
        SnapshotDescription: str
    ) -> StorageGatewayCreateSnapshotOutput: ...

    def create_snapshot_from_volume_recovery_point(self, *,
        VolumeARN: str,
        SnapshotDescription: str
    ) -> StorageGatewayCreateSnapshotFromVolumeRecoveryPointOutput: ...

    def create_stored_iscsi_volume(self, *,
        GatewayARN: str,
        DiskId: str,
        PreserveExistingData: bool,
        TargetName: str,
        NetworkInterfaceId: str,
        SnapshotId: str = ...,
        KMSEncrypted: bool = ...,
        KMSKey: str = ...,
        Tags: List[StorageGatewayTag] = ...
    ) -> StorageGatewayCreateStorediSCSIVolumeOutput: ...

    def create_tape_with_barcode(self, *,
        GatewayARN: str,
        TapeSizeInBytes: int,
        TapeBarcode: str,
        KMSEncrypted: bool = ...,
        KMSKey: str = ...,
        PoolId: str = ...,
        Tags: List[StorageGatewayTag] = ...
    ) -> StorageGatewayCreateTapeWithBarcodeOutput: ...

    def create_tapes(self, *,
        GatewayARN: str,
        TapeSizeInBytes: int,
        ClientToken: str,
        NumTapesToCreate: int,
        TapeBarcodePrefix: str,
        KMSEncrypted: bool = ...,
        KMSKey: str = ...,
        PoolId: str = ...,
        Tags: List[StorageGatewayTag] = ...
    ) -> StorageGatewayCreateTapesOutput: ...

    def delete_bandwidth_rate_limit(self, *,
        GatewayARN: str,
        BandwidthType: str
    ) -> StorageGatewayDeleteBandwidthRateLimitOutput: ...

    def delete_chap_credentials(self, *,
        TargetARN: str,
        InitiatorName: str
    ) -> StorageGatewayDeleteChapCredentialsOutput: ...

    def delete_file_share(self, *,
        FileShareARN: str,
        ForceDelete: bool = ...
    ) -> StorageGatewayDeleteFileShareOutput: ...

    def delete_gateway(self, *,
        GatewayARN: str
    ) -> StorageGatewayDeleteGatewayOutput: ...

    def delete_snapshot_schedule(self, *,
        VolumeARN: str
    ) -> StorageGatewayDeleteSnapshotScheduleOutput: ...

    def delete_tape(self, *,
        GatewayARN: str,
        TapeARN: str
    ) -> StorageGatewayDeleteTapeOutput: ...

    def delete_tape_archive(self, *,
        TapeARN: str
    ) -> StorageGatewayDeleteTapeArchiveOutput: ...

    def delete_volume(self, *,
        VolumeARN: str
    ) -> StorageGatewayDeleteVolumeOutput: ...

    def describe_bandwidth_rate_limit(self, *,
        GatewayARN: str
    ) -> StorageGatewayDescribeBandwidthRateLimitOutput: ...

    def describe_cache(self, *,
        GatewayARN: str
    ) -> StorageGatewayDescribeCacheOutput: ...

    def describe_cached_iscsi_volumes(self, *,
        VolumeARNs: List[str]
    ) -> StorageGatewayDescribeCachediSCSIVolumesOutput: ...

    def describe_chap_credentials(self, *,
        TargetARN: str
    ) -> StorageGatewayDescribeChapCredentialsOutput: ...

    def describe_gateway_information(self, *,
        GatewayARN: str
    ) -> StorageGatewayDescribeGatewayInformationOutput: ...

    def describe_maintenance_start_time(self, *,
        GatewayARN: str
    ) -> StorageGatewayDescribeMaintenanceStartTimeOutput: ...

    def describe_nfs_file_shares(self, *,
        FileShareARNList: List[str]
    ) -> StorageGatewayDescribeNFSFileSharesOutput: ...

    def describe_smb_file_shares(self, *,
        FileShareARNList: List[str]
    ) -> StorageGatewayDescribeSMBFileSharesOutput: ...

    def describe_smb_settings(self, *,
        GatewayARN: str
    ) -> StorageGatewayDescribeSMBSettingsOutput: ...

    def describe_snapshot_schedule(self, *,
        VolumeARN: str
    ) -> StorageGatewayDescribeSnapshotScheduleOutput: ...

    def describe_stored_iscsi_volumes(self, *,
        VolumeARNs: List[str]
    ) -> StorageGatewayDescribeStorediSCSIVolumesOutput: ...

    def describe_tape_archives(self, *,
        TapeARNs: List[str] = ...,
        Marker: str = ...,
        Limit: int = ...
    ) -> StorageGatewayDescribeTapeArchivesOutput: ...

    def describe_tape_recovery_points(self, *,
        GatewayARN: str,
        Marker: str = ...,
        Limit: int = ...
    ) -> StorageGatewayDescribeTapeRecoveryPointsOutput: ...

    def describe_tapes(self, *,
        GatewayARN: str,
        TapeARNs: List[str] = ...,
        Marker: str = ...,
        Limit: int = ...
    ) -> StorageGatewayDescribeTapesOutput: ...

    def describe_upload_buffer(self, *,
        GatewayARN: str
    ) -> StorageGatewayDescribeUploadBufferOutput: ...

    def describe_vtl_devices(self, *,
        GatewayARN: str,
        VTLDeviceARNs: List[str] = ...,
        Marker: str = ...,
        Limit: int = ...
    ) -> StorageGatewayDescribeVTLDevicesOutput: ...

    def describe_working_storage(self, *,
        GatewayARN: str
    ) -> StorageGatewayDescribeWorkingStorageOutput: ...

    def detach_volume(self, *,
        VolumeARN: str,
        ForceDetach: bool = ...
    ) -> StorageGatewayDetachVolumeOutput: ...

    def disable_gateway(self, *,
        GatewayARN: str
    ) -> StorageGatewayDisableGatewayOutput: ...

    def join_domain(self, *,
        GatewayARN: str,
        DomainName: str,
        UserName: str,
        Password: str,
        OrganizationalUnit: str = ...,
        DomainControllers: List[str] = ...
    ) -> StorageGatewayJoinDomainOutput: ...

    def list_file_shares(self, *,
        GatewayARN: str = ...,
        Limit: int = ...,
        Marker: str = ...
    ) -> StorageGatewayListFileSharesOutput: ...

    def list_gateways(self, *,
        Marker: str = ...,
        Limit: int = ...
    ) -> StorageGatewayListGatewaysOutput: ...

    def list_local_disks(self, *,
        GatewayARN: str
    ) -> StorageGatewayListLocalDisksOutput: ...

    def list_tags_for_resource(self, *,
        ResourceARN: str,
        Marker: str = ...,
        Limit: int = ...
    ) -> StorageGatewayListTagsForResourceOutput: ...

    def list_tapes(self, *,
        TapeARNs: List[str] = ...,
        Marker: str = ...,
        Limit: int = ...
    ) -> StorageGatewayListTapesOutput: ...

    def list_volume_initiators(self, *,
        VolumeARN: str
    ) -> StorageGatewayListVolumeInitiatorsOutput: ...

    def list_volume_recovery_points(self, *,
        GatewayARN: str
    ) -> StorageGatewayListVolumeRecoveryPointsOutput: ...

    def list_volumes(self, *,
        GatewayARN: str = ...,
        Marker: str = ...,
        Limit: int = ...
    ) -> StorageGatewayListVolumesOutput: ...

    def notify_when_uploaded(self, *,
        FileShareARN: str
    ) -> StorageGatewayNotifyWhenUploadedOutput: ...

    def refresh_cache(self, *,
        FileShareARN: str,
        FolderList: List[str] = ...,
        Recursive: bool = ...
    ) -> StorageGatewayRefreshCacheOutput: ...

    def remove_tags_from_resource(self, *,
        ResourceARN: str,
        TagKeys: List[str]
    ) -> StorageGatewayRemoveTagsFromResourceOutput: ...

    def reset_cache(self, *,
        GatewayARN: str
    ) -> StorageGatewayResetCacheOutput: ...

    def retrieve_tape_archive(self, *,
        TapeARN: str,
        GatewayARN: str
    ) -> StorageGatewayRetrieveTapeArchiveOutput: ...

    def retrieve_tape_recovery_point(self, *,
        TapeARN: str,
        GatewayARN: str
    ) -> StorageGatewayRetrieveTapeRecoveryPointOutput: ...

    def set_local_console_password(self, *,
        GatewayARN: str,
        LocalConsolePassword: str
    ) -> StorageGatewaySetLocalConsolePasswordOutput: ...

    def set_smb_guest_password(self, *,
        GatewayARN: str,
        Password: str
    ) -> StorageGatewaySetSMBGuestPasswordOutput: ...

    def shutdown_gateway(self, *,
        GatewayARN: str
    ) -> StorageGatewayShutdownGatewayOutput: ...

    def start_gateway(self, *,
        GatewayARN: str
    ) -> StorageGatewayStartGatewayOutput: ...

    def update_bandwidth_rate_limit(self, *,
        GatewayARN: str,
        AverageUploadRateLimitInBitsPerSec: int = ...,
        AverageDownloadRateLimitInBitsPerSec: int = ...
    ) -> StorageGatewayUpdateBandwidthRateLimitOutput: ...

    def update_chap_credentials(self, *,
        TargetARN: str,
        SecretToAuthenticateInitiator: str,
        InitiatorName: str,
        SecretToAuthenticateTarget: str = ...
    ) -> StorageGatewayUpdateChapCredentialsOutput: ...

    def update_gateway_information(self, *,
        GatewayARN: str,
        GatewayName: str = ...,
        GatewayTimezone: str = ...
    ) -> StorageGatewayUpdateGatewayInformationOutput: ...

    def update_gateway_software_now(self, *,
        GatewayARN: str
    ) -> StorageGatewayUpdateGatewaySoftwareNowOutput: ...

    def update_maintenance_start_time(self, *,
        GatewayARN: str,
        HourOfDay: int,
        MinuteOfHour: int,
        DayOfWeek: int = ...,
        DayOfMonth: int = ...
    ) -> StorageGatewayUpdateMaintenanceStartTimeOutput: ...

    def update_nfs_file_share(self, *,
        FileShareARN: str,
        KMSEncrypted: bool = ...,
        KMSKey: str = ...,
        NFSFileShareDefaults: StorageGatewayNFSFileShareDefaults = ...,
        DefaultStorageClass: str = ...,
        ObjectACL: str = ...,
        ClientList: List[str] = ...,
        Squash: str = ...,
        ReadOnly: bool = ...,
        GuessMIMETypeEnabled: bool = ...,
        RequesterPays: bool = ...
    ) -> StorageGatewayUpdateNFSFileShareOutput: ...

    def update_smb_file_share(self, *,
        FileShareARN: str,
        KMSEncrypted: bool = ...,
        KMSKey: str = ...,
        DefaultStorageClass: str = ...,
        ObjectACL: str = ...,
        ReadOnly: bool = ...,
        GuessMIMETypeEnabled: bool = ...,
        RequesterPays: bool = ...,
        SMBACLEnabled: bool = ...,
        AdminUserList: List[str] = ...,
        ValidUserList: List[str] = ...,
        InvalidUserList: List[str] = ...
    ) -> StorageGatewayUpdateSMBFileShareOutput: ...

    def update_snapshot_schedule(self, *,
        VolumeARN: str,
        StartAt: int,
        RecurrenceInHours: int,
        Description: str = ...
    ) -> StorageGatewayUpdateSnapshotScheduleOutput: ...

    def update_vtl_device_type(self, *,
        VTLDeviceARN: str,
        DeviceType: str
    ) -> StorageGatewayUpdateVTLDeviceTypeOutput: ...


StorageGatewayTag = TypedDict(
    'StorageGatewayTag', {
        'TagKey': str,
        'TagValue': str,
    }
)


StorageGatewayActivateGatewayOutput = TypedDict(
    'StorageGatewayActivateGatewayOutput', {
        'GatewayARN': Optional[str],
    }
)


StorageGatewayAddCacheOutput = TypedDict(
    'StorageGatewayAddCacheOutput', {
        'GatewayARN': Optional[str],
    }
)


StorageGatewayAddTagsToResourceOutput = TypedDict(
    'StorageGatewayAddTagsToResourceOutput', {
        'ResourceARN': Optional[str],
    }
)


StorageGatewayAddUploadBufferOutput = TypedDict(
    'StorageGatewayAddUploadBufferOutput', {
        'GatewayARN': Optional[str],
    }
)


StorageGatewayAddWorkingStorageOutput = TypedDict(
    'StorageGatewayAddWorkingStorageOutput', {
        'GatewayARN': Optional[str],
    }
)


StorageGatewayAttachVolumeOutput = TypedDict(
    'StorageGatewayAttachVolumeOutput', {
        'VolumeARN': Optional[str],
        'TargetARN': Optional[str],
    }
)


StorageGatewayCancelArchivalOutput = TypedDict(
    'StorageGatewayCancelArchivalOutput', {
        'TapeARN': Optional[str],
    }
)


StorageGatewayCancelRetrievalOutput = TypedDict(
    'StorageGatewayCancelRetrievalOutput', {
        'TapeARN': Optional[str],
    }
)


StorageGatewayCreateCachediSCSIVolumeOutput = TypedDict(
    'StorageGatewayCreateCachediSCSIVolumeOutput', {
        'VolumeARN': Optional[str],
        'TargetARN': Optional[str],
    }
)


StorageGatewayNFSFileShareDefaults = TypedDict(
    'StorageGatewayNFSFileShareDefaults', {
        'PermissionMode': Optional[str],
        'PermissionMode': Optional[str],
        'PermissionId': Optional[int],
        'PermissionId': Optional[int],
    }
)


StorageGatewayCreateNFSFileShareOutput = TypedDict(
    'StorageGatewayCreateNFSFileShareOutput', {
        'FileShareARN': Optional[str],
    }
)


StorageGatewayCreateSMBFileShareOutput = TypedDict(
    'StorageGatewayCreateSMBFileShareOutput', {
        'FileShareARN': Optional[str],
    }
)


StorageGatewayCreateSnapshotOutput = TypedDict(
    'StorageGatewayCreateSnapshotOutput', {
        'VolumeARN': Optional[str],
        'SnapshotId': Optional[str],
    }
)


StorageGatewayCreateSnapshotFromVolumeRecoveryPointOutput = TypedDict(
    'StorageGatewayCreateSnapshotFromVolumeRecoveryPointOutput', {
        'SnapshotId': Optional[str],
        'VolumeARN': Optional[str],
        'string': Optional[str],
    }
)


StorageGatewayCreateStorediSCSIVolumeOutput = TypedDict(
    'StorageGatewayCreateStorediSCSIVolumeOutput', {
        'VolumeARN': Optional[str],
        'long': Optional[int],
        'TargetARN': Optional[str],
    }
)


StorageGatewayCreateTapeWithBarcodeOutput = TypedDict(
    'StorageGatewayCreateTapeWithBarcodeOutput', {
        'TapeARN': Optional[str],
    }
)


StorageGatewayCreateTapesOutput = TypedDict(
    'StorageGatewayCreateTapesOutput', {
        'TapeARNs': Optional[List[str]],
    }
)


StorageGatewayDeleteBandwidthRateLimitOutput = TypedDict(
    'StorageGatewayDeleteBandwidthRateLimitOutput', {
        'GatewayARN': Optional[str],
    }
)


StorageGatewayDeleteChapCredentialsOutput = TypedDict(
    'StorageGatewayDeleteChapCredentialsOutput', {
        'TargetARN': Optional[str],
        'IqnName': Optional[str],
    }
)


StorageGatewayDeleteFileShareOutput = TypedDict(
    'StorageGatewayDeleteFileShareOutput', {
        'FileShareARN': Optional[str],
    }
)


StorageGatewayDeleteGatewayOutput = TypedDict(
    'StorageGatewayDeleteGatewayOutput', {
        'GatewayARN': Optional[str],
    }
)


StorageGatewayDeleteSnapshotScheduleOutput = TypedDict(
    'StorageGatewayDeleteSnapshotScheduleOutput', {
        'VolumeARN': Optional[str],
    }
)


StorageGatewayDeleteTapeOutput = TypedDict(
    'StorageGatewayDeleteTapeOutput', {
        'TapeARN': Optional[str],
    }
)


StorageGatewayDeleteTapeArchiveOutput = TypedDict(
    'StorageGatewayDeleteTapeArchiveOutput', {
        'TapeARN': Optional[str],
    }
)


StorageGatewayDeleteVolumeOutput = TypedDict(
    'StorageGatewayDeleteVolumeOutput', {
        'VolumeARN': Optional[str],
    }
)


StorageGatewayDescribeBandwidthRateLimitOutput = TypedDict(
    'StorageGatewayDescribeBandwidthRateLimitOutput', {
        'GatewayARN': Optional[str],
        'BandwidthUploadRateLimit': Optional[int],
        'BandwidthDownloadRateLimit': Optional[int],
    }
)


StorageGatewayDescribeCacheOutput = TypedDict(
    'StorageGatewayDescribeCacheOutput', {
        'GatewayARN': Optional[str],
        'DiskIds': Optional[List[str]],
        'long': Optional[int],
        'double': Optional[float],
        'double': Optional[float],
        'double': Optional[float],
        'double': Optional[float],
    }
)


StorageGatewayVolumeiSCSIAttributes = TypedDict(
    'StorageGatewayVolumeiSCSIAttributes', {
        'TargetARN': Optional[str],
        'NetworkInterfaceId': Optional[str],
        'integer': Optional[int],
        'PositiveIntObject': Optional[int],
        'boolean': Optional[bool],
    }
)


StorageGatewayCachediSCSIVolume = TypedDict(
    'StorageGatewayCachediSCSIVolume', {
        'VolumeARN': Optional[str],
        'VolumeId': Optional[str],
        'VolumeType': Optional[str],
        'VolumeStatus': Optional[str],
        'VolumeAttachmentStatus': Optional[str],
        'long': Optional[int],
        'DoubleObject': Optional[float],
        'SnapshotId': Optional[str],
        'VolumeiSCSIAttributes': Optional[StorageGatewayVolumeiSCSIAttributes],
        'CreatedDate': Optional[datetime.datetime],
        'VolumeUsedInBytes': Optional[int],
        'KMSKey': Optional[str],
        'TargetName': Optional[str],
    }
)


StorageGatewayDescribeCachediSCSIVolumesOutput = TypedDict(
    'StorageGatewayDescribeCachediSCSIVolumesOutput', {
        'CachediSCSIVolumes': Optional[List[StorageGatewayCachediSCSIVolume]],
    }
)


StorageGatewayChapInfo = TypedDict(
    'StorageGatewayChapInfo', {
        'TargetARN': Optional[str],
        'ChapSecret': Optional[str],
        'IqnName': Optional[str],
        'ChapSecret': Optional[str],
    }
)


StorageGatewayDescribeChapCredentialsOutput = TypedDict(
    'StorageGatewayDescribeChapCredentialsOutput', {
        'ChapCredentials': Optional[List[StorageGatewayChapInfo]],
    }
)


StorageGatewayNetworkInterface = TypedDict(
    'StorageGatewayNetworkInterface', {
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
    }
)


StorageGatewayDescribeGatewayInformationOutput = TypedDict(
    'StorageGatewayDescribeGatewayInformationOutput', {
        'GatewayARN': Optional[str],
        'GatewayId': Optional[str],
        'string': Optional[str],
        'GatewayTimezone': Optional[str],
        'GatewayState': Optional[str],
        'GatewayNetworkInterfaces': Optional[List[StorageGatewayNetworkInterface]],
        'GatewayType': Optional[str],
        'NextUpdateAvailabilityDate': Optional[str],
        'LastSoftwareUpdate': Optional[str],
        'Ec2InstanceId': Optional[str],
        'Ec2InstanceRegion': Optional[str],
        'Tags': Optional[List[StorageGatewayTag]],
    }
)


StorageGatewayDescribeMaintenanceStartTimeOutput = TypedDict(
    'StorageGatewayDescribeMaintenanceStartTimeOutput', {
        'GatewayARN': Optional[str],
        'HourOfDay': Optional[int],
        'MinuteOfHour': Optional[int],
        'DayOfWeek': Optional[int],
        'DayOfMonth': Optional[int],
        'GatewayTimezone': Optional[str],
    }
)


StorageGatewayNFSFileShareInfo = TypedDict(
    'StorageGatewayNFSFileShareInfo', {
        'NFSFileShareDefaults': Optional[StorageGatewayNFSFileShareDefaults],
        'FileShareARN': Optional[str],
        'FileShareId': Optional[str],
        'FileShareStatus': Optional[str],
        'GatewayARN': Optional[str],
        'boolean': Optional[bool],
        'KMSKey': Optional[str],
        'Path': Optional[str],
        'Role': Optional[str],
        'LocationARN': Optional[str],
        'StorageClass': Optional[str],
        'ObjectACL': Optional[str],
        'FileShareClientList': Optional[List[str]],
        'Squash': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Tags': Optional[List[StorageGatewayTag]],
    }
)


StorageGatewayDescribeNFSFileSharesOutput = TypedDict(
    'StorageGatewayDescribeNFSFileSharesOutput', {
        'NFSFileShareInfoList': Optional[List[StorageGatewayNFSFileShareInfo]],
    }
)


StorageGatewaySMBFileShareInfo = TypedDict(
    'StorageGatewaySMBFileShareInfo', {
        'FileShareARN': Optional[str],
        'FileShareId': Optional[str],
        'FileShareStatus': Optional[str],
        'GatewayARN': Optional[str],
        'boolean': Optional[bool],
        'KMSKey': Optional[str],
        'Path': Optional[str],
        'Role': Optional[str],
        'LocationARN': Optional[str],
        'StorageClass': Optional[str],
        'ObjectACL': Optional[str],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'FileShareUserList': Optional[List[str]],
        'FileShareUserList': Optional[List[str]],
        'FileShareUserList': Optional[List[str]],
        'Authentication': Optional[str],
        'Tags': Optional[List[StorageGatewayTag]],
    }
)


StorageGatewayDescribeSMBFileSharesOutput = TypedDict(
    'StorageGatewayDescribeSMBFileSharesOutput', {
        'SMBFileShareInfoList': Optional[List[StorageGatewaySMBFileShareInfo]],
    }
)


StorageGatewayDescribeSMBSettingsOutput = TypedDict(
    'StorageGatewayDescribeSMBSettingsOutput', {
        'GatewayARN': Optional[str],
        'DomainName': Optional[str],
        'Boolean': Optional[bool],
    }
)


StorageGatewayDescribeSnapshotScheduleOutput = TypedDict(
    'StorageGatewayDescribeSnapshotScheduleOutput', {
        'VolumeARN': Optional[str],
        'HourOfDay': Optional[int],
        'RecurrenceInHours': Optional[int],
        'Description': Optional[str],
        'GatewayTimezone': Optional[str],
    }
)


StorageGatewayStorediSCSIVolume = TypedDict(
    'StorageGatewayStorediSCSIVolume', {
        'VolumeARN': Optional[str],
        'VolumeId': Optional[str],
        'VolumeType': Optional[str],
        'VolumeStatus': Optional[str],
        'VolumeAttachmentStatus': Optional[str],
        'long': Optional[int],
        'DoubleObject': Optional[float],
        'DiskId': Optional[str],
        'SnapshotId': Optional[str],
        'boolean': Optional[bool],
        'VolumeiSCSIAttributes': Optional[StorageGatewayVolumeiSCSIAttributes],
        'CreatedDate': Optional[datetime.datetime],
        'VolumeUsedInBytes': Optional[int],
        'KMSKey': Optional[str],
        'TargetName': Optional[str],
    }
)


StorageGatewayDescribeStorediSCSIVolumesOutput = TypedDict(
    'StorageGatewayDescribeStorediSCSIVolumesOutput', {
        'StorediSCSIVolumes': Optional[List[StorageGatewayStorediSCSIVolume]],
    }
)


StorageGatewayTapeArchive = TypedDict(
    'StorageGatewayTapeArchive', {
        'TapeARN': Optional[str],
        'TapeBarcode': Optional[str],
        'Time': Optional[datetime.datetime],
        'TapeSize': Optional[int],
        'Time': Optional[datetime.datetime],
        'GatewayARN': Optional[str],
        'TapeArchiveStatus': Optional[str],
        'TapeUsage': Optional[int],
        'KMSKey': Optional[str],
        'PoolId': Optional[str],
    }
)


StorageGatewayDescribeTapeArchivesOutput = TypedDict(
    'StorageGatewayDescribeTapeArchivesOutput', {
        'TapeArchives': Optional[List[StorageGatewayTapeArchive]],
        'Marker': Optional[str],
    }
)


StorageGatewayTapeRecoveryPointInfo = TypedDict(
    'StorageGatewayTapeRecoveryPointInfo', {
        'TapeARN': Optional[str],
        'Time': Optional[datetime.datetime],
        'TapeSize': Optional[int],
        'TapeRecoveryPointStatus': Optional[str],
    }
)


StorageGatewayDescribeTapeRecoveryPointsOutput = TypedDict(
    'StorageGatewayDescribeTapeRecoveryPointsOutput', {
        'GatewayARN': Optional[str],
        'TapeRecoveryPointInfos': Optional[List[StorageGatewayTapeRecoveryPointInfo]],
        'Marker': Optional[str],
    }
)


StorageGatewayTape = TypedDict(
    'StorageGatewayTape', {
        'TapeARN': Optional[str],
        'TapeBarcode': Optional[str],
        'Time': Optional[datetime.datetime],
        'TapeSize': Optional[int],
        'TapeStatus': Optional[str],
        'VTLDeviceARN': Optional[str],
        'DoubleObject': Optional[float],
        'TapeUsage': Optional[int],
        'KMSKey': Optional[str],
        'PoolId': Optional[str],
    }
)


StorageGatewayDescribeTapesOutput = TypedDict(
    'StorageGatewayDescribeTapesOutput', {
        'Tapes': Optional[List[StorageGatewayTape]],
        'Marker': Optional[str],
    }
)


StorageGatewayDescribeUploadBufferOutput = TypedDict(
    'StorageGatewayDescribeUploadBufferOutput', {
        'GatewayARN': Optional[str],
        'DiskIds': Optional[List[str]],
        'long': Optional[int],
        'long': Optional[int],
    }
)


StorageGatewayDeviceiSCSIAttributes = TypedDict(
    'StorageGatewayDeviceiSCSIAttributes', {
        'TargetARN': Optional[str],
        'NetworkInterfaceId': Optional[str],
        'integer': Optional[int],
        'boolean': Optional[bool],
    }
)


StorageGatewayVTLDevice = TypedDict(
    'StorageGatewayVTLDevice', {
        'VTLDeviceARN': Optional[str],
        'VTLDeviceType': Optional[str],
        'VTLDeviceVendor': Optional[str],
        'VTLDeviceProductIdentifier': Optional[str],
        'DeviceiSCSIAttributes': Optional[StorageGatewayDeviceiSCSIAttributes],
    }
)


StorageGatewayDescribeVTLDevicesOutput = TypedDict(
    'StorageGatewayDescribeVTLDevicesOutput', {
        'GatewayARN': Optional[str],
        'VTLDevices': Optional[List[StorageGatewayVTLDevice]],
        'Marker': Optional[str],
    }
)


StorageGatewayDescribeWorkingStorageOutput = TypedDict(
    'StorageGatewayDescribeWorkingStorageOutput', {
        'GatewayARN': Optional[str],
        'DiskIds': Optional[List[str]],
        'long': Optional[int],
        'long': Optional[int],
    }
)


StorageGatewayDetachVolumeOutput = TypedDict(
    'StorageGatewayDetachVolumeOutput', {
        'VolumeARN': Optional[str],
    }
)


StorageGatewayDisableGatewayOutput = TypedDict(
    'StorageGatewayDisableGatewayOutput', {
        'GatewayARN': Optional[str],
    }
)


StorageGatewayJoinDomainOutput = TypedDict(
    'StorageGatewayJoinDomainOutput', {
        'GatewayARN': Optional[str],
    }
)


StorageGatewayFileShareInfo = TypedDict(
    'StorageGatewayFileShareInfo', {
        'FileShareType': Optional[str],
        'FileShareARN': Optional[str],
        'FileShareId': Optional[str],
        'FileShareStatus': Optional[str],
        'GatewayARN': Optional[str],
    }
)


StorageGatewayListFileSharesOutput = TypedDict(
    'StorageGatewayListFileSharesOutput', {
        'Marker': Optional[str],
        'Marker': Optional[str],
        'FileShareInfoList': Optional[List[StorageGatewayFileShareInfo]],
    }
)


StorageGatewayGatewayInfo = TypedDict(
    'StorageGatewayGatewayInfo', {
        'GatewayId': Optional[str],
        'GatewayARN': Optional[str],
        'GatewayType': Optional[str],
        'GatewayOperationalState': Optional[str],
        'string': Optional[str],
        'Ec2InstanceId': Optional[str],
        'Ec2InstanceRegion': Optional[str],
    }
)


StorageGatewayListGatewaysOutput = TypedDict(
    'StorageGatewayListGatewaysOutput', {
        'Gateways': Optional[List[StorageGatewayGatewayInfo]],
        'Marker': Optional[str],
    }
)


StorageGatewayDisk = TypedDict(
    'StorageGatewayDisk', {
        'DiskId': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'string': Optional[str],
        'long': Optional[int],
        'DiskAllocationType': Optional[str],
        'string': Optional[str],
        'DiskAttributeList': Optional[List[str]],
    }
)


StorageGatewayListLocalDisksOutput = TypedDict(
    'StorageGatewayListLocalDisksOutput', {
        'GatewayARN': Optional[str],
        'Disks': Optional[List[StorageGatewayDisk]],
    }
)


StorageGatewayListTagsForResourceOutput = TypedDict(
    'StorageGatewayListTagsForResourceOutput', {
        'ResourceARN': Optional[str],
        'Marker': Optional[str],
        'Tags': Optional[List[StorageGatewayTag]],
    }
)


StorageGatewayTapeInfo = TypedDict(
    'StorageGatewayTapeInfo', {
        'TapeARN': Optional[str],
        'TapeBarcode': Optional[str],
        'TapeSize': Optional[int],
        'TapeStatus': Optional[str],
        'GatewayARN': Optional[str],
        'PoolId': Optional[str],
    }
)


StorageGatewayListTapesOutput = TypedDict(
    'StorageGatewayListTapesOutput', {
        'TapeInfos': Optional[List[StorageGatewayTapeInfo]],
        'Marker': Optional[str],
    }
)


StorageGatewayListVolumeInitiatorsOutput = TypedDict(
    'StorageGatewayListVolumeInitiatorsOutput', {
        'Initiators': Optional[List[str]],
    }
)


StorageGatewayVolumeRecoveryPointInfo = TypedDict(
    'StorageGatewayVolumeRecoveryPointInfo', {
        'VolumeARN': Optional[str],
        'long': Optional[int],
        'long': Optional[int],
        'string': Optional[str],
    }
)


StorageGatewayListVolumeRecoveryPointsOutput = TypedDict(
    'StorageGatewayListVolumeRecoveryPointsOutput', {
        'GatewayARN': Optional[str],
        'VolumeRecoveryPointInfos': Optional[List[StorageGatewayVolumeRecoveryPointInfo]],
    }
)


StorageGatewayVolumeInfo = TypedDict(
    'StorageGatewayVolumeInfo', {
        'VolumeARN': Optional[str],
        'VolumeId': Optional[str],
        'GatewayARN': Optional[str],
        'GatewayId': Optional[str],
        'VolumeType': Optional[str],
        'long': Optional[int],
        'VolumeAttachmentStatus': Optional[str],
    }
)


StorageGatewayListVolumesOutput = TypedDict(
    'StorageGatewayListVolumesOutput', {
        'GatewayARN': Optional[str],
        'Marker': Optional[str],
        'VolumeInfos': Optional[List[StorageGatewayVolumeInfo]],
    }
)


StorageGatewayNotifyWhenUploadedOutput = TypedDict(
    'StorageGatewayNotifyWhenUploadedOutput', {
        'FileShareARN': Optional[str],
        'NotificationId': Optional[str],
    }
)


StorageGatewayRefreshCacheOutput = TypedDict(
    'StorageGatewayRefreshCacheOutput', {
        'FileShareARN': Optional[str],
        'NotificationId': Optional[str],
    }
)


StorageGatewayRemoveTagsFromResourceOutput = TypedDict(
    'StorageGatewayRemoveTagsFromResourceOutput', {
        'ResourceARN': Optional[str],
    }
)


StorageGatewayResetCacheOutput = TypedDict(
    'StorageGatewayResetCacheOutput', {
        'GatewayARN': Optional[str],
    }
)


StorageGatewayRetrieveTapeArchiveOutput = TypedDict(
    'StorageGatewayRetrieveTapeArchiveOutput', {
        'TapeARN': Optional[str],
    }
)


StorageGatewayRetrieveTapeRecoveryPointOutput = TypedDict(
    'StorageGatewayRetrieveTapeRecoveryPointOutput', {
        'TapeARN': Optional[str],
    }
)


StorageGatewaySetLocalConsolePasswordOutput = TypedDict(
    'StorageGatewaySetLocalConsolePasswordOutput', {
        'GatewayARN': Optional[str],
    }
)


StorageGatewaySetSMBGuestPasswordOutput = TypedDict(
    'StorageGatewaySetSMBGuestPasswordOutput', {
        'GatewayARN': Optional[str],
    }
)


StorageGatewayShutdownGatewayOutput = TypedDict(
    'StorageGatewayShutdownGatewayOutput', {
        'GatewayARN': Optional[str],
    }
)


StorageGatewayStartGatewayOutput = TypedDict(
    'StorageGatewayStartGatewayOutput', {
        'GatewayARN': Optional[str],
    }
)


StorageGatewayUpdateBandwidthRateLimitOutput = TypedDict(
    'StorageGatewayUpdateBandwidthRateLimitOutput', {
        'GatewayARN': Optional[str],
    }
)


StorageGatewayUpdateChapCredentialsOutput = TypedDict(
    'StorageGatewayUpdateChapCredentialsOutput', {
        'TargetARN': Optional[str],
        'IqnName': Optional[str],
    }
)


StorageGatewayUpdateGatewayInformationOutput = TypedDict(
    'StorageGatewayUpdateGatewayInformationOutput', {
        'GatewayARN': Optional[str],
        'string': Optional[str],
    }
)


StorageGatewayUpdateGatewaySoftwareNowOutput = TypedDict(
    'StorageGatewayUpdateGatewaySoftwareNowOutput', {
        'GatewayARN': Optional[str],
    }
)


StorageGatewayUpdateMaintenanceStartTimeOutput = TypedDict(
    'StorageGatewayUpdateMaintenanceStartTimeOutput', {
        'GatewayARN': Optional[str],
    }
)


StorageGatewayUpdateNFSFileShareOutput = TypedDict(
    'StorageGatewayUpdateNFSFileShareOutput', {
        'FileShareARN': Optional[str],
    }
)


StorageGatewayUpdateSMBFileShareOutput = TypedDict(
    'StorageGatewayUpdateSMBFileShareOutput', {
        'FileShareARN': Optional[str],
    }
)


StorageGatewayUpdateSnapshotScheduleOutput = TypedDict(
    'StorageGatewayUpdateSnapshotScheduleOutput', {
        'VolumeARN': Optional[str],
    }
)


StorageGatewayUpdateVTLDeviceTypeOutput = TypedDict(
    'StorageGatewayUpdateVTLDeviceTypeOutput', {
        'VTLDeviceARN': Optional[str],
    }
)


class STS(BaseClient):
    def assume_role(self, *,
        RoleArn: str,
        RoleSessionName: str,
        Policy: str = ...,
        DurationSeconds: int = ...,
        ExternalId: str = ...,
        SerialNumber: str = ...,
        TokenCode: str = ...
    ) -> STSAssumeRoleResponse: ...

    def assume_role_with_saml(self, *,
        RoleArn: str,
        PrincipalArn: str,
        SAMLAssertion: str,
        Policy: str = ...,
        DurationSeconds: int = ...
    ) -> STSAssumeRoleWithSAMLResponse: ...

    def assume_role_with_web_identity(self, *,
        RoleArn: str,
        RoleSessionName: str,
        WebIdentityToken: str,
        ProviderId: str = ...,
        Policy: str = ...,
        DurationSeconds: int = ...
    ) -> STSAssumeRoleWithWebIdentityResponse: ...

    def decode_authorization_message(self, *,
        EncodedMessage: str
    ) -> STSDecodeAuthorizationMessageResponse: ...

    def get_caller_identity(self) -> STSGetCallerIdentityResponse: ...

    def get_federation_token(self, *,
        Name: str,
        Policy: str = ...,
        DurationSeconds: int = ...
    ) -> STSGetFederationTokenResponse: ...

    def get_session_token(self, *,
        DurationSeconds: int = ...,
        SerialNumber: str = ...,
        TokenCode: str = ...
    ) -> STSGetSessionTokenResponse: ...


STSCredentials = TypedDict(
    'STSCredentials', {
        'accessKeyIdType': str,
        'accessKeySecretType': str,
        'tokenType': str,
        'dateType': datetime.datetime,
    }
)


STSAssumedRoleUser = TypedDict(
    'STSAssumedRoleUser', {
        'assumedRoleIdType': str,
        'arnType': str,
    }
)


STSAssumeRoleResponse = TypedDict(
    'STSAssumeRoleResponse', {
        'Credentials': Optional[STSCredentials],
        'AssumedRoleUser': Optional[STSAssumedRoleUser],
        'nonNegativeIntegerType': Optional[int],
    }
)


STSAssumeRoleWithSAMLResponse = TypedDict(
    'STSAssumeRoleWithSAMLResponse', {
        'Credentials': Optional[STSCredentials],
        'AssumedRoleUser': Optional[STSAssumedRoleUser],
        'nonNegativeIntegerType': Optional[int],
        'Subject': Optional[str],
        'SubjectType': Optional[str],
        'Issuer': Optional[str],
        'Audience': Optional[str],
        'NameQualifier': Optional[str],
    }
)


STSAssumeRoleWithWebIdentityResponse = TypedDict(
    'STSAssumeRoleWithWebIdentityResponse', {
        'Credentials': Optional[STSCredentials],
        'webIdentitySubjectType': Optional[str],
        'AssumedRoleUser': Optional[STSAssumedRoleUser],
        'nonNegativeIntegerType': Optional[int],
        'Issuer': Optional[str],
        'Audience': Optional[str],
    }
)


STSDecodeAuthorizationMessageResponse = TypedDict(
    'STSDecodeAuthorizationMessageResponse', {
        'decodedMessageType': Optional[str],
    }
)


STSGetCallerIdentityResponse = TypedDict(
    'STSGetCallerIdentityResponse', {
        'userIdType': Optional[str],
        'accountType': Optional[str],
        'arnType': Optional[str],
    }
)


STSFederatedUser = TypedDict(
    'STSFederatedUser', {
        'federatedIdType': str,
        'arnType': str,
    }
)


STSGetFederationTokenResponse = TypedDict(
    'STSGetFederationTokenResponse', {
        'Credentials': Optional[STSCredentials],
        'FederatedUser': Optional[STSFederatedUser],
        'nonNegativeIntegerType': Optional[int],
    }
)


STSGetSessionTokenResponse = TypedDict(
    'STSGetSessionTokenResponse', {
        'Credentials': Optional[STSCredentials],
    }
)


class Support(BaseClient):
    def add_attachments_to_set(self, *,
        attachments: List[SupportAttachment],
        attachmentSetId: str = ...
    ) -> SupportAddAttachmentsToSetResponse: ...

    def add_communication_to_case(self, *,
        communicationBody: str,
        caseId: str = ...,
        ccEmailAddresses: List[str] = ...,
        attachmentSetId: str = ...
    ) -> SupportAddCommunicationToCaseResponse: ...

    def create_case(self, *,
        subject: str,
        communicationBody: str,
        serviceCode: str = ...,
        severityCode: str = ...,
        categoryCode: str = ...,
        ccEmailAddresses: List[str] = ...,
        language: str = ...,
        issueType: str = ...,
        attachmentSetId: str = ...
    ) -> SupportCreateCaseResponse: ...

    def describe_attachment(self, *,
        attachmentId: str
    ) -> SupportDescribeAttachmentResponse: ...

    def describe_cases(self, *,
        caseIdList: List[str] = ...,
        displayId: str = ...,
        afterTime: str = ...,
        beforeTime: str = ...,
        includeResolvedCases: bool = ...,
        nextToken: str = ...,
        maxResults: int = ...,
        language: str = ...,
        includeCommunications: bool = ...
    ) -> SupportDescribeCasesResponse: ...

    def describe_communications(self, *,
        caseId: str,
        beforeTime: str = ...,
        afterTime: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> SupportDescribeCommunicationsResponse: ...

    def describe_services(self, *,
        serviceCodeList: List[str] = ...,
        language: str = ...
    ) -> SupportDescribeServicesResponse: ...

    def describe_severity_levels(self, *,
        language: str = ...
    ) -> SupportDescribeSeverityLevelsResponse: ...

    def describe_trusted_advisor_check_refresh_statuses(self, *,
        checkIds: List[str]
    ) -> SupportDescribeTrustedAdvisorCheckRefreshStatusesResponse: ...

    def describe_trusted_advisor_check_result(self, *,
        checkId: str,
        language: str = ...
    ) -> SupportDescribeTrustedAdvisorCheckResultResponse: ...

    def describe_trusted_advisor_check_summaries(self, *,
        checkIds: List[str]
    ) -> SupportDescribeTrustedAdvisorCheckSummariesResponse: ...

    def describe_trusted_advisor_checks(self, *,
        language: str
    ) -> SupportDescribeTrustedAdvisorChecksResponse: ...

    def refresh_trusted_advisor_check(self, *,
        checkId: str
    ) -> SupportRefreshTrustedAdvisorCheckResponse: ...

    def resolve_case(self, *,
        caseId: str = ...
    ) -> SupportResolveCaseResponse: ...


SupportAttachment = TypedDict(
    'SupportAttachment', {
        'FileName': Optional[str],
        'Data': Optional[bytes],
    }
)


SupportAddAttachmentsToSetResponse = TypedDict(
    'SupportAddAttachmentsToSetResponse', {
        'AttachmentSetId': Optional[str],
        'ExpiryTime': Optional[str],
    }
)


SupportAddCommunicationToCaseResponse = TypedDict(
    'SupportAddCommunicationToCaseResponse', {
        'Result': Optional[bool],
    }
)


SupportCreateCaseResponse = TypedDict(
    'SupportCreateCaseResponse', {
        'CaseId': Optional[str],
    }
)


SupportDescribeAttachmentResponse = TypedDict(
    'SupportDescribeAttachmentResponse', {
        'Attachment': Optional[SupportAttachment],
    }
)


SupportAttachmentDetails = TypedDict(
    'SupportAttachmentDetails', {
        'AttachmentId': Optional[str],
        'FileName': Optional[str],
    }
)


SupportCommunication = TypedDict(
    'SupportCommunication', {
        'CaseId': Optional[str],
        'CommunicationBody': Optional[str],
        'SubmittedBy': Optional[str],
        'TimeCreated': Optional[str],
        'AttachmentSet': Optional[List[SupportAttachmentDetails]],
    }
)


SupportRecentCaseCommunications = TypedDict(
    'SupportRecentCaseCommunications', {
        'CommunicationList': Optional[List[SupportCommunication]],
        'NextToken': Optional[str],
    }
)


SupportCaseDetails = TypedDict(
    'SupportCaseDetails', {
        'CaseId': Optional[str],
        'DisplayId': Optional[str],
        'Subject': Optional[str],
        'Status': Optional[str],
        'ServiceCode': Optional[str],
        'CategoryCode': Optional[str],
        'SeverityCode': Optional[str],
        'SubmittedBy': Optional[str],
        'TimeCreated': Optional[str],
        'RecentCaseCommunications': Optional[SupportRecentCaseCommunications],
        'CcEmailAddressList': Optional[List[str]],
        'Language': Optional[str],
    }
)


SupportDescribeCasesResponse = TypedDict(
    'SupportDescribeCasesResponse', {
        'CaseList': Optional[List[SupportCaseDetails]],
        'NextToken': Optional[str],
    }
)


SupportDescribeCommunicationsResponse = TypedDict(
    'SupportDescribeCommunicationsResponse', {
        'CommunicationList': Optional[List[SupportCommunication]],
        'NextToken': Optional[str],
    }
)


SupportCategory = TypedDict(
    'SupportCategory', {
        'CategoryCode': Optional[str],
        'CategoryName': Optional[str],
    }
)


SupportService = TypedDict(
    'SupportService', {
        'ServiceCode': Optional[str],
        'ServiceName': Optional[str],
        'CategoryList': Optional[List[SupportCategory]],
    }
)


SupportDescribeServicesResponse = TypedDict(
    'SupportDescribeServicesResponse', {
        'ServiceList': Optional[List[SupportService]],
    }
)


SupportSeverityLevel = TypedDict(
    'SupportSeverityLevel', {
        'SeverityLevelCode': Optional[str],
        'SeverityLevelName': Optional[str],
    }
)


SupportDescribeSeverityLevelsResponse = TypedDict(
    'SupportDescribeSeverityLevelsResponse', {
        'SeverityLevelsList': Optional[List[SupportSeverityLevel]],
    }
)


SupportTrustedAdvisorCheckRefreshStatus = TypedDict(
    'SupportTrustedAdvisorCheckRefreshStatus', {
        'String': str,
        'String': str,
        'Long': int,
    }
)


SupportDescribeTrustedAdvisorCheckRefreshStatusesResponse = TypedDict(
    'SupportDescribeTrustedAdvisorCheckRefreshStatusesResponse', {
        'TrustedAdvisorCheckRefreshStatusList': List[SupportTrustedAdvisorCheckRefreshStatus],
    }
)


SupportTrustedAdvisorResourcesSummary = TypedDict(
    'SupportTrustedAdvisorResourcesSummary', {
        'Long': int,
        'Long': int,
        'Long': int,
        'Long': int,
    }
)


SupportTrustedAdvisorCostOptimizingSummary = TypedDict(
    'SupportTrustedAdvisorCostOptimizingSummary', {
        'Double': float,
        'Double': float,
    }
)


SupportTrustedAdvisorCategorySpecificSummary = TypedDict(
    'SupportTrustedAdvisorCategorySpecificSummary', {
        'TrustedAdvisorCostOptimizingSummary': Optional[SupportTrustedAdvisorCostOptimizingSummary],
    }
)


SupportTrustedAdvisorResourceDetail = TypedDict(
    'SupportTrustedAdvisorResourceDetail', {
        'String': str,
        'String': str,
        'StringList': List[str],
        'String': Optional[str],
        'Boolean': Optional[bool],
    }
)


SupportTrustedAdvisorCheckResult = TypedDict(
    'SupportTrustedAdvisorCheckResult', {
        'String': str,
        'String': str,
        'String': str,
        'TrustedAdvisorResourcesSummary': SupportTrustedAdvisorResourcesSummary,
        'TrustedAdvisorCategorySpecificSummary': SupportTrustedAdvisorCategorySpecificSummary,
        'TrustedAdvisorResourceDetailList': List[SupportTrustedAdvisorResourceDetail],
    }
)


SupportDescribeTrustedAdvisorCheckResultResponse = TypedDict(
    'SupportDescribeTrustedAdvisorCheckResultResponse', {
        'TrustedAdvisorCheckResult': Optional[SupportTrustedAdvisorCheckResult],
    }
)


SupportTrustedAdvisorCheckSummary = TypedDict(
    'SupportTrustedAdvisorCheckSummary', {
        'String': str,
        'String': str,
        'String': str,
        'TrustedAdvisorResourcesSummary': SupportTrustedAdvisorResourcesSummary,
        'TrustedAdvisorCategorySpecificSummary': SupportTrustedAdvisorCategorySpecificSummary,
        'Boolean': Optional[bool],
    }
)


SupportDescribeTrustedAdvisorCheckSummariesResponse = TypedDict(
    'SupportDescribeTrustedAdvisorCheckSummariesResponse', {
        'TrustedAdvisorCheckSummaryList': List[SupportTrustedAdvisorCheckSummary],
    }
)


SupportTrustedAdvisorCheckDescription = TypedDict(
    'SupportTrustedAdvisorCheckDescription', {
        'String': str,
        'String': str,
        'String': str,
        'String': str,
        'StringList': List[str],
    }
)


SupportDescribeTrustedAdvisorChecksResponse = TypedDict(
    'SupportDescribeTrustedAdvisorChecksResponse', {
        'TrustedAdvisorCheckList': List[SupportTrustedAdvisorCheckDescription],
    }
)


SupportRefreshTrustedAdvisorCheckResponse = TypedDict(
    'SupportRefreshTrustedAdvisorCheckResponse', {
        'TrustedAdvisorCheckRefreshStatus': SupportTrustedAdvisorCheckRefreshStatus,
    }
)


SupportResolveCaseResponse = TypedDict(
    'SupportResolveCaseResponse', {
        'CaseStatus': Optional[str],
        'CaseStatus': Optional[str],
    }
)


class SWF(BaseClient):
    def count_closed_workflow_executions(self, *,
        domain: str,
        startTimeFilter: SWFExecutionTimeFilter = ...,
        closeTimeFilter: SWFExecutionTimeFilter = ...,
        executionFilter: SWFWorkflowExecutionFilter = ...,
        typeFilter: SWFWorkflowTypeFilter = ...,
        tagFilter: SWFTagFilter = ...,
        closeStatusFilter: SWFCloseStatusFilter = ...
    ) -> SWFWorkflowExecutionCount: ...

    def count_open_workflow_executions(self, *,
        domain: str,
        startTimeFilter: SWFExecutionTimeFilter,
        typeFilter: SWFWorkflowTypeFilter = ...,
        tagFilter: SWFTagFilter = ...,
        executionFilter: SWFWorkflowExecutionFilter = ...
    ) -> SWFWorkflowExecutionCount: ...

    def count_pending_activity_tasks(self, *,
        domain: str,
        taskList: SWFTaskList
    ) -> SWFPendingTaskCount: ...

    def count_pending_decision_tasks(self, *,
        domain: str,
        taskList: SWFTaskList
    ) -> SWFPendingTaskCount: ...

    def deprecate_activity_type(self, *,
        domain: str,
        activityType: SWFActivityType
    ): ...

    def deprecate_domain(self, *,
        name: str
    ): ...

    def deprecate_workflow_type(self, *,
        domain: str,
        workflowType: SWFWorkflowType
    ): ...

    def describe_activity_type(self, *,
        domain: str,
        activityType: SWFActivityType
    ) -> SWFActivityTypeDetail: ...

    def describe_domain(self, *,
        name: str
    ) -> SWFDomainDetail: ...

    def describe_workflow_execution(self, *,
        domain: str,
        execution: SWFWorkflowExecution
    ) -> SWFWorkflowExecutionDetail: ...

    def describe_workflow_type(self, *,
        domain: str,
        workflowType: SWFWorkflowType
    ) -> SWFWorkflowTypeDetail: ...

    def get_workflow_execution_history(self, *,
        domain: str,
        execution: SWFWorkflowExecution,
        nextPageToken: str = ...,
        maximumPageSize: int = ...,
        reverseOrder: bool = ...
    ) -> SWFHistory: ...

    def list_activity_types(self, *,
        domain: str,
        registrationStatus: str,
        name: str = ...,
        nextPageToken: str = ...,
        maximumPageSize: int = ...,
        reverseOrder: bool = ...
    ) -> SWFActivityTypeInfos: ...

    def list_closed_workflow_executions(self, *,
        domain: str,
        startTimeFilter: SWFExecutionTimeFilter = ...,
        closeTimeFilter: SWFExecutionTimeFilter = ...,
        executionFilter: SWFWorkflowExecutionFilter = ...,
        closeStatusFilter: SWFCloseStatusFilter = ...,
        typeFilter: SWFWorkflowTypeFilter = ...,
        tagFilter: SWFTagFilter = ...,
        nextPageToken: str = ...,
        maximumPageSize: int = ...,
        reverseOrder: bool = ...
    ) -> SWFWorkflowExecutionInfos: ...

    def list_domains(self, *,
        registrationStatus: str,
        nextPageToken: str = ...,
        maximumPageSize: int = ...,
        reverseOrder: bool = ...
    ) -> SWFDomainInfos: ...

    def list_open_workflow_executions(self, *,
        domain: str,
        startTimeFilter: SWFExecutionTimeFilter,
        typeFilter: SWFWorkflowTypeFilter = ...,
        tagFilter: SWFTagFilter = ...,
        nextPageToken: str = ...,
        maximumPageSize: int = ...,
        reverseOrder: bool = ...,
        executionFilter: SWFWorkflowExecutionFilter = ...
    ) -> SWFWorkflowExecutionInfos: ...

    def list_workflow_types(self, *,
        domain: str,
        registrationStatus: str,
        name: str = ...,
        nextPageToken: str = ...,
        maximumPageSize: int = ...,
        reverseOrder: bool = ...
    ) -> SWFWorkflowTypeInfos: ...

    def poll_for_activity_task(self, *,
        domain: str,
        taskList: SWFTaskList,
        identity: str = ...
    ) -> SWFActivityTask: ...

    def poll_for_decision_task(self, *,
        domain: str,
        taskList: SWFTaskList,
        identity: str = ...,
        nextPageToken: str = ...,
        maximumPageSize: int = ...,
        reverseOrder: bool = ...
    ) -> SWFDecisionTask: ...

    def record_activity_task_heartbeat(self, *,
        taskToken: str,
        details: str = ...
    ) -> SWFActivityTaskStatus: ...

    def register_activity_type(self, *,
        domain: str,
        name: str,
        version: str,
        description: str = ...,
        defaultTaskStartToCloseTimeout: str = ...,
        defaultTaskHeartbeatTimeout: str = ...,
        defaultTaskList: SWFTaskList = ...,
        defaultTaskPriority: str = ...,
        defaultTaskScheduleToStartTimeout: str = ...,
        defaultTaskScheduleToCloseTimeout: str = ...
    ): ...

    def register_domain(self, *,
        name: str,
        workflowExecutionRetentionPeriodInDays: str,
        description: str = ...
    ): ...

    def register_workflow_type(self, *,
        domain: str,
        name: str,
        version: str,
        description: str = ...,
        defaultTaskStartToCloseTimeout: str = ...,
        defaultExecutionStartToCloseTimeout: str = ...,
        defaultTaskList: SWFTaskList = ...,
        defaultTaskPriority: str = ...,
        defaultChildPolicy: str = ...,
        defaultLambdaRole: str = ...
    ): ...

    def request_cancel_workflow_execution(self, *,
        domain: str,
        workflowId: str,
        runId: str = ...
    ): ...

    def respond_activity_task_canceled(self, *,
        taskToken: str,
        details: str = ...
    ): ...

    def respond_activity_task_completed(self, *,
        taskToken: str,
        result: str = ...
    ): ...

    def respond_activity_task_failed(self, *,
        taskToken: str,
        reason: str = ...,
        details: str = ...
    ): ...

    def respond_decision_task_completed(self, *,
        taskToken: str,
        decisions: List[SWFDecision] = ...,
        executionContext: str = ...
    ): ...

    def signal_workflow_execution(self, *,
        domain: str,
        workflowId: str,
        signalName: str,
        runId: str = ...,
        input: str = ...
    ): ...

    def start_workflow_execution(self, *,
        domain: str,
        workflowId: str,
        workflowType: SWFWorkflowType,
        taskList: SWFTaskList = ...,
        taskPriority: str = ...,
        input: str = ...,
        executionStartToCloseTimeout: str = ...,
        tagList: List[str] = ...,
        taskStartToCloseTimeout: str = ...,
        childPolicy: str = ...,
        lambdaRole: str = ...
    ) -> SWFRun: ...

    def terminate_workflow_execution(self, *,
        domain: str,
        workflowId: str,
        runId: str = ...,
        reason: str = ...,
        details: str = ...,
        childPolicy: str = ...
    ): ...


SWFExecutionTimeFilter = TypedDict(
    'SWFExecutionTimeFilter', {
        'Timestamp': datetime.datetime,
        'Timestamp': Optional[datetime.datetime],
    }
)


SWFWorkflowExecutionFilter = TypedDict(
    'SWFWorkflowExecutionFilter', {
        'WorkflowId': str,
    }
)


SWFWorkflowTypeFilter = TypedDict(
    'SWFWorkflowTypeFilter', {
        'Name': str,
        'VersionOptional': Optional[str],
    }
)


SWFTagFilter = TypedDict(
    'SWFTagFilter', {
        'Tag': str,
    }
)


SWFCloseStatusFilter = TypedDict(
    'SWFCloseStatusFilter', {
        'CloseStatus': str,
    }
)


SWFWorkflowExecutionCount = TypedDict(
    'SWFWorkflowExecutionCount', {
        'Count': int,
        'Truncated': Optional[bool],
    }
)


SWFTaskList = TypedDict(
    'SWFTaskList', {
        'Name': str,
    }
)


SWFPendingTaskCount = TypedDict(
    'SWFPendingTaskCount', {
        'Count': int,
        'Truncated': Optional[bool],
    }
)


SWFActivityType = TypedDict(
    'SWFActivityType', {
        'Name': str,
        'Version': str,
    }
)


SWFWorkflowType = TypedDict(
    'SWFWorkflowType', {
        'Name': str,
        'Version': str,
    }
)


SWFActivityTypeInfo = TypedDict(
    'SWFActivityTypeInfo', {
        'ActivityType': SWFActivityType,
        'RegistrationStatus': str,
        'Timestamp': datetime.datetime,
        'Description': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


SWFActivityTypeConfiguration = TypedDict(
    'SWFActivityTypeConfiguration', {
        'DurationInSecondsOptional': Optional[str],
        'DurationInSecondsOptional': Optional[str],
        'TaskList': Optional[SWFTaskList],
        'TaskPriority': Optional[str],
        'DurationInSecondsOptional': Optional[str],
        'DurationInSecondsOptional': Optional[str],
    }
)


SWFActivityTypeDetail = TypedDict(
    'SWFActivityTypeDetail', {
        'ActivityTypeInfo': SWFActivityTypeInfo,
        'ActivityTypeConfiguration': SWFActivityTypeConfiguration,
    }
)


SWFDomainInfo = TypedDict(
    'SWFDomainInfo', {
        'DomainName': str,
        'RegistrationStatus': str,
        'Description': Optional[str],
    }
)


SWFDomainConfiguration = TypedDict(
    'SWFDomainConfiguration', {
        'DurationInDays': str,
    }
)


SWFDomainDetail = TypedDict(
    'SWFDomainDetail', {
        'DomainInfo': SWFDomainInfo,
        'DomainConfiguration': SWFDomainConfiguration,
    }
)


SWFWorkflowExecution = TypedDict(
    'SWFWorkflowExecution', {
        'WorkflowId': str,
        'WorkflowRunId': str,
    }
)


SWFWorkflowExecutionInfo = TypedDict(
    'SWFWorkflowExecutionInfo', {
        'WorkflowExecution': SWFWorkflowExecution,
        'WorkflowType': SWFWorkflowType,
        'Timestamp': datetime.datetime,
        'ExecutionStatus': str,
        'Timestamp': Optional[datetime.datetime],
        'CloseStatus': Optional[str],
        'WorkflowExecution': Optional[SWFWorkflowExecution],
        'TagList': Optional[List[str]],
        'Canceled': Optional[bool],
    }
)


SWFWorkflowExecutionConfiguration = TypedDict(
    'SWFWorkflowExecutionConfiguration', {
        'DurationInSeconds': str,
        'DurationInSeconds': str,
        'TaskList': SWFTaskList,
        'ChildPolicy': str,
        'TaskPriority': Optional[str],
        'Arn': Optional[str],
    }
)


SWFWorkflowExecutionOpenCounts = TypedDict(
    'SWFWorkflowExecutionOpenCounts', {
        'Count': int,
        'OpenDecisionTasksCount': int,
        'Count': int,
        'Count': int,
        'Count': Optional[int],
    }
)


SWFWorkflowExecutionDetail = TypedDict(
    'SWFWorkflowExecutionDetail', {
        'WorkflowExecutionInfo': SWFWorkflowExecutionInfo,
        'WorkflowExecutionConfiguration': SWFWorkflowExecutionConfiguration,
        'WorkflowExecutionOpenCounts': SWFWorkflowExecutionOpenCounts,
        'Timestamp': Optional[datetime.datetime],
        'Data': Optional[str],
    }
)


SWFWorkflowTypeInfo = TypedDict(
    'SWFWorkflowTypeInfo', {
        'WorkflowType': SWFWorkflowType,
        'RegistrationStatus': str,
        'Timestamp': datetime.datetime,
        'Description': Optional[str],
        'Timestamp': Optional[datetime.datetime],
    }
)


SWFWorkflowTypeConfiguration = TypedDict(
    'SWFWorkflowTypeConfiguration', {
        'DurationInSecondsOptional': Optional[str],
        'DurationInSecondsOptional': Optional[str],
        'TaskList': Optional[SWFTaskList],
        'TaskPriority': Optional[str],
        'ChildPolicy': Optional[str],
        'Arn': Optional[str],
    }
)


SWFWorkflowTypeDetail = TypedDict(
    'SWFWorkflowTypeDetail', {
        'WorkflowTypeInfo': SWFWorkflowTypeInfo,
        'WorkflowTypeConfiguration': SWFWorkflowTypeConfiguration,
    }
)


SWFWorkflowExecutionStartedEventAttributes = TypedDict(
    'SWFWorkflowExecutionStartedEventAttributes', {
        'ChildPolicy': str,
        'TaskList': SWFTaskList,
        'WorkflowType': SWFWorkflowType,
        'Data': Optional[str],
        'DurationInSecondsOptional': Optional[str],
        'DurationInSecondsOptional': Optional[str],
        'TaskPriority': Optional[str],
        'TagList': Optional[List[str]],
        'WorkflowRunIdOptional': Optional[str],
        'WorkflowExecution': Optional[SWFWorkflowExecution],
        'EventId': Optional[int],
        'Arn': Optional[str],
    }
)


SWFWorkflowExecutionCompletedEventAttributes = TypedDict(
    'SWFWorkflowExecutionCompletedEventAttributes', {
        'EventId': int,
        'Data': Optional[str],
    }
)


SWFCompleteWorkflowExecutionFailedEventAttributes = TypedDict(
    'SWFCompleteWorkflowExecutionFailedEventAttributes', {
        'CompleteWorkflowExecutionFailedCause': str,
        'EventId': int,
    }
)


SWFWorkflowExecutionFailedEventAttributes = TypedDict(
    'SWFWorkflowExecutionFailedEventAttributes', {
        'EventId': int,
        'FailureReason': Optional[str],
        'Data': Optional[str],
    }
)


SWFFailWorkflowExecutionFailedEventAttributes = TypedDict(
    'SWFFailWorkflowExecutionFailedEventAttributes', {
        'FailWorkflowExecutionFailedCause': str,
        'EventId': int,
    }
)


SWFWorkflowExecutionTimedOutEventAttributes = TypedDict(
    'SWFWorkflowExecutionTimedOutEventAttributes', {
        'WorkflowExecutionTimeoutType': str,
        'ChildPolicy': str,
    }
)


SWFWorkflowExecutionCanceledEventAttributes = TypedDict(
    'SWFWorkflowExecutionCanceledEventAttributes', {
        'EventId': int,
        'Data': Optional[str],
    }
)


SWFCancelWorkflowExecutionFailedEventAttributes = TypedDict(
    'SWFCancelWorkflowExecutionFailedEventAttributes', {
        'CancelWorkflowExecutionFailedCause': str,
        'EventId': int,
    }
)


SWFWorkflowExecutionContinuedAsNewEventAttributes = TypedDict(
    'SWFWorkflowExecutionContinuedAsNewEventAttributes', {
        'EventId': int,
        'WorkflowRunId': str,
        'TaskList': SWFTaskList,
        'ChildPolicy': str,
        'WorkflowType': SWFWorkflowType,
        'Data': Optional[str],
        'DurationInSecondsOptional': Optional[str],
        'TaskPriority': Optional[str],
        'DurationInSecondsOptional': Optional[str],
        'TagList': Optional[List[str]],
        'Arn': Optional[str],
    }
)


SWFContinueAsNewWorkflowExecutionFailedEventAttributes = TypedDict(
    'SWFContinueAsNewWorkflowExecutionFailedEventAttributes', {
        'ContinueAsNewWorkflowExecutionFailedCause': str,
        'EventId': int,
    }
)


SWFWorkflowExecutionTerminatedEventAttributes = TypedDict(
    'SWFWorkflowExecutionTerminatedEventAttributes', {
        'ChildPolicy': str,
        'TerminateReason': Optional[str],
        'Data': Optional[str],
        'WorkflowExecutionTerminatedCause': Optional[str],
    }
)


SWFWorkflowExecutionCancelRequestedEventAttributes = TypedDict(
    'SWFWorkflowExecutionCancelRequestedEventAttributes', {
        'WorkflowExecution': Optional[SWFWorkflowExecution],
        'EventId': Optional[int],
        'WorkflowExecutionCancelRequestedCause': Optional[str],
    }
)


SWFDecisionTaskScheduledEventAttributes = TypedDict(
    'SWFDecisionTaskScheduledEventAttributes', {
        'TaskList': SWFTaskList,
        'TaskPriority': Optional[str],
        'DurationInSecondsOptional': Optional[str],
    }
)


SWFDecisionTaskStartedEventAttributes = TypedDict(
    'SWFDecisionTaskStartedEventAttributes', {
        'EventId': int,
        'Identity': Optional[str],
    }
)


SWFDecisionTaskCompletedEventAttributes = TypedDict(
    'SWFDecisionTaskCompletedEventAttributes', {
        'EventId': int,
        'EventId': int,
        'Data': Optional[str],
    }
)


SWFDecisionTaskTimedOutEventAttributes = TypedDict(
    'SWFDecisionTaskTimedOutEventAttributes', {
        'DecisionTaskTimeoutType': str,
        'EventId': int,
        'EventId': int,
    }
)


SWFActivityTaskScheduledEventAttributes = TypedDict(
    'SWFActivityTaskScheduledEventAttributes', {
        'ActivityType': SWFActivityType,
        'ActivityId': str,
        'TaskList': SWFTaskList,
        'EventId': int,
        'Data': Optional[str],
        'Data': Optional[str],
        'DurationInSecondsOptional': Optional[str],
        'DurationInSecondsOptional': Optional[str],
        'DurationInSecondsOptional': Optional[str],
        'TaskPriority': Optional[str],
        'DurationInSecondsOptional': Optional[str],
    }
)


SWFActivityTaskStartedEventAttributes = TypedDict(
    'SWFActivityTaskStartedEventAttributes', {
        'EventId': int,
        'Identity': Optional[str],
    }
)


SWFActivityTaskCompletedEventAttributes = TypedDict(
    'SWFActivityTaskCompletedEventAttributes', {
        'EventId': int,
        'EventId': int,
        'Data': Optional[str],
    }
)


SWFActivityTaskFailedEventAttributes = TypedDict(
    'SWFActivityTaskFailedEventAttributes', {
        'EventId': int,
        'EventId': int,
        'FailureReason': Optional[str],
        'Data': Optional[str],
    }
)


SWFActivityTaskTimedOutEventAttributes = TypedDict(
    'SWFActivityTaskTimedOutEventAttributes', {
        'ActivityTaskTimeoutType': str,
        'EventId': int,
        'EventId': int,
        'LimitedData': Optional[str],
    }
)


SWFActivityTaskCanceledEventAttributes = TypedDict(
    'SWFActivityTaskCanceledEventAttributes', {
        'EventId': int,
        'EventId': int,
        'Data': Optional[str],
        'EventId': Optional[int],
    }
)


SWFActivityTaskCancelRequestedEventAttributes = TypedDict(
    'SWFActivityTaskCancelRequestedEventAttributes', {
        'EventId': int,
        'ActivityId': str,
    }
)


SWFWorkflowExecutionSignaledEventAttributes = TypedDict(
    'SWFWorkflowExecutionSignaledEventAttributes', {
        'SignalName': str,
        'Data': Optional[str],
        'WorkflowExecution': Optional[SWFWorkflowExecution],
        'EventId': Optional[int],
    }
)


SWFMarkerRecordedEventAttributes = TypedDict(
    'SWFMarkerRecordedEventAttributes', {
        'MarkerName': str,
        'EventId': int,
        'Data': Optional[str],
    }
)


SWFRecordMarkerFailedEventAttributes = TypedDict(
    'SWFRecordMarkerFailedEventAttributes', {
        'MarkerName': str,
        'RecordMarkerFailedCause': str,
        'EventId': int,
    }
)


SWFTimerStartedEventAttributes = TypedDict(
    'SWFTimerStartedEventAttributes', {
        'TimerId': str,
        'DurationInSeconds': str,
        'EventId': int,
        'Data': Optional[str],
    }
)


SWFTimerFiredEventAttributes = TypedDict(
    'SWFTimerFiredEventAttributes', {
        'TimerId': str,
        'EventId': int,
    }
)


SWFTimerCanceledEventAttributes = TypedDict(
    'SWFTimerCanceledEventAttributes', {
        'TimerId': str,
        'EventId': int,
        'EventId': int,
    }
)


SWFStartChildWorkflowExecutionInitiatedEventAttributes = TypedDict(
    'SWFStartChildWorkflowExecutionInitiatedEventAttributes', {
        'WorkflowId': str,
        'WorkflowType': SWFWorkflowType,
        'TaskList': SWFTaskList,
        'EventId': int,
        'ChildPolicy': str,
        'Data': Optional[str],
        'Data': Optional[str],
        'DurationInSecondsOptional': Optional[str],
        'TaskPriority': Optional[str],
        'DurationInSecondsOptional': Optional[str],
        'TagList': Optional[List[str]],
        'Arn': Optional[str],
    }
)


SWFChildWorkflowExecutionStartedEventAttributes = TypedDict(
    'SWFChildWorkflowExecutionStartedEventAttributes', {
        'WorkflowExecution': SWFWorkflowExecution,
        'WorkflowType': SWFWorkflowType,
        'EventId': int,
    }
)


SWFChildWorkflowExecutionCompletedEventAttributes = TypedDict(
    'SWFChildWorkflowExecutionCompletedEventAttributes', {
        'WorkflowExecution': SWFWorkflowExecution,
        'WorkflowType': SWFWorkflowType,
        'EventId': int,
        'EventId': int,
        'Data': Optional[str],
    }
)


SWFChildWorkflowExecutionFailedEventAttributes = TypedDict(
    'SWFChildWorkflowExecutionFailedEventAttributes', {
        'WorkflowExecution': SWFWorkflowExecution,
        'WorkflowType': SWFWorkflowType,
        'EventId': int,
        'EventId': int,
        'FailureReason': Optional[str],
        'Data': Optional[str],
    }
)


SWFChildWorkflowExecutionTimedOutEventAttributes = TypedDict(
    'SWFChildWorkflowExecutionTimedOutEventAttributes', {
        'WorkflowExecution': SWFWorkflowExecution,
        'WorkflowType': SWFWorkflowType,
        'WorkflowExecutionTimeoutType': str,
        'EventId': int,
        'EventId': int,
    }
)


SWFChildWorkflowExecutionCanceledEventAttributes = TypedDict(
    'SWFChildWorkflowExecutionCanceledEventAttributes', {
        'WorkflowExecution': SWFWorkflowExecution,
        'WorkflowType': SWFWorkflowType,
        'EventId': int,
        'EventId': int,
        'Data': Optional[str],
    }
)


SWFChildWorkflowExecutionTerminatedEventAttributes = TypedDict(
    'SWFChildWorkflowExecutionTerminatedEventAttributes', {
        'WorkflowExecution': SWFWorkflowExecution,
        'WorkflowType': SWFWorkflowType,
        'EventId': int,
        'EventId': int,
    }
)


SWFSignalExternalWorkflowExecutionInitiatedEventAttributes = TypedDict(
    'SWFSignalExternalWorkflowExecutionInitiatedEventAttributes', {
        'WorkflowId': str,
        'SignalName': str,
        'EventId': int,
        'WorkflowRunIdOptional': Optional[str],
        'Data': Optional[str],
        'Data': Optional[str],
    }
)


SWFExternalWorkflowExecutionSignaledEventAttributes = TypedDict(
    'SWFExternalWorkflowExecutionSignaledEventAttributes', {
        'WorkflowExecution': SWFWorkflowExecution,
        'EventId': int,
    }
)


SWFSignalExternalWorkflowExecutionFailedEventAttributes = TypedDict(
    'SWFSignalExternalWorkflowExecutionFailedEventAttributes', {
        'WorkflowId': str,
        'SignalExternalWorkflowExecutionFailedCause': str,
        'EventId': int,
        'EventId': int,
        'WorkflowRunIdOptional': Optional[str],
        'Data': Optional[str],
    }
)


SWFExternalWorkflowExecutionCancelRequestedEventAttributes = TypedDict(
    'SWFExternalWorkflowExecutionCancelRequestedEventAttributes', {
        'WorkflowExecution': SWFWorkflowExecution,
        'EventId': int,
    }
)


SWFRequestCancelExternalWorkflowExecutionInitiatedEventAttributes = TypedDict(
    'SWFRequestCancelExternalWorkflowExecutionInitiatedEventAttributes', {
        'WorkflowId': str,
        'EventId': int,
        'WorkflowRunIdOptional': Optional[str],
        'Data': Optional[str],
    }
)


SWFRequestCancelExternalWorkflowExecutionFailedEventAttributes = TypedDict(
    'SWFRequestCancelExternalWorkflowExecutionFailedEventAttributes', {
        'WorkflowId': str,
        'RequestCancelExternalWorkflowExecutionFailedCause': str,
        'EventId': int,
        'EventId': int,
        'WorkflowRunIdOptional': Optional[str],
        'Data': Optional[str],
    }
)


SWFScheduleActivityTaskFailedEventAttributes = TypedDict(
    'SWFScheduleActivityTaskFailedEventAttributes', {
        'ActivityType': SWFActivityType,
        'ActivityId': str,
        'ScheduleActivityTaskFailedCause': str,
        'EventId': int,
    }
)


SWFRequestCancelActivityTaskFailedEventAttributes = TypedDict(
    'SWFRequestCancelActivityTaskFailedEventAttributes', {
        'ActivityId': str,
        'RequestCancelActivityTaskFailedCause': str,
        'EventId': int,
    }
)


SWFStartTimerFailedEventAttributes = TypedDict(
    'SWFStartTimerFailedEventAttributes', {
        'TimerId': str,
        'StartTimerFailedCause': str,
        'EventId': int,
    }
)


SWFCancelTimerFailedEventAttributes = TypedDict(
    'SWFCancelTimerFailedEventAttributes', {
        'TimerId': str,
        'CancelTimerFailedCause': str,
        'EventId': int,
    }
)


SWFStartChildWorkflowExecutionFailedEventAttributes = TypedDict(
    'SWFStartChildWorkflowExecutionFailedEventAttributes', {
        'WorkflowType': SWFWorkflowType,
        'StartChildWorkflowExecutionFailedCause': str,
        'WorkflowId': str,
        'EventId': int,
        'EventId': int,
        'Data': Optional[str],
    }
)


SWFLambdaFunctionScheduledEventAttributes = TypedDict(
    'SWFLambdaFunctionScheduledEventAttributes', {
        'FunctionId': str,
        'FunctionName': str,
        'EventId': int,
        'Data': Optional[str],
        'FunctionInput': Optional[str],
        'DurationInSecondsOptional': Optional[str],
    }
)


SWFLambdaFunctionStartedEventAttributes = TypedDict(
    'SWFLambdaFunctionStartedEventAttributes', {
        'EventId': int,
    }
)


SWFLambdaFunctionCompletedEventAttributes = TypedDict(
    'SWFLambdaFunctionCompletedEventAttributes', {
        'EventId': int,
        'EventId': int,
        'Data': Optional[str],
    }
)


SWFLambdaFunctionFailedEventAttributes = TypedDict(
    'SWFLambdaFunctionFailedEventAttributes', {
        'EventId': int,
        'EventId': int,
        'FailureReason': Optional[str],
        'Data': Optional[str],
    }
)


SWFLambdaFunctionTimedOutEventAttributes = TypedDict(
    'SWFLambdaFunctionTimedOutEventAttributes', {
        'EventId': int,
        'EventId': int,
        'LambdaFunctionTimeoutType': Optional[str],
    }
)


SWFScheduleLambdaFunctionFailedEventAttributes = TypedDict(
    'SWFScheduleLambdaFunctionFailedEventAttributes', {
        'FunctionId': str,
        'FunctionName': str,
        'ScheduleLambdaFunctionFailedCause': str,
        'EventId': int,
    }
)


SWFStartLambdaFunctionFailedEventAttributes = TypedDict(
    'SWFStartLambdaFunctionFailedEventAttributes', {
        'EventId': Optional[int],
        'StartLambdaFunctionFailedCause': Optional[str],
        'CauseMessage': Optional[str],
    }
)


SWFHistoryEvent = TypedDict(
    'SWFHistoryEvent', {
        'Timestamp': datetime.datetime,
        'EventType': str,
        'EventId': int,
        'WorkflowExecutionStartedEventAttributes': Optional[SWFWorkflowExecutionStartedEventAttributes],
        'WorkflowExecutionCompletedEventAttributes': Optional[SWFWorkflowExecutionCompletedEventAttributes],
        'CompleteWorkflowExecutionFailedEventAttributes': Optional[SWFCompleteWorkflowExecutionFailedEventAttributes],
        'WorkflowExecutionFailedEventAttributes': Optional[SWFWorkflowExecutionFailedEventAttributes],
        'FailWorkflowExecutionFailedEventAttributes': Optional[SWFFailWorkflowExecutionFailedEventAttributes],
        'WorkflowExecutionTimedOutEventAttributes': Optional[SWFWorkflowExecutionTimedOutEventAttributes],
        'WorkflowExecutionCanceledEventAttributes': Optional[SWFWorkflowExecutionCanceledEventAttributes],
        'CancelWorkflowExecutionFailedEventAttributes': Optional[SWFCancelWorkflowExecutionFailedEventAttributes],
        'WorkflowExecutionContinuedAsNewEventAttributes': Optional[SWFWorkflowExecutionContinuedAsNewEventAttributes],
        'ContinueAsNewWorkflowExecutionFailedEventAttributes': Optional[SWFContinueAsNewWorkflowExecutionFailedEventAttributes],
        'WorkflowExecutionTerminatedEventAttributes': Optional[SWFWorkflowExecutionTerminatedEventAttributes],
        'WorkflowExecutionCancelRequestedEventAttributes': Optional[SWFWorkflowExecutionCancelRequestedEventAttributes],
        'DecisionTaskScheduledEventAttributes': Optional[SWFDecisionTaskScheduledEventAttributes],
        'DecisionTaskStartedEventAttributes': Optional[SWFDecisionTaskStartedEventAttributes],
        'DecisionTaskCompletedEventAttributes': Optional[SWFDecisionTaskCompletedEventAttributes],
        'DecisionTaskTimedOutEventAttributes': Optional[SWFDecisionTaskTimedOutEventAttributes],
        'ActivityTaskScheduledEventAttributes': Optional[SWFActivityTaskScheduledEventAttributes],
        'ActivityTaskStartedEventAttributes': Optional[SWFActivityTaskStartedEventAttributes],
        'ActivityTaskCompletedEventAttributes': Optional[SWFActivityTaskCompletedEventAttributes],
        'ActivityTaskFailedEventAttributes': Optional[SWFActivityTaskFailedEventAttributes],
        'ActivityTaskTimedOutEventAttributes': Optional[SWFActivityTaskTimedOutEventAttributes],
        'ActivityTaskCanceledEventAttributes': Optional[SWFActivityTaskCanceledEventAttributes],
        'ActivityTaskCancelRequestedEventAttributes': Optional[SWFActivityTaskCancelRequestedEventAttributes],
        'WorkflowExecutionSignaledEventAttributes': Optional[SWFWorkflowExecutionSignaledEventAttributes],
        'MarkerRecordedEventAttributes': Optional[SWFMarkerRecordedEventAttributes],
        'RecordMarkerFailedEventAttributes': Optional[SWFRecordMarkerFailedEventAttributes],
        'TimerStartedEventAttributes': Optional[SWFTimerStartedEventAttributes],
        'TimerFiredEventAttributes': Optional[SWFTimerFiredEventAttributes],
        'TimerCanceledEventAttributes': Optional[SWFTimerCanceledEventAttributes],
        'StartChildWorkflowExecutionInitiatedEventAttributes': Optional[SWFStartChildWorkflowExecutionInitiatedEventAttributes],
        'ChildWorkflowExecutionStartedEventAttributes': Optional[SWFChildWorkflowExecutionStartedEventAttributes],
        'ChildWorkflowExecutionCompletedEventAttributes': Optional[SWFChildWorkflowExecutionCompletedEventAttributes],
        'ChildWorkflowExecutionFailedEventAttributes': Optional[SWFChildWorkflowExecutionFailedEventAttributes],
        'ChildWorkflowExecutionTimedOutEventAttributes': Optional[SWFChildWorkflowExecutionTimedOutEventAttributes],
        'ChildWorkflowExecutionCanceledEventAttributes': Optional[SWFChildWorkflowExecutionCanceledEventAttributes],
        'ChildWorkflowExecutionTerminatedEventAttributes': Optional[SWFChildWorkflowExecutionTerminatedEventAttributes],
        'SignalExternalWorkflowExecutionInitiatedEventAttributes': Optional[SWFSignalExternalWorkflowExecutionInitiatedEventAttributes],
        'ExternalWorkflowExecutionSignaledEventAttributes': Optional[SWFExternalWorkflowExecutionSignaledEventAttributes],
        'SignalExternalWorkflowExecutionFailedEventAttributes': Optional[SWFSignalExternalWorkflowExecutionFailedEventAttributes],
        'ExternalWorkflowExecutionCancelRequestedEventAttributes': Optional[SWFExternalWorkflowExecutionCancelRequestedEventAttributes],
        'RequestCancelExternalWorkflowExecutionInitiatedEventAttributes': Optional[SWFRequestCancelExternalWorkflowExecutionInitiatedEventAttributes],
        'RequestCancelExternalWorkflowExecutionFailedEventAttributes': Optional[SWFRequestCancelExternalWorkflowExecutionFailedEventAttributes],
        'ScheduleActivityTaskFailedEventAttributes': Optional[SWFScheduleActivityTaskFailedEventAttributes],
        'RequestCancelActivityTaskFailedEventAttributes': Optional[SWFRequestCancelActivityTaskFailedEventAttributes],
        'StartTimerFailedEventAttributes': Optional[SWFStartTimerFailedEventAttributes],
        'CancelTimerFailedEventAttributes': Optional[SWFCancelTimerFailedEventAttributes],
        'StartChildWorkflowExecutionFailedEventAttributes': Optional[SWFStartChildWorkflowExecutionFailedEventAttributes],
        'LambdaFunctionScheduledEventAttributes': Optional[SWFLambdaFunctionScheduledEventAttributes],
        'LambdaFunctionStartedEventAttributes': Optional[SWFLambdaFunctionStartedEventAttributes],
        'LambdaFunctionCompletedEventAttributes': Optional[SWFLambdaFunctionCompletedEventAttributes],
        'LambdaFunctionFailedEventAttributes': Optional[SWFLambdaFunctionFailedEventAttributes],
        'LambdaFunctionTimedOutEventAttributes': Optional[SWFLambdaFunctionTimedOutEventAttributes],
        'ScheduleLambdaFunctionFailedEventAttributes': Optional[SWFScheduleLambdaFunctionFailedEventAttributes],
        'StartLambdaFunctionFailedEventAttributes': Optional[SWFStartLambdaFunctionFailedEventAttributes],
    }
)


SWFHistory = TypedDict(
    'SWFHistory', {
        'HistoryEventList': List[SWFHistoryEvent],
        'PageToken': Optional[str],
    }
)


SWFActivityTypeInfos = TypedDict(
    'SWFActivityTypeInfos', {
        'ActivityTypeInfoList': List[SWFActivityTypeInfo],
        'PageToken': Optional[str],
    }
)


SWFWorkflowExecutionInfos = TypedDict(
    'SWFWorkflowExecutionInfos', {
        'WorkflowExecutionInfoList': List[SWFWorkflowExecutionInfo],
        'PageToken': Optional[str],
    }
)


SWFDomainInfos = TypedDict(
    'SWFDomainInfos', {
        'DomainInfoList': List[SWFDomainInfo],
        'PageToken': Optional[str],
    }
)


SWFWorkflowTypeInfos = TypedDict(
    'SWFWorkflowTypeInfos', {
        'WorkflowTypeInfoList': List[SWFWorkflowTypeInfo],
        'PageToken': Optional[str],
    }
)


SWFActivityTask = TypedDict(
    'SWFActivityTask', {
        'TaskToken': str,
        'ActivityId': str,
        'EventId': int,
        'WorkflowExecution': SWFWorkflowExecution,
        'ActivityType': SWFActivityType,
        'Data': Optional[str],
    }
)


SWFDecisionTask = TypedDict(
    'SWFDecisionTask', {
        'TaskToken': str,
        'EventId': int,
        'WorkflowExecution': SWFWorkflowExecution,
        'WorkflowType': SWFWorkflowType,
        'HistoryEventList': List[SWFHistoryEvent],
        'PageToken': Optional[str],
        'EventId': Optional[int],
    }
)


SWFActivityTaskStatus = TypedDict(
    'SWFActivityTaskStatus', {
        'Canceled': bool,
    }
)


SWFScheduleActivityTaskDecisionAttributes = TypedDict(
    'SWFScheduleActivityTaskDecisionAttributes', {
        'ActivityType': SWFActivityType,
        'ActivityId': str,
        'Data': Optional[str],
        'Data': Optional[str],
        'DurationInSecondsOptional': Optional[str],
        'TaskList': Optional[SWFTaskList],
        'TaskPriority': Optional[str],
        'DurationInSecondsOptional': Optional[str],
        'DurationInSecondsOptional': Optional[str],
        'DurationInSecondsOptional': Optional[str],
    }
)


SWFRequestCancelActivityTaskDecisionAttributes = TypedDict(
    'SWFRequestCancelActivityTaskDecisionAttributes', {
        'ActivityId': str,
    }
)


SWFCompleteWorkflowExecutionDecisionAttributes = TypedDict(
    'SWFCompleteWorkflowExecutionDecisionAttributes', {
        'Data': Optional[str],
    }
)


SWFFailWorkflowExecutionDecisionAttributes = TypedDict(
    'SWFFailWorkflowExecutionDecisionAttributes', {
        'FailureReason': Optional[str],
        'Data': Optional[str],
    }
)


SWFCancelWorkflowExecutionDecisionAttributes = TypedDict(
    'SWFCancelWorkflowExecutionDecisionAttributes', {
        'Data': Optional[str],
    }
)


SWFContinueAsNewWorkflowExecutionDecisionAttributes = TypedDict(
    'SWFContinueAsNewWorkflowExecutionDecisionAttributes', {
        'Data': Optional[str],
        'DurationInSecondsOptional': Optional[str],
        'TaskList': Optional[SWFTaskList],
        'TaskPriority': Optional[str],
        'DurationInSecondsOptional': Optional[str],
        'ChildPolicy': Optional[str],
        'TagList': Optional[List[str]],
        'Version': Optional[str],
        'Arn': Optional[str],
    }
)


SWFRecordMarkerDecisionAttributes = TypedDict(
    'SWFRecordMarkerDecisionAttributes', {
        'MarkerName': str,
        'Data': Optional[str],
    }
)


SWFStartTimerDecisionAttributes = TypedDict(
    'SWFStartTimerDecisionAttributes', {
        'TimerId': str,
        'DurationInSeconds': str,
        'Data': Optional[str],
    }
)


SWFCancelTimerDecisionAttributes = TypedDict(
    'SWFCancelTimerDecisionAttributes', {
        'TimerId': str,
    }
)


SWFSignalExternalWorkflowExecutionDecisionAttributes = TypedDict(
    'SWFSignalExternalWorkflowExecutionDecisionAttributes', {
        'WorkflowId': str,
        'SignalName': str,
        'WorkflowRunIdOptional': Optional[str],
        'Data': Optional[str],
        'Data': Optional[str],
    }
)


SWFRequestCancelExternalWorkflowExecutionDecisionAttributes = TypedDict(
    'SWFRequestCancelExternalWorkflowExecutionDecisionAttributes', {
        'WorkflowId': str,
        'WorkflowRunIdOptional': Optional[str],
        'Data': Optional[str],
    }
)


SWFStartChildWorkflowExecutionDecisionAttributes = TypedDict(
    'SWFStartChildWorkflowExecutionDecisionAttributes', {
        'WorkflowType': SWFWorkflowType,
        'WorkflowId': str,
        'Data': Optional[str],
        'Data': Optional[str],
        'DurationInSecondsOptional': Optional[str],
        'TaskList': Optional[SWFTaskList],
        'TaskPriority': Optional[str],
        'DurationInSecondsOptional': Optional[str],
        'ChildPolicy': Optional[str],
        'TagList': Optional[List[str]],
        'Arn': Optional[str],
    }
)


SWFScheduleLambdaFunctionDecisionAttributes = TypedDict(
    'SWFScheduleLambdaFunctionDecisionAttributes', {
        'FunctionId': str,
        'FunctionName': str,
        'Data': Optional[str],
        'FunctionInput': Optional[str],
        'DurationInSecondsOptional': Optional[str],
    }
)


SWFDecision = TypedDict(
    'SWFDecision', {
        'DecisionType': str,
        'ScheduleActivityTaskDecisionAttributes': Optional[SWFScheduleActivityTaskDecisionAttributes],
        'RequestCancelActivityTaskDecisionAttributes': Optional[SWFRequestCancelActivityTaskDecisionAttributes],
        'CompleteWorkflowExecutionDecisionAttributes': Optional[SWFCompleteWorkflowExecutionDecisionAttributes],
        'FailWorkflowExecutionDecisionAttributes': Optional[SWFFailWorkflowExecutionDecisionAttributes],
        'CancelWorkflowExecutionDecisionAttributes': Optional[SWFCancelWorkflowExecutionDecisionAttributes],
        'ContinueAsNewWorkflowExecutionDecisionAttributes': Optional[SWFContinueAsNewWorkflowExecutionDecisionAttributes],
        'RecordMarkerDecisionAttributes': Optional[SWFRecordMarkerDecisionAttributes],
        'StartTimerDecisionAttributes': Optional[SWFStartTimerDecisionAttributes],
        'CancelTimerDecisionAttributes': Optional[SWFCancelTimerDecisionAttributes],
        'SignalExternalWorkflowExecutionDecisionAttributes': Optional[SWFSignalExternalWorkflowExecutionDecisionAttributes],
        'RequestCancelExternalWorkflowExecutionDecisionAttributes': Optional[SWFRequestCancelExternalWorkflowExecutionDecisionAttributes],
        'StartChildWorkflowExecutionDecisionAttributes': Optional[SWFStartChildWorkflowExecutionDecisionAttributes],
        'ScheduleLambdaFunctionDecisionAttributes': Optional[SWFScheduleLambdaFunctionDecisionAttributes],
    }
)


SWFRun = TypedDict(
    'SWFRun', {
        'WorkflowRunId': Optional[str],
    }
)


class Textract(BaseClient):
    def analyze_document(self, *,
        Document: TextractDocument,
        FeatureTypes: List[str]
    ) -> TextractAnalyzeDocumentResponse: ...

    def detect_document_text(self, *,
        Document: TextractDocument
    ) -> TextractDetectDocumentTextResponse: ...

    def get_document_analysis(self, *,
        JobId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> TextractGetDocumentAnalysisResponse: ...

    def get_document_text_detection(self, *,
        JobId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> TextractGetDocumentTextDetectionResponse: ...

    def start_document_analysis(self, *,
        DocumentLocation: TextractDocumentLocation,
        FeatureTypes: List[str],
        ClientRequestToken: str = ...,
        JobTag: str = ...,
        NotificationChannel: TextractNotificationChannel = ...
    ) -> TextractStartDocumentAnalysisResponse: ...

    def start_document_text_detection(self, *,
        DocumentLocation: TextractDocumentLocation,
        ClientRequestToken: str = ...,
        JobTag: str = ...,
        NotificationChannel: TextractNotificationChannel = ...
    ) -> TextractStartDocumentTextDetectionResponse: ...


TextractS3Object = TypedDict(
    'TextractS3Object', {
        'S3Bucket': Optional[str],
        'S3ObjectName': Optional[str],
        'S3ObjectVersion': Optional[str],
    }
)


TextractDocument = TypedDict(
    'TextractDocument', {
        'ImageBlob': Optional[bytes],
        'S3Object': Optional[TextractS3Object],
    }
)


TextractDocumentMetadata = TypedDict(
    'TextractDocumentMetadata', {
        'UInteger': Optional[int],
    }
)


TextractBoundingBox = TypedDict(
    'TextractBoundingBox', {
        'Float': Optional[float],
        'Float': Optional[float],
        'Float': Optional[float],
        'Float': Optional[float],
    }
)


TextractPoint = TypedDict(
    'TextractPoint', {
        'Float': Optional[float],
        'Float': Optional[float],
    }
)


TextractGeometry = TypedDict(
    'TextractGeometry', {
        'BoundingBox': Optional[TextractBoundingBox],
        'Polygon': Optional[List[TextractPoint]],
    }
)


TextractRelationship = TypedDict(
    'TextractRelationship', {
        'RelationshipType': Optional[str],
        'IdList': Optional[List[str]],
    }
)


TextractBlock = TypedDict(
    'TextractBlock', {
        'BlockType': Optional[str],
        'Percent': Optional[float],
        'String': Optional[str],
        'UInteger': Optional[int],
        'UInteger': Optional[int],
        'UInteger': Optional[int],
        'UInteger': Optional[int],
        'Geometry': Optional[TextractGeometry],
        'NonEmptyString': Optional[str],
        'RelationshipList': Optional[List[TextractRelationship]],
        'EntityTypes': Optional[List[str]],
        'SelectionStatus': Optional[str],
        'UInteger': Optional[int],
    }
)


TextractAnalyzeDocumentResponse = TypedDict(
    'TextractAnalyzeDocumentResponse', {
        'DocumentMetadata': Optional[TextractDocumentMetadata],
        'BlockList': Optional[List[TextractBlock]],
    }
)


TextractDetectDocumentTextResponse = TypedDict(
    'TextractDetectDocumentTextResponse', {
        'DocumentMetadata': Optional[TextractDocumentMetadata],
        'BlockList': Optional[List[TextractBlock]],
    }
)


TextractWarning = TypedDict(
    'TextractWarning', {
        'ErrorCode': Optional[str],
        'Pages': Optional[List[int]],
    }
)


TextractGetDocumentAnalysisResponse = TypedDict(
    'TextractGetDocumentAnalysisResponse', {
        'DocumentMetadata': Optional[TextractDocumentMetadata],
        'JobStatus': Optional[str],
        'PaginationToken': Optional[str],
        'BlockList': Optional[List[TextractBlock]],
        'Warnings': Optional[List[TextractWarning]],
        'StatusMessage': Optional[str],
    }
)


TextractGetDocumentTextDetectionResponse = TypedDict(
    'TextractGetDocumentTextDetectionResponse', {
        'DocumentMetadata': Optional[TextractDocumentMetadata],
        'JobStatus': Optional[str],
        'PaginationToken': Optional[str],
        'BlockList': Optional[List[TextractBlock]],
        'Warnings': Optional[List[TextractWarning]],
        'StatusMessage': Optional[str],
    }
)


TextractDocumentLocation = TypedDict(
    'TextractDocumentLocation', {
        'S3Object': Optional[TextractS3Object],
    }
)


TextractNotificationChannel = TypedDict(
    'TextractNotificationChannel', {
        'SNSTopicArn': str,
        'RoleArn': str,
    }
)


TextractStartDocumentAnalysisResponse = TypedDict(
    'TextractStartDocumentAnalysisResponse', {
        'JobId': Optional[str],
    }
)


TextractStartDocumentTextDetectionResponse = TypedDict(
    'TextractStartDocumentTextDetectionResponse', {
        'JobId': Optional[str],
    }
)


class TranscribeService(BaseClient):
    def create_vocabulary(self, *,
        VocabularyName: str,
        LanguageCode: str,
        Phrases: List[str] = ...,
        VocabularyFileUri: str = ...
    ) -> TranscribeServiceCreateVocabularyResponse: ...

    def delete_transcription_job(self, *,
        TranscriptionJobName: str
    ): ...

    def delete_vocabulary(self, *,
        VocabularyName: str
    ): ...

    def get_transcription_job(self, *,
        TranscriptionJobName: str
    ) -> TranscribeServiceGetTranscriptionJobResponse: ...

    def get_vocabulary(self, *,
        VocabularyName: str
    ) -> TranscribeServiceGetVocabularyResponse: ...

    def list_transcription_jobs(self, *,
        Status: str = ...,
        JobNameContains: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> TranscribeServiceListTranscriptionJobsResponse: ...

    def list_vocabularies(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        StateEquals: str = ...,
        NameContains: str = ...
    ) -> TranscribeServiceListVocabulariesResponse: ...

    def start_transcription_job(self, *,
        TranscriptionJobName: str,
        LanguageCode: str,
        MediaFormat: str,
        Media: TranscribeServiceMedia,
        MediaSampleRateHertz: int = ...,
        OutputBucketName: str = ...,
        Settings: TranscribeServiceSettings = ...
    ) -> TranscribeServiceStartTranscriptionJobResponse: ...

    def update_vocabulary(self, *,
        VocabularyName: str,
        LanguageCode: str,
        Phrases: List[str] = ...,
        VocabularyFileUri: str = ...
    ) -> TranscribeServiceUpdateVocabularyResponse: ...


TranscribeServiceCreateVocabularyResponse = TypedDict(
    'TranscribeServiceCreateVocabularyResponse', {
        'VocabularyName': Optional[str],
        'LanguageCode': Optional[str],
        'VocabularyState': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'FailureReason': Optional[str],
    }
)


TranscribeServiceMedia = TypedDict(
    'TranscribeServiceMedia', {
        'Uri': Optional[str],
    }
)


TranscribeServiceTranscript = TypedDict(
    'TranscribeServiceTranscript', {
        'Uri': Optional[str],
    }
)


TranscribeServiceSettings = TypedDict(
    'TranscribeServiceSettings', {
        'VocabularyName': Optional[str],
        'Boolean': Optional[bool],
        'MaxSpeakers': Optional[int],
        'Boolean': Optional[bool],
    }
)


TranscribeServiceTranscriptionJob = TypedDict(
    'TranscribeServiceTranscriptionJob', {
        'TranscriptionJobName': Optional[str],
        'TranscriptionJobStatus': Optional[str],
        'LanguageCode': Optional[str],
        'MediaSampleRateHertz': Optional[int],
        'MediaFormat': Optional[str],
        'Media': Optional[TranscribeServiceMedia],
        'Transcript': Optional[TranscribeServiceTranscript],
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
        'FailureReason': Optional[str],
        'Settings': Optional[TranscribeServiceSettings],
    }
)


TranscribeServiceGetTranscriptionJobResponse = TypedDict(
    'TranscribeServiceGetTranscriptionJobResponse', {
        'TranscriptionJob': Optional[TranscribeServiceTranscriptionJob],
    }
)


TranscribeServiceGetVocabularyResponse = TypedDict(
    'TranscribeServiceGetVocabularyResponse', {
        'VocabularyName': Optional[str],
        'LanguageCode': Optional[str],
        'VocabularyState': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'FailureReason': Optional[str],
        'Uri': Optional[str],
    }
)


TranscribeServiceTranscriptionJobSummary = TypedDict(
    'TranscribeServiceTranscriptionJobSummary', {
        'TranscriptionJobName': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
        'LanguageCode': Optional[str],
        'TranscriptionJobStatus': Optional[str],
        'FailureReason': Optional[str],
        'OutputLocationType': Optional[str],
    }
)


TranscribeServiceListTranscriptionJobsResponse = TypedDict(
    'TranscribeServiceListTranscriptionJobsResponse', {
        'TranscriptionJobStatus': Optional[str],
        'NextToken': Optional[str],
        'TranscriptionJobSummaries': Optional[List[TranscribeServiceTranscriptionJobSummary]],
    }
)


TranscribeServiceVocabularyInfo = TypedDict(
    'TranscribeServiceVocabularyInfo', {
        'VocabularyName': Optional[str],
        'LanguageCode': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'VocabularyState': Optional[str],
    }
)


TranscribeServiceListVocabulariesResponse = TypedDict(
    'TranscribeServiceListVocabulariesResponse', {
        'TranscriptionJobStatus': Optional[str],
        'NextToken': Optional[str],
        'Vocabularies': Optional[List[TranscribeServiceVocabularyInfo]],
    }
)


TranscribeServiceStartTranscriptionJobResponse = TypedDict(
    'TranscribeServiceStartTranscriptionJobResponse', {
        'TranscriptionJob': Optional[TranscribeServiceTranscriptionJob],
    }
)


TranscribeServiceUpdateVocabularyResponse = TypedDict(
    'TranscribeServiceUpdateVocabularyResponse', {
        'VocabularyName': Optional[str],
        'LanguageCode': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'VocabularyState': Optional[str],
    }
)


class Transfer(BaseClient):
    def create_server(self, *,
        EndpointDetails: TransferEndpointDetails = ...,
        EndpointType: str = ...,
        HostKey: str = ...,
        IdentityProviderDetails: TransferIdentityProviderDetails = ...,
        IdentityProviderType: str = ...,
        LoggingRole: str = ...,
        Tags: List[TransferTag] = ...
    ) -> TransferCreateServerResponse: ...

    def create_user(self, *,
        Role: str,
        ServerId: str,
        UserName: str,
        HomeDirectory: str = ...,
        Policy: str = ...,
        SshPublicKeyBody: str = ...,
        Tags: List[TransferTag] = ...
    ) -> TransferCreateUserResponse: ...

    def delete_server(self, *,
        ServerId: str
    ): ...

    def delete_ssh_public_key(self, *,
        ServerId: str,
        SshPublicKeyId: str,
        UserName: str
    ): ...

    def delete_user(self, *,
        ServerId: str,
        UserName: str
    ): ...

    def describe_server(self, *,
        ServerId: str
    ) -> TransferDescribeServerResponse: ...

    def describe_user(self, *,
        ServerId: str,
        UserName: str
    ) -> TransferDescribeUserResponse: ...

    def import_ssh_public_key(self, *,
        ServerId: str,
        SshPublicKeyBody: str,
        UserName: str
    ) -> TransferImportSshPublicKeyResponse: ...

    def list_servers(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> TransferListServersResponse: ...

    def list_tags_for_resource(self, *,
        Arn: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> TransferListTagsForResourceResponse: ...

    def list_users(self, *,
        ServerId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> TransferListUsersResponse: ...

    def start_server(self, *,
        ServerId: str
    ): ...

    def stop_server(self, *,
        ServerId: str
    ): ...

    def tag_resource(self, *,
        Arn: str,
        Tags: List[TransferTag]
    ): ...

    def test_identity_provider(self, *,
        ServerId: str,
        UserName: str,
        UserPassword: str = ...
    ) -> TransferTestIdentityProviderResponse: ...

    def untag_resource(self, *,
        Arn: str,
        TagKeys: List[str]
    ): ...

    def update_server(self, *,
        ServerId: str,
        EndpointDetails: TransferEndpointDetails = ...,
        EndpointType: str = ...,
        HostKey: str = ...,
        IdentityProviderDetails: TransferIdentityProviderDetails = ...,
        LoggingRole: str = ...
    ) -> TransferUpdateServerResponse: ...

    def update_user(self, *,
        ServerId: str,
        UserName: str,
        HomeDirectory: str = ...,
        Policy: str = ...,
        Role: str = ...
    ) -> TransferUpdateUserResponse: ...


TransferEndpointDetails = TypedDict(
    'TransferEndpointDetails', {
        'VpcEndpointId': Optional[str],
    }
)


TransferIdentityProviderDetails = TypedDict(
    'TransferIdentityProviderDetails', {
        'Url': Optional[str],
        'Role': Optional[str],
    }
)


TransferTag = TypedDict(
    'TransferTag', {
        'TagKey': str,
        'TagValue': str,
    }
)


TransferCreateServerResponse = TypedDict(
    'TransferCreateServerResponse', {
        'ServerId': str,
    }
)


TransferCreateUserResponse = TypedDict(
    'TransferCreateUserResponse', {
        'ServerId': str,
        'UserName': str,
    }
)


TransferDescribedServer = TypedDict(
    'TransferDescribedServer', {
        'Arn': str,
        'EndpointDetails': Optional[TransferEndpointDetails],
        'EndpointType': Optional[str],
        'HostKeyFingerprint': Optional[str],
        'IdentityProviderDetails': Optional[TransferIdentityProviderDetails],
        'IdentityProviderType': Optional[str],
        'Role': Optional[str],
        'ServerId': Optional[str],
        'State': Optional[str],
        'Tags': Optional[List[TransferTag]],
        'UserCount': Optional[int],
    }
)


TransferDescribeServerResponse = TypedDict(
    'TransferDescribeServerResponse', {
        'DescribedServer': TransferDescribedServer,
    }
)


TransferSshPublicKey = TypedDict(
    'TransferSshPublicKey', {
        'DateImported': datetime.datetime,
        'SshPublicKeyBody': str,
        'SshPublicKeyId': str,
    }
)


TransferDescribedUser = TypedDict(
    'TransferDescribedUser', {
        'Arn': str,
        'HomeDirectory': Optional[str],
        'Policy': Optional[str],
        'Role': Optional[str],
        'SshPublicKeys': Optional[List[TransferSshPublicKey]],
        'Tags': Optional[List[TransferTag]],
        'UserName': Optional[str],
    }
)


TransferDescribeUserResponse = TypedDict(
    'TransferDescribeUserResponse', {
        'ServerId': str,
        'DescribedUser': TransferDescribedUser,
    }
)


TransferImportSshPublicKeyResponse = TypedDict(
    'TransferImportSshPublicKeyResponse', {
        'ServerId': str,
        'SshPublicKeyId': str,
        'UserName': str,
    }
)


TransferListedServer = TypedDict(
    'TransferListedServer', {
        'Arn': str,
        'IdentityProviderType': Optional[str],
        'EndpointType': Optional[str],
        'Role': Optional[str],
        'ServerId': Optional[str],
        'State': Optional[str],
        'UserCount': Optional[int],
    }
)


TransferListServersResponse = TypedDict(
    'TransferListServersResponse', {
        'ListedServers': List[TransferListedServer],
        'NextToken': Optional[str],
    }
)


TransferListTagsForResourceResponse = TypedDict(
    'TransferListTagsForResourceResponse', {
        'Arn': Optional[str],
        'NextToken': Optional[str],
        'Tags': Optional[List[TransferTag]],
    }
)


TransferListedUser = TypedDict(
    'TransferListedUser', {
        'Arn': str,
        'HomeDirectory': Optional[str],
        'Role': Optional[str],
        'SshPublicKeyCount': Optional[int],
        'UserName': Optional[str],
    }
)


TransferListUsersResponse = TypedDict(
    'TransferListUsersResponse', {
        'ServerId': str,
        'ListedUsers': List[TransferListedUser],
        'NextToken': Optional[str],
    }
)


TransferTestIdentityProviderResponse = TypedDict(
    'TransferTestIdentityProviderResponse', {
        'StatusCode': int,
        'Url': str,
        'Message': Optional[str],
    }
)


TransferUpdateServerResponse = TypedDict(
    'TransferUpdateServerResponse', {
        'ServerId': str,
    }
)


TransferUpdateUserResponse = TypedDict(
    'TransferUpdateUserResponse', {
        'ServerId': str,
        'UserName': str,
    }
)


class Translate(BaseClient):
    def delete_terminology(self, *,
        Name: str
    ): ...

    def get_terminology(self, *,
        Name: str,
        TerminologyDataFormat: str
    ) -> TranslateGetTerminologyResponse: ...

    def import_terminology(self, *,
        Name: str,
        MergeStrategy: str,
        TerminologyData: TranslateTerminologyData,
        Description: str = ...,
        EncryptionKey: TranslateEncryptionKey = ...
    ) -> TranslateImportTerminologyResponse: ...

    def list_terminologies(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> TranslateListTerminologiesResponse: ...

    def translate_text(self, *,
        Text: str,
        SourceLanguageCode: str,
        TargetLanguageCode: str,
        TerminologyNames: List[str] = ...
    ) -> TranslateTranslateTextResponse: ...


TranslateEncryptionKey = TypedDict(
    'TranslateEncryptionKey', {
        'EncryptionKeyType': str,
        'EncryptionKeyID': str,
    }
)


TranslateTerminologyProperties = TypedDict(
    'TranslateTerminologyProperties', {
        'ResourceName': Optional[str],
        'Description': Optional[str],
        'TerminologyArn': Optional[str],
        'LanguageCodeString': Optional[str],
        'LanguageCodeStringList': Optional[List[str]],
        'EncryptionKey': Optional[TranslateEncryptionKey],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


TranslateTerminologyDataLocation = TypedDict(
    'TranslateTerminologyDataLocation', {
        'String': str,
        'String': str,
    }
)


TranslateGetTerminologyResponse = TypedDict(
    'TranslateGetTerminologyResponse', {
        'TerminologyProperties': Optional[TranslateTerminologyProperties],
        'TerminologyDataLocation': Optional[TranslateTerminologyDataLocation],
    }
)


TranslateTerminologyData = TypedDict(
    'TranslateTerminologyData', {
        'TerminologyFile': bytes,
        'TerminologyDataFormat': str,
    }
)


TranslateImportTerminologyResponse = TypedDict(
    'TranslateImportTerminologyResponse', {
        'TerminologyProperties': Optional[TranslateTerminologyProperties],
    }
)


TranslateListTerminologiesResponse = TypedDict(
    'TranslateListTerminologiesResponse', {
        'TerminologyPropertiesList': Optional[List[TranslateTerminologyProperties]],
        'NextToken': Optional[str],
    }
)


TranslateTerm = TypedDict(
    'TranslateTerm', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


TranslateAppliedTerminology = TypedDict(
    'TranslateAppliedTerminology', {
        'ResourceName': Optional[str],
        'TermList': Optional[List[TranslateTerm]],
    }
)


TranslateTranslateTextResponse = TypedDict(
    'TranslateTranslateTextResponse', {
        'String': str,
        'LanguageCodeString': str,
        'LanguageCodeString': str,
        'AppliedTerminologyList': Optional[List[TranslateAppliedTerminology]],
    }
)


class WAF(BaseClient):
    def create_byte_match_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFCreateByteMatchSetResponse: ...

    def create_geo_match_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFCreateGeoMatchSetResponse: ...

    def create_ip_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFCreateIPSetResponse: ...

    def create_rate_based_rule(self, *,
        Name: str,
        MetricName: str,
        RateKey: str,
        RateLimit: int,
        ChangeToken: str
    ) -> WAFCreateRateBasedRuleResponse: ...

    def create_regex_match_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFCreateRegexMatchSetResponse: ...

    def create_regex_pattern_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFCreateRegexPatternSetResponse: ...

    def create_rule(self, *,
        Name: str,
        MetricName: str,
        ChangeToken: str
    ) -> WAFCreateRuleResponse: ...

    def create_rule_group(self, *,
        Name: str,
        MetricName: str,
        ChangeToken: str
    ) -> WAFCreateRuleGroupResponse: ...

    def create_size_constraint_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFCreateSizeConstraintSetResponse: ...

    def create_sql_injection_match_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFCreateSqlInjectionMatchSetResponse: ...

    def create_web_acl(self, *,
        Name: str,
        MetricName: str,
        DefaultAction: WAFWafAction,
        ChangeToken: str
    ) -> WAFCreateWebACLResponse: ...

    def create_xss_match_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFCreateXssMatchSetResponse: ...

    def delete_byte_match_set(self, *,
        ByteMatchSetId: str,
        ChangeToken: str
    ) -> WAFDeleteByteMatchSetResponse: ...

    def delete_geo_match_set(self, *,
        GeoMatchSetId: str,
        ChangeToken: str
    ) -> WAFDeleteGeoMatchSetResponse: ...

    def delete_ip_set(self, *,
        IPSetId: str,
        ChangeToken: str
    ) -> WAFDeleteIPSetResponse: ...

    def delete_logging_configuration(self, *,
        ResourceArn: str
    ) -> WAFDeleteLoggingConfigurationResponse: ...

    def delete_permission_policy(self, *,
        ResourceArn: str
    ) -> WAFDeletePermissionPolicyResponse: ...

    def delete_rate_based_rule(self, *,
        RuleId: str,
        ChangeToken: str
    ) -> WAFDeleteRateBasedRuleResponse: ...

    def delete_regex_match_set(self, *,
        RegexMatchSetId: str,
        ChangeToken: str
    ) -> WAFDeleteRegexMatchSetResponse: ...

    def delete_regex_pattern_set(self, *,
        RegexPatternSetId: str,
        ChangeToken: str
    ) -> WAFDeleteRegexPatternSetResponse: ...

    def delete_rule(self, *,
        RuleId: str,
        ChangeToken: str
    ) -> WAFDeleteRuleResponse: ...

    def delete_rule_group(self, *,
        RuleGroupId: str,
        ChangeToken: str
    ) -> WAFDeleteRuleGroupResponse: ...

    def delete_size_constraint_set(self, *,
        SizeConstraintSetId: str,
        ChangeToken: str
    ) -> WAFDeleteSizeConstraintSetResponse: ...

    def delete_sql_injection_match_set(self, *,
        SqlInjectionMatchSetId: str,
        ChangeToken: str
    ) -> WAFDeleteSqlInjectionMatchSetResponse: ...

    def delete_web_acl(self, *,
        WebACLId: str,
        ChangeToken: str
    ) -> WAFDeleteWebACLResponse: ...

    def delete_xss_match_set(self, *,
        XssMatchSetId: str,
        ChangeToken: str
    ) -> WAFDeleteXssMatchSetResponse: ...

    def get_byte_match_set(self, *,
        ByteMatchSetId: str
    ) -> WAFGetByteMatchSetResponse: ...

    def get_change_token(self) -> WAFGetChangeTokenResponse: ...

    def get_change_token_status(self, *,
        ChangeToken: str
    ) -> WAFGetChangeTokenStatusResponse: ...

    def get_geo_match_set(self, *,
        GeoMatchSetId: str
    ) -> WAFGetGeoMatchSetResponse: ...

    def get_ip_set(self, *,
        IPSetId: str
    ) -> WAFGetIPSetResponse: ...

    def get_logging_configuration(self, *,
        ResourceArn: str
    ) -> WAFGetLoggingConfigurationResponse: ...

    def get_permission_policy(self, *,
        ResourceArn: str
    ) -> WAFGetPermissionPolicyResponse: ...

    def get_rate_based_rule(self, *,
        RuleId: str
    ) -> WAFGetRateBasedRuleResponse: ...

    def get_rate_based_rule_managed_keys(self, *,
        RuleId: str,
        NextMarker: str = ...
    ) -> WAFGetRateBasedRuleManagedKeysResponse: ...

    def get_regex_match_set(self, *,
        RegexMatchSetId: str
    ) -> WAFGetRegexMatchSetResponse: ...

    def get_regex_pattern_set(self, *,
        RegexPatternSetId: str
    ) -> WAFGetRegexPatternSetResponse: ...

    def get_rule(self, *,
        RuleId: str
    ) -> WAFGetRuleResponse: ...

    def get_rule_group(self, *,
        RuleGroupId: str
    ) -> WAFGetRuleGroupResponse: ...

    def get_sampled_requests(self, *,
        WebAclId: str,
        RuleId: str,
        TimeWindow: WAFTimeWindow,
        MaxItems: int
    ) -> WAFGetSampledRequestsResponse: ...

    def get_size_constraint_set(self, *,
        SizeConstraintSetId: str
    ) -> WAFGetSizeConstraintSetResponse: ...

    def get_sql_injection_match_set(self, *,
        SqlInjectionMatchSetId: str
    ) -> WAFGetSqlInjectionMatchSetResponse: ...

    def get_web_acl(self, *,
        WebACLId: str
    ) -> WAFGetWebACLResponse: ...

    def get_xss_match_set(self, *,
        XssMatchSetId: str
    ) -> WAFGetXssMatchSetResponse: ...

    def list_activated_rules_in_rule_group(self, *,
        RuleGroupId: str = ...,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListActivatedRulesInRuleGroupResponse: ...

    def list_byte_match_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListByteMatchSetsResponse: ...

    def list_geo_match_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListGeoMatchSetsResponse: ...

    def list_ip_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListIPSetsResponse: ...

    def list_logging_configurations(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListLoggingConfigurationsResponse: ...

    def list_rate_based_rules(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListRateBasedRulesResponse: ...

    def list_regex_match_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListRegexMatchSetsResponse: ...

    def list_regex_pattern_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListRegexPatternSetsResponse: ...

    def list_rule_groups(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListRuleGroupsResponse: ...

    def list_rules(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListRulesResponse: ...

    def list_size_constraint_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListSizeConstraintSetsResponse: ...

    def list_sql_injection_match_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListSqlInjectionMatchSetsResponse: ...

    def list_subscribed_rule_groups(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListSubscribedRuleGroupsResponse: ...

    def list_web_acls(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListWebACLsResponse: ...

    def list_xss_match_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListXssMatchSetsResponse: ...

    def put_logging_configuration(self, *,
        LoggingConfiguration: WAFLoggingConfiguration
    ) -> WAFPutLoggingConfigurationResponse: ...

    def put_permission_policy(self, *,
        ResourceArn: str,
        Policy: str
    ) -> WAFPutPermissionPolicyResponse: ...

    def update_byte_match_set(self, *,
        ByteMatchSetId: str,
        ChangeToken: str,
        Updates: List[WAFByteMatchSetUpdate]
    ) -> WAFUpdateByteMatchSetResponse: ...

    def update_geo_match_set(self, *,
        GeoMatchSetId: str,
        ChangeToken: str,
        Updates: List[WAFGeoMatchSetUpdate]
    ) -> WAFUpdateGeoMatchSetResponse: ...

    def update_ip_set(self, *,
        IPSetId: str,
        ChangeToken: str,
        Updates: List[WAFIPSetUpdate]
    ) -> WAFUpdateIPSetResponse: ...

    def update_rate_based_rule(self, *,
        RuleId: str,
        ChangeToken: str,
        Updates: List[WAFRuleUpdate],
        RateLimit: int
    ) -> WAFUpdateRateBasedRuleResponse: ...

    def update_regex_match_set(self, *,
        RegexMatchSetId: str,
        Updates: List[WAFRegexMatchSetUpdate],
        ChangeToken: str
    ) -> WAFUpdateRegexMatchSetResponse: ...

    def update_regex_pattern_set(self, *,
        RegexPatternSetId: str,
        Updates: List[WAFRegexPatternSetUpdate],
        ChangeToken: str
    ) -> WAFUpdateRegexPatternSetResponse: ...

    def update_rule(self, *,
        RuleId: str,
        ChangeToken: str,
        Updates: List[WAFRuleUpdate]
    ) -> WAFUpdateRuleResponse: ...

    def update_rule_group(self, *,
        RuleGroupId: str,
        Updates: List[WAFRuleGroupUpdate],
        ChangeToken: str
    ) -> WAFUpdateRuleGroupResponse: ...

    def update_size_constraint_set(self, *,
        SizeConstraintSetId: str,
        ChangeToken: str,
        Updates: List[WAFSizeConstraintSetUpdate]
    ) -> WAFUpdateSizeConstraintSetResponse: ...

    def update_sql_injection_match_set(self, *,
        SqlInjectionMatchSetId: str,
        ChangeToken: str,
        Updates: List[WAFSqlInjectionMatchSetUpdate]
    ) -> WAFUpdateSqlInjectionMatchSetResponse: ...

    def update_web_acl(self, *,
        WebACLId: str,
        ChangeToken: str,
        Updates: List[WAFWebACLUpdate] = ...,
        DefaultAction: WAFWafAction = ...
    ) -> WAFUpdateWebACLResponse: ...

    def update_xss_match_set(self, *,
        XssMatchSetId: str,
        ChangeToken: str,
        Updates: List[WAFXssMatchSetUpdate]
    ) -> WAFUpdateXssMatchSetResponse: ...


WAFFieldToMatch = TypedDict(
    'WAFFieldToMatch', {
        'MatchFieldType': str,
        'MatchFieldData': Optional[str],
    }
)


WAFByteMatchTuple = TypedDict(
    'WAFByteMatchTuple', {
        'FieldToMatch': WAFFieldToMatch,
        'ByteMatchTargetString': bytes,
        'TextTransformation': str,
        'PositionalConstraint': str,
    }
)


WAFByteMatchSet = TypedDict(
    'WAFByteMatchSet', {
        'ResourceId': str,
        'ByteMatchTuples': List[WAFByteMatchTuple],
        'ResourceName': Optional[str],
    }
)


WAFCreateByteMatchSetResponse = TypedDict(
    'WAFCreateByteMatchSetResponse', {
        'ByteMatchSet': Optional[WAFByteMatchSet],
        'ChangeToken': Optional[str],
    }
)


WAFGeoMatchConstraint = TypedDict(
    'WAFGeoMatchConstraint', {
        'GeoMatchConstraintType': str,
        'GeoMatchConstraintValue': str,
    }
)


WAFGeoMatchSet = TypedDict(
    'WAFGeoMatchSet', {
        'ResourceId': str,
        'GeoMatchConstraints': List[WAFGeoMatchConstraint],
        'ResourceName': Optional[str],
    }
)


WAFCreateGeoMatchSetResponse = TypedDict(
    'WAFCreateGeoMatchSetResponse', {
        'GeoMatchSet': Optional[WAFGeoMatchSet],
        'ChangeToken': Optional[str],
    }
)


WAFIPSetDescriptor = TypedDict(
    'WAFIPSetDescriptor', {
        'IPSetDescriptorType': str,
        'IPSetDescriptorValue': str,
    }
)


WAFIPSet = TypedDict(
    'WAFIPSet', {
        'ResourceId': str,
        'IPSetDescriptors': List[WAFIPSetDescriptor],
        'ResourceName': Optional[str],
    }
)


WAFCreateIPSetResponse = TypedDict(
    'WAFCreateIPSetResponse', {
        'IPSet': Optional[WAFIPSet],
        'ChangeToken': Optional[str],
    }
)


WAFPredicate = TypedDict(
    'WAFPredicate', {
        'Negated': bool,
        'PredicateType': str,
        'ResourceId': str,
    }
)


WAFRateBasedRule = TypedDict(
    'WAFRateBasedRule', {
        'ResourceId': str,
        'Predicates': List[WAFPredicate],
        'RateKey': str,
        'RateLimit': int,
        'ResourceName': Optional[str],
        'MetricName': Optional[str],
    }
)


WAFCreateRateBasedRuleResponse = TypedDict(
    'WAFCreateRateBasedRuleResponse', {
        'RateBasedRule': Optional[WAFRateBasedRule],
        'ChangeToken': Optional[str],
    }
)


WAFRegexMatchTuple = TypedDict(
    'WAFRegexMatchTuple', {
        'FieldToMatch': WAFFieldToMatch,
        'TextTransformation': str,
        'ResourceId': str,
    }
)


WAFRegexMatchSet = TypedDict(
    'WAFRegexMatchSet', {
        'ResourceId': Optional[str],
        'ResourceName': Optional[str],
        'RegexMatchTuples': Optional[List[WAFRegexMatchTuple]],
    }
)


WAFCreateRegexMatchSetResponse = TypedDict(
    'WAFCreateRegexMatchSetResponse', {
        'RegexMatchSet': Optional[WAFRegexMatchSet],
        'ChangeToken': Optional[str],
    }
)


WAFRegexPatternSet = TypedDict(
    'WAFRegexPatternSet', {
        'ResourceId': str,
        'RegexPatternStrings': List[str],
        'ResourceName': Optional[str],
    }
)


WAFCreateRegexPatternSetResponse = TypedDict(
    'WAFCreateRegexPatternSetResponse', {
        'RegexPatternSet': Optional[WAFRegexPatternSet],
        'ChangeToken': Optional[str],
    }
)


WAFRule = TypedDict(
    'WAFRule', {
        'ResourceId': str,
        'Predicates': List[WAFPredicate],
        'ResourceName': Optional[str],
        'MetricName': Optional[str],
    }
)


WAFCreateRuleResponse = TypedDict(
    'WAFCreateRuleResponse', {
        'Rule': Optional[WAFRule],
        'ChangeToken': Optional[str],
    }
)


WAFRuleGroup = TypedDict(
    'WAFRuleGroup', {
        'ResourceId': str,
        'ResourceName': Optional[str],
        'MetricName': Optional[str],
    }
)


WAFCreateRuleGroupResponse = TypedDict(
    'WAFCreateRuleGroupResponse', {
        'RuleGroup': Optional[WAFRuleGroup],
        'ChangeToken': Optional[str],
    }
)


WAFSizeConstraint = TypedDict(
    'WAFSizeConstraint', {
        'FieldToMatch': WAFFieldToMatch,
        'TextTransformation': str,
        'ComparisonOperator': str,
        'Size': int,
    }
)


WAFSizeConstraintSet = TypedDict(
    'WAFSizeConstraintSet', {
        'ResourceId': str,
        'SizeConstraints': List[WAFSizeConstraint],
        'ResourceName': Optional[str],
    }
)


WAFCreateSizeConstraintSetResponse = TypedDict(
    'WAFCreateSizeConstraintSetResponse', {
        'SizeConstraintSet': Optional[WAFSizeConstraintSet],
        'ChangeToken': Optional[str],
    }
)


WAFSqlInjectionMatchTuple = TypedDict(
    'WAFSqlInjectionMatchTuple', {
        'FieldToMatch': WAFFieldToMatch,
        'TextTransformation': str,
    }
)


WAFSqlInjectionMatchSet = TypedDict(
    'WAFSqlInjectionMatchSet', {
        'ResourceId': str,
        'SqlInjectionMatchTuples': List[WAFSqlInjectionMatchTuple],
        'ResourceName': Optional[str],
    }
)


WAFCreateSqlInjectionMatchSetResponse = TypedDict(
    'WAFCreateSqlInjectionMatchSetResponse', {
        'SqlInjectionMatchSet': Optional[WAFSqlInjectionMatchSet],
        'ChangeToken': Optional[str],
    }
)


WAFWafAction = TypedDict(
    'WAFWafAction', {
        'WafActionType': str,
    }
)


WAFWafOverrideAction = TypedDict(
    'WAFWafOverrideAction', {
        'WafOverrideActionType': str,
    }
)


WAFExcludedRule = TypedDict(
    'WAFExcludedRule', {
        'ResourceId': str,
    }
)


WAFActivatedRule = TypedDict(
    'WAFActivatedRule', {
        'RulePriority': int,
        'ResourceId': str,
        'WafAction': Optional[WAFWafAction],
        'WafOverrideAction': Optional[WAFWafOverrideAction],
        'WafRuleType': Optional[str],
        'ExcludedRules': Optional[List[WAFExcludedRule]],
    }
)


WAFWebACL = TypedDict(
    'WAFWebACL', {
        'ResourceId': str,
        'WafAction': WAFWafAction,
        'ActivatedRules': List[WAFActivatedRule],
        'ResourceName': Optional[str],
        'MetricName': Optional[str],
        'ResourceArn': Optional[str],
    }
)


WAFCreateWebACLResponse = TypedDict(
    'WAFCreateWebACLResponse', {
        'WebACL': Optional[WAFWebACL],
        'ChangeToken': Optional[str],
    }
)


WAFXssMatchTuple = TypedDict(
    'WAFXssMatchTuple', {
        'FieldToMatch': WAFFieldToMatch,
        'TextTransformation': str,
    }
)


WAFXssMatchSet = TypedDict(
    'WAFXssMatchSet', {
        'ResourceId': str,
        'XssMatchTuples': List[WAFXssMatchTuple],
        'ResourceName': Optional[str],
    }
)


WAFCreateXssMatchSetResponse = TypedDict(
    'WAFCreateXssMatchSetResponse', {
        'XssMatchSet': Optional[WAFXssMatchSet],
        'ChangeToken': Optional[str],
    }
)


WAFDeleteByteMatchSetResponse = TypedDict(
    'WAFDeleteByteMatchSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFDeleteGeoMatchSetResponse = TypedDict(
    'WAFDeleteGeoMatchSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFDeleteIPSetResponse = TypedDict(
    'WAFDeleteIPSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFDeleteLoggingConfigurationResponse = TypedDict(
    'WAFDeleteLoggingConfigurationResponse', {
    }
)


WAFDeletePermissionPolicyResponse = TypedDict(
    'WAFDeletePermissionPolicyResponse', {
    }
)


WAFDeleteRateBasedRuleResponse = TypedDict(
    'WAFDeleteRateBasedRuleResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFDeleteRegexMatchSetResponse = TypedDict(
    'WAFDeleteRegexMatchSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFDeleteRegexPatternSetResponse = TypedDict(
    'WAFDeleteRegexPatternSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFDeleteRuleResponse = TypedDict(
    'WAFDeleteRuleResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFDeleteRuleGroupResponse = TypedDict(
    'WAFDeleteRuleGroupResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFDeleteSizeConstraintSetResponse = TypedDict(
    'WAFDeleteSizeConstraintSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFDeleteSqlInjectionMatchSetResponse = TypedDict(
    'WAFDeleteSqlInjectionMatchSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFDeleteWebACLResponse = TypedDict(
    'WAFDeleteWebACLResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFDeleteXssMatchSetResponse = TypedDict(
    'WAFDeleteXssMatchSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFGetByteMatchSetResponse = TypedDict(
    'WAFGetByteMatchSetResponse', {
        'ByteMatchSet': Optional[WAFByteMatchSet],
    }
)


WAFGetChangeTokenResponse = TypedDict(
    'WAFGetChangeTokenResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFGetChangeTokenStatusResponse = TypedDict(
    'WAFGetChangeTokenStatusResponse', {
        'ChangeTokenStatus': Optional[str],
    }
)


WAFGetGeoMatchSetResponse = TypedDict(
    'WAFGetGeoMatchSetResponse', {
        'GeoMatchSet': Optional[WAFGeoMatchSet],
    }
)


WAFGetIPSetResponse = TypedDict(
    'WAFGetIPSetResponse', {
        'IPSet': Optional[WAFIPSet],
    }
)


WAFLoggingConfiguration = TypedDict(
    'WAFLoggingConfiguration', {
        'ResourceArn': str,
        'LogDestinationConfigs': List[str],
        'RedactedFields': Optional[List[WAFFieldToMatch]],
    }
)


WAFGetLoggingConfigurationResponse = TypedDict(
    'WAFGetLoggingConfigurationResponse', {
        'LoggingConfiguration': Optional[WAFLoggingConfiguration],
    }
)


WAFGetPermissionPolicyResponse = TypedDict(
    'WAFGetPermissionPolicyResponse', {
        'PolicyString': Optional[str],
    }
)


WAFGetRateBasedRuleResponse = TypedDict(
    'WAFGetRateBasedRuleResponse', {
        'RateBasedRule': Optional[WAFRateBasedRule],
    }
)


WAFGetRateBasedRuleManagedKeysResponse = TypedDict(
    'WAFGetRateBasedRuleManagedKeysResponse', {
        'ManagedKeys': Optional[List[str]],
        'NextMarker': Optional[str],
    }
)


WAFGetRegexMatchSetResponse = TypedDict(
    'WAFGetRegexMatchSetResponse', {
        'RegexMatchSet': Optional[WAFRegexMatchSet],
    }
)


WAFGetRegexPatternSetResponse = TypedDict(
    'WAFGetRegexPatternSetResponse', {
        'RegexPatternSet': Optional[WAFRegexPatternSet],
    }
)


WAFGetRuleResponse = TypedDict(
    'WAFGetRuleResponse', {
        'Rule': Optional[WAFRule],
    }
)


WAFGetRuleGroupResponse = TypedDict(
    'WAFGetRuleGroupResponse', {
        'RuleGroup': Optional[WAFRuleGroup],
    }
)


WAFTimeWindow = TypedDict(
    'WAFTimeWindow', {
        'Timestamp': datetime.datetime,
        'Timestamp': datetime.datetime,
    }
)


WAFHTTPHeader = TypedDict(
    'WAFHTTPHeader', {
        'HeaderName': Optional[str],
        'HeaderValue': Optional[str],
    }
)


WAFHTTPRequest = TypedDict(
    'WAFHTTPRequest', {
        'IPString': Optional[str],
        'Country': Optional[str],
        'URIString': Optional[str],
        'HTTPMethod': Optional[str],
        'HTTPVersion': Optional[str],
        'HTTPHeaders': Optional[List[WAFHTTPHeader]],
    }
)


WAFSampledHTTPRequest = TypedDict(
    'WAFSampledHTTPRequest', {
        'HTTPRequest': WAFHTTPRequest,
        'SampleWeight': int,
        'Timestamp': Optional[datetime.datetime],
        'Action': Optional[str],
        'ResourceId': Optional[str],
    }
)


WAFGetSampledRequestsResponse = TypedDict(
    'WAFGetSampledRequestsResponse', {
        'SampledHTTPRequests': Optional[List[WAFSampledHTTPRequest]],
        'PopulationSize': Optional[int],
        'TimeWindow': Optional[WAFTimeWindow],
    }
)


WAFGetSizeConstraintSetResponse = TypedDict(
    'WAFGetSizeConstraintSetResponse', {
        'SizeConstraintSet': Optional[WAFSizeConstraintSet],
    }
)


WAFGetSqlInjectionMatchSetResponse = TypedDict(
    'WAFGetSqlInjectionMatchSetResponse', {
        'SqlInjectionMatchSet': Optional[WAFSqlInjectionMatchSet],
    }
)


WAFGetWebACLResponse = TypedDict(
    'WAFGetWebACLResponse', {
        'WebACL': Optional[WAFWebACL],
    }
)


WAFGetXssMatchSetResponse = TypedDict(
    'WAFGetXssMatchSetResponse', {
        'XssMatchSet': Optional[WAFXssMatchSet],
    }
)


WAFListActivatedRulesInRuleGroupResponse = TypedDict(
    'WAFListActivatedRulesInRuleGroupResponse', {
        'NextMarker': Optional[str],
        'ActivatedRules': Optional[List[WAFActivatedRule]],
    }
)


WAFByteMatchSetSummary = TypedDict(
    'WAFByteMatchSetSummary', {
        'ResourceId': str,
        'ResourceName': str,
    }
)


WAFListByteMatchSetsResponse = TypedDict(
    'WAFListByteMatchSetsResponse', {
        'NextMarker': Optional[str],
        'ByteMatchSetSummaries': Optional[List[WAFByteMatchSetSummary]],
    }
)


WAFGeoMatchSetSummary = TypedDict(
    'WAFGeoMatchSetSummary', {
        'ResourceId': str,
        'ResourceName': str,
    }
)


WAFListGeoMatchSetsResponse = TypedDict(
    'WAFListGeoMatchSetsResponse', {
        'NextMarker': Optional[str],
        'GeoMatchSetSummaries': Optional[List[WAFGeoMatchSetSummary]],
    }
)


WAFIPSetSummary = TypedDict(
    'WAFIPSetSummary', {
        'ResourceId': str,
        'ResourceName': str,
    }
)


WAFListIPSetsResponse = TypedDict(
    'WAFListIPSetsResponse', {
        'NextMarker': Optional[str],
        'IPSetSummaries': Optional[List[WAFIPSetSummary]],
    }
)


WAFListLoggingConfigurationsResponse = TypedDict(
    'WAFListLoggingConfigurationsResponse', {
        'LoggingConfigurations': Optional[List[WAFLoggingConfiguration]],
        'NextMarker': Optional[str],
    }
)


WAFRuleSummary = TypedDict(
    'WAFRuleSummary', {
        'ResourceId': str,
        'ResourceName': str,
    }
)


WAFListRateBasedRulesResponse = TypedDict(
    'WAFListRateBasedRulesResponse', {
        'NextMarker': Optional[str],
        'RuleSummaries': Optional[List[WAFRuleSummary]],
    }
)


WAFRegexMatchSetSummary = TypedDict(
    'WAFRegexMatchSetSummary', {
        'ResourceId': str,
        'ResourceName': str,
    }
)


WAFListRegexMatchSetsResponse = TypedDict(
    'WAFListRegexMatchSetsResponse', {
        'NextMarker': Optional[str],
        'RegexMatchSetSummaries': Optional[List[WAFRegexMatchSetSummary]],
    }
)


WAFRegexPatternSetSummary = TypedDict(
    'WAFRegexPatternSetSummary', {
        'ResourceId': str,
        'ResourceName': str,
    }
)


WAFListRegexPatternSetsResponse = TypedDict(
    'WAFListRegexPatternSetsResponse', {
        'NextMarker': Optional[str],
        'RegexPatternSetSummaries': Optional[List[WAFRegexPatternSetSummary]],
    }
)


WAFRuleGroupSummary = TypedDict(
    'WAFRuleGroupSummary', {
        'ResourceId': str,
        'ResourceName': str,
    }
)


WAFListRuleGroupsResponse = TypedDict(
    'WAFListRuleGroupsResponse', {
        'NextMarker': Optional[str],
        'RuleGroupSummaries': Optional[List[WAFRuleGroupSummary]],
    }
)


WAFListRulesResponse = TypedDict(
    'WAFListRulesResponse', {
        'NextMarker': Optional[str],
        'RuleSummaries': Optional[List[WAFRuleSummary]],
    }
)


WAFSizeConstraintSetSummary = TypedDict(
    'WAFSizeConstraintSetSummary', {
        'ResourceId': str,
        'ResourceName': str,
    }
)


WAFListSizeConstraintSetsResponse = TypedDict(
    'WAFListSizeConstraintSetsResponse', {
        'NextMarker': Optional[str],
        'SizeConstraintSetSummaries': Optional[List[WAFSizeConstraintSetSummary]],
    }
)


WAFSqlInjectionMatchSetSummary = TypedDict(
    'WAFSqlInjectionMatchSetSummary', {
        'ResourceId': str,
        'ResourceName': str,
    }
)


WAFListSqlInjectionMatchSetsResponse = TypedDict(
    'WAFListSqlInjectionMatchSetsResponse', {
        'NextMarker': Optional[str],
        'SqlInjectionMatchSetSummaries': Optional[List[WAFSqlInjectionMatchSetSummary]],
    }
)


WAFSubscribedRuleGroupSummary = TypedDict(
    'WAFSubscribedRuleGroupSummary', {
        'ResourceId': str,
        'ResourceName': str,
        'MetricName': str,
    }
)


WAFListSubscribedRuleGroupsResponse = TypedDict(
    'WAFListSubscribedRuleGroupsResponse', {
        'NextMarker': Optional[str],
        'SubscribedRuleGroupSummaries': Optional[List[WAFSubscribedRuleGroupSummary]],
    }
)


WAFWebACLSummary = TypedDict(
    'WAFWebACLSummary', {
        'ResourceId': str,
        'ResourceName': str,
    }
)


WAFListWebACLsResponse = TypedDict(
    'WAFListWebACLsResponse', {
        'NextMarker': Optional[str],
        'WebACLSummaries': Optional[List[WAFWebACLSummary]],
    }
)


WAFXssMatchSetSummary = TypedDict(
    'WAFXssMatchSetSummary', {
        'ResourceId': str,
        'ResourceName': str,
    }
)


WAFListXssMatchSetsResponse = TypedDict(
    'WAFListXssMatchSetsResponse', {
        'NextMarker': Optional[str],
        'XssMatchSetSummaries': Optional[List[WAFXssMatchSetSummary]],
    }
)


WAFPutLoggingConfigurationResponse = TypedDict(
    'WAFPutLoggingConfigurationResponse', {
        'LoggingConfiguration': Optional[WAFLoggingConfiguration],
    }
)


WAFPutPermissionPolicyResponse = TypedDict(
    'WAFPutPermissionPolicyResponse', {
    }
)


WAFByteMatchSetUpdate = TypedDict(
    'WAFByteMatchSetUpdate', {
        'ChangeAction': str,
        'ByteMatchTuple': WAFByteMatchTuple,
    }
)


WAFUpdateByteMatchSetResponse = TypedDict(
    'WAFUpdateByteMatchSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFGeoMatchSetUpdate = TypedDict(
    'WAFGeoMatchSetUpdate', {
        'ChangeAction': str,
        'GeoMatchConstraint': WAFGeoMatchConstraint,
    }
)


WAFUpdateGeoMatchSetResponse = TypedDict(
    'WAFUpdateGeoMatchSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFIPSetUpdate = TypedDict(
    'WAFIPSetUpdate', {
        'ChangeAction': str,
        'IPSetDescriptor': WAFIPSetDescriptor,
    }
)


WAFUpdateIPSetResponse = TypedDict(
    'WAFUpdateIPSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRuleUpdate = TypedDict(
    'WAFRuleUpdate', {
        'ChangeAction': str,
        'Predicate': WAFPredicate,
    }
)


WAFUpdateRateBasedRuleResponse = TypedDict(
    'WAFUpdateRateBasedRuleResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRegexMatchSetUpdate = TypedDict(
    'WAFRegexMatchSetUpdate', {
        'ChangeAction': str,
        'RegexMatchTuple': WAFRegexMatchTuple,
    }
)


WAFUpdateRegexMatchSetResponse = TypedDict(
    'WAFUpdateRegexMatchSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRegexPatternSetUpdate = TypedDict(
    'WAFRegexPatternSetUpdate', {
        'ChangeAction': str,
        'RegexPatternString': str,
    }
)


WAFUpdateRegexPatternSetResponse = TypedDict(
    'WAFUpdateRegexPatternSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFUpdateRuleResponse = TypedDict(
    'WAFUpdateRuleResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRuleGroupUpdate = TypedDict(
    'WAFRuleGroupUpdate', {
        'ChangeAction': str,
        'ActivatedRule': WAFActivatedRule,
    }
)


WAFUpdateRuleGroupResponse = TypedDict(
    'WAFUpdateRuleGroupResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFSizeConstraintSetUpdate = TypedDict(
    'WAFSizeConstraintSetUpdate', {
        'ChangeAction': str,
        'SizeConstraint': WAFSizeConstraint,
    }
)


WAFUpdateSizeConstraintSetResponse = TypedDict(
    'WAFUpdateSizeConstraintSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFSqlInjectionMatchSetUpdate = TypedDict(
    'WAFSqlInjectionMatchSetUpdate', {
        'ChangeAction': str,
        'SqlInjectionMatchTuple': WAFSqlInjectionMatchTuple,
    }
)


WAFUpdateSqlInjectionMatchSetResponse = TypedDict(
    'WAFUpdateSqlInjectionMatchSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFWebACLUpdate = TypedDict(
    'WAFWebACLUpdate', {
        'ChangeAction': str,
        'ActivatedRule': WAFActivatedRule,
    }
)


WAFUpdateWebACLResponse = TypedDict(
    'WAFUpdateWebACLResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFXssMatchSetUpdate = TypedDict(
    'WAFXssMatchSetUpdate', {
        'ChangeAction': str,
        'XssMatchTuple': WAFXssMatchTuple,
    }
)


WAFUpdateXssMatchSetResponse = TypedDict(
    'WAFUpdateXssMatchSetResponse', {
        'ChangeToken': Optional[str],
    }
)


class WAFRegional(BaseClient):
    def associate_web_acl(self, *,
        WebACLId: str,
        ResourceArn: str
    ) -> WAFRegionalAssociateWebACLResponse: ...

    def create_byte_match_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFRegionalCreateByteMatchSetResponse: ...

    def create_geo_match_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFRegionalCreateGeoMatchSetResponse: ...

    def create_ip_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFRegionalCreateIPSetResponse: ...

    def create_rate_based_rule(self, *,
        Name: str,
        MetricName: str,
        RateKey: str,
        RateLimit: int,
        ChangeToken: str
    ) -> WAFRegionalCreateRateBasedRuleResponse: ...

    def create_regex_match_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFRegionalCreateRegexMatchSetResponse: ...

    def create_regex_pattern_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFRegionalCreateRegexPatternSetResponse: ...

    def create_rule(self, *,
        Name: str,
        MetricName: str,
        ChangeToken: str
    ) -> WAFRegionalCreateRuleResponse: ...

    def create_rule_group(self, *,
        Name: str,
        MetricName: str,
        ChangeToken: str
    ) -> WAFRegionalCreateRuleGroupResponse: ...

    def create_size_constraint_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFRegionalCreateSizeConstraintSetResponse: ...

    def create_sql_injection_match_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFRegionalCreateSqlInjectionMatchSetResponse: ...

    def create_web_acl(self, *,
        Name: str,
        MetricName: str,
        DefaultAction: WAFRegionalWafAction,
        ChangeToken: str
    ) -> WAFRegionalCreateWebACLResponse: ...

    def create_xss_match_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFRegionalCreateXssMatchSetResponse: ...

    def delete_byte_match_set(self, *,
        ByteMatchSetId: str,
        ChangeToken: str
    ) -> WAFRegionalDeleteByteMatchSetResponse: ...

    def delete_geo_match_set(self, *,
        GeoMatchSetId: str,
        ChangeToken: str
    ) -> WAFRegionalDeleteGeoMatchSetResponse: ...

    def delete_ip_set(self, *,
        IPSetId: str,
        ChangeToken: str
    ) -> WAFRegionalDeleteIPSetResponse: ...

    def delete_logging_configuration(self, *,
        ResourceArn: str
    ) -> WAFRegionalDeleteLoggingConfigurationResponse: ...

    def delete_permission_policy(self, *,
        ResourceArn: str
    ) -> WAFRegionalDeletePermissionPolicyResponse: ...

    def delete_rate_based_rule(self, *,
        RuleId: str,
        ChangeToken: str
    ) -> WAFRegionalDeleteRateBasedRuleResponse: ...

    def delete_regex_match_set(self, *,
        RegexMatchSetId: str,
        ChangeToken: str
    ) -> WAFRegionalDeleteRegexMatchSetResponse: ...

    def delete_regex_pattern_set(self, *,
        RegexPatternSetId: str,
        ChangeToken: str
    ) -> WAFRegionalDeleteRegexPatternSetResponse: ...

    def delete_rule(self, *,
        RuleId: str,
        ChangeToken: str
    ) -> WAFRegionalDeleteRuleResponse: ...

    def delete_rule_group(self, *,
        RuleGroupId: str,
        ChangeToken: str
    ) -> WAFRegionalDeleteRuleGroupResponse: ...

    def delete_size_constraint_set(self, *,
        SizeConstraintSetId: str,
        ChangeToken: str
    ) -> WAFRegionalDeleteSizeConstraintSetResponse: ...

    def delete_sql_injection_match_set(self, *,
        SqlInjectionMatchSetId: str,
        ChangeToken: str
    ) -> WAFRegionalDeleteSqlInjectionMatchSetResponse: ...

    def delete_web_acl(self, *,
        WebACLId: str,
        ChangeToken: str
    ) -> WAFRegionalDeleteWebACLResponse: ...

    def delete_xss_match_set(self, *,
        XssMatchSetId: str,
        ChangeToken: str
    ) -> WAFRegionalDeleteXssMatchSetResponse: ...

    def disassociate_web_acl(self, *,
        ResourceArn: str
    ) -> WAFRegionalDisassociateWebACLResponse: ...

    def get_byte_match_set(self, *,
        ByteMatchSetId: str
    ) -> WAFRegionalGetByteMatchSetResponse: ...

    def get_change_token(self) -> WAFRegionalGetChangeTokenResponse: ...

    def get_change_token_status(self, *,
        ChangeToken: str
    ) -> WAFRegionalGetChangeTokenStatusResponse: ...

    def get_geo_match_set(self, *,
        GeoMatchSetId: str
    ) -> WAFRegionalGetGeoMatchSetResponse: ...

    def get_ip_set(self, *,
        IPSetId: str
    ) -> WAFRegionalGetIPSetResponse: ...

    def get_logging_configuration(self, *,
        ResourceArn: str
    ) -> WAFRegionalGetLoggingConfigurationResponse: ...

    def get_permission_policy(self, *,
        ResourceArn: str
    ) -> WAFRegionalGetPermissionPolicyResponse: ...

    def get_rate_based_rule(self, *,
        RuleId: str
    ) -> WAFRegionalGetRateBasedRuleResponse: ...

    def get_rate_based_rule_managed_keys(self, *,
        RuleId: str,
        NextMarker: str = ...
    ) -> WAFRegionalGetRateBasedRuleManagedKeysResponse: ...

    def get_regex_match_set(self, *,
        RegexMatchSetId: str
    ) -> WAFRegionalGetRegexMatchSetResponse: ...

    def get_regex_pattern_set(self, *,
        RegexPatternSetId: str
    ) -> WAFRegionalGetRegexPatternSetResponse: ...

    def get_rule(self, *,
        RuleId: str
    ) -> WAFRegionalGetRuleResponse: ...

    def get_rule_group(self, *,
        RuleGroupId: str
    ) -> WAFRegionalGetRuleGroupResponse: ...

    def get_sampled_requests(self, *,
        WebAclId: str,
        RuleId: str,
        TimeWindow: WAFRegionalTimeWindow,
        MaxItems: int
    ) -> WAFRegionalGetSampledRequestsResponse: ...

    def get_size_constraint_set(self, *,
        SizeConstraintSetId: str
    ) -> WAFRegionalGetSizeConstraintSetResponse: ...

    def get_sql_injection_match_set(self, *,
        SqlInjectionMatchSetId: str
    ) -> WAFRegionalGetSqlInjectionMatchSetResponse: ...

    def get_web_acl(self, *,
        WebACLId: str
    ) -> WAFRegionalGetWebACLResponse: ...

    def get_web_acl_for_resource(self, *,
        ResourceArn: str
    ) -> WAFRegionalGetWebACLForResourceResponse: ...

    def get_xss_match_set(self, *,
        XssMatchSetId: str
    ) -> WAFRegionalGetXssMatchSetResponse: ...

    def list_activated_rules_in_rule_group(self, *,
        RuleGroupId: str = ...,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListActivatedRulesInRuleGroupResponse: ...

    def list_byte_match_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListByteMatchSetsResponse: ...

    def list_geo_match_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListGeoMatchSetsResponse: ...

    def list_ip_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListIPSetsResponse: ...

    def list_logging_configurations(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListLoggingConfigurationsResponse: ...

    def list_rate_based_rules(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListRateBasedRulesResponse: ...

    def list_regex_match_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListRegexMatchSetsResponse: ...

    def list_regex_pattern_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListRegexPatternSetsResponse: ...

    def list_resources_for_web_acl(self, *,
        WebACLId: str,
        ResourceType: str = ...
    ) -> WAFRegionalListResourcesForWebACLResponse: ...

    def list_rule_groups(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListRuleGroupsResponse: ...

    def list_rules(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListRulesResponse: ...

    def list_size_constraint_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListSizeConstraintSetsResponse: ...

    def list_sql_injection_match_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListSqlInjectionMatchSetsResponse: ...

    def list_subscribed_rule_groups(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListSubscribedRuleGroupsResponse: ...

    def list_web_acls(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListWebACLsResponse: ...

    def list_xss_match_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListXssMatchSetsResponse: ...

    def put_logging_configuration(self, *,
        LoggingConfiguration: WAFRegionalLoggingConfiguration
    ) -> WAFRegionalPutLoggingConfigurationResponse: ...

    def put_permission_policy(self, *,
        ResourceArn: str,
        Policy: str
    ) -> WAFRegionalPutPermissionPolicyResponse: ...

    def update_byte_match_set(self, *,
        ByteMatchSetId: str,
        ChangeToken: str,
        Updates: List[WAFRegionalByteMatchSetUpdate]
    ) -> WAFRegionalUpdateByteMatchSetResponse: ...

    def update_geo_match_set(self, *,
        GeoMatchSetId: str,
        ChangeToken: str,
        Updates: List[WAFRegionalGeoMatchSetUpdate]
    ) -> WAFRegionalUpdateGeoMatchSetResponse: ...

    def update_ip_set(self, *,
        IPSetId: str,
        ChangeToken: str,
        Updates: List[WAFRegionalIPSetUpdate]
    ) -> WAFRegionalUpdateIPSetResponse: ...

    def update_rate_based_rule(self, *,
        RuleId: str,
        ChangeToken: str,
        Updates: List[WAFRegionalRuleUpdate],
        RateLimit: int
    ) -> WAFRegionalUpdateRateBasedRuleResponse: ...

    def update_regex_match_set(self, *,
        RegexMatchSetId: str,
        Updates: List[WAFRegionalRegexMatchSetUpdate],
        ChangeToken: str
    ) -> WAFRegionalUpdateRegexMatchSetResponse: ...

    def update_regex_pattern_set(self, *,
        RegexPatternSetId: str,
        Updates: List[WAFRegionalRegexPatternSetUpdate],
        ChangeToken: str
    ) -> WAFRegionalUpdateRegexPatternSetResponse: ...

    def update_rule(self, *,
        RuleId: str,
        ChangeToken: str,
        Updates: List[WAFRegionalRuleUpdate]
    ) -> WAFRegionalUpdateRuleResponse: ...

    def update_rule_group(self, *,
        RuleGroupId: str,
        Updates: List[WAFRegionalRuleGroupUpdate],
        ChangeToken: str
    ) -> WAFRegionalUpdateRuleGroupResponse: ...

    def update_size_constraint_set(self, *,
        SizeConstraintSetId: str,
        ChangeToken: str,
        Updates: List[WAFRegionalSizeConstraintSetUpdate]
    ) -> WAFRegionalUpdateSizeConstraintSetResponse: ...

    def update_sql_injection_match_set(self, *,
        SqlInjectionMatchSetId: str,
        ChangeToken: str,
        Updates: List[WAFRegionalSqlInjectionMatchSetUpdate]
    ) -> WAFRegionalUpdateSqlInjectionMatchSetResponse: ...

    def update_web_acl(self, *,
        WebACLId: str,
        ChangeToken: str,
        Updates: List[WAFRegionalWebACLUpdate] = ...,
        DefaultAction: WAFRegionalWafAction = ...
    ) -> WAFRegionalUpdateWebACLResponse: ...

    def update_xss_match_set(self, *,
        XssMatchSetId: str,
        ChangeToken: str,
        Updates: List[WAFRegionalXssMatchSetUpdate]
    ) -> WAFRegionalUpdateXssMatchSetResponse: ...


WAFRegionalAssociateWebACLResponse = TypedDict(
    'WAFRegionalAssociateWebACLResponse', {
    }
)


WAFRegionalFieldToMatch = TypedDict(
    'WAFRegionalFieldToMatch', {
        'MatchFieldType': str,
        'MatchFieldData': Optional[str],
    }
)


WAFRegionalByteMatchTuple = TypedDict(
    'WAFRegionalByteMatchTuple', {
        'FieldToMatch': WAFRegionalFieldToMatch,
        'ByteMatchTargetString': bytes,
        'TextTransformation': str,
        'PositionalConstraint': str,
    }
)


WAFRegionalByteMatchSet = TypedDict(
    'WAFRegionalByteMatchSet', {
        'ResourceId': str,
        'ByteMatchTuples': List[WAFRegionalByteMatchTuple],
        'ResourceName': Optional[str],
    }
)


WAFRegionalCreateByteMatchSetResponse = TypedDict(
    'WAFRegionalCreateByteMatchSetResponse', {
        'ByteMatchSet': Optional[WAFRegionalByteMatchSet],
        'ChangeToken': Optional[str],
    }
)


WAFRegionalGeoMatchConstraint = TypedDict(
    'WAFRegionalGeoMatchConstraint', {
        'GeoMatchConstraintType': str,
        'GeoMatchConstraintValue': str,
    }
)


WAFRegionalGeoMatchSet = TypedDict(
    'WAFRegionalGeoMatchSet', {
        'ResourceId': str,
        'GeoMatchConstraints': List[WAFRegionalGeoMatchConstraint],
        'ResourceName': Optional[str],
    }
)


WAFRegionalCreateGeoMatchSetResponse = TypedDict(
    'WAFRegionalCreateGeoMatchSetResponse', {
        'GeoMatchSet': Optional[WAFRegionalGeoMatchSet],
        'ChangeToken': Optional[str],
    }
)


WAFRegionalIPSetDescriptor = TypedDict(
    'WAFRegionalIPSetDescriptor', {
        'IPSetDescriptorType': str,
        'IPSetDescriptorValue': str,
    }
)


WAFRegionalIPSet = TypedDict(
    'WAFRegionalIPSet', {
        'ResourceId': str,
        'IPSetDescriptors': List[WAFRegionalIPSetDescriptor],
        'ResourceName': Optional[str],
    }
)


WAFRegionalCreateIPSetResponse = TypedDict(
    'WAFRegionalCreateIPSetResponse', {
        'IPSet': Optional[WAFRegionalIPSet],
        'ChangeToken': Optional[str],
    }
)


WAFRegionalPredicate = TypedDict(
    'WAFRegionalPredicate', {
        'Negated': bool,
        'PredicateType': str,
        'ResourceId': str,
    }
)


WAFRegionalRateBasedRule = TypedDict(
    'WAFRegionalRateBasedRule', {
        'ResourceId': str,
        'Predicates': List[WAFRegionalPredicate],
        'RateKey': str,
        'RateLimit': int,
        'ResourceName': Optional[str],
        'MetricName': Optional[str],
    }
)


WAFRegionalCreateRateBasedRuleResponse = TypedDict(
    'WAFRegionalCreateRateBasedRuleResponse', {
        'RateBasedRule': Optional[WAFRegionalRateBasedRule],
        'ChangeToken': Optional[str],
    }
)


WAFRegionalRegexMatchTuple = TypedDict(
    'WAFRegionalRegexMatchTuple', {
        'FieldToMatch': WAFRegionalFieldToMatch,
        'TextTransformation': str,
        'ResourceId': str,
    }
)


WAFRegionalRegexMatchSet = TypedDict(
    'WAFRegionalRegexMatchSet', {
        'ResourceId': Optional[str],
        'ResourceName': Optional[str],
        'RegexMatchTuples': Optional[List[WAFRegionalRegexMatchTuple]],
    }
)


WAFRegionalCreateRegexMatchSetResponse = TypedDict(
    'WAFRegionalCreateRegexMatchSetResponse', {
        'RegexMatchSet': Optional[WAFRegionalRegexMatchSet],
        'ChangeToken': Optional[str],
    }
)


WAFRegionalRegexPatternSet = TypedDict(
    'WAFRegionalRegexPatternSet', {
        'ResourceId': str,
        'RegexPatternStrings': List[str],
        'ResourceName': Optional[str],
    }
)


WAFRegionalCreateRegexPatternSetResponse = TypedDict(
    'WAFRegionalCreateRegexPatternSetResponse', {
        'RegexPatternSet': Optional[WAFRegionalRegexPatternSet],
        'ChangeToken': Optional[str],
    }
)


WAFRegionalRule = TypedDict(
    'WAFRegionalRule', {
        'ResourceId': str,
        'Predicates': List[WAFRegionalPredicate],
        'ResourceName': Optional[str],
        'MetricName': Optional[str],
    }
)


WAFRegionalCreateRuleResponse = TypedDict(
    'WAFRegionalCreateRuleResponse', {
        'Rule': Optional[WAFRegionalRule],
        'ChangeToken': Optional[str],
    }
)


WAFRegionalRuleGroup = TypedDict(
    'WAFRegionalRuleGroup', {
        'ResourceId': str,
        'ResourceName': Optional[str],
        'MetricName': Optional[str],
    }
)


WAFRegionalCreateRuleGroupResponse = TypedDict(
    'WAFRegionalCreateRuleGroupResponse', {
        'RuleGroup': Optional[WAFRegionalRuleGroup],
        'ChangeToken': Optional[str],
    }
)


WAFRegionalSizeConstraint = TypedDict(
    'WAFRegionalSizeConstraint', {
        'FieldToMatch': WAFRegionalFieldToMatch,
        'TextTransformation': str,
        'ComparisonOperator': str,
        'Size': int,
    }
)


WAFRegionalSizeConstraintSet = TypedDict(
    'WAFRegionalSizeConstraintSet', {
        'ResourceId': str,
        'SizeConstraints': List[WAFRegionalSizeConstraint],
        'ResourceName': Optional[str],
    }
)


WAFRegionalCreateSizeConstraintSetResponse = TypedDict(
    'WAFRegionalCreateSizeConstraintSetResponse', {
        'SizeConstraintSet': Optional[WAFRegionalSizeConstraintSet],
        'ChangeToken': Optional[str],
    }
)


WAFRegionalSqlInjectionMatchTuple = TypedDict(
    'WAFRegionalSqlInjectionMatchTuple', {
        'FieldToMatch': WAFRegionalFieldToMatch,
        'TextTransformation': str,
    }
)


WAFRegionalSqlInjectionMatchSet = TypedDict(
    'WAFRegionalSqlInjectionMatchSet', {
        'ResourceId': str,
        'SqlInjectionMatchTuples': List[WAFRegionalSqlInjectionMatchTuple],
        'ResourceName': Optional[str],
    }
)


WAFRegionalCreateSqlInjectionMatchSetResponse = TypedDict(
    'WAFRegionalCreateSqlInjectionMatchSetResponse', {
        'SqlInjectionMatchSet': Optional[WAFRegionalSqlInjectionMatchSet],
        'ChangeToken': Optional[str],
    }
)


WAFRegionalWafAction = TypedDict(
    'WAFRegionalWafAction', {
        'WafActionType': str,
    }
)


WAFRegionalWafOverrideAction = TypedDict(
    'WAFRegionalWafOverrideAction', {
        'WafOverrideActionType': str,
    }
)


WAFRegionalExcludedRule = TypedDict(
    'WAFRegionalExcludedRule', {
        'ResourceId': str,
    }
)


WAFRegionalActivatedRule = TypedDict(
    'WAFRegionalActivatedRule', {
        'RulePriority': int,
        'ResourceId': str,
        'WafAction': Optional[WAFRegionalWafAction],
        'WafOverrideAction': Optional[WAFRegionalWafOverrideAction],
        'WafRuleType': Optional[str],
        'ExcludedRules': Optional[List[WAFRegionalExcludedRule]],
    }
)


WAFRegionalWebACL = TypedDict(
    'WAFRegionalWebACL', {
        'ResourceId': str,
        'WafAction': WAFRegionalWafAction,
        'ActivatedRules': List[WAFRegionalActivatedRule],
        'ResourceName': Optional[str],
        'MetricName': Optional[str],
        'ResourceArn': Optional[str],
    }
)


WAFRegionalCreateWebACLResponse = TypedDict(
    'WAFRegionalCreateWebACLResponse', {
        'WebACL': Optional[WAFRegionalWebACL],
        'ChangeToken': Optional[str],
    }
)


WAFRegionalXssMatchTuple = TypedDict(
    'WAFRegionalXssMatchTuple', {
        'FieldToMatch': WAFRegionalFieldToMatch,
        'TextTransformation': str,
    }
)


WAFRegionalXssMatchSet = TypedDict(
    'WAFRegionalXssMatchSet', {
        'ResourceId': str,
        'XssMatchTuples': List[WAFRegionalXssMatchTuple],
        'ResourceName': Optional[str],
    }
)


WAFRegionalCreateXssMatchSetResponse = TypedDict(
    'WAFRegionalCreateXssMatchSetResponse', {
        'XssMatchSet': Optional[WAFRegionalXssMatchSet],
        'ChangeToken': Optional[str],
    }
)


WAFRegionalDeleteByteMatchSetResponse = TypedDict(
    'WAFRegionalDeleteByteMatchSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRegionalDeleteGeoMatchSetResponse = TypedDict(
    'WAFRegionalDeleteGeoMatchSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRegionalDeleteIPSetResponse = TypedDict(
    'WAFRegionalDeleteIPSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRegionalDeleteLoggingConfigurationResponse = TypedDict(
    'WAFRegionalDeleteLoggingConfigurationResponse', {
    }
)


WAFRegionalDeletePermissionPolicyResponse = TypedDict(
    'WAFRegionalDeletePermissionPolicyResponse', {
    }
)


WAFRegionalDeleteRateBasedRuleResponse = TypedDict(
    'WAFRegionalDeleteRateBasedRuleResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRegionalDeleteRegexMatchSetResponse = TypedDict(
    'WAFRegionalDeleteRegexMatchSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRegionalDeleteRegexPatternSetResponse = TypedDict(
    'WAFRegionalDeleteRegexPatternSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRegionalDeleteRuleResponse = TypedDict(
    'WAFRegionalDeleteRuleResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRegionalDeleteRuleGroupResponse = TypedDict(
    'WAFRegionalDeleteRuleGroupResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRegionalDeleteSizeConstraintSetResponse = TypedDict(
    'WAFRegionalDeleteSizeConstraintSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRegionalDeleteSqlInjectionMatchSetResponse = TypedDict(
    'WAFRegionalDeleteSqlInjectionMatchSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRegionalDeleteWebACLResponse = TypedDict(
    'WAFRegionalDeleteWebACLResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRegionalDeleteXssMatchSetResponse = TypedDict(
    'WAFRegionalDeleteXssMatchSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRegionalDisassociateWebACLResponse = TypedDict(
    'WAFRegionalDisassociateWebACLResponse', {
    }
)


WAFRegionalGetByteMatchSetResponse = TypedDict(
    'WAFRegionalGetByteMatchSetResponse', {
        'ByteMatchSet': Optional[WAFRegionalByteMatchSet],
    }
)


WAFRegionalGetChangeTokenResponse = TypedDict(
    'WAFRegionalGetChangeTokenResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRegionalGetChangeTokenStatusResponse = TypedDict(
    'WAFRegionalGetChangeTokenStatusResponse', {
        'ChangeTokenStatus': Optional[str],
    }
)


WAFRegionalGetGeoMatchSetResponse = TypedDict(
    'WAFRegionalGetGeoMatchSetResponse', {
        'GeoMatchSet': Optional[WAFRegionalGeoMatchSet],
    }
)


WAFRegionalGetIPSetResponse = TypedDict(
    'WAFRegionalGetIPSetResponse', {
        'IPSet': Optional[WAFRegionalIPSet],
    }
)


WAFRegionalLoggingConfiguration = TypedDict(
    'WAFRegionalLoggingConfiguration', {
        'ResourceArn': str,
        'LogDestinationConfigs': List[str],
        'RedactedFields': Optional[List[WAFRegionalFieldToMatch]],
    }
)


WAFRegionalGetLoggingConfigurationResponse = TypedDict(
    'WAFRegionalGetLoggingConfigurationResponse', {
        'LoggingConfiguration': Optional[WAFRegionalLoggingConfiguration],
    }
)


WAFRegionalGetPermissionPolicyResponse = TypedDict(
    'WAFRegionalGetPermissionPolicyResponse', {
        'PolicyString': Optional[str],
    }
)


WAFRegionalGetRateBasedRuleResponse = TypedDict(
    'WAFRegionalGetRateBasedRuleResponse', {
        'RateBasedRule': Optional[WAFRegionalRateBasedRule],
    }
)


WAFRegionalGetRateBasedRuleManagedKeysResponse = TypedDict(
    'WAFRegionalGetRateBasedRuleManagedKeysResponse', {
        'ManagedKeys': Optional[List[str]],
        'NextMarker': Optional[str],
    }
)


WAFRegionalGetRegexMatchSetResponse = TypedDict(
    'WAFRegionalGetRegexMatchSetResponse', {
        'RegexMatchSet': Optional[WAFRegionalRegexMatchSet],
    }
)


WAFRegionalGetRegexPatternSetResponse = TypedDict(
    'WAFRegionalGetRegexPatternSetResponse', {
        'RegexPatternSet': Optional[WAFRegionalRegexPatternSet],
    }
)


WAFRegionalGetRuleResponse = TypedDict(
    'WAFRegionalGetRuleResponse', {
        'Rule': Optional[WAFRegionalRule],
    }
)


WAFRegionalGetRuleGroupResponse = TypedDict(
    'WAFRegionalGetRuleGroupResponse', {
        'RuleGroup': Optional[WAFRegionalRuleGroup],
    }
)


WAFRegionalTimeWindow = TypedDict(
    'WAFRegionalTimeWindow', {
        'Timestamp': datetime.datetime,
        'Timestamp': datetime.datetime,
    }
)


WAFRegionalHTTPHeader = TypedDict(
    'WAFRegionalHTTPHeader', {
        'HeaderName': Optional[str],
        'HeaderValue': Optional[str],
    }
)


WAFRegionalHTTPRequest = TypedDict(
    'WAFRegionalHTTPRequest', {
        'IPString': Optional[str],
        'Country': Optional[str],
        'URIString': Optional[str],
        'HTTPMethod': Optional[str],
        'HTTPVersion': Optional[str],
        'HTTPHeaders': Optional[List[WAFRegionalHTTPHeader]],
    }
)


WAFRegionalSampledHTTPRequest = TypedDict(
    'WAFRegionalSampledHTTPRequest', {
        'HTTPRequest': WAFRegionalHTTPRequest,
        'SampleWeight': int,
        'Timestamp': Optional[datetime.datetime],
        'Action': Optional[str],
        'ResourceId': Optional[str],
    }
)


WAFRegionalGetSampledRequestsResponse = TypedDict(
    'WAFRegionalGetSampledRequestsResponse', {
        'SampledHTTPRequests': Optional[List[WAFRegionalSampledHTTPRequest]],
        'PopulationSize': Optional[int],
        'TimeWindow': Optional[WAFRegionalTimeWindow],
    }
)


WAFRegionalGetSizeConstraintSetResponse = TypedDict(
    'WAFRegionalGetSizeConstraintSetResponse', {
        'SizeConstraintSet': Optional[WAFRegionalSizeConstraintSet],
    }
)


WAFRegionalGetSqlInjectionMatchSetResponse = TypedDict(
    'WAFRegionalGetSqlInjectionMatchSetResponse', {
        'SqlInjectionMatchSet': Optional[WAFRegionalSqlInjectionMatchSet],
    }
)


WAFRegionalGetWebACLResponse = TypedDict(
    'WAFRegionalGetWebACLResponse', {
        'WebACL': Optional[WAFRegionalWebACL],
    }
)


WAFRegionalWebACLSummary = TypedDict(
    'WAFRegionalWebACLSummary', {
        'ResourceId': str,
        'ResourceName': str,
    }
)


WAFRegionalGetWebACLForResourceResponse = TypedDict(
    'WAFRegionalGetWebACLForResourceResponse', {
        'WebACLSummary': Optional[WAFRegionalWebACLSummary],
    }
)


WAFRegionalGetXssMatchSetResponse = TypedDict(
    'WAFRegionalGetXssMatchSetResponse', {
        'XssMatchSet': Optional[WAFRegionalXssMatchSet],
    }
)


WAFRegionalListActivatedRulesInRuleGroupResponse = TypedDict(
    'WAFRegionalListActivatedRulesInRuleGroupResponse', {
        'NextMarker': Optional[str],
        'ActivatedRules': Optional[List[WAFRegionalActivatedRule]],
    }
)


WAFRegionalByteMatchSetSummary = TypedDict(
    'WAFRegionalByteMatchSetSummary', {
        'ResourceId': str,
        'ResourceName': str,
    }
)


WAFRegionalListByteMatchSetsResponse = TypedDict(
    'WAFRegionalListByteMatchSetsResponse', {
        'NextMarker': Optional[str],
        'ByteMatchSetSummaries': Optional[List[WAFRegionalByteMatchSetSummary]],
    }
)


WAFRegionalGeoMatchSetSummary = TypedDict(
    'WAFRegionalGeoMatchSetSummary', {
        'ResourceId': str,
        'ResourceName': str,
    }
)


WAFRegionalListGeoMatchSetsResponse = TypedDict(
    'WAFRegionalListGeoMatchSetsResponse', {
        'NextMarker': Optional[str],
        'GeoMatchSetSummaries': Optional[List[WAFRegionalGeoMatchSetSummary]],
    }
)


WAFRegionalIPSetSummary = TypedDict(
    'WAFRegionalIPSetSummary', {
        'ResourceId': str,
        'ResourceName': str,
    }
)


WAFRegionalListIPSetsResponse = TypedDict(
    'WAFRegionalListIPSetsResponse', {
        'NextMarker': Optional[str],
        'IPSetSummaries': Optional[List[WAFRegionalIPSetSummary]],
    }
)


WAFRegionalListLoggingConfigurationsResponse = TypedDict(
    'WAFRegionalListLoggingConfigurationsResponse', {
        'LoggingConfigurations': Optional[List[WAFRegionalLoggingConfiguration]],
        'NextMarker': Optional[str],
    }
)


WAFRegionalRuleSummary = TypedDict(
    'WAFRegionalRuleSummary', {
        'ResourceId': str,
        'ResourceName': str,
    }
)


WAFRegionalListRateBasedRulesResponse = TypedDict(
    'WAFRegionalListRateBasedRulesResponse', {
        'NextMarker': Optional[str],
        'RuleSummaries': Optional[List[WAFRegionalRuleSummary]],
    }
)


WAFRegionalRegexMatchSetSummary = TypedDict(
    'WAFRegionalRegexMatchSetSummary', {
        'ResourceId': str,
        'ResourceName': str,
    }
)


WAFRegionalListRegexMatchSetsResponse = TypedDict(
    'WAFRegionalListRegexMatchSetsResponse', {
        'NextMarker': Optional[str],
        'RegexMatchSetSummaries': Optional[List[WAFRegionalRegexMatchSetSummary]],
    }
)


WAFRegionalRegexPatternSetSummary = TypedDict(
    'WAFRegionalRegexPatternSetSummary', {
        'ResourceId': str,
        'ResourceName': str,
    }
)


WAFRegionalListRegexPatternSetsResponse = TypedDict(
    'WAFRegionalListRegexPatternSetsResponse', {
        'NextMarker': Optional[str],
        'RegexPatternSetSummaries': Optional[List[WAFRegionalRegexPatternSetSummary]],
    }
)


WAFRegionalListResourcesForWebACLResponse = TypedDict(
    'WAFRegionalListResourcesForWebACLResponse', {
        'ResourceArns': Optional[List[str]],
    }
)


WAFRegionalRuleGroupSummary = TypedDict(
    'WAFRegionalRuleGroupSummary', {
        'ResourceId': str,
        'ResourceName': str,
    }
)


WAFRegionalListRuleGroupsResponse = TypedDict(
    'WAFRegionalListRuleGroupsResponse', {
        'NextMarker': Optional[str],
        'RuleGroupSummaries': Optional[List[WAFRegionalRuleGroupSummary]],
    }
)


WAFRegionalListRulesResponse = TypedDict(
    'WAFRegionalListRulesResponse', {
        'NextMarker': Optional[str],
        'RuleSummaries': Optional[List[WAFRegionalRuleSummary]],
    }
)


WAFRegionalSizeConstraintSetSummary = TypedDict(
    'WAFRegionalSizeConstraintSetSummary', {
        'ResourceId': str,
        'ResourceName': str,
    }
)


WAFRegionalListSizeConstraintSetsResponse = TypedDict(
    'WAFRegionalListSizeConstraintSetsResponse', {
        'NextMarker': Optional[str],
        'SizeConstraintSetSummaries': Optional[List[WAFRegionalSizeConstraintSetSummary]],
    }
)


WAFRegionalSqlInjectionMatchSetSummary = TypedDict(
    'WAFRegionalSqlInjectionMatchSetSummary', {
        'ResourceId': str,
        'ResourceName': str,
    }
)


WAFRegionalListSqlInjectionMatchSetsResponse = TypedDict(
    'WAFRegionalListSqlInjectionMatchSetsResponse', {
        'NextMarker': Optional[str],
        'SqlInjectionMatchSetSummaries': Optional[List[WAFRegionalSqlInjectionMatchSetSummary]],
    }
)


WAFRegionalSubscribedRuleGroupSummary = TypedDict(
    'WAFRegionalSubscribedRuleGroupSummary', {
        'ResourceId': str,
        'ResourceName': str,
        'MetricName': str,
    }
)


WAFRegionalListSubscribedRuleGroupsResponse = TypedDict(
    'WAFRegionalListSubscribedRuleGroupsResponse', {
        'NextMarker': Optional[str],
        'SubscribedRuleGroupSummaries': Optional[List[WAFRegionalSubscribedRuleGroupSummary]],
    }
)


WAFRegionalListWebACLsResponse = TypedDict(
    'WAFRegionalListWebACLsResponse', {
        'NextMarker': Optional[str],
        'WebACLSummaries': Optional[List[WAFRegionalWebACLSummary]],
    }
)


WAFRegionalXssMatchSetSummary = TypedDict(
    'WAFRegionalXssMatchSetSummary', {
        'ResourceId': str,
        'ResourceName': str,
    }
)


WAFRegionalListXssMatchSetsResponse = TypedDict(
    'WAFRegionalListXssMatchSetsResponse', {
        'NextMarker': Optional[str],
        'XssMatchSetSummaries': Optional[List[WAFRegionalXssMatchSetSummary]],
    }
)


WAFRegionalPutLoggingConfigurationResponse = TypedDict(
    'WAFRegionalPutLoggingConfigurationResponse', {
        'LoggingConfiguration': Optional[WAFRegionalLoggingConfiguration],
    }
)


WAFRegionalPutPermissionPolicyResponse = TypedDict(
    'WAFRegionalPutPermissionPolicyResponse', {
    }
)


WAFRegionalByteMatchSetUpdate = TypedDict(
    'WAFRegionalByteMatchSetUpdate', {
        'ChangeAction': str,
        'ByteMatchTuple': WAFRegionalByteMatchTuple,
    }
)


WAFRegionalUpdateByteMatchSetResponse = TypedDict(
    'WAFRegionalUpdateByteMatchSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRegionalGeoMatchSetUpdate = TypedDict(
    'WAFRegionalGeoMatchSetUpdate', {
        'ChangeAction': str,
        'GeoMatchConstraint': WAFRegionalGeoMatchConstraint,
    }
)


WAFRegionalUpdateGeoMatchSetResponse = TypedDict(
    'WAFRegionalUpdateGeoMatchSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRegionalIPSetUpdate = TypedDict(
    'WAFRegionalIPSetUpdate', {
        'ChangeAction': str,
        'IPSetDescriptor': WAFRegionalIPSetDescriptor,
    }
)


WAFRegionalUpdateIPSetResponse = TypedDict(
    'WAFRegionalUpdateIPSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRegionalRuleUpdate = TypedDict(
    'WAFRegionalRuleUpdate', {
        'ChangeAction': str,
        'Predicate': WAFRegionalPredicate,
    }
)


WAFRegionalUpdateRateBasedRuleResponse = TypedDict(
    'WAFRegionalUpdateRateBasedRuleResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRegionalRegexMatchSetUpdate = TypedDict(
    'WAFRegionalRegexMatchSetUpdate', {
        'ChangeAction': str,
        'RegexMatchTuple': WAFRegionalRegexMatchTuple,
    }
)


WAFRegionalUpdateRegexMatchSetResponse = TypedDict(
    'WAFRegionalUpdateRegexMatchSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRegionalRegexPatternSetUpdate = TypedDict(
    'WAFRegionalRegexPatternSetUpdate', {
        'ChangeAction': str,
        'RegexPatternString': str,
    }
)


WAFRegionalUpdateRegexPatternSetResponse = TypedDict(
    'WAFRegionalUpdateRegexPatternSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRegionalUpdateRuleResponse = TypedDict(
    'WAFRegionalUpdateRuleResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRegionalRuleGroupUpdate = TypedDict(
    'WAFRegionalRuleGroupUpdate', {
        'ChangeAction': str,
        'ActivatedRule': WAFRegionalActivatedRule,
    }
)


WAFRegionalUpdateRuleGroupResponse = TypedDict(
    'WAFRegionalUpdateRuleGroupResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRegionalSizeConstraintSetUpdate = TypedDict(
    'WAFRegionalSizeConstraintSetUpdate', {
        'ChangeAction': str,
        'SizeConstraint': WAFRegionalSizeConstraint,
    }
)


WAFRegionalUpdateSizeConstraintSetResponse = TypedDict(
    'WAFRegionalUpdateSizeConstraintSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRegionalSqlInjectionMatchSetUpdate = TypedDict(
    'WAFRegionalSqlInjectionMatchSetUpdate', {
        'ChangeAction': str,
        'SqlInjectionMatchTuple': WAFRegionalSqlInjectionMatchTuple,
    }
)


WAFRegionalUpdateSqlInjectionMatchSetResponse = TypedDict(
    'WAFRegionalUpdateSqlInjectionMatchSetResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRegionalWebACLUpdate = TypedDict(
    'WAFRegionalWebACLUpdate', {
        'ChangeAction': str,
        'ActivatedRule': WAFRegionalActivatedRule,
    }
)


WAFRegionalUpdateWebACLResponse = TypedDict(
    'WAFRegionalUpdateWebACLResponse', {
        'ChangeToken': Optional[str],
    }
)


WAFRegionalXssMatchSetUpdate = TypedDict(
    'WAFRegionalXssMatchSetUpdate', {
        'ChangeAction': str,
        'XssMatchTuple': WAFRegionalXssMatchTuple,
    }
)


WAFRegionalUpdateXssMatchSetResponse = TypedDict(
    'WAFRegionalUpdateXssMatchSetResponse', {
        'ChangeToken': Optional[str],
    }
)


class WorkDocs(BaseClient):
    def abort_document_version_upload(self, *,
        DocumentId: str,
        VersionId: str,
        AuthenticationToken: str = ...
    ): ...

    def activate_user(self, *,
        UserId: str,
        AuthenticationToken: str = ...
    ) -> WorkDocsActivateUserResponse: ...

    def add_resource_permissions(self, *,
        ResourceId: str,
        Principals: List[WorkDocsSharePrincipal],
        AuthenticationToken: str = ...,
        NotificationOptions: WorkDocsNotificationOptions = ...
    ) -> WorkDocsAddResourcePermissionsResponse: ...

    def create_comment(self, *,
        DocumentId: str,
        VersionId: str,
        Text: str,
        AuthenticationToken: str = ...,
        ParentId: str = ...,
        ThreadId: str = ...,
        Visibility: str = ...,
        NotifyCollaborators: bool = ...
    ) -> WorkDocsCreateCommentResponse: ...

    def create_custom_metadata(self, *,
        ResourceId: str,
        CustomMetadata: Dict[str, str],
        AuthenticationToken: str = ...,
        VersionId: str = ...
    ) -> WorkDocsCreateCustomMetadataResponse: ...

    def create_folder(self, *,
        ParentFolderId: str,
        AuthenticationToken: str = ...,
        Name: str = ...
    ) -> WorkDocsCreateFolderResponse: ...

    def create_labels(self, *,
        ResourceId: str,
        Labels: List[str],
        AuthenticationToken: str = ...
    ) -> WorkDocsCreateLabelsResponse: ...

    def create_notification_subscription(self, *,
        OrganizationId: str,
        Endpoint: str,
        Protocol: str,
        SubscriptionType: str
    ) -> WorkDocsCreateNotificationSubscriptionResponse: ...

    def create_user(self, *,
        Username: str,
        GivenName: str,
        Surname: str,
        Password: str,
        OrganizationId: str = ...,
        EmailAddress: str = ...,
        TimeZoneId: str = ...,
        StorageRule: WorkDocsStorageRuleType = ...,
        AuthenticationToken: str = ...
    ) -> WorkDocsCreateUserResponse: ...

    def deactivate_user(self, *,
        UserId: str,
        AuthenticationToken: str = ...
    ): ...

    def delete_comment(self, *,
        DocumentId: str,
        VersionId: str,
        CommentId: str,
        AuthenticationToken: str = ...
    ): ...

    def delete_custom_metadata(self, *,
        ResourceId: str,
        AuthenticationToken: str = ...,
        VersionId: str = ...,
        Keys: List[str] = ...,
        DeleteAll: bool = ...
    ) -> WorkDocsDeleteCustomMetadataResponse: ...

    def delete_document(self, *,
        DocumentId: str,
        AuthenticationToken: str = ...
    ): ...

    def delete_folder(self, *,
        FolderId: str,
        AuthenticationToken: str = ...
    ): ...

    def delete_folder_contents(self, *,
        FolderId: str,
        AuthenticationToken: str = ...
    ): ...

    def delete_labels(self, *,
        ResourceId: str,
        AuthenticationToken: str = ...,
        Labels: List[str] = ...,
        DeleteAll: bool = ...
    ) -> WorkDocsDeleteLabelsResponse: ...

    def delete_notification_subscription(self, *,
        SubscriptionId: str,
        OrganizationId: str
    ): ...

    def delete_user(self, *,
        UserId: str,
        AuthenticationToken: str = ...
    ): ...

    def describe_activities(self, *,
        AuthenticationToken: str = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        OrganizationId: str = ...,
        ActivityTypes: str = ...,
        ResourceId: str = ...,
        UserId: str = ...,
        IncludeIndirectActivities: bool = ...,
        Limit: int = ...,
        Marker: str = ...
    ) -> WorkDocsDescribeActivitiesResponse: ...

    def describe_comments(self, *,
        DocumentId: str,
        VersionId: str,
        AuthenticationToken: str = ...,
        Limit: int = ...,
        Marker: str = ...
    ) -> WorkDocsDescribeCommentsResponse: ...

    def describe_document_versions(self, *,
        DocumentId: str,
        AuthenticationToken: str = ...,
        Marker: str = ...,
        Limit: int = ...,
        Include: str = ...,
        Fields: str = ...
    ) -> WorkDocsDescribeDocumentVersionsResponse: ...

    def describe_folder_contents(self, *,
        FolderId: str,
        AuthenticationToken: str = ...,
        Sort: str = ...,
        Order: str = ...,
        Limit: int = ...,
        Marker: str = ...,
        Type: str = ...,
        Include: str = ...
    ) -> WorkDocsDescribeFolderContentsResponse: ...

    def describe_groups(self, *,
        SearchQuery: str,
        AuthenticationToken: str = ...,
        OrganizationId: str = ...,
        Marker: str = ...,
        Limit: int = ...
    ) -> WorkDocsDescribeGroupsResponse: ...

    def describe_notification_subscriptions(self, *,
        OrganizationId: str,
        Marker: str = ...,
        Limit: int = ...
    ) -> WorkDocsDescribeNotificationSubscriptionsResponse: ...

    def describe_resource_permissions(self, *,
        ResourceId: str,
        AuthenticationToken: str = ...,
        PrincipalId: str = ...,
        Limit: int = ...,
        Marker: str = ...
    ) -> WorkDocsDescribeResourcePermissionsResponse: ...

    def describe_root_folders(self, *,
        AuthenticationToken: str,
        Limit: int = ...,
        Marker: str = ...
    ) -> WorkDocsDescribeRootFoldersResponse: ...

    def describe_users(self, *,
        AuthenticationToken: str = ...,
        OrganizationId: str = ...,
        UserIds: str = ...,
        Query: str = ...,
        Include: str = ...,
        Order: str = ...,
        Sort: str = ...,
        Marker: str = ...,
        Limit: int = ...,
        Fields: str = ...
    ) -> WorkDocsDescribeUsersResponse: ...

    def get_current_user(self, *,
        AuthenticationToken: str
    ) -> WorkDocsGetCurrentUserResponse: ...

    def get_document(self, *,
        DocumentId: str,
        AuthenticationToken: str = ...,
        IncludeCustomMetadata: bool = ...
    ) -> WorkDocsGetDocumentResponse: ...

    def get_document_path(self, *,
        DocumentId: str,
        AuthenticationToken: str = ...,
        Limit: int = ...,
        Fields: str = ...,
        Marker: str = ...
    ) -> WorkDocsGetDocumentPathResponse: ...

    def get_document_version(self, *,
        DocumentId: str,
        VersionId: str,
        AuthenticationToken: str = ...,
        Fields: str = ...,
        IncludeCustomMetadata: bool = ...
    ) -> WorkDocsGetDocumentVersionResponse: ...

    def get_folder(self, *,
        FolderId: str,
        AuthenticationToken: str = ...,
        IncludeCustomMetadata: bool = ...
    ) -> WorkDocsGetFolderResponse: ...

    def get_folder_path(self, *,
        FolderId: str,
        AuthenticationToken: str = ...,
        Limit: int = ...,
        Fields: str = ...,
        Marker: str = ...
    ) -> WorkDocsGetFolderPathResponse: ...

    def get_resources(self, *,
        AuthenticationToken: str = ...,
        UserId: str = ...,
        CollectionType: str = ...,
        Limit: int = ...,
        Marker: str = ...
    ) -> WorkDocsGetResourcesResponse: ...

    def initiate_document_version_upload(self, *,
        ParentFolderId: str,
        AuthenticationToken: str = ...,
        Id: str = ...,
        Name: str = ...,
        ContentCreatedTimestamp: datetime.datetime = ...,
        ContentModifiedTimestamp: datetime.datetime = ...,
        ContentType: str = ...,
        DocumentSizeInBytes: int = ...
    ) -> WorkDocsInitiateDocumentVersionUploadResponse: ...

    def remove_all_resource_permissions(self, *,
        ResourceId: str,
        AuthenticationToken: str = ...
    ): ...

    def remove_resource_permission(self, *,
        ResourceId: str,
        PrincipalId: str,
        AuthenticationToken: str = ...,
        PrincipalType: str = ...
    ): ...

    def update_document(self, *,
        DocumentId: str,
        AuthenticationToken: str = ...,
        Name: str = ...,
        ParentFolderId: str = ...,
        ResourceState: str = ...
    ): ...

    def update_document_version(self, *,
        DocumentId: str,
        VersionId: str,
        AuthenticationToken: str = ...,
        VersionStatus: str = ...
    ): ...

    def update_folder(self, *,
        FolderId: str,
        AuthenticationToken: str = ...,
        Name: str = ...,
        ParentFolderId: str = ...,
        ResourceState: str = ...
    ): ...

    def update_user(self, *,
        UserId: str,
        AuthenticationToken: str = ...,
        GivenName: str = ...,
        Surname: str = ...,
        Type: str = ...,
        StorageRule: WorkDocsStorageRuleType = ...,
        TimeZoneId: str = ...,
        Locale: str = ...,
        GrantPoweruserPrivileges: str = ...
    ) -> WorkDocsUpdateUserResponse: ...


WorkDocsStorageRuleType = TypedDict(
    'WorkDocsStorageRuleType', {
        'PositiveSizeType': Optional[int],
        'StorageType': Optional[str],
    }
)


WorkDocsUserStorageMetadata = TypedDict(
    'WorkDocsUserStorageMetadata', {
        'SizeType': Optional[int],
        'StorageRuleType': Optional[WorkDocsStorageRuleType],
    }
)


WorkDocsUser = TypedDict(
    'WorkDocsUser', {
        'IdType': Optional[str],
        'UsernameType': Optional[str],
        'EmailAddressType': Optional[str],
        'UserAttributeValueType': Optional[str],
        'UserAttributeValueType': Optional[str],
        'IdType': Optional[str],
        'ResourceIdType': Optional[str],
        'ResourceIdType': Optional[str],
        'UserStatusType': Optional[str],
        'UserType': Optional[str],
        'TimestampType': Optional[datetime.datetime],
        'TimestampType': Optional[datetime.datetime],
        'TimeZoneIdType': Optional[str],
        'LocaleType': Optional[str],
        'UserStorageMetadata': Optional[WorkDocsUserStorageMetadata],
    }
)


WorkDocsActivateUserResponse = TypedDict(
    'WorkDocsActivateUserResponse', {
        'User': Optional[WorkDocsUser],
    }
)


WorkDocsSharePrincipal = TypedDict(
    'WorkDocsSharePrincipal', {
        'IdType': str,
        'PrincipalType': str,
        'RoleType': str,
    }
)


WorkDocsNotificationOptions = TypedDict(
    'WorkDocsNotificationOptions', {
        'BooleanType': Optional[bool],
        'MessageType': Optional[str],
    }
)


WorkDocsShareResult = TypedDict(
    'WorkDocsShareResult', {
        'IdType': Optional[str],
        'IdType': Optional[str],
        'RoleType': Optional[str],
        'ShareStatusType': Optional[str],
        'ResourceIdType': Optional[str],
        'MessageType': Optional[str],
    }
)


WorkDocsAddResourcePermissionsResponse = TypedDict(
    'WorkDocsAddResourcePermissionsResponse', {
        'ShareResultsList': Optional[List[WorkDocsShareResult]],
    }
)


WorkDocsComment = TypedDict(
    'WorkDocsComment', {
        'CommentIdType': str,
        'CommentIdType': Optional[str],
        'CommentIdType': Optional[str],
        'CommentTextType': Optional[str],
        'User': Optional[WorkDocsUser],
        'TimestampType': Optional[datetime.datetime],
        'CommentStatusType': Optional[str],
        'CommentVisibilityType': Optional[str],
        'IdType': Optional[str],
    }
)


WorkDocsCreateCommentResponse = TypedDict(
    'WorkDocsCreateCommentResponse', {
        'Comment': Optional[WorkDocsComment],
    }
)


WorkDocsCreateCustomMetadataResponse = TypedDict(
    'WorkDocsCreateCustomMetadataResponse', {
    }
)


WorkDocsFolderMetadata = TypedDict(
    'WorkDocsFolderMetadata', {
        'ResourceIdType': Optional[str],
        'ResourceNameType': Optional[str],
        'IdType': Optional[str],
        'ResourceIdType': Optional[str],
        'TimestampType': Optional[datetime.datetime],
        'TimestampType': Optional[datetime.datetime],
        'ResourceStateType': Optional[str],
        'HashType': Optional[str],
        'SharedLabels': Optional[List[str]],
        'SizeType': Optional[int],
        'SizeType': Optional[int],
    }
)


WorkDocsCreateFolderResponse = TypedDict(
    'WorkDocsCreateFolderResponse', {
        'FolderMetadata': Optional[WorkDocsFolderMetadata],
    }
)


WorkDocsCreateLabelsResponse = TypedDict(
    'WorkDocsCreateLabelsResponse', {
    }
)


WorkDocsSubscription = TypedDict(
    'WorkDocsSubscription', {
        'IdType': Optional[str],
        'SubscriptionEndPointType': Optional[str],
        'SubscriptionProtocolType': Optional[str],
    }
)


WorkDocsCreateNotificationSubscriptionResponse = TypedDict(
    'WorkDocsCreateNotificationSubscriptionResponse', {
        'Subscription': Optional[WorkDocsSubscription],
    }
)


WorkDocsCreateUserResponse = TypedDict(
    'WorkDocsCreateUserResponse', {
        'User': Optional[WorkDocsUser],
    }
)


WorkDocsDeleteCustomMetadataResponse = TypedDict(
    'WorkDocsDeleteCustomMetadataResponse', {
    }
)


WorkDocsDeleteLabelsResponse = TypedDict(
    'WorkDocsDeleteLabelsResponse', {
    }
)


WorkDocsUserMetadata = TypedDict(
    'WorkDocsUserMetadata', {
        'IdType': Optional[str],
        'UsernameType': Optional[str],
        'UserAttributeValueType': Optional[str],
        'UserAttributeValueType': Optional[str],
        'EmailAddressType': Optional[str],
    }
)


WorkDocsGroupMetadata = TypedDict(
    'WorkDocsGroupMetadata', {
        'IdType': Optional[str],
        'GroupNameType': Optional[str],
    }
)


WorkDocsParticipants = TypedDict(
    'WorkDocsParticipants', {
        'UserMetadataList': Optional[List[WorkDocsUserMetadata]],
        'GroupMetadataList': Optional[List[WorkDocsGroupMetadata]],
    }
)


WorkDocsResourceMetadata = TypedDict(
    'WorkDocsResourceMetadata', {
        'ResourceType': Optional[str],
        'ResourceNameType': Optional[str],
        'ResourceNameType': Optional[str],
        'ResourceIdType': Optional[str],
        'DocumentVersionIdType': Optional[str],
        'UserMetadata': Optional[WorkDocsUserMetadata],
        'ResourceIdType': Optional[str],
    }
)


WorkDocsCommentMetadata = TypedDict(
    'WorkDocsCommentMetadata', {
        'CommentIdType': Optional[str],
        'User': Optional[WorkDocsUser],
        'TimestampType': Optional[datetime.datetime],
        'CommentStatusType': Optional[str],
        'IdType': Optional[str],
    }
)


WorkDocsActivity = TypedDict(
    'WorkDocsActivity', {
        'ActivityType': Optional[str],
        'TimestampType': Optional[datetime.datetime],
        'BooleanType': Optional[bool],
        'IdType': Optional[str],
        'UserMetadata': Optional[WorkDocsUserMetadata],
        'Participants': Optional[WorkDocsParticipants],
        'ResourceMetadata': Optional[WorkDocsResourceMetadata],
        'ResourceMetadata': Optional[WorkDocsResourceMetadata],
        'CommentMetadata': Optional[WorkDocsCommentMetadata],
    }
)


WorkDocsDescribeActivitiesResponse = TypedDict(
    'WorkDocsDescribeActivitiesResponse', {
        'UserActivities': Optional[List[WorkDocsActivity]],
        'MarkerType': Optional[str],
    }
)


WorkDocsDescribeCommentsResponse = TypedDict(
    'WorkDocsDescribeCommentsResponse', {
        'CommentList': Optional[List[WorkDocsComment]],
        'MarkerType': Optional[str],
    }
)


WorkDocsDocumentVersionMetadata = TypedDict(
    'WorkDocsDocumentVersionMetadata', {
        'DocumentVersionIdType': Optional[str],
        'ResourceNameType': Optional[str],
        'DocumentContentType': Optional[str],
        'SizeType': Optional[int],
        'HashType': Optional[str],
        'DocumentStatusType': Optional[str],
        'TimestampType': Optional[datetime.datetime],
        'TimestampType': Optional[datetime.datetime],
        'TimestampType': Optional[datetime.datetime],
        'TimestampType': Optional[datetime.datetime],
        'IdType': Optional[str],
        'DocumentThumbnailUrlMap': Optional[Dict[str, str]],
        'DocumentSourceUrlMap': Optional[Dict[str, str]],
    }
)


WorkDocsDescribeDocumentVersionsResponse = TypedDict(
    'WorkDocsDescribeDocumentVersionsResponse', {
        'DocumentVersionMetadataList': Optional[List[WorkDocsDocumentVersionMetadata]],
        'PageMarkerType': Optional[str],
    }
)


WorkDocsDocumentMetadata = TypedDict(
    'WorkDocsDocumentMetadata', {
        'ResourceIdType': Optional[str],
        'IdType': Optional[str],
        'ResourceIdType': Optional[str],
        'TimestampType': Optional[datetime.datetime],
        'TimestampType': Optional[datetime.datetime],
        'DocumentVersionMetadata': Optional[WorkDocsDocumentVersionMetadata],
        'ResourceStateType': Optional[str],
        'SharedLabels': Optional[List[str]],
    }
)


WorkDocsDescribeFolderContentsResponse = TypedDict(
    'WorkDocsDescribeFolderContentsResponse', {
        'FolderMetadataList': Optional[List[WorkDocsFolderMetadata]],
        'DocumentMetadataList': Optional[List[WorkDocsDocumentMetadata]],
        'PageMarkerType': Optional[str],
    }
)


WorkDocsDescribeGroupsResponse = TypedDict(
    'WorkDocsDescribeGroupsResponse', {
        'GroupMetadataList': Optional[List[WorkDocsGroupMetadata]],
        'MarkerType': Optional[str],
    }
)


WorkDocsDescribeNotificationSubscriptionsResponse = TypedDict(
    'WorkDocsDescribeNotificationSubscriptionsResponse', {
        'SubscriptionList': Optional[List[WorkDocsSubscription]],
        'PageMarkerType': Optional[str],
    }
)


WorkDocsPermissionInfo = TypedDict(
    'WorkDocsPermissionInfo', {
        'RoleType': Optional[str],
        'RolePermissionType': Optional[str],
    }
)


WorkDocsPrincipal = TypedDict(
    'WorkDocsPrincipal', {
        'IdType': Optional[str],
        'PrincipalType': Optional[str],
        'PermissionInfoList': Optional[List[WorkDocsPermissionInfo]],
    }
)


WorkDocsDescribeResourcePermissionsResponse = TypedDict(
    'WorkDocsDescribeResourcePermissionsResponse', {
        'PrincipalList': Optional[List[WorkDocsPrincipal]],
        'PageMarkerType': Optional[str],
    }
)


WorkDocsDescribeRootFoldersResponse = TypedDict(
    'WorkDocsDescribeRootFoldersResponse', {
        'FolderMetadataList': Optional[List[WorkDocsFolderMetadata]],
        'PageMarkerType': Optional[str],
    }
)


WorkDocsDescribeUsersResponse = TypedDict(
    'WorkDocsDescribeUsersResponse', {
        'OrganizationUserList': Optional[List[WorkDocsUser]],
        'SizeType': Optional[int],
        'PageMarkerType': Optional[str],
    }
)


WorkDocsGetCurrentUserResponse = TypedDict(
    'WorkDocsGetCurrentUserResponse', {
        'User': Optional[WorkDocsUser],
    }
)


WorkDocsGetDocumentResponse = TypedDict(
    'WorkDocsGetDocumentResponse', {
        'DocumentMetadata': Optional[WorkDocsDocumentMetadata],
        'CustomMetadataMap': Optional[Dict[str, str]],
    }
)


WorkDocsResourcePathComponent = TypedDict(
    'WorkDocsResourcePathComponent', {
        'IdType': Optional[str],
        'ResourceNameType': Optional[str],
    }
)


WorkDocsResourcePath = TypedDict(
    'WorkDocsResourcePath', {
        'ResourcePathComponentList': Optional[List[WorkDocsResourcePathComponent]],
    }
)


WorkDocsGetDocumentPathResponse = TypedDict(
    'WorkDocsGetDocumentPathResponse', {
        'ResourcePath': Optional[WorkDocsResourcePath],
    }
)


WorkDocsGetDocumentVersionResponse = TypedDict(
    'WorkDocsGetDocumentVersionResponse', {
        'DocumentVersionMetadata': Optional[WorkDocsDocumentVersionMetadata],
        'CustomMetadataMap': Optional[Dict[str, str]],
    }
)


WorkDocsGetFolderResponse = TypedDict(
    'WorkDocsGetFolderResponse', {
        'FolderMetadata': Optional[WorkDocsFolderMetadata],
        'CustomMetadataMap': Optional[Dict[str, str]],
    }
)


WorkDocsGetFolderPathResponse = TypedDict(
    'WorkDocsGetFolderPathResponse', {
        'ResourcePath': Optional[WorkDocsResourcePath],
    }
)


WorkDocsGetResourcesResponse = TypedDict(
    'WorkDocsGetResourcesResponse', {
        'FolderMetadataList': Optional[List[WorkDocsFolderMetadata]],
        'DocumentMetadataList': Optional[List[WorkDocsDocumentMetadata]],
        'PageMarkerType': Optional[str],
    }
)


WorkDocsUploadMetadata = TypedDict(
    'WorkDocsUploadMetadata', {
        'UrlType': Optional[str],
        'SignedHeaderMap': Optional[Dict[str, str]],
    }
)


WorkDocsInitiateDocumentVersionUploadResponse = TypedDict(
    'WorkDocsInitiateDocumentVersionUploadResponse', {
        'DocumentMetadata': Optional[WorkDocsDocumentMetadata],
        'UploadMetadata': Optional[WorkDocsUploadMetadata],
    }
)


WorkDocsUpdateUserResponse = TypedDict(
    'WorkDocsUpdateUserResponse', {
        'User': Optional[WorkDocsUser],
    }
)


class WorkLink(BaseClient):
    def associate_domain(self, *,
        FleetArn: str,
        DomainName: str,
        AcmCertificateArn: str,
        DisplayName: str = ...
    ) -> WorkLinkAssociateDomainResponse: ...

    def associate_website_certificate_authority(self, *,
        FleetArn: str,
        Certificate: str,
        DisplayName: str = ...
    ) -> WorkLinkAssociateWebsiteCertificateAuthorityResponse: ...

    def create_fleet(self, *,
        FleetName: str,
        DisplayName: str = ...,
        OptimizeForEndUserLocation: bool = ...
    ) -> WorkLinkCreateFleetResponse: ...

    def delete_fleet(self, *,
        FleetArn: str
    ) -> WorkLinkDeleteFleetResponse: ...

    def describe_audit_stream_configuration(self, *,
        FleetArn: str
    ) -> WorkLinkDescribeAuditStreamConfigurationResponse: ...

    def describe_company_network_configuration(self, *,
        FleetArn: str
    ) -> WorkLinkDescribeCompanyNetworkConfigurationResponse: ...

    def describe_device(self, *,
        FleetArn: str,
        DeviceId: str
    ) -> WorkLinkDescribeDeviceResponse: ...

    def describe_device_policy_configuration(self, *,
        FleetArn: str
    ) -> WorkLinkDescribeDevicePolicyConfigurationResponse: ...

    def describe_domain(self, *,
        FleetArn: str,
        DomainName: str
    ) -> WorkLinkDescribeDomainResponse: ...

    def describe_fleet_metadata(self, *,
        FleetArn: str
    ) -> WorkLinkDescribeFleetMetadataResponse: ...

    def describe_identity_provider_configuration(self, *,
        FleetArn: str
    ) -> WorkLinkDescribeIdentityProviderConfigurationResponse: ...

    def describe_website_certificate_authority(self, *,
        FleetArn: str,
        WebsiteCaId: str
    ) -> WorkLinkDescribeWebsiteCertificateAuthorityResponse: ...

    def disassociate_domain(self, *,
        FleetArn: str,
        DomainName: str
    ) -> WorkLinkDisassociateDomainResponse: ...

    def disassociate_website_certificate_authority(self, *,
        FleetArn: str,
        WebsiteCaId: str
    ) -> WorkLinkDisassociateWebsiteCertificateAuthorityResponse: ...

    def list_devices(self, *,
        FleetArn: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> WorkLinkListDevicesResponse: ...

    def list_domains(self, *,
        FleetArn: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> WorkLinkListDomainsResponse: ...

    def list_fleets(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> WorkLinkListFleetsResponse: ...

    def list_website_certificate_authorities(self, *,
        FleetArn: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> WorkLinkListWebsiteCertificateAuthoritiesResponse: ...

    def restore_domain_access(self, *,
        FleetArn: str,
        DomainName: str
    ) -> WorkLinkRestoreDomainAccessResponse: ...

    def revoke_domain_access(self, *,
        FleetArn: str,
        DomainName: str
    ) -> WorkLinkRevokeDomainAccessResponse: ...

    def sign_out_user(self, *,
        FleetArn: str,
        Username: str
    ) -> WorkLinkSignOutUserResponse: ...

    def update_audit_stream_configuration(self, *,
        FleetArn: str,
        AuditStreamArn: str = ...
    ) -> WorkLinkUpdateAuditStreamConfigurationResponse: ...

    def update_company_network_configuration(self, *,
        FleetArn: str,
        VpcId: str,
        SubnetIds: List[str],
        SecurityGroupIds: List[str]
    ) -> WorkLinkUpdateCompanyNetworkConfigurationResponse: ...

    def update_device_policy_configuration(self, *,
        FleetArn: str,
        DeviceCaCertificate: str = ...
    ) -> WorkLinkUpdateDevicePolicyConfigurationResponse: ...

    def update_domain_metadata(self, *,
        FleetArn: str,
        DomainName: str,
        DisplayName: str = ...
    ) -> WorkLinkUpdateDomainMetadataResponse: ...

    def update_fleet_metadata(self, *,
        FleetArn: str,
        DisplayName: str = ...,
        OptimizeForEndUserLocation: bool = ...
    ) -> WorkLinkUpdateFleetMetadataResponse: ...

    def update_identity_provider_configuration(self, *,
        FleetArn: str,
        IdentityProviderType: str,
        IdentityProviderSamlMetadata: str = ...
    ) -> WorkLinkUpdateIdentityProviderConfigurationResponse: ...


WorkLinkAssociateDomainResponse = TypedDict(
    'WorkLinkAssociateDomainResponse', {
    }
)


WorkLinkAssociateWebsiteCertificateAuthorityResponse = TypedDict(
    'WorkLinkAssociateWebsiteCertificateAuthorityResponse', {
        'Id': Optional[str],
    }
)


WorkLinkCreateFleetResponse = TypedDict(
    'WorkLinkCreateFleetResponse', {
        'FleetArn': Optional[str],
    }
)


WorkLinkDeleteFleetResponse = TypedDict(
    'WorkLinkDeleteFleetResponse', {
    }
)


WorkLinkDescribeAuditStreamConfigurationResponse = TypedDict(
    'WorkLinkDescribeAuditStreamConfigurationResponse', {
        'AuditStreamArn': Optional[str],
    }
)


WorkLinkDescribeCompanyNetworkConfigurationResponse = TypedDict(
    'WorkLinkDescribeCompanyNetworkConfigurationResponse', {
        'VpcId': Optional[str],
        'SubnetIds': Optional[List[str]],
        'SecurityGroupIds': Optional[List[str]],
    }
)


WorkLinkDescribeDeviceResponse = TypedDict(
    'WorkLinkDescribeDeviceResponse', {
        'DeviceStatus': Optional[str],
        'DeviceModel': Optional[str],
        'DeviceManufacturer': Optional[str],
        'DeviceOperatingSystemName': Optional[str],
        'DeviceOperatingSystemVersion': Optional[str],
        'DevicePatchLevel': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
        'Username': Optional[str],
    }
)


WorkLinkDescribeDevicePolicyConfigurationResponse = TypedDict(
    'WorkLinkDescribeDevicePolicyConfigurationResponse', {
        'Certificate': Optional[str],
    }
)


WorkLinkDescribeDomainResponse = TypedDict(
    'WorkLinkDescribeDomainResponse', {
        'DisplayName': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'DomainStatus': Optional[str],
    }
)


WorkLinkDescribeFleetMetadataResponse = TypedDict(
    'WorkLinkDescribeFleetMetadataResponse', {
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
        'FleetName': Optional[str],
        'DisplayName': Optional[str],
        'Boolean': Optional[bool],
        'CompanyCode': Optional[str],
        'FleetStatus': Optional[str],
    }
)


WorkLinkDescribeIdentityProviderConfigurationResponse = TypedDict(
    'WorkLinkDescribeIdentityProviderConfigurationResponse', {
        'IdentityProviderType': Optional[str],
        'SamlMetadata': Optional[str],
        'SamlMetadata': Optional[str],
    }
)


WorkLinkDescribeWebsiteCertificateAuthorityResponse = TypedDict(
    'WorkLinkDescribeWebsiteCertificateAuthorityResponse', {
        'Certificate': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'DisplayName': Optional[str],
    }
)


WorkLinkDisassociateDomainResponse = TypedDict(
    'WorkLinkDisassociateDomainResponse', {
    }
)


WorkLinkDisassociateWebsiteCertificateAuthorityResponse = TypedDict(
    'WorkLinkDisassociateWebsiteCertificateAuthorityResponse', {
    }
)


WorkLinkDeviceSummary = TypedDict(
    'WorkLinkDeviceSummary', {
        'Id': Optional[str],
        'DeviceStatus': Optional[str],
    }
)


WorkLinkListDevicesResponse = TypedDict(
    'WorkLinkListDevicesResponse', {
        'DeviceSummaryList': Optional[List[WorkLinkDeviceSummary]],
        'NextToken': Optional[str],
    }
)


WorkLinkDomainSummary = TypedDict(
    'WorkLinkDomainSummary', {
        'DomainName': str,
        'DateTime': datetime.datetime,
        'DomainStatus': str,
        'DisplayName': Optional[str],
    }
)


WorkLinkListDomainsResponse = TypedDict(
    'WorkLinkListDomainsResponse', {
        'DomainSummaryList': Optional[List[WorkLinkDomainSummary]],
        'NextToken': Optional[str],
    }
)


WorkLinkFleetSummary = TypedDict(
    'WorkLinkFleetSummary', {
        'FleetArn': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'DateTime': Optional[datetime.datetime],
        'FleetName': Optional[str],
        'DisplayName': Optional[str],
        'CompanyCode': Optional[str],
        'FleetStatus': Optional[str],
    }
)


WorkLinkListFleetsResponse = TypedDict(
    'WorkLinkListFleetsResponse', {
        'FleetSummaryList': Optional[List[WorkLinkFleetSummary]],
        'NextToken': Optional[str],
    }
)


WorkLinkWebsiteCaSummary = TypedDict(
    'WorkLinkWebsiteCaSummary', {
        'Id': Optional[str],
        'DateTime': Optional[datetime.datetime],
        'DisplayName': Optional[str],
    }
)


WorkLinkListWebsiteCertificateAuthoritiesResponse = TypedDict(
    'WorkLinkListWebsiteCertificateAuthoritiesResponse', {
        'WebsiteCaSummaryList': Optional[List[WorkLinkWebsiteCaSummary]],
        'NextToken': Optional[str],
    }
)


WorkLinkRestoreDomainAccessResponse = TypedDict(
    'WorkLinkRestoreDomainAccessResponse', {
    }
)


WorkLinkRevokeDomainAccessResponse = TypedDict(
    'WorkLinkRevokeDomainAccessResponse', {
    }
)


WorkLinkSignOutUserResponse = TypedDict(
    'WorkLinkSignOutUserResponse', {
    }
)


WorkLinkUpdateAuditStreamConfigurationResponse = TypedDict(
    'WorkLinkUpdateAuditStreamConfigurationResponse', {
    }
)


WorkLinkUpdateCompanyNetworkConfigurationResponse = TypedDict(
    'WorkLinkUpdateCompanyNetworkConfigurationResponse', {
    }
)


WorkLinkUpdateDevicePolicyConfigurationResponse = TypedDict(
    'WorkLinkUpdateDevicePolicyConfigurationResponse', {
    }
)


WorkLinkUpdateDomainMetadataResponse = TypedDict(
    'WorkLinkUpdateDomainMetadataResponse', {
    }
)


WorkLinkUpdateFleetMetadataResponse = TypedDict(
    'WorkLinkUpdateFleetMetadataResponse', {
    }
)


WorkLinkUpdateIdentityProviderConfigurationResponse = TypedDict(
    'WorkLinkUpdateIdentityProviderConfigurationResponse', {
    }
)


class WorkMail(BaseClient):
    def associate_delegate_to_resource(self, *,
        OrganizationId: str,
        ResourceId: str,
        EntityId: str
    ) -> WorkMailAssociateDelegateToResourceResponse: ...

    def associate_member_to_group(self, *,
        OrganizationId: str,
        GroupId: str,
        MemberId: str
    ) -> WorkMailAssociateMemberToGroupResponse: ...

    def create_alias(self, *,
        OrganizationId: str,
        EntityId: str,
        Alias: str
    ) -> WorkMailCreateAliasResponse: ...

    def create_group(self, *,
        OrganizationId: str,
        Name: str
    ) -> WorkMailCreateGroupResponse: ...

    def create_resource(self, *,
        OrganizationId: str,
        Name: str,
        Type: str
    ) -> WorkMailCreateResourceResponse: ...

    def create_user(self, *,
        OrganizationId: str,
        Name: str,
        DisplayName: str,
        Password: str
    ) -> WorkMailCreateUserResponse: ...

    def delete_alias(self, *,
        OrganizationId: str,
        EntityId: str,
        Alias: str
    ) -> WorkMailDeleteAliasResponse: ...

    def delete_group(self, *,
        OrganizationId: str,
        GroupId: str
    ) -> WorkMailDeleteGroupResponse: ...

    def delete_mailbox_permissions(self, *,
        OrganizationId: str,
        EntityId: str,
        GranteeId: str
    ) -> WorkMailDeleteMailboxPermissionsResponse: ...

    def delete_resource(self, *,
        OrganizationId: str,
        ResourceId: str
    ) -> WorkMailDeleteResourceResponse: ...

    def delete_user(self, *,
        OrganizationId: str,
        UserId: str
    ) -> WorkMailDeleteUserResponse: ...

    def deregister_from_work_mail(self, *,
        OrganizationId: str,
        EntityId: str
    ) -> WorkMailDeregisterFromWorkMailResponse: ...

    def describe_group(self, *,
        OrganizationId: str,
        GroupId: str
    ) -> WorkMailDescribeGroupResponse: ...

    def describe_organization(self, *,
        OrganizationId: str
    ) -> WorkMailDescribeOrganizationResponse: ...

    def describe_resource(self, *,
        OrganizationId: str,
        ResourceId: str
    ) -> WorkMailDescribeResourceResponse: ...

    def describe_user(self, *,
        OrganizationId: str,
        UserId: str
    ) -> WorkMailDescribeUserResponse: ...

    def disassociate_delegate_from_resource(self, *,
        OrganizationId: str,
        ResourceId: str,
        EntityId: str
    ) -> WorkMailDisassociateDelegateFromResourceResponse: ...

    def disassociate_member_from_group(self, *,
        OrganizationId: str,
        GroupId: str,
        MemberId: str
    ) -> WorkMailDisassociateMemberFromGroupResponse: ...

    def get_mailbox_details(self, *,
        OrganizationId: str,
        UserId: str
    ) -> WorkMailGetMailboxDetailsResponse: ...

    def list_aliases(self, *,
        OrganizationId: str,
        EntityId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> WorkMailListAliasesResponse: ...

    def list_group_members(self, *,
        OrganizationId: str,
        GroupId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> WorkMailListGroupMembersResponse: ...

    def list_groups(self, *,
        OrganizationId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> WorkMailListGroupsResponse: ...

    def list_mailbox_permissions(self, *,
        OrganizationId: str,
        EntityId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> WorkMailListMailboxPermissionsResponse: ...

    def list_organizations(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> WorkMailListOrganizationsResponse: ...

    def list_resource_delegates(self, *,
        OrganizationId: str,
        ResourceId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> WorkMailListResourceDelegatesResponse: ...

    def list_resources(self, *,
        OrganizationId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> WorkMailListResourcesResponse: ...

    def list_users(self, *,
        OrganizationId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> WorkMailListUsersResponse: ...

    def put_mailbox_permissions(self, *,
        OrganizationId: str,
        EntityId: str,
        GranteeId: str,
        PermissionValues: List[str]
    ) -> WorkMailPutMailboxPermissionsResponse: ...

    def register_to_work_mail(self, *,
        OrganizationId: str,
        EntityId: str,
        Email: str
    ) -> WorkMailRegisterToWorkMailResponse: ...

    def reset_password(self, *,
        OrganizationId: str,
        UserId: str,
        Password: str
    ) -> WorkMailResetPasswordResponse: ...

    def update_mailbox_quota(self, *,
        OrganizationId: str,
        UserId: str,
        MailboxQuota: int
    ) -> WorkMailUpdateMailboxQuotaResponse: ...

    def update_primary_email_address(self, *,
        OrganizationId: str,
        EntityId: str,
        Email: str
    ) -> WorkMailUpdatePrimaryEmailAddressResponse: ...

    def update_resource(self, *,
        OrganizationId: str,
        ResourceId: str,
        Name: str = ...,
        BookingOptions: WorkMailBookingOptions = ...
    ) -> WorkMailUpdateResourceResponse: ...


WorkMailAssociateDelegateToResourceResponse = TypedDict(
    'WorkMailAssociateDelegateToResourceResponse', {
    }
)


WorkMailAssociateMemberToGroupResponse = TypedDict(
    'WorkMailAssociateMemberToGroupResponse', {
    }
)


WorkMailCreateAliasResponse = TypedDict(
    'WorkMailCreateAliasResponse', {
    }
)


WorkMailCreateGroupResponse = TypedDict(
    'WorkMailCreateGroupResponse', {
        'WorkMailIdentifier': Optional[str],
    }
)


WorkMailCreateResourceResponse = TypedDict(
    'WorkMailCreateResourceResponse', {
        'ResourceId': Optional[str],
    }
)


WorkMailCreateUserResponse = TypedDict(
    'WorkMailCreateUserResponse', {
        'WorkMailIdentifier': Optional[str],
    }
)


WorkMailDeleteAliasResponse = TypedDict(
    'WorkMailDeleteAliasResponse', {
    }
)


WorkMailDeleteGroupResponse = TypedDict(
    'WorkMailDeleteGroupResponse', {
    }
)


WorkMailDeleteMailboxPermissionsResponse = TypedDict(
    'WorkMailDeleteMailboxPermissionsResponse', {
    }
)


WorkMailDeleteResourceResponse = TypedDict(
    'WorkMailDeleteResourceResponse', {
    }
)


WorkMailDeleteUserResponse = TypedDict(
    'WorkMailDeleteUserResponse', {
    }
)


WorkMailDeregisterFromWorkMailResponse = TypedDict(
    'WorkMailDeregisterFromWorkMailResponse', {
    }
)


WorkMailDescribeGroupResponse = TypedDict(
    'WorkMailDescribeGroupResponse', {
        'WorkMailIdentifier': Optional[str],
        'GroupName': Optional[str],
        'EmailAddress': Optional[str],
        'EntityState': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


WorkMailDescribeOrganizationResponse = TypedDict(
    'WorkMailDescribeOrganizationResponse', {
        'OrganizationId': Optional[str],
        'OrganizationName': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'String': Optional[str],
    }
)


WorkMailBookingOptions = TypedDict(
    'WorkMailBookingOptions', {
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
        'Boolean': Optional[bool],
    }
)


WorkMailDescribeResourceResponse = TypedDict(
    'WorkMailDescribeResourceResponse', {
        'ResourceId': Optional[str],
        'EmailAddress': Optional[str],
        'ResourceName': Optional[str],
        'ResourceType': Optional[str],
        'BookingOptions': Optional[WorkMailBookingOptions],
        'EntityState': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


WorkMailDescribeUserResponse = TypedDict(
    'WorkMailDescribeUserResponse', {
        'WorkMailIdentifier': Optional[str],
        'UserName': Optional[str],
        'EmailAddress': Optional[str],
        'String': Optional[str],
        'EntityState': Optional[str],
        'UserRole': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


WorkMailDisassociateDelegateFromResourceResponse = TypedDict(
    'WorkMailDisassociateDelegateFromResourceResponse', {
    }
)


WorkMailDisassociateMemberFromGroupResponse = TypedDict(
    'WorkMailDisassociateMemberFromGroupResponse', {
    }
)


WorkMailGetMailboxDetailsResponse = TypedDict(
    'WorkMailGetMailboxDetailsResponse', {
        'MailboxQuota': Optional[int],
        'MailboxSize': Optional[float],
    }
)


WorkMailListAliasesResponse = TypedDict(
    'WorkMailListAliasesResponse', {
        'Aliases': Optional[List[str]],
        'NextToken': Optional[str],
    }
)


WorkMailMember = TypedDict(
    'WorkMailMember', {
        'String': Optional[str],
        'String': Optional[str],
        'MemberType': Optional[str],
        'EntityState': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


WorkMailListGroupMembersResponse = TypedDict(
    'WorkMailListGroupMembersResponse', {
        'Members': Optional[List[WorkMailMember]],
        'NextToken': Optional[str],
    }
)


WorkMailGroup = TypedDict(
    'WorkMailGroup', {
        'WorkMailIdentifier': Optional[str],
        'EmailAddress': Optional[str],
        'GroupName': Optional[str],
        'EntityState': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


WorkMailListGroupsResponse = TypedDict(
    'WorkMailListGroupsResponse', {
        'Groups': Optional[List[WorkMailGroup]],
        'NextToken': Optional[str],
    }
)


WorkMailPermission = TypedDict(
    'WorkMailPermission', {
        'WorkMailIdentifier': str,
        'MemberType': str,
        'PermissionValues': List[str],
    }
)


WorkMailListMailboxPermissionsResponse = TypedDict(
    'WorkMailListMailboxPermissionsResponse', {
        'Permissions': Optional[List[WorkMailPermission]],
        'NextToken': Optional[str],
    }
)


WorkMailOrganizationSummary = TypedDict(
    'WorkMailOrganizationSummary', {
        'OrganizationId': Optional[str],
        'OrganizationName': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


WorkMailListOrganizationsResponse = TypedDict(
    'WorkMailListOrganizationsResponse', {
        'OrganizationSummaries': Optional[List[WorkMailOrganizationSummary]],
        'NextToken': Optional[str],
    }
)


WorkMailDelegate = TypedDict(
    'WorkMailDelegate', {
        'String': str,
        'MemberType': str,
    }
)


WorkMailListResourceDelegatesResponse = TypedDict(
    'WorkMailListResourceDelegatesResponse', {
        'ResourceDelegates': Optional[List[WorkMailDelegate]],
        'NextToken': Optional[str],
    }
)


WorkMailResource = TypedDict(
    'WorkMailResource', {
        'WorkMailIdentifier': Optional[str],
        'EmailAddress': Optional[str],
        'ResourceName': Optional[str],
        'ResourceType': Optional[str],
        'EntityState': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


WorkMailListResourcesResponse = TypedDict(
    'WorkMailListResourcesResponse', {
        'Resources': Optional[List[WorkMailResource]],
        'NextToken': Optional[str],
    }
)


WorkMailUser = TypedDict(
    'WorkMailUser', {
        'WorkMailIdentifier': Optional[str],
        'EmailAddress': Optional[str],
        'UserName': Optional[str],
        'String': Optional[str],
        'EntityState': Optional[str],
        'UserRole': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


WorkMailListUsersResponse = TypedDict(
    'WorkMailListUsersResponse', {
        'Users': Optional[List[WorkMailUser]],
        'NextToken': Optional[str],
    }
)


WorkMailPutMailboxPermissionsResponse = TypedDict(
    'WorkMailPutMailboxPermissionsResponse', {
    }
)


WorkMailRegisterToWorkMailResponse = TypedDict(
    'WorkMailRegisterToWorkMailResponse', {
    }
)


WorkMailResetPasswordResponse = TypedDict(
    'WorkMailResetPasswordResponse', {
    }
)


WorkMailUpdateMailboxQuotaResponse = TypedDict(
    'WorkMailUpdateMailboxQuotaResponse', {
    }
)


WorkMailUpdatePrimaryEmailAddressResponse = TypedDict(
    'WorkMailUpdatePrimaryEmailAddressResponse', {
    }
)


WorkMailUpdateResourceResponse = TypedDict(
    'WorkMailUpdateResourceResponse', {
    }
)


class WorkSpaces(BaseClient):
    def associate_ip_groups(self, *,
        DirectoryId: str,
        GroupIds: List[str]
    ) -> WorkSpacesAssociateIpGroupsResult: ...

    def authorize_ip_rules(self, *,
        GroupId: str,
        UserRules: List[WorkSpacesIpRuleItem]
    ) -> WorkSpacesAuthorizeIpRulesResult: ...

    def create_ip_group(self, *,
        GroupName: str,
        GroupDesc: str = ...,
        UserRules: List[WorkSpacesIpRuleItem] = ...,
        Tags: List[WorkSpacesTag] = ...
    ) -> WorkSpacesCreateIpGroupResult: ...

    def create_tags(self, *,
        ResourceId: str,
        Tags: List[WorkSpacesTag]
    ) -> WorkSpacesCreateTagsResult: ...

    def create_workspaces(self, *,
        Workspaces: List[WorkSpacesWorkspaceRequest]
    ) -> WorkSpacesCreateWorkspacesResult: ...

    def delete_ip_group(self, *,
        GroupId: str
    ) -> WorkSpacesDeleteIpGroupResult: ...

    def delete_tags(self, *,
        ResourceId: str,
        TagKeys: List[str]
    ) -> WorkSpacesDeleteTagsResult: ...

    def delete_workspace_image(self, *,
        ImageId: str
    ) -> WorkSpacesDeleteWorkspaceImageResult: ...

    def describe_account(self) -> WorkSpacesDescribeAccountResult: ...

    def describe_account_modifications(self, *,
        NextToken: str = ...
    ) -> WorkSpacesDescribeAccountModificationsResult: ...

    def describe_client_properties(self, *,
        ResourceIds: List[str]
    ) -> WorkSpacesDescribeClientPropertiesResult: ...

    def describe_ip_groups(self, *,
        GroupIds: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> WorkSpacesDescribeIpGroupsResult: ...

    def describe_tags(self, *,
        ResourceId: str
    ) -> WorkSpacesDescribeTagsResult: ...

    def describe_workspace_bundles(self, *,
        BundleIds: List[str] = ...,
        Owner: str = ...,
        NextToken: str = ...
    ) -> WorkSpacesDescribeWorkspaceBundlesResult: ...

    def describe_workspace_directories(self, *,
        DirectoryIds: List[str] = ...,
        NextToken: str = ...
    ) -> WorkSpacesDescribeWorkspaceDirectoriesResult: ...

    def describe_workspace_images(self, *,
        ImageIds: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> WorkSpacesDescribeWorkspaceImagesResult: ...

    def describe_workspaces(self, *,
        WorkspaceIds: List[str] = ...,
        DirectoryId: str = ...,
        UserName: str = ...,
        BundleId: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> WorkSpacesDescribeWorkspacesResult: ...

    def describe_workspaces_connection_status(self, *,
        WorkspaceIds: List[str] = ...,
        NextToken: str = ...
    ) -> WorkSpacesDescribeWorkspacesConnectionStatusResult: ...

    def disassociate_ip_groups(self, *,
        DirectoryId: str,
        GroupIds: List[str]
    ) -> WorkSpacesDisassociateIpGroupsResult: ...

    def import_workspace_image(self, *,
        Ec2ImageId: str,
        IngestionProcess: str,
        ImageName: str,
        ImageDescription: str,
        Tags: List[WorkSpacesTag] = ...
    ) -> WorkSpacesImportWorkspaceImageResult: ...

    def list_available_management_cidr_ranges(self, *,
        ManagementCidrRangeConstraint: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> WorkSpacesListAvailableManagementCidrRangesResult: ...

    def modify_account(self, *,
        DedicatedTenancySupport: str = ...,
        DedicatedTenancyManagementCidrRange: str = ...
    ) -> WorkSpacesModifyAccountResult: ...

    def modify_client_properties(self, *,
        ResourceId: str,
        ClientProperties: WorkSpacesClientProperties
    ) -> WorkSpacesModifyClientPropertiesResult: ...

    def modify_workspace_properties(self, *,
        WorkspaceId: str,
        WorkspaceProperties: WorkSpacesWorkspaceProperties
    ) -> WorkSpacesModifyWorkspacePropertiesResult: ...

    def modify_workspace_state(self, *,
        WorkspaceId: str,
        WorkspaceState: str
    ) -> WorkSpacesModifyWorkspaceStateResult: ...

    def reboot_workspaces(self, *,
        RebootWorkspaceRequests: List[WorkSpacesRebootRequest]
    ) -> WorkSpacesRebootWorkspacesResult: ...

    def rebuild_workspaces(self, *,
        RebuildWorkspaceRequests: List[WorkSpacesRebuildRequest],
        AdditionalInfo: str = ...
    ) -> WorkSpacesRebuildWorkspacesResult: ...

    def revoke_ip_rules(self, *,
        GroupId: str,
        UserRules: List[str]
    ) -> WorkSpacesRevokeIpRulesResult: ...

    def start_workspaces(self, *,
        StartWorkspaceRequests: List[WorkSpacesStartRequest]
    ) -> WorkSpacesStartWorkspacesResult: ...

    def stop_workspaces(self, *,
        StopWorkspaceRequests: List[WorkSpacesStopRequest]
    ) -> WorkSpacesStopWorkspacesResult: ...

    def terminate_workspaces(self, *,
        TerminateWorkspaceRequests: List[WorkSpacesTerminateRequest]
    ) -> WorkSpacesTerminateWorkspacesResult: ...

    def update_rules_of_ip_group(self, *,
        GroupId: str,
        UserRules: List[WorkSpacesIpRuleItem]
    ) -> WorkSpacesUpdateRulesOfIpGroupResult: ...


WorkSpacesAssociateIpGroupsResult = TypedDict(
    'WorkSpacesAssociateIpGroupsResult', {
    }
)


WorkSpacesIpRuleItem = TypedDict(
    'WorkSpacesIpRuleItem', {
        'IpRule': Optional[str],
        'IpRuleDesc': Optional[str],
    }
)


WorkSpacesAuthorizeIpRulesResult = TypedDict(
    'WorkSpacesAuthorizeIpRulesResult', {
    }
)


WorkSpacesTag = TypedDict(
    'WorkSpacesTag', {
        'TagKey': str,
        'TagValue': Optional[str],
    }
)


WorkSpacesCreateIpGroupResult = TypedDict(
    'WorkSpacesCreateIpGroupResult', {
        'IpGroupId': Optional[str],
    }
)


WorkSpacesCreateTagsResult = TypedDict(
    'WorkSpacesCreateTagsResult', {
    }
)


WorkSpacesWorkspaceProperties = TypedDict(
    'WorkSpacesWorkspaceProperties', {
        'RunningMode': Optional[str],
        'RunningModeAutoStopTimeoutInMinutes': Optional[int],
        'RootVolumeSizeGib': Optional[int],
        'UserVolumeSizeGib': Optional[int],
        'Compute': Optional[str],
    }
)


WorkSpacesWorkspaceRequest = TypedDict(
    'WorkSpacesWorkspaceRequest', {
        'DirectoryId': str,
        'UserName': str,
        'BundleId': str,
        'VolumeEncryptionKey': Optional[str],
        'BooleanObject': Optional[bool],
        'BooleanObject': Optional[bool],
        'WorkspaceProperties': Optional[WorkSpacesWorkspaceProperties],
        'TagList': Optional[List[WorkSpacesTag]],
    }
)


WorkSpacesFailedCreateWorkspaceRequest = TypedDict(
    'WorkSpacesFailedCreateWorkspaceRequest', {
        'WorkspaceRequest': Optional[WorkSpacesWorkspaceRequest],
        'ErrorType': Optional[str],
        'Description': Optional[str],
    }
)


WorkSpacesModificationState = TypedDict(
    'WorkSpacesModificationState', {
        'ModificationResourceEnum': Optional[str],
        'ModificationStateEnum': Optional[str],
    }
)


WorkSpacesWorkspace = TypedDict(
    'WorkSpacesWorkspace', {
        'WorkspaceId': Optional[str],
        'DirectoryId': Optional[str],
        'UserName': Optional[str],
        'IpAddress': Optional[str],
        'WorkspaceState': Optional[str],
        'BundleId': Optional[str],
        'SubnetId': Optional[str],
        'Description': Optional[str],
        'WorkspaceErrorCode': Optional[str],
        'ComputerName': Optional[str],
        'VolumeEncryptionKey': Optional[str],
        'BooleanObject': Optional[bool],
        'BooleanObject': Optional[bool],
        'WorkspaceProperties': Optional[WorkSpacesWorkspaceProperties],
        'ModificationStateList': Optional[List[WorkSpacesModificationState]],
    }
)


WorkSpacesCreateWorkspacesResult = TypedDict(
    'WorkSpacesCreateWorkspacesResult', {
        'FailedCreateWorkspaceRequests': Optional[List[WorkSpacesFailedCreateWorkspaceRequest]],
        'WorkspaceList': Optional[List[WorkSpacesWorkspace]],
    }
)


WorkSpacesDeleteIpGroupResult = TypedDict(
    'WorkSpacesDeleteIpGroupResult', {
    }
)


WorkSpacesDeleteTagsResult = TypedDict(
    'WorkSpacesDeleteTagsResult', {
    }
)


WorkSpacesDeleteWorkspaceImageResult = TypedDict(
    'WorkSpacesDeleteWorkspaceImageResult', {
    }
)


WorkSpacesDescribeAccountResult = TypedDict(
    'WorkSpacesDescribeAccountResult', {
        'DedicatedTenancySupportResultEnum': Optional[str],
        'DedicatedTenancyManagementCidrRange': Optional[str],
    }
)


WorkSpacesAccountModification = TypedDict(
    'WorkSpacesAccountModification', {
        'DedicatedTenancyModificationStateEnum': Optional[str],
        'DedicatedTenancySupportResultEnum': Optional[str],
        'DedicatedTenancyManagementCidrRange': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'WorkspaceErrorCode': Optional[str],
        'Description': Optional[str],
    }
)


WorkSpacesDescribeAccountModificationsResult = TypedDict(
    'WorkSpacesDescribeAccountModificationsResult', {
        'AccountModificationList': Optional[List[WorkSpacesAccountModification]],
        'PaginationToken': Optional[str],
    }
)


WorkSpacesClientProperties = TypedDict(
    'WorkSpacesClientProperties', {
        'ReconnectEnum': Optional[str],
    }
)


WorkSpacesClientPropertiesResult = TypedDict(
    'WorkSpacesClientPropertiesResult', {
        'NonEmptyString': Optional[str],
        'ClientProperties': Optional[WorkSpacesClientProperties],
    }
)


WorkSpacesDescribeClientPropertiesResult = TypedDict(
    'WorkSpacesDescribeClientPropertiesResult', {
        'ClientPropertiesList': Optional[List[WorkSpacesClientPropertiesResult]],
    }
)


WorkSpacesWorkspacesIpGroup = TypedDict(
    'WorkSpacesWorkspacesIpGroup', {
        'IpGroupId': Optional[str],
        'IpGroupName': Optional[str],
        'IpGroupDesc': Optional[str],
        'IpRuleList': Optional[List[WorkSpacesIpRuleItem]],
    }
)


WorkSpacesDescribeIpGroupsResult = TypedDict(
    'WorkSpacesDescribeIpGroupsResult', {
        'WorkspacesIpGroupsList': Optional[List[WorkSpacesWorkspacesIpGroup]],
        'PaginationToken': Optional[str],
    }
)


WorkSpacesDescribeTagsResult = TypedDict(
    'WorkSpacesDescribeTagsResult', {
        'TagList': Optional[List[WorkSpacesTag]],
    }
)


WorkSpacesRootStorage = TypedDict(
    'WorkSpacesRootStorage', {
        'NonEmptyString': Optional[str],
    }
)


WorkSpacesUserStorage = TypedDict(
    'WorkSpacesUserStorage', {
        'NonEmptyString': Optional[str],
    }
)


WorkSpacesComputeType = TypedDict(
    'WorkSpacesComputeType', {
        'Compute': Optional[str],
    }
)


WorkSpacesWorkspaceBundle = TypedDict(
    'WorkSpacesWorkspaceBundle', {
        'BundleId': Optional[str],
        'NonEmptyString': Optional[str],
        'BundleOwner': Optional[str],
        'Description': Optional[str],
        'RootStorage': Optional[WorkSpacesRootStorage],
        'UserStorage': Optional[WorkSpacesUserStorage],
        'ComputeType': Optional[WorkSpacesComputeType],
    }
)


WorkSpacesDescribeWorkspaceBundlesResult = TypedDict(
    'WorkSpacesDescribeWorkspaceBundlesResult', {
        'BundleList': Optional[List[WorkSpacesWorkspaceBundle]],
        'PaginationToken': Optional[str],
    }
)


WorkSpacesDefaultWorkspaceCreationProperties = TypedDict(
    'WorkSpacesDefaultWorkspaceCreationProperties', {
        'BooleanObject': Optional[bool],
        'BooleanObject': Optional[bool],
        'DefaultOu': Optional[str],
        'SecurityGroupId': Optional[str],
        'BooleanObject': Optional[bool],
    }
)


WorkSpacesWorkspaceDirectory = TypedDict(
    'WorkSpacesWorkspaceDirectory', {
        'DirectoryId': Optional[str],
        'Alias': Optional[str],
        'DirectoryName': Optional[str],
        'RegistrationCode': Optional[str],
        'SubnetIds': Optional[List[str]],
        'DnsIpAddresses': Optional[List[str]],
        'UserName': Optional[str],
        'ARN': Optional[str],
        'WorkspaceDirectoryType': Optional[str],
        'SecurityGroupId': Optional[str],
        'WorkspaceDirectoryState': Optional[str],
        'DefaultWorkspaceCreationProperties': Optional[WorkSpacesDefaultWorkspaceCreationProperties],
        'IpGroupIdList': Optional[List[str]],
    }
)


WorkSpacesDescribeWorkspaceDirectoriesResult = TypedDict(
    'WorkSpacesDescribeWorkspaceDirectoriesResult', {
        'DirectoryList': Optional[List[WorkSpacesWorkspaceDirectory]],
        'PaginationToken': Optional[str],
    }
)


WorkSpacesOperatingSystem = TypedDict(
    'WorkSpacesOperatingSystem', {
        'OperatingSystemType': Optional[str],
    }
)


WorkSpacesWorkspaceImage = TypedDict(
    'WorkSpacesWorkspaceImage', {
        'WorkspaceImageId': Optional[str],
        'WorkspaceImageName': Optional[str],
        'WorkspaceImageDescription': Optional[str],
        'OperatingSystem': Optional[WorkSpacesOperatingSystem],
        'WorkspaceImageState': Optional[str],
        'WorkspaceImageRequiredTenancy': Optional[str],
        'WorkspaceImageErrorCode': Optional[str],
        'Description': Optional[str],
    }
)


WorkSpacesDescribeWorkspaceImagesResult = TypedDict(
    'WorkSpacesDescribeWorkspaceImagesResult', {
        'WorkspaceImageList': Optional[List[WorkSpacesWorkspaceImage]],
        'PaginationToken': Optional[str],
    }
)


WorkSpacesDescribeWorkspacesResult = TypedDict(
    'WorkSpacesDescribeWorkspacesResult', {
        'WorkspaceList': Optional[List[WorkSpacesWorkspace]],
        'PaginationToken': Optional[str],
    }
)


WorkSpacesWorkspaceConnectionStatus = TypedDict(
    'WorkSpacesWorkspaceConnectionStatus', {
        'WorkspaceId': Optional[str],
        'ConnectionState': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


WorkSpacesDescribeWorkspacesConnectionStatusResult = TypedDict(
    'WorkSpacesDescribeWorkspacesConnectionStatusResult', {
        'WorkspaceConnectionStatusList': Optional[List[WorkSpacesWorkspaceConnectionStatus]],
        'PaginationToken': Optional[str],
    }
)


WorkSpacesDisassociateIpGroupsResult = TypedDict(
    'WorkSpacesDisassociateIpGroupsResult', {
    }
)


WorkSpacesImportWorkspaceImageResult = TypedDict(
    'WorkSpacesImportWorkspaceImageResult', {
        'WorkspaceImageId': Optional[str],
    }
)


WorkSpacesListAvailableManagementCidrRangesResult = TypedDict(
    'WorkSpacesListAvailableManagementCidrRangesResult', {
        'DedicatedTenancyCidrRangeList': Optional[List[str]],
        'PaginationToken': Optional[str],
    }
)


WorkSpacesModifyAccountResult = TypedDict(
    'WorkSpacesModifyAccountResult', {
    }
)


WorkSpacesModifyClientPropertiesResult = TypedDict(
    'WorkSpacesModifyClientPropertiesResult', {
    }
)


WorkSpacesModifyWorkspacePropertiesResult = TypedDict(
    'WorkSpacesModifyWorkspacePropertiesResult', {
    }
)


WorkSpacesModifyWorkspaceStateResult = TypedDict(
    'WorkSpacesModifyWorkspaceStateResult', {
    }
)


WorkSpacesRebootRequest = TypedDict(
    'WorkSpacesRebootRequest', {
        'WorkspaceId': str,
    }
)


WorkSpacesFailedWorkspaceChangeRequest = TypedDict(
    'WorkSpacesFailedWorkspaceChangeRequest', {
        'WorkspaceId': Optional[str],
        'ErrorType': Optional[str],
        'Description': Optional[str],
    }
)


WorkSpacesRebootWorkspacesResult = TypedDict(
    'WorkSpacesRebootWorkspacesResult', {
        'FailedRebootWorkspaceRequests': Optional[List[WorkSpacesFailedWorkspaceChangeRequest]],
    }
)


WorkSpacesRebuildRequest = TypedDict(
    'WorkSpacesRebuildRequest', {
        'WorkspaceId': str,
    }
)


WorkSpacesRebuildWorkspacesResult = TypedDict(
    'WorkSpacesRebuildWorkspacesResult', {
        'FailedRebuildWorkspaceRequests': Optional[List[WorkSpacesFailedWorkspaceChangeRequest]],
    }
)


WorkSpacesRevokeIpRulesResult = TypedDict(
    'WorkSpacesRevokeIpRulesResult', {
    }
)


WorkSpacesStartRequest = TypedDict(
    'WorkSpacesStartRequest', {
        'WorkspaceId': Optional[str],
    }
)


WorkSpacesStartWorkspacesResult = TypedDict(
    'WorkSpacesStartWorkspacesResult', {
        'FailedStartWorkspaceRequests': Optional[List[WorkSpacesFailedWorkspaceChangeRequest]],
    }
)


WorkSpacesStopRequest = TypedDict(
    'WorkSpacesStopRequest', {
        'WorkspaceId': Optional[str],
    }
)


WorkSpacesStopWorkspacesResult = TypedDict(
    'WorkSpacesStopWorkspacesResult', {
        'FailedStopWorkspaceRequests': Optional[List[WorkSpacesFailedWorkspaceChangeRequest]],
    }
)


WorkSpacesTerminateRequest = TypedDict(
    'WorkSpacesTerminateRequest', {
        'WorkspaceId': str,
    }
)


WorkSpacesTerminateWorkspacesResult = TypedDict(
    'WorkSpacesTerminateWorkspacesResult', {
        'FailedTerminateWorkspaceRequests': Optional[List[WorkSpacesFailedWorkspaceChangeRequest]],
    }
)


WorkSpacesUpdateRulesOfIpGroupResult = TypedDict(
    'WorkSpacesUpdateRulesOfIpGroupResult', {
    }
)


class XRay(BaseClient):
    def batch_get_traces(self, *,
        TraceIds: List[str],
        NextToken: str = ...
    ) -> XRayBatchGetTracesResult: ...

    def create_group(self, *,
        GroupName: str,
        FilterExpression: str = ...
    ) -> XRayCreateGroupResult: ...

    def create_sampling_rule(self, *,
        SamplingRule: XRaySamplingRule
    ) -> XRayCreateSamplingRuleResult: ...

    def delete_group(self, *,
        GroupName: str = ...,
        GroupARN: str = ...
    ) -> XRayDeleteGroupResult: ...

    def delete_sampling_rule(self, *,
        RuleName: str = ...,
        RuleARN: str = ...
    ) -> XRayDeleteSamplingRuleResult: ...

    def get_encryption_config(self) -> XRayGetEncryptionConfigResult: ...

    def get_group(self, *,
        GroupName: str = ...,
        GroupARN: str = ...
    ) -> XRayGetGroupResult: ...

    def get_groups(self, *,
        NextToken: str = ...
    ) -> XRayGetGroupsResult: ...

    def get_sampling_rules(self, *,
        NextToken: str = ...
    ) -> XRayGetSamplingRulesResult: ...

    def get_sampling_statistic_summaries(self, *,
        NextToken: str = ...
    ) -> XRayGetSamplingStatisticSummariesResult: ...

    def get_sampling_targets(self, *,
        SamplingStatisticsDocuments: List[XRaySamplingStatisticsDocument]
    ) -> XRayGetSamplingTargetsResult: ...

    def get_service_graph(self, *,
        StartTime: datetime.datetime,
        EndTime: datetime.datetime,
        GroupName: str = ...,
        GroupARN: str = ...,
        NextToken: str = ...
    ) -> XRayGetServiceGraphResult: ...

    def get_time_series_service_statistics(self, *,
        StartTime: datetime.datetime,
        EndTime: datetime.datetime,
        GroupName: str = ...,
        GroupARN: str = ...,
        EntitySelectorExpression: str = ...,
        Period: int = ...,
        NextToken: str = ...
    ) -> XRayGetTimeSeriesServiceStatisticsResult: ...

    def get_trace_graph(self, *,
        TraceIds: List[str],
        NextToken: str = ...
    ) -> XRayGetTraceGraphResult: ...

    def get_trace_summaries(self, *,
        StartTime: datetime.datetime,
        EndTime: datetime.datetime,
        TimeRangeType: str = ...,
        Sampling: bool = ...,
        SamplingStrategy: XRaySamplingStrategy = ...,
        FilterExpression: str = ...,
        NextToken: str = ...
    ) -> XRayGetTraceSummariesResult: ...

    def put_encryption_config(self, *,
        Type: str,
        KeyId: str = ...
    ) -> XRayPutEncryptionConfigResult: ...

    def put_telemetry_records(self, *,
        TelemetryRecords: List[XRayTelemetryRecord],
        EC2InstanceId: str = ...,
        Hostname: str = ...,
        ResourceARN: str = ...
    ) -> XRayPutTelemetryRecordsResult: ...

    def put_trace_segments(self, *,
        TraceSegmentDocuments: List[str]
    ) -> XRayPutTraceSegmentsResult: ...

    def update_group(self, *,
        GroupName: str = ...,
        GroupARN: str = ...,
        FilterExpression: str = ...
    ) -> XRayUpdateGroupResult: ...

    def update_sampling_rule(self, *,
        SamplingRuleUpdate: XRaySamplingRuleUpdate
    ) -> XRayUpdateSamplingRuleResult: ...


XRaySegment = TypedDict(
    'XRaySegment', {
        'SegmentId': Optional[str],
        'SegmentDocument': Optional[str],
    }
)


XRayTrace = TypedDict(
    'XRayTrace', {
        'TraceId': Optional[str],
        'NullableDouble': Optional[float],
        'SegmentList': Optional[List[XRaySegment]],
    }
)


XRayBatchGetTracesResult = TypedDict(
    'XRayBatchGetTracesResult', {
        'TraceList': Optional[List[XRayTrace]],
        'UnprocessedTraceIdList': Optional[List[str]],
        'String': Optional[str],
    }
)


XRayGroup = TypedDict(
    'XRayGroup', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


XRayCreateGroupResult = TypedDict(
    'XRayCreateGroupResult', {
        'Group': Optional[XRayGroup],
    }
)


XRaySamplingRule = TypedDict(
    'XRaySamplingRule', {
        'ResourceARN': str,
        'Priority': int,
        'FixedRate': float,
        'ReservoirSize': int,
        'ServiceName': str,
        'ServiceType': str,
        'Host': str,
        'HTTPMethod': str,
        'URLPath': str,
        'Version': int,
        'RuleName': Optional[str],
        'String': Optional[str],
        'AttributeMap': Optional[Dict[str, str]],
    }
)


XRaySamplingRuleRecord = TypedDict(
    'XRaySamplingRuleRecord', {
        'SamplingRule': Optional[XRaySamplingRule],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
    }
)


XRayCreateSamplingRuleResult = TypedDict(
    'XRayCreateSamplingRuleResult', {
        'SamplingRuleRecord': Optional[XRaySamplingRuleRecord],
    }
)


XRayDeleteGroupResult = TypedDict(
    'XRayDeleteGroupResult', {
    }
)


XRayDeleteSamplingRuleResult = TypedDict(
    'XRayDeleteSamplingRuleResult', {
        'SamplingRuleRecord': Optional[XRaySamplingRuleRecord],
    }
)


XRayEncryptionConfig = TypedDict(
    'XRayEncryptionConfig', {
        'String': Optional[str],
        'EncryptionStatus': Optional[str],
        'EncryptionType': Optional[str],
    }
)


XRayGetEncryptionConfigResult = TypedDict(
    'XRayGetEncryptionConfigResult', {
        'EncryptionConfig': Optional[XRayEncryptionConfig],
    }
)


XRayGetGroupResult = TypedDict(
    'XRayGetGroupResult', {
        'Group': Optional[XRayGroup],
    }
)


XRayGroupSummary = TypedDict(
    'XRayGroupSummary', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


XRayGetGroupsResult = TypedDict(
    'XRayGetGroupsResult', {
        'GroupSummaryList': Optional[List[XRayGroupSummary]],
        'String': Optional[str],
    }
)


XRayGetSamplingRulesResult = TypedDict(
    'XRayGetSamplingRulesResult', {
        'SamplingRuleRecordList': Optional[List[XRaySamplingRuleRecord]],
        'String': Optional[str],
    }
)


XRaySamplingStatisticSummary = TypedDict(
    'XRaySamplingStatisticSummary', {
        'String': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Integer': Optional[int],
        'Integer': Optional[int],
        'Integer': Optional[int],
    }
)


XRayGetSamplingStatisticSummariesResult = TypedDict(
    'XRayGetSamplingStatisticSummariesResult', {
        'SamplingStatisticSummaryList': Optional[List[XRaySamplingStatisticSummary]],
        'String': Optional[str],
    }
)


XRaySamplingStatisticsDocument = TypedDict(
    'XRaySamplingStatisticsDocument', {
        'RuleName': str,
        'ClientID': str,
        'Timestamp': datetime.datetime,
        'RequestCount': int,
        'SampledCount': int,
        'BorrowCount': Optional[int],
    }
)


XRaySamplingTargetDocument = TypedDict(
    'XRaySamplingTargetDocument', {
        'String': Optional[str],
        'Double': Optional[float],
        'NullableInteger': Optional[int],
        'Timestamp': Optional[datetime.datetime],
        'NullableInteger': Optional[int],
    }
)


XRayUnprocessedStatistics = TypedDict(
    'XRayUnprocessedStatistics', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


XRayGetSamplingTargetsResult = TypedDict(
    'XRayGetSamplingTargetsResult', {
        'SamplingTargetDocumentList': Optional[List[XRaySamplingTargetDocument]],
        'Timestamp': Optional[datetime.datetime],
        'UnprocessedStatisticsList': Optional[List[XRayUnprocessedStatistics]],
    }
)


XRayErrorStatistics = TypedDict(
    'XRayErrorStatistics', {
        'NullableLong': Optional[int],
        'NullableLong': Optional[int],
        'NullableLong': Optional[int],
    }
)


XRayFaultStatistics = TypedDict(
    'XRayFaultStatistics', {
        'NullableLong': Optional[int],
        'NullableLong': Optional[int],
    }
)


XRayEdgeStatistics = TypedDict(
    'XRayEdgeStatistics', {
        'NullableLong': Optional[int],
        'ErrorStatistics': Optional[XRayErrorStatistics],
        'FaultStatistics': Optional[XRayFaultStatistics],
        'NullableLong': Optional[int],
        'NullableDouble': Optional[float],
    }
)


XRayHistogramEntry = TypedDict(
    'XRayHistogramEntry', {
        'Double': Optional[float],
        'Integer': Optional[int],
    }
)


XRayAlias = TypedDict(
    'XRayAlias', {
        'String': Optional[str],
        'AliasNames': Optional[List[str]],
        'String': Optional[str],
    }
)


XRayEdge = TypedDict(
    'XRayEdge', {
        'NullableInteger': Optional[int],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'EdgeStatistics': Optional[XRayEdgeStatistics],
        'Histogram': Optional[List[XRayHistogramEntry]],
        'AliasList': Optional[List[XRayAlias]],
    }
)


XRayServiceStatistics = TypedDict(
    'XRayServiceStatistics', {
        'NullableLong': Optional[int],
        'ErrorStatistics': Optional[XRayErrorStatistics],
        'FaultStatistics': Optional[XRayFaultStatistics],
        'NullableLong': Optional[int],
        'NullableDouble': Optional[float],
    }
)


XRayService = TypedDict(
    'XRayService', {
        'NullableInteger': Optional[int],
        'String': Optional[str],
        'ServiceNames': Optional[List[str]],
        'NullableBoolean': Optional[bool],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'EdgeList': Optional[List[XRayEdge]],
        'ServiceStatistics': Optional[XRayServiceStatistics],
        'Histogram': Optional[List[XRayHistogramEntry]],
        'Histogram': Optional[List[XRayHistogramEntry]],
    }
)


XRayGetServiceGraphResult = TypedDict(
    'XRayGetServiceGraphResult', {
        'Timestamp': Optional[datetime.datetime],
        'Timestamp': Optional[datetime.datetime],
        'ServiceList': Optional[List[XRayService]],
        'Boolean': Optional[bool],
        'String': Optional[str],
    }
)


XRayTimeSeriesServiceStatistics = TypedDict(
    'XRayTimeSeriesServiceStatistics', {
        'Timestamp': Optional[datetime.datetime],
        'EdgeStatistics': Optional[XRayEdgeStatistics],
        'ServiceStatistics': Optional[XRayServiceStatistics],
        'Histogram': Optional[List[XRayHistogramEntry]],
    }
)


XRayGetTimeSeriesServiceStatisticsResult = TypedDict(
    'XRayGetTimeSeriesServiceStatisticsResult', {
        'TimeSeriesServiceStatisticsList': Optional[List[XRayTimeSeriesServiceStatistics]],
        'Boolean': Optional[bool],
        'String': Optional[str],
    }
)


XRayGetTraceGraphResult = TypedDict(
    'XRayGetTraceGraphResult', {
        'ServiceList': Optional[List[XRayService]],
        'String': Optional[str],
    }
)


XRaySamplingStrategy = TypedDict(
    'XRaySamplingStrategy', {
        'SamplingStrategyName': Optional[str],
        'NullableDouble': Optional[float],
    }
)


XRayHttp = TypedDict(
    'XRayHttp', {
        'String': Optional[str],
        'NullableInteger': Optional[int],
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


XRayAnnotationValue = TypedDict(
    'XRayAnnotationValue', {
        'NullableDouble': Optional[float],
        'NullableBoolean': Optional[bool],
        'String': Optional[str],
    }
)


XRayServiceId = TypedDict(
    'XRayServiceId', {
        'String': Optional[str],
        'ServiceNames': Optional[List[str]],
        'String': Optional[str],
        'String': Optional[str],
    }
)


XRayValueWithServiceIds = TypedDict(
    'XRayValueWithServiceIds', {
        'AnnotationValue': Optional[XRayAnnotationValue],
        'ServiceIds': Optional[List[XRayServiceId]],
    }
)


XRayTraceUser = TypedDict(
    'XRayTraceUser', {
        'String': Optional[str],
        'ServiceIds': Optional[List[XRayServiceId]],
    }
)


XRayResourceARNDetail = TypedDict(
    'XRayResourceARNDetail', {
        'String': Optional[str],
    }
)


XRayInstanceIdDetail = TypedDict(
    'XRayInstanceIdDetail', {
        'String': Optional[str],
    }
)


XRayAvailabilityZoneDetail = TypedDict(
    'XRayAvailabilityZoneDetail', {
        'String': Optional[str],
    }
)


XRayRootCauseException = TypedDict(
    'XRayRootCauseException', {
        'String': Optional[str],
        'String': Optional[str],
    }
)


XRayFaultRootCauseEntity = TypedDict(
    'XRayFaultRootCauseEntity', {
        'String': Optional[str],
        'RootCauseExceptions': Optional[List[XRayRootCauseException]],
        'NullableBoolean': Optional[bool],
    }
)


XRayFaultRootCauseService = TypedDict(
    'XRayFaultRootCauseService', {
        'String': Optional[str],
        'ServiceNames': Optional[List[str]],
        'String': Optional[str],
        'String': Optional[str],
        'FaultRootCauseEntityPath': Optional[List[XRayFaultRootCauseEntity]],
        'NullableBoolean': Optional[bool],
    }
)


XRayFaultRootCause = TypedDict(
    'XRayFaultRootCause', {
        'FaultRootCauseServices': Optional[List[XRayFaultRootCauseService]],
    }
)


XRayErrorRootCauseEntity = TypedDict(
    'XRayErrorRootCauseEntity', {
        'String': Optional[str],
        'RootCauseExceptions': Optional[List[XRayRootCauseException]],
        'NullableBoolean': Optional[bool],
    }
)


XRayErrorRootCauseService = TypedDict(
    'XRayErrorRootCauseService', {
        'String': Optional[str],
        'ServiceNames': Optional[List[str]],
        'String': Optional[str],
        'String': Optional[str],
        'ErrorRootCauseEntityPath': Optional[List[XRayErrorRootCauseEntity]],
        'NullableBoolean': Optional[bool],
    }
)


XRayErrorRootCause = TypedDict(
    'XRayErrorRootCause', {
        'ErrorRootCauseServices': Optional[List[XRayErrorRootCauseService]],
    }
)


XRayResponseTimeRootCauseEntity = TypedDict(
    'XRayResponseTimeRootCauseEntity', {
        'String': Optional[str],
        'NullableDouble': Optional[float],
        'NullableBoolean': Optional[bool],
    }
)


XRayResponseTimeRootCauseService = TypedDict(
    'XRayResponseTimeRootCauseService', {
        'String': Optional[str],
        'ServiceNames': Optional[List[str]],
        'String': Optional[str],
        'String': Optional[str],
        'ResponseTimeRootCauseEntityPath': Optional[List[XRayResponseTimeRootCauseEntity]],
        'NullableBoolean': Optional[bool],
    }
)


XRayResponseTimeRootCause = TypedDict(
    'XRayResponseTimeRootCause', {
        'ResponseTimeRootCauseServices': Optional[List[XRayResponseTimeRootCauseService]],
    }
)


XRayTraceSummary = TypedDict(
    'XRayTraceSummary', {
        'TraceId': Optional[str],
        'NullableDouble': Optional[float],
        'NullableDouble': Optional[float],
        'NullableBoolean': Optional[bool],
        'NullableBoolean': Optional[bool],
        'NullableBoolean': Optional[bool],
        'NullableBoolean': Optional[bool],
        'Http': Optional[XRayHttp],
        'Annotations': Optional[Dict[str, List[XRayValueWithServiceIds]]],
        'TraceUsers': Optional[List[XRayTraceUser]],
        'ServiceIds': Optional[List[XRayServiceId]],
        'TraceResourceARNs': Optional[List[XRayResourceARNDetail]],
        'TraceInstanceIds': Optional[List[XRayInstanceIdDetail]],
        'TraceAvailabilityZones': Optional[List[XRayAvailabilityZoneDetail]],
        'ServiceId': Optional[XRayServiceId],
        'FaultRootCauses': Optional[List[XRayFaultRootCause]],
        'ErrorRootCauses': Optional[List[XRayErrorRootCause]],
        'ResponseTimeRootCauses': Optional[List[XRayResponseTimeRootCause]],
        'Integer': Optional[int],
        'Timestamp': Optional[datetime.datetime],
    }
)


XRayGetTraceSummariesResult = TypedDict(
    'XRayGetTraceSummariesResult', {
        'TraceSummaryList': Optional[List[XRayTraceSummary]],
        'Timestamp': Optional[datetime.datetime],
        'NullableLong': Optional[int],
        'String': Optional[str],
    }
)


XRayPutEncryptionConfigResult = TypedDict(
    'XRayPutEncryptionConfigResult', {
        'EncryptionConfig': Optional[XRayEncryptionConfig],
    }
)


XRayBackendConnectionErrors = TypedDict(
    'XRayBackendConnectionErrors', {
        'NullableInteger': Optional[int],
        'NullableInteger': Optional[int],
        'NullableInteger': Optional[int],
        'NullableInteger': Optional[int],
        'NullableInteger': Optional[int],
        'NullableInteger': Optional[int],
    }
)


XRayTelemetryRecord = TypedDict(
    'XRayTelemetryRecord', {
        'Timestamp': datetime.datetime,
        'NullableInteger': Optional[int],
        'NullableInteger': Optional[int],
        'NullableInteger': Optional[int],
        'NullableInteger': Optional[int],
        'BackendConnectionErrors': Optional[XRayBackendConnectionErrors],
    }
)


XRayPutTelemetryRecordsResult = TypedDict(
    'XRayPutTelemetryRecordsResult', {
    }
)


XRayUnprocessedTraceSegment = TypedDict(
    'XRayUnprocessedTraceSegment', {
        'String': Optional[str],
        'String': Optional[str],
        'String': Optional[str],
    }
)


XRayPutTraceSegmentsResult = TypedDict(
    'XRayPutTraceSegmentsResult', {
        'UnprocessedTraceSegmentList': Optional[List[XRayUnprocessedTraceSegment]],
    }
)


XRayUpdateGroupResult = TypedDict(
    'XRayUpdateGroupResult', {
        'Group': Optional[XRayGroup],
    }
)


XRaySamplingRuleUpdate = TypedDict(
    'XRaySamplingRuleUpdate', {
        'RuleName': Optional[str],
        'String': Optional[str],
        'ResourceARN': Optional[str],
        'NullableInteger': Optional[int],
        'NullableDouble': Optional[float],
        'NullableInteger': Optional[int],
        'Host': Optional[str],
        'ServiceName': Optional[str],
        'ServiceType': Optional[str],
        'HTTPMethod': Optional[str],
        'URLPath': Optional[str],
        'AttributeMap': Optional[Dict[str, str]],
    }
)


XRayUpdateSamplingRuleResult = TypedDict(
    'XRayUpdateSamplingRuleResult', {
        'SamplingRuleRecord': Optional[XRaySamplingRuleRecord],
    }
)



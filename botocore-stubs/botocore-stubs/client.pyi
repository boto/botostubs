import datetime

from mypy_extensions import TypedDict
from typing import Optional, AnyStr, Dict, List


class ACM(BaseClient):
    def add_tags_to_certificate(self, *,
        CertificateArn: str,
        Tags: List[ACMTag]
    ): ...

    def delete_certificate(self, *,
        CertificateArn: str
    ): ...

    def describe_certificate(self, *,
        CertificateArn: str
    ) -> ACMDescribeCertificateResponse: ...

    def export_certificate(self, *,
        CertificateArn: str,
        Passphrase: bytes
    ) -> ACMExportCertificateResponse: ...

    def get_certificate(self, *,
        CertificateArn: str
    ) -> ACMGetCertificateResponse: ...

    def import_certificate(self, *,
        Certificate: bytes,
        PrivateKey: bytes,
        CertificateArn: str = ...,
        CertificateChain: bytes = ...
    ) -> ACMImportCertificateResponse: ...

    def list_certificates(self, *,
        CertificateStatuses: List[str] = ...,
        Includes: ACMFilters = ...,
        NextToken: str = ...,
        MaxItems: int = ...
    ) -> ACMListCertificatesResponse: ...

    def list_tags_for_certificate(self, *,
        CertificateArn: str
    ) -> ACMListTagsForCertificateResponse: ...

    def remove_tags_from_certificate(self, *,
        CertificateArn: str,
        Tags: List[ACMTag]
    ): ...

    def renew_certificate(self, *,
        CertificateArn: str
    ): ...

    def request_certificate(self, *,
        DomainName: str,
        ValidationMethod: str = ...,
        SubjectAlternativeNames: List[str] = ...,
        IdempotencyToken: str = ...,
        DomainValidationOptions: List[ACMDomainValidationOption] = ...,
        Options: ACMCertificateOptions = ...,
        CertificateAuthorityArn: str = ...
    ) -> ACMRequestCertificateResponse: ...

    def resend_validation_email(self, *,
        CertificateArn: str,
        Domain: str,
        ValidationDomain: str
    ): ...

    def update_certificate_options(self, *,
        CertificateArn: str,
        Options: ACMCertificateOptions
    ): ...


class _ACMTag(TypedDict):
    Key: str


class ACMTag(_ACMTag, total=False):
    Value: str


class ACMDescribeCertificateResponse(TypedDict, total=False):
    Certificate: ACMCertificateDetail


class ACMCertificateDetail(TypedDict, total=False):
    CertificateArn: str
    DomainName: str
    SubjectAlternativeNames: List[str]
    DomainValidationOptions: List[ACMDomainValidation]
    Serial: str
    Subject: str
    Issuer: str
    CreatedAt: datetime.datetime
    IssuedAt: datetime.datetime
    ImportedAt: datetime.datetime
    Status: str
    RevokedAt: datetime.datetime
    RevocationReason: str
    NotBefore: datetime.datetime
    NotAfter: datetime.datetime
    KeyAlgorithm: str
    SignatureAlgorithm: str
    InUseBy: List[str]
    FailureReason: str
    Type: str
    RenewalSummary: ACMRenewalSummary
    KeyUsages: List[ACMKeyUsage]
    ExtendedKeyUsages: List[ACMExtendedKeyUsage]
    CertificateAuthorityArn: str
    RenewalEligibility: str
    Options: ACMCertificateOptions


class _ACMDomainValidation(TypedDict):
    DomainName: str


class ACMDomainValidation(_ACMDomainValidation, total=False):
    ValidationEmails: List[str]
    ValidationDomain: str
    ValidationStatus: str
    ResourceRecord: ACMResourceRecord
    ValidationMethod: str


class ACMResourceRecord(TypedDict):
    Name: str
    Type: str
    Value: str


class _ACMRenewalSummary(TypedDict):
    RenewalStatus: str
    DomainValidationOptions: List[ACMDomainValidation]
    UpdatedAt: datetime.datetime


class ACMRenewalSummary(_ACMRenewalSummary, total=False):
    RenewalStatusReason: str


class ACMKeyUsage(TypedDict, total=False):
    Name: str


class ACMExtendedKeyUsage(TypedDict, total=False):
    Name: str
    OID: str


class ACMCertificateOptions(TypedDict, total=False):
    CertificateTransparencyLoggingPreference: str


class ACMExportCertificateResponse(TypedDict, total=False):
    Certificate: str
    CertificateChain: str
    PrivateKey: str


class ACMGetCertificateResponse(TypedDict, total=False):
    Certificate: str
    CertificateChain: str


class ACMImportCertificateResponse(TypedDict, total=False):
    CertificateArn: str


class ACMFilters(TypedDict, total=False):
    extendedKeyUsage: List[str]
    keyUsage: List[str]
    keyTypes: List[str]


class ACMListCertificatesResponse(TypedDict, total=False):
    NextToken: str
    CertificateSummaryList: List[ACMCertificateSummary]


class ACMCertificateSummary(TypedDict, total=False):
    CertificateArn: str
    DomainName: str


class ACMListTagsForCertificateResponse(TypedDict, total=False):
    Tags: List[ACMTag]


class ACMDomainValidationOption(TypedDict):
    DomainName: str
    ValidationDomain: str


class ACMRequestCertificateResponse(TypedDict, total=False):
    CertificateArn: str


class ACMPCA(BaseClient):
    def create_certificate_authority(self, *,
        CertificateAuthorityConfiguration: ACMPCACertificateAuthorityConfiguration,
        CertificateAuthorityType: str,
        RevocationConfiguration: ACMPCARevocationConfiguration = ...,
        IdempotencyToken: str = ...,
        Tags: List[ACMPCATag] = ...
    ) -> ACMPCACreateCertificateAuthorityResponse: ...

    def create_certificate_authority_audit_report(self, *,
        CertificateAuthorityArn: str,
        S3BucketName: str,
        AuditReportResponseFormat: str
    ) -> ACMPCACreateCertificateAuthorityAuditReportResponse: ...

    def create_permission(self, *,
        CertificateAuthorityArn: str,
        Principal: str,
        Actions: List[str],
        SourceAccount: str = ...
    ): ...

    def delete_certificate_authority(self, *,
        CertificateAuthorityArn: str,
        PermanentDeletionTimeInDays: int = ...
    ): ...

    def delete_permission(self, *,
        CertificateAuthorityArn: str,
        Principal: str,
        SourceAccount: str = ...
    ): ...

    def describe_certificate_authority(self, *,
        CertificateAuthorityArn: str
    ) -> ACMPCADescribeCertificateAuthorityResponse: ...

    def describe_certificate_authority_audit_report(self, *,
        CertificateAuthorityArn: str,
        AuditReportId: str
    ) -> ACMPCADescribeCertificateAuthorityAuditReportResponse: ...

    def get_certificate(self, *,
        CertificateAuthorityArn: str,
        CertificateArn: str
    ) -> ACMPCAGetCertificateResponse: ...

    def get_certificate_authority_certificate(self, *,
        CertificateAuthorityArn: str
    ) -> ACMPCAGetCertificateAuthorityCertificateResponse: ...

    def get_certificate_authority_csr(self, *,
        CertificateAuthorityArn: str
    ) -> ACMPCAGetCertificateAuthorityCsrResponse: ...

    def import_certificate_authority_certificate(self, *,
        CertificateAuthorityArn: str,
        Certificate: bytes,
        CertificateChain: bytes
    ): ...

    def issue_certificate(self, *,
        CertificateAuthorityArn: str,
        Csr: bytes,
        SigningAlgorithm: str,
        Validity: ACMPCAValidity,
        IdempotencyToken: str = ...
    ) -> ACMPCAIssueCertificateResponse: ...

    def list_certificate_authorities(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ACMPCAListCertificateAuthoritiesResponse: ...

    def list_permissions(self, *,
        CertificateAuthorityArn: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ACMPCAListPermissionsResponse: ...

    def list_tags(self, *,
        CertificateAuthorityArn: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ACMPCAListTagsResponse: ...

    def restore_certificate_authority(self, *,
        CertificateAuthorityArn: str
    ): ...

    def revoke_certificate(self, *,
        CertificateAuthorityArn: str,
        CertificateSerial: str,
        RevocationReason: str
    ): ...

    def tag_certificate_authority(self, *,
        CertificateAuthorityArn: str,
        Tags: List[ACMPCATag]
    ): ...

    def untag_certificate_authority(self, *,
        CertificateAuthorityArn: str,
        Tags: List[ACMPCATag]
    ): ...

    def update_certificate_authority(self, *,
        CertificateAuthorityArn: str,
        RevocationConfiguration: ACMPCARevocationConfiguration = ...,
        Status: str = ...
    ): ...


class ACMPCACertificateAuthorityConfiguration(TypedDict):
    KeyAlgorithm: str
    SigningAlgorithm: str
    Subject: ACMPCAASN1Subject


class ACMPCAASN1Subject(TypedDict, total=False):
    Country: str
    Organization: str
    OrganizationalUnit: str
    DistinguishedNameQualifier: str
    State: str
    CommonName: str
    SerialNumber: str
    Locality: str
    Title: str
    Surname: str
    GivenName: str
    Initials: str
    Pseudonym: str
    GenerationQualifier: str


class ACMPCARevocationConfiguration(TypedDict, total=False):
    CrlConfiguration: ACMPCACrlConfiguration


class _ACMPCACrlConfiguration(TypedDict):
    Enabled: bool


class ACMPCACrlConfiguration(_ACMPCACrlConfiguration, total=False):
    ExpirationInDays: int
    CustomCname: str
    S3BucketName: str


class _ACMPCATag(TypedDict):
    Key: str


class ACMPCATag(_ACMPCATag, total=False):
    Value: str


class ACMPCACreateCertificateAuthorityResponse(TypedDict, total=False):
    CertificateAuthorityArn: str


class ACMPCACreateCertificateAuthorityAuditReportResponse(TypedDict, total=False):
    AuditReportId: str
    S3Key: str


class ACMPCADescribeCertificateAuthorityResponse(TypedDict, total=False):
    CertificateAuthority: ACMPCACertificateAuthority


class ACMPCACertificateAuthority(TypedDict, total=False):
    Arn: str
    CreatedAt: datetime.datetime
    LastStateChangeAt: datetime.datetime
    Type: str
    Serial: str
    Status: str
    NotBefore: datetime.datetime
    NotAfter: datetime.datetime
    FailureReason: str
    CertificateAuthorityConfiguration: ACMPCACertificateAuthorityConfiguration
    RevocationConfiguration: ACMPCARevocationConfiguration
    RestorableUntil: datetime.datetime


class ACMPCADescribeCertificateAuthorityAuditReportResponse(TypedDict, total=False):
    AuditReportStatus: str
    S3BucketName: str
    S3Key: str
    CreatedAt: datetime.datetime


class ACMPCAGetCertificateResponse(TypedDict, total=False):
    Certificate: str
    CertificateChain: str


class ACMPCAGetCertificateAuthorityCertificateResponse(TypedDict, total=False):
    Certificate: str
    CertificateChain: str


class ACMPCAGetCertificateAuthorityCsrResponse(TypedDict, total=False):
    Csr: str


class ACMPCAValidity(TypedDict):
    Value: int
    Type: str


class ACMPCAIssueCertificateResponse(TypedDict, total=False):
    CertificateArn: str


class ACMPCAListCertificateAuthoritiesResponse(TypedDict, total=False):
    CertificateAuthorities: List[ACMPCACertificateAuthority]
    NextToken: str


class ACMPCAListPermissionsResponse(TypedDict, total=False):
    Permissions: List[ACMPCAPermission]
    NextToken: str


class ACMPCAPermission(TypedDict, total=False):
    CertificateAuthorityArn: str
    CreatedAt: datetime.datetime
    Principal: str
    SourceAccount: str
    Actions: List[str]
    Policy: str


class ACMPCAListTagsResponse(TypedDict, total=False):
    Tags: List[ACMPCATag]
    NextToken: str


class AlexaForBusiness(BaseClient):
    def approve_skill(self, *,
        SkillId: str
    ) -> AlexaForBusinessApproveSkillResponse: ...

    def associate_contact_with_address_book(self, *,
        ContactArn: str,
        AddressBookArn: str
    ) -> AlexaForBusinessAssociateContactWithAddressBookResponse: ...

    def associate_device_with_room(self, *,
        DeviceArn: str = ...,
        RoomArn: str = ...
    ) -> AlexaForBusinessAssociateDeviceWithRoomResponse: ...

    def associate_skill_group_with_room(self, *,
        SkillGroupArn: str = ...,
        RoomArn: str = ...
    ) -> AlexaForBusinessAssociateSkillGroupWithRoomResponse: ...

    def associate_skill_with_skill_group(self, *,
        SkillId: str,
        SkillGroupArn: str = ...
    ) -> AlexaForBusinessAssociateSkillWithSkillGroupResponse: ...

    def associate_skill_with_users(self, *,
        SkillId: str
    ) -> AlexaForBusinessAssociateSkillWithUsersResponse: ...

    def create_address_book(self, *,
        Name: str,
        Description: str = ...,
        ClientRequestToken: str = ...
    ) -> AlexaForBusinessCreateAddressBookResponse: ...

    def create_business_report_schedule(self, *,
        Format: str,
        ContentRange: AlexaForBusinessBusinessReportContentRange,
        ScheduleName: str = ...,
        S3BucketName: str = ...,
        S3KeyPrefix: str = ...,
        Recurrence: AlexaForBusinessBusinessReportRecurrence = ...,
        ClientRequestToken: str = ...
    ) -> AlexaForBusinessCreateBusinessReportScheduleResponse: ...

    def create_conference_provider(self, *,
        ConferenceProviderName: str,
        ConferenceProviderType: str,
        MeetingSetting: AlexaForBusinessMeetingSetting,
        IPDialIn: AlexaForBusinessIPDialIn = ...,
        PSTNDialIn: AlexaForBusinessPSTNDialIn = ...,
        ClientRequestToken: str = ...
    ) -> AlexaForBusinessCreateConferenceProviderResponse: ...

    def create_contact(self, *,
        FirstName: str,
        DisplayName: str = ...,
        LastName: str = ...,
        PhoneNumber: str = ...,
        ClientRequestToken: str = ...
    ) -> AlexaForBusinessCreateContactResponse: ...

    def create_gateway_group(self, *,
        Name: str,
        ClientRequestToken: str,
        Description: str = ...
    ) -> AlexaForBusinessCreateGatewayGroupResponse: ...

    def create_profile(self, *,
        ProfileName: str,
        Timezone: str,
        Address: str,
        DistanceUnit: str,
        TemperatureUnit: str,
        WakeWord: str,
        ClientRequestToken: str = ...,
        SetupModeDisabled: bool = ...,
        MaxVolumeLimit: int = ...,
        PSTNEnabled: bool = ...
    ) -> AlexaForBusinessCreateProfileResponse: ...

    def create_room(self, *,
        RoomName: str,
        Description: str = ...,
        ProfileArn: str = ...,
        ProviderCalendarId: str = ...,
        ClientRequestToken: str = ...,
        Tags: List[AlexaForBusinessTag] = ...
    ) -> AlexaForBusinessCreateRoomResponse: ...

    def create_skill_group(self, *,
        SkillGroupName: str,
        Description: str = ...,
        ClientRequestToken: str = ...
    ) -> AlexaForBusinessCreateSkillGroupResponse: ...

    def create_user(self, *,
        UserId: str,
        FirstName: str = ...,
        LastName: str = ...,
        Email: str = ...,
        ClientRequestToken: str = ...,
        Tags: List[AlexaForBusinessTag] = ...
    ) -> AlexaForBusinessCreateUserResponse: ...

    def delete_address_book(self, *,
        AddressBookArn: str
    ) -> AlexaForBusinessDeleteAddressBookResponse: ...

    def delete_business_report_schedule(self, *,
        ScheduleArn: str
    ) -> AlexaForBusinessDeleteBusinessReportScheduleResponse: ...

    def delete_conference_provider(self, *,
        ConferenceProviderArn: str
    ) -> AlexaForBusinessDeleteConferenceProviderResponse: ...

    def delete_contact(self, *,
        ContactArn: str
    ) -> AlexaForBusinessDeleteContactResponse: ...

    def delete_device(self, *,
        DeviceArn: str
    ) -> AlexaForBusinessDeleteDeviceResponse: ...

    def delete_device_usage_data(self, *,
        DeviceArn: str,
        DeviceUsageType: str
    ) -> AlexaForBusinessDeleteDeviceUsageDataResponse: ...

    def delete_gateway_group(self, *,
        GatewayGroupArn: str
    ) -> AlexaForBusinessDeleteGatewayGroupResponse: ...

    def delete_profile(self, *,
        ProfileArn: str = ...
    ) -> AlexaForBusinessDeleteProfileResponse: ...

    def delete_room(self, *,
        RoomArn: str = ...
    ) -> AlexaForBusinessDeleteRoomResponse: ...

    def delete_room_skill_parameter(self, *,
        SkillId: str,
        ParameterKey: str,
        RoomArn: str = ...
    ) -> AlexaForBusinessDeleteRoomSkillParameterResponse: ...

    def delete_skill_authorization(self, *,
        SkillId: str,
        RoomArn: str = ...
    ) -> AlexaForBusinessDeleteSkillAuthorizationResponse: ...

    def delete_skill_group(self, *,
        SkillGroupArn: str = ...
    ) -> AlexaForBusinessDeleteSkillGroupResponse: ...

    def delete_user(self, *,
        EnrollmentId: str,
        UserArn: str = ...
    ) -> AlexaForBusinessDeleteUserResponse: ...

    def disassociate_contact_from_address_book(self, *,
        ContactArn: str,
        AddressBookArn: str
    ) -> AlexaForBusinessDisassociateContactFromAddressBookResponse: ...

    def disassociate_device_from_room(self, *,
        DeviceArn: str = ...
    ) -> AlexaForBusinessDisassociateDeviceFromRoomResponse: ...

    def disassociate_skill_from_skill_group(self, *,
        SkillId: str,
        SkillGroupArn: str = ...
    ) -> AlexaForBusinessDisassociateSkillFromSkillGroupResponse: ...

    def disassociate_skill_from_users(self, *,
        SkillId: str
    ) -> AlexaForBusinessDisassociateSkillFromUsersResponse: ...

    def disassociate_skill_group_from_room(self, *,
        SkillGroupArn: str = ...,
        RoomArn: str = ...
    ) -> AlexaForBusinessDisassociateSkillGroupFromRoomResponse: ...

    def forget_smart_home_appliances(self, *,
        RoomArn: str
    ) -> AlexaForBusinessForgetSmartHomeAppliancesResponse: ...

    def get_address_book(self, *,
        AddressBookArn: str
    ) -> AlexaForBusinessGetAddressBookResponse: ...

    def get_conference_preference(self) -> AlexaForBusinessGetConferencePreferenceResponse: ...

    def get_conference_provider(self, *,
        ConferenceProviderArn: str
    ) -> AlexaForBusinessGetConferenceProviderResponse: ...

    def get_contact(self, *,
        ContactArn: str
    ) -> AlexaForBusinessGetContactResponse: ...

    def get_device(self, *,
        DeviceArn: str = ...
    ) -> AlexaForBusinessGetDeviceResponse: ...

    def get_gateway(self, *,
        GatewayArn: str
    ) -> AlexaForBusinessGetGatewayResponse: ...

    def get_gateway_group(self, *,
        GatewayGroupArn: str
    ) -> AlexaForBusinessGetGatewayGroupResponse: ...

    def get_invitation_configuration(self) -> AlexaForBusinessGetInvitationConfigurationResponse: ...

    def get_profile(self, *,
        ProfileArn: str = ...
    ) -> AlexaForBusinessGetProfileResponse: ...

    def get_room(self, *,
        RoomArn: str = ...
    ) -> AlexaForBusinessGetRoomResponse: ...

    def get_room_skill_parameter(self, *,
        SkillId: str,
        ParameterKey: str,
        RoomArn: str = ...
    ) -> AlexaForBusinessGetRoomSkillParameterResponse: ...

    def get_skill_group(self, *,
        SkillGroupArn: str = ...
    ) -> AlexaForBusinessGetSkillGroupResponse: ...

    def list_business_report_schedules(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AlexaForBusinessListBusinessReportSchedulesResponse: ...

    def list_conference_providers(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AlexaForBusinessListConferenceProvidersResponse: ...

    def list_device_events(self, *,
        DeviceArn: str,
        EventType: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AlexaForBusinessListDeviceEventsResponse: ...

    def list_gateway_groups(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AlexaForBusinessListGatewayGroupsResponse: ...

    def list_gateways(self, *,
        GatewayGroupArn: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AlexaForBusinessListGatewaysResponse: ...

    def list_skills(self, *,
        SkillGroupArn: str = ...,
        EnablementType: str = ...,
        SkillType: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AlexaForBusinessListSkillsResponse: ...

    def list_skills_store_categories(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AlexaForBusinessListSkillsStoreCategoriesResponse: ...

    def list_skills_store_skills_by_category(self, *,
        CategoryId: int,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AlexaForBusinessListSkillsStoreSkillsByCategoryResponse: ...

    def list_smart_home_appliances(self, *,
        RoomArn: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> AlexaForBusinessListSmartHomeAppliancesResponse: ...

    def list_tags(self, *,
        Arn: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AlexaForBusinessListTagsResponse: ...

    def put_conference_preference(self, *,
        ConferencePreference: AlexaForBusinessConferencePreference
    ) -> AlexaForBusinessPutConferencePreferenceResponse: ...

    def put_invitation_configuration(self, *,
        OrganizationName: str,
        ContactEmail: str = ...,
        PrivateSkillIds: List[str] = ...
    ) -> AlexaForBusinessPutInvitationConfigurationResponse: ...

    def put_room_skill_parameter(self, *,
        SkillId: str,
        RoomSkillParameter: AlexaForBusinessRoomSkillParameter,
        RoomArn: str = ...
    ) -> AlexaForBusinessPutRoomSkillParameterResponse: ...

    def put_skill_authorization(self, *,
        AuthorizationResult: Dict[str, str],
        SkillId: str,
        RoomArn: str = ...
    ) -> AlexaForBusinessPutSkillAuthorizationResponse: ...

    def register_avs_device(self, *,
        ClientId: str,
        UserCode: str,
        ProductId: str,
        DeviceSerialNumber: str,
        AmazonId: str
    ) -> AlexaForBusinessRegisterAVSDeviceResponse: ...

    def reject_skill(self, *,
        SkillId: str
    ) -> AlexaForBusinessRejectSkillResponse: ...

    def resolve_room(self, *,
        UserId: str,
        SkillId: str
    ) -> AlexaForBusinessResolveRoomResponse: ...

    def revoke_invitation(self, *,
        UserArn: str = ...,
        EnrollmentId: str = ...
    ) -> AlexaForBusinessRevokeInvitationResponse: ...

    def search_address_books(self, *,
        Filters: List[AlexaForBusinessFilter] = ...,
        SortCriteria: List[AlexaForBusinessSort] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AlexaForBusinessSearchAddressBooksResponse: ...

    def search_contacts(self, *,
        Filters: List[AlexaForBusinessFilter] = ...,
        SortCriteria: List[AlexaForBusinessSort] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AlexaForBusinessSearchContactsResponse: ...

    def search_devices(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        Filters: List[AlexaForBusinessFilter] = ...,
        SortCriteria: List[AlexaForBusinessSort] = ...
    ) -> AlexaForBusinessSearchDevicesResponse: ...

    def search_profiles(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        Filters: List[AlexaForBusinessFilter] = ...,
        SortCriteria: List[AlexaForBusinessSort] = ...
    ) -> AlexaForBusinessSearchProfilesResponse: ...

    def search_rooms(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        Filters: List[AlexaForBusinessFilter] = ...,
        SortCriteria: List[AlexaForBusinessSort] = ...
    ) -> AlexaForBusinessSearchRoomsResponse: ...

    def search_skill_groups(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        Filters: List[AlexaForBusinessFilter] = ...,
        SortCriteria: List[AlexaForBusinessSort] = ...
    ) -> AlexaForBusinessSearchSkillGroupsResponse: ...

    def search_users(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        Filters: List[AlexaForBusinessFilter] = ...,
        SortCriteria: List[AlexaForBusinessSort] = ...
    ) -> AlexaForBusinessSearchUsersResponse: ...

    def send_announcement(self, *,
        RoomFilters: List[AlexaForBusinessFilter],
        Content: AlexaForBusinessContent,
        ClientRequestToken: str,
        TimeToLiveInSeconds: int = ...
    ) -> AlexaForBusinessSendAnnouncementResponse: ...

    def send_invitation(self, *,
        UserArn: str = ...
    ) -> AlexaForBusinessSendInvitationResponse: ...

    def start_device_sync(self, *,
        Features: List[str],
        RoomArn: str = ...,
        DeviceArn: str = ...
    ) -> AlexaForBusinessStartDeviceSyncResponse: ...

    def start_smart_home_appliance_discovery(self, *,
        RoomArn: str
    ) -> AlexaForBusinessStartSmartHomeApplianceDiscoveryResponse: ...

    def tag_resource(self, *,
        Arn: str,
        Tags: List[AlexaForBusinessTag]
    ) -> AlexaForBusinessTagResourceResponse: ...

    def untag_resource(self, *,
        Arn: str,
        TagKeys: List[str]
    ) -> AlexaForBusinessUntagResourceResponse: ...

    def update_address_book(self, *,
        AddressBookArn: str,
        Name: str = ...,
        Description: str = ...
    ) -> AlexaForBusinessUpdateAddressBookResponse: ...

    def update_business_report_schedule(self, *,
        ScheduleArn: str,
        S3BucketName: str = ...,
        S3KeyPrefix: str = ...,
        Format: str = ...,
        ScheduleName: str = ...,
        Recurrence: AlexaForBusinessBusinessReportRecurrence = ...
    ) -> AlexaForBusinessUpdateBusinessReportScheduleResponse: ...

    def update_conference_provider(self, *,
        ConferenceProviderArn: str,
        ConferenceProviderType: str,
        MeetingSetting: AlexaForBusinessMeetingSetting,
        IPDialIn: AlexaForBusinessIPDialIn = ...,
        PSTNDialIn: AlexaForBusinessPSTNDialIn = ...
    ) -> AlexaForBusinessUpdateConferenceProviderResponse: ...

    def update_contact(self, *,
        ContactArn: str,
        DisplayName: str = ...,
        FirstName: str = ...,
        LastName: str = ...,
        PhoneNumber: str = ...
    ) -> AlexaForBusinessUpdateContactResponse: ...

    def update_device(self, *,
        DeviceArn: str = ...,
        DeviceName: str = ...
    ) -> AlexaForBusinessUpdateDeviceResponse: ...

    def update_gateway(self, *,
        GatewayArn: str,
        Name: str = ...,
        Description: str = ...,
        SoftwareVersion: str = ...
    ) -> AlexaForBusinessUpdateGatewayResponse: ...

    def update_gateway_group(self, *,
        GatewayGroupArn: str,
        Name: str = ...,
        Description: str = ...
    ) -> AlexaForBusinessUpdateGatewayGroupResponse: ...

    def update_profile(self, *,
        ProfileArn: str = ...,
        ProfileName: str = ...,
        IsDefault: bool = ...,
        Timezone: str = ...,
        Address: str = ...,
        DistanceUnit: str = ...,
        TemperatureUnit: str = ...,
        WakeWord: str = ...,
        SetupModeDisabled: bool = ...,
        MaxVolumeLimit: int = ...,
        PSTNEnabled: bool = ...
    ) -> AlexaForBusinessUpdateProfileResponse: ...

    def update_room(self, *,
        RoomArn: str = ...,
        RoomName: str = ...,
        Description: str = ...,
        ProviderCalendarId: str = ...,
        ProfileArn: str = ...
    ) -> AlexaForBusinessUpdateRoomResponse: ...

    def update_skill_group(self, *,
        SkillGroupArn: str = ...,
        SkillGroupName: str = ...,
        Description: str = ...
    ) -> AlexaForBusinessUpdateSkillGroupResponse: ...


class AlexaForBusinessApproveSkillResponse(TypedDict, total=False):
    pass


class AlexaForBusinessAssociateContactWithAddressBookResponse(TypedDict, total=False):
    pass


class AlexaForBusinessAssociateDeviceWithRoomResponse(TypedDict, total=False):
    pass


class AlexaForBusinessAssociateSkillGroupWithRoomResponse(TypedDict, total=False):
    pass


class AlexaForBusinessAssociateSkillWithSkillGroupResponse(TypedDict, total=False):
    pass


class AlexaForBusinessAssociateSkillWithUsersResponse(TypedDict, total=False):
    pass


class AlexaForBusinessCreateAddressBookResponse(TypedDict, total=False):
    AddressBookArn: str


class AlexaForBusinessBusinessReportContentRange(TypedDict, total=False):
    Interval: str


class AlexaForBusinessBusinessReportRecurrence(TypedDict, total=False):
    StartDate: str


class AlexaForBusinessCreateBusinessReportScheduleResponse(TypedDict, total=False):
    ScheduleArn: str


class AlexaForBusinessIPDialIn(TypedDict):
    Endpoint: str
    CommsProtocol: str


class AlexaForBusinessPSTNDialIn(TypedDict):
    CountryCode: str
    PhoneNumber: str
    OneClickIdDelay: str
    OneClickPinDelay: str


class AlexaForBusinessMeetingSetting(TypedDict):
    RequirePin: str


class AlexaForBusinessCreateConferenceProviderResponse(TypedDict, total=False):
    ConferenceProviderArn: str


class AlexaForBusinessCreateContactResponse(TypedDict, total=False):
    ContactArn: str


class AlexaForBusinessCreateGatewayGroupResponse(TypedDict, total=False):
    GatewayGroupArn: str


class AlexaForBusinessCreateProfileResponse(TypedDict, total=False):
    ProfileArn: str


class AlexaForBusinessTag(TypedDict):
    Key: str
    Value: str


class AlexaForBusinessCreateRoomResponse(TypedDict, total=False):
    RoomArn: str


class AlexaForBusinessCreateSkillGroupResponse(TypedDict, total=False):
    SkillGroupArn: str


class AlexaForBusinessCreateUserResponse(TypedDict, total=False):
    UserArn: str


class AlexaForBusinessDeleteAddressBookResponse(TypedDict, total=False):
    pass


class AlexaForBusinessDeleteBusinessReportScheduleResponse(TypedDict, total=False):
    pass


class AlexaForBusinessDeleteConferenceProviderResponse(TypedDict, total=False):
    pass


class AlexaForBusinessDeleteContactResponse(TypedDict, total=False):
    pass


class AlexaForBusinessDeleteDeviceResponse(TypedDict, total=False):
    pass


class AlexaForBusinessDeleteDeviceUsageDataResponse(TypedDict, total=False):
    pass


class AlexaForBusinessDeleteGatewayGroupResponse(TypedDict, total=False):
    pass


class AlexaForBusinessDeleteProfileResponse(TypedDict, total=False):
    pass


class AlexaForBusinessDeleteRoomResponse(TypedDict, total=False):
    pass


class AlexaForBusinessDeleteRoomSkillParameterResponse(TypedDict, total=False):
    pass


class AlexaForBusinessDeleteSkillAuthorizationResponse(TypedDict, total=False):
    pass


class AlexaForBusinessDeleteSkillGroupResponse(TypedDict, total=False):
    pass


class AlexaForBusinessDeleteUserResponse(TypedDict, total=False):
    pass


class AlexaForBusinessDisassociateContactFromAddressBookResponse(TypedDict, total=False):
    pass


class AlexaForBusinessDisassociateDeviceFromRoomResponse(TypedDict, total=False):
    pass


class AlexaForBusinessDisassociateSkillFromSkillGroupResponse(TypedDict, total=False):
    pass


class AlexaForBusinessDisassociateSkillFromUsersResponse(TypedDict, total=False):
    pass


class AlexaForBusinessDisassociateSkillGroupFromRoomResponse(TypedDict, total=False):
    pass


class AlexaForBusinessForgetSmartHomeAppliancesResponse(TypedDict, total=False):
    pass


class AlexaForBusinessGetAddressBookResponse(TypedDict, total=False):
    AddressBook: AlexaForBusinessAddressBook


class AlexaForBusinessAddressBook(TypedDict, total=False):
    AddressBookArn: str
    Name: str
    Description: str


class AlexaForBusinessGetConferencePreferenceResponse(TypedDict, total=False):
    Preference: AlexaForBusinessConferencePreference


class AlexaForBusinessConferencePreference(TypedDict, total=False):
    DefaultConferenceProviderArn: str


class AlexaForBusinessGetConferenceProviderResponse(TypedDict, total=False):
    ConferenceProvider: AlexaForBusinessConferenceProvider


class AlexaForBusinessConferenceProvider(TypedDict, total=False):
    Arn: str
    Name: str
    Type: str
    IPDialIn: AlexaForBusinessIPDialIn
    PSTNDialIn: AlexaForBusinessPSTNDialIn
    MeetingSetting: AlexaForBusinessMeetingSetting


class AlexaForBusinessGetContactResponse(TypedDict, total=False):
    Contact: AlexaForBusinessContact


class AlexaForBusinessContact(TypedDict, total=False):
    ContactArn: str
    DisplayName: str
    FirstName: str
    LastName: str
    PhoneNumber: str


class AlexaForBusinessGetDeviceResponse(TypedDict, total=False):
    Device: AlexaForBusinessDevice


class AlexaForBusinessDevice(TypedDict, total=False):
    DeviceArn: str
    DeviceSerialNumber: str
    DeviceType: str
    DeviceName: str
    SoftwareVersion: str
    MacAddress: str
    RoomArn: str
    DeviceStatus: str
    DeviceStatusInfo: AlexaForBusinessDeviceStatusInfo


class AlexaForBusinessDeviceStatusInfo(TypedDict, total=False):
    DeviceStatusDetails: List[AlexaForBusinessDeviceStatusDetail]
    ConnectionStatus: str


class AlexaForBusinessDeviceStatusDetail(TypedDict, total=False):
    Code: str


class AlexaForBusinessGetGatewayResponse(TypedDict, total=False):
    Gateway: AlexaForBusinessGateway


class AlexaForBusinessGateway(TypedDict, total=False):
    Arn: str
    Name: str
    Description: str
    GatewayGroupArn: str
    SoftwareVersion: str


class AlexaForBusinessGetGatewayGroupResponse(TypedDict, total=False):
    GatewayGroup: AlexaForBusinessGatewayGroup


class AlexaForBusinessGatewayGroup(TypedDict, total=False):
    Arn: str
    Name: str
    Description: str


class AlexaForBusinessGetInvitationConfigurationResponse(TypedDict, total=False):
    OrganizationName: str
    ContactEmail: str
    PrivateSkillIds: List[str]


class AlexaForBusinessGetProfileResponse(TypedDict, total=False):
    Profile: AlexaForBusinessProfile


class AlexaForBusinessProfile(TypedDict, total=False):
    ProfileArn: str
    ProfileName: str
    IsDefault: bool
    Address: str
    Timezone: str
    DistanceUnit: str
    TemperatureUnit: str
    WakeWord: str
    SetupModeDisabled: bool
    MaxVolumeLimit: int
    PSTNEnabled: bool
    AddressBookArn: str


class AlexaForBusinessGetRoomResponse(TypedDict, total=False):
    Room: AlexaForBusinessRoom


class AlexaForBusinessRoom(TypedDict, total=False):
    RoomArn: str
    RoomName: str
    Description: str
    ProviderCalendarId: str
    ProfileArn: str


class AlexaForBusinessGetRoomSkillParameterResponse(TypedDict, total=False):
    RoomSkillParameter: AlexaForBusinessRoomSkillParameter


class AlexaForBusinessRoomSkillParameter(TypedDict):
    ParameterKey: str
    ParameterValue: str


class AlexaForBusinessGetSkillGroupResponse(TypedDict, total=False):
    SkillGroup: AlexaForBusinessSkillGroup


class AlexaForBusinessSkillGroup(TypedDict, total=False):
    SkillGroupArn: str
    SkillGroupName: str
    Description: str


class AlexaForBusinessListBusinessReportSchedulesResponse(TypedDict, total=False):
    BusinessReportSchedules: List[AlexaForBusinessBusinessReportSchedule]
    NextToken: str


class AlexaForBusinessBusinessReportSchedule(TypedDict, total=False):
    ScheduleArn: str
    ScheduleName: str
    S3BucketName: str
    S3KeyPrefix: str
    Format: str
    ContentRange: AlexaForBusinessBusinessReportContentRange
    Recurrence: AlexaForBusinessBusinessReportRecurrence
    LastBusinessReport: AlexaForBusinessBusinessReport


class AlexaForBusinessBusinessReport(TypedDict, total=False):
    Status: str
    FailureCode: str
    S3Location: AlexaForBusinessBusinessReportS3Location
    DeliveryTime: datetime.datetime
    DownloadUrl: str


class AlexaForBusinessBusinessReportS3Location(TypedDict, total=False):
    Path: str
    BucketName: str


class AlexaForBusinessListConferenceProvidersResponse(TypedDict, total=False):
    ConferenceProviders: List[AlexaForBusinessConferenceProvider]
    NextToken: str


class AlexaForBusinessListDeviceEventsResponse(TypedDict, total=False):
    DeviceEvents: List[AlexaForBusinessDeviceEvent]
    NextToken: str


class AlexaForBusinessDeviceEvent(TypedDict, total=False):
    Type: str
    Value: str
    Timestamp: datetime.datetime


class AlexaForBusinessListGatewayGroupsResponse(TypedDict, total=False):
    GatewayGroups: List[AlexaForBusinessGatewayGroupSummary]
    NextToken: str


class AlexaForBusinessGatewayGroupSummary(TypedDict, total=False):
    Arn: str
    Name: str
    Description: str


class AlexaForBusinessListGatewaysResponse(TypedDict, total=False):
    Gateways: List[AlexaForBusinessGatewaySummary]
    NextToken: str


class AlexaForBusinessGatewaySummary(TypedDict, total=False):
    Arn: str
    Name: str
    Description: str
    GatewayGroupArn: str
    SoftwareVersion: str


class AlexaForBusinessListSkillsResponse(TypedDict, total=False):
    SkillSummaries: List[AlexaForBusinessSkillSummary]
    NextToken: str


class AlexaForBusinessSkillSummary(TypedDict, total=False):
    SkillId: str
    SkillName: str
    SupportsLinking: bool
    EnablementType: str
    SkillType: str


class AlexaForBusinessListSkillsStoreCategoriesResponse(TypedDict, total=False):
    CategoryList: List[AlexaForBusinessCategory]
    NextToken: str


class AlexaForBusinessCategory(TypedDict, total=False):
    CategoryId: int
    CategoryName: str


class AlexaForBusinessListSkillsStoreSkillsByCategoryResponse(TypedDict, total=False):
    SkillsStoreSkills: List[AlexaForBusinessSkillsStoreSkill]
    NextToken: str


class AlexaForBusinessSkillsStoreSkill(TypedDict, total=False):
    SkillId: str
    SkillName: str
    ShortDescription: str
    IconUrl: str
    SampleUtterances: List[str]
    SkillDetails: AlexaForBusinessSkillDetails
    SupportsLinking: bool


class AlexaForBusinessSkillDetails(TypedDict, total=False):
    ProductDescription: str
    InvocationPhrase: str
    ReleaseDate: str
    EndUserLicenseAgreement: str
    GenericKeywords: List[str]
    BulletPoints: List[str]
    NewInThisVersionBulletPoints: List[str]
    SkillTypes: List[str]
    Reviews: Dict[str, str]
    DeveloperInfo: AlexaForBusinessDeveloperInfo


class AlexaForBusinessDeveloperInfo(TypedDict, total=False):
    DeveloperName: str
    PrivacyPolicy: str
    Email: str
    Url: str


class AlexaForBusinessListSmartHomeAppliancesResponse(TypedDict, total=False):
    SmartHomeAppliances: List[AlexaForBusinessSmartHomeAppliance]
    NextToken: str


class AlexaForBusinessSmartHomeAppliance(TypedDict, total=False):
    FriendlyName: str
    Description: str
    ManufacturerName: str


class AlexaForBusinessListTagsResponse(TypedDict, total=False):
    Tags: List[AlexaForBusinessTag]
    NextToken: str


class AlexaForBusinessPutConferencePreferenceResponse(TypedDict, total=False):
    pass


class AlexaForBusinessPutInvitationConfigurationResponse(TypedDict, total=False):
    pass


class AlexaForBusinessPutRoomSkillParameterResponse(TypedDict, total=False):
    pass


class AlexaForBusinessPutSkillAuthorizationResponse(TypedDict, total=False):
    pass


class AlexaForBusinessRegisterAVSDeviceResponse(TypedDict, total=False):
    DeviceArn: str


class AlexaForBusinessRejectSkillResponse(TypedDict, total=False):
    pass


class AlexaForBusinessResolveRoomResponse(TypedDict, total=False):
    RoomArn: str
    RoomName: str
    RoomSkillParameters: List[AlexaForBusinessRoomSkillParameter]


class AlexaForBusinessRevokeInvitationResponse(TypedDict, total=False):
    pass


class AlexaForBusinessFilter(TypedDict):
    Key: str
    Values: List[str]


class AlexaForBusinessSort(TypedDict):
    Key: str
    Value: str


class AlexaForBusinessSearchAddressBooksResponse(TypedDict, total=False):
    AddressBooks: List[AlexaForBusinessAddressBookData]
    NextToken: str
    TotalCount: int


class AlexaForBusinessAddressBookData(TypedDict, total=False):
    AddressBookArn: str
    Name: str
    Description: str


class AlexaForBusinessSearchContactsResponse(TypedDict, total=False):
    Contacts: List[AlexaForBusinessContactData]
    NextToken: str
    TotalCount: int


class AlexaForBusinessContactData(TypedDict, total=False):
    ContactArn: str
    DisplayName: str
    FirstName: str
    LastName: str
    PhoneNumber: str


class AlexaForBusinessSearchDevicesResponse(TypedDict, total=False):
    Devices: List[AlexaForBusinessDeviceData]
    NextToken: str
    TotalCount: int


class AlexaForBusinessDeviceData(TypedDict, total=False):
    DeviceArn: str
    DeviceSerialNumber: str
    DeviceType: str
    DeviceName: str
    SoftwareVersion: str
    MacAddress: str
    DeviceStatus: str
    RoomArn: str
    RoomName: str
    DeviceStatusInfo: AlexaForBusinessDeviceStatusInfo


class AlexaForBusinessSearchProfilesResponse(TypedDict, total=False):
    Profiles: List[AlexaForBusinessProfileData]
    NextToken: str
    TotalCount: int


class AlexaForBusinessProfileData(TypedDict, total=False):
    ProfileArn: str
    ProfileName: str
    IsDefault: bool
    Address: str
    Timezone: str
    DistanceUnit: str
    TemperatureUnit: str
    WakeWord: str


class AlexaForBusinessSearchRoomsResponse(TypedDict, total=False):
    Rooms: List[AlexaForBusinessRoomData]
    NextToken: str
    TotalCount: int


class AlexaForBusinessRoomData(TypedDict, total=False):
    RoomArn: str
    RoomName: str
    Description: str
    ProviderCalendarId: str
    ProfileArn: str
    ProfileName: str


class AlexaForBusinessSearchSkillGroupsResponse(TypedDict, total=False):
    SkillGroups: List[AlexaForBusinessSkillGroupData]
    NextToken: str
    TotalCount: int


class AlexaForBusinessSkillGroupData(TypedDict, total=False):
    SkillGroupArn: str
    SkillGroupName: str
    Description: str


class AlexaForBusinessSearchUsersResponse(TypedDict, total=False):
    Users: List[AlexaForBusinessUserData]
    NextToken: str
    TotalCount: int


class AlexaForBusinessUserData(TypedDict, total=False):
    UserArn: str
    FirstName: str
    LastName: str
    Email: str
    EnrollmentStatus: str
    EnrollmentId: str


class AlexaForBusinessContent(TypedDict, total=False):
    TextList: List[AlexaForBusinessText]
    SsmlList: List[AlexaForBusinessSsml]
    AudioList: List[AlexaForBusinessAudio]


class AlexaForBusinessText(TypedDict):
    Locale: str
    Value: str


class AlexaForBusinessSsml(TypedDict):
    Locale: str
    Value: str


class AlexaForBusinessAudio(TypedDict):
    Locale: str
    Location: str


class AlexaForBusinessSendAnnouncementResponse(TypedDict, total=False):
    AnnouncementArn: str


class AlexaForBusinessSendInvitationResponse(TypedDict, total=False):
    pass


class AlexaForBusinessStartDeviceSyncResponse(TypedDict, total=False):
    pass


class AlexaForBusinessStartSmartHomeApplianceDiscoveryResponse(TypedDict, total=False):
    pass


class AlexaForBusinessTagResourceResponse(TypedDict, total=False):
    pass


class AlexaForBusinessUntagResourceResponse(TypedDict, total=False):
    pass


class AlexaForBusinessUpdateAddressBookResponse(TypedDict, total=False):
    pass


class AlexaForBusinessUpdateBusinessReportScheduleResponse(TypedDict, total=False):
    pass


class AlexaForBusinessUpdateConferenceProviderResponse(TypedDict, total=False):
    pass


class AlexaForBusinessUpdateContactResponse(TypedDict, total=False):
    pass


class AlexaForBusinessUpdateDeviceResponse(TypedDict, total=False):
    pass


class AlexaForBusinessUpdateGatewayResponse(TypedDict, total=False):
    pass


class AlexaForBusinessUpdateGatewayGroupResponse(TypedDict, total=False):
    pass


class AlexaForBusinessUpdateProfileResponse(TypedDict, total=False):
    pass


class AlexaForBusinessUpdateRoomResponse(TypedDict, total=False):
    pass


class AlexaForBusinessUpdateSkillGroupResponse(TypedDict, total=False):
    pass


class Amplify(BaseClient):
    def create_app(self, *,
        name: str,
        repository: str,
        platform: str,
        oauthToken: str,
        description: str = ...,
        iamServiceRoleArn: str = ...,
        environmentVariables: Dict[str, str] = ...,
        enableBranchAutoBuild: bool = ...,
        enableBasicAuth: bool = ...,
        basicAuthCredentials: str = ...,
        customRules: List[AmplifyCustomRule] = ...,
        tags: Dict[str, str] = ...,
        buildSpec: str = ...
    ) -> AmplifyCreateAppResult: ...

    def create_branch(self, *,
        appId: str,
        branchName: str,
        description: str = ...,
        stage: str = ...,
        framework: str = ...,
        enableNotification: bool = ...,
        enableAutoBuild: bool = ...,
        environmentVariables: Dict[str, str] = ...,
        basicAuthCredentials: str = ...,
        enableBasicAuth: bool = ...,
        tags: Dict[str, str] = ...,
        buildSpec: str = ...,
        ttl: str = ...
    ) -> AmplifyCreateBranchResult: ...

    def create_domain_association(self, *,
        appId: str,
        domainName: str,
        subDomainSettings: List[AmplifySubDomainSetting],
        enableAutoSubDomain: bool = ...
    ) -> AmplifyCreateDomainAssociationResult: ...

    def delete_app(self, *,
        appId: str
    ) -> AmplifyDeleteAppResult: ...

    def delete_branch(self, *,
        appId: str,
        branchName: str
    ) -> AmplifyDeleteBranchResult: ...

    def delete_domain_association(self, *,
        appId: str,
        domainName: str
    ) -> AmplifyDeleteDomainAssociationResult: ...

    def delete_job(self, *,
        appId: str,
        branchName: str,
        jobId: str
    ) -> AmplifyDeleteJobResult: ...

    def get_app(self, *,
        appId: str
    ) -> AmplifyGetAppResult: ...

    def get_branch(self, *,
        appId: str,
        branchName: str
    ) -> AmplifyGetBranchResult: ...

    def get_domain_association(self, *,
        appId: str,
        domainName: str
    ) -> AmplifyGetDomainAssociationResult: ...

    def get_job(self, *,
        appId: str,
        branchName: str,
        jobId: str
    ) -> AmplifyGetJobResult: ...

    def list_apps(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> AmplifyListAppsResult: ...

    def list_branches(self, *,
        appId: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> AmplifyListBranchesResult: ...

    def list_domain_associations(self, *,
        appId: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> AmplifyListDomainAssociationsResult: ...

    def list_jobs(self, *,
        appId: str,
        branchName: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> AmplifyListJobsResult: ...

    def start_job(self, *,
        appId: str,
        branchName: str,
        jobType: str,
        jobId: str = ...,
        jobReason: str = ...,
        commitId: str = ...,
        commitMessage: str = ...,
        commitTime: datetime.datetime = ...
    ) -> AmplifyStartJobResult: ...

    def stop_job(self, *,
        appId: str,
        branchName: str,
        jobId: str
    ) -> AmplifyStopJobResult: ...

    def update_app(self, *,
        appId: str,
        name: str = ...,
        description: str = ...,
        platform: str = ...,
        iamServiceRoleArn: str = ...,
        environmentVariables: Dict[str, str] = ...,
        enableBranchAutoBuild: bool = ...,
        enableBasicAuth: bool = ...,
        basicAuthCredentials: str = ...,
        customRules: List[AmplifyCustomRule] = ...,
        buildSpec: str = ...
    ) -> AmplifyUpdateAppResult: ...

    def update_branch(self, *,
        appId: str,
        branchName: str,
        description: str = ...,
        framework: str = ...,
        stage: str = ...,
        enableNotification: bool = ...,
        enableAutoBuild: bool = ...,
        environmentVariables: Dict[str, str] = ...,
        basicAuthCredentials: str = ...,
        enableBasicAuth: bool = ...,
        buildSpec: str = ...,
        ttl: str = ...
    ) -> AmplifyUpdateBranchResult: ...

    def update_domain_association(self, *,
        appId: str,
        domainName: str,
        subDomainSettings: List[AmplifySubDomainSetting],
        enableAutoSubDomain: bool = ...
    ) -> AmplifyUpdateDomainAssociationResult: ...


class _AmplifyCustomRule(TypedDict):
    source: str
    target: str


class AmplifyCustomRule(_AmplifyCustomRule, total=False):
    status: str
    condition: str


class AmplifyCreateAppResult(TypedDict):
    app: AmplifyApp


class _AmplifyApp(TypedDict):
    appId: str
    appArn: str
    name: str
    description: str
    repository: str
    platform: str
    createTime: datetime.datetime
    updateTime: datetime.datetime
    environmentVariables: Dict[str, str]
    defaultDomain: str
    enableBranchAutoBuild: bool
    enableBasicAuth: bool


class AmplifyApp(_AmplifyApp, total=False):
    tags: Dict[str, str]
    iamServiceRoleArn: str
    basicAuthCredentials: str
    customRules: List[AmplifyCustomRule]
    productionBranch: AmplifyProductionBranch
    buildSpec: str


class AmplifyProductionBranch(TypedDict, total=False):
    lastDeployTime: datetime.datetime
    status: str
    thumbnailUrl: str
    branchName: str


class AmplifyCreateBranchResult(TypedDict):
    branch: AmplifyBranch


class _AmplifyBranch(TypedDict):
    branchArn: str
    branchName: str
    description: str
    stage: str
    enableNotification: bool
    createTime: datetime.datetime
    updateTime: datetime.datetime
    environmentVariables: Dict[str, str]
    enableAutoBuild: bool
    customDomains: List[str]
    framework: str
    activeJobId: str
    totalNumberOfJobs: str
    enableBasicAuth: bool
    ttl: str


class AmplifyBranch(_AmplifyBranch, total=False):
    tags: Dict[str, str]
    displayName: str
    thumbnailUrl: str
    basicAuthCredentials: str
    buildSpec: str


class AmplifySubDomainSetting(TypedDict):
    prefix: str
    branchName: str


class AmplifyCreateDomainAssociationResult(TypedDict):
    domainAssociation: AmplifyDomainAssociation


class AmplifyDomainAssociation(TypedDict):
    domainAssociationArn: str
    domainName: str
    enableAutoSubDomain: bool
    domainStatus: str
    statusReason: str
    certificateVerificationDNSRecord: str
    subDomains: List[AmplifySubDomain]


class AmplifySubDomain(TypedDict):
    subDomainSetting: AmplifySubDomainSetting
    verified: bool
    dnsRecord: str


class AmplifyDeleteAppResult(TypedDict):
    app: AmplifyApp


class AmplifyDeleteBranchResult(TypedDict):
    branch: AmplifyBranch


class AmplifyDeleteDomainAssociationResult(TypedDict):
    domainAssociation: AmplifyDomainAssociation


class AmplifyDeleteJobResult(TypedDict):
    jobSummary: AmplifyJobSummary


class _AmplifyJobSummary(TypedDict):
    jobArn: str
    jobId: str
    commitId: str
    commitMessage: str
    commitTime: datetime.datetime
    startTime: datetime.datetime
    status: str
    jobType: str


class AmplifyJobSummary(_AmplifyJobSummary, total=False):
    endTime: datetime.datetime


class AmplifyGetAppResult(TypedDict):
    app: AmplifyApp


class AmplifyGetBranchResult(TypedDict):
    branch: AmplifyBranch


class AmplifyGetDomainAssociationResult(TypedDict):
    domainAssociation: AmplifyDomainAssociation


class AmplifyGetJobResult(TypedDict):
    job: AmplifyJob


class AmplifyJob(TypedDict):
    summary: AmplifyJobSummary
    steps: List[AmplifyStep]


class _AmplifyStep(TypedDict):
    stepName: str
    startTime: datetime.datetime
    status: str
    endTime: datetime.datetime


class AmplifyStep(_AmplifyStep, total=False):
    logUrl: str
    artifactsUrl: str
    screenshots: Dict[str, str]


class _AmplifyListAppsResult(TypedDict):
    apps: List[AmplifyApp]


class AmplifyListAppsResult(_AmplifyListAppsResult, total=False):
    nextToken: str


class _AmplifyListBranchesResult(TypedDict):
    branches: List[AmplifyBranch]


class AmplifyListBranchesResult(_AmplifyListBranchesResult, total=False):
    nextToken: str


class _AmplifyListDomainAssociationsResult(TypedDict):
    domainAssociations: List[AmplifyDomainAssociation]


class AmplifyListDomainAssociationsResult(_AmplifyListDomainAssociationsResult, total=False):
    nextToken: str


class _AmplifyListJobsResult(TypedDict):
    jobSummaries: List[AmplifyJobSummary]


class AmplifyListJobsResult(_AmplifyListJobsResult, total=False):
    nextToken: str


class AmplifyStartJobResult(TypedDict):
    jobSummary: AmplifyJobSummary


class AmplifyStopJobResult(TypedDict):
    jobSummary: AmplifyJobSummary


class AmplifyUpdateAppResult(TypedDict):
    app: AmplifyApp


class AmplifyUpdateBranchResult(TypedDict):
    branch: AmplifyBranch


class AmplifyUpdateDomainAssociationResult(TypedDict):
    domainAssociation: AmplifyDomainAssociation


class ApiGatewayManagementApi(BaseClient):
    def post_to_connection(self, *,
        Data: bytes,
        ConnectionId: str
    ): ...


class ApiGatewayV2(BaseClient):
    def create_api(self, *,
        Name: str,
        ProtocolType: str,
        RouteSelectionExpression: str,
        ApiKeySelectionExpression: str = ...,
        Description: str = ...,
        DisableSchemaValidation: bool = ...,
        Version: str = ...
    ) -> ApiGatewayV2CreateApiResponse: ...

    def create_api_mapping(self, *,
        ApiId: str,
        DomainName: str,
        Stage: str,
        ApiMappingKey: str = ...
    ) -> ApiGatewayV2CreateApiMappingResponse: ...

    def create_authorizer(self, *,
        ApiId: str,
        Name: str,
        AuthorizerCredentialsArn: str = ...,
        AuthorizerResultTtlInSeconds: int = ...,
        AuthorizerType: str = ...,
        AuthorizerUri: str = ...,
        IdentitySource: List[str] = ...,
        IdentityValidationExpression: str = ...,
        ProviderArns: List[str] = ...
    ) -> ApiGatewayV2CreateAuthorizerResponse: ...

    def create_deployment(self, *,
        ApiId: str,
        Description: str = ...,
        StageName: str = ...
    ) -> ApiGatewayV2CreateDeploymentResponse: ...

    def create_domain_name(self, *,
        DomainName: str,
        DomainNameConfigurations: List[ApiGatewayV2DomainNameConfiguration] = ...
    ) -> ApiGatewayV2CreateDomainNameResponse: ...

    def create_integration(self, *,
        ApiId: str,
        ConnectionId: str = ...,
        ConnectionType: str = ...,
        ContentHandlingStrategy: str = ...,
        CredentialsArn: str = ...,
        Description: str = ...,
        IntegrationMethod: str = ...,
        IntegrationType: str = ...,
        IntegrationUri: str = ...,
        PassthroughBehavior: str = ...,
        RequestParameters: Dict[str, str] = ...,
        RequestTemplates: Dict[str, str] = ...,
        TemplateSelectionExpression: str = ...,
        TimeoutInMillis: int = ...
    ) -> ApiGatewayV2CreateIntegrationResult: ...

    def create_integration_response(self, *,
        ApiId: str,
        IntegrationId: str,
        IntegrationResponseKey: str,
        ContentHandlingStrategy: str = ...,
        ResponseParameters: Dict[str, str] = ...,
        ResponseTemplates: Dict[str, str] = ...,
        TemplateSelectionExpression: str = ...
    ) -> ApiGatewayV2CreateIntegrationResponseResponse: ...

    def create_model(self, *,
        ApiId: str,
        Name: str,
        ContentType: str = ...,
        Description: str = ...,
        Schema: str = ...
    ) -> ApiGatewayV2CreateModelResponse: ...

    def create_route(self, *,
        ApiId: str,
        RouteKey: str,
        ApiKeyRequired: bool = ...,
        AuthorizationScopes: List[str] = ...,
        AuthorizationType: str = ...,
        AuthorizerId: str = ...,
        ModelSelectionExpression: str = ...,
        OperationName: str = ...,
        RequestModels: Dict[str, str] = ...,
        RequestParameters: Dict[str, ApiGatewayV2ParameterConstraints] = ...,
        RouteResponseSelectionExpression: str = ...,
        Target: str = ...
    ) -> ApiGatewayV2CreateRouteResult: ...

    def create_route_response(self, *,
        ApiId: str,
        RouteId: str,
        RouteResponseKey: str,
        ModelSelectionExpression: str = ...,
        ResponseModels: Dict[str, str] = ...,
        ResponseParameters: Dict[str, ApiGatewayV2ParameterConstraints] = ...
    ) -> ApiGatewayV2CreateRouteResponseResponse: ...

    def create_stage(self, *,
        ApiId: str,
        StageName: str,
        AccessLogSettings: ApiGatewayV2AccessLogSettings = ...,
        ClientCertificateId: str = ...,
        DefaultRouteSettings: ApiGatewayV2RouteSettings = ...,
        DeploymentId: str = ...,
        Description: str = ...,
        RouteSettings: Dict[str, ApiGatewayV2RouteSettings] = ...,
        StageVariables: Dict[str, str] = ...
    ) -> ApiGatewayV2CreateStageResponse: ...

    def delete_api(self, *,
        ApiId: str
    ): ...

    def delete_api_mapping(self, *,
        ApiId: str,
        ApiMappingId: str,
        DomainName: str
    ): ...

    def delete_authorizer(self, *,
        ApiId: str,
        AuthorizerId: str
    ): ...

    def delete_deployment(self, *,
        ApiId: str,
        DeploymentId: str
    ): ...

    def delete_domain_name(self, *,
        DomainName: str
    ): ...

    def delete_integration(self, *,
        ApiId: str,
        IntegrationId: str
    ): ...

    def delete_integration_response(self, *,
        ApiId: str,
        IntegrationId: str,
        IntegrationResponseId: str
    ): ...

    def delete_model(self, *,
        ApiId: str,
        ModelId: str
    ): ...

    def delete_route(self, *,
        ApiId: str,
        RouteId: str
    ): ...

    def delete_route_response(self, *,
        ApiId: str,
        RouteId: str,
        RouteResponseId: str
    ): ...

    def delete_stage(self, *,
        ApiId: str,
        StageName: str
    ): ...

    def get_api(self, *,
        ApiId: str
    ) -> ApiGatewayV2GetApiResponse: ...

    def get_api_mapping(self, *,
        ApiId: str,
        ApiMappingId: str,
        DomainName: str
    ) -> ApiGatewayV2GetApiMappingResponse: ...

    def get_api_mappings(self, *,
        DomainName: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> ApiGatewayV2GetApiMappingsResponse: ...

    def get_apis(self, *,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> ApiGatewayV2GetApisResponse: ...

    def get_authorizer(self, *,
        ApiId: str,
        AuthorizerId: str
    ) -> ApiGatewayV2GetAuthorizerResponse: ...

    def get_authorizers(self, *,
        ApiId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> ApiGatewayV2GetAuthorizersResponse: ...

    def get_deployment(self, *,
        ApiId: str,
        DeploymentId: str
    ) -> ApiGatewayV2GetDeploymentResponse: ...

    def get_deployments(self, *,
        ApiId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> ApiGatewayV2GetDeploymentsResponse: ...

    def get_domain_name(self, *,
        DomainName: str
    ) -> ApiGatewayV2GetDomainNameResponse: ...

    def get_domain_names(self, *,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> ApiGatewayV2GetDomainNamesResponse: ...

    def get_integration(self, *,
        ApiId: str,
        IntegrationId: str
    ) -> ApiGatewayV2GetIntegrationResult: ...

    def get_integration_response(self, *,
        ApiId: str,
        IntegrationId: str,
        IntegrationResponseId: str
    ) -> ApiGatewayV2GetIntegrationResponseResponse: ...

    def get_integration_responses(self, *,
        ApiId: str,
        IntegrationId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> ApiGatewayV2GetIntegrationResponsesResponse: ...

    def get_integrations(self, *,
        ApiId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> ApiGatewayV2GetIntegrationsResponse: ...

    def get_model(self, *,
        ApiId: str,
        ModelId: str
    ) -> ApiGatewayV2GetModelResponse: ...

    def get_model_template(self, *,
        ApiId: str,
        ModelId: str
    ) -> ApiGatewayV2GetModelTemplateResponse: ...

    def get_models(self, *,
        ApiId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> ApiGatewayV2GetModelsResponse: ...

    def get_route(self, *,
        ApiId: str,
        RouteId: str
    ) -> ApiGatewayV2GetRouteResult: ...

    def get_route_response(self, *,
        ApiId: str,
        RouteId: str,
        RouteResponseId: str
    ) -> ApiGatewayV2GetRouteResponseResponse: ...

    def get_route_responses(self, *,
        ApiId: str,
        RouteId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> ApiGatewayV2GetRouteResponsesResponse: ...

    def get_routes(self, *,
        ApiId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> ApiGatewayV2GetRoutesResponse: ...

    def get_stage(self, *,
        ApiId: str,
        StageName: str
    ) -> ApiGatewayV2GetStageResponse: ...

    def get_stages(self, *,
        ApiId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> ApiGatewayV2GetStagesResponse: ...

    def update_api(self, *,
        ApiId: str,
        ApiKeySelectionExpression: str = ...,
        Description: str = ...,
        DisableSchemaValidation: bool = ...,
        Name: str = ...,
        RouteSelectionExpression: str = ...,
        Version: str = ...
    ) -> ApiGatewayV2UpdateApiResponse: ...

    def update_api_mapping(self, *,
        ApiId: str,
        ApiMappingId: str,
        DomainName: str,
        ApiMappingKey: str = ...,
        Stage: str = ...
    ) -> ApiGatewayV2UpdateApiMappingResponse: ...

    def update_authorizer(self, *,
        ApiId: str,
        AuthorizerId: str,
        AuthorizerCredentialsArn: str = ...,
        AuthorizerResultTtlInSeconds: int = ...,
        AuthorizerType: str = ...,
        AuthorizerUri: str = ...,
        IdentitySource: List[str] = ...,
        IdentityValidationExpression: str = ...,
        Name: str = ...,
        ProviderArns: List[str] = ...
    ) -> ApiGatewayV2UpdateAuthorizerResponse: ...

    def update_deployment(self, *,
        ApiId: str,
        DeploymentId: str,
        Description: str = ...
    ) -> ApiGatewayV2UpdateDeploymentResponse: ...

    def update_domain_name(self, *,
        DomainName: str,
        DomainNameConfigurations: List[ApiGatewayV2DomainNameConfiguration] = ...
    ) -> ApiGatewayV2UpdateDomainNameResponse: ...

    def update_integration(self, *,
        ApiId: str,
        IntegrationId: str,
        ConnectionId: str = ...,
        ConnectionType: str = ...,
        ContentHandlingStrategy: str = ...,
        CredentialsArn: str = ...,
        Description: str = ...,
        IntegrationMethod: str = ...,
        IntegrationType: str = ...,
        IntegrationUri: str = ...,
        PassthroughBehavior: str = ...,
        RequestParameters: Dict[str, str] = ...,
        RequestTemplates: Dict[str, str] = ...,
        TemplateSelectionExpression: str = ...,
        TimeoutInMillis: int = ...
    ) -> ApiGatewayV2UpdateIntegrationResult: ...

    def update_integration_response(self, *,
        ApiId: str,
        IntegrationId: str,
        IntegrationResponseId: str,
        ContentHandlingStrategy: str = ...,
        IntegrationResponseKey: str = ...,
        ResponseParameters: Dict[str, str] = ...,
        ResponseTemplates: Dict[str, str] = ...,
        TemplateSelectionExpression: str = ...
    ) -> ApiGatewayV2UpdateIntegrationResponseResponse: ...

    def update_model(self, *,
        ApiId: str,
        ModelId: str,
        ContentType: str = ...,
        Description: str = ...,
        Name: str = ...,
        Schema: str = ...
    ) -> ApiGatewayV2UpdateModelResponse: ...

    def update_route(self, *,
        ApiId: str,
        RouteId: str,
        ApiKeyRequired: bool = ...,
        AuthorizationScopes: List[str] = ...,
        AuthorizationType: str = ...,
        AuthorizerId: str = ...,
        ModelSelectionExpression: str = ...,
        OperationName: str = ...,
        RequestModels: Dict[str, str] = ...,
        RequestParameters: Dict[str, ApiGatewayV2ParameterConstraints] = ...,
        RouteKey: str = ...,
        RouteResponseSelectionExpression: str = ...,
        Target: str = ...
    ) -> ApiGatewayV2UpdateRouteResult: ...

    def update_route_response(self, *,
        ApiId: str,
        RouteId: str,
        RouteResponseId: str,
        ModelSelectionExpression: str = ...,
        ResponseModels: Dict[str, str] = ...,
        ResponseParameters: Dict[str, ApiGatewayV2ParameterConstraints] = ...,
        RouteResponseKey: str = ...
    ) -> ApiGatewayV2UpdateRouteResponseResponse: ...

    def update_stage(self, *,
        ApiId: str,
        StageName: str,
        AccessLogSettings: ApiGatewayV2AccessLogSettings = ...,
        ClientCertificateId: str = ...,
        DefaultRouteSettings: ApiGatewayV2RouteSettings = ...,
        DeploymentId: str = ...,
        Description: str = ...,
        RouteSettings: Dict[str, ApiGatewayV2RouteSettings] = ...,
        StageVariables: Dict[str, str] = ...
    ) -> ApiGatewayV2UpdateStageResponse: ...


class ApiGatewayV2CreateApiResponse(TypedDict, total=False):
    ApiEndpoint: str
    ApiId: str
    ApiKeySelectionExpression: str
    CreatedDate: datetime.datetime
    Description: str
    DisableSchemaValidation: bool
    Name: str
    ProtocolType: str
    RouteSelectionExpression: str
    Version: str
    Warnings: List[str]


class ApiGatewayV2CreateApiMappingResponse(TypedDict, total=False):
    ApiId: str
    ApiMappingId: str
    ApiMappingKey: str
    Stage: str


class ApiGatewayV2CreateAuthorizerResponse(TypedDict, total=False):
    AuthorizerCredentialsArn: str
    AuthorizerId: str
    AuthorizerResultTtlInSeconds: int
    AuthorizerType: str
    AuthorizerUri: str
    IdentitySource: List[str]
    IdentityValidationExpression: str
    Name: str
    ProviderArns: List[str]


class ApiGatewayV2CreateDeploymentResponse(TypedDict, total=False):
    CreatedDate: datetime.datetime
    DeploymentId: str
    DeploymentStatus: str
    DeploymentStatusMessage: str
    Description: str


class ApiGatewayV2DomainNameConfiguration(TypedDict, total=False):
    ApiGatewayDomainName: str
    CertificateArn: str
    CertificateName: str
    CertificateUploadDate: datetime.datetime
    EndpointType: str
    HostedZoneId: str


class ApiGatewayV2CreateDomainNameResponse(TypedDict, total=False):
    ApiMappingSelectionExpression: str
    DomainName: str
    DomainNameConfigurations: List[ApiGatewayV2DomainNameConfiguration]


class ApiGatewayV2CreateIntegrationResult(TypedDict, total=False):
    ConnectionId: str
    ConnectionType: str
    ContentHandlingStrategy: str
    CredentialsArn: str
    Description: str
    IntegrationId: str
    IntegrationMethod: str
    IntegrationResponseSelectionExpression: str
    IntegrationType: str
    IntegrationUri: str
    PassthroughBehavior: str
    RequestParameters: Dict[str, str]
    RequestTemplates: Dict[str, str]
    TemplateSelectionExpression: str
    TimeoutInMillis: int


class ApiGatewayV2CreateIntegrationResponseResponse(TypedDict, total=False):
    ContentHandlingStrategy: str
    IntegrationResponseId: str
    IntegrationResponseKey: str
    ResponseParameters: Dict[str, str]
    ResponseTemplates: Dict[str, str]
    TemplateSelectionExpression: str


class ApiGatewayV2CreateModelResponse(TypedDict, total=False):
    ContentType: str
    Description: str
    ModelId: str
    Name: str
    Schema: str


class ApiGatewayV2ParameterConstraints(TypedDict, total=False):
    Required: bool


class ApiGatewayV2CreateRouteResult(TypedDict, total=False):
    ApiKeyRequired: bool
    AuthorizationScopes: List[str]
    AuthorizationType: str
    AuthorizerId: str
    ModelSelectionExpression: str
    OperationName: str
    RequestModels: Dict[str, str]
    RequestParameters: Dict[str, ApiGatewayV2ParameterConstraints]
    RouteId: str
    RouteKey: str
    RouteResponseSelectionExpression: str
    Target: str


class ApiGatewayV2CreateRouteResponseResponse(TypedDict, total=False):
    ModelSelectionExpression: str
    ResponseModels: Dict[str, str]
    ResponseParameters: Dict[str, ApiGatewayV2ParameterConstraints]
    RouteResponseId: str
    RouteResponseKey: str


class ApiGatewayV2AccessLogSettings(TypedDict, total=False):
    DestinationArn: str
    Format: str


class ApiGatewayV2RouteSettings(TypedDict, total=False):
    DataTraceEnabled: bool
    DetailedMetricsEnabled: bool
    LoggingLevel: str
    ThrottlingBurstLimit: int
    ThrottlingRateLimit: float


class ApiGatewayV2CreateStageResponse(TypedDict, total=False):
    AccessLogSettings: ApiGatewayV2AccessLogSettings
    ClientCertificateId: str
    CreatedDate: datetime.datetime
    DefaultRouteSettings: ApiGatewayV2RouteSettings
    DeploymentId: str
    Description: str
    LastUpdatedDate: datetime.datetime
    RouteSettings: Dict[str, ApiGatewayV2RouteSettings]
    StageName: str
    StageVariables: Dict[str, str]


class ApiGatewayV2GetApiResponse(TypedDict, total=False):
    ApiEndpoint: str
    ApiId: str
    ApiKeySelectionExpression: str
    CreatedDate: datetime.datetime
    Description: str
    DisableSchemaValidation: bool
    Name: str
    ProtocolType: str
    RouteSelectionExpression: str
    Version: str
    Warnings: List[str]


class ApiGatewayV2GetApiMappingResponse(TypedDict, total=False):
    ApiId: str
    ApiMappingId: str
    ApiMappingKey: str
    Stage: str


class ApiGatewayV2GetApiMappingsResponse(TypedDict, total=False):
    ApiId: str
    ApiMappingId: str
    ApiMappingKey: str
    Stage: str


class ApiGatewayV2GetApisResponse(TypedDict, total=False):
    Items: List[ApiGatewayV2Api]
    NextToken: str


class _ApiGatewayV2Api(TypedDict):
    Name: str
    ProtocolType: str
    RouteSelectionExpression: str


class ApiGatewayV2Api(_ApiGatewayV2Api, total=False):
    ApiEndpoint: str
    ApiId: str
    ApiKeySelectionExpression: str
    CreatedDate: datetime.datetime
    Description: str
    DisableSchemaValidation: bool
    Version: str
    Warnings: List[str]


class ApiGatewayV2GetAuthorizerResponse(TypedDict, total=False):
    AuthorizerCredentialsArn: str
    AuthorizerId: str
    AuthorizerResultTtlInSeconds: int
    AuthorizerType: str
    AuthorizerUri: str
    IdentitySource: List[str]
    IdentityValidationExpression: str
    Name: str
    ProviderArns: List[str]


class ApiGatewayV2GetAuthorizersResponse(TypedDict, total=False):
    Items: List[ApiGatewayV2Authorizer]
    NextToken: str


class _ApiGatewayV2Authorizer(TypedDict):
    Name: str


class ApiGatewayV2Authorizer(_ApiGatewayV2Authorizer, total=False):
    AuthorizerCredentialsArn: str
    AuthorizerId: str
    AuthorizerResultTtlInSeconds: int
    AuthorizerType: str
    AuthorizerUri: str
    IdentitySource: List[str]
    IdentityValidationExpression: str
    ProviderArns: List[str]


class ApiGatewayV2GetDeploymentResponse(TypedDict, total=False):
    CreatedDate: datetime.datetime
    DeploymentId: str
    DeploymentStatus: str
    DeploymentStatusMessage: str
    Description: str


class ApiGatewayV2GetDeploymentsResponse(TypedDict, total=False):
    Items: List[ApiGatewayV2Deployment]
    NextToken: str


class ApiGatewayV2Deployment(TypedDict, total=False):
    CreatedDate: datetime.datetime
    DeploymentId: str
    DeploymentStatus: str
    DeploymentStatusMessage: str
    Description: str


class ApiGatewayV2GetDomainNameResponse(TypedDict, total=False):
    ApiMappingSelectionExpression: str
    DomainName: str
    DomainNameConfigurations: List[ApiGatewayV2DomainNameConfiguration]


class ApiGatewayV2GetDomainNamesResponse(TypedDict, total=False):
    Items: List[ApiGatewayV2DomainName]
    NextToken: str


class _ApiGatewayV2DomainName(TypedDict):
    DomainName: str


class ApiGatewayV2DomainName(_ApiGatewayV2DomainName, total=False):
    ApiMappingSelectionExpression: str
    DomainNameConfigurations: List[ApiGatewayV2DomainNameConfiguration]


class ApiGatewayV2GetIntegrationResult(TypedDict, total=False):
    ConnectionId: str
    ConnectionType: str
    ContentHandlingStrategy: str
    CredentialsArn: str
    Description: str
    IntegrationId: str
    IntegrationMethod: str
    IntegrationResponseSelectionExpression: str
    IntegrationType: str
    IntegrationUri: str
    PassthroughBehavior: str
    RequestParameters: Dict[str, str]
    RequestTemplates: Dict[str, str]
    TemplateSelectionExpression: str
    TimeoutInMillis: int


class ApiGatewayV2GetIntegrationResponseResponse(TypedDict, total=False):
    ContentHandlingStrategy: str
    IntegrationResponseId: str
    IntegrationResponseKey: str
    ResponseParameters: Dict[str, str]
    ResponseTemplates: Dict[str, str]
    TemplateSelectionExpression: str


class ApiGatewayV2GetIntegrationResponsesResponse(TypedDict, total=False):
    Items: List[ApiGatewayV2IntegrationResponse]
    NextToken: str


class _ApiGatewayV2IntegrationResponse(TypedDict):
    IntegrationResponseKey: str


class ApiGatewayV2IntegrationResponse(_ApiGatewayV2IntegrationResponse, total=False):
    ContentHandlingStrategy: str
    IntegrationResponseId: str
    ResponseParameters: Dict[str, str]
    ResponseTemplates: Dict[str, str]
    TemplateSelectionExpression: str


class ApiGatewayV2GetIntegrationsResponse(TypedDict, total=False):
    Items: List[ApiGatewayV2Integration]
    NextToken: str


class ApiGatewayV2Integration(TypedDict, total=False):
    ConnectionId: str
    ConnectionType: str
    ContentHandlingStrategy: str
    CredentialsArn: str
    Description: str
    IntegrationId: str
    IntegrationMethod: str
    IntegrationResponseSelectionExpression: str
    IntegrationType: str
    IntegrationUri: str
    PassthroughBehavior: str
    RequestParameters: Dict[str, str]
    RequestTemplates: Dict[str, str]
    TemplateSelectionExpression: str
    TimeoutInMillis: int


class ApiGatewayV2GetModelResponse(TypedDict, total=False):
    ContentType: str
    Description: str
    ModelId: str
    Name: str
    Schema: str


class ApiGatewayV2GetModelTemplateResponse(TypedDict, total=False):
    Value: str


class ApiGatewayV2GetModelsResponse(TypedDict, total=False):
    Items: List[ApiGatewayV2Model]
    NextToken: str


class _ApiGatewayV2Model(TypedDict):
    Name: str


class ApiGatewayV2Model(_ApiGatewayV2Model, total=False):
    ContentType: str
    Description: str
    ModelId: str
    Schema: str


class ApiGatewayV2GetRouteResult(TypedDict, total=False):
    ApiKeyRequired: bool
    AuthorizationScopes: List[str]
    AuthorizationType: str
    AuthorizerId: str
    ModelSelectionExpression: str
    OperationName: str
    RequestModels: Dict[str, str]
    RequestParameters: Dict[str, ApiGatewayV2ParameterConstraints]
    RouteId: str
    RouteKey: str
    RouteResponseSelectionExpression: str
    Target: str


class ApiGatewayV2GetRouteResponseResponse(TypedDict, total=False):
    ModelSelectionExpression: str
    ResponseModels: Dict[str, str]
    ResponseParameters: Dict[str, ApiGatewayV2ParameterConstraints]
    RouteResponseId: str
    RouteResponseKey: str


class ApiGatewayV2GetRouteResponsesResponse(TypedDict, total=False):
    Items: List[ApiGatewayV2RouteResponse]
    NextToken: str


class _ApiGatewayV2RouteResponse(TypedDict):
    RouteResponseKey: str


class ApiGatewayV2RouteResponse(_ApiGatewayV2RouteResponse, total=False):
    ModelSelectionExpression: str
    ResponseModels: Dict[str, str]
    ResponseParameters: Dict[str, ApiGatewayV2ParameterConstraints]
    RouteResponseId: str


class ApiGatewayV2GetRoutesResponse(TypedDict, total=False):
    Items: List[ApiGatewayV2Route]
    NextToken: str


class _ApiGatewayV2Route(TypedDict):
    RouteKey: str


class ApiGatewayV2Route(_ApiGatewayV2Route, total=False):
    ApiKeyRequired: bool
    AuthorizationScopes: List[str]
    AuthorizationType: str
    AuthorizerId: str
    ModelSelectionExpression: str
    OperationName: str
    RequestModels: Dict[str, str]
    RequestParameters: Dict[str, ApiGatewayV2ParameterConstraints]
    RouteId: str
    RouteResponseSelectionExpression: str
    Target: str


class ApiGatewayV2GetStageResponse(TypedDict, total=False):
    AccessLogSettings: ApiGatewayV2AccessLogSettings
    ClientCertificateId: str
    CreatedDate: datetime.datetime
    DefaultRouteSettings: ApiGatewayV2RouteSettings
    DeploymentId: str
    Description: str
    LastUpdatedDate: datetime.datetime
    RouteSettings: Dict[str, ApiGatewayV2RouteSettings]
    StageName: str
    StageVariables: Dict[str, str]


class ApiGatewayV2GetStagesResponse(TypedDict, total=False):
    Items: List[ApiGatewayV2Stage]
    NextToken: str


class _ApiGatewayV2Stage(TypedDict):
    StageName: str


class ApiGatewayV2Stage(_ApiGatewayV2Stage, total=False):
    AccessLogSettings: ApiGatewayV2AccessLogSettings
    ClientCertificateId: str
    CreatedDate: datetime.datetime
    DefaultRouteSettings: ApiGatewayV2RouteSettings
    DeploymentId: str
    Description: str
    LastUpdatedDate: datetime.datetime
    RouteSettings: Dict[str, ApiGatewayV2RouteSettings]
    StageVariables: Dict[str, str]


class ApiGatewayV2UpdateApiResponse(TypedDict, total=False):
    ApiEndpoint: str
    ApiId: str
    ApiKeySelectionExpression: str
    CreatedDate: datetime.datetime
    Description: str
    DisableSchemaValidation: bool
    Name: str
    ProtocolType: str
    RouteSelectionExpression: str
    Version: str
    Warnings: List[str]


class ApiGatewayV2UpdateApiMappingResponse(TypedDict, total=False):
    ApiId: str
    ApiMappingId: str
    ApiMappingKey: str
    Stage: str


class ApiGatewayV2UpdateAuthorizerResponse(TypedDict, total=False):
    AuthorizerCredentialsArn: str
    AuthorizerId: str
    AuthorizerResultTtlInSeconds: int
    AuthorizerType: str
    AuthorizerUri: str
    IdentitySource: List[str]
    IdentityValidationExpression: str
    Name: str
    ProviderArns: List[str]


class ApiGatewayV2UpdateDeploymentResponse(TypedDict, total=False):
    CreatedDate: datetime.datetime
    DeploymentId: str
    DeploymentStatus: str
    DeploymentStatusMessage: str
    Description: str


class ApiGatewayV2UpdateDomainNameResponse(TypedDict, total=False):
    ApiMappingSelectionExpression: str
    DomainName: str
    DomainNameConfigurations: List[ApiGatewayV2DomainNameConfiguration]


class ApiGatewayV2UpdateIntegrationResult(TypedDict, total=False):
    ConnectionId: str
    ConnectionType: str
    ContentHandlingStrategy: str
    CredentialsArn: str
    Description: str
    IntegrationId: str
    IntegrationMethod: str
    IntegrationResponseSelectionExpression: str
    IntegrationType: str
    IntegrationUri: str
    PassthroughBehavior: str
    RequestParameters: Dict[str, str]
    RequestTemplates: Dict[str, str]
    TemplateSelectionExpression: str
    TimeoutInMillis: int


class ApiGatewayV2UpdateIntegrationResponseResponse(TypedDict, total=False):
    ContentHandlingStrategy: str
    IntegrationResponseId: str
    IntegrationResponseKey: str
    ResponseParameters: Dict[str, str]
    ResponseTemplates: Dict[str, str]
    TemplateSelectionExpression: str


class ApiGatewayV2UpdateModelResponse(TypedDict, total=False):
    ContentType: str
    Description: str
    ModelId: str
    Name: str
    Schema: str


class ApiGatewayV2UpdateRouteResult(TypedDict, total=False):
    ApiKeyRequired: bool
    AuthorizationScopes: List[str]
    AuthorizationType: str
    AuthorizerId: str
    ModelSelectionExpression: str
    OperationName: str
    RequestModels: Dict[str, str]
    RequestParameters: Dict[str, ApiGatewayV2ParameterConstraints]
    RouteId: str
    RouteKey: str
    RouteResponseSelectionExpression: str
    Target: str


class ApiGatewayV2UpdateRouteResponseResponse(TypedDict, total=False):
    ModelSelectionExpression: str
    ResponseModels: Dict[str, str]
    ResponseParameters: Dict[str, ApiGatewayV2ParameterConstraints]
    RouteResponseId: str
    RouteResponseKey: str


class ApiGatewayV2UpdateStageResponse(TypedDict, total=False):
    AccessLogSettings: ApiGatewayV2AccessLogSettings
    ClientCertificateId: str
    CreatedDate: datetime.datetime
    DefaultRouteSettings: ApiGatewayV2RouteSettings
    DeploymentId: str
    Description: str
    LastUpdatedDate: datetime.datetime
    RouteSettings: Dict[str, ApiGatewayV2RouteSettings]
    StageName: str
    StageVariables: Dict[str, str]


class ApplicationAutoScaling(BaseClient):
    def delete_scaling_policy(self, *,
        PolicyName: str,
        ServiceNamespace: str,
        ResourceId: str,
        ScalableDimension: str
    ) -> ApplicationAutoScalingDeleteScalingPolicyResponse: ...

    def delete_scheduled_action(self, *,
        ServiceNamespace: str,
        ScheduledActionName: str,
        ResourceId: str,
        ScalableDimension: str
    ) -> ApplicationAutoScalingDeleteScheduledActionResponse: ...

    def deregister_scalable_target(self, *,
        ServiceNamespace: str,
        ResourceId: str,
        ScalableDimension: str
    ) -> ApplicationAutoScalingDeregisterScalableTargetResponse: ...

    def describe_scalable_targets(self, *,
        ServiceNamespace: str,
        ResourceIds: List[str] = ...,
        ScalableDimension: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ApplicationAutoScalingDescribeScalableTargetsResponse: ...

    def describe_scaling_activities(self, *,
        ServiceNamespace: str,
        ResourceId: str = ...,
        ScalableDimension: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ApplicationAutoScalingDescribeScalingActivitiesResponse: ...

    def describe_scaling_policies(self, *,
        ServiceNamespace: str,
        PolicyNames: List[str] = ...,
        ResourceId: str = ...,
        ScalableDimension: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ApplicationAutoScalingDescribeScalingPoliciesResponse: ...

    def describe_scheduled_actions(self, *,
        ServiceNamespace: str,
        ScheduledActionNames: List[str] = ...,
        ResourceId: str = ...,
        ScalableDimension: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ApplicationAutoScalingDescribeScheduledActionsResponse: ...

    def put_scaling_policy(self, *,
        PolicyName: str,
        ServiceNamespace: str,
        ResourceId: str,
        ScalableDimension: str,
        PolicyType: str = ...,
        StepScalingPolicyConfiguration: ApplicationAutoScalingStepScalingPolicyConfiguration = ...,
        TargetTrackingScalingPolicyConfiguration: ApplicationAutoScalingTargetTrackingScalingPolicyConfiguration = ...
    ) -> ApplicationAutoScalingPutScalingPolicyResponse: ...

    def put_scheduled_action(self, *,
        ServiceNamespace: str,
        ScheduledActionName: str,
        ResourceId: str,
        ScalableDimension: str,
        Schedule: str = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        ScalableTargetAction: ApplicationAutoScalingScalableTargetAction = ...
    ) -> ApplicationAutoScalingPutScheduledActionResponse: ...

    def register_scalable_target(self, *,
        ServiceNamespace: str,
        ResourceId: str,
        ScalableDimension: str,
        MinCapacity: int = ...,
        MaxCapacity: int = ...,
        RoleARN: str = ...
    ) -> ApplicationAutoScalingRegisterScalableTargetResponse: ...


class ApplicationAutoScalingDeleteScalingPolicyResponse(TypedDict, total=False):
    pass


class ApplicationAutoScalingDeleteScheduledActionResponse(TypedDict, total=False):
    pass


class ApplicationAutoScalingDeregisterScalableTargetResponse(TypedDict, total=False):
    pass


class ApplicationAutoScalingDescribeScalableTargetsResponse(TypedDict, total=False):
    ScalableTargets: List[ApplicationAutoScalingScalableTarget]
    NextToken: str


class ApplicationAutoScalingScalableTarget(TypedDict):
    ServiceNamespace: str
    ResourceId: str
    ScalableDimension: str
    MinCapacity: int
    MaxCapacity: int
    RoleARN: str
    CreationTime: datetime.datetime


class ApplicationAutoScalingDescribeScalingActivitiesResponse(TypedDict, total=False):
    ScalingActivities: List[ApplicationAutoScalingScalingActivity]
    NextToken: str


class _ApplicationAutoScalingScalingActivity(TypedDict):
    ActivityId: str
    ServiceNamespace: str
    ResourceId: str
    ScalableDimension: str
    Description: str
    Cause: str
    StartTime: datetime.datetime
    StatusCode: str


class ApplicationAutoScalingScalingActivity(_ApplicationAutoScalingScalingActivity, total=False):
    EndTime: datetime.datetime
    StatusMessage: str
    Details: str


class ApplicationAutoScalingDescribeScalingPoliciesResponse(TypedDict, total=False):
    ScalingPolicies: List[ApplicationAutoScalingScalingPolicy]
    NextToken: str


class _ApplicationAutoScalingScalingPolicy(TypedDict):
    PolicyARN: str
    PolicyName: str
    ServiceNamespace: str
    ResourceId: str
    ScalableDimension: str
    PolicyType: str
    CreationTime: datetime.datetime


class ApplicationAutoScalingScalingPolicy(_ApplicationAutoScalingScalingPolicy, total=False):
    StepScalingPolicyConfiguration: ApplicationAutoScalingStepScalingPolicyConfiguration
    TargetTrackingScalingPolicyConfiguration: ApplicationAutoScalingTargetTrackingScalingPolicyConfiguration
    Alarms: List[ApplicationAutoScalingAlarm]


class ApplicationAutoScalingStepScalingPolicyConfiguration(TypedDict, total=False):
    AdjustmentType: str
    StepAdjustments: List[ApplicationAutoScalingStepAdjustment]
    MinAdjustmentMagnitude: int
    Cooldown: int
    MetricAggregationType: str


class _ApplicationAutoScalingStepAdjustment(TypedDict):
    ScalingAdjustment: int


class ApplicationAutoScalingStepAdjustment(_ApplicationAutoScalingStepAdjustment, total=False):
    MetricIntervalLowerBound: float
    MetricIntervalUpperBound: float


class _ApplicationAutoScalingTargetTrackingScalingPolicyConfiguration(TypedDict):
    TargetValue: float


class ApplicationAutoScalingTargetTrackingScalingPolicyConfiguration(_ApplicationAutoScalingTargetTrackingScalingPolicyConfiguration, total=False):
    PredefinedMetricSpecification: ApplicationAutoScalingPredefinedMetricSpecification
    CustomizedMetricSpecification: ApplicationAutoScalingCustomizedMetricSpecification
    ScaleOutCooldown: int
    ScaleInCooldown: int
    DisableScaleIn: bool


class _ApplicationAutoScalingPredefinedMetricSpecification(TypedDict):
    PredefinedMetricType: str


class ApplicationAutoScalingPredefinedMetricSpecification(_ApplicationAutoScalingPredefinedMetricSpecification, total=False):
    ResourceLabel: str


class _ApplicationAutoScalingCustomizedMetricSpecification(TypedDict):
    MetricName: str
    Namespace: str
    Statistic: str


class ApplicationAutoScalingCustomizedMetricSpecification(_ApplicationAutoScalingCustomizedMetricSpecification, total=False):
    Dimensions: List[ApplicationAutoScalingMetricDimension]
    Unit: str


class ApplicationAutoScalingMetricDimension(TypedDict):
    Name: str
    Value: str


class ApplicationAutoScalingAlarm(TypedDict):
    AlarmName: str
    AlarmARN: str


class ApplicationAutoScalingDescribeScheduledActionsResponse(TypedDict, total=False):
    ScheduledActions: List[ApplicationAutoScalingScheduledAction]
    NextToken: str


class _ApplicationAutoScalingScheduledAction(TypedDict):
    ScheduledActionName: str
    ScheduledActionARN: str
    ServiceNamespace: str
    Schedule: str
    ResourceId: str
    CreationTime: datetime.datetime


class ApplicationAutoScalingScheduledAction(_ApplicationAutoScalingScheduledAction, total=False):
    ScalableDimension: str
    StartTime: datetime.datetime
    EndTime: datetime.datetime
    ScalableTargetAction: ApplicationAutoScalingScalableTargetAction


class ApplicationAutoScalingScalableTargetAction(TypedDict, total=False):
    MinCapacity: int
    MaxCapacity: int


class _ApplicationAutoScalingPutScalingPolicyResponse(TypedDict):
    PolicyARN: str


class ApplicationAutoScalingPutScalingPolicyResponse(_ApplicationAutoScalingPutScalingPolicyResponse, total=False):
    Alarms: List[ApplicationAutoScalingAlarm]


class ApplicationAutoScalingPutScheduledActionResponse(TypedDict, total=False):
    pass


class ApplicationAutoScalingRegisterScalableTargetResponse(TypedDict, total=False):
    pass


class AppMesh(BaseClient):
    def create_mesh(self, *,
        meshName: str,
        clientToken: str = ...,
        spec: AppMeshMeshSpec = ...,
        tags: List[AppMeshTagRef] = ...
    ) -> AppMeshCreateMeshOutput: ...

    def create_route(self, *,
        meshName: str,
        routeName: str,
        spec: AppMeshRouteSpec,
        virtualRouterName: str,
        clientToken: str = ...,
        tags: List[AppMeshTagRef] = ...
    ) -> AppMeshCreateRouteOutput: ...

    def create_virtual_node(self, *,
        meshName: str,
        spec: AppMeshVirtualNodeSpec,
        virtualNodeName: str,
        clientToken: str = ...,
        tags: List[AppMeshTagRef] = ...
    ) -> AppMeshCreateVirtualNodeOutput: ...

    def create_virtual_router(self, *,
        meshName: str,
        spec: AppMeshVirtualRouterSpec,
        virtualRouterName: str,
        clientToken: str = ...,
        tags: List[AppMeshTagRef] = ...
    ) -> AppMeshCreateVirtualRouterOutput: ...

    def create_virtual_service(self, *,
        meshName: str,
        spec: AppMeshVirtualServiceSpec,
        virtualServiceName: str,
        clientToken: str = ...,
        tags: List[AppMeshTagRef] = ...
    ) -> AppMeshCreateVirtualServiceOutput: ...

    def delete_mesh(self, *,
        meshName: str
    ) -> AppMeshDeleteMeshOutput: ...

    def delete_route(self, *,
        meshName: str,
        routeName: str,
        virtualRouterName: str
    ) -> AppMeshDeleteRouteOutput: ...

    def delete_virtual_node(self, *,
        meshName: str,
        virtualNodeName: str
    ) -> AppMeshDeleteVirtualNodeOutput: ...

    def delete_virtual_router(self, *,
        meshName: str,
        virtualRouterName: str
    ) -> AppMeshDeleteVirtualRouterOutput: ...

    def delete_virtual_service(self, *,
        meshName: str,
        virtualServiceName: str
    ) -> AppMeshDeleteVirtualServiceOutput: ...

    def describe_mesh(self, *,
        meshName: str
    ) -> AppMeshDescribeMeshOutput: ...

    def describe_route(self, *,
        meshName: str,
        routeName: str,
        virtualRouterName: str
    ) -> AppMeshDescribeRouteOutput: ...

    def describe_virtual_node(self, *,
        meshName: str,
        virtualNodeName: str
    ) -> AppMeshDescribeVirtualNodeOutput: ...

    def describe_virtual_router(self, *,
        meshName: str,
        virtualRouterName: str
    ) -> AppMeshDescribeVirtualRouterOutput: ...

    def describe_virtual_service(self, *,
        meshName: str,
        virtualServiceName: str
    ) -> AppMeshDescribeVirtualServiceOutput: ...

    def list_meshes(self, *,
        limit: int = ...,
        nextToken: str = ...
    ) -> AppMeshListMeshesOutput: ...

    def list_routes(self, *,
        meshName: str,
        virtualRouterName: str,
        limit: int = ...,
        nextToken: str = ...
    ) -> AppMeshListRoutesOutput: ...

    def list_tags_for_resource(self, *,
        resourceArn: str,
        limit: int = ...,
        nextToken: str = ...
    ) -> AppMeshListTagsForResourceOutput: ...

    def list_virtual_nodes(self, *,
        meshName: str,
        limit: int = ...,
        nextToken: str = ...
    ) -> AppMeshListVirtualNodesOutput: ...

    def list_virtual_routers(self, *,
        meshName: str,
        limit: int = ...,
        nextToken: str = ...
    ) -> AppMeshListVirtualRoutersOutput: ...

    def list_virtual_services(self, *,
        meshName: str,
        limit: int = ...,
        nextToken: str = ...
    ) -> AppMeshListVirtualServicesOutput: ...

    def tag_resource(self, *,
        resourceArn: str,
        tags: List[AppMeshTagRef]
    ) -> AppMeshTagResourceOutput: ...

    def untag_resource(self, *,
        resourceArn: str,
        tagKeys: List[str]
    ) -> AppMeshUntagResourceOutput: ...

    def update_mesh(self, *,
        meshName: str,
        clientToken: str = ...,
        spec: AppMeshMeshSpec = ...
    ) -> AppMeshUpdateMeshOutput: ...

    def update_route(self, *,
        meshName: str,
        routeName: str,
        spec: AppMeshRouteSpec,
        virtualRouterName: str,
        clientToken: str = ...
    ) -> AppMeshUpdateRouteOutput: ...

    def update_virtual_node(self, *,
        meshName: str,
        spec: AppMeshVirtualNodeSpec,
        virtualNodeName: str,
        clientToken: str = ...
    ) -> AppMeshUpdateVirtualNodeOutput: ...

    def update_virtual_router(self, *,
        meshName: str,
        spec: AppMeshVirtualRouterSpec,
        virtualRouterName: str,
        clientToken: str = ...
    ) -> AppMeshUpdateVirtualRouterOutput: ...

    def update_virtual_service(self, *,
        meshName: str,
        spec: AppMeshVirtualServiceSpec,
        virtualServiceName: str,
        clientToken: str = ...
    ) -> AppMeshUpdateVirtualServiceOutput: ...


class AppMeshMeshSpec(TypedDict, total=False):
    egressFilter: AppMeshEgressFilter


class AppMeshEgressFilter(TypedDict):
    type: str


class _AppMeshTagRef(TypedDict):
    key: str


class AppMeshTagRef(_AppMeshTagRef, total=False):
    value: str


class AppMeshCreateMeshOutput(TypedDict):
    mesh: AppMeshMeshData


class AppMeshMeshData(TypedDict):
    meshName: str
    metadata: AppMeshResourceMetadata
    spec: AppMeshMeshSpec
    status: AppMeshMeshStatus


class AppMeshResourceMetadata(TypedDict):
    arn: str
    createdAt: datetime.datetime
    lastUpdatedAt: datetime.datetime
    uid: str
    version: int


class AppMeshMeshStatus(TypedDict, total=False):
    status: str


class AppMeshRouteSpec(TypedDict, total=False):
    httpRoute: AppMeshHttpRoute
    tcpRoute: AppMeshTcpRoute


class AppMeshHttpRoute(TypedDict):
    action: AppMeshHttpRouteAction
    match: AppMeshHttpRouteMatch


class AppMeshHttpRouteAction(TypedDict):
    weightedTargets: List[AppMeshWeightedTarget]


class AppMeshWeightedTarget(TypedDict):
    virtualNode: str
    weight: int


class AppMeshHttpRouteMatch(TypedDict):
    prefix: str


class AppMeshTcpRoute(TypedDict):
    action: AppMeshTcpRouteAction


class AppMeshTcpRouteAction(TypedDict):
    weightedTargets: List[AppMeshWeightedTarget]


class AppMeshCreateRouteOutput(TypedDict):
    route: AppMeshRouteData


class AppMeshRouteData(TypedDict):
    meshName: str
    metadata: AppMeshResourceMetadata
    routeName: str
    spec: AppMeshRouteSpec
    status: AppMeshRouteStatus
    virtualRouterName: str


class AppMeshRouteStatus(TypedDict):
    status: str


class AppMeshVirtualNodeSpec(TypedDict, total=False):
    backends: List[AppMeshBackend]
    listeners: List[AppMeshListener]
    logging: AppMeshLogging
    serviceDiscovery: AppMeshServiceDiscovery


class AppMeshBackend(TypedDict, total=False):
    virtualService: AppMeshVirtualServiceBackend


class AppMeshVirtualServiceBackend(TypedDict):
    virtualServiceName: str


class _AppMeshListener(TypedDict):
    portMapping: AppMeshPortMapping


class AppMeshListener(_AppMeshListener, total=False):
    healthCheck: AppMeshHealthCheckPolicy


class _AppMeshHealthCheckPolicy(TypedDict):
    healthyThreshold: int
    intervalMillis: int
    protocol: str
    timeoutMillis: int
    unhealthyThreshold: int


class AppMeshHealthCheckPolicy(_AppMeshHealthCheckPolicy, total=False):
    path: str
    port: int


class AppMeshPortMapping(TypedDict):
    port: int
    protocol: str


class AppMeshLogging(TypedDict, total=False):
    accessLog: AppMeshAccessLog


class AppMeshAccessLog(TypedDict, total=False):
    file: AppMeshFileAccessLog


class AppMeshFileAccessLog(TypedDict):
    path: str


class AppMeshServiceDiscovery(TypedDict, total=False):
    dns: AppMeshDnsServiceDiscovery


class AppMeshDnsServiceDiscovery(TypedDict):
    hostname: str


class AppMeshCreateVirtualNodeOutput(TypedDict):
    virtualNode: AppMeshVirtualNodeData


class AppMeshVirtualNodeData(TypedDict):
    meshName: str
    metadata: AppMeshResourceMetadata
    spec: AppMeshVirtualNodeSpec
    status: AppMeshVirtualNodeStatus
    virtualNodeName: str


class AppMeshVirtualNodeStatus(TypedDict):
    status: str


class AppMeshVirtualRouterSpec(TypedDict):
    listeners: List[AppMeshVirtualRouterListener]


class AppMeshVirtualRouterListener(TypedDict):
    portMapping: AppMeshPortMapping


class AppMeshCreateVirtualRouterOutput(TypedDict):
    virtualRouter: AppMeshVirtualRouterData


class AppMeshVirtualRouterData(TypedDict):
    meshName: str
    metadata: AppMeshResourceMetadata
    spec: AppMeshVirtualRouterSpec
    status: AppMeshVirtualRouterStatus
    virtualRouterName: str


class AppMeshVirtualRouterStatus(TypedDict):
    status: str


class AppMeshVirtualServiceSpec(TypedDict, total=False):
    provider: AppMeshVirtualServiceProvider


class AppMeshVirtualServiceProvider(TypedDict, total=False):
    virtualNode: AppMeshVirtualNodeServiceProvider
    virtualRouter: AppMeshVirtualRouterServiceProvider


class AppMeshVirtualNodeServiceProvider(TypedDict):
    virtualNodeName: str


class AppMeshVirtualRouterServiceProvider(TypedDict):
    virtualRouterName: str


class AppMeshCreateVirtualServiceOutput(TypedDict):
    virtualService: AppMeshVirtualServiceData


class AppMeshVirtualServiceData(TypedDict):
    meshName: str
    metadata: AppMeshResourceMetadata
    spec: AppMeshVirtualServiceSpec
    status: AppMeshVirtualServiceStatus
    virtualServiceName: str


class AppMeshVirtualServiceStatus(TypedDict):
    status: str


class AppMeshDeleteMeshOutput(TypedDict):
    mesh: AppMeshMeshData


class AppMeshDeleteRouteOutput(TypedDict):
    route: AppMeshRouteData


class AppMeshDeleteVirtualNodeOutput(TypedDict):
    virtualNode: AppMeshVirtualNodeData


class AppMeshDeleteVirtualRouterOutput(TypedDict):
    virtualRouter: AppMeshVirtualRouterData


class AppMeshDeleteVirtualServiceOutput(TypedDict):
    virtualService: AppMeshVirtualServiceData


class AppMeshDescribeMeshOutput(TypedDict):
    mesh: AppMeshMeshData


class AppMeshDescribeRouteOutput(TypedDict):
    route: AppMeshRouteData


class AppMeshDescribeVirtualNodeOutput(TypedDict):
    virtualNode: AppMeshVirtualNodeData


class AppMeshDescribeVirtualRouterOutput(TypedDict):
    virtualRouter: AppMeshVirtualRouterData


class AppMeshDescribeVirtualServiceOutput(TypedDict):
    virtualService: AppMeshVirtualServiceData


class _AppMeshListMeshesOutput(TypedDict):
    meshes: List[AppMeshMeshRef]


class AppMeshListMeshesOutput(_AppMeshListMeshesOutput, total=False):
    nextToken: str


class AppMeshMeshRef(TypedDict):
    arn: str
    meshName: str


class _AppMeshListRoutesOutput(TypedDict):
    routes: List[AppMeshRouteRef]


class AppMeshListRoutesOutput(_AppMeshListRoutesOutput, total=False):
    nextToken: str


class AppMeshRouteRef(TypedDict):
    arn: str
    meshName: str
    routeName: str
    virtualRouterName: str


class _AppMeshListTagsForResourceOutput(TypedDict):
    tags: List[AppMeshTagRef]


class AppMeshListTagsForResourceOutput(_AppMeshListTagsForResourceOutput, total=False):
    nextToken: str


class _AppMeshListVirtualNodesOutput(TypedDict):
    virtualNodes: List[AppMeshVirtualNodeRef]


class AppMeshListVirtualNodesOutput(_AppMeshListVirtualNodesOutput, total=False):
    nextToken: str


class AppMeshVirtualNodeRef(TypedDict):
    arn: str
    meshName: str
    virtualNodeName: str


class _AppMeshListVirtualRoutersOutput(TypedDict):
    virtualRouters: List[AppMeshVirtualRouterRef]


class AppMeshListVirtualRoutersOutput(_AppMeshListVirtualRoutersOutput, total=False):
    nextToken: str


class AppMeshVirtualRouterRef(TypedDict):
    arn: str
    meshName: str
    virtualRouterName: str


class _AppMeshListVirtualServicesOutput(TypedDict):
    virtualServices: List[AppMeshVirtualServiceRef]


class AppMeshListVirtualServicesOutput(_AppMeshListVirtualServicesOutput, total=False):
    nextToken: str


class AppMeshVirtualServiceRef(TypedDict):
    arn: str
    meshName: str
    virtualServiceName: str


class AppMeshTagResourceOutput(TypedDict, total=False):
    pass


class AppMeshUntagResourceOutput(TypedDict, total=False):
    pass


class AppMeshUpdateMeshOutput(TypedDict):
    mesh: AppMeshMeshData


class AppMeshUpdateRouteOutput(TypedDict):
    route: AppMeshRouteData


class AppMeshUpdateVirtualNodeOutput(TypedDict):
    virtualNode: AppMeshVirtualNodeData


class AppMeshUpdateVirtualRouterOutput(TypedDict):
    virtualRouter: AppMeshVirtualRouterData


class AppMeshUpdateVirtualServiceOutput(TypedDict):
    virtualService: AppMeshVirtualServiceData


class AppStream(BaseClient):
    def associate_fleet(self, *,
        FleetName: str,
        StackName: str
    ) -> AppStreamAssociateFleetResult: ...

    def batch_associate_user_stack(self, *,
        UserStackAssociations: List[AppStreamUserStackAssociation]
    ) -> AppStreamBatchAssociateUserStackResult: ...

    def batch_disassociate_user_stack(self, *,
        UserStackAssociations: List[AppStreamUserStackAssociation]
    ) -> AppStreamBatchDisassociateUserStackResult: ...

    def copy_image(self, *,
        SourceImageName: str,
        DestinationImageName: str,
        DestinationRegion: str,
        DestinationImageDescription: str = ...
    ) -> AppStreamCopyImageResponse: ...

    def create_directory_config(self, *,
        DirectoryName: str,
        OrganizationalUnitDistinguishedNames: List[str],
        ServiceAccountCredentials: AppStreamServiceAccountCredentials
    ) -> AppStreamCreateDirectoryConfigResult: ...

    def create_fleet(self, *,
        Name: str,
        InstanceType: str,
        ComputeCapacity: AppStreamComputeCapacity,
        ImageName: str = ...,
        ImageArn: str = ...,
        FleetType: str = ...,
        VpcConfig: AppStreamVpcConfig = ...,
        MaxUserDurationInSeconds: int = ...,
        DisconnectTimeoutInSeconds: int = ...,
        Description: str = ...,
        DisplayName: str = ...,
        EnableDefaultInternetAccess: bool = ...,
        DomainJoinInfo: AppStreamDomainJoinInfo = ...,
        Tags: Dict[str, str] = ...
    ) -> AppStreamCreateFleetResult: ...

    def create_image_builder(self, *,
        Name: str,
        InstanceType: str,
        ImageName: str = ...,
        ImageArn: str = ...,
        Description: str = ...,
        DisplayName: str = ...,
        VpcConfig: AppStreamVpcConfig = ...,
        EnableDefaultInternetAccess: bool = ...,
        DomainJoinInfo: AppStreamDomainJoinInfo = ...,
        AppstreamAgentVersion: str = ...,
        Tags: Dict[str, str] = ...
    ) -> AppStreamCreateImageBuilderResult: ...

    def create_image_builder_streaming_url(self, *,
        Name: str,
        Validity: int = ...
    ) -> AppStreamCreateImageBuilderStreamingURLResult: ...

    def create_stack(self, *,
        Name: str,
        Description: str = ...,
        DisplayName: str = ...,
        StorageConnectors: List[AppStreamStorageConnector] = ...,
        RedirectURL: str = ...,
        FeedbackURL: str = ...,
        UserSettings: List[AppStreamUserSetting] = ...,
        ApplicationSettings: AppStreamApplicationSettings = ...,
        Tags: Dict[str, str] = ...
    ) -> AppStreamCreateStackResult: ...

    def create_streaming_url(self, *,
        StackName: str,
        FleetName: str,
        UserId: str,
        ApplicationId: str = ...,
        Validity: int = ...,
        SessionContext: str = ...
    ) -> AppStreamCreateStreamingURLResult: ...

    def create_user(self, *,
        UserName: str,
        AuthenticationType: str,
        MessageAction: str = ...,
        FirstName: str = ...,
        LastName: str = ...
    ) -> AppStreamCreateUserResult: ...

    def delete_directory_config(self, *,
        DirectoryName: str
    ) -> AppStreamDeleteDirectoryConfigResult: ...

    def delete_fleet(self, *,
        Name: str
    ) -> AppStreamDeleteFleetResult: ...

    def delete_image(self, *,
        Name: str
    ) -> AppStreamDeleteImageResult: ...

    def delete_image_builder(self, *,
        Name: str
    ) -> AppStreamDeleteImageBuilderResult: ...

    def delete_image_permissions(self, *,
        Name: str,
        SharedAccountId: str
    ) -> AppStreamDeleteImagePermissionsResult: ...

    def delete_stack(self, *,
        Name: str
    ) -> AppStreamDeleteStackResult: ...

    def delete_user(self, *,
        UserName: str,
        AuthenticationType: str
    ) -> AppStreamDeleteUserResult: ...

    def describe_directory_configs(self, *,
        DirectoryNames: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> AppStreamDescribeDirectoryConfigsResult: ...

    def describe_fleets(self, *,
        Names: List[str] = ...,
        NextToken: str = ...
    ) -> AppStreamDescribeFleetsResult: ...

    def describe_image_builders(self, *,
        Names: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> AppStreamDescribeImageBuildersResult: ...

    def describe_image_permissions(self, *,
        Name: str,
        MaxResults: int = ...,
        SharedAwsAccountIds: List[str] = ...,
        NextToken: str = ...
    ) -> AppStreamDescribeImagePermissionsResult: ...

    def describe_images(self, *,
        Names: List[str] = ...,
        Arns: List[str] = ...,
        Type: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AppStreamDescribeImagesResult: ...

    def describe_sessions(self, *,
        StackName: str,
        FleetName: str,
        UserId: str = ...,
        NextToken: str = ...,
        Limit: int = ...,
        AuthenticationType: str = ...
    ) -> AppStreamDescribeSessionsResult: ...

    def describe_stacks(self, *,
        Names: List[str] = ...,
        NextToken: str = ...
    ) -> AppStreamDescribeStacksResult: ...

    def describe_user_stack_associations(self, *,
        StackName: str = ...,
        UserName: str = ...,
        AuthenticationType: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> AppStreamDescribeUserStackAssociationsResult: ...

    def describe_users(self, *,
        AuthenticationType: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> AppStreamDescribeUsersResult: ...

    def disable_user(self, *,
        UserName: str,
        AuthenticationType: str
    ) -> AppStreamDisableUserResult: ...

    def disassociate_fleet(self, *,
        FleetName: str,
        StackName: str
    ) -> AppStreamDisassociateFleetResult: ...

    def enable_user(self, *,
        UserName: str,
        AuthenticationType: str
    ) -> AppStreamEnableUserResult: ...

    def expire_session(self, *,
        SessionId: str
    ) -> AppStreamExpireSessionResult: ...

    def list_associated_fleets(self, *,
        StackName: str,
        NextToken: str = ...
    ) -> AppStreamListAssociatedFleetsResult: ...

    def list_associated_stacks(self, *,
        FleetName: str,
        NextToken: str = ...
    ) -> AppStreamListAssociatedStacksResult: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> AppStreamListTagsForResourceResponse: ...

    def start_fleet(self, *,
        Name: str
    ) -> AppStreamStartFleetResult: ...

    def start_image_builder(self, *,
        Name: str,
        AppstreamAgentVersion: str = ...
    ) -> AppStreamStartImageBuilderResult: ...

    def stop_fleet(self, *,
        Name: str
    ) -> AppStreamStopFleetResult: ...

    def stop_image_builder(self, *,
        Name: str
    ) -> AppStreamStopImageBuilderResult: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: Dict[str, str]
    ) -> AppStreamTagResourceResponse: ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ) -> AppStreamUntagResourceResponse: ...

    def update_directory_config(self, *,
        DirectoryName: str,
        OrganizationalUnitDistinguishedNames: List[str] = ...,
        ServiceAccountCredentials: AppStreamServiceAccountCredentials = ...
    ) -> AppStreamUpdateDirectoryConfigResult: ...

    def update_fleet(self, *,
        ImageName: str = ...,
        ImageArn: str = ...,
        Name: str = ...,
        InstanceType: str = ...,
        ComputeCapacity: AppStreamComputeCapacity = ...,
        VpcConfig: AppStreamVpcConfig = ...,
        MaxUserDurationInSeconds: int = ...,
        DisconnectTimeoutInSeconds: int = ...,
        DeleteVpcConfig: bool = ...,
        Description: str = ...,
        DisplayName: str = ...,
        EnableDefaultInternetAccess: bool = ...,
        DomainJoinInfo: AppStreamDomainJoinInfo = ...,
        AttributesToDelete: List[str] = ...
    ) -> AppStreamUpdateFleetResult: ...

    def update_image_permissions(self, *,
        Name: str,
        SharedAccountId: str,
        ImagePermissions: AppStreamImagePermissions
    ) -> AppStreamUpdateImagePermissionsResult: ...

    def update_stack(self, *,
        Name: str,
        DisplayName: str = ...,
        Description: str = ...,
        StorageConnectors: List[AppStreamStorageConnector] = ...,
        DeleteStorageConnectors: bool = ...,
        RedirectURL: str = ...,
        FeedbackURL: str = ...,
        AttributesToDelete: List[str] = ...,
        UserSettings: List[AppStreamUserSetting] = ...,
        ApplicationSettings: AppStreamApplicationSettings = ...
    ) -> AppStreamUpdateStackResult: ...


class AppStreamAssociateFleetResult(TypedDict, total=False):
    pass


class _AppStreamUserStackAssociation(TypedDict):
    StackName: str
    UserName: str
    AuthenticationType: str


class AppStreamUserStackAssociation(_AppStreamUserStackAssociation, total=False):
    SendEmailNotification: bool


class AppStreamBatchAssociateUserStackResult(TypedDict, total=False):
    errors: List[AppStreamUserStackAssociationError]


class AppStreamUserStackAssociationError(TypedDict, total=False):
    UserStackAssociation: AppStreamUserStackAssociation
    ErrorCode: str
    ErrorMessage: str


class AppStreamBatchDisassociateUserStackResult(TypedDict, total=False):
    errors: List[AppStreamUserStackAssociationError]


class AppStreamCopyImageResponse(TypedDict, total=False):
    DestinationImageName: str


class AppStreamServiceAccountCredentials(TypedDict):
    AccountName: str
    AccountPassword: str


class AppStreamCreateDirectoryConfigResult(TypedDict, total=False):
    DirectoryConfig: AppStreamDirectoryConfig


class _AppStreamDirectoryConfig(TypedDict):
    DirectoryName: str


class AppStreamDirectoryConfig(_AppStreamDirectoryConfig, total=False):
    OrganizationalUnitDistinguishedNames: List[str]
    ServiceAccountCredentials: AppStreamServiceAccountCredentials
    CreatedTime: datetime.datetime


class AppStreamComputeCapacity(TypedDict):
    DesiredInstances: int


class AppStreamVpcConfig(TypedDict, total=False):
    SubnetIds: List[str]
    SecurityGroupIds: List[str]


class AppStreamDomainJoinInfo(TypedDict, total=False):
    DirectoryName: str
    OrganizationalUnitDistinguishedName: str


class AppStreamCreateFleetResult(TypedDict, total=False):
    Fleet: AppStreamFleet


class _AppStreamFleet(TypedDict):
    Arn: str
    Name: str
    InstanceType: str
    ComputeCapacityStatus: AppStreamComputeCapacityStatus
    State: str


class AppStreamFleet(_AppStreamFleet, total=False):
    DisplayName: str
    Description: str
    ImageName: str
    ImageArn: str
    FleetType: str
    MaxUserDurationInSeconds: int
    DisconnectTimeoutInSeconds: int
    VpcConfig: AppStreamVpcConfig
    CreatedTime: datetime.datetime
    FleetErrors: List[AppStreamFleetError]
    EnableDefaultInternetAccess: bool
    DomainJoinInfo: AppStreamDomainJoinInfo


class _AppStreamComputeCapacityStatus(TypedDict):
    Desired: int


class AppStreamComputeCapacityStatus(_AppStreamComputeCapacityStatus, total=False):
    Running: int
    InUse: int
    Available: int


class AppStreamFleetError(TypedDict, total=False):
    ErrorCode: str
    ErrorMessage: str


class AppStreamCreateImageBuilderResult(TypedDict, total=False):
    ImageBuilder: AppStreamImageBuilder


class _AppStreamImageBuilder(TypedDict):
    Name: str


class AppStreamImageBuilder(_AppStreamImageBuilder, total=False):
    Arn: str
    ImageArn: str
    Description: str
    DisplayName: str
    VpcConfig: AppStreamVpcConfig
    InstanceType: str
    Platform: str
    State: str
    StateChangeReason: AppStreamImageBuilderStateChangeReason
    CreatedTime: datetime.datetime
    EnableDefaultInternetAccess: bool
    DomainJoinInfo: AppStreamDomainJoinInfo
    ImageBuilderErrors: List[AppStreamResourceError]
    AppstreamAgentVersion: str


class AppStreamImageBuilderStateChangeReason(TypedDict, total=False):
    Code: str
    Message: str


class AppStreamResourceError(TypedDict, total=False):
    ErrorCode: str
    ErrorMessage: str
    ErrorTimestamp: datetime.datetime


class AppStreamCreateImageBuilderStreamingURLResult(TypedDict, total=False):
    StreamingURL: str
    Expires: datetime.datetime


class _AppStreamStorageConnector(TypedDict):
    ConnectorType: str


class AppStreamStorageConnector(_AppStreamStorageConnector, total=False):
    ResourceIdentifier: str
    Domains: List[str]


class AppStreamUserSetting(TypedDict):
    Action: str
    Permission: str


class _AppStreamApplicationSettings(TypedDict):
    Enabled: bool


class AppStreamApplicationSettings(_AppStreamApplicationSettings, total=False):
    SettingsGroup: str


class AppStreamCreateStackResult(TypedDict, total=False):
    Stack: AppStreamStack


class _AppStreamStack(TypedDict):
    Name: str


class AppStreamStack(_AppStreamStack, total=False):
    Arn: str
    Description: str
    DisplayName: str
    CreatedTime: datetime.datetime
    StorageConnectors: List[AppStreamStorageConnector]
    RedirectURL: str
    FeedbackURL: str
    StackErrors: List[AppStreamStackError]
    UserSettings: List[AppStreamUserSetting]
    ApplicationSettings: AppStreamApplicationSettingsResponse


class AppStreamStackError(TypedDict, total=False):
    ErrorCode: str
    ErrorMessage: str


class AppStreamApplicationSettingsResponse(TypedDict, total=False):
    Enabled: bool
    SettingsGroup: str
    S3BucketName: str


class AppStreamCreateStreamingURLResult(TypedDict, total=False):
    StreamingURL: str
    Expires: datetime.datetime


class AppStreamCreateUserResult(TypedDict, total=False):
    pass


class AppStreamDeleteDirectoryConfigResult(TypedDict, total=False):
    pass


class AppStreamDeleteFleetResult(TypedDict, total=False):
    pass


class AppStreamDeleteImageResult(TypedDict, total=False):
    Image: AppStreamImage


class _AppStreamImage(TypedDict):
    Name: str


class AppStreamImage(_AppStreamImage, total=False):
    Arn: str
    BaseImageArn: str
    DisplayName: str
    State: str
    Visibility: str
    ImageBuilderSupported: bool
    Platform: str
    Description: str
    StateChangeReason: AppStreamImageStateChangeReason
    Applications: List[AppStreamApplication]
    CreatedTime: datetime.datetime
    PublicBaseImageReleasedDate: datetime.datetime
    AppstreamAgentVersion: str
    ImagePermissions: AppStreamImagePermissions


class AppStreamImageStateChangeReason(TypedDict, total=False):
    Code: str
    Message: str


class AppStreamApplication(TypedDict, total=False):
    Name: str
    DisplayName: str
    IconURL: str
    LaunchPath: str
    LaunchParameters: str
    Enabled: bool
    Metadata: Dict[str, str]


class AppStreamImagePermissions(TypedDict, total=False):
    allowFleet: bool
    allowImageBuilder: bool


class AppStreamDeleteImageBuilderResult(TypedDict, total=False):
    ImageBuilder: AppStreamImageBuilder


class AppStreamDeleteImagePermissionsResult(TypedDict, total=False):
    pass


class AppStreamDeleteStackResult(TypedDict, total=False):
    pass


class AppStreamDeleteUserResult(TypedDict, total=False):
    pass


class AppStreamDescribeDirectoryConfigsResult(TypedDict, total=False):
    DirectoryConfigs: List[AppStreamDirectoryConfig]
    NextToken: str


class AppStreamDescribeFleetsResult(TypedDict, total=False):
    Fleets: List[AppStreamFleet]
    NextToken: str


class AppStreamDescribeImageBuildersResult(TypedDict, total=False):
    ImageBuilders: List[AppStreamImageBuilder]
    NextToken: str


class AppStreamDescribeImagePermissionsResult(TypedDict, total=False):
    Name: str
    SharedImagePermissionsList: List[AppStreamSharedImagePermissions]
    NextToken: str


class AppStreamSharedImagePermissions(TypedDict):
    sharedAccountId: str
    imagePermissions: AppStreamImagePermissions


class AppStreamDescribeImagesResult(TypedDict, total=False):
    Images: List[AppStreamImage]
    NextToken: str


class AppStreamDescribeSessionsResult(TypedDict, total=False):
    Sessions: List[AppStreamSession]
    NextToken: str


class _AppStreamSession(TypedDict):
    Id: str
    UserId: str
    StackName: str
    FleetName: str
    State: str


class AppStreamSession(_AppStreamSession, total=False):
    ConnectionState: str
    StartTime: datetime.datetime
    MaxExpirationTime: datetime.datetime
    AuthenticationType: str
    NetworkAccessConfiguration: AppStreamNetworkAccessConfiguration


class AppStreamNetworkAccessConfiguration(TypedDict, total=False):
    EniPrivateIpAddress: str
    EniId: str


class AppStreamDescribeStacksResult(TypedDict, total=False):
    Stacks: List[AppStreamStack]
    NextToken: str


class AppStreamDescribeUserStackAssociationsResult(TypedDict, total=False):
    UserStackAssociations: List[AppStreamUserStackAssociation]
    NextToken: str


class AppStreamDescribeUsersResult(TypedDict, total=False):
    Users: List[AppStreamUser]
    NextToken: str


class _AppStreamUser(TypedDict):
    AuthenticationType: str


class AppStreamUser(_AppStreamUser, total=False):
    Arn: str
    UserName: str
    Enabled: bool
    Status: str
    FirstName: str
    LastName: str
    CreatedTime: datetime.datetime


class AppStreamDisableUserResult(TypedDict, total=False):
    pass


class AppStreamDisassociateFleetResult(TypedDict, total=False):
    pass


class AppStreamEnableUserResult(TypedDict, total=False):
    pass


class AppStreamExpireSessionResult(TypedDict, total=False):
    pass


class AppStreamListAssociatedFleetsResult(TypedDict, total=False):
    Names: List[str]
    NextToken: str


class AppStreamListAssociatedStacksResult(TypedDict, total=False):
    Names: List[str]
    NextToken: str


class AppStreamListTagsForResourceResponse(TypedDict, total=False):
    Tags: Dict[str, str]


class AppStreamStartFleetResult(TypedDict, total=False):
    pass


class AppStreamStartImageBuilderResult(TypedDict, total=False):
    ImageBuilder: AppStreamImageBuilder


class AppStreamStopFleetResult(TypedDict, total=False):
    pass


class AppStreamStopImageBuilderResult(TypedDict, total=False):
    ImageBuilder: AppStreamImageBuilder


class AppStreamTagResourceResponse(TypedDict, total=False):
    pass


class AppStreamUntagResourceResponse(TypedDict, total=False):
    pass


class AppStreamUpdateDirectoryConfigResult(TypedDict, total=False):
    DirectoryConfig: AppStreamDirectoryConfig


class AppStreamUpdateFleetResult(TypedDict, total=False):
    Fleet: AppStreamFleet


class AppStreamUpdateImagePermissionsResult(TypedDict, total=False):
    pass


class AppStreamUpdateStackResult(TypedDict, total=False):
    Stack: AppStreamStack


class AppSync(BaseClient):
    def create_api_key(self, *,
        apiId: str,
        description: str = ...,
        expires: int = ...
    ) -> AppSyncCreateApiKeyResponse: ...

    def create_data_source(self, *,
        apiId: str,
        name: str,
        type: str,
        description: str = ...,
        serviceRoleArn: str = ...,
        dynamodbConfig: AppSyncDynamodbDataSourceConfig = ...,
        lambdaConfig: AppSyncLambdaDataSourceConfig = ...,
        elasticsearchConfig: AppSyncElasticsearchDataSourceConfig = ...,
        httpConfig: AppSyncHttpDataSourceConfig = ...,
        relationalDatabaseConfig: AppSyncRelationalDatabaseDataSourceConfig = ...
    ) -> AppSyncCreateDataSourceResponse: ...

    def create_function(self, *,
        apiId: str,
        name: str,
        dataSourceName: str,
        requestMappingTemplate: str,
        functionVersion: str,
        description: str = ...,
        responseMappingTemplate: str = ...
    ) -> AppSyncCreateFunctionResponse: ...

    def create_graphql_api(self, *,
        name: str,
        authenticationType: str,
        logConfig: AppSyncLogConfig = ...,
        userPoolConfig: AppSyncUserPoolConfig = ...,
        openIDConnectConfig: AppSyncOpenIDConnectConfig = ...,
        tags: Dict[str, str] = ...,
        additionalAuthenticationProviders: List[AppSyncAdditionalAuthenticationProvider] = ...
    ) -> AppSyncCreateGraphqlApiResponse: ...

    def create_resolver(self, *,
        apiId: str,
        typeName: str,
        fieldName: str,
        requestMappingTemplate: str,
        dataSourceName: str = ...,
        responseMappingTemplate: str = ...,
        kind: str = ...,
        pipelineConfig: AppSyncPipelineConfig = ...
    ) -> AppSyncCreateResolverResponse: ...

    def create_type(self, *,
        apiId: str,
        definition: str,
        format: str
    ) -> AppSyncCreateTypeResponse: ...

    def delete_api_key(self, *,
        apiId: str,
        id: str
    ) -> AppSyncDeleteApiKeyResponse: ...

    def delete_data_source(self, *,
        apiId: str,
        name: str
    ) -> AppSyncDeleteDataSourceResponse: ...

    def delete_function(self, *,
        apiId: str,
        functionId: str
    ) -> AppSyncDeleteFunctionResponse: ...

    def delete_graphql_api(self, *,
        apiId: str
    ) -> AppSyncDeleteGraphqlApiResponse: ...

    def delete_resolver(self, *,
        apiId: str,
        typeName: str,
        fieldName: str
    ) -> AppSyncDeleteResolverResponse: ...

    def delete_type(self, *,
        apiId: str,
        typeName: str
    ) -> AppSyncDeleteTypeResponse: ...

    def get_data_source(self, *,
        apiId: str,
        name: str
    ) -> AppSyncGetDataSourceResponse: ...

    def get_function(self, *,
        apiId: str,
        functionId: str
    ) -> AppSyncGetFunctionResponse: ...

    def get_graphql_api(self, *,
        apiId: str
    ) -> AppSyncGetGraphqlApiResponse: ...

    def get_introspection_schema(self, *,
        apiId: str,
        format: str,
        includeDirectives: bool = ...
    ) -> AppSyncGetIntrospectionSchemaResponse: ...

    def get_resolver(self, *,
        apiId: str,
        typeName: str,
        fieldName: str
    ) -> AppSyncGetResolverResponse: ...

    def get_schema_creation_status(self, *,
        apiId: str
    ) -> AppSyncGetSchemaCreationStatusResponse: ...

    def get_type(self, *,
        apiId: str,
        typeName: str,
        format: str
    ) -> AppSyncGetTypeResponse: ...

    def list_api_keys(self, *,
        apiId: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> AppSyncListApiKeysResponse: ...

    def list_data_sources(self, *,
        apiId: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> AppSyncListDataSourcesResponse: ...

    def list_functions(self, *,
        apiId: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> AppSyncListFunctionsResponse: ...

    def list_graphql_apis(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> AppSyncListGraphqlApisResponse: ...

    def list_resolvers(self, *,
        apiId: str,
        typeName: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> AppSyncListResolversResponse: ...

    def list_resolvers_by_function(self, *,
        apiId: str,
        functionId: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> AppSyncListResolversByFunctionResponse: ...

    def list_tags_for_resource(self, *,
        resourceArn: str
    ) -> AppSyncListTagsForResourceResponse: ...

    def list_types(self, *,
        apiId: str,
        format: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> AppSyncListTypesResponse: ...

    def start_schema_creation(self, *,
        apiId: str,
        definition: bytes
    ) -> AppSyncStartSchemaCreationResponse: ...

    def tag_resource(self, *,
        resourceArn: str,
        tags: Dict[str, str]
    ) -> AppSyncTagResourceResponse: ...

    def untag_resource(self, *,
        resourceArn: str,
        tagKeys: List[str]
    ) -> AppSyncUntagResourceResponse: ...

    def update_api_key(self, *,
        apiId: str,
        id: str,
        description: str = ...,
        expires: int = ...
    ) -> AppSyncUpdateApiKeyResponse: ...

    def update_data_source(self, *,
        apiId: str,
        name: str,
        type: str,
        description: str = ...,
        serviceRoleArn: str = ...,
        dynamodbConfig: AppSyncDynamodbDataSourceConfig = ...,
        lambdaConfig: AppSyncLambdaDataSourceConfig = ...,
        elasticsearchConfig: AppSyncElasticsearchDataSourceConfig = ...,
        httpConfig: AppSyncHttpDataSourceConfig = ...,
        relationalDatabaseConfig: AppSyncRelationalDatabaseDataSourceConfig = ...
    ) -> AppSyncUpdateDataSourceResponse: ...

    def update_function(self, *,
        apiId: str,
        name: str,
        functionId: str,
        dataSourceName: str,
        requestMappingTemplate: str,
        functionVersion: str,
        description: str = ...,
        responseMappingTemplate: str = ...
    ) -> AppSyncUpdateFunctionResponse: ...

    def update_graphql_api(self, *,
        apiId: str,
        name: str,
        logConfig: AppSyncLogConfig = ...,
        authenticationType: str = ...,
        userPoolConfig: AppSyncUserPoolConfig = ...,
        openIDConnectConfig: AppSyncOpenIDConnectConfig = ...,
        additionalAuthenticationProviders: List[AppSyncAdditionalAuthenticationProvider] = ...
    ) -> AppSyncUpdateGraphqlApiResponse: ...

    def update_resolver(self, *,
        apiId: str,
        typeName: str,
        fieldName: str,
        requestMappingTemplate: str,
        dataSourceName: str = ...,
        responseMappingTemplate: str = ...,
        kind: str = ...,
        pipelineConfig: AppSyncPipelineConfig = ...
    ) -> AppSyncUpdateResolverResponse: ...

    def update_type(self, *,
        apiId: str,
        typeName: str,
        format: str,
        definition: str = ...
    ) -> AppSyncUpdateTypeResponse: ...


class AppSyncCreateApiKeyResponse(TypedDict, total=False):
    apiKey: AppSyncApiKey


class AppSyncApiKey(TypedDict, total=False):
    id: str
    description: str
    expires: int


class _AppSyncDynamodbDataSourceConfig(TypedDict):
    tableName: str
    awsRegion: str


class AppSyncDynamodbDataSourceConfig(_AppSyncDynamodbDataSourceConfig, total=False):
    useCallerCredentials: bool


class AppSyncLambdaDataSourceConfig(TypedDict):
    lambdaFunctionArn: str


class AppSyncElasticsearchDataSourceConfig(TypedDict):
    endpoint: str
    awsRegion: str


class AppSyncHttpDataSourceConfig(TypedDict, total=False):
    endpoint: str
    authorizationConfig: AppSyncAuthorizationConfig


class _AppSyncAuthorizationConfig(TypedDict):
    authorizationType: str


class AppSyncAuthorizationConfig(_AppSyncAuthorizationConfig, total=False):
    awsIamConfig: AppSyncAwsIamConfig


class AppSyncAwsIamConfig(TypedDict, total=False):
    signingRegion: str
    signingServiceName: str


class AppSyncRelationalDatabaseDataSourceConfig(TypedDict, total=False):
    relationalDatabaseSourceType: str
    rdsHttpEndpointConfig: AppSyncRdsHttpEndpointConfig


class AppSyncRdsHttpEndpointConfig(TypedDict, total=False):
    awsRegion: str
    dbClusterIdentifier: str
    databaseName: str
    schema: str
    awsSecretStoreArn: str


class AppSyncCreateDataSourceResponse(TypedDict, total=False):
    dataSource: AppSyncDataSource


class AppSyncDataSource(TypedDict, total=False):
    dataSourceArn: str
    name: str
    description: str
    type: str
    serviceRoleArn: str
    dynamodbConfig: AppSyncDynamodbDataSourceConfig
    lambdaConfig: AppSyncLambdaDataSourceConfig
    elasticsearchConfig: AppSyncElasticsearchDataSourceConfig
    httpConfig: AppSyncHttpDataSourceConfig
    relationalDatabaseConfig: AppSyncRelationalDatabaseDataSourceConfig


class AppSyncCreateFunctionResponse(TypedDict, total=False):
    functionConfiguration: AppSyncFunctionConfiguration


class AppSyncFunctionConfiguration(TypedDict, total=False):
    functionId: str
    functionArn: str
    name: str
    description: str
    dataSourceName: str
    requestMappingTemplate: str
    responseMappingTemplate: str
    functionVersion: str


class AppSyncLogConfig(TypedDict):
    fieldLogLevel: str
    cloudWatchLogsRoleArn: str


class _AppSyncUserPoolConfig(TypedDict):
    userPoolId: str
    awsRegion: str
    defaultAction: str


class AppSyncUserPoolConfig(_AppSyncUserPoolConfig, total=False):
    appIdClientRegex: str


class _AppSyncOpenIDConnectConfig(TypedDict):
    issuer: str


class AppSyncOpenIDConnectConfig(_AppSyncOpenIDConnectConfig, total=False):
    clientId: str
    iatTTL: int
    authTTL: int


class AppSyncAdditionalAuthenticationProvider(TypedDict, total=False):
    authenticationType: str
    openIDConnectConfig: AppSyncOpenIDConnectConfig
    userPoolConfig: AppSyncCognitoUserPoolConfig


class _AppSyncCognitoUserPoolConfig(TypedDict):
    userPoolId: str
    awsRegion: str


class AppSyncCognitoUserPoolConfig(_AppSyncCognitoUserPoolConfig, total=False):
    appIdClientRegex: str


class AppSyncCreateGraphqlApiResponse(TypedDict, total=False):
    graphqlApi: AppSyncGraphqlApi


class AppSyncGraphqlApi(TypedDict, total=False):
    name: str
    apiId: str
    authenticationType: str
    logConfig: AppSyncLogConfig
    userPoolConfig: AppSyncUserPoolConfig
    openIDConnectConfig: AppSyncOpenIDConnectConfig
    arn: str
    uris: Dict[str, str]
    tags: Dict[str, str]
    additionalAuthenticationProviders: List[AppSyncAdditionalAuthenticationProvider]


class AppSyncPipelineConfig(TypedDict, total=False):
    functions: List[str]


class AppSyncCreateResolverResponse(TypedDict, total=False):
    resolver: AppSyncResolver


class AppSyncResolver(TypedDict, total=False):
    typeName: str
    fieldName: str
    dataSourceName: str
    resolverArn: str
    requestMappingTemplate: str
    responseMappingTemplate: str
    kind: str
    pipelineConfig: AppSyncPipelineConfig


class AppSyncCreateTypeResponse(TypedDict, total=False):
    type: AppSyncType


class AppSyncType(TypedDict, total=False):
    name: str
    description: str
    arn: str
    definition: str
    format: str


class AppSyncDeleteApiKeyResponse(TypedDict, total=False):
    pass


class AppSyncDeleteDataSourceResponse(TypedDict, total=False):
    pass


class AppSyncDeleteFunctionResponse(TypedDict, total=False):
    pass


class AppSyncDeleteGraphqlApiResponse(TypedDict, total=False):
    pass


class AppSyncDeleteResolverResponse(TypedDict, total=False):
    pass


class AppSyncDeleteTypeResponse(TypedDict, total=False):
    pass


class AppSyncGetDataSourceResponse(TypedDict, total=False):
    dataSource: AppSyncDataSource


class AppSyncGetFunctionResponse(TypedDict, total=False):
    functionConfiguration: AppSyncFunctionConfiguration


class AppSyncGetGraphqlApiResponse(TypedDict, total=False):
    graphqlApi: AppSyncGraphqlApi


class AppSyncGetIntrospectionSchemaResponse(TypedDict, total=False):
    schema: bytes


class AppSyncGetResolverResponse(TypedDict, total=False):
    resolver: AppSyncResolver


class AppSyncGetSchemaCreationStatusResponse(TypedDict, total=False):
    status: str
    details: str


class AppSyncGetTypeResponse(TypedDict, total=False):
    type: AppSyncType


class AppSyncListApiKeysResponse(TypedDict, total=False):
    apiKeys: List[AppSyncApiKey]
    nextToken: str


class AppSyncListDataSourcesResponse(TypedDict, total=False):
    dataSources: List[AppSyncDataSource]
    nextToken: str


class AppSyncListFunctionsResponse(TypedDict, total=False):
    functions: List[AppSyncFunctionConfiguration]
    nextToken: str


class AppSyncListGraphqlApisResponse(TypedDict, total=False):
    graphqlApis: List[AppSyncGraphqlApi]
    nextToken: str


class AppSyncListResolversResponse(TypedDict, total=False):
    resolvers: List[AppSyncResolver]
    nextToken: str


class AppSyncListResolversByFunctionResponse(TypedDict, total=False):
    resolvers: List[AppSyncResolver]
    nextToken: str


class AppSyncListTagsForResourceResponse(TypedDict, total=False):
    tags: Dict[str, str]


class AppSyncListTypesResponse(TypedDict, total=False):
    types: List[AppSyncType]
    nextToken: str


class AppSyncStartSchemaCreationResponse(TypedDict, total=False):
    status: str


class AppSyncTagResourceResponse(TypedDict, total=False):
    pass


class AppSyncUntagResourceResponse(TypedDict, total=False):
    pass


class AppSyncUpdateApiKeyResponse(TypedDict, total=False):
    apiKey: AppSyncApiKey


class AppSyncUpdateDataSourceResponse(TypedDict, total=False):
    dataSource: AppSyncDataSource


class AppSyncUpdateFunctionResponse(TypedDict, total=False):
    functionConfiguration: AppSyncFunctionConfiguration


class AppSyncUpdateGraphqlApiResponse(TypedDict, total=False):
    graphqlApi: AppSyncGraphqlApi


class AppSyncUpdateResolverResponse(TypedDict, total=False):
    resolver: AppSyncResolver


class AppSyncUpdateTypeResponse(TypedDict, total=False):
    type: AppSyncType


class Athena(BaseClient):
    def batch_get_named_query(self, *,
        NamedQueryIds: List[str]
    ) -> AthenaBatchGetNamedQueryOutput: ...

    def batch_get_query_execution(self, *,
        QueryExecutionIds: List[str]
    ) -> AthenaBatchGetQueryExecutionOutput: ...

    def create_named_query(self, *,
        Name: str,
        Database: str,
        QueryString: str,
        Description: str = ...,
        ClientRequestToken: str = ...,
        WorkGroup: str = ...
    ) -> AthenaCreateNamedQueryOutput: ...

    def create_work_group(self, *,
        Name: str,
        Configuration: AthenaWorkGroupConfiguration = ...,
        Description: str = ...,
        Tags: List[AthenaTag] = ...
    ) -> AthenaCreateWorkGroupOutput: ...

    def delete_named_query(self, *,
        NamedQueryId: str
    ) -> AthenaDeleteNamedQueryOutput: ...

    def delete_work_group(self, *,
        WorkGroup: str,
        RecursiveDeleteOption: bool = ...
    ) -> AthenaDeleteWorkGroupOutput: ...

    def get_named_query(self, *,
        NamedQueryId: str
    ) -> AthenaGetNamedQueryOutput: ...

    def get_query_execution(self, *,
        QueryExecutionId: str
    ) -> AthenaGetQueryExecutionOutput: ...

    def get_query_results(self, *,
        QueryExecutionId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AthenaGetQueryResultsOutput: ...

    def get_work_group(self, *,
        WorkGroup: str
    ) -> AthenaGetWorkGroupOutput: ...

    def list_named_queries(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        WorkGroup: str = ...
    ) -> AthenaListNamedQueriesOutput: ...

    def list_query_executions(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        WorkGroup: str = ...
    ) -> AthenaListQueryExecutionsOutput: ...

    def list_tags_for_resource(self, *,
        ResourceARN: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AthenaListTagsForResourceOutput: ...

    def list_work_groups(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> AthenaListWorkGroupsOutput: ...

    def start_query_execution(self, *,
        QueryString: str,
        ClientRequestToken: str = ...,
        QueryExecutionContext: AthenaQueryExecutionContext = ...,
        ResultConfiguration: AthenaResultConfiguration = ...,
        WorkGroup: str = ...
    ) -> AthenaStartQueryExecutionOutput: ...

    def stop_query_execution(self, *,
        QueryExecutionId: str
    ) -> AthenaStopQueryExecutionOutput: ...

    def tag_resource(self, *,
        ResourceARN: str,
        Tags: List[AthenaTag]
    ) -> AthenaTagResourceOutput: ...

    def untag_resource(self, *,
        ResourceARN: str,
        TagKeys: List[str]
    ) -> AthenaUntagResourceOutput: ...

    def update_work_group(self, *,
        WorkGroup: str,
        Description: str = ...,
        ConfigurationUpdates: AthenaWorkGroupConfigurationUpdates = ...,
        State: str = ...
    ) -> AthenaUpdateWorkGroupOutput: ...


class AthenaBatchGetNamedQueryOutput(TypedDict, total=False):
    NamedQueries: List[AthenaNamedQuery]
    UnprocessedNamedQueryIds: List[AthenaUnprocessedNamedQueryId]


class _AthenaNamedQuery(TypedDict):
    Name: str
    Database: str
    QueryString: str


class AthenaNamedQuery(_AthenaNamedQuery, total=False):
    Description: str
    NamedQueryId: str
    WorkGroup: str


class AthenaUnprocessedNamedQueryId(TypedDict, total=False):
    NamedQueryId: str
    ErrorCode: str
    ErrorMessage: str


class AthenaBatchGetQueryExecutionOutput(TypedDict, total=False):
    QueryExecutions: List[AthenaQueryExecution]
    UnprocessedQueryExecutionIds: List[AthenaUnprocessedQueryExecutionId]


class AthenaQueryExecution(TypedDict, total=False):
    QueryExecutionId: str
    Query: str
    StatementType: str
    ResultConfiguration: AthenaResultConfiguration
    QueryExecutionContext: AthenaQueryExecutionContext
    Status: AthenaQueryExecutionStatus
    Statistics: AthenaQueryExecutionStatistics
    WorkGroup: str


class AthenaResultConfiguration(TypedDict, total=False):
    OutputLocation: str
    EncryptionConfiguration: AthenaEncryptionConfiguration


class _AthenaEncryptionConfiguration(TypedDict):
    EncryptionOption: str


class AthenaEncryptionConfiguration(_AthenaEncryptionConfiguration, total=False):
    KmsKey: str


class AthenaQueryExecutionContext(TypedDict, total=False):
    Database: str


class AthenaQueryExecutionStatus(TypedDict, total=False):
    State: str
    StateChangeReason: str
    SubmissionDateTime: datetime.datetime
    CompletionDateTime: datetime.datetime


class AthenaQueryExecutionStatistics(TypedDict, total=False):
    EngineExecutionTimeInMillis: int
    DataScannedInBytes: int


class AthenaUnprocessedQueryExecutionId(TypedDict, total=False):
    QueryExecutionId: str
    ErrorCode: str
    ErrorMessage: str


class AthenaCreateNamedQueryOutput(TypedDict, total=False):
    NamedQueryId: str


class AthenaWorkGroupConfiguration(TypedDict, total=False):
    ResultConfiguration: AthenaResultConfiguration
    EnforceWorkGroupConfiguration: bool
    PublishCloudWatchMetricsEnabled: bool
    BytesScannedCutoffPerQuery: int


class AthenaTag(TypedDict, total=False):
    Key: str
    Value: str


class AthenaCreateWorkGroupOutput(TypedDict, total=False):
    pass


class AthenaDeleteNamedQueryOutput(TypedDict, total=False):
    pass


class AthenaDeleteWorkGroupOutput(TypedDict, total=False):
    pass


class AthenaGetNamedQueryOutput(TypedDict, total=False):
    NamedQuery: AthenaNamedQuery


class AthenaGetQueryExecutionOutput(TypedDict, total=False):
    QueryExecution: AthenaQueryExecution


class AthenaGetQueryResultsOutput(TypedDict, total=False):
    UpdateCount: int
    ResultSet: AthenaResultSet
    NextToken: str


class AthenaResultSet(TypedDict, total=False):
    Rows: List[AthenaRow]
    ResultSetMetadata: AthenaResultSetMetadata


class AthenaRow(TypedDict, total=False):
    Data: List[AthenaDatum]


class AthenaDatum(TypedDict, total=False):
    VarCharValue: str


class AthenaResultSetMetadata(TypedDict, total=False):
    ColumnInfo: List[AthenaColumnInfo]


class _AthenaColumnInfo(TypedDict):
    Name: str
    Type: str


class AthenaColumnInfo(_AthenaColumnInfo, total=False):
    CatalogName: str
    SchemaName: str
    TableName: str
    Label: str
    Precision: int
    Scale: int
    Nullable: str
    CaseSensitive: bool


class AthenaGetWorkGroupOutput(TypedDict, total=False):
    WorkGroup: AthenaWorkGroup


class _AthenaWorkGroup(TypedDict):
    Name: str


class AthenaWorkGroup(_AthenaWorkGroup, total=False):
    State: str
    Configuration: AthenaWorkGroupConfiguration
    Description: str
    CreationTime: datetime.datetime


class AthenaListNamedQueriesOutput(TypedDict, total=False):
    NamedQueryIds: List[str]
    NextToken: str


class AthenaListQueryExecutionsOutput(TypedDict, total=False):
    QueryExecutionIds: List[str]
    NextToken: str


class AthenaListTagsForResourceOutput(TypedDict, total=False):
    Tags: List[AthenaTag]
    NextToken: str


class AthenaListWorkGroupsOutput(TypedDict, total=False):
    WorkGroups: List[AthenaWorkGroupSummary]
    NextToken: str


class AthenaWorkGroupSummary(TypedDict, total=False):
    Name: str
    State: str
    Description: str
    CreationTime: datetime.datetime


class AthenaStartQueryExecutionOutput(TypedDict, total=False):
    QueryExecutionId: str


class AthenaStopQueryExecutionOutput(TypedDict, total=False):
    pass


class AthenaTagResourceOutput(TypedDict, total=False):
    pass


class AthenaUntagResourceOutput(TypedDict, total=False):
    pass


class AthenaWorkGroupConfigurationUpdates(TypedDict, total=False):
    EnforceWorkGroupConfiguration: bool
    ResultConfigurationUpdates: AthenaResultConfigurationUpdates
    PublishCloudWatchMetricsEnabled: bool
    BytesScannedCutoffPerQuery: int
    RemoveBytesScannedCutoffPerQuery: bool


class AthenaResultConfigurationUpdates(TypedDict, total=False):
    OutputLocation: str
    RemoveOutputLocation: bool
    EncryptionConfiguration: AthenaEncryptionConfiguration
    RemoveEncryptionConfiguration: bool


class AthenaUpdateWorkGroupOutput(TypedDict, total=False):
    pass


class AutoScaling(BaseClient):
    def attach_instances(self, *,
        AutoScalingGroupName: str,
        InstanceIds: List[str] = ...
    ): ...

    def attach_load_balancer_target_groups(self, *,
        AutoScalingGroupName: str,
        TargetGroupARNs: List[str]
    ) -> AutoScalingAttachLoadBalancerTargetGroupsResultType: ...

    def attach_load_balancers(self, *,
        AutoScalingGroupName: str,
        LoadBalancerNames: List[str]
    ) -> AutoScalingAttachLoadBalancersResultType: ...

    def batch_delete_scheduled_action(self, *,
        AutoScalingGroupName: str,
        ScheduledActionNames: List[str]
    ) -> AutoScalingBatchDeleteScheduledActionAnswer: ...

    def batch_put_scheduled_update_group_action(self, *,
        AutoScalingGroupName: str,
        ScheduledUpdateGroupActions: List[AutoScalingScheduledUpdateGroupActionRequest]
    ) -> AutoScalingBatchPutScheduledUpdateGroupActionAnswer: ...

    def complete_lifecycle_action(self, *,
        LifecycleHookName: str,
        AutoScalingGroupName: str,
        LifecycleActionResult: str,
        LifecycleActionToken: str = ...,
        InstanceId: str = ...
    ) -> AutoScalingCompleteLifecycleActionAnswer: ...

    def create_auto_scaling_group(self, *,
        AutoScalingGroupName: str,
        MinSize: int,
        MaxSize: int,
        LaunchConfigurationName: str = ...,
        LaunchTemplate: AutoScalingLaunchTemplateSpecification = ...,
        MixedInstancesPolicy: AutoScalingMixedInstancesPolicy = ...,
        InstanceId: str = ...,
        DesiredCapacity: int = ...,
        DefaultCooldown: int = ...,
        AvailabilityZones: List[str] = ...,
        LoadBalancerNames: List[str] = ...,
        TargetGroupARNs: List[str] = ...,
        HealthCheckType: str = ...,
        HealthCheckGracePeriod: int = ...,
        PlacementGroup: str = ...,
        VPCZoneIdentifier: str = ...,
        TerminationPolicies: List[str] = ...,
        NewInstancesProtectedFromScaleIn: bool = ...,
        LifecycleHookSpecificationList: List[AutoScalingLifecycleHookSpecification] = ...,
        Tags: List[AutoScalingTag] = ...,
        ServiceLinkedRoleARN: str = ...
    ): ...

    def create_launch_configuration(self, *,
        LaunchConfigurationName: str,
        ImageId: str = ...,
        KeyName: str = ...,
        SecurityGroups: List[str] = ...,
        ClassicLinkVPCId: str = ...,
        ClassicLinkVPCSecurityGroups: List[str] = ...,
        UserData: str = ...,
        InstanceId: str = ...,
        InstanceType: str = ...,
        KernelId: str = ...,
        RamdiskId: str = ...,
        BlockDeviceMappings: List[AutoScalingBlockDeviceMapping] = ...,
        InstanceMonitoring: AutoScalingInstanceMonitoring = ...,
        SpotPrice: str = ...,
        IamInstanceProfile: str = ...,
        EbsOptimized: bool = ...,
        AssociatePublicIpAddress: bool = ...,
        PlacementTenancy: str = ...
    ): ...

    def create_or_update_tags(self, *,
        Tags: List[AutoScalingTag]
    ): ...

    def delete_auto_scaling_group(self, *,
        AutoScalingGroupName: str,
        ForceDelete: bool = ...
    ): ...

    def delete_launch_configuration(self, *,
        LaunchConfigurationName: str
    ): ...

    def delete_lifecycle_hook(self, *,
        LifecycleHookName: str,
        AutoScalingGroupName: str
    ) -> AutoScalingDeleteLifecycleHookAnswer: ...

    def delete_notification_configuration(self, *,
        AutoScalingGroupName: str,
        TopicARN: str
    ): ...

    def delete_policy(self, *,
        PolicyName: str,
        AutoScalingGroupName: str = ...
    ): ...

    def delete_scheduled_action(self, *,
        AutoScalingGroupName: str,
        ScheduledActionName: str
    ): ...

    def delete_tags(self, *,
        Tags: List[AutoScalingTag]
    ): ...

    def describe_account_limits(self) -> AutoScalingDescribeAccountLimitsAnswer: ...

    def describe_adjustment_types(self) -> AutoScalingDescribeAdjustmentTypesAnswer: ...

    def describe_auto_scaling_groups(self, *,
        AutoScalingGroupNames: List[str] = ...,
        NextToken: str = ...,
        MaxRecords: int = ...
    ) -> AutoScalingAutoScalingGroupsType: ...

    def describe_auto_scaling_instances(self, *,
        InstanceIds: List[str] = ...,
        MaxRecords: int = ...,
        NextToken: str = ...
    ) -> AutoScalingAutoScalingInstancesType: ...

    def describe_auto_scaling_notification_types(self) -> AutoScalingDescribeAutoScalingNotificationTypesAnswer: ...

    def describe_launch_configurations(self, *,
        LaunchConfigurationNames: List[str] = ...,
        NextToken: str = ...,
        MaxRecords: int = ...
    ) -> AutoScalingLaunchConfigurationsType: ...

    def describe_lifecycle_hook_types(self) -> AutoScalingDescribeLifecycleHookTypesAnswer: ...

    def describe_lifecycle_hooks(self, *,
        AutoScalingGroupName: str,
        LifecycleHookNames: List[str] = ...
    ) -> AutoScalingDescribeLifecycleHooksAnswer: ...

    def describe_load_balancer_target_groups(self, *,
        AutoScalingGroupName: str,
        NextToken: str = ...,
        MaxRecords: int = ...
    ) -> AutoScalingDescribeLoadBalancerTargetGroupsResponse: ...

    def describe_load_balancers(self, *,
        AutoScalingGroupName: str,
        NextToken: str = ...,
        MaxRecords: int = ...
    ) -> AutoScalingDescribeLoadBalancersResponse: ...

    def describe_metric_collection_types(self) -> AutoScalingDescribeMetricCollectionTypesAnswer: ...

    def describe_notification_configurations(self, *,
        AutoScalingGroupNames: List[str] = ...,
        NextToken: str = ...,
        MaxRecords: int = ...
    ) -> AutoScalingDescribeNotificationConfigurationsAnswer: ...

    def describe_policies(self, *,
        AutoScalingGroupName: str = ...,
        PolicyNames: List[str] = ...,
        PolicyTypes: List[str] = ...,
        NextToken: str = ...,
        MaxRecords: int = ...
    ) -> AutoScalingPoliciesType: ...

    def describe_scaling_activities(self, *,
        ActivityIds: List[str] = ...,
        AutoScalingGroupName: str = ...,
        MaxRecords: int = ...,
        NextToken: str = ...
    ) -> AutoScalingActivitiesType: ...

    def describe_scaling_process_types(self) -> AutoScalingProcessesType: ...

    def describe_scheduled_actions(self, *,
        AutoScalingGroupName: str = ...,
        ScheduledActionNames: List[str] = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        NextToken: str = ...,
        MaxRecords: int = ...
    ) -> AutoScalingScheduledActionsType: ...

    def describe_tags(self, *,
        Filters: List[AutoScalingFilter] = ...,
        NextToken: str = ...,
        MaxRecords: int = ...
    ) -> AutoScalingTagsType: ...

    def describe_termination_policy_types(self) -> AutoScalingDescribeTerminationPolicyTypesAnswer: ...

    def detach_instances(self, *,
        AutoScalingGroupName: str,
        ShouldDecrementDesiredCapacity: bool,
        InstanceIds: List[str] = ...
    ) -> AutoScalingDetachInstancesAnswer: ...

    def detach_load_balancer_target_groups(self, *,
        AutoScalingGroupName: str,
        TargetGroupARNs: List[str]
    ) -> AutoScalingDetachLoadBalancerTargetGroupsResultType: ...

    def detach_load_balancers(self, *,
        AutoScalingGroupName: str,
        LoadBalancerNames: List[str]
    ) -> AutoScalingDetachLoadBalancersResultType: ...

    def disable_metrics_collection(self, *,
        AutoScalingGroupName: str,
        Metrics: List[str] = ...
    ): ...

    def enable_metrics_collection(self, *,
        AutoScalingGroupName: str,
        Granularity: str,
        Metrics: List[str] = ...
    ): ...

    def enter_standby(self, *,
        AutoScalingGroupName: str,
        ShouldDecrementDesiredCapacity: bool,
        InstanceIds: List[str] = ...
    ) -> AutoScalingEnterStandbyAnswer: ...

    def execute_policy(self, *,
        PolicyName: str,
        AutoScalingGroupName: str = ...,
        HonorCooldown: bool = ...,
        MetricValue: float = ...,
        BreachThreshold: float = ...
    ): ...

    def exit_standby(self, *,
        AutoScalingGroupName: str,
        InstanceIds: List[str] = ...
    ) -> AutoScalingExitStandbyAnswer: ...

    def put_lifecycle_hook(self, *,
        LifecycleHookName: str,
        AutoScalingGroupName: str,
        LifecycleTransition: str = ...,
        RoleARN: str = ...,
        NotificationTargetARN: str = ...,
        NotificationMetadata: str = ...,
        HeartbeatTimeout: int = ...,
        DefaultResult: str = ...
    ) -> AutoScalingPutLifecycleHookAnswer: ...

    def put_notification_configuration(self, *,
        AutoScalingGroupName: str,
        TopicARN: str,
        NotificationTypes: List[str]
    ): ...

    def put_scaling_policy(self, *,
        AutoScalingGroupName: str,
        PolicyName: str,
        PolicyType: str = ...,
        AdjustmentType: str = ...,
        MinAdjustmentStep: int = ...,
        MinAdjustmentMagnitude: int = ...,
        ScalingAdjustment: int = ...,
        Cooldown: int = ...,
        MetricAggregationType: str = ...,
        StepAdjustments: List[AutoScalingStepAdjustment] = ...,
        EstimatedInstanceWarmup: int = ...,
        TargetTrackingConfiguration: AutoScalingTargetTrackingConfiguration = ...
    ) -> AutoScalingPolicyARNType: ...

    def put_scheduled_update_group_action(self, *,
        AutoScalingGroupName: str,
        ScheduledActionName: str,
        Time: datetime.datetime = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        Recurrence: str = ...,
        MinSize: int = ...,
        MaxSize: int = ...,
        DesiredCapacity: int = ...
    ): ...

    def record_lifecycle_action_heartbeat(self, *,
        LifecycleHookName: str,
        AutoScalingGroupName: str,
        LifecycleActionToken: str = ...,
        InstanceId: str = ...
    ) -> AutoScalingRecordLifecycleActionHeartbeatAnswer: ...

    def resume_processes(self, *,
        AutoScalingGroupName: str,
        ScalingProcesses: List[str] = ...
    ): ...

    def set_desired_capacity(self, *,
        AutoScalingGroupName: str,
        DesiredCapacity: int,
        HonorCooldown: bool = ...
    ): ...

    def set_instance_health(self, *,
        InstanceId: str,
        HealthStatus: str,
        ShouldRespectGracePeriod: bool = ...
    ): ...

    def set_instance_protection(self, *,
        InstanceIds: List[str],
        AutoScalingGroupName: str,
        ProtectedFromScaleIn: bool
    ) -> AutoScalingSetInstanceProtectionAnswer: ...

    def suspend_processes(self, *,
        AutoScalingGroupName: str,
        ScalingProcesses: List[str] = ...
    ): ...

    def terminate_instance_in_auto_scaling_group(self, *,
        InstanceId: str,
        ShouldDecrementDesiredCapacity: bool
    ) -> AutoScalingActivityType: ...

    def update_auto_scaling_group(self, *,
        AutoScalingGroupName: str,
        LaunchConfigurationName: str = ...,
        LaunchTemplate: AutoScalingLaunchTemplateSpecification = ...,
        MixedInstancesPolicy: AutoScalingMixedInstancesPolicy = ...,
        MinSize: int = ...,
        MaxSize: int = ...,
        DesiredCapacity: int = ...,
        DefaultCooldown: int = ...,
        AvailabilityZones: List[str] = ...,
        HealthCheckType: str = ...,
        HealthCheckGracePeriod: int = ...,
        PlacementGroup: str = ...,
        VPCZoneIdentifier: str = ...,
        TerminationPolicies: List[str] = ...,
        NewInstancesProtectedFromScaleIn: bool = ...,
        ServiceLinkedRoleARN: str = ...
    ): ...


class AutoScalingAttachLoadBalancerTargetGroupsResultType(TypedDict, total=False):
    pass


class AutoScalingAttachLoadBalancersResultType(TypedDict, total=False):
    pass


class AutoScalingBatchDeleteScheduledActionAnswer(TypedDict, total=False):
    FailedScheduledActions: List[AutoScalingFailedScheduledUpdateGroupActionRequest]


class _AutoScalingFailedScheduledUpdateGroupActionRequest(TypedDict):
    ScheduledActionName: str


class AutoScalingFailedScheduledUpdateGroupActionRequest(_AutoScalingFailedScheduledUpdateGroupActionRequest, total=False):
    ErrorCode: str
    ErrorMessage: str


class _AutoScalingScheduledUpdateGroupActionRequest(TypedDict):
    ScheduledActionName: str


class AutoScalingScheduledUpdateGroupActionRequest(_AutoScalingScheduledUpdateGroupActionRequest, total=False):
    StartTime: datetime.datetime
    EndTime: datetime.datetime
    Recurrence: str
    MinSize: int
    MaxSize: int
    DesiredCapacity: int


class AutoScalingBatchPutScheduledUpdateGroupActionAnswer(TypedDict, total=False):
    FailedScheduledUpdateGroupActions: List[AutoScalingFailedScheduledUpdateGroupActionRequest]


class AutoScalingCompleteLifecycleActionAnswer(TypedDict, total=False):
    pass


class AutoScalingLaunchTemplateSpecification(TypedDict, total=False):
    LaunchTemplateId: str
    LaunchTemplateName: str
    Version: str


class AutoScalingMixedInstancesPolicy(TypedDict, total=False):
    LaunchTemplate: AutoScalingLaunchTemplate
    InstancesDistribution: AutoScalingInstancesDistribution


class AutoScalingLaunchTemplate(TypedDict, total=False):
    LaunchTemplateSpecification: AutoScalingLaunchTemplateSpecification
    Overrides: List[AutoScalingLaunchTemplateOverrides]


class AutoScalingLaunchTemplateOverrides(TypedDict, total=False):
    InstanceType: str


class AutoScalingInstancesDistribution(TypedDict, total=False):
    OnDemandAllocationStrategy: str
    OnDemandBaseCapacity: int
    OnDemandPercentageAboveBaseCapacity: int
    SpotAllocationStrategy: str
    SpotInstancePools: int
    SpotMaxPrice: str


class _AutoScalingLifecycleHookSpecification(TypedDict):
    LifecycleHookName: str
    LifecycleTransition: str


class AutoScalingLifecycleHookSpecification(_AutoScalingLifecycleHookSpecification, total=False):
    NotificationMetadata: str
    HeartbeatTimeout: int
    DefaultResult: str
    NotificationTargetARN: str
    RoleARN: str


class _AutoScalingTag(TypedDict):
    Key: str


class AutoScalingTag(_AutoScalingTag, total=False):
    ResourceId: str
    ResourceType: str
    Value: str
    PropagateAtLaunch: bool


class _AutoScalingBlockDeviceMapping(TypedDict):
    DeviceName: str


class AutoScalingBlockDeviceMapping(_AutoScalingBlockDeviceMapping, total=False):
    VirtualName: str
    Ebs: AutoScalingEbs
    NoDevice: bool


class AutoScalingEbs(TypedDict, total=False):
    SnapshotId: str
    VolumeSize: int
    VolumeType: str
    DeleteOnTermination: bool
    Iops: int
    Encrypted: bool


class AutoScalingInstanceMonitoring(TypedDict, total=False):
    Enabled: bool


class AutoScalingDeleteLifecycleHookAnswer(TypedDict, total=False):
    pass


class AutoScalingDescribeAccountLimitsAnswer(TypedDict, total=False):
    MaxNumberOfAutoScalingGroups: int
    MaxNumberOfLaunchConfigurations: int
    NumberOfAutoScalingGroups: int
    NumberOfLaunchConfigurations: int


class AutoScalingDescribeAdjustmentTypesAnswer(TypedDict, total=False):
    AdjustmentTypes: List[AutoScalingAdjustmentType]


class AutoScalingAdjustmentType(TypedDict, total=False):
    AdjustmentType: str


class _AutoScalingAutoScalingGroupsType(TypedDict):
    AutoScalingGroups: List[AutoScalingAutoScalingGroup]


class AutoScalingAutoScalingGroupsType(_AutoScalingAutoScalingGroupsType, total=False):
    NextToken: str


class _AutoScalingAutoScalingGroup(TypedDict):
    AutoScalingGroupName: str
    MinSize: int
    MaxSize: int
    DesiredCapacity: int
    DefaultCooldown: int
    AvailabilityZones: List[str]
    HealthCheckType: str
    CreatedTime: datetime.datetime


class AutoScalingAutoScalingGroup(_AutoScalingAutoScalingGroup, total=False):
    AutoScalingGroupARN: str
    LaunchConfigurationName: str
    LaunchTemplate: AutoScalingLaunchTemplateSpecification
    MixedInstancesPolicy: AutoScalingMixedInstancesPolicy
    LoadBalancerNames: List[str]
    TargetGroupARNs: List[str]
    HealthCheckGracePeriod: int
    Instances: List[AutoScalingInstance]
    SuspendedProcesses: List[AutoScalingSuspendedProcess]
    PlacementGroup: str
    VPCZoneIdentifier: str
    EnabledMetrics: List[AutoScalingEnabledMetric]
    Status: str
    Tags: List[AutoScalingTagDescription]
    TerminationPolicies: List[str]
    NewInstancesProtectedFromScaleIn: bool
    ServiceLinkedRoleARN: str


class _AutoScalingInstance(TypedDict):
    InstanceId: str
    AvailabilityZone: str
    LifecycleState: str
    HealthStatus: str
    ProtectedFromScaleIn: bool


class AutoScalingInstance(_AutoScalingInstance, total=False):
    LaunchConfigurationName: str
    LaunchTemplate: AutoScalingLaunchTemplateSpecification


class AutoScalingSuspendedProcess(TypedDict, total=False):
    ProcessName: str
    SuspensionReason: str


class AutoScalingEnabledMetric(TypedDict, total=False):
    Metric: str
    Granularity: str


class AutoScalingTagDescription(TypedDict, total=False):
    ResourceId: str
    ResourceType: str
    Key: str
    Value: str
    PropagateAtLaunch: bool


class AutoScalingAutoScalingInstancesType(TypedDict, total=False):
    AutoScalingInstances: List[AutoScalingAutoScalingInstanceDetails]
    NextToken: str


class _AutoScalingAutoScalingInstanceDetails(TypedDict):
    InstanceId: str
    AutoScalingGroupName: str
    AvailabilityZone: str
    LifecycleState: str
    HealthStatus: str
    ProtectedFromScaleIn: bool


class AutoScalingAutoScalingInstanceDetails(_AutoScalingAutoScalingInstanceDetails, total=False):
    LaunchConfigurationName: str
    LaunchTemplate: AutoScalingLaunchTemplateSpecification


class AutoScalingDescribeAutoScalingNotificationTypesAnswer(TypedDict, total=False):
    AutoScalingNotificationTypes: List[str]


class _AutoScalingLaunchConfigurationsType(TypedDict):
    LaunchConfigurations: List[AutoScalingLaunchConfiguration]


class AutoScalingLaunchConfigurationsType(_AutoScalingLaunchConfigurationsType, total=False):
    NextToken: str


class _AutoScalingLaunchConfiguration(TypedDict):
    LaunchConfigurationName: str
    ImageId: str
    InstanceType: str
    CreatedTime: datetime.datetime


class AutoScalingLaunchConfiguration(_AutoScalingLaunchConfiguration, total=False):
    LaunchConfigurationARN: str
    KeyName: str
    SecurityGroups: List[str]
    ClassicLinkVPCId: str
    ClassicLinkVPCSecurityGroups: List[str]
    UserData: str
    KernelId: str
    RamdiskId: str
    BlockDeviceMappings: List[AutoScalingBlockDeviceMapping]
    InstanceMonitoring: AutoScalingInstanceMonitoring
    SpotPrice: str
    IamInstanceProfile: str
    EbsOptimized: bool
    AssociatePublicIpAddress: bool
    PlacementTenancy: str


class AutoScalingDescribeLifecycleHookTypesAnswer(TypedDict, total=False):
    LifecycleHookTypes: List[str]


class AutoScalingDescribeLifecycleHooksAnswer(TypedDict, total=False):
    LifecycleHooks: List[AutoScalingLifecycleHook]


class AutoScalingLifecycleHook(TypedDict, total=False):
    LifecycleHookName: str
    AutoScalingGroupName: str
    LifecycleTransition: str
    NotificationTargetARN: str
    RoleARN: str
    NotificationMetadata: str
    HeartbeatTimeout: int
    GlobalTimeout: int
    DefaultResult: str


class AutoScalingDescribeLoadBalancerTargetGroupsResponse(TypedDict, total=False):
    LoadBalancerTargetGroups: List[AutoScalingLoadBalancerTargetGroupState]
    NextToken: str


class AutoScalingLoadBalancerTargetGroupState(TypedDict, total=False):
    LoadBalancerTargetGroupARN: str
    State: str


class AutoScalingDescribeLoadBalancersResponse(TypedDict, total=False):
    LoadBalancers: List[AutoScalingLoadBalancerState]
    NextToken: str


class AutoScalingLoadBalancerState(TypedDict, total=False):
    LoadBalancerName: str
    State: str


class AutoScalingDescribeMetricCollectionTypesAnswer(TypedDict, total=False):
    Metrics: List[AutoScalingMetricCollectionType]
    Granularities: List[AutoScalingMetricGranularityType]


class AutoScalingMetricCollectionType(TypedDict, total=False):
    Metric: str


class AutoScalingMetricGranularityType(TypedDict, total=False):
    Granularity: str


class _AutoScalingDescribeNotificationConfigurationsAnswer(TypedDict):
    NotificationConfigurations: List[AutoScalingNotificationConfiguration]


class AutoScalingDescribeNotificationConfigurationsAnswer(_AutoScalingDescribeNotificationConfigurationsAnswer, total=False):
    NextToken: str


class AutoScalingNotificationConfiguration(TypedDict, total=False):
    AutoScalingGroupName: str
    TopicARN: str
    NotificationType: str


class AutoScalingPoliciesType(TypedDict, total=False):
    ScalingPolicies: List[AutoScalingScalingPolicy]
    NextToken: str


class AutoScalingScalingPolicy(TypedDict, total=False):
    AutoScalingGroupName: str
    PolicyName: str
    PolicyARN: str
    PolicyType: str
    AdjustmentType: str
    MinAdjustmentStep: int
    MinAdjustmentMagnitude: int
    ScalingAdjustment: int
    Cooldown: int
    StepAdjustments: List[AutoScalingStepAdjustment]
    MetricAggregationType: str
    EstimatedInstanceWarmup: int
    Alarms: List[AutoScalingAlarm]
    TargetTrackingConfiguration: AutoScalingTargetTrackingConfiguration


class _AutoScalingStepAdjustment(TypedDict):
    ScalingAdjustment: int


class AutoScalingStepAdjustment(_AutoScalingStepAdjustment, total=False):
    MetricIntervalLowerBound: float
    MetricIntervalUpperBound: float


class AutoScalingAlarm(TypedDict, total=False):
    AlarmName: str
    AlarmARN: str


class _AutoScalingTargetTrackingConfiguration(TypedDict):
    TargetValue: float


class AutoScalingTargetTrackingConfiguration(_AutoScalingTargetTrackingConfiguration, total=False):
    PredefinedMetricSpecification: AutoScalingPredefinedMetricSpecification
    CustomizedMetricSpecification: AutoScalingCustomizedMetricSpecification
    DisableScaleIn: bool


class _AutoScalingPredefinedMetricSpecification(TypedDict):
    PredefinedMetricType: str


class AutoScalingPredefinedMetricSpecification(_AutoScalingPredefinedMetricSpecification, total=False):
    ResourceLabel: str


class _AutoScalingCustomizedMetricSpecification(TypedDict):
    MetricName: str
    Namespace: str
    Statistic: str


class AutoScalingCustomizedMetricSpecification(_AutoScalingCustomizedMetricSpecification, total=False):
    Dimensions: List[AutoScalingMetricDimension]
    Unit: str


class AutoScalingMetricDimension(TypedDict):
    Name: str
    Value: str


class _AutoScalingActivitiesType(TypedDict):
    Activities: List[AutoScalingActivity]


class AutoScalingActivitiesType(_AutoScalingActivitiesType, total=False):
    NextToken: str


class _AutoScalingActivity(TypedDict):
    ActivityId: str
    AutoScalingGroupName: str
    Cause: str
    StartTime: datetime.datetime
    StatusCode: str


class AutoScalingActivity(_AutoScalingActivity, total=False):
    Description: str
    EndTime: datetime.datetime
    StatusMessage: str
    Progress: int
    Details: str


class AutoScalingProcessesType(TypedDict, total=False):
    Processes: List[AutoScalingProcessType]


class AutoScalingProcessType(TypedDict):
    ProcessName: str


class AutoScalingScheduledActionsType(TypedDict, total=False):
    ScheduledUpdateGroupActions: List[AutoScalingScheduledUpdateGroupAction]
    NextToken: str


class AutoScalingScheduledUpdateGroupAction(TypedDict, total=False):
    AutoScalingGroupName: str
    ScheduledActionName: str
    ScheduledActionARN: str
    Time: datetime.datetime
    StartTime: datetime.datetime
    EndTime: datetime.datetime
    Recurrence: str
    MinSize: int
    MaxSize: int
    DesiredCapacity: int


class AutoScalingFilter(TypedDict, total=False):
    Name: str
    Values: List[str]


class AutoScalingTagsType(TypedDict, total=False):
    Tags: List[AutoScalingTagDescription]
    NextToken: str


class AutoScalingDescribeTerminationPolicyTypesAnswer(TypedDict, total=False):
    TerminationPolicyTypes: List[str]


class AutoScalingDetachInstancesAnswer(TypedDict, total=False):
    Activities: List[AutoScalingActivity]


class AutoScalingDetachLoadBalancerTargetGroupsResultType(TypedDict, total=False):
    pass


class AutoScalingDetachLoadBalancersResultType(TypedDict, total=False):
    pass


class AutoScalingEnterStandbyAnswer(TypedDict, total=False):
    Activities: List[AutoScalingActivity]


class AutoScalingExitStandbyAnswer(TypedDict, total=False):
    Activities: List[AutoScalingActivity]


class AutoScalingPutLifecycleHookAnswer(TypedDict, total=False):
    pass


class AutoScalingPolicyARNType(TypedDict, total=False):
    PolicyARN: str
    Alarms: List[AutoScalingAlarm]


class AutoScalingRecordLifecycleActionHeartbeatAnswer(TypedDict, total=False):
    pass


class AutoScalingSetInstanceProtectionAnswer(TypedDict, total=False):
    pass


class AutoScalingActivityType(TypedDict, total=False):
    Activity: AutoScalingActivity


class AutoScalingPlans(BaseClient):
    def create_scaling_plan(self, *,
        ScalingPlanName: str,
        ApplicationSource: AutoScalingPlansApplicationSource,
        ScalingInstructions: List[AutoScalingPlansScalingInstruction]
    ) -> AutoScalingPlansCreateScalingPlanResponse: ...

    def delete_scaling_plan(self, *,
        ScalingPlanName: str,
        ScalingPlanVersion: int
    ) -> AutoScalingPlansDeleteScalingPlanResponse: ...

    def describe_scaling_plan_resources(self, *,
        ScalingPlanName: str,
        ScalingPlanVersion: int,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> AutoScalingPlansDescribeScalingPlanResourcesResponse: ...

    def describe_scaling_plans(self, *,
        ScalingPlanNames: List[str] = ...,
        ScalingPlanVersion: int = ...,
        ApplicationSources: List[AutoScalingPlansApplicationSource] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> AutoScalingPlansDescribeScalingPlansResponse: ...

    def get_scaling_plan_resource_forecast_data(self, *,
        ScalingPlanName: str,
        ScalingPlanVersion: int,
        ServiceNamespace: str,
        ResourceId: str,
        ScalableDimension: str,
        ForecastDataType: str,
        StartTime: datetime.datetime,
        EndTime: datetime.datetime
    ) -> AutoScalingPlansGetScalingPlanResourceForecastDataResponse: ...

    def update_scaling_plan(self, *,
        ScalingPlanName: str,
        ScalingPlanVersion: int,
        ApplicationSource: AutoScalingPlansApplicationSource = ...,
        ScalingInstructions: List[AutoScalingPlansScalingInstruction] = ...
    ) -> AutoScalingPlansUpdateScalingPlanResponse: ...


class AutoScalingPlansApplicationSource(TypedDict, total=False):
    CloudFormationStackARN: str
    TagFilters: List[AutoScalingPlansTagFilter]


class AutoScalingPlansTagFilter(TypedDict, total=False):
    Key: str
    Values: List[str]


class _AutoScalingPlansScalingInstruction(TypedDict):
    ServiceNamespace: str
    ResourceId: str
    ScalableDimension: str
    MinCapacity: int
    MaxCapacity: int
    TargetTrackingConfigurations: List[AutoScalingPlansTargetTrackingConfiguration]


class AutoScalingPlansScalingInstruction(_AutoScalingPlansScalingInstruction, total=False):
    PredefinedLoadMetricSpecification: AutoScalingPlansPredefinedLoadMetricSpecification
    CustomizedLoadMetricSpecification: AutoScalingPlansCustomizedLoadMetricSpecification
    ScheduledActionBufferTime: int
    PredictiveScalingMaxCapacityBehavior: str
    PredictiveScalingMaxCapacityBuffer: int
    PredictiveScalingMode: str
    ScalingPolicyUpdateBehavior: str
    DisableDynamicScaling: bool


class _AutoScalingPlansTargetTrackingConfiguration(TypedDict):
    TargetValue: float


class AutoScalingPlansTargetTrackingConfiguration(_AutoScalingPlansTargetTrackingConfiguration, total=False):
    PredefinedScalingMetricSpecification: AutoScalingPlansPredefinedScalingMetricSpecification
    CustomizedScalingMetricSpecification: AutoScalingPlansCustomizedScalingMetricSpecification
    DisableScaleIn: bool
    ScaleOutCooldown: int
    ScaleInCooldown: int
    EstimatedInstanceWarmup: int


class _AutoScalingPlansPredefinedScalingMetricSpecification(TypedDict):
    PredefinedScalingMetricType: str


class AutoScalingPlansPredefinedScalingMetricSpecification(_AutoScalingPlansPredefinedScalingMetricSpecification, total=False):
    ResourceLabel: str


class _AutoScalingPlansCustomizedScalingMetricSpecification(TypedDict):
    MetricName: str
    Namespace: str
    Statistic: str


class AutoScalingPlansCustomizedScalingMetricSpecification(_AutoScalingPlansCustomizedScalingMetricSpecification, total=False):
    Dimensions: List[AutoScalingPlansMetricDimension]
    Unit: str


class AutoScalingPlansMetricDimension(TypedDict):
    Name: str
    Value: str


class _AutoScalingPlansPredefinedLoadMetricSpecification(TypedDict):
    PredefinedLoadMetricType: str


class AutoScalingPlansPredefinedLoadMetricSpecification(_AutoScalingPlansPredefinedLoadMetricSpecification, total=False):
    ResourceLabel: str


class _AutoScalingPlansCustomizedLoadMetricSpecification(TypedDict):
    MetricName: str
    Namespace: str
    Statistic: str


class AutoScalingPlansCustomizedLoadMetricSpecification(_AutoScalingPlansCustomizedLoadMetricSpecification, total=False):
    Dimensions: List[AutoScalingPlansMetricDimension]
    Unit: str


class AutoScalingPlansCreateScalingPlanResponse(TypedDict):
    ScalingPlanVersion: int


class AutoScalingPlansDeleteScalingPlanResponse(TypedDict, total=False):
    pass


class AutoScalingPlansDescribeScalingPlanResourcesResponse(TypedDict, total=False):
    ScalingPlanResources: List[AutoScalingPlansScalingPlanResource]
    NextToken: str


class _AutoScalingPlansScalingPlanResource(TypedDict):
    ScalingPlanName: str
    ScalingPlanVersion: int
    ServiceNamespace: str
    ResourceId: str
    ScalableDimension: str
    ScalingStatusCode: str


class AutoScalingPlansScalingPlanResource(_AutoScalingPlansScalingPlanResource, total=False):
    ScalingPolicies: List[AutoScalingPlansScalingPolicy]
    ScalingStatusMessage: str


class _AutoScalingPlansScalingPolicy(TypedDict):
    PolicyName: str
    PolicyType: str


class AutoScalingPlansScalingPolicy(_AutoScalingPlansScalingPolicy, total=False):
    TargetTrackingConfiguration: AutoScalingPlansTargetTrackingConfiguration


class AutoScalingPlansDescribeScalingPlansResponse(TypedDict, total=False):
    ScalingPlans: List[AutoScalingPlansScalingPlan]
    NextToken: str


class _AutoScalingPlansScalingPlan(TypedDict):
    ScalingPlanName: str
    ScalingPlanVersion: int
    ApplicationSource: AutoScalingPlansApplicationSource
    ScalingInstructions: List[AutoScalingPlansScalingInstruction]
    StatusCode: str


class AutoScalingPlansScalingPlan(_AutoScalingPlansScalingPlan, total=False):
    StatusMessage: str
    StatusStartTime: datetime.datetime
    CreationTime: datetime.datetime


class AutoScalingPlansGetScalingPlanResourceForecastDataResponse(TypedDict):
    Datapoints: List[AutoScalingPlansDatapoint]


class AutoScalingPlansDatapoint(TypedDict, total=False):
    Timestamp: datetime.datetime
    Value: float


class AutoScalingPlansUpdateScalingPlanResponse(TypedDict, total=False):
    pass


class Backup(BaseClient):
    def create_backup_plan(self, *,
        BackupPlan: BackupBackupPlanInput,
        BackupPlanTags: Dict[str, str] = ...,
        CreatorRequestId: str = ...
    ) -> BackupCreateBackupPlanOutput: ...

    def create_backup_selection(self, *,
        BackupPlanId: str,
        BackupSelection: BackupBackupSelection,
        CreatorRequestId: str = ...
    ) -> BackupCreateBackupSelectionOutput: ...

    def create_backup_vault(self, *,
        BackupVaultName: str,
        BackupVaultTags: Dict[str, str] = ...,
        EncryptionKeyArn: str = ...,
        CreatorRequestId: str = ...
    ) -> BackupCreateBackupVaultOutput: ...

    def delete_backup_plan(self, *,
        BackupPlanId: str
    ) -> BackupDeleteBackupPlanOutput: ...

    def delete_backup_selection(self, *,
        BackupPlanId: str,
        SelectionId: str
    ): ...

    def delete_backup_vault(self, *,
        BackupVaultName: str
    ): ...

    def delete_backup_vault_access_policy(self, *,
        BackupVaultName: str
    ): ...

    def delete_backup_vault_notifications(self, *,
        BackupVaultName: str
    ): ...

    def delete_recovery_point(self, *,
        BackupVaultName: str,
        RecoveryPointArn: str
    ): ...

    def describe_backup_job(self, *,
        BackupJobId: str
    ) -> BackupDescribeBackupJobOutput: ...

    def describe_backup_vault(self, *,
        BackupVaultName: str
    ) -> BackupDescribeBackupVaultOutput: ...

    def describe_protected_resource(self, *,
        ResourceArn: str
    ) -> BackupDescribeProtectedResourceOutput: ...

    def describe_recovery_point(self, *,
        BackupVaultName: str,
        RecoveryPointArn: str
    ) -> BackupDescribeRecoveryPointOutput: ...

    def describe_restore_job(self, *,
        RestoreJobId: str
    ) -> BackupDescribeRestoreJobOutput: ...

    def export_backup_plan_template(self, *,
        BackupPlanId: str
    ) -> BackupExportBackupPlanTemplateOutput: ...

    def get_backup_plan(self, *,
        BackupPlanId: str,
        VersionId: str = ...
    ) -> BackupGetBackupPlanOutput: ...

    def get_backup_plan_from_json(self, *,
        BackupPlanTemplateJson: str
    ) -> BackupGetBackupPlanFromJSONOutput: ...

    def get_backup_plan_from_template(self, *,
        BackupPlanTemplateId: str
    ) -> BackupGetBackupPlanFromTemplateOutput: ...

    def get_backup_selection(self, *,
        BackupPlanId: str,
        SelectionId: str
    ) -> BackupGetBackupSelectionOutput: ...

    def get_backup_vault_access_policy(self, *,
        BackupVaultName: str
    ) -> BackupGetBackupVaultAccessPolicyOutput: ...

    def get_backup_vault_notifications(self, *,
        BackupVaultName: str
    ) -> BackupGetBackupVaultNotificationsOutput: ...

    def get_recovery_point_restore_metadata(self, *,
        BackupVaultName: str,
        RecoveryPointArn: str
    ) -> BackupGetRecoveryPointRestoreMetadataOutput: ...

    def get_supported_resource_types(self) -> BackupGetSupportedResourceTypesOutput: ...

    def list_backup_jobs(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        ByResourceArn: str = ...,
        ByState: str = ...,
        ByBackupVaultName: str = ...,
        ByCreatedBefore: datetime.datetime = ...,
        ByCreatedAfter: datetime.datetime = ...,
        ByResourceType: str = ...
    ) -> BackupListBackupJobsOutput: ...

    def list_backup_plan_templates(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> BackupListBackupPlanTemplatesOutput: ...

    def list_backup_plan_versions(self, *,
        BackupPlanId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> BackupListBackupPlanVersionsOutput: ...

    def list_backup_plans(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        IncludeDeleted: bool = ...
    ) -> BackupListBackupPlansOutput: ...

    def list_backup_selections(self, *,
        BackupPlanId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> BackupListBackupSelectionsOutput: ...

    def list_backup_vaults(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> BackupListBackupVaultsOutput: ...

    def list_protected_resources(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> BackupListProtectedResourcesOutput: ...

    def list_recovery_points_by_backup_vault(self, *,
        BackupVaultName: str,
        NextToken: str = ...,
        MaxResults: int = ...,
        ByResourceArn: str = ...,
        ByResourceType: str = ...,
        ByBackupPlanId: str = ...,
        ByCreatedBefore: datetime.datetime = ...,
        ByCreatedAfter: datetime.datetime = ...
    ) -> BackupListRecoveryPointsByBackupVaultOutput: ...

    def list_recovery_points_by_resource(self, *,
        ResourceArn: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> BackupListRecoveryPointsByResourceOutput: ...

    def list_restore_jobs(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> BackupListRestoreJobsOutput: ...

    def list_tags(self, *,
        ResourceArn: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> BackupListTagsOutput: ...

    def put_backup_vault_access_policy(self, *,
        BackupVaultName: str,
        Policy: str = ...
    ): ...

    def put_backup_vault_notifications(self, *,
        BackupVaultName: str,
        SNSTopicArn: str,
        BackupVaultEvents: List[str]
    ): ...

    def start_backup_job(self, *,
        BackupVaultName: str,
        ResourceArn: str,
        IamRoleArn: str,
        IdempotencyToken: str = ...,
        StartWindowMinutes: int = ...,
        CompleteWindowMinutes: int = ...,
        Lifecycle: BackupLifecycle = ...,
        RecoveryPointTags: Dict[str, str] = ...
    ) -> BackupStartBackupJobOutput: ...

    def start_restore_job(self, *,
        RecoveryPointArn: str,
        Metadata: Dict[str, str],
        IamRoleArn: str,
        IdempotencyToken: str = ...,
        ResourceType: str = ...
    ) -> BackupStartRestoreJobOutput: ...

    def stop_backup_job(self, *,
        BackupJobId: str
    ): ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: Dict[str, str]
    ): ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeyList: List[str]
    ): ...

    def update_backup_plan(self, *,
        BackupPlanId: str,
        BackupPlan: BackupBackupPlanInput
    ) -> BackupUpdateBackupPlanOutput: ...

    def update_recovery_point_lifecycle(self, *,
        BackupVaultName: str,
        RecoveryPointArn: str,
        Lifecycle: BackupLifecycle = ...
    ) -> BackupUpdateRecoveryPointLifecycleOutput: ...


class BackupBackupPlanInput(TypedDict):
    BackupPlanName: str
    Rules: List[BackupBackupRuleInput]


class _BackupBackupRuleInput(TypedDict):
    RuleName: str
    TargetBackupVaultName: str


class BackupBackupRuleInput(_BackupBackupRuleInput, total=False):
    ScheduleExpression: str
    StartWindowMinutes: int
    CompletionWindowMinutes: int
    Lifecycle: BackupLifecycle
    RecoveryPointTags: Dict[str, str]


class BackupLifecycle(TypedDict, total=False):
    MoveToColdStorageAfterDays: int
    DeleteAfterDays: int


class BackupCreateBackupPlanOutput(TypedDict, total=False):
    BackupPlanId: str
    BackupPlanArn: str
    CreationDate: datetime.datetime
    VersionId: str


class _BackupBackupSelection(TypedDict):
    SelectionName: str
    IamRoleArn: str


class BackupBackupSelection(_BackupBackupSelection, total=False):
    Resources: List[str]
    ListOfTags: List[BackupCondition]


class BackupCondition(TypedDict):
    ConditionType: str
    ConditionKey: str
    ConditionValue: str


class BackupCreateBackupSelectionOutput(TypedDict, total=False):
    SelectionId: str
    BackupPlanId: str
    CreationDate: datetime.datetime


class BackupCreateBackupVaultOutput(TypedDict, total=False):
    BackupVaultName: str
    BackupVaultArn: str
    CreationDate: datetime.datetime


class BackupDeleteBackupPlanOutput(TypedDict, total=False):
    BackupPlanId: str
    BackupPlanArn: str
    DeletionDate: datetime.datetime
    VersionId: str


class BackupDescribeBackupJobOutput(TypedDict, total=False):
    BackupJobId: str
    BackupVaultName: str
    BackupVaultArn: str
    RecoveryPointArn: str
    ResourceArn: str
    CreationDate: datetime.datetime
    CompletionDate: datetime.datetime
    State: str
    StatusMessage: str
    PercentDone: str
    BackupSizeInBytes: int
    IamRoleArn: str
    CreatedBy: BackupRecoveryPointCreator
    ResourceType: str
    BytesTransferred: int
    ExpectedCompletionDate: datetime.datetime
    StartBy: datetime.datetime


class BackupRecoveryPointCreator(TypedDict, total=False):
    BackupPlanId: str
    BackupPlanArn: str
    BackupPlanVersion: str
    BackupRuleId: str


class BackupDescribeBackupVaultOutput(TypedDict, total=False):
    BackupVaultName: str
    BackupVaultArn: str
    EncryptionKeyArn: str
    CreationDate: datetime.datetime
    CreatorRequestId: str
    NumberOfRecoveryPoints: int


class BackupDescribeProtectedResourceOutput(TypedDict, total=False):
    ResourceArn: str
    ResourceType: str
    LastBackupTime: datetime.datetime


class BackupDescribeRecoveryPointOutput(TypedDict, total=False):
    RecoveryPointArn: str
    BackupVaultName: str
    BackupVaultArn: str
    ResourceArn: str
    ResourceType: str
    CreatedBy: BackupRecoveryPointCreator
    IamRoleArn: str
    Status: str
    CreationDate: datetime.datetime
    CompletionDate: datetime.datetime
    BackupSizeInBytes: int
    CalculatedLifecycle: BackupCalculatedLifecycle
    Lifecycle: BackupLifecycle
    EncryptionKeyArn: str
    IsEncrypted: bool
    StorageClass: str
    LastRestoreTime: datetime.datetime


class BackupCalculatedLifecycle(TypedDict, total=False):
    MoveToColdStorageAt: datetime.datetime
    DeleteAt: datetime.datetime


class BackupDescribeRestoreJobOutput(TypedDict, total=False):
    RestoreJobId: str
    RecoveryPointArn: str
    CreationDate: datetime.datetime
    CompletionDate: datetime.datetime
    Status: str
    StatusMessage: str
    PercentDone: str
    BackupSizeInBytes: int
    IamRoleArn: str
    ExpectedCompletionTimeMinutes: int
    CreatedResourceArn: str


class BackupExportBackupPlanTemplateOutput(TypedDict, total=False):
    BackupPlanTemplateJson: str


class BackupGetBackupPlanOutput(TypedDict, total=False):
    BackupPlan: BackupBackupPlan
    BackupPlanId: str
    BackupPlanArn: str
    VersionId: str
    CreatorRequestId: str
    CreationDate: datetime.datetime
    DeletionDate: datetime.datetime
    LastExecutionDate: datetime.datetime


class BackupBackupPlan(TypedDict):
    BackupPlanName: str
    Rules: List[BackupBackupRule]


class _BackupBackupRule(TypedDict):
    RuleName: str
    TargetBackupVaultName: str


class BackupBackupRule(_BackupBackupRule, total=False):
    ScheduleExpression: str
    StartWindowMinutes: int
    CompletionWindowMinutes: int
    Lifecycle: BackupLifecycle
    RecoveryPointTags: Dict[str, str]
    RuleId: str


class BackupGetBackupPlanFromJSONOutput(TypedDict, total=False):
    BackupPlan: BackupBackupPlan


class BackupGetBackupPlanFromTemplateOutput(TypedDict, total=False):
    BackupPlanDocument: BackupBackupPlan


class BackupGetBackupSelectionOutput(TypedDict, total=False):
    BackupSelection: BackupBackupSelection
    SelectionId: str
    BackupPlanId: str
    CreationDate: datetime.datetime
    CreatorRequestId: str


class BackupGetBackupVaultAccessPolicyOutput(TypedDict, total=False):
    BackupVaultName: str
    BackupVaultArn: str
    Policy: str


class BackupGetBackupVaultNotificationsOutput(TypedDict, total=False):
    BackupVaultName: str
    BackupVaultArn: str
    SNSTopicArn: str
    BackupVaultEvents: List[str]


class BackupGetRecoveryPointRestoreMetadataOutput(TypedDict, total=False):
    BackupVaultArn: str
    RecoveryPointArn: str
    RestoreMetadata: Dict[str, str]


class BackupGetSupportedResourceTypesOutput(TypedDict, total=False):
    ResourceTypes: List[str]


class BackupListBackupJobsOutput(TypedDict, total=False):
    BackupJobs: List[BackupBackupJob]
    NextToken: str


class BackupBackupJob(TypedDict, total=False):
    BackupJobId: str
    BackupVaultName: str
    BackupVaultArn: str
    RecoveryPointArn: str
    ResourceArn: str
    CreationDate: datetime.datetime
    CompletionDate: datetime.datetime
    State: str
    StatusMessage: str
    PercentDone: str
    BackupSizeInBytes: int
    IamRoleArn: str
    CreatedBy: BackupRecoveryPointCreator
    ExpectedCompletionDate: datetime.datetime
    StartBy: datetime.datetime
    ResourceType: str
    BytesTransferred: int


class BackupListBackupPlanTemplatesOutput(TypedDict, total=False):
    NextToken: str
    BackupPlanTemplatesList: List[BackupBackupPlanTemplatesListMember]


class BackupBackupPlanTemplatesListMember(TypedDict, total=False):
    BackupPlanTemplateId: str
    BackupPlanTemplateName: str


class BackupListBackupPlanVersionsOutput(TypedDict, total=False):
    NextToken: str
    BackupPlanVersionsList: List[BackupBackupPlansListMember]


class BackupBackupPlansListMember(TypedDict, total=False):
    BackupPlanArn: str
    BackupPlanId: str
    CreationDate: datetime.datetime
    DeletionDate: datetime.datetime
    VersionId: str
    BackupPlanName: str
    CreatorRequestId: str
    LastExecutionDate: datetime.datetime


class BackupListBackupPlansOutput(TypedDict, total=False):
    NextToken: str
    BackupPlansList: List[BackupBackupPlansListMember]


class BackupListBackupSelectionsOutput(TypedDict, total=False):
    NextToken: str
    BackupSelectionsList: List[BackupBackupSelectionsListMember]


class BackupBackupSelectionsListMember(TypedDict, total=False):
    SelectionId: str
    SelectionName: str
    BackupPlanId: str
    CreationDate: datetime.datetime
    CreatorRequestId: str
    IamRoleArn: str


class BackupListBackupVaultsOutput(TypedDict, total=False):
    BackupVaultList: List[BackupBackupVaultListMember]
    NextToken: str


class BackupBackupVaultListMember(TypedDict, total=False):
    BackupVaultName: str
    BackupVaultArn: str
    CreationDate: datetime.datetime
    EncryptionKeyArn: str
    CreatorRequestId: str
    NumberOfRecoveryPoints: int


class BackupListProtectedResourcesOutput(TypedDict, total=False):
    Results: List[BackupProtectedResource]
    NextToken: str


class BackupProtectedResource(TypedDict, total=False):
    ResourceArn: str
    ResourceType: str
    LastBackupTime: datetime.datetime


class BackupListRecoveryPointsByBackupVaultOutput(TypedDict, total=False):
    NextToken: str
    RecoveryPoints: List[BackupRecoveryPointByBackupVault]


class BackupRecoveryPointByBackupVault(TypedDict, total=False):
    RecoveryPointArn: str
    BackupVaultName: str
    BackupVaultArn: str
    ResourceArn: str
    ResourceType: str
    CreatedBy: BackupRecoveryPointCreator
    IamRoleArn: str
    Status: str
    CreationDate: datetime.datetime
    CompletionDate: datetime.datetime
    BackupSizeInBytes: int
    CalculatedLifecycle: BackupCalculatedLifecycle
    Lifecycle: BackupLifecycle
    EncryptionKeyArn: str
    IsEncrypted: bool
    LastRestoreTime: datetime.datetime


class BackupListRecoveryPointsByResourceOutput(TypedDict, total=False):
    NextToken: str
    RecoveryPoints: List[BackupRecoveryPointByResource]


class BackupRecoveryPointByResource(TypedDict, total=False):
    RecoveryPointArn: str
    CreationDate: datetime.datetime
    Status: str
    EncryptionKeyArn: str
    BackupSizeBytes: int
    BackupVaultName: str


class BackupListRestoreJobsOutput(TypedDict, total=False):
    RestoreJobs: List[BackupRestoreJobsListMember]
    NextToken: str


class BackupRestoreJobsListMember(TypedDict, total=False):
    RestoreJobId: str
    RecoveryPointArn: str
    CreationDate: datetime.datetime
    CompletionDate: datetime.datetime
    Status: str
    StatusMessage: str
    PercentDone: str
    BackupSizeInBytes: int
    IamRoleArn: str
    ExpectedCompletionTimeMinutes: int
    CreatedResourceArn: str


class BackupListTagsOutput(TypedDict, total=False):
    NextToken: str
    Tags: Dict[str, str]


class BackupStartBackupJobOutput(TypedDict, total=False):
    BackupJobId: str
    RecoveryPointArn: str
    CreationDate: datetime.datetime


class BackupStartRestoreJobOutput(TypedDict, total=False):
    RestoreJobId: str


class BackupUpdateBackupPlanOutput(TypedDict, total=False):
    BackupPlanId: str
    BackupPlanArn: str
    CreationDate: datetime.datetime
    VersionId: str


class BackupUpdateRecoveryPointLifecycleOutput(TypedDict, total=False):
    BackupVaultArn: str
    RecoveryPointArn: str
    Lifecycle: BackupLifecycle
    CalculatedLifecycle: BackupCalculatedLifecycle


class Batch(BaseClient):
    def cancel_job(self, *,
        jobId: str,
        reason: str
    ) -> BatchCancelJobResponse: ...

    def create_compute_environment(self, *,
        computeEnvironmentName: str,
        type: str,
        serviceRole: str,
        state: str = ...,
        computeResources: BatchComputeResource = ...
    ) -> BatchCreateComputeEnvironmentResponse: ...

    def create_job_queue(self, *,
        jobQueueName: str,
        priority: int,
        computeEnvironmentOrder: List[BatchComputeEnvironmentOrder],
        state: str = ...
    ) -> BatchCreateJobQueueResponse: ...

    def delete_compute_environment(self, *,
        computeEnvironment: str
    ) -> BatchDeleteComputeEnvironmentResponse: ...

    def delete_job_queue(self, *,
        jobQueue: str
    ) -> BatchDeleteJobQueueResponse: ...

    def deregister_job_definition(self, *,
        jobDefinition: str
    ) -> BatchDeregisterJobDefinitionResponse: ...

    def describe_compute_environments(self, *,
        computeEnvironments: List[str] = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> BatchDescribeComputeEnvironmentsResponse: ...

    def describe_job_definitions(self, *,
        jobDefinitions: List[str] = ...,
        maxResults: int = ...,
        jobDefinitionName: str = ...,
        status: str = ...,
        nextToken: str = ...
    ) -> BatchDescribeJobDefinitionsResponse: ...

    def describe_job_queues(self, *,
        jobQueues: List[str] = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> BatchDescribeJobQueuesResponse: ...

    def describe_jobs(self, *,
        jobs: List[str]
    ) -> BatchDescribeJobsResponse: ...

    def list_jobs(self, *,
        jobQueue: str = ...,
        arrayJobId: str = ...,
        multiNodeJobId: str = ...,
        jobStatus: str = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> BatchListJobsResponse: ...

    def register_job_definition(self, *,
        jobDefinitionName: str,
        type: str,
        parameters: Dict[str, str] = ...,
        containerProperties: BatchContainerProperties = ...,
        nodeProperties: BatchNodeProperties = ...,
        retryStrategy: BatchRetryStrategy = ...,
        timeout: BatchJobTimeout = ...
    ) -> BatchRegisterJobDefinitionResponse: ...

    def submit_job(self, *,
        jobName: str,
        jobQueue: str,
        jobDefinition: str,
        arrayProperties: BatchArrayProperties = ...,
        dependsOn: List[BatchJobDependency] = ...,
        parameters: Dict[str, str] = ...,
        containerOverrides: BatchContainerOverrides = ...,
        nodeOverrides: BatchNodeOverrides = ...,
        retryStrategy: BatchRetryStrategy = ...,
        timeout: BatchJobTimeout = ...
    ) -> BatchSubmitJobResponse: ...

    def terminate_job(self, *,
        jobId: str,
        reason: str
    ) -> BatchTerminateJobResponse: ...

    def update_compute_environment(self, *,
        computeEnvironment: str,
        state: str = ...,
        computeResources: BatchComputeResourceUpdate = ...,
        serviceRole: str = ...
    ) -> BatchUpdateComputeEnvironmentResponse: ...

    def update_job_queue(self, *,
        jobQueue: str,
        state: str = ...,
        priority: int = ...,
        computeEnvironmentOrder: List[BatchComputeEnvironmentOrder] = ...
    ) -> BatchUpdateJobQueueResponse: ...


class BatchCancelJobResponse(TypedDict, total=False):
    pass


class _BatchComputeResource(TypedDict):
    type: str
    minvCpus: int
    maxvCpus: int
    instanceTypes: List[str]
    subnets: List[str]
    instanceRole: str


class BatchComputeResource(_BatchComputeResource, total=False):
    desiredvCpus: int
    imageId: str
    securityGroupIds: List[str]
    ec2KeyPair: str
    tags: Dict[str, str]
    placementGroup: str
    bidPercentage: int
    spotIamFleetRole: str
    launchTemplate: BatchLaunchTemplateSpecification


class BatchLaunchTemplateSpecification(TypedDict, total=False):
    launchTemplateId: str
    launchTemplateName: str
    version: str


class BatchCreateComputeEnvironmentResponse(TypedDict, total=False):
    computeEnvironmentName: str
    computeEnvironmentArn: str


class BatchComputeEnvironmentOrder(TypedDict):
    order: int
    computeEnvironment: str


class BatchCreateJobQueueResponse(TypedDict):
    jobQueueName: str
    jobQueueArn: str


class BatchDeleteComputeEnvironmentResponse(TypedDict, total=False):
    pass


class BatchDeleteJobQueueResponse(TypedDict, total=False):
    pass


class BatchDeregisterJobDefinitionResponse(TypedDict, total=False):
    pass


class BatchDescribeComputeEnvironmentsResponse(TypedDict, total=False):
    computeEnvironments: List[BatchComputeEnvironmentDetail]
    nextToken: str


class _BatchComputeEnvironmentDetail(TypedDict):
    computeEnvironmentName: str
    computeEnvironmentArn: str
    ecsClusterArn: str


class BatchComputeEnvironmentDetail(_BatchComputeEnvironmentDetail, total=False):
    type: str
    state: str
    status: str
    statusReason: str
    computeResources: BatchComputeResource
    serviceRole: str


class BatchDescribeJobDefinitionsResponse(TypedDict, total=False):
    jobDefinitions: List[BatchJobDefinition]
    nextToken: str


class _BatchJobDefinition(TypedDict):
    jobDefinitionName: str
    jobDefinitionArn: str
    revision: int
    type: str


class BatchJobDefinition(_BatchJobDefinition, total=False):
    status: str
    parameters: Dict[str, str]
    retryStrategy: BatchRetryStrategy
    containerProperties: BatchContainerProperties
    timeout: BatchJobTimeout
    nodeProperties: BatchNodeProperties


class BatchRetryStrategy(TypedDict, total=False):
    attempts: int


class BatchContainerProperties(TypedDict, total=False):
    image: str
    vcpus: int
    memory: int
    command: List[str]
    jobRoleArn: str
    volumes: List[BatchVolume]
    environment: List[BatchKeyValuePair]
    mountPoints: List[BatchMountPoint]
    readonlyRootFilesystem: bool
    privileged: bool
    ulimits: List[BatchUlimit]
    user: str
    instanceType: str
    resourceRequirements: List[BatchResourceRequirement]


class BatchVolume(TypedDict, total=False):
    host: BatchHost
    name: str


class BatchHost(TypedDict, total=False):
    sourcePath: str


class BatchKeyValuePair(TypedDict, total=False):
    name: str
    value: str


class BatchMountPoint(TypedDict, total=False):
    containerPath: str
    readOnly: bool
    sourceVolume: str


class BatchUlimit(TypedDict):
    hardLimit: int
    name: str
    softLimit: int


class BatchResourceRequirement(TypedDict):
    value: str
    type: str


class BatchJobTimeout(TypedDict, total=False):
    attemptDurationSeconds: int


class BatchNodeProperties(TypedDict):
    numNodes: int
    mainNode: int
    nodeRangeProperties: List[BatchNodeRangeProperty]


class _BatchNodeRangeProperty(TypedDict):
    targetNodes: str


class BatchNodeRangeProperty(_BatchNodeRangeProperty, total=False):
    container: BatchContainerProperties


class BatchDescribeJobQueuesResponse(TypedDict, total=False):
    jobQueues: List[BatchJobQueueDetail]
    nextToken: str


class _BatchJobQueueDetail(TypedDict):
    jobQueueName: str
    jobQueueArn: str
    state: str
    priority: int
    computeEnvironmentOrder: List[BatchComputeEnvironmentOrder]


class BatchJobQueueDetail(_BatchJobQueueDetail, total=False):
    status: str
    statusReason: str


class BatchDescribeJobsResponse(TypedDict, total=False):
    jobs: List[BatchJobDetail]


class _BatchJobDetail(TypedDict):
    jobName: str
    jobId: str
    jobQueue: str
    status: str
    startedAt: int
    jobDefinition: str


class BatchJobDetail(_BatchJobDetail, total=False):
    attempts: List[BatchAttemptDetail]
    statusReason: str
    createdAt: int
    retryStrategy: BatchRetryStrategy
    stoppedAt: int
    dependsOn: List[BatchJobDependency]
    parameters: Dict[str, str]
    container: BatchContainerDetail
    nodeDetails: BatchNodeDetails
    nodeProperties: BatchNodeProperties
    arrayProperties: BatchArrayPropertiesDetail
    timeout: BatchJobTimeout


class BatchAttemptDetail(TypedDict, total=False):
    container: BatchAttemptContainerDetail
    startedAt: int
    stoppedAt: int
    statusReason: str


class BatchAttemptContainerDetail(TypedDict, total=False):
    containerInstanceArn: str
    taskArn: str
    exitCode: int
    reason: str
    logStreamName: str
    networkInterfaces: List[BatchNetworkInterface]


class BatchNetworkInterface(TypedDict, total=False):
    attachmentId: str
    ipv6Address: str
    privateIpv4Address: str


class BatchJobDependency(TypedDict, total=False):
    jobId: str
    type: str


class BatchContainerDetail(TypedDict, total=False):
    image: str
    vcpus: int
    memory: int
    command: List[str]
    jobRoleArn: str
    volumes: List[BatchVolume]
    environment: List[BatchKeyValuePair]
    mountPoints: List[BatchMountPoint]
    readonlyRootFilesystem: bool
    ulimits: List[BatchUlimit]
    privileged: bool
    user: str
    exitCode: int
    reason: str
    containerInstanceArn: str
    taskArn: str
    logStreamName: str
    instanceType: str
    networkInterfaces: List[BatchNetworkInterface]
    resourceRequirements: List[BatchResourceRequirement]


class BatchNodeDetails(TypedDict, total=False):
    nodeIndex: int
    isMainNode: bool


class BatchArrayPropertiesDetail(TypedDict, total=False):
    statusSummary: Dict[str, int]
    size: int
    index: int


class _BatchListJobsResponse(TypedDict):
    jobSummaryList: List[BatchJobSummary]


class BatchListJobsResponse(_BatchListJobsResponse, total=False):
    nextToken: str


class _BatchJobSummary(TypedDict):
    jobId: str
    jobName: str


class BatchJobSummary(_BatchJobSummary, total=False):
    createdAt: int
    status: str
    statusReason: str
    startedAt: int
    stoppedAt: int
    container: BatchContainerSummary
    arrayProperties: BatchArrayPropertiesSummary
    nodeProperties: BatchNodePropertiesSummary


class BatchContainerSummary(TypedDict, total=False):
    exitCode: int
    reason: str


class BatchArrayPropertiesSummary(TypedDict, total=False):
    size: int
    index: int


class BatchNodePropertiesSummary(TypedDict, total=False):
    isMainNode: bool
    numNodes: int
    nodeIndex: int


class BatchRegisterJobDefinitionResponse(TypedDict):
    jobDefinitionName: str
    jobDefinitionArn: str
    revision: int


class BatchArrayProperties(TypedDict, total=False):
    size: int


class BatchContainerOverrides(TypedDict, total=False):
    vcpus: int
    memory: int
    command: List[str]
    instanceType: str
    environment: List[BatchKeyValuePair]
    resourceRequirements: List[BatchResourceRequirement]


class BatchNodeOverrides(TypedDict, total=False):
    numNodes: int
    nodePropertyOverrides: List[BatchNodePropertyOverride]


class _BatchNodePropertyOverride(TypedDict):
    targetNodes: str


class BatchNodePropertyOverride(_BatchNodePropertyOverride, total=False):
    containerOverrides: BatchContainerOverrides


class BatchSubmitJobResponse(TypedDict):
    jobName: str
    jobId: str


class BatchTerminateJobResponse(TypedDict, total=False):
    pass


class BatchComputeResourceUpdate(TypedDict, total=False):
    minvCpus: int
    maxvCpus: int
    desiredvCpus: int


class BatchUpdateComputeEnvironmentResponse(TypedDict, total=False):
    computeEnvironmentName: str
    computeEnvironmentArn: str


class BatchUpdateJobQueueResponse(TypedDict, total=False):
    jobQueueName: str
    jobQueueArn: str


class Budgets(BaseClient):
    def create_budget(self, *,
        AccountId: str,
        Budget: BudgetsBudget,
        NotificationsWithSubscribers: List[BudgetsNotificationWithSubscribers] = ...
    ) -> BudgetsCreateBudgetResponse: ...

    def create_notification(self, *,
        AccountId: str,
        BudgetName: str,
        Notification: BudgetsNotification,
        Subscribers: List[BudgetsSubscriber]
    ) -> BudgetsCreateNotificationResponse: ...

    def create_subscriber(self, *,
        AccountId: str,
        BudgetName: str,
        Notification: BudgetsNotification,
        Subscriber: BudgetsSubscriber
    ) -> BudgetsCreateSubscriberResponse: ...

    def delete_budget(self, *,
        AccountId: str,
        BudgetName: str
    ) -> BudgetsDeleteBudgetResponse: ...

    def delete_notification(self, *,
        AccountId: str,
        BudgetName: str,
        Notification: BudgetsNotification
    ) -> BudgetsDeleteNotificationResponse: ...

    def delete_subscriber(self, *,
        AccountId: str,
        BudgetName: str,
        Notification: BudgetsNotification,
        Subscriber: BudgetsSubscriber
    ) -> BudgetsDeleteSubscriberResponse: ...

    def describe_budget(self, *,
        AccountId: str,
        BudgetName: str
    ) -> BudgetsDescribeBudgetResponse: ...

    def describe_budget_performance_history(self, *,
        AccountId: str,
        BudgetName: str,
        TimePeriod: BudgetsTimePeriod = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> BudgetsDescribeBudgetPerformanceHistoryResponse: ...

    def describe_budgets(self, *,
        AccountId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> BudgetsDescribeBudgetsResponse: ...

    def describe_notifications_for_budget(self, *,
        AccountId: str,
        BudgetName: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> BudgetsDescribeNotificationsForBudgetResponse: ...

    def describe_subscribers_for_notification(self, *,
        AccountId: str,
        BudgetName: str,
        Notification: BudgetsNotification,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> BudgetsDescribeSubscribersForNotificationResponse: ...

    def update_budget(self, *,
        AccountId: str,
        NewBudget: BudgetsBudget
    ) -> BudgetsUpdateBudgetResponse: ...

    def update_notification(self, *,
        AccountId: str,
        BudgetName: str,
        OldNotification: BudgetsNotification,
        NewNotification: BudgetsNotification
    ) -> BudgetsUpdateNotificationResponse: ...

    def update_subscriber(self, *,
        AccountId: str,
        BudgetName: str,
        Notification: BudgetsNotification,
        OldSubscriber: BudgetsSubscriber,
        NewSubscriber: BudgetsSubscriber
    ) -> BudgetsUpdateSubscriberResponse: ...


class _BudgetsBudget(TypedDict):
    BudgetName: str
    TimeUnit: str
    BudgetType: str


class BudgetsBudget(_BudgetsBudget, total=False):
    BudgetLimit: BudgetsSpend
    CostFilters: Dict[str, List[str]]
    CostTypes: BudgetsCostTypes
    TimePeriod: BudgetsTimePeriod
    CalculatedSpend: BudgetsCalculatedSpend
    LastUpdatedTime: datetime.datetime


class BudgetsSpend(TypedDict):
    Amount: str
    Unit: str


class BudgetsCostTypes(TypedDict, total=False):
    IncludeTax: bool
    IncludeSubscription: bool
    UseBlended: bool
    IncludeRefund: bool
    IncludeCredit: bool
    IncludeUpfront: bool
    IncludeRecurring: bool
    IncludeOtherSubscription: bool
    IncludeSupport: bool
    IncludeDiscount: bool
    UseAmortized: bool


class BudgetsTimePeriod(TypedDict, total=False):
    Start: datetime.datetime
    End: datetime.datetime


class _BudgetsCalculatedSpend(TypedDict):
    ActualSpend: BudgetsSpend


class BudgetsCalculatedSpend(_BudgetsCalculatedSpend, total=False):
    ForecastedSpend: BudgetsSpend


class BudgetsNotificationWithSubscribers(TypedDict):
    Notification: BudgetsNotification
    Subscribers: List[BudgetsSubscriber]


class _BudgetsNotification(TypedDict):
    NotificationType: str
    ComparisonOperator: str
    Threshold: float


class BudgetsNotification(_BudgetsNotification, total=False):
    ThresholdType: str
    NotificationState: str


class BudgetsSubscriber(TypedDict):
    SubscriptionType: str
    Address: str


class BudgetsCreateBudgetResponse(TypedDict, total=False):
    pass


class BudgetsCreateNotificationResponse(TypedDict, total=False):
    pass


class BudgetsCreateSubscriberResponse(TypedDict, total=False):
    pass


class BudgetsDeleteBudgetResponse(TypedDict, total=False):
    pass


class BudgetsDeleteNotificationResponse(TypedDict, total=False):
    pass


class BudgetsDeleteSubscriberResponse(TypedDict, total=False):
    pass


class BudgetsDescribeBudgetResponse(TypedDict, total=False):
    Budget: BudgetsBudget


class BudgetsDescribeBudgetPerformanceHistoryResponse(TypedDict, total=False):
    BudgetPerformanceHistory: BudgetsBudgetPerformanceHistory
    NextToken: str


class BudgetsBudgetPerformanceHistory(TypedDict, total=False):
    BudgetName: str
    BudgetType: str
    CostFilters: Dict[str, List[str]]
    CostTypes: BudgetsCostTypes
    TimeUnit: str
    BudgetedAndActualAmountsList: List[BudgetsBudgetedAndActualAmounts]


class BudgetsBudgetedAndActualAmounts(TypedDict, total=False):
    BudgetedAmount: BudgetsSpend
    ActualAmount: BudgetsSpend
    TimePeriod: BudgetsTimePeriod


class BudgetsDescribeBudgetsResponse(TypedDict, total=False):
    Budgets: List[BudgetsBudget]
    NextToken: str


class BudgetsDescribeNotificationsForBudgetResponse(TypedDict, total=False):
    Notifications: List[BudgetsNotification]
    NextToken: str


class BudgetsDescribeSubscribersForNotificationResponse(TypedDict, total=False):
    Subscribers: List[BudgetsSubscriber]
    NextToken: str


class BudgetsUpdateBudgetResponse(TypedDict, total=False):
    pass


class BudgetsUpdateNotificationResponse(TypedDict, total=False):
    pass


class BudgetsUpdateSubscriberResponse(TypedDict, total=False):
    pass


class CostExplorer(BaseClient):
    def get_cost_and_usage(self, *,
        TimePeriod: CostExplorerDateInterval,
        Granularity: str = ...,
        Filter: CostExplorerExpression = ...,
        Metrics: List[str] = ...,
        GroupBy: List[CostExplorerGroupDefinition] = ...,
        NextPageToken: str = ...
    ) -> CostExplorerGetCostAndUsageResponse: ...

    def get_cost_forecast(self, *,
        TimePeriod: CostExplorerDateInterval,
        Metric: str,
        Granularity: str,
        Filter: CostExplorerExpression = ...,
        PredictionIntervalLevel: int = ...
    ) -> CostExplorerGetCostForecastResponse: ...

    def get_dimension_values(self, *,
        TimePeriod: CostExplorerDateInterval,
        Dimension: str,
        SearchString: str = ...,
        Context: str = ...,
        NextPageToken: str = ...
    ) -> CostExplorerGetDimensionValuesResponse: ...

    def get_reservation_coverage(self, *,
        TimePeriod: CostExplorerDateInterval,
        GroupBy: List[CostExplorerGroupDefinition] = ...,
        Granularity: str = ...,
        Filter: CostExplorerExpression = ...,
        Metrics: List[str] = ...,
        NextPageToken: str = ...
    ) -> CostExplorerGetReservationCoverageResponse: ...

    def get_reservation_purchase_recommendation(self, *,
        Service: str,
        AccountId: str = ...,
        AccountScope: str = ...,
        LookbackPeriodInDays: str = ...,
        TermInYears: str = ...,
        PaymentOption: str = ...,
        ServiceSpecification: CostExplorerServiceSpecification = ...,
        PageSize: int = ...,
        NextPageToken: str = ...
    ) -> CostExplorerGetReservationPurchaseRecommendationResponse: ...

    def get_reservation_utilization(self, *,
        TimePeriod: CostExplorerDateInterval,
        GroupBy: List[CostExplorerGroupDefinition] = ...,
        Granularity: str = ...,
        Filter: CostExplorerExpression = ...,
        NextPageToken: str = ...
    ) -> CostExplorerGetReservationUtilizationResponse: ...

    def get_tags(self, *,
        TimePeriod: CostExplorerDateInterval,
        SearchString: str = ...,
        TagKey: str = ...,
        NextPageToken: str = ...
    ) -> CostExplorerGetTagsResponse: ...


class CostExplorerDateInterval(TypedDict):
    Start: str
    End: str


class CostExplorerExpression(TypedDict, total=False):
    Or: List[CostExplorerExpression]
    And: List[CostExplorerExpression]
    Not: CostExplorerExpression
    Dimensions: CostExplorerDimensionValues
    Tags: CostExplorerTagValues


class CostExplorerDimensionValues(TypedDict, total=False):
    Key: str
    Values: List[str]


class CostExplorerTagValues(TypedDict, total=False):
    Key: str
    Values: List[str]


class CostExplorerGroupDefinition(TypedDict, total=False):
    Type: str
    Key: str


class CostExplorerGetCostAndUsageResponse(TypedDict, total=False):
    NextPageToken: str
    GroupDefinitions: List[CostExplorerGroupDefinition]
    ResultsByTime: List[CostExplorerResultByTime]


class CostExplorerResultByTime(TypedDict, total=False):
    TimePeriod: CostExplorerDateInterval
    Total: Dict[str, CostExplorerMetricValue]
    Groups: List[CostExplorerGroup]
    Estimated: bool


class CostExplorerMetricValue(TypedDict, total=False):
    Amount: str
    Unit: str


class CostExplorerGroup(TypedDict, total=False):
    Keys: List[str]
    Metrics: Dict[str, CostExplorerMetricValue]


class CostExplorerGetCostForecastResponse(TypedDict, total=False):
    Total: CostExplorerMetricValue
    ForecastResultsByTime: List[CostExplorerForecastResult]


class CostExplorerForecastResult(TypedDict, total=False):
    TimePeriod: CostExplorerDateInterval
    MeanValue: str
    PredictionIntervalLowerBound: str
    PredictionIntervalUpperBound: str


class _CostExplorerGetDimensionValuesResponse(TypedDict):
    DimensionValues: List[CostExplorerDimensionValuesWithAttributes]
    ReturnSize: int
    TotalSize: int


class CostExplorerGetDimensionValuesResponse(_CostExplorerGetDimensionValuesResponse, total=False):
    NextPageToken: str


class CostExplorerDimensionValuesWithAttributes(TypedDict, total=False):
    Value: str
    Attributes: Dict[str, str]


class _CostExplorerGetReservationCoverageResponse(TypedDict):
    CoveragesByTime: List[CostExplorerCoverageByTime]


class CostExplorerGetReservationCoverageResponse(_CostExplorerGetReservationCoverageResponse, total=False):
    Total: CostExplorerCoverage
    NextPageToken: str


class CostExplorerCoverageByTime(TypedDict, total=False):
    TimePeriod: CostExplorerDateInterval
    Groups: List[CostExplorerReservationCoverageGroup]
    Total: CostExplorerCoverage


class CostExplorerReservationCoverageGroup(TypedDict, total=False):
    Attributes: Dict[str, str]
    Coverage: CostExplorerCoverage


class CostExplorerCoverage(TypedDict, total=False):
    CoverageHours: CostExplorerCoverageHours
    CoverageNormalizedUnits: CostExplorerCoverageNormalizedUnits
    CoverageCost: CostExplorerCoverageCost


class CostExplorerCoverageHours(TypedDict, total=False):
    OnDemandHours: str
    ReservedHours: str
    TotalRunningHours: str
    CoverageHoursPercentage: str


class CostExplorerCoverageNormalizedUnits(TypedDict, total=False):
    OnDemandNormalizedUnits: str
    ReservedNormalizedUnits: str
    TotalRunningNormalizedUnits: str
    CoverageNormalizedUnitsPercentage: str


class CostExplorerCoverageCost(TypedDict, total=False):
    OnDemandCost: str


class CostExplorerServiceSpecification(TypedDict, total=False):
    EC2Specification: CostExplorerEC2Specification


class CostExplorerEC2Specification(TypedDict, total=False):
    OfferingClass: str


class CostExplorerGetReservationPurchaseRecommendationResponse(TypedDict, total=False):
    Metadata: CostExplorerReservationPurchaseRecommendationMetadata
    Recommendations: List[CostExplorerReservationPurchaseRecommendation]
    NextPageToken: str


class CostExplorerReservationPurchaseRecommendationMetadata(TypedDict, total=False):
    RecommendationId: str
    GenerationTimestamp: str


class CostExplorerReservationPurchaseRecommendation(TypedDict, total=False):
    AccountScope: str
    LookbackPeriodInDays: str
    TermInYears: str
    PaymentOption: str
    ServiceSpecification: CostExplorerServiceSpecification
    RecommendationDetails: List[CostExplorerReservationPurchaseRecommendationDetail]
    RecommendationSummary: CostExplorerReservationPurchaseRecommendationSummary


class CostExplorerReservationPurchaseRecommendationDetail(TypedDict, total=False):
    AccountId: str
    InstanceDetails: CostExplorerInstanceDetails
    RecommendedNumberOfInstancesToPurchase: str
    RecommendedNormalizedUnitsToPurchase: str
    MinimumNumberOfInstancesUsedPerHour: str
    MinimumNormalizedUnitsUsedPerHour: str
    MaximumNumberOfInstancesUsedPerHour: str
    MaximumNormalizedUnitsUsedPerHour: str
    AverageNumberOfInstancesUsedPerHour: str
    AverageNormalizedUnitsUsedPerHour: str
    AverageUtilization: str
    EstimatedBreakEvenInMonths: str
    CurrencyCode: str
    EstimatedMonthlySavingsAmount: str
    EstimatedMonthlySavingsPercentage: str
    EstimatedMonthlyOnDemandCost: str
    EstimatedReservationCostForLookbackPeriod: str
    UpfrontCost: str
    RecurringStandardMonthlyCost: str


class CostExplorerInstanceDetails(TypedDict, total=False):
    EC2InstanceDetails: CostExplorerEC2InstanceDetails
    RDSInstanceDetails: CostExplorerRDSInstanceDetails
    RedshiftInstanceDetails: CostExplorerRedshiftInstanceDetails
    ElastiCacheInstanceDetails: CostExplorerElastiCacheInstanceDetails
    ESInstanceDetails: CostExplorerESInstanceDetails


class CostExplorerEC2InstanceDetails(TypedDict, total=False):
    Family: str
    InstanceType: str
    Region: str
    AvailabilityZone: str
    Platform: str
    Tenancy: str
    CurrentGeneration: bool
    SizeFlexEligible: bool


class CostExplorerRDSInstanceDetails(TypedDict, total=False):
    Family: str
    InstanceType: str
    Region: str
    DatabaseEngine: str
    DatabaseEdition: str
    DeploymentOption: str
    LicenseModel: str
    CurrentGeneration: bool
    SizeFlexEligible: bool


class CostExplorerRedshiftInstanceDetails(TypedDict, total=False):
    Family: str
    NodeType: str
    Region: str
    CurrentGeneration: bool
    SizeFlexEligible: bool


class CostExplorerElastiCacheInstanceDetails(TypedDict, total=False):
    Family: str
    NodeType: str
    Region: str
    ProductDescription: str
    CurrentGeneration: bool
    SizeFlexEligible: bool


class CostExplorerESInstanceDetails(TypedDict, total=False):
    InstanceClass: str
    InstanceSize: str
    Region: str
    CurrentGeneration: bool
    SizeFlexEligible: bool


class CostExplorerReservationPurchaseRecommendationSummary(TypedDict, total=False):
    TotalEstimatedMonthlySavingsAmount: str
    TotalEstimatedMonthlySavingsPercentage: str
    CurrencyCode: str


class _CostExplorerGetReservationUtilizationResponse(TypedDict):
    UtilizationsByTime: List[CostExplorerUtilizationByTime]


class CostExplorerGetReservationUtilizationResponse(_CostExplorerGetReservationUtilizationResponse, total=False):
    Total: CostExplorerReservationAggregates
    NextPageToken: str


class CostExplorerUtilizationByTime(TypedDict, total=False):
    TimePeriod: CostExplorerDateInterval
    Groups: List[CostExplorerReservationUtilizationGroup]
    Total: CostExplorerReservationAggregates


class CostExplorerReservationUtilizationGroup(TypedDict, total=False):
    Key: str
    Value: str
    Attributes: Dict[str, str]
    Utilization: CostExplorerReservationAggregates


class CostExplorerReservationAggregates(TypedDict, total=False):
    UtilizationPercentage: str
    UtilizationPercentageInUnits: str
    PurchasedHours: str
    PurchasedUnits: str
    TotalActualHours: str
    TotalActualUnits: str
    UnusedHours: str
    UnusedUnits: str
    OnDemandCostOfRIHoursUsed: str
    NetRISavings: str
    TotalPotentialRISavings: str
    AmortizedUpfrontFee: str
    AmortizedRecurringFee: str
    TotalAmortizedFee: str


class _CostExplorerGetTagsResponse(TypedDict):
    Tags: List[str]
    ReturnSize: int
    TotalSize: int


class CostExplorerGetTagsResponse(_CostExplorerGetTagsResponse, total=False):
    NextPageToken: str


class Chime(BaseClient):
    def associate_phone_number_with_user(self, *,
        AccountId: str,
        UserId: str,
        E164PhoneNumber: str
    ) -> ChimeAssociatePhoneNumberWithUserResponse: ...

    def associate_phone_numbers_with_voice_connector(self, *,
        VoiceConnectorId: str,
        E164PhoneNumbers: List[str] = ...
    ) -> ChimeAssociatePhoneNumbersWithVoiceConnectorResponse: ...

    def batch_delete_phone_number(self, *,
        PhoneNumberIds: List[str]
    ) -> ChimeBatchDeletePhoneNumberResponse: ...

    def batch_suspend_user(self, *,
        AccountId: str,
        UserIdList: List[str]
    ) -> ChimeBatchSuspendUserResponse: ...

    def batch_unsuspend_user(self, *,
        AccountId: str,
        UserIdList: List[str]
    ) -> ChimeBatchUnsuspendUserResponse: ...

    def batch_update_phone_number(self, *,
        UpdatePhoneNumberRequestItems: List[ChimeUpdatePhoneNumberRequestItem]
    ) -> ChimeBatchUpdatePhoneNumberResponse: ...

    def batch_update_user(self, *,
        AccountId: str,
        UpdateUserRequestItems: List[ChimeUpdateUserRequestItem]
    ) -> ChimeBatchUpdateUserResponse: ...

    def create_account(self, *,
        Name: str
    ) -> ChimeCreateAccountResponse: ...

    def create_bot(self, *,
        AccountId: str,
        DisplayName: str,
        Domain: str = ...
    ) -> ChimeCreateBotResponse: ...

    def create_phone_number_order(self, *,
        ProductType: str,
        E164PhoneNumbers: List[str]
    ) -> ChimeCreatePhoneNumberOrderResponse: ...

    def create_voice_connector(self, *,
        Name: str,
        RequireEncryption: bool
    ) -> ChimeCreateVoiceConnectorResponse: ...

    def delete_account(self, *,
        AccountId: str
    ) -> ChimeDeleteAccountResponse: ...

    def delete_events_configuration(self, *,
        AccountId: str,
        BotId: str
    ): ...

    def delete_phone_number(self, *,
        PhoneNumberId: str
    ): ...

    def delete_voice_connector(self, *,
        VoiceConnectorId: str
    ): ...

    def delete_voice_connector_origination(self, *,
        VoiceConnectorId: str
    ): ...

    def delete_voice_connector_termination(self, *,
        VoiceConnectorId: str
    ): ...

    def delete_voice_connector_termination_credentials(self, *,
        VoiceConnectorId: str,
        Usernames: List[str] = ...
    ): ...

    def disassociate_phone_number_from_user(self, *,
        AccountId: str,
        UserId: str
    ) -> ChimeDisassociatePhoneNumberFromUserResponse: ...

    def disassociate_phone_numbers_from_voice_connector(self, *,
        VoiceConnectorId: str,
        E164PhoneNumbers: List[str] = ...
    ) -> ChimeDisassociatePhoneNumbersFromVoiceConnectorResponse: ...

    def get_account(self, *,
        AccountId: str
    ) -> ChimeGetAccountResponse: ...

    def get_account_settings(self, *,
        AccountId: str
    ) -> ChimeGetAccountSettingsResponse: ...

    def get_bot(self, *,
        AccountId: str,
        BotId: str
    ) -> ChimeGetBotResponse: ...

    def get_events_configuration(self, *,
        AccountId: str,
        BotId: str
    ) -> ChimeGetEventsConfigurationResponse: ...

    def get_global_settings(self) -> ChimeGetGlobalSettingsResponse: ...

    def get_phone_number(self, *,
        PhoneNumberId: str
    ) -> ChimeGetPhoneNumberResponse: ...

    def get_phone_number_order(self, *,
        PhoneNumberOrderId: str
    ) -> ChimeGetPhoneNumberOrderResponse: ...

    def get_user(self, *,
        AccountId: str,
        UserId: str
    ) -> ChimeGetUserResponse: ...

    def get_user_settings(self, *,
        AccountId: str,
        UserId: str
    ) -> ChimeGetUserSettingsResponse: ...

    def get_voice_connector(self, *,
        VoiceConnectorId: str
    ) -> ChimeGetVoiceConnectorResponse: ...

    def get_voice_connector_origination(self, *,
        VoiceConnectorId: str
    ) -> ChimeGetVoiceConnectorOriginationResponse: ...

    def get_voice_connector_termination(self, *,
        VoiceConnectorId: str
    ) -> ChimeGetVoiceConnectorTerminationResponse: ...

    def get_voice_connector_termination_health(self, *,
        VoiceConnectorId: str
    ) -> ChimeGetVoiceConnectorTerminationHealthResponse: ...

    def invite_users(self, *,
        AccountId: str,
        UserEmailList: List[str]
    ) -> ChimeInviteUsersResponse: ...

    def list_accounts(self, *,
        Name: str = ...,
        UserEmail: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ChimeListAccountsResponse: ...

    def list_bots(self, *,
        AccountId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ChimeListBotsResponse: ...

    def list_phone_number_orders(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ChimeListPhoneNumberOrdersResponse: ...

    def list_phone_numbers(self, *,
        Status: str = ...,
        ProductType: str = ...,
        FilterName: str = ...,
        FilterValue: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ChimeListPhoneNumbersResponse: ...

    def list_users(self, *,
        AccountId: str,
        UserEmail: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ChimeListUsersResponse: ...

    def list_voice_connector_termination_credentials(self, *,
        VoiceConnectorId: str
    ) -> ChimeListVoiceConnectorTerminationCredentialsResponse: ...

    def list_voice_connectors(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ChimeListVoiceConnectorsResponse: ...

    def logout_user(self, *,
        AccountId: str,
        UserId: str
    ) -> ChimeLogoutUserResponse: ...

    def put_events_configuration(self, *,
        AccountId: str,
        BotId: str,
        OutboundEventsHTTPSEndpoint: str = ...,
        LambdaFunctionArn: str = ...
    ) -> ChimePutEventsConfigurationResponse: ...

    def put_voice_connector_origination(self, *,
        VoiceConnectorId: str,
        Origination: ChimeOrigination
    ) -> ChimePutVoiceConnectorOriginationResponse: ...

    def put_voice_connector_termination(self, *,
        VoiceConnectorId: str,
        Termination: ChimeTermination
    ) -> ChimePutVoiceConnectorTerminationResponse: ...

    def put_voice_connector_termination_credentials(self, *,
        VoiceConnectorId: str,
        Credentials: List[ChimeCredential] = ...
    ): ...

    def regenerate_security_token(self, *,
        AccountId: str,
        BotId: str
    ) -> ChimeRegenerateSecurityTokenResponse: ...

    def reset_personal_pin(self, *,
        AccountId: str,
        UserId: str
    ) -> ChimeResetPersonalPINResponse: ...

    def restore_phone_number(self, *,
        PhoneNumberId: str
    ) -> ChimeRestorePhoneNumberResponse: ...

    def search_available_phone_numbers(self, *,
        AreaCode: str = ...,
        City: str = ...,
        Country: str = ...,
        State: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ChimeSearchAvailablePhoneNumbersResponse: ...

    def update_account(self, *,
        AccountId: str,
        Name: str = ...
    ) -> ChimeUpdateAccountResponse: ...

    def update_account_settings(self, *,
        AccountId: str,
        AccountSettings: ChimeAccountSettings
    ) -> ChimeUpdateAccountSettingsResponse: ...

    def update_bot(self, *,
        AccountId: str,
        BotId: str,
        Disabled: bool = ...
    ) -> ChimeUpdateBotResponse: ...

    def update_global_settings(self, *,
        BusinessCalling: ChimeBusinessCallingSettings,
        VoiceConnector: ChimeVoiceConnectorSettings
    ): ...

    def update_phone_number(self, *,
        PhoneNumberId: str,
        ProductType: str = ...
    ) -> ChimeUpdatePhoneNumberResponse: ...

    def update_user(self, *,
        AccountId: str,
        UserId: str,
        LicenseType: str = ...
    ) -> ChimeUpdateUserResponse: ...

    def update_user_settings(self, *,
        AccountId: str,
        UserId: str,
        UserSettings: ChimeUserSettings
    ): ...

    def update_voice_connector(self, *,
        VoiceConnectorId: str,
        Name: str,
        RequireEncryption: bool
    ) -> ChimeUpdateVoiceConnectorResponse: ...


class ChimeAssociatePhoneNumberWithUserResponse(TypedDict, total=False):
    pass


class ChimeAssociatePhoneNumbersWithVoiceConnectorResponse(TypedDict, total=False):
    PhoneNumberErrors: List[ChimePhoneNumberError]


class ChimePhoneNumberError(TypedDict, total=False):
    PhoneNumberId: str
    ErrorCode: str
    ErrorMessage: str


class ChimeBatchDeletePhoneNumberResponse(TypedDict, total=False):
    PhoneNumberErrors: List[ChimePhoneNumberError]


class ChimeBatchSuspendUserResponse(TypedDict, total=False):
    UserErrors: List[ChimeUserError]


class ChimeUserError(TypedDict, total=False):
    UserId: str
    ErrorCode: str
    ErrorMessage: str


class ChimeBatchUnsuspendUserResponse(TypedDict, total=False):
    UserErrors: List[ChimeUserError]


class _ChimeUpdatePhoneNumberRequestItem(TypedDict):
    PhoneNumberId: str


class ChimeUpdatePhoneNumberRequestItem(_ChimeUpdatePhoneNumberRequestItem, total=False):
    ProductType: str


class ChimeBatchUpdatePhoneNumberResponse(TypedDict, total=False):
    PhoneNumberErrors: List[ChimePhoneNumberError]


class _ChimeUpdateUserRequestItem(TypedDict):
    UserId: str


class ChimeUpdateUserRequestItem(_ChimeUpdateUserRequestItem, total=False):
    LicenseType: str


class ChimeBatchUpdateUserResponse(TypedDict, total=False):
    UserErrors: List[ChimeUserError]


class ChimeCreateAccountResponse(TypedDict, total=False):
    Account: ChimeAccount


class _ChimeAccount(TypedDict):
    AwsAccountId: str
    AccountId: str
    Name: str


class ChimeAccount(_ChimeAccount, total=False):
    AccountType: str
    CreatedTimestamp: datetime.datetime
    DefaultLicense: str
    SupportedLicenses: List[str]


class ChimeCreateBotResponse(TypedDict, total=False):
    Bot: ChimeBot


class ChimeBot(TypedDict, total=False):
    BotId: str
    UserId: str
    DisplayName: str
    BotType: str
    Disabled: bool
    CreatedTimestamp: datetime.datetime
    UpdatedTimestamp: datetime.datetime
    BotEmail: str
    SecurityToken: str


class ChimeCreatePhoneNumberOrderResponse(TypedDict, total=False):
    PhoneNumberOrder: ChimePhoneNumberOrder


class ChimePhoneNumberOrder(TypedDict, total=False):
    PhoneNumberOrderId: str
    ProductType: str
    Status: str
    OrderedPhoneNumbers: List[ChimeOrderedPhoneNumber]
    CreatedTimestamp: datetime.datetime
    UpdatedTimestamp: datetime.datetime


class ChimeOrderedPhoneNumber(TypedDict, total=False):
    E164PhoneNumber: str
    Status: str


class ChimeCreateVoiceConnectorResponse(TypedDict, total=False):
    VoiceConnector: ChimeVoiceConnector


class ChimeVoiceConnector(TypedDict, total=False):
    VoiceConnectorId: str
    Name: str
    OutboundHostName: str
    RequireEncryption: bool
    CreatedTimestamp: datetime.datetime
    UpdatedTimestamp: datetime.datetime


class ChimeDeleteAccountResponse(TypedDict, total=False):
    pass


class ChimeDisassociatePhoneNumberFromUserResponse(TypedDict, total=False):
    pass


class ChimeDisassociatePhoneNumbersFromVoiceConnectorResponse(TypedDict, total=False):
    PhoneNumberErrors: List[ChimePhoneNumberError]


class ChimeGetAccountResponse(TypedDict, total=False):
    Account: ChimeAccount


class ChimeGetAccountSettingsResponse(TypedDict, total=False):
    AccountSettings: ChimeAccountSettings


class ChimeAccountSettings(TypedDict, total=False):
    DisableRemoteControl: bool
    EnableDialOut: bool


class ChimeGetBotResponse(TypedDict, total=False):
    Bot: ChimeBot


class ChimeGetEventsConfigurationResponse(TypedDict, total=False):
    EventsConfiguration: ChimeEventsConfiguration


class ChimeEventsConfiguration(TypedDict, total=False):
    BotId: str
    OutboundEventsHTTPSEndpoint: str
    LambdaFunctionArn: str


class ChimeGetGlobalSettingsResponse(TypedDict, total=False):
    BusinessCalling: ChimeBusinessCallingSettings
    VoiceConnector: ChimeVoiceConnectorSettings


class ChimeBusinessCallingSettings(TypedDict, total=False):
    CdrBucket: str


class ChimeVoiceConnectorSettings(TypedDict, total=False):
    CdrBucket: str


class ChimeGetPhoneNumberResponse(TypedDict, total=False):
    PhoneNumber: ChimePhoneNumber


class ChimePhoneNumber(TypedDict, total=False):
    PhoneNumberId: str
    E164PhoneNumber: str
    ProductType: str
    Status: str
    Capabilities: ChimePhoneNumberCapabilities
    Associations: List[ChimePhoneNumberAssociation]
    CreatedTimestamp: datetime.datetime
    UpdatedTimestamp: datetime.datetime
    DeletionTimestamp: datetime.datetime


class ChimePhoneNumberCapabilities(TypedDict, total=False):
    InboundCall: bool
    OutboundCall: bool
    InboundSMS: bool
    OutboundSMS: bool
    InboundMMS: bool
    OutboundMMS: bool


class ChimePhoneNumberAssociation(TypedDict, total=False):
    Value: str
    Name: str
    AssociatedTimestamp: datetime.datetime


class ChimeGetPhoneNumberOrderResponse(TypedDict, total=False):
    PhoneNumberOrder: ChimePhoneNumberOrder


class ChimeGetUserResponse(TypedDict, total=False):
    User: ChimeUser


class _ChimeUser(TypedDict):
    UserId: str


class ChimeUser(_ChimeUser, total=False):
    AccountId: str
    PrimaryEmail: str
    PrimaryProvisionedNumber: str
    DisplayName: str
    LicenseType: str
    UserRegistrationStatus: str
    UserInvitationStatus: str
    RegisteredOn: datetime.datetime
    InvitedOn: datetime.datetime
    PersonalPIN: str


class ChimeGetUserSettingsResponse(TypedDict, total=False):
    UserSettings: ChimeUserSettings


class ChimeUserSettings(TypedDict):
    Telephony: ChimeTelephonySettings


class ChimeTelephonySettings(TypedDict):
    InboundCalling: bool
    OutboundCalling: bool
    SMS: bool


class ChimeGetVoiceConnectorResponse(TypedDict, total=False):
    VoiceConnector: ChimeVoiceConnector


class ChimeGetVoiceConnectorOriginationResponse(TypedDict, total=False):
    Origination: ChimeOrigination


class ChimeOrigination(TypedDict, total=False):
    Routes: List[ChimeOriginationRoute]
    Disabled: bool


class ChimeOriginationRoute(TypedDict, total=False):
    Host: str
    Port: int
    Protocol: str
    Priority: int
    Weight: int


class ChimeGetVoiceConnectorTerminationResponse(TypedDict, total=False):
    Termination: ChimeTermination


class ChimeTermination(TypedDict, total=False):
    CpsLimit: int
    DefaultPhoneNumber: str
    CallingRegions: List[str]
    CidrAllowedList: List[str]
    Disabled: bool


class ChimeGetVoiceConnectorTerminationHealthResponse(TypedDict, total=False):
    TerminationHealth: ChimeTerminationHealth


class ChimeTerminationHealth(TypedDict, total=False):
    Timestamp: datetime.datetime
    Source: str


class ChimeInviteUsersResponse(TypedDict, total=False):
    Invites: List[ChimeInvite]


class ChimeInvite(TypedDict, total=False):
    InviteId: str
    Status: str
    EmailAddress: str
    EmailStatus: str


class ChimeListAccountsResponse(TypedDict, total=False):
    Accounts: List[ChimeAccount]
    NextToken: str


class ChimeListBotsResponse(TypedDict, total=False):
    Bots: List[ChimeBot]
    NextToken: str


class ChimeListPhoneNumberOrdersResponse(TypedDict, total=False):
    PhoneNumberOrders: List[ChimePhoneNumberOrder]
    NextToken: str


class ChimeListPhoneNumbersResponse(TypedDict, total=False):
    PhoneNumbers: List[ChimePhoneNumber]
    NextToken: str


class ChimeListUsersResponse(TypedDict, total=False):
    Users: List[ChimeUser]
    NextToken: str


class ChimeListVoiceConnectorTerminationCredentialsResponse(TypedDict, total=False):
    Usernames: List[str]


class ChimeListVoiceConnectorsResponse(TypedDict, total=False):
    VoiceConnectors: List[ChimeVoiceConnector]
    NextToken: str


class ChimeLogoutUserResponse(TypedDict, total=False):
    pass


class ChimePutEventsConfigurationResponse(TypedDict, total=False):
    EventsConfiguration: ChimeEventsConfiguration


class ChimePutVoiceConnectorOriginationResponse(TypedDict, total=False):
    Origination: ChimeOrigination


class ChimePutVoiceConnectorTerminationResponse(TypedDict, total=False):
    Termination: ChimeTermination


class ChimeCredential(TypedDict, total=False):
    Username: str
    Password: str


class ChimeRegenerateSecurityTokenResponse(TypedDict, total=False):
    Bot: ChimeBot


class ChimeResetPersonalPINResponse(TypedDict, total=False):
    User: ChimeUser


class ChimeRestorePhoneNumberResponse(TypedDict, total=False):
    PhoneNumber: ChimePhoneNumber


class ChimeSearchAvailablePhoneNumbersResponse(TypedDict, total=False):
    E164PhoneNumbers: List[str]


class ChimeUpdateAccountResponse(TypedDict, total=False):
    Account: ChimeAccount


class ChimeUpdateAccountSettingsResponse(TypedDict, total=False):
    pass


class ChimeUpdateBotResponse(TypedDict, total=False):
    Bot: ChimeBot


class ChimeUpdatePhoneNumberResponse(TypedDict, total=False):
    PhoneNumber: ChimePhoneNumber


class ChimeUpdateUserResponse(TypedDict, total=False):
    User: ChimeUser


class ChimeUpdateVoiceConnectorResponse(TypedDict, total=False):
    VoiceConnector: ChimeVoiceConnector


class Cloud9(BaseClient):
    def create_environment_ec2(self, *,
        name: str,
        instanceType: str,
        description: str = ...,
        clientRequestToken: str = ...,
        subnetId: str = ...,
        automaticStopTimeMinutes: int = ...,
        ownerArn: str = ...
    ) -> Cloud9CreateEnvironmentEC2Result: ...

    def create_environment_membership(self, *,
        environmentId: str,
        userArn: str,
        permissions: str
    ) -> Cloud9CreateEnvironmentMembershipResult: ...

    def delete_environment(self, *,
        environmentId: str
    ) -> Cloud9DeleteEnvironmentResult: ...

    def delete_environment_membership(self, *,
        environmentId: str,
        userArn: str
    ) -> Cloud9DeleteEnvironmentMembershipResult: ...

    def describe_environment_memberships(self, *,
        userArn: str = ...,
        environmentId: str = ...,
        permissions: List[str] = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> Cloud9DescribeEnvironmentMembershipsResult: ...

    def describe_environment_status(self, *,
        environmentId: str
    ) -> Cloud9DescribeEnvironmentStatusResult: ...

    def describe_environments(self, *,
        environmentIds: List[str]
    ) -> Cloud9DescribeEnvironmentsResult: ...

    def list_environments(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> Cloud9ListEnvironmentsResult: ...

    def update_environment(self, *,
        environmentId: str,
        name: str = ...,
        description: str = ...
    ) -> Cloud9UpdateEnvironmentResult: ...

    def update_environment_membership(self, *,
        environmentId: str,
        userArn: str,
        permissions: str
    ) -> Cloud9UpdateEnvironmentMembershipResult: ...


class Cloud9CreateEnvironmentEC2Result(TypedDict, total=False):
    environmentId: str


class Cloud9CreateEnvironmentMembershipResult(TypedDict, total=False):
    membership: Cloud9EnvironmentMember


class Cloud9EnvironmentMember(TypedDict, total=False):
    permissions: str
    userId: str
    userArn: str
    environmentId: str
    lastAccess: datetime.datetime


class Cloud9DeleteEnvironmentResult(TypedDict, total=False):
    pass


class Cloud9DeleteEnvironmentMembershipResult(TypedDict, total=False):
    pass


class Cloud9DescribeEnvironmentMembershipsResult(TypedDict, total=False):
    memberships: List[Cloud9EnvironmentMember]
    nextToken: str


class Cloud9DescribeEnvironmentStatusResult(TypedDict, total=False):
    status: str
    message: str


class Cloud9DescribeEnvironmentsResult(TypedDict, total=False):
    environments: List[Cloud9Environment]


class Cloud9Environment(TypedDict, total=False):
    id: str
    name: str
    description: str
    type: str
    arn: str
    ownerArn: str
    lifecycle: Cloud9EnvironmentLifecycle


class Cloud9EnvironmentLifecycle(TypedDict, total=False):
    status: str
    reason: str
    failureResource: str


class Cloud9ListEnvironmentsResult(TypedDict, total=False):
    nextToken: str
    environmentIds: List[str]


class Cloud9UpdateEnvironmentResult(TypedDict, total=False):
    pass


class Cloud9UpdateEnvironmentMembershipResult(TypedDict, total=False):
    membership: Cloud9EnvironmentMember


class CloudDirectory(BaseClient):
    def add_facet_to_object(self, *,
        DirectoryArn: str,
        SchemaFacet: CloudDirectorySchemaFacet,
        ObjectReference: CloudDirectoryObjectReference,
        ObjectAttributeList: List[CloudDirectoryAttributeKeyAndValue] = ...
    ) -> CloudDirectoryAddFacetToObjectResponse: ...

    def apply_schema(self, *,
        PublishedSchemaArn: str,
        DirectoryArn: str
    ) -> CloudDirectoryApplySchemaResponse: ...

    def attach_object(self, *,
        DirectoryArn: str,
        ParentReference: CloudDirectoryObjectReference,
        ChildReference: CloudDirectoryObjectReference,
        LinkName: str
    ) -> CloudDirectoryAttachObjectResponse: ...

    def attach_policy(self, *,
        DirectoryArn: str,
        PolicyReference: CloudDirectoryObjectReference,
        ObjectReference: CloudDirectoryObjectReference
    ) -> CloudDirectoryAttachPolicyResponse: ...

    def attach_to_index(self, *,
        DirectoryArn: str,
        IndexReference: CloudDirectoryObjectReference,
        TargetReference: CloudDirectoryObjectReference
    ) -> CloudDirectoryAttachToIndexResponse: ...

    def attach_typed_link(self, *,
        DirectoryArn: str,
        SourceObjectReference: CloudDirectoryObjectReference,
        TargetObjectReference: CloudDirectoryObjectReference,
        TypedLinkFacet: CloudDirectoryTypedLinkSchemaAndFacetName,
        Attributes: List[CloudDirectoryAttributeNameAndValue]
    ) -> CloudDirectoryAttachTypedLinkResponse: ...

    def batch_read(self, *,
        DirectoryArn: str,
        Operations: List[CloudDirectoryBatchReadOperation],
        ConsistencyLevel: str = ...
    ) -> CloudDirectoryBatchReadResponse: ...

    def batch_write(self, *,
        DirectoryArn: str,
        Operations: List[CloudDirectoryBatchWriteOperation]
    ) -> CloudDirectoryBatchWriteResponse: ...

    def create_directory(self, *,
        Name: str,
        SchemaArn: str
    ) -> CloudDirectoryCreateDirectoryResponse: ...

    def create_facet(self, *,
        SchemaArn: str,
        Name: str,
        Attributes: List[CloudDirectoryFacetAttribute] = ...,
        ObjectType: str = ...,
        FacetStyle: str = ...
    ) -> CloudDirectoryCreateFacetResponse: ...

    def create_index(self, *,
        DirectoryArn: str,
        OrderedIndexedAttributeList: List[CloudDirectoryAttributeKey],
        IsUnique: bool,
        ParentReference: CloudDirectoryObjectReference = ...,
        LinkName: str = ...
    ) -> CloudDirectoryCreateIndexResponse: ...

    def create_object(self, *,
        DirectoryArn: str,
        SchemaFacets: List[CloudDirectorySchemaFacet],
        ObjectAttributeList: List[CloudDirectoryAttributeKeyAndValue] = ...,
        ParentReference: CloudDirectoryObjectReference = ...,
        LinkName: str = ...
    ) -> CloudDirectoryCreateObjectResponse: ...

    def create_schema(self, *,
        Name: str
    ) -> CloudDirectoryCreateSchemaResponse: ...

    def create_typed_link_facet(self, *,
        SchemaArn: str,
        Facet: CloudDirectoryTypedLinkFacet
    ) -> CloudDirectoryCreateTypedLinkFacetResponse: ...

    def delete_directory(self, *,
        DirectoryArn: str
    ) -> CloudDirectoryDeleteDirectoryResponse: ...

    def delete_facet(self, *,
        SchemaArn: str,
        Name: str
    ) -> CloudDirectoryDeleteFacetResponse: ...

    def delete_object(self, *,
        DirectoryArn: str,
        ObjectReference: CloudDirectoryObjectReference
    ) -> CloudDirectoryDeleteObjectResponse: ...

    def delete_schema(self, *,
        SchemaArn: str
    ) -> CloudDirectoryDeleteSchemaResponse: ...

    def delete_typed_link_facet(self, *,
        SchemaArn: str,
        Name: str
    ) -> CloudDirectoryDeleteTypedLinkFacetResponse: ...

    def detach_from_index(self, *,
        DirectoryArn: str,
        IndexReference: CloudDirectoryObjectReference,
        TargetReference: CloudDirectoryObjectReference
    ) -> CloudDirectoryDetachFromIndexResponse: ...

    def detach_object(self, *,
        DirectoryArn: str,
        ParentReference: CloudDirectoryObjectReference,
        LinkName: str
    ) -> CloudDirectoryDetachObjectResponse: ...

    def detach_policy(self, *,
        DirectoryArn: str,
        PolicyReference: CloudDirectoryObjectReference,
        ObjectReference: CloudDirectoryObjectReference
    ) -> CloudDirectoryDetachPolicyResponse: ...

    def detach_typed_link(self, *,
        DirectoryArn: str,
        TypedLinkSpecifier: CloudDirectoryTypedLinkSpecifier
    ): ...

    def disable_directory(self, *,
        DirectoryArn: str
    ) -> CloudDirectoryDisableDirectoryResponse: ...

    def enable_directory(self, *,
        DirectoryArn: str
    ) -> CloudDirectoryEnableDirectoryResponse: ...

    def get_applied_schema_version(self, *,
        SchemaArn: str
    ) -> CloudDirectoryGetAppliedSchemaVersionResponse: ...

    def get_directory(self, *,
        DirectoryArn: str
    ) -> CloudDirectoryGetDirectoryResponse: ...

    def get_facet(self, *,
        SchemaArn: str,
        Name: str
    ) -> CloudDirectoryGetFacetResponse: ...

    def get_link_attributes(self, *,
        DirectoryArn: str,
        TypedLinkSpecifier: CloudDirectoryTypedLinkSpecifier,
        AttributeNames: List[str],
        ConsistencyLevel: str = ...
    ) -> CloudDirectoryGetLinkAttributesResponse: ...

    def get_object_attributes(self, *,
        DirectoryArn: str,
        ObjectReference: CloudDirectoryObjectReference,
        SchemaFacet: CloudDirectorySchemaFacet,
        AttributeNames: List[str],
        ConsistencyLevel: str = ...
    ) -> CloudDirectoryGetObjectAttributesResponse: ...

    def get_object_information(self, *,
        DirectoryArn: str,
        ObjectReference: CloudDirectoryObjectReference,
        ConsistencyLevel: str = ...
    ) -> CloudDirectoryGetObjectInformationResponse: ...

    def get_schema_as_json(self, *,
        SchemaArn: str
    ) -> CloudDirectoryGetSchemaAsJsonResponse: ...

    def get_typed_link_facet_information(self, *,
        SchemaArn: str,
        Name: str
    ) -> CloudDirectoryGetTypedLinkFacetInformationResponse: ...

    def list_applied_schema_arns(self, *,
        DirectoryArn: str,
        SchemaArn: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudDirectoryListAppliedSchemaArnsResponse: ...

    def list_attached_indices(self, *,
        DirectoryArn: str,
        TargetReference: CloudDirectoryObjectReference,
        NextToken: str = ...,
        MaxResults: int = ...,
        ConsistencyLevel: str = ...
    ) -> CloudDirectoryListAttachedIndicesResponse: ...

    def list_development_schema_arns(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudDirectoryListDevelopmentSchemaArnsResponse: ...

    def list_directories(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        state: str = ...
    ) -> CloudDirectoryListDirectoriesResponse: ...

    def list_facet_attributes(self, *,
        SchemaArn: str,
        Name: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudDirectoryListFacetAttributesResponse: ...

    def list_facet_names(self, *,
        SchemaArn: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudDirectoryListFacetNamesResponse: ...

    def list_incoming_typed_links(self, *,
        DirectoryArn: str,
        ObjectReference: CloudDirectoryObjectReference,
        FilterAttributeRanges: List[CloudDirectoryTypedLinkAttributeRange] = ...,
        FilterTypedLink: CloudDirectoryTypedLinkSchemaAndFacetName = ...,
        NextToken: str = ...,
        MaxResults: int = ...,
        ConsistencyLevel: str = ...
    ) -> CloudDirectoryListIncomingTypedLinksResponse: ...

    def list_index(self, *,
        DirectoryArn: str,
        IndexReference: CloudDirectoryObjectReference,
        RangesOnIndexedValues: List[CloudDirectoryObjectAttributeRange] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        ConsistencyLevel: str = ...
    ) -> CloudDirectoryListIndexResponse: ...

    def list_managed_schema_arns(self, *,
        SchemaArn: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudDirectoryListManagedSchemaArnsResponse: ...

    def list_object_attributes(self, *,
        DirectoryArn: str,
        ObjectReference: CloudDirectoryObjectReference,
        NextToken: str = ...,
        MaxResults: int = ...,
        ConsistencyLevel: str = ...,
        FacetFilter: CloudDirectorySchemaFacet = ...
    ) -> CloudDirectoryListObjectAttributesResponse: ...

    def list_object_children(self, *,
        DirectoryArn: str,
        ObjectReference: CloudDirectoryObjectReference,
        NextToken: str = ...,
        MaxResults: int = ...,
        ConsistencyLevel: str = ...
    ) -> CloudDirectoryListObjectChildrenResponse: ...

    def list_object_parent_paths(self, *,
        DirectoryArn: str,
        ObjectReference: CloudDirectoryObjectReference,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudDirectoryListObjectParentPathsResponse: ...

    def list_object_parents(self, *,
        DirectoryArn: str,
        ObjectReference: CloudDirectoryObjectReference,
        NextToken: str = ...,
        MaxResults: int = ...,
        ConsistencyLevel: str = ...,
        IncludeAllLinksToEachParent: bool = ...
    ) -> CloudDirectoryListObjectParentsResponse: ...

    def list_object_policies(self, *,
        DirectoryArn: str,
        ObjectReference: CloudDirectoryObjectReference,
        NextToken: str = ...,
        MaxResults: int = ...,
        ConsistencyLevel: str = ...
    ) -> CloudDirectoryListObjectPoliciesResponse: ...

    def list_outgoing_typed_links(self, *,
        DirectoryArn: str,
        ObjectReference: CloudDirectoryObjectReference,
        FilterAttributeRanges: List[CloudDirectoryTypedLinkAttributeRange] = ...,
        FilterTypedLink: CloudDirectoryTypedLinkSchemaAndFacetName = ...,
        NextToken: str = ...,
        MaxResults: int = ...,
        ConsistencyLevel: str = ...
    ) -> CloudDirectoryListOutgoingTypedLinksResponse: ...

    def list_policy_attachments(self, *,
        DirectoryArn: str,
        PolicyReference: CloudDirectoryObjectReference,
        NextToken: str = ...,
        MaxResults: int = ...,
        ConsistencyLevel: str = ...
    ) -> CloudDirectoryListPolicyAttachmentsResponse: ...

    def list_published_schema_arns(self, *,
        SchemaArn: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudDirectoryListPublishedSchemaArnsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudDirectoryListTagsForResourceResponse: ...

    def list_typed_link_facet_attributes(self, *,
        SchemaArn: str,
        Name: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudDirectoryListTypedLinkFacetAttributesResponse: ...

    def list_typed_link_facet_names(self, *,
        SchemaArn: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudDirectoryListTypedLinkFacetNamesResponse: ...

    def lookup_policy(self, *,
        DirectoryArn: str,
        ObjectReference: CloudDirectoryObjectReference,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudDirectoryLookupPolicyResponse: ...

    def publish_schema(self, *,
        DevelopmentSchemaArn: str,
        Version: str,
        MinorVersion: str = ...,
        Name: str = ...
    ) -> CloudDirectoryPublishSchemaResponse: ...

    def put_schema_from_json(self, *,
        SchemaArn: str,
        Document: str
    ) -> CloudDirectoryPutSchemaFromJsonResponse: ...

    def remove_facet_from_object(self, *,
        DirectoryArn: str,
        SchemaFacet: CloudDirectorySchemaFacet,
        ObjectReference: CloudDirectoryObjectReference
    ) -> CloudDirectoryRemoveFacetFromObjectResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: List[CloudDirectoryTag]
    ) -> CloudDirectoryTagResourceResponse: ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ) -> CloudDirectoryUntagResourceResponse: ...

    def update_facet(self, *,
        SchemaArn: str,
        Name: str,
        AttributeUpdates: List[CloudDirectoryFacetAttributeUpdate] = ...,
        ObjectType: str = ...
    ) -> CloudDirectoryUpdateFacetResponse: ...

    def update_link_attributes(self, *,
        DirectoryArn: str,
        TypedLinkSpecifier: CloudDirectoryTypedLinkSpecifier,
        AttributeUpdates: List[CloudDirectoryLinkAttributeUpdate]
    ) -> CloudDirectoryUpdateLinkAttributesResponse: ...

    def update_object_attributes(self, *,
        DirectoryArn: str,
        ObjectReference: CloudDirectoryObjectReference,
        AttributeUpdates: List[CloudDirectoryObjectAttributeUpdate]
    ) -> CloudDirectoryUpdateObjectAttributesResponse: ...

    def update_schema(self, *,
        SchemaArn: str,
        Name: str
    ) -> CloudDirectoryUpdateSchemaResponse: ...

    def update_typed_link_facet(self, *,
        SchemaArn: str,
        Name: str,
        AttributeUpdates: List[CloudDirectoryTypedLinkFacetAttributeUpdate],
        IdentityAttributeOrder: List[str]
    ) -> CloudDirectoryUpdateTypedLinkFacetResponse: ...

    def upgrade_applied_schema(self, *,
        PublishedSchemaArn: str,
        DirectoryArn: str,
        DryRun: bool = ...
    ) -> CloudDirectoryUpgradeAppliedSchemaResponse: ...

    def upgrade_published_schema(self, *,
        DevelopmentSchemaArn: str,
        PublishedSchemaArn: str,
        MinorVersion: str,
        DryRun: bool = ...
    ) -> CloudDirectoryUpgradePublishedSchemaResponse: ...


class CloudDirectorySchemaFacet(TypedDict, total=False):
    SchemaArn: str
    FacetName: str


class CloudDirectoryAttributeKeyAndValue(TypedDict):
    Key: CloudDirectoryAttributeKey
    Value: CloudDirectoryTypedAttributeValue


class CloudDirectoryAttributeKey(TypedDict):
    SchemaArn: str
    FacetName: str
    Name: str


class CloudDirectoryTypedAttributeValue(TypedDict, total=False):
    StringValue: str
    BinaryValue: bytes
    BooleanValue: bool
    NumberValue: str
    DatetimeValue: datetime.datetime


class CloudDirectoryObjectReference(TypedDict, total=False):
    Selector: str


class CloudDirectoryAddFacetToObjectResponse(TypedDict, total=False):
    pass


class CloudDirectoryApplySchemaResponse(TypedDict, total=False):
    AppliedSchemaArn: str
    DirectoryArn: str


class CloudDirectoryAttachObjectResponse(TypedDict, total=False):
    AttachedObjectIdentifier: str


class CloudDirectoryAttachPolicyResponse(TypedDict, total=False):
    pass


class CloudDirectoryAttachToIndexResponse(TypedDict, total=False):
    AttachedObjectIdentifier: str


class CloudDirectoryTypedLinkSchemaAndFacetName(TypedDict):
    SchemaArn: str
    TypedLinkName: str


class CloudDirectoryAttributeNameAndValue(TypedDict):
    AttributeName: str
    Value: CloudDirectoryTypedAttributeValue


class CloudDirectoryAttachTypedLinkResponse(TypedDict, total=False):
    TypedLinkSpecifier: CloudDirectoryTypedLinkSpecifier


class CloudDirectoryTypedLinkSpecifier(TypedDict):
    TypedLinkFacet: CloudDirectoryTypedLinkSchemaAndFacetName
    SourceObjectReference: CloudDirectoryObjectReference
    TargetObjectReference: CloudDirectoryObjectReference
    IdentityAttributeValues: List[CloudDirectoryAttributeNameAndValue]


class CloudDirectoryBatchReadOperation(TypedDict, total=False):
    ListObjectAttributes: CloudDirectoryBatchListObjectAttributes
    ListObjectChildren: CloudDirectoryBatchListObjectChildren
    ListAttachedIndices: CloudDirectoryBatchListAttachedIndices
    ListObjectParentPaths: CloudDirectoryBatchListObjectParentPaths
    GetObjectInformation: CloudDirectoryBatchGetObjectInformation
    GetObjectAttributes: CloudDirectoryBatchGetObjectAttributes
    ListObjectParents: CloudDirectoryBatchListObjectParents
    ListObjectPolicies: CloudDirectoryBatchListObjectPolicies
    ListPolicyAttachments: CloudDirectoryBatchListPolicyAttachments
    LookupPolicy: CloudDirectoryBatchLookupPolicy
    ListIndex: CloudDirectoryBatchListIndex
    ListOutgoingTypedLinks: CloudDirectoryBatchListOutgoingTypedLinks
    ListIncomingTypedLinks: CloudDirectoryBatchListIncomingTypedLinks
    GetLinkAttributes: CloudDirectoryBatchGetLinkAttributes


class _CloudDirectoryBatchListObjectAttributes(TypedDict):
    ObjectReference: CloudDirectoryObjectReference


class CloudDirectoryBatchListObjectAttributes(_CloudDirectoryBatchListObjectAttributes, total=False):
    NextToken: str
    MaxResults: int
    FacetFilter: CloudDirectorySchemaFacet


class _CloudDirectoryBatchListObjectChildren(TypedDict):
    ObjectReference: CloudDirectoryObjectReference


class CloudDirectoryBatchListObjectChildren(_CloudDirectoryBatchListObjectChildren, total=False):
    NextToken: str
    MaxResults: int


class _CloudDirectoryBatchListAttachedIndices(TypedDict):
    TargetReference: CloudDirectoryObjectReference


class CloudDirectoryBatchListAttachedIndices(_CloudDirectoryBatchListAttachedIndices, total=False):
    NextToken: str
    MaxResults: int


class _CloudDirectoryBatchListObjectParentPaths(TypedDict):
    ObjectReference: CloudDirectoryObjectReference


class CloudDirectoryBatchListObjectParentPaths(_CloudDirectoryBatchListObjectParentPaths, total=False):
    NextToken: str
    MaxResults: int


class CloudDirectoryBatchGetObjectInformation(TypedDict):
    ObjectReference: CloudDirectoryObjectReference


class CloudDirectoryBatchGetObjectAttributes(TypedDict):
    ObjectReference: CloudDirectoryObjectReference
    SchemaFacet: CloudDirectorySchemaFacet
    AttributeNames: List[str]


class _CloudDirectoryBatchListObjectParents(TypedDict):
    ObjectReference: CloudDirectoryObjectReference


class CloudDirectoryBatchListObjectParents(_CloudDirectoryBatchListObjectParents, total=False):
    NextToken: str
    MaxResults: int


class _CloudDirectoryBatchListObjectPolicies(TypedDict):
    ObjectReference: CloudDirectoryObjectReference


class CloudDirectoryBatchListObjectPolicies(_CloudDirectoryBatchListObjectPolicies, total=False):
    NextToken: str
    MaxResults: int


class _CloudDirectoryBatchListPolicyAttachments(TypedDict):
    PolicyReference: CloudDirectoryObjectReference


class CloudDirectoryBatchListPolicyAttachments(_CloudDirectoryBatchListPolicyAttachments, total=False):
    NextToken: str
    MaxResults: int


class _CloudDirectoryBatchLookupPolicy(TypedDict):
    ObjectReference: CloudDirectoryObjectReference


class CloudDirectoryBatchLookupPolicy(_CloudDirectoryBatchLookupPolicy, total=False):
    NextToken: str
    MaxResults: int


class _CloudDirectoryBatchListIndex(TypedDict):
    IndexReference: CloudDirectoryObjectReference


class CloudDirectoryBatchListIndex(_CloudDirectoryBatchListIndex, total=False):
    RangesOnIndexedValues: List[CloudDirectoryObjectAttributeRange]
    MaxResults: int
    NextToken: str


class CloudDirectoryObjectAttributeRange(TypedDict, total=False):
    AttributeKey: CloudDirectoryAttributeKey
    Range: CloudDirectoryTypedAttributeValueRange


class _CloudDirectoryTypedAttributeValueRange(TypedDict):
    StartMode: str
    EndMode: str


class CloudDirectoryTypedAttributeValueRange(_CloudDirectoryTypedAttributeValueRange, total=False):
    StartValue: CloudDirectoryTypedAttributeValue
    EndValue: CloudDirectoryTypedAttributeValue


class _CloudDirectoryBatchListOutgoingTypedLinks(TypedDict):
    ObjectReference: CloudDirectoryObjectReference


class CloudDirectoryBatchListOutgoingTypedLinks(_CloudDirectoryBatchListOutgoingTypedLinks, total=False):
    FilterAttributeRanges: List[CloudDirectoryTypedLinkAttributeRange]
    FilterTypedLink: CloudDirectoryTypedLinkSchemaAndFacetName
    NextToken: str
    MaxResults: int


class _CloudDirectoryTypedLinkAttributeRange(TypedDict):
    Range: CloudDirectoryTypedAttributeValueRange


class CloudDirectoryTypedLinkAttributeRange(_CloudDirectoryTypedLinkAttributeRange, total=False):
    AttributeName: str


class _CloudDirectoryBatchListIncomingTypedLinks(TypedDict):
    ObjectReference: CloudDirectoryObjectReference


class CloudDirectoryBatchListIncomingTypedLinks(_CloudDirectoryBatchListIncomingTypedLinks, total=False):
    FilterAttributeRanges: List[CloudDirectoryTypedLinkAttributeRange]
    FilterTypedLink: CloudDirectoryTypedLinkSchemaAndFacetName
    NextToken: str
    MaxResults: int


class CloudDirectoryBatchGetLinkAttributes(TypedDict):
    TypedLinkSpecifier: CloudDirectoryTypedLinkSpecifier
    AttributeNames: List[str]


class CloudDirectoryBatchReadResponse(TypedDict, total=False):
    Responses: List[CloudDirectoryBatchReadOperationResponse]


class CloudDirectoryBatchReadOperationResponse(TypedDict, total=False):
    SuccessfulResponse: CloudDirectoryBatchReadSuccessfulResponse
    ExceptionResponse: CloudDirectoryBatchReadException


class CloudDirectoryBatchReadSuccessfulResponse(TypedDict, total=False):
    ListObjectAttributes: CloudDirectoryBatchListObjectAttributesResponse
    ListObjectChildren: CloudDirectoryBatchListObjectChildrenResponse
    GetObjectInformation: CloudDirectoryBatchGetObjectInformationResponse
    GetObjectAttributes: CloudDirectoryBatchGetObjectAttributesResponse
    ListAttachedIndices: CloudDirectoryBatchListAttachedIndicesResponse
    ListObjectParentPaths: CloudDirectoryBatchListObjectParentPathsResponse
    ListObjectPolicies: CloudDirectoryBatchListObjectPoliciesResponse
    ListPolicyAttachments: CloudDirectoryBatchListPolicyAttachmentsResponse
    LookupPolicy: CloudDirectoryBatchLookupPolicyResponse
    ListIndex: CloudDirectoryBatchListIndexResponse
    ListOutgoingTypedLinks: CloudDirectoryBatchListOutgoingTypedLinksResponse
    ListIncomingTypedLinks: CloudDirectoryBatchListIncomingTypedLinksResponse
    GetLinkAttributes: CloudDirectoryBatchGetLinkAttributesResponse
    ListObjectParents: CloudDirectoryBatchListObjectParentsResponse


class CloudDirectoryBatchListObjectAttributesResponse(TypedDict, total=False):
    Attributes: List[CloudDirectoryAttributeKeyAndValue]
    NextToken: str


class CloudDirectoryBatchListObjectChildrenResponse(TypedDict, total=False):
    Children: Dict[str, str]
    NextToken: str


class CloudDirectoryBatchGetObjectInformationResponse(TypedDict, total=False):
    SchemaFacets: List[CloudDirectorySchemaFacet]
    ObjectIdentifier: str


class CloudDirectoryBatchGetObjectAttributesResponse(TypedDict, total=False):
    Attributes: List[CloudDirectoryAttributeKeyAndValue]


class CloudDirectoryBatchListAttachedIndicesResponse(TypedDict, total=False):
    IndexAttachments: List[CloudDirectoryIndexAttachment]
    NextToken: str


class CloudDirectoryIndexAttachment(TypedDict, total=False):
    IndexedAttributes: List[CloudDirectoryAttributeKeyAndValue]
    ObjectIdentifier: str


class CloudDirectoryBatchListObjectParentPathsResponse(TypedDict, total=False):
    PathToObjectIdentifiersList: List[CloudDirectoryPathToObjectIdentifiers]
    NextToken: str


class CloudDirectoryPathToObjectIdentifiers(TypedDict, total=False):
    Path: str
    ObjectIdentifiers: List[str]


class CloudDirectoryBatchListObjectPoliciesResponse(TypedDict, total=False):
    AttachedPolicyIds: List[str]
    NextToken: str


class CloudDirectoryBatchListPolicyAttachmentsResponse(TypedDict, total=False):
    ObjectIdentifiers: List[str]
    NextToken: str


class CloudDirectoryBatchLookupPolicyResponse(TypedDict, total=False):
    PolicyToPathList: List[CloudDirectoryPolicyToPath]
    NextToken: str


class CloudDirectoryPolicyToPath(TypedDict, total=False):
    Path: str
    Policies: List[CloudDirectoryPolicyAttachment]


class CloudDirectoryPolicyAttachment(TypedDict, total=False):
    PolicyId: str
    ObjectIdentifier: str
    PolicyType: str


class CloudDirectoryBatchListIndexResponse(TypedDict, total=False):
    IndexAttachments: List[CloudDirectoryIndexAttachment]
    NextToken: str


class CloudDirectoryBatchListOutgoingTypedLinksResponse(TypedDict, total=False):
    TypedLinkSpecifiers: List[CloudDirectoryTypedLinkSpecifier]
    NextToken: str


class CloudDirectoryBatchListIncomingTypedLinksResponse(TypedDict, total=False):
    LinkSpecifiers: List[CloudDirectoryTypedLinkSpecifier]
    NextToken: str


class CloudDirectoryBatchGetLinkAttributesResponse(TypedDict, total=False):
    Attributes: List[CloudDirectoryAttributeKeyAndValue]


class CloudDirectoryBatchListObjectParentsResponse(TypedDict, total=False):
    ParentLinks: List[CloudDirectoryObjectIdentifierAndLinkNameTuple]
    NextToken: str


class CloudDirectoryObjectIdentifierAndLinkNameTuple(TypedDict, total=False):
    ObjectIdentifier: str
    LinkName: str


class CloudDirectoryBatchReadException(TypedDict, total=False):
    Type: str
    Message: str


class CloudDirectoryBatchWriteOperation(TypedDict, total=False):
    CreateObject: CloudDirectoryBatchCreateObject
    AttachObject: CloudDirectoryBatchAttachObject
    DetachObject: CloudDirectoryBatchDetachObject
    UpdateObjectAttributes: CloudDirectoryBatchUpdateObjectAttributes
    DeleteObject: CloudDirectoryBatchDeleteObject
    AddFacetToObject: CloudDirectoryBatchAddFacetToObject
    RemoveFacetFromObject: CloudDirectoryBatchRemoveFacetFromObject
    AttachPolicy: CloudDirectoryBatchAttachPolicy
    DetachPolicy: CloudDirectoryBatchDetachPolicy
    CreateIndex: CloudDirectoryBatchCreateIndex
    AttachToIndex: CloudDirectoryBatchAttachToIndex
    DetachFromIndex: CloudDirectoryBatchDetachFromIndex
    AttachTypedLink: CloudDirectoryBatchAttachTypedLink
    DetachTypedLink: CloudDirectoryBatchDetachTypedLink
    UpdateLinkAttributes: CloudDirectoryBatchUpdateLinkAttributes


class _CloudDirectoryBatchCreateObject(TypedDict):
    SchemaFacet: List[CloudDirectorySchemaFacet]
    ObjectAttributeList: List[CloudDirectoryAttributeKeyAndValue]


class CloudDirectoryBatchCreateObject(_CloudDirectoryBatchCreateObject, total=False):
    ParentReference: CloudDirectoryObjectReference
    LinkName: str
    BatchReferenceName: str


class CloudDirectoryBatchAttachObject(TypedDict):
    ParentReference: CloudDirectoryObjectReference
    ChildReference: CloudDirectoryObjectReference
    LinkName: str


class _CloudDirectoryBatchDetachObject(TypedDict):
    ParentReference: CloudDirectoryObjectReference
    LinkName: str


class CloudDirectoryBatchDetachObject(_CloudDirectoryBatchDetachObject, total=False):
    BatchReferenceName: str


class CloudDirectoryBatchUpdateObjectAttributes(TypedDict):
    ObjectReference: CloudDirectoryObjectReference
    AttributeUpdates: List[CloudDirectoryObjectAttributeUpdate]


class CloudDirectoryObjectAttributeUpdate(TypedDict, total=False):
    ObjectAttributeKey: CloudDirectoryAttributeKey
    ObjectAttributeAction: CloudDirectoryObjectAttributeAction


class CloudDirectoryObjectAttributeAction(TypedDict, total=False):
    ObjectAttributeActionType: str
    ObjectAttributeUpdateValue: CloudDirectoryTypedAttributeValue


class CloudDirectoryBatchDeleteObject(TypedDict):
    ObjectReference: CloudDirectoryObjectReference


class CloudDirectoryBatchAddFacetToObject(TypedDict):
    SchemaFacet: CloudDirectorySchemaFacet
    ObjectAttributeList: List[CloudDirectoryAttributeKeyAndValue]
    ObjectReference: CloudDirectoryObjectReference


class CloudDirectoryBatchRemoveFacetFromObject(TypedDict):
    SchemaFacet: CloudDirectorySchemaFacet
    ObjectReference: CloudDirectoryObjectReference


class CloudDirectoryBatchAttachPolicy(TypedDict):
    PolicyReference: CloudDirectoryObjectReference
    ObjectReference: CloudDirectoryObjectReference


class CloudDirectoryBatchDetachPolicy(TypedDict):
    PolicyReference: CloudDirectoryObjectReference
    ObjectReference: CloudDirectoryObjectReference


class _CloudDirectoryBatchCreateIndex(TypedDict):
    OrderedIndexedAttributeList: List[CloudDirectoryAttributeKey]
    IsUnique: bool


class CloudDirectoryBatchCreateIndex(_CloudDirectoryBatchCreateIndex, total=False):
    ParentReference: CloudDirectoryObjectReference
    LinkName: str
    BatchReferenceName: str


class CloudDirectoryBatchAttachToIndex(TypedDict):
    IndexReference: CloudDirectoryObjectReference
    TargetReference: CloudDirectoryObjectReference


class CloudDirectoryBatchDetachFromIndex(TypedDict):
    IndexReference: CloudDirectoryObjectReference
    TargetReference: CloudDirectoryObjectReference


class CloudDirectoryBatchAttachTypedLink(TypedDict):
    SourceObjectReference: CloudDirectoryObjectReference
    TargetObjectReference: CloudDirectoryObjectReference
    TypedLinkFacet: CloudDirectoryTypedLinkSchemaAndFacetName
    Attributes: List[CloudDirectoryAttributeNameAndValue]


class CloudDirectoryBatchDetachTypedLink(TypedDict):
    TypedLinkSpecifier: CloudDirectoryTypedLinkSpecifier


class CloudDirectoryBatchUpdateLinkAttributes(TypedDict):
    TypedLinkSpecifier: CloudDirectoryTypedLinkSpecifier
    AttributeUpdates: List[CloudDirectoryLinkAttributeUpdate]


class CloudDirectoryLinkAttributeUpdate(TypedDict, total=False):
    AttributeKey: CloudDirectoryAttributeKey
    AttributeAction: CloudDirectoryLinkAttributeAction


class CloudDirectoryLinkAttributeAction(TypedDict, total=False):
    AttributeActionType: str
    AttributeUpdateValue: CloudDirectoryTypedAttributeValue


class CloudDirectoryBatchWriteResponse(TypedDict, total=False):
    Responses: List[CloudDirectoryBatchWriteOperationResponse]


class CloudDirectoryBatchWriteOperationResponse(TypedDict, total=False):
    CreateObject: CloudDirectoryBatchCreateObjectResponse
    AttachObject: CloudDirectoryBatchAttachObjectResponse
    DetachObject: CloudDirectoryBatchDetachObjectResponse
    UpdateObjectAttributes: CloudDirectoryBatchUpdateObjectAttributesResponse
    DeleteObject: CloudDirectoryBatchDeleteObjectResponse
    AddFacetToObject: CloudDirectoryBatchAddFacetToObjectResponse
    RemoveFacetFromObject: CloudDirectoryBatchRemoveFacetFromObjectResponse
    AttachPolicy: CloudDirectoryBatchAttachPolicyResponse
    DetachPolicy: CloudDirectoryBatchDetachPolicyResponse
    CreateIndex: CloudDirectoryBatchCreateIndexResponse
    AttachToIndex: CloudDirectoryBatchAttachToIndexResponse
    DetachFromIndex: CloudDirectoryBatchDetachFromIndexResponse
    AttachTypedLink: CloudDirectoryBatchAttachTypedLinkResponse
    DetachTypedLink: CloudDirectoryBatchDetachTypedLinkResponse
    UpdateLinkAttributes: CloudDirectoryBatchUpdateLinkAttributesResponse


class CloudDirectoryBatchCreateObjectResponse(TypedDict, total=False):
    ObjectIdentifier: str


class CloudDirectoryBatchAttachObjectResponse(TypedDict, total=False):
    attachedObjectIdentifier: str


class CloudDirectoryBatchDetachObjectResponse(TypedDict, total=False):
    detachedObjectIdentifier: str


class CloudDirectoryBatchUpdateObjectAttributesResponse(TypedDict, total=False):
    ObjectIdentifier: str


class CloudDirectoryBatchDeleteObjectResponse(TypedDict, total=False):
    pass


class CloudDirectoryBatchAddFacetToObjectResponse(TypedDict, total=False):
    pass


class CloudDirectoryBatchRemoveFacetFromObjectResponse(TypedDict, total=False):
    pass


class CloudDirectoryBatchAttachPolicyResponse(TypedDict, total=False):
    pass


class CloudDirectoryBatchDetachPolicyResponse(TypedDict, total=False):
    pass


class CloudDirectoryBatchCreateIndexResponse(TypedDict, total=False):
    ObjectIdentifier: str


class CloudDirectoryBatchAttachToIndexResponse(TypedDict, total=False):
    AttachedObjectIdentifier: str


class CloudDirectoryBatchDetachFromIndexResponse(TypedDict, total=False):
    DetachedObjectIdentifier: str


class CloudDirectoryBatchAttachTypedLinkResponse(TypedDict, total=False):
    TypedLinkSpecifier: CloudDirectoryTypedLinkSpecifier


class CloudDirectoryBatchDetachTypedLinkResponse(TypedDict, total=False):
    pass


class CloudDirectoryBatchUpdateLinkAttributesResponse(TypedDict, total=False):
    pass


class CloudDirectoryCreateDirectoryResponse(TypedDict):
    DirectoryArn: str
    Name: str
    ObjectIdentifier: str
    AppliedSchemaArn: str


class _CloudDirectoryFacetAttribute(TypedDict):
    Name: str


class CloudDirectoryFacetAttribute(_CloudDirectoryFacetAttribute, total=False):
    AttributeDefinition: CloudDirectoryFacetAttributeDefinition
    AttributeReference: CloudDirectoryFacetAttributeReference
    RequiredBehavior: str


class _CloudDirectoryFacetAttributeDefinition(TypedDict):
    Type: str


class CloudDirectoryFacetAttributeDefinition(_CloudDirectoryFacetAttributeDefinition, total=False):
    DefaultValue: CloudDirectoryTypedAttributeValue
    IsImmutable: bool
    Rules: Dict[str, CloudDirectoryRule]


class CloudDirectoryRule(TypedDict, total=False):
    Type: str
    Parameters: Dict[str, str]


class CloudDirectoryFacetAttributeReference(TypedDict):
    TargetFacetName: str
    TargetAttributeName: str


class CloudDirectoryCreateFacetResponse(TypedDict, total=False):
    pass


class CloudDirectoryCreateIndexResponse(TypedDict, total=False):
    ObjectIdentifier: str


class CloudDirectoryCreateObjectResponse(TypedDict, total=False):
    ObjectIdentifier: str


class CloudDirectoryCreateSchemaResponse(TypedDict, total=False):
    SchemaArn: str


class CloudDirectoryTypedLinkFacet(TypedDict):
    Name: str
    Attributes: List[CloudDirectoryTypedLinkAttributeDefinition]
    IdentityAttributeOrder: List[str]


class _CloudDirectoryTypedLinkAttributeDefinition(TypedDict):
    Name: str
    Type: str
    RequiredBehavior: str


class CloudDirectoryTypedLinkAttributeDefinition(_CloudDirectoryTypedLinkAttributeDefinition, total=False):
    DefaultValue: CloudDirectoryTypedAttributeValue
    IsImmutable: bool
    Rules: Dict[str, CloudDirectoryRule]


class CloudDirectoryCreateTypedLinkFacetResponse(TypedDict, total=False):
    pass


class CloudDirectoryDeleteDirectoryResponse(TypedDict):
    DirectoryArn: str


class CloudDirectoryDeleteFacetResponse(TypedDict, total=False):
    pass


class CloudDirectoryDeleteObjectResponse(TypedDict, total=False):
    pass


class CloudDirectoryDeleteSchemaResponse(TypedDict, total=False):
    SchemaArn: str


class CloudDirectoryDeleteTypedLinkFacetResponse(TypedDict, total=False):
    pass


class CloudDirectoryDetachFromIndexResponse(TypedDict, total=False):
    DetachedObjectIdentifier: str


class CloudDirectoryDetachObjectResponse(TypedDict, total=False):
    DetachedObjectIdentifier: str


class CloudDirectoryDetachPolicyResponse(TypedDict, total=False):
    pass


class CloudDirectoryDisableDirectoryResponse(TypedDict):
    DirectoryArn: str


class CloudDirectoryEnableDirectoryResponse(TypedDict):
    DirectoryArn: str


class CloudDirectoryGetAppliedSchemaVersionResponse(TypedDict, total=False):
    AppliedSchemaArn: str


class CloudDirectoryGetDirectoryResponse(TypedDict):
    Directory: CloudDirectoryDirectory


class CloudDirectoryDirectory(TypedDict, total=False):
    Name: str
    DirectoryArn: str
    State: str
    CreationDateTime: datetime.datetime


class CloudDirectoryGetFacetResponse(TypedDict, total=False):
    Facet: CloudDirectoryFacet


class CloudDirectoryFacet(TypedDict, total=False):
    Name: str
    ObjectType: str
    FacetStyle: str


class CloudDirectoryGetLinkAttributesResponse(TypedDict, total=False):
    Attributes: List[CloudDirectoryAttributeKeyAndValue]


class CloudDirectoryGetObjectAttributesResponse(TypedDict, total=False):
    Attributes: List[CloudDirectoryAttributeKeyAndValue]


class CloudDirectoryGetObjectInformationResponse(TypedDict, total=False):
    SchemaFacets: List[CloudDirectorySchemaFacet]
    ObjectIdentifier: str


class CloudDirectoryGetSchemaAsJsonResponse(TypedDict, total=False):
    Name: str
    Document: str


class CloudDirectoryGetTypedLinkFacetInformationResponse(TypedDict, total=False):
    IdentityAttributeOrder: List[str]


class CloudDirectoryListAppliedSchemaArnsResponse(TypedDict, total=False):
    SchemaArns: List[str]
    NextToken: str


class CloudDirectoryListAttachedIndicesResponse(TypedDict, total=False):
    IndexAttachments: List[CloudDirectoryIndexAttachment]
    NextToken: str


class CloudDirectoryListDevelopmentSchemaArnsResponse(TypedDict, total=False):
    SchemaArns: List[str]
    NextToken: str


class _CloudDirectoryListDirectoriesResponse(TypedDict):
    Directories: List[CloudDirectoryDirectory]


class CloudDirectoryListDirectoriesResponse(_CloudDirectoryListDirectoriesResponse, total=False):
    NextToken: str


class CloudDirectoryListFacetAttributesResponse(TypedDict, total=False):
    Attributes: List[CloudDirectoryFacetAttribute]
    NextToken: str


class CloudDirectoryListFacetNamesResponse(TypedDict, total=False):
    FacetNames: List[str]
    NextToken: str


class CloudDirectoryListIncomingTypedLinksResponse(TypedDict, total=False):
    LinkSpecifiers: List[CloudDirectoryTypedLinkSpecifier]
    NextToken: str


class CloudDirectoryListIndexResponse(TypedDict, total=False):
    IndexAttachments: List[CloudDirectoryIndexAttachment]
    NextToken: str


class CloudDirectoryListManagedSchemaArnsResponse(TypedDict, total=False):
    SchemaArns: List[str]
    NextToken: str


class CloudDirectoryListObjectAttributesResponse(TypedDict, total=False):
    Attributes: List[CloudDirectoryAttributeKeyAndValue]
    NextToken: str


class CloudDirectoryListObjectChildrenResponse(TypedDict, total=False):
    Children: Dict[str, str]
    NextToken: str


class CloudDirectoryListObjectParentPathsResponse(TypedDict, total=False):
    PathToObjectIdentifiersList: List[CloudDirectoryPathToObjectIdentifiers]
    NextToken: str


class CloudDirectoryListObjectParentsResponse(TypedDict, total=False):
    Parents: Dict[str, str]
    NextToken: str
    ParentLinks: List[CloudDirectoryObjectIdentifierAndLinkNameTuple]


class CloudDirectoryListObjectPoliciesResponse(TypedDict, total=False):
    AttachedPolicyIds: List[str]
    NextToken: str


class CloudDirectoryListOutgoingTypedLinksResponse(TypedDict, total=False):
    TypedLinkSpecifiers: List[CloudDirectoryTypedLinkSpecifier]
    NextToken: str


class CloudDirectoryListPolicyAttachmentsResponse(TypedDict, total=False):
    ObjectIdentifiers: List[str]
    NextToken: str


class CloudDirectoryListPublishedSchemaArnsResponse(TypedDict, total=False):
    SchemaArns: List[str]
    NextToken: str


class CloudDirectoryListTagsForResourceResponse(TypedDict, total=False):
    Tags: List[CloudDirectoryTag]
    NextToken: str


class CloudDirectoryTag(TypedDict, total=False):
    Key: str
    Value: str


class CloudDirectoryListTypedLinkFacetAttributesResponse(TypedDict, total=False):
    Attributes: List[CloudDirectoryTypedLinkAttributeDefinition]
    NextToken: str


class CloudDirectoryListTypedLinkFacetNamesResponse(TypedDict, total=False):
    FacetNames: List[str]
    NextToken: str


class CloudDirectoryLookupPolicyResponse(TypedDict, total=False):
    PolicyToPathList: List[CloudDirectoryPolicyToPath]
    NextToken: str


class CloudDirectoryPublishSchemaResponse(TypedDict, total=False):
    PublishedSchemaArn: str


class CloudDirectoryPutSchemaFromJsonResponse(TypedDict, total=False):
    Arn: str


class CloudDirectoryRemoveFacetFromObjectResponse(TypedDict, total=False):
    pass


class CloudDirectoryTagResourceResponse(TypedDict, total=False):
    pass


class CloudDirectoryUntagResourceResponse(TypedDict, total=False):
    pass


class CloudDirectoryFacetAttributeUpdate(TypedDict, total=False):
    Attribute: CloudDirectoryFacetAttribute
    Action: str


class CloudDirectoryUpdateFacetResponse(TypedDict, total=False):
    pass


class CloudDirectoryUpdateLinkAttributesResponse(TypedDict, total=False):
    pass


class CloudDirectoryUpdateObjectAttributesResponse(TypedDict, total=False):
    ObjectIdentifier: str


class CloudDirectoryUpdateSchemaResponse(TypedDict, total=False):
    SchemaArn: str


class CloudDirectoryTypedLinkFacetAttributeUpdate(TypedDict):
    Attribute: CloudDirectoryTypedLinkAttributeDefinition
    Action: str


class CloudDirectoryUpdateTypedLinkFacetResponse(TypedDict, total=False):
    pass


class CloudDirectoryUpgradeAppliedSchemaResponse(TypedDict, total=False):
    UpgradedSchemaArn: str
    DirectoryArn: str


class CloudDirectoryUpgradePublishedSchemaResponse(TypedDict, total=False):
    UpgradedSchemaArn: str


class CloudFormation(BaseClient):
    def cancel_update_stack(self, *,
        StackName: str,
        ClientRequestToken: str = ...
    ): ...

    def continue_update_rollback(self, *,
        StackName: str,
        RoleARN: str = ...,
        ResourcesToSkip: List[str] = ...,
        ClientRequestToken: str = ...
    ) -> CloudFormationContinueUpdateRollbackOutput: ...

    def create_change_set(self, *,
        StackName: str,
        ChangeSetName: str,
        TemplateBody: str = ...,
        TemplateURL: str = ...,
        UsePreviousTemplate: bool = ...,
        Parameters: List[CloudFormationParameter] = ...,
        Capabilities: List[str] = ...,
        ResourceTypes: List[str] = ...,
        RoleARN: str = ...,
        RollbackConfiguration: CloudFormationRollbackConfiguration = ...,
        NotificationARNs: List[str] = ...,
        Tags: List[CloudFormationTag] = ...,
        ClientToken: str = ...,
        Description: str = ...,
        ChangeSetType: str = ...
    ) -> CloudFormationCreateChangeSetOutput: ...

    def create_stack(self, *,
        StackName: str,
        TemplateBody: str = ...,
        TemplateURL: str = ...,
        Parameters: List[CloudFormationParameter] = ...,
        DisableRollback: bool = ...,
        RollbackConfiguration: CloudFormationRollbackConfiguration = ...,
        TimeoutInMinutes: int = ...,
        NotificationARNs: List[str] = ...,
        Capabilities: List[str] = ...,
        ResourceTypes: List[str] = ...,
        RoleARN: str = ...,
        OnFailure: str = ...,
        StackPolicyBody: str = ...,
        StackPolicyURL: str = ...,
        Tags: List[CloudFormationTag] = ...,
        ClientRequestToken: str = ...,
        EnableTerminationProtection: bool = ...
    ) -> CloudFormationCreateStackOutput: ...

    def create_stack_instances(self, *,
        StackSetName: str,
        Accounts: List[str],
        Regions: List[str],
        ParameterOverrides: List[CloudFormationParameter] = ...,
        OperationPreferences: CloudFormationStackSetOperationPreferences = ...,
        OperationId: str = ...
    ) -> CloudFormationCreateStackInstancesOutput: ...

    def create_stack_set(self, *,
        StackSetName: str,
        Description: str = ...,
        TemplateBody: str = ...,
        TemplateURL: str = ...,
        Parameters: List[CloudFormationParameter] = ...,
        Capabilities: List[str] = ...,
        Tags: List[CloudFormationTag] = ...,
        AdministrationRoleARN: str = ...,
        ExecutionRoleName: str = ...,
        ClientRequestToken: str = ...
    ) -> CloudFormationCreateStackSetOutput: ...

    def delete_change_set(self, *,
        ChangeSetName: str,
        StackName: str = ...
    ) -> CloudFormationDeleteChangeSetOutput: ...

    def delete_stack(self, *,
        StackName: str,
        RetainResources: List[str] = ...,
        RoleARN: str = ...,
        ClientRequestToken: str = ...
    ): ...

    def delete_stack_instances(self, *,
        StackSetName: str,
        Accounts: List[str],
        Regions: List[str],
        RetainStacks: bool,
        OperationPreferences: CloudFormationStackSetOperationPreferences = ...,
        OperationId: str = ...
    ) -> CloudFormationDeleteStackInstancesOutput: ...

    def delete_stack_set(self, *,
        StackSetName: str
    ) -> CloudFormationDeleteStackSetOutput: ...

    def describe_account_limits(self, *,
        NextToken: str = ...
    ) -> CloudFormationDescribeAccountLimitsOutput: ...

    def describe_change_set(self, *,
        ChangeSetName: str,
        StackName: str = ...,
        NextToken: str = ...
    ) -> CloudFormationDescribeChangeSetOutput: ...

    def describe_stack_drift_detection_status(self, *,
        StackDriftDetectionId: str
    ) -> CloudFormationDescribeStackDriftDetectionStatusOutput: ...

    def describe_stack_events(self, *,
        StackName: str = ...,
        NextToken: str = ...
    ) -> CloudFormationDescribeStackEventsOutput: ...

    def describe_stack_instance(self, *,
        StackSetName: str,
        StackInstanceAccount: str,
        StackInstanceRegion: str
    ) -> CloudFormationDescribeStackInstanceOutput: ...

    def describe_stack_resource(self, *,
        StackName: str,
        LogicalResourceId: str
    ) -> CloudFormationDescribeStackResourceOutput: ...

    def describe_stack_resource_drifts(self, *,
        StackName: str,
        StackResourceDriftStatusFilters: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudFormationDescribeStackResourceDriftsOutput: ...

    def describe_stack_resources(self, *,
        StackName: str = ...,
        LogicalResourceId: str = ...,
        PhysicalResourceId: str = ...
    ) -> CloudFormationDescribeStackResourcesOutput: ...

    def describe_stack_set(self, *,
        StackSetName: str
    ) -> CloudFormationDescribeStackSetOutput: ...

    def describe_stack_set_operation(self, *,
        StackSetName: str,
        OperationId: str
    ) -> CloudFormationDescribeStackSetOperationOutput: ...

    def describe_stacks(self, *,
        StackName: str = ...,
        NextToken: str = ...
    ) -> CloudFormationDescribeStacksOutput: ...

    def detect_stack_drift(self, *,
        StackName: str,
        LogicalResourceIds: List[str] = ...
    ) -> CloudFormationDetectStackDriftOutput: ...

    def detect_stack_resource_drift(self, *,
        StackName: str,
        LogicalResourceId: str
    ) -> CloudFormationDetectStackResourceDriftOutput: ...

    def estimate_template_cost(self, *,
        TemplateBody: str = ...,
        TemplateURL: str = ...,
        Parameters: List[CloudFormationParameter] = ...
    ) -> CloudFormationEstimateTemplateCostOutput: ...

    def execute_change_set(self, *,
        ChangeSetName: str,
        StackName: str = ...,
        ClientRequestToken: str = ...
    ) -> CloudFormationExecuteChangeSetOutput: ...

    def get_stack_policy(self, *,
        StackName: str
    ) -> CloudFormationGetStackPolicyOutput: ...

    def get_template(self, *,
        StackName: str = ...,
        ChangeSetName: str = ...,
        TemplateStage: str = ...
    ) -> CloudFormationGetTemplateOutput: ...

    def get_template_summary(self, *,
        TemplateBody: str = ...,
        TemplateURL: str = ...,
        StackName: str = ...,
        StackSetName: str = ...
    ) -> CloudFormationGetTemplateSummaryOutput: ...

    def list_change_sets(self, *,
        StackName: str,
        NextToken: str = ...
    ) -> CloudFormationListChangeSetsOutput: ...

    def list_exports(self, *,
        NextToken: str = ...
    ) -> CloudFormationListExportsOutput: ...

    def list_imports(self, *,
        ExportName: str,
        NextToken: str = ...
    ) -> CloudFormationListImportsOutput: ...

    def list_stack_instances(self, *,
        StackSetName: str,
        NextToken: str = ...,
        MaxResults: int = ...,
        StackInstanceAccount: str = ...,
        StackInstanceRegion: str = ...
    ) -> CloudFormationListStackInstancesOutput: ...

    def list_stack_resources(self, *,
        StackName: str,
        NextToken: str = ...
    ) -> CloudFormationListStackResourcesOutput: ...

    def list_stack_set_operation_results(self, *,
        StackSetName: str,
        OperationId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudFormationListStackSetOperationResultsOutput: ...

    def list_stack_set_operations(self, *,
        StackSetName: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudFormationListStackSetOperationsOutput: ...

    def list_stack_sets(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        Status: str = ...
    ) -> CloudFormationListStackSetsOutput: ...

    def list_stacks(self, *,
        NextToken: str = ...,
        StackStatusFilter: List[str] = ...
    ) -> CloudFormationListStacksOutput: ...

    def set_stack_policy(self, *,
        StackName: str,
        StackPolicyBody: str = ...,
        StackPolicyURL: str = ...
    ): ...

    def signal_resource(self, *,
        StackName: str,
        LogicalResourceId: str,
        UniqueId: str,
        Status: str
    ): ...

    def stop_stack_set_operation(self, *,
        StackSetName: str,
        OperationId: str
    ) -> CloudFormationStopStackSetOperationOutput: ...

    def update_stack(self, *,
        StackName: str,
        TemplateBody: str = ...,
        TemplateURL: str = ...,
        UsePreviousTemplate: bool = ...,
        StackPolicyDuringUpdateBody: str = ...,
        StackPolicyDuringUpdateURL: str = ...,
        Parameters: List[CloudFormationParameter] = ...,
        Capabilities: List[str] = ...,
        ResourceTypes: List[str] = ...,
        RoleARN: str = ...,
        RollbackConfiguration: CloudFormationRollbackConfiguration = ...,
        StackPolicyBody: str = ...,
        StackPolicyURL: str = ...,
        NotificationARNs: List[str] = ...,
        Tags: List[CloudFormationTag] = ...,
        ClientRequestToken: str = ...
    ) -> CloudFormationUpdateStackOutput: ...

    def update_stack_instances(self, *,
        StackSetName: str,
        Accounts: List[str],
        Regions: List[str],
        ParameterOverrides: List[CloudFormationParameter] = ...,
        OperationPreferences: CloudFormationStackSetOperationPreferences = ...,
        OperationId: str = ...
    ) -> CloudFormationUpdateStackInstancesOutput: ...

    def update_stack_set(self, *,
        StackSetName: str,
        Description: str = ...,
        TemplateBody: str = ...,
        TemplateURL: str = ...,
        UsePreviousTemplate: bool = ...,
        Parameters: List[CloudFormationParameter] = ...,
        Capabilities: List[str] = ...,
        Tags: List[CloudFormationTag] = ...,
        OperationPreferences: CloudFormationStackSetOperationPreferences = ...,
        AdministrationRoleARN: str = ...,
        ExecutionRoleName: str = ...,
        OperationId: str = ...,
        Accounts: List[str] = ...,
        Regions: List[str] = ...
    ) -> CloudFormationUpdateStackSetOutput: ...

    def update_termination_protection(self, *,
        EnableTerminationProtection: bool,
        StackName: str
    ) -> CloudFormationUpdateTerminationProtectionOutput: ...

    def validate_template(self, *,
        TemplateBody: str = ...,
        TemplateURL: str = ...
    ) -> CloudFormationValidateTemplateOutput: ...


class CloudFormationContinueUpdateRollbackOutput(TypedDict, total=False):
    pass


class CloudFormationParameter(TypedDict, total=False):
    ParameterKey: str
    ParameterValue: str
    UsePreviousValue: bool
    ResolvedValue: str


class CloudFormationRollbackConfiguration(TypedDict, total=False):
    RollbackTriggers: List[CloudFormationRollbackTrigger]
    MonitoringTimeInMinutes: int


class CloudFormationRollbackTrigger(TypedDict):
    Arn: str
    Type: str


class CloudFormationTag(TypedDict):
    Key: str
    Value: str


class CloudFormationCreateChangeSetOutput(TypedDict, total=False):
    Id: str
    StackId: str


class CloudFormationCreateStackOutput(TypedDict, total=False):
    StackId: str


class CloudFormationStackSetOperationPreferences(TypedDict, total=False):
    RegionOrder: List[str]
    FailureToleranceCount: int
    FailureTolerancePercentage: int
    MaxConcurrentCount: int
    MaxConcurrentPercentage: int


class CloudFormationCreateStackInstancesOutput(TypedDict, total=False):
    OperationId: str


class CloudFormationCreateStackSetOutput(TypedDict, total=False):
    StackSetId: str


class CloudFormationDeleteChangeSetOutput(TypedDict, total=False):
    pass


class CloudFormationDeleteStackInstancesOutput(TypedDict, total=False):
    OperationId: str


class CloudFormationDeleteStackSetOutput(TypedDict, total=False):
    pass


class CloudFormationDescribeAccountLimitsOutput(TypedDict, total=False):
    AccountLimits: List[CloudFormationAccountLimit]
    NextToken: str


class CloudFormationAccountLimit(TypedDict, total=False):
    Name: str
    Value: int


class CloudFormationDescribeChangeSetOutput(TypedDict, total=False):
    ChangeSetName: str
    ChangeSetId: str
    StackId: str
    StackName: str
    Description: str
    Parameters: List[CloudFormationParameter]
    CreationTime: datetime.datetime
    ExecutionStatus: str
    Status: str
    StatusReason: str
    NotificationARNs: List[str]
    RollbackConfiguration: CloudFormationRollbackConfiguration
    Capabilities: List[str]
    Tags: List[CloudFormationTag]
    Changes: List[CloudFormationChange]
    NextToken: str


class CloudFormationChange(TypedDict, total=False):
    Type: str
    ResourceChange: CloudFormationResourceChange


class CloudFormationResourceChange(TypedDict, total=False):
    Action: str
    LogicalResourceId: str
    PhysicalResourceId: str
    ResourceType: str
    Replacement: str
    Scope: List[str]
    Details: List[CloudFormationResourceChangeDetail]


class CloudFormationResourceChangeDetail(TypedDict, total=False):
    Target: CloudFormationResourceTargetDefinition
    Evaluation: str
    ChangeSource: str
    CausingEntity: str


class CloudFormationResourceTargetDefinition(TypedDict, total=False):
    Attribute: str
    Name: str
    RequiresRecreation: str


class _CloudFormationDescribeStackDriftDetectionStatusOutput(TypedDict):
    StackId: str
    StackDriftDetectionId: str
    DetectionStatus: str
    Timestamp: datetime.datetime


class CloudFormationDescribeStackDriftDetectionStatusOutput(_CloudFormationDescribeStackDriftDetectionStatusOutput, total=False):
    StackDriftStatus: str
    DetectionStatusReason: str
    DriftedStackResourceCount: int


class CloudFormationDescribeStackEventsOutput(TypedDict, total=False):
    StackEvents: List[CloudFormationStackEvent]
    NextToken: str


class _CloudFormationStackEvent(TypedDict):
    StackId: str
    EventId: str
    StackName: str
    Timestamp: datetime.datetime


class CloudFormationStackEvent(_CloudFormationStackEvent, total=False):
    LogicalResourceId: str
    PhysicalResourceId: str
    ResourceType: str
    ResourceStatus: str
    ResourceStatusReason: str
    ResourceProperties: str
    ClientRequestToken: str


class CloudFormationDescribeStackInstanceOutput(TypedDict, total=False):
    StackInstance: CloudFormationStackInstance


class CloudFormationStackInstance(TypedDict, total=False):
    StackSetId: str
    Region: str
    Account: str
    StackId: str
    ParameterOverrides: List[CloudFormationParameter]
    Status: str
    StatusReason: str


class CloudFormationDescribeStackResourceOutput(TypedDict, total=False):
    StackResourceDetail: CloudFormationStackResourceDetail


class _CloudFormationStackResourceDetail(TypedDict):
    LogicalResourceId: str
    ResourceType: str
    LastUpdatedTimestamp: datetime.datetime
    ResourceStatus: str


class CloudFormationStackResourceDetail(_CloudFormationStackResourceDetail, total=False):
    StackName: str
    StackId: str
    PhysicalResourceId: str
    ResourceStatusReason: str
    Description: str
    Metadata: str
    DriftInformation: CloudFormationStackResourceDriftInformation


class _CloudFormationStackResourceDriftInformation(TypedDict):
    StackResourceDriftStatus: str


class CloudFormationStackResourceDriftInformation(_CloudFormationStackResourceDriftInformation, total=False):
    LastCheckTimestamp: datetime.datetime


class _CloudFormationDescribeStackResourceDriftsOutput(TypedDict):
    StackResourceDrifts: List[CloudFormationStackResourceDrift]


class CloudFormationDescribeStackResourceDriftsOutput(_CloudFormationDescribeStackResourceDriftsOutput, total=False):
    NextToken: str


class _CloudFormationStackResourceDrift(TypedDict):
    StackId: str
    LogicalResourceId: str
    ResourceType: str
    StackResourceDriftStatus: str
    Timestamp: datetime.datetime


class CloudFormationStackResourceDrift(_CloudFormationStackResourceDrift, total=False):
    PhysicalResourceId: str
    PhysicalResourceIdContext: List[CloudFormationPhysicalResourceIdContextKeyValuePair]
    ExpectedProperties: str
    ActualProperties: str
    PropertyDifferences: List[CloudFormationPropertyDifference]


class CloudFormationPhysicalResourceIdContextKeyValuePair(TypedDict):
    Key: str
    Value: str


class CloudFormationPropertyDifference(TypedDict):
    PropertyPath: str
    ExpectedValue: str
    ActualValue: str
    DifferenceType: str


class CloudFormationDescribeStackResourcesOutput(TypedDict, total=False):
    StackResources: List[CloudFormationStackResource]


class _CloudFormationStackResource(TypedDict):
    LogicalResourceId: str
    ResourceType: str
    Timestamp: datetime.datetime
    ResourceStatus: str


class CloudFormationStackResource(_CloudFormationStackResource, total=False):
    StackName: str
    StackId: str
    PhysicalResourceId: str
    ResourceStatusReason: str
    Description: str
    DriftInformation: CloudFormationStackResourceDriftInformation


class CloudFormationDescribeStackSetOutput(TypedDict, total=False):
    StackSet: CloudFormationStackSet


class CloudFormationStackSet(TypedDict, total=False):
    StackSetName: str
    StackSetId: str
    Description: str
    Status: str
    TemplateBody: str
    Parameters: List[CloudFormationParameter]
    Capabilities: List[str]
    Tags: List[CloudFormationTag]
    StackSetARN: str
    AdministrationRoleARN: str
    ExecutionRoleName: str


class CloudFormationDescribeStackSetOperationOutput(TypedDict, total=False):
    StackSetOperation: CloudFormationStackSetOperation


class CloudFormationStackSetOperation(TypedDict, total=False):
    OperationId: str
    StackSetId: str
    Action: str
    Status: str
    OperationPreferences: CloudFormationStackSetOperationPreferences
    RetainStacks: bool
    AdministrationRoleARN: str
    ExecutionRoleName: str
    CreationTimestamp: datetime.datetime
    EndTimestamp: datetime.datetime


class CloudFormationDescribeStacksOutput(TypedDict, total=False):
    Stacks: List[CloudFormationStack]
    NextToken: str


class _CloudFormationStack(TypedDict):
    StackName: str
    CreationTime: datetime.datetime
    StackStatus: str


class CloudFormationStack(_CloudFormationStack, total=False):
    StackId: str
    ChangeSetId: str
    Description: str
    Parameters: List[CloudFormationParameter]
    DeletionTime: datetime.datetime
    LastUpdatedTime: datetime.datetime
    RollbackConfiguration: CloudFormationRollbackConfiguration
    StackStatusReason: str
    DisableRollback: bool
    NotificationARNs: List[str]
    TimeoutInMinutes: int
    Capabilities: List[str]
    Outputs: List[CloudFormationOutput]
    RoleARN: str
    Tags: List[CloudFormationTag]
    EnableTerminationProtection: bool
    ParentId: str
    RootId: str
    DriftInformation: CloudFormationStackDriftInformation


class CloudFormationOutput(TypedDict, total=False):
    OutputKey: str
    OutputValue: str
    Description: str
    ExportName: str


class _CloudFormationStackDriftInformation(TypedDict):
    StackDriftStatus: str


class CloudFormationStackDriftInformation(_CloudFormationStackDriftInformation, total=False):
    LastCheckTimestamp: datetime.datetime


class CloudFormationDetectStackDriftOutput(TypedDict):
    StackDriftDetectionId: str


class CloudFormationDetectStackResourceDriftOutput(TypedDict):
    StackResourceDrift: CloudFormationStackResourceDrift


class CloudFormationEstimateTemplateCostOutput(TypedDict, total=False):
    Url: str


class CloudFormationExecuteChangeSetOutput(TypedDict, total=False):
    pass


class CloudFormationGetStackPolicyOutput(TypedDict, total=False):
    StackPolicyBody: str


class CloudFormationGetTemplateOutput(TypedDict, total=False):
    TemplateBody: str
    StagesAvailable: List[str]


class CloudFormationGetTemplateSummaryOutput(TypedDict, total=False):
    Parameters: List[CloudFormationParameterDeclaration]
    Description: str
    Capabilities: List[str]
    CapabilitiesReason: str
    ResourceTypes: List[str]
    Version: str
    Metadata: str
    DeclaredTransforms: List[str]


class CloudFormationParameterDeclaration(TypedDict, total=False):
    ParameterKey: str
    DefaultValue: str
    ParameterType: str
    NoEcho: bool
    Description: str
    ParameterConstraints: CloudFormationParameterConstraints


class CloudFormationParameterConstraints(TypedDict, total=False):
    AllowedValues: List[str]


class CloudFormationListChangeSetsOutput(TypedDict, total=False):
    Summaries: List[CloudFormationChangeSetSummary]
    NextToken: str


class CloudFormationChangeSetSummary(TypedDict, total=False):
    StackId: str
    StackName: str
    ChangeSetId: str
    ChangeSetName: str
    ExecutionStatus: str
    Status: str
    StatusReason: str
    CreationTime: datetime.datetime
    Description: str


class CloudFormationListExportsOutput(TypedDict, total=False):
    Exports: List[CloudFormationExport]
    NextToken: str


class CloudFormationExport(TypedDict, total=False):
    ExportingStackId: str
    Name: str
    Value: str


class CloudFormationListImportsOutput(TypedDict, total=False):
    Imports: List[str]
    NextToken: str


class CloudFormationListStackInstancesOutput(TypedDict, total=False):
    Summaries: List[CloudFormationStackInstanceSummary]
    NextToken: str


class CloudFormationStackInstanceSummary(TypedDict, total=False):
    StackSetId: str
    Region: str
    Account: str
    StackId: str
    Status: str
    StatusReason: str


class CloudFormationListStackResourcesOutput(TypedDict, total=False):
    StackResourceSummaries: List[CloudFormationStackResourceSummary]
    NextToken: str


class _CloudFormationStackResourceSummary(TypedDict):
    LogicalResourceId: str
    ResourceType: str
    LastUpdatedTimestamp: datetime.datetime
    ResourceStatus: str


class CloudFormationStackResourceSummary(_CloudFormationStackResourceSummary, total=False):
    PhysicalResourceId: str
    ResourceStatusReason: str
    DriftInformation: CloudFormationStackResourceDriftInformationSummary


class _CloudFormationStackResourceDriftInformationSummary(TypedDict):
    StackResourceDriftStatus: str


class CloudFormationStackResourceDriftInformationSummary(_CloudFormationStackResourceDriftInformationSummary, total=False):
    LastCheckTimestamp: datetime.datetime


class CloudFormationListStackSetOperationResultsOutput(TypedDict, total=False):
    Summaries: List[CloudFormationStackSetOperationResultSummary]
    NextToken: str


class CloudFormationStackSetOperationResultSummary(TypedDict, total=False):
    Account: str
    Region: str
    Status: str
    StatusReason: str
    AccountGateResult: CloudFormationAccountGateResult


class CloudFormationAccountGateResult(TypedDict, total=False):
    Status: str
    StatusReason: str


class CloudFormationListStackSetOperationsOutput(TypedDict, total=False):
    Summaries: List[CloudFormationStackSetOperationSummary]
    NextToken: str


class CloudFormationStackSetOperationSummary(TypedDict, total=False):
    OperationId: str
    Action: str
    Status: str
    CreationTimestamp: datetime.datetime
    EndTimestamp: datetime.datetime


class CloudFormationListStackSetsOutput(TypedDict, total=False):
    Summaries: List[CloudFormationStackSetSummary]
    NextToken: str


class CloudFormationStackSetSummary(TypedDict, total=False):
    StackSetName: str
    StackSetId: str
    Description: str
    Status: str


class CloudFormationListStacksOutput(TypedDict, total=False):
    StackSummaries: List[CloudFormationStackSummary]
    NextToken: str


class _CloudFormationStackSummary(TypedDict):
    StackName: str
    CreationTime: datetime.datetime
    StackStatus: str


class CloudFormationStackSummary(_CloudFormationStackSummary, total=False):
    StackId: str
    TemplateDescription: str
    LastUpdatedTime: datetime.datetime
    DeletionTime: datetime.datetime
    StackStatusReason: str
    ParentId: str
    RootId: str
    DriftInformation: CloudFormationStackDriftInformationSummary


class _CloudFormationStackDriftInformationSummary(TypedDict):
    StackDriftStatus: str


class CloudFormationStackDriftInformationSummary(_CloudFormationStackDriftInformationSummary, total=False):
    LastCheckTimestamp: datetime.datetime


class CloudFormationStopStackSetOperationOutput(TypedDict, total=False):
    pass


class CloudFormationUpdateStackOutput(TypedDict, total=False):
    StackId: str


class CloudFormationUpdateStackInstancesOutput(TypedDict, total=False):
    OperationId: str


class CloudFormationUpdateStackSetOutput(TypedDict, total=False):
    OperationId: str


class CloudFormationUpdateTerminationProtectionOutput(TypedDict, total=False):
    StackId: str


class CloudFormationValidateTemplateOutput(TypedDict, total=False):
    Parameters: List[CloudFormationTemplateParameter]
    Description: str
    Capabilities: List[str]
    CapabilitiesReason: str
    DeclaredTransforms: List[str]


class CloudFormationTemplateParameter(TypedDict, total=False):
    ParameterKey: str
    DefaultValue: str
    NoEcho: bool
    Description: str


class CloudFront(BaseClient):
    def create_cloud_front_origin_access_identity(self, *,
        CloudFrontOriginAccessIdentityConfig: CloudFrontCloudFrontOriginAccessIdentityConfig
    ) -> CloudFrontCreateCloudFrontOriginAccessIdentityResult: ...

    def create_distribution(self, *,
        DistributionConfig: CloudFrontDistributionConfig
    ) -> CloudFrontCreateDistributionResult: ...

    def create_distribution_with_tags(self, *,
        DistributionConfigWithTags: CloudFrontDistributionConfigWithTags
    ) -> CloudFrontCreateDistributionWithTagsResult: ...

    def create_field_level_encryption_config(self, *,
        FieldLevelEncryptionConfig: CloudFrontFieldLevelEncryptionConfig
    ) -> CloudFrontCreateFieldLevelEncryptionConfigResult: ...

    def create_field_level_encryption_profile(self, *,
        FieldLevelEncryptionProfileConfig: CloudFrontFieldLevelEncryptionProfileConfig
    ) -> CloudFrontCreateFieldLevelEncryptionProfileResult: ...

    def create_invalidation(self, *,
        DistributionId: str,
        InvalidationBatch: CloudFrontInvalidationBatch
    ) -> CloudFrontCreateInvalidationResult: ...

    def create_public_key(self, *,
        PublicKeyConfig: CloudFrontPublicKeyConfig
    ) -> CloudFrontCreatePublicKeyResult: ...

    def create_streaming_distribution(self, *,
        StreamingDistributionConfig: CloudFrontStreamingDistributionConfig
    ) -> CloudFrontCreateStreamingDistributionResult: ...

    def create_streaming_distribution_with_tags(self, *,
        StreamingDistributionConfigWithTags: CloudFrontStreamingDistributionConfigWithTags
    ) -> CloudFrontCreateStreamingDistributionWithTagsResult: ...

    def delete_cloud_front_origin_access_identity(self, *,
        Id: str,
        IfMatch: str = ...
    ): ...

    def delete_distribution(self, *,
        Id: str,
        IfMatch: str = ...
    ): ...

    def delete_field_level_encryption_config(self, *,
        Id: str,
        IfMatch: str = ...
    ): ...

    def delete_field_level_encryption_profile(self, *,
        Id: str,
        IfMatch: str = ...
    ): ...

    def delete_public_key(self, *,
        Id: str,
        IfMatch: str = ...
    ): ...

    def delete_streaming_distribution(self, *,
        Id: str,
        IfMatch: str = ...
    ): ...

    def get_cloud_front_origin_access_identity(self, *,
        Id: str
    ) -> CloudFrontGetCloudFrontOriginAccessIdentityResult: ...

    def get_cloud_front_origin_access_identity_config(self, *,
        Id: str
    ) -> CloudFrontGetCloudFrontOriginAccessIdentityConfigResult: ...

    def get_distribution(self, *,
        Id: str
    ) -> CloudFrontGetDistributionResult: ...

    def get_distribution_config(self, *,
        Id: str
    ) -> CloudFrontGetDistributionConfigResult: ...

    def get_field_level_encryption(self, *,
        Id: str
    ) -> CloudFrontGetFieldLevelEncryptionResult: ...

    def get_field_level_encryption_config(self, *,
        Id: str
    ) -> CloudFrontGetFieldLevelEncryptionConfigResult: ...

    def get_field_level_encryption_profile(self, *,
        Id: str
    ) -> CloudFrontGetFieldLevelEncryptionProfileResult: ...

    def get_field_level_encryption_profile_config(self, *,
        Id: str
    ) -> CloudFrontGetFieldLevelEncryptionProfileConfigResult: ...

    def get_invalidation(self, *,
        DistributionId: str,
        Id: str
    ) -> CloudFrontGetInvalidationResult: ...

    def get_public_key(self, *,
        Id: str
    ) -> CloudFrontGetPublicKeyResult: ...

    def get_public_key_config(self, *,
        Id: str
    ) -> CloudFrontGetPublicKeyConfigResult: ...

    def get_streaming_distribution(self, *,
        Id: str
    ) -> CloudFrontGetStreamingDistributionResult: ...

    def get_streaming_distribution_config(self, *,
        Id: str
    ) -> CloudFrontGetStreamingDistributionConfigResult: ...

    def list_cloud_front_origin_access_identities(self, *,
        Marker: str = ...,
        MaxItems: str = ...
    ) -> CloudFrontListCloudFrontOriginAccessIdentitiesResult: ...

    def list_distributions(self, *,
        Marker: str = ...,
        MaxItems: str = ...
    ) -> CloudFrontListDistributionsResult: ...

    def list_distributions_by_web_acl_id(self, *,
        WebACLId: str,
        Marker: str = ...,
        MaxItems: str = ...
    ) -> CloudFrontListDistributionsByWebACLIdResult: ...

    def list_field_level_encryption_configs(self, *,
        Marker: str = ...,
        MaxItems: str = ...
    ) -> CloudFrontListFieldLevelEncryptionConfigsResult: ...

    def list_field_level_encryption_profiles(self, *,
        Marker: str = ...,
        MaxItems: str = ...
    ) -> CloudFrontListFieldLevelEncryptionProfilesResult: ...

    def list_invalidations(self, *,
        DistributionId: str,
        Marker: str = ...,
        MaxItems: str = ...
    ) -> CloudFrontListInvalidationsResult: ...

    def list_public_keys(self, *,
        Marker: str = ...,
        MaxItems: str = ...
    ) -> CloudFrontListPublicKeysResult: ...

    def list_streaming_distributions(self, *,
        Marker: str = ...,
        MaxItems: str = ...
    ) -> CloudFrontListStreamingDistributionsResult: ...

    def list_tags_for_resource(self, *,
        Resource: str
    ) -> CloudFrontListTagsForResourceResult: ...

    def tag_resource(self, *,
        Resource: str,
        Tags: CloudFrontTags
    ): ...

    def untag_resource(self, *,
        Resource: str,
        TagKeys: CloudFrontTagKeys
    ): ...

    def update_cloud_front_origin_access_identity(self, *,
        CloudFrontOriginAccessIdentityConfig: CloudFrontCloudFrontOriginAccessIdentityConfig,
        Id: str,
        IfMatch: str = ...
    ) -> CloudFrontUpdateCloudFrontOriginAccessIdentityResult: ...

    def update_distribution(self, *,
        DistributionConfig: CloudFrontDistributionConfig,
        Id: str,
        IfMatch: str = ...
    ) -> CloudFrontUpdateDistributionResult: ...

    def update_field_level_encryption_config(self, *,
        FieldLevelEncryptionConfig: CloudFrontFieldLevelEncryptionConfig,
        Id: str,
        IfMatch: str = ...
    ) -> CloudFrontUpdateFieldLevelEncryptionConfigResult: ...

    def update_field_level_encryption_profile(self, *,
        FieldLevelEncryptionProfileConfig: CloudFrontFieldLevelEncryptionProfileConfig,
        Id: str,
        IfMatch: str = ...
    ) -> CloudFrontUpdateFieldLevelEncryptionProfileResult: ...

    def update_public_key(self, *,
        PublicKeyConfig: CloudFrontPublicKeyConfig,
        Id: str,
        IfMatch: str = ...
    ) -> CloudFrontUpdatePublicKeyResult: ...

    def update_streaming_distribution(self, *,
        StreamingDistributionConfig: CloudFrontStreamingDistributionConfig,
        Id: str,
        IfMatch: str = ...
    ) -> CloudFrontUpdateStreamingDistributionResult: ...


class CloudFrontCloudFrontOriginAccessIdentityConfig(TypedDict):
    CallerReference: str
    Comment: str


class CloudFrontCreateCloudFrontOriginAccessIdentityResult(TypedDict, total=False):
    CloudFrontOriginAccessIdentity: CloudFrontCloudFrontOriginAccessIdentity
    Location: str
    ETag: str


class _CloudFrontCloudFrontOriginAccessIdentity(TypedDict):
    Id: str
    S3CanonicalUserId: str


class CloudFrontCloudFrontOriginAccessIdentity(_CloudFrontCloudFrontOriginAccessIdentity, total=False):
    CloudFrontOriginAccessIdentityConfig: CloudFrontCloudFrontOriginAccessIdentityConfig


class _CloudFrontDistributionConfig(TypedDict):
    CallerReference: str
    Origins: CloudFrontOrigins
    DefaultCacheBehavior: CloudFrontDefaultCacheBehavior
    Comment: str
    Enabled: bool


class CloudFrontDistributionConfig(_CloudFrontDistributionConfig, total=False):
    Aliases: CloudFrontAliases
    DefaultRootObject: str
    OriginGroups: CloudFrontOriginGroups
    CacheBehaviors: CloudFrontCacheBehaviors
    CustomErrorResponses: CloudFrontCustomErrorResponses
    Logging: CloudFrontLoggingConfig
    PriceClass: str
    ViewerCertificate: CloudFrontViewerCertificate
    Restrictions: CloudFrontRestrictions
    WebACLId: str
    HttpVersion: str
    IsIPV6Enabled: bool


class _CloudFrontAliases(TypedDict):
    Quantity: int


class CloudFrontAliases(_CloudFrontAliases, total=False):
    Items: List[str]


class CloudFrontOrigins(TypedDict):
    Quantity: int
    Items: List[CloudFrontOrigin]


class _CloudFrontOrigin(TypedDict):
    Id: str
    DomainName: str


class CloudFrontOrigin(_CloudFrontOrigin, total=False):
    OriginPath: str
    CustomHeaders: CloudFrontCustomHeaders
    S3OriginConfig: CloudFrontS3OriginConfig
    CustomOriginConfig: CloudFrontCustomOriginConfig


class _CloudFrontCustomHeaders(TypedDict):
    Quantity: int


class CloudFrontCustomHeaders(_CloudFrontCustomHeaders, total=False):
    Items: List[CloudFrontOriginCustomHeader]


class CloudFrontOriginCustomHeader(TypedDict):
    HeaderName: str
    HeaderValue: str


class CloudFrontS3OriginConfig(TypedDict):
    OriginAccessIdentity: str


class _CloudFrontCustomOriginConfig(TypedDict):
    HTTPPort: int
    HTTPSPort: int
    OriginProtocolPolicy: str


class CloudFrontCustomOriginConfig(_CloudFrontCustomOriginConfig, total=False):
    OriginSslProtocols: CloudFrontOriginSslProtocols
    OriginReadTimeout: int
    OriginKeepaliveTimeout: int


class CloudFrontOriginSslProtocols(TypedDict):
    Quantity: int
    Items: List[str]


class _CloudFrontOriginGroups(TypedDict):
    Quantity: int


class CloudFrontOriginGroups(_CloudFrontOriginGroups, total=False):
    Items: List[CloudFrontOriginGroup]


class CloudFrontOriginGroup(TypedDict):
    Id: str
    FailoverCriteria: CloudFrontOriginGroupFailoverCriteria
    Members: CloudFrontOriginGroupMembers


class CloudFrontOriginGroupFailoverCriteria(TypedDict):
    StatusCodes: CloudFrontStatusCodes


class CloudFrontStatusCodes(TypedDict):
    Quantity: int
    Items: List[int]


class CloudFrontOriginGroupMembers(TypedDict):
    Quantity: int
    Items: List[CloudFrontOriginGroupMember]


class CloudFrontOriginGroupMember(TypedDict):
    OriginId: str


class _CloudFrontDefaultCacheBehavior(TypedDict):
    TargetOriginId: str
    ForwardedValues: CloudFrontForwardedValues
    TrustedSigners: CloudFrontTrustedSigners
    ViewerProtocolPolicy: str
    MinTTL: int


class CloudFrontDefaultCacheBehavior(_CloudFrontDefaultCacheBehavior, total=False):
    AllowedMethods: CloudFrontAllowedMethods
    SmoothStreaming: bool
    DefaultTTL: int
    MaxTTL: int
    Compress: bool
    LambdaFunctionAssociations: CloudFrontLambdaFunctionAssociations
    FieldLevelEncryptionId: str


class _CloudFrontForwardedValues(TypedDict):
    QueryString: bool
    Cookies: CloudFrontCookiePreference


class CloudFrontForwardedValues(_CloudFrontForwardedValues, total=False):
    Headers: CloudFrontHeaders
    QueryStringCacheKeys: CloudFrontQueryStringCacheKeys


class _CloudFrontCookiePreference(TypedDict):
    Forward: str


class CloudFrontCookiePreference(_CloudFrontCookiePreference, total=False):
    WhitelistedNames: CloudFrontCookieNames


class _CloudFrontCookieNames(TypedDict):
    Quantity: int


class CloudFrontCookieNames(_CloudFrontCookieNames, total=False):
    Items: List[str]


class _CloudFrontHeaders(TypedDict):
    Quantity: int


class CloudFrontHeaders(_CloudFrontHeaders, total=False):
    Items: List[str]


class _CloudFrontQueryStringCacheKeys(TypedDict):
    Quantity: int


class CloudFrontQueryStringCacheKeys(_CloudFrontQueryStringCacheKeys, total=False):
    Items: List[str]


class _CloudFrontTrustedSigners(TypedDict):
    Enabled: bool
    Quantity: int


class CloudFrontTrustedSigners(_CloudFrontTrustedSigners, total=False):
    Items: List[str]


class _CloudFrontAllowedMethods(TypedDict):
    Quantity: int
    Items: List[str]


class CloudFrontAllowedMethods(_CloudFrontAllowedMethods, total=False):
    CachedMethods: CloudFrontCachedMethods


class CloudFrontCachedMethods(TypedDict):
    Quantity: int
    Items: List[str]


class _CloudFrontLambdaFunctionAssociations(TypedDict):
    Quantity: int


class CloudFrontLambdaFunctionAssociations(_CloudFrontLambdaFunctionAssociations, total=False):
    Items: List[CloudFrontLambdaFunctionAssociation]


class _CloudFrontLambdaFunctionAssociation(TypedDict):
    LambdaFunctionARN: str
    EventType: str


class CloudFrontLambdaFunctionAssociation(_CloudFrontLambdaFunctionAssociation, total=False):
    IncludeBody: bool


class _CloudFrontCacheBehaviors(TypedDict):
    Quantity: int


class CloudFrontCacheBehaviors(_CloudFrontCacheBehaviors, total=False):
    Items: List[CloudFrontCacheBehavior]


class _CloudFrontCacheBehavior(TypedDict):
    PathPattern: str
    TargetOriginId: str
    ForwardedValues: CloudFrontForwardedValues
    TrustedSigners: CloudFrontTrustedSigners
    ViewerProtocolPolicy: str
    MinTTL: int


class CloudFrontCacheBehavior(_CloudFrontCacheBehavior, total=False):
    AllowedMethods: CloudFrontAllowedMethods
    SmoothStreaming: bool
    DefaultTTL: int
    MaxTTL: int
    Compress: bool
    LambdaFunctionAssociations: CloudFrontLambdaFunctionAssociations
    FieldLevelEncryptionId: str


class _CloudFrontCustomErrorResponses(TypedDict):
    Quantity: int


class CloudFrontCustomErrorResponses(_CloudFrontCustomErrorResponses, total=False):
    Items: List[CloudFrontCustomErrorResponse]


class _CloudFrontCustomErrorResponse(TypedDict):
    ErrorCode: int


class CloudFrontCustomErrorResponse(_CloudFrontCustomErrorResponse, total=False):
    ResponsePagePath: str
    ResponseCode: str
    ErrorCachingMinTTL: int


class CloudFrontLoggingConfig(TypedDict):
    Enabled: bool
    IncludeCookies: bool
    Bucket: str
    Prefix: str


class CloudFrontViewerCertificate(TypedDict, total=False):
    CloudFrontDefaultCertificate: bool
    IAMCertificateId: str
    ACMCertificateArn: str
    SSLSupportMethod: str
    MinimumProtocolVersion: str
    Certificate: str
    CertificateSource: str


class CloudFrontRestrictions(TypedDict):
    GeoRestriction: CloudFrontGeoRestriction


class _CloudFrontGeoRestriction(TypedDict):
    RestrictionType: str
    Quantity: int


class CloudFrontGeoRestriction(_CloudFrontGeoRestriction, total=False):
    Items: List[str]


class CloudFrontCreateDistributionResult(TypedDict, total=False):
    Distribution: CloudFrontDistribution
    Location: str
    ETag: str


class CloudFrontDistribution(TypedDict):
    Id: str
    ARN: str
    Status: str
    LastModifiedTime: datetime.datetime
    InProgressInvalidationBatches: int
    DomainName: str
    ActiveTrustedSigners: CloudFrontActiveTrustedSigners
    DistributionConfig: CloudFrontDistributionConfig


class _CloudFrontActiveTrustedSigners(TypedDict):
    Enabled: bool
    Quantity: int


class CloudFrontActiveTrustedSigners(_CloudFrontActiveTrustedSigners, total=False):
    Items: List[CloudFrontSigner]


class CloudFrontSigner(TypedDict, total=False):
    AwsAccountNumber: str
    KeyPairIds: CloudFrontKeyPairIds


class _CloudFrontKeyPairIds(TypedDict):
    Quantity: int


class CloudFrontKeyPairIds(_CloudFrontKeyPairIds, total=False):
    Items: List[str]


class CloudFrontDistributionConfigWithTags(TypedDict):
    DistributionConfig: CloudFrontDistributionConfig
    Tags: CloudFrontTags


class CloudFrontTags(TypedDict, total=False):
    Items: List[CloudFrontTag]


class _CloudFrontTag(TypedDict):
    Key: str


class CloudFrontTag(_CloudFrontTag, total=False):
    Value: str


class CloudFrontCreateDistributionWithTagsResult(TypedDict, total=False):
    Distribution: CloudFrontDistribution
    Location: str
    ETag: str


class _CloudFrontFieldLevelEncryptionConfig(TypedDict):
    CallerReference: str


class CloudFrontFieldLevelEncryptionConfig(_CloudFrontFieldLevelEncryptionConfig, total=False):
    Comment: str
    QueryArgProfileConfig: CloudFrontQueryArgProfileConfig
    ContentTypeProfileConfig: CloudFrontContentTypeProfileConfig


class _CloudFrontQueryArgProfileConfig(TypedDict):
    ForwardWhenQueryArgProfileIsUnknown: bool


class CloudFrontQueryArgProfileConfig(_CloudFrontQueryArgProfileConfig, total=False):
    QueryArgProfiles: CloudFrontQueryArgProfiles


class _CloudFrontQueryArgProfiles(TypedDict):
    Quantity: int


class CloudFrontQueryArgProfiles(_CloudFrontQueryArgProfiles, total=False):
    Items: List[CloudFrontQueryArgProfile]


class CloudFrontQueryArgProfile(TypedDict):
    QueryArg: str
    ProfileId: str


class _CloudFrontContentTypeProfileConfig(TypedDict):
    ForwardWhenContentTypeIsUnknown: bool


class CloudFrontContentTypeProfileConfig(_CloudFrontContentTypeProfileConfig, total=False):
    ContentTypeProfiles: CloudFrontContentTypeProfiles


class _CloudFrontContentTypeProfiles(TypedDict):
    Quantity: int


class CloudFrontContentTypeProfiles(_CloudFrontContentTypeProfiles, total=False):
    Items: List[CloudFrontContentTypeProfile]


class _CloudFrontContentTypeProfile(TypedDict):
    Format: str
    ContentType: str


class CloudFrontContentTypeProfile(_CloudFrontContentTypeProfile, total=False):
    ProfileId: str


class CloudFrontCreateFieldLevelEncryptionConfigResult(TypedDict, total=False):
    FieldLevelEncryption: CloudFrontFieldLevelEncryption
    Location: str
    ETag: str


class CloudFrontFieldLevelEncryption(TypedDict):
    Id: str
    LastModifiedTime: datetime.datetime
    FieldLevelEncryptionConfig: CloudFrontFieldLevelEncryptionConfig


class _CloudFrontFieldLevelEncryptionProfileConfig(TypedDict):
    Name: str
    CallerReference: str
    EncryptionEntities: CloudFrontEncryptionEntities


class CloudFrontFieldLevelEncryptionProfileConfig(_CloudFrontFieldLevelEncryptionProfileConfig, total=False):
    Comment: str


class _CloudFrontEncryptionEntities(TypedDict):
    Quantity: int


class CloudFrontEncryptionEntities(_CloudFrontEncryptionEntities, total=False):
    Items: List[CloudFrontEncryptionEntity]


class CloudFrontEncryptionEntity(TypedDict):
    PublicKeyId: str
    ProviderId: str
    FieldPatterns: CloudFrontFieldPatterns


class _CloudFrontFieldPatterns(TypedDict):
    Quantity: int


class CloudFrontFieldPatterns(_CloudFrontFieldPatterns, total=False):
    Items: List[str]


class CloudFrontCreateFieldLevelEncryptionProfileResult(TypedDict, total=False):
    FieldLevelEncryptionProfile: CloudFrontFieldLevelEncryptionProfile
    Location: str
    ETag: str


class CloudFrontFieldLevelEncryptionProfile(TypedDict):
    Id: str
    LastModifiedTime: datetime.datetime
    FieldLevelEncryptionProfileConfig: CloudFrontFieldLevelEncryptionProfileConfig


class CloudFrontInvalidationBatch(TypedDict):
    Paths: CloudFrontPaths
    CallerReference: str


class _CloudFrontPaths(TypedDict):
    Quantity: int


class CloudFrontPaths(_CloudFrontPaths, total=False):
    Items: List[str]


class CloudFrontCreateInvalidationResult(TypedDict, total=False):
    Location: str
    Invalidation: CloudFrontInvalidation


class CloudFrontInvalidation(TypedDict):
    Id: str
    Status: str
    CreateTime: datetime.datetime
    InvalidationBatch: CloudFrontInvalidationBatch


class _CloudFrontPublicKeyConfig(TypedDict):
    CallerReference: str
    Name: str
    EncodedKey: str


class CloudFrontPublicKeyConfig(_CloudFrontPublicKeyConfig, total=False):
    Comment: str


class CloudFrontCreatePublicKeyResult(TypedDict, total=False):
    PublicKey: CloudFrontPublicKey
    Location: str
    ETag: str


class CloudFrontPublicKey(TypedDict):
    Id: str
    CreatedTime: datetime.datetime
    PublicKeyConfig: CloudFrontPublicKeyConfig


class _CloudFrontStreamingDistributionConfig(TypedDict):
    CallerReference: str
    S3Origin: CloudFrontS3Origin
    Comment: str
    TrustedSigners: CloudFrontTrustedSigners
    Enabled: bool


class CloudFrontStreamingDistributionConfig(_CloudFrontStreamingDistributionConfig, total=False):
    Aliases: CloudFrontAliases
    Logging: CloudFrontStreamingLoggingConfig
    PriceClass: str


class CloudFrontS3Origin(TypedDict):
    DomainName: str
    OriginAccessIdentity: str


class CloudFrontStreamingLoggingConfig(TypedDict):
    Enabled: bool
    Bucket: str
    Prefix: str


class CloudFrontCreateStreamingDistributionResult(TypedDict, total=False):
    StreamingDistribution: CloudFrontStreamingDistribution
    Location: str
    ETag: str


class _CloudFrontStreamingDistribution(TypedDict):
    Id: str
    ARN: str
    Status: str
    DomainName: str
    ActiveTrustedSigners: CloudFrontActiveTrustedSigners
    StreamingDistributionConfig: CloudFrontStreamingDistributionConfig


class CloudFrontStreamingDistribution(_CloudFrontStreamingDistribution, total=False):
    LastModifiedTime: datetime.datetime


class CloudFrontStreamingDistributionConfigWithTags(TypedDict):
    StreamingDistributionConfig: CloudFrontStreamingDistributionConfig
    Tags: CloudFrontTags


class CloudFrontCreateStreamingDistributionWithTagsResult(TypedDict, total=False):
    StreamingDistribution: CloudFrontStreamingDistribution
    Location: str
    ETag: str


class CloudFrontGetCloudFrontOriginAccessIdentityResult(TypedDict, total=False):
    CloudFrontOriginAccessIdentity: CloudFrontCloudFrontOriginAccessIdentity
    ETag: str


class CloudFrontGetCloudFrontOriginAccessIdentityConfigResult(TypedDict, total=False):
    CloudFrontOriginAccessIdentityConfig: CloudFrontCloudFrontOriginAccessIdentityConfig
    ETag: str


class CloudFrontGetDistributionResult(TypedDict, total=False):
    Distribution: CloudFrontDistribution
    ETag: str


class CloudFrontGetDistributionConfigResult(TypedDict, total=False):
    DistributionConfig: CloudFrontDistributionConfig
    ETag: str


class CloudFrontGetFieldLevelEncryptionResult(TypedDict, total=False):
    FieldLevelEncryption: CloudFrontFieldLevelEncryption
    ETag: str


class CloudFrontGetFieldLevelEncryptionConfigResult(TypedDict, total=False):
    FieldLevelEncryptionConfig: CloudFrontFieldLevelEncryptionConfig
    ETag: str


class CloudFrontGetFieldLevelEncryptionProfileResult(TypedDict, total=False):
    FieldLevelEncryptionProfile: CloudFrontFieldLevelEncryptionProfile
    ETag: str


class CloudFrontGetFieldLevelEncryptionProfileConfigResult(TypedDict, total=False):
    FieldLevelEncryptionProfileConfig: CloudFrontFieldLevelEncryptionProfileConfig
    ETag: str


class CloudFrontGetInvalidationResult(TypedDict, total=False):
    Invalidation: CloudFrontInvalidation


class CloudFrontGetPublicKeyResult(TypedDict, total=False):
    PublicKey: CloudFrontPublicKey
    ETag: str


class CloudFrontGetPublicKeyConfigResult(TypedDict, total=False):
    PublicKeyConfig: CloudFrontPublicKeyConfig
    ETag: str


class CloudFrontGetStreamingDistributionResult(TypedDict, total=False):
    StreamingDistribution: CloudFrontStreamingDistribution
    ETag: str


class CloudFrontGetStreamingDistributionConfigResult(TypedDict, total=False):
    StreamingDistributionConfig: CloudFrontStreamingDistributionConfig
    ETag: str


class CloudFrontListCloudFrontOriginAccessIdentitiesResult(TypedDict, total=False):
    CloudFrontOriginAccessIdentityList: CloudFrontCloudFrontOriginAccessIdentityList


class _CloudFrontCloudFrontOriginAccessIdentityList(TypedDict):
    Marker: str
    MaxItems: int
    IsTruncated: bool
    Quantity: int


class CloudFrontCloudFrontOriginAccessIdentityList(_CloudFrontCloudFrontOriginAccessIdentityList, total=False):
    NextMarker: str
    Items: List[CloudFrontCloudFrontOriginAccessIdentitySummary]


class CloudFrontCloudFrontOriginAccessIdentitySummary(TypedDict):
    Id: str
    S3CanonicalUserId: str
    Comment: str


class CloudFrontListDistributionsResult(TypedDict, total=False):
    DistributionList: CloudFrontDistributionList


class _CloudFrontDistributionList(TypedDict):
    Marker: str
    MaxItems: int
    IsTruncated: bool
    Quantity: int


class CloudFrontDistributionList(_CloudFrontDistributionList, total=False):
    NextMarker: str
    Items: List[CloudFrontDistributionSummary]


class _CloudFrontDistributionSummary(TypedDict):
    Id: str
    ARN: str
    Status: str
    LastModifiedTime: datetime.datetime
    DomainName: str
    Aliases: CloudFrontAliases
    Origins: CloudFrontOrigins
    DefaultCacheBehavior: CloudFrontDefaultCacheBehavior
    CacheBehaviors: CloudFrontCacheBehaviors
    CustomErrorResponses: CloudFrontCustomErrorResponses
    Comment: str
    PriceClass: str
    Enabled: bool
    ViewerCertificate: CloudFrontViewerCertificate
    Restrictions: CloudFrontRestrictions
    WebACLId: str
    HttpVersion: str
    IsIPV6Enabled: bool


class CloudFrontDistributionSummary(_CloudFrontDistributionSummary, total=False):
    OriginGroups: CloudFrontOriginGroups


class CloudFrontListDistributionsByWebACLIdResult(TypedDict, total=False):
    DistributionList: CloudFrontDistributionList


class CloudFrontListFieldLevelEncryptionConfigsResult(TypedDict, total=False):
    FieldLevelEncryptionList: CloudFrontFieldLevelEncryptionList


class _CloudFrontFieldLevelEncryptionList(TypedDict):
    MaxItems: int
    Quantity: int


class CloudFrontFieldLevelEncryptionList(_CloudFrontFieldLevelEncryptionList, total=False):
    NextMarker: str
    Items: List[CloudFrontFieldLevelEncryptionSummary]


class _CloudFrontFieldLevelEncryptionSummary(TypedDict):
    Id: str
    LastModifiedTime: datetime.datetime


class CloudFrontFieldLevelEncryptionSummary(_CloudFrontFieldLevelEncryptionSummary, total=False):
    Comment: str
    QueryArgProfileConfig: CloudFrontQueryArgProfileConfig
    ContentTypeProfileConfig: CloudFrontContentTypeProfileConfig


class CloudFrontListFieldLevelEncryptionProfilesResult(TypedDict, total=False):
    FieldLevelEncryptionProfileList: CloudFrontFieldLevelEncryptionProfileList


class _CloudFrontFieldLevelEncryptionProfileList(TypedDict):
    MaxItems: int
    Quantity: int


class CloudFrontFieldLevelEncryptionProfileList(_CloudFrontFieldLevelEncryptionProfileList, total=False):
    NextMarker: str
    Items: List[CloudFrontFieldLevelEncryptionProfileSummary]


class _CloudFrontFieldLevelEncryptionProfileSummary(TypedDict):
    Id: str
    LastModifiedTime: datetime.datetime
    Name: str
    EncryptionEntities: CloudFrontEncryptionEntities


class CloudFrontFieldLevelEncryptionProfileSummary(_CloudFrontFieldLevelEncryptionProfileSummary, total=False):
    Comment: str


class CloudFrontListInvalidationsResult(TypedDict, total=False):
    InvalidationList: CloudFrontInvalidationList


class _CloudFrontInvalidationList(TypedDict):
    Marker: str
    MaxItems: int
    IsTruncated: bool
    Quantity: int


class CloudFrontInvalidationList(_CloudFrontInvalidationList, total=False):
    NextMarker: str
    Items: List[CloudFrontInvalidationSummary]


class CloudFrontInvalidationSummary(TypedDict):
    Id: str
    CreateTime: datetime.datetime
    Status: str


class CloudFrontListPublicKeysResult(TypedDict, total=False):
    PublicKeyList: CloudFrontPublicKeyList


class _CloudFrontPublicKeyList(TypedDict):
    MaxItems: int
    Quantity: int


class CloudFrontPublicKeyList(_CloudFrontPublicKeyList, total=False):
    NextMarker: str
    Items: List[CloudFrontPublicKeySummary]


class _CloudFrontPublicKeySummary(TypedDict):
    Id: str
    Name: str
    CreatedTime: datetime.datetime
    EncodedKey: str


class CloudFrontPublicKeySummary(_CloudFrontPublicKeySummary, total=False):
    Comment: str


class CloudFrontListStreamingDistributionsResult(TypedDict, total=False):
    StreamingDistributionList: CloudFrontStreamingDistributionList


class _CloudFrontStreamingDistributionList(TypedDict):
    Marker: str
    MaxItems: int
    IsTruncated: bool
    Quantity: int


class CloudFrontStreamingDistributionList(_CloudFrontStreamingDistributionList, total=False):
    NextMarker: str
    Items: List[CloudFrontStreamingDistributionSummary]


class CloudFrontStreamingDistributionSummary(TypedDict):
    Id: str
    ARN: str
    Status: str
    LastModifiedTime: datetime.datetime
    DomainName: str
    S3Origin: CloudFrontS3Origin
    Aliases: CloudFrontAliases
    TrustedSigners: CloudFrontTrustedSigners
    Comment: str
    PriceClass: str
    Enabled: bool


class CloudFrontListTagsForResourceResult(TypedDict):
    Tags: CloudFrontTags


class CloudFrontTagKeys(TypedDict, total=False):
    Items: List[str]


class CloudFrontUpdateCloudFrontOriginAccessIdentityResult(TypedDict, total=False):
    CloudFrontOriginAccessIdentity: CloudFrontCloudFrontOriginAccessIdentity
    ETag: str


class CloudFrontUpdateDistributionResult(TypedDict, total=False):
    Distribution: CloudFrontDistribution
    ETag: str


class CloudFrontUpdateFieldLevelEncryptionConfigResult(TypedDict, total=False):
    FieldLevelEncryption: CloudFrontFieldLevelEncryption
    ETag: str


class CloudFrontUpdateFieldLevelEncryptionProfileResult(TypedDict, total=False):
    FieldLevelEncryptionProfile: CloudFrontFieldLevelEncryptionProfile
    ETag: str


class CloudFrontUpdatePublicKeyResult(TypedDict, total=False):
    PublicKey: CloudFrontPublicKey
    ETag: str


class CloudFrontUpdateStreamingDistributionResult(TypedDict, total=False):
    StreamingDistribution: CloudFrontStreamingDistribution
    ETag: str


class CloudHSM(BaseClient):
    def add_tags_to_resource(self, *,
        ResourceArn: str,
        TagList: List[CloudHSMTag]
    ) -> CloudHSMAddTagsToResourceResponse: ...

    def create_hapg(self, *,
        Label: str
    ) -> CloudHSMCreateHapgResponse: ...

    def create_hsm(self, *,
        SubnetId: str,
        SshKey: str,
        IamRoleArn: str,
        SubscriptionType: str,
        EniIp: str = ...,
        ExternalId: str = ...,
        ClientToken: str = ...,
        SyslogIp: str = ...
    ) -> CloudHSMCreateHsmResponse: ...

    def create_luna_client(self, *,
        Certificate: str,
        Label: str = ...
    ) -> CloudHSMCreateLunaClientResponse: ...

    def delete_hapg(self, *,
        HapgArn: str
    ) -> CloudHSMDeleteHapgResponse: ...

    def delete_hsm(self, *,
        HsmArn: str
    ) -> CloudHSMDeleteHsmResponse: ...

    def delete_luna_client(self, *,
        ClientArn: str
    ) -> CloudHSMDeleteLunaClientResponse: ...

    def describe_hapg(self, *,
        HapgArn: str
    ) -> CloudHSMDescribeHapgResponse: ...

    def describe_hsm(self, *,
        HsmArn: str = ...,
        HsmSerialNumber: str = ...
    ) -> CloudHSMDescribeHsmResponse: ...

    def describe_luna_client(self, *,
        ClientArn: str = ...,
        CertificateFingerprint: str = ...
    ) -> CloudHSMDescribeLunaClientResponse: ...

    def get_config(self, *,
        ClientArn: str,
        ClientVersion: str,
        HapgList: List[str]
    ) -> CloudHSMGetConfigResponse: ...

    def list_available_zones(self) -> CloudHSMListAvailableZonesResponse: ...

    def list_hapgs(self, *,
        NextToken: str = ...
    ) -> CloudHSMListHapgsResponse: ...

    def list_hsms(self, *,
        NextToken: str = ...
    ) -> CloudHSMListHsmsResponse: ...

    def list_luna_clients(self, *,
        NextToken: str = ...
    ) -> CloudHSMListLunaClientsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> CloudHSMListTagsForResourceResponse: ...

    def modify_hapg(self, *,
        HapgArn: str,
        Label: str = ...,
        PartitionSerialList: List[str] = ...
    ) -> CloudHSMModifyHapgResponse: ...

    def modify_hsm(self, *,
        HsmArn: str,
        SubnetId: str = ...,
        EniIp: str = ...,
        IamRoleArn: str = ...,
        ExternalId: str = ...,
        SyslogIp: str = ...
    ) -> CloudHSMModifyHsmResponse: ...

    def modify_luna_client(self, *,
        ClientArn: str,
        Certificate: str
    ) -> CloudHSMModifyLunaClientResponse: ...

    def remove_tags_from_resource(self, *,
        ResourceArn: str,
        TagKeyList: List[str]
    ) -> CloudHSMRemoveTagsFromResourceResponse: ...


class CloudHSMTag(TypedDict):
    Key: str
    Value: str


class CloudHSMAddTagsToResourceResponse(TypedDict):
    Status: str


class CloudHSMCreateHapgResponse(TypedDict, total=False):
    HapgArn: str


class CloudHSMCreateHsmResponse(TypedDict, total=False):
    HsmArn: str


class CloudHSMCreateLunaClientResponse(TypedDict, total=False):
    ClientArn: str


class CloudHSMDeleteHapgResponse(TypedDict):
    Status: str


class CloudHSMDeleteHsmResponse(TypedDict):
    Status: str


class CloudHSMDeleteLunaClientResponse(TypedDict):
    Status: str


class CloudHSMDescribeHapgResponse(TypedDict, total=False):
    HapgArn: str
    HapgSerial: str
    HsmsLastActionFailed: List[str]
    HsmsPendingDeletion: List[str]
    HsmsPendingRegistration: List[str]
    Label: str
    LastModifiedTimestamp: str
    PartitionSerialList: List[str]
    State: str


class CloudHSMDescribeHsmResponse(TypedDict, total=False):
    HsmArn: str
    Status: str
    StatusDetails: str
    AvailabilityZone: str
    EniId: str
    EniIp: str
    SubscriptionType: str
    SubscriptionStartDate: str
    SubscriptionEndDate: str
    VpcId: str
    SubnetId: str
    IamRoleArn: str
    SerialNumber: str
    VendorName: str
    HsmType: str
    SoftwareVersion: str
    SshPublicKey: str
    SshKeyLastUpdated: str
    ServerCertUri: str
    ServerCertLastUpdated: str
    Partitions: List[str]


class CloudHSMDescribeLunaClientResponse(TypedDict, total=False):
    ClientArn: str
    Certificate: str
    CertificateFingerprint: str
    LastModifiedTimestamp: str
    Label: str


class CloudHSMGetConfigResponse(TypedDict, total=False):
    ConfigType: str
    ConfigFile: str
    ConfigCred: str


class CloudHSMListAvailableZonesResponse(TypedDict, total=False):
    AZList: List[str]


class _CloudHSMListHapgsResponse(TypedDict):
    HapgList: List[str]


class CloudHSMListHapgsResponse(_CloudHSMListHapgsResponse, total=False):
    NextToken: str


class CloudHSMListHsmsResponse(TypedDict, total=False):
    HsmList: List[str]
    NextToken: str


class _CloudHSMListLunaClientsResponse(TypedDict):
    ClientList: List[str]


class CloudHSMListLunaClientsResponse(_CloudHSMListLunaClientsResponse, total=False):
    NextToken: str


class CloudHSMListTagsForResourceResponse(TypedDict):
    TagList: List[CloudHSMTag]


class CloudHSMModifyHapgResponse(TypedDict, total=False):
    HapgArn: str


class CloudHSMModifyHsmResponse(TypedDict, total=False):
    HsmArn: str


class CloudHSMModifyLunaClientResponse(TypedDict, total=False):
    ClientArn: str


class CloudHSMRemoveTagsFromResourceResponse(TypedDict):
    Status: str


class CloudHSMV2(BaseClient):
    def copy_backup_to_region(self, *,
        DestinationRegion: str,
        BackupId: str
    ) -> CloudHSMV2CopyBackupToRegionResponse: ...

    def create_cluster(self, *,
        SubnetIds: List[str],
        HsmType: str,
        SourceBackupId: str = ...
    ) -> CloudHSMV2CreateClusterResponse: ...

    def create_hsm(self, *,
        ClusterId: str,
        AvailabilityZone: str,
        IpAddress: str = ...
    ) -> CloudHSMV2CreateHsmResponse: ...

    def delete_backup(self, *,
        BackupId: str
    ) -> CloudHSMV2DeleteBackupResponse: ...

    def delete_cluster(self, *,
        ClusterId: str
    ) -> CloudHSMV2DeleteClusterResponse: ...

    def delete_hsm(self, *,
        ClusterId: str,
        HsmId: str = ...,
        EniId: str = ...,
        EniIp: str = ...
    ) -> CloudHSMV2DeleteHsmResponse: ...

    def describe_backups(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        Filters: Dict[str, List[str]] = ...,
        SortAscending: bool = ...
    ) -> CloudHSMV2DescribeBackupsResponse: ...

    def describe_clusters(self, *,
        Filters: Dict[str, List[str]] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudHSMV2DescribeClustersResponse: ...

    def initialize_cluster(self, *,
        ClusterId: str,
        SignedCert: str,
        TrustAnchor: str
    ) -> CloudHSMV2InitializeClusterResponse: ...

    def list_tags(self, *,
        ResourceId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CloudHSMV2ListTagsResponse: ...

    def restore_backup(self, *,
        BackupId: str
    ) -> CloudHSMV2RestoreBackupResponse: ...

    def tag_resource(self, *,
        ResourceId: str,
        TagList: List[CloudHSMV2Tag]
    ) -> CloudHSMV2TagResourceResponse: ...

    def untag_resource(self, *,
        ResourceId: str,
        TagKeyList: List[str]
    ) -> CloudHSMV2UntagResourceResponse: ...


class CloudHSMV2CopyBackupToRegionResponse(TypedDict, total=False):
    DestinationBackup: CloudHSMV2DestinationBackup


class CloudHSMV2DestinationBackup(TypedDict, total=False):
    CreateTimestamp: datetime.datetime
    SourceRegion: str
    SourceBackup: str
    SourceCluster: str


class CloudHSMV2CreateClusterResponse(TypedDict, total=False):
    Cluster: CloudHSMV2Cluster


class CloudHSMV2Cluster(TypedDict, total=False):
    BackupPolicy: str
    ClusterId: str
    CreateTimestamp: datetime.datetime
    Hsms: List[CloudHSMV2Hsm]
    HsmType: str
    PreCoPassword: str
    SecurityGroup: str
    SourceBackupId: str
    State: str
    StateMessage: str
    SubnetMapping: Dict[str, str]
    VpcId: str
    Certificates: CloudHSMV2Certificates


class _CloudHSMV2Hsm(TypedDict):
    HsmId: str


class CloudHSMV2Hsm(_CloudHSMV2Hsm, total=False):
    AvailabilityZone: str
    ClusterId: str
    SubnetId: str
    EniId: str
    EniIp: str
    State: str
    StateMessage: str


class CloudHSMV2Certificates(TypedDict, total=False):
    ClusterCsr: str
    HsmCertificate: str
    AwsHardwareCertificate: str
    ManufacturerHardwareCertificate: str
    ClusterCertificate: str


class CloudHSMV2CreateHsmResponse(TypedDict, total=False):
    Hsm: CloudHSMV2Hsm


class CloudHSMV2DeleteBackupResponse(TypedDict, total=False):
    Backup: CloudHSMV2Backup


class _CloudHSMV2Backup(TypedDict):
    BackupId: str


class CloudHSMV2Backup(_CloudHSMV2Backup, total=False):
    BackupState: str
    ClusterId: str
    CreateTimestamp: datetime.datetime
    CopyTimestamp: datetime.datetime
    SourceRegion: str
    SourceBackup: str
    SourceCluster: str
    DeleteTimestamp: datetime.datetime


class CloudHSMV2DeleteClusterResponse(TypedDict, total=False):
    Cluster: CloudHSMV2Cluster


class CloudHSMV2DeleteHsmResponse(TypedDict, total=False):
    HsmId: str


class CloudHSMV2DescribeBackupsResponse(TypedDict, total=False):
    Backups: List[CloudHSMV2Backup]
    NextToken: str


class CloudHSMV2DescribeClustersResponse(TypedDict, total=False):
    Clusters: List[CloudHSMV2Cluster]
    NextToken: str


class CloudHSMV2InitializeClusterResponse(TypedDict, total=False):
    State: str
    StateMessage: str


class _CloudHSMV2ListTagsResponse(TypedDict):
    TagList: List[CloudHSMV2Tag]


class CloudHSMV2ListTagsResponse(_CloudHSMV2ListTagsResponse, total=False):
    NextToken: str


class CloudHSMV2Tag(TypedDict):
    Key: str
    Value: str


class CloudHSMV2RestoreBackupResponse(TypedDict, total=False):
    Backup: CloudHSMV2Backup


class CloudHSMV2TagResourceResponse(TypedDict, total=False):
    pass


class CloudHSMV2UntagResourceResponse(TypedDict, total=False):
    pass


class CloudSearch(BaseClient):
    def build_suggesters(self, *,
        DomainName: str
    ) -> CloudSearchBuildSuggestersResponse: ...

    def create_domain(self, *,
        DomainName: str
    ) -> CloudSearchCreateDomainResponse: ...

    def define_analysis_scheme(self, *,
        DomainName: str,
        AnalysisScheme: CloudSearchAnalysisScheme
    ) -> CloudSearchDefineAnalysisSchemeResponse: ...

    def define_expression(self, *,
        DomainName: str,
        Expression: CloudSearchExpression
    ) -> CloudSearchDefineExpressionResponse: ...

    def define_index_field(self, *,
        DomainName: str,
        IndexField: CloudSearchIndexField
    ) -> CloudSearchDefineIndexFieldResponse: ...

    def define_suggester(self, *,
        DomainName: str,
        Suggester: CloudSearchSuggester
    ) -> CloudSearchDefineSuggesterResponse: ...

    def delete_analysis_scheme(self, *,
        DomainName: str,
        AnalysisSchemeName: str
    ) -> CloudSearchDeleteAnalysisSchemeResponse: ...

    def delete_domain(self, *,
        DomainName: str
    ) -> CloudSearchDeleteDomainResponse: ...

    def delete_expression(self, *,
        DomainName: str,
        ExpressionName: str
    ) -> CloudSearchDeleteExpressionResponse: ...

    def delete_index_field(self, *,
        DomainName: str,
        IndexFieldName: str
    ) -> CloudSearchDeleteIndexFieldResponse: ...

    def delete_suggester(self, *,
        DomainName: str,
        SuggesterName: str
    ) -> CloudSearchDeleteSuggesterResponse: ...

    def describe_analysis_schemes(self, *,
        DomainName: str,
        AnalysisSchemeNames: List[str] = ...,
        Deployed: bool = ...
    ) -> CloudSearchDescribeAnalysisSchemesResponse: ...

    def describe_availability_options(self, *,
        DomainName: str,
        Deployed: bool = ...
    ) -> CloudSearchDescribeAvailabilityOptionsResponse: ...

    def describe_domains(self, *,
        DomainNames: List[str] = ...
    ) -> CloudSearchDescribeDomainsResponse: ...

    def describe_expressions(self, *,
        DomainName: str,
        ExpressionNames: List[str] = ...,
        Deployed: bool = ...
    ) -> CloudSearchDescribeExpressionsResponse: ...

    def describe_index_fields(self, *,
        DomainName: str,
        FieldNames: List[str] = ...,
        Deployed: bool = ...
    ) -> CloudSearchDescribeIndexFieldsResponse: ...

    def describe_scaling_parameters(self, *,
        DomainName: str
    ) -> CloudSearchDescribeScalingParametersResponse: ...

    def describe_service_access_policies(self, *,
        DomainName: str,
        Deployed: bool = ...
    ) -> CloudSearchDescribeServiceAccessPoliciesResponse: ...

    def describe_suggesters(self, *,
        DomainName: str,
        SuggesterNames: List[str] = ...,
        Deployed: bool = ...
    ) -> CloudSearchDescribeSuggestersResponse: ...

    def index_documents(self, *,
        DomainName: str
    ) -> CloudSearchIndexDocumentsResponse: ...

    def list_domain_names(self) -> CloudSearchListDomainNamesResponse: ...

    def update_availability_options(self, *,
        DomainName: str,
        MultiAZ: bool
    ) -> CloudSearchUpdateAvailabilityOptionsResponse: ...

    def update_scaling_parameters(self, *,
        DomainName: str,
        ScalingParameters: CloudSearchScalingParameters
    ) -> CloudSearchUpdateScalingParametersResponse: ...

    def update_service_access_policies(self, *,
        DomainName: str,
        AccessPolicies: str
    ) -> CloudSearchUpdateServiceAccessPoliciesResponse: ...


class CloudSearchBuildSuggestersResponse(TypedDict, total=False):
    FieldNames: List[str]


class CloudSearchCreateDomainResponse(TypedDict, total=False):
    DomainStatus: CloudSearchDomainStatus


class _CloudSearchDomainStatus(TypedDict):
    DomainId: str
    DomainName: str
    RequiresIndexDocuments: bool


class CloudSearchDomainStatus(_CloudSearchDomainStatus, total=False):
    ARN: str
    Created: bool
    Deleted: bool
    DocService: CloudSearchServiceEndpoint
    SearchService: CloudSearchServiceEndpoint
    Processing: bool
    SearchInstanceType: str
    SearchPartitionCount: int
    SearchInstanceCount: int
    Limits: CloudSearchLimits


class CloudSearchServiceEndpoint(TypedDict, total=False):
    Endpoint: str


class CloudSearchLimits(TypedDict):
    MaximumReplicationCount: int
    MaximumPartitionCount: int


class _CloudSearchAnalysisScheme(TypedDict):
    AnalysisSchemeName: str
    AnalysisSchemeLanguage: str


class CloudSearchAnalysisScheme(_CloudSearchAnalysisScheme, total=False):
    AnalysisOptions: CloudSearchAnalysisOptions


class CloudSearchAnalysisOptions(TypedDict, total=False):
    Synonyms: str
    Stopwords: str
    StemmingDictionary: str
    JapaneseTokenizationDictionary: str
    AlgorithmicStemming: str


class CloudSearchDefineAnalysisSchemeResponse(TypedDict):
    AnalysisScheme: CloudSearchAnalysisSchemeStatus


class CloudSearchAnalysisSchemeStatus(TypedDict):
    Options: CloudSearchAnalysisScheme
    Status: CloudSearchOptionStatus


class _CloudSearchOptionStatus(TypedDict):
    CreationDate: datetime.datetime
    UpdateDate: datetime.datetime
    State: str


class CloudSearchOptionStatus(_CloudSearchOptionStatus, total=False):
    UpdateVersion: int
    PendingDeletion: bool


class CloudSearchExpression(TypedDict):
    ExpressionName: str
    ExpressionValue: str


class CloudSearchDefineExpressionResponse(TypedDict):
    Expression: CloudSearchExpressionStatus


class CloudSearchExpressionStatus(TypedDict):
    Options: CloudSearchExpression
    Status: CloudSearchOptionStatus


class _CloudSearchIndexField(TypedDict):
    IndexFieldName: str
    IndexFieldType: str


class CloudSearchIndexField(_CloudSearchIndexField, total=False):
    IntOptions: CloudSearchIntOptions
    DoubleOptions: CloudSearchDoubleOptions
    LiteralOptions: CloudSearchLiteralOptions
    TextOptions: CloudSearchTextOptions
    DateOptions: CloudSearchDateOptions
    LatLonOptions: CloudSearchLatLonOptions
    IntArrayOptions: CloudSearchIntArrayOptions
    DoubleArrayOptions: CloudSearchDoubleArrayOptions
    LiteralArrayOptions: CloudSearchLiteralArrayOptions
    TextArrayOptions: CloudSearchTextArrayOptions
    DateArrayOptions: CloudSearchDateArrayOptions


class CloudSearchIntOptions(TypedDict, total=False):
    DefaultValue: int
    SourceField: str
    FacetEnabled: bool
    SearchEnabled: bool
    ReturnEnabled: bool
    SortEnabled: bool


class CloudSearchDoubleOptions(TypedDict, total=False):
    DefaultValue: float
    SourceField: str
    FacetEnabled: bool
    SearchEnabled: bool
    ReturnEnabled: bool
    SortEnabled: bool


class CloudSearchLiteralOptions(TypedDict, total=False):
    DefaultValue: str
    SourceField: str
    FacetEnabled: bool
    SearchEnabled: bool
    ReturnEnabled: bool
    SortEnabled: bool


class CloudSearchTextOptions(TypedDict, total=False):
    DefaultValue: str
    SourceField: str
    ReturnEnabled: bool
    SortEnabled: bool
    HighlightEnabled: bool
    AnalysisScheme: str


class CloudSearchDateOptions(TypedDict, total=False):
    DefaultValue: str
    SourceField: str
    FacetEnabled: bool
    SearchEnabled: bool
    ReturnEnabled: bool
    SortEnabled: bool


class CloudSearchLatLonOptions(TypedDict, total=False):
    DefaultValue: str
    SourceField: str
    FacetEnabled: bool
    SearchEnabled: bool
    ReturnEnabled: bool
    SortEnabled: bool


class CloudSearchIntArrayOptions(TypedDict, total=False):
    DefaultValue: int
    SourceFields: str
    FacetEnabled: bool
    SearchEnabled: bool
    ReturnEnabled: bool


class CloudSearchDoubleArrayOptions(TypedDict, total=False):
    DefaultValue: float
    SourceFields: str
    FacetEnabled: bool
    SearchEnabled: bool
    ReturnEnabled: bool


class CloudSearchLiteralArrayOptions(TypedDict, total=False):
    DefaultValue: str
    SourceFields: str
    FacetEnabled: bool
    SearchEnabled: bool
    ReturnEnabled: bool


class CloudSearchTextArrayOptions(TypedDict, total=False):
    DefaultValue: str
    SourceFields: str
    ReturnEnabled: bool
    HighlightEnabled: bool
    AnalysisScheme: str


class CloudSearchDateArrayOptions(TypedDict, total=False):
    DefaultValue: str
    SourceFields: str
    FacetEnabled: bool
    SearchEnabled: bool
    ReturnEnabled: bool


class CloudSearchDefineIndexFieldResponse(TypedDict):
    IndexField: CloudSearchIndexFieldStatus


class CloudSearchIndexFieldStatus(TypedDict):
    Options: CloudSearchIndexField
    Status: CloudSearchOptionStatus


class CloudSearchSuggester(TypedDict):
    SuggesterName: str
    DocumentSuggesterOptions: CloudSearchDocumentSuggesterOptions


class _CloudSearchDocumentSuggesterOptions(TypedDict):
    SourceField: str


class CloudSearchDocumentSuggesterOptions(_CloudSearchDocumentSuggesterOptions, total=False):
    FuzzyMatching: str
    SortExpression: str


class CloudSearchDefineSuggesterResponse(TypedDict):
    Suggester: CloudSearchSuggesterStatus


class CloudSearchSuggesterStatus(TypedDict):
    Options: CloudSearchSuggester
    Status: CloudSearchOptionStatus


class CloudSearchDeleteAnalysisSchemeResponse(TypedDict):
    AnalysisScheme: CloudSearchAnalysisSchemeStatus


class CloudSearchDeleteDomainResponse(TypedDict, total=False):
    DomainStatus: CloudSearchDomainStatus


class CloudSearchDeleteExpressionResponse(TypedDict):
    Expression: CloudSearchExpressionStatus


class CloudSearchDeleteIndexFieldResponse(TypedDict):
    IndexField: CloudSearchIndexFieldStatus


class CloudSearchDeleteSuggesterResponse(TypedDict):
    Suggester: CloudSearchSuggesterStatus


class CloudSearchDescribeAnalysisSchemesResponse(TypedDict):
    AnalysisSchemes: List[CloudSearchAnalysisSchemeStatus]


class CloudSearchDescribeAvailabilityOptionsResponse(TypedDict, total=False):
    AvailabilityOptions: CloudSearchAvailabilityOptionsStatus


class CloudSearchAvailabilityOptionsStatus(TypedDict):
    Options: bool
    Status: CloudSearchOptionStatus


class CloudSearchDescribeDomainsResponse(TypedDict):
    DomainStatusList: List[CloudSearchDomainStatus]


class CloudSearchDescribeExpressionsResponse(TypedDict):
    Expressions: List[CloudSearchExpressionStatus]


class CloudSearchDescribeIndexFieldsResponse(TypedDict):
    IndexFields: List[CloudSearchIndexFieldStatus]


class CloudSearchDescribeScalingParametersResponse(TypedDict):
    ScalingParameters: CloudSearchScalingParametersStatus


class CloudSearchScalingParametersStatus(TypedDict):
    Options: CloudSearchScalingParameters
    Status: CloudSearchOptionStatus


class CloudSearchScalingParameters(TypedDict, total=False):
    DesiredInstanceType: str
    DesiredReplicationCount: int
    DesiredPartitionCount: int


class CloudSearchDescribeServiceAccessPoliciesResponse(TypedDict):
    AccessPolicies: CloudSearchAccessPoliciesStatus


class CloudSearchAccessPoliciesStatus(TypedDict):
    Options: str
    Status: CloudSearchOptionStatus


class CloudSearchDescribeSuggestersResponse(TypedDict):
    Suggesters: List[CloudSearchSuggesterStatus]


class CloudSearchIndexDocumentsResponse(TypedDict, total=False):
    FieldNames: List[str]


class CloudSearchListDomainNamesResponse(TypedDict, total=False):
    DomainNames: Dict[str, str]


class CloudSearchUpdateAvailabilityOptionsResponse(TypedDict, total=False):
    AvailabilityOptions: CloudSearchAvailabilityOptionsStatus


class CloudSearchUpdateScalingParametersResponse(TypedDict):
    ScalingParameters: CloudSearchScalingParametersStatus


class CloudSearchUpdateServiceAccessPoliciesResponse(TypedDict):
    AccessPolicies: CloudSearchAccessPoliciesStatus


class CloudTrail(BaseClient):
    def add_tags(self, *,
        ResourceId: str,
        TagsList: List[CloudTrailTag] = ...
    ) -> CloudTrailAddTagsResponse: ...

    def create_trail(self, *,
        Name: str,
        S3BucketName: str,
        S3KeyPrefix: str = ...,
        SnsTopicName: str = ...,
        IncludeGlobalServiceEvents: bool = ...,
        IsMultiRegionTrail: bool = ...,
        EnableLogFileValidation: bool = ...,
        CloudWatchLogsLogGroupArn: str = ...,
        CloudWatchLogsRoleArn: str = ...,
        KmsKeyId: str = ...,
        IsOrganizationTrail: bool = ...
    ) -> CloudTrailCreateTrailResponse: ...

    def delete_trail(self, *,
        Name: str
    ) -> CloudTrailDeleteTrailResponse: ...

    def describe_trails(self, *,
        trailNameList: List[str] = ...,
        includeShadowTrails: bool = ...
    ) -> CloudTrailDescribeTrailsResponse: ...

    def get_event_selectors(self, *,
        TrailName: str
    ) -> CloudTrailGetEventSelectorsResponse: ...

    def get_trail_status(self, *,
        Name: str
    ) -> CloudTrailGetTrailStatusResponse: ...

    def list_public_keys(self, *,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        NextToken: str = ...
    ) -> CloudTrailListPublicKeysResponse: ...

    def list_tags(self, *,
        ResourceIdList: List[str],
        NextToken: str = ...
    ) -> CloudTrailListTagsResponse: ...

    def lookup_events(self, *,
        LookupAttributes: List[CloudTrailLookupAttribute] = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> CloudTrailLookupEventsResponse: ...

    def put_event_selectors(self, *,
        TrailName: str,
        EventSelectors: List[CloudTrailEventSelector]
    ) -> CloudTrailPutEventSelectorsResponse: ...

    def remove_tags(self, *,
        ResourceId: str,
        TagsList: List[CloudTrailTag] = ...
    ) -> CloudTrailRemoveTagsResponse: ...

    def start_logging(self, *,
        Name: str
    ) -> CloudTrailStartLoggingResponse: ...

    def stop_logging(self, *,
        Name: str
    ) -> CloudTrailStopLoggingResponse: ...

    def update_trail(self, *,
        Name: str,
        S3BucketName: str = ...,
        S3KeyPrefix: str = ...,
        SnsTopicName: str = ...,
        IncludeGlobalServiceEvents: bool = ...,
        IsMultiRegionTrail: bool = ...,
        EnableLogFileValidation: bool = ...,
        CloudWatchLogsLogGroupArn: str = ...,
        CloudWatchLogsRoleArn: str = ...,
        KmsKeyId: str = ...,
        IsOrganizationTrail: bool = ...
    ) -> CloudTrailUpdateTrailResponse: ...


class _CloudTrailTag(TypedDict):
    Key: str


class CloudTrailTag(_CloudTrailTag, total=False):
    Value: str


class CloudTrailAddTagsResponse(TypedDict, total=False):
    pass


class CloudTrailCreateTrailResponse(TypedDict, total=False):
    Name: str
    S3BucketName: str
    S3KeyPrefix: str
    SnsTopicName: str
    SnsTopicARN: str
    IncludeGlobalServiceEvents: bool
    IsMultiRegionTrail: bool
    TrailARN: str
    LogFileValidationEnabled: bool
    CloudWatchLogsLogGroupArn: str
    CloudWatchLogsRoleArn: str
    KmsKeyId: str
    IsOrganizationTrail: bool


class CloudTrailDeleteTrailResponse(TypedDict, total=False):
    pass


class CloudTrailDescribeTrailsResponse(TypedDict, total=False):
    trailList: List[CloudTrailTrail]


class CloudTrailTrail(TypedDict, total=False):
    Name: str
    S3BucketName: str
    S3KeyPrefix: str
    SnsTopicName: str
    SnsTopicARN: str
    IncludeGlobalServiceEvents: bool
    IsMultiRegionTrail: bool
    HomeRegion: str
    TrailARN: str
    LogFileValidationEnabled: bool
    CloudWatchLogsLogGroupArn: str
    CloudWatchLogsRoleArn: str
    KmsKeyId: str
    HasCustomEventSelectors: bool
    IsOrganizationTrail: bool


class CloudTrailGetEventSelectorsResponse(TypedDict, total=False):
    TrailARN: str
    EventSelectors: List[CloudTrailEventSelector]


class CloudTrailEventSelector(TypedDict, total=False):
    ReadWriteType: str
    IncludeManagementEvents: bool
    DataResources: List[CloudTrailDataResource]


class CloudTrailDataResource(TypedDict, total=False):
    Type: str
    Values: List[str]


class CloudTrailGetTrailStatusResponse(TypedDict, total=False):
    IsLogging: bool
    LatestDeliveryError: str
    LatestNotificationError: str
    LatestDeliveryTime: datetime.datetime
    LatestNotificationTime: datetime.datetime
    StartLoggingTime: datetime.datetime
    StopLoggingTime: datetime.datetime
    LatestCloudWatchLogsDeliveryError: str
    LatestCloudWatchLogsDeliveryTime: datetime.datetime
    LatestDigestDeliveryTime: datetime.datetime
    LatestDigestDeliveryError: str
    LatestDeliveryAttemptTime: str
    LatestNotificationAttemptTime: str
    LatestNotificationAttemptSucceeded: str
    LatestDeliveryAttemptSucceeded: str
    TimeLoggingStarted: str
    TimeLoggingStopped: str


class CloudTrailListPublicKeysResponse(TypedDict, total=False):
    PublicKeyList: List[CloudTrailPublicKey]
    NextToken: str


class CloudTrailPublicKey(TypedDict, total=False):
    Value: bytes
    ValidityStartTime: datetime.datetime
    ValidityEndTime: datetime.datetime
    Fingerprint: str


class CloudTrailListTagsResponse(TypedDict, total=False):
    ResourceTagList: List[CloudTrailResourceTag]
    NextToken: str


class CloudTrailResourceTag(TypedDict, total=False):
    ResourceId: str
    TagsList: List[CloudTrailTag]


class CloudTrailLookupAttribute(TypedDict):
    AttributeKey: str
    AttributeValue: str


class CloudTrailLookupEventsResponse(TypedDict, total=False):
    Events: List[CloudTrailEvent]
    NextToken: str


class CloudTrailEvent(TypedDict, total=False):
    EventId: str
    EventName: str
    ReadOnly: str
    AccessKeyId: str
    EventTime: datetime.datetime
    EventSource: str
    Username: str
    Resources: List[CloudTrailResource]
    CloudTrailEvent: str


class CloudTrailResource(TypedDict, total=False):
    ResourceType: str
    ResourceName: str


class CloudTrailPutEventSelectorsResponse(TypedDict, total=False):
    TrailARN: str
    EventSelectors: List[CloudTrailEventSelector]


class CloudTrailRemoveTagsResponse(TypedDict, total=False):
    pass


class CloudTrailStartLoggingResponse(TypedDict, total=False):
    pass


class CloudTrailStopLoggingResponse(TypedDict, total=False):
    pass


class CloudTrailUpdateTrailResponse(TypedDict, total=False):
    Name: str
    S3BucketName: str
    S3KeyPrefix: str
    SnsTopicName: str
    SnsTopicARN: str
    IncludeGlobalServiceEvents: bool
    IsMultiRegionTrail: bool
    TrailARN: str
    LogFileValidationEnabled: bool
    CloudWatchLogsLogGroupArn: str
    CloudWatchLogsRoleArn: str
    KmsKeyId: str
    IsOrganizationTrail: bool


class CloudWatch(BaseClient):
    def delete_alarms(self, *,
        AlarmNames: List[str]
    ): ...

    def delete_dashboards(self, *,
        DashboardNames: List[str]
    ) -> CloudWatchDeleteDashboardsOutput: ...

    def describe_alarm_history(self, *,
        AlarmName: str = ...,
        HistoryItemType: str = ...,
        StartDate: datetime.datetime = ...,
        EndDate: datetime.datetime = ...,
        MaxRecords: int = ...,
        NextToken: str = ...
    ) -> CloudWatchDescribeAlarmHistoryOutput: ...

    def describe_alarms(self, *,
        AlarmNames: List[str] = ...,
        AlarmNamePrefix: str = ...,
        StateValue: str = ...,
        ActionPrefix: str = ...,
        MaxRecords: int = ...,
        NextToken: str = ...
    ) -> CloudWatchDescribeAlarmsOutput: ...

    def describe_alarms_for_metric(self, *,
        MetricName: str,
        Namespace: str,
        Statistic: str = ...,
        ExtendedStatistic: str = ...,
        Dimensions: List[CloudWatchDimension] = ...,
        Period: int = ...,
        Unit: str = ...
    ) -> CloudWatchDescribeAlarmsForMetricOutput: ...

    def disable_alarm_actions(self, *,
        AlarmNames: List[str]
    ): ...

    def enable_alarm_actions(self, *,
        AlarmNames: List[str]
    ): ...

    def get_dashboard(self, *,
        DashboardName: str
    ) -> CloudWatchGetDashboardOutput: ...

    def get_metric_data(self, *,
        MetricDataQueries: List[CloudWatchMetricDataQuery],
        StartTime: datetime.datetime,
        EndTime: datetime.datetime,
        NextToken: str = ...,
        ScanBy: str = ...,
        MaxDatapoints: int = ...
    ) -> CloudWatchGetMetricDataOutput: ...

    def get_metric_statistics(self, *,
        Namespace: str,
        MetricName: str,
        StartTime: datetime.datetime,
        EndTime: datetime.datetime,
        Period: int,
        Dimensions: List[CloudWatchDimension] = ...,
        Statistics: List[str] = ...,
        ExtendedStatistics: List[str] = ...,
        Unit: str = ...
    ) -> CloudWatchGetMetricStatisticsOutput: ...

    def get_metric_widget_image(self, *,
        MetricWidget: str,
        OutputFormat: str = ...
    ) -> CloudWatchGetMetricWidgetImageOutput: ...

    def list_dashboards(self, *,
        DashboardNamePrefix: str = ...,
        NextToken: str = ...
    ) -> CloudWatchListDashboardsOutput: ...

    def list_metrics(self, *,
        Namespace: str = ...,
        MetricName: str = ...,
        Dimensions: List[CloudWatchDimensionFilter] = ...,
        NextToken: str = ...
    ) -> CloudWatchListMetricsOutput: ...

    def list_tags_for_resource(self, *,
        ResourceARN: str
    ) -> CloudWatchListTagsForResourceOutput: ...

    def put_dashboard(self, *,
        DashboardName: str,
        DashboardBody: str
    ) -> CloudWatchPutDashboardOutput: ...

    def put_metric_alarm(self, *,
        AlarmName: str,
        EvaluationPeriods: int,
        Threshold: float,
        ComparisonOperator: str,
        AlarmDescription: str = ...,
        ActionsEnabled: bool = ...,
        OKActions: List[str] = ...,
        AlarmActions: List[str] = ...,
        InsufficientDataActions: List[str] = ...,
        MetricName: str = ...,
        Namespace: str = ...,
        Statistic: str = ...,
        ExtendedStatistic: str = ...,
        Dimensions: List[CloudWatchDimension] = ...,
        Period: int = ...,
        Unit: str = ...,
        DatapointsToAlarm: int = ...,
        TreatMissingData: str = ...,
        EvaluateLowSampleCountPercentile: str = ...,
        Metrics: List[CloudWatchMetricDataQuery] = ...,
        Tags: List[CloudWatchTag] = ...
    ): ...

    def put_metric_data(self, *,
        Namespace: str,
        MetricData: List[CloudWatchMetricDatum]
    ): ...

    def set_alarm_state(self, *,
        AlarmName: str,
        StateValue: str,
        StateReason: str,
        StateReasonData: str = ...
    ): ...

    def tag_resource(self, *,
        ResourceARN: str,
        Tags: List[CloudWatchTag]
    ) -> CloudWatchTagResourceOutput: ...

    def untag_resource(self, *,
        ResourceARN: str,
        TagKeys: List[str]
    ) -> CloudWatchUntagResourceOutput: ...


class CloudWatchDeleteDashboardsOutput(TypedDict, total=False):
    pass


class CloudWatchDescribeAlarmHistoryOutput(TypedDict, total=False):
    AlarmHistoryItems: List[CloudWatchAlarmHistoryItem]
    NextToken: str


class CloudWatchAlarmHistoryItem(TypedDict, total=False):
    AlarmName: str
    Timestamp: datetime.datetime
    HistoryItemType: str
    HistorySummary: str
    HistoryData: str


class CloudWatchDescribeAlarmsOutput(TypedDict, total=False):
    MetricAlarms: List[CloudWatchMetricAlarm]
    NextToken: str


class CloudWatchMetricAlarm(TypedDict, total=False):
    AlarmName: str
    AlarmArn: str
    AlarmDescription: str
    AlarmConfigurationUpdatedTimestamp: datetime.datetime
    ActionsEnabled: bool
    OKActions: List[str]
    AlarmActions: List[str]
    InsufficientDataActions: List[str]
    StateValue: str
    StateReason: str
    StateReasonData: str
    StateUpdatedTimestamp: datetime.datetime
    MetricName: str
    Namespace: str
    Statistic: str
    ExtendedStatistic: str
    Dimensions: List[CloudWatchDimension]
    Period: int
    Unit: str
    EvaluationPeriods: int
    DatapointsToAlarm: int
    Threshold: float
    ComparisonOperator: str
    TreatMissingData: str
    EvaluateLowSampleCountPercentile: str
    Metrics: List[CloudWatchMetricDataQuery]


class CloudWatchDimension(TypedDict):
    Name: str
    Value: str


class _CloudWatchMetricDataQuery(TypedDict):
    Id: str


class CloudWatchMetricDataQuery(_CloudWatchMetricDataQuery, total=False):
    MetricStat: CloudWatchMetricStat
    Expression: str
    Label: str
    ReturnData: bool


class _CloudWatchMetricStat(TypedDict):
    Metric: CloudWatchMetric
    Period: int
    Stat: str


class CloudWatchMetricStat(_CloudWatchMetricStat, total=False):
    Unit: str


class CloudWatchMetric(TypedDict, total=False):
    Namespace: str
    MetricName: str
    Dimensions: List[CloudWatchDimension]


class CloudWatchDescribeAlarmsForMetricOutput(TypedDict, total=False):
    MetricAlarms: List[CloudWatchMetricAlarm]


class CloudWatchGetDashboardOutput(TypedDict, total=False):
    DashboardArn: str
    DashboardBody: str
    DashboardName: str


class CloudWatchGetMetricDataOutput(TypedDict, total=False):
    MetricDataResults: List[CloudWatchMetricDataResult]
    NextToken: str
    Messages: List[CloudWatchMessageData]


class CloudWatchMetricDataResult(TypedDict, total=False):
    Id: str
    Label: str
    Timestamps: List[datetime.datetime]
    Values: List[float]
    StatusCode: str
    Messages: List[CloudWatchMessageData]


class CloudWatchMessageData(TypedDict, total=False):
    Code: str
    Value: str


class CloudWatchGetMetricStatisticsOutput(TypedDict, total=False):
    Label: str
    Datapoints: List[CloudWatchDatapoint]


class CloudWatchDatapoint(TypedDict, total=False):
    Timestamp: datetime.datetime
    SampleCount: float
    Average: float
    Sum: float
    Minimum: float
    Maximum: float
    Unit: str
    ExtendedStatistics: Dict[str, float]


class CloudWatchGetMetricWidgetImageOutput(TypedDict, total=False):
    MetricWidgetImage: bytes


class CloudWatchListDashboardsOutput(TypedDict, total=False):
    DashboardEntries: List[CloudWatchDashboardEntry]
    NextToken: str


class CloudWatchDashboardEntry(TypedDict, total=False):
    DashboardName: str
    DashboardArn: str
    LastModified: datetime.datetime
    Size: int


class _CloudWatchDimensionFilter(TypedDict):
    Name: str


class CloudWatchDimensionFilter(_CloudWatchDimensionFilter, total=False):
    Value: str


class CloudWatchListMetricsOutput(TypedDict, total=False):
    Metrics: List[CloudWatchMetric]
    NextToken: str


class CloudWatchListTagsForResourceOutput(TypedDict, total=False):
    Tags: List[CloudWatchTag]


class CloudWatchTag(TypedDict):
    Key: str
    Value: str


class CloudWatchPutDashboardOutput(TypedDict, total=False):
    DashboardValidationMessages: List[CloudWatchDashboardValidationMessage]


class CloudWatchDashboardValidationMessage(TypedDict, total=False):
    DataPath: str
    Message: str


class _CloudWatchMetricDatum(TypedDict):
    MetricName: str


class CloudWatchMetricDatum(_CloudWatchMetricDatum, total=False):
    Dimensions: List[CloudWatchDimension]
    Timestamp: datetime.datetime
    Value: float
    StatisticValues: CloudWatchStatisticSet
    Values: List[float]
    Counts: List[float]
    Unit: str
    StorageResolution: int


class CloudWatchStatisticSet(TypedDict):
    SampleCount: float
    Sum: float
    Minimum: float
    Maximum: float


class CloudWatchTagResourceOutput(TypedDict, total=False):
    pass


class CloudWatchUntagResourceOutput(TypedDict, total=False):
    pass


class CodeBuild(BaseClient):
    def batch_delete_builds(self, *,
        ids: List[str]
    ) -> CodeBuildBatchDeleteBuildsOutput: ...

    def batch_get_builds(self, *,
        ids: List[str]
    ) -> CodeBuildBatchGetBuildsOutput: ...

    def batch_get_projects(self, *,
        names: List[str]
    ) -> CodeBuildBatchGetProjectsOutput: ...

    def create_project(self, *,
        name: str,
        source: CodeBuildProjectSource,
        artifacts: CodeBuildProjectArtifacts,
        environment: CodeBuildProjectEnvironment,
        serviceRole: str,
        description: str = ...,
        secondarySources: List[CodeBuildProjectSource] = ...,
        secondaryArtifacts: List[CodeBuildProjectArtifacts] = ...,
        cache: CodeBuildProjectCache = ...,
        timeoutInMinutes: int = ...,
        queuedTimeoutInMinutes: int = ...,
        encryptionKey: str = ...,
        tags: List[CodeBuildTag] = ...,
        vpcConfig: CodeBuildVpcConfig = ...,
        badgeEnabled: bool = ...,
        logsConfig: CodeBuildLogsConfig = ...
    ) -> CodeBuildCreateProjectOutput: ...

    def create_webhook(self, *,
        projectName: str,
        branchFilter: str = ...,
        filterGroups: List[List[CodeBuildWebhookFilter]] = ...
    ) -> CodeBuildCreateWebhookOutput: ...

    def delete_project(self, *,
        name: str
    ) -> CodeBuildDeleteProjectOutput: ...

    def delete_source_credentials(self, *,
        arn: str
    ) -> CodeBuildDeleteSourceCredentialsOutput: ...

    def delete_webhook(self, *,
        projectName: str
    ) -> CodeBuildDeleteWebhookOutput: ...

    def import_source_credentials(self, *,
        token: str,
        serverType: str,
        authType: str,
        username: str = ...
    ) -> CodeBuildImportSourceCredentialsOutput: ...

    def invalidate_project_cache(self, *,
        projectName: str
    ) -> CodeBuildInvalidateProjectCacheOutput: ...

    def list_builds(self, *,
        sortOrder: str = ...,
        nextToken: str = ...
    ) -> CodeBuildListBuildsOutput: ...

    def list_builds_for_project(self, *,
        projectName: str,
        sortOrder: str = ...,
        nextToken: str = ...
    ) -> CodeBuildListBuildsForProjectOutput: ...

    def list_curated_environment_images(self) -> CodeBuildListCuratedEnvironmentImagesOutput: ...

    def list_projects(self, *,
        sortBy: str = ...,
        sortOrder: str = ...,
        nextToken: str = ...
    ) -> CodeBuildListProjectsOutput: ...

    def list_source_credentials(self) -> CodeBuildListSourceCredentialsOutput: ...

    def start_build(self, *,
        projectName: str,
        secondarySourcesOverride: List[CodeBuildProjectSource] = ...,
        secondarySourcesVersionOverride: List[CodeBuildProjectSourceVersion] = ...,
        sourceVersion: str = ...,
        artifactsOverride: CodeBuildProjectArtifacts = ...,
        secondaryArtifactsOverride: List[CodeBuildProjectArtifacts] = ...,
        environmentVariablesOverride: List[CodeBuildEnvironmentVariable] = ...,
        sourceTypeOverride: str = ...,
        sourceLocationOverride: str = ...,
        sourceAuthOverride: CodeBuildSourceAuth = ...,
        gitCloneDepthOverride: int = ...,
        gitSubmodulesConfigOverride: CodeBuildGitSubmodulesConfig = ...,
        buildspecOverride: str = ...,
        insecureSslOverride: bool = ...,
        reportBuildStatusOverride: bool = ...,
        environmentTypeOverride: str = ...,
        imageOverride: str = ...,
        computeTypeOverride: str = ...,
        certificateOverride: str = ...,
        cacheOverride: CodeBuildProjectCache = ...,
        serviceRoleOverride: str = ...,
        privilegedModeOverride: bool = ...,
        timeoutInMinutesOverride: int = ...,
        queuedTimeoutInMinutesOverride: int = ...,
        idempotencyToken: str = ...,
        logsConfigOverride: CodeBuildLogsConfig = ...,
        registryCredentialOverride: CodeBuildRegistryCredential = ...,
        imagePullCredentialsTypeOverride: str = ...
    ) -> CodeBuildStartBuildOutput: ...

    def stop_build(self, *,
        id: str
    ) -> CodeBuildStopBuildOutput: ...

    def update_project(self, *,
        name: str,
        description: str = ...,
        source: CodeBuildProjectSource = ...,
        secondarySources: List[CodeBuildProjectSource] = ...,
        artifacts: CodeBuildProjectArtifacts = ...,
        secondaryArtifacts: List[CodeBuildProjectArtifacts] = ...,
        cache: CodeBuildProjectCache = ...,
        environment: CodeBuildProjectEnvironment = ...,
        serviceRole: str = ...,
        timeoutInMinutes: int = ...,
        queuedTimeoutInMinutes: int = ...,
        encryptionKey: str = ...,
        tags: List[CodeBuildTag] = ...,
        vpcConfig: CodeBuildVpcConfig = ...,
        badgeEnabled: bool = ...,
        logsConfig: CodeBuildLogsConfig = ...
    ) -> CodeBuildUpdateProjectOutput: ...

    def update_webhook(self, *,
        projectName: str,
        branchFilter: str = ...,
        rotateSecret: bool = ...,
        filterGroups: List[List[CodeBuildWebhookFilter]] = ...
    ) -> CodeBuildUpdateWebhookOutput: ...


class CodeBuildBatchDeleteBuildsOutput(TypedDict, total=False):
    buildsDeleted: List[str]
    buildsNotDeleted: List[CodeBuildBuildNotDeleted]


class CodeBuildBuildNotDeleted(TypedDict, total=False):
    id: str
    statusCode: str


class CodeBuildBatchGetBuildsOutput(TypedDict, total=False):
    builds: List[CodeBuildBuild]
    buildsNotFound: List[str]


class CodeBuildBuild(TypedDict, total=False):
    id: str
    arn: str
    startTime: datetime.datetime
    endTime: datetime.datetime
    currentPhase: str
    buildStatus: str
    sourceVersion: str
    resolvedSourceVersion: str
    projectName: str
    phases: List[CodeBuildBuildPhase]
    source: CodeBuildProjectSource
    secondarySources: List[CodeBuildProjectSource]
    secondarySourceVersions: List[CodeBuildProjectSourceVersion]
    artifacts: CodeBuildBuildArtifacts
    secondaryArtifacts: List[CodeBuildBuildArtifacts]
    cache: CodeBuildProjectCache
    environment: CodeBuildProjectEnvironment
    serviceRole: str
    logs: CodeBuildLogsLocation
    timeoutInMinutes: int
    queuedTimeoutInMinutes: int
    buildComplete: bool
    initiator: str
    vpcConfig: CodeBuildVpcConfig
    networkInterface: CodeBuildNetworkInterface
    encryptionKey: str


class CodeBuildBuildPhase(TypedDict, total=False):
    phaseType: str
    phaseStatus: str
    startTime: datetime.datetime
    endTime: datetime.datetime
    durationInSeconds: int
    contexts: List[CodeBuildPhaseContext]


class CodeBuildPhaseContext(TypedDict, total=False):
    statusCode: str
    message: str


class _CodeBuildProjectSource(TypedDict):
    type: str


class CodeBuildProjectSource(_CodeBuildProjectSource, total=False):
    location: str
    gitCloneDepth: int
    gitSubmodulesConfig: CodeBuildGitSubmodulesConfig
    buildspec: str
    auth: CodeBuildSourceAuth
    reportBuildStatus: bool
    insecureSsl: bool
    sourceIdentifier: str


class CodeBuildGitSubmodulesConfig(TypedDict):
    fetchSubmodules: bool


class _CodeBuildSourceAuth(TypedDict):
    type: str


class CodeBuildSourceAuth(_CodeBuildSourceAuth, total=False):
    resource: str


class CodeBuildProjectSourceVersion(TypedDict):
    sourceIdentifier: str
    sourceVersion: str


class CodeBuildBuildArtifacts(TypedDict, total=False):
    location: str
    sha256sum: str
    md5sum: str
    overrideArtifactName: bool
    encryptionDisabled: bool
    artifactIdentifier: str


class _CodeBuildProjectCache(TypedDict):
    type: str


class CodeBuildProjectCache(_CodeBuildProjectCache, total=False):
    location: str
    modes: List[str]


class _CodeBuildProjectEnvironment(TypedDict):
    type: str
    image: str
    computeType: str


class CodeBuildProjectEnvironment(_CodeBuildProjectEnvironment, total=False):
    environmentVariables: List[CodeBuildEnvironmentVariable]
    privilegedMode: bool
    certificate: str
    registryCredential: CodeBuildRegistryCredential
    imagePullCredentialsType: str


class _CodeBuildEnvironmentVariable(TypedDict):
    name: str
    value: str


class CodeBuildEnvironmentVariable(_CodeBuildEnvironmentVariable, total=False):
    type: str


class CodeBuildRegistryCredential(TypedDict):
    credential: str
    credentialProvider: str


class CodeBuildLogsLocation(TypedDict, total=False):
    groupName: str
    streamName: str
    deepLink: str
    s3DeepLink: str
    cloudWatchLogs: CodeBuildCloudWatchLogsConfig
    s3Logs: CodeBuildS3LogsConfig


class _CodeBuildCloudWatchLogsConfig(TypedDict):
    status: str


class CodeBuildCloudWatchLogsConfig(_CodeBuildCloudWatchLogsConfig, total=False):
    groupName: str
    streamName: str


class _CodeBuildS3LogsConfig(TypedDict):
    status: str


class CodeBuildS3LogsConfig(_CodeBuildS3LogsConfig, total=False):
    location: str
    encryptionDisabled: bool


class CodeBuildVpcConfig(TypedDict, total=False):
    vpcId: str
    subnets: List[str]
    securityGroupIds: List[str]


class CodeBuildNetworkInterface(TypedDict, total=False):
    subnetId: str
    networkInterfaceId: str


class CodeBuildBatchGetProjectsOutput(TypedDict, total=False):
    projects: List[CodeBuildProject]
    projectsNotFound: List[str]


class CodeBuildProject(TypedDict, total=False):
    name: str
    arn: str
    description: str
    source: CodeBuildProjectSource
    secondarySources: List[CodeBuildProjectSource]
    artifacts: CodeBuildProjectArtifacts
    secondaryArtifacts: List[CodeBuildProjectArtifacts]
    cache: CodeBuildProjectCache
    environment: CodeBuildProjectEnvironment
    serviceRole: str
    timeoutInMinutes: int
    queuedTimeoutInMinutes: int
    encryptionKey: str
    tags: List[CodeBuildTag]
    created: datetime.datetime
    lastModified: datetime.datetime
    webhook: CodeBuildWebhook
    vpcConfig: CodeBuildVpcConfig
    badge: CodeBuildProjectBadge
    logsConfig: CodeBuildLogsConfig


class _CodeBuildProjectArtifacts(TypedDict):
    type: str


class CodeBuildProjectArtifacts(_CodeBuildProjectArtifacts, total=False):
    location: str
    path: str
    namespaceType: str
    name: str
    packaging: str
    overrideArtifactName: bool
    encryptionDisabled: bool
    artifactIdentifier: str


class CodeBuildTag(TypedDict, total=False):
    key: str
    value: str


class CodeBuildWebhook(TypedDict, total=False):
    url: str
    payloadUrl: str
    secret: str
    branchFilter: str
    filterGroups: List[List[CodeBuildWebhookFilter]]
    lastModifiedSecret: datetime.datetime


class _CodeBuildWebhookFilter(TypedDict):
    type: str
    pattern: str


class CodeBuildWebhookFilter(_CodeBuildWebhookFilter, total=False):
    excludeMatchedPattern: bool


class CodeBuildProjectBadge(TypedDict, total=False):
    badgeEnabled: bool
    badgeRequestUrl: str


class CodeBuildLogsConfig(TypedDict, total=False):
    cloudWatchLogs: CodeBuildCloudWatchLogsConfig
    s3Logs: CodeBuildS3LogsConfig


class CodeBuildCreateProjectOutput(TypedDict, total=False):
    project: CodeBuildProject


class CodeBuildCreateWebhookOutput(TypedDict, total=False):
    webhook: CodeBuildWebhook


class CodeBuildDeleteProjectOutput(TypedDict, total=False):
    pass


class CodeBuildDeleteSourceCredentialsOutput(TypedDict, total=False):
    arn: str


class CodeBuildDeleteWebhookOutput(TypedDict, total=False):
    pass


class CodeBuildImportSourceCredentialsOutput(TypedDict, total=False):
    arn: str


class CodeBuildInvalidateProjectCacheOutput(TypedDict, total=False):
    pass


class CodeBuildListBuildsOutput(TypedDict, total=False):
    ids: List[str]
    nextToken: str


class CodeBuildListBuildsForProjectOutput(TypedDict, total=False):
    ids: List[str]
    nextToken: str


class CodeBuildListCuratedEnvironmentImagesOutput(TypedDict, total=False):
    platforms: List[CodeBuildEnvironmentPlatform]


class CodeBuildEnvironmentPlatform(TypedDict, total=False):
    platform: str
    languages: List[CodeBuildEnvironmentLanguage]


class CodeBuildEnvironmentLanguage(TypedDict, total=False):
    language: str
    images: List[CodeBuildEnvironmentImage]


class CodeBuildEnvironmentImage(TypedDict, total=False):
    name: str
    description: str
    versions: List[str]


class CodeBuildListProjectsOutput(TypedDict, total=False):
    nextToken: str
    projects: List[str]


class CodeBuildListSourceCredentialsOutput(TypedDict, total=False):
    sourceCredentialsInfos: List[CodeBuildSourceCredentialsInfo]


class CodeBuildSourceCredentialsInfo(TypedDict, total=False):
    arn: str
    serverType: str
    authType: str


class CodeBuildStartBuildOutput(TypedDict, total=False):
    build: CodeBuildBuild


class CodeBuildStopBuildOutput(TypedDict, total=False):
    build: CodeBuildBuild


class CodeBuildUpdateProjectOutput(TypedDict, total=False):
    project: CodeBuildProject


class CodeBuildUpdateWebhookOutput(TypedDict, total=False):
    webhook: CodeBuildWebhook


class CodeCommit(BaseClient):
    def batch_get_repositories(self, *,
        repositoryNames: List[str]
    ) -> CodeCommitBatchGetRepositoriesOutput: ...

    def create_branch(self, *,
        repositoryName: str,
        branchName: str,
        commitId: str
    ): ...

    def create_commit(self, *,
        repositoryName: str,
        branchName: str,
        parentCommitId: str = ...,
        authorName: str = ...,
        email: str = ...,
        commitMessage: str = ...,
        keepEmptyFolders: bool = ...,
        putFiles: List[CodeCommitPutFileEntry] = ...,
        deleteFiles: List[CodeCommitDeleteFileEntry] = ...,
        setFileModes: List[CodeCommitSetFileModeEntry] = ...
    ) -> CodeCommitCreateCommitOutput: ...

    def create_pull_request(self, *,
        title: str,
        targets: List[CodeCommitTarget],
        description: str = ...,
        clientRequestToken: str = ...
    ) -> CodeCommitCreatePullRequestOutput: ...

    def create_repository(self, *,
        repositoryName: str,
        repositoryDescription: str = ...
    ) -> CodeCommitCreateRepositoryOutput: ...

    def delete_branch(self, *,
        repositoryName: str,
        branchName: str
    ) -> CodeCommitDeleteBranchOutput: ...

    def delete_comment_content(self, *,
        commentId: str
    ) -> CodeCommitDeleteCommentContentOutput: ...

    def delete_file(self, *,
        repositoryName: str,
        branchName: str,
        filePath: str,
        parentCommitId: str,
        keepEmptyFolders: bool = ...,
        commitMessage: str = ...,
        name: str = ...,
        email: str = ...
    ) -> CodeCommitDeleteFileOutput: ...

    def delete_repository(self, *,
        repositoryName: str
    ) -> CodeCommitDeleteRepositoryOutput: ...

    def describe_pull_request_events(self, *,
        pullRequestId: str,
        pullRequestEventType: str = ...,
        actorArn: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> CodeCommitDescribePullRequestEventsOutput: ...

    def get_blob(self, *,
        repositoryName: str,
        blobId: str
    ) -> CodeCommitGetBlobOutput: ...

    def get_branch(self, *,
        repositoryName: str = ...,
        branchName: str = ...
    ) -> CodeCommitGetBranchOutput: ...

    def get_comment(self, *,
        commentId: str
    ) -> CodeCommitGetCommentOutput: ...

    def get_comments_for_compared_commit(self, *,
        repositoryName: str,
        afterCommitId: str,
        beforeCommitId: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> CodeCommitGetCommentsForComparedCommitOutput: ...

    def get_comments_for_pull_request(self, *,
        pullRequestId: str,
        repositoryName: str = ...,
        beforeCommitId: str = ...,
        afterCommitId: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> CodeCommitGetCommentsForPullRequestOutput: ...

    def get_commit(self, *,
        repositoryName: str,
        commitId: str
    ) -> CodeCommitGetCommitOutput: ...

    def get_differences(self, *,
        repositoryName: str,
        afterCommitSpecifier: str,
        beforeCommitSpecifier: str = ...,
        beforePath: str = ...,
        afterPath: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> CodeCommitGetDifferencesOutput: ...

    def get_file(self, *,
        repositoryName: str,
        filePath: str,
        commitSpecifier: str = ...
    ) -> CodeCommitGetFileOutput: ...

    def get_folder(self, *,
        repositoryName: str,
        folderPath: str,
        commitSpecifier: str = ...
    ) -> CodeCommitGetFolderOutput: ...

    def get_merge_conflicts(self, *,
        repositoryName: str,
        destinationCommitSpecifier: str,
        sourceCommitSpecifier: str,
        mergeOption: str
    ) -> CodeCommitGetMergeConflictsOutput: ...

    def get_pull_request(self, *,
        pullRequestId: str
    ) -> CodeCommitGetPullRequestOutput: ...

    def get_repository(self, *,
        repositoryName: str
    ) -> CodeCommitGetRepositoryOutput: ...

    def get_repository_triggers(self, *,
        repositoryName: str
    ) -> CodeCommitGetRepositoryTriggersOutput: ...

    def list_branches(self, *,
        repositoryName: str,
        nextToken: str = ...
    ) -> CodeCommitListBranchesOutput: ...

    def list_pull_requests(self, *,
        repositoryName: str,
        authorArn: str = ...,
        pullRequestStatus: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> CodeCommitListPullRequestsOutput: ...

    def list_repositories(self, *,
        nextToken: str = ...,
        sortBy: str = ...,
        order: str = ...
    ) -> CodeCommitListRepositoriesOutput: ...

    def merge_pull_request_by_fast_forward(self, *,
        pullRequestId: str,
        repositoryName: str,
        sourceCommitId: str = ...
    ) -> CodeCommitMergePullRequestByFastForwardOutput: ...

    def post_comment_for_compared_commit(self, *,
        repositoryName: str,
        afterCommitId: str,
        content: str,
        beforeCommitId: str = ...,
        location: CodeCommitLocation = ...,
        clientRequestToken: str = ...
    ) -> CodeCommitPostCommentForComparedCommitOutput: ...

    def post_comment_for_pull_request(self, *,
        pullRequestId: str,
        repositoryName: str,
        beforeCommitId: str,
        afterCommitId: str,
        content: str,
        location: CodeCommitLocation = ...,
        clientRequestToken: str = ...
    ) -> CodeCommitPostCommentForPullRequestOutput: ...

    def post_comment_reply(self, *,
        inReplyTo: str,
        content: str,
        clientRequestToken: str = ...
    ) -> CodeCommitPostCommentReplyOutput: ...

    def put_file(self, *,
        repositoryName: str,
        branchName: str,
        fileContent: bytes,
        filePath: str,
        fileMode: str = ...,
        parentCommitId: str = ...,
        commitMessage: str = ...,
        name: str = ...,
        email: str = ...
    ) -> CodeCommitPutFileOutput: ...

    def put_repository_triggers(self, *,
        repositoryName: str,
        triggers: List[CodeCommitRepositoryTrigger]
    ) -> CodeCommitPutRepositoryTriggersOutput: ...

    def test_repository_triggers(self, *,
        repositoryName: str,
        triggers: List[CodeCommitRepositoryTrigger]
    ) -> CodeCommitTestRepositoryTriggersOutput: ...

    def update_comment(self, *,
        commentId: str,
        content: str
    ) -> CodeCommitUpdateCommentOutput: ...

    def update_default_branch(self, *,
        repositoryName: str,
        defaultBranchName: str
    ): ...

    def update_pull_request_description(self, *,
        pullRequestId: str,
        description: str
    ) -> CodeCommitUpdatePullRequestDescriptionOutput: ...

    def update_pull_request_status(self, *,
        pullRequestId: str,
        pullRequestStatus: str
    ) -> CodeCommitUpdatePullRequestStatusOutput: ...

    def update_pull_request_title(self, *,
        pullRequestId: str,
        title: str
    ) -> CodeCommitUpdatePullRequestTitleOutput: ...

    def update_repository_description(self, *,
        repositoryName: str,
        repositoryDescription: str = ...
    ): ...

    def update_repository_name(self, *,
        oldName: str,
        newName: str
    ): ...


class CodeCommitBatchGetRepositoriesOutput(TypedDict, total=False):
    repositories: List[CodeCommitRepositoryMetadata]
    repositoriesNotFound: List[str]


class CodeCommitRepositoryMetadata(TypedDict, total=False):
    accountId: str
    repositoryId: str
    repositoryName: str
    repositoryDescription: str
    defaultBranch: str
    lastModifiedDate: datetime.datetime
    creationDate: datetime.datetime
    cloneUrlHttp: str
    cloneUrlSsh: str
    Arn: str


class _CodeCommitPutFileEntry(TypedDict):
    filePath: str


class CodeCommitPutFileEntry(_CodeCommitPutFileEntry, total=False):
    fileMode: str
    fileContent: bytes
    sourceFile: CodeCommitSourceFileSpecifier


class _CodeCommitSourceFileSpecifier(TypedDict):
    filePath: str


class CodeCommitSourceFileSpecifier(_CodeCommitSourceFileSpecifier, total=False):
    isMove: bool


class CodeCommitDeleteFileEntry(TypedDict):
    filePath: str


class CodeCommitSetFileModeEntry(TypedDict):
    filePath: str
    fileMode: str


class CodeCommitCreateCommitOutput(TypedDict, total=False):
    commitId: str
    treeId: str
    filesAdded: List[CodeCommitFileMetadata]
    filesUpdated: List[CodeCommitFileMetadata]
    filesDeleted: List[CodeCommitFileMetadata]


class CodeCommitFileMetadata(TypedDict, total=False):
    absolutePath: str
    blobId: str
    fileMode: str


class _CodeCommitTarget(TypedDict):
    repositoryName: str
    sourceReference: str


class CodeCommitTarget(_CodeCommitTarget, total=False):
    destinationReference: str


class CodeCommitCreatePullRequestOutput(TypedDict):
    pullRequest: CodeCommitPullRequest


class CodeCommitPullRequest(TypedDict, total=False):
    pullRequestId: str
    title: str
    description: str
    lastActivityDate: datetime.datetime
    creationDate: datetime.datetime
    pullRequestStatus: str
    authorArn: str
    pullRequestTargets: List[CodeCommitPullRequestTarget]
    clientRequestToken: str


class CodeCommitPullRequestTarget(TypedDict, total=False):
    repositoryName: str
    sourceReference: str
    destinationReference: str
    destinationCommit: str
    sourceCommit: str
    mergeBase: str
    mergeMetadata: CodeCommitMergeMetadata


class CodeCommitMergeMetadata(TypedDict, total=False):
    isMerged: bool
    mergedBy: str


class CodeCommitCreateRepositoryOutput(TypedDict, total=False):
    repositoryMetadata: CodeCommitRepositoryMetadata


class CodeCommitDeleteBranchOutput(TypedDict, total=False):
    deletedBranch: CodeCommitBranchInfo


class CodeCommitBranchInfo(TypedDict, total=False):
    branchName: str
    commitId: str


class CodeCommitDeleteCommentContentOutput(TypedDict, total=False):
    comment: CodeCommitComment


class CodeCommitComment(TypedDict, total=False):
    commentId: str
    content: str
    inReplyTo: str
    creationDate: datetime.datetime
    lastModifiedDate: datetime.datetime
    authorArn: str
    deleted: bool
    clientRequestToken: str


class CodeCommitDeleteFileOutput(TypedDict):
    commitId: str
    blobId: str
    treeId: str
    filePath: str


class CodeCommitDeleteRepositoryOutput(TypedDict, total=False):
    repositoryId: str


class _CodeCommitDescribePullRequestEventsOutput(TypedDict):
    pullRequestEvents: List[CodeCommitPullRequestEvent]


class CodeCommitDescribePullRequestEventsOutput(_CodeCommitDescribePullRequestEventsOutput, total=False):
    nextToken: str


class CodeCommitPullRequestEvent(TypedDict, total=False):
    pullRequestId: str
    eventDate: datetime.datetime
    pullRequestEventType: str
    actorArn: str
    pullRequestCreatedEventMetadata: CodeCommitPullRequestCreatedEventMetadata
    pullRequestStatusChangedEventMetadata: CodeCommitPullRequestStatusChangedEventMetadata
    pullRequestSourceReferenceUpdatedEventMetadata: CodeCommitPullRequestSourceReferenceUpdatedEventMetadata
    pullRequestMergedStateChangedEventMetadata: CodeCommitPullRequestMergedStateChangedEventMetadata


class CodeCommitPullRequestCreatedEventMetadata(TypedDict, total=False):
    repositoryName: str
    sourceCommitId: str
    destinationCommitId: str
    mergeBase: str


class CodeCommitPullRequestStatusChangedEventMetadata(TypedDict, total=False):
    pullRequestStatus: str


class CodeCommitPullRequestSourceReferenceUpdatedEventMetadata(TypedDict, total=False):
    repositoryName: str
    beforeCommitId: str
    afterCommitId: str
    mergeBase: str


class CodeCommitPullRequestMergedStateChangedEventMetadata(TypedDict, total=False):
    repositoryName: str
    destinationReference: str
    mergeMetadata: CodeCommitMergeMetadata


class CodeCommitGetBlobOutput(TypedDict):
    content: bytes


class CodeCommitGetBranchOutput(TypedDict, total=False):
    branch: CodeCommitBranchInfo


class CodeCommitGetCommentOutput(TypedDict, total=False):
    comment: CodeCommitComment


class CodeCommitGetCommentsForComparedCommitOutput(TypedDict, total=False):
    commentsForComparedCommitData: List[CodeCommitCommentsForComparedCommit]
    nextToken: str


class CodeCommitCommentsForComparedCommit(TypedDict, total=False):
    repositoryName: str
    beforeCommitId: str
    afterCommitId: str
    beforeBlobId: str
    afterBlobId: str
    location: CodeCommitLocation
    comments: List[CodeCommitComment]


class CodeCommitLocation(TypedDict, total=False):
    filePath: str
    filePosition: int
    relativeFileVersion: str


class CodeCommitGetCommentsForPullRequestOutput(TypedDict, total=False):
    commentsForPullRequestData: List[CodeCommitCommentsForPullRequest]
    nextToken: str


class CodeCommitCommentsForPullRequest(TypedDict, total=False):
    pullRequestId: str
    repositoryName: str
    beforeCommitId: str
    afterCommitId: str
    beforeBlobId: str
    afterBlobId: str
    location: CodeCommitLocation
    comments: List[CodeCommitComment]


class CodeCommitGetCommitOutput(TypedDict):
    commit: CodeCommitCommit


class CodeCommitCommit(TypedDict, total=False):
    commitId: str
    treeId: str
    parents: List[str]
    message: str
    author: CodeCommitUserInfo
    committer: CodeCommitUserInfo
    additionalData: str


class CodeCommitUserInfo(TypedDict, total=False):
    name: str
    email: str
    date: str


class CodeCommitGetDifferencesOutput(TypedDict, total=False):
    differences: List[CodeCommitDifference]
    NextToken: str


class CodeCommitDifference(TypedDict, total=False):
    beforeBlob: CodeCommitBlobMetadata
    afterBlob: CodeCommitBlobMetadata
    changeType: str


class CodeCommitBlobMetadata(TypedDict, total=False):
    blobId: str
    path: str
    mode: str


class CodeCommitGetFileOutput(TypedDict):
    commitId: str
    blobId: str
    filePath: str
    fileMode: str
    fileSize: int
    fileContent: bytes


class _CodeCommitGetFolderOutput(TypedDict):
    commitId: str
    folderPath: str


class CodeCommitGetFolderOutput(_CodeCommitGetFolderOutput, total=False):
    treeId: str
    subFolders: List[CodeCommitFolder]
    files: List[CodeCommitFile]
    symbolicLinks: List[CodeCommitSymbolicLink]
    subModules: List[CodeCommitSubModule]


class CodeCommitFolder(TypedDict, total=False):
    treeId: str
    absolutePath: str
    relativePath: str


class CodeCommitFile(TypedDict, total=False):
    blobId: str
    absolutePath: str
    relativePath: str
    fileMode: str


class CodeCommitSymbolicLink(TypedDict, total=False):
    blobId: str
    absolutePath: str
    relativePath: str
    fileMode: str


class CodeCommitSubModule(TypedDict, total=False):
    commitId: str
    absolutePath: str
    relativePath: str


class CodeCommitGetMergeConflictsOutput(TypedDict):
    mergeable: bool
    destinationCommitId: str
    sourceCommitId: str


class CodeCommitGetPullRequestOutput(TypedDict):
    pullRequest: CodeCommitPullRequest


class CodeCommitGetRepositoryOutput(TypedDict, total=False):
    repositoryMetadata: CodeCommitRepositoryMetadata


class CodeCommitGetRepositoryTriggersOutput(TypedDict, total=False):
    configurationId: str
    triggers: List[CodeCommitRepositoryTrigger]


class _CodeCommitRepositoryTrigger(TypedDict):
    name: str
    destinationArn: str
    events: List[str]


class CodeCommitRepositoryTrigger(_CodeCommitRepositoryTrigger, total=False):
    customData: str
    branches: List[str]


class CodeCommitListBranchesOutput(TypedDict, total=False):
    branches: List[str]
    nextToken: str


class _CodeCommitListPullRequestsOutput(TypedDict):
    pullRequestIds: List[str]


class CodeCommitListPullRequestsOutput(_CodeCommitListPullRequestsOutput, total=False):
    nextToken: str


class CodeCommitListRepositoriesOutput(TypedDict, total=False):
    repositories: List[CodeCommitRepositoryNameIdPair]
    nextToken: str


class CodeCommitRepositoryNameIdPair(TypedDict, total=False):
    repositoryName: str
    repositoryId: str


class CodeCommitMergePullRequestByFastForwardOutput(TypedDict, total=False):
    pullRequest: CodeCommitPullRequest


class CodeCommitPostCommentForComparedCommitOutput(TypedDict, total=False):
    repositoryName: str
    beforeCommitId: str
    afterCommitId: str
    beforeBlobId: str
    afterBlobId: str
    location: CodeCommitLocation
    comment: CodeCommitComment


class CodeCommitPostCommentForPullRequestOutput(TypedDict, total=False):
    repositoryName: str
    pullRequestId: str
    beforeCommitId: str
    afterCommitId: str
    beforeBlobId: str
    afterBlobId: str
    location: CodeCommitLocation
    comment: CodeCommitComment


class CodeCommitPostCommentReplyOutput(TypedDict, total=False):
    comment: CodeCommitComment


class CodeCommitPutFileOutput(TypedDict):
    commitId: str
    blobId: str
    treeId: str


class CodeCommitPutRepositoryTriggersOutput(TypedDict, total=False):
    configurationId: str


class CodeCommitTestRepositoryTriggersOutput(TypedDict, total=False):
    successfulExecutions: List[str]
    failedExecutions: List[CodeCommitRepositoryTriggerExecutionFailure]


class CodeCommitRepositoryTriggerExecutionFailure(TypedDict, total=False):
    trigger: str
    failureMessage: str


class CodeCommitUpdateCommentOutput(TypedDict, total=False):
    comment: CodeCommitComment


class CodeCommitUpdatePullRequestDescriptionOutput(TypedDict):
    pullRequest: CodeCommitPullRequest


class CodeCommitUpdatePullRequestStatusOutput(TypedDict):
    pullRequest: CodeCommitPullRequest


class CodeCommitUpdatePullRequestTitleOutput(TypedDict):
    pullRequest: CodeCommitPullRequest


class CodeDeploy(BaseClient):
    def add_tags_to_on_premises_instances(self, *,
        tags: List[CodeDeployTag],
        instanceNames: List[str]
    ): ...

    def batch_get_application_revisions(self, *,
        applicationName: str,
        revisions: List[CodeDeployRevisionLocation]
    ) -> CodeDeployBatchGetApplicationRevisionsOutput: ...

    def batch_get_applications(self, *,
        applicationNames: List[str]
    ) -> CodeDeployBatchGetApplicationsOutput: ...

    def batch_get_deployment_groups(self, *,
        applicationName: str,
        deploymentGroupNames: List[str]
    ) -> CodeDeployBatchGetDeploymentGroupsOutput: ...

    def batch_get_deployment_instances(self, *,
        deploymentId: str,
        instanceIds: List[str]
    ) -> CodeDeployBatchGetDeploymentInstancesOutput: ...

    def batch_get_deployment_targets(self, *,
        deploymentId: str = ...,
        targetIds: List[str] = ...
    ) -> CodeDeployBatchGetDeploymentTargetsOutput: ...

    def batch_get_deployments(self, *,
        deploymentIds: List[str]
    ) -> CodeDeployBatchGetDeploymentsOutput: ...

    def batch_get_on_premises_instances(self, *,
        instanceNames: List[str]
    ) -> CodeDeployBatchGetOnPremisesInstancesOutput: ...

    def continue_deployment(self, *,
        deploymentId: str = ...,
        deploymentWaitType: str = ...
    ): ...

    def create_application(self, *,
        applicationName: str,
        computePlatform: str = ...
    ) -> CodeDeployCreateApplicationOutput: ...

    def create_deployment(self, *,
        applicationName: str,
        deploymentGroupName: str = ...,
        revision: CodeDeployRevisionLocation = ...,
        deploymentConfigName: str = ...,
        description: str = ...,
        ignoreApplicationStopFailures: bool = ...,
        targetInstances: CodeDeployTargetInstances = ...,
        autoRollbackConfiguration: CodeDeployAutoRollbackConfiguration = ...,
        updateOutdatedInstancesOnly: bool = ...,
        fileExistsBehavior: str = ...
    ) -> CodeDeployCreateDeploymentOutput: ...

    def create_deployment_config(self, *,
        deploymentConfigName: str,
        minimumHealthyHosts: CodeDeployMinimumHealthyHosts = ...,
        trafficRoutingConfig: CodeDeployTrafficRoutingConfig = ...,
        computePlatform: str = ...
    ) -> CodeDeployCreateDeploymentConfigOutput: ...

    def create_deployment_group(self, *,
        applicationName: str,
        deploymentGroupName: str,
        serviceRoleArn: str,
        deploymentConfigName: str = ...,
        ec2TagFilters: List[CodeDeployEC2TagFilter] = ...,
        onPremisesInstanceTagFilters: List[CodeDeployTagFilter] = ...,
        autoScalingGroups: List[str] = ...,
        triggerConfigurations: List[CodeDeployTriggerConfig] = ...,
        alarmConfiguration: CodeDeployAlarmConfiguration = ...,
        autoRollbackConfiguration: CodeDeployAutoRollbackConfiguration = ...,
        deploymentStyle: CodeDeployDeploymentStyle = ...,
        blueGreenDeploymentConfiguration: CodeDeployBlueGreenDeploymentConfiguration = ...,
        loadBalancerInfo: CodeDeployLoadBalancerInfo = ...,
        ec2TagSet: CodeDeployEC2TagSet = ...,
        ecsServices: List[CodeDeployECSService] = ...,
        onPremisesTagSet: CodeDeployOnPremisesTagSet = ...
    ) -> CodeDeployCreateDeploymentGroupOutput: ...

    def delete_application(self, *,
        applicationName: str
    ): ...

    def delete_deployment_config(self, *,
        deploymentConfigName: str
    ): ...

    def delete_deployment_group(self, *,
        applicationName: str,
        deploymentGroupName: str
    ) -> CodeDeployDeleteDeploymentGroupOutput: ...

    def delete_git_hub_account_token(self, *,
        tokenName: str = ...
    ) -> CodeDeployDeleteGitHubAccountTokenOutput: ...

    def deregister_on_premises_instance(self, *,
        instanceName: str
    ): ...

    def get_application(self, *,
        applicationName: str
    ) -> CodeDeployGetApplicationOutput: ...

    def get_application_revision(self, *,
        applicationName: str,
        revision: CodeDeployRevisionLocation
    ) -> CodeDeployGetApplicationRevisionOutput: ...

    def get_deployment(self, *,
        deploymentId: str
    ) -> CodeDeployGetDeploymentOutput: ...

    def get_deployment_config(self, *,
        deploymentConfigName: str
    ) -> CodeDeployGetDeploymentConfigOutput: ...

    def get_deployment_group(self, *,
        applicationName: str,
        deploymentGroupName: str
    ) -> CodeDeployGetDeploymentGroupOutput: ...

    def get_deployment_instance(self, *,
        deploymentId: str,
        instanceId: str
    ) -> CodeDeployGetDeploymentInstanceOutput: ...

    def get_deployment_target(self, *,
        deploymentId: str = ...,
        targetId: str = ...
    ) -> CodeDeployGetDeploymentTargetOutput: ...

    def get_on_premises_instance(self, *,
        instanceName: str
    ) -> CodeDeployGetOnPremisesInstanceOutput: ...

    def list_application_revisions(self, *,
        applicationName: str,
        sortBy: str = ...,
        sortOrder: str = ...,
        s3Bucket: str = ...,
        s3KeyPrefix: str = ...,
        deployed: str = ...,
        nextToken: str = ...
    ) -> CodeDeployListApplicationRevisionsOutput: ...

    def list_applications(self, *,
        nextToken: str = ...
    ) -> CodeDeployListApplicationsOutput: ...

    def list_deployment_configs(self, *,
        nextToken: str = ...
    ) -> CodeDeployListDeploymentConfigsOutput: ...

    def list_deployment_groups(self, *,
        applicationName: str,
        nextToken: str = ...
    ) -> CodeDeployListDeploymentGroupsOutput: ...

    def list_deployment_instances(self, *,
        deploymentId: str,
        nextToken: str = ...,
        instanceStatusFilter: List[str] = ...,
        instanceTypeFilter: List[str] = ...
    ) -> CodeDeployListDeploymentInstancesOutput: ...

    def list_deployment_targets(self, *,
        deploymentId: str = ...,
        nextToken: str = ...,
        targetFilters: Dict[str, List[str]] = ...
    ) -> CodeDeployListDeploymentTargetsOutput: ...

    def list_deployments(self, *,
        applicationName: str = ...,
        deploymentGroupName: str = ...,
        includeOnlyStatuses: List[str] = ...,
        createTimeRange: CodeDeployTimeRange = ...,
        nextToken: str = ...
    ) -> CodeDeployListDeploymentsOutput: ...

    def list_git_hub_account_token_names(self, *,
        nextToken: str = ...
    ) -> CodeDeployListGitHubAccountTokenNamesOutput: ...

    def list_on_premises_instances(self, *,
        registrationStatus: str = ...,
        tagFilters: List[CodeDeployTagFilter] = ...,
        nextToken: str = ...
    ) -> CodeDeployListOnPremisesInstancesOutput: ...

    def put_lifecycle_event_hook_execution_status(self, *,
        deploymentId: str = ...,
        lifecycleEventHookExecutionId: str = ...,
        status: str = ...
    ) -> CodeDeployPutLifecycleEventHookExecutionStatusOutput: ...

    def register_application_revision(self, *,
        applicationName: str,
        revision: CodeDeployRevisionLocation,
        description: str = ...
    ): ...

    def register_on_premises_instance(self, *,
        instanceName: str,
        iamSessionArn: str = ...,
        iamUserArn: str = ...
    ): ...

    def remove_tags_from_on_premises_instances(self, *,
        tags: List[CodeDeployTag],
        instanceNames: List[str]
    ): ...

    def skip_wait_time_for_instance_termination(self, *,
        deploymentId: str = ...
    ): ...

    def stop_deployment(self, *,
        deploymentId: str,
        autoRollbackEnabled: bool = ...
    ) -> CodeDeployStopDeploymentOutput: ...

    def update_application(self, *,
        applicationName: str = ...,
        newApplicationName: str = ...
    ): ...

    def update_deployment_group(self, *,
        applicationName: str,
        currentDeploymentGroupName: str,
        newDeploymentGroupName: str = ...,
        deploymentConfigName: str = ...,
        ec2TagFilters: List[CodeDeployEC2TagFilter] = ...,
        onPremisesInstanceTagFilters: List[CodeDeployTagFilter] = ...,
        autoScalingGroups: List[str] = ...,
        serviceRoleArn: str = ...,
        triggerConfigurations: List[CodeDeployTriggerConfig] = ...,
        alarmConfiguration: CodeDeployAlarmConfiguration = ...,
        autoRollbackConfiguration: CodeDeployAutoRollbackConfiguration = ...,
        deploymentStyle: CodeDeployDeploymentStyle = ...,
        blueGreenDeploymentConfiguration: CodeDeployBlueGreenDeploymentConfiguration = ...,
        loadBalancerInfo: CodeDeployLoadBalancerInfo = ...,
        ec2TagSet: CodeDeployEC2TagSet = ...,
        ecsServices: List[CodeDeployECSService] = ...,
        onPremisesTagSet: CodeDeployOnPremisesTagSet = ...
    ) -> CodeDeployUpdateDeploymentGroupOutput: ...


class CodeDeployTag(TypedDict, total=False):
    Key: str
    Value: str


class CodeDeployRevisionLocation(TypedDict, total=False):
    revisionType: str
    s3Location: CodeDeployS3Location
    gitHubLocation: CodeDeployGitHubLocation
    string: CodeDeployRawString
    appSpecContent: CodeDeployAppSpecContent


class CodeDeployS3Location(TypedDict, total=False):
    bucket: str
    key: str
    bundleType: str
    version: str
    eTag: str


class CodeDeployGitHubLocation(TypedDict, total=False):
    repository: str
    commitId: str


class CodeDeployRawString(TypedDict, total=False):
    content: str
    sha256: str


class CodeDeployAppSpecContent(TypedDict, total=False):
    content: str
    sha256: str


class CodeDeployBatchGetApplicationRevisionsOutput(TypedDict, total=False):
    applicationName: str
    errorMessage: str
    revisions: List[CodeDeployRevisionInfo]


class CodeDeployRevisionInfo(TypedDict, total=False):
    revisionLocation: CodeDeployRevisionLocation
    genericRevisionInfo: CodeDeployGenericRevisionInfo


class CodeDeployGenericRevisionInfo(TypedDict, total=False):
    description: str
    deploymentGroups: List[str]
    firstUsedTime: datetime.datetime
    lastUsedTime: datetime.datetime
    registerTime: datetime.datetime


class CodeDeployBatchGetApplicationsOutput(TypedDict, total=False):
    applicationsInfo: List[CodeDeployApplicationInfo]


class CodeDeployApplicationInfo(TypedDict, total=False):
    applicationId: str
    applicationName: str
    createTime: datetime.datetime
    linkedToGitHub: bool
    gitHubAccountName: str
    computePlatform: str


class CodeDeployBatchGetDeploymentGroupsOutput(TypedDict, total=False):
    deploymentGroupsInfo: List[CodeDeployDeploymentGroupInfo]
    errorMessage: str


class CodeDeployDeploymentGroupInfo(TypedDict, total=False):
    applicationName: str
    deploymentGroupId: str
    deploymentGroupName: str
    deploymentConfigName: str
    ec2TagFilters: List[CodeDeployEC2TagFilter]
    onPremisesInstanceTagFilters: List[CodeDeployTagFilter]
    autoScalingGroups: List[CodeDeployAutoScalingGroup]
    serviceRoleArn: str
    targetRevision: CodeDeployRevisionLocation
    triggerConfigurations: List[CodeDeployTriggerConfig]
    alarmConfiguration: CodeDeployAlarmConfiguration
    autoRollbackConfiguration: CodeDeployAutoRollbackConfiguration
    deploymentStyle: CodeDeployDeploymentStyle
    blueGreenDeploymentConfiguration: CodeDeployBlueGreenDeploymentConfiguration
    loadBalancerInfo: CodeDeployLoadBalancerInfo
    lastSuccessfulDeployment: CodeDeployLastDeploymentInfo
    lastAttemptedDeployment: CodeDeployLastDeploymentInfo
    ec2TagSet: CodeDeployEC2TagSet
    onPremisesTagSet: CodeDeployOnPremisesTagSet
    computePlatform: str
    ecsServices: List[CodeDeployECSService]


class CodeDeployEC2TagFilter(TypedDict, total=False):
    Key: str
    Value: str
    Type: str


class CodeDeployTagFilter(TypedDict, total=False):
    Key: str
    Value: str
    Type: str


class CodeDeployAutoScalingGroup(TypedDict, total=False):
    name: str
    hook: str


class CodeDeployTriggerConfig(TypedDict, total=False):
    triggerName: str
    triggerTargetArn: str
    triggerEvents: List[str]


class CodeDeployAlarmConfiguration(TypedDict, total=False):
    enabled: bool
    ignorePollAlarmFailure: bool
    alarms: List[CodeDeployAlarm]


class CodeDeployAlarm(TypedDict, total=False):
    name: str


class CodeDeployAutoRollbackConfiguration(TypedDict, total=False):
    enabled: bool
    events: List[str]


class CodeDeployDeploymentStyle(TypedDict, total=False):
    deploymentType: str
    deploymentOption: str


class CodeDeployBlueGreenDeploymentConfiguration(TypedDict, total=False):
    terminateBlueInstancesOnDeploymentSuccess: CodeDeployBlueInstanceTerminationOption
    deploymentReadyOption: CodeDeployDeploymentReadyOption
    greenFleetProvisioningOption: CodeDeployGreenFleetProvisioningOption


class CodeDeployBlueInstanceTerminationOption(TypedDict, total=False):
    action: str
    terminationWaitTimeInMinutes: int


class CodeDeployDeploymentReadyOption(TypedDict, total=False):
    actionOnTimeout: str
    waitTimeInMinutes: int


class CodeDeployGreenFleetProvisioningOption(TypedDict, total=False):
    action: str


class CodeDeployLoadBalancerInfo(TypedDict, total=False):
    elbInfoList: List[CodeDeployELBInfo]
    targetGroupInfoList: List[CodeDeployTargetGroupInfo]
    targetGroupPairInfoList: List[CodeDeployTargetGroupPairInfo]


class CodeDeployELBInfo(TypedDict, total=False):
    name: str


class CodeDeployTargetGroupInfo(TypedDict, total=False):
    name: str


class CodeDeployTargetGroupPairInfo(TypedDict, total=False):
    targetGroups: List[CodeDeployTargetGroupInfo]
    prodTrafficRoute: CodeDeployTrafficRoute
    testTrafficRoute: CodeDeployTrafficRoute


class CodeDeployTrafficRoute(TypedDict, total=False):
    listenerArns: List[str]


class CodeDeployLastDeploymentInfo(TypedDict, total=False):
    deploymentId: str
    status: str
    endTime: datetime.datetime
    createTime: datetime.datetime


class CodeDeployEC2TagSet(TypedDict, total=False):
    ec2TagSetList: List[List[CodeDeployEC2TagFilter]]


class CodeDeployOnPremisesTagSet(TypedDict, total=False):
    onPremisesTagSetList: List[List[CodeDeployTagFilter]]


class CodeDeployECSService(TypedDict, total=False):
    serviceName: str
    clusterName: str


class CodeDeployBatchGetDeploymentInstancesOutput(TypedDict, total=False):
    instancesSummary: List[CodeDeployInstanceSummary]
    errorMessage: str


class CodeDeployInstanceSummary(TypedDict, total=False):
    deploymentId: str
    instanceId: str
    status: str
    lastUpdatedAt: datetime.datetime
    lifecycleEvents: List[CodeDeployLifecycleEvent]
    instanceType: str


class CodeDeployLifecycleEvent(TypedDict, total=False):
    lifecycleEventName: str
    diagnostics: CodeDeployDiagnostics
    startTime: datetime.datetime
    endTime: datetime.datetime
    status: str


class CodeDeployDiagnostics(TypedDict, total=False):
    errorCode: str
    scriptName: str
    message: str
    logTail: str


class CodeDeployBatchGetDeploymentTargetsOutput(TypedDict, total=False):
    deploymentTargets: List[CodeDeployDeploymentTarget]


class CodeDeployDeploymentTarget(TypedDict, total=False):
    deploymentTargetType: str
    instanceTarget: CodeDeployInstanceTarget
    lambdaTarget: CodeDeployLambdaTarget
    ecsTarget: CodeDeployECSTarget


class CodeDeployInstanceTarget(TypedDict, total=False):
    deploymentId: str
    targetId: str
    targetArn: str
    status: str
    lastUpdatedAt: datetime.datetime
    lifecycleEvents: List[CodeDeployLifecycleEvent]
    instanceLabel: str


class CodeDeployLambdaTarget(TypedDict, total=False):
    deploymentId: str
    targetId: str
    targetArn: str
    status: str
    lastUpdatedAt: datetime.datetime
    lifecycleEvents: List[CodeDeployLifecycleEvent]


class CodeDeployECSTarget(TypedDict, total=False):
    deploymentId: str
    targetId: str
    targetArn: str
    lastUpdatedAt: datetime.datetime
    lifecycleEvents: List[CodeDeployLifecycleEvent]
    status: str
    taskSetsInfo: List[CodeDeployECSTaskSet]


class CodeDeployECSTaskSet(TypedDict, total=False):
    identifer: str
    desiredCount: int
    pendingCount: int
    runningCount: int
    status: str
    trafficWeight: float
    targetGroup: CodeDeployTargetGroupInfo
    taskSetLabel: str


class CodeDeployBatchGetDeploymentsOutput(TypedDict, total=False):
    deploymentsInfo: List[CodeDeployDeploymentInfo]


class CodeDeployDeploymentInfo(TypedDict, total=False):
    applicationName: str
    deploymentGroupName: str
    deploymentConfigName: str
    deploymentId: str
    previousRevision: CodeDeployRevisionLocation
    revision: CodeDeployRevisionLocation
    status: str
    errorInformation: CodeDeployErrorInformation
    createTime: datetime.datetime
    startTime: datetime.datetime
    completeTime: datetime.datetime
    deploymentOverview: CodeDeployDeploymentOverview
    description: str
    creator: str
    ignoreApplicationStopFailures: bool
    autoRollbackConfiguration: CodeDeployAutoRollbackConfiguration
    updateOutdatedInstancesOnly: bool
    rollbackInfo: CodeDeployRollbackInfo
    deploymentStyle: CodeDeployDeploymentStyle
    targetInstances: CodeDeployTargetInstances
    instanceTerminationWaitTimeStarted: bool
    blueGreenDeploymentConfiguration: CodeDeployBlueGreenDeploymentConfiguration
    loadBalancerInfo: CodeDeployLoadBalancerInfo
    additionalDeploymentStatusInfo: str
    fileExistsBehavior: str
    deploymentStatusMessages: List[str]
    computePlatform: str


class CodeDeployErrorInformation(TypedDict, total=False):
    code: str
    message: str


class CodeDeployDeploymentOverview(TypedDict, total=False):
    Pending: int
    InProgress: int
    Succeeded: int
    Failed: int
    Skipped: int
    Ready: int


class CodeDeployRollbackInfo(TypedDict, total=False):
    rollbackDeploymentId: str
    rollbackTriggeringDeploymentId: str
    rollbackMessage: str


class CodeDeployTargetInstances(TypedDict, total=False):
    tagFilters: List[CodeDeployEC2TagFilter]
    autoScalingGroups: List[str]
    ec2TagSet: CodeDeployEC2TagSet


class CodeDeployBatchGetOnPremisesInstancesOutput(TypedDict, total=False):
    instanceInfos: List[CodeDeployInstanceInfo]


class CodeDeployInstanceInfo(TypedDict, total=False):
    instanceName: str
    iamSessionArn: str
    iamUserArn: str
    instanceArn: str
    registerTime: datetime.datetime
    deregisterTime: datetime.datetime
    tags: List[CodeDeployTag]


class CodeDeployCreateApplicationOutput(TypedDict, total=False):
    applicationId: str


class CodeDeployCreateDeploymentOutput(TypedDict, total=False):
    deploymentId: str


class CodeDeployMinimumHealthyHosts(TypedDict, total=False):
    value: int
    type: str


class CodeDeployTrafficRoutingConfig(TypedDict, total=False):
    type: str
    timeBasedCanary: CodeDeployTimeBasedCanary
    timeBasedLinear: CodeDeployTimeBasedLinear


class CodeDeployTimeBasedCanary(TypedDict, total=False):
    canaryPercentage: int
    canaryInterval: int


class CodeDeployTimeBasedLinear(TypedDict, total=False):
    linearPercentage: int
    linearInterval: int


class CodeDeployCreateDeploymentConfigOutput(TypedDict, total=False):
    deploymentConfigId: str


class CodeDeployCreateDeploymentGroupOutput(TypedDict, total=False):
    deploymentGroupId: str


class CodeDeployDeleteDeploymentGroupOutput(TypedDict, total=False):
    hooksNotCleanedUp: List[CodeDeployAutoScalingGroup]


class CodeDeployDeleteGitHubAccountTokenOutput(TypedDict, total=False):
    tokenName: str


class CodeDeployGetApplicationOutput(TypedDict, total=False):
    application: CodeDeployApplicationInfo


class CodeDeployGetApplicationRevisionOutput(TypedDict, total=False):
    applicationName: str
    revision: CodeDeployRevisionLocation
    revisionInfo: CodeDeployGenericRevisionInfo


class CodeDeployGetDeploymentOutput(TypedDict, total=False):
    deploymentInfo: CodeDeployDeploymentInfo


class CodeDeployGetDeploymentConfigOutput(TypedDict, total=False):
    deploymentConfigInfo: CodeDeployDeploymentConfigInfo


class CodeDeployDeploymentConfigInfo(TypedDict, total=False):
    deploymentConfigId: str
    deploymentConfigName: str
    minimumHealthyHosts: CodeDeployMinimumHealthyHosts
    createTime: datetime.datetime
    computePlatform: str
    trafficRoutingConfig: CodeDeployTrafficRoutingConfig


class CodeDeployGetDeploymentGroupOutput(TypedDict, total=False):
    deploymentGroupInfo: CodeDeployDeploymentGroupInfo


class CodeDeployGetDeploymentInstanceOutput(TypedDict, total=False):
    instanceSummary: CodeDeployInstanceSummary


class CodeDeployGetDeploymentTargetOutput(TypedDict, total=False):
    deploymentTarget: CodeDeployDeploymentTarget


class CodeDeployGetOnPremisesInstanceOutput(TypedDict, total=False):
    instanceInfo: CodeDeployInstanceInfo


class CodeDeployListApplicationRevisionsOutput(TypedDict, total=False):
    revisions: List[CodeDeployRevisionLocation]
    nextToken: str


class CodeDeployListApplicationsOutput(TypedDict, total=False):
    applications: List[str]
    nextToken: str


class CodeDeployListDeploymentConfigsOutput(TypedDict, total=False):
    deploymentConfigsList: List[str]
    nextToken: str


class CodeDeployListDeploymentGroupsOutput(TypedDict, total=False):
    applicationName: str
    deploymentGroups: List[str]
    nextToken: str


class CodeDeployListDeploymentInstancesOutput(TypedDict, total=False):
    instancesList: List[str]
    nextToken: str


class CodeDeployListDeploymentTargetsOutput(TypedDict, total=False):
    targetIds: List[str]
    nextToken: str


class CodeDeployTimeRange(TypedDict, total=False):
    start: datetime.datetime
    end: datetime.datetime


class CodeDeployListDeploymentsOutput(TypedDict, total=False):
    deployments: List[str]
    nextToken: str


class CodeDeployListGitHubAccountTokenNamesOutput(TypedDict, total=False):
    tokenNameList: List[str]
    nextToken: str


class CodeDeployListOnPremisesInstancesOutput(TypedDict, total=False):
    instanceNames: List[str]
    nextToken: str


class CodeDeployPutLifecycleEventHookExecutionStatusOutput(TypedDict, total=False):
    lifecycleEventHookExecutionId: str


class CodeDeployStopDeploymentOutput(TypedDict, total=False):
    status: str
    statusMessage: str


class CodeDeployUpdateDeploymentGroupOutput(TypedDict, total=False):
    hooksNotCleanedUp: List[CodeDeployAutoScalingGroup]


class CodePipeline(BaseClient):
    def acknowledge_job(self, *,
        jobId: str,
        nonce: str
    ) -> CodePipelineAcknowledgeJobOutput: ...

    def acknowledge_third_party_job(self, *,
        jobId: str,
        nonce: str,
        clientToken: str
    ) -> CodePipelineAcknowledgeThirdPartyJobOutput: ...

    def create_custom_action_type(self, *,
        category: str,
        provider: str,
        version: str,
        inputArtifactDetails: CodePipelineArtifactDetails,
        outputArtifactDetails: CodePipelineArtifactDetails,
        settings: CodePipelineActionTypeSettings = ...,
        configurationProperties: List[CodePipelineActionConfigurationProperty] = ...,
        tags: List[CodePipelineTag] = ...
    ) -> CodePipelineCreateCustomActionTypeOutput: ...

    def create_pipeline(self, *,
        pipeline: CodePipelinePipelineDeclaration,
        tags: List[CodePipelineTag] = ...
    ) -> CodePipelineCreatePipelineOutput: ...

    def delete_custom_action_type(self, *,
        category: str,
        provider: str,
        version: str
    ): ...

    def delete_pipeline(self, *,
        name: str
    ): ...

    def delete_webhook(self, *,
        name: str
    ) -> CodePipelineDeleteWebhookOutput: ...

    def deregister_webhook_with_third_party(self, *,
        webhookName: str = ...
    ) -> CodePipelineDeregisterWebhookWithThirdPartyOutput: ...

    def disable_stage_transition(self, *,
        pipelineName: str,
        stageName: str,
        transitionType: str,
        reason: str
    ): ...

    def enable_stage_transition(self, *,
        pipelineName: str,
        stageName: str,
        transitionType: str
    ): ...

    def get_job_details(self, *,
        jobId: str
    ) -> CodePipelineGetJobDetailsOutput: ...

    def get_pipeline(self, *,
        name: str,
        version: int = ...
    ) -> CodePipelineGetPipelineOutput: ...

    def get_pipeline_execution(self, *,
        pipelineName: str,
        pipelineExecutionId: str
    ) -> CodePipelineGetPipelineExecutionOutput: ...

    def get_pipeline_state(self, *,
        name: str
    ) -> CodePipelineGetPipelineStateOutput: ...

    def get_third_party_job_details(self, *,
        jobId: str,
        clientToken: str
    ) -> CodePipelineGetThirdPartyJobDetailsOutput: ...

    def list_action_executions(self, *,
        pipelineName: str,
        filter: CodePipelineActionExecutionFilter = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> CodePipelineListActionExecutionsOutput: ...

    def list_action_types(self, *,
        actionOwnerFilter: str = ...,
        nextToken: str = ...
    ) -> CodePipelineListActionTypesOutput: ...

    def list_pipeline_executions(self, *,
        pipelineName: str,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> CodePipelineListPipelineExecutionsOutput: ...

    def list_pipelines(self, *,
        nextToken: str = ...
    ) -> CodePipelineListPipelinesOutput: ...

    def list_tags_for_resource(self, *,
        resourceArn: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> CodePipelineListTagsForResourceOutput: ...

    def list_webhooks(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CodePipelineListWebhooksOutput: ...

    def poll_for_jobs(self, *,
        actionTypeId: CodePipelineActionTypeId,
        maxBatchSize: int = ...,
        queryParam: Dict[str, str] = ...
    ) -> CodePipelinePollForJobsOutput: ...

    def poll_for_third_party_jobs(self, *,
        actionTypeId: CodePipelineActionTypeId,
        maxBatchSize: int = ...
    ) -> CodePipelinePollForThirdPartyJobsOutput: ...

    def put_action_revision(self, *,
        pipelineName: str,
        stageName: str,
        actionName: str,
        actionRevision: CodePipelineActionRevision
    ) -> CodePipelinePutActionRevisionOutput: ...

    def put_approval_result(self, *,
        pipelineName: str,
        stageName: str,
        actionName: str,
        result: CodePipelineApprovalResult,
        token: str
    ) -> CodePipelinePutApprovalResultOutput: ...

    def put_job_failure_result(self, *,
        jobId: str,
        failureDetails: CodePipelineFailureDetails
    ): ...

    def put_job_success_result(self, *,
        jobId: str,
        currentRevision: CodePipelineCurrentRevision = ...,
        continuationToken: str = ...,
        executionDetails: CodePipelineExecutionDetails = ...
    ): ...

    def put_third_party_job_failure_result(self, *,
        jobId: str,
        clientToken: str,
        failureDetails: CodePipelineFailureDetails
    ): ...

    def put_third_party_job_success_result(self, *,
        jobId: str,
        clientToken: str,
        currentRevision: CodePipelineCurrentRevision = ...,
        continuationToken: str = ...,
        executionDetails: CodePipelineExecutionDetails = ...
    ): ...

    def put_webhook(self, *,
        webhook: CodePipelineWebhookDefinition,
        tags: List[CodePipelineTag] = ...
    ) -> CodePipelinePutWebhookOutput: ...

    def register_webhook_with_third_party(self, *,
        webhookName: str = ...
    ) -> CodePipelineRegisterWebhookWithThirdPartyOutput: ...

    def retry_stage_execution(self, *,
        pipelineName: str,
        stageName: str,
        pipelineExecutionId: str,
        retryMode: str
    ) -> CodePipelineRetryStageExecutionOutput: ...

    def start_pipeline_execution(self, *,
        name: str,
        clientRequestToken: str = ...
    ) -> CodePipelineStartPipelineExecutionOutput: ...

    def tag_resource(self, *,
        resourceArn: str,
        tags: List[CodePipelineTag]
    ) -> CodePipelineTagResourceOutput: ...

    def untag_resource(self, *,
        resourceArn: str,
        tagKeys: List[str]
    ) -> CodePipelineUntagResourceOutput: ...

    def update_pipeline(self, *,
        pipeline: CodePipelinePipelineDeclaration
    ) -> CodePipelineUpdatePipelineOutput: ...


class CodePipelineAcknowledgeJobOutput(TypedDict, total=False):
    status: str


class CodePipelineAcknowledgeThirdPartyJobOutput(TypedDict, total=False):
    status: str


class CodePipelineActionTypeSettings(TypedDict, total=False):
    thirdPartyConfigurationUrl: str
    entityUrlTemplate: str
    executionUrlTemplate: str
    revisionUrlTemplate: str


class _CodePipelineActionConfigurationProperty(TypedDict):
    name: str
    required: bool
    key: bool
    secret: bool


class CodePipelineActionConfigurationProperty(_CodePipelineActionConfigurationProperty, total=False):
    queryable: bool
    description: str
    type: str


class CodePipelineArtifactDetails(TypedDict):
    minimumCount: int
    maximumCount: int


class CodePipelineTag(TypedDict):
    key: str
    value: str


class _CodePipelineCreateCustomActionTypeOutput(TypedDict):
    actionType: CodePipelineActionType


class CodePipelineCreateCustomActionTypeOutput(_CodePipelineCreateCustomActionTypeOutput, total=False):
    tags: List[CodePipelineTag]


class _CodePipelineActionType(TypedDict):
    id: CodePipelineActionTypeId
    inputArtifactDetails: CodePipelineArtifactDetails
    outputArtifactDetails: CodePipelineArtifactDetails


class CodePipelineActionType(_CodePipelineActionType, total=False):
    settings: CodePipelineActionTypeSettings
    actionConfigurationProperties: List[CodePipelineActionConfigurationProperty]


class CodePipelineActionTypeId(TypedDict):
    category: str
    owner: str
    provider: str
    version: str


class _CodePipelinePipelineDeclaration(TypedDict):
    name: str
    roleArn: str
    stages: List[CodePipelineStageDeclaration]


class CodePipelinePipelineDeclaration(_CodePipelinePipelineDeclaration, total=False):
    artifactStore: CodePipelineArtifactStore
    artifactStores: Dict[str, CodePipelineArtifactStore]
    version: int


class _CodePipelineArtifactStore(TypedDict):
    type: str
    location: str


class CodePipelineArtifactStore(_CodePipelineArtifactStore, total=False):
    encryptionKey: CodePipelineEncryptionKey


class CodePipelineEncryptionKey(TypedDict):
    id: str
    type: str


class _CodePipelineStageDeclaration(TypedDict):
    name: str
    actions: List[CodePipelineActionDeclaration]


class CodePipelineStageDeclaration(_CodePipelineStageDeclaration, total=False):
    blockers: List[CodePipelineBlockerDeclaration]


class CodePipelineBlockerDeclaration(TypedDict):
    name: str
    type: str


class _CodePipelineActionDeclaration(TypedDict):
    name: str
    actionTypeId: CodePipelineActionTypeId


class CodePipelineActionDeclaration(_CodePipelineActionDeclaration, total=False):
    runOrder: int
    configuration: Dict[str, str]
    outputArtifacts: List[CodePipelineOutputArtifact]
    inputArtifacts: List[CodePipelineInputArtifact]
    roleArn: str
    region: str


class CodePipelineOutputArtifact(TypedDict):
    name: str


class CodePipelineInputArtifact(TypedDict):
    name: str


class CodePipelineCreatePipelineOutput(TypedDict, total=False):
    pipeline: CodePipelinePipelineDeclaration
    tags: List[CodePipelineTag]


class CodePipelineDeleteWebhookOutput(TypedDict, total=False):
    pass


class CodePipelineDeregisterWebhookWithThirdPartyOutput(TypedDict, total=False):
    pass


class CodePipelineGetJobDetailsOutput(TypedDict, total=False):
    jobDetails: CodePipelineJobDetails


class CodePipelineJobDetails(TypedDict, total=False):
    id: str
    data: CodePipelineJobData
    accountId: str


class CodePipelineJobData(TypedDict, total=False):
    actionTypeId: CodePipelineActionTypeId
    actionConfiguration: CodePipelineActionConfiguration
    pipelineContext: CodePipelinePipelineContext
    inputArtifacts: List[CodePipelineArtifact]
    outputArtifacts: List[CodePipelineArtifact]
    artifactCredentials: CodePipelineAWSSessionCredentials
    continuationToken: str
    encryptionKey: CodePipelineEncryptionKey


class CodePipelineActionConfiguration(TypedDict, total=False):
    configuration: Dict[str, str]


class CodePipelinePipelineContext(TypedDict, total=False):
    pipelineName: str
    stage: CodePipelineStageContext
    action: CodePipelineActionContext
    pipelineArn: str
    pipelineExecutionId: str


class CodePipelineStageContext(TypedDict, total=False):
    name: str


class CodePipelineActionContext(TypedDict, total=False):
    name: str
    actionExecutionId: str


class CodePipelineArtifact(TypedDict, total=False):
    name: str
    revision: str
    location: CodePipelineArtifactLocation


class CodePipelineArtifactLocation(TypedDict, total=False):
    type: str
    s3Location: CodePipelineS3ArtifactLocation


class CodePipelineS3ArtifactLocation(TypedDict):
    bucketName: str
    objectKey: str


class CodePipelineAWSSessionCredentials(TypedDict):
    accessKeyId: str
    secretAccessKey: str
    sessionToken: str


class CodePipelineGetPipelineOutput(TypedDict, total=False):
    pipeline: CodePipelinePipelineDeclaration
    metadata: CodePipelinePipelineMetadata


class CodePipelinePipelineMetadata(TypedDict, total=False):
    pipelineArn: str
    created: datetime.datetime
    updated: datetime.datetime


class CodePipelineGetPipelineExecutionOutput(TypedDict, total=False):
    pipelineExecution: CodePipelinePipelineExecution


class CodePipelinePipelineExecution(TypedDict, total=False):
    pipelineName: str
    pipelineVersion: int
    pipelineExecutionId: str
    status: str
    artifactRevisions: List[CodePipelineArtifactRevision]


class CodePipelineArtifactRevision(TypedDict, total=False):
    name: str
    revisionId: str
    revisionChangeIdentifier: str
    revisionSummary: str
    created: datetime.datetime
    revisionUrl: str


class CodePipelineGetPipelineStateOutput(TypedDict, total=False):
    pipelineName: str
    pipelineVersion: int
    stageStates: List[CodePipelineStageState]
    created: datetime.datetime
    updated: datetime.datetime


class CodePipelineStageState(TypedDict, total=False):
    stageName: str
    inboundTransitionState: CodePipelineTransitionState
    actionStates: List[CodePipelineActionState]
    latestExecution: CodePipelineStageExecution


class CodePipelineTransitionState(TypedDict, total=False):
    enabled: bool
    lastChangedBy: str
    lastChangedAt: datetime.datetime
    disabledReason: str


class CodePipelineActionState(TypedDict, total=False):
    actionName: str
    currentRevision: CodePipelineActionRevision
    latestExecution: CodePipelineActionExecution
    entityUrl: str
    revisionUrl: str


class CodePipelineActionRevision(TypedDict):
    revisionId: str
    revisionChangeId: str
    created: datetime.datetime


class CodePipelineActionExecution(TypedDict, total=False):
    status: str
    summary: str
    lastStatusChange: datetime.datetime
    token: str
    lastUpdatedBy: str
    externalExecutionId: str
    externalExecutionUrl: str
    percentComplete: int
    errorDetails: CodePipelineErrorDetails


class CodePipelineErrorDetails(TypedDict, total=False):
    code: str
    message: str


class CodePipelineStageExecution(TypedDict):
    pipelineExecutionId: str
    status: str


class CodePipelineGetThirdPartyJobDetailsOutput(TypedDict, total=False):
    jobDetails: CodePipelineThirdPartyJobDetails


class CodePipelineThirdPartyJobDetails(TypedDict, total=False):
    id: str
    data: CodePipelineThirdPartyJobData
    nonce: str


class CodePipelineThirdPartyJobData(TypedDict, total=False):
    actionTypeId: CodePipelineActionTypeId
    actionConfiguration: CodePipelineActionConfiguration
    pipelineContext: CodePipelinePipelineContext
    inputArtifacts: List[CodePipelineArtifact]
    outputArtifacts: List[CodePipelineArtifact]
    artifactCredentials: CodePipelineAWSSessionCredentials
    continuationToken: str
    encryptionKey: CodePipelineEncryptionKey


class CodePipelineActionExecutionFilter(TypedDict, total=False):
    pipelineExecutionId: str


class CodePipelineListActionExecutionsOutput(TypedDict, total=False):
    actionExecutionDetails: List[CodePipelineActionExecutionDetail]
    nextToken: str


class CodePipelineActionExecutionDetail(TypedDict, total=False):
    pipelineExecutionId: str
    actionExecutionId: str
    pipelineVersion: int
    stageName: str
    actionName: str
    startTime: datetime.datetime
    lastUpdateTime: datetime.datetime
    status: str
    input: CodePipelineActionExecutionInput
    output: CodePipelineActionExecutionOutput


class CodePipelineActionExecutionInput(TypedDict, total=False):
    actionTypeId: CodePipelineActionTypeId
    configuration: Dict[str, str]
    roleArn: str
    region: str
    inputArtifacts: List[CodePipelineArtifactDetail]


class CodePipelineArtifactDetail(TypedDict, total=False):
    name: str
    s3location: CodePipelineS3Location


class CodePipelineS3Location(TypedDict, total=False):
    bucket: str
    key: str


class CodePipelineActionExecutionOutput(TypedDict, total=False):
    outputArtifacts: List[CodePipelineArtifactDetail]
    executionResult: CodePipelineActionExecutionResult


class CodePipelineActionExecutionResult(TypedDict, total=False):
    externalExecutionId: str
    externalExecutionSummary: str
    externalExecutionUrl: str


class _CodePipelineListActionTypesOutput(TypedDict):
    actionTypes: List[CodePipelineActionType]


class CodePipelineListActionTypesOutput(_CodePipelineListActionTypesOutput, total=False):
    nextToken: str


class CodePipelineListPipelineExecutionsOutput(TypedDict, total=False):
    pipelineExecutionSummaries: List[CodePipelinePipelineExecutionSummary]
    nextToken: str


class CodePipelinePipelineExecutionSummary(TypedDict, total=False):
    pipelineExecutionId: str
    status: str
    startTime: datetime.datetime
    lastUpdateTime: datetime.datetime
    sourceRevisions: List[CodePipelineSourceRevision]


class _CodePipelineSourceRevision(TypedDict):
    actionName: str


class CodePipelineSourceRevision(_CodePipelineSourceRevision, total=False):
    revisionId: str
    revisionSummary: str
    revisionUrl: str


class CodePipelineListPipelinesOutput(TypedDict, total=False):
    pipelines: List[CodePipelinePipelineSummary]
    nextToken: str


class CodePipelinePipelineSummary(TypedDict, total=False):
    name: str
    version: int
    created: datetime.datetime
    updated: datetime.datetime


class CodePipelineListTagsForResourceOutput(TypedDict, total=False):
    tags: List[CodePipelineTag]
    nextToken: str


class CodePipelineListWebhooksOutput(TypedDict, total=False):
    webhooks: List[CodePipelineListWebhookItem]
    NextToken: str


class _CodePipelineListWebhookItem(TypedDict):
    definition: CodePipelineWebhookDefinition
    url: str


class CodePipelineListWebhookItem(_CodePipelineListWebhookItem, total=False):
    errorMessage: str
    errorCode: str
    lastTriggered: datetime.datetime
    arn: str
    tags: List[CodePipelineTag]


class CodePipelineWebhookDefinition(TypedDict):
    name: str
    targetPipeline: str
    targetAction: str
    filters: List[CodePipelineWebhookFilterRule]
    authentication: str
    authenticationConfiguration: CodePipelineWebhookAuthConfiguration


class _CodePipelineWebhookFilterRule(TypedDict):
    jsonPath: str


class CodePipelineWebhookFilterRule(_CodePipelineWebhookFilterRule, total=False):
    matchEquals: str


class CodePipelineWebhookAuthConfiguration(TypedDict, total=False):
    AllowedIPRange: str
    SecretToken: str


class CodePipelinePollForJobsOutput(TypedDict, total=False):
    jobs: List[CodePipelineJob]


class CodePipelineJob(TypedDict, total=False):
    id: str
    data: CodePipelineJobData
    nonce: str
    accountId: str


class CodePipelinePollForThirdPartyJobsOutput(TypedDict, total=False):
    jobs: List[CodePipelineThirdPartyJob]


class CodePipelineThirdPartyJob(TypedDict, total=False):
    clientId: str
    jobId: str


class CodePipelinePutActionRevisionOutput(TypedDict, total=False):
    newRevision: bool
    pipelineExecutionId: str


class CodePipelineApprovalResult(TypedDict):
    summary: str
    status: str


class CodePipelinePutApprovalResultOutput(TypedDict, total=False):
    approvedAt: datetime.datetime


class _CodePipelineFailureDetails(TypedDict):
    type: str
    message: str


class CodePipelineFailureDetails(_CodePipelineFailureDetails, total=False):
    externalExecutionId: str


class _CodePipelineCurrentRevision(TypedDict):
    revision: str
    changeIdentifier: str


class CodePipelineCurrentRevision(_CodePipelineCurrentRevision, total=False):
    created: datetime.datetime
    revisionSummary: str


class CodePipelineExecutionDetails(TypedDict, total=False):
    summary: str
    externalExecutionId: str
    percentComplete: int


class CodePipelinePutWebhookOutput(TypedDict, total=False):
    webhook: CodePipelineListWebhookItem


class CodePipelineRegisterWebhookWithThirdPartyOutput(TypedDict, total=False):
    pass


class CodePipelineRetryStageExecutionOutput(TypedDict, total=False):
    pipelineExecutionId: str


class CodePipelineStartPipelineExecutionOutput(TypedDict, total=False):
    pipelineExecutionId: str


class CodePipelineTagResourceOutput(TypedDict, total=False):
    pass


class CodePipelineUntagResourceOutput(TypedDict, total=False):
    pass


class CodePipelineUpdatePipelineOutput(TypedDict, total=False):
    pipeline: CodePipelinePipelineDeclaration


class CodeStar(BaseClient):
    def associate_team_member(self, *,
        projectId: str,
        userArn: str,
        projectRole: str,
        clientRequestToken: str = ...,
        remoteAccessAllowed: bool = ...
    ) -> CodeStarAssociateTeamMemberResult: ...

    def create_project(self, *,
        name: str,
        id: str,
        description: str = ...,
        clientRequestToken: str = ...,
        sourceCode: List[CodeStarCode] = ...,
        toolchain: CodeStarToolchain = ...,
        tags: Dict[str, str] = ...
    ) -> CodeStarCreateProjectResult: ...

    def create_user_profile(self, *,
        userArn: str,
        displayName: str,
        emailAddress: str,
        sshPublicKey: str = ...
    ) -> CodeStarCreateUserProfileResult: ...

    def delete_project(self, *,
        id: str,
        clientRequestToken: str = ...,
        deleteStack: bool = ...
    ) -> CodeStarDeleteProjectResult: ...

    def delete_user_profile(self, *,
        userArn: str
    ) -> CodeStarDeleteUserProfileResult: ...

    def describe_project(self, *,
        id: str
    ) -> CodeStarDescribeProjectResult: ...

    def describe_user_profile(self, *,
        userArn: str
    ) -> CodeStarDescribeUserProfileResult: ...

    def disassociate_team_member(self, *,
        projectId: str,
        userArn: str
    ) -> CodeStarDisassociateTeamMemberResult: ...

    def list_projects(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> CodeStarListProjectsResult: ...

    def list_resources(self, *,
        projectId: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> CodeStarListResourcesResult: ...

    def list_tags_for_project(self, *,
        id: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> CodeStarListTagsForProjectResult: ...

    def list_team_members(self, *,
        projectId: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> CodeStarListTeamMembersResult: ...

    def list_user_profiles(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> CodeStarListUserProfilesResult: ...

    def tag_project(self, *,
        id: str,
        tags: Dict[str, str]
    ) -> CodeStarTagProjectResult: ...

    def untag_project(self, *,
        id: str,
        tags: List[str]
    ) -> CodeStarUntagProjectResult: ...

    def update_project(self, *,
        id: str,
        name: str = ...,
        description: str = ...
    ) -> CodeStarUpdateProjectResult: ...

    def update_team_member(self, *,
        projectId: str,
        userArn: str,
        projectRole: str = ...,
        remoteAccessAllowed: bool = ...
    ) -> CodeStarUpdateTeamMemberResult: ...

    def update_user_profile(self, *,
        userArn: str,
        displayName: str = ...,
        emailAddress: str = ...,
        sshPublicKey: str = ...
    ) -> CodeStarUpdateUserProfileResult: ...


class CodeStarAssociateTeamMemberResult(TypedDict, total=False):
    clientRequestToken: str


class CodeStarCode(TypedDict):
    source: CodeStarCodeSource
    destination: CodeStarCodeDestination


class CodeStarCodeSource(TypedDict):
    s3: CodeStarS3Location


class CodeStarS3Location(TypedDict, total=False):
    bucketName: str
    bucketKey: str


class CodeStarCodeDestination(TypedDict, total=False):
    codeCommit: CodeStarCodeCommitCodeDestination
    gitHub: CodeStarGitHubCodeDestination


class CodeStarCodeCommitCodeDestination(TypedDict):
    name: str


class _CodeStarGitHubCodeDestination(TypedDict):
    name: str
    type: str
    owner: str
    privateRepository: bool
    issuesEnabled: bool
    token: str


class CodeStarGitHubCodeDestination(_CodeStarGitHubCodeDestination, total=False):
    description: str


class _CodeStarToolchain(TypedDict):
    source: CodeStarToolchainSource


class CodeStarToolchain(_CodeStarToolchain, total=False):
    roleArn: str
    stackParameters: Dict[str, str]


class CodeStarToolchainSource(TypedDict):
    s3: CodeStarS3Location


class _CodeStarCreateProjectResult(TypedDict):
    id: str
    arn: str


class CodeStarCreateProjectResult(_CodeStarCreateProjectResult, total=False):
    clientRequestToken: str
    projectTemplateId: str


class _CodeStarCreateUserProfileResult(TypedDict):
    userArn: str


class CodeStarCreateUserProfileResult(_CodeStarCreateUserProfileResult, total=False):
    displayName: str
    emailAddress: str
    sshPublicKey: str
    createdTimestamp: datetime.datetime
    lastModifiedTimestamp: datetime.datetime


class CodeStarDeleteProjectResult(TypedDict, total=False):
    stackId: str
    projectArn: str


class CodeStarDeleteUserProfileResult(TypedDict):
    userArn: str


class CodeStarDescribeProjectResult(TypedDict, total=False):
    name: str
    id: str
    arn: str
    description: str
    clientRequestToken: str
    createdTimeStamp: datetime.datetime
    stackId: str
    projectTemplateId: str
    status: CodeStarProjectStatus


class _CodeStarProjectStatus(TypedDict):
    state: str


class CodeStarProjectStatus(_CodeStarProjectStatus, total=False):
    reason: str


class _CodeStarDescribeUserProfileResult(TypedDict):
    userArn: str
    createdTimestamp: datetime.datetime
    lastModifiedTimestamp: datetime.datetime


class CodeStarDescribeUserProfileResult(_CodeStarDescribeUserProfileResult, total=False):
    displayName: str
    emailAddress: str
    sshPublicKey: str


class CodeStarDisassociateTeamMemberResult(TypedDict, total=False):
    pass


class _CodeStarListProjectsResult(TypedDict):
    projects: List[CodeStarProjectSummary]


class CodeStarListProjectsResult(_CodeStarListProjectsResult, total=False):
    nextToken: str


class CodeStarProjectSummary(TypedDict, total=False):
    projectId: str
    projectArn: str


class CodeStarListResourcesResult(TypedDict, total=False):
    resources: List[CodeStarResource]
    nextToken: str


class CodeStarResource(TypedDict):
    id: str


class CodeStarListTagsForProjectResult(TypedDict, total=False):
    tags: Dict[str, str]
    nextToken: str


class _CodeStarListTeamMembersResult(TypedDict):
    teamMembers: List[CodeStarTeamMember]


class CodeStarListTeamMembersResult(_CodeStarListTeamMembersResult, total=False):
    nextToken: str


class _CodeStarTeamMember(TypedDict):
    userArn: str
    projectRole: str


class CodeStarTeamMember(_CodeStarTeamMember, total=False):
    remoteAccessAllowed: bool


class _CodeStarListUserProfilesResult(TypedDict):
    userProfiles: List[CodeStarUserProfileSummary]


class CodeStarListUserProfilesResult(_CodeStarListUserProfilesResult, total=False):
    nextToken: str


class CodeStarUserProfileSummary(TypedDict, total=False):
    userArn: str
    displayName: str
    emailAddress: str
    sshPublicKey: str


class CodeStarTagProjectResult(TypedDict, total=False):
    tags: Dict[str, str]


class CodeStarUntagProjectResult(TypedDict, total=False):
    pass


class CodeStarUpdateProjectResult(TypedDict, total=False):
    pass


class CodeStarUpdateTeamMemberResult(TypedDict, total=False):
    userArn: str
    projectRole: str
    remoteAccessAllowed: bool


class _CodeStarUpdateUserProfileResult(TypedDict):
    userArn: str


class CodeStarUpdateUserProfileResult(_CodeStarUpdateUserProfileResult, total=False):
    displayName: str
    emailAddress: str
    sshPublicKey: str
    createdTimestamp: datetime.datetime
    lastModifiedTimestamp: datetime.datetime


class CognitoIdentity(BaseClient):
    def create_identity_pool(self, *,
        IdentityPoolName: str,
        AllowUnauthenticatedIdentities: bool,
        SupportedLoginProviders: Dict[str, str] = ...,
        DeveloperProviderName: str = ...,
        OpenIdConnectProviderARNs: List[str] = ...,
        CognitoIdentityProviders: List[CognitoIdentityCognitoIdentityProvider] = ...,
        SamlProviderARNs: List[str] = ...,
        IdentityPoolTags: Dict[str, str] = ...
    ) -> CognitoIdentityIdentityPool: ...

    def delete_identities(self, *,
        IdentityIdsToDelete: List[str]
    ) -> CognitoIdentityDeleteIdentitiesResponse: ...

    def delete_identity_pool(self, *,
        IdentityPoolId: str
    ): ...

    def describe_identity(self, *,
        IdentityId: str
    ) -> CognitoIdentityIdentityDescription: ...

    def describe_identity_pool(self, *,
        IdentityPoolId: str
    ) -> CognitoIdentityIdentityPool: ...

    def get_credentials_for_identity(self, *,
        IdentityId: str,
        Logins: Dict[str, str] = ...,
        CustomRoleArn: str = ...
    ) -> CognitoIdentityGetCredentialsForIdentityResponse: ...

    def get_id(self, *,
        IdentityPoolId: str,
        AccountId: str = ...,
        Logins: Dict[str, str] = ...
    ) -> CognitoIdentityGetIdResponse: ...

    def get_identity_pool_roles(self, *,
        IdentityPoolId: str
    ) -> CognitoIdentityGetIdentityPoolRolesResponse: ...

    def get_open_id_token(self, *,
        IdentityId: str,
        Logins: Dict[str, str] = ...
    ) -> CognitoIdentityGetOpenIdTokenResponse: ...

    def get_open_id_token_for_developer_identity(self, *,
        IdentityPoolId: str,
        Logins: Dict[str, str],
        IdentityId: str = ...,
        TokenDuration: int = ...
    ) -> CognitoIdentityGetOpenIdTokenForDeveloperIdentityResponse: ...

    def list_identities(self, *,
        IdentityPoolId: str,
        MaxResults: int,
        NextToken: str = ...,
        HideDisabled: bool = ...
    ) -> CognitoIdentityListIdentitiesResponse: ...

    def list_identity_pools(self, *,
        MaxResults: int,
        NextToken: str = ...
    ) -> CognitoIdentityListIdentityPoolsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> CognitoIdentityListTagsForResourceResponse: ...

    def lookup_developer_identity(self, *,
        IdentityPoolId: str,
        IdentityId: str = ...,
        DeveloperUserIdentifier: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> CognitoIdentityLookupDeveloperIdentityResponse: ...

    def merge_developer_identities(self, *,
        SourceUserIdentifier: str,
        DestinationUserIdentifier: str,
        DeveloperProviderName: str,
        IdentityPoolId: str
    ) -> CognitoIdentityMergeDeveloperIdentitiesResponse: ...

    def set_identity_pool_roles(self, *,
        IdentityPoolId: str,
        Roles: Dict[str, str],
        RoleMappings: Dict[str, CognitoIdentityRoleMapping] = ...
    ): ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: Dict[str, str] = ...
    ) -> CognitoIdentityTagResourceResponse: ...

    def unlink_developer_identity(self, *,
        IdentityId: str,
        IdentityPoolId: str,
        DeveloperProviderName: str,
        DeveloperUserIdentifier: str
    ): ...

    def unlink_identity(self, *,
        IdentityId: str,
        Logins: Dict[str, str],
        LoginsToRemove: List[str]
    ): ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str] = ...
    ) -> CognitoIdentityUntagResourceResponse: ...

    def update_identity_pool(self, *,
        IdentityPoolId: str,
        IdentityPoolName: str,
        AllowUnauthenticatedIdentities: bool,
        SupportedLoginProviders: Dict[str, str] = ...,
        DeveloperProviderName: str = ...,
        OpenIdConnectProviderARNs: List[str] = ...,
        CognitoIdentityProviders: List[CognitoIdentityCognitoIdentityProvider] = ...,
        SamlProviderARNs: List[str] = ...,
        IdentityPoolTags: Dict[str, str] = ...
    ) -> CognitoIdentityIdentityPool: ...


class CognitoIdentityCognitoIdentityProvider(TypedDict, total=False):
    ProviderName: str
    ClientId: str
    ServerSideTokenCheck: bool


class _CognitoIdentityIdentityPool(TypedDict):
    IdentityPoolId: str
    IdentityPoolName: str
    AllowUnauthenticatedIdentities: bool


class CognitoIdentityIdentityPool(_CognitoIdentityIdentityPool, total=False):
    SupportedLoginProviders: Dict[str, str]
    DeveloperProviderName: str
    OpenIdConnectProviderARNs: List[str]
    CognitoIdentityProviders: List[CognitoIdentityCognitoIdentityProvider]
    SamlProviderARNs: List[str]
    IdentityPoolTags: Dict[str, str]


class CognitoIdentityDeleteIdentitiesResponse(TypedDict, total=False):
    UnprocessedIdentityIds: List[CognitoIdentityUnprocessedIdentityId]


class CognitoIdentityUnprocessedIdentityId(TypedDict, total=False):
    IdentityId: str
    ErrorCode: str


class CognitoIdentityIdentityDescription(TypedDict, total=False):
    IdentityId: str
    Logins: List[str]
    CreationDate: datetime.datetime
    LastModifiedDate: datetime.datetime


class CognitoIdentityGetCredentialsForIdentityResponse(TypedDict, total=False):
    IdentityId: str
    Credentials: CognitoIdentityCredentials


class CognitoIdentityCredentials(TypedDict, total=False):
    AccessKeyId: str
    SecretKey: str
    SessionToken: str
    Expiration: datetime.datetime


class CognitoIdentityGetIdResponse(TypedDict, total=False):
    IdentityId: str


class CognitoIdentityGetIdentityPoolRolesResponse(TypedDict, total=False):
    IdentityPoolId: str
    Roles: Dict[str, str]
    RoleMappings: Dict[str, CognitoIdentityRoleMapping]


class _CognitoIdentityRoleMapping(TypedDict):
    Type: str


class CognitoIdentityRoleMapping(_CognitoIdentityRoleMapping, total=False):
    AmbiguousRoleResolution: str
    RulesConfiguration: CognitoIdentityRulesConfigurationType


class CognitoIdentityRulesConfigurationType(TypedDict):
    Rules: List[CognitoIdentityMappingRule]


class CognitoIdentityMappingRule(TypedDict):
    Claim: str
    MatchType: str
    Value: str
    RoleARN: str


class CognitoIdentityGetOpenIdTokenResponse(TypedDict, total=False):
    IdentityId: str
    Token: str


class CognitoIdentityGetOpenIdTokenForDeveloperIdentityResponse(TypedDict, total=False):
    IdentityId: str
    Token: str


class CognitoIdentityListIdentitiesResponse(TypedDict, total=False):
    IdentityPoolId: str
    Identities: List[CognitoIdentityIdentityDescription]
    NextToken: str


class CognitoIdentityListIdentityPoolsResponse(TypedDict, total=False):
    IdentityPools: List[CognitoIdentityIdentityPoolShortDescription]
    NextToken: str


class CognitoIdentityIdentityPoolShortDescription(TypedDict, total=False):
    IdentityPoolId: str
    IdentityPoolName: str


class CognitoIdentityListTagsForResourceResponse(TypedDict, total=False):
    Tags: Dict[str, str]


class CognitoIdentityLookupDeveloperIdentityResponse(TypedDict, total=False):
    IdentityId: str
    DeveloperUserIdentifierList: List[str]
    NextToken: str


class CognitoIdentityMergeDeveloperIdentitiesResponse(TypedDict, total=False):
    IdentityId: str


class CognitoIdentityTagResourceResponse(TypedDict, total=False):
    pass


class CognitoIdentityUntagResourceResponse(TypedDict, total=False):
    pass


class CognitoIdentityProvider(BaseClient):
    def add_custom_attributes(self, *,
        UserPoolId: str,
        CustomAttributes: List[CognitoIdentityProviderSchemaAttributeType]
    ) -> CognitoIdentityProviderAddCustomAttributesResponse: ...

    def admin_add_user_to_group(self, *,
        UserPoolId: str,
        Username: str,
        GroupName: str
    ): ...

    def admin_confirm_sign_up(self, *,
        UserPoolId: str,
        Username: str
    ) -> CognitoIdentityProviderAdminConfirmSignUpResponse: ...

    def admin_create_user(self, *,
        UserPoolId: str,
        Username: str,
        UserAttributes: List[CognitoIdentityProviderAttributeType] = ...,
        ValidationData: List[CognitoIdentityProviderAttributeType] = ...,
        TemporaryPassword: str = ...,
        ForceAliasCreation: bool = ...,
        MessageAction: str = ...,
        DesiredDeliveryMediums: List[str] = ...
    ) -> CognitoIdentityProviderAdminCreateUserResponse: ...

    def admin_delete_user(self, *,
        UserPoolId: str,
        Username: str
    ): ...

    def admin_delete_user_attributes(self, *,
        UserPoolId: str,
        Username: str,
        UserAttributeNames: List[str]
    ) -> CognitoIdentityProviderAdminDeleteUserAttributesResponse: ...

    def admin_disable_provider_for_user(self, *,
        UserPoolId: str,
        User: CognitoIdentityProviderProviderUserIdentifierType
    ) -> CognitoIdentityProviderAdminDisableProviderForUserResponse: ...

    def admin_disable_user(self, *,
        UserPoolId: str,
        Username: str
    ) -> CognitoIdentityProviderAdminDisableUserResponse: ...

    def admin_enable_user(self, *,
        UserPoolId: str,
        Username: str
    ) -> CognitoIdentityProviderAdminEnableUserResponse: ...

    def admin_forget_device(self, *,
        UserPoolId: str,
        Username: str,
        DeviceKey: str
    ): ...

    def admin_get_device(self, *,
        DeviceKey: str,
        UserPoolId: str,
        Username: str
    ) -> CognitoIdentityProviderAdminGetDeviceResponse: ...

    def admin_get_user(self, *,
        UserPoolId: str,
        Username: str
    ) -> CognitoIdentityProviderAdminGetUserResponse: ...

    def admin_initiate_auth(self, *,
        UserPoolId: str,
        ClientId: str,
        AuthFlow: str,
        AuthParameters: Dict[str, str] = ...,
        ClientMetadata: Dict[str, str] = ...,
        AnalyticsMetadata: CognitoIdentityProviderAnalyticsMetadataType = ...,
        ContextData: CognitoIdentityProviderContextDataType = ...
    ) -> CognitoIdentityProviderAdminInitiateAuthResponse: ...

    def admin_link_provider_for_user(self, *,
        UserPoolId: str,
        DestinationUser: CognitoIdentityProviderProviderUserIdentifierType,
        SourceUser: CognitoIdentityProviderProviderUserIdentifierType
    ) -> CognitoIdentityProviderAdminLinkProviderForUserResponse: ...

    def admin_list_devices(self, *,
        UserPoolId: str,
        Username: str,
        Limit: int = ...,
        PaginationToken: str = ...
    ) -> CognitoIdentityProviderAdminListDevicesResponse: ...

    def admin_list_groups_for_user(self, *,
        Username: str,
        UserPoolId: str,
        Limit: int = ...,
        NextToken: str = ...
    ) -> CognitoIdentityProviderAdminListGroupsForUserResponse: ...

    def admin_list_user_auth_events(self, *,
        UserPoolId: str,
        Username: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> CognitoIdentityProviderAdminListUserAuthEventsResponse: ...

    def admin_remove_user_from_group(self, *,
        UserPoolId: str,
        Username: str,
        GroupName: str
    ): ...

    def admin_reset_user_password(self, *,
        UserPoolId: str,
        Username: str
    ) -> CognitoIdentityProviderAdminResetUserPasswordResponse: ...

    def admin_respond_to_auth_challenge(self, *,
        UserPoolId: str,
        ClientId: str,
        ChallengeName: str,
        ChallengeResponses: Dict[str, str] = ...,
        Session: str = ...,
        AnalyticsMetadata: CognitoIdentityProviderAnalyticsMetadataType = ...,
        ContextData: CognitoIdentityProviderContextDataType = ...
    ) -> CognitoIdentityProviderAdminRespondToAuthChallengeResponse: ...

    def admin_set_user_mfa_preference(self, *,
        Username: str,
        UserPoolId: str,
        SMSMfaSettings: CognitoIdentityProviderSMSMfaSettingsType = ...,
        SoftwareTokenMfaSettings: CognitoIdentityProviderSoftwareTokenMfaSettingsType = ...
    ) -> CognitoIdentityProviderAdminSetUserMFAPreferenceResponse: ...

    def admin_set_user_password(self, *,
        UserPoolId: str,
        Username: str,
        Password: str,
        Permanent: bool = ...
    ) -> CognitoIdentityProviderAdminSetUserPasswordResponse: ...

    def admin_set_user_settings(self, *,
        UserPoolId: str,
        Username: str,
        MFAOptions: List[CognitoIdentityProviderMFAOptionType]
    ) -> CognitoIdentityProviderAdminSetUserSettingsResponse: ...

    def admin_update_auth_event_feedback(self, *,
        UserPoolId: str,
        Username: str,
        EventId: str,
        FeedbackValue: str
    ) -> CognitoIdentityProviderAdminUpdateAuthEventFeedbackResponse: ...

    def admin_update_device_status(self, *,
        UserPoolId: str,
        Username: str,
        DeviceKey: str,
        DeviceRememberedStatus: str = ...
    ) -> CognitoIdentityProviderAdminUpdateDeviceStatusResponse: ...

    def admin_update_user_attributes(self, *,
        UserPoolId: str,
        Username: str,
        UserAttributes: List[CognitoIdentityProviderAttributeType]
    ) -> CognitoIdentityProviderAdminUpdateUserAttributesResponse: ...

    def admin_user_global_sign_out(self, *,
        UserPoolId: str,
        Username: str
    ) -> CognitoIdentityProviderAdminUserGlobalSignOutResponse: ...

    def associate_software_token(self, *,
        AccessToken: str = ...,
        Session: str = ...
    ) -> CognitoIdentityProviderAssociateSoftwareTokenResponse: ...

    def change_password(self, *,
        PreviousPassword: str,
        ProposedPassword: str,
        AccessToken: str
    ) -> CognitoIdentityProviderChangePasswordResponse: ...

    def confirm_device(self, *,
        AccessToken: str,
        DeviceKey: str,
        DeviceSecretVerifierConfig: CognitoIdentityProviderDeviceSecretVerifierConfigType = ...,
        DeviceName: str = ...
    ) -> CognitoIdentityProviderConfirmDeviceResponse: ...

    def confirm_forgot_password(self, *,
        ClientId: str,
        Username: str,
        ConfirmationCode: str,
        Password: str,
        SecretHash: str = ...,
        AnalyticsMetadata: CognitoIdentityProviderAnalyticsMetadataType = ...,
        UserContextData: CognitoIdentityProviderUserContextDataType = ...
    ) -> CognitoIdentityProviderConfirmForgotPasswordResponse: ...

    def confirm_sign_up(self, *,
        ClientId: str,
        Username: str,
        ConfirmationCode: str,
        SecretHash: str = ...,
        ForceAliasCreation: bool = ...,
        AnalyticsMetadata: CognitoIdentityProviderAnalyticsMetadataType = ...,
        UserContextData: CognitoIdentityProviderUserContextDataType = ...
    ) -> CognitoIdentityProviderConfirmSignUpResponse: ...

    def create_group(self, *,
        GroupName: str,
        UserPoolId: str,
        Description: str = ...,
        RoleArn: str = ...,
        Precedence: int = ...
    ) -> CognitoIdentityProviderCreateGroupResponse: ...

    def create_identity_provider(self, *,
        UserPoolId: str,
        ProviderName: str,
        ProviderType: str,
        ProviderDetails: Dict[str, str],
        AttributeMapping: Dict[str, str] = ...,
        IdpIdentifiers: List[str] = ...
    ) -> CognitoIdentityProviderCreateIdentityProviderResponse: ...

    def create_resource_server(self, *,
        UserPoolId: str,
        Identifier: str,
        Name: str,
        Scopes: List[CognitoIdentityProviderResourceServerScopeType] = ...
    ) -> CognitoIdentityProviderCreateResourceServerResponse: ...

    def create_user_import_job(self, *,
        JobName: str,
        UserPoolId: str,
        CloudWatchLogsRoleArn: str
    ) -> CognitoIdentityProviderCreateUserImportJobResponse: ...

    def create_user_pool(self, *,
        PoolName: str,
        Policies: CognitoIdentityProviderUserPoolPolicyType = ...,
        LambdaConfig: CognitoIdentityProviderLambdaConfigType = ...,
        AutoVerifiedAttributes: List[str] = ...,
        AliasAttributes: List[str] = ...,
        UsernameAttributes: List[str] = ...,
        SmsVerificationMessage: str = ...,
        EmailVerificationMessage: str = ...,
        EmailVerificationSubject: str = ...,
        VerificationMessageTemplate: CognitoIdentityProviderVerificationMessageTemplateType = ...,
        SmsAuthenticationMessage: str = ...,
        MfaConfiguration: str = ...,
        DeviceConfiguration: CognitoIdentityProviderDeviceConfigurationType = ...,
        EmailConfiguration: CognitoIdentityProviderEmailConfigurationType = ...,
        SmsConfiguration: CognitoIdentityProviderSmsConfigurationType = ...,
        UserPoolTags: Dict[str, str] = ...,
        AdminCreateUserConfig: CognitoIdentityProviderAdminCreateUserConfigType = ...,
        Schema: List[CognitoIdentityProviderSchemaAttributeType] = ...,
        UserPoolAddOns: CognitoIdentityProviderUserPoolAddOnsType = ...
    ) -> CognitoIdentityProviderCreateUserPoolResponse: ...

    def create_user_pool_client(self, *,
        UserPoolId: str,
        ClientName: str,
        GenerateSecret: bool = ...,
        RefreshTokenValidity: int = ...,
        ReadAttributes: List[str] = ...,
        WriteAttributes: List[str] = ...,
        ExplicitAuthFlows: List[str] = ...,
        SupportedIdentityProviders: List[str] = ...,
        CallbackURLs: List[str] = ...,
        LogoutURLs: List[str] = ...,
        DefaultRedirectURI: str = ...,
        AllowedOAuthFlows: List[str] = ...,
        AllowedOAuthScopes: List[str] = ...,
        AllowedOAuthFlowsUserPoolClient: bool = ...,
        AnalyticsConfiguration: CognitoIdentityProviderAnalyticsConfigurationType = ...
    ) -> CognitoIdentityProviderCreateUserPoolClientResponse: ...

    def create_user_pool_domain(self, *,
        Domain: str,
        UserPoolId: str,
        CustomDomainConfig: CognitoIdentityProviderCustomDomainConfigType = ...
    ) -> CognitoIdentityProviderCreateUserPoolDomainResponse: ...

    def delete_group(self, *,
        GroupName: str,
        UserPoolId: str
    ): ...

    def delete_identity_provider(self, *,
        UserPoolId: str,
        ProviderName: str
    ): ...

    def delete_resource_server(self, *,
        UserPoolId: str,
        Identifier: str
    ): ...

    def delete_user(self, *,
        AccessToken: str
    ): ...

    def delete_user_attributes(self, *,
        UserAttributeNames: List[str],
        AccessToken: str
    ) -> CognitoIdentityProviderDeleteUserAttributesResponse: ...

    def delete_user_pool(self, *,
        UserPoolId: str
    ): ...

    def delete_user_pool_client(self, *,
        UserPoolId: str,
        ClientId: str
    ): ...

    def delete_user_pool_domain(self, *,
        Domain: str,
        UserPoolId: str
    ) -> CognitoIdentityProviderDeleteUserPoolDomainResponse: ...

    def describe_identity_provider(self, *,
        UserPoolId: str,
        ProviderName: str
    ) -> CognitoIdentityProviderDescribeIdentityProviderResponse: ...

    def describe_resource_server(self, *,
        UserPoolId: str,
        Identifier: str
    ) -> CognitoIdentityProviderDescribeResourceServerResponse: ...

    def describe_risk_configuration(self, *,
        UserPoolId: str,
        ClientId: str = ...
    ) -> CognitoIdentityProviderDescribeRiskConfigurationResponse: ...

    def describe_user_import_job(self, *,
        UserPoolId: str,
        JobId: str
    ) -> CognitoIdentityProviderDescribeUserImportJobResponse: ...

    def describe_user_pool(self, *,
        UserPoolId: str
    ) -> CognitoIdentityProviderDescribeUserPoolResponse: ...

    def describe_user_pool_client(self, *,
        UserPoolId: str,
        ClientId: str
    ) -> CognitoIdentityProviderDescribeUserPoolClientResponse: ...

    def describe_user_pool_domain(self, *,
        Domain: str
    ) -> CognitoIdentityProviderDescribeUserPoolDomainResponse: ...

    def forget_device(self, *,
        DeviceKey: str,
        AccessToken: str = ...
    ): ...

    def forgot_password(self, *,
        ClientId: str,
        Username: str,
        SecretHash: str = ...,
        UserContextData: CognitoIdentityProviderUserContextDataType = ...,
        AnalyticsMetadata: CognitoIdentityProviderAnalyticsMetadataType = ...
    ) -> CognitoIdentityProviderForgotPasswordResponse: ...

    def get_csv_header(self, *,
        UserPoolId: str
    ) -> CognitoIdentityProviderGetCSVHeaderResponse: ...

    def get_device(self, *,
        DeviceKey: str,
        AccessToken: str = ...
    ) -> CognitoIdentityProviderGetDeviceResponse: ...

    def get_group(self, *,
        GroupName: str,
        UserPoolId: str
    ) -> CognitoIdentityProviderGetGroupResponse: ...

    def get_identity_provider_by_identifier(self, *,
        UserPoolId: str,
        IdpIdentifier: str
    ) -> CognitoIdentityProviderGetIdentityProviderByIdentifierResponse: ...

    def get_signing_certificate(self, *,
        UserPoolId: str
    ) -> CognitoIdentityProviderGetSigningCertificateResponse: ...

    def get_ui_customization(self, *,
        UserPoolId: str,
        ClientId: str = ...
    ) -> CognitoIdentityProviderGetUICustomizationResponse: ...

    def get_user(self, *,
        AccessToken: str
    ) -> CognitoIdentityProviderGetUserResponse: ...

    def get_user_attribute_verification_code(self, *,
        AccessToken: str,
        AttributeName: str
    ) -> CognitoIdentityProviderGetUserAttributeVerificationCodeResponse: ...

    def get_user_pool_mfa_config(self, *,
        UserPoolId: str
    ) -> CognitoIdentityProviderGetUserPoolMfaConfigResponse: ...

    def global_sign_out(self, *,
        AccessToken: str
    ) -> CognitoIdentityProviderGlobalSignOutResponse: ...

    def initiate_auth(self, *,
        AuthFlow: str,
        ClientId: str,
        AuthParameters: Dict[str, str] = ...,
        ClientMetadata: Dict[str, str] = ...,
        AnalyticsMetadata: CognitoIdentityProviderAnalyticsMetadataType = ...,
        UserContextData: CognitoIdentityProviderUserContextDataType = ...
    ) -> CognitoIdentityProviderInitiateAuthResponse: ...

    def list_devices(self, *,
        AccessToken: str,
        Limit: int = ...,
        PaginationToken: str = ...
    ) -> CognitoIdentityProviderListDevicesResponse: ...

    def list_groups(self, *,
        UserPoolId: str,
        Limit: int = ...,
        NextToken: str = ...
    ) -> CognitoIdentityProviderListGroupsResponse: ...

    def list_identity_providers(self, *,
        UserPoolId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> CognitoIdentityProviderListIdentityProvidersResponse: ...

    def list_resource_servers(self, *,
        UserPoolId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> CognitoIdentityProviderListResourceServersResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> CognitoIdentityProviderListTagsForResourceResponse: ...

    def list_user_import_jobs(self, *,
        UserPoolId: str,
        MaxResults: int,
        PaginationToken: str = ...
    ) -> CognitoIdentityProviderListUserImportJobsResponse: ...

    def list_user_pool_clients(self, *,
        UserPoolId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> CognitoIdentityProviderListUserPoolClientsResponse: ...

    def list_user_pools(self, *,
        MaxResults: int,
        NextToken: str = ...
    ) -> CognitoIdentityProviderListUserPoolsResponse: ...

    def list_users(self, *,
        UserPoolId: str,
        AttributesToGet: List[str] = ...,
        Limit: int = ...,
        PaginationToken: str = ...,
        Filter: str = ...
    ) -> CognitoIdentityProviderListUsersResponse: ...

    def list_users_in_group(self, *,
        UserPoolId: str,
        GroupName: str,
        Limit: int = ...,
        NextToken: str = ...
    ) -> CognitoIdentityProviderListUsersInGroupResponse: ...

    def resend_confirmation_code(self, *,
        ClientId: str,
        Username: str,
        SecretHash: str = ...,
        UserContextData: CognitoIdentityProviderUserContextDataType = ...,
        AnalyticsMetadata: CognitoIdentityProviderAnalyticsMetadataType = ...
    ) -> CognitoIdentityProviderResendConfirmationCodeResponse: ...

    def respond_to_auth_challenge(self, *,
        ClientId: str,
        ChallengeName: str,
        Session: str = ...,
        ChallengeResponses: Dict[str, str] = ...,
        AnalyticsMetadata: CognitoIdentityProviderAnalyticsMetadataType = ...,
        UserContextData: CognitoIdentityProviderUserContextDataType = ...
    ) -> CognitoIdentityProviderRespondToAuthChallengeResponse: ...

    def set_risk_configuration(self, *,
        UserPoolId: str,
        ClientId: str = ...,
        CompromisedCredentialsRiskConfiguration: CognitoIdentityProviderCompromisedCredentialsRiskConfigurationType = ...,
        AccountTakeoverRiskConfiguration: CognitoIdentityProviderAccountTakeoverRiskConfigurationType = ...,
        RiskExceptionConfiguration: CognitoIdentityProviderRiskExceptionConfigurationType = ...
    ) -> CognitoIdentityProviderSetRiskConfigurationResponse: ...

    def set_ui_customization(self, *,
        UserPoolId: str,
        ClientId: str = ...,
        CSS: str = ...,
        ImageFile: bytes = ...
    ) -> CognitoIdentityProviderSetUICustomizationResponse: ...

    def set_user_mfa_preference(self, *,
        AccessToken: str,
        SMSMfaSettings: CognitoIdentityProviderSMSMfaSettingsType = ...,
        SoftwareTokenMfaSettings: CognitoIdentityProviderSoftwareTokenMfaSettingsType = ...
    ) -> CognitoIdentityProviderSetUserMFAPreferenceResponse: ...

    def set_user_pool_mfa_config(self, *,
        UserPoolId: str,
        SmsMfaConfiguration: CognitoIdentityProviderSmsMfaConfigType = ...,
        SoftwareTokenMfaConfiguration: CognitoIdentityProviderSoftwareTokenMfaConfigType = ...,
        MfaConfiguration: str = ...
    ) -> CognitoIdentityProviderSetUserPoolMfaConfigResponse: ...

    def set_user_settings(self, *,
        AccessToken: str,
        MFAOptions: List[CognitoIdentityProviderMFAOptionType]
    ) -> CognitoIdentityProviderSetUserSettingsResponse: ...

    def sign_up(self, *,
        ClientId: str,
        Username: str,
        Password: str,
        SecretHash: str = ...,
        UserAttributes: List[CognitoIdentityProviderAttributeType] = ...,
        ValidationData: List[CognitoIdentityProviderAttributeType] = ...,
        AnalyticsMetadata: CognitoIdentityProviderAnalyticsMetadataType = ...,
        UserContextData: CognitoIdentityProviderUserContextDataType = ...
    ) -> CognitoIdentityProviderSignUpResponse: ...

    def start_user_import_job(self, *,
        UserPoolId: str,
        JobId: str
    ) -> CognitoIdentityProviderStartUserImportJobResponse: ...

    def stop_user_import_job(self, *,
        UserPoolId: str,
        JobId: str
    ) -> CognitoIdentityProviderStopUserImportJobResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: Dict[str, str] = ...
    ) -> CognitoIdentityProviderTagResourceResponse: ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str] = ...
    ) -> CognitoIdentityProviderUntagResourceResponse: ...

    def update_auth_event_feedback(self, *,
        UserPoolId: str,
        Username: str,
        EventId: str,
        FeedbackToken: str,
        FeedbackValue: str
    ) -> CognitoIdentityProviderUpdateAuthEventFeedbackResponse: ...

    def update_device_status(self, *,
        AccessToken: str,
        DeviceKey: str,
        DeviceRememberedStatus: str = ...
    ) -> CognitoIdentityProviderUpdateDeviceStatusResponse: ...

    def update_group(self, *,
        GroupName: str,
        UserPoolId: str,
        Description: str = ...,
        RoleArn: str = ...,
        Precedence: int = ...
    ) -> CognitoIdentityProviderUpdateGroupResponse: ...

    def update_identity_provider(self, *,
        UserPoolId: str,
        ProviderName: str,
        ProviderDetails: Dict[str, str] = ...,
        AttributeMapping: Dict[str, str] = ...,
        IdpIdentifiers: List[str] = ...
    ) -> CognitoIdentityProviderUpdateIdentityProviderResponse: ...

    def update_resource_server(self, *,
        UserPoolId: str,
        Identifier: str,
        Name: str,
        Scopes: List[CognitoIdentityProviderResourceServerScopeType] = ...
    ) -> CognitoIdentityProviderUpdateResourceServerResponse: ...

    def update_user_attributes(self, *,
        UserAttributes: List[CognitoIdentityProviderAttributeType],
        AccessToken: str
    ) -> CognitoIdentityProviderUpdateUserAttributesResponse: ...

    def update_user_pool(self, *,
        UserPoolId: str,
        Policies: CognitoIdentityProviderUserPoolPolicyType = ...,
        LambdaConfig: CognitoIdentityProviderLambdaConfigType = ...,
        AutoVerifiedAttributes: List[str] = ...,
        SmsVerificationMessage: str = ...,
        EmailVerificationMessage: str = ...,
        EmailVerificationSubject: str = ...,
        VerificationMessageTemplate: CognitoIdentityProviderVerificationMessageTemplateType = ...,
        SmsAuthenticationMessage: str = ...,
        MfaConfiguration: str = ...,
        DeviceConfiguration: CognitoIdentityProviderDeviceConfigurationType = ...,
        EmailConfiguration: CognitoIdentityProviderEmailConfigurationType = ...,
        SmsConfiguration: CognitoIdentityProviderSmsConfigurationType = ...,
        UserPoolTags: Dict[str, str] = ...,
        AdminCreateUserConfig: CognitoIdentityProviderAdminCreateUserConfigType = ...,
        UserPoolAddOns: CognitoIdentityProviderUserPoolAddOnsType = ...
    ) -> CognitoIdentityProviderUpdateUserPoolResponse: ...

    def update_user_pool_client(self, *,
        UserPoolId: str,
        ClientId: str,
        ClientName: str = ...,
        RefreshTokenValidity: int = ...,
        ReadAttributes: List[str] = ...,
        WriteAttributes: List[str] = ...,
        ExplicitAuthFlows: List[str] = ...,
        SupportedIdentityProviders: List[str] = ...,
        CallbackURLs: List[str] = ...,
        LogoutURLs: List[str] = ...,
        DefaultRedirectURI: str = ...,
        AllowedOAuthFlows: List[str] = ...,
        AllowedOAuthScopes: List[str] = ...,
        AllowedOAuthFlowsUserPoolClient: bool = ...,
        AnalyticsConfiguration: CognitoIdentityProviderAnalyticsConfigurationType = ...
    ) -> CognitoIdentityProviderUpdateUserPoolClientResponse: ...

    def update_user_pool_domain(self, *,
        Domain: str,
        UserPoolId: str,
        CustomDomainConfig: CognitoIdentityProviderCustomDomainConfigType
    ) -> CognitoIdentityProviderUpdateUserPoolDomainResponse: ...

    def verify_software_token(self, *,
        UserCode: str,
        AccessToken: str = ...,
        Session: str = ...,
        FriendlyDeviceName: str = ...
    ) -> CognitoIdentityProviderVerifySoftwareTokenResponse: ...

    def verify_user_attribute(self, *,
        AccessToken: str,
        AttributeName: str,
        Code: str
    ) -> CognitoIdentityProviderVerifyUserAttributeResponse: ...


class CognitoIdentityProviderSchemaAttributeType(TypedDict, total=False):
    Name: str
    AttributeDataType: str
    DeveloperOnlyAttribute: bool
    Mutable: bool
    Required: bool
    NumberAttributeConstraints: CognitoIdentityProviderNumberAttributeConstraintsType
    StringAttributeConstraints: CognitoIdentityProviderStringAttributeConstraintsType


class CognitoIdentityProviderNumberAttributeConstraintsType(TypedDict, total=False):
    MinValue: str
    MaxValue: str


class CognitoIdentityProviderStringAttributeConstraintsType(TypedDict, total=False):
    MinLength: str
    MaxLength: str


class CognitoIdentityProviderAddCustomAttributesResponse(TypedDict, total=False):
    pass


class CognitoIdentityProviderAdminConfirmSignUpResponse(TypedDict, total=False):
    pass


class _CognitoIdentityProviderAttributeType(TypedDict):
    Name: str


class CognitoIdentityProviderAttributeType(_CognitoIdentityProviderAttributeType, total=False):
    Value: str


class CognitoIdentityProviderAdminCreateUserResponse(TypedDict, total=False):
    User: CognitoIdentityProviderUserType


class CognitoIdentityProviderUserType(TypedDict, total=False):
    Username: str
    Attributes: List[CognitoIdentityProviderAttributeType]
    UserCreateDate: datetime.datetime
    UserLastModifiedDate: datetime.datetime
    Enabled: bool
    UserStatus: str
    MFAOptions: List[CognitoIdentityProviderMFAOptionType]


class CognitoIdentityProviderMFAOptionType(TypedDict, total=False):
    DeliveryMedium: str
    AttributeName: str


class CognitoIdentityProviderAdminDeleteUserAttributesResponse(TypedDict, total=False):
    pass


class CognitoIdentityProviderProviderUserIdentifierType(TypedDict, total=False):
    ProviderName: str
    ProviderAttributeName: str
    ProviderAttributeValue: str


class CognitoIdentityProviderAdminDisableProviderForUserResponse(TypedDict, total=False):
    pass


class CognitoIdentityProviderAdminDisableUserResponse(TypedDict, total=False):
    pass


class CognitoIdentityProviderAdminEnableUserResponse(TypedDict, total=False):
    pass


class CognitoIdentityProviderAdminGetDeviceResponse(TypedDict):
    Device: CognitoIdentityProviderDeviceType


class CognitoIdentityProviderDeviceType(TypedDict, total=False):
    DeviceKey: str
    DeviceAttributes: List[CognitoIdentityProviderAttributeType]
    DeviceCreateDate: datetime.datetime
    DeviceLastModifiedDate: datetime.datetime
    DeviceLastAuthenticatedDate: datetime.datetime


class _CognitoIdentityProviderAdminGetUserResponse(TypedDict):
    Username: str


class CognitoIdentityProviderAdminGetUserResponse(_CognitoIdentityProviderAdminGetUserResponse, total=False):
    UserAttributes: List[CognitoIdentityProviderAttributeType]
    UserCreateDate: datetime.datetime
    UserLastModifiedDate: datetime.datetime
    Enabled: bool
    UserStatus: str
    MFAOptions: List[CognitoIdentityProviderMFAOptionType]
    PreferredMfaSetting: str
    UserMFASettingList: List[str]


class CognitoIdentityProviderAnalyticsMetadataType(TypedDict, total=False):
    AnalyticsEndpointId: str


class _CognitoIdentityProviderContextDataType(TypedDict):
    IpAddress: str
    ServerName: str
    ServerPath: str
    HttpHeaders: List[CognitoIdentityProviderHttpHeader]


class CognitoIdentityProviderContextDataType(_CognitoIdentityProviderContextDataType, total=False):
    EncodedData: str


class CognitoIdentityProviderHttpHeader(TypedDict, total=False):
    headerName: str
    headerValue: str


class CognitoIdentityProviderAdminInitiateAuthResponse(TypedDict, total=False):
    ChallengeName: str
    Session: str
    ChallengeParameters: Dict[str, str]
    AuthenticationResult: CognitoIdentityProviderAuthenticationResultType


class CognitoIdentityProviderAuthenticationResultType(TypedDict, total=False):
    AccessToken: str
    ExpiresIn: int
    TokenType: str
    RefreshToken: str
    IdToken: str
    NewDeviceMetadata: CognitoIdentityProviderNewDeviceMetadataType


class CognitoIdentityProviderNewDeviceMetadataType(TypedDict, total=False):
    DeviceKey: str
    DeviceGroupKey: str


class CognitoIdentityProviderAdminLinkProviderForUserResponse(TypedDict, total=False):
    pass


class CognitoIdentityProviderAdminListDevicesResponse(TypedDict, total=False):
    Devices: List[CognitoIdentityProviderDeviceType]
    PaginationToken: str


class CognitoIdentityProviderAdminListGroupsForUserResponse(TypedDict, total=False):
    Groups: List[CognitoIdentityProviderGroupType]
    NextToken: str


class CognitoIdentityProviderGroupType(TypedDict, total=False):
    GroupName: str
    UserPoolId: str
    Description: str
    RoleArn: str
    Precedence: int
    LastModifiedDate: datetime.datetime
    CreationDate: datetime.datetime


class CognitoIdentityProviderAdminListUserAuthEventsResponse(TypedDict, total=False):
    AuthEvents: List[CognitoIdentityProviderAuthEventType]
    NextToken: str


class CognitoIdentityProviderAuthEventType(TypedDict, total=False):
    EventId: str
    EventType: str
    CreationDate: datetime.datetime
    EventResponse: str
    EventRisk: CognitoIdentityProviderEventRiskType
    ChallengeResponses: List[CognitoIdentityProviderChallengeResponseType]
    EventContextData: CognitoIdentityProviderEventContextDataType
    EventFeedback: CognitoIdentityProviderEventFeedbackType


class CognitoIdentityProviderEventRiskType(TypedDict, total=False):
    RiskDecision: str
    RiskLevel: str


class CognitoIdentityProviderChallengeResponseType(TypedDict, total=False):
    ChallengeName: str
    ChallengeResponse: str


class CognitoIdentityProviderEventContextDataType(TypedDict, total=False):
    IpAddress: str
    DeviceName: str
    Timezone: str
    City: str
    Country: str


class _CognitoIdentityProviderEventFeedbackType(TypedDict):
    FeedbackValue: str
    Provider: str


class CognitoIdentityProviderEventFeedbackType(_CognitoIdentityProviderEventFeedbackType, total=False):
    FeedbackDate: datetime.datetime


class CognitoIdentityProviderAdminResetUserPasswordResponse(TypedDict, total=False):
    pass


class CognitoIdentityProviderAdminRespondToAuthChallengeResponse(TypedDict, total=False):
    ChallengeName: str
    Session: str
    ChallengeParameters: Dict[str, str]
    AuthenticationResult: CognitoIdentityProviderAuthenticationResultType


class CognitoIdentityProviderSMSMfaSettingsType(TypedDict, total=False):
    Enabled: bool
    PreferredMfa: bool


class CognitoIdentityProviderSoftwareTokenMfaSettingsType(TypedDict, total=False):
    Enabled: bool
    PreferredMfa: bool


class CognitoIdentityProviderAdminSetUserMFAPreferenceResponse(TypedDict, total=False):
    pass


class CognitoIdentityProviderAdminSetUserPasswordResponse(TypedDict, total=False):
    pass


class CognitoIdentityProviderAdminSetUserSettingsResponse(TypedDict, total=False):
    pass


class CognitoIdentityProviderAdminUpdateAuthEventFeedbackResponse(TypedDict, total=False):
    pass


class CognitoIdentityProviderAdminUpdateDeviceStatusResponse(TypedDict, total=False):
    pass


class CognitoIdentityProviderAdminUpdateUserAttributesResponse(TypedDict, total=False):
    pass


class CognitoIdentityProviderAdminUserGlobalSignOutResponse(TypedDict, total=False):
    pass


class CognitoIdentityProviderAssociateSoftwareTokenResponse(TypedDict, total=False):
    SecretCode: str
    Session: str


class CognitoIdentityProviderChangePasswordResponse(TypedDict, total=False):
    pass


class CognitoIdentityProviderDeviceSecretVerifierConfigType(TypedDict, total=False):
    PasswordVerifier: str
    Salt: str


class CognitoIdentityProviderConfirmDeviceResponse(TypedDict, total=False):
    UserConfirmationNecessary: bool


class CognitoIdentityProviderUserContextDataType(TypedDict, total=False):
    EncodedData: str


class CognitoIdentityProviderConfirmForgotPasswordResponse(TypedDict, total=False):
    pass


class CognitoIdentityProviderConfirmSignUpResponse(TypedDict, total=False):
    pass


class CognitoIdentityProviderCreateGroupResponse(TypedDict, total=False):
    Group: CognitoIdentityProviderGroupType


class CognitoIdentityProviderCreateIdentityProviderResponse(TypedDict):
    IdentityProvider: CognitoIdentityProviderIdentityProviderType


class CognitoIdentityProviderIdentityProviderType(TypedDict, total=False):
    UserPoolId: str
    ProviderName: str
    ProviderType: str
    ProviderDetails: Dict[str, str]
    AttributeMapping: Dict[str, str]
    IdpIdentifiers: List[str]
    LastModifiedDate: datetime.datetime
    CreationDate: datetime.datetime


class CognitoIdentityProviderResourceServerScopeType(TypedDict):
    ScopeName: str
    ScopeDescription: str


class CognitoIdentityProviderCreateResourceServerResponse(TypedDict):
    ResourceServer: CognitoIdentityProviderResourceServerType


class CognitoIdentityProviderResourceServerType(TypedDict, total=False):
    UserPoolId: str
    Identifier: str
    Name: str
    Scopes: List[CognitoIdentityProviderResourceServerScopeType]


class CognitoIdentityProviderCreateUserImportJobResponse(TypedDict, total=False):
    UserImportJob: CognitoIdentityProviderUserImportJobType


class CognitoIdentityProviderUserImportJobType(TypedDict, total=False):
    JobName: str
    JobId: str
    UserPoolId: str
    PreSignedUrl: str
    CreationDate: datetime.datetime
    StartDate: datetime.datetime
    CompletionDate: datetime.datetime
    Status: str
    CloudWatchLogsRoleArn: str
    ImportedUsers: int
    SkippedUsers: int
    FailedUsers: int
    CompletionMessage: str


class CognitoIdentityProviderUserPoolPolicyType(TypedDict, total=False):
    PasswordPolicy: CognitoIdentityProviderPasswordPolicyType


class CognitoIdentityProviderPasswordPolicyType(TypedDict, total=False):
    MinimumLength: int
    RequireUppercase: bool
    RequireLowercase: bool
    RequireNumbers: bool
    RequireSymbols: bool
    TemporaryPasswordValidityDays: int


class CognitoIdentityProviderLambdaConfigType(TypedDict, total=False):
    PreSignUp: str
    CustomMessage: str
    PostConfirmation: str
    PreAuthentication: str
    PostAuthentication: str
    DefineAuthChallenge: str
    CreateAuthChallenge: str
    VerifyAuthChallengeResponse: str
    PreTokenGeneration: str
    UserMigration: str


class CognitoIdentityProviderVerificationMessageTemplateType(TypedDict, total=False):
    SmsMessage: str
    EmailMessage: str
    EmailSubject: str
    EmailMessageByLink: str
    EmailSubjectByLink: str
    DefaultEmailOption: str


class CognitoIdentityProviderDeviceConfigurationType(TypedDict, total=False):
    ChallengeRequiredOnNewDevice: bool
    DeviceOnlyRememberedOnUserPrompt: bool


class CognitoIdentityProviderEmailConfigurationType(TypedDict, total=False):
    SourceArn: str
    ReplyToEmailAddress: str
    EmailSendingAccount: str


class _CognitoIdentityProviderSmsConfigurationType(TypedDict):
    SnsCallerArn: str


class CognitoIdentityProviderSmsConfigurationType(_CognitoIdentityProviderSmsConfigurationType, total=False):
    ExternalId: str


class CognitoIdentityProviderAdminCreateUserConfigType(TypedDict, total=False):
    AllowAdminCreateUserOnly: bool
    UnusedAccountValidityDays: int
    InviteMessageTemplate: CognitoIdentityProviderMessageTemplateType


class CognitoIdentityProviderMessageTemplateType(TypedDict, total=False):
    SMSMessage: str
    EmailMessage: str
    EmailSubject: str


class CognitoIdentityProviderUserPoolAddOnsType(TypedDict):
    AdvancedSecurityMode: str


class CognitoIdentityProviderCreateUserPoolResponse(TypedDict, total=False):
    UserPool: CognitoIdentityProviderUserPoolType


class CognitoIdentityProviderUserPoolType(TypedDict, total=False):
    Id: str
    Name: str
    Policies: CognitoIdentityProviderUserPoolPolicyType
    LambdaConfig: CognitoIdentityProviderLambdaConfigType
    Status: str
    LastModifiedDate: datetime.datetime
    CreationDate: datetime.datetime
    SchemaAttributes: List[CognitoIdentityProviderSchemaAttributeType]
    AutoVerifiedAttributes: List[str]
    AliasAttributes: List[str]
    UsernameAttributes: List[str]
    SmsVerificationMessage: str
    EmailVerificationMessage: str
    EmailVerificationSubject: str
    VerificationMessageTemplate: CognitoIdentityProviderVerificationMessageTemplateType
    SmsAuthenticationMessage: str
    MfaConfiguration: str
    DeviceConfiguration: CognitoIdentityProviderDeviceConfigurationType
    EstimatedNumberOfUsers: int
    EmailConfiguration: CognitoIdentityProviderEmailConfigurationType
    SmsConfiguration: CognitoIdentityProviderSmsConfigurationType
    UserPoolTags: Dict[str, str]
    SmsConfigurationFailure: str
    EmailConfigurationFailure: str
    Domain: str
    CustomDomain: str
    AdminCreateUserConfig: CognitoIdentityProviderAdminCreateUserConfigType
    UserPoolAddOns: CognitoIdentityProviderUserPoolAddOnsType
    Arn: str


class _CognitoIdentityProviderAnalyticsConfigurationType(TypedDict):
    ApplicationId: str
    RoleArn: str
    ExternalId: str


class CognitoIdentityProviderAnalyticsConfigurationType(_CognitoIdentityProviderAnalyticsConfigurationType, total=False):
    UserDataShared: bool


class CognitoIdentityProviderCreateUserPoolClientResponse(TypedDict, total=False):
    UserPoolClient: CognitoIdentityProviderUserPoolClientType


class CognitoIdentityProviderUserPoolClientType(TypedDict, total=False):
    UserPoolId: str
    ClientName: str
    ClientId: str
    ClientSecret: str
    LastModifiedDate: datetime.datetime
    CreationDate: datetime.datetime
    RefreshTokenValidity: int
    ReadAttributes: List[str]
    WriteAttributes: List[str]
    ExplicitAuthFlows: List[str]
    SupportedIdentityProviders: List[str]
    CallbackURLs: List[str]
    LogoutURLs: List[str]
    DefaultRedirectURI: str
    AllowedOAuthFlows: List[str]
    AllowedOAuthScopes: List[str]
    AllowedOAuthFlowsUserPoolClient: bool
    AnalyticsConfiguration: CognitoIdentityProviderAnalyticsConfigurationType


class CognitoIdentityProviderCustomDomainConfigType(TypedDict):
    CertificateArn: str


class CognitoIdentityProviderCreateUserPoolDomainResponse(TypedDict, total=False):
    CloudFrontDomain: str


class CognitoIdentityProviderDeleteUserAttributesResponse(TypedDict, total=False):
    pass


class CognitoIdentityProviderDeleteUserPoolDomainResponse(TypedDict, total=False):
    pass


class CognitoIdentityProviderDescribeIdentityProviderResponse(TypedDict):
    IdentityProvider: CognitoIdentityProviderIdentityProviderType


class CognitoIdentityProviderDescribeResourceServerResponse(TypedDict):
    ResourceServer: CognitoIdentityProviderResourceServerType


class CognitoIdentityProviderDescribeRiskConfigurationResponse(TypedDict):
    RiskConfiguration: CognitoIdentityProviderRiskConfigurationType


class CognitoIdentityProviderRiskConfigurationType(TypedDict, total=False):
    UserPoolId: str
    ClientId: str
    CompromisedCredentialsRiskConfiguration: CognitoIdentityProviderCompromisedCredentialsRiskConfigurationType
    AccountTakeoverRiskConfiguration: CognitoIdentityProviderAccountTakeoverRiskConfigurationType
    RiskExceptionConfiguration: CognitoIdentityProviderRiskExceptionConfigurationType
    LastModifiedDate: datetime.datetime


class _CognitoIdentityProviderCompromisedCredentialsRiskConfigurationType(TypedDict):
    Actions: CognitoIdentityProviderCompromisedCredentialsActionsType


class CognitoIdentityProviderCompromisedCredentialsRiskConfigurationType(_CognitoIdentityProviderCompromisedCredentialsRiskConfigurationType, total=False):
    EventFilter: List[str]


class CognitoIdentityProviderCompromisedCredentialsActionsType(TypedDict):
    EventAction: str


class _CognitoIdentityProviderAccountTakeoverRiskConfigurationType(TypedDict):
    Actions: CognitoIdentityProviderAccountTakeoverActionsType


class CognitoIdentityProviderAccountTakeoverRiskConfigurationType(_CognitoIdentityProviderAccountTakeoverRiskConfigurationType, total=False):
    NotifyConfiguration: CognitoIdentityProviderNotifyConfigurationType


class _CognitoIdentityProviderNotifyConfigurationType(TypedDict):
    SourceArn: str


class CognitoIdentityProviderNotifyConfigurationType(_CognitoIdentityProviderNotifyConfigurationType, total=False):
    From: str
    ReplyTo: str
    BlockEmail: CognitoIdentityProviderNotifyEmailType
    NoActionEmail: CognitoIdentityProviderNotifyEmailType
    MfaEmail: CognitoIdentityProviderNotifyEmailType


class _CognitoIdentityProviderNotifyEmailType(TypedDict):
    Subject: str


class CognitoIdentityProviderNotifyEmailType(_CognitoIdentityProviderNotifyEmailType, total=False):
    HtmlBody: str
    TextBody: str


class CognitoIdentityProviderAccountTakeoverActionsType(TypedDict, total=False):
    LowAction: CognitoIdentityProviderAccountTakeoverActionType
    MediumAction: CognitoIdentityProviderAccountTakeoverActionType
    HighAction: CognitoIdentityProviderAccountTakeoverActionType


class CognitoIdentityProviderAccountTakeoverActionType(TypedDict):
    Notify: bool
    EventAction: str


class CognitoIdentityProviderRiskExceptionConfigurationType(TypedDict, total=False):
    BlockedIPRangeList: List[str]
    SkippedIPRangeList: List[str]


class CognitoIdentityProviderDescribeUserImportJobResponse(TypedDict, total=False):
    UserImportJob: CognitoIdentityProviderUserImportJobType


class CognitoIdentityProviderDescribeUserPoolResponse(TypedDict, total=False):
    UserPool: CognitoIdentityProviderUserPoolType


class CognitoIdentityProviderDescribeUserPoolClientResponse(TypedDict, total=False):
    UserPoolClient: CognitoIdentityProviderUserPoolClientType


class CognitoIdentityProviderDescribeUserPoolDomainResponse(TypedDict, total=False):
    DomainDescription: CognitoIdentityProviderDomainDescriptionType


class CognitoIdentityProviderDomainDescriptionType(TypedDict, total=False):
    UserPoolId: str
    AWSAccountId: str
    Domain: str
    S3Bucket: str
    CloudFrontDistribution: str
    Version: str
    Status: str
    CustomDomainConfig: CognitoIdentityProviderCustomDomainConfigType


class CognitoIdentityProviderForgotPasswordResponse(TypedDict, total=False):
    CodeDeliveryDetails: CognitoIdentityProviderCodeDeliveryDetailsType


class CognitoIdentityProviderCodeDeliveryDetailsType(TypedDict, total=False):
    Destination: str
    DeliveryMedium: str
    AttributeName: str


class CognitoIdentityProviderGetCSVHeaderResponse(TypedDict, total=False):
    UserPoolId: str
    CSVHeader: List[str]


class CognitoIdentityProviderGetDeviceResponse(TypedDict):
    Device: CognitoIdentityProviderDeviceType


class CognitoIdentityProviderGetGroupResponse(TypedDict, total=False):
    Group: CognitoIdentityProviderGroupType


class CognitoIdentityProviderGetIdentityProviderByIdentifierResponse(TypedDict):
    IdentityProvider: CognitoIdentityProviderIdentityProviderType


class CognitoIdentityProviderGetSigningCertificateResponse(TypedDict, total=False):
    Certificate: str


class CognitoIdentityProviderGetUICustomizationResponse(TypedDict):
    UICustomization: CognitoIdentityProviderUICustomizationType


class CognitoIdentityProviderUICustomizationType(TypedDict, total=False):
    UserPoolId: str
    ClientId: str
    ImageUrl: str
    CSS: str
    CSSVersion: str
    LastModifiedDate: datetime.datetime
    CreationDate: datetime.datetime


class _CognitoIdentityProviderGetUserResponse(TypedDict):
    Username: str
    UserAttributes: List[CognitoIdentityProviderAttributeType]


class CognitoIdentityProviderGetUserResponse(_CognitoIdentityProviderGetUserResponse, total=False):
    MFAOptions: List[CognitoIdentityProviderMFAOptionType]
    PreferredMfaSetting: str
    UserMFASettingList: List[str]


class CognitoIdentityProviderGetUserAttributeVerificationCodeResponse(TypedDict, total=False):
    CodeDeliveryDetails: CognitoIdentityProviderCodeDeliveryDetailsType


class CognitoIdentityProviderGetUserPoolMfaConfigResponse(TypedDict, total=False):
    SmsMfaConfiguration: CognitoIdentityProviderSmsMfaConfigType
    SoftwareTokenMfaConfiguration: CognitoIdentityProviderSoftwareTokenMfaConfigType
    MfaConfiguration: str


class CognitoIdentityProviderSmsMfaConfigType(TypedDict, total=False):
    SmsAuthenticationMessage: str
    SmsConfiguration: CognitoIdentityProviderSmsConfigurationType


class CognitoIdentityProviderSoftwareTokenMfaConfigType(TypedDict, total=False):
    Enabled: bool


class CognitoIdentityProviderGlobalSignOutResponse(TypedDict, total=False):
    pass


class CognitoIdentityProviderInitiateAuthResponse(TypedDict, total=False):
    ChallengeName: str
    Session: str
    ChallengeParameters: Dict[str, str]
    AuthenticationResult: CognitoIdentityProviderAuthenticationResultType


class CognitoIdentityProviderListDevicesResponse(TypedDict, total=False):
    Devices: List[CognitoIdentityProviderDeviceType]
    PaginationToken: str


class CognitoIdentityProviderListGroupsResponse(TypedDict, total=False):
    Groups: List[CognitoIdentityProviderGroupType]
    NextToken: str


class _CognitoIdentityProviderListIdentityProvidersResponse(TypedDict):
    Providers: List[CognitoIdentityProviderProviderDescription]


class CognitoIdentityProviderListIdentityProvidersResponse(_CognitoIdentityProviderListIdentityProvidersResponse, total=False):
    NextToken: str


class CognitoIdentityProviderProviderDescription(TypedDict, total=False):
    ProviderName: str
    ProviderType: str
    LastModifiedDate: datetime.datetime
    CreationDate: datetime.datetime


class _CognitoIdentityProviderListResourceServersResponse(TypedDict):
    ResourceServers: List[CognitoIdentityProviderResourceServerType]


class CognitoIdentityProviderListResourceServersResponse(_CognitoIdentityProviderListResourceServersResponse, total=False):
    NextToken: str


class CognitoIdentityProviderListTagsForResourceResponse(TypedDict, total=False):
    Tags: Dict[str, str]


class CognitoIdentityProviderListUserImportJobsResponse(TypedDict, total=False):
    UserImportJobs: List[CognitoIdentityProviderUserImportJobType]
    PaginationToken: str


class CognitoIdentityProviderListUserPoolClientsResponse(TypedDict, total=False):
    UserPoolClients: List[CognitoIdentityProviderUserPoolClientDescription]
    NextToken: str


class CognitoIdentityProviderUserPoolClientDescription(TypedDict, total=False):
    ClientId: str
    UserPoolId: str
    ClientName: str


class CognitoIdentityProviderListUserPoolsResponse(TypedDict, total=False):
    UserPools: List[CognitoIdentityProviderUserPoolDescriptionType]
    NextToken: str


class CognitoIdentityProviderUserPoolDescriptionType(TypedDict, total=False):
    Id: str
    Name: str
    LambdaConfig: CognitoIdentityProviderLambdaConfigType
    Status: str
    LastModifiedDate: datetime.datetime
    CreationDate: datetime.datetime


class CognitoIdentityProviderListUsersResponse(TypedDict, total=False):
    Users: List[CognitoIdentityProviderUserType]
    PaginationToken: str


class CognitoIdentityProviderListUsersInGroupResponse(TypedDict, total=False):
    Users: List[CognitoIdentityProviderUserType]
    NextToken: str


class CognitoIdentityProviderResendConfirmationCodeResponse(TypedDict, total=False):
    CodeDeliveryDetails: CognitoIdentityProviderCodeDeliveryDetailsType


class CognitoIdentityProviderRespondToAuthChallengeResponse(TypedDict, total=False):
    ChallengeName: str
    Session: str
    ChallengeParameters: Dict[str, str]
    AuthenticationResult: CognitoIdentityProviderAuthenticationResultType


class CognitoIdentityProviderSetRiskConfigurationResponse(TypedDict):
    RiskConfiguration: CognitoIdentityProviderRiskConfigurationType


class CognitoIdentityProviderSetUICustomizationResponse(TypedDict):
    UICustomization: CognitoIdentityProviderUICustomizationType


class CognitoIdentityProviderSetUserMFAPreferenceResponse(TypedDict, total=False):
    pass


class CognitoIdentityProviderSetUserPoolMfaConfigResponse(TypedDict, total=False):
    SmsMfaConfiguration: CognitoIdentityProviderSmsMfaConfigType
    SoftwareTokenMfaConfiguration: CognitoIdentityProviderSoftwareTokenMfaConfigType
    MfaConfiguration: str


class CognitoIdentityProviderSetUserSettingsResponse(TypedDict, total=False):
    pass


class _CognitoIdentityProviderSignUpResponse(TypedDict):
    UserConfirmed: bool
    UserSub: str


class CognitoIdentityProviderSignUpResponse(_CognitoIdentityProviderSignUpResponse, total=False):
    CodeDeliveryDetails: CognitoIdentityProviderCodeDeliveryDetailsType


class CognitoIdentityProviderStartUserImportJobResponse(TypedDict, total=False):
    UserImportJob: CognitoIdentityProviderUserImportJobType


class CognitoIdentityProviderStopUserImportJobResponse(TypedDict, total=False):
    UserImportJob: CognitoIdentityProviderUserImportJobType


class CognitoIdentityProviderTagResourceResponse(TypedDict, total=False):
    pass


class CognitoIdentityProviderUntagResourceResponse(TypedDict, total=False):
    pass


class CognitoIdentityProviderUpdateAuthEventFeedbackResponse(TypedDict, total=False):
    pass


class CognitoIdentityProviderUpdateDeviceStatusResponse(TypedDict, total=False):
    pass


class CognitoIdentityProviderUpdateGroupResponse(TypedDict, total=False):
    Group: CognitoIdentityProviderGroupType


class CognitoIdentityProviderUpdateIdentityProviderResponse(TypedDict):
    IdentityProvider: CognitoIdentityProviderIdentityProviderType


class CognitoIdentityProviderUpdateResourceServerResponse(TypedDict):
    ResourceServer: CognitoIdentityProviderResourceServerType


class CognitoIdentityProviderUpdateUserAttributesResponse(TypedDict, total=False):
    CodeDeliveryDetailsList: List[CognitoIdentityProviderCodeDeliveryDetailsType]


class CognitoIdentityProviderUpdateUserPoolResponse(TypedDict, total=False):
    pass


class CognitoIdentityProviderUpdateUserPoolClientResponse(TypedDict, total=False):
    UserPoolClient: CognitoIdentityProviderUserPoolClientType


class CognitoIdentityProviderUpdateUserPoolDomainResponse(TypedDict, total=False):
    CloudFrontDomain: str


class CognitoIdentityProviderVerifySoftwareTokenResponse(TypedDict, total=False):
    Status: str
    Session: str


class CognitoIdentityProviderVerifyUserAttributeResponse(TypedDict, total=False):
    pass


class CognitoSync(BaseClient):
    def bulk_publish(self, *,
        IdentityPoolId: str
    ) -> CognitoSyncBulkPublishResponse: ...

    def delete_dataset(self, *,
        IdentityPoolId: str,
        IdentityId: str,
        DatasetName: str
    ) -> CognitoSyncDeleteDatasetResponse: ...

    def describe_dataset(self, *,
        IdentityPoolId: str,
        IdentityId: str,
        DatasetName: str
    ) -> CognitoSyncDescribeDatasetResponse: ...

    def describe_identity_pool_usage(self, *,
        IdentityPoolId: str
    ) -> CognitoSyncDescribeIdentityPoolUsageResponse: ...

    def describe_identity_usage(self, *,
        IdentityPoolId: str,
        IdentityId: str
    ) -> CognitoSyncDescribeIdentityUsageResponse: ...

    def get_bulk_publish_details(self, *,
        IdentityPoolId: str
    ) -> CognitoSyncGetBulkPublishDetailsResponse: ...

    def get_cognito_events(self, *,
        IdentityPoolId: str
    ) -> CognitoSyncGetCognitoEventsResponse: ...

    def get_identity_pool_configuration(self, *,
        IdentityPoolId: str
    ) -> CognitoSyncGetIdentityPoolConfigurationResponse: ...

    def list_datasets(self, *,
        IdentityPoolId: str,
        IdentityId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CognitoSyncListDatasetsResponse: ...

    def list_identity_pool_usage(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> CognitoSyncListIdentityPoolUsageResponse: ...

    def list_records(self, *,
        IdentityPoolId: str,
        IdentityId: str,
        DatasetName: str,
        LastSyncCount: int = ...,
        NextToken: str = ...,
        MaxResults: int = ...,
        SyncSessionToken: str = ...
    ) -> CognitoSyncListRecordsResponse: ...

    def register_device(self, *,
        IdentityPoolId: str,
        IdentityId: str,
        Platform: str,
        Token: str
    ) -> CognitoSyncRegisterDeviceResponse: ...

    def set_cognito_events(self, *,
        IdentityPoolId: str,
        Events: Dict[str, str]
    ): ...

    def set_identity_pool_configuration(self, *,
        IdentityPoolId: str,
        PushSync: CognitoSyncPushSync = ...,
        CognitoStreams: CognitoSyncCognitoStreams = ...
    ) -> CognitoSyncSetIdentityPoolConfigurationResponse: ...

    def subscribe_to_dataset(self, *,
        IdentityPoolId: str,
        IdentityId: str,
        DatasetName: str,
        DeviceId: str
    ) -> CognitoSyncSubscribeToDatasetResponse: ...

    def unsubscribe_from_dataset(self, *,
        IdentityPoolId: str,
        IdentityId: str,
        DatasetName: str,
        DeviceId: str
    ) -> CognitoSyncUnsubscribeFromDatasetResponse: ...

    def update_records(self, *,
        IdentityPoolId: str,
        IdentityId: str,
        DatasetName: str,
        SyncSessionToken: str,
        DeviceId: str = ...,
        RecordPatches: List[CognitoSyncRecordPatch] = ...,
        ClientContext: str = ...
    ) -> CognitoSyncUpdateRecordsResponse: ...


class CognitoSyncBulkPublishResponse(TypedDict, total=False):
    IdentityPoolId: str


class CognitoSyncDeleteDatasetResponse(TypedDict, total=False):
    Dataset: CognitoSyncDataset


class CognitoSyncDataset(TypedDict, total=False):
    IdentityId: str
    DatasetName: str
    CreationDate: datetime.datetime
    LastModifiedDate: datetime.datetime
    LastModifiedBy: str
    DataStorage: int
    NumRecords: int


class CognitoSyncDescribeDatasetResponse(TypedDict, total=False):
    Dataset: CognitoSyncDataset


class CognitoSyncDescribeIdentityPoolUsageResponse(TypedDict, total=False):
    IdentityPoolUsage: CognitoSyncIdentityPoolUsage


class CognitoSyncIdentityPoolUsage(TypedDict, total=False):
    IdentityPoolId: str
    SyncSessionsCount: int
    DataStorage: int
    LastModifiedDate: datetime.datetime


class CognitoSyncDescribeIdentityUsageResponse(TypedDict, total=False):
    IdentityUsage: CognitoSyncIdentityUsage


class CognitoSyncIdentityUsage(TypedDict, total=False):
    IdentityId: str
    IdentityPoolId: str
    LastModifiedDate: datetime.datetime
    DatasetCount: int
    DataStorage: int


class CognitoSyncGetBulkPublishDetailsResponse(TypedDict, total=False):
    IdentityPoolId: str
    BulkPublishStartTime: datetime.datetime
    BulkPublishCompleteTime: datetime.datetime
    BulkPublishStatus: str
    FailureMessage: str


class CognitoSyncGetCognitoEventsResponse(TypedDict, total=False):
    Events: Dict[str, str]


class CognitoSyncGetIdentityPoolConfigurationResponse(TypedDict, total=False):
    IdentityPoolId: str
    PushSync: CognitoSyncPushSync
    CognitoStreams: CognitoSyncCognitoStreams


class CognitoSyncPushSync(TypedDict, total=False):
    ApplicationArns: List[str]
    RoleArn: str


class CognitoSyncCognitoStreams(TypedDict, total=False):
    StreamName: str
    RoleArn: str
    StreamingStatus: str


class CognitoSyncListDatasetsResponse(TypedDict, total=False):
    Datasets: List[CognitoSyncDataset]
    Count: int
    NextToken: str


class CognitoSyncListIdentityPoolUsageResponse(TypedDict, total=False):
    IdentityPoolUsages: List[CognitoSyncIdentityPoolUsage]
    MaxResults: int
    Count: int
    NextToken: str


class CognitoSyncListRecordsResponse(TypedDict, total=False):
    Records: List[CognitoSyncRecord]
    NextToken: str
    Count: int
    DatasetSyncCount: int
    LastModifiedBy: str
    MergedDatasetNames: List[str]
    DatasetExists: bool
    DatasetDeletedAfterRequestedSyncCount: bool
    SyncSessionToken: str


class CognitoSyncRecord(TypedDict, total=False):
    Key: str
    Value: str
    SyncCount: int
    LastModifiedDate: datetime.datetime
    LastModifiedBy: str
    DeviceLastModifiedDate: datetime.datetime


class CognitoSyncRegisterDeviceResponse(TypedDict, total=False):
    DeviceId: str


class CognitoSyncSetIdentityPoolConfigurationResponse(TypedDict, total=False):
    IdentityPoolId: str
    PushSync: CognitoSyncPushSync
    CognitoStreams: CognitoSyncCognitoStreams


class CognitoSyncSubscribeToDatasetResponse(TypedDict, total=False):
    pass


class CognitoSyncUnsubscribeFromDatasetResponse(TypedDict, total=False):
    pass


class _CognitoSyncRecordPatch(TypedDict):
    Op: str
    Key: str
    SyncCount: int


class CognitoSyncRecordPatch(_CognitoSyncRecordPatch, total=False):
    Value: str
    DeviceLastModifiedDate: datetime.datetime


class CognitoSyncUpdateRecordsResponse(TypedDict, total=False):
    Records: List[CognitoSyncRecord]


class Comprehend(BaseClient):
    def batch_detect_dominant_language(self, *,
        TextList: List[str]
    ) -> ComprehendBatchDetectDominantLanguageResponse: ...

    def batch_detect_entities(self, *,
        TextList: List[str],
        LanguageCode: str
    ) -> ComprehendBatchDetectEntitiesResponse: ...

    def batch_detect_key_phrases(self, *,
        TextList: List[str],
        LanguageCode: str
    ) -> ComprehendBatchDetectKeyPhrasesResponse: ...

    def batch_detect_sentiment(self, *,
        TextList: List[str],
        LanguageCode: str
    ) -> ComprehendBatchDetectSentimentResponse: ...

    def batch_detect_syntax(self, *,
        TextList: List[str],
        LanguageCode: str
    ) -> ComprehendBatchDetectSyntaxResponse: ...

    def create_document_classifier(self, *,
        DocumentClassifierName: str,
        DataAccessRoleArn: str,
        InputDataConfig: ComprehendDocumentClassifierInputDataConfig,
        LanguageCode: str,
        Tags: List[ComprehendTag] = ...,
        OutputDataConfig: ComprehendDocumentClassifierOutputDataConfig = ...,
        ClientRequestToken: str = ...,
        VolumeKmsKeyId: str = ...,
        VpcConfig: ComprehendVpcConfig = ...
    ) -> ComprehendCreateDocumentClassifierResponse: ...

    def create_entity_recognizer(self, *,
        RecognizerName: str,
        DataAccessRoleArn: str,
        InputDataConfig: ComprehendEntityRecognizerInputDataConfig,
        LanguageCode: str,
        Tags: List[ComprehendTag] = ...,
        ClientRequestToken: str = ...,
        VolumeKmsKeyId: str = ...,
        VpcConfig: ComprehendVpcConfig = ...
    ) -> ComprehendCreateEntityRecognizerResponse: ...

    def delete_document_classifier(self, *,
        DocumentClassifierArn: str
    ) -> ComprehendDeleteDocumentClassifierResponse: ...

    def delete_entity_recognizer(self, *,
        EntityRecognizerArn: str
    ) -> ComprehendDeleteEntityRecognizerResponse: ...

    def describe_document_classification_job(self, *,
        JobId: str
    ) -> ComprehendDescribeDocumentClassificationJobResponse: ...

    def describe_document_classifier(self, *,
        DocumentClassifierArn: str
    ) -> ComprehendDescribeDocumentClassifierResponse: ...

    def describe_dominant_language_detection_job(self, *,
        JobId: str
    ) -> ComprehendDescribeDominantLanguageDetectionJobResponse: ...

    def describe_entities_detection_job(self, *,
        JobId: str
    ) -> ComprehendDescribeEntitiesDetectionJobResponse: ...

    def describe_entity_recognizer(self, *,
        EntityRecognizerArn: str
    ) -> ComprehendDescribeEntityRecognizerResponse: ...

    def describe_key_phrases_detection_job(self, *,
        JobId: str
    ) -> ComprehendDescribeKeyPhrasesDetectionJobResponse: ...

    def describe_sentiment_detection_job(self, *,
        JobId: str
    ) -> ComprehendDescribeSentimentDetectionJobResponse: ...

    def describe_topics_detection_job(self, *,
        JobId: str
    ) -> ComprehendDescribeTopicsDetectionJobResponse: ...

    def detect_dominant_language(self, *,
        Text: str
    ) -> ComprehendDetectDominantLanguageResponse: ...

    def detect_entities(self, *,
        Text: str,
        LanguageCode: str
    ) -> ComprehendDetectEntitiesResponse: ...

    def detect_key_phrases(self, *,
        Text: str,
        LanguageCode: str
    ) -> ComprehendDetectKeyPhrasesResponse: ...

    def detect_sentiment(self, *,
        Text: str,
        LanguageCode: str
    ) -> ComprehendDetectSentimentResponse: ...

    def detect_syntax(self, *,
        Text: str,
        LanguageCode: str
    ) -> ComprehendDetectSyntaxResponse: ...

    def list_document_classification_jobs(self, *,
        Filter: ComprehendDocumentClassificationJobFilter = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ComprehendListDocumentClassificationJobsResponse: ...

    def list_document_classifiers(self, *,
        Filter: ComprehendDocumentClassifierFilter = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ComprehendListDocumentClassifiersResponse: ...

    def list_dominant_language_detection_jobs(self, *,
        Filter: ComprehendDominantLanguageDetectionJobFilter = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ComprehendListDominantLanguageDetectionJobsResponse: ...

    def list_entities_detection_jobs(self, *,
        Filter: ComprehendEntitiesDetectionJobFilter = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ComprehendListEntitiesDetectionJobsResponse: ...

    def list_entity_recognizers(self, *,
        Filter: ComprehendEntityRecognizerFilter = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ComprehendListEntityRecognizersResponse: ...

    def list_key_phrases_detection_jobs(self, *,
        Filter: ComprehendKeyPhrasesDetectionJobFilter = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ComprehendListKeyPhrasesDetectionJobsResponse: ...

    def list_sentiment_detection_jobs(self, *,
        Filter: ComprehendSentimentDetectionJobFilter = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ComprehendListSentimentDetectionJobsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> ComprehendListTagsForResourceResponse: ...

    def list_topics_detection_jobs(self, *,
        Filter: ComprehendTopicsDetectionJobFilter = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ComprehendListTopicsDetectionJobsResponse: ...

    def start_document_classification_job(self, *,
        DocumentClassifierArn: str,
        InputDataConfig: ComprehendInputDataConfig,
        OutputDataConfig: ComprehendOutputDataConfig,
        DataAccessRoleArn: str,
        JobName: str = ...,
        ClientRequestToken: str = ...,
        VolumeKmsKeyId: str = ...,
        VpcConfig: ComprehendVpcConfig = ...
    ) -> ComprehendStartDocumentClassificationJobResponse: ...

    def start_dominant_language_detection_job(self, *,
        InputDataConfig: ComprehendInputDataConfig,
        OutputDataConfig: ComprehendOutputDataConfig,
        DataAccessRoleArn: str,
        JobName: str = ...,
        ClientRequestToken: str = ...,
        VolumeKmsKeyId: str = ...,
        VpcConfig: ComprehendVpcConfig = ...
    ) -> ComprehendStartDominantLanguageDetectionJobResponse: ...

    def start_entities_detection_job(self, *,
        InputDataConfig: ComprehendInputDataConfig,
        OutputDataConfig: ComprehendOutputDataConfig,
        DataAccessRoleArn: str,
        LanguageCode: str,
        JobName: str = ...,
        EntityRecognizerArn: str = ...,
        ClientRequestToken: str = ...,
        VolumeKmsKeyId: str = ...,
        VpcConfig: ComprehendVpcConfig = ...
    ) -> ComprehendStartEntitiesDetectionJobResponse: ...

    def start_key_phrases_detection_job(self, *,
        InputDataConfig: ComprehendInputDataConfig,
        OutputDataConfig: ComprehendOutputDataConfig,
        DataAccessRoleArn: str,
        LanguageCode: str,
        JobName: str = ...,
        ClientRequestToken: str = ...,
        VolumeKmsKeyId: str = ...,
        VpcConfig: ComprehendVpcConfig = ...
    ) -> ComprehendStartKeyPhrasesDetectionJobResponse: ...

    def start_sentiment_detection_job(self, *,
        InputDataConfig: ComprehendInputDataConfig,
        OutputDataConfig: ComprehendOutputDataConfig,
        DataAccessRoleArn: str,
        LanguageCode: str,
        JobName: str = ...,
        ClientRequestToken: str = ...,
        VolumeKmsKeyId: str = ...,
        VpcConfig: ComprehendVpcConfig = ...
    ) -> ComprehendStartSentimentDetectionJobResponse: ...

    def start_topics_detection_job(self, *,
        InputDataConfig: ComprehendInputDataConfig,
        OutputDataConfig: ComprehendOutputDataConfig,
        DataAccessRoleArn: str,
        JobName: str = ...,
        NumberOfTopics: int = ...,
        ClientRequestToken: str = ...,
        VolumeKmsKeyId: str = ...,
        VpcConfig: ComprehendVpcConfig = ...
    ) -> ComprehendStartTopicsDetectionJobResponse: ...

    def stop_dominant_language_detection_job(self, *,
        JobId: str
    ) -> ComprehendStopDominantLanguageDetectionJobResponse: ...

    def stop_entities_detection_job(self, *,
        JobId: str
    ) -> ComprehendStopEntitiesDetectionJobResponse: ...

    def stop_key_phrases_detection_job(self, *,
        JobId: str
    ) -> ComprehendStopKeyPhrasesDetectionJobResponse: ...

    def stop_sentiment_detection_job(self, *,
        JobId: str
    ) -> ComprehendStopSentimentDetectionJobResponse: ...

    def stop_training_document_classifier(self, *,
        DocumentClassifierArn: str
    ) -> ComprehendStopTrainingDocumentClassifierResponse: ...

    def stop_training_entity_recognizer(self, *,
        EntityRecognizerArn: str
    ) -> ComprehendStopTrainingEntityRecognizerResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: List[ComprehendTag]
    ) -> ComprehendTagResourceResponse: ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ) -> ComprehendUntagResourceResponse: ...


class ComprehendBatchDetectDominantLanguageResponse(TypedDict):
    ResultList: List[ComprehendBatchDetectDominantLanguageItemResult]
    ErrorList: List[ComprehendBatchItemError]


class ComprehendBatchDetectDominantLanguageItemResult(TypedDict, total=False):
    Index: int
    Languages: List[ComprehendDominantLanguage]


class ComprehendDominantLanguage(TypedDict, total=False):
    LanguageCode: str
    Score: float


class ComprehendBatchItemError(TypedDict, total=False):
    Index: int
    ErrorCode: str
    ErrorMessage: str


class ComprehendBatchDetectEntitiesResponse(TypedDict):
    ResultList: List[ComprehendBatchDetectEntitiesItemResult]
    ErrorList: List[ComprehendBatchItemError]


class ComprehendBatchDetectEntitiesItemResult(TypedDict, total=False):
    Index: int
    Entities: List[ComprehendEntity]


class ComprehendEntity(TypedDict, total=False):
    Score: float
    Type: str
    Text: str
    BeginOffset: int
    EndOffset: int


class ComprehendBatchDetectKeyPhrasesResponse(TypedDict):
    ResultList: List[ComprehendBatchDetectKeyPhrasesItemResult]
    ErrorList: List[ComprehendBatchItemError]


class ComprehendBatchDetectKeyPhrasesItemResult(TypedDict, total=False):
    Index: int
    KeyPhrases: List[ComprehendKeyPhrase]


class ComprehendKeyPhrase(TypedDict, total=False):
    Score: float
    Text: str
    BeginOffset: int
    EndOffset: int


class ComprehendBatchDetectSentimentResponse(TypedDict):
    ResultList: List[ComprehendBatchDetectSentimentItemResult]
    ErrorList: List[ComprehendBatchItemError]


class ComprehendBatchDetectSentimentItemResult(TypedDict, total=False):
    Index: int
    Sentiment: str
    SentimentScore: ComprehendSentimentScore


class ComprehendSentimentScore(TypedDict, total=False):
    Positive: float
    Negative: float
    Neutral: float
    Mixed: float


class ComprehendBatchDetectSyntaxResponse(TypedDict):
    ResultList: List[ComprehendBatchDetectSyntaxItemResult]
    ErrorList: List[ComprehendBatchItemError]


class ComprehendBatchDetectSyntaxItemResult(TypedDict, total=False):
    Index: int
    SyntaxTokens: List[ComprehendSyntaxToken]


class ComprehendSyntaxToken(TypedDict, total=False):
    TokenId: int
    Text: str
    BeginOffset: int
    EndOffset: int
    PartOfSpeech: ComprehendPartOfSpeechTag


class ComprehendPartOfSpeechTag(TypedDict, total=False):
    Tag: str
    Score: float


class _ComprehendTag(TypedDict):
    Key: str


class ComprehendTag(_ComprehendTag, total=False):
    Value: str


class ComprehendDocumentClassifierInputDataConfig(TypedDict):
    S3Uri: str


class ComprehendDocumentClassifierOutputDataConfig(TypedDict, total=False):
    S3Uri: str
    KmsKeyId: str


class ComprehendVpcConfig(TypedDict):
    SecurityGroupIds: List[str]
    Subnets: List[str]


class ComprehendCreateDocumentClassifierResponse(TypedDict, total=False):
    DocumentClassifierArn: str


class _ComprehendEntityRecognizerInputDataConfig(TypedDict):
    EntityTypes: List[ComprehendEntityTypesListItem]
    Documents: ComprehendEntityRecognizerDocuments


class ComprehendEntityRecognizerInputDataConfig(_ComprehendEntityRecognizerInputDataConfig, total=False):
    Annotations: ComprehendEntityRecognizerAnnotations
    EntityList: ComprehendEntityRecognizerEntityList


class ComprehendEntityTypesListItem(TypedDict):
    Type: str


class ComprehendEntityRecognizerDocuments(TypedDict):
    S3Uri: str


class ComprehendEntityRecognizerAnnotations(TypedDict):
    S3Uri: str


class ComprehendEntityRecognizerEntityList(TypedDict):
    S3Uri: str


class ComprehendCreateEntityRecognizerResponse(TypedDict, total=False):
    EntityRecognizerArn: str


class ComprehendDeleteDocumentClassifierResponse(TypedDict, total=False):
    pass


class ComprehendDeleteEntityRecognizerResponse(TypedDict, total=False):
    pass


class ComprehendDescribeDocumentClassificationJobResponse(TypedDict, total=False):
    DocumentClassificationJobProperties: ComprehendDocumentClassificationJobProperties


class ComprehendDocumentClassificationJobProperties(TypedDict, total=False):
    JobId: str
    JobName: str
    JobStatus: str
    Message: str
    SubmitTime: datetime.datetime
    EndTime: datetime.datetime
    DocumentClassifierArn: str
    InputDataConfig: ComprehendInputDataConfig
    OutputDataConfig: ComprehendOutputDataConfig
    DataAccessRoleArn: str
    VolumeKmsKeyId: str
    VpcConfig: ComprehendVpcConfig


class _ComprehendInputDataConfig(TypedDict):
    S3Uri: str


class ComprehendInputDataConfig(_ComprehendInputDataConfig, total=False):
    InputFormat: str


class _ComprehendOutputDataConfig(TypedDict):
    S3Uri: str


class ComprehendOutputDataConfig(_ComprehendOutputDataConfig, total=False):
    KmsKeyId: str


class ComprehendDescribeDocumentClassifierResponse(TypedDict, total=False):
    DocumentClassifierProperties: ComprehendDocumentClassifierProperties


class ComprehendDocumentClassifierProperties(TypedDict, total=False):
    DocumentClassifierArn: str
    LanguageCode: str
    Status: str
    Message: str
    SubmitTime: datetime.datetime
    EndTime: datetime.datetime
    TrainingStartTime: datetime.datetime
    TrainingEndTime: datetime.datetime
    InputDataConfig: ComprehendDocumentClassifierInputDataConfig
    OutputDataConfig: ComprehendDocumentClassifierOutputDataConfig
    ClassifierMetadata: ComprehendClassifierMetadata
    DataAccessRoleArn: str
    VolumeKmsKeyId: str
    VpcConfig: ComprehendVpcConfig


class ComprehendClassifierMetadata(TypedDict, total=False):
    NumberOfLabels: int
    NumberOfTrainedDocuments: int
    NumberOfTestDocuments: int
    EvaluationMetrics: ComprehendClassifierEvaluationMetrics


class ComprehendClassifierEvaluationMetrics(TypedDict, total=False):
    Accuracy: float
    Precision: float
    Recall: float
    F1Score: float


class ComprehendDescribeDominantLanguageDetectionJobResponse(TypedDict, total=False):
    DominantLanguageDetectionJobProperties: ComprehendDominantLanguageDetectionJobProperties


class ComprehendDominantLanguageDetectionJobProperties(TypedDict, total=False):
    JobId: str
    JobName: str
    JobStatus: str
    Message: str
    SubmitTime: datetime.datetime
    EndTime: datetime.datetime
    InputDataConfig: ComprehendInputDataConfig
    OutputDataConfig: ComprehendOutputDataConfig
    DataAccessRoleArn: str
    VolumeKmsKeyId: str
    VpcConfig: ComprehendVpcConfig


class ComprehendDescribeEntitiesDetectionJobResponse(TypedDict, total=False):
    EntitiesDetectionJobProperties: ComprehendEntitiesDetectionJobProperties


class ComprehendEntitiesDetectionJobProperties(TypedDict, total=False):
    JobId: str
    JobName: str
    JobStatus: str
    Message: str
    SubmitTime: datetime.datetime
    EndTime: datetime.datetime
    EntityRecognizerArn: str
    InputDataConfig: ComprehendInputDataConfig
    OutputDataConfig: ComprehendOutputDataConfig
    LanguageCode: str
    DataAccessRoleArn: str
    VolumeKmsKeyId: str
    VpcConfig: ComprehendVpcConfig


class ComprehendDescribeEntityRecognizerResponse(TypedDict, total=False):
    EntityRecognizerProperties: ComprehendEntityRecognizerProperties


class ComprehendEntityRecognizerProperties(TypedDict, total=False):
    EntityRecognizerArn: str
    LanguageCode: str
    Status: str
    Message: str
    SubmitTime: datetime.datetime
    EndTime: datetime.datetime
    TrainingStartTime: datetime.datetime
    TrainingEndTime: datetime.datetime
    InputDataConfig: ComprehendEntityRecognizerInputDataConfig
    RecognizerMetadata: ComprehendEntityRecognizerMetadata
    DataAccessRoleArn: str
    VolumeKmsKeyId: str
    VpcConfig: ComprehendVpcConfig


class ComprehendEntityRecognizerMetadata(TypedDict, total=False):
    NumberOfTrainedDocuments: int
    NumberOfTestDocuments: int
    EvaluationMetrics: ComprehendEntityRecognizerEvaluationMetrics
    EntityTypes: List[ComprehendEntityRecognizerMetadataEntityTypesListItem]


class ComprehendEntityRecognizerEvaluationMetrics(TypedDict, total=False):
    Precision: float
    Recall: float
    F1Score: float


class ComprehendEntityRecognizerMetadataEntityTypesListItem(TypedDict, total=False):
    Type: str


class ComprehendDescribeKeyPhrasesDetectionJobResponse(TypedDict, total=False):
    KeyPhrasesDetectionJobProperties: ComprehendKeyPhrasesDetectionJobProperties


class ComprehendKeyPhrasesDetectionJobProperties(TypedDict, total=False):
    JobId: str
    JobName: str
    JobStatus: str
    Message: str
    SubmitTime: datetime.datetime
    EndTime: datetime.datetime
    InputDataConfig: ComprehendInputDataConfig
    OutputDataConfig: ComprehendOutputDataConfig
    LanguageCode: str
    DataAccessRoleArn: str
    VolumeKmsKeyId: str
    VpcConfig: ComprehendVpcConfig


class ComprehendDescribeSentimentDetectionJobResponse(TypedDict, total=False):
    SentimentDetectionJobProperties: ComprehendSentimentDetectionJobProperties


class ComprehendSentimentDetectionJobProperties(TypedDict, total=False):
    JobId: str
    JobName: str
    JobStatus: str
    Message: str
    SubmitTime: datetime.datetime
    EndTime: datetime.datetime
    InputDataConfig: ComprehendInputDataConfig
    OutputDataConfig: ComprehendOutputDataConfig
    LanguageCode: str
    DataAccessRoleArn: str
    VolumeKmsKeyId: str
    VpcConfig: ComprehendVpcConfig


class ComprehendDescribeTopicsDetectionJobResponse(TypedDict, total=False):
    TopicsDetectionJobProperties: ComprehendTopicsDetectionJobProperties


class ComprehendTopicsDetectionJobProperties(TypedDict, total=False):
    JobId: str
    JobName: str
    JobStatus: str
    Message: str
    SubmitTime: datetime.datetime
    EndTime: datetime.datetime
    InputDataConfig: ComprehendInputDataConfig
    OutputDataConfig: ComprehendOutputDataConfig
    NumberOfTopics: int
    DataAccessRoleArn: str
    VolumeKmsKeyId: str
    VpcConfig: ComprehendVpcConfig


class ComprehendDetectDominantLanguageResponse(TypedDict, total=False):
    Languages: List[ComprehendDominantLanguage]


class ComprehendDetectEntitiesResponse(TypedDict, total=False):
    Entities: List[ComprehendEntity]


class ComprehendDetectKeyPhrasesResponse(TypedDict, total=False):
    KeyPhrases: List[ComprehendKeyPhrase]


class ComprehendDetectSentimentResponse(TypedDict, total=False):
    Sentiment: str
    SentimentScore: ComprehendSentimentScore


class ComprehendDetectSyntaxResponse(TypedDict, total=False):
    SyntaxTokens: List[ComprehendSyntaxToken]


class ComprehendDocumentClassificationJobFilter(TypedDict, total=False):
    JobName: str
    JobStatus: str
    SubmitTimeBefore: datetime.datetime
    SubmitTimeAfter: datetime.datetime


class ComprehendListDocumentClassificationJobsResponse(TypedDict, total=False):
    DocumentClassificationJobPropertiesList: List[ComprehendDocumentClassificationJobProperties]
    NextToken: str


class ComprehendDocumentClassifierFilter(TypedDict, total=False):
    Status: str
    SubmitTimeBefore: datetime.datetime
    SubmitTimeAfter: datetime.datetime


class ComprehendListDocumentClassifiersResponse(TypedDict, total=False):
    DocumentClassifierPropertiesList: List[ComprehendDocumentClassifierProperties]
    NextToken: str


class ComprehendDominantLanguageDetectionJobFilter(TypedDict, total=False):
    JobName: str
    JobStatus: str
    SubmitTimeBefore: datetime.datetime
    SubmitTimeAfter: datetime.datetime


class ComprehendListDominantLanguageDetectionJobsResponse(TypedDict, total=False):
    DominantLanguageDetectionJobPropertiesList: List[ComprehendDominantLanguageDetectionJobProperties]
    NextToken: str


class ComprehendEntitiesDetectionJobFilter(TypedDict, total=False):
    JobName: str
    JobStatus: str
    SubmitTimeBefore: datetime.datetime
    SubmitTimeAfter: datetime.datetime


class ComprehendListEntitiesDetectionJobsResponse(TypedDict, total=False):
    EntitiesDetectionJobPropertiesList: List[ComprehendEntitiesDetectionJobProperties]
    NextToken: str


class ComprehendEntityRecognizerFilter(TypedDict, total=False):
    Status: str
    SubmitTimeBefore: datetime.datetime
    SubmitTimeAfter: datetime.datetime


class ComprehendListEntityRecognizersResponse(TypedDict, total=False):
    EntityRecognizerPropertiesList: List[ComprehendEntityRecognizerProperties]
    NextToken: str


class ComprehendKeyPhrasesDetectionJobFilter(TypedDict, total=False):
    JobName: str
    JobStatus: str
    SubmitTimeBefore: datetime.datetime
    SubmitTimeAfter: datetime.datetime


class ComprehendListKeyPhrasesDetectionJobsResponse(TypedDict, total=False):
    KeyPhrasesDetectionJobPropertiesList: List[ComprehendKeyPhrasesDetectionJobProperties]
    NextToken: str


class ComprehendSentimentDetectionJobFilter(TypedDict, total=False):
    JobName: str
    JobStatus: str
    SubmitTimeBefore: datetime.datetime
    SubmitTimeAfter: datetime.datetime


class ComprehendListSentimentDetectionJobsResponse(TypedDict, total=False):
    SentimentDetectionJobPropertiesList: List[ComprehendSentimentDetectionJobProperties]
    NextToken: str


class ComprehendListTagsForResourceResponse(TypedDict, total=False):
    ResourceArn: str
    Tags: List[ComprehendTag]


class ComprehendTopicsDetectionJobFilter(TypedDict, total=False):
    JobName: str
    JobStatus: str
    SubmitTimeBefore: datetime.datetime
    SubmitTimeAfter: datetime.datetime


class ComprehendListTopicsDetectionJobsResponse(TypedDict, total=False):
    TopicsDetectionJobPropertiesList: List[ComprehendTopicsDetectionJobProperties]
    NextToken: str


class ComprehendStartDocumentClassificationJobResponse(TypedDict, total=False):
    JobId: str
    JobStatus: str


class ComprehendStartDominantLanguageDetectionJobResponse(TypedDict, total=False):
    JobId: str
    JobStatus: str


class ComprehendStartEntitiesDetectionJobResponse(TypedDict, total=False):
    JobId: str
    JobStatus: str


class ComprehendStartKeyPhrasesDetectionJobResponse(TypedDict, total=False):
    JobId: str
    JobStatus: str


class ComprehendStartSentimentDetectionJobResponse(TypedDict, total=False):
    JobId: str
    JobStatus: str


class ComprehendStartTopicsDetectionJobResponse(TypedDict, total=False):
    JobId: str
    JobStatus: str


class ComprehendStopDominantLanguageDetectionJobResponse(TypedDict, total=False):
    JobId: str
    JobStatus: str


class ComprehendStopEntitiesDetectionJobResponse(TypedDict, total=False):
    JobId: str
    JobStatus: str


class ComprehendStopKeyPhrasesDetectionJobResponse(TypedDict, total=False):
    JobId: str
    JobStatus: str


class ComprehendStopSentimentDetectionJobResponse(TypedDict, total=False):
    JobId: str
    JobStatus: str


class ComprehendStopTrainingDocumentClassifierResponse(TypedDict, total=False):
    pass


class ComprehendStopTrainingEntityRecognizerResponse(TypedDict, total=False):
    pass


class ComprehendTagResourceResponse(TypedDict, total=False):
    pass


class ComprehendUntagResourceResponse(TypedDict, total=False):
    pass


class ComprehendMedical(BaseClient):
    def detect_entities(self, *,
        Text: str
    ) -> ComprehendMedicalDetectEntitiesResponse: ...

    def detect_phi(self, *,
        Text: str
    ) -> ComprehendMedicalDetectPHIResponse: ...


class _ComprehendMedicalDetectEntitiesResponse(TypedDict):
    Entities: List[ComprehendMedicalEntity]


class ComprehendMedicalDetectEntitiesResponse(_ComprehendMedicalDetectEntitiesResponse, total=False):
    UnmappedAttributes: List[ComprehendMedicalUnmappedAttribute]
    PaginationToken: str


class ComprehendMedicalEntity(TypedDict, total=False):
    Id: int
    BeginOffset: int
    EndOffset: int
    Score: float
    Text: str
    Category: str
    Type: str
    Traits: List[ComprehendMedicalTrait]
    Attributes: List[ComprehendMedicalAttribute]


class ComprehendMedicalTrait(TypedDict, total=False):
    Name: str
    Score: float


class ComprehendMedicalAttribute(TypedDict, total=False):
    Type: str
    Score: float
    RelationshipScore: float
    Id: int
    BeginOffset: int
    EndOffset: int
    Text: str
    Traits: List[ComprehendMedicalTrait]


class ComprehendMedicalUnmappedAttribute(TypedDict, total=False):
    Type: str
    Attribute: ComprehendMedicalAttribute


class _ComprehendMedicalDetectPHIResponse(TypedDict):
    Entities: List[ComprehendMedicalEntity]


class ComprehendMedicalDetectPHIResponse(_ComprehendMedicalDetectPHIResponse, total=False):
    PaginationToken: str


class ConfigService(BaseClient):
    def batch_get_aggregate_resource_config(self, *,
        ConfigurationAggregatorName: str,
        ResourceIdentifiers: List[ConfigServiceAggregateResourceIdentifier]
    ) -> ConfigServiceBatchGetAggregateResourceConfigResponse: ...

    def batch_get_resource_config(self, *,
        resourceKeys: List[ConfigServiceResourceKey]
    ) -> ConfigServiceBatchGetResourceConfigResponse: ...

    def delete_aggregation_authorization(self, *,
        AuthorizedAccountId: str,
        AuthorizedAwsRegion: str
    ): ...

    def delete_config_rule(self, *,
        ConfigRuleName: str
    ): ...

    def delete_configuration_aggregator(self, *,
        ConfigurationAggregatorName: str
    ): ...

    def delete_configuration_recorder(self, *,
        ConfigurationRecorderName: str
    ): ...

    def delete_delivery_channel(self, *,
        DeliveryChannelName: str
    ): ...

    def delete_evaluation_results(self, *,
        ConfigRuleName: str
    ) -> ConfigServiceDeleteEvaluationResultsResponse: ...

    def delete_pending_aggregation_request(self, *,
        RequesterAccountId: str,
        RequesterAwsRegion: str
    ): ...

    def delete_remediation_configuration(self, *,
        ConfigRuleName: str,
        ResourceType: str = ...
    ) -> ConfigServiceDeleteRemediationConfigurationResponse: ...

    def delete_retention_configuration(self, *,
        RetentionConfigurationName: str
    ): ...

    def deliver_config_snapshot(self, *,
        deliveryChannelName: str
    ) -> ConfigServiceDeliverConfigSnapshotResponse: ...

    def describe_aggregate_compliance_by_config_rules(self, *,
        ConfigurationAggregatorName: str,
        Filters: ConfigServiceConfigRuleComplianceFilters = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> ConfigServiceDescribeAggregateComplianceByConfigRulesResponse: ...

    def describe_aggregation_authorizations(self, *,
        Limit: int = ...,
        NextToken: str = ...
    ) -> ConfigServiceDescribeAggregationAuthorizationsResponse: ...

    def describe_compliance_by_config_rule(self, *,
        ConfigRuleNames: List[str] = ...,
        ComplianceTypes: List[str] = ...,
        NextToken: str = ...
    ) -> ConfigServiceDescribeComplianceByConfigRuleResponse: ...

    def describe_compliance_by_resource(self, *,
        ResourceType: str = ...,
        ResourceId: str = ...,
        ComplianceTypes: List[str] = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> ConfigServiceDescribeComplianceByResourceResponse: ...

    def describe_config_rule_evaluation_status(self, *,
        ConfigRuleNames: List[str] = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> ConfigServiceDescribeConfigRuleEvaluationStatusResponse: ...

    def describe_config_rules(self, *,
        ConfigRuleNames: List[str] = ...,
        NextToken: str = ...
    ) -> ConfigServiceDescribeConfigRulesResponse: ...

    def describe_configuration_aggregator_sources_status(self, *,
        ConfigurationAggregatorName: str,
        UpdateStatus: List[str] = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> ConfigServiceDescribeConfigurationAggregatorSourcesStatusResponse: ...

    def describe_configuration_aggregators(self, *,
        ConfigurationAggregatorNames: List[str] = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> ConfigServiceDescribeConfigurationAggregatorsResponse: ...

    def describe_configuration_recorder_status(self, *,
        ConfigurationRecorderNames: List[str] = ...
    ) -> ConfigServiceDescribeConfigurationRecorderStatusResponse: ...

    def describe_configuration_recorders(self, *,
        ConfigurationRecorderNames: List[str] = ...
    ) -> ConfigServiceDescribeConfigurationRecordersResponse: ...

    def describe_delivery_channel_status(self, *,
        DeliveryChannelNames: List[str] = ...
    ) -> ConfigServiceDescribeDeliveryChannelStatusResponse: ...

    def describe_delivery_channels(self, *,
        DeliveryChannelNames: List[str] = ...
    ) -> ConfigServiceDescribeDeliveryChannelsResponse: ...

    def describe_pending_aggregation_requests(self, *,
        Limit: int = ...,
        NextToken: str = ...
    ) -> ConfigServiceDescribePendingAggregationRequestsResponse: ...

    def describe_remediation_configurations(self, *,
        ConfigRuleNames: List[str]
    ) -> ConfigServiceDescribeRemediationConfigurationsResponse: ...

    def describe_remediation_execution_status(self, *,
        ConfigRuleName: str,
        ResourceKeys: List[ConfigServiceResourceKey] = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> ConfigServiceDescribeRemediationExecutionStatusResponse: ...

    def describe_retention_configurations(self, *,
        RetentionConfigurationNames: List[str] = ...,
        NextToken: str = ...
    ) -> ConfigServiceDescribeRetentionConfigurationsResponse: ...

    def get_aggregate_compliance_details_by_config_rule(self, *,
        ConfigurationAggregatorName: str,
        ConfigRuleName: str,
        AccountId: str,
        AwsRegion: str,
        ComplianceType: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> ConfigServiceGetAggregateComplianceDetailsByConfigRuleResponse: ...

    def get_aggregate_config_rule_compliance_summary(self, *,
        ConfigurationAggregatorName: str,
        Filters: ConfigServiceConfigRuleComplianceSummaryFilters = ...,
        GroupByKey: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> ConfigServiceGetAggregateConfigRuleComplianceSummaryResponse: ...

    def get_aggregate_discovered_resource_counts(self, *,
        ConfigurationAggregatorName: str,
        Filters: ConfigServiceResourceCountFilters = ...,
        GroupByKey: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> ConfigServiceGetAggregateDiscoveredResourceCountsResponse: ...

    def get_aggregate_resource_config(self, *,
        ConfigurationAggregatorName: str,
        ResourceIdentifier: ConfigServiceAggregateResourceIdentifier
    ) -> ConfigServiceGetAggregateResourceConfigResponse: ...

    def get_compliance_details_by_config_rule(self, *,
        ConfigRuleName: str,
        ComplianceTypes: List[str] = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> ConfigServiceGetComplianceDetailsByConfigRuleResponse: ...

    def get_compliance_details_by_resource(self, *,
        ResourceType: str,
        ResourceId: str,
        ComplianceTypes: List[str] = ...,
        NextToken: str = ...
    ) -> ConfigServiceGetComplianceDetailsByResourceResponse: ...

    def get_compliance_summary_by_config_rule(self) -> ConfigServiceGetComplianceSummaryByConfigRuleResponse: ...

    def get_compliance_summary_by_resource_type(self, *,
        ResourceTypes: List[str] = ...
    ) -> ConfigServiceGetComplianceSummaryByResourceTypeResponse: ...

    def get_discovered_resource_counts(self, *,
        resourceTypes: List[str] = ...,
        limit: int = ...,
        nextToken: str = ...
    ) -> ConfigServiceGetDiscoveredResourceCountsResponse: ...

    def get_resource_config_history(self, *,
        resourceType: str,
        resourceId: str,
        laterTime: datetime.datetime = ...,
        earlierTime: datetime.datetime = ...,
        chronologicalOrder: str = ...,
        limit: int = ...,
        nextToken: str = ...
    ) -> ConfigServiceGetResourceConfigHistoryResponse: ...

    def list_aggregate_discovered_resources(self, *,
        ConfigurationAggregatorName: str,
        ResourceType: str,
        Filters: ConfigServiceResourceFilters = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> ConfigServiceListAggregateDiscoveredResourcesResponse: ...

    def list_discovered_resources(self, *,
        resourceType: str,
        resourceIds: List[str] = ...,
        resourceName: str = ...,
        limit: int = ...,
        includeDeletedResources: bool = ...,
        nextToken: str = ...
    ) -> ConfigServiceListDiscoveredResourcesResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str,
        Limit: int = ...,
        NextToken: str = ...
    ) -> ConfigServiceListTagsForResourceResponse: ...

    def put_aggregation_authorization(self, *,
        AuthorizedAccountId: str,
        AuthorizedAwsRegion: str,
        Tags: List[ConfigServiceTag] = ...
    ) -> ConfigServicePutAggregationAuthorizationResponse: ...

    def put_config_rule(self, *,
        ConfigRule: ConfigServiceConfigRule,
        Tags: List[ConfigServiceTag] = ...
    ): ...

    def put_configuration_aggregator(self, *,
        ConfigurationAggregatorName: str,
        AccountAggregationSources: List[ConfigServiceAccountAggregationSource] = ...,
        OrganizationAggregationSource: ConfigServiceOrganizationAggregationSource = ...,
        Tags: List[ConfigServiceTag] = ...
    ) -> ConfigServicePutConfigurationAggregatorResponse: ...

    def put_configuration_recorder(self, *,
        ConfigurationRecorder: ConfigServiceConfigurationRecorder
    ): ...

    def put_delivery_channel(self, *,
        DeliveryChannel: ConfigServiceDeliveryChannel
    ): ...

    def put_evaluations(self, *,
        ResultToken: str,
        Evaluations: List[ConfigServiceEvaluation] = ...,
        TestMode: bool = ...
    ) -> ConfigServicePutEvaluationsResponse: ...

    def put_remediation_configurations(self, *,
        RemediationConfigurations: List[ConfigServiceRemediationConfiguration]
    ) -> ConfigServicePutRemediationConfigurationsResponse: ...

    def put_retention_configuration(self, *,
        RetentionPeriodInDays: int
    ) -> ConfigServicePutRetentionConfigurationResponse: ...

    def select_resource_config(self, *,
        Expression: str,
        Limit: int = ...,
        NextToken: str = ...
    ) -> ConfigServiceSelectResourceConfigResponse: ...

    def start_config_rules_evaluation(self, *,
        ConfigRuleNames: List[str] = ...
    ) -> ConfigServiceStartConfigRulesEvaluationResponse: ...

    def start_configuration_recorder(self, *,
        ConfigurationRecorderName: str
    ): ...

    def start_remediation_execution(self, *,
        ConfigRuleName: str,
        ResourceKeys: List[ConfigServiceResourceKey]
    ) -> ConfigServiceStartRemediationExecutionResponse: ...

    def stop_configuration_recorder(self, *,
        ConfigurationRecorderName: str
    ): ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: List[ConfigServiceTag]
    ): ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ): ...


class _ConfigServiceAggregateResourceIdentifier(TypedDict):
    SourceAccountId: str
    SourceRegion: str
    ResourceId: str
    ResourceType: str


class ConfigServiceAggregateResourceIdentifier(_ConfigServiceAggregateResourceIdentifier, total=False):
    ResourceName: str


class ConfigServiceBatchGetAggregateResourceConfigResponse(TypedDict, total=False):
    BaseConfigurationItems: List[ConfigServiceBaseConfigurationItem]
    UnprocessedResourceIdentifiers: List[ConfigServiceAggregateResourceIdentifier]


class ConfigServiceBaseConfigurationItem(TypedDict, total=False):
    version: str
    accountId: str
    configurationItemCaptureTime: datetime.datetime
    configurationItemStatus: str
    configurationStateId: str
    arn: str
    resourceType: str
    resourceId: str
    resourceName: str
    awsRegion: str
    availabilityZone: str
    resourceCreationTime: datetime.datetime
    configuration: str
    supplementaryConfiguration: Dict[str, str]


class ConfigServiceResourceKey(TypedDict):
    resourceType: str
    resourceId: str


class ConfigServiceBatchGetResourceConfigResponse(TypedDict, total=False):
    baseConfigurationItems: List[ConfigServiceBaseConfigurationItem]
    unprocessedResourceKeys: List[ConfigServiceResourceKey]


class ConfigServiceDeleteEvaluationResultsResponse(TypedDict, total=False):
    pass


class ConfigServiceDeleteRemediationConfigurationResponse(TypedDict, total=False):
    pass


class ConfigServiceDeliverConfigSnapshotResponse(TypedDict, total=False):
    configSnapshotId: str


class ConfigServiceConfigRuleComplianceFilters(TypedDict, total=False):
    ConfigRuleName: str
    ComplianceType: str
    AccountId: str
    AwsRegion: str


class ConfigServiceDescribeAggregateComplianceByConfigRulesResponse(TypedDict, total=False):
    AggregateComplianceByConfigRules: List[ConfigServiceAggregateComplianceByConfigRule]
    NextToken: str


class ConfigServiceAggregateComplianceByConfigRule(TypedDict, total=False):
    ConfigRuleName: str
    Compliance: ConfigServiceCompliance
    AccountId: str
    AwsRegion: str


class ConfigServiceCompliance(TypedDict, total=False):
    ComplianceType: str
    ComplianceContributorCount: ConfigServiceComplianceContributorCount


class ConfigServiceComplianceContributorCount(TypedDict, total=False):
    CappedCount: int
    CapExceeded: bool


class ConfigServiceDescribeAggregationAuthorizationsResponse(TypedDict, total=False):
    AggregationAuthorizations: List[ConfigServiceAggregationAuthorization]
    NextToken: str


class ConfigServiceAggregationAuthorization(TypedDict, total=False):
    AggregationAuthorizationArn: str
    AuthorizedAccountId: str
    AuthorizedAwsRegion: str
    CreationTime: datetime.datetime


class ConfigServiceDescribeComplianceByConfigRuleResponse(TypedDict, total=False):
    ComplianceByConfigRules: List[ConfigServiceComplianceByConfigRule]
    NextToken: str


class ConfigServiceComplianceByConfigRule(TypedDict, total=False):
    ConfigRuleName: str
    Compliance: ConfigServiceCompliance


class ConfigServiceDescribeComplianceByResourceResponse(TypedDict, total=False):
    ComplianceByResources: List[ConfigServiceComplianceByResource]
    NextToken: str


class ConfigServiceComplianceByResource(TypedDict, total=False):
    ResourceType: str
    ResourceId: str
    Compliance: ConfigServiceCompliance


class ConfigServiceDescribeConfigRuleEvaluationStatusResponse(TypedDict, total=False):
    ConfigRulesEvaluationStatus: List[ConfigServiceConfigRuleEvaluationStatus]
    NextToken: str


class ConfigServiceConfigRuleEvaluationStatus(TypedDict, total=False):
    ConfigRuleName: str
    ConfigRuleArn: str
    ConfigRuleId: str
    LastSuccessfulInvocationTime: datetime.datetime
    LastFailedInvocationTime: datetime.datetime
    LastSuccessfulEvaluationTime: datetime.datetime
    LastFailedEvaluationTime: datetime.datetime
    FirstActivatedTime: datetime.datetime
    LastErrorCode: str
    LastErrorMessage: str
    FirstEvaluationStarted: bool


class ConfigServiceDescribeConfigRulesResponse(TypedDict, total=False):
    ConfigRules: List[ConfigServiceConfigRule]
    NextToken: str


class _ConfigServiceConfigRule(TypedDict):
    Source: ConfigServiceSource


class ConfigServiceConfigRule(_ConfigServiceConfigRule, total=False):
    ConfigRuleName: str
    ConfigRuleArn: str
    ConfigRuleId: str
    Description: str
    Scope: ConfigServiceScope
    InputParameters: str
    MaximumExecutionFrequency: str
    ConfigRuleState: str
    CreatedBy: str


class ConfigServiceScope(TypedDict, total=False):
    ComplianceResourceTypes: List[str]
    TagKey: str
    TagValue: str
    ComplianceResourceId: str


class _ConfigServiceSource(TypedDict):
    Owner: str
    SourceIdentifier: str


class ConfigServiceSource(_ConfigServiceSource, total=False):
    SourceDetails: List[ConfigServiceSourceDetail]


class ConfigServiceSourceDetail(TypedDict, total=False):
    EventSource: str
    MessageType: str
    MaximumExecutionFrequency: str


class ConfigServiceDescribeConfigurationAggregatorSourcesStatusResponse(TypedDict, total=False):
    AggregatedSourceStatusList: List[ConfigServiceAggregatedSourceStatus]
    NextToken: str


class ConfigServiceAggregatedSourceStatus(TypedDict, total=False):
    SourceId: str
    SourceType: str
    AwsRegion: str
    LastUpdateStatus: str
    LastUpdateTime: datetime.datetime
    LastErrorCode: str
    LastErrorMessage: str


class ConfigServiceDescribeConfigurationAggregatorsResponse(TypedDict, total=False):
    ConfigurationAggregators: List[ConfigServiceConfigurationAggregator]
    NextToken: str


class ConfigServiceConfigurationAggregator(TypedDict, total=False):
    ConfigurationAggregatorName: str
    ConfigurationAggregatorArn: str
    AccountAggregationSources: List[ConfigServiceAccountAggregationSource]
    OrganizationAggregationSource: ConfigServiceOrganizationAggregationSource
    CreationTime: datetime.datetime
    LastUpdatedTime: datetime.datetime


class _ConfigServiceAccountAggregationSource(TypedDict):
    AccountIds: List[str]


class ConfigServiceAccountAggregationSource(_ConfigServiceAccountAggregationSource, total=False):
    AllAwsRegions: bool
    AwsRegions: List[str]


class _ConfigServiceOrganizationAggregationSource(TypedDict):
    RoleArn: str


class ConfigServiceOrganizationAggregationSource(_ConfigServiceOrganizationAggregationSource, total=False):
    AwsRegions: List[str]
    AllAwsRegions: bool


class ConfigServiceDescribeConfigurationRecorderStatusResponse(TypedDict, total=False):
    ConfigurationRecordersStatus: List[ConfigServiceConfigurationRecorderStatus]


class ConfigServiceConfigurationRecorderStatus(TypedDict, total=False):
    name: str
    lastStartTime: datetime.datetime
    lastStopTime: datetime.datetime
    recording: bool
    lastStatus: str
    lastErrorCode: str
    lastErrorMessage: str
    lastStatusChangeTime: datetime.datetime


class ConfigServiceDescribeConfigurationRecordersResponse(TypedDict, total=False):
    ConfigurationRecorders: List[ConfigServiceConfigurationRecorder]


class ConfigServiceConfigurationRecorder(TypedDict, total=False):
    name: str
    roleARN: str
    recordingGroup: ConfigServiceRecordingGroup


class ConfigServiceRecordingGroup(TypedDict, total=False):
    allSupported: bool
    includeGlobalResourceTypes: bool
    resourceTypes: List[str]


class ConfigServiceDescribeDeliveryChannelStatusResponse(TypedDict, total=False):
    DeliveryChannelsStatus: List[ConfigServiceDeliveryChannelStatus]


class ConfigServiceDeliveryChannelStatus(TypedDict, total=False):
    name: str
    configSnapshotDeliveryInfo: ConfigServiceConfigExportDeliveryInfo
    configHistoryDeliveryInfo: ConfigServiceConfigExportDeliveryInfo
    configStreamDeliveryInfo: ConfigServiceConfigStreamDeliveryInfo


class ConfigServiceConfigExportDeliveryInfo(TypedDict, total=False):
    lastStatus: str
    lastErrorCode: str
    lastErrorMessage: str
    lastAttemptTime: datetime.datetime
    lastSuccessfulTime: datetime.datetime
    nextDeliveryTime: datetime.datetime


class ConfigServiceConfigStreamDeliveryInfo(TypedDict, total=False):
    lastStatus: str
    lastErrorCode: str
    lastErrorMessage: str
    lastStatusChangeTime: datetime.datetime


class ConfigServiceDescribeDeliveryChannelsResponse(TypedDict, total=False):
    DeliveryChannels: List[ConfigServiceDeliveryChannel]


class ConfigServiceDeliveryChannel(TypedDict, total=False):
    name: str
    s3BucketName: str
    s3KeyPrefix: str
    snsTopicARN: str
    configSnapshotDeliveryProperties: ConfigServiceConfigSnapshotDeliveryProperties


class ConfigServiceConfigSnapshotDeliveryProperties(TypedDict, total=False):
    deliveryFrequency: str


class ConfigServiceDescribePendingAggregationRequestsResponse(TypedDict, total=False):
    PendingAggregationRequests: List[ConfigServicePendingAggregationRequest]
    NextToken: str


class ConfigServicePendingAggregationRequest(TypedDict, total=False):
    RequesterAccountId: str
    RequesterAwsRegion: str


class ConfigServiceDescribeRemediationConfigurationsResponse(TypedDict, total=False):
    RemediationConfigurations: List[ConfigServiceRemediationConfiguration]


class _ConfigServiceRemediationConfiguration(TypedDict):
    ConfigRuleName: str
    TargetType: str
    TargetId: str


class ConfigServiceRemediationConfiguration(_ConfigServiceRemediationConfiguration, total=False):
    TargetVersion: str
    Parameters: Dict[str, ConfigServiceRemediationParameterValue]
    ResourceType: str


class ConfigServiceRemediationParameterValue(TypedDict, total=False):
    ResourceValue: ConfigServiceResourceValue
    StaticValue: ConfigServiceStaticValue


class ConfigServiceResourceValue(TypedDict, total=False):
    Value: str


class ConfigServiceStaticValue(TypedDict, total=False):
    Values: List[str]


class ConfigServiceDescribeRemediationExecutionStatusResponse(TypedDict, total=False):
    RemediationExecutionStatuses: List[ConfigServiceRemediationExecutionStatus]
    NextToken: str


class ConfigServiceRemediationExecutionStatus(TypedDict, total=False):
    ResourceKey: ConfigServiceResourceKey
    State: str
    StepDetails: List[ConfigServiceRemediationExecutionStep]
    InvocationTime: datetime.datetime
    LastUpdatedTime: datetime.datetime


class ConfigServiceRemediationExecutionStep(TypedDict, total=False):
    Name: str
    State: str
    ErrorMessage: str
    StartTime: datetime.datetime
    StopTime: datetime.datetime


class ConfigServiceDescribeRetentionConfigurationsResponse(TypedDict, total=False):
    RetentionConfigurations: List[ConfigServiceRetentionConfiguration]
    NextToken: str


class ConfigServiceRetentionConfiguration(TypedDict):
    Name: str
    RetentionPeriodInDays: int


class ConfigServiceGetAggregateComplianceDetailsByConfigRuleResponse(TypedDict, total=False):
    AggregateEvaluationResults: List[ConfigServiceAggregateEvaluationResult]
    NextToken: str


class ConfigServiceAggregateEvaluationResult(TypedDict, total=False):
    EvaluationResultIdentifier: ConfigServiceEvaluationResultIdentifier
    ComplianceType: str
    ResultRecordedTime: datetime.datetime
    ConfigRuleInvokedTime: datetime.datetime
    Annotation: str
    AccountId: str
    AwsRegion: str


class ConfigServiceEvaluationResultIdentifier(TypedDict, total=False):
    EvaluationResultQualifier: ConfigServiceEvaluationResultQualifier
    OrderingTimestamp: datetime.datetime


class ConfigServiceEvaluationResultQualifier(TypedDict, total=False):
    ConfigRuleName: str
    ResourceType: str
    ResourceId: str


class ConfigServiceConfigRuleComplianceSummaryFilters(TypedDict, total=False):
    AccountId: str
    AwsRegion: str


class ConfigServiceGetAggregateConfigRuleComplianceSummaryResponse(TypedDict, total=False):
    GroupByKey: str
    AggregateComplianceCounts: List[ConfigServiceAggregateComplianceCount]
    NextToken: str


class ConfigServiceAggregateComplianceCount(TypedDict, total=False):
    GroupName: str
    ComplianceSummary: ConfigServiceComplianceSummary


class ConfigServiceComplianceSummary(TypedDict, total=False):
    CompliantResourceCount: ConfigServiceComplianceContributorCount
    NonCompliantResourceCount: ConfigServiceComplianceContributorCount
    ComplianceSummaryTimestamp: datetime.datetime


class ConfigServiceResourceCountFilters(TypedDict, total=False):
    ResourceType: str
    AccountId: str
    Region: str


class _ConfigServiceGetAggregateDiscoveredResourceCountsResponse(TypedDict):
    TotalDiscoveredResources: int


class ConfigServiceGetAggregateDiscoveredResourceCountsResponse(_ConfigServiceGetAggregateDiscoveredResourceCountsResponse, total=False):
    GroupByKey: str
    GroupedResourceCounts: List[ConfigServiceGroupedResourceCount]
    NextToken: str


class ConfigServiceGroupedResourceCount(TypedDict):
    GroupName: str
    ResourceCount: int


class ConfigServiceGetAggregateResourceConfigResponse(TypedDict, total=False):
    ConfigurationItem: ConfigServiceConfigurationItem


class ConfigServiceConfigurationItem(TypedDict, total=False):
    version: str
    accountId: str
    configurationItemCaptureTime: datetime.datetime
    configurationItemStatus: str
    configurationStateId: str
    configurationItemMD5Hash: str
    arn: str
    resourceType: str
    resourceId: str
    resourceName: str
    awsRegion: str
    availabilityZone: str
    resourceCreationTime: datetime.datetime
    tags: Dict[str, str]
    relatedEvents: List[str]
    relationships: List[ConfigServiceRelationship]
    configuration: str
    supplementaryConfiguration: Dict[str, str]


class ConfigServiceRelationship(TypedDict, total=False):
    resourceType: str
    resourceId: str
    resourceName: str
    relationshipName: str


class ConfigServiceGetComplianceDetailsByConfigRuleResponse(TypedDict, total=False):
    EvaluationResults: List[ConfigServiceEvaluationResult]
    NextToken: str


class ConfigServiceEvaluationResult(TypedDict, total=False):
    EvaluationResultIdentifier: ConfigServiceEvaluationResultIdentifier
    ComplianceType: str
    ResultRecordedTime: datetime.datetime
    ConfigRuleInvokedTime: datetime.datetime
    Annotation: str
    ResultToken: str


class ConfigServiceGetComplianceDetailsByResourceResponse(TypedDict, total=False):
    EvaluationResults: List[ConfigServiceEvaluationResult]
    NextToken: str


class ConfigServiceGetComplianceSummaryByConfigRuleResponse(TypedDict, total=False):
    ComplianceSummary: ConfigServiceComplianceSummary


class ConfigServiceGetComplianceSummaryByResourceTypeResponse(TypedDict, total=False):
    ComplianceSummariesByResourceType: List[ConfigServiceComplianceSummaryByResourceType]


class ConfigServiceComplianceSummaryByResourceType(TypedDict, total=False):
    ResourceType: str
    ComplianceSummary: ConfigServiceComplianceSummary


class ConfigServiceGetDiscoveredResourceCountsResponse(TypedDict, total=False):
    totalDiscoveredResources: int
    resourceCounts: List[ConfigServiceResourceCount]
    nextToken: str


class ConfigServiceResourceCount(TypedDict, total=False):
    resourceType: str
    count: int


class ConfigServiceGetResourceConfigHistoryResponse(TypedDict, total=False):
    configurationItems: List[ConfigServiceConfigurationItem]
    nextToken: str


class ConfigServiceResourceFilters(TypedDict, total=False):
    AccountId: str
    ResourceId: str
    ResourceName: str
    Region: str


class ConfigServiceListAggregateDiscoveredResourcesResponse(TypedDict, total=False):
    ResourceIdentifiers: List[ConfigServiceAggregateResourceIdentifier]
    NextToken: str


class ConfigServiceListDiscoveredResourcesResponse(TypedDict, total=False):
    resourceIdentifiers: List[ConfigServiceResourceIdentifier]
    nextToken: str


class ConfigServiceResourceIdentifier(TypedDict, total=False):
    resourceType: str
    resourceId: str
    resourceName: str
    resourceDeletionTime: datetime.datetime


class ConfigServiceListTagsForResourceResponse(TypedDict, total=False):
    Tags: List[ConfigServiceTag]
    NextToken: str


class ConfigServiceTag(TypedDict, total=False):
    Key: str
    Value: str


class ConfigServicePutAggregationAuthorizationResponse(TypedDict, total=False):
    AggregationAuthorization: ConfigServiceAggregationAuthorization


class ConfigServicePutConfigurationAggregatorResponse(TypedDict, total=False):
    ConfigurationAggregator: ConfigServiceConfigurationAggregator


class _ConfigServiceEvaluation(TypedDict):
    ComplianceResourceType: str
    ComplianceResourceId: str
    ComplianceType: str
    OrderingTimestamp: datetime.datetime


class ConfigServiceEvaluation(_ConfigServiceEvaluation, total=False):
    Annotation: str


class ConfigServicePutEvaluationsResponse(TypedDict, total=False):
    FailedEvaluations: List[ConfigServiceEvaluation]


class ConfigServicePutRemediationConfigurationsResponse(TypedDict, total=False):
    FailedBatches: List[ConfigServiceFailedRemediationBatch]


class ConfigServiceFailedRemediationBatch(TypedDict, total=False):
    FailureMessage: str
    FailedItems: List[ConfigServiceRemediationConfiguration]


class ConfigServicePutRetentionConfigurationResponse(TypedDict, total=False):
    RetentionConfiguration: ConfigServiceRetentionConfiguration


class ConfigServiceSelectResourceConfigResponse(TypedDict, total=False):
    Results: List[str]
    QueryInfo: ConfigServiceQueryInfo
    NextToken: str


class ConfigServiceQueryInfo(TypedDict, total=False):
    SelectFields: List[ConfigServiceFieldInfo]


class ConfigServiceFieldInfo(TypedDict, total=False):
    Name: str


class ConfigServiceStartConfigRulesEvaluationResponse(TypedDict, total=False):
    pass


class ConfigServiceStartRemediationExecutionResponse(TypedDict, total=False):
    FailureMessage: str
    FailedItems: List[ConfigServiceResourceKey]


class Connect(BaseClient):
    def create_user(self, *,
        Username: str,
        PhoneConfig: ConnectUserPhoneConfig,
        SecurityProfileIds: List[str],
        RoutingProfileId: str,
        InstanceId: str,
        Password: str = ...,
        IdentityInfo: ConnectUserIdentityInfo = ...,
        DirectoryUserId: str = ...,
        HierarchyGroupId: str = ...
    ) -> ConnectCreateUserResponse: ...

    def delete_user(self, *,
        InstanceId: str,
        UserId: str
    ): ...

    def describe_user(self, *,
        UserId: str,
        InstanceId: str
    ) -> ConnectDescribeUserResponse: ...

    def describe_user_hierarchy_group(self, *,
        HierarchyGroupId: str,
        InstanceId: str
    ) -> ConnectDescribeUserHierarchyGroupResponse: ...

    def describe_user_hierarchy_structure(self, *,
        InstanceId: str
    ) -> ConnectDescribeUserHierarchyStructureResponse: ...

    def get_contact_attributes(self, *,
        InstanceId: str,
        InitialContactId: str
    ) -> ConnectGetContactAttributesResponse: ...

    def get_current_metric_data(self, *,
        InstanceId: str,
        Filters: ConnectFilters,
        CurrentMetrics: List[ConnectCurrentMetric],
        Groupings: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ConnectGetCurrentMetricDataResponse: ...

    def get_federation_token(self, *,
        InstanceId: str
    ) -> ConnectGetFederationTokenResponse: ...

    def get_metric_data(self, *,
        InstanceId: str,
        StartTime: datetime.datetime,
        EndTime: datetime.datetime,
        Filters: ConnectFilters,
        HistoricalMetrics: List[ConnectHistoricalMetric],
        Groupings: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ConnectGetMetricDataResponse: ...

    def list_routing_profiles(self, *,
        InstanceId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ConnectListRoutingProfilesResponse: ...

    def list_security_profiles(self, *,
        InstanceId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ConnectListSecurityProfilesResponse: ...

    def list_user_hierarchy_groups(self, *,
        InstanceId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ConnectListUserHierarchyGroupsResponse: ...

    def list_users(self, *,
        InstanceId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ConnectListUsersResponse: ...

    def start_outbound_voice_contact(self, *,
        DestinationPhoneNumber: str,
        ContactFlowId: str,
        InstanceId: str,
        ClientToken: str = ...,
        SourcePhoneNumber: str = ...,
        QueueId: str = ...,
        Attributes: Dict[str, str] = ...
    ) -> ConnectStartOutboundVoiceContactResponse: ...

    def stop_contact(self, *,
        ContactId: str,
        InstanceId: str
    ) -> ConnectStopContactResponse: ...

    def update_contact_attributes(self, *,
        InitialContactId: str,
        InstanceId: str,
        Attributes: Dict[str, str]
    ) -> ConnectUpdateContactAttributesResponse: ...

    def update_user_hierarchy(self, *,
        UserId: str,
        InstanceId: str,
        HierarchyGroupId: str = ...
    ): ...

    def update_user_identity_info(self, *,
        IdentityInfo: ConnectUserIdentityInfo,
        UserId: str,
        InstanceId: str
    ): ...

    def update_user_phone_config(self, *,
        PhoneConfig: ConnectUserPhoneConfig,
        UserId: str,
        InstanceId: str
    ): ...

    def update_user_routing_profile(self, *,
        RoutingProfileId: str,
        UserId: str,
        InstanceId: str
    ): ...

    def update_user_security_profiles(self, *,
        SecurityProfileIds: List[str],
        UserId: str,
        InstanceId: str
    ): ...


class ConnectUserIdentityInfo(TypedDict, total=False):
    FirstName: str
    LastName: str
    Email: str


class _ConnectUserPhoneConfig(TypedDict):
    PhoneType: str


class ConnectUserPhoneConfig(_ConnectUserPhoneConfig, total=False):
    AutoAccept: bool
    AfterContactWorkTimeLimit: int
    DeskPhoneNumber: str


class ConnectCreateUserResponse(TypedDict, total=False):
    UserId: str
    UserArn: str


class ConnectDescribeUserResponse(TypedDict, total=False):
    User: ConnectUser


class ConnectUser(TypedDict, total=False):
    Id: str
    Arn: str
    Username: str
    IdentityInfo: ConnectUserIdentityInfo
    PhoneConfig: ConnectUserPhoneConfig
    DirectoryUserId: str
    SecurityProfileIds: List[str]
    RoutingProfileId: str
    HierarchyGroupId: str


class ConnectDescribeUserHierarchyGroupResponse(TypedDict, total=False):
    HierarchyGroup: ConnectHierarchyGroup


class ConnectHierarchyGroup(TypedDict, total=False):
    Id: str
    Arn: str
    Name: str
    LevelId: str
    HierarchyPath: ConnectHierarchyPath


class ConnectHierarchyPath(TypedDict, total=False):
    LevelOne: ConnectHierarchyGroupSummary
    LevelTwo: ConnectHierarchyGroupSummary
    LevelThree: ConnectHierarchyGroupSummary
    LevelFour: ConnectHierarchyGroupSummary
    LevelFive: ConnectHierarchyGroupSummary


class ConnectHierarchyGroupSummary(TypedDict, total=False):
    Id: str
    Arn: str
    Name: str


class ConnectDescribeUserHierarchyStructureResponse(TypedDict, total=False):
    HierarchyStructure: ConnectHierarchyStructure


class ConnectHierarchyStructure(TypedDict, total=False):
    LevelOne: ConnectHierarchyLevel
    LevelTwo: ConnectHierarchyLevel
    LevelThree: ConnectHierarchyLevel
    LevelFour: ConnectHierarchyLevel
    LevelFive: ConnectHierarchyLevel


class ConnectHierarchyLevel(TypedDict, total=False):
    Id: str
    Arn: str
    Name: str


class ConnectGetContactAttributesResponse(TypedDict, total=False):
    Attributes: Dict[str, str]


class ConnectFilters(TypedDict, total=False):
    Queues: List[str]
    Channels: List[str]


class ConnectCurrentMetric(TypedDict, total=False):
    Name: str
    Unit: str


class ConnectGetCurrentMetricDataResponse(TypedDict, total=False):
    NextToken: str
    MetricResults: List[ConnectCurrentMetricResult]
    DataSnapshotTime: datetime.datetime


class ConnectCurrentMetricResult(TypedDict, total=False):
    Dimensions: ConnectDimensions
    Collections: List[ConnectCurrentMetricData]


class ConnectDimensions(TypedDict, total=False):
    Queue: ConnectQueueReference
    Channel: str


class ConnectQueueReference(TypedDict, total=False):
    Id: str
    Arn: str


class ConnectCurrentMetricData(TypedDict, total=False):
    Metric: ConnectCurrentMetric
    Value: float


class ConnectGetFederationTokenResponse(TypedDict, total=False):
    Credentials: ConnectCredentials


class ConnectCredentials(TypedDict, total=False):
    AccessToken: str
    AccessTokenExpiration: datetime.datetime
    RefreshToken: str
    RefreshTokenExpiration: datetime.datetime


class ConnectHistoricalMetric(TypedDict, total=False):
    Name: str
    Threshold: ConnectThreshold
    Statistic: str
    Unit: str


class ConnectThreshold(TypedDict, total=False):
    Comparison: str
    ThresholdValue: float


class ConnectGetMetricDataResponse(TypedDict, total=False):
    NextToken: str
    MetricResults: List[ConnectHistoricalMetricResult]


class ConnectHistoricalMetricResult(TypedDict, total=False):
    Dimensions: ConnectDimensions
    Collections: List[ConnectHistoricalMetricData]


class ConnectHistoricalMetricData(TypedDict, total=False):
    Metric: ConnectHistoricalMetric
    Value: float


class ConnectListRoutingProfilesResponse(TypedDict, total=False):
    RoutingProfileSummaryList: List[ConnectRoutingProfileSummary]
    NextToken: str


class ConnectRoutingProfileSummary(TypedDict, total=False):
    Id: str
    Arn: str
    Name: str


class ConnectListSecurityProfilesResponse(TypedDict, total=False):
    SecurityProfileSummaryList: List[ConnectSecurityProfileSummary]
    NextToken: str


class ConnectSecurityProfileSummary(TypedDict, total=False):
    Id: str
    Arn: str
    Name: str


class ConnectListUserHierarchyGroupsResponse(TypedDict, total=False):
    UserHierarchyGroupSummaryList: List[ConnectHierarchyGroupSummary]
    NextToken: str


class ConnectListUsersResponse(TypedDict, total=False):
    UserSummaryList: List[ConnectUserSummary]
    NextToken: str


class ConnectUserSummary(TypedDict, total=False):
    Id: str
    Arn: str
    Username: str


class ConnectStartOutboundVoiceContactResponse(TypedDict, total=False):
    ContactId: str


class ConnectStopContactResponse(TypedDict, total=False):
    pass


class ConnectUpdateContactAttributesResponse(TypedDict, total=False):
    pass


class CostandUsageReportService(BaseClient):
    def delete_report_definition(self, *,
        ReportName: str = ...
    ) -> CostandUsageReportServiceDeleteReportDefinitionResponse: ...

    def describe_report_definitions(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> CostandUsageReportServiceDescribeReportDefinitionsResponse: ...

    def put_report_definition(self, *,
        ReportDefinition: CostandUsageReportServiceReportDefinition
    ) -> CostandUsageReportServicePutReportDefinitionResponse: ...


class CostandUsageReportServiceDeleteReportDefinitionResponse(TypedDict, total=False):
    ResponseMessage: str


class CostandUsageReportServiceDescribeReportDefinitionsResponse(TypedDict, total=False):
    ReportDefinitions: List[CostandUsageReportServiceReportDefinition]
    NextToken: str


class _CostandUsageReportServiceReportDefinition(TypedDict):
    ReportName: str
    TimeUnit: str
    Format: str
    Compression: str
    AdditionalSchemaElements: List[str]
    S3Bucket: str
    S3Prefix: str
    S3Region: str


class CostandUsageReportServiceReportDefinition(_CostandUsageReportServiceReportDefinition, total=False):
    AdditionalArtifacts: List[str]
    RefreshClosedReports: bool
    ReportVersioning: str


class CostandUsageReportServicePutReportDefinitionResponse(TypedDict, total=False):
    pass


class DataPipeline(BaseClient):
    def activate_pipeline(self, *,
        pipelineId: str,
        parameterValues: List[DataPipelineParameterValue] = ...,
        startTimestamp: datetime.datetime = ...
    ) -> DataPipelineActivatePipelineOutput: ...

    def add_tags(self, *,
        pipelineId: str,
        tags: List[DataPipelineTag]
    ) -> DataPipelineAddTagsOutput: ...

    def create_pipeline(self, *,
        name: str,
        uniqueId: str,
        description: str = ...,
        tags: List[DataPipelineTag] = ...
    ) -> DataPipelineCreatePipelineOutput: ...

    def deactivate_pipeline(self, *,
        pipelineId: str,
        cancelActive: bool = ...
    ) -> DataPipelineDeactivatePipelineOutput: ...

    def delete_pipeline(self, *,
        pipelineId: str
    ): ...

    def describe_objects(self, *,
        pipelineId: str,
        objectIds: List[str],
        evaluateExpressions: bool = ...,
        marker: str = ...
    ) -> DataPipelineDescribeObjectsOutput: ...

    def describe_pipelines(self, *,
        pipelineIds: List[str]
    ) -> DataPipelineDescribePipelinesOutput: ...

    def evaluate_expression(self, *,
        pipelineId: str,
        objectId: str,
        expression: str
    ) -> DataPipelineEvaluateExpressionOutput: ...

    def get_pipeline_definition(self, *,
        pipelineId: str,
        version: str = ...
    ) -> DataPipelineGetPipelineDefinitionOutput: ...

    def list_pipelines(self, *,
        marker: str = ...
    ) -> DataPipelineListPipelinesOutput: ...

    def poll_for_task(self, *,
        workerGroup: str,
        hostname: str = ...,
        instanceIdentity: DataPipelineInstanceIdentity = ...
    ) -> DataPipelinePollForTaskOutput: ...

    def put_pipeline_definition(self, *,
        pipelineId: str,
        pipelineObjects: List[DataPipelinePipelineObject],
        parameterObjects: List[DataPipelineParameterObject] = ...,
        parameterValues: List[DataPipelineParameterValue] = ...
    ) -> DataPipelinePutPipelineDefinitionOutput: ...

    def query_objects(self, *,
        pipelineId: str,
        sphere: str,
        query: DataPipelineQuery = ...,
        marker: str = ...,
        limit: int = ...
    ) -> DataPipelineQueryObjectsOutput: ...

    def remove_tags(self, *,
        pipelineId: str,
        tagKeys: List[str]
    ) -> DataPipelineRemoveTagsOutput: ...

    def report_task_progress(self, *,
        taskId: str,
        fields: List[DataPipelineField] = ...
    ) -> DataPipelineReportTaskProgressOutput: ...

    def report_task_runner_heartbeat(self, *,
        taskrunnerId: str,
        workerGroup: str = ...,
        hostname: str = ...
    ) -> DataPipelineReportTaskRunnerHeartbeatOutput: ...

    def set_status(self, *,
        pipelineId: str,
        objectIds: List[str],
        status: str
    ): ...

    def set_task_status(self, *,
        taskId: str,
        taskStatus: str,
        errorId: str = ...,
        errorMessage: str = ...,
        errorStackTrace: str = ...
    ) -> DataPipelineSetTaskStatusOutput: ...

    def validate_pipeline_definition(self, *,
        pipelineId: str,
        pipelineObjects: List[DataPipelinePipelineObject],
        parameterObjects: List[DataPipelineParameterObject] = ...,
        parameterValues: List[DataPipelineParameterValue] = ...
    ) -> DataPipelineValidatePipelineDefinitionOutput: ...


class DataPipelineParameterValue(TypedDict):
    id: str
    stringValue: str


class DataPipelineActivatePipelineOutput(TypedDict, total=False):
    pass


class DataPipelineTag(TypedDict):
    key: str
    value: str


class DataPipelineAddTagsOutput(TypedDict, total=False):
    pass


class DataPipelineCreatePipelineOutput(TypedDict):
    pipelineId: str


class DataPipelineDeactivatePipelineOutput(TypedDict, total=False):
    pass


class _DataPipelineDescribeObjectsOutput(TypedDict):
    pipelineObjects: List[DataPipelinePipelineObject]


class DataPipelineDescribeObjectsOutput(_DataPipelineDescribeObjectsOutput, total=False):
    marker: str
    hasMoreResults: bool


class DataPipelinePipelineObject(TypedDict):
    id: str
    name: str
    fields: List[DataPipelineField]


class _DataPipelineField(TypedDict):
    key: str


class DataPipelineField(_DataPipelineField, total=False):
    stringValue: str
    refValue: str


class DataPipelineDescribePipelinesOutput(TypedDict):
    pipelineDescriptionList: List[DataPipelinePipelineDescription]


class _DataPipelinePipelineDescription(TypedDict):
    pipelineId: str
    name: str
    fields: List[DataPipelineField]


class DataPipelinePipelineDescription(_DataPipelinePipelineDescription, total=False):
    description: str
    tags: List[DataPipelineTag]


class DataPipelineEvaluateExpressionOutput(TypedDict):
    evaluatedExpression: str


class DataPipelineGetPipelineDefinitionOutput(TypedDict, total=False):
    pipelineObjects: List[DataPipelinePipelineObject]
    parameterObjects: List[DataPipelineParameterObject]
    parameterValues: List[DataPipelineParameterValue]


class DataPipelineParameterObject(TypedDict):
    id: str
    attributes: List[DataPipelineParameterAttribute]


class DataPipelineParameterAttribute(TypedDict):
    key: str
    stringValue: str


class _DataPipelineListPipelinesOutput(TypedDict):
    pipelineIdList: List[DataPipelinePipelineIdName]


class DataPipelineListPipelinesOutput(_DataPipelineListPipelinesOutput, total=False):
    marker: str
    hasMoreResults: bool


class DataPipelinePipelineIdName(TypedDict, total=False):
    id: str
    name: str


class DataPipelineInstanceIdentity(TypedDict, total=False):
    document: str
    signature: str


class DataPipelinePollForTaskOutput(TypedDict, total=False):
    taskObject: DataPipelineTaskObject


class DataPipelineTaskObject(TypedDict, total=False):
    taskId: str
    pipelineId: str
    attemptId: str
    objects: Dict[str, DataPipelinePipelineObject]


class _DataPipelinePutPipelineDefinitionOutput(TypedDict):
    errored: bool


class DataPipelinePutPipelineDefinitionOutput(_DataPipelinePutPipelineDefinitionOutput, total=False):
    validationErrors: List[DataPipelineValidationError]
    validationWarnings: List[DataPipelineValidationWarning]


class DataPipelineValidationError(TypedDict, total=False):
    id: str
    errors: List[str]


class DataPipelineValidationWarning(TypedDict, total=False):
    id: str
    warnings: List[str]


class DataPipelineQuery(TypedDict, total=False):
    selectors: List[DataPipelineSelector]


class DataPipelineSelector(TypedDict, total=False):
    fieldName: str
    operator: DataPipelineOperator


class DataPipelineOperator(TypedDict, total=False):
    type: str
    values: List[str]


class DataPipelineQueryObjectsOutput(TypedDict, total=False):
    ids: List[str]
    marker: str
    hasMoreResults: bool


class DataPipelineRemoveTagsOutput(TypedDict, total=False):
    pass


class DataPipelineReportTaskProgressOutput(TypedDict):
    canceled: bool


class DataPipelineReportTaskRunnerHeartbeatOutput(TypedDict):
    terminate: bool


class DataPipelineSetTaskStatusOutput(TypedDict, total=False):
    pass


class _DataPipelineValidatePipelineDefinitionOutput(TypedDict):
    errored: bool


class DataPipelineValidatePipelineDefinitionOutput(_DataPipelineValidatePipelineDefinitionOutput, total=False):
    validationErrors: List[DataPipelineValidationError]
    validationWarnings: List[DataPipelineValidationWarning]


class DataSync(BaseClient):
    def cancel_task_execution(self, *,
        TaskExecutionArn: str
    ) -> DataSyncCancelTaskExecutionResponse: ...

    def create_agent(self, *,
        ActivationKey: str,
        AgentName: str = ...,
        Tags: List[DataSyncTagListEntry] = ...
    ) -> DataSyncCreateAgentResponse: ...

    def create_location_efs(self, *,
        EfsFilesystemArn: str,
        Ec2Config: DataSyncEc2Config,
        Subdirectory: str = ...,
        Tags: List[DataSyncTagListEntry] = ...
    ) -> DataSyncCreateLocationEfsResponse: ...

    def create_location_nfs(self, *,
        Subdirectory: str,
        ServerHostname: str,
        OnPremConfig: DataSyncOnPremConfig,
        MountOptions: DataSyncNfsMountOptions = ...,
        Tags: List[DataSyncTagListEntry] = ...
    ) -> DataSyncCreateLocationNfsResponse: ...

    def create_location_s3(self, *,
        S3BucketArn: str,
        S3Config: DataSyncS3Config,
        Subdirectory: str = ...,
        Tags: List[DataSyncTagListEntry] = ...
    ) -> DataSyncCreateLocationS3Response: ...

    def create_task(self, *,
        SourceLocationArn: str,
        DestinationLocationArn: str,
        CloudWatchLogGroupArn: str = ...,
        Name: str = ...,
        Options: DataSyncOptions = ...,
        Excludes: List[DataSyncFilterRule] = ...,
        Tags: List[DataSyncTagListEntry] = ...
    ) -> DataSyncCreateTaskResponse: ...

    def delete_agent(self, *,
        AgentArn: str
    ) -> DataSyncDeleteAgentResponse: ...

    def delete_location(self, *,
        LocationArn: str
    ) -> DataSyncDeleteLocationResponse: ...

    def delete_task(self, *,
        TaskArn: str
    ) -> DataSyncDeleteTaskResponse: ...

    def describe_agent(self, *,
        AgentArn: str
    ) -> DataSyncDescribeAgentResponse: ...

    def describe_location_efs(self, *,
        LocationArn: str
    ) -> DataSyncDescribeLocationEfsResponse: ...

    def describe_location_nfs(self, *,
        LocationArn: str
    ) -> DataSyncDescribeLocationNfsResponse: ...

    def describe_location_s3(self, *,
        LocationArn: str
    ) -> DataSyncDescribeLocationS3Response: ...

    def describe_task(self, *,
        TaskArn: str
    ) -> DataSyncDescribeTaskResponse: ...

    def describe_task_execution(self, *,
        TaskExecutionArn: str
    ) -> DataSyncDescribeTaskExecutionResponse: ...

    def list_agents(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> DataSyncListAgentsResponse: ...

    def list_locations(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> DataSyncListLocationsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> DataSyncListTagsForResourceResponse: ...

    def list_task_executions(self, *,
        TaskArn: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> DataSyncListTaskExecutionsResponse: ...

    def list_tasks(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> DataSyncListTasksResponse: ...

    def start_task_execution(self, *,
        TaskArn: str,
        OverrideOptions: DataSyncOptions = ...,
        Includes: List[DataSyncFilterRule] = ...
    ) -> DataSyncStartTaskExecutionResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: List[DataSyncTagListEntry]
    ) -> DataSyncTagResourceResponse: ...

    def untag_resource(self, *,
        ResourceArn: str,
        Keys: List[str]
    ) -> DataSyncUntagResourceResponse: ...

    def update_agent(self, *,
        AgentArn: str,
        Name: str = ...
    ) -> DataSyncUpdateAgentResponse: ...

    def update_task(self, *,
        TaskArn: str,
        Options: DataSyncOptions = ...,
        Excludes: List[DataSyncFilterRule] = ...,
        Name: str = ...,
        CloudWatchLogGroupArn: str = ...
    ) -> DataSyncUpdateTaskResponse: ...


class DataSyncCancelTaskExecutionResponse(TypedDict, total=False):
    pass


class _DataSyncTagListEntry(TypedDict):
    Key: str


class DataSyncTagListEntry(_DataSyncTagListEntry, total=False):
    Value: str


class DataSyncCreateAgentResponse(TypedDict, total=False):
    AgentArn: str


class DataSyncEc2Config(TypedDict):
    SubnetArn: str
    SecurityGroupArns: List[str]


class DataSyncCreateLocationEfsResponse(TypedDict, total=False):
    LocationArn: str


class DataSyncOnPremConfig(TypedDict):
    AgentArns: List[str]


class DataSyncNfsMountOptions(TypedDict, total=False):
    Version: str


class DataSyncCreateLocationNfsResponse(TypedDict, total=False):
    LocationArn: str


class DataSyncS3Config(TypedDict):
    BucketAccessRoleArn: str


class DataSyncCreateLocationS3Response(TypedDict, total=False):
    LocationArn: str


class DataSyncOptions(TypedDict, total=False):
    VerifyMode: str
    Atime: str
    Mtime: str
    Uid: str
    Gid: str
    PreserveDeletedFiles: str
    PreserveDevices: str
    PosixPermissions: str
    BytesPerSecond: int


class DataSyncFilterRule(TypedDict, total=False):
    FilterType: str
    Value: str


class DataSyncCreateTaskResponse(TypedDict, total=False):
    TaskArn: str


class DataSyncDeleteAgentResponse(TypedDict, total=False):
    pass


class DataSyncDeleteLocationResponse(TypedDict, total=False):
    pass


class DataSyncDeleteTaskResponse(TypedDict, total=False):
    pass


class DataSyncDescribeAgentResponse(TypedDict, total=False):
    AgentArn: str
    Name: str
    Status: str
    LastConnectionTime: datetime.datetime
    CreationTime: datetime.datetime


class DataSyncDescribeLocationEfsResponse(TypedDict, total=False):
    LocationArn: str
    LocationUri: str
    Ec2Config: DataSyncEc2Config
    CreationTime: datetime.datetime


class DataSyncDescribeLocationNfsResponse(TypedDict, total=False):
    LocationArn: str
    LocationUri: str
    OnPremConfig: DataSyncOnPremConfig
    MountOptions: DataSyncNfsMountOptions
    CreationTime: datetime.datetime


class DataSyncDescribeLocationS3Response(TypedDict, total=False):
    LocationArn: str
    LocationUri: str
    S3Config: DataSyncS3Config
    CreationTime: datetime.datetime


class DataSyncDescribeTaskResponse(TypedDict, total=False):
    TaskArn: str
    Status: str
    Name: str
    CurrentTaskExecutionArn: str
    SourceLocationArn: str
    DestinationLocationArn: str
    CloudWatchLogGroupArn: str
    Options: DataSyncOptions
    Excludes: List[DataSyncFilterRule]
    ErrorCode: str
    ErrorDetail: str
    CreationTime: datetime.datetime


class DataSyncDescribeTaskExecutionResponse(TypedDict, total=False):
    TaskExecutionArn: str
    Status: str
    Options: DataSyncOptions
    Excludes: List[DataSyncFilterRule]
    Includes: List[DataSyncFilterRule]
    StartTime: datetime.datetime
    EstimatedFilesToTransfer: int
    EstimatedBytesToTransfer: int
    FilesTransferred: int
    BytesWritten: int
    BytesTransferred: int
    Result: DataSyncTaskExecutionResultDetail


class DataSyncTaskExecutionResultDetail(TypedDict, total=False):
    PrepareDuration: int
    PrepareStatus: str
    TransferDuration: int
    TransferStatus: str
    VerifyDuration: int
    VerifyStatus: str
    ErrorCode: str
    ErrorDetail: str


class DataSyncListAgentsResponse(TypedDict, total=False):
    Agents: List[DataSyncAgentListEntry]
    NextToken: str


class DataSyncAgentListEntry(TypedDict, total=False):
    AgentArn: str
    Name: str
    Status: str


class DataSyncListLocationsResponse(TypedDict, total=False):
    Locations: List[DataSyncLocationListEntry]
    NextToken: str


class DataSyncLocationListEntry(TypedDict, total=False):
    LocationArn: str
    LocationUri: str


class DataSyncListTagsForResourceResponse(TypedDict, total=False):
    Tags: List[DataSyncTagListEntry]
    NextToken: str


class DataSyncListTaskExecutionsResponse(TypedDict, total=False):
    TaskExecutions: List[DataSyncTaskExecutionListEntry]
    NextToken: str


class DataSyncTaskExecutionListEntry(TypedDict, total=False):
    TaskExecutionArn: str
    Status: str


class DataSyncListTasksResponse(TypedDict, total=False):
    Tasks: List[DataSyncTaskListEntry]
    NextToken: str


class DataSyncTaskListEntry(TypedDict, total=False):
    TaskArn: str
    Status: str
    Name: str


class DataSyncStartTaskExecutionResponse(TypedDict, total=False):
    TaskExecutionArn: str


class DataSyncTagResourceResponse(TypedDict, total=False):
    pass


class DataSyncUntagResourceResponse(TypedDict, total=False):
    pass


class DataSyncUpdateAgentResponse(TypedDict, total=False):
    pass


class DataSyncUpdateTaskResponse(TypedDict, total=False):
    pass


class DAX(BaseClient):
    def create_cluster(self, *,
        ClusterName: str,
        NodeType: str,
        ReplicationFactor: int,
        IamRoleArn: str,
        Description: str = ...,
        AvailabilityZones: List[str] = ...,
        SubnetGroupName: str = ...,
        SecurityGroupIds: List[str] = ...,
        PreferredMaintenanceWindow: str = ...,
        NotificationTopicArn: str = ...,
        ParameterGroupName: str = ...,
        Tags: List[DAXTag] = ...,
        SSESpecification: DAXSSESpecification = ...
    ) -> DAXCreateClusterResponse: ...

    def create_parameter_group(self, *,
        ParameterGroupName: str,
        Description: str = ...
    ) -> DAXCreateParameterGroupResponse: ...

    def create_subnet_group(self, *,
        SubnetGroupName: str,
        SubnetIds: List[str],
        Description: str = ...
    ) -> DAXCreateSubnetGroupResponse: ...

    def decrease_replication_factor(self, *,
        ClusterName: str,
        NewReplicationFactor: int,
        AvailabilityZones: List[str] = ...,
        NodeIdsToRemove: List[str] = ...
    ) -> DAXDecreaseReplicationFactorResponse: ...

    def delete_cluster(self, *,
        ClusterName: str
    ) -> DAXDeleteClusterResponse: ...

    def delete_parameter_group(self, *,
        ParameterGroupName: str
    ) -> DAXDeleteParameterGroupResponse: ...

    def delete_subnet_group(self, *,
        SubnetGroupName: str
    ) -> DAXDeleteSubnetGroupResponse: ...

    def describe_clusters(self, *,
        ClusterNames: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> DAXDescribeClustersResponse: ...

    def describe_default_parameters(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> DAXDescribeDefaultParametersResponse: ...

    def describe_events(self, *,
        SourceName: str = ...,
        SourceType: str = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        Duration: int = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> DAXDescribeEventsResponse: ...

    def describe_parameter_groups(self, *,
        ParameterGroupNames: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> DAXDescribeParameterGroupsResponse: ...

    def describe_parameters(self, *,
        ParameterGroupName: str,
        Source: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> DAXDescribeParametersResponse: ...

    def describe_subnet_groups(self, *,
        SubnetGroupNames: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> DAXDescribeSubnetGroupsResponse: ...

    def increase_replication_factor(self, *,
        ClusterName: str,
        NewReplicationFactor: int,
        AvailabilityZones: List[str] = ...
    ) -> DAXIncreaseReplicationFactorResponse: ...

    def list_tags(self, *,
        ResourceName: str,
        NextToken: str = ...
    ) -> DAXListTagsResponse: ...

    def reboot_node(self, *,
        ClusterName: str,
        NodeId: str
    ) -> DAXRebootNodeResponse: ...

    def tag_resource(self, *,
        ResourceName: str,
        Tags: List[DAXTag]
    ) -> DAXTagResourceResponse: ...

    def untag_resource(self, *,
        ResourceName: str,
        TagKeys: List[str]
    ) -> DAXUntagResourceResponse: ...

    def update_cluster(self, *,
        ClusterName: str,
        Description: str = ...,
        PreferredMaintenanceWindow: str = ...,
        NotificationTopicArn: str = ...,
        NotificationTopicStatus: str = ...,
        ParameterGroupName: str = ...,
        SecurityGroupIds: List[str] = ...
    ) -> DAXUpdateClusterResponse: ...

    def update_parameter_group(self, *,
        ParameterGroupName: str,
        ParameterNameValues: List[DAXParameterNameValue]
    ) -> DAXUpdateParameterGroupResponse: ...

    def update_subnet_group(self, *,
        SubnetGroupName: str,
        Description: str = ...,
        SubnetIds: List[str] = ...
    ) -> DAXUpdateSubnetGroupResponse: ...


class DAXTag(TypedDict, total=False):
    Key: str
    Value: str


class DAXSSESpecification(TypedDict):
    Enabled: bool


class DAXCreateClusterResponse(TypedDict, total=False):
    Cluster: DAXCluster


class DAXCluster(TypedDict, total=False):
    ClusterName: str
    Description: str
    ClusterArn: str
    TotalNodes: int
    ActiveNodes: int
    NodeType: str
    Status: str
    ClusterDiscoveryEndpoint: DAXEndpoint
    NodeIdsToRemove: List[str]
    Nodes: List[DAXNode]
    PreferredMaintenanceWindow: str
    NotificationConfiguration: DAXNotificationConfiguration
    SubnetGroup: str
    SecurityGroups: List[DAXSecurityGroupMembership]
    IamRoleArn: str
    ParameterGroup: DAXParameterGroupStatus
    SSEDescription: DAXSSEDescription


class DAXEndpoint(TypedDict, total=False):
    Address: str
    Port: int


class DAXNode(TypedDict, total=False):
    NodeId: str
    Endpoint: DAXEndpoint
    NodeCreateTime: datetime.datetime
    AvailabilityZone: str
    NodeStatus: str
    ParameterGroupStatus: str


class DAXNotificationConfiguration(TypedDict, total=False):
    TopicArn: str
    TopicStatus: str


class DAXSecurityGroupMembership(TypedDict, total=False):
    SecurityGroupIdentifier: str
    Status: str


class DAXParameterGroupStatus(TypedDict, total=False):
    ParameterGroupName: str
    ParameterApplyStatus: str
    NodeIdsToReboot: List[str]


class DAXSSEDescription(TypedDict, total=False):
    Status: str


class DAXCreateParameterGroupResponse(TypedDict, total=False):
    ParameterGroup: DAXParameterGroup


class DAXParameterGroup(TypedDict, total=False):
    ParameterGroupName: str
    Description: str


class DAXCreateSubnetGroupResponse(TypedDict, total=False):
    SubnetGroup: DAXSubnetGroup


class DAXSubnetGroup(TypedDict, total=False):
    SubnetGroupName: str
    Description: str
    VpcId: str
    Subnets: List[DAXSubnet]


class DAXSubnet(TypedDict, total=False):
    SubnetIdentifier: str
    SubnetAvailabilityZone: str


class DAXDecreaseReplicationFactorResponse(TypedDict, total=False):
    Cluster: DAXCluster


class DAXDeleteClusterResponse(TypedDict, total=False):
    Cluster: DAXCluster


class DAXDeleteParameterGroupResponse(TypedDict, total=False):
    DeletionMessage: str


class DAXDeleteSubnetGroupResponse(TypedDict, total=False):
    DeletionMessage: str


class DAXDescribeClustersResponse(TypedDict, total=False):
    NextToken: str
    Clusters: List[DAXCluster]


class DAXDescribeDefaultParametersResponse(TypedDict, total=False):
    NextToken: str
    Parameters: List[DAXParameter]


class DAXParameter(TypedDict, total=False):
    ParameterName: str
    ParameterType: str
    ParameterValue: str
    NodeTypeSpecificValues: List[DAXNodeTypeSpecificValue]
    Description: str
    Source: str
    DataType: str
    AllowedValues: str
    IsModifiable: str
    ChangeType: str


class DAXNodeTypeSpecificValue(TypedDict, total=False):
    NodeType: str
    Value: str


class DAXDescribeEventsResponse(TypedDict, total=False):
    NextToken: str
    Events: List[DAXEvent]


class DAXEvent(TypedDict, total=False):
    SourceName: str
    SourceType: str
    Message: str
    Date: datetime.datetime


class DAXDescribeParameterGroupsResponse(TypedDict, total=False):
    NextToken: str
    ParameterGroups: List[DAXParameterGroup]


class DAXDescribeParametersResponse(TypedDict, total=False):
    NextToken: str
    Parameters: List[DAXParameter]


class DAXDescribeSubnetGroupsResponse(TypedDict, total=False):
    NextToken: str
    SubnetGroups: List[DAXSubnetGroup]


class DAXIncreaseReplicationFactorResponse(TypedDict, total=False):
    Cluster: DAXCluster


class DAXListTagsResponse(TypedDict, total=False):
    Tags: List[DAXTag]
    NextToken: str


class DAXRebootNodeResponse(TypedDict, total=False):
    Cluster: DAXCluster


class DAXTagResourceResponse(TypedDict, total=False):
    Tags: List[DAXTag]


class DAXUntagResourceResponse(TypedDict, total=False):
    Tags: List[DAXTag]


class DAXUpdateClusterResponse(TypedDict, total=False):
    Cluster: DAXCluster


class DAXParameterNameValue(TypedDict, total=False):
    ParameterName: str
    ParameterValue: str


class DAXUpdateParameterGroupResponse(TypedDict, total=False):
    ParameterGroup: DAXParameterGroup


class DAXUpdateSubnetGroupResponse(TypedDict, total=False):
    SubnetGroup: DAXSubnetGroup


class DeviceFarm(BaseClient):
    def create_device_pool(self, *,
        projectArn: str,
        name: str,
        rules: List[DeviceFarmRule],
        description: str = ...,
        maxDevices: int = ...
    ) -> DeviceFarmCreateDevicePoolResult: ...

    def create_instance_profile(self, *,
        name: str,
        description: str = ...,
        packageCleanup: bool = ...,
        excludeAppPackagesFromCleanup: List[str] = ...,
        rebootAfterUse: bool = ...
    ) -> DeviceFarmCreateInstanceProfileResult: ...

    def create_network_profile(self, *,
        projectArn: str,
        name: str,
        description: str = ...,
        type: str = ...,
        uplinkBandwidthBits: int = ...,
        downlinkBandwidthBits: int = ...,
        uplinkDelayMs: int = ...,
        downlinkDelayMs: int = ...,
        uplinkJitterMs: int = ...,
        downlinkJitterMs: int = ...,
        uplinkLossPercent: int = ...,
        downlinkLossPercent: int = ...
    ) -> DeviceFarmCreateNetworkProfileResult: ...

    def create_project(self, *,
        name: str,
        defaultJobTimeoutMinutes: int = ...
    ) -> DeviceFarmCreateProjectResult: ...

    def create_remote_access_session(self, *,
        projectArn: str,
        deviceArn: str,
        instanceArn: str = ...,
        sshPublicKey: str = ...,
        remoteDebugEnabled: bool = ...,
        remoteRecordEnabled: bool = ...,
        remoteRecordAppArn: str = ...,
        name: str = ...,
        clientId: str = ...,
        configuration: DeviceFarmCreateRemoteAccessSessionConfiguration = ...,
        interactionMode: str = ...,
        skipAppResign: bool = ...
    ) -> DeviceFarmCreateRemoteAccessSessionResult: ...

    def create_upload(self, *,
        projectArn: str,
        name: str,
        type: str,
        contentType: str = ...
    ) -> DeviceFarmCreateUploadResult: ...

    def create_vpce_configuration(self, *,
        vpceConfigurationName: str,
        vpceServiceName: str,
        serviceDnsName: str,
        vpceConfigurationDescription: str = ...
    ) -> DeviceFarmCreateVPCEConfigurationResult: ...

    def delete_device_pool(self, *,
        arn: str
    ) -> DeviceFarmDeleteDevicePoolResult: ...

    def delete_instance_profile(self, *,
        arn: str
    ) -> DeviceFarmDeleteInstanceProfileResult: ...

    def delete_network_profile(self, *,
        arn: str
    ) -> DeviceFarmDeleteNetworkProfileResult: ...

    def delete_project(self, *,
        arn: str
    ) -> DeviceFarmDeleteProjectResult: ...

    def delete_remote_access_session(self, *,
        arn: str
    ) -> DeviceFarmDeleteRemoteAccessSessionResult: ...

    def delete_run(self, *,
        arn: str
    ) -> DeviceFarmDeleteRunResult: ...

    def delete_upload(self, *,
        arn: str
    ) -> DeviceFarmDeleteUploadResult: ...

    def delete_vpce_configuration(self, *,
        arn: str
    ) -> DeviceFarmDeleteVPCEConfigurationResult: ...

    def get_account_settings(self) -> DeviceFarmGetAccountSettingsResult: ...

    def get_device(self, *,
        arn: str
    ) -> DeviceFarmGetDeviceResult: ...

    def get_device_instance(self, *,
        arn: str
    ) -> DeviceFarmGetDeviceInstanceResult: ...

    def get_device_pool(self, *,
        arn: str
    ) -> DeviceFarmGetDevicePoolResult: ...

    def get_device_pool_compatibility(self, *,
        devicePoolArn: str,
        appArn: str = ...,
        testType: str = ...,
        test: DeviceFarmScheduleRunTest = ...,
        configuration: DeviceFarmScheduleRunConfiguration = ...
    ) -> DeviceFarmGetDevicePoolCompatibilityResult: ...

    def get_instance_profile(self, *,
        arn: str
    ) -> DeviceFarmGetInstanceProfileResult: ...

    def get_job(self, *,
        arn: str
    ) -> DeviceFarmGetJobResult: ...

    def get_network_profile(self, *,
        arn: str
    ) -> DeviceFarmGetNetworkProfileResult: ...

    def get_offering_status(self, *,
        nextToken: str = ...
    ) -> DeviceFarmGetOfferingStatusResult: ...

    def get_project(self, *,
        arn: str
    ) -> DeviceFarmGetProjectResult: ...

    def get_remote_access_session(self, *,
        arn: str
    ) -> DeviceFarmGetRemoteAccessSessionResult: ...

    def get_run(self, *,
        arn: str
    ) -> DeviceFarmGetRunResult: ...

    def get_suite(self, *,
        arn: str
    ) -> DeviceFarmGetSuiteResult: ...

    def get_test(self, *,
        arn: str
    ) -> DeviceFarmGetTestResult: ...

    def get_upload(self, *,
        arn: str
    ) -> DeviceFarmGetUploadResult: ...

    def get_vpce_configuration(self, *,
        arn: str
    ) -> DeviceFarmGetVPCEConfigurationResult: ...

    def install_to_remote_access_session(self, *,
        remoteAccessSessionArn: str,
        appArn: str
    ) -> DeviceFarmInstallToRemoteAccessSessionResult: ...

    def list_artifacts(self, *,
        arn: str,
        type: str,
        nextToken: str = ...
    ) -> DeviceFarmListArtifactsResult: ...

    def list_device_instances(self, *,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> DeviceFarmListDeviceInstancesResult: ...

    def list_device_pools(self, *,
        arn: str,
        type: str = ...,
        nextToken: str = ...
    ) -> DeviceFarmListDevicePoolsResult: ...

    def list_devices(self, *,
        arn: str = ...,
        nextToken: str = ...,
        filters: List[DeviceFarmDeviceFilter] = ...
    ) -> DeviceFarmListDevicesResult: ...

    def list_instance_profiles(self, *,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> DeviceFarmListInstanceProfilesResult: ...

    def list_jobs(self, *,
        arn: str,
        nextToken: str = ...
    ) -> DeviceFarmListJobsResult: ...

    def list_network_profiles(self, *,
        arn: str,
        type: str = ...,
        nextToken: str = ...
    ) -> DeviceFarmListNetworkProfilesResult: ...

    def list_offering_promotions(self, *,
        nextToken: str = ...
    ) -> DeviceFarmListOfferingPromotionsResult: ...

    def list_offering_transactions(self, *,
        nextToken: str = ...
    ) -> DeviceFarmListOfferingTransactionsResult: ...

    def list_offerings(self, *,
        nextToken: str = ...
    ) -> DeviceFarmListOfferingsResult: ...

    def list_projects(self, *,
        arn: str = ...,
        nextToken: str = ...
    ) -> DeviceFarmListProjectsResult: ...

    def list_remote_access_sessions(self, *,
        arn: str,
        nextToken: str = ...
    ) -> DeviceFarmListRemoteAccessSessionsResult: ...

    def list_runs(self, *,
        arn: str,
        nextToken: str = ...
    ) -> DeviceFarmListRunsResult: ...

    def list_samples(self, *,
        arn: str,
        nextToken: str = ...
    ) -> DeviceFarmListSamplesResult: ...

    def list_suites(self, *,
        arn: str,
        nextToken: str = ...
    ) -> DeviceFarmListSuitesResult: ...

    def list_tests(self, *,
        arn: str,
        nextToken: str = ...
    ) -> DeviceFarmListTestsResult: ...

    def list_unique_problems(self, *,
        arn: str,
        nextToken: str = ...
    ) -> DeviceFarmListUniqueProblemsResult: ...

    def list_uploads(self, *,
        arn: str,
        type: str = ...,
        nextToken: str = ...
    ) -> DeviceFarmListUploadsResult: ...

    def list_vpce_configurations(self, *,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> DeviceFarmListVPCEConfigurationsResult: ...

    def purchase_offering(self, *,
        offeringId: str = ...,
        quantity: int = ...,
        offeringPromotionId: str = ...
    ) -> DeviceFarmPurchaseOfferingResult: ...

    def renew_offering(self, *,
        offeringId: str = ...,
        quantity: int = ...
    ) -> DeviceFarmRenewOfferingResult: ...

    def schedule_run(self, *,
        projectArn: str,
        test: DeviceFarmScheduleRunTest,
        appArn: str = ...,
        devicePoolArn: str = ...,
        deviceSelectionConfiguration: DeviceFarmDeviceSelectionConfiguration = ...,
        name: str = ...,
        configuration: DeviceFarmScheduleRunConfiguration = ...,
        executionConfiguration: DeviceFarmExecutionConfiguration = ...
    ) -> DeviceFarmScheduleRunResult: ...

    def stop_job(self, *,
        arn: str
    ) -> DeviceFarmStopJobResult: ...

    def stop_remote_access_session(self, *,
        arn: str
    ) -> DeviceFarmStopRemoteAccessSessionResult: ...

    def stop_run(self, *,
        arn: str
    ) -> DeviceFarmStopRunResult: ...

    def update_device_instance(self, *,
        arn: str,
        profileArn: str = ...,
        labels: List[str] = ...
    ) -> DeviceFarmUpdateDeviceInstanceResult: ...

    def update_device_pool(self, *,
        arn: str,
        name: str = ...,
        description: str = ...,
        rules: List[DeviceFarmRule] = ...,
        maxDevices: int = ...,
        clearMaxDevices: bool = ...
    ) -> DeviceFarmUpdateDevicePoolResult: ...

    def update_instance_profile(self, *,
        arn: str,
        name: str = ...,
        description: str = ...,
        packageCleanup: bool = ...,
        excludeAppPackagesFromCleanup: List[str] = ...,
        rebootAfterUse: bool = ...
    ) -> DeviceFarmUpdateInstanceProfileResult: ...

    def update_network_profile(self, *,
        arn: str,
        name: str = ...,
        description: str = ...,
        type: str = ...,
        uplinkBandwidthBits: int = ...,
        downlinkBandwidthBits: int = ...,
        uplinkDelayMs: int = ...,
        downlinkDelayMs: int = ...,
        uplinkJitterMs: int = ...,
        downlinkJitterMs: int = ...,
        uplinkLossPercent: int = ...,
        downlinkLossPercent: int = ...
    ) -> DeviceFarmUpdateNetworkProfileResult: ...

    def update_project(self, *,
        arn: str,
        name: str = ...,
        defaultJobTimeoutMinutes: int = ...
    ) -> DeviceFarmUpdateProjectResult: ...

    def update_upload(self, *,
        arn: str,
        name: str = ...,
        contentType: str = ...,
        editContent: bool = ...
    ) -> DeviceFarmUpdateUploadResult: ...

    def update_vpce_configuration(self, *,
        arn: str,
        vpceConfigurationName: str = ...,
        vpceServiceName: str = ...,
        serviceDnsName: str = ...,
        vpceConfigurationDescription: str = ...
    ) -> DeviceFarmUpdateVPCEConfigurationResult: ...


class DeviceFarmRule(TypedDict, total=False):
    attribute: str
    operator: str
    value: str


class DeviceFarmCreateDevicePoolResult(TypedDict, total=False):
    devicePool: DeviceFarmDevicePool


class DeviceFarmDevicePool(TypedDict, total=False):
    arn: str
    name: str
    description: str
    type: str
    rules: List[DeviceFarmRule]
    maxDevices: int


class DeviceFarmCreateInstanceProfileResult(TypedDict, total=False):
    instanceProfile: DeviceFarmInstanceProfile


class DeviceFarmInstanceProfile(TypedDict, total=False):
    arn: str
    packageCleanup: bool
    excludeAppPackagesFromCleanup: List[str]
    rebootAfterUse: bool
    name: str
    description: str


class DeviceFarmCreateNetworkProfileResult(TypedDict, total=False):
    networkProfile: DeviceFarmNetworkProfile


class DeviceFarmNetworkProfile(TypedDict, total=False):
    arn: str
    name: str
    description: str
    type: str
    uplinkBandwidthBits: int
    downlinkBandwidthBits: int
    uplinkDelayMs: int
    downlinkDelayMs: int
    uplinkJitterMs: int
    downlinkJitterMs: int
    uplinkLossPercent: int
    downlinkLossPercent: int


class DeviceFarmCreateProjectResult(TypedDict, total=False):
    project: DeviceFarmProject


class DeviceFarmProject(TypedDict, total=False):
    arn: str
    name: str
    defaultJobTimeoutMinutes: int
    created: datetime.datetime


class DeviceFarmCreateRemoteAccessSessionConfiguration(TypedDict, total=False):
    billingMethod: str
    vpceConfigurationArns: List[str]


class DeviceFarmCreateRemoteAccessSessionResult(TypedDict, total=False):
    remoteAccessSession: DeviceFarmRemoteAccessSession


class DeviceFarmRemoteAccessSession(TypedDict, total=False):
    arn: str
    name: str
    created: datetime.datetime
    status: str
    result: str
    message: str
    started: datetime.datetime
    stopped: datetime.datetime
    device: DeviceFarmDevice
    instanceArn: str
    remoteDebugEnabled: bool
    remoteRecordEnabled: bool
    remoteRecordAppArn: str
    hostAddress: str
    clientId: str
    billingMethod: str
    deviceMinutes: DeviceFarmDeviceMinutes
    endpoint: str
    deviceUdid: str
    interactionMode: str
    skipAppResign: bool


class DeviceFarmDevice(TypedDict, total=False):
    arn: str
    name: str
    manufacturer: str
    model: str
    modelId: str
    formFactor: str
    platform: str
    os: str
    cpu: DeviceFarmCPU
    resolution: DeviceFarmResolution
    heapSize: int
    memory: int
    image: str
    carrier: str
    radio: str
    remoteAccessEnabled: bool
    remoteDebugEnabled: bool
    fleetType: str
    fleetName: str
    instances: List[DeviceFarmDeviceInstance]
    availability: str


class DeviceFarmCPU(TypedDict, total=False):
    frequency: str
    architecture: str
    clock: float


class DeviceFarmResolution(TypedDict, total=False):
    width: int
    height: int


class DeviceFarmDeviceInstance(TypedDict, total=False):
    arn: str
    deviceArn: str
    labels: List[str]
    status: str
    udid: str
    instanceProfile: DeviceFarmInstanceProfile


class DeviceFarmDeviceMinutes(TypedDict, total=False):
    total: float
    metered: float
    unmetered: float


class DeviceFarmCreateUploadResult(TypedDict, total=False):
    upload: DeviceFarmUpload


class DeviceFarmUpload(TypedDict, total=False):
    arn: str
    name: str
    created: datetime.datetime
    type: str
    status: str
    url: str
    metadata: str
    contentType: str
    message: str
    category: str


class DeviceFarmCreateVPCEConfigurationResult(TypedDict, total=False):
    vpceConfiguration: DeviceFarmVPCEConfiguration


class DeviceFarmVPCEConfiguration(TypedDict, total=False):
    arn: str
    vpceConfigurationName: str
    vpceServiceName: str
    serviceDnsName: str
    vpceConfigurationDescription: str


class DeviceFarmDeleteDevicePoolResult(TypedDict, total=False):
    pass


class DeviceFarmDeleteInstanceProfileResult(TypedDict, total=False):
    pass


class DeviceFarmDeleteNetworkProfileResult(TypedDict, total=False):
    pass


class DeviceFarmDeleteProjectResult(TypedDict, total=False):
    pass


class DeviceFarmDeleteRemoteAccessSessionResult(TypedDict, total=False):
    pass


class DeviceFarmDeleteRunResult(TypedDict, total=False):
    pass


class DeviceFarmDeleteUploadResult(TypedDict, total=False):
    pass


class DeviceFarmDeleteVPCEConfigurationResult(TypedDict, total=False):
    pass


class DeviceFarmGetAccountSettingsResult(TypedDict, total=False):
    accountSettings: DeviceFarmAccountSettings


class DeviceFarmAccountSettings(TypedDict, total=False):
    awsAccountNumber: str
    unmeteredDevices: Dict[str, int]
    unmeteredRemoteAccessDevices: Dict[str, int]
    maxJobTimeoutMinutes: int
    trialMinutes: DeviceFarmTrialMinutes
    maxSlots: Dict[str, int]
    defaultJobTimeoutMinutes: int
    skipAppResign: bool


class DeviceFarmTrialMinutes(TypedDict, total=False):
    total: float
    remaining: float


class DeviceFarmGetDeviceResult(TypedDict, total=False):
    device: DeviceFarmDevice


class DeviceFarmGetDeviceInstanceResult(TypedDict, total=False):
    deviceInstance: DeviceFarmDeviceInstance


class DeviceFarmGetDevicePoolResult(TypedDict, total=False):
    devicePool: DeviceFarmDevicePool


class _DeviceFarmScheduleRunTest(TypedDict):
    type: str


class DeviceFarmScheduleRunTest(_DeviceFarmScheduleRunTest, total=False):
    testPackageArn: str
    testSpecArn: str
    filter: str
    parameters: Dict[str, str]


class DeviceFarmScheduleRunConfiguration(TypedDict, total=False):
    extraDataPackageArn: str
    networkProfileArn: str
    locale: str
    location: DeviceFarmLocation
    vpceConfigurationArns: List[str]
    customerArtifactPaths: DeviceFarmCustomerArtifactPaths
    radios: DeviceFarmRadios
    auxiliaryApps: List[str]
    billingMethod: str


class DeviceFarmLocation(TypedDict):
    latitude: float
    longitude: float


class DeviceFarmCustomerArtifactPaths(TypedDict, total=False):
    iosPaths: List[str]
    androidPaths: List[str]
    deviceHostPaths: List[str]


class DeviceFarmRadios(TypedDict, total=False):
    wifi: bool
    bluetooth: bool
    nfc: bool
    gps: bool


class DeviceFarmGetDevicePoolCompatibilityResult(TypedDict, total=False):
    compatibleDevices: List[DeviceFarmDevicePoolCompatibilityResult]
    incompatibleDevices: List[DeviceFarmDevicePoolCompatibilityResult]


class DeviceFarmDevicePoolCompatibilityResult(TypedDict, total=False):
    device: DeviceFarmDevice
    compatible: bool
    incompatibilityMessages: List[DeviceFarmIncompatibilityMessage]


class DeviceFarmIncompatibilityMessage(TypedDict, total=False):
    message: str
    type: str


class DeviceFarmGetInstanceProfileResult(TypedDict, total=False):
    instanceProfile: DeviceFarmInstanceProfile


class DeviceFarmGetJobResult(TypedDict, total=False):
    job: DeviceFarmJob


class DeviceFarmJob(TypedDict, total=False):
    arn: str
    name: str
    type: str
    created: datetime.datetime
    status: str
    result: str
    started: datetime.datetime
    stopped: datetime.datetime
    counters: DeviceFarmCounters
    message: str
    device: DeviceFarmDevice
    instanceArn: str
    deviceMinutes: DeviceFarmDeviceMinutes
    videoEndpoint: str
    videoCapture: bool


class DeviceFarmCounters(TypedDict, total=False):
    total: int
    passed: int
    failed: int
    warned: int
    errored: int
    stopped: int
    skipped: int


class DeviceFarmGetNetworkProfileResult(TypedDict, total=False):
    networkProfile: DeviceFarmNetworkProfile


class DeviceFarmGetOfferingStatusResult(TypedDict, total=False):
    current: Dict[str, DeviceFarmOfferingStatus]
    nextPeriod: Dict[str, DeviceFarmOfferingStatus]
    nextToken: str


class DeviceFarmOfferingStatus(TypedDict, total=False):
    type: str
    offering: DeviceFarmOffering
    quantity: int
    effectiveOn: datetime.datetime


class DeviceFarmOffering(TypedDict, total=False):
    id: str
    description: str
    type: str
    platform: str
    recurringCharges: List[DeviceFarmRecurringCharge]


class DeviceFarmRecurringCharge(TypedDict, total=False):
    cost: DeviceFarmMonetaryAmount
    frequency: str


class DeviceFarmMonetaryAmount(TypedDict, total=False):
    amount: float
    currencyCode: str


class DeviceFarmGetProjectResult(TypedDict, total=False):
    project: DeviceFarmProject


class DeviceFarmGetRemoteAccessSessionResult(TypedDict, total=False):
    remoteAccessSession: DeviceFarmRemoteAccessSession


class DeviceFarmGetRunResult(TypedDict, total=False):
    run: DeviceFarmRun


class DeviceFarmRun(TypedDict, total=False):
    arn: str
    name: str
    type: str
    platform: str
    created: datetime.datetime
    status: str
    result: str
    started: datetime.datetime
    stopped: datetime.datetime
    counters: DeviceFarmCounters
    message: str
    totalJobs: int
    completedJobs: int
    billingMethod: str
    deviceMinutes: DeviceFarmDeviceMinutes
    networkProfile: DeviceFarmNetworkProfile
    parsingResultUrl: str
    resultCode: str
    seed: int
    appUpload: str
    eventCount: int
    jobTimeoutMinutes: int
    devicePoolArn: str
    locale: str
    radios: DeviceFarmRadios
    location: DeviceFarmLocation
    customerArtifactPaths: DeviceFarmCustomerArtifactPaths
    webUrl: str
    skipAppResign: bool
    testSpecArn: str
    deviceSelectionResult: DeviceFarmDeviceSelectionResult


class DeviceFarmDeviceSelectionResult(TypedDict, total=False):
    filters: List[DeviceFarmDeviceFilter]
    matchedDevicesCount: int
    maxDevices: int


class DeviceFarmDeviceFilter(TypedDict, total=False):
    attribute: str
    operator: str
    values: List[str]


class DeviceFarmGetSuiteResult(TypedDict, total=False):
    suite: DeviceFarmSuite


class DeviceFarmSuite(TypedDict, total=False):
    arn: str
    name: str
    type: str
    created: datetime.datetime
    status: str
    result: str
    started: datetime.datetime
    stopped: datetime.datetime
    counters: DeviceFarmCounters
    message: str
    deviceMinutes: DeviceFarmDeviceMinutes


class DeviceFarmGetTestResult(TypedDict, total=False):
    test: DeviceFarmTest


class DeviceFarmTest(TypedDict, total=False):
    arn: str
    name: str
    type: str
    created: datetime.datetime
    status: str
    result: str
    started: datetime.datetime
    stopped: datetime.datetime
    counters: DeviceFarmCounters
    message: str
    deviceMinutes: DeviceFarmDeviceMinutes


class DeviceFarmGetUploadResult(TypedDict, total=False):
    upload: DeviceFarmUpload


class DeviceFarmGetVPCEConfigurationResult(TypedDict, total=False):
    vpceConfiguration: DeviceFarmVPCEConfiguration


class DeviceFarmInstallToRemoteAccessSessionResult(TypedDict, total=False):
    appUpload: DeviceFarmUpload


class DeviceFarmListArtifactsResult(TypedDict, total=False):
    artifacts: List[DeviceFarmArtifact]
    nextToken: str


class DeviceFarmArtifact(TypedDict, total=False):
    arn: str
    name: str
    type: str
    extension: str
    url: str


class DeviceFarmListDeviceInstancesResult(TypedDict, total=False):
    deviceInstances: List[DeviceFarmDeviceInstance]
    nextToken: str


class DeviceFarmListDevicePoolsResult(TypedDict, total=False):
    devicePools: List[DeviceFarmDevicePool]
    nextToken: str


class DeviceFarmListDevicesResult(TypedDict, total=False):
    devices: List[DeviceFarmDevice]
    nextToken: str


class DeviceFarmListInstanceProfilesResult(TypedDict, total=False):
    instanceProfiles: List[DeviceFarmInstanceProfile]
    nextToken: str


class DeviceFarmListJobsResult(TypedDict, total=False):
    jobs: List[DeviceFarmJob]
    nextToken: str


class DeviceFarmListNetworkProfilesResult(TypedDict, total=False):
    networkProfiles: List[DeviceFarmNetworkProfile]
    nextToken: str


class DeviceFarmListOfferingPromotionsResult(TypedDict, total=False):
    offeringPromotions: List[DeviceFarmOfferingPromotion]
    nextToken: str


class DeviceFarmOfferingPromotion(TypedDict, total=False):
    id: str
    description: str


class DeviceFarmListOfferingTransactionsResult(TypedDict, total=False):
    offeringTransactions: List[DeviceFarmOfferingTransaction]
    nextToken: str


class DeviceFarmOfferingTransaction(TypedDict, total=False):
    offeringStatus: DeviceFarmOfferingStatus
    transactionId: str
    offeringPromotionId: str
    createdOn: datetime.datetime
    cost: DeviceFarmMonetaryAmount


class DeviceFarmListOfferingsResult(TypedDict, total=False):
    offerings: List[DeviceFarmOffering]
    nextToken: str


class DeviceFarmListProjectsResult(TypedDict, total=False):
    projects: List[DeviceFarmProject]
    nextToken: str


class DeviceFarmListRemoteAccessSessionsResult(TypedDict, total=False):
    remoteAccessSessions: List[DeviceFarmRemoteAccessSession]
    nextToken: str


class DeviceFarmListRunsResult(TypedDict, total=False):
    runs: List[DeviceFarmRun]
    nextToken: str


class DeviceFarmListSamplesResult(TypedDict, total=False):
    samples: List[DeviceFarmSample]
    nextToken: str


class DeviceFarmSample(TypedDict, total=False):
    arn: str
    type: str
    url: str


class DeviceFarmListSuitesResult(TypedDict, total=False):
    suites: List[DeviceFarmSuite]
    nextToken: str


class DeviceFarmListTestsResult(TypedDict, total=False):
    tests: List[DeviceFarmTest]
    nextToken: str


class DeviceFarmListUniqueProblemsResult(TypedDict, total=False):
    uniqueProblems: Dict[str, List[DeviceFarmUniqueProblem]]
    nextToken: str


class DeviceFarmUniqueProblem(TypedDict, total=False):
    message: str
    problems: List[DeviceFarmProblem]


class DeviceFarmProblem(TypedDict, total=False):
    run: DeviceFarmProblemDetail
    job: DeviceFarmProblemDetail
    suite: DeviceFarmProblemDetail
    test: DeviceFarmProblemDetail
    device: DeviceFarmDevice
    result: str
    message: str


class DeviceFarmProblemDetail(TypedDict, total=False):
    arn: str
    name: str


class DeviceFarmListUploadsResult(TypedDict, total=False):
    uploads: List[DeviceFarmUpload]
    nextToken: str


class DeviceFarmListVPCEConfigurationsResult(TypedDict, total=False):
    vpceConfigurations: List[DeviceFarmVPCEConfiguration]
    nextToken: str


class DeviceFarmPurchaseOfferingResult(TypedDict, total=False):
    offeringTransaction: DeviceFarmOfferingTransaction


class DeviceFarmRenewOfferingResult(TypedDict, total=False):
    offeringTransaction: DeviceFarmOfferingTransaction


class DeviceFarmDeviceSelectionConfiguration(TypedDict):
    filters: List[DeviceFarmDeviceFilter]
    maxDevices: int


class DeviceFarmExecutionConfiguration(TypedDict, total=False):
    jobTimeoutMinutes: int
    accountsCleanup: bool
    appPackagesCleanup: bool
    videoCapture: bool
    skipAppResign: bool


class DeviceFarmScheduleRunResult(TypedDict, total=False):
    run: DeviceFarmRun


class DeviceFarmStopJobResult(TypedDict, total=False):
    job: DeviceFarmJob


class DeviceFarmStopRemoteAccessSessionResult(TypedDict, total=False):
    remoteAccessSession: DeviceFarmRemoteAccessSession


class DeviceFarmStopRunResult(TypedDict, total=False):
    run: DeviceFarmRun


class DeviceFarmUpdateDeviceInstanceResult(TypedDict, total=False):
    deviceInstance: DeviceFarmDeviceInstance


class DeviceFarmUpdateDevicePoolResult(TypedDict, total=False):
    devicePool: DeviceFarmDevicePool


class DeviceFarmUpdateInstanceProfileResult(TypedDict, total=False):
    instanceProfile: DeviceFarmInstanceProfile


class DeviceFarmUpdateNetworkProfileResult(TypedDict, total=False):
    networkProfile: DeviceFarmNetworkProfile


class DeviceFarmUpdateProjectResult(TypedDict, total=False):
    project: DeviceFarmProject


class DeviceFarmUpdateUploadResult(TypedDict, total=False):
    upload: DeviceFarmUpload


class DeviceFarmUpdateVPCEConfigurationResult(TypedDict, total=False):
    vpceConfiguration: DeviceFarmVPCEConfiguration


class DirectConnect(BaseClient):
    def accept_direct_connect_gateway_association_proposal(self, *,
        directConnectGatewayId: str,
        proposalId: str,
        associatedGatewayOwnerAccount: str,
        overrideAllowedPrefixesToDirectConnectGateway: List[DirectConnectRouteFilterPrefix] = ...
    ) -> DirectConnectAcceptDirectConnectGatewayAssociationProposalResult: ...

    def allocate_connection_on_interconnect(self, *,
        bandwidth: str,
        connectionName: str,
        ownerAccount: str,
        interconnectId: str,
        vlan: int
    ) -> DirectConnectConnection: ...

    def allocate_hosted_connection(self, *,
        connectionId: str,
        ownerAccount: str,
        bandwidth: str,
        connectionName: str,
        vlan: int
    ) -> DirectConnectConnection: ...

    def allocate_private_virtual_interface(self, *,
        connectionId: str,
        ownerAccount: str,
        newPrivateVirtualInterfaceAllocation: DirectConnectNewPrivateVirtualInterfaceAllocation
    ) -> DirectConnectVirtualInterface: ...

    def allocate_public_virtual_interface(self, *,
        connectionId: str,
        ownerAccount: str,
        newPublicVirtualInterfaceAllocation: DirectConnectNewPublicVirtualInterfaceAllocation
    ) -> DirectConnectVirtualInterface: ...

    def allocate_transit_virtual_interface(self, *,
        connectionId: str,
        ownerAccount: str,
        newTransitVirtualInterfaceAllocation: DirectConnectNewTransitVirtualInterfaceAllocation
    ) -> DirectConnectAllocateTransitVirtualInterfaceResult: ...

    def associate_connection_with_lag(self, *,
        connectionId: str,
        lagId: str
    ) -> DirectConnectConnection: ...

    def associate_hosted_connection(self, *,
        connectionId: str,
        parentConnectionId: str
    ) -> DirectConnectConnection: ...

    def associate_virtual_interface(self, *,
        virtualInterfaceId: str,
        connectionId: str
    ) -> DirectConnectVirtualInterface: ...

    def confirm_connection(self, *,
        connectionId: str
    ) -> DirectConnectConfirmConnectionResponse: ...

    def confirm_private_virtual_interface(self, *,
        virtualInterfaceId: str,
        virtualGatewayId: str = ...,
        directConnectGatewayId: str = ...
    ) -> DirectConnectConfirmPrivateVirtualInterfaceResponse: ...

    def confirm_public_virtual_interface(self, *,
        virtualInterfaceId: str
    ) -> DirectConnectConfirmPublicVirtualInterfaceResponse: ...

    def confirm_transit_virtual_interface(self, *,
        virtualInterfaceId: str,
        directConnectGatewayId: str
    ) -> DirectConnectConfirmTransitVirtualInterfaceResponse: ...

    def create_bgp_peer(self, *,
        virtualInterfaceId: str = ...,
        newBGPPeer: DirectConnectNewBGPPeer = ...
    ) -> DirectConnectCreateBGPPeerResponse: ...

    def create_connection(self, *,
        location: str,
        bandwidth: str,
        connectionName: str,
        lagId: str = ...
    ) -> DirectConnectConnection: ...

    def create_direct_connect_gateway(self, *,
        directConnectGatewayName: str,
        amazonSideAsn: int = ...
    ) -> DirectConnectCreateDirectConnectGatewayResult: ...

    def create_direct_connect_gateway_association(self, *,
        directConnectGatewayId: str,
        gatewayId: str = ...,
        addAllowedPrefixesToDirectConnectGateway: List[DirectConnectRouteFilterPrefix] = ...,
        virtualGatewayId: str = ...
    ) -> DirectConnectCreateDirectConnectGatewayAssociationResult: ...

    def create_direct_connect_gateway_association_proposal(self, *,
        directConnectGatewayId: str,
        directConnectGatewayOwnerAccount: str,
        gatewayId: str,
        addAllowedPrefixesToDirectConnectGateway: List[DirectConnectRouteFilterPrefix] = ...,
        removeAllowedPrefixesToDirectConnectGateway: List[DirectConnectRouteFilterPrefix] = ...
    ) -> DirectConnectCreateDirectConnectGatewayAssociationProposalResult: ...

    def create_interconnect(self, *,
        interconnectName: str,
        bandwidth: str,
        location: str,
        lagId: str = ...
    ) -> DirectConnectInterconnect: ...

    def create_lag(self, *,
        numberOfConnections: int,
        location: str,
        connectionsBandwidth: str,
        lagName: str,
        connectionId: str = ...
    ) -> DirectConnectLag: ...

    def create_private_virtual_interface(self, *,
        connectionId: str,
        newPrivateVirtualInterface: DirectConnectNewPrivateVirtualInterface
    ) -> DirectConnectVirtualInterface: ...

    def create_public_virtual_interface(self, *,
        connectionId: str,
        newPublicVirtualInterface: DirectConnectNewPublicVirtualInterface
    ) -> DirectConnectVirtualInterface: ...

    def create_transit_virtual_interface(self, *,
        connectionId: str,
        newTransitVirtualInterface: DirectConnectNewTransitVirtualInterface
    ) -> DirectConnectCreateTransitVirtualInterfaceResult: ...

    def delete_bgp_peer(self, *,
        virtualInterfaceId: str = ...,
        asn: int = ...,
        customerAddress: str = ...,
        bgpPeerId: str = ...
    ) -> DirectConnectDeleteBGPPeerResponse: ...

    def delete_connection(self, *,
        connectionId: str
    ) -> DirectConnectConnection: ...

    def delete_direct_connect_gateway(self, *,
        directConnectGatewayId: str
    ) -> DirectConnectDeleteDirectConnectGatewayResult: ...

    def delete_direct_connect_gateway_association(self, *,
        associationId: str = ...,
        directConnectGatewayId: str = ...,
        virtualGatewayId: str = ...
    ) -> DirectConnectDeleteDirectConnectGatewayAssociationResult: ...

    def delete_direct_connect_gateway_association_proposal(self, *,
        proposalId: str
    ) -> DirectConnectDeleteDirectConnectGatewayAssociationProposalResult: ...

    def delete_interconnect(self, *,
        interconnectId: str
    ) -> DirectConnectDeleteInterconnectResponse: ...

    def delete_lag(self, *,
        lagId: str
    ) -> DirectConnectLag: ...

    def delete_virtual_interface(self, *,
        virtualInterfaceId: str
    ) -> DirectConnectDeleteVirtualInterfaceResponse: ...

    def describe_connection_loa(self, *,
        connectionId: str,
        providerName: str = ...,
        loaContentType: str = ...
    ) -> DirectConnectDescribeConnectionLoaResponse: ...

    def describe_connections(self, *,
        connectionId: str = ...
    ) -> DirectConnectConnections: ...

    def describe_connections_on_interconnect(self, *,
        interconnectId: str
    ) -> DirectConnectConnections: ...

    def describe_direct_connect_gateway_association_proposals(self, *,
        directConnectGatewayId: str = ...,
        proposalId: str = ...,
        associatedGatewayId: str = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> DirectConnectDescribeDirectConnectGatewayAssociationProposalsResult: ...

    def describe_direct_connect_gateway_associations(self, *,
        associationId: str = ...,
        associatedGatewayId: str = ...,
        directConnectGatewayId: str = ...,
        maxResults: int = ...,
        nextToken: str = ...,
        virtualGatewayId: str = ...
    ) -> DirectConnectDescribeDirectConnectGatewayAssociationsResult: ...

    def describe_direct_connect_gateway_attachments(self, *,
        directConnectGatewayId: str = ...,
        virtualInterfaceId: str = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> DirectConnectDescribeDirectConnectGatewayAttachmentsResult: ...

    def describe_direct_connect_gateways(self, *,
        directConnectGatewayId: str = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> DirectConnectDescribeDirectConnectGatewaysResult: ...

    def describe_hosted_connections(self, *,
        connectionId: str
    ) -> DirectConnectConnections: ...

    def describe_interconnect_loa(self, *,
        interconnectId: str,
        providerName: str = ...,
        loaContentType: str = ...
    ) -> DirectConnectDescribeInterconnectLoaResponse: ...

    def describe_interconnects(self, *,
        interconnectId: str = ...
    ) -> DirectConnectInterconnects: ...

    def describe_lags(self, *,
        lagId: str = ...
    ) -> DirectConnectLags: ...

    def describe_loa(self, *,
        connectionId: str,
        providerName: str = ...,
        loaContentType: str = ...
    ) -> DirectConnectLoa: ...

    def describe_locations(self) -> DirectConnectLocations: ...

    def describe_tags(self, *,
        resourceArns: List[str]
    ) -> DirectConnectDescribeTagsResponse: ...

    def describe_virtual_gateways(self) -> DirectConnectVirtualGateways: ...

    def describe_virtual_interfaces(self, *,
        connectionId: str = ...,
        virtualInterfaceId: str = ...
    ) -> DirectConnectVirtualInterfaces: ...

    def disassociate_connection_from_lag(self, *,
        connectionId: str,
        lagId: str
    ) -> DirectConnectConnection: ...

    def tag_resource(self, *,
        resourceArn: str,
        tags: List[DirectConnectTag]
    ) -> DirectConnectTagResourceResponse: ...

    def untag_resource(self, *,
        resourceArn: str,
        tagKeys: List[str]
    ) -> DirectConnectUntagResourceResponse: ...

    def update_direct_connect_gateway_association(self, *,
        associationId: str = ...,
        addAllowedPrefixesToDirectConnectGateway: List[DirectConnectRouteFilterPrefix] = ...,
        removeAllowedPrefixesToDirectConnectGateway: List[DirectConnectRouteFilterPrefix] = ...
    ) -> DirectConnectUpdateDirectConnectGatewayAssociationResult: ...

    def update_lag(self, *,
        lagId: str,
        lagName: str = ...,
        minimumLinks: int = ...
    ) -> DirectConnectLag: ...

    def update_virtual_interface_attributes(self, *,
        virtualInterfaceId: str,
        mtu: int = ...
    ) -> DirectConnectVirtualInterface: ...


class DirectConnectRouteFilterPrefix(TypedDict, total=False):
    cidr: str


class DirectConnectAcceptDirectConnectGatewayAssociationProposalResult(TypedDict, total=False):
    directConnectGatewayAssociation: DirectConnectDirectConnectGatewayAssociation


class DirectConnectDirectConnectGatewayAssociation(TypedDict, total=False):
    directConnectGatewayId: str
    directConnectGatewayOwnerAccount: str
    associationState: str
    stateChangeError: str
    associatedGateway: DirectConnectAssociatedGateway
    associationId: str
    allowedPrefixesToDirectConnectGateway: List[DirectConnectRouteFilterPrefix]
    virtualGatewayId: str
    virtualGatewayRegion: str
    virtualGatewayOwnerAccount: str


class DirectConnectAssociatedGateway(TypedDict, total=False):
    id: str
    type: str
    ownerAccount: str
    region: str


class DirectConnectConnection(TypedDict, total=False):
    ownerAccount: str
    connectionId: str
    connectionName: str
    connectionState: str
    region: str
    location: str
    bandwidth: str
    vlan: int
    partnerName: str
    loaIssueTime: datetime.datetime
    lagId: str
    awsDevice: str
    jumboFrameCapable: bool
    awsDeviceV2: str
    hasLogicalRedundancy: str


class _DirectConnectNewPrivateVirtualInterfaceAllocation(TypedDict):
    virtualInterfaceName: str
    vlan: int
    asn: int


class DirectConnectNewPrivateVirtualInterfaceAllocation(_DirectConnectNewPrivateVirtualInterfaceAllocation, total=False):
    mtu: int
    authKey: str
    amazonAddress: str
    addressFamily: str
    customerAddress: str


class DirectConnectVirtualInterface(TypedDict, total=False):
    ownerAccount: str
    virtualInterfaceId: str
    location: str
    connectionId: str
    virtualInterfaceType: str
    virtualInterfaceName: str
    vlan: int
    asn: int
    amazonSideAsn: int
    authKey: str
    amazonAddress: str
    customerAddress: str
    addressFamily: str
    virtualInterfaceState: str
    customerRouterConfig: str
    mtu: int
    jumboFrameCapable: bool
    virtualGatewayId: str
    directConnectGatewayId: str
    routeFilterPrefixes: List[DirectConnectRouteFilterPrefix]
    bgpPeers: List[DirectConnectBGPPeer]
    region: str
    awsDeviceV2: str


class DirectConnectBGPPeer(TypedDict, total=False):
    bgpPeerId: str
    asn: int
    authKey: str
    addressFamily: str
    amazonAddress: str
    customerAddress: str
    bgpPeerState: str
    bgpStatus: str
    awsDeviceV2: str


class _DirectConnectNewPublicVirtualInterfaceAllocation(TypedDict):
    virtualInterfaceName: str
    vlan: int
    asn: int


class DirectConnectNewPublicVirtualInterfaceAllocation(_DirectConnectNewPublicVirtualInterfaceAllocation, total=False):
    authKey: str
    amazonAddress: str
    customerAddress: str
    addressFamily: str
    routeFilterPrefixes: List[DirectConnectRouteFilterPrefix]


class DirectConnectNewTransitVirtualInterfaceAllocation(TypedDict, total=False):
    virtualInterfaceName: str
    vlan: int
    asn: int
    mtu: int
    authKey: str
    amazonAddress: str
    customerAddress: str
    addressFamily: str


class DirectConnectAllocateTransitVirtualInterfaceResult(TypedDict, total=False):
    virtualInterface: DirectConnectVirtualInterface


class DirectConnectConfirmConnectionResponse(TypedDict, total=False):
    connectionState: str


class DirectConnectConfirmPrivateVirtualInterfaceResponse(TypedDict, total=False):
    virtualInterfaceState: str


class DirectConnectConfirmPublicVirtualInterfaceResponse(TypedDict, total=False):
    virtualInterfaceState: str


class DirectConnectConfirmTransitVirtualInterfaceResponse(TypedDict, total=False):
    virtualInterfaceState: str


class DirectConnectNewBGPPeer(TypedDict, total=False):
    asn: int
    authKey: str
    addressFamily: str
    amazonAddress: str
    customerAddress: str


class DirectConnectCreateBGPPeerResponse(TypedDict, total=False):
    virtualInterface: DirectConnectVirtualInterface


class DirectConnectCreateDirectConnectGatewayResult(TypedDict, total=False):
    directConnectGateway: DirectConnectDirectConnectGateway


class DirectConnectDirectConnectGateway(TypedDict, total=False):
    directConnectGatewayId: str
    directConnectGatewayName: str
    amazonSideAsn: int
    ownerAccount: str
    directConnectGatewayState: str
    stateChangeError: str


class DirectConnectCreateDirectConnectGatewayAssociationResult(TypedDict, total=False):
    directConnectGatewayAssociation: DirectConnectDirectConnectGatewayAssociation


class DirectConnectCreateDirectConnectGatewayAssociationProposalResult(TypedDict, total=False):
    directConnectGatewayAssociationProposal: DirectConnectDirectConnectGatewayAssociationProposal


class DirectConnectDirectConnectGatewayAssociationProposal(TypedDict, total=False):
    proposalId: str
    directConnectGatewayId: str
    directConnectGatewayOwnerAccount: str
    proposalState: str
    associatedGateway: DirectConnectAssociatedGateway
    existingAllowedPrefixesToDirectConnectGateway: List[DirectConnectRouteFilterPrefix]
    requestedAllowedPrefixesToDirectConnectGateway: List[DirectConnectRouteFilterPrefix]


class DirectConnectInterconnect(TypedDict, total=False):
    interconnectId: str
    interconnectName: str
    interconnectState: str
    region: str
    location: str
    bandwidth: str
    loaIssueTime: datetime.datetime
    lagId: str
    awsDevice: str
    jumboFrameCapable: bool
    awsDeviceV2: str
    hasLogicalRedundancy: str


class DirectConnectLag(TypedDict, total=False):
    connectionsBandwidth: str
    numberOfConnections: int
    lagId: str
    ownerAccount: str
    lagName: str
    lagState: str
    location: str
    region: str
    minimumLinks: int
    awsDevice: str
    awsDeviceV2: str
    connections: List[DirectConnectConnection]
    allowsHostedConnections: bool
    jumboFrameCapable: bool
    hasLogicalRedundancy: str


class _DirectConnectNewPrivateVirtualInterface(TypedDict):
    virtualInterfaceName: str
    vlan: int
    asn: int


class DirectConnectNewPrivateVirtualInterface(_DirectConnectNewPrivateVirtualInterface, total=False):
    mtu: int
    authKey: str
    amazonAddress: str
    customerAddress: str
    addressFamily: str
    virtualGatewayId: str
    directConnectGatewayId: str


class _DirectConnectNewPublicVirtualInterface(TypedDict):
    virtualInterfaceName: str
    vlan: int
    asn: int


class DirectConnectNewPublicVirtualInterface(_DirectConnectNewPublicVirtualInterface, total=False):
    authKey: str
    amazonAddress: str
    customerAddress: str
    addressFamily: str
    routeFilterPrefixes: List[DirectConnectRouteFilterPrefix]


class DirectConnectNewTransitVirtualInterface(TypedDict, total=False):
    virtualInterfaceName: str
    vlan: int
    asn: int
    mtu: int
    authKey: str
    amazonAddress: str
    customerAddress: str
    addressFamily: str
    directConnectGatewayId: str


class DirectConnectCreateTransitVirtualInterfaceResult(TypedDict, total=False):
    virtualInterface: DirectConnectVirtualInterface


class DirectConnectDeleteBGPPeerResponse(TypedDict, total=False):
    virtualInterface: DirectConnectVirtualInterface


class DirectConnectDeleteDirectConnectGatewayResult(TypedDict, total=False):
    directConnectGateway: DirectConnectDirectConnectGateway


class DirectConnectDeleteDirectConnectGatewayAssociationResult(TypedDict, total=False):
    directConnectGatewayAssociation: DirectConnectDirectConnectGatewayAssociation


class DirectConnectDeleteDirectConnectGatewayAssociationProposalResult(TypedDict, total=False):
    directConnectGatewayAssociationProposal: DirectConnectDirectConnectGatewayAssociationProposal


class DirectConnectDeleteInterconnectResponse(TypedDict, total=False):
    interconnectState: str


class DirectConnectDeleteVirtualInterfaceResponse(TypedDict, total=False):
    virtualInterfaceState: str


class DirectConnectDescribeConnectionLoaResponse(TypedDict, total=False):
    loa: DirectConnectLoa


class DirectConnectLoa(TypedDict, total=False):
    loaContent: bytes
    loaContentType: str


class DirectConnectConnections(TypedDict, total=False):
    connections: List[DirectConnectConnection]


class DirectConnectDescribeDirectConnectGatewayAssociationProposalsResult(TypedDict, total=False):
    directConnectGatewayAssociationProposals: List[DirectConnectDirectConnectGatewayAssociationProposal]
    nextToken: str


class DirectConnectDescribeDirectConnectGatewayAssociationsResult(TypedDict, total=False):
    directConnectGatewayAssociations: List[DirectConnectDirectConnectGatewayAssociation]
    nextToken: str


class DirectConnectDescribeDirectConnectGatewayAttachmentsResult(TypedDict, total=False):
    directConnectGatewayAttachments: List[DirectConnectDirectConnectGatewayAttachment]
    nextToken: str


class DirectConnectDirectConnectGatewayAttachment(TypedDict, total=False):
    directConnectGatewayId: str
    virtualInterfaceId: str
    virtualInterfaceRegion: str
    virtualInterfaceOwnerAccount: str
    attachmentState: str
    attachmentType: str
    stateChangeError: str


class DirectConnectDescribeDirectConnectGatewaysResult(TypedDict, total=False):
    directConnectGateways: List[DirectConnectDirectConnectGateway]
    nextToken: str


class DirectConnectDescribeInterconnectLoaResponse(TypedDict, total=False):
    loa: DirectConnectLoa


class DirectConnectInterconnects(TypedDict, total=False):
    interconnects: List[DirectConnectInterconnect]


class DirectConnectLags(TypedDict, total=False):
    lags: List[DirectConnectLag]


class DirectConnectLocations(TypedDict, total=False):
    locations: List[DirectConnectLocation]


class DirectConnectLocation(TypedDict, total=False):
    locationCode: str
    locationName: str
    region: str
    availablePortSpeeds: List[str]


class DirectConnectDescribeTagsResponse(TypedDict, total=False):
    resourceTags: List[DirectConnectResourceTag]


class DirectConnectResourceTag(TypedDict, total=False):
    resourceArn: str
    tags: List[DirectConnectTag]


class _DirectConnectTag(TypedDict):
    key: str


class DirectConnectTag(_DirectConnectTag, total=False):
    value: str


class DirectConnectVirtualGateways(TypedDict, total=False):
    virtualGateways: List[DirectConnectVirtualGateway]


class DirectConnectVirtualGateway(TypedDict, total=False):
    virtualGatewayId: str
    virtualGatewayState: str


class DirectConnectVirtualInterfaces(TypedDict, total=False):
    virtualInterfaces: List[DirectConnectVirtualInterface]


class DirectConnectTagResourceResponse(TypedDict, total=False):
    pass


class DirectConnectUntagResourceResponse(TypedDict, total=False):
    pass


class DirectConnectUpdateDirectConnectGatewayAssociationResult(TypedDict, total=False):
    directConnectGatewayAssociation: DirectConnectDirectConnectGatewayAssociation


class ApplicationDiscoveryService(BaseClient):
    def associate_configuration_items_to_application(self, *,
        applicationConfigurationId: str,
        configurationIds: List[str]
    ) -> ApplicationDiscoveryServiceAssociateConfigurationItemsToApplicationResponse: ...

    def batch_delete_import_data(self, *,
        importTaskIds: List[str]
    ) -> ApplicationDiscoveryServiceBatchDeleteImportDataResponse: ...

    def create_application(self, *,
        name: str,
        description: str = ...
    ) -> ApplicationDiscoveryServiceCreateApplicationResponse: ...

    def create_tags(self, *,
        configurationIds: List[str],
        tags: List[ApplicationDiscoveryServiceTag]
    ) -> ApplicationDiscoveryServiceCreateTagsResponse: ...

    def delete_applications(self, *,
        configurationIds: List[str]
    ) -> ApplicationDiscoveryServiceDeleteApplicationsResponse: ...

    def delete_tags(self, *,
        configurationIds: List[str],
        tags: List[ApplicationDiscoveryServiceTag] = ...
    ) -> ApplicationDiscoveryServiceDeleteTagsResponse: ...

    def describe_agents(self, *,
        agentIds: List[str] = ...,
        filters: List[ApplicationDiscoveryServiceFilter] = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> ApplicationDiscoveryServiceDescribeAgentsResponse: ...

    def describe_configurations(self, *,
        configurationIds: List[str]
    ) -> ApplicationDiscoveryServiceDescribeConfigurationsResponse: ...

    def describe_continuous_exports(self, *,
        exportIds: List[str] = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> ApplicationDiscoveryServiceDescribeContinuousExportsResponse: ...

    def describe_export_configurations(self, *,
        exportIds: List[str] = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> ApplicationDiscoveryServiceDescribeExportConfigurationsResponse: ...

    def describe_export_tasks(self, *,
        exportIds: List[str] = ...,
        filters: List[ApplicationDiscoveryServiceExportFilter] = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> ApplicationDiscoveryServiceDescribeExportTasksResponse: ...

    def describe_import_tasks(self, *,
        filters: List[ApplicationDiscoveryServiceImportTaskFilter] = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> ApplicationDiscoveryServiceDescribeImportTasksResponse: ...

    def describe_tags(self, *,
        filters: List[ApplicationDiscoveryServiceTagFilter] = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> ApplicationDiscoveryServiceDescribeTagsResponse: ...

    def disassociate_configuration_items_from_application(self, *,
        applicationConfigurationId: str,
        configurationIds: List[str]
    ) -> ApplicationDiscoveryServiceDisassociateConfigurationItemsFromApplicationResponse: ...

    def export_configurations(self) -> ApplicationDiscoveryServiceExportConfigurationsResponse: ...

    def get_discovery_summary(self) -> ApplicationDiscoveryServiceGetDiscoverySummaryResponse: ...

    def list_configurations(self, *,
        configurationType: str,
        filters: List[ApplicationDiscoveryServiceFilter] = ...,
        maxResults: int = ...,
        nextToken: str = ...,
        orderBy: List[ApplicationDiscoveryServiceOrderByElement] = ...
    ) -> ApplicationDiscoveryServiceListConfigurationsResponse: ...

    def list_server_neighbors(self, *,
        configurationId: str,
        portInformationNeeded: bool = ...,
        neighborConfigurationIds: List[str] = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> ApplicationDiscoveryServiceListServerNeighborsResponse: ...

    def start_continuous_export(self) -> ApplicationDiscoveryServiceStartContinuousExportResponse: ...

    def start_data_collection_by_agent_ids(self, *,
        agentIds: List[str]
    ) -> ApplicationDiscoveryServiceStartDataCollectionByAgentIdsResponse: ...

    def start_export_task(self, *,
        exportDataFormat: List[str] = ...,
        filters: List[ApplicationDiscoveryServiceExportFilter] = ...,
        startTime: datetime.datetime = ...,
        endTime: datetime.datetime = ...
    ) -> ApplicationDiscoveryServiceStartExportTaskResponse: ...

    def start_import_task(self, *,
        name: str,
        importUrl: str,
        clientRequestToken: str = ...
    ) -> ApplicationDiscoveryServiceStartImportTaskResponse: ...

    def stop_continuous_export(self, *,
        exportId: str
    ) -> ApplicationDiscoveryServiceStopContinuousExportResponse: ...

    def stop_data_collection_by_agent_ids(self, *,
        agentIds: List[str]
    ) -> ApplicationDiscoveryServiceStopDataCollectionByAgentIdsResponse: ...

    def update_application(self, *,
        configurationId: str,
        name: str = ...,
        description: str = ...
    ) -> ApplicationDiscoveryServiceUpdateApplicationResponse: ...


class ApplicationDiscoveryServiceAssociateConfigurationItemsToApplicationResponse(TypedDict, total=False):
    pass


class ApplicationDiscoveryServiceBatchDeleteImportDataResponse(TypedDict, total=False):
    errors: List[ApplicationDiscoveryServiceBatchDeleteImportDataError]


class ApplicationDiscoveryServiceBatchDeleteImportDataError(TypedDict, total=False):
    importTaskId: str
    errorCode: str
    errorDescription: str


class ApplicationDiscoveryServiceCreateApplicationResponse(TypedDict, total=False):
    configurationId: str


class ApplicationDiscoveryServiceTag(TypedDict):
    key: str
    value: str


class ApplicationDiscoveryServiceCreateTagsResponse(TypedDict, total=False):
    pass


class ApplicationDiscoveryServiceDeleteApplicationsResponse(TypedDict, total=False):
    pass


class ApplicationDiscoveryServiceDeleteTagsResponse(TypedDict, total=False):
    pass


class ApplicationDiscoveryServiceFilter(TypedDict):
    name: str
    values: List[str]
    condition: str


class ApplicationDiscoveryServiceDescribeAgentsResponse(TypedDict, total=False):
    agentsInfo: List[ApplicationDiscoveryServiceAgentInfo]
    nextToken: str


class ApplicationDiscoveryServiceAgentInfo(TypedDict, total=False):
    agentId: str
    hostName: str
    agentNetworkInfoList: List[ApplicationDiscoveryServiceAgentNetworkInfo]
    connectorId: str
    version: str
    health: str
    lastHealthPingTime: str
    collectionStatus: str
    agentType: str
    registeredTime: str


class ApplicationDiscoveryServiceAgentNetworkInfo(TypedDict, total=False):
    ipAddress: str
    macAddress: str


class ApplicationDiscoveryServiceDescribeConfigurationsResponse(TypedDict, total=False):
    configurations: List[Dict[str, str]]


class ApplicationDiscoveryServiceDescribeContinuousExportsResponse(TypedDict, total=False):
    descriptions: List[ApplicationDiscoveryServiceContinuousExportDescription]
    nextToken: str


class ApplicationDiscoveryServiceContinuousExportDescription(TypedDict, total=False):
    exportId: str
    status: str
    statusDetail: str
    s3Bucket: str
    startTime: datetime.datetime
    stopTime: datetime.datetime
    dataSource: str
    schemaStorageConfig: Dict[str, str]


class ApplicationDiscoveryServiceDescribeExportConfigurationsResponse(TypedDict, total=False):
    exportsInfo: List[ApplicationDiscoveryServiceExportInfo]
    nextToken: str


class _ApplicationDiscoveryServiceExportInfo(TypedDict):
    exportId: str
    exportStatus: str
    statusMessage: str
    exportRequestTime: datetime.datetime


class ApplicationDiscoveryServiceExportInfo(_ApplicationDiscoveryServiceExportInfo, total=False):
    configurationsDownloadUrl: str
    isTruncated: bool
    requestedStartTime: datetime.datetime
    requestedEndTime: datetime.datetime


class ApplicationDiscoveryServiceExportFilter(TypedDict):
    name: str
    values: List[str]
    condition: str


class ApplicationDiscoveryServiceDescribeExportTasksResponse(TypedDict, total=False):
    exportsInfo: List[ApplicationDiscoveryServiceExportInfo]
    nextToken: str


class ApplicationDiscoveryServiceImportTaskFilter(TypedDict, total=False):
    name: str
    values: List[str]


class ApplicationDiscoveryServiceDescribeImportTasksResponse(TypedDict, total=False):
    nextToken: str
    tasks: List[ApplicationDiscoveryServiceImportTask]


class ApplicationDiscoveryServiceImportTask(TypedDict, total=False):
    importTaskId: str
    clientRequestToken: str
    name: str
    importUrl: str
    status: str
    importRequestTime: datetime.datetime
    importCompletionTime: datetime.datetime
    importDeletedTime: datetime.datetime
    serverImportSuccess: int
    serverImportFailure: int
    applicationImportSuccess: int
    applicationImportFailure: int
    errorsAndFailedEntriesZip: str


class ApplicationDiscoveryServiceTagFilter(TypedDict):
    name: str
    values: List[str]


class ApplicationDiscoveryServiceDescribeTagsResponse(TypedDict, total=False):
    tags: List[ApplicationDiscoveryServiceConfigurationTag]
    nextToken: str


class ApplicationDiscoveryServiceConfigurationTag(TypedDict, total=False):
    configurationType: str
    configurationId: str
    key: str
    value: str
    timeOfCreation: datetime.datetime


class ApplicationDiscoveryServiceDisassociateConfigurationItemsFromApplicationResponse(TypedDict, total=False):
    pass


class ApplicationDiscoveryServiceExportConfigurationsResponse(TypedDict, total=False):
    exportId: str


class ApplicationDiscoveryServiceGetDiscoverySummaryResponse(TypedDict, total=False):
    servers: int
    applications: int
    serversMappedToApplications: int
    serversMappedtoTags: int
    agentSummary: ApplicationDiscoveryServiceCustomerAgentInfo
    connectorSummary: ApplicationDiscoveryServiceCustomerConnectorInfo


class ApplicationDiscoveryServiceCustomerAgentInfo(TypedDict):
    activeAgents: int
    healthyAgents: int
    blackListedAgents: int
    shutdownAgents: int
    unhealthyAgents: int
    totalAgents: int
    unknownAgents: int


class ApplicationDiscoveryServiceCustomerConnectorInfo(TypedDict):
    activeConnectors: int
    healthyConnectors: int
    blackListedConnectors: int
    shutdownConnectors: int
    unhealthyConnectors: int
    totalConnectors: int
    unknownConnectors: int


class _ApplicationDiscoveryServiceOrderByElement(TypedDict):
    fieldName: str


class ApplicationDiscoveryServiceOrderByElement(_ApplicationDiscoveryServiceOrderByElement, total=False):
    sortOrder: str


class ApplicationDiscoveryServiceListConfigurationsResponse(TypedDict, total=False):
    configurations: List[Dict[str, str]]
    nextToken: str


class _ApplicationDiscoveryServiceListServerNeighborsResponse(TypedDict):
    neighbors: List[ApplicationDiscoveryServiceNeighborConnectionDetail]


class ApplicationDiscoveryServiceListServerNeighborsResponse(_ApplicationDiscoveryServiceListServerNeighborsResponse, total=False):
    nextToken: str
    knownDependencyCount: int


class _ApplicationDiscoveryServiceNeighborConnectionDetail(TypedDict):
    sourceServerId: str
    destinationServerId: str
    connectionsCount: int


class ApplicationDiscoveryServiceNeighborConnectionDetail(_ApplicationDiscoveryServiceNeighborConnectionDetail, total=False):
    destinationPort: int
    transportProtocol: str


class ApplicationDiscoveryServiceStartContinuousExportResponse(TypedDict, total=False):
    exportId: str
    s3Bucket: str
    startTime: datetime.datetime
    dataSource: str
    schemaStorageConfig: Dict[str, str]


class ApplicationDiscoveryServiceStartDataCollectionByAgentIdsResponse(TypedDict, total=False):
    agentsConfigurationStatus: List[ApplicationDiscoveryServiceAgentConfigurationStatus]


class ApplicationDiscoveryServiceAgentConfigurationStatus(TypedDict, total=False):
    agentId: str
    operationSucceeded: bool
    description: str


class ApplicationDiscoveryServiceStartExportTaskResponse(TypedDict, total=False):
    exportId: str


class ApplicationDiscoveryServiceStartImportTaskResponse(TypedDict, total=False):
    task: ApplicationDiscoveryServiceImportTask


class ApplicationDiscoveryServiceStopContinuousExportResponse(TypedDict, total=False):
    startTime: datetime.datetime
    stopTime: datetime.datetime


class ApplicationDiscoveryServiceStopDataCollectionByAgentIdsResponse(TypedDict, total=False):
    agentsConfigurationStatus: List[ApplicationDiscoveryServiceAgentConfigurationStatus]


class ApplicationDiscoveryServiceUpdateApplicationResponse(TypedDict, total=False):
    pass


class DLM(BaseClient):
    def create_lifecycle_policy(self, *,
        ExecutionRoleArn: str,
        Description: str,
        State: str,
        PolicyDetails: DLMPolicyDetails
    ) -> DLMCreateLifecyclePolicyResponse: ...

    def delete_lifecycle_policy(self, *,
        PolicyId: str
    ) -> DLMDeleteLifecyclePolicyResponse: ...

    def get_lifecycle_policies(self, *,
        PolicyIds: List[str] = ...,
        State: str = ...,
        ResourceTypes: List[str] = ...,
        TargetTags: List[str] = ...,
        TagsToAdd: List[str] = ...
    ) -> DLMGetLifecyclePoliciesResponse: ...

    def get_lifecycle_policy(self, *,
        PolicyId: str
    ) -> DLMGetLifecyclePolicyResponse: ...

    def update_lifecycle_policy(self, *,
        PolicyId: str,
        ExecutionRoleArn: str = ...,
        State: str = ...,
        Description: str = ...,
        PolicyDetails: DLMPolicyDetails = ...
    ) -> DLMUpdateLifecyclePolicyResponse: ...


class DLMPolicyDetails(TypedDict, total=False):
    ResourceTypes: List[str]
    TargetTags: List[DLMTag]
    Schedules: List[DLMSchedule]


class DLMTag(TypedDict):
    Key: str
    Value: str


class DLMSchedule(TypedDict, total=False):
    Name: str
    CopyTags: bool
    TagsToAdd: List[DLMTag]
    CreateRule: DLMCreateRule
    RetainRule: DLMRetainRule


class _DLMCreateRule(TypedDict):
    Interval: int
    IntervalUnit: str


class DLMCreateRule(_DLMCreateRule, total=False):
    Times: List[str]


class DLMRetainRule(TypedDict):
    Count: int


class DLMCreateLifecyclePolicyResponse(TypedDict, total=False):
    PolicyId: str


class DLMDeleteLifecyclePolicyResponse(TypedDict, total=False):
    pass


class DLMGetLifecyclePoliciesResponse(TypedDict, total=False):
    Policies: List[DLMLifecyclePolicySummary]


class DLMLifecyclePolicySummary(TypedDict, total=False):
    PolicyId: str
    Description: str
    State: str


class DLMGetLifecyclePolicyResponse(TypedDict, total=False):
    Policy: DLMLifecyclePolicy


class DLMLifecyclePolicy(TypedDict, total=False):
    PolicyId: str
    Description: str
    State: str
    ExecutionRoleArn: str
    DateCreated: datetime.datetime
    DateModified: datetime.datetime
    PolicyDetails: DLMPolicyDetails


class DLMUpdateLifecyclePolicyResponse(TypedDict, total=False):
    pass


class DatabaseMigrationService(BaseClient):
    def add_tags_to_resource(self, *,
        ResourceArn: str,
        Tags: List[DatabaseMigrationServiceTag]
    ) -> DatabaseMigrationServiceAddTagsToResourceResponse: ...

    def apply_pending_maintenance_action(self, *,
        ReplicationInstanceArn: str,
        ApplyAction: str,
        OptInType: str
    ) -> DatabaseMigrationServiceApplyPendingMaintenanceActionResponse: ...

    def create_endpoint(self, *,
        EndpointIdentifier: str,
        EndpointType: str,
        EngineName: str,
        Username: str = ...,
        Password: str = ...,
        ServerName: str = ...,
        Port: int = ...,
        DatabaseName: str = ...,
        ExtraConnectionAttributes: str = ...,
        KmsKeyId: str = ...,
        Tags: List[DatabaseMigrationServiceTag] = ...,
        CertificateArn: str = ...,
        SslMode: str = ...,
        ServiceAccessRoleArn: str = ...,
        ExternalTableDefinition: str = ...,
        DynamoDbSettings: DatabaseMigrationServiceDynamoDbSettings = ...,
        S3Settings: DatabaseMigrationServiceS3Settings = ...,
        DmsTransferSettings: DatabaseMigrationServiceDmsTransferSettings = ...,
        MongoDbSettings: DatabaseMigrationServiceMongoDbSettings = ...,
        KinesisSettings: DatabaseMigrationServiceKinesisSettings = ...,
        ElasticsearchSettings: DatabaseMigrationServiceElasticsearchSettings = ...,
        RedshiftSettings: DatabaseMigrationServiceRedshiftSettings = ...
    ) -> DatabaseMigrationServiceCreateEndpointResponse: ...

    def create_event_subscription(self, *,
        SubscriptionName: str,
        SnsTopicArn: str,
        SourceType: str = ...,
        EventCategories: List[str] = ...,
        SourceIds: List[str] = ...,
        Enabled: bool = ...,
        Tags: List[DatabaseMigrationServiceTag] = ...
    ) -> DatabaseMigrationServiceCreateEventSubscriptionResponse: ...

    def create_replication_instance(self, *,
        ReplicationInstanceIdentifier: str,
        ReplicationInstanceClass: str,
        AllocatedStorage: int = ...,
        VpcSecurityGroupIds: List[str] = ...,
        AvailabilityZone: str = ...,
        ReplicationSubnetGroupIdentifier: str = ...,
        PreferredMaintenanceWindow: str = ...,
        MultiAZ: bool = ...,
        EngineVersion: str = ...,
        AutoMinorVersionUpgrade: bool = ...,
        Tags: List[DatabaseMigrationServiceTag] = ...,
        KmsKeyId: str = ...,
        PubliclyAccessible: bool = ...,
        DnsNameServers: str = ...
    ) -> DatabaseMigrationServiceCreateReplicationInstanceResponse: ...

    def create_replication_subnet_group(self, *,
        ReplicationSubnetGroupIdentifier: str,
        ReplicationSubnetGroupDescription: str,
        SubnetIds: List[str],
        Tags: List[DatabaseMigrationServiceTag] = ...
    ) -> DatabaseMigrationServiceCreateReplicationSubnetGroupResponse: ...

    def create_replication_task(self, *,
        ReplicationTaskIdentifier: str,
        SourceEndpointArn: str,
        TargetEndpointArn: str,
        ReplicationInstanceArn: str,
        MigrationType: str,
        TableMappings: str,
        ReplicationTaskSettings: str = ...,
        CdcStartTime: datetime.datetime = ...,
        CdcStartPosition: str = ...,
        CdcStopPosition: str = ...,
        Tags: List[DatabaseMigrationServiceTag] = ...
    ) -> DatabaseMigrationServiceCreateReplicationTaskResponse: ...

    def delete_certificate(self, *,
        CertificateArn: str
    ) -> DatabaseMigrationServiceDeleteCertificateResponse: ...

    def delete_endpoint(self, *,
        EndpointArn: str
    ) -> DatabaseMigrationServiceDeleteEndpointResponse: ...

    def delete_event_subscription(self, *,
        SubscriptionName: str
    ) -> DatabaseMigrationServiceDeleteEventSubscriptionResponse: ...

    def delete_replication_instance(self, *,
        ReplicationInstanceArn: str
    ) -> DatabaseMigrationServiceDeleteReplicationInstanceResponse: ...

    def delete_replication_subnet_group(self, *,
        ReplicationSubnetGroupIdentifier: str
    ) -> DatabaseMigrationServiceDeleteReplicationSubnetGroupResponse: ...

    def delete_replication_task(self, *,
        ReplicationTaskArn: str
    ) -> DatabaseMigrationServiceDeleteReplicationTaskResponse: ...

    def describe_account_attributes(self) -> DatabaseMigrationServiceDescribeAccountAttributesResponse: ...

    def describe_certificates(self, *,
        Filters: List[DatabaseMigrationServiceFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DatabaseMigrationServiceDescribeCertificatesResponse: ...

    def describe_connections(self, *,
        Filters: List[DatabaseMigrationServiceFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DatabaseMigrationServiceDescribeConnectionsResponse: ...

    def describe_endpoint_types(self, *,
        Filters: List[DatabaseMigrationServiceFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DatabaseMigrationServiceDescribeEndpointTypesResponse: ...

    def describe_endpoints(self, *,
        Filters: List[DatabaseMigrationServiceFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DatabaseMigrationServiceDescribeEndpointsResponse: ...

    def describe_event_categories(self, *,
        SourceType: str = ...,
        Filters: List[DatabaseMigrationServiceFilter] = ...
    ) -> DatabaseMigrationServiceDescribeEventCategoriesResponse: ...

    def describe_event_subscriptions(self, *,
        SubscriptionName: str = ...,
        Filters: List[DatabaseMigrationServiceFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DatabaseMigrationServiceDescribeEventSubscriptionsResponse: ...

    def describe_events(self, *,
        SourceIdentifier: str = ...,
        SourceType: str = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        Duration: int = ...,
        EventCategories: List[str] = ...,
        Filters: List[DatabaseMigrationServiceFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DatabaseMigrationServiceDescribeEventsResponse: ...

    def describe_orderable_replication_instances(self, *,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DatabaseMigrationServiceDescribeOrderableReplicationInstancesResponse: ...

    def describe_pending_maintenance_actions(self, *,
        ReplicationInstanceArn: str = ...,
        Filters: List[DatabaseMigrationServiceFilter] = ...,
        Marker: str = ...,
        MaxRecords: int = ...
    ) -> DatabaseMigrationServiceDescribePendingMaintenanceActionsResponse: ...

    def describe_refresh_schemas_status(self, *,
        EndpointArn: str
    ) -> DatabaseMigrationServiceDescribeRefreshSchemasStatusResponse: ...

    def describe_replication_instance_task_logs(self, *,
        ReplicationInstanceArn: str,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DatabaseMigrationServiceDescribeReplicationInstanceTaskLogsResponse: ...

    def describe_replication_instances(self, *,
        Filters: List[DatabaseMigrationServiceFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DatabaseMigrationServiceDescribeReplicationInstancesResponse: ...

    def describe_replication_subnet_groups(self, *,
        Filters: List[DatabaseMigrationServiceFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DatabaseMigrationServiceDescribeReplicationSubnetGroupsResponse: ...

    def describe_replication_task_assessment_results(self, *,
        ReplicationTaskArn: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DatabaseMigrationServiceDescribeReplicationTaskAssessmentResultsResponse: ...

    def describe_replication_tasks(self, *,
        Filters: List[DatabaseMigrationServiceFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        WithoutSettings: bool = ...
    ) -> DatabaseMigrationServiceDescribeReplicationTasksResponse: ...

    def describe_schemas(self, *,
        EndpointArn: str,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DatabaseMigrationServiceDescribeSchemasResponse: ...

    def describe_table_statistics(self, *,
        ReplicationTaskArn: str,
        MaxRecords: int = ...,
        Marker: str = ...,
        Filters: List[DatabaseMigrationServiceFilter] = ...
    ) -> DatabaseMigrationServiceDescribeTableStatisticsResponse: ...

    def import_certificate(self, *,
        CertificateIdentifier: str,
        CertificatePem: str = ...,
        CertificateWallet: bytes = ...,
        Tags: List[DatabaseMigrationServiceTag] = ...
    ) -> DatabaseMigrationServiceImportCertificateResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> DatabaseMigrationServiceListTagsForResourceResponse: ...

    def modify_endpoint(self, *,
        EndpointArn: str,
        EndpointIdentifier: str = ...,
        EndpointType: str = ...,
        EngineName: str = ...,
        Username: str = ...,
        Password: str = ...,
        ServerName: str = ...,
        Port: int = ...,
        DatabaseName: str = ...,
        ExtraConnectionAttributes: str = ...,
        CertificateArn: str = ...,
        SslMode: str = ...,
        ServiceAccessRoleArn: str = ...,
        ExternalTableDefinition: str = ...,
        DynamoDbSettings: DatabaseMigrationServiceDynamoDbSettings = ...,
        S3Settings: DatabaseMigrationServiceS3Settings = ...,
        DmsTransferSettings: DatabaseMigrationServiceDmsTransferSettings = ...,
        MongoDbSettings: DatabaseMigrationServiceMongoDbSettings = ...,
        KinesisSettings: DatabaseMigrationServiceKinesisSettings = ...,
        ElasticsearchSettings: DatabaseMigrationServiceElasticsearchSettings = ...,
        RedshiftSettings: DatabaseMigrationServiceRedshiftSettings = ...
    ) -> DatabaseMigrationServiceModifyEndpointResponse: ...

    def modify_event_subscription(self, *,
        SubscriptionName: str,
        SnsTopicArn: str = ...,
        SourceType: str = ...,
        EventCategories: List[str] = ...,
        Enabled: bool = ...
    ) -> DatabaseMigrationServiceModifyEventSubscriptionResponse: ...

    def modify_replication_instance(self, *,
        ReplicationInstanceArn: str,
        AllocatedStorage: int = ...,
        ApplyImmediately: bool = ...,
        ReplicationInstanceClass: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        PreferredMaintenanceWindow: str = ...,
        MultiAZ: bool = ...,
        EngineVersion: str = ...,
        AllowMajorVersionUpgrade: bool = ...,
        AutoMinorVersionUpgrade: bool = ...,
        ReplicationInstanceIdentifier: str = ...
    ) -> DatabaseMigrationServiceModifyReplicationInstanceResponse: ...

    def modify_replication_subnet_group(self, *,
        ReplicationSubnetGroupIdentifier: str,
        SubnetIds: List[str],
        ReplicationSubnetGroupDescription: str = ...
    ) -> DatabaseMigrationServiceModifyReplicationSubnetGroupResponse: ...

    def modify_replication_task(self, *,
        ReplicationTaskArn: str,
        ReplicationTaskIdentifier: str = ...,
        MigrationType: str = ...,
        TableMappings: str = ...,
        ReplicationTaskSettings: str = ...,
        CdcStartTime: datetime.datetime = ...,
        CdcStartPosition: str = ...,
        CdcStopPosition: str = ...
    ) -> DatabaseMigrationServiceModifyReplicationTaskResponse: ...

    def reboot_replication_instance(self, *,
        ReplicationInstanceArn: str,
        ForceFailover: bool = ...
    ) -> DatabaseMigrationServiceRebootReplicationInstanceResponse: ...

    def refresh_schemas(self, *,
        EndpointArn: str,
        ReplicationInstanceArn: str
    ) -> DatabaseMigrationServiceRefreshSchemasResponse: ...

    def reload_tables(self, *,
        ReplicationTaskArn: str,
        TablesToReload: List[DatabaseMigrationServiceTableToReload],
        ReloadOption: str = ...
    ) -> DatabaseMigrationServiceReloadTablesResponse: ...

    def remove_tags_from_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ) -> DatabaseMigrationServiceRemoveTagsFromResourceResponse: ...

    def start_replication_task(self, *,
        ReplicationTaskArn: str,
        StartReplicationTaskType: str,
        CdcStartTime: datetime.datetime = ...,
        CdcStartPosition: str = ...,
        CdcStopPosition: str = ...
    ) -> DatabaseMigrationServiceStartReplicationTaskResponse: ...

    def start_replication_task_assessment(self, *,
        ReplicationTaskArn: str
    ) -> DatabaseMigrationServiceStartReplicationTaskAssessmentResponse: ...

    def stop_replication_task(self, *,
        ReplicationTaskArn: str
    ) -> DatabaseMigrationServiceStopReplicationTaskResponse: ...

    def test_connection(self, *,
        ReplicationInstanceArn: str,
        EndpointArn: str
    ) -> DatabaseMigrationServiceTestConnectionResponse: ...


class DatabaseMigrationServiceTag(TypedDict, total=False):
    Key: str
    Value: str


class DatabaseMigrationServiceAddTagsToResourceResponse(TypedDict, total=False):
    pass


class DatabaseMigrationServiceApplyPendingMaintenanceActionResponse(TypedDict, total=False):
    ResourcePendingMaintenanceActions: DatabaseMigrationServiceResourcePendingMaintenanceActions


class DatabaseMigrationServiceResourcePendingMaintenanceActions(TypedDict, total=False):
    ResourceIdentifier: str
    PendingMaintenanceActionDetails: List[DatabaseMigrationServicePendingMaintenanceAction]


class DatabaseMigrationServicePendingMaintenanceAction(TypedDict, total=False):
    Action: str
    AutoAppliedAfterDate: datetime.datetime
    ForcedApplyDate: datetime.datetime
    OptInStatus: str
    CurrentApplyDate: datetime.datetime
    Description: str


class DatabaseMigrationServiceDynamoDbSettings(TypedDict):
    ServiceAccessRoleArn: str


class DatabaseMigrationServiceS3Settings(TypedDict, total=False):
    ServiceAccessRoleArn: str
    ExternalTableDefinition: str
    CsvRowDelimiter: str
    CsvDelimiter: str
    BucketFolder: str
    BucketName: str
    CompressionType: str
    EncryptionMode: str
    ServerSideEncryptionKmsKeyId: str
    DataFormat: str
    EncodingType: str
    DictPageSizeLimit: int
    RowGroupLength: int
    DataPageSize: int
    ParquetVersion: str
    EnableStatistics: bool
    CdcInsertsOnly: bool


class DatabaseMigrationServiceDmsTransferSettings(TypedDict, total=False):
    ServiceAccessRoleArn: str
    BucketName: str


class DatabaseMigrationServiceMongoDbSettings(TypedDict, total=False):
    Username: str
    Password: str
    ServerName: str
    Port: int
    DatabaseName: str
    AuthType: str
    AuthMechanism: str
    NestingLevel: str
    ExtractDocId: str
    DocsToInvestigate: str
    AuthSource: str
    KmsKeyId: str


class DatabaseMigrationServiceKinesisSettings(TypedDict, total=False):
    StreamArn: str
    MessageFormat: str
    ServiceAccessRoleArn: str


class _DatabaseMigrationServiceElasticsearchSettings(TypedDict):
    ServiceAccessRoleArn: str
    EndpointUri: str


class DatabaseMigrationServiceElasticsearchSettings(_DatabaseMigrationServiceElasticsearchSettings, total=False):
    FullLoadErrorPercentage: int
    ErrorRetryDuration: int


class DatabaseMigrationServiceRedshiftSettings(TypedDict, total=False):
    AcceptAnyDate: bool
    AfterConnectScript: str
    BucketFolder: str
    BucketName: str
    ConnectionTimeout: int
    DatabaseName: str
    DateFormat: str
    EmptyAsNull: bool
    EncryptionMode: str
    FileTransferUploadStreams: int
    LoadTimeout: int
    MaxFileSize: int
    Password: str
    Port: int
    RemoveQuotes: bool
    ReplaceInvalidChars: str
    ReplaceChars: str
    ServerName: str
    ServiceAccessRoleArn: str
    ServerSideEncryptionKmsKeyId: str
    TimeFormat: str
    TrimBlanks: bool
    TruncateColumns: bool
    Username: str
    WriteBufferSize: int


class DatabaseMigrationServiceCreateEndpointResponse(TypedDict, total=False):
    Endpoint: DatabaseMigrationServiceEndpoint


class DatabaseMigrationServiceEndpoint(TypedDict, total=False):
    EndpointIdentifier: str
    EndpointType: str
    EngineName: str
    EngineDisplayName: str
    Username: str
    ServerName: str
    Port: int
    DatabaseName: str
    ExtraConnectionAttributes: str
    Status: str
    KmsKeyId: str
    EndpointArn: str
    CertificateArn: str
    SslMode: str
    ServiceAccessRoleArn: str
    ExternalTableDefinition: str
    ExternalId: str
    DynamoDbSettings: DatabaseMigrationServiceDynamoDbSettings
    S3Settings: DatabaseMigrationServiceS3Settings
    DmsTransferSettings: DatabaseMigrationServiceDmsTransferSettings
    MongoDbSettings: DatabaseMigrationServiceMongoDbSettings
    KinesisSettings: DatabaseMigrationServiceKinesisSettings
    ElasticsearchSettings: DatabaseMigrationServiceElasticsearchSettings
    RedshiftSettings: DatabaseMigrationServiceRedshiftSettings


class DatabaseMigrationServiceCreateEventSubscriptionResponse(TypedDict, total=False):
    EventSubscription: DatabaseMigrationServiceEventSubscription


class DatabaseMigrationServiceEventSubscription(TypedDict, total=False):
    CustomerAwsId: str
    CustSubscriptionId: str
    SnsTopicArn: str
    Status: str
    SubscriptionCreationTime: str
    SourceType: str
    SourceIdsList: List[str]
    EventCategoriesList: List[str]
    Enabled: bool


class DatabaseMigrationServiceCreateReplicationInstanceResponse(TypedDict, total=False):
    ReplicationInstance: DatabaseMigrationServiceReplicationInstance


class DatabaseMigrationServiceReplicationInstance(TypedDict, total=False):
    ReplicationInstanceIdentifier: str
    ReplicationInstanceClass: str
    ReplicationInstanceStatus: str
    AllocatedStorage: int
    InstanceCreateTime: datetime.datetime
    VpcSecurityGroups: List[DatabaseMigrationServiceVpcSecurityGroupMembership]
    AvailabilityZone: str
    ReplicationSubnetGroup: DatabaseMigrationServiceReplicationSubnetGroup
    PreferredMaintenanceWindow: str
    PendingModifiedValues: DatabaseMigrationServiceReplicationPendingModifiedValues
    MultiAZ: bool
    EngineVersion: str
    AutoMinorVersionUpgrade: bool
    KmsKeyId: str
    ReplicationInstanceArn: str
    ReplicationInstancePublicIpAddress: str
    ReplicationInstancePrivateIpAddress: str
    ReplicationInstancePublicIpAddresses: List[str]
    ReplicationInstancePrivateIpAddresses: List[str]
    PubliclyAccessible: bool
    SecondaryAvailabilityZone: str
    FreeUntil: datetime.datetime
    DnsNameServers: str


class DatabaseMigrationServiceVpcSecurityGroupMembership(TypedDict, total=False):
    VpcSecurityGroupId: str
    Status: str


class DatabaseMigrationServiceReplicationSubnetGroup(TypedDict, total=False):
    ReplicationSubnetGroupIdentifier: str
    ReplicationSubnetGroupDescription: str
    VpcId: str
    SubnetGroupStatus: str
    Subnets: List[DatabaseMigrationServiceSubnet]


class DatabaseMigrationServiceSubnet(TypedDict, total=False):
    SubnetIdentifier: str
    SubnetAvailabilityZone: DatabaseMigrationServiceAvailabilityZone
    SubnetStatus: str


class DatabaseMigrationServiceAvailabilityZone(TypedDict, total=False):
    Name: str


class DatabaseMigrationServiceReplicationPendingModifiedValues(TypedDict, total=False):
    ReplicationInstanceClass: str
    AllocatedStorage: int
    MultiAZ: bool
    EngineVersion: str


class DatabaseMigrationServiceCreateReplicationSubnetGroupResponse(TypedDict, total=False):
    ReplicationSubnetGroup: DatabaseMigrationServiceReplicationSubnetGroup


class DatabaseMigrationServiceCreateReplicationTaskResponse(TypedDict, total=False):
    ReplicationTask: DatabaseMigrationServiceReplicationTask


class DatabaseMigrationServiceReplicationTask(TypedDict, total=False):
    ReplicationTaskIdentifier: str
    SourceEndpointArn: str
    TargetEndpointArn: str
    ReplicationInstanceArn: str
    MigrationType: str
    TableMappings: str
    ReplicationTaskSettings: str
    Status: str
    LastFailureMessage: str
    StopReason: str
    ReplicationTaskCreationDate: datetime.datetime
    ReplicationTaskStartDate: datetime.datetime
    CdcStartPosition: str
    CdcStopPosition: str
    RecoveryCheckpoint: str
    ReplicationTaskArn: str
    ReplicationTaskStats: DatabaseMigrationServiceReplicationTaskStats


class DatabaseMigrationServiceReplicationTaskStats(TypedDict, total=False):
    FullLoadProgressPercent: int
    ElapsedTimeMillis: int
    TablesLoaded: int
    TablesLoading: int
    TablesQueued: int
    TablesErrored: int


class DatabaseMigrationServiceDeleteCertificateResponse(TypedDict, total=False):
    Certificate: DatabaseMigrationServiceCertificate


class DatabaseMigrationServiceCertificate(TypedDict, total=False):
    CertificateIdentifier: str
    CertificateCreationDate: datetime.datetime
    CertificatePem: str
    CertificateWallet: bytes
    CertificateArn: str
    CertificateOwner: str
    ValidFromDate: datetime.datetime
    ValidToDate: datetime.datetime
    SigningAlgorithm: str
    KeyLength: int


class DatabaseMigrationServiceDeleteEndpointResponse(TypedDict, total=False):
    Endpoint: DatabaseMigrationServiceEndpoint


class DatabaseMigrationServiceDeleteEventSubscriptionResponse(TypedDict, total=False):
    EventSubscription: DatabaseMigrationServiceEventSubscription


class DatabaseMigrationServiceDeleteReplicationInstanceResponse(TypedDict, total=False):
    ReplicationInstance: DatabaseMigrationServiceReplicationInstance


class DatabaseMigrationServiceDeleteReplicationSubnetGroupResponse(TypedDict, total=False):
    pass


class DatabaseMigrationServiceDeleteReplicationTaskResponse(TypedDict, total=False):
    ReplicationTask: DatabaseMigrationServiceReplicationTask


class DatabaseMigrationServiceDescribeAccountAttributesResponse(TypedDict, total=False):
    AccountQuotas: List[DatabaseMigrationServiceAccountQuota]


class DatabaseMigrationServiceAccountQuota(TypedDict, total=False):
    AccountQuotaName: str
    Used: int
    Max: int


class DatabaseMigrationServiceFilter(TypedDict):
    Name: str
    Values: List[str]


class DatabaseMigrationServiceDescribeCertificatesResponse(TypedDict, total=False):
    Marker: str
    Certificates: List[DatabaseMigrationServiceCertificate]


class DatabaseMigrationServiceDescribeConnectionsResponse(TypedDict, total=False):
    Marker: str
    Connections: List[DatabaseMigrationServiceConnection]


class DatabaseMigrationServiceConnection(TypedDict, total=False):
    ReplicationInstanceArn: str
    EndpointArn: str
    Status: str
    LastFailureMessage: str
    EndpointIdentifier: str
    ReplicationInstanceIdentifier: str


class DatabaseMigrationServiceDescribeEndpointTypesResponse(TypedDict, total=False):
    Marker: str
    SupportedEndpointTypes: List[DatabaseMigrationServiceSupportedEndpointType]


class DatabaseMigrationServiceSupportedEndpointType(TypedDict, total=False):
    EngineName: str
    SupportsCDC: bool
    EndpointType: str
    EngineDisplayName: str


class DatabaseMigrationServiceDescribeEndpointsResponse(TypedDict, total=False):
    Marker: str
    Endpoints: List[DatabaseMigrationServiceEndpoint]


class DatabaseMigrationServiceDescribeEventCategoriesResponse(TypedDict, total=False):
    EventCategoryGroupList: List[DatabaseMigrationServiceEventCategoryGroup]


class DatabaseMigrationServiceEventCategoryGroup(TypedDict, total=False):
    SourceType: str
    EventCategories: List[str]


class DatabaseMigrationServiceDescribeEventSubscriptionsResponse(TypedDict, total=False):
    Marker: str
    EventSubscriptionsList: List[DatabaseMigrationServiceEventSubscription]


class DatabaseMigrationServiceDescribeEventsResponse(TypedDict, total=False):
    Marker: str
    Events: List[DatabaseMigrationServiceEvent]


class DatabaseMigrationServiceEvent(TypedDict, total=False):
    SourceIdentifier: str
    SourceType: str
    Message: str
    EventCategories: List[str]
    Date: datetime.datetime


class DatabaseMigrationServiceDescribeOrderableReplicationInstancesResponse(TypedDict, total=False):
    OrderableReplicationInstances: List[DatabaseMigrationServiceOrderableReplicationInstance]
    Marker: str


class DatabaseMigrationServiceOrderableReplicationInstance(TypedDict, total=False):
    EngineVersion: str
    ReplicationInstanceClass: str
    StorageType: str
    MinAllocatedStorage: int
    MaxAllocatedStorage: int
    DefaultAllocatedStorage: int
    IncludedAllocatedStorage: int
    AvailabilityZones: List[str]


class DatabaseMigrationServiceDescribePendingMaintenanceActionsResponse(TypedDict, total=False):
    PendingMaintenanceActions: List[DatabaseMigrationServiceResourcePendingMaintenanceActions]
    Marker: str


class DatabaseMigrationServiceDescribeRefreshSchemasStatusResponse(TypedDict, total=False):
    RefreshSchemasStatus: DatabaseMigrationServiceRefreshSchemasStatus


class DatabaseMigrationServiceRefreshSchemasStatus(TypedDict, total=False):
    EndpointArn: str
    ReplicationInstanceArn: str
    Status: str
    LastRefreshDate: datetime.datetime
    LastFailureMessage: str


class DatabaseMigrationServiceDescribeReplicationInstanceTaskLogsResponse(TypedDict, total=False):
    ReplicationInstanceArn: str
    ReplicationInstanceTaskLogs: List[DatabaseMigrationServiceReplicationInstanceTaskLog]
    Marker: str


class DatabaseMigrationServiceReplicationInstanceTaskLog(TypedDict, total=False):
    ReplicationTaskName: str
    ReplicationTaskArn: str
    ReplicationInstanceTaskLogSize: int


class DatabaseMigrationServiceDescribeReplicationInstancesResponse(TypedDict, total=False):
    Marker: str
    ReplicationInstances: List[DatabaseMigrationServiceReplicationInstance]


class DatabaseMigrationServiceDescribeReplicationSubnetGroupsResponse(TypedDict, total=False):
    Marker: str
    ReplicationSubnetGroups: List[DatabaseMigrationServiceReplicationSubnetGroup]


class DatabaseMigrationServiceDescribeReplicationTaskAssessmentResultsResponse(TypedDict, total=False):
    Marker: str
    BucketName: str
    ReplicationTaskAssessmentResults: List[DatabaseMigrationServiceReplicationTaskAssessmentResult]


class DatabaseMigrationServiceReplicationTaskAssessmentResult(TypedDict, total=False):
    ReplicationTaskIdentifier: str
    ReplicationTaskArn: str
    ReplicationTaskLastAssessmentDate: datetime.datetime
    AssessmentStatus: str
    AssessmentResultsFile: str
    AssessmentResults: str
    S3ObjectUrl: str


class DatabaseMigrationServiceDescribeReplicationTasksResponse(TypedDict, total=False):
    Marker: str
    ReplicationTasks: List[DatabaseMigrationServiceReplicationTask]


class DatabaseMigrationServiceDescribeSchemasResponse(TypedDict, total=False):
    Marker: str
    Schemas: List[str]


class DatabaseMigrationServiceDescribeTableStatisticsResponse(TypedDict, total=False):
    ReplicationTaskArn: str
    TableStatistics: List[DatabaseMigrationServiceTableStatistics]
    Marker: str


class DatabaseMigrationServiceTableStatistics(TypedDict, total=False):
    SchemaName: str
    TableName: str
    Inserts: int
    Deletes: int
    Updates: int
    Ddls: int
    FullLoadRows: int
    FullLoadCondtnlChkFailedRows: int
    FullLoadErrorRows: int
    LastUpdateTime: datetime.datetime
    TableState: str
    ValidationPendingRecords: int
    ValidationFailedRecords: int
    ValidationSuspendedRecords: int
    ValidationState: str
    ValidationStateDetails: str


class DatabaseMigrationServiceImportCertificateResponse(TypedDict, total=False):
    Certificate: DatabaseMigrationServiceCertificate


class DatabaseMigrationServiceListTagsForResourceResponse(TypedDict, total=False):
    TagList: List[DatabaseMigrationServiceTag]


class DatabaseMigrationServiceModifyEndpointResponse(TypedDict, total=False):
    Endpoint: DatabaseMigrationServiceEndpoint


class DatabaseMigrationServiceModifyEventSubscriptionResponse(TypedDict, total=False):
    EventSubscription: DatabaseMigrationServiceEventSubscription


class DatabaseMigrationServiceModifyReplicationInstanceResponse(TypedDict, total=False):
    ReplicationInstance: DatabaseMigrationServiceReplicationInstance


class DatabaseMigrationServiceModifyReplicationSubnetGroupResponse(TypedDict, total=False):
    ReplicationSubnetGroup: DatabaseMigrationServiceReplicationSubnetGroup


class DatabaseMigrationServiceModifyReplicationTaskResponse(TypedDict, total=False):
    ReplicationTask: DatabaseMigrationServiceReplicationTask


class DatabaseMigrationServiceRebootReplicationInstanceResponse(TypedDict, total=False):
    ReplicationInstance: DatabaseMigrationServiceReplicationInstance


class DatabaseMigrationServiceRefreshSchemasResponse(TypedDict, total=False):
    RefreshSchemasStatus: DatabaseMigrationServiceRefreshSchemasStatus


class DatabaseMigrationServiceTableToReload(TypedDict, total=False):
    SchemaName: str
    TableName: str


class DatabaseMigrationServiceReloadTablesResponse(TypedDict, total=False):
    ReplicationTaskArn: str


class DatabaseMigrationServiceRemoveTagsFromResourceResponse(TypedDict, total=False):
    pass


class DatabaseMigrationServiceStartReplicationTaskResponse(TypedDict, total=False):
    ReplicationTask: DatabaseMigrationServiceReplicationTask


class DatabaseMigrationServiceStartReplicationTaskAssessmentResponse(TypedDict, total=False):
    ReplicationTask: DatabaseMigrationServiceReplicationTask


class DatabaseMigrationServiceStopReplicationTaskResponse(TypedDict, total=False):
    ReplicationTask: DatabaseMigrationServiceReplicationTask


class DatabaseMigrationServiceTestConnectionResponse(TypedDict, total=False):
    Connection: DatabaseMigrationServiceConnection


class DocDB(BaseClient):
    def add_tags_to_resource(self, *,
        ResourceName: str,
        Tags: List[DocDBTag]
    ): ...

    def apply_pending_maintenance_action(self, *,
        ResourceIdentifier: str,
        ApplyAction: str,
        OptInType: str
    ) -> DocDBApplyPendingMaintenanceActionResult: ...

    def copy_db_cluster_parameter_group(self, *,
        SourceDBClusterParameterGroupIdentifier: str,
        TargetDBClusterParameterGroupIdentifier: str,
        TargetDBClusterParameterGroupDescription: str,
        Tags: List[DocDBTag] = ...
    ) -> DocDBCopyDBClusterParameterGroupResult: ...

    def copy_db_cluster_snapshot(self, *,
        SourceDBClusterSnapshotIdentifier: str,
        TargetDBClusterSnapshotIdentifier: str,
        KmsKeyId: str = ...,
        PreSignedUrl: str = ...,
        CopyTags: bool = ...,
        Tags: List[DocDBTag] = ...
    ) -> DocDBCopyDBClusterSnapshotResult: ...

    def create_db_cluster(self, *,
        DBClusterIdentifier: str,
        Engine: str,
        AvailabilityZones: List[str] = ...,
        BackupRetentionPeriod: int = ...,
        DBClusterParameterGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        DBSubnetGroupName: str = ...,
        EngineVersion: str = ...,
        Port: int = ...,
        MasterUsername: str = ...,
        MasterUserPassword: str = ...,
        PreferredBackupWindow: str = ...,
        PreferredMaintenanceWindow: str = ...,
        Tags: List[DocDBTag] = ...,
        StorageEncrypted: bool = ...,
        KmsKeyId: str = ...,
        EnableCloudwatchLogsExports: List[str] = ...
    ) -> DocDBCreateDBClusterResult: ...

    def create_db_cluster_parameter_group(self, *,
        DBClusterParameterGroupName: str,
        DBParameterGroupFamily: str,
        Description: str,
        Tags: List[DocDBTag] = ...
    ) -> DocDBCreateDBClusterParameterGroupResult: ...

    def create_db_cluster_snapshot(self, *,
        DBClusterSnapshotIdentifier: str,
        DBClusterIdentifier: str,
        Tags: List[DocDBTag] = ...
    ) -> DocDBCreateDBClusterSnapshotResult: ...

    def create_db_instance(self, *,
        DBInstanceIdentifier: str,
        DBInstanceClass: str,
        Engine: str,
        DBClusterIdentifier: str,
        AvailabilityZone: str = ...,
        PreferredMaintenanceWindow: str = ...,
        AutoMinorVersionUpgrade: bool = ...,
        Tags: List[DocDBTag] = ...,
        PromotionTier: int = ...
    ) -> DocDBCreateDBInstanceResult: ...

    def create_db_subnet_group(self, *,
        DBSubnetGroupName: str,
        DBSubnetGroupDescription: str,
        SubnetIds: List[str],
        Tags: List[DocDBTag] = ...
    ) -> DocDBCreateDBSubnetGroupResult: ...

    def delete_db_cluster(self, *,
        DBClusterIdentifier: str,
        SkipFinalSnapshot: bool = ...,
        FinalDBSnapshotIdentifier: str = ...
    ) -> DocDBDeleteDBClusterResult: ...

    def delete_db_cluster_parameter_group(self, *,
        DBClusterParameterGroupName: str
    ): ...

    def delete_db_cluster_snapshot(self, *,
        DBClusterSnapshotIdentifier: str
    ) -> DocDBDeleteDBClusterSnapshotResult: ...

    def delete_db_instance(self, *,
        DBInstanceIdentifier: str
    ) -> DocDBDeleteDBInstanceResult: ...

    def delete_db_subnet_group(self, *,
        DBSubnetGroupName: str
    ): ...

    def describe_db_cluster_parameter_groups(self, *,
        DBClusterParameterGroupName: str = ...,
        Filters: List[DocDBFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DocDBDBClusterParameterGroupsMessage: ...

    def describe_db_cluster_parameters(self, *,
        DBClusterParameterGroupName: str,
        Source: str = ...,
        Filters: List[DocDBFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DocDBDBClusterParameterGroupDetails: ...

    def describe_db_cluster_snapshot_attributes(self, *,
        DBClusterSnapshotIdentifier: str
    ) -> DocDBDescribeDBClusterSnapshotAttributesResult: ...

    def describe_db_cluster_snapshots(self, *,
        DBClusterIdentifier: str = ...,
        DBClusterSnapshotIdentifier: str = ...,
        SnapshotType: str = ...,
        Filters: List[DocDBFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        IncludeShared: bool = ...,
        IncludePublic: bool = ...
    ) -> DocDBDBClusterSnapshotMessage: ...

    def describe_db_clusters(self, *,
        DBClusterIdentifier: str = ...,
        Filters: List[DocDBFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DocDBDBClusterMessage: ...

    def describe_db_engine_versions(self, *,
        Engine: str = ...,
        EngineVersion: str = ...,
        DBParameterGroupFamily: str = ...,
        Filters: List[DocDBFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        DefaultOnly: bool = ...,
        ListSupportedCharacterSets: bool = ...,
        ListSupportedTimezones: bool = ...
    ) -> DocDBDBEngineVersionMessage: ...

    def describe_db_instances(self, *,
        DBInstanceIdentifier: str = ...,
        Filters: List[DocDBFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DocDBDBInstanceMessage: ...

    def describe_db_subnet_groups(self, *,
        DBSubnetGroupName: str = ...,
        Filters: List[DocDBFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DocDBDBSubnetGroupMessage: ...

    def describe_engine_default_cluster_parameters(self, *,
        DBParameterGroupFamily: str,
        Filters: List[DocDBFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DocDBDescribeEngineDefaultClusterParametersResult: ...

    def describe_event_categories(self, *,
        SourceType: str = ...,
        Filters: List[DocDBFilter] = ...
    ) -> DocDBEventCategoriesMessage: ...

    def describe_events(self, *,
        SourceIdentifier: str = ...,
        SourceType: str = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        Duration: int = ...,
        EventCategories: List[str] = ...,
        Filters: List[DocDBFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DocDBEventsMessage: ...

    def describe_orderable_db_instance_options(self, *,
        Engine: str,
        EngineVersion: str = ...,
        DBInstanceClass: str = ...,
        LicenseModel: str = ...,
        Vpc: bool = ...,
        Filters: List[DocDBFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> DocDBOrderableDBInstanceOptionsMessage: ...

    def describe_pending_maintenance_actions(self, *,
        ResourceIdentifier: str = ...,
        Filters: List[DocDBFilter] = ...,
        Marker: str = ...,
        MaxRecords: int = ...
    ) -> DocDBPendingMaintenanceActionsMessage: ...

    def failover_db_cluster(self, *,
        DBClusterIdentifier: str = ...,
        TargetDBInstanceIdentifier: str = ...
    ) -> DocDBFailoverDBClusterResult: ...

    def list_tags_for_resource(self, *,
        ResourceName: str,
        Filters: List[DocDBFilter] = ...
    ) -> DocDBTagListMessage: ...

    def modify_db_cluster(self, *,
        DBClusterIdentifier: str,
        NewDBClusterIdentifier: str = ...,
        ApplyImmediately: bool = ...,
        BackupRetentionPeriod: int = ...,
        DBClusterParameterGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        Port: int = ...,
        MasterUserPassword: str = ...,
        PreferredBackupWindow: str = ...,
        PreferredMaintenanceWindow: str = ...,
        CloudwatchLogsExportConfiguration: DocDBCloudwatchLogsExportConfiguration = ...,
        EngineVersion: str = ...
    ) -> DocDBModifyDBClusterResult: ...

    def modify_db_cluster_parameter_group(self, *,
        DBClusterParameterGroupName: str,
        Parameters: List[DocDBParameter]
    ) -> DocDBDBClusterParameterGroupNameMessage: ...

    def modify_db_cluster_snapshot_attribute(self, *,
        DBClusterSnapshotIdentifier: str,
        AttributeName: str,
        ValuesToAdd: List[str] = ...,
        ValuesToRemove: List[str] = ...
    ) -> DocDBModifyDBClusterSnapshotAttributeResult: ...

    def modify_db_instance(self, *,
        DBInstanceIdentifier: str,
        DBInstanceClass: str = ...,
        ApplyImmediately: bool = ...,
        PreferredMaintenanceWindow: str = ...,
        AutoMinorVersionUpgrade: bool = ...,
        NewDBInstanceIdentifier: str = ...,
        PromotionTier: int = ...
    ) -> DocDBModifyDBInstanceResult: ...

    def modify_db_subnet_group(self, *,
        DBSubnetGroupName: str,
        SubnetIds: List[str],
        DBSubnetGroupDescription: str = ...
    ) -> DocDBModifyDBSubnetGroupResult: ...

    def reboot_db_instance(self, *,
        DBInstanceIdentifier: str,
        ForceFailover: bool = ...
    ) -> DocDBRebootDBInstanceResult: ...

    def remove_tags_from_resource(self, *,
        ResourceName: str,
        TagKeys: List[str]
    ): ...

    def reset_db_cluster_parameter_group(self, *,
        DBClusterParameterGroupName: str,
        ResetAllParameters: bool = ...,
        Parameters: List[DocDBParameter] = ...
    ) -> DocDBDBClusterParameterGroupNameMessage: ...

    def restore_db_cluster_from_snapshot(self, *,
        DBClusterIdentifier: str,
        SnapshotIdentifier: str,
        Engine: str,
        AvailabilityZones: List[str] = ...,
        EngineVersion: str = ...,
        Port: int = ...,
        DBSubnetGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        Tags: List[DocDBTag] = ...,
        KmsKeyId: str = ...,
        EnableCloudwatchLogsExports: List[str] = ...
    ) -> DocDBRestoreDBClusterFromSnapshotResult: ...

    def restore_db_cluster_to_point_in_time(self, *,
        DBClusterIdentifier: str,
        SourceDBClusterIdentifier: str,
        RestoreToTime: datetime.datetime = ...,
        UseLatestRestorableTime: bool = ...,
        Port: int = ...,
        DBSubnetGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        Tags: List[DocDBTag] = ...,
        KmsKeyId: str = ...,
        EnableCloudwatchLogsExports: List[str] = ...
    ) -> DocDBRestoreDBClusterToPointInTimeResult: ...


class DocDBTag(TypedDict, total=False):
    Key: str
    Value: str


class DocDBApplyPendingMaintenanceActionResult(TypedDict, total=False):
    ResourcePendingMaintenanceActions: DocDBResourcePendingMaintenanceActions


class DocDBResourcePendingMaintenanceActions(TypedDict, total=False):
    ResourceIdentifier: str
    PendingMaintenanceActionDetails: List[DocDBPendingMaintenanceAction]


class DocDBPendingMaintenanceAction(TypedDict, total=False):
    Action: str
    AutoAppliedAfterDate: datetime.datetime
    ForcedApplyDate: datetime.datetime
    OptInStatus: str
    CurrentApplyDate: datetime.datetime
    Description: str


class DocDBCopyDBClusterParameterGroupResult(TypedDict, total=False):
    DBClusterParameterGroup: DocDBDBClusterParameterGroup


class DocDBDBClusterParameterGroup(TypedDict, total=False):
    DBClusterParameterGroupName: str
    DBParameterGroupFamily: str
    Description: str
    DBClusterParameterGroupArn: str


class DocDBCopyDBClusterSnapshotResult(TypedDict, total=False):
    DBClusterSnapshot: DocDBDBClusterSnapshot


class DocDBDBClusterSnapshot(TypedDict, total=False):
    AvailabilityZones: List[str]
    DBClusterSnapshotIdentifier: str
    DBClusterIdentifier: str
    SnapshotCreateTime: datetime.datetime
    Engine: str
    Status: str
    Port: int
    VpcId: str
    ClusterCreateTime: datetime.datetime
    MasterUsername: str
    EngineVersion: str
    SnapshotType: str
    PercentProgress: int
    StorageEncrypted: bool
    KmsKeyId: str
    DBClusterSnapshotArn: str
    SourceDBClusterSnapshotArn: str


class DocDBCreateDBClusterResult(TypedDict, total=False):
    DBCluster: DocDBDBCluster


class DocDBDBCluster(TypedDict, total=False):
    AvailabilityZones: List[str]
    BackupRetentionPeriod: int
    DBClusterIdentifier: str
    DBClusterParameterGroup: str
    DBSubnetGroup: str
    Status: str
    PercentProgress: str
    EarliestRestorableTime: datetime.datetime
    Endpoint: str
    ReaderEndpoint: str
    MultiAZ: bool
    Engine: str
    EngineVersion: str
    LatestRestorableTime: datetime.datetime
    Port: int
    MasterUsername: str
    PreferredBackupWindow: str
    PreferredMaintenanceWindow: str
    DBClusterMembers: List[DocDBDBClusterMember]
    VpcSecurityGroups: List[DocDBVpcSecurityGroupMembership]
    HostedZoneId: str
    StorageEncrypted: bool
    KmsKeyId: str
    DbClusterResourceId: str
    DBClusterArn: str
    AssociatedRoles: List[DocDBDBClusterRole]
    ClusterCreateTime: datetime.datetime
    EnabledCloudwatchLogsExports: List[str]


class DocDBDBClusterMember(TypedDict, total=False):
    DBInstanceIdentifier: str
    IsClusterWriter: bool
    DBClusterParameterGroupStatus: str
    PromotionTier: int


class DocDBVpcSecurityGroupMembership(TypedDict, total=False):
    VpcSecurityGroupId: str
    Status: str


class DocDBDBClusterRole(TypedDict, total=False):
    RoleArn: str
    Status: str


class DocDBCreateDBClusterParameterGroupResult(TypedDict, total=False):
    DBClusterParameterGroup: DocDBDBClusterParameterGroup


class DocDBCreateDBClusterSnapshotResult(TypedDict, total=False):
    DBClusterSnapshot: DocDBDBClusterSnapshot


class DocDBCreateDBInstanceResult(TypedDict, total=False):
    DBInstance: DocDBDBInstance


class DocDBDBInstance(TypedDict, total=False):
    DBInstanceIdentifier: str
    DBInstanceClass: str
    Engine: str
    DBInstanceStatus: str
    Endpoint: DocDBEndpoint
    InstanceCreateTime: datetime.datetime
    PreferredBackupWindow: str
    BackupRetentionPeriod: int
    VpcSecurityGroups: List[DocDBVpcSecurityGroupMembership]
    AvailabilityZone: str
    DBSubnetGroup: DocDBDBSubnetGroup
    PreferredMaintenanceWindow: str
    PendingModifiedValues: DocDBPendingModifiedValues
    LatestRestorableTime: datetime.datetime
    EngineVersion: str
    AutoMinorVersionUpgrade: bool
    PubliclyAccessible: bool
    StatusInfos: List[DocDBDBInstanceStatusInfo]
    DBClusterIdentifier: str
    StorageEncrypted: bool
    KmsKeyId: str
    DbiResourceId: str
    PromotionTier: int
    DBInstanceArn: str
    EnabledCloudwatchLogsExports: List[str]


class DocDBEndpoint(TypedDict, total=False):
    Address: str
    Port: int
    HostedZoneId: str


class DocDBDBSubnetGroup(TypedDict, total=False):
    DBSubnetGroupName: str
    DBSubnetGroupDescription: str
    VpcId: str
    SubnetGroupStatus: str
    Subnets: List[DocDBSubnet]
    DBSubnetGroupArn: str


class DocDBSubnet(TypedDict, total=False):
    SubnetIdentifier: str
    SubnetAvailabilityZone: DocDBAvailabilityZone
    SubnetStatus: str


class DocDBAvailabilityZone(TypedDict, total=False):
    Name: str


class DocDBPendingModifiedValues(TypedDict, total=False):
    DBInstanceClass: str
    AllocatedStorage: int
    MasterUserPassword: str
    Port: int
    BackupRetentionPeriod: int
    MultiAZ: bool
    EngineVersion: str
    LicenseModel: str
    Iops: int
    DBInstanceIdentifier: str
    StorageType: str
    CACertificateIdentifier: str
    DBSubnetGroupName: str
    PendingCloudwatchLogsExports: DocDBPendingCloudwatchLogsExports


class DocDBPendingCloudwatchLogsExports(TypedDict, total=False):
    LogTypesToEnable: List[str]
    LogTypesToDisable: List[str]


class DocDBDBInstanceStatusInfo(TypedDict, total=False):
    StatusType: str
    Normal: bool
    Status: str
    Message: str


class DocDBCreateDBSubnetGroupResult(TypedDict, total=False):
    DBSubnetGroup: DocDBDBSubnetGroup


class DocDBDeleteDBClusterResult(TypedDict, total=False):
    DBCluster: DocDBDBCluster


class DocDBDeleteDBClusterSnapshotResult(TypedDict, total=False):
    DBClusterSnapshot: DocDBDBClusterSnapshot


class DocDBDeleteDBInstanceResult(TypedDict, total=False):
    DBInstance: DocDBDBInstance


class DocDBFilter(TypedDict):
    Name: str
    Values: List[str]


class DocDBDBClusterParameterGroupsMessage(TypedDict, total=False):
    Marker: str
    DBClusterParameterGroups: List[DocDBDBClusterParameterGroup]


class DocDBDBClusterParameterGroupDetails(TypedDict, total=False):
    Parameters: List[DocDBParameter]
    Marker: str


class DocDBParameter(TypedDict, total=False):
    ParameterName: str
    ParameterValue: str
    Description: str
    Source: str
    ApplyType: str
    DataType: str
    AllowedValues: str
    IsModifiable: bool
    MinimumEngineVersion: str
    ApplyMethod: str


class DocDBDescribeDBClusterSnapshotAttributesResult(TypedDict, total=False):
    DBClusterSnapshotAttributesResult: DocDBDBClusterSnapshotAttributesResult


class DocDBDBClusterSnapshotAttributesResult(TypedDict, total=False):
    DBClusterSnapshotIdentifier: str
    DBClusterSnapshotAttributes: List[DocDBDBClusterSnapshotAttribute]


class DocDBDBClusterSnapshotAttribute(TypedDict, total=False):
    AttributeName: str
    AttributeValues: List[str]


class DocDBDBClusterSnapshotMessage(TypedDict, total=False):
    Marker: str
    DBClusterSnapshots: List[DocDBDBClusterSnapshot]


class DocDBDBClusterMessage(TypedDict, total=False):
    Marker: str
    DBClusters: List[DocDBDBCluster]


class DocDBDBEngineVersionMessage(TypedDict, total=False):
    Marker: str
    DBEngineVersions: List[DocDBDBEngineVersion]


class DocDBDBEngineVersion(TypedDict, total=False):
    Engine: str
    EngineVersion: str
    DBParameterGroupFamily: str
    DBEngineDescription: str
    DBEngineVersionDescription: str
    ValidUpgradeTarget: List[DocDBUpgradeTarget]
    ExportableLogTypes: List[str]
    SupportsLogExportsToCloudwatchLogs: bool


class DocDBUpgradeTarget(TypedDict, total=False):
    Engine: str
    EngineVersion: str
    Description: str
    AutoUpgrade: bool
    IsMajorVersionUpgrade: bool


class DocDBDBInstanceMessage(TypedDict, total=False):
    Marker: str
    DBInstances: List[DocDBDBInstance]


class DocDBDBSubnetGroupMessage(TypedDict, total=False):
    Marker: str
    DBSubnetGroups: List[DocDBDBSubnetGroup]


class DocDBDescribeEngineDefaultClusterParametersResult(TypedDict, total=False):
    EngineDefaults: DocDBEngineDefaults


class DocDBEngineDefaults(TypedDict, total=False):
    DBParameterGroupFamily: str
    Marker: str
    Parameters: List[DocDBParameter]


class DocDBEventCategoriesMessage(TypedDict, total=False):
    EventCategoriesMapList: List[DocDBEventCategoriesMap]


class DocDBEventCategoriesMap(TypedDict, total=False):
    SourceType: str
    EventCategories: List[str]


class DocDBEventsMessage(TypedDict, total=False):
    Marker: str
    Events: List[DocDBEvent]


class DocDBEvent(TypedDict, total=False):
    SourceIdentifier: str
    SourceType: str
    Message: str
    EventCategories: List[str]
    Date: datetime.datetime
    SourceArn: str


class DocDBOrderableDBInstanceOptionsMessage(TypedDict, total=False):
    OrderableDBInstanceOptions: List[DocDBOrderableDBInstanceOption]
    Marker: str


class DocDBOrderableDBInstanceOption(TypedDict, total=False):
    Engine: str
    EngineVersion: str
    DBInstanceClass: str
    LicenseModel: str
    AvailabilityZones: List[DocDBAvailabilityZone]
    Vpc: bool


class DocDBPendingMaintenanceActionsMessage(TypedDict, total=False):
    PendingMaintenanceActions: List[DocDBResourcePendingMaintenanceActions]
    Marker: str


class DocDBFailoverDBClusterResult(TypedDict, total=False):
    DBCluster: DocDBDBCluster


class DocDBTagListMessage(TypedDict, total=False):
    TagList: List[DocDBTag]


class DocDBCloudwatchLogsExportConfiguration(TypedDict, total=False):
    EnableLogTypes: List[str]
    DisableLogTypes: List[str]


class DocDBModifyDBClusterResult(TypedDict, total=False):
    DBCluster: DocDBDBCluster


class DocDBDBClusterParameterGroupNameMessage(TypedDict, total=False):
    DBClusterParameterGroupName: str


class DocDBModifyDBClusterSnapshotAttributeResult(TypedDict, total=False):
    DBClusterSnapshotAttributesResult: DocDBDBClusterSnapshotAttributesResult


class DocDBModifyDBInstanceResult(TypedDict, total=False):
    DBInstance: DocDBDBInstance


class DocDBModifyDBSubnetGroupResult(TypedDict, total=False):
    DBSubnetGroup: DocDBDBSubnetGroup


class DocDBRebootDBInstanceResult(TypedDict, total=False):
    DBInstance: DocDBDBInstance


class DocDBRestoreDBClusterFromSnapshotResult(TypedDict, total=False):
    DBCluster: DocDBDBCluster


class DocDBRestoreDBClusterToPointInTimeResult(TypedDict, total=False):
    DBCluster: DocDBDBCluster


class DirectoryService(BaseClient):
    def accept_shared_directory(self, *,
        SharedDirectoryId: str
    ) -> DirectoryServiceAcceptSharedDirectoryResult: ...

    def add_ip_routes(self, *,
        DirectoryId: str,
        IpRoutes: List[DirectoryServiceIpRoute],
        UpdateSecurityGroupForDirectoryControllers: bool = ...
    ) -> DirectoryServiceAddIpRoutesResult: ...

    def add_tags_to_resource(self, *,
        ResourceId: str,
        Tags: List[DirectoryServiceTag]
    ) -> DirectoryServiceAddTagsToResourceResult: ...

    def cancel_schema_extension(self, *,
        DirectoryId: str,
        SchemaExtensionId: str
    ) -> DirectoryServiceCancelSchemaExtensionResult: ...

    def connect_directory(self, *,
        Name: str,
        Password: str,
        Size: str,
        ConnectSettings: DirectoryServiceDirectoryConnectSettings,
        ShortName: str = ...,
        Description: str = ...,
        Tags: List[DirectoryServiceTag] = ...
    ) -> DirectoryServiceConnectDirectoryResult: ...

    def create_alias(self, *,
        DirectoryId: str,
        Alias: str
    ) -> DirectoryServiceCreateAliasResult: ...

    def create_computer(self, *,
        DirectoryId: str,
        ComputerName: str,
        Password: str,
        OrganizationalUnitDistinguishedName: str = ...,
        ComputerAttributes: List[DirectoryServiceAttribute] = ...
    ) -> DirectoryServiceCreateComputerResult: ...

    def create_conditional_forwarder(self, *,
        DirectoryId: str,
        RemoteDomainName: str,
        DnsIpAddrs: List[str]
    ) -> DirectoryServiceCreateConditionalForwarderResult: ...

    def create_directory(self, *,
        Name: str,
        Password: str,
        Size: str,
        ShortName: str = ...,
        Description: str = ...,
        VpcSettings: DirectoryServiceDirectoryVpcSettings = ...,
        Tags: List[DirectoryServiceTag] = ...
    ) -> DirectoryServiceCreateDirectoryResult: ...

    def create_log_subscription(self, *,
        DirectoryId: str,
        LogGroupName: str
    ) -> DirectoryServiceCreateLogSubscriptionResult: ...

    def create_microsoft_ad(self, *,
        Name: str,
        Password: str,
        VpcSettings: DirectoryServiceDirectoryVpcSettings,
        ShortName: str = ...,
        Description: str = ...,
        Edition: str = ...,
        Tags: List[DirectoryServiceTag] = ...
    ) -> DirectoryServiceCreateMicrosoftADResult: ...

    def create_snapshot(self, *,
        DirectoryId: str,
        Name: str = ...
    ) -> DirectoryServiceCreateSnapshotResult: ...

    def create_trust(self, *,
        DirectoryId: str,
        RemoteDomainName: str,
        TrustPassword: str,
        TrustDirection: str,
        TrustType: str = ...,
        ConditionalForwarderIpAddrs: List[str] = ...,
        SelectiveAuth: str = ...
    ) -> DirectoryServiceCreateTrustResult: ...

    def delete_conditional_forwarder(self, *,
        DirectoryId: str,
        RemoteDomainName: str
    ) -> DirectoryServiceDeleteConditionalForwarderResult: ...

    def delete_directory(self, *,
        DirectoryId: str
    ) -> DirectoryServiceDeleteDirectoryResult: ...

    def delete_log_subscription(self, *,
        DirectoryId: str
    ) -> DirectoryServiceDeleteLogSubscriptionResult: ...

    def delete_snapshot(self, *,
        SnapshotId: str
    ) -> DirectoryServiceDeleteSnapshotResult: ...

    def delete_trust(self, *,
        TrustId: str,
        DeleteAssociatedConditionalForwarder: bool = ...
    ) -> DirectoryServiceDeleteTrustResult: ...

    def deregister_event_topic(self, *,
        DirectoryId: str,
        TopicName: str
    ) -> DirectoryServiceDeregisterEventTopicResult: ...

    def describe_conditional_forwarders(self, *,
        DirectoryId: str,
        RemoteDomainNames: List[str] = ...
    ) -> DirectoryServiceDescribeConditionalForwardersResult: ...

    def describe_directories(self, *,
        DirectoryIds: List[str] = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> DirectoryServiceDescribeDirectoriesResult: ...

    def describe_domain_controllers(self, *,
        DirectoryId: str,
        DomainControllerIds: List[str] = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> DirectoryServiceDescribeDomainControllersResult: ...

    def describe_event_topics(self, *,
        DirectoryId: str = ...,
        TopicNames: List[str] = ...
    ) -> DirectoryServiceDescribeEventTopicsResult: ...

    def describe_shared_directories(self, *,
        OwnerDirectoryId: str,
        SharedDirectoryIds: List[str] = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> DirectoryServiceDescribeSharedDirectoriesResult: ...

    def describe_snapshots(self, *,
        DirectoryId: str = ...,
        SnapshotIds: List[str] = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> DirectoryServiceDescribeSnapshotsResult: ...

    def describe_trusts(self, *,
        DirectoryId: str = ...,
        TrustIds: List[str] = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> DirectoryServiceDescribeTrustsResult: ...

    def disable_radius(self, *,
        DirectoryId: str
    ) -> DirectoryServiceDisableRadiusResult: ...

    def disable_sso(self, *,
        DirectoryId: str,
        UserName: str = ...,
        Password: str = ...
    ) -> DirectoryServiceDisableSsoResult: ...

    def enable_radius(self, *,
        DirectoryId: str,
        RadiusSettings: DirectoryServiceRadiusSettings
    ) -> DirectoryServiceEnableRadiusResult: ...

    def enable_sso(self, *,
        DirectoryId: str,
        UserName: str = ...,
        Password: str = ...
    ) -> DirectoryServiceEnableSsoResult: ...

    def get_directory_limits(self) -> DirectoryServiceGetDirectoryLimitsResult: ...

    def get_snapshot_limits(self, *,
        DirectoryId: str
    ) -> DirectoryServiceGetSnapshotLimitsResult: ...

    def list_ip_routes(self, *,
        DirectoryId: str,
        NextToken: str = ...,
        Limit: int = ...
    ) -> DirectoryServiceListIpRoutesResult: ...

    def list_log_subscriptions(self, *,
        DirectoryId: str = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> DirectoryServiceListLogSubscriptionsResult: ...

    def list_schema_extensions(self, *,
        DirectoryId: str,
        NextToken: str = ...,
        Limit: int = ...
    ) -> DirectoryServiceListSchemaExtensionsResult: ...

    def list_tags_for_resource(self, *,
        ResourceId: str,
        NextToken: str = ...,
        Limit: int = ...
    ) -> DirectoryServiceListTagsForResourceResult: ...

    def register_event_topic(self, *,
        DirectoryId: str,
        TopicName: str
    ) -> DirectoryServiceRegisterEventTopicResult: ...

    def reject_shared_directory(self, *,
        SharedDirectoryId: str
    ) -> DirectoryServiceRejectSharedDirectoryResult: ...

    def remove_ip_routes(self, *,
        DirectoryId: str,
        CidrIps: List[str]
    ) -> DirectoryServiceRemoveIpRoutesResult: ...

    def remove_tags_from_resource(self, *,
        ResourceId: str,
        TagKeys: List[str]
    ) -> DirectoryServiceRemoveTagsFromResourceResult: ...

    def reset_user_password(self, *,
        DirectoryId: str,
        UserName: str,
        NewPassword: str
    ) -> DirectoryServiceResetUserPasswordResult: ...

    def restore_from_snapshot(self, *,
        SnapshotId: str
    ) -> DirectoryServiceRestoreFromSnapshotResult: ...

    def share_directory(self, *,
        DirectoryId: str,
        ShareTarget: DirectoryServiceShareTarget,
        ShareMethod: str,
        ShareNotes: str = ...
    ) -> DirectoryServiceShareDirectoryResult: ...

    def start_schema_extension(self, *,
        DirectoryId: str,
        CreateSnapshotBeforeSchemaExtension: bool,
        LdifContent: str,
        Description: str
    ) -> DirectoryServiceStartSchemaExtensionResult: ...

    def unshare_directory(self, *,
        DirectoryId: str,
        UnshareTarget: DirectoryServiceUnshareTarget
    ) -> DirectoryServiceUnshareDirectoryResult: ...

    def update_conditional_forwarder(self, *,
        DirectoryId: str,
        RemoteDomainName: str,
        DnsIpAddrs: List[str]
    ) -> DirectoryServiceUpdateConditionalForwarderResult: ...

    def update_number_of_domain_controllers(self, *,
        DirectoryId: str,
        DesiredNumber: int
    ) -> DirectoryServiceUpdateNumberOfDomainControllersResult: ...

    def update_radius(self, *,
        DirectoryId: str,
        RadiusSettings: DirectoryServiceRadiusSettings
    ) -> DirectoryServiceUpdateRadiusResult: ...

    def update_trust(self, *,
        TrustId: str,
        SelectiveAuth: str = ...
    ) -> DirectoryServiceUpdateTrustResult: ...

    def verify_trust(self, *,
        TrustId: str
    ) -> DirectoryServiceVerifyTrustResult: ...


class DirectoryServiceAcceptSharedDirectoryResult(TypedDict, total=False):
    SharedDirectory: DirectoryServiceSharedDirectory


class DirectoryServiceSharedDirectory(TypedDict, total=False):
    OwnerAccountId: str
    OwnerDirectoryId: str
    ShareMethod: str
    SharedAccountId: str
    SharedDirectoryId: str
    ShareStatus: str
    ShareNotes: str
    CreatedDateTime: datetime.datetime
    LastUpdatedDateTime: datetime.datetime


class DirectoryServiceIpRoute(TypedDict, total=False):
    CidrIp: str
    Description: str


class DirectoryServiceAddIpRoutesResult(TypedDict, total=False):
    pass


class DirectoryServiceTag(TypedDict):
    Key: str
    Value: str


class DirectoryServiceAddTagsToResourceResult(TypedDict, total=False):
    pass


class DirectoryServiceCancelSchemaExtensionResult(TypedDict, total=False):
    pass


class DirectoryServiceDirectoryConnectSettings(TypedDict):
    VpcId: str
    SubnetIds: List[str]
    CustomerDnsIps: List[str]
    CustomerUserName: str


class DirectoryServiceConnectDirectoryResult(TypedDict, total=False):
    DirectoryId: str


class DirectoryServiceCreateAliasResult(TypedDict, total=False):
    DirectoryId: str
    Alias: str


class DirectoryServiceAttribute(TypedDict, total=False):
    Name: str
    Value: str


class DirectoryServiceCreateComputerResult(TypedDict, total=False):
    Computer: DirectoryServiceComputer


class DirectoryServiceComputer(TypedDict, total=False):
    ComputerId: str
    ComputerName: str
    ComputerAttributes: List[DirectoryServiceAttribute]


class DirectoryServiceCreateConditionalForwarderResult(TypedDict, total=False):
    pass


class DirectoryServiceDirectoryVpcSettings(TypedDict):
    VpcId: str
    SubnetIds: List[str]


class DirectoryServiceCreateDirectoryResult(TypedDict, total=False):
    DirectoryId: str


class DirectoryServiceCreateLogSubscriptionResult(TypedDict, total=False):
    pass


class DirectoryServiceCreateMicrosoftADResult(TypedDict, total=False):
    DirectoryId: str


class DirectoryServiceCreateSnapshotResult(TypedDict, total=False):
    SnapshotId: str


class DirectoryServiceCreateTrustResult(TypedDict, total=False):
    TrustId: str


class DirectoryServiceDeleteConditionalForwarderResult(TypedDict, total=False):
    pass


class DirectoryServiceDeleteDirectoryResult(TypedDict, total=False):
    DirectoryId: str


class DirectoryServiceDeleteLogSubscriptionResult(TypedDict, total=False):
    pass


class DirectoryServiceDeleteSnapshotResult(TypedDict, total=False):
    SnapshotId: str


class DirectoryServiceDeleteTrustResult(TypedDict, total=False):
    TrustId: str


class DirectoryServiceDeregisterEventTopicResult(TypedDict, total=False):
    pass


class DirectoryServiceDescribeConditionalForwardersResult(TypedDict, total=False):
    ConditionalForwarders: List[DirectoryServiceConditionalForwarder]


class DirectoryServiceConditionalForwarder(TypedDict, total=False):
    RemoteDomainName: str
    DnsIpAddrs: List[str]
    ReplicationScope: str


class DirectoryServiceDescribeDirectoriesResult(TypedDict, total=False):
    DirectoryDescriptions: List[DirectoryServiceDirectoryDescription]
    NextToken: str


class DirectoryServiceDirectoryDescription(TypedDict, total=False):
    DirectoryId: str
    Name: str
    ShortName: str
    Size: str
    Edition: str
    Alias: str
    AccessUrl: str
    Description: str
    DnsIpAddrs: List[str]
    Stage: str
    ShareStatus: str
    ShareMethod: str
    ShareNotes: str
    LaunchTime: datetime.datetime
    StageLastUpdatedDateTime: datetime.datetime
    Type: str
    VpcSettings: DirectoryServiceDirectoryVpcSettingsDescription
    ConnectSettings: DirectoryServiceDirectoryConnectSettingsDescription
    RadiusSettings: DirectoryServiceRadiusSettings
    RadiusStatus: str
    StageReason: str
    SsoEnabled: bool
    DesiredNumberOfDomainControllers: int
    OwnerDirectoryDescription: DirectoryServiceOwnerDirectoryDescription


class DirectoryServiceDirectoryVpcSettingsDescription(TypedDict, total=False):
    VpcId: str
    SubnetIds: List[str]
    SecurityGroupId: str
    AvailabilityZones: List[str]


class DirectoryServiceDirectoryConnectSettingsDescription(TypedDict, total=False):
    VpcId: str
    SubnetIds: List[str]
    CustomerUserName: str
    SecurityGroupId: str
    AvailabilityZones: List[str]
    ConnectIps: List[str]


class DirectoryServiceRadiusSettings(TypedDict, total=False):
    RadiusServers: List[str]
    RadiusPort: int
    RadiusTimeout: int
    RadiusRetries: int
    SharedSecret: str
    AuthenticationProtocol: str
    DisplayLabel: str
    UseSameUsername: bool


class DirectoryServiceOwnerDirectoryDescription(TypedDict, total=False):
    DirectoryId: str
    AccountId: str
    DnsIpAddrs: List[str]
    VpcSettings: DirectoryServiceDirectoryVpcSettingsDescription
    RadiusSettings: DirectoryServiceRadiusSettings
    RadiusStatus: str


class DirectoryServiceDescribeDomainControllersResult(TypedDict, total=False):
    DomainControllers: List[DirectoryServiceDomainController]
    NextToken: str


class DirectoryServiceDomainController(TypedDict, total=False):
    DirectoryId: str
    DomainControllerId: str
    DnsIpAddr: str
    VpcId: str
    SubnetId: str
    AvailabilityZone: str
    Status: str
    StatusReason: str
    LaunchTime: datetime.datetime
    StatusLastUpdatedDateTime: datetime.datetime


class DirectoryServiceDescribeEventTopicsResult(TypedDict, total=False):
    EventTopics: List[DirectoryServiceEventTopic]


class DirectoryServiceEventTopic(TypedDict, total=False):
    DirectoryId: str
    TopicName: str
    TopicArn: str
    CreatedDateTime: datetime.datetime
    Status: str


class DirectoryServiceDescribeSharedDirectoriesResult(TypedDict, total=False):
    SharedDirectories: List[DirectoryServiceSharedDirectory]
    NextToken: str


class DirectoryServiceDescribeSnapshotsResult(TypedDict, total=False):
    Snapshots: List[DirectoryServiceSnapshot]
    NextToken: str


class DirectoryServiceSnapshot(TypedDict, total=False):
    DirectoryId: str
    SnapshotId: str
    Type: str
    Name: str
    Status: str
    StartTime: datetime.datetime


class DirectoryServiceDescribeTrustsResult(TypedDict, total=False):
    Trusts: List[DirectoryServiceTrust]
    NextToken: str


class DirectoryServiceTrust(TypedDict, total=False):
    DirectoryId: str
    TrustId: str
    RemoteDomainName: str
    TrustType: str
    TrustDirection: str
    TrustState: str
    CreatedDateTime: datetime.datetime
    LastUpdatedDateTime: datetime.datetime
    StateLastUpdatedDateTime: datetime.datetime
    TrustStateReason: str
    SelectiveAuth: str


class DirectoryServiceDisableRadiusResult(TypedDict, total=False):
    pass


class DirectoryServiceDisableSsoResult(TypedDict, total=False):
    pass


class DirectoryServiceEnableRadiusResult(TypedDict, total=False):
    pass


class DirectoryServiceEnableSsoResult(TypedDict, total=False):
    pass


class DirectoryServiceGetDirectoryLimitsResult(TypedDict, total=False):
    DirectoryLimits: DirectoryServiceDirectoryLimits


class DirectoryServiceDirectoryLimits(TypedDict, total=False):
    CloudOnlyDirectoriesLimit: int
    CloudOnlyDirectoriesCurrentCount: int
    CloudOnlyDirectoriesLimitReached: bool
    CloudOnlyMicrosoftADLimit: int
    CloudOnlyMicrosoftADCurrentCount: int
    CloudOnlyMicrosoftADLimitReached: bool
    ConnectedDirectoriesLimit: int
    ConnectedDirectoriesCurrentCount: int
    ConnectedDirectoriesLimitReached: bool


class DirectoryServiceGetSnapshotLimitsResult(TypedDict, total=False):
    SnapshotLimits: DirectoryServiceSnapshotLimits


class DirectoryServiceSnapshotLimits(TypedDict, total=False):
    ManualSnapshotsLimit: int
    ManualSnapshotsCurrentCount: int
    ManualSnapshotsLimitReached: bool


class DirectoryServiceListIpRoutesResult(TypedDict, total=False):
    IpRoutesInfo: List[DirectoryServiceIpRouteInfo]
    NextToken: str


class DirectoryServiceIpRouteInfo(TypedDict, total=False):
    DirectoryId: str
    CidrIp: str
    IpRouteStatusMsg: str
    AddedDateTime: datetime.datetime
    IpRouteStatusReason: str
    Description: str


class DirectoryServiceListLogSubscriptionsResult(TypedDict, total=False):
    LogSubscriptions: List[DirectoryServiceLogSubscription]
    NextToken: str


class DirectoryServiceLogSubscription(TypedDict, total=False):
    DirectoryId: str
    LogGroupName: str
    SubscriptionCreatedDateTime: datetime.datetime


class DirectoryServiceListSchemaExtensionsResult(TypedDict, total=False):
    SchemaExtensionsInfo: List[DirectoryServiceSchemaExtensionInfo]
    NextToken: str


class DirectoryServiceSchemaExtensionInfo(TypedDict, total=False):
    DirectoryId: str
    SchemaExtensionId: str
    Description: str
    SchemaExtensionStatus: str
    SchemaExtensionStatusReason: str
    StartDateTime: datetime.datetime
    EndDateTime: datetime.datetime


class DirectoryServiceListTagsForResourceResult(TypedDict, total=False):
    Tags: List[DirectoryServiceTag]
    NextToken: str


class DirectoryServiceRegisterEventTopicResult(TypedDict, total=False):
    pass


class DirectoryServiceRejectSharedDirectoryResult(TypedDict, total=False):
    SharedDirectoryId: str


class DirectoryServiceRemoveIpRoutesResult(TypedDict, total=False):
    pass


class DirectoryServiceRemoveTagsFromResourceResult(TypedDict, total=False):
    pass


class DirectoryServiceResetUserPasswordResult(TypedDict, total=False):
    pass


class DirectoryServiceRestoreFromSnapshotResult(TypedDict, total=False):
    pass


class DirectoryServiceShareTarget(TypedDict):
    Id: str
    Type: str


class DirectoryServiceShareDirectoryResult(TypedDict, total=False):
    SharedDirectoryId: str


class DirectoryServiceStartSchemaExtensionResult(TypedDict, total=False):
    SchemaExtensionId: str


class DirectoryServiceUnshareTarget(TypedDict):
    Id: str
    Type: str


class DirectoryServiceUnshareDirectoryResult(TypedDict, total=False):
    SharedDirectoryId: str


class DirectoryServiceUpdateConditionalForwarderResult(TypedDict, total=False):
    pass


class DirectoryServiceUpdateNumberOfDomainControllersResult(TypedDict, total=False):
    pass


class DirectoryServiceUpdateRadiusResult(TypedDict, total=False):
    pass


class DirectoryServiceUpdateTrustResult(TypedDict, total=False):
    RequestId: str
    TrustId: str


class DirectoryServiceVerifyTrustResult(TypedDict, total=False):
    TrustId: str


class DynamoDB(BaseClient):
    def batch_get_item(self, *,
        RequestItems: Dict[str, DynamoDBKeysAndAttributes],
        ReturnConsumedCapacity: str = ...
    ) -> DynamoDBBatchGetItemOutput: ...

    def batch_write_item(self, *,
        RequestItems: Dict[str, List[DynamoDBWriteRequest]],
        ReturnConsumedCapacity: str = ...,
        ReturnItemCollectionMetrics: str = ...
    ) -> DynamoDBBatchWriteItemOutput: ...

    def create_backup(self, *,
        TableName: str,
        BackupName: str
    ) -> DynamoDBCreateBackupOutput: ...

    def create_global_table(self, *,
        GlobalTableName: str,
        ReplicationGroup: List[DynamoDBReplica]
    ) -> DynamoDBCreateGlobalTableOutput: ...

    def create_table(self, *,
        AttributeDefinitions: List[DynamoDBAttributeDefinition],
        TableName: str,
        KeySchema: List[DynamoDBKeySchemaElement],
        LocalSecondaryIndexes: List[DynamoDBLocalSecondaryIndex] = ...,
        GlobalSecondaryIndexes: List[DynamoDBGlobalSecondaryIndex] = ...,
        BillingMode: str = ...,
        ProvisionedThroughput: DynamoDBProvisionedThroughput = ...,
        StreamSpecification: DynamoDBStreamSpecification = ...,
        SSESpecification: DynamoDBSSESpecification = ...,
        Tags: List[DynamoDBTag] = ...
    ) -> DynamoDBCreateTableOutput: ...

    def delete_backup(self, *,
        BackupArn: str
    ) -> DynamoDBDeleteBackupOutput: ...

    def delete_item(self, *,
        TableName: str,
        Key: Dict[str, DynamoDBAttributeValue],
        Expected: Dict[str, DynamoDBExpectedAttributeValue] = ...,
        ConditionalOperator: str = ...,
        ReturnValues: str = ...,
        ReturnConsumedCapacity: str = ...,
        ReturnItemCollectionMetrics: str = ...,
        ConditionExpression: str = ...,
        ExpressionAttributeNames: Dict[str, str] = ...,
        ExpressionAttributeValues: Dict[str, DynamoDBAttributeValue] = ...
    ) -> DynamoDBDeleteItemOutput: ...

    def delete_table(self, *,
        TableName: str
    ) -> DynamoDBDeleteTableOutput: ...

    def describe_backup(self, *,
        BackupArn: str
    ) -> DynamoDBDescribeBackupOutput: ...

    def describe_continuous_backups(self, *,
        TableName: str
    ) -> DynamoDBDescribeContinuousBackupsOutput: ...

    def describe_endpoints(self) -> DynamoDBDescribeEndpointsResponse: ...

    def describe_global_table(self, *,
        GlobalTableName: str
    ) -> DynamoDBDescribeGlobalTableOutput: ...

    def describe_global_table_settings(self, *,
        GlobalTableName: str
    ) -> DynamoDBDescribeGlobalTableSettingsOutput: ...

    def describe_limits(self) -> DynamoDBDescribeLimitsOutput: ...

    def describe_table(self, *,
        TableName: str
    ) -> DynamoDBDescribeTableOutput: ...

    def describe_time_to_live(self, *,
        TableName: str
    ) -> DynamoDBDescribeTimeToLiveOutput: ...

    def get_item(self, *,
        TableName: str,
        Key: Dict[str, DynamoDBAttributeValue],
        AttributesToGet: List[str] = ...,
        ConsistentRead: bool = ...,
        ReturnConsumedCapacity: str = ...,
        ProjectionExpression: str = ...,
        ExpressionAttributeNames: Dict[str, str] = ...
    ) -> DynamoDBGetItemOutput: ...

    def list_backups(self, *,
        TableName: str = ...,
        Limit: int = ...,
        TimeRangeLowerBound: datetime.datetime = ...,
        TimeRangeUpperBound: datetime.datetime = ...,
        ExclusiveStartBackupArn: str = ...,
        BackupType: str = ...
    ) -> DynamoDBListBackupsOutput: ...

    def list_global_tables(self, *,
        ExclusiveStartGlobalTableName: str = ...,
        Limit: int = ...,
        RegionName: str = ...
    ) -> DynamoDBListGlobalTablesOutput: ...

    def list_tables(self, *,
        ExclusiveStartTableName: str = ...,
        Limit: int = ...
    ) -> DynamoDBListTablesOutput: ...

    def list_tags_of_resource(self, *,
        ResourceArn: str,
        NextToken: str = ...
    ) -> DynamoDBListTagsOfResourceOutput: ...

    def put_item(self, *,
        TableName: str,
        Item: Dict[str, DynamoDBAttributeValue],
        Expected: Dict[str, DynamoDBExpectedAttributeValue] = ...,
        ReturnValues: str = ...,
        ReturnConsumedCapacity: str = ...,
        ReturnItemCollectionMetrics: str = ...,
        ConditionalOperator: str = ...,
        ConditionExpression: str = ...,
        ExpressionAttributeNames: Dict[str, str] = ...,
        ExpressionAttributeValues: Dict[str, DynamoDBAttributeValue] = ...
    ) -> DynamoDBPutItemOutput: ...

    def query(self, *,
        TableName: str,
        IndexName: str = ...,
        Select: str = ...,
        AttributesToGet: List[str] = ...,
        Limit: int = ...,
        ConsistentRead: bool = ...,
        KeyConditions: Dict[str, DynamoDBCondition] = ...,
        QueryFilter: Dict[str, DynamoDBCondition] = ...,
        ConditionalOperator: str = ...,
        ScanIndexForward: bool = ...,
        ExclusiveStartKey: Dict[str, DynamoDBAttributeValue] = ...,
        ReturnConsumedCapacity: str = ...,
        ProjectionExpression: str = ...,
        FilterExpression: str = ...,
        KeyConditionExpression: str = ...,
        ExpressionAttributeNames: Dict[str, str] = ...,
        ExpressionAttributeValues: Dict[str, DynamoDBAttributeValue] = ...
    ) -> DynamoDBQueryOutput: ...

    def restore_table_from_backup(self, *,
        TargetTableName: str,
        BackupArn: str
    ) -> DynamoDBRestoreTableFromBackupOutput: ...

    def restore_table_to_point_in_time(self, *,
        SourceTableName: str,
        TargetTableName: str,
        UseLatestRestorableTime: bool = ...,
        RestoreDateTime: datetime.datetime = ...
    ) -> DynamoDBRestoreTableToPointInTimeOutput: ...

    def scan(self, *,
        TableName: str,
        IndexName: str = ...,
        AttributesToGet: List[str] = ...,
        Limit: int = ...,
        Select: str = ...,
        ScanFilter: Dict[str, DynamoDBCondition] = ...,
        ConditionalOperator: str = ...,
        ExclusiveStartKey: Dict[str, DynamoDBAttributeValue] = ...,
        ReturnConsumedCapacity: str = ...,
        TotalSegments: int = ...,
        Segment: int = ...,
        ProjectionExpression: str = ...,
        FilterExpression: str = ...,
        ExpressionAttributeNames: Dict[str, str] = ...,
        ExpressionAttributeValues: Dict[str, DynamoDBAttributeValue] = ...,
        ConsistentRead: bool = ...
    ) -> DynamoDBScanOutput: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: List[DynamoDBTag]
    ): ...

    def transact_get_items(self, *,
        TransactItems: List[DynamoDBTransactGetItem],
        ReturnConsumedCapacity: str = ...
    ) -> DynamoDBTransactGetItemsOutput: ...

    def transact_write_items(self, *,
        TransactItems: List[DynamoDBTransactWriteItem],
        ReturnConsumedCapacity: str = ...,
        ReturnItemCollectionMetrics: str = ...,
        ClientRequestToken: str = ...
    ) -> DynamoDBTransactWriteItemsOutput: ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ): ...

    def update_continuous_backups(self, *,
        TableName: str,
        PointInTimeRecoverySpecification: DynamoDBPointInTimeRecoverySpecification
    ) -> DynamoDBUpdateContinuousBackupsOutput: ...

    def update_global_table(self, *,
        GlobalTableName: str,
        ReplicaUpdates: List[DynamoDBReplicaUpdate]
    ) -> DynamoDBUpdateGlobalTableOutput: ...

    def update_global_table_settings(self, *,
        GlobalTableName: str,
        GlobalTableBillingMode: str = ...,
        GlobalTableProvisionedWriteCapacityUnits: int = ...,
        GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: DynamoDBAutoScalingSettingsUpdate = ...,
        GlobalTableGlobalSecondaryIndexSettingsUpdate: List[DynamoDBGlobalTableGlobalSecondaryIndexSettingsUpdate] = ...,
        ReplicaSettingsUpdate: List[DynamoDBReplicaSettingsUpdate] = ...
    ) -> DynamoDBUpdateGlobalTableSettingsOutput: ...

    def update_item(self, *,
        TableName: str,
        Key: Dict[str, DynamoDBAttributeValue],
        AttributeUpdates: Dict[str, DynamoDBAttributeValueUpdate] = ...,
        Expected: Dict[str, DynamoDBExpectedAttributeValue] = ...,
        ConditionalOperator: str = ...,
        ReturnValues: str = ...,
        ReturnConsumedCapacity: str = ...,
        ReturnItemCollectionMetrics: str = ...,
        UpdateExpression: str = ...,
        ConditionExpression: str = ...,
        ExpressionAttributeNames: Dict[str, str] = ...,
        ExpressionAttributeValues: Dict[str, DynamoDBAttributeValue] = ...
    ) -> DynamoDBUpdateItemOutput: ...

    def update_table(self, *,
        TableName: str,
        AttributeDefinitions: List[DynamoDBAttributeDefinition] = ...,
        BillingMode: str = ...,
        ProvisionedThroughput: DynamoDBProvisionedThroughput = ...,
        GlobalSecondaryIndexUpdates: List[DynamoDBGlobalSecondaryIndexUpdate] = ...,
        StreamSpecification: DynamoDBStreamSpecification = ...,
        SSESpecification: DynamoDBSSESpecification = ...
    ) -> DynamoDBUpdateTableOutput: ...

    def update_time_to_live(self, *,
        TableName: str,
        TimeToLiveSpecification: DynamoDBTimeToLiveSpecification
    ) -> DynamoDBUpdateTimeToLiveOutput: ...


class _DynamoDBKeysAndAttributes(TypedDict):
    Keys: List[Dict[str, DynamoDBAttributeValue]]


class DynamoDBKeysAndAttributes(_DynamoDBKeysAndAttributes, total=False):
    AttributesToGet: List[str]
    ConsistentRead: bool
    ProjectionExpression: str
    ExpressionAttributeNames: Dict[str, str]


class DynamoDBAttributeValue(TypedDict, total=False):
    S: str
    N: str
    B: bytes
    SS: List[str]
    NS: List[str]
    BS: List[bytes]
    M: Dict[str, DynamoDBAttributeValue]
    L: List[DynamoDBAttributeValue]
    NULL: bool
    BOOL: bool


class DynamoDBBatchGetItemOutput(TypedDict, total=False):
    Responses: Dict[str, List[Dict[str, DynamoDBAttributeValue]]]
    UnprocessedKeys: Dict[str, DynamoDBKeysAndAttributes]
    ConsumedCapacity: List[DynamoDBConsumedCapacity]


class DynamoDBConsumedCapacity(TypedDict, total=False):
    TableName: str
    CapacityUnits: float
    ReadCapacityUnits: float
    WriteCapacityUnits: float
    Table: DynamoDBCapacity
    LocalSecondaryIndexes: Dict[str, DynamoDBCapacity]
    GlobalSecondaryIndexes: Dict[str, DynamoDBCapacity]


class DynamoDBCapacity(TypedDict, total=False):
    ReadCapacityUnits: float
    WriteCapacityUnits: float
    CapacityUnits: float


class DynamoDBWriteRequest(TypedDict, total=False):
    PutRequest: DynamoDBPutRequest
    DeleteRequest: DynamoDBDeleteRequest


class DynamoDBPutRequest(TypedDict):
    Item: Dict[str, DynamoDBAttributeValue]


class DynamoDBDeleteRequest(TypedDict):
    Key: Dict[str, DynamoDBAttributeValue]


class DynamoDBBatchWriteItemOutput(TypedDict, total=False):
    UnprocessedItems: Dict[str, List[DynamoDBWriteRequest]]
    ItemCollectionMetrics: Dict[str, List[DynamoDBItemCollectionMetrics]]
    ConsumedCapacity: List[DynamoDBConsumedCapacity]


class DynamoDBItemCollectionMetrics(TypedDict, total=False):
    ItemCollectionKey: Dict[str, DynamoDBAttributeValue]
    SizeEstimateRangeGB: List[float]


class DynamoDBCreateBackupOutput(TypedDict, total=False):
    BackupDetails: DynamoDBBackupDetails


class _DynamoDBBackupDetails(TypedDict):
    BackupArn: str
    BackupName: str
    BackupStatus: str
    BackupType: str
    BackupCreationDateTime: datetime.datetime


class DynamoDBBackupDetails(_DynamoDBBackupDetails, total=False):
    BackupSizeBytes: int
    BackupExpiryDateTime: datetime.datetime


class DynamoDBReplica(TypedDict, total=False):
    RegionName: str


class DynamoDBCreateGlobalTableOutput(TypedDict, total=False):
    GlobalTableDescription: DynamoDBGlobalTableDescription


class DynamoDBGlobalTableDescription(TypedDict, total=False):
    ReplicationGroup: List[DynamoDBReplicaDescription]
    GlobalTableArn: str
    CreationDateTime: datetime.datetime
    GlobalTableStatus: str
    GlobalTableName: str


class DynamoDBReplicaDescription(TypedDict, total=False):
    RegionName: str


class DynamoDBAttributeDefinition(TypedDict):
    AttributeName: str
    AttributeType: str


class DynamoDBKeySchemaElement(TypedDict):
    AttributeName: str
    KeyType: str


class DynamoDBLocalSecondaryIndex(TypedDict):
    IndexName: str
    KeySchema: List[DynamoDBKeySchemaElement]
    Projection: DynamoDBProjection


class DynamoDBProjection(TypedDict, total=False):
    ProjectionType: str
    NonKeyAttributes: List[str]


class _DynamoDBGlobalSecondaryIndex(TypedDict):
    IndexName: str
    KeySchema: List[DynamoDBKeySchemaElement]
    Projection: DynamoDBProjection


class DynamoDBGlobalSecondaryIndex(_DynamoDBGlobalSecondaryIndex, total=False):
    ProvisionedThroughput: DynamoDBProvisionedThroughput


class DynamoDBProvisionedThroughput(TypedDict):
    ReadCapacityUnits: int
    WriteCapacityUnits: int


class DynamoDBStreamSpecification(TypedDict, total=False):
    StreamEnabled: bool
    StreamViewType: str


class DynamoDBSSESpecification(TypedDict, total=False):
    Enabled: bool
    SSEType: str
    KMSMasterKeyId: str


class DynamoDBTag(TypedDict):
    Key: str
    Value: str


class DynamoDBCreateTableOutput(TypedDict, total=False):
    TableDescription: DynamoDBTableDescription


class DynamoDBTableDescription(TypedDict, total=False):
    AttributeDefinitions: List[DynamoDBAttributeDefinition]
    TableName: str
    KeySchema: List[DynamoDBKeySchemaElement]
    TableStatus: str
    CreationDateTime: datetime.datetime
    ProvisionedThroughput: DynamoDBProvisionedThroughputDescription
    TableSizeBytes: int
    ItemCount: int
    TableArn: str
    TableId: str
    BillingModeSummary: DynamoDBBillingModeSummary
    LocalSecondaryIndexes: List[DynamoDBLocalSecondaryIndexDescription]
    GlobalSecondaryIndexes: List[DynamoDBGlobalSecondaryIndexDescription]
    StreamSpecification: DynamoDBStreamSpecification
    LatestStreamLabel: str
    LatestStreamArn: str
    RestoreSummary: DynamoDBRestoreSummary
    SSEDescription: DynamoDBSSEDescription


class DynamoDBProvisionedThroughputDescription(TypedDict, total=False):
    LastIncreaseDateTime: datetime.datetime
    LastDecreaseDateTime: datetime.datetime
    NumberOfDecreasesToday: int
    ReadCapacityUnits: int
    WriteCapacityUnits: int


class DynamoDBBillingModeSummary(TypedDict, total=False):
    BillingMode: str
    LastUpdateToPayPerRequestDateTime: datetime.datetime


class DynamoDBLocalSecondaryIndexDescription(TypedDict, total=False):
    IndexName: str
    KeySchema: List[DynamoDBKeySchemaElement]
    Projection: DynamoDBProjection
    IndexSizeBytes: int
    ItemCount: int
    IndexArn: str


class DynamoDBGlobalSecondaryIndexDescription(TypedDict, total=False):
    IndexName: str
    KeySchema: List[DynamoDBKeySchemaElement]
    Projection: DynamoDBProjection
    IndexStatus: str
    Backfilling: bool
    ProvisionedThroughput: DynamoDBProvisionedThroughputDescription
    IndexSizeBytes: int
    ItemCount: int
    IndexArn: str


class _DynamoDBRestoreSummary(TypedDict):
    RestoreDateTime: datetime.datetime
    RestoreInProgress: bool


class DynamoDBRestoreSummary(_DynamoDBRestoreSummary, total=False):
    SourceBackupArn: str
    SourceTableArn: str


class DynamoDBSSEDescription(TypedDict, total=False):
    Status: str
    SSEType: str
    KMSMasterKeyArn: str


class DynamoDBDeleteBackupOutput(TypedDict, total=False):
    BackupDescription: DynamoDBBackupDescription


class DynamoDBBackupDescription(TypedDict, total=False):
    BackupDetails: DynamoDBBackupDetails
    SourceTableDetails: DynamoDBSourceTableDetails
    SourceTableFeatureDetails: DynamoDBSourceTableFeatureDetails


class _DynamoDBSourceTableDetails(TypedDict):
    TableName: str
    TableId: str
    KeySchema: List[DynamoDBKeySchemaElement]
    TableCreationDateTime: datetime.datetime
    ProvisionedThroughput: DynamoDBProvisionedThroughput


class DynamoDBSourceTableDetails(_DynamoDBSourceTableDetails, total=False):
    TableArn: str
    TableSizeBytes: int
    ItemCount: int
    BillingMode: str


class DynamoDBSourceTableFeatureDetails(TypedDict, total=False):
    LocalSecondaryIndexes: List[DynamoDBLocalSecondaryIndexInfo]
    GlobalSecondaryIndexes: List[DynamoDBGlobalSecondaryIndexInfo]
    StreamDescription: DynamoDBStreamSpecification
    TimeToLiveDescription: DynamoDBTimeToLiveDescription
    SSEDescription: DynamoDBSSEDescription


class DynamoDBLocalSecondaryIndexInfo(TypedDict, total=False):
    IndexName: str
    KeySchema: List[DynamoDBKeySchemaElement]
    Projection: DynamoDBProjection


class DynamoDBGlobalSecondaryIndexInfo(TypedDict, total=False):
    IndexName: str
    KeySchema: List[DynamoDBKeySchemaElement]
    Projection: DynamoDBProjection
    ProvisionedThroughput: DynamoDBProvisionedThroughput


class DynamoDBTimeToLiveDescription(TypedDict, total=False):
    TimeToLiveStatus: str
    AttributeName: str


class DynamoDBExpectedAttributeValue(TypedDict, total=False):
    Value: DynamoDBAttributeValue
    Exists: bool
    ComparisonOperator: str
    AttributeValueList: List[DynamoDBAttributeValue]


class DynamoDBDeleteItemOutput(TypedDict, total=False):
    Attributes: Dict[str, DynamoDBAttributeValue]
    ConsumedCapacity: DynamoDBConsumedCapacity
    ItemCollectionMetrics: DynamoDBItemCollectionMetrics


class DynamoDBDeleteTableOutput(TypedDict, total=False):
    TableDescription: DynamoDBTableDescription


class DynamoDBDescribeBackupOutput(TypedDict, total=False):
    BackupDescription: DynamoDBBackupDescription


class DynamoDBDescribeContinuousBackupsOutput(TypedDict, total=False):
    ContinuousBackupsDescription: DynamoDBContinuousBackupsDescription


class _DynamoDBContinuousBackupsDescription(TypedDict):
    ContinuousBackupsStatus: str


class DynamoDBContinuousBackupsDescription(_DynamoDBContinuousBackupsDescription, total=False):
    PointInTimeRecoveryDescription: DynamoDBPointInTimeRecoveryDescription


class DynamoDBPointInTimeRecoveryDescription(TypedDict, total=False):
    PointInTimeRecoveryStatus: str
    EarliestRestorableDateTime: datetime.datetime
    LatestRestorableDateTime: datetime.datetime


class DynamoDBDescribeEndpointsResponse(TypedDict):
    Endpoints: List[DynamoDBEndpoint]


class DynamoDBEndpoint(TypedDict):
    Address: str
    CachePeriodInMinutes: int


class DynamoDBDescribeGlobalTableOutput(TypedDict, total=False):
    GlobalTableDescription: DynamoDBGlobalTableDescription


class DynamoDBDescribeGlobalTableSettingsOutput(TypedDict, total=False):
    GlobalTableName: str
    ReplicaSettings: List[DynamoDBReplicaSettingsDescription]


class _DynamoDBReplicaSettingsDescription(TypedDict):
    RegionName: str


class DynamoDBReplicaSettingsDescription(_DynamoDBReplicaSettingsDescription, total=False):
    ReplicaStatus: str
    ReplicaBillingModeSummary: DynamoDBBillingModeSummary
    ReplicaProvisionedReadCapacityUnits: int
    ReplicaProvisionedReadCapacityAutoScalingSettings: DynamoDBAutoScalingSettingsDescription
    ReplicaProvisionedWriteCapacityUnits: int
    ReplicaProvisionedWriteCapacityAutoScalingSettings: DynamoDBAutoScalingSettingsDescription
    ReplicaGlobalSecondaryIndexSettings: List[DynamoDBReplicaGlobalSecondaryIndexSettingsDescription]


class DynamoDBAutoScalingSettingsDescription(TypedDict, total=False):
    MinimumUnits: int
    MaximumUnits: int
    AutoScalingDisabled: bool
    AutoScalingRoleArn: str
    ScalingPolicies: List[DynamoDBAutoScalingPolicyDescription]


class DynamoDBAutoScalingPolicyDescription(TypedDict, total=False):
    PolicyName: str
    TargetTrackingScalingPolicyConfiguration: DynamoDBAutoScalingTargetTrackingScalingPolicyConfigurationDescription


class _DynamoDBAutoScalingTargetTrackingScalingPolicyConfigurationDescription(TypedDict):
    TargetValue: float


class DynamoDBAutoScalingTargetTrackingScalingPolicyConfigurationDescription(_DynamoDBAutoScalingTargetTrackingScalingPolicyConfigurationDescription, total=False):
    DisableScaleIn: bool
    ScaleInCooldown: int
    ScaleOutCooldown: int


class _DynamoDBReplicaGlobalSecondaryIndexSettingsDescription(TypedDict):
    IndexName: str


class DynamoDBReplicaGlobalSecondaryIndexSettingsDescription(_DynamoDBReplicaGlobalSecondaryIndexSettingsDescription, total=False):
    IndexStatus: str
    ProvisionedReadCapacityUnits: int
    ProvisionedReadCapacityAutoScalingSettings: DynamoDBAutoScalingSettingsDescription
    ProvisionedWriteCapacityUnits: int
    ProvisionedWriteCapacityAutoScalingSettings: DynamoDBAutoScalingSettingsDescription


class DynamoDBDescribeLimitsOutput(TypedDict, total=False):
    AccountMaxReadCapacityUnits: int
    AccountMaxWriteCapacityUnits: int
    TableMaxReadCapacityUnits: int
    TableMaxWriteCapacityUnits: int


class DynamoDBDescribeTableOutput(TypedDict, total=False):
    Table: DynamoDBTableDescription


class DynamoDBDescribeTimeToLiveOutput(TypedDict, total=False):
    TimeToLiveDescription: DynamoDBTimeToLiveDescription


class DynamoDBGetItemOutput(TypedDict, total=False):
    Item: Dict[str, DynamoDBAttributeValue]
    ConsumedCapacity: DynamoDBConsumedCapacity


class DynamoDBListBackupsOutput(TypedDict, total=False):
    BackupSummaries: List[DynamoDBBackupSummary]
    LastEvaluatedBackupArn: str


class DynamoDBBackupSummary(TypedDict, total=False):
    TableName: str
    TableId: str
    TableArn: str
    BackupArn: str
    BackupName: str
    BackupCreationDateTime: datetime.datetime
    BackupExpiryDateTime: datetime.datetime
    BackupStatus: str
    BackupType: str
    BackupSizeBytes: int


class DynamoDBListGlobalTablesOutput(TypedDict, total=False):
    GlobalTables: List[DynamoDBGlobalTable]
    LastEvaluatedGlobalTableName: str


class DynamoDBGlobalTable(TypedDict, total=False):
    GlobalTableName: str
    ReplicationGroup: List[DynamoDBReplica]


class DynamoDBListTablesOutput(TypedDict, total=False):
    TableNames: List[str]
    LastEvaluatedTableName: str


class DynamoDBListTagsOfResourceOutput(TypedDict, total=False):
    Tags: List[DynamoDBTag]
    NextToken: str


class DynamoDBPutItemOutput(TypedDict, total=False):
    Attributes: Dict[str, DynamoDBAttributeValue]
    ConsumedCapacity: DynamoDBConsumedCapacity
    ItemCollectionMetrics: DynamoDBItemCollectionMetrics


class _DynamoDBCondition(TypedDict):
    ComparisonOperator: str


class DynamoDBCondition(_DynamoDBCondition, total=False):
    AttributeValueList: List[DynamoDBAttributeValue]


class DynamoDBQueryOutput(TypedDict, total=False):
    Items: List[Dict[str, DynamoDBAttributeValue]]
    Count: int
    ScannedCount: int
    LastEvaluatedKey: Dict[str, DynamoDBAttributeValue]
    ConsumedCapacity: DynamoDBConsumedCapacity


class DynamoDBRestoreTableFromBackupOutput(TypedDict, total=False):
    TableDescription: DynamoDBTableDescription


class DynamoDBRestoreTableToPointInTimeOutput(TypedDict, total=False):
    TableDescription: DynamoDBTableDescription


class DynamoDBScanOutput(TypedDict, total=False):
    Items: List[Dict[str, DynamoDBAttributeValue]]
    Count: int
    ScannedCount: int
    LastEvaluatedKey: Dict[str, DynamoDBAttributeValue]
    ConsumedCapacity: DynamoDBConsumedCapacity


class DynamoDBTransactGetItem(TypedDict):
    Get: DynamoDBGet


class _DynamoDBGet(TypedDict):
    Key: Dict[str, DynamoDBAttributeValue]
    TableName: str


class DynamoDBGet(_DynamoDBGet, total=False):
    ProjectionExpression: str
    ExpressionAttributeNames: Dict[str, str]


class DynamoDBTransactGetItemsOutput(TypedDict, total=False):
    ConsumedCapacity: List[DynamoDBConsumedCapacity]
    Responses: List[DynamoDBItemResponse]


class DynamoDBItemResponse(TypedDict, total=False):
    Item: Dict[str, DynamoDBAttributeValue]


class DynamoDBTransactWriteItem(TypedDict, total=False):
    ConditionCheck: DynamoDBConditionCheck
    Put: DynamoDBPut
    Delete: DynamoDBDelete
    Update: DynamoDBUpdate


class _DynamoDBConditionCheck(TypedDict):
    Key: Dict[str, DynamoDBAttributeValue]
    TableName: str
    ConditionExpression: str


class DynamoDBConditionCheck(_DynamoDBConditionCheck, total=False):
    ExpressionAttributeNames: Dict[str, str]
    ExpressionAttributeValues: Dict[str, DynamoDBAttributeValue]
    ReturnValuesOnConditionCheckFailure: str


class _DynamoDBPut(TypedDict):
    Item: Dict[str, DynamoDBAttributeValue]
    TableName: str


class DynamoDBPut(_DynamoDBPut, total=False):
    ConditionExpression: str
    ExpressionAttributeNames: Dict[str, str]
    ExpressionAttributeValues: Dict[str, DynamoDBAttributeValue]
    ReturnValuesOnConditionCheckFailure: str


class _DynamoDBDelete(TypedDict):
    Key: Dict[str, DynamoDBAttributeValue]
    TableName: str


class DynamoDBDelete(_DynamoDBDelete, total=False):
    ConditionExpression: str
    ExpressionAttributeNames: Dict[str, str]
    ExpressionAttributeValues: Dict[str, DynamoDBAttributeValue]
    ReturnValuesOnConditionCheckFailure: str


class _DynamoDBUpdate(TypedDict):
    Key: Dict[str, DynamoDBAttributeValue]
    UpdateExpression: str
    TableName: str


class DynamoDBUpdate(_DynamoDBUpdate, total=False):
    ConditionExpression: str
    ExpressionAttributeNames: Dict[str, str]
    ExpressionAttributeValues: Dict[str, DynamoDBAttributeValue]
    ReturnValuesOnConditionCheckFailure: str


class DynamoDBTransactWriteItemsOutput(TypedDict, total=False):
    ConsumedCapacity: List[DynamoDBConsumedCapacity]
    ItemCollectionMetrics: Dict[str, List[DynamoDBItemCollectionMetrics]]


class DynamoDBPointInTimeRecoverySpecification(TypedDict):
    PointInTimeRecoveryEnabled: bool


class DynamoDBUpdateContinuousBackupsOutput(TypedDict, total=False):
    ContinuousBackupsDescription: DynamoDBContinuousBackupsDescription


class DynamoDBReplicaUpdate(TypedDict, total=False):
    Create: DynamoDBCreateReplicaAction
    Delete: DynamoDBDeleteReplicaAction


class DynamoDBCreateReplicaAction(TypedDict):
    RegionName: str


class DynamoDBDeleteReplicaAction(TypedDict):
    RegionName: str


class DynamoDBUpdateGlobalTableOutput(TypedDict, total=False):
    GlobalTableDescription: DynamoDBGlobalTableDescription


class DynamoDBAutoScalingSettingsUpdate(TypedDict, total=False):
    MinimumUnits: int
    MaximumUnits: int
    AutoScalingDisabled: bool
    AutoScalingRoleArn: str
    ScalingPolicyUpdate: DynamoDBAutoScalingPolicyUpdate


class _DynamoDBAutoScalingPolicyUpdate(TypedDict):
    TargetTrackingScalingPolicyConfiguration: DynamoDBAutoScalingTargetTrackingScalingPolicyConfigurationUpdate


class DynamoDBAutoScalingPolicyUpdate(_DynamoDBAutoScalingPolicyUpdate, total=False):
    PolicyName: str


class _DynamoDBAutoScalingTargetTrackingScalingPolicyConfigurationUpdate(TypedDict):
    TargetValue: float


class DynamoDBAutoScalingTargetTrackingScalingPolicyConfigurationUpdate(_DynamoDBAutoScalingTargetTrackingScalingPolicyConfigurationUpdate, total=False):
    DisableScaleIn: bool
    ScaleInCooldown: int
    ScaleOutCooldown: int


class _DynamoDBGlobalTableGlobalSecondaryIndexSettingsUpdate(TypedDict):
    IndexName: str


class DynamoDBGlobalTableGlobalSecondaryIndexSettingsUpdate(_DynamoDBGlobalTableGlobalSecondaryIndexSettingsUpdate, total=False):
    ProvisionedWriteCapacityUnits: int
    ProvisionedWriteCapacityAutoScalingSettingsUpdate: DynamoDBAutoScalingSettingsUpdate


class _DynamoDBReplicaSettingsUpdate(TypedDict):
    RegionName: str


class DynamoDBReplicaSettingsUpdate(_DynamoDBReplicaSettingsUpdate, total=False):
    ReplicaProvisionedReadCapacityUnits: int
    ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate: DynamoDBAutoScalingSettingsUpdate
    ReplicaGlobalSecondaryIndexSettingsUpdate: List[DynamoDBReplicaGlobalSecondaryIndexSettingsUpdate]


class _DynamoDBReplicaGlobalSecondaryIndexSettingsUpdate(TypedDict):
    IndexName: str


class DynamoDBReplicaGlobalSecondaryIndexSettingsUpdate(_DynamoDBReplicaGlobalSecondaryIndexSettingsUpdate, total=False):
    ProvisionedReadCapacityUnits: int
    ProvisionedReadCapacityAutoScalingSettingsUpdate: DynamoDBAutoScalingSettingsUpdate


class DynamoDBUpdateGlobalTableSettingsOutput(TypedDict, total=False):
    GlobalTableName: str
    ReplicaSettings: List[DynamoDBReplicaSettingsDescription]


class DynamoDBAttributeValueUpdate(TypedDict, total=False):
    Value: DynamoDBAttributeValue
    Action: str


class DynamoDBUpdateItemOutput(TypedDict, total=False):
    Attributes: Dict[str, DynamoDBAttributeValue]
    ConsumedCapacity: DynamoDBConsumedCapacity
    ItemCollectionMetrics: DynamoDBItemCollectionMetrics


class DynamoDBGlobalSecondaryIndexUpdate(TypedDict, total=False):
    Update: DynamoDBUpdateGlobalSecondaryIndexAction
    Create: DynamoDBCreateGlobalSecondaryIndexAction
    Delete: DynamoDBDeleteGlobalSecondaryIndexAction


class DynamoDBUpdateGlobalSecondaryIndexAction(TypedDict):
    IndexName: str
    ProvisionedThroughput: DynamoDBProvisionedThroughput


class _DynamoDBCreateGlobalSecondaryIndexAction(TypedDict):
    IndexName: str
    KeySchema: List[DynamoDBKeySchemaElement]
    Projection: DynamoDBProjection


class DynamoDBCreateGlobalSecondaryIndexAction(_DynamoDBCreateGlobalSecondaryIndexAction, total=False):
    ProvisionedThroughput: DynamoDBProvisionedThroughput


class DynamoDBDeleteGlobalSecondaryIndexAction(TypedDict):
    IndexName: str


class DynamoDBUpdateTableOutput(TypedDict, total=False):
    TableDescription: DynamoDBTableDescription


class DynamoDBTimeToLiveSpecification(TypedDict):
    Enabled: bool
    AttributeName: str


class DynamoDBUpdateTimeToLiveOutput(TypedDict, total=False):
    TimeToLiveSpecification: DynamoDBTimeToLiveSpecification


class DynamoDBStreams(BaseClient):
    def describe_stream(self, *,
        StreamArn: str,
        Limit: int = ...,
        ExclusiveStartShardId: str = ...
    ) -> DynamoDBStreamsDescribeStreamOutput: ...

    def get_records(self, *,
        ShardIterator: str,
        Limit: int = ...
    ) -> DynamoDBStreamsGetRecordsOutput: ...

    def get_shard_iterator(self, *,
        StreamArn: str,
        ShardId: str,
        ShardIteratorType: str,
        SequenceNumber: str = ...
    ) -> DynamoDBStreamsGetShardIteratorOutput: ...

    def list_streams(self, *,
        TableName: str = ...,
        Limit: int = ...,
        ExclusiveStartStreamArn: str = ...
    ) -> DynamoDBStreamsListStreamsOutput: ...


class DynamoDBStreamsDescribeStreamOutput(TypedDict, total=False):
    StreamDescription: DynamoDBStreamsStreamDescription


class DynamoDBStreamsStreamDescription(TypedDict, total=False):
    StreamArn: str
    StreamLabel: str
    StreamStatus: str
    StreamViewType: str
    CreationRequestDateTime: datetime.datetime
    TableName: str
    KeySchema: List[DynamoDBStreamsKeySchemaElement]
    Shards: List[DynamoDBStreamsShard]
    LastEvaluatedShardId: str


class DynamoDBStreamsKeySchemaElement(TypedDict):
    AttributeName: str
    KeyType: str


class DynamoDBStreamsShard(TypedDict, total=False):
    ShardId: str
    SequenceNumberRange: DynamoDBStreamsSequenceNumberRange
    ParentShardId: str


class DynamoDBStreamsSequenceNumberRange(TypedDict, total=False):
    StartingSequenceNumber: str
    EndingSequenceNumber: str


class DynamoDBStreamsGetRecordsOutput(TypedDict, total=False):
    Records: List[DynamoDBStreamsRecord]
    NextShardIterator: str


class DynamoDBStreamsRecord(TypedDict, total=False):
    eventID: str
    eventName: str
    eventVersion: str
    eventSource: str
    awsRegion: str
    dynamodb: DynamoDBStreamsStreamRecord
    userIdentity: DynamoDBStreamsIdentity


class DynamoDBStreamsStreamRecord(TypedDict, total=False):
    ApproximateCreationDateTime: datetime.datetime
    Keys: Dict[str, DynamoDBStreamsAttributeValue]
    NewImage: Dict[str, DynamoDBStreamsAttributeValue]
    OldImage: Dict[str, DynamoDBStreamsAttributeValue]
    SequenceNumber: str
    SizeBytes: int
    StreamViewType: str


class DynamoDBStreamsAttributeValue(TypedDict, total=False):
    S: str
    N: str
    B: bytes
    SS: List[str]
    NS: List[str]
    BS: List[bytes]
    M: Dict[str, DynamoDBStreamsAttributeValue]
    L: List[DynamoDBStreamsAttributeValue]
    NULL: bool
    BOOL: bool


class DynamoDBStreamsIdentity(TypedDict, total=False):
    PrincipalId: str
    Type: str


class DynamoDBStreamsGetShardIteratorOutput(TypedDict, total=False):
    ShardIterator: str


class DynamoDBStreamsListStreamsOutput(TypedDict, total=False):
    Streams: List[DynamoDBStreamsStream]
    LastEvaluatedStreamArn: str


class DynamoDBStreamsStream(TypedDict, total=False):
    StreamArn: str
    TableName: str
    StreamLabel: str


class EC2(BaseClient):
    def accept_reserved_instances_exchange_quote(self, *,
        ReservedInstanceIds: List[str],
        DryRun: bool = ...,
        TargetConfigurations: List[EC2TargetConfigurationRequest] = ...
    ) -> EC2AcceptReservedInstancesExchangeQuoteResult: ...

    def accept_transit_gateway_vpc_attachment(self, *,
        TransitGatewayAttachmentId: str,
        DryRun: bool = ...
    ) -> EC2AcceptTransitGatewayVpcAttachmentResult: ...

    def accept_vpc_endpoint_connections(self, *,
        ServiceId: str,
        VpcEndpointIds: List[str],
        DryRun: bool = ...
    ) -> EC2AcceptVpcEndpointConnectionsResult: ...

    def accept_vpc_peering_connection(self, *,
        DryRun: bool = ...,
        VpcPeeringConnectionId: str = ...
    ) -> EC2AcceptVpcPeeringConnectionResult: ...

    def advertise_byoip_cidr(self, *,
        Cidr: str,
        DryRun: bool = ...
    ) -> EC2AdvertiseByoipCidrResult: ...

    def allocate_address(self, *,
        Domain: str = ...,
        Address: str = ...,
        PublicIpv4Pool: str = ...,
        DryRun: bool = ...
    ) -> EC2AllocateAddressResult: ...

    def allocate_hosts(self, *,
        AvailabilityZone: str,
        InstanceType: str,
        Quantity: int,
        AutoPlacement: str = ...,
        ClientToken: str = ...,
        TagSpecifications: List[EC2TagSpecification] = ...
    ) -> EC2AllocateHostsResult: ...

    def apply_security_groups_to_client_vpn_target_network(self, *,
        ClientVpnEndpointId: str,
        VpcId: str,
        SecurityGroupIds: List[str],
        DryRun: bool = ...
    ) -> EC2ApplySecurityGroupsToClientVpnTargetNetworkResult: ...

    def assign_ipv6_addresses(self, *,
        NetworkInterfaceId: str,
        Ipv6AddressCount: int = ...,
        Ipv6Addresses: List[str] = ...
    ) -> EC2AssignIpv6AddressesResult: ...

    def assign_private_ip_addresses(self, *,
        NetworkInterfaceId: str,
        AllowReassignment: bool = ...,
        PrivateIpAddresses: List[str] = ...,
        SecondaryPrivateIpAddressCount: int = ...
    ): ...

    def associate_address(self, *,
        AllocationId: str = ...,
        InstanceId: str = ...,
        PublicIp: str = ...,
        AllowReassociation: bool = ...,
        DryRun: bool = ...,
        NetworkInterfaceId: str = ...,
        PrivateIpAddress: str = ...
    ) -> EC2AssociateAddressResult: ...

    def associate_client_vpn_target_network(self, *,
        ClientVpnEndpointId: str,
        SubnetId: str,
        DryRun: bool = ...
    ) -> EC2AssociateClientVpnTargetNetworkResult: ...

    def associate_dhcp_options(self, *,
        DhcpOptionsId: str,
        VpcId: str,
        DryRun: bool = ...
    ): ...

    def associate_iam_instance_profile(self, *,
        IamInstanceProfile: EC2IamInstanceProfileSpecification,
        InstanceId: str
    ) -> EC2AssociateIamInstanceProfileResult: ...

    def associate_route_table(self, *,
        RouteTableId: str,
        SubnetId: str,
        DryRun: bool = ...
    ) -> EC2AssociateRouteTableResult: ...

    def associate_subnet_cidr_block(self, *,
        Ipv6CidrBlock: str,
        SubnetId: str
    ) -> EC2AssociateSubnetCidrBlockResult: ...

    def associate_transit_gateway_route_table(self, *,
        TransitGatewayRouteTableId: str,
        TransitGatewayAttachmentId: str,
        DryRun: bool = ...
    ) -> EC2AssociateTransitGatewayRouteTableResult: ...

    def associate_vpc_cidr_block(self, *,
        VpcId: str,
        AmazonProvidedIpv6CidrBlock: bool = ...,
        CidrBlock: str = ...
    ) -> EC2AssociateVpcCidrBlockResult: ...

    def attach_classic_link_vpc(self, *,
        Groups: List[str],
        InstanceId: str,
        VpcId: str,
        DryRun: bool = ...
    ) -> EC2AttachClassicLinkVpcResult: ...

    def attach_internet_gateway(self, *,
        InternetGatewayId: str,
        VpcId: str,
        DryRun: bool = ...
    ): ...

    def attach_network_interface(self, *,
        DeviceIndex: int,
        InstanceId: str,
        NetworkInterfaceId: str,
        DryRun: bool = ...
    ) -> EC2AttachNetworkInterfaceResult: ...

    def attach_volume(self, *,
        Device: str,
        InstanceId: str,
        VolumeId: str,
        DryRun: bool = ...
    ) -> EC2VolumeAttachment: ...

    def attach_vpn_gateway(self, *,
        VpcId: str,
        VpnGatewayId: str,
        DryRun: bool = ...
    ) -> EC2AttachVpnGatewayResult: ...

    def authorize_client_vpn_ingress(self, *,
        ClientVpnEndpointId: str,
        TargetNetworkCidr: str,
        AccessGroupId: str = ...,
        AuthorizeAllGroups: bool = ...,
        Description: str = ...,
        DryRun: bool = ...
    ) -> EC2AuthorizeClientVpnIngressResult: ...

    def authorize_security_group_egress(self, *,
        GroupId: str,
        DryRun: bool = ...,
        IpPermissions: List[EC2IpPermission] = ...,
        CidrIp: str = ...,
        FromPort: int = ...,
        IpProtocol: str = ...,
        ToPort: int = ...,
        SourceSecurityGroupName: str = ...,
        SourceSecurityGroupOwnerId: str = ...
    ): ...

    def authorize_security_group_ingress(self, *,
        CidrIp: str = ...,
        FromPort: int = ...,
        GroupId: str = ...,
        GroupName: str = ...,
        IpPermissions: List[EC2IpPermission] = ...,
        IpProtocol: str = ...,
        SourceSecurityGroupName: str = ...,
        SourceSecurityGroupOwnerId: str = ...,
        ToPort: int = ...,
        DryRun: bool = ...
    ): ...

    def bundle_instance(self, *,
        InstanceId: str,
        Storage: EC2Storage,
        DryRun: bool = ...
    ) -> EC2BundleInstanceResult: ...

    def cancel_bundle_task(self, *,
        BundleId: str,
        DryRun: bool = ...
    ) -> EC2CancelBundleTaskResult: ...

    def cancel_capacity_reservation(self, *,
        CapacityReservationId: str,
        DryRun: bool = ...
    ) -> EC2CancelCapacityReservationResult: ...

    def cancel_conversion_task(self, *,
        ConversionTaskId: str,
        DryRun: bool = ...,
        ReasonMessage: str = ...
    ): ...

    def cancel_export_task(self, *,
        ExportTaskId: str
    ): ...

    def cancel_import_task(self, *,
        CancelReason: str = ...,
        DryRun: bool = ...,
        ImportTaskId: str = ...
    ) -> EC2CancelImportTaskResult: ...

    def cancel_reserved_instances_listing(self, *,
        ReservedInstancesListingId: str
    ) -> EC2CancelReservedInstancesListingResult: ...

    def cancel_spot_fleet_requests(self, *,
        SpotFleetRequestIds: List[str],
        TerminateInstances: bool,
        DryRun: bool = ...
    ) -> EC2CancelSpotFleetRequestsResponse: ...

    def cancel_spot_instance_requests(self, *,
        SpotInstanceRequestIds: List[str],
        DryRun: bool = ...
    ) -> EC2CancelSpotInstanceRequestsResult: ...

    def confirm_product_instance(self, *,
        InstanceId: str,
        ProductCode: str,
        DryRun: bool = ...
    ) -> EC2ConfirmProductInstanceResult: ...

    def copy_fpga_image(self, *,
        SourceFpgaImageId: str,
        SourceRegion: str,
        DryRun: bool = ...,
        Description: str = ...,
        Name: str = ...,
        ClientToken: str = ...
    ) -> EC2CopyFpgaImageResult: ...

    def copy_image(self, *,
        Name: str,
        SourceImageId: str,
        SourceRegion: str,
        ClientToken: str = ...,
        Description: str = ...,
        Encrypted: bool = ...,
        KmsKeyId: str = ...,
        DryRun: bool = ...
    ) -> EC2CopyImageResult: ...

    def copy_snapshot(self, *,
        SourceRegion: str,
        SourceSnapshotId: str,
        Description: str = ...,
        DestinationRegion: str = ...,
        Encrypted: bool = ...,
        KmsKeyId: str = ...,
        PresignedUrl: str = ...,
        DryRun: bool = ...
    ) -> EC2CopySnapshotResult: ...

    def create_capacity_reservation(self, *,
        InstanceType: str,
        InstancePlatform: str,
        AvailabilityZone: str,
        InstanceCount: int,
        ClientToken: str = ...,
        Tenancy: str = ...,
        EbsOptimized: bool = ...,
        EphemeralStorage: bool = ...,
        EndDate: datetime.datetime = ...,
        EndDateType: str = ...,
        InstanceMatchCriteria: str = ...,
        TagSpecifications: List[EC2TagSpecification] = ...,
        DryRun: bool = ...
    ) -> EC2CreateCapacityReservationResult: ...

    def create_client_vpn_endpoint(self, *,
        ClientCidrBlock: str,
        ServerCertificateArn: str,
        AuthenticationOptions: List[EC2ClientVpnAuthenticationRequest],
        ConnectionLogOptions: EC2ConnectionLogOptions,
        DnsServers: List[str] = ...,
        TransportProtocol: str = ...,
        Description: str = ...,
        DryRun: bool = ...,
        ClientToken: str = ...,
        TagSpecifications: List[EC2TagSpecification] = ...
    ) -> EC2CreateClientVpnEndpointResult: ...

    def create_client_vpn_route(self, *,
        ClientVpnEndpointId: str,
        DestinationCidrBlock: str,
        TargetVpcSubnetId: str,
        Description: str = ...,
        DryRun: bool = ...
    ) -> EC2CreateClientVpnRouteResult: ...

    def create_customer_gateway(self, *,
        BgpAsn: int,
        PublicIp: str,
        Type: str,
        DryRun: bool = ...
    ) -> EC2CreateCustomerGatewayResult: ...

    def create_default_subnet(self, *,
        AvailabilityZone: str,
        DryRun: bool = ...
    ) -> EC2CreateDefaultSubnetResult: ...

    def create_default_vpc(self, *,
        DryRun: bool = ...
    ) -> EC2CreateDefaultVpcResult: ...

    def create_dhcp_options(self, *,
        DhcpConfigurations: List[EC2NewDhcpConfiguration],
        DryRun: bool = ...
    ) -> EC2CreateDhcpOptionsResult: ...

    def create_egress_only_internet_gateway(self, *,
        VpcId: str,
        ClientToken: str = ...,
        DryRun: bool = ...
    ) -> EC2CreateEgressOnlyInternetGatewayResult: ...

    def create_fleet(self, *,
        LaunchTemplateConfigs: List[EC2FleetLaunchTemplateConfigRequest],
        TargetCapacitySpecification: EC2TargetCapacitySpecificationRequest,
        DryRun: bool = ...,
        ClientToken: str = ...,
        SpotOptions: EC2SpotOptionsRequest = ...,
        OnDemandOptions: EC2OnDemandOptionsRequest = ...,
        ExcessCapacityTerminationPolicy: str = ...,
        TerminateInstancesWithExpiration: bool = ...,
        Type: str = ...,
        ValidFrom: datetime.datetime = ...,
        ValidUntil: datetime.datetime = ...,
        ReplaceUnhealthyInstances: bool = ...,
        TagSpecifications: List[EC2TagSpecification] = ...
    ) -> EC2CreateFleetResult: ...

    def create_flow_logs(self, *,
        ResourceIds: List[str],
        ResourceType: str,
        TrafficType: str,
        DryRun: bool = ...,
        ClientToken: str = ...,
        DeliverLogsPermissionArn: str = ...,
        LogGroupName: str = ...,
        LogDestinationType: str = ...,
        LogDestination: str = ...
    ) -> EC2CreateFlowLogsResult: ...

    def create_fpga_image(self, *,
        InputStorageLocation: EC2StorageLocation,
        DryRun: bool = ...,
        LogsStorageLocation: EC2StorageLocation = ...,
        Description: str = ...,
        Name: str = ...,
        ClientToken: str = ...
    ) -> EC2CreateFpgaImageResult: ...

    def create_image(self, *,
        InstanceId: str,
        Name: str,
        BlockDeviceMappings: List[EC2BlockDeviceMapping] = ...,
        Description: str = ...,
        DryRun: bool = ...,
        NoReboot: bool = ...
    ) -> EC2CreateImageResult: ...

    def create_instance_export_task(self, *,
        InstanceId: str,
        Description: str = ...,
        ExportToS3Task: EC2ExportToS3TaskSpecification = ...,
        TargetEnvironment: str = ...
    ) -> EC2CreateInstanceExportTaskResult: ...

    def create_internet_gateway(self, *,
        DryRun: bool = ...
    ) -> EC2CreateInternetGatewayResult: ...

    def create_key_pair(self, *,
        KeyName: str,
        DryRun: bool = ...
    ) -> EC2KeyPair: ...

    def create_launch_template(self, *,
        LaunchTemplateName: str,
        LaunchTemplateData: EC2RequestLaunchTemplateData,
        DryRun: bool = ...,
        ClientToken: str = ...,
        VersionDescription: str = ...
    ) -> EC2CreateLaunchTemplateResult: ...

    def create_launch_template_version(self, *,
        LaunchTemplateData: EC2RequestLaunchTemplateData,
        DryRun: bool = ...,
        ClientToken: str = ...,
        LaunchTemplateId: str = ...,
        LaunchTemplateName: str = ...,
        SourceVersion: str = ...,
        VersionDescription: str = ...
    ) -> EC2CreateLaunchTemplateVersionResult: ...

    def create_nat_gateway(self, *,
        AllocationId: str,
        SubnetId: str,
        ClientToken: str = ...
    ) -> EC2CreateNatGatewayResult: ...

    def create_network_acl(self, *,
        VpcId: str,
        DryRun: bool = ...
    ) -> EC2CreateNetworkAclResult: ...

    def create_network_acl_entry(self, *,
        Egress: bool,
        NetworkAclId: str,
        Protocol: str,
        RuleAction: str,
        RuleNumber: int,
        CidrBlock: str = ...,
        DryRun: bool = ...,
        IcmpTypeCode: EC2IcmpTypeCode = ...,
        Ipv6CidrBlock: str = ...,
        PortRange: EC2PortRange = ...
    ): ...

    def create_network_interface(self, *,
        SubnetId: str,
        Description: str = ...,
        DryRun: bool = ...,
        Groups: List[str] = ...,
        Ipv6AddressCount: int = ...,
        Ipv6Addresses: List[EC2InstanceIpv6Address] = ...,
        PrivateIpAddress: str = ...,
        PrivateIpAddresses: List[EC2PrivateIpAddressSpecification] = ...,
        SecondaryPrivateIpAddressCount: int = ...,
        InterfaceType: str = ...
    ) -> EC2CreateNetworkInterfaceResult: ...

    def create_network_interface_permission(self, *,
        NetworkInterfaceId: str,
        Permission: str,
        AwsAccountId: str = ...,
        AwsService: str = ...,
        DryRun: bool = ...
    ) -> EC2CreateNetworkInterfacePermissionResult: ...

    def create_placement_group(self, *,
        DryRun: bool = ...,
        GroupName: str = ...,
        Strategy: str = ...,
        PartitionCount: int = ...
    ): ...

    def create_reserved_instances_listing(self, *,
        ClientToken: str,
        InstanceCount: int,
        PriceSchedules: List[EC2PriceScheduleSpecification],
        ReservedInstancesId: str
    ) -> EC2CreateReservedInstancesListingResult: ...

    def create_route(self, *,
        RouteTableId: str,
        DestinationCidrBlock: str = ...,
        DestinationIpv6CidrBlock: str = ...,
        DryRun: bool = ...,
        EgressOnlyInternetGatewayId: str = ...,
        GatewayId: str = ...,
        InstanceId: str = ...,
        NatGatewayId: str = ...,
        TransitGatewayId: str = ...,
        NetworkInterfaceId: str = ...,
        VpcPeeringConnectionId: str = ...
    ) -> EC2CreateRouteResult: ...

    def create_route_table(self, *,
        VpcId: str,
        DryRun: bool = ...
    ) -> EC2CreateRouteTableResult: ...

    def create_security_group(self, *,
        Description: str,
        GroupName: str,
        VpcId: str = ...,
        DryRun: bool = ...
    ) -> EC2CreateSecurityGroupResult: ...

    def create_snapshot(self, *,
        VolumeId: str,
        Description: str = ...,
        TagSpecifications: List[EC2TagSpecification] = ...,
        DryRun: bool = ...
    ) -> EC2Snapshot: ...

    def create_spot_datafeed_subscription(self, *,
        Bucket: str,
        DryRun: bool = ...,
        Prefix: str = ...
    ) -> EC2CreateSpotDatafeedSubscriptionResult: ...

    def create_subnet(self, *,
        CidrBlock: str,
        VpcId: str,
        AvailabilityZone: str = ...,
        AvailabilityZoneId: str = ...,
        Ipv6CidrBlock: str = ...,
        DryRun: bool = ...
    ) -> EC2CreateSubnetResult: ...

    def create_tags(self, *,
        Resources: List[str],
        Tags: List[EC2Tag],
        DryRun: bool = ...
    ): ...

    def create_transit_gateway(self, *,
        Description: str = ...,
        Options: EC2TransitGatewayRequestOptions = ...,
        TagSpecifications: List[EC2TagSpecification] = ...,
        DryRun: bool = ...
    ) -> EC2CreateTransitGatewayResult: ...

    def create_transit_gateway_route(self, *,
        DestinationCidrBlock: str,
        TransitGatewayRouteTableId: str,
        TransitGatewayAttachmentId: str = ...,
        Blackhole: bool = ...,
        DryRun: bool = ...
    ) -> EC2CreateTransitGatewayRouteResult: ...

    def create_transit_gateway_route_table(self, *,
        TransitGatewayId: str,
        TagSpecifications: List[EC2TagSpecification] = ...,
        DryRun: bool = ...
    ) -> EC2CreateTransitGatewayRouteTableResult: ...

    def create_transit_gateway_vpc_attachment(self, *,
        TransitGatewayId: str,
        VpcId: str,
        SubnetIds: List[str],
        Options: EC2CreateTransitGatewayVpcAttachmentRequestOptions = ...,
        TagSpecifications: List[EC2TagSpecification] = ...,
        DryRun: bool = ...
    ) -> EC2CreateTransitGatewayVpcAttachmentResult: ...

    def create_volume(self, *,
        AvailabilityZone: str,
        Encrypted: bool = ...,
        Iops: int = ...,
        KmsKeyId: str = ...,
        Size: int = ...,
        SnapshotId: str = ...,
        VolumeType: str = ...,
        DryRun: bool = ...,
        TagSpecifications: List[EC2TagSpecification] = ...
    ) -> EC2Volume: ...

    def create_vpc(self, *,
        CidrBlock: str,
        AmazonProvidedIpv6CidrBlock: bool = ...,
        DryRun: bool = ...,
        InstanceTenancy: str = ...
    ) -> EC2CreateVpcResult: ...

    def create_vpc_endpoint(self, *,
        VpcId: str,
        ServiceName: str,
        DryRun: bool = ...,
        VpcEndpointType: str = ...,
        PolicyDocument: str = ...,
        RouteTableIds: List[str] = ...,
        SubnetIds: List[str] = ...,
        SecurityGroupIds: List[str] = ...,
        ClientToken: str = ...,
        PrivateDnsEnabled: bool = ...
    ) -> EC2CreateVpcEndpointResult: ...

    def create_vpc_endpoint_connection_notification(self, *,
        ConnectionNotificationArn: str,
        ConnectionEvents: List[str],
        DryRun: bool = ...,
        ServiceId: str = ...,
        VpcEndpointId: str = ...,
        ClientToken: str = ...
    ) -> EC2CreateVpcEndpointConnectionNotificationResult: ...

    def create_vpc_endpoint_service_configuration(self, *,
        NetworkLoadBalancerArns: List[str],
        DryRun: bool = ...,
        AcceptanceRequired: bool = ...,
        ClientToken: str = ...
    ) -> EC2CreateVpcEndpointServiceConfigurationResult: ...

    def create_vpc_peering_connection(self, *,
        DryRun: bool = ...,
        PeerOwnerId: str = ...,
        PeerVpcId: str = ...,
        VpcId: str = ...,
        PeerRegion: str = ...
    ) -> EC2CreateVpcPeeringConnectionResult: ...

    def create_vpn_connection(self, *,
        CustomerGatewayId: str,
        Type: str,
        VpnGatewayId: str = ...,
        TransitGatewayId: str = ...,
        DryRun: bool = ...,
        Options: EC2VpnConnectionOptionsSpecification = ...
    ) -> EC2CreateVpnConnectionResult: ...

    def create_vpn_connection_route(self, *,
        DestinationCidrBlock: str,
        VpnConnectionId: str
    ): ...

    def create_vpn_gateway(self, *,
        Type: str,
        AvailabilityZone: str = ...,
        AmazonSideAsn: int = ...,
        DryRun: bool = ...
    ) -> EC2CreateVpnGatewayResult: ...

    def delete_client_vpn_endpoint(self, *,
        ClientVpnEndpointId: str,
        DryRun: bool = ...
    ) -> EC2DeleteClientVpnEndpointResult: ...

    def delete_client_vpn_route(self, *,
        ClientVpnEndpointId: str,
        DestinationCidrBlock: str,
        TargetVpcSubnetId: str = ...,
        DryRun: bool = ...
    ) -> EC2DeleteClientVpnRouteResult: ...

    def delete_customer_gateway(self, *,
        CustomerGatewayId: str,
        DryRun: bool = ...
    ): ...

    def delete_dhcp_options(self, *,
        DhcpOptionsId: str,
        DryRun: bool = ...
    ): ...

    def delete_egress_only_internet_gateway(self, *,
        EgressOnlyInternetGatewayId: str,
        DryRun: bool = ...
    ) -> EC2DeleteEgressOnlyInternetGatewayResult: ...

    def delete_fleets(self, *,
        FleetIds: List[str],
        TerminateInstances: bool,
        DryRun: bool = ...
    ) -> EC2DeleteFleetsResult: ...

    def delete_flow_logs(self, *,
        FlowLogIds: List[str],
        DryRun: bool = ...
    ) -> EC2DeleteFlowLogsResult: ...

    def delete_fpga_image(self, *,
        FpgaImageId: str,
        DryRun: bool = ...
    ) -> EC2DeleteFpgaImageResult: ...

    def delete_internet_gateway(self, *,
        InternetGatewayId: str,
        DryRun: bool = ...
    ): ...

    def delete_key_pair(self, *,
        KeyName: str,
        DryRun: bool = ...
    ): ...

    def delete_launch_template(self, *,
        DryRun: bool = ...,
        LaunchTemplateId: str = ...,
        LaunchTemplateName: str = ...
    ) -> EC2DeleteLaunchTemplateResult: ...

    def delete_launch_template_versions(self, *,
        Versions: List[str],
        DryRun: bool = ...,
        LaunchTemplateId: str = ...,
        LaunchTemplateName: str = ...
    ) -> EC2DeleteLaunchTemplateVersionsResult: ...

    def delete_nat_gateway(self, *,
        NatGatewayId: str
    ) -> EC2DeleteNatGatewayResult: ...

    def delete_network_acl(self, *,
        NetworkAclId: str,
        DryRun: bool = ...
    ): ...

    def delete_network_acl_entry(self, *,
        Egress: bool,
        NetworkAclId: str,
        RuleNumber: int,
        DryRun: bool = ...
    ): ...

    def delete_network_interface(self, *,
        NetworkInterfaceId: str,
        DryRun: bool = ...
    ): ...

    def delete_network_interface_permission(self, *,
        NetworkInterfacePermissionId: str,
        Force: bool = ...,
        DryRun: bool = ...
    ) -> EC2DeleteNetworkInterfacePermissionResult: ...

    def delete_placement_group(self, *,
        GroupName: str,
        DryRun: bool = ...
    ): ...

    def delete_route(self, *,
        RouteTableId: str,
        DestinationCidrBlock: str = ...,
        DestinationIpv6CidrBlock: str = ...,
        DryRun: bool = ...
    ): ...

    def delete_route_table(self, *,
        RouteTableId: str,
        DryRun: bool = ...
    ): ...

    def delete_security_group(self, *,
        GroupId: str = ...,
        GroupName: str = ...,
        DryRun: bool = ...
    ): ...

    def delete_snapshot(self, *,
        SnapshotId: str,
        DryRun: bool = ...
    ): ...

    def delete_spot_datafeed_subscription(self, *,
        DryRun: bool = ...
    ): ...

    def delete_subnet(self, *,
        SubnetId: str,
        DryRun: bool = ...
    ): ...

    def delete_tags(self, *,
        Resources: List[str],
        DryRun: bool = ...,
        Tags: List[EC2Tag] = ...
    ): ...

    def delete_transit_gateway(self, *,
        TransitGatewayId: str,
        DryRun: bool = ...
    ) -> EC2DeleteTransitGatewayResult: ...

    def delete_transit_gateway_route(self, *,
        TransitGatewayRouteTableId: str,
        DestinationCidrBlock: str,
        DryRun: bool = ...
    ) -> EC2DeleteTransitGatewayRouteResult: ...

    def delete_transit_gateway_route_table(self, *,
        TransitGatewayRouteTableId: str,
        DryRun: bool = ...
    ) -> EC2DeleteTransitGatewayRouteTableResult: ...

    def delete_transit_gateway_vpc_attachment(self, *,
        TransitGatewayAttachmentId: str,
        DryRun: bool = ...
    ) -> EC2DeleteTransitGatewayVpcAttachmentResult: ...

    def delete_volume(self, *,
        VolumeId: str,
        DryRun: bool = ...
    ): ...

    def delete_vpc(self, *,
        VpcId: str,
        DryRun: bool = ...
    ): ...

    def delete_vpc_endpoint_connection_notifications(self, *,
        ConnectionNotificationIds: List[str],
        DryRun: bool = ...
    ) -> EC2DeleteVpcEndpointConnectionNotificationsResult: ...

    def delete_vpc_endpoint_service_configurations(self, *,
        ServiceIds: List[str],
        DryRun: bool = ...
    ) -> EC2DeleteVpcEndpointServiceConfigurationsResult: ...

    def delete_vpc_endpoints(self, *,
        VpcEndpointIds: List[str],
        DryRun: bool = ...
    ) -> EC2DeleteVpcEndpointsResult: ...

    def delete_vpc_peering_connection(self, *,
        VpcPeeringConnectionId: str,
        DryRun: bool = ...
    ) -> EC2DeleteVpcPeeringConnectionResult: ...

    def delete_vpn_connection(self, *,
        VpnConnectionId: str,
        DryRun: bool = ...
    ): ...

    def delete_vpn_connection_route(self, *,
        DestinationCidrBlock: str,
        VpnConnectionId: str
    ): ...

    def delete_vpn_gateway(self, *,
        VpnGatewayId: str,
        DryRun: bool = ...
    ): ...

    def deprovision_byoip_cidr(self, *,
        Cidr: str,
        DryRun: bool = ...
    ) -> EC2DeprovisionByoipCidrResult: ...

    def deregister_image(self, *,
        ImageId: str,
        DryRun: bool = ...
    ): ...

    def describe_account_attributes(self, *,
        AttributeNames: List[str] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeAccountAttributesResult: ...

    def describe_addresses(self, *,
        Filters: List[EC2Filter] = ...,
        PublicIps: List[str] = ...,
        AllocationIds: List[str] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeAddressesResult: ...

    def describe_aggregate_id_format(self, *,
        DryRun: bool = ...
    ) -> EC2DescribeAggregateIdFormatResult: ...

    def describe_availability_zones(self, *,
        Filters: List[EC2Filter] = ...,
        ZoneNames: List[str] = ...,
        ZoneIds: List[str] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeAvailabilityZonesResult: ...

    def describe_bundle_tasks(self, *,
        BundleIds: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeBundleTasksResult: ...

    def describe_byoip_cidrs(self, *,
        MaxResults: int,
        DryRun: bool = ...,
        NextToken: str = ...
    ) -> EC2DescribeByoipCidrsResult: ...

    def describe_capacity_reservations(self, *,
        CapacityReservationIds: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeCapacityReservationsResult: ...

    def describe_classic_link_instances(self, *,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...,
        InstanceIds: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeClassicLinkInstancesResult: ...

    def describe_client_vpn_authorization_rules(self, *,
        ClientVpnEndpointId: str,
        DryRun: bool = ...,
        NextToken: str = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...
    ) -> EC2DescribeClientVpnAuthorizationRulesResult: ...

    def describe_client_vpn_connections(self, *,
        ClientVpnEndpointId: str,
        Filters: List[EC2Filter] = ...,
        NextToken: str = ...,
        MaxResults: int = ...,
        DryRun: bool = ...
    ) -> EC2DescribeClientVpnConnectionsResult: ...

    def describe_client_vpn_endpoints(self, *,
        ClientVpnEndpointIds: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeClientVpnEndpointsResult: ...

    def describe_client_vpn_routes(self, *,
        ClientVpnEndpointId: str,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        DryRun: bool = ...
    ) -> EC2DescribeClientVpnRoutesResult: ...

    def describe_client_vpn_target_networks(self, *,
        ClientVpnEndpointId: str,
        AssociationIds: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeClientVpnTargetNetworksResult: ...

    def describe_conversion_tasks(self, *,
        ConversionTaskIds: List[str] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeConversionTasksResult: ...

    def describe_customer_gateways(self, *,
        CustomerGatewayIds: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeCustomerGatewaysResult: ...

    def describe_dhcp_options(self, *,
        DhcpOptionsIds: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribeDhcpOptionsResult: ...

    def describe_egress_only_internet_gateways(self, *,
        DryRun: bool = ...,
        EgressOnlyInternetGatewayIds: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeEgressOnlyInternetGatewaysResult: ...

    def describe_elastic_gpus(self, *,
        ElasticGpuIds: List[str] = ...,
        DryRun: bool = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeElasticGpusResult: ...

    def describe_export_tasks(self, *,
        ExportTaskIds: List[str] = ...
    ) -> EC2DescribeExportTasksResult: ...

    def describe_fleet_history(self, *,
        FleetId: str,
        StartTime: datetime.datetime,
        DryRun: bool = ...,
        EventType: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeFleetHistoryResult: ...

    def describe_fleet_instances(self, *,
        FleetId: str,
        DryRun: bool = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        Filters: List[EC2Filter] = ...
    ) -> EC2DescribeFleetInstancesResult: ...

    def describe_fleets(self, *,
        DryRun: bool = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        FleetIds: List[str] = ...,
        Filters: List[EC2Filter] = ...
    ) -> EC2DescribeFleetsResult: ...

    def describe_flow_logs(self, *,
        DryRun: bool = ...,
        Filter: List[EC2Filter] = ...,
        FlowLogIds: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeFlowLogsResult: ...

    def describe_fpga_image_attribute(self, *,
        FpgaImageId: str,
        Attribute: str,
        DryRun: bool = ...
    ) -> EC2DescribeFpgaImageAttributeResult: ...

    def describe_fpga_images(self, *,
        DryRun: bool = ...,
        FpgaImageIds: List[str] = ...,
        Owners: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribeFpgaImagesResult: ...

    def describe_host_reservation_offerings(self, *,
        Filter: List[EC2Filter] = ...,
        MaxDuration: int = ...,
        MaxResults: int = ...,
        MinDuration: int = ...,
        NextToken: str = ...,
        OfferingId: str = ...
    ) -> EC2DescribeHostReservationOfferingsResult: ...

    def describe_host_reservations(self, *,
        Filter: List[EC2Filter] = ...,
        HostReservationIdSet: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeHostReservationsResult: ...

    def describe_hosts(self, *,
        Filter: List[EC2Filter] = ...,
        HostIds: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeHostsResult: ...

    def describe_iam_instance_profile_associations(self, *,
        AssociationIds: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeIamInstanceProfileAssociationsResult: ...

    def describe_id_format(self, *,
        Resource: str = ...
    ) -> EC2DescribeIdFormatResult: ...

    def describe_identity_id_format(self, *,
        PrincipalArn: str,
        Resource: str = ...
    ) -> EC2DescribeIdentityIdFormatResult: ...

    def describe_image_attribute(self, *,
        Attribute: str,
        ImageId: str,
        DryRun: bool = ...
    ) -> EC2ImageAttribute: ...

    def describe_images(self, *,
        ExecutableUsers: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        ImageIds: List[str] = ...,
        Owners: List[str] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeImagesResult: ...

    def describe_import_image_tasks(self, *,
        DryRun: bool = ...,
        Filters: List[EC2Filter] = ...,
        ImportTaskIds: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeImportImageTasksResult: ...

    def describe_import_snapshot_tasks(self, *,
        DryRun: bool = ...,
        Filters: List[EC2Filter] = ...,
        ImportTaskIds: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeImportSnapshotTasksResult: ...

    def describe_instance_attribute(self, *,
        Attribute: str,
        InstanceId: str,
        DryRun: bool = ...
    ) -> EC2InstanceAttribute: ...

    def describe_instance_credit_specifications(self, *,
        DryRun: bool = ...,
        Filters: List[EC2Filter] = ...,
        InstanceIds: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeInstanceCreditSpecificationsResult: ...

    def describe_instance_status(self, *,
        Filters: List[EC2Filter] = ...,
        InstanceIds: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        DryRun: bool = ...,
        IncludeAllInstances: bool = ...
    ) -> EC2DescribeInstanceStatusResult: ...

    def describe_instances(self, *,
        Filters: List[EC2Filter] = ...,
        InstanceIds: List[str] = ...,
        DryRun: bool = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeInstancesResult: ...

    def describe_internet_gateways(self, *,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...,
        InternetGatewayIds: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribeInternetGatewaysResult: ...

    def describe_key_pairs(self, *,
        Filters: List[EC2Filter] = ...,
        KeyNames: List[str] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeKeyPairsResult: ...

    def describe_launch_template_versions(self, *,
        DryRun: bool = ...,
        LaunchTemplateId: str = ...,
        LaunchTemplateName: str = ...,
        Versions: List[str] = ...,
        MinVersion: str = ...,
        MaxVersion: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...,
        Filters: List[EC2Filter] = ...
    ) -> EC2DescribeLaunchTemplateVersionsResult: ...

    def describe_launch_templates(self, *,
        DryRun: bool = ...,
        LaunchTemplateIds: List[str] = ...,
        LaunchTemplateNames: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribeLaunchTemplatesResult: ...

    def describe_moving_addresses(self, *,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        PublicIps: List[str] = ...
    ) -> EC2DescribeMovingAddressesResult: ...

    def describe_nat_gateways(self, *,
        Filter: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NatGatewayIds: List[str] = ...,
        NextToken: str = ...
    ) -> EC2DescribeNatGatewaysResult: ...

    def describe_network_acls(self, *,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...,
        NetworkAclIds: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribeNetworkAclsResult: ...

    def describe_network_interface_attribute(self, *,
        NetworkInterfaceId: str,
        Attribute: str = ...,
        DryRun: bool = ...
    ) -> EC2DescribeNetworkInterfaceAttributeResult: ...

    def describe_network_interface_permissions(self, *,
        NetworkInterfacePermissionIds: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribeNetworkInterfacePermissionsResult: ...

    def describe_network_interfaces(self, *,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...,
        NetworkInterfaceIds: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribeNetworkInterfacesResult: ...

    def describe_placement_groups(self, *,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...,
        GroupNames: List[str] = ...
    ) -> EC2DescribePlacementGroupsResult: ...

    def describe_prefix_lists(self, *,
        DryRun: bool = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        PrefixListIds: List[str] = ...
    ) -> EC2DescribePrefixListsResult: ...

    def describe_principal_id_format(self, *,
        DryRun: bool = ...,
        Resources: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribePrincipalIdFormatResult: ...

    def describe_public_ipv4_pools(self, *,
        PoolIds: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribePublicIpv4PoolsResult: ...

    def describe_regions(self, *,
        Filters: List[EC2Filter] = ...,
        RegionNames: List[str] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeRegionsResult: ...

    def describe_reserved_instances(self, *,
        Filters: List[EC2Filter] = ...,
        OfferingClass: str = ...,
        ReservedInstancesIds: List[str] = ...,
        DryRun: bool = ...,
        OfferingType: str = ...
    ) -> EC2DescribeReservedInstancesResult: ...

    def describe_reserved_instances_listings(self, *,
        Filters: List[EC2Filter] = ...,
        ReservedInstancesId: str = ...,
        ReservedInstancesListingId: str = ...
    ) -> EC2DescribeReservedInstancesListingsResult: ...

    def describe_reserved_instances_modifications(self, *,
        Filters: List[EC2Filter] = ...,
        ReservedInstancesModificationIds: List[str] = ...,
        NextToken: str = ...
    ) -> EC2DescribeReservedInstancesModificationsResult: ...

    def describe_reserved_instances_offerings(self, *,
        AvailabilityZone: str = ...,
        Filters: List[EC2Filter] = ...,
        IncludeMarketplace: bool = ...,
        InstanceType: str = ...,
        MaxDuration: int = ...,
        MaxInstanceCount: int = ...,
        MinDuration: int = ...,
        OfferingClass: str = ...,
        ProductDescription: str = ...,
        ReservedInstancesOfferingIds: List[str] = ...,
        DryRun: bool = ...,
        InstanceTenancy: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        OfferingType: str = ...
    ) -> EC2DescribeReservedInstancesOfferingsResult: ...

    def describe_route_tables(self, *,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...,
        RouteTableIds: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribeRouteTablesResult: ...

    def describe_scheduled_instance_availability(self, *,
        FirstSlotStartTimeRange: EC2SlotDateTimeRangeRequest,
        Recurrence: EC2ScheduledInstanceRecurrenceRequest,
        DryRun: bool = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        MaxSlotDurationInHours: int = ...,
        MinSlotDurationInHours: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeScheduledInstanceAvailabilityResult: ...

    def describe_scheduled_instances(self, *,
        DryRun: bool = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        ScheduledInstanceIds: List[str] = ...,
        SlotStartTimeRange: EC2SlotStartTimeRangeRequest = ...
    ) -> EC2DescribeScheduledInstancesResult: ...

    def describe_security_group_references(self, *,
        GroupId: List[str],
        DryRun: bool = ...
    ) -> EC2DescribeSecurityGroupReferencesResult: ...

    def describe_security_groups(self, *,
        Filters: List[EC2Filter] = ...,
        GroupIds: List[str] = ...,
        GroupNames: List[str] = ...,
        DryRun: bool = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribeSecurityGroupsResult: ...

    def describe_snapshot_attribute(self, *,
        Attribute: str,
        SnapshotId: str,
        DryRun: bool = ...
    ) -> EC2DescribeSnapshotAttributeResult: ...

    def describe_snapshots(self, *,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        OwnerIds: List[str] = ...,
        RestorableByUserIds: List[str] = ...,
        SnapshotIds: List[str] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeSnapshotsResult: ...

    def describe_spot_datafeed_subscription(self, *,
        DryRun: bool = ...
    ) -> EC2DescribeSpotDatafeedSubscriptionResult: ...

    def describe_spot_fleet_instances(self, *,
        SpotFleetRequestId: str,
        DryRun: bool = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeSpotFleetInstancesResponse: ...

    def describe_spot_fleet_request_history(self, *,
        SpotFleetRequestId: str,
        StartTime: datetime.datetime,
        DryRun: bool = ...,
        EventType: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeSpotFleetRequestHistoryResponse: ...

    def describe_spot_fleet_requests(self, *,
        DryRun: bool = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        SpotFleetRequestIds: List[str] = ...
    ) -> EC2DescribeSpotFleetRequestsResponse: ...

    def describe_spot_instance_requests(self, *,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...,
        SpotInstanceRequestIds: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribeSpotInstanceRequestsResult: ...

    def describe_spot_price_history(self, *,
        Filters: List[EC2Filter] = ...,
        AvailabilityZone: str = ...,
        DryRun: bool = ...,
        EndTime: datetime.datetime = ...,
        InstanceTypes: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        ProductDescriptions: List[str] = ...,
        StartTime: datetime.datetime = ...
    ) -> EC2DescribeSpotPriceHistoryResult: ...

    def describe_stale_security_groups(self, *,
        VpcId: str,
        DryRun: bool = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeStaleSecurityGroupsResult: ...

    def describe_subnets(self, *,
        Filters: List[EC2Filter] = ...,
        SubnetIds: List[str] = ...,
        DryRun: bool = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribeSubnetsResult: ...

    def describe_tags(self, *,
        DryRun: bool = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeTagsResult: ...

    def describe_transit_gateway_attachments(self, *,
        TransitGatewayAttachmentIds: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        DryRun: bool = ...
    ) -> EC2DescribeTransitGatewayAttachmentsResult: ...

    def describe_transit_gateway_route_tables(self, *,
        TransitGatewayRouteTableIds: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        DryRun: bool = ...
    ) -> EC2DescribeTransitGatewayRouteTablesResult: ...

    def describe_transit_gateway_vpc_attachments(self, *,
        TransitGatewayAttachmentIds: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        DryRun: bool = ...
    ) -> EC2DescribeTransitGatewayVpcAttachmentsResult: ...

    def describe_transit_gateways(self, *,
        TransitGatewayIds: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        DryRun: bool = ...
    ) -> EC2DescribeTransitGatewaysResult: ...

    def describe_volume_attribute(self, *,
        Attribute: str,
        VolumeId: str,
        DryRun: bool = ...
    ) -> EC2DescribeVolumeAttributeResult: ...

    def describe_volume_status(self, *,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        VolumeIds: List[str] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeVolumeStatusResult: ...

    def describe_volumes(self, *,
        Filters: List[EC2Filter] = ...,
        VolumeIds: List[str] = ...,
        DryRun: bool = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeVolumesResult: ...

    def describe_volumes_modifications(self, *,
        DryRun: bool = ...,
        VolumeIds: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribeVolumesModificationsResult: ...

    def describe_vpc_attribute(self, *,
        Attribute: str,
        VpcId: str,
        DryRun: bool = ...
    ) -> EC2DescribeVpcAttributeResult: ...

    def describe_vpc_classic_link(self, *,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...,
        VpcIds: List[str] = ...
    ) -> EC2DescribeVpcClassicLinkResult: ...

    def describe_vpc_classic_link_dns_support(self, *,
        MaxResults: int = ...,
        NextToken: str = ...,
        VpcIds: List[str] = ...
    ) -> EC2DescribeVpcClassicLinkDnsSupportResult: ...

    def describe_vpc_endpoint_connection_notifications(self, *,
        DryRun: bool = ...,
        ConnectionNotificationId: str = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeVpcEndpointConnectionNotificationsResult: ...

    def describe_vpc_endpoint_connections(self, *,
        DryRun: bool = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeVpcEndpointConnectionsResult: ...

    def describe_vpc_endpoint_service_configurations(self, *,
        DryRun: bool = ...,
        ServiceIds: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeVpcEndpointServiceConfigurationsResult: ...

    def describe_vpc_endpoint_service_permissions(self, *,
        ServiceId: str,
        DryRun: bool = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeVpcEndpointServicePermissionsResult: ...

    def describe_vpc_endpoint_services(self, *,
        DryRun: bool = ...,
        ServiceNames: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeVpcEndpointServicesResult: ...

    def describe_vpc_endpoints(self, *,
        DryRun: bool = ...,
        VpcEndpointIds: List[str] = ...,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> EC2DescribeVpcEndpointsResult: ...

    def describe_vpc_peering_connections(self, *,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...,
        VpcPeeringConnectionIds: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribeVpcPeeringConnectionsResult: ...

    def describe_vpcs(self, *,
        Filters: List[EC2Filter] = ...,
        VpcIds: List[str] = ...,
        DryRun: bool = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> EC2DescribeVpcsResult: ...

    def describe_vpn_connections(self, *,
        Filters: List[EC2Filter] = ...,
        VpnConnectionIds: List[str] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeVpnConnectionsResult: ...

    def describe_vpn_gateways(self, *,
        Filters: List[EC2Filter] = ...,
        VpnGatewayIds: List[str] = ...,
        DryRun: bool = ...
    ) -> EC2DescribeVpnGatewaysResult: ...

    def detach_classic_link_vpc(self, *,
        InstanceId: str,
        VpcId: str,
        DryRun: bool = ...
    ) -> EC2DetachClassicLinkVpcResult: ...

    def detach_internet_gateway(self, *,
        InternetGatewayId: str,
        VpcId: str,
        DryRun: bool = ...
    ): ...

    def detach_network_interface(self, *,
        AttachmentId: str,
        DryRun: bool = ...,
        Force: bool = ...
    ): ...

    def detach_volume(self, *,
        VolumeId: str,
        Device: str = ...,
        Force: bool = ...,
        InstanceId: str = ...,
        DryRun: bool = ...
    ) -> EC2VolumeAttachment: ...

    def detach_vpn_gateway(self, *,
        VpcId: str,
        VpnGatewayId: str,
        DryRun: bool = ...
    ): ...

    def disable_transit_gateway_route_table_propagation(self, *,
        TransitGatewayRouteTableId: str,
        TransitGatewayAttachmentId: str,
        DryRun: bool = ...
    ) -> EC2DisableTransitGatewayRouteTablePropagationResult: ...

    def disable_vgw_route_propagation(self, *,
        GatewayId: str,
        RouteTableId: str
    ): ...

    def disable_vpc_classic_link(self, *,
        VpcId: str,
        DryRun: bool = ...
    ) -> EC2DisableVpcClassicLinkResult: ...

    def disable_vpc_classic_link_dns_support(self, *,
        VpcId: str = ...
    ) -> EC2DisableVpcClassicLinkDnsSupportResult: ...

    def disassociate_address(self, *,
        AssociationId: str = ...,
        PublicIp: str = ...,
        DryRun: bool = ...
    ): ...

    def disassociate_client_vpn_target_network(self, *,
        ClientVpnEndpointId: str,
        AssociationId: str,
        DryRun: bool = ...
    ) -> EC2DisassociateClientVpnTargetNetworkResult: ...

    def disassociate_iam_instance_profile(self, *,
        AssociationId: str
    ) -> EC2DisassociateIamInstanceProfileResult: ...

    def disassociate_route_table(self, *,
        AssociationId: str,
        DryRun: bool = ...
    ): ...

    def disassociate_subnet_cidr_block(self, *,
        AssociationId: str
    ) -> EC2DisassociateSubnetCidrBlockResult: ...

    def disassociate_transit_gateway_route_table(self, *,
        TransitGatewayRouteTableId: str,
        TransitGatewayAttachmentId: str,
        DryRun: bool = ...
    ) -> EC2DisassociateTransitGatewayRouteTableResult: ...

    def disassociate_vpc_cidr_block(self, *,
        AssociationId: str
    ) -> EC2DisassociateVpcCidrBlockResult: ...

    def enable_transit_gateway_route_table_propagation(self, *,
        TransitGatewayRouteTableId: str,
        TransitGatewayAttachmentId: str,
        DryRun: bool = ...
    ) -> EC2EnableTransitGatewayRouteTablePropagationResult: ...

    def enable_vgw_route_propagation(self, *,
        GatewayId: str,
        RouteTableId: str
    ): ...

    def enable_volume_io(self, *,
        VolumeId: str,
        DryRun: bool = ...
    ): ...

    def enable_vpc_classic_link(self, *,
        VpcId: str,
        DryRun: bool = ...
    ) -> EC2EnableVpcClassicLinkResult: ...

    def enable_vpc_classic_link_dns_support(self, *,
        VpcId: str = ...
    ) -> EC2EnableVpcClassicLinkDnsSupportResult: ...

    def export_client_vpn_client_certificate_revocation_list(self, *,
        ClientVpnEndpointId: str,
        DryRun: bool = ...
    ) -> EC2ExportClientVpnClientCertificateRevocationListResult: ...

    def export_client_vpn_client_configuration(self, *,
        ClientVpnEndpointId: str,
        DryRun: bool = ...
    ) -> EC2ExportClientVpnClientConfigurationResult: ...

    def export_transit_gateway_routes(self, *,
        TransitGatewayRouteTableId: str,
        S3Bucket: str,
        Filters: List[EC2Filter] = ...,
        DryRun: bool = ...
    ) -> EC2ExportTransitGatewayRoutesResult: ...

    def get_console_output(self, *,
        InstanceId: str,
        DryRun: bool = ...,
        Latest: bool = ...
    ) -> EC2GetConsoleOutputResult: ...

    def get_console_screenshot(self, *,
        InstanceId: str,
        DryRun: bool = ...,
        WakeUp: bool = ...
    ) -> EC2GetConsoleScreenshotResult: ...

    def get_host_reservation_purchase_preview(self, *,
        HostIdSet: List[str],
        OfferingId: str
    ) -> EC2GetHostReservationPurchasePreviewResult: ...

    def get_launch_template_data(self, *,
        InstanceId: str,
        DryRun: bool = ...
    ) -> EC2GetLaunchTemplateDataResult: ...

    def get_password_data(self, *,
        InstanceId: str,
        DryRun: bool = ...
    ) -> EC2GetPasswordDataResult: ...

    def get_reserved_instances_exchange_quote(self, *,
        ReservedInstanceIds: List[str],
        DryRun: bool = ...,
        TargetConfigurations: List[EC2TargetConfigurationRequest] = ...
    ) -> EC2GetReservedInstancesExchangeQuoteResult: ...

    def get_transit_gateway_attachment_propagations(self, *,
        TransitGatewayAttachmentId: str,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        DryRun: bool = ...
    ) -> EC2GetTransitGatewayAttachmentPropagationsResult: ...

    def get_transit_gateway_route_table_associations(self, *,
        TransitGatewayRouteTableId: str,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        DryRun: bool = ...
    ) -> EC2GetTransitGatewayRouteTableAssociationsResult: ...

    def get_transit_gateway_route_table_propagations(self, *,
        TransitGatewayRouteTableId: str,
        Filters: List[EC2Filter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        DryRun: bool = ...
    ) -> EC2GetTransitGatewayRouteTablePropagationsResult: ...

    def import_client_vpn_client_certificate_revocation_list(self, *,
        ClientVpnEndpointId: str,
        CertificateRevocationList: str,
        DryRun: bool = ...
    ) -> EC2ImportClientVpnClientCertificateRevocationListResult: ...

    def import_image(self, *,
        Architecture: str = ...,
        ClientData: EC2ClientData = ...,
        ClientToken: str = ...,
        Description: str = ...,
        DiskContainers: List[EC2ImageDiskContainer] = ...,
        DryRun: bool = ...,
        Encrypted: bool = ...,
        Hypervisor: str = ...,
        KmsKeyId: str = ...,
        LicenseType: str = ...,
        Platform: str = ...,
        RoleName: str = ...
    ) -> EC2ImportImageResult: ...

    def import_instance(self, *,
        Platform: str,
        Description: str = ...,
        DiskImages: List[EC2DiskImage] = ...,
        DryRun: bool = ...,
        LaunchSpecification: EC2ImportInstanceLaunchSpecification = ...
    ) -> EC2ImportInstanceResult: ...

    def import_key_pair(self, *,
        KeyName: str,
        PublicKeyMaterial: bytes,
        DryRun: bool = ...
    ) -> EC2ImportKeyPairResult: ...

    def import_snapshot(self, *,
        ClientData: EC2ClientData = ...,
        ClientToken: str = ...,
        Description: str = ...,
        DiskContainer: EC2SnapshotDiskContainer = ...,
        DryRun: bool = ...,
        Encrypted: bool = ...,
        KmsKeyId: str = ...,
        RoleName: str = ...
    ) -> EC2ImportSnapshotResult: ...

    def import_volume(self, *,
        AvailabilityZone: str,
        Image: EC2DiskImageDetail,
        Volume: EC2VolumeDetail,
        Description: str = ...,
        DryRun: bool = ...
    ) -> EC2ImportVolumeResult: ...

    def modify_capacity_reservation(self, *,
        CapacityReservationId: str,
        InstanceCount: int = ...,
        EndDate: datetime.datetime = ...,
        EndDateType: str = ...,
        DryRun: bool = ...
    ) -> EC2ModifyCapacityReservationResult: ...

    def modify_client_vpn_endpoint(self, *,
        ClientVpnEndpointId: str,
        ServerCertificateArn: str = ...,
        ConnectionLogOptions: EC2ConnectionLogOptions = ...,
        DnsServers: EC2DnsServersOptionsModifyStructure = ...,
        Description: str = ...,
        DryRun: bool = ...
    ) -> EC2ModifyClientVpnEndpointResult: ...

    def modify_fleet(self, *,
        FleetId: str,
        TargetCapacitySpecification: EC2TargetCapacitySpecificationRequest,
        DryRun: bool = ...,
        ExcessCapacityTerminationPolicy: str = ...
    ) -> EC2ModifyFleetResult: ...

    def modify_fpga_image_attribute(self, *,
        FpgaImageId: str,
        DryRun: bool = ...,
        Attribute: str = ...,
        OperationType: str = ...,
        UserIds: List[str] = ...,
        UserGroups: List[str] = ...,
        ProductCodes: List[str] = ...,
        LoadPermission: EC2LoadPermissionModifications = ...,
        Description: str = ...,
        Name: str = ...
    ) -> EC2ModifyFpgaImageAttributeResult: ...

    def modify_hosts(self, *,
        AutoPlacement: str,
        HostIds: List[str]
    ) -> EC2ModifyHostsResult: ...

    def modify_id_format(self, *,
        Resource: str,
        UseLongIds: bool
    ): ...

    def modify_identity_id_format(self, *,
        PrincipalArn: str,
        Resource: str,
        UseLongIds: bool
    ): ...

    def modify_image_attribute(self, *,
        ImageId: str,
        Attribute: str = ...,
        Description: EC2AttributeValue = ...,
        LaunchPermission: EC2LaunchPermissionModifications = ...,
        OperationType: str = ...,
        ProductCodes: List[str] = ...,
        UserGroups: List[str] = ...,
        UserIds: List[str] = ...,
        Value: str = ...,
        DryRun: bool = ...
    ): ...

    def modify_instance_attribute(self, *,
        InstanceId: str,
        SourceDestCheck: EC2AttributeBooleanValue = ...,
        Attribute: str = ...,
        BlockDeviceMappings: List[EC2InstanceBlockDeviceMappingSpecification] = ...,
        DisableApiTermination: EC2AttributeBooleanValue = ...,
        DryRun: bool = ...,
        EbsOptimized: EC2AttributeBooleanValue = ...,
        EnaSupport: EC2AttributeBooleanValue = ...,
        Groups: List[str] = ...,
        InstanceInitiatedShutdownBehavior: EC2AttributeValue = ...,
        InstanceType: EC2AttributeValue = ...,
        Kernel: EC2AttributeValue = ...,
        Ramdisk: EC2AttributeValue = ...,
        SriovNetSupport: EC2AttributeValue = ...,
        UserData: EC2BlobAttributeValue = ...,
        Value: str = ...
    ): ...

    def modify_instance_capacity_reservation_attributes(self, *,
        InstanceId: str,
        CapacityReservationSpecification: EC2CapacityReservationSpecification,
        DryRun: bool = ...
    ) -> EC2ModifyInstanceCapacityReservationAttributesResult: ...

    def modify_instance_credit_specification(self, *,
        InstanceCreditSpecifications: List[EC2InstanceCreditSpecificationRequest],
        DryRun: bool = ...,
        ClientToken: str = ...
    ) -> EC2ModifyInstanceCreditSpecificationResult: ...

    def modify_instance_event_start_time(self, *,
        InstanceId: str,
        InstanceEventId: str,
        NotBefore: datetime.datetime,
        DryRun: bool = ...
    ) -> EC2ModifyInstanceEventStartTimeResult: ...

    def modify_instance_placement(self, *,
        InstanceId: str,
        Affinity: str = ...,
        GroupName: str = ...,
        HostId: str = ...,
        Tenancy: str = ...,
        PartitionNumber: int = ...
    ) -> EC2ModifyInstancePlacementResult: ...

    def modify_launch_template(self, *,
        DryRun: bool = ...,
        ClientToken: str = ...,
        LaunchTemplateId: str = ...,
        LaunchTemplateName: str = ...,
        DefaultVersion: str = ...
    ) -> EC2ModifyLaunchTemplateResult: ...

    def modify_network_interface_attribute(self, *,
        NetworkInterfaceId: str,
        Attachment: EC2NetworkInterfaceAttachmentChanges = ...,
        Description: EC2AttributeValue = ...,
        DryRun: bool = ...,
        Groups: List[str] = ...,
        SourceDestCheck: EC2AttributeBooleanValue = ...
    ): ...

    def modify_reserved_instances(self, *,
        ReservedInstancesIds: List[str],
        TargetConfigurations: List[EC2ReservedInstancesConfiguration],
        ClientToken: str = ...
    ) -> EC2ModifyReservedInstancesResult: ...

    def modify_snapshot_attribute(self, *,
        SnapshotId: str,
        Attribute: str = ...,
        CreateVolumePermission: EC2CreateVolumePermissionModifications = ...,
        GroupNames: List[str] = ...,
        OperationType: str = ...,
        UserIds: List[str] = ...,
        DryRun: bool = ...
    ): ...

    def modify_spot_fleet_request(self, *,
        SpotFleetRequestId: str,
        ExcessCapacityTerminationPolicy: str = ...,
        TargetCapacity: int = ...
    ) -> EC2ModifySpotFleetRequestResponse: ...

    def modify_subnet_attribute(self, *,
        SubnetId: str,
        AssignIpv6AddressOnCreation: EC2AttributeBooleanValue = ...,
        MapPublicIpOnLaunch: EC2AttributeBooleanValue = ...
    ): ...

    def modify_transit_gateway_vpc_attachment(self, *,
        TransitGatewayAttachmentId: str,
        AddSubnetIds: List[str] = ...,
        RemoveSubnetIds: List[str] = ...,
        Options: EC2ModifyTransitGatewayVpcAttachmentRequestOptions = ...,
        DryRun: bool = ...
    ) -> EC2ModifyTransitGatewayVpcAttachmentResult: ...

    def modify_volume(self, *,
        VolumeId: str,
        DryRun: bool = ...,
        Size: int = ...,
        VolumeType: str = ...,
        Iops: int = ...
    ) -> EC2ModifyVolumeResult: ...

    def modify_volume_attribute(self, *,
        VolumeId: str,
        AutoEnableIO: EC2AttributeBooleanValue = ...,
        DryRun: bool = ...
    ): ...

    def modify_vpc_attribute(self, *,
        VpcId: str,
        EnableDnsHostnames: EC2AttributeBooleanValue = ...,
        EnableDnsSupport: EC2AttributeBooleanValue = ...
    ): ...

    def modify_vpc_endpoint(self, *,
        VpcEndpointId: str,
        DryRun: bool = ...,
        ResetPolicy: bool = ...,
        PolicyDocument: str = ...,
        AddRouteTableIds: List[str] = ...,
        RemoveRouteTableIds: List[str] = ...,
        AddSubnetIds: List[str] = ...,
        RemoveSubnetIds: List[str] = ...,
        AddSecurityGroupIds: List[str] = ...,
        RemoveSecurityGroupIds: List[str] = ...,
        PrivateDnsEnabled: bool = ...
    ) -> EC2ModifyVpcEndpointResult: ...

    def modify_vpc_endpoint_connection_notification(self, *,
        ConnectionNotificationId: str,
        DryRun: bool = ...,
        ConnectionNotificationArn: str = ...,
        ConnectionEvents: List[str] = ...
    ) -> EC2ModifyVpcEndpointConnectionNotificationResult: ...

    def modify_vpc_endpoint_service_configuration(self, *,
        ServiceId: str,
        DryRun: bool = ...,
        AcceptanceRequired: bool = ...,
        AddNetworkLoadBalancerArns: List[str] = ...,
        RemoveNetworkLoadBalancerArns: List[str] = ...
    ) -> EC2ModifyVpcEndpointServiceConfigurationResult: ...

    def modify_vpc_endpoint_service_permissions(self, *,
        ServiceId: str,
        DryRun: bool = ...,
        AddAllowedPrincipals: List[str] = ...,
        RemoveAllowedPrincipals: List[str] = ...
    ) -> EC2ModifyVpcEndpointServicePermissionsResult: ...

    def modify_vpc_peering_connection_options(self, *,
        VpcPeeringConnectionId: str,
        AccepterPeeringConnectionOptions: EC2PeeringConnectionOptionsRequest = ...,
        DryRun: bool = ...,
        RequesterPeeringConnectionOptions: EC2PeeringConnectionOptionsRequest = ...
    ) -> EC2ModifyVpcPeeringConnectionOptionsResult: ...

    def modify_vpc_tenancy(self, *,
        VpcId: str,
        InstanceTenancy: str,
        DryRun: bool = ...
    ) -> EC2ModifyVpcTenancyResult: ...

    def modify_vpn_connection(self, *,
        VpnConnectionId: str,
        TransitGatewayId: str = ...,
        VpnGatewayId: str = ...,
        DryRun: bool = ...
    ) -> EC2ModifyVpnConnectionResult: ...

    def monitor_instances(self, *,
        InstanceIds: List[str],
        DryRun: bool = ...
    ) -> EC2MonitorInstancesResult: ...

    def move_address_to_vpc(self, *,
        PublicIp: str,
        DryRun: bool = ...
    ) -> EC2MoveAddressToVpcResult: ...

    def provision_byoip_cidr(self, *,
        Cidr: str,
        CidrAuthorizationContext: EC2CidrAuthorizationContext = ...,
        Description: str = ...,
        DryRun: bool = ...
    ) -> EC2ProvisionByoipCidrResult: ...

    def purchase_host_reservation(self, *,
        HostIdSet: List[str],
        OfferingId: str,
        ClientToken: str = ...,
        CurrencyCode: str = ...,
        LimitPrice: str = ...
    ) -> EC2PurchaseHostReservationResult: ...

    def purchase_reserved_instances_offering(self, *,
        InstanceCount: int,
        ReservedInstancesOfferingId: str,
        DryRun: bool = ...,
        LimitPrice: EC2ReservedInstanceLimitPrice = ...
    ) -> EC2PurchaseReservedInstancesOfferingResult: ...

    def purchase_scheduled_instances(self, *,
        PurchaseRequests: List[EC2PurchaseRequest],
        ClientToken: str = ...,
        DryRun: bool = ...
    ) -> EC2PurchaseScheduledInstancesResult: ...

    def reboot_instances(self, *,
        InstanceIds: List[str],
        DryRun: bool = ...
    ): ...

    def register_image(self, *,
        Name: str,
        ImageLocation: str = ...,
        Architecture: str = ...,
        BlockDeviceMappings: List[EC2BlockDeviceMapping] = ...,
        Description: str = ...,
        DryRun: bool = ...,
        EnaSupport: bool = ...,
        KernelId: str = ...,
        BillingProducts: List[str] = ...,
        RamdiskId: str = ...,
        RootDeviceName: str = ...,
        SriovNetSupport: str = ...,
        VirtualizationType: str = ...
    ) -> EC2RegisterImageResult: ...

    def reject_transit_gateway_vpc_attachment(self, *,
        TransitGatewayAttachmentId: str,
        DryRun: bool = ...
    ) -> EC2RejectTransitGatewayVpcAttachmentResult: ...

    def reject_vpc_endpoint_connections(self, *,
        ServiceId: str,
        VpcEndpointIds: List[str],
        DryRun: bool = ...
    ) -> EC2RejectVpcEndpointConnectionsResult: ...

    def reject_vpc_peering_connection(self, *,
        VpcPeeringConnectionId: str,
        DryRun: bool = ...
    ) -> EC2RejectVpcPeeringConnectionResult: ...

    def release_address(self, *,
        AllocationId: str = ...,
        PublicIp: str = ...,
        DryRun: bool = ...
    ): ...

    def release_hosts(self, *,
        HostIds: List[str]
    ) -> EC2ReleaseHostsResult: ...

    def replace_iam_instance_profile_association(self, *,
        IamInstanceProfile: EC2IamInstanceProfileSpecification,
        AssociationId: str
    ) -> EC2ReplaceIamInstanceProfileAssociationResult: ...

    def replace_network_acl_association(self, *,
        AssociationId: str,
        NetworkAclId: str,
        DryRun: bool = ...
    ) -> EC2ReplaceNetworkAclAssociationResult: ...

    def replace_network_acl_entry(self, *,
        Egress: bool,
        NetworkAclId: str,
        Protocol: str,
        RuleAction: str,
        RuleNumber: int,
        CidrBlock: str = ...,
        DryRun: bool = ...,
        IcmpTypeCode: EC2IcmpTypeCode = ...,
        Ipv6CidrBlock: str = ...,
        PortRange: EC2PortRange = ...
    ): ...

    def replace_route(self, *,
        RouteTableId: str,
        DestinationCidrBlock: str = ...,
        DestinationIpv6CidrBlock: str = ...,
        DryRun: bool = ...,
        EgressOnlyInternetGatewayId: str = ...,
        GatewayId: str = ...,
        InstanceId: str = ...,
        NatGatewayId: str = ...,
        TransitGatewayId: str = ...,
        NetworkInterfaceId: str = ...,
        VpcPeeringConnectionId: str = ...
    ): ...

    def replace_route_table_association(self, *,
        AssociationId: str,
        RouteTableId: str,
        DryRun: bool = ...
    ) -> EC2ReplaceRouteTableAssociationResult: ...

    def replace_transit_gateway_route(self, *,
        DestinationCidrBlock: str,
        TransitGatewayRouteTableId: str,
        TransitGatewayAttachmentId: str = ...,
        Blackhole: bool = ...,
        DryRun: bool = ...
    ) -> EC2ReplaceTransitGatewayRouteResult: ...

    def report_instance_status(self, *,
        Instances: List[str],
        ReasonCodes: List[str],
        Status: str,
        Description: str = ...,
        DryRun: bool = ...,
        EndTime: datetime.datetime = ...,
        StartTime: datetime.datetime = ...
    ): ...

    def request_spot_fleet(self, *,
        SpotFleetRequestConfig: EC2SpotFleetRequestConfigData,
        DryRun: bool = ...
    ) -> EC2RequestSpotFleetResponse: ...

    def request_spot_instances(self, *,
        AvailabilityZoneGroup: str = ...,
        BlockDurationMinutes: int = ...,
        ClientToken: str = ...,
        DryRun: bool = ...,
        InstanceCount: int = ...,
        LaunchGroup: str = ...,
        LaunchSpecification: EC2RequestSpotLaunchSpecification = ...,
        SpotPrice: str = ...,
        Type: str = ...,
        ValidFrom: datetime.datetime = ...,
        ValidUntil: datetime.datetime = ...,
        InstanceInterruptionBehavior: str = ...
    ) -> EC2RequestSpotInstancesResult: ...

    def reset_fpga_image_attribute(self, *,
        FpgaImageId: str,
        DryRun: bool = ...,
        Attribute: str = ...
    ) -> EC2ResetFpgaImageAttributeResult: ...

    def reset_image_attribute(self, *,
        Attribute: str,
        ImageId: str,
        DryRun: bool = ...
    ): ...

    def reset_instance_attribute(self, *,
        Attribute: str,
        InstanceId: str,
        DryRun: bool = ...
    ): ...

    def reset_network_interface_attribute(self, *,
        NetworkInterfaceId: str,
        DryRun: bool = ...,
        SourceDestCheck: str = ...
    ): ...

    def reset_snapshot_attribute(self, *,
        Attribute: str,
        SnapshotId: str,
        DryRun: bool = ...
    ): ...

    def restore_address_to_classic(self, *,
        PublicIp: str,
        DryRun: bool = ...
    ) -> EC2RestoreAddressToClassicResult: ...

    def revoke_client_vpn_ingress(self, *,
        ClientVpnEndpointId: str,
        TargetNetworkCidr: str,
        AccessGroupId: str = ...,
        RevokeAllGroups: bool = ...,
        DryRun: bool = ...
    ) -> EC2RevokeClientVpnIngressResult: ...

    def revoke_security_group_egress(self, *,
        GroupId: str,
        DryRun: bool = ...,
        IpPermissions: List[EC2IpPermission] = ...,
        CidrIp: str = ...,
        FromPort: int = ...,
        IpProtocol: str = ...,
        ToPort: int = ...,
        SourceSecurityGroupName: str = ...,
        SourceSecurityGroupOwnerId: str = ...
    ): ...

    def revoke_security_group_ingress(self, *,
        CidrIp: str = ...,
        FromPort: int = ...,
        GroupId: str = ...,
        GroupName: str = ...,
        IpPermissions: List[EC2IpPermission] = ...,
        IpProtocol: str = ...,
        SourceSecurityGroupName: str = ...,
        SourceSecurityGroupOwnerId: str = ...,
        ToPort: int = ...,
        DryRun: bool = ...
    ): ...

    def run_instances(self, *,
        MaxCount: int,
        MinCount: int,
        BlockDeviceMappings: List[EC2BlockDeviceMapping] = ...,
        ImageId: str = ...,
        InstanceType: str = ...,
        Ipv6AddressCount: int = ...,
        Ipv6Addresses: List[EC2InstanceIpv6Address] = ...,
        KernelId: str = ...,
        KeyName: str = ...,
        Monitoring: EC2RunInstancesMonitoringEnabled = ...,
        Placement: EC2Placement = ...,
        RamdiskId: str = ...,
        SecurityGroupIds: List[str] = ...,
        SecurityGroups: List[str] = ...,
        SubnetId: str = ...,
        UserData: str = ...,
        AdditionalInfo: str = ...,
        ClientToken: str = ...,
        DisableApiTermination: bool = ...,
        DryRun: bool = ...,
        EbsOptimized: bool = ...,
        IamInstanceProfile: EC2IamInstanceProfileSpecification = ...,
        InstanceInitiatedShutdownBehavior: str = ...,
        NetworkInterfaces: List[EC2InstanceNetworkInterfaceSpecification] = ...,
        PrivateIpAddress: str = ...,
        ElasticGpuSpecification: List[EC2ElasticGpuSpecification] = ...,
        ElasticInferenceAccelerators: List[EC2ElasticInferenceAccelerator] = ...,
        TagSpecifications: List[EC2TagSpecification] = ...,
        LaunchTemplate: EC2LaunchTemplateSpecification = ...,
        InstanceMarketOptions: EC2InstanceMarketOptionsRequest = ...,
        CreditSpecification: EC2CreditSpecificationRequest = ...,
        CpuOptions: EC2CpuOptionsRequest = ...,
        CapacityReservationSpecification: EC2CapacityReservationSpecification = ...,
        HibernationOptions: EC2HibernationOptionsRequest = ...,
        LicenseSpecifications: List[EC2LicenseConfigurationRequest] = ...
    ) -> EC2Reservation: ...

    def run_scheduled_instances(self, *,
        LaunchSpecification: EC2ScheduledInstancesLaunchSpecification,
        ScheduledInstanceId: str,
        ClientToken: str = ...,
        DryRun: bool = ...,
        InstanceCount: int = ...
    ) -> EC2RunScheduledInstancesResult: ...

    def search_transit_gateway_routes(self, *,
        TransitGatewayRouteTableId: str,
        Filters: List[EC2Filter],
        MaxResults: int = ...,
        DryRun: bool = ...
    ) -> EC2SearchTransitGatewayRoutesResult: ...

    def start_instances(self, *,
        InstanceIds: List[str],
        AdditionalInfo: str = ...,
        DryRun: bool = ...
    ) -> EC2StartInstancesResult: ...

    def stop_instances(self, *,
        InstanceIds: List[str],
        Hibernate: bool = ...,
        DryRun: bool = ...,
        Force: bool = ...
    ) -> EC2StopInstancesResult: ...

    def terminate_client_vpn_connections(self, *,
        ClientVpnEndpointId: str,
        ConnectionId: str = ...,
        Username: str = ...,
        DryRun: bool = ...
    ) -> EC2TerminateClientVpnConnectionsResult: ...

    def terminate_instances(self, *,
        InstanceIds: List[str],
        DryRun: bool = ...
    ) -> EC2TerminateInstancesResult: ...

    def unassign_ipv6_addresses(self, *,
        Ipv6Addresses: List[str],
        NetworkInterfaceId: str
    ) -> EC2UnassignIpv6AddressesResult: ...

    def unassign_private_ip_addresses(self, *,
        NetworkInterfaceId: str,
        PrivateIpAddresses: List[str]
    ): ...

    def unmonitor_instances(self, *,
        InstanceIds: List[str],
        DryRun: bool = ...
    ) -> EC2UnmonitorInstancesResult: ...

    def update_security_group_rule_descriptions_egress(self, *,
        IpPermissions: List[EC2IpPermission],
        DryRun: bool = ...,
        GroupId: str = ...,
        GroupName: str = ...
    ) -> EC2UpdateSecurityGroupRuleDescriptionsEgressResult: ...

    def update_security_group_rule_descriptions_ingress(self, *,
        IpPermissions: List[EC2IpPermission],
        DryRun: bool = ...,
        GroupId: str = ...,
        GroupName: str = ...
    ) -> EC2UpdateSecurityGroupRuleDescriptionsIngressResult: ...

    def withdraw_byoip_cidr(self, *,
        Cidr: str,
        DryRun: bool = ...
    ) -> EC2WithdrawByoipCidrResult: ...


class _EC2TargetConfigurationRequest(TypedDict):
    OfferingId: str


class EC2TargetConfigurationRequest(_EC2TargetConfigurationRequest, total=False):
    InstanceCount: int


class EC2AcceptReservedInstancesExchangeQuoteResult(TypedDict, total=False):
    ExchangeId: str


class EC2AcceptTransitGatewayVpcAttachmentResult(TypedDict, total=False):
    TransitGatewayVpcAttachment: EC2TransitGatewayVpcAttachment


class EC2TransitGatewayVpcAttachment(TypedDict, total=False):
    TransitGatewayAttachmentId: str
    TransitGatewayId: str
    VpcId: str
    VpcOwnerId: str
    State: str
    SubnetIds: List[str]
    CreationTime: datetime.datetime
    Options: EC2TransitGatewayVpcAttachmentOptions
    Tags: List[EC2Tag]


class EC2TransitGatewayVpcAttachmentOptions(TypedDict, total=False):
    DnsSupport: str
    Ipv6Support: str


class EC2Tag(TypedDict, total=False):
    Key: str
    Value: str


class EC2AcceptVpcEndpointConnectionsResult(TypedDict, total=False):
    Unsuccessful: List[EC2UnsuccessfulItem]


class EC2UnsuccessfulItem(TypedDict, total=False):
    Error: EC2UnsuccessfulItemError
    ResourceId: str


class EC2UnsuccessfulItemError(TypedDict, total=False):
    Code: str
    Message: str


class EC2AcceptVpcPeeringConnectionResult(TypedDict, total=False):
    VpcPeeringConnection: EC2VpcPeeringConnection


class EC2VpcPeeringConnection(TypedDict, total=False):
    AccepterVpcInfo: EC2VpcPeeringConnectionVpcInfo
    ExpirationTime: datetime.datetime
    RequesterVpcInfo: EC2VpcPeeringConnectionVpcInfo
    Status: EC2VpcPeeringConnectionStateReason
    Tags: List[EC2Tag]
    VpcPeeringConnectionId: str


class EC2VpcPeeringConnectionVpcInfo(TypedDict, total=False):
    CidrBlock: str
    Ipv6CidrBlockSet: List[EC2Ipv6CidrBlock]
    CidrBlockSet: List[EC2CidrBlock]
    OwnerId: str
    PeeringOptions: EC2VpcPeeringConnectionOptionsDescription
    VpcId: str
    Region: str


class EC2Ipv6CidrBlock(TypedDict, total=False):
    Ipv6CidrBlock: str


class EC2CidrBlock(TypedDict, total=False):
    CidrBlock: str


class EC2VpcPeeringConnectionOptionsDescription(TypedDict, total=False):
    AllowDnsResolutionFromRemoteVpc: bool
    AllowEgressFromLocalClassicLinkToRemoteVpc: bool
    AllowEgressFromLocalVpcToRemoteClassicLink: bool


class EC2VpcPeeringConnectionStateReason(TypedDict, total=False):
    Code: str
    Message: str


class EC2AdvertiseByoipCidrResult(TypedDict, total=False):
    ByoipCidr: EC2ByoipCidr


class EC2ByoipCidr(TypedDict, total=False):
    Cidr: str
    Description: str
    StatusMessage: str
    State: str


class EC2AllocateAddressResult(TypedDict, total=False):
    PublicIp: str
    AllocationId: str
    PublicIpv4Pool: str
    Domain: str


class EC2TagSpecification(TypedDict, total=False):
    ResourceType: str
    Tags: List[EC2Tag]


class EC2AllocateHostsResult(TypedDict, total=False):
    HostIds: List[str]


class EC2ApplySecurityGroupsToClientVpnTargetNetworkResult(TypedDict, total=False):
    SecurityGroupIds: List[str]


class EC2AssignIpv6AddressesResult(TypedDict, total=False):
    AssignedIpv6Addresses: List[str]
    NetworkInterfaceId: str


class EC2AssociateAddressResult(TypedDict, total=False):
    AssociationId: str


class EC2AssociateClientVpnTargetNetworkResult(TypedDict, total=False):
    AssociationId: str
    Status: EC2AssociationStatus


class EC2AssociationStatus(TypedDict, total=False):
    Code: str
    Message: str


class EC2IamInstanceProfileSpecification(TypedDict, total=False):
    Arn: str
    Name: str


class EC2AssociateIamInstanceProfileResult(TypedDict, total=False):
    IamInstanceProfileAssociation: EC2IamInstanceProfileAssociation


class EC2IamInstanceProfileAssociation(TypedDict, total=False):
    AssociationId: str
    InstanceId: str
    IamInstanceProfile: EC2IamInstanceProfile
    State: str
    Timestamp: datetime.datetime


class EC2IamInstanceProfile(TypedDict, total=False):
    Arn: str
    Id: str


class EC2AssociateRouteTableResult(TypedDict, total=False):
    AssociationId: str


class EC2AssociateSubnetCidrBlockResult(TypedDict, total=False):
    Ipv6CidrBlockAssociation: EC2SubnetIpv6CidrBlockAssociation
    SubnetId: str


class EC2SubnetIpv6CidrBlockAssociation(TypedDict, total=False):
    AssociationId: str
    Ipv6CidrBlock: str
    Ipv6CidrBlockState: EC2SubnetCidrBlockState


class EC2SubnetCidrBlockState(TypedDict, total=False):
    State: str
    StatusMessage: str


class EC2AssociateTransitGatewayRouteTableResult(TypedDict, total=False):
    Association: EC2TransitGatewayAssociation


class EC2TransitGatewayAssociation(TypedDict, total=False):
    TransitGatewayRouteTableId: str
    TransitGatewayAttachmentId: str
    ResourceId: str
    ResourceType: str
    State: str


class EC2AssociateVpcCidrBlockResult(TypedDict, total=False):
    Ipv6CidrBlockAssociation: EC2VpcIpv6CidrBlockAssociation
    CidrBlockAssociation: EC2VpcCidrBlockAssociation
    VpcId: str


class EC2VpcIpv6CidrBlockAssociation(TypedDict, total=False):
    AssociationId: str
    Ipv6CidrBlock: str
    Ipv6CidrBlockState: EC2VpcCidrBlockState


class EC2VpcCidrBlockState(TypedDict, total=False):
    State: str
    StatusMessage: str


class EC2VpcCidrBlockAssociation(TypedDict, total=False):
    AssociationId: str
    CidrBlock: str
    CidrBlockState: EC2VpcCidrBlockState


class EC2AttachClassicLinkVpcResult(TypedDict, total=False):
    Return: bool


class EC2AttachNetworkInterfaceResult(TypedDict, total=False):
    AttachmentId: str


class EC2VolumeAttachment(TypedDict, total=False):
    AttachTime: datetime.datetime
    Device: str
    InstanceId: str
    State: str
    VolumeId: str
    DeleteOnTermination: bool


class EC2AttachVpnGatewayResult(TypedDict, total=False):
    VpcAttachment: EC2VpcAttachment


class EC2VpcAttachment(TypedDict, total=False):
    State: str
    VpcId: str


class EC2AuthorizeClientVpnIngressResult(TypedDict, total=False):
    Status: EC2ClientVpnAuthorizationRuleStatus


class EC2ClientVpnAuthorizationRuleStatus(TypedDict, total=False):
    Code: str
    Message: str


class EC2IpPermission(TypedDict, total=False):
    FromPort: int
    IpProtocol: str
    IpRanges: List[EC2IpRange]
    Ipv6Ranges: List[EC2Ipv6Range]
    PrefixListIds: List[EC2PrefixListId]
    ToPort: int
    UserIdGroupPairs: List[EC2UserIdGroupPair]


class EC2IpRange(TypedDict, total=False):
    CidrIp: str
    Description: str


class EC2Ipv6Range(TypedDict, total=False):
    CidrIpv6: str
    Description: str


class EC2PrefixListId(TypedDict, total=False):
    Description: str
    PrefixListId: str


class EC2UserIdGroupPair(TypedDict, total=False):
    Description: str
    GroupId: str
    GroupName: str
    PeeringStatus: str
    UserId: str
    VpcId: str
    VpcPeeringConnectionId: str


class EC2Storage(TypedDict, total=False):
    S3: EC2S3Storage


class EC2S3Storage(TypedDict, total=False):
    AWSAccessKeyId: str
    Bucket: str
    Prefix: str
    UploadPolicy: bytes
    UploadPolicySignature: str


class EC2BundleInstanceResult(TypedDict, total=False):
    BundleTask: EC2BundleTask


class EC2BundleTask(TypedDict, total=False):
    BundleId: str
    BundleTaskError: EC2BundleTaskError
    InstanceId: str
    Progress: str
    StartTime: datetime.datetime
    State: str
    Storage: EC2Storage
    UpdateTime: datetime.datetime


class EC2BundleTaskError(TypedDict, total=False):
    Code: str
    Message: str


class EC2CancelBundleTaskResult(TypedDict, total=False):
    BundleTask: EC2BundleTask


class EC2CancelCapacityReservationResult(TypedDict, total=False):
    Return: bool


class EC2CancelImportTaskResult(TypedDict, total=False):
    ImportTaskId: str
    PreviousState: str
    State: str


class EC2CancelReservedInstancesListingResult(TypedDict, total=False):
    ReservedInstancesListings: List[EC2ReservedInstancesListing]


class EC2ReservedInstancesListing(TypedDict, total=False):
    ClientToken: str
    CreateDate: datetime.datetime
    InstanceCounts: List[EC2InstanceCount]
    PriceSchedules: List[EC2PriceSchedule]
    ReservedInstancesId: str
    ReservedInstancesListingId: str
    Status: str
    StatusMessage: str
    Tags: List[EC2Tag]
    UpdateDate: datetime.datetime


class EC2InstanceCount(TypedDict, total=False):
    InstanceCount: int
    State: str


class EC2PriceSchedule(TypedDict, total=False):
    Active: bool
    CurrencyCode: str
    Price: float
    Term: int


class EC2CancelSpotFleetRequestsResponse(TypedDict, total=False):
    SuccessfulFleetRequests: List[EC2CancelSpotFleetRequestsSuccessItem]
    UnsuccessfulFleetRequests: List[EC2CancelSpotFleetRequestsErrorItem]


class EC2CancelSpotFleetRequestsSuccessItem(TypedDict, total=False):
    CurrentSpotFleetRequestState: str
    PreviousSpotFleetRequestState: str
    SpotFleetRequestId: str


class EC2CancelSpotFleetRequestsErrorItem(TypedDict, total=False):
    Error: EC2CancelSpotFleetRequestsError
    SpotFleetRequestId: str


class EC2CancelSpotFleetRequestsError(TypedDict, total=False):
    Code: str
    Message: str


class EC2CancelSpotInstanceRequestsResult(TypedDict, total=False):
    CancelledSpotInstanceRequests: List[EC2CancelledSpotInstanceRequest]


class EC2CancelledSpotInstanceRequest(TypedDict, total=False):
    SpotInstanceRequestId: str
    State: str


class EC2ConfirmProductInstanceResult(TypedDict, total=False):
    OwnerId: str
    Return: bool


class EC2CopyFpgaImageResult(TypedDict, total=False):
    FpgaImageId: str


class EC2CopyImageResult(TypedDict, total=False):
    ImageId: str


class EC2CopySnapshotResult(TypedDict, total=False):
    SnapshotId: str


class EC2CreateCapacityReservationResult(TypedDict, total=False):
    CapacityReservation: EC2CapacityReservation


class EC2CapacityReservation(TypedDict, total=False):
    CapacityReservationId: str
    InstanceType: str
    InstancePlatform: str
    AvailabilityZone: str
    Tenancy: str
    TotalInstanceCount: int
    AvailableInstanceCount: int
    EbsOptimized: bool
    EphemeralStorage: bool
    State: str
    EndDate: datetime.datetime
    EndDateType: str
    InstanceMatchCriteria: str
    CreateDate: datetime.datetime
    Tags: List[EC2Tag]


class EC2ClientVpnAuthenticationRequest(TypedDict, total=False):
    Type: str
    ActiveDirectory: EC2DirectoryServiceAuthenticationRequest
    MutualAuthentication: EC2CertificateAuthenticationRequest


class EC2DirectoryServiceAuthenticationRequest(TypedDict, total=False):
    DirectoryId: str


class EC2CertificateAuthenticationRequest(TypedDict, total=False):
    ClientRootCertificateChainArn: str


class EC2ConnectionLogOptions(TypedDict, total=False):
    Enabled: bool
    CloudwatchLogGroup: str
    CloudwatchLogStream: str


class EC2CreateClientVpnEndpointResult(TypedDict, total=False):
    ClientVpnEndpointId: str
    Status: EC2ClientVpnEndpointStatus
    DnsName: str


class EC2ClientVpnEndpointStatus(TypedDict, total=False):
    Code: str
    Message: str


class EC2CreateClientVpnRouteResult(TypedDict, total=False):
    Status: EC2ClientVpnRouteStatus


class EC2ClientVpnRouteStatus(TypedDict, total=False):
    Code: str
    Message: str


class EC2CreateCustomerGatewayResult(TypedDict, total=False):
    CustomerGateway: EC2CustomerGateway


class EC2CustomerGateway(TypedDict, total=False):
    BgpAsn: str
    CustomerGatewayId: str
    IpAddress: str
    State: str
    Type: str
    Tags: List[EC2Tag]


class EC2CreateDefaultSubnetResult(TypedDict, total=False):
    Subnet: EC2Subnet


class EC2Subnet(TypedDict, total=False):
    AvailabilityZone: str
    AvailabilityZoneId: str
    AvailableIpAddressCount: int
    CidrBlock: str
    DefaultForAz: bool
    MapPublicIpOnLaunch: bool
    State: str
    SubnetId: str
    VpcId: str
    OwnerId: str
    AssignIpv6AddressOnCreation: bool
    Ipv6CidrBlockAssociationSet: List[EC2SubnetIpv6CidrBlockAssociation]
    Tags: List[EC2Tag]
    SubnetArn: str


class EC2CreateDefaultVpcResult(TypedDict, total=False):
    Vpc: EC2Vpc


class EC2Vpc(TypedDict, total=False):
    CidrBlock: str
    DhcpOptionsId: str
    State: str
    VpcId: str
    OwnerId: str
    InstanceTenancy: str
    Ipv6CidrBlockAssociationSet: List[EC2VpcIpv6CidrBlockAssociation]
    CidrBlockAssociationSet: List[EC2VpcCidrBlockAssociation]
    IsDefault: bool
    Tags: List[EC2Tag]


class EC2NewDhcpConfiguration(TypedDict, total=False):
    Key: str
    Values: List[str]


class EC2CreateDhcpOptionsResult(TypedDict, total=False):
    DhcpOptions: EC2DhcpOptions


class EC2DhcpOptions(TypedDict, total=False):
    DhcpConfigurations: List[EC2DhcpConfiguration]
    DhcpOptionsId: str
    OwnerId: str
    Tags: List[EC2Tag]


class EC2DhcpConfiguration(TypedDict, total=False):
    Key: str
    Values: List[EC2AttributeValue]


class EC2AttributeValue(TypedDict, total=False):
    Value: str


class EC2CreateEgressOnlyInternetGatewayResult(TypedDict, total=False):
    ClientToken: str
    EgressOnlyInternetGateway: EC2EgressOnlyInternetGateway


class EC2EgressOnlyInternetGateway(TypedDict, total=False):
    Attachments: List[EC2InternetGatewayAttachment]
    EgressOnlyInternetGatewayId: str


class EC2InternetGatewayAttachment(TypedDict, total=False):
    State: str
    VpcId: str


class EC2SpotOptionsRequest(TypedDict, total=False):
    AllocationStrategy: str
    InstanceInterruptionBehavior: str
    InstancePoolsToUseCount: int
    SingleInstanceType: bool
    SingleAvailabilityZone: bool
    MinTargetCapacity: int


class EC2OnDemandOptionsRequest(TypedDict, total=False):
    AllocationStrategy: str
    SingleInstanceType: bool
    SingleAvailabilityZone: bool
    MinTargetCapacity: int


class EC2FleetLaunchTemplateConfigRequest(TypedDict, total=False):
    LaunchTemplateSpecification: EC2FleetLaunchTemplateSpecificationRequest
    Overrides: List[EC2FleetLaunchTemplateOverridesRequest]


class EC2FleetLaunchTemplateSpecificationRequest(TypedDict, total=False):
    LaunchTemplateId: str
    LaunchTemplateName: str
    Version: str


class EC2FleetLaunchTemplateOverridesRequest(TypedDict, total=False):
    InstanceType: str
    MaxPrice: str
    SubnetId: str
    AvailabilityZone: str
    WeightedCapacity: float
    Priority: float
    Placement: EC2Placement


class EC2Placement(TypedDict, total=False):
    AvailabilityZone: str
    Affinity: str
    GroupName: str
    PartitionNumber: int
    HostId: str
    Tenancy: str
    SpreadDomain: str


class _EC2TargetCapacitySpecificationRequest(TypedDict):
    TotalTargetCapacity: int


class EC2TargetCapacitySpecificationRequest(_EC2TargetCapacitySpecificationRequest, total=False):
    OnDemandTargetCapacity: int
    SpotTargetCapacity: int
    DefaultTargetCapacityType: str


class EC2CreateFleetResult(TypedDict, total=False):
    FleetId: str
    Errors: List[EC2CreateFleetError]
    Instances: List[EC2CreateFleetInstance]


class EC2CreateFleetError(TypedDict, total=False):
    LaunchTemplateAndOverrides: EC2LaunchTemplateAndOverridesResponse
    Lifecycle: str
    ErrorCode: str
    ErrorMessage: str


class EC2LaunchTemplateAndOverridesResponse(TypedDict, total=False):
    LaunchTemplateSpecification: EC2FleetLaunchTemplateSpecification
    Overrides: EC2FleetLaunchTemplateOverrides


class EC2FleetLaunchTemplateSpecification(TypedDict, total=False):
    LaunchTemplateId: str
    LaunchTemplateName: str
    Version: str


class EC2FleetLaunchTemplateOverrides(TypedDict, total=False):
    InstanceType: str
    MaxPrice: str
    SubnetId: str
    AvailabilityZone: str
    WeightedCapacity: float
    Priority: float
    Placement: EC2PlacementResponse


class EC2PlacementResponse(TypedDict, total=False):
    GroupName: str


class EC2CreateFleetInstance(TypedDict, total=False):
    LaunchTemplateAndOverrides: EC2LaunchTemplateAndOverridesResponse
    Lifecycle: str
    InstanceIds: List[str]
    InstanceType: str
    Platform: str


class EC2CreateFlowLogsResult(TypedDict, total=False):
    ClientToken: str
    FlowLogIds: List[str]
    Unsuccessful: List[EC2UnsuccessfulItem]


class EC2StorageLocation(TypedDict, total=False):
    Bucket: str
    Key: str


class EC2CreateFpgaImageResult(TypedDict, total=False):
    FpgaImageId: str
    FpgaImageGlobalId: str


class EC2BlockDeviceMapping(TypedDict, total=False):
    DeviceName: str
    VirtualName: str
    Ebs: EC2EbsBlockDevice
    NoDevice: str


class EC2EbsBlockDevice(TypedDict, total=False):
    DeleteOnTermination: bool
    Iops: int
    SnapshotId: str
    VolumeSize: int
    VolumeType: str
    Encrypted: bool
    KmsKeyId: str


class EC2CreateImageResult(TypedDict, total=False):
    ImageId: str


class EC2ExportToS3TaskSpecification(TypedDict, total=False):
    ContainerFormat: str
    DiskImageFormat: str
    S3Bucket: str
    S3Prefix: str


class EC2CreateInstanceExportTaskResult(TypedDict, total=False):
    ExportTask: EC2ExportTask


class EC2ExportTask(TypedDict, total=False):
    Description: str
    ExportTaskId: str
    ExportToS3Task: EC2ExportToS3Task
    InstanceExportDetails: EC2InstanceExportDetails
    State: str
    StatusMessage: str


class EC2ExportToS3Task(TypedDict, total=False):
    ContainerFormat: str
    DiskImageFormat: str
    S3Bucket: str
    S3Key: str


class EC2InstanceExportDetails(TypedDict, total=False):
    InstanceId: str
    TargetEnvironment: str


class EC2CreateInternetGatewayResult(TypedDict, total=False):
    InternetGateway: EC2InternetGateway


class EC2InternetGateway(TypedDict, total=False):
    Attachments: List[EC2InternetGatewayAttachment]
    InternetGatewayId: str
    OwnerId: str
    Tags: List[EC2Tag]


class EC2KeyPair(TypedDict, total=False):
    KeyFingerprint: str
    KeyMaterial: str
    KeyName: str


class EC2RequestLaunchTemplateData(TypedDict, total=False):
    KernelId: str
    EbsOptimized: bool
    IamInstanceProfile: EC2LaunchTemplateIamInstanceProfileSpecificationRequest
    BlockDeviceMappings: List[EC2LaunchTemplateBlockDeviceMappingRequest]
    NetworkInterfaces: List[EC2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest]
    ImageId: str
    InstanceType: str
    KeyName: str
    Monitoring: EC2LaunchTemplatesMonitoringRequest
    Placement: EC2LaunchTemplatePlacementRequest
    RamDiskId: str
    DisableApiTermination: bool
    InstanceInitiatedShutdownBehavior: str
    UserData: str
    TagSpecifications: List[EC2LaunchTemplateTagSpecificationRequest]
    ElasticGpuSpecifications: List[EC2ElasticGpuSpecification]
    ElasticInferenceAccelerators: List[EC2LaunchTemplateElasticInferenceAccelerator]
    SecurityGroupIds: List[str]
    SecurityGroups: List[str]
    InstanceMarketOptions: EC2LaunchTemplateInstanceMarketOptionsRequest
    CreditSpecification: EC2CreditSpecificationRequest
    CpuOptions: EC2LaunchTemplateCpuOptionsRequest
    CapacityReservationSpecification: EC2LaunchTemplateCapacityReservationSpecificationRequest
    LicenseSpecifications: List[EC2LaunchTemplateLicenseConfigurationRequest]
    HibernationOptions: EC2LaunchTemplateHibernationOptionsRequest


class EC2LaunchTemplateIamInstanceProfileSpecificationRequest(TypedDict, total=False):
    Arn: str
    Name: str


class EC2LaunchTemplateBlockDeviceMappingRequest(TypedDict, total=False):
    DeviceName: str
    VirtualName: str
    Ebs: EC2LaunchTemplateEbsBlockDeviceRequest
    NoDevice: str


class EC2LaunchTemplateEbsBlockDeviceRequest(TypedDict, total=False):
    Encrypted: bool
    DeleteOnTermination: bool
    Iops: int
    KmsKeyId: str
    SnapshotId: str
    VolumeSize: int
    VolumeType: str


class EC2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest(TypedDict, total=False):
    AssociatePublicIpAddress: bool
    DeleteOnTermination: bool
    Description: str
    DeviceIndex: int
    Groups: List[str]
    InterfaceType: str
    Ipv6AddressCount: int
    Ipv6Addresses: List[EC2InstanceIpv6AddressRequest]
    NetworkInterfaceId: str
    PrivateIpAddress: str
    PrivateIpAddresses: List[EC2PrivateIpAddressSpecification]
    SecondaryPrivateIpAddressCount: int
    SubnetId: str


class EC2InstanceIpv6AddressRequest(TypedDict, total=False):
    Ipv6Address: str


class EC2PrivateIpAddressSpecification(TypedDict, total=False):
    Primary: bool
    PrivateIpAddress: str


class EC2LaunchTemplatesMonitoringRequest(TypedDict, total=False):
    Enabled: bool


class EC2LaunchTemplatePlacementRequest(TypedDict, total=False):
    AvailabilityZone: str
    Affinity: str
    GroupName: str
    HostId: str
    Tenancy: str
    SpreadDomain: str


class EC2LaunchTemplateTagSpecificationRequest(TypedDict, total=False):
    ResourceType: str
    Tags: List[EC2Tag]


class EC2ElasticGpuSpecification(TypedDict):
    Type: str


class EC2LaunchTemplateElasticInferenceAccelerator(TypedDict):
    Type: str


class EC2LaunchTemplateInstanceMarketOptionsRequest(TypedDict, total=False):
    MarketType: str
    SpotOptions: EC2LaunchTemplateSpotMarketOptionsRequest


class EC2LaunchTemplateSpotMarketOptionsRequest(TypedDict, total=False):
    MaxPrice: str
    SpotInstanceType: str
    BlockDurationMinutes: int
    ValidUntil: datetime.datetime
    InstanceInterruptionBehavior: str


class EC2CreditSpecificationRequest(TypedDict):
    CpuCredits: str


class EC2LaunchTemplateCpuOptionsRequest(TypedDict, total=False):
    CoreCount: int
    ThreadsPerCore: int


class EC2LaunchTemplateCapacityReservationSpecificationRequest(TypedDict, total=False):
    CapacityReservationPreference: str
    CapacityReservationTarget: EC2CapacityReservationTarget


class EC2CapacityReservationTarget(TypedDict, total=False):
    CapacityReservationId: str


class EC2LaunchTemplateLicenseConfigurationRequest(TypedDict, total=False):
    LicenseConfigurationArn: str


class EC2LaunchTemplateHibernationOptionsRequest(TypedDict, total=False):
    Configured: bool


class EC2CreateLaunchTemplateResult(TypedDict, total=False):
    LaunchTemplate: EC2LaunchTemplate


class EC2LaunchTemplate(TypedDict, total=False):
    LaunchTemplateId: str
    LaunchTemplateName: str
    CreateTime: datetime.datetime
    CreatedBy: str
    DefaultVersionNumber: int
    LatestVersionNumber: int
    Tags: List[EC2Tag]


class EC2CreateLaunchTemplateVersionResult(TypedDict, total=False):
    LaunchTemplateVersion: EC2LaunchTemplateVersion


class EC2LaunchTemplateVersion(TypedDict, total=False):
    LaunchTemplateId: str
    LaunchTemplateName: str
    VersionNumber: int
    VersionDescription: str
    CreateTime: datetime.datetime
    CreatedBy: str
    DefaultVersion: bool
    LaunchTemplateData: EC2ResponseLaunchTemplateData


class EC2ResponseLaunchTemplateData(TypedDict, total=False):
    KernelId: str
    EbsOptimized: bool
    IamInstanceProfile: EC2LaunchTemplateIamInstanceProfileSpecification
    BlockDeviceMappings: List[EC2LaunchTemplateBlockDeviceMapping]
    NetworkInterfaces: List[EC2LaunchTemplateInstanceNetworkInterfaceSpecification]
    ImageId: str
    InstanceType: str
    KeyName: str
    Monitoring: EC2LaunchTemplatesMonitoring
    Placement: EC2LaunchTemplatePlacement
    RamDiskId: str
    DisableApiTermination: bool
    InstanceInitiatedShutdownBehavior: str
    UserData: str
    TagSpecifications: List[EC2LaunchTemplateTagSpecification]
    ElasticGpuSpecifications: List[EC2ElasticGpuSpecificationResponse]
    ElasticInferenceAccelerators: List[EC2LaunchTemplateElasticInferenceAcceleratorResponse]
    SecurityGroupIds: List[str]
    SecurityGroups: List[str]
    InstanceMarketOptions: EC2LaunchTemplateInstanceMarketOptions
    CreditSpecification: EC2CreditSpecification
    CpuOptions: EC2LaunchTemplateCpuOptions
    CapacityReservationSpecification: EC2LaunchTemplateCapacityReservationSpecificationResponse
    LicenseSpecifications: List[EC2LaunchTemplateLicenseConfiguration]
    HibernationOptions: EC2LaunchTemplateHibernationOptions


class EC2LaunchTemplateIamInstanceProfileSpecification(TypedDict, total=False):
    Arn: str
    Name: str


class EC2LaunchTemplateBlockDeviceMapping(TypedDict, total=False):
    DeviceName: str
    VirtualName: str
    Ebs: EC2LaunchTemplateEbsBlockDevice
    NoDevice: str


class EC2LaunchTemplateEbsBlockDevice(TypedDict, total=False):
    Encrypted: bool
    DeleteOnTermination: bool
    Iops: int
    KmsKeyId: str
    SnapshotId: str
    VolumeSize: int
    VolumeType: str


class EC2LaunchTemplateInstanceNetworkInterfaceSpecification(TypedDict, total=False):
    AssociatePublicIpAddress: bool
    DeleteOnTermination: bool
    Description: str
    DeviceIndex: int
    Groups: List[str]
    InterfaceType: str
    Ipv6AddressCount: int
    Ipv6Addresses: List[EC2InstanceIpv6Address]
    NetworkInterfaceId: str
    PrivateIpAddress: str
    PrivateIpAddresses: List[EC2PrivateIpAddressSpecification]
    SecondaryPrivateIpAddressCount: int
    SubnetId: str


class EC2InstanceIpv6Address(TypedDict, total=False):
    Ipv6Address: str


class EC2LaunchTemplatesMonitoring(TypedDict, total=False):
    Enabled: bool


class EC2LaunchTemplatePlacement(TypedDict, total=False):
    AvailabilityZone: str
    Affinity: str
    GroupName: str
    HostId: str
    Tenancy: str
    SpreadDomain: str


class EC2LaunchTemplateTagSpecification(TypedDict, total=False):
    ResourceType: str
    Tags: List[EC2Tag]


class EC2ElasticGpuSpecificationResponse(TypedDict, total=False):
    Type: str


class EC2LaunchTemplateElasticInferenceAcceleratorResponse(TypedDict, total=False):
    Type: str


class EC2LaunchTemplateInstanceMarketOptions(TypedDict, total=False):
    MarketType: str
    SpotOptions: EC2LaunchTemplateSpotMarketOptions


class EC2LaunchTemplateSpotMarketOptions(TypedDict, total=False):
    MaxPrice: str
    SpotInstanceType: str
    BlockDurationMinutes: int
    ValidUntil: datetime.datetime
    InstanceInterruptionBehavior: str


class EC2CreditSpecification(TypedDict, total=False):
    CpuCredits: str


class EC2LaunchTemplateCpuOptions(TypedDict, total=False):
    CoreCount: int
    ThreadsPerCore: int


class EC2LaunchTemplateCapacityReservationSpecificationResponse(TypedDict, total=False):
    CapacityReservationPreference: str
    CapacityReservationTarget: EC2CapacityReservationTargetResponse


class EC2CapacityReservationTargetResponse(TypedDict, total=False):
    CapacityReservationId: str


class EC2LaunchTemplateLicenseConfiguration(TypedDict, total=False):
    LicenseConfigurationArn: str


class EC2LaunchTemplateHibernationOptions(TypedDict, total=False):
    Configured: bool


class EC2CreateNatGatewayResult(TypedDict, total=False):
    ClientToken: str
    NatGateway: EC2NatGateway


class EC2NatGateway(TypedDict, total=False):
    CreateTime: datetime.datetime
    DeleteTime: datetime.datetime
    FailureCode: str
    FailureMessage: str
    NatGatewayAddresses: List[EC2NatGatewayAddress]
    NatGatewayId: str
    ProvisionedBandwidth: EC2ProvisionedBandwidth
    State: str
    SubnetId: str
    VpcId: str
    Tags: List[EC2Tag]


class EC2NatGatewayAddress(TypedDict, total=False):
    AllocationId: str
    NetworkInterfaceId: str
    PrivateIp: str
    PublicIp: str


class EC2ProvisionedBandwidth(TypedDict, total=False):
    ProvisionTime: datetime.datetime
    Provisioned: str
    RequestTime: datetime.datetime
    Requested: str
    Status: str


class EC2CreateNetworkAclResult(TypedDict, total=False):
    NetworkAcl: EC2NetworkAcl


class EC2NetworkAcl(TypedDict, total=False):
    Associations: List[EC2NetworkAclAssociation]
    Entries: List[EC2NetworkAclEntry]
    IsDefault: bool
    NetworkAclId: str
    Tags: List[EC2Tag]
    VpcId: str
    OwnerId: str


class EC2NetworkAclAssociation(TypedDict, total=False):
    NetworkAclAssociationId: str
    NetworkAclId: str
    SubnetId: str


class EC2NetworkAclEntry(TypedDict, total=False):
    CidrBlock: str
    Egress: bool
    IcmpTypeCode: EC2IcmpTypeCode
    Ipv6CidrBlock: str
    PortRange: EC2PortRange
    Protocol: str
    RuleAction: str
    RuleNumber: int


class EC2IcmpTypeCode(TypedDict, total=False):
    Code: int
    Type: int


class EC2PortRange(TypedDict, total=False):
    From: int
    To: int


class EC2CreateNetworkInterfaceResult(TypedDict, total=False):
    NetworkInterface: EC2NetworkInterface


class EC2NetworkInterface(TypedDict, total=False):
    Association: EC2NetworkInterfaceAssociation
    Attachment: EC2NetworkInterfaceAttachment
    AvailabilityZone: str
    Description: str
    Groups: List[EC2GroupIdentifier]
    InterfaceType: str
    Ipv6Addresses: List[EC2NetworkInterfaceIpv6Address]
    MacAddress: str
    NetworkInterfaceId: str
    OwnerId: str
    PrivateDnsName: str
    PrivateIpAddress: str
    PrivateIpAddresses: List[EC2NetworkInterfacePrivateIpAddress]
    RequesterId: str
    RequesterManaged: bool
    SourceDestCheck: bool
    Status: str
    SubnetId: str
    TagSet: List[EC2Tag]
    VpcId: str


class EC2NetworkInterfaceAssociation(TypedDict, total=False):
    AllocationId: str
    AssociationId: str
    IpOwnerId: str
    PublicDnsName: str
    PublicIp: str


class EC2NetworkInterfaceAttachment(TypedDict, total=False):
    AttachTime: datetime.datetime
    AttachmentId: str
    DeleteOnTermination: bool
    DeviceIndex: int
    InstanceId: str
    InstanceOwnerId: str
    Status: str


class EC2GroupIdentifier(TypedDict, total=False):
    GroupName: str
    GroupId: str


class EC2NetworkInterfaceIpv6Address(TypedDict, total=False):
    Ipv6Address: str


class EC2NetworkInterfacePrivateIpAddress(TypedDict, total=False):
    Association: EC2NetworkInterfaceAssociation
    Primary: bool
    PrivateDnsName: str
    PrivateIpAddress: str


class EC2CreateNetworkInterfacePermissionResult(TypedDict, total=False):
    InterfacePermission: EC2NetworkInterfacePermission


class EC2NetworkInterfacePermission(TypedDict, total=False):
    NetworkInterfacePermissionId: str
    NetworkInterfaceId: str
    AwsAccountId: str
    AwsService: str
    Permission: str
    PermissionState: EC2NetworkInterfacePermissionState


class EC2NetworkInterfacePermissionState(TypedDict, total=False):
    State: str
    StatusMessage: str


class EC2PriceScheduleSpecification(TypedDict, total=False):
    CurrencyCode: str
    Price: float
    Term: int


class EC2CreateReservedInstancesListingResult(TypedDict, total=False):
    ReservedInstancesListings: List[EC2ReservedInstancesListing]


class EC2CreateRouteResult(TypedDict, total=False):
    Return: bool


class EC2CreateRouteTableResult(TypedDict, total=False):
    RouteTable: EC2RouteTable


class EC2RouteTable(TypedDict, total=False):
    Associations: List[EC2RouteTableAssociation]
    PropagatingVgws: List[EC2PropagatingVgw]
    RouteTableId: str
    Routes: List[EC2Route]
    Tags: List[EC2Tag]
    VpcId: str
    OwnerId: str


class EC2RouteTableAssociation(TypedDict, total=False):
    Main: bool
    RouteTableAssociationId: str
    RouteTableId: str
    SubnetId: str


class EC2PropagatingVgw(TypedDict, total=False):
    GatewayId: str


class EC2Route(TypedDict, total=False):
    DestinationCidrBlock: str
    DestinationIpv6CidrBlock: str
    DestinationPrefixListId: str
    EgressOnlyInternetGatewayId: str
    GatewayId: str
    InstanceId: str
    InstanceOwnerId: str
    NatGatewayId: str
    TransitGatewayId: str
    NetworkInterfaceId: str
    Origin: str
    State: str
    VpcPeeringConnectionId: str


class EC2CreateSecurityGroupResult(TypedDict, total=False):
    GroupId: str


class EC2Snapshot(TypedDict, total=False):
    DataEncryptionKeyId: str
    Description: str
    Encrypted: bool
    KmsKeyId: str
    OwnerId: str
    Progress: str
    SnapshotId: str
    StartTime: datetime.datetime
    State: str
    StateMessage: str
    VolumeId: str
    VolumeSize: int
    OwnerAlias: str
    Tags: List[EC2Tag]


class EC2CreateSpotDatafeedSubscriptionResult(TypedDict, total=False):
    SpotDatafeedSubscription: EC2SpotDatafeedSubscription


class EC2SpotDatafeedSubscription(TypedDict, total=False):
    Bucket: str
    Fault: EC2SpotInstanceStateFault
    OwnerId: str
    Prefix: str
    State: str


class EC2SpotInstanceStateFault(TypedDict, total=False):
    Code: str
    Message: str


class EC2CreateSubnetResult(TypedDict, total=False):
    Subnet: EC2Subnet


class EC2TransitGatewayRequestOptions(TypedDict, total=False):
    AmazonSideAsn: int
    AutoAcceptSharedAttachments: str
    DefaultRouteTableAssociation: str
    DefaultRouteTablePropagation: str
    VpnEcmpSupport: str
    DnsSupport: str


class EC2CreateTransitGatewayResult(TypedDict, total=False):
    TransitGateway: EC2TransitGateway


class EC2TransitGateway(TypedDict, total=False):
    TransitGatewayId: str
    TransitGatewayArn: str
    State: str
    OwnerId: str
    Description: str
    CreationTime: datetime.datetime
    Options: EC2TransitGatewayOptions
    Tags: List[EC2Tag]


class EC2TransitGatewayOptions(TypedDict, total=False):
    AmazonSideAsn: int
    AutoAcceptSharedAttachments: str
    DefaultRouteTableAssociation: str
    AssociationDefaultRouteTableId: str
    DefaultRouteTablePropagation: str
    PropagationDefaultRouteTableId: str
    VpnEcmpSupport: str
    DnsSupport: str


class EC2CreateTransitGatewayRouteResult(TypedDict, total=False):
    Route: EC2TransitGatewayRoute


class EC2TransitGatewayRoute(TypedDict, total=False):
    DestinationCidrBlock: str
    TransitGatewayAttachments: List[EC2TransitGatewayRouteAttachment]
    Type: str
    State: str


class EC2TransitGatewayRouteAttachment(TypedDict, total=False):
    ResourceId: str
    TransitGatewayAttachmentId: str
    ResourceType: str


class EC2CreateTransitGatewayRouteTableResult(TypedDict, total=False):
    TransitGatewayRouteTable: EC2TransitGatewayRouteTable


class EC2TransitGatewayRouteTable(TypedDict, total=False):
    TransitGatewayRouteTableId: str
    TransitGatewayId: str
    State: str
    DefaultAssociationRouteTable: bool
    DefaultPropagationRouteTable: bool
    CreationTime: datetime.datetime
    Tags: List[EC2Tag]


class EC2CreateTransitGatewayVpcAttachmentRequestOptions(TypedDict, total=False):
    DnsSupport: str
    Ipv6Support: str


class EC2CreateTransitGatewayVpcAttachmentResult(TypedDict, total=False):
    TransitGatewayVpcAttachment: EC2TransitGatewayVpcAttachment


class EC2Volume(TypedDict, total=False):
    Attachments: List[EC2VolumeAttachment]
    AvailabilityZone: str
    CreateTime: datetime.datetime
    Encrypted: bool
    KmsKeyId: str
    Size: int
    SnapshotId: str
    State: str
    VolumeId: str
    Iops: int
    Tags: List[EC2Tag]
    VolumeType: str


class EC2CreateVpcResult(TypedDict, total=False):
    Vpc: EC2Vpc


class EC2CreateVpcEndpointResult(TypedDict, total=False):
    VpcEndpoint: EC2VpcEndpoint
    ClientToken: str


class EC2VpcEndpoint(TypedDict, total=False):
    VpcEndpointId: str
    VpcEndpointType: str
    VpcId: str
    ServiceName: str
    State: str
    PolicyDocument: str
    RouteTableIds: List[str]
    SubnetIds: List[str]
    Groups: List[EC2SecurityGroupIdentifier]
    PrivateDnsEnabled: bool
    RequesterManaged: bool
    NetworkInterfaceIds: List[str]
    DnsEntries: List[EC2DnsEntry]
    CreationTimestamp: datetime.datetime
    Tags: List[EC2Tag]


class EC2SecurityGroupIdentifier(TypedDict, total=False):
    GroupId: str
    GroupName: str


class EC2DnsEntry(TypedDict, total=False):
    DnsName: str
    HostedZoneId: str


class EC2CreateVpcEndpointConnectionNotificationResult(TypedDict, total=False):
    ConnectionNotification: EC2ConnectionNotification
    ClientToken: str


class EC2ConnectionNotification(TypedDict, total=False):
    ConnectionNotificationId: str
    ServiceId: str
    VpcEndpointId: str
    ConnectionNotificationType: str
    ConnectionNotificationArn: str
    ConnectionEvents: List[str]
    ConnectionNotificationState: str


class EC2CreateVpcEndpointServiceConfigurationResult(TypedDict, total=False):
    ServiceConfiguration: EC2ServiceConfiguration
    ClientToken: str


class EC2ServiceConfiguration(TypedDict, total=False):
    ServiceType: List[EC2ServiceTypeDetail]
    ServiceId: str
    ServiceName: str
    ServiceState: str
    AvailabilityZones: List[str]
    AcceptanceRequired: bool
    ManagesVpcEndpoints: bool
    NetworkLoadBalancerArns: List[str]
    BaseEndpointDnsNames: List[str]
    PrivateDnsName: str
    Tags: List[EC2Tag]


class EC2ServiceTypeDetail(TypedDict, total=False):
    ServiceType: str


class EC2CreateVpcPeeringConnectionResult(TypedDict, total=False):
    VpcPeeringConnection: EC2VpcPeeringConnection


class EC2VpnConnectionOptionsSpecification(TypedDict, total=False):
    StaticRoutesOnly: bool
    TunnelOptions: List[EC2VpnTunnelOptionsSpecification]


class EC2VpnTunnelOptionsSpecification(TypedDict, total=False):
    TunnelInsideCidr: str
    PreSharedKey: str


class EC2CreateVpnConnectionResult(TypedDict, total=False):
    VpnConnection: EC2VpnConnection


class EC2VpnConnection(TypedDict, total=False):
    CustomerGatewayConfiguration: str
    CustomerGatewayId: str
    Category: str
    State: str
    Type: str
    VpnConnectionId: str
    VpnGatewayId: str
    TransitGatewayId: str
    Options: EC2VpnConnectionOptions
    Routes: List[EC2VpnStaticRoute]
    Tags: List[EC2Tag]
    VgwTelemetry: List[EC2VgwTelemetry]


class EC2VpnConnectionOptions(TypedDict, total=False):
    StaticRoutesOnly: bool


class EC2VpnStaticRoute(TypedDict, total=False):
    DestinationCidrBlock: str
    Source: str
    State: str


class EC2VgwTelemetry(TypedDict, total=False):
    AcceptedRouteCount: int
    LastStatusChange: datetime.datetime
    OutsideIpAddress: str
    Status: str
    StatusMessage: str


class EC2CreateVpnGatewayResult(TypedDict, total=False):
    VpnGateway: EC2VpnGateway


class EC2VpnGateway(TypedDict, total=False):
    AvailabilityZone: str
    State: str
    Type: str
    VpcAttachments: List[EC2VpcAttachment]
    VpnGatewayId: str
    AmazonSideAsn: int
    Tags: List[EC2Tag]


class EC2DeleteClientVpnEndpointResult(TypedDict, total=False):
    Status: EC2ClientVpnEndpointStatus


class EC2DeleteClientVpnRouteResult(TypedDict, total=False):
    Status: EC2ClientVpnRouteStatus


class EC2DeleteEgressOnlyInternetGatewayResult(TypedDict, total=False):
    ReturnCode: bool


class EC2DeleteFleetsResult(TypedDict, total=False):
    SuccessfulFleetDeletions: List[EC2DeleteFleetSuccessItem]
    UnsuccessfulFleetDeletions: List[EC2DeleteFleetErrorItem]


class EC2DeleteFleetSuccessItem(TypedDict, total=False):
    CurrentFleetState: str
    PreviousFleetState: str
    FleetId: str


class EC2DeleteFleetErrorItem(TypedDict, total=False):
    Error: EC2DeleteFleetError
    FleetId: str


class EC2DeleteFleetError(TypedDict, total=False):
    Code: str
    Message: str


class EC2DeleteFlowLogsResult(TypedDict, total=False):
    Unsuccessful: List[EC2UnsuccessfulItem]


class EC2DeleteFpgaImageResult(TypedDict, total=False):
    Return: bool


class EC2DeleteLaunchTemplateResult(TypedDict, total=False):
    LaunchTemplate: EC2LaunchTemplate


class EC2DeleteLaunchTemplateVersionsResult(TypedDict, total=False):
    SuccessfullyDeletedLaunchTemplateVersions: List[EC2DeleteLaunchTemplateVersionsResponseSuccessItem]
    UnsuccessfullyDeletedLaunchTemplateVersions: List[EC2DeleteLaunchTemplateVersionsResponseErrorItem]


class EC2DeleteLaunchTemplateVersionsResponseSuccessItem(TypedDict, total=False):
    LaunchTemplateId: str
    LaunchTemplateName: str
    VersionNumber: int


class EC2DeleteLaunchTemplateVersionsResponseErrorItem(TypedDict, total=False):
    LaunchTemplateId: str
    LaunchTemplateName: str
    VersionNumber: int
    ResponseError: EC2ResponseError


class EC2ResponseError(TypedDict, total=False):
    Code: str
    Message: str


class EC2DeleteNatGatewayResult(TypedDict, total=False):
    NatGatewayId: str


class EC2DeleteNetworkInterfacePermissionResult(TypedDict, total=False):
    Return: bool


class EC2DeleteTransitGatewayResult(TypedDict, total=False):
    TransitGateway: EC2TransitGateway


class EC2DeleteTransitGatewayRouteResult(TypedDict, total=False):
    Route: EC2TransitGatewayRoute


class EC2DeleteTransitGatewayRouteTableResult(TypedDict, total=False):
    TransitGatewayRouteTable: EC2TransitGatewayRouteTable


class EC2DeleteTransitGatewayVpcAttachmentResult(TypedDict, total=False):
    TransitGatewayVpcAttachment: EC2TransitGatewayVpcAttachment


class EC2DeleteVpcEndpointConnectionNotificationsResult(TypedDict, total=False):
    Unsuccessful: List[EC2UnsuccessfulItem]


class EC2DeleteVpcEndpointServiceConfigurationsResult(TypedDict, total=False):
    Unsuccessful: List[EC2UnsuccessfulItem]


class EC2DeleteVpcEndpointsResult(TypedDict, total=False):
    Unsuccessful: List[EC2UnsuccessfulItem]


class EC2DeleteVpcPeeringConnectionResult(TypedDict, total=False):
    Return: bool


class EC2DeprovisionByoipCidrResult(TypedDict, total=False):
    ByoipCidr: EC2ByoipCidr


class EC2DescribeAccountAttributesResult(TypedDict, total=False):
    AccountAttributes: List[EC2AccountAttribute]


class EC2AccountAttribute(TypedDict, total=False):
    AttributeName: str
    AttributeValues: List[EC2AccountAttributeValue]


class EC2AccountAttributeValue(TypedDict, total=False):
    AttributeValue: str


class EC2Filter(TypedDict, total=False):
    Name: str
    Values: List[str]


class EC2DescribeAddressesResult(TypedDict, total=False):
    Addresses: List[EC2Address]


class EC2Address(TypedDict, total=False):
    InstanceId: str
    PublicIp: str
    AllocationId: str
    AssociationId: str
    Domain: str
    NetworkInterfaceId: str
    NetworkInterfaceOwnerId: str
    PrivateIpAddress: str
    Tags: List[EC2Tag]
    PublicIpv4Pool: str


class EC2DescribeAggregateIdFormatResult(TypedDict, total=False):
    UseLongIdsAggregated: bool
    Statuses: List[EC2IdFormat]


class EC2IdFormat(TypedDict, total=False):
    Deadline: datetime.datetime
    Resource: str
    UseLongIds: bool


class EC2DescribeAvailabilityZonesResult(TypedDict, total=False):
    AvailabilityZones: List[EC2AvailabilityZone]


class EC2AvailabilityZone(TypedDict, total=False):
    State: str
    Messages: List[EC2AvailabilityZoneMessage]
    RegionName: str
    ZoneName: str
    ZoneId: str


class EC2AvailabilityZoneMessage(TypedDict, total=False):
    Message: str


class EC2DescribeBundleTasksResult(TypedDict, total=False):
    BundleTasks: List[EC2BundleTask]


class EC2DescribeByoipCidrsResult(TypedDict, total=False):
    ByoipCidrs: List[EC2ByoipCidr]
    NextToken: str


class EC2DescribeCapacityReservationsResult(TypedDict, total=False):
    NextToken: str
    CapacityReservations: List[EC2CapacityReservation]


class EC2DescribeClassicLinkInstancesResult(TypedDict, total=False):
    Instances: List[EC2ClassicLinkInstance]
    NextToken: str


class EC2ClassicLinkInstance(TypedDict, total=False):
    Groups: List[EC2GroupIdentifier]
    InstanceId: str
    Tags: List[EC2Tag]
    VpcId: str


class EC2DescribeClientVpnAuthorizationRulesResult(TypedDict, total=False):
    AuthorizationRules: List[EC2AuthorizationRule]
    NextToken: str


class EC2AuthorizationRule(TypedDict, total=False):
    ClientVpnEndpointId: str
    Description: str
    GroupId: str
    AccessAll: bool
    DestinationCidr: str
    Status: EC2ClientVpnAuthorizationRuleStatus


class EC2DescribeClientVpnConnectionsResult(TypedDict, total=False):
    Connections: List[EC2ClientVpnConnection]
    NextToken: str


class EC2ClientVpnConnection(TypedDict, total=False):
    ClientVpnEndpointId: str
    Timestamp: str
    ConnectionId: str
    Username: str
    ConnectionEstablishedTime: str
    IngressBytes: str
    EgressBytes: str
    IngressPackets: str
    EgressPackets: str
    ClientIp: str
    CommonName: str
    Status: EC2ClientVpnConnectionStatus
    ConnectionEndTime: str


class EC2ClientVpnConnectionStatus(TypedDict, total=False):
    Code: str
    Message: str


class EC2DescribeClientVpnEndpointsResult(TypedDict, total=False):
    ClientVpnEndpoints: List[EC2ClientVpnEndpoint]
    NextToken: str


class EC2ClientVpnEndpoint(TypedDict, total=False):
    ClientVpnEndpointId: str
    Description: str
    Status: EC2ClientVpnEndpointStatus
    CreationTime: str
    DeletionTime: str
    DnsName: str
    ClientCidrBlock: str
    DnsServers: List[str]
    SplitTunnel: bool
    VpnProtocol: str
    TransportProtocol: str
    AssociatedTargetNetworks: List[EC2AssociatedTargetNetwork]
    ServerCertificateArn: str
    AuthenticationOptions: List[EC2ClientVpnAuthentication]
    ConnectionLogOptions: EC2ConnectionLogResponseOptions
    Tags: List[EC2Tag]


class EC2AssociatedTargetNetwork(TypedDict, total=False):
    NetworkId: str
    NetworkType: str


class EC2ClientVpnAuthentication(TypedDict, total=False):
    Type: str
    ActiveDirectory: EC2DirectoryServiceAuthentication
    MutualAuthentication: EC2CertificateAuthentication


class EC2DirectoryServiceAuthentication(TypedDict, total=False):
    DirectoryId: str


class EC2CertificateAuthentication(TypedDict, total=False):
    ClientRootCertificateChain: str


class EC2ConnectionLogResponseOptions(TypedDict, total=False):
    Enabled: bool
    CloudwatchLogGroup: str
    CloudwatchLogStream: str


class EC2DescribeClientVpnRoutesResult(TypedDict, total=False):
    Routes: List[EC2ClientVpnRoute]
    NextToken: str


class EC2ClientVpnRoute(TypedDict, total=False):
    ClientVpnEndpointId: str
    DestinationCidr: str
    TargetSubnet: str
    Type: str
    Origin: str
    Status: EC2ClientVpnRouteStatus
    Description: str


class EC2DescribeClientVpnTargetNetworksResult(TypedDict, total=False):
    ClientVpnTargetNetworks: List[EC2TargetNetwork]
    NextToken: str


class EC2TargetNetwork(TypedDict, total=False):
    AssociationId: str
    VpcId: str
    TargetNetworkId: str
    ClientVpnEndpointId: str
    Status: EC2AssociationStatus
    SecurityGroups: List[str]


class EC2DescribeConversionTasksResult(TypedDict, total=False):
    ConversionTasks: List[EC2ConversionTask]


class EC2ConversionTask(TypedDict, total=False):
    ConversionTaskId: str
    ExpirationTime: str
    ImportInstance: EC2ImportInstanceTaskDetails
    ImportVolume: EC2ImportVolumeTaskDetails
    State: str
    StatusMessage: str
    Tags: List[EC2Tag]


class EC2ImportInstanceTaskDetails(TypedDict, total=False):
    Description: str
    InstanceId: str
    Platform: str
    Volumes: List[EC2ImportInstanceVolumeDetailItem]


class EC2ImportInstanceVolumeDetailItem(TypedDict, total=False):
    AvailabilityZone: str
    BytesConverted: int
    Description: str
    Image: EC2DiskImageDescription
    Status: str
    StatusMessage: str
    Volume: EC2DiskImageVolumeDescription


class EC2DiskImageDescription(TypedDict, total=False):
    Checksum: str
    Format: str
    ImportManifestUrl: str
    Size: int


class EC2DiskImageVolumeDescription(TypedDict, total=False):
    Id: str
    Size: int


class EC2ImportVolumeTaskDetails(TypedDict, total=False):
    AvailabilityZone: str
    BytesConverted: int
    Description: str
    Image: EC2DiskImageDescription
    Volume: EC2DiskImageVolumeDescription


class EC2DescribeCustomerGatewaysResult(TypedDict, total=False):
    CustomerGateways: List[EC2CustomerGateway]


class EC2DescribeDhcpOptionsResult(TypedDict, total=False):
    DhcpOptions: List[EC2DhcpOptions]
    NextToken: str


class EC2DescribeEgressOnlyInternetGatewaysResult(TypedDict, total=False):
    EgressOnlyInternetGateways: List[EC2EgressOnlyInternetGateway]
    NextToken: str


class EC2DescribeElasticGpusResult(TypedDict, total=False):
    ElasticGpuSet: List[EC2ElasticGpus]
    MaxResults: int
    NextToken: str


class EC2ElasticGpus(TypedDict, total=False):
    ElasticGpuId: str
    AvailabilityZone: str
    ElasticGpuType: str
    ElasticGpuHealth: EC2ElasticGpuHealth
    ElasticGpuState: str
    InstanceId: str


class EC2ElasticGpuHealth(TypedDict, total=False):
    Status: str


class EC2DescribeExportTasksResult(TypedDict, total=False):
    ExportTasks: List[EC2ExportTask]


class EC2DescribeFleetHistoryResult(TypedDict, total=False):
    HistoryRecords: List[EC2HistoryRecordEntry]
    LastEvaluatedTime: datetime.datetime
    NextToken: str
    FleetId: str
    StartTime: datetime.datetime


class EC2HistoryRecordEntry(TypedDict, total=False):
    EventInformation: EC2EventInformation
    EventType: str
    Timestamp: datetime.datetime


class EC2EventInformation(TypedDict, total=False):
    EventDescription: str
    EventSubType: str
    InstanceId: str


class EC2DescribeFleetInstancesResult(TypedDict, total=False):
    ActiveInstances: List[EC2ActiveInstance]
    NextToken: str
    FleetId: str


class EC2ActiveInstance(TypedDict, total=False):
    InstanceId: str
    InstanceType: str
    SpotInstanceRequestId: str
    InstanceHealth: str


class EC2DescribeFleetsResult(TypedDict, total=False):
    NextToken: str
    Fleets: List[EC2FleetData]


class EC2FleetData(TypedDict, total=False):
    ActivityStatus: str
    CreateTime: datetime.datetime
    FleetId: str
    FleetState: str
    ClientToken: str
    ExcessCapacityTerminationPolicy: str
    FulfilledCapacity: float
    FulfilledOnDemandCapacity: float
    LaunchTemplateConfigs: List[EC2FleetLaunchTemplateConfig]
    TargetCapacitySpecification: EC2TargetCapacitySpecification
    TerminateInstancesWithExpiration: bool
    Type: str
    ValidFrom: datetime.datetime
    ValidUntil: datetime.datetime
    ReplaceUnhealthyInstances: bool
    SpotOptions: EC2SpotOptions
    OnDemandOptions: EC2OnDemandOptions
    Tags: List[EC2Tag]
    Errors: List[EC2DescribeFleetError]
    Instances: List[EC2DescribeFleetsInstances]


class EC2FleetLaunchTemplateConfig(TypedDict, total=False):
    LaunchTemplateSpecification: EC2FleetLaunchTemplateSpecification
    Overrides: List[EC2FleetLaunchTemplateOverrides]


class EC2TargetCapacitySpecification(TypedDict, total=False):
    TotalTargetCapacity: int
    OnDemandTargetCapacity: int
    SpotTargetCapacity: int
    DefaultTargetCapacityType: str


class EC2SpotOptions(TypedDict, total=False):
    AllocationStrategy: str
    InstanceInterruptionBehavior: str
    InstancePoolsToUseCount: int
    SingleInstanceType: bool
    SingleAvailabilityZone: bool
    MinTargetCapacity: int


class EC2OnDemandOptions(TypedDict, total=False):
    AllocationStrategy: str
    SingleInstanceType: bool
    SingleAvailabilityZone: bool
    MinTargetCapacity: int


class EC2DescribeFleetError(TypedDict, total=False):
    LaunchTemplateAndOverrides: EC2LaunchTemplateAndOverridesResponse
    Lifecycle: str
    ErrorCode: str
    ErrorMessage: str


class EC2DescribeFleetsInstances(TypedDict, total=False):
    LaunchTemplateAndOverrides: EC2LaunchTemplateAndOverridesResponse
    Lifecycle: str
    InstanceIds: List[str]
    InstanceType: str
    Platform: str


class EC2DescribeFlowLogsResult(TypedDict, total=False):
    FlowLogs: List[EC2FlowLog]
    NextToken: str


class EC2FlowLog(TypedDict, total=False):
    CreationTime: datetime.datetime
    DeliverLogsErrorMessage: str
    DeliverLogsPermissionArn: str
    DeliverLogsStatus: str
    FlowLogId: str
    FlowLogStatus: str
    LogGroupName: str
    ResourceId: str
    TrafficType: str
    LogDestinationType: str
    LogDestination: str


class EC2DescribeFpgaImageAttributeResult(TypedDict, total=False):
    FpgaImageAttribute: EC2FpgaImageAttribute


class EC2FpgaImageAttribute(TypedDict, total=False):
    FpgaImageId: str
    Name: str
    Description: str
    LoadPermissions: List[EC2LoadPermission]
    ProductCodes: List[EC2ProductCode]


class EC2LoadPermission(TypedDict, total=False):
    UserId: str
    Group: str


class EC2ProductCode(TypedDict, total=False):
    ProductCodeId: str
    ProductCodeType: str


class EC2DescribeFpgaImagesResult(TypedDict, total=False):
    FpgaImages: List[EC2FpgaImage]
    NextToken: str


class EC2FpgaImage(TypedDict, total=False):
    FpgaImageId: str
    FpgaImageGlobalId: str
    Name: str
    Description: str
    ShellVersion: str
    PciId: EC2PciId
    State: EC2FpgaImageState
    CreateTime: datetime.datetime
    UpdateTime: datetime.datetime
    OwnerId: str
    OwnerAlias: str
    ProductCodes: List[EC2ProductCode]
    Tags: List[EC2Tag]
    Public: bool
    DataRetentionSupport: bool


class EC2PciId(TypedDict, total=False):
    DeviceId: str
    VendorId: str
    SubsystemId: str
    SubsystemVendorId: str


class EC2FpgaImageState(TypedDict, total=False):
    Code: str
    Message: str


class EC2DescribeHostReservationOfferingsResult(TypedDict, total=False):
    NextToken: str
    OfferingSet: List[EC2HostOffering]


class EC2HostOffering(TypedDict, total=False):
    CurrencyCode: str
    Duration: int
    HourlyPrice: str
    InstanceFamily: str
    OfferingId: str
    PaymentOption: str
    UpfrontPrice: str


class EC2DescribeHostReservationsResult(TypedDict, total=False):
    HostReservationSet: List[EC2HostReservation]
    NextToken: str


class EC2HostReservation(TypedDict, total=False):
    Count: int
    CurrencyCode: str
    Duration: int
    End: datetime.datetime
    HostIdSet: List[str]
    HostReservationId: str
    HourlyPrice: str
    InstanceFamily: str
    OfferingId: str
    PaymentOption: str
    Start: datetime.datetime
    State: str
    UpfrontPrice: str
    Tags: List[EC2Tag]


class EC2DescribeHostsResult(TypedDict, total=False):
    Hosts: List[EC2Host]
    NextToken: str


class EC2Host(TypedDict, total=False):
    AutoPlacement: str
    AvailabilityZone: str
    AvailableCapacity: EC2AvailableCapacity
    ClientToken: str
    HostId: str
    HostProperties: EC2HostProperties
    HostReservationId: str
    Instances: List[EC2HostInstance]
    State: str
    AllocationTime: datetime.datetime
    ReleaseTime: datetime.datetime
    Tags: List[EC2Tag]


class EC2AvailableCapacity(TypedDict, total=False):
    AvailableInstanceCapacity: List[EC2InstanceCapacity]
    AvailableVCpus: int


class EC2InstanceCapacity(TypedDict, total=False):
    AvailableCapacity: int
    InstanceType: str
    TotalCapacity: int


class EC2HostProperties(TypedDict, total=False):
    Cores: int
    InstanceType: str
    Sockets: int
    TotalVCpus: int


class EC2HostInstance(TypedDict, total=False):
    InstanceId: str
    InstanceType: str


class EC2DescribeIamInstanceProfileAssociationsResult(TypedDict, total=False):
    IamInstanceProfileAssociations: List[EC2IamInstanceProfileAssociation]
    NextToken: str


class EC2DescribeIdFormatResult(TypedDict, total=False):
    Statuses: List[EC2IdFormat]


class EC2DescribeIdentityIdFormatResult(TypedDict, total=False):
    Statuses: List[EC2IdFormat]


class EC2ImageAttribute(TypedDict, total=False):
    BlockDeviceMappings: List[EC2BlockDeviceMapping]
    ImageId: str
    LaunchPermissions: List[EC2LaunchPermission]
    ProductCodes: List[EC2ProductCode]
    Description: EC2AttributeValue
    KernelId: EC2AttributeValue
    RamdiskId: EC2AttributeValue
    SriovNetSupport: EC2AttributeValue


class EC2LaunchPermission(TypedDict, total=False):
    Group: str
    UserId: str


class EC2DescribeImagesResult(TypedDict, total=False):
    Images: List[EC2Image]


class EC2Image(TypedDict, total=False):
    Architecture: str
    CreationDate: str
    ImageId: str
    ImageLocation: str
    ImageType: str
    Public: bool
    KernelId: str
    OwnerId: str
    Platform: str
    ProductCodes: List[EC2ProductCode]
    RamdiskId: str
    State: str
    BlockDeviceMappings: List[EC2BlockDeviceMapping]
    Description: str
    EnaSupport: bool
    Hypervisor: str
    ImageOwnerAlias: str
    Name: str
    RootDeviceName: str
    RootDeviceType: str
    SriovNetSupport: str
    StateReason: EC2StateReason
    Tags: List[EC2Tag]
    VirtualizationType: str


class EC2StateReason(TypedDict, total=False):
    Code: str
    Message: str


class EC2DescribeImportImageTasksResult(TypedDict, total=False):
    ImportImageTasks: List[EC2ImportImageTask]
    NextToken: str


class EC2ImportImageTask(TypedDict, total=False):
    Architecture: str
    Description: str
    Encrypted: bool
    Hypervisor: str
    ImageId: str
    ImportTaskId: str
    KmsKeyId: str
    LicenseType: str
    Platform: str
    Progress: str
    SnapshotDetails: List[EC2SnapshotDetail]
    Status: str
    StatusMessage: str


class EC2SnapshotDetail(TypedDict, total=False):
    Description: str
    DeviceName: str
    DiskImageSize: float
    Format: str
    Progress: str
    SnapshotId: str
    Status: str
    StatusMessage: str
    Url: str
    UserBucket: EC2UserBucketDetails


class EC2UserBucketDetails(TypedDict, total=False):
    S3Bucket: str
    S3Key: str


class EC2DescribeImportSnapshotTasksResult(TypedDict, total=False):
    ImportSnapshotTasks: List[EC2ImportSnapshotTask]
    NextToken: str


class EC2ImportSnapshotTask(TypedDict, total=False):
    Description: str
    ImportTaskId: str
    SnapshotTaskDetail: EC2SnapshotTaskDetail


class EC2SnapshotTaskDetail(TypedDict, total=False):
    Description: str
    DiskImageSize: float
    Encrypted: bool
    Format: str
    KmsKeyId: str
    Progress: str
    SnapshotId: str
    Status: str
    StatusMessage: str
    Url: str
    UserBucket: EC2UserBucketDetails


class EC2InstanceAttribute(TypedDict, total=False):
    Groups: List[EC2GroupIdentifier]
    BlockDeviceMappings: List[EC2InstanceBlockDeviceMapping]
    DisableApiTermination: EC2AttributeBooleanValue
    EnaSupport: EC2AttributeBooleanValue
    EbsOptimized: EC2AttributeBooleanValue
    InstanceId: str
    InstanceInitiatedShutdownBehavior: EC2AttributeValue
    InstanceType: EC2AttributeValue
    KernelId: EC2AttributeValue
    ProductCodes: List[EC2ProductCode]
    RamdiskId: EC2AttributeValue
    RootDeviceName: EC2AttributeValue
    SourceDestCheck: EC2AttributeBooleanValue
    SriovNetSupport: EC2AttributeValue
    UserData: EC2AttributeValue


class EC2InstanceBlockDeviceMapping(TypedDict, total=False):
    DeviceName: str
    Ebs: EC2EbsInstanceBlockDevice


class EC2EbsInstanceBlockDevice(TypedDict, total=False):
    AttachTime: datetime.datetime
    DeleteOnTermination: bool
    Status: str
    VolumeId: str


class EC2AttributeBooleanValue(TypedDict, total=False):
    Value: bool


class EC2DescribeInstanceCreditSpecificationsResult(TypedDict, total=False):
    InstanceCreditSpecifications: List[EC2InstanceCreditSpecification]
    NextToken: str


class EC2InstanceCreditSpecification(TypedDict, total=False):
    InstanceId: str
    CpuCredits: str


class EC2DescribeInstanceStatusResult(TypedDict, total=False):
    InstanceStatuses: List[EC2InstanceStatus]
    NextToken: str


class EC2InstanceStatus(TypedDict, total=False):
    AvailabilityZone: str
    Events: List[EC2InstanceStatusEvent]
    InstanceId: str
    InstanceState: EC2InstanceState
    InstanceStatus: EC2InstanceStatusSummary
    SystemStatus: EC2InstanceStatusSummary


class EC2InstanceStatusEvent(TypedDict, total=False):
    InstanceEventId: str
    Code: str
    Description: str
    NotAfter: datetime.datetime
    NotBefore: datetime.datetime
    NotBeforeDeadline: datetime.datetime


class EC2InstanceState(TypedDict, total=False):
    Code: int
    Name: str


class EC2InstanceStatusSummary(TypedDict, total=False):
    Details: List[EC2InstanceStatusDetails]
    Status: str


class EC2InstanceStatusDetails(TypedDict, total=False):
    ImpairedSince: datetime.datetime
    Name: str
    Status: str


class EC2DescribeInstancesResult(TypedDict, total=False):
    Reservations: List[EC2Reservation]
    NextToken: str


class EC2Reservation(TypedDict, total=False):
    Groups: List[EC2GroupIdentifier]
    Instances: List[EC2Instance]
    OwnerId: str
    RequesterId: str
    ReservationId: str


class EC2Instance(TypedDict, total=False):
    AmiLaunchIndex: int
    ImageId: str
    InstanceId: str
    InstanceType: str
    KernelId: str
    KeyName: str
    LaunchTime: datetime.datetime
    Monitoring: EC2Monitoring
    Placement: EC2Placement
    Platform: str
    PrivateDnsName: str
    PrivateIpAddress: str
    ProductCodes: List[EC2ProductCode]
    PublicDnsName: str
    PublicIpAddress: str
    RamdiskId: str
    State: EC2InstanceState
    StateTransitionReason: str
    SubnetId: str
    VpcId: str
    Architecture: str
    BlockDeviceMappings: List[EC2InstanceBlockDeviceMapping]
    ClientToken: str
    EbsOptimized: bool
    EnaSupport: bool
    Hypervisor: str
    IamInstanceProfile: EC2IamInstanceProfile
    InstanceLifecycle: str
    ElasticGpuAssociations: List[EC2ElasticGpuAssociation]
    ElasticInferenceAcceleratorAssociations: List[EC2ElasticInferenceAcceleratorAssociation]
    NetworkInterfaces: List[EC2InstanceNetworkInterface]
    RootDeviceName: str
    RootDeviceType: str
    SecurityGroups: List[EC2GroupIdentifier]
    SourceDestCheck: bool
    SpotInstanceRequestId: str
    SriovNetSupport: str
    StateReason: EC2StateReason
    Tags: List[EC2Tag]
    VirtualizationType: str
    CpuOptions: EC2CpuOptions
    CapacityReservationId: str
    CapacityReservationSpecification: EC2CapacityReservationSpecificationResponse
    HibernationOptions: EC2HibernationOptions
    Licenses: List[EC2LicenseConfiguration]


class EC2Monitoring(TypedDict, total=False):
    State: str


class EC2ElasticGpuAssociation(TypedDict, total=False):
    ElasticGpuId: str
    ElasticGpuAssociationId: str
    ElasticGpuAssociationState: str
    ElasticGpuAssociationTime: str


class EC2ElasticInferenceAcceleratorAssociation(TypedDict, total=False):
    ElasticInferenceAcceleratorArn: str
    ElasticInferenceAcceleratorAssociationId: str
    ElasticInferenceAcceleratorAssociationState: str
    ElasticInferenceAcceleratorAssociationTime: datetime.datetime


class EC2InstanceNetworkInterface(TypedDict, total=False):
    Association: EC2InstanceNetworkInterfaceAssociation
    Attachment: EC2InstanceNetworkInterfaceAttachment
    Description: str
    Groups: List[EC2GroupIdentifier]
    Ipv6Addresses: List[EC2InstanceIpv6Address]
    MacAddress: str
    NetworkInterfaceId: str
    OwnerId: str
    PrivateDnsName: str
    PrivateIpAddress: str
    PrivateIpAddresses: List[EC2InstancePrivateIpAddress]
    SourceDestCheck: bool
    Status: str
    SubnetId: str
    VpcId: str
    InterfaceType: str


class EC2InstanceNetworkInterfaceAssociation(TypedDict, total=False):
    IpOwnerId: str
    PublicDnsName: str
    PublicIp: str


class EC2InstanceNetworkInterfaceAttachment(TypedDict, total=False):
    AttachTime: datetime.datetime
    AttachmentId: str
    DeleteOnTermination: bool
    DeviceIndex: int
    Status: str


class EC2InstancePrivateIpAddress(TypedDict, total=False):
    Association: EC2InstanceNetworkInterfaceAssociation
    Primary: bool
    PrivateDnsName: str
    PrivateIpAddress: str


class EC2CpuOptions(TypedDict, total=False):
    CoreCount: int
    ThreadsPerCore: int


class EC2CapacityReservationSpecificationResponse(TypedDict, total=False):
    CapacityReservationPreference: str
    CapacityReservationTarget: EC2CapacityReservationTargetResponse


class EC2HibernationOptions(TypedDict, total=False):
    Configured: bool


class EC2LicenseConfiguration(TypedDict, total=False):
    LicenseConfigurationArn: str


class EC2DescribeInternetGatewaysResult(TypedDict, total=False):
    InternetGateways: List[EC2InternetGateway]
    NextToken: str


class EC2DescribeKeyPairsResult(TypedDict, total=False):
    KeyPairs: List[EC2KeyPairInfo]


class EC2KeyPairInfo(TypedDict, total=False):
    KeyFingerprint: str
    KeyName: str


class EC2DescribeLaunchTemplateVersionsResult(TypedDict, total=False):
    LaunchTemplateVersions: List[EC2LaunchTemplateVersion]
    NextToken: str


class EC2DescribeLaunchTemplatesResult(TypedDict, total=False):
    LaunchTemplates: List[EC2LaunchTemplate]
    NextToken: str


class EC2DescribeMovingAddressesResult(TypedDict, total=False):
    MovingAddressStatuses: List[EC2MovingAddressStatus]
    NextToken: str


class EC2MovingAddressStatus(TypedDict, total=False):
    MoveStatus: str
    PublicIp: str


class EC2DescribeNatGatewaysResult(TypedDict, total=False):
    NatGateways: List[EC2NatGateway]
    NextToken: str


class EC2DescribeNetworkAclsResult(TypedDict, total=False):
    NetworkAcls: List[EC2NetworkAcl]
    NextToken: str


class EC2DescribeNetworkInterfaceAttributeResult(TypedDict, total=False):
    Attachment: EC2NetworkInterfaceAttachment
    Description: EC2AttributeValue
    Groups: List[EC2GroupIdentifier]
    NetworkInterfaceId: str
    SourceDestCheck: EC2AttributeBooleanValue


class EC2DescribeNetworkInterfacePermissionsResult(TypedDict, total=False):
    NetworkInterfacePermissions: List[EC2NetworkInterfacePermission]
    NextToken: str


class EC2DescribeNetworkInterfacesResult(TypedDict, total=False):
    NetworkInterfaces: List[EC2NetworkInterface]
    NextToken: str


class EC2DescribePlacementGroupsResult(TypedDict, total=False):
    PlacementGroups: List[EC2PlacementGroup]


class EC2PlacementGroup(TypedDict, total=False):
    GroupName: str
    State: str
    Strategy: str
    PartitionCount: int


class EC2DescribePrefixListsResult(TypedDict, total=False):
    NextToken: str
    PrefixLists: List[EC2PrefixList]


class EC2PrefixList(TypedDict, total=False):
    Cidrs: List[str]
    PrefixListId: str
    PrefixListName: str


class EC2DescribePrincipalIdFormatResult(TypedDict, total=False):
    Principals: List[EC2PrincipalIdFormat]
    NextToken: str


class EC2PrincipalIdFormat(TypedDict, total=False):
    Arn: str
    Statuses: List[EC2IdFormat]


class EC2DescribePublicIpv4PoolsResult(TypedDict, total=False):
    PublicIpv4Pools: List[EC2PublicIpv4Pool]
    NextToken: str


class EC2PublicIpv4Pool(TypedDict, total=False):
    PoolId: str
    Description: str
    PoolAddressRanges: List[EC2PublicIpv4PoolRange]
    TotalAddressCount: int
    TotalAvailableAddressCount: int


class EC2PublicIpv4PoolRange(TypedDict, total=False):
    FirstAddress: str
    LastAddress: str
    AddressCount: int
    AvailableAddressCount: int


class EC2DescribeRegionsResult(TypedDict, total=False):
    Regions: List[EC2Region]


class EC2Region(TypedDict, total=False):
    Endpoint: str
    RegionName: str


class EC2DescribeReservedInstancesResult(TypedDict, total=False):
    ReservedInstances: List[EC2ReservedInstances]


class EC2ReservedInstances(TypedDict, total=False):
    AvailabilityZone: str
    Duration: int
    End: datetime.datetime
    FixedPrice: float
    InstanceCount: int
    InstanceType: str
    ProductDescription: str
    ReservedInstancesId: str
    Start: datetime.datetime
    State: str
    UsagePrice: float
    CurrencyCode: str
    InstanceTenancy: str
    OfferingClass: str
    OfferingType: str
    RecurringCharges: List[EC2RecurringCharge]
    Scope: str
    Tags: List[EC2Tag]


class EC2RecurringCharge(TypedDict, total=False):
    Amount: float
    Frequency: str


class EC2DescribeReservedInstancesListingsResult(TypedDict, total=False):
    ReservedInstancesListings: List[EC2ReservedInstancesListing]


class EC2DescribeReservedInstancesModificationsResult(TypedDict, total=False):
    NextToken: str
    ReservedInstancesModifications: List[EC2ReservedInstancesModification]


class EC2ReservedInstancesModification(TypedDict, total=False):
    ClientToken: str
    CreateDate: datetime.datetime
    EffectiveDate: datetime.datetime
    ModificationResults: List[EC2ReservedInstancesModificationResult]
    ReservedInstancesIds: List[EC2ReservedInstancesId]
    ReservedInstancesModificationId: str
    Status: str
    StatusMessage: str
    UpdateDate: datetime.datetime


class EC2ReservedInstancesModificationResult(TypedDict, total=False):
    ReservedInstancesId: str
    TargetConfiguration: EC2ReservedInstancesConfiguration


class EC2ReservedInstancesConfiguration(TypedDict, total=False):
    AvailabilityZone: str
    InstanceCount: int
    InstanceType: str
    Platform: str
    Scope: str


class EC2ReservedInstancesId(TypedDict, total=False):
    ReservedInstancesId: str


class EC2DescribeReservedInstancesOfferingsResult(TypedDict, total=False):
    ReservedInstancesOfferings: List[EC2ReservedInstancesOffering]
    NextToken: str


class EC2ReservedInstancesOffering(TypedDict, total=False):
    AvailabilityZone: str
    Duration: int
    FixedPrice: float
    InstanceType: str
    ProductDescription: str
    ReservedInstancesOfferingId: str
    UsagePrice: float
    CurrencyCode: str
    InstanceTenancy: str
    Marketplace: bool
    OfferingClass: str
    OfferingType: str
    PricingDetails: List[EC2PricingDetail]
    RecurringCharges: List[EC2RecurringCharge]
    Scope: str


class EC2PricingDetail(TypedDict, total=False):
    Count: int
    Price: float


class EC2DescribeRouteTablesResult(TypedDict, total=False):
    RouteTables: List[EC2RouteTable]
    NextToken: str


class EC2SlotDateTimeRangeRequest(TypedDict):
    EarliestTime: datetime.datetime
    LatestTime: datetime.datetime


class EC2ScheduledInstanceRecurrenceRequest(TypedDict, total=False):
    Frequency: str
    Interval: int
    OccurrenceDays: List[int]
    OccurrenceRelativeToEnd: bool
    OccurrenceUnit: str


class EC2DescribeScheduledInstanceAvailabilityResult(TypedDict, total=False):
    NextToken: str
    ScheduledInstanceAvailabilitySet: List[EC2ScheduledInstanceAvailability]


class EC2ScheduledInstanceAvailability(TypedDict, total=False):
    AvailabilityZone: str
    AvailableInstanceCount: int
    FirstSlotStartTime: datetime.datetime
    HourlyPrice: str
    InstanceType: str
    MaxTermDurationInDays: int
    MinTermDurationInDays: int
    NetworkPlatform: str
    Platform: str
    PurchaseToken: str
    Recurrence: EC2ScheduledInstanceRecurrence
    SlotDurationInHours: int
    TotalScheduledInstanceHours: int


class EC2ScheduledInstanceRecurrence(TypedDict, total=False):
    Frequency: str
    Interval: int
    OccurrenceDaySet: List[int]
    OccurrenceRelativeToEnd: bool
    OccurrenceUnit: str


class EC2SlotStartTimeRangeRequest(TypedDict, total=False):
    EarliestTime: datetime.datetime
    LatestTime: datetime.datetime


class EC2DescribeScheduledInstancesResult(TypedDict, total=False):
    NextToken: str
    ScheduledInstanceSet: List[EC2ScheduledInstance]


class EC2ScheduledInstance(TypedDict, total=False):
    AvailabilityZone: str
    CreateDate: datetime.datetime
    HourlyPrice: str
    InstanceCount: int
    InstanceType: str
    NetworkPlatform: str
    NextSlotStartTime: datetime.datetime
    Platform: str
    PreviousSlotEndTime: datetime.datetime
    Recurrence: EC2ScheduledInstanceRecurrence
    ScheduledInstanceId: str
    SlotDurationInHours: int
    TermEndDate: datetime.datetime
    TermStartDate: datetime.datetime
    TotalScheduledInstanceHours: int


class EC2DescribeSecurityGroupReferencesResult(TypedDict, total=False):
    SecurityGroupReferenceSet: List[EC2SecurityGroupReference]


class EC2SecurityGroupReference(TypedDict, total=False):
    GroupId: str
    ReferencingVpcId: str
    VpcPeeringConnectionId: str


class EC2DescribeSecurityGroupsResult(TypedDict, total=False):
    SecurityGroups: List[EC2SecurityGroup]
    NextToken: str


class EC2SecurityGroup(TypedDict, total=False):
    Description: str
    GroupName: str
    IpPermissions: List[EC2IpPermission]
    OwnerId: str
    GroupId: str
    IpPermissionsEgress: List[EC2IpPermission]
    Tags: List[EC2Tag]
    VpcId: str


class EC2DescribeSnapshotAttributeResult(TypedDict, total=False):
    CreateVolumePermissions: List[EC2CreateVolumePermission]
    ProductCodes: List[EC2ProductCode]
    SnapshotId: str


class EC2CreateVolumePermission(TypedDict, total=False):
    Group: str
    UserId: str


class EC2DescribeSnapshotsResult(TypedDict, total=False):
    Snapshots: List[EC2Snapshot]
    NextToken: str


class EC2DescribeSpotDatafeedSubscriptionResult(TypedDict, total=False):
    SpotDatafeedSubscription: EC2SpotDatafeedSubscription


class EC2DescribeSpotFleetInstancesResponse(TypedDict, total=False):
    ActiveInstances: List[EC2ActiveInstance]
    NextToken: str
    SpotFleetRequestId: str


class EC2DescribeSpotFleetRequestHistoryResponse(TypedDict, total=False):
    HistoryRecords: List[EC2HistoryRecord]
    LastEvaluatedTime: datetime.datetime
    NextToken: str
    SpotFleetRequestId: str
    StartTime: datetime.datetime


class EC2HistoryRecord(TypedDict, total=False):
    EventInformation: EC2EventInformation
    EventType: str
    Timestamp: datetime.datetime


class EC2DescribeSpotFleetRequestsResponse(TypedDict, total=False):
    NextToken: str
    SpotFleetRequestConfigs: List[EC2SpotFleetRequestConfig]


class EC2SpotFleetRequestConfig(TypedDict, total=False):
    ActivityStatus: str
    CreateTime: datetime.datetime
    SpotFleetRequestConfig: EC2SpotFleetRequestConfigData
    SpotFleetRequestId: str
    SpotFleetRequestState: str


class _EC2SpotFleetRequestConfigData(TypedDict):
    IamFleetRole: str
    TargetCapacity: int


class EC2SpotFleetRequestConfigData(_EC2SpotFleetRequestConfigData, total=False):
    AllocationStrategy: str
    OnDemandAllocationStrategy: str
    ClientToken: str
    ExcessCapacityTerminationPolicy: str
    FulfilledCapacity: float
    OnDemandFulfilledCapacity: float
    LaunchSpecifications: List[EC2SpotFleetLaunchSpecification]
    LaunchTemplateConfigs: List[EC2LaunchTemplateConfig]
    SpotPrice: str
    OnDemandTargetCapacity: int
    TerminateInstancesWithExpiration: bool
    Type: str
    ValidFrom: datetime.datetime
    ValidUntil: datetime.datetime
    ReplaceUnhealthyInstances: bool
    InstanceInterruptionBehavior: str
    LoadBalancersConfig: EC2LoadBalancersConfig
    InstancePoolsToUseCount: int


class EC2SpotFleetLaunchSpecification(TypedDict, total=False):
    SecurityGroups: List[EC2GroupIdentifier]
    AddressingType: str
    BlockDeviceMappings: List[EC2BlockDeviceMapping]
    EbsOptimized: bool
    IamInstanceProfile: EC2IamInstanceProfileSpecification
    ImageId: str
    InstanceType: str
    KernelId: str
    KeyName: str
    Monitoring: EC2SpotFleetMonitoring
    NetworkInterfaces: List[EC2InstanceNetworkInterfaceSpecification]
    Placement: EC2SpotPlacement
    RamdiskId: str
    SpotPrice: str
    SubnetId: str
    UserData: str
    WeightedCapacity: float
    TagSpecifications: List[EC2SpotFleetTagSpecification]


class EC2SpotFleetMonitoring(TypedDict, total=False):
    Enabled: bool


class EC2InstanceNetworkInterfaceSpecification(TypedDict, total=False):
    AssociatePublicIpAddress: bool
    DeleteOnTermination: bool
    Description: str
    DeviceIndex: int
    Groups: List[str]
    Ipv6AddressCount: int
    Ipv6Addresses: List[EC2InstanceIpv6Address]
    NetworkInterfaceId: str
    PrivateIpAddress: str
    PrivateIpAddresses: List[EC2PrivateIpAddressSpecification]
    SecondaryPrivateIpAddressCount: int
    SubnetId: str
    InterfaceType: str


class EC2SpotPlacement(TypedDict, total=False):
    AvailabilityZone: str
    GroupName: str
    Tenancy: str


class EC2SpotFleetTagSpecification(TypedDict, total=False):
    ResourceType: str
    Tags: List[EC2Tag]


class EC2LaunchTemplateConfig(TypedDict, total=False):
    LaunchTemplateSpecification: EC2FleetLaunchTemplateSpecification
    Overrides: List[EC2LaunchTemplateOverrides]


class EC2LaunchTemplateOverrides(TypedDict, total=False):
    InstanceType: str
    SpotPrice: str
    SubnetId: str
    AvailabilityZone: str
    WeightedCapacity: float
    Priority: float


class EC2LoadBalancersConfig(TypedDict, total=False):
    ClassicLoadBalancersConfig: EC2ClassicLoadBalancersConfig
    TargetGroupsConfig: EC2TargetGroupsConfig


class EC2ClassicLoadBalancersConfig(TypedDict, total=False):
    ClassicLoadBalancers: List[EC2ClassicLoadBalancer]


class EC2ClassicLoadBalancer(TypedDict, total=False):
    Name: str


class EC2TargetGroupsConfig(TypedDict, total=False):
    TargetGroups: List[EC2TargetGroup]


class EC2TargetGroup(TypedDict, total=False):
    Arn: str


class EC2DescribeSpotInstanceRequestsResult(TypedDict, total=False):
    SpotInstanceRequests: List[EC2SpotInstanceRequest]
    NextToken: str


class EC2SpotInstanceRequest(TypedDict, total=False):
    ActualBlockHourlyPrice: str
    AvailabilityZoneGroup: str
    BlockDurationMinutes: int
    CreateTime: datetime.datetime
    Fault: EC2SpotInstanceStateFault
    InstanceId: str
    LaunchGroup: str
    LaunchSpecification: EC2LaunchSpecification
    LaunchedAvailabilityZone: str
    ProductDescription: str
    SpotInstanceRequestId: str
    SpotPrice: str
    State: str
    Status: EC2SpotInstanceStatus
    Tags: List[EC2Tag]
    Type: str
    ValidFrom: datetime.datetime
    ValidUntil: datetime.datetime
    InstanceInterruptionBehavior: str


class EC2LaunchSpecification(TypedDict, total=False):
    UserData: str
    SecurityGroups: List[EC2GroupIdentifier]
    AddressingType: str
    BlockDeviceMappings: List[EC2BlockDeviceMapping]
    EbsOptimized: bool
    IamInstanceProfile: EC2IamInstanceProfileSpecification
    ImageId: str
    InstanceType: str
    KernelId: str
    KeyName: str
    NetworkInterfaces: List[EC2InstanceNetworkInterfaceSpecification]
    Placement: EC2SpotPlacement
    RamdiskId: str
    SubnetId: str
    Monitoring: EC2RunInstancesMonitoringEnabled


class EC2RunInstancesMonitoringEnabled(TypedDict):
    Enabled: bool


class EC2SpotInstanceStatus(TypedDict, total=False):
    Code: str
    Message: str
    UpdateTime: datetime.datetime


class EC2DescribeSpotPriceHistoryResult(TypedDict, total=False):
    NextToken: str
    SpotPriceHistory: List[EC2SpotPrice]


class EC2SpotPrice(TypedDict, total=False):
    AvailabilityZone: str
    InstanceType: str
    ProductDescription: str
    SpotPrice: str
    Timestamp: datetime.datetime


class EC2DescribeStaleSecurityGroupsResult(TypedDict, total=False):
    NextToken: str
    StaleSecurityGroupSet: List[EC2StaleSecurityGroup]


class EC2StaleSecurityGroup(TypedDict, total=False):
    Description: str
    GroupId: str
    GroupName: str
    StaleIpPermissions: List[EC2StaleIpPermission]
    StaleIpPermissionsEgress: List[EC2StaleIpPermission]
    VpcId: str


class EC2StaleIpPermission(TypedDict, total=False):
    FromPort: int
    IpProtocol: str
    IpRanges: List[str]
    PrefixListIds: List[str]
    ToPort: int
    UserIdGroupPairs: List[EC2UserIdGroupPair]


class EC2DescribeSubnetsResult(TypedDict, total=False):
    Subnets: List[EC2Subnet]
    NextToken: str


class EC2DescribeTagsResult(TypedDict, total=False):
    NextToken: str
    Tags: List[EC2TagDescription]


class EC2TagDescription(TypedDict, total=False):
    Key: str
    ResourceId: str
    ResourceType: str
    Value: str


class EC2DescribeTransitGatewayAttachmentsResult(TypedDict, total=False):
    TransitGatewayAttachments: List[EC2TransitGatewayAttachment]
    NextToken: str


class EC2TransitGatewayAttachment(TypedDict, total=False):
    TransitGatewayAttachmentId: str
    TransitGatewayId: str
    TransitGatewayOwnerId: str
    ResourceOwnerId: str
    ResourceType: str
    ResourceId: str
    State: str
    Association: EC2TransitGatewayAttachmentAssociation
    CreationTime: datetime.datetime
    Tags: List[EC2Tag]


class EC2TransitGatewayAttachmentAssociation(TypedDict, total=False):
    TransitGatewayRouteTableId: str
    State: str


class EC2DescribeTransitGatewayRouteTablesResult(TypedDict, total=False):
    TransitGatewayRouteTables: List[EC2TransitGatewayRouteTable]
    NextToken: str


class EC2DescribeTransitGatewayVpcAttachmentsResult(TypedDict, total=False):
    TransitGatewayVpcAttachments: List[EC2TransitGatewayVpcAttachment]
    NextToken: str


class EC2DescribeTransitGatewaysResult(TypedDict, total=False):
    TransitGateways: List[EC2TransitGateway]
    NextToken: str


class EC2DescribeVolumeAttributeResult(TypedDict, total=False):
    AutoEnableIO: EC2AttributeBooleanValue
    ProductCodes: List[EC2ProductCode]
    VolumeId: str


class EC2DescribeVolumeStatusResult(TypedDict, total=False):
    NextToken: str
    VolumeStatuses: List[EC2VolumeStatusItem]


class EC2VolumeStatusItem(TypedDict, total=False):
    Actions: List[EC2VolumeStatusAction]
    AvailabilityZone: str
    Events: List[EC2VolumeStatusEvent]
    VolumeId: str
    VolumeStatus: EC2VolumeStatusInfo


class EC2VolumeStatusAction(TypedDict, total=False):
    Code: str
    Description: str
    EventId: str
    EventType: str


class EC2VolumeStatusEvent(TypedDict, total=False):
    Description: str
    EventId: str
    EventType: str
    NotAfter: datetime.datetime
    NotBefore: datetime.datetime


class EC2VolumeStatusInfo(TypedDict, total=False):
    Details: List[EC2VolumeStatusDetails]
    Status: str


class EC2VolumeStatusDetails(TypedDict, total=False):
    Name: str
    Status: str


class EC2DescribeVolumesResult(TypedDict, total=False):
    Volumes: List[EC2Volume]
    NextToken: str


class EC2DescribeVolumesModificationsResult(TypedDict, total=False):
    VolumesModifications: List[EC2VolumeModification]
    NextToken: str


class EC2VolumeModification(TypedDict, total=False):
    VolumeId: str
    ModificationState: str
    StatusMessage: str
    TargetSize: int
    TargetIops: int
    TargetVolumeType: str
    OriginalSize: int
    OriginalIops: int
    OriginalVolumeType: str
    Progress: int
    StartTime: datetime.datetime
    EndTime: datetime.datetime


class EC2DescribeVpcAttributeResult(TypedDict, total=False):
    VpcId: str
    EnableDnsHostnames: EC2AttributeBooleanValue
    EnableDnsSupport: EC2AttributeBooleanValue


class EC2DescribeVpcClassicLinkResult(TypedDict, total=False):
    Vpcs: List[EC2VpcClassicLink]


class EC2VpcClassicLink(TypedDict, total=False):
    ClassicLinkEnabled: bool
    Tags: List[EC2Tag]
    VpcId: str


class EC2DescribeVpcClassicLinkDnsSupportResult(TypedDict, total=False):
    NextToken: str
    Vpcs: List[EC2ClassicLinkDnsSupport]


class EC2ClassicLinkDnsSupport(TypedDict, total=False):
    ClassicLinkDnsSupported: bool
    VpcId: str


class EC2DescribeVpcEndpointConnectionNotificationsResult(TypedDict, total=False):
    ConnectionNotificationSet: List[EC2ConnectionNotification]
    NextToken: str


class EC2DescribeVpcEndpointConnectionsResult(TypedDict, total=False):
    VpcEndpointConnections: List[EC2VpcEndpointConnection]
    NextToken: str


class EC2VpcEndpointConnection(TypedDict, total=False):
    ServiceId: str
    VpcEndpointId: str
    VpcEndpointOwner: str
    VpcEndpointState: str
    CreationTimestamp: datetime.datetime


class EC2DescribeVpcEndpointServiceConfigurationsResult(TypedDict, total=False):
    ServiceConfigurations: List[EC2ServiceConfiguration]
    NextToken: str


class EC2DescribeVpcEndpointServicePermissionsResult(TypedDict, total=False):
    AllowedPrincipals: List[EC2AllowedPrincipal]
    NextToken: str


class EC2AllowedPrincipal(TypedDict, total=False):
    PrincipalType: str
    Principal: str


class EC2DescribeVpcEndpointServicesResult(TypedDict, total=False):
    ServiceNames: List[str]
    ServiceDetails: List[EC2ServiceDetail]
    NextToken: str


class EC2ServiceDetail(TypedDict, total=False):
    ServiceName: str
    ServiceId: str
    ServiceType: List[EC2ServiceTypeDetail]
    AvailabilityZones: List[str]
    Owner: str
    BaseEndpointDnsNames: List[str]
    PrivateDnsName: str
    VpcEndpointPolicySupported: bool
    AcceptanceRequired: bool
    ManagesVpcEndpoints: bool
    Tags: List[EC2Tag]


class EC2DescribeVpcEndpointsResult(TypedDict, total=False):
    VpcEndpoints: List[EC2VpcEndpoint]
    NextToken: str


class EC2DescribeVpcPeeringConnectionsResult(TypedDict, total=False):
    VpcPeeringConnections: List[EC2VpcPeeringConnection]
    NextToken: str


class EC2DescribeVpcsResult(TypedDict, total=False):
    Vpcs: List[EC2Vpc]
    NextToken: str


class EC2DescribeVpnConnectionsResult(TypedDict, total=False):
    VpnConnections: List[EC2VpnConnection]


class EC2DescribeVpnGatewaysResult(TypedDict, total=False):
    VpnGateways: List[EC2VpnGateway]


class EC2DetachClassicLinkVpcResult(TypedDict, total=False):
    Return: bool


class EC2DisableTransitGatewayRouteTablePropagationResult(TypedDict, total=False):
    Propagation: EC2TransitGatewayPropagation


class EC2TransitGatewayPropagation(TypedDict, total=False):
    TransitGatewayAttachmentId: str
    ResourceId: str
    ResourceType: str
    TransitGatewayRouteTableId: str
    State: str


class EC2DisableVpcClassicLinkResult(TypedDict, total=False):
    Return: bool


class EC2DisableVpcClassicLinkDnsSupportResult(TypedDict, total=False):
    Return: bool


class EC2DisassociateClientVpnTargetNetworkResult(TypedDict, total=False):
    AssociationId: str
    Status: EC2AssociationStatus


class EC2DisassociateIamInstanceProfileResult(TypedDict, total=False):
    IamInstanceProfileAssociation: EC2IamInstanceProfileAssociation


class EC2DisassociateSubnetCidrBlockResult(TypedDict, total=False):
    Ipv6CidrBlockAssociation: EC2SubnetIpv6CidrBlockAssociation
    SubnetId: str


class EC2DisassociateTransitGatewayRouteTableResult(TypedDict, total=False):
    Association: EC2TransitGatewayAssociation


class EC2DisassociateVpcCidrBlockResult(TypedDict, total=False):
    Ipv6CidrBlockAssociation: EC2VpcIpv6CidrBlockAssociation
    CidrBlockAssociation: EC2VpcCidrBlockAssociation
    VpcId: str


class EC2EnableTransitGatewayRouteTablePropagationResult(TypedDict, total=False):
    Propagation: EC2TransitGatewayPropagation


class EC2EnableVpcClassicLinkResult(TypedDict, total=False):
    Return: bool


class EC2EnableVpcClassicLinkDnsSupportResult(TypedDict, total=False):
    Return: bool


class EC2ExportClientVpnClientCertificateRevocationListResult(TypedDict, total=False):
    CertificateRevocationList: str
    Status: EC2ClientCertificateRevocationListStatus


class EC2ClientCertificateRevocationListStatus(TypedDict, total=False):
    Code: str
    Message: str


class EC2ExportClientVpnClientConfigurationResult(TypedDict, total=False):
    ClientConfiguration: str


class EC2ExportTransitGatewayRoutesResult(TypedDict, total=False):
    S3Location: str


class EC2GetConsoleOutputResult(TypedDict, total=False):
    InstanceId: str
    Output: str
    Timestamp: datetime.datetime


class EC2GetConsoleScreenshotResult(TypedDict, total=False):
    ImageData: str
    InstanceId: str


class EC2GetHostReservationPurchasePreviewResult(TypedDict, total=False):
    CurrencyCode: str
    Purchase: List[EC2Purchase]
    TotalHourlyPrice: str
    TotalUpfrontPrice: str


class EC2Purchase(TypedDict, total=False):
    CurrencyCode: str
    Duration: int
    HostIdSet: List[str]
    HostReservationId: str
    HourlyPrice: str
    InstanceFamily: str
    PaymentOption: str
    UpfrontPrice: str


class EC2GetLaunchTemplateDataResult(TypedDict, total=False):
    LaunchTemplateData: EC2ResponseLaunchTemplateData


class EC2GetPasswordDataResult(TypedDict, total=False):
    InstanceId: str
    PasswordData: str
    Timestamp: datetime.datetime


class EC2GetReservedInstancesExchangeQuoteResult(TypedDict, total=False):
    CurrencyCode: str
    IsValidExchange: bool
    OutputReservedInstancesWillExpireAt: datetime.datetime
    PaymentDue: str
    ReservedInstanceValueRollup: EC2ReservationValue
    ReservedInstanceValueSet: List[EC2ReservedInstanceReservationValue]
    TargetConfigurationValueRollup: EC2ReservationValue
    TargetConfigurationValueSet: List[EC2TargetReservationValue]
    ValidationFailureReason: str


class EC2ReservationValue(TypedDict, total=False):
    HourlyPrice: str
    RemainingTotalValue: str
    RemainingUpfrontValue: str


class EC2ReservedInstanceReservationValue(TypedDict, total=False):
    ReservationValue: EC2ReservationValue
    ReservedInstanceId: str


class EC2TargetReservationValue(TypedDict, total=False):
    ReservationValue: EC2ReservationValue
    TargetConfiguration: EC2TargetConfiguration


class EC2TargetConfiguration(TypedDict, total=False):
    InstanceCount: int
    OfferingId: str


class EC2GetTransitGatewayAttachmentPropagationsResult(TypedDict, total=False):
    TransitGatewayAttachmentPropagations: List[EC2TransitGatewayAttachmentPropagation]
    NextToken: str


class EC2TransitGatewayAttachmentPropagation(TypedDict, total=False):
    TransitGatewayRouteTableId: str
    State: str


class EC2GetTransitGatewayRouteTableAssociationsResult(TypedDict, total=False):
    Associations: List[EC2TransitGatewayRouteTableAssociation]
    NextToken: str


class EC2TransitGatewayRouteTableAssociation(TypedDict, total=False):
    TransitGatewayAttachmentId: str
    ResourceId: str
    ResourceType: str
    State: str


class EC2GetTransitGatewayRouteTablePropagationsResult(TypedDict, total=False):
    TransitGatewayRouteTablePropagations: List[EC2TransitGatewayRouteTablePropagation]
    NextToken: str


class EC2TransitGatewayRouteTablePropagation(TypedDict, total=False):
    TransitGatewayAttachmentId: str
    ResourceId: str
    ResourceType: str
    State: str


class EC2ImportClientVpnClientCertificateRevocationListResult(TypedDict, total=False):
    Return: bool


class EC2ClientData(TypedDict, total=False):
    Comment: str
    UploadEnd: datetime.datetime
    UploadSize: float
    UploadStart: datetime.datetime


class EC2ImageDiskContainer(TypedDict, total=False):
    Description: str
    DeviceName: str
    Format: str
    SnapshotId: str
    Url: str
    UserBucket: EC2UserBucket


class EC2UserBucket(TypedDict, total=False):
    S3Bucket: str
    S3Key: str


class EC2ImportImageResult(TypedDict, total=False):
    Architecture: str
    Description: str
    Encrypted: bool
    Hypervisor: str
    ImageId: str
    ImportTaskId: str
    KmsKeyId: str
    LicenseType: str
    Platform: str
    Progress: str
    SnapshotDetails: List[EC2SnapshotDetail]
    Status: str
    StatusMessage: str


class EC2DiskImage(TypedDict, total=False):
    Description: str
    Image: EC2DiskImageDetail
    Volume: EC2VolumeDetail


class EC2DiskImageDetail(TypedDict):
    Bytes: int
    Format: str
    ImportManifestUrl: str


class EC2VolumeDetail(TypedDict):
    Size: int


class EC2ImportInstanceLaunchSpecification(TypedDict, total=False):
    AdditionalInfo: str
    Architecture: str
    GroupIds: List[str]
    GroupNames: List[str]
    InstanceInitiatedShutdownBehavior: str
    InstanceType: str
    Monitoring: bool
    Placement: EC2Placement
    PrivateIpAddress: str
    SubnetId: str
    UserData: EC2UserData


class EC2UserData(TypedDict, total=False):
    Data: str


class EC2ImportInstanceResult(TypedDict, total=False):
    ConversionTask: EC2ConversionTask


class EC2ImportKeyPairResult(TypedDict, total=False):
    KeyFingerprint: str
    KeyName: str


class EC2SnapshotDiskContainer(TypedDict, total=False):
    Description: str
    Format: str
    Url: str
    UserBucket: EC2UserBucket


class EC2ImportSnapshotResult(TypedDict, total=False):
    Description: str
    ImportTaskId: str
    SnapshotTaskDetail: EC2SnapshotTaskDetail


class EC2ImportVolumeResult(TypedDict, total=False):
    ConversionTask: EC2ConversionTask


class EC2ModifyCapacityReservationResult(TypedDict, total=False):
    Return: bool


class EC2DnsServersOptionsModifyStructure(TypedDict, total=False):
    CustomDnsServers: List[str]
    Enabled: bool


class EC2ModifyClientVpnEndpointResult(TypedDict, total=False):
    Return: bool


class EC2ModifyFleetResult(TypedDict, total=False):
    Return: bool


class EC2LoadPermissionModifications(TypedDict, total=False):
    Add: List[EC2LoadPermissionRequest]
    Remove: List[EC2LoadPermissionRequest]


class EC2LoadPermissionRequest(TypedDict, total=False):
    Group: str
    UserId: str


class EC2ModifyFpgaImageAttributeResult(TypedDict, total=False):
    FpgaImageAttribute: EC2FpgaImageAttribute


class EC2ModifyHostsResult(TypedDict, total=False):
    Successful: List[str]
    Unsuccessful: List[EC2UnsuccessfulItem]


class EC2LaunchPermissionModifications(TypedDict, total=False):
    Add: List[EC2LaunchPermission]
    Remove: List[EC2LaunchPermission]


class EC2InstanceBlockDeviceMappingSpecification(TypedDict, total=False):
    DeviceName: str
    Ebs: EC2EbsInstanceBlockDeviceSpecification
    NoDevice: str
    VirtualName: str


class EC2EbsInstanceBlockDeviceSpecification(TypedDict, total=False):
    DeleteOnTermination: bool
    VolumeId: str


class EC2BlobAttributeValue(TypedDict, total=False):
    Value: bytes


class EC2CapacityReservationSpecification(TypedDict, total=False):
    CapacityReservationPreference: str
    CapacityReservationTarget: EC2CapacityReservationTarget


class EC2ModifyInstanceCapacityReservationAttributesResult(TypedDict, total=False):
    Return: bool


class EC2InstanceCreditSpecificationRequest(TypedDict, total=False):
    InstanceId: str
    CpuCredits: str


class EC2ModifyInstanceCreditSpecificationResult(TypedDict, total=False):
    SuccessfulInstanceCreditSpecifications: List[EC2SuccessfulInstanceCreditSpecificationItem]
    UnsuccessfulInstanceCreditSpecifications: List[EC2UnsuccessfulInstanceCreditSpecificationItem]


class EC2SuccessfulInstanceCreditSpecificationItem(TypedDict, total=False):
    InstanceId: str


class EC2UnsuccessfulInstanceCreditSpecificationItem(TypedDict, total=False):
    InstanceId: str
    Error: EC2UnsuccessfulInstanceCreditSpecificationItemError


class EC2UnsuccessfulInstanceCreditSpecificationItemError(TypedDict, total=False):
    Code: str
    Message: str


class EC2ModifyInstanceEventStartTimeResult(TypedDict, total=False):
    Event: EC2InstanceStatusEvent


class EC2ModifyInstancePlacementResult(TypedDict, total=False):
    Return: bool


class EC2ModifyLaunchTemplateResult(TypedDict, total=False):
    LaunchTemplate: EC2LaunchTemplate


class EC2NetworkInterfaceAttachmentChanges(TypedDict, total=False):
    AttachmentId: str
    DeleteOnTermination: bool


class EC2ModifyReservedInstancesResult(TypedDict, total=False):
    ReservedInstancesModificationId: str


class EC2CreateVolumePermissionModifications(TypedDict, total=False):
    Add: List[EC2CreateVolumePermission]
    Remove: List[EC2CreateVolumePermission]


class EC2ModifySpotFleetRequestResponse(TypedDict, total=False):
    Return: bool


class EC2ModifyTransitGatewayVpcAttachmentRequestOptions(TypedDict, total=False):
    DnsSupport: str
    Ipv6Support: str


class EC2ModifyTransitGatewayVpcAttachmentResult(TypedDict, total=False):
    TransitGatewayVpcAttachment: EC2TransitGatewayVpcAttachment


class EC2ModifyVolumeResult(TypedDict, total=False):
    VolumeModification: EC2VolumeModification


class EC2ModifyVpcEndpointResult(TypedDict, total=False):
    Return: bool


class EC2ModifyVpcEndpointConnectionNotificationResult(TypedDict, total=False):
    ReturnValue: bool


class EC2ModifyVpcEndpointServiceConfigurationResult(TypedDict, total=False):
    Return: bool


class EC2ModifyVpcEndpointServicePermissionsResult(TypedDict, total=False):
    ReturnValue: bool


class EC2PeeringConnectionOptionsRequest(TypedDict, total=False):
    AllowDnsResolutionFromRemoteVpc: bool
    AllowEgressFromLocalClassicLinkToRemoteVpc: bool
    AllowEgressFromLocalVpcToRemoteClassicLink: bool


class EC2ModifyVpcPeeringConnectionOptionsResult(TypedDict, total=False):
    AccepterPeeringConnectionOptions: EC2PeeringConnectionOptions
    RequesterPeeringConnectionOptions: EC2PeeringConnectionOptions


class EC2PeeringConnectionOptions(TypedDict, total=False):
    AllowDnsResolutionFromRemoteVpc: bool
    AllowEgressFromLocalClassicLinkToRemoteVpc: bool
    AllowEgressFromLocalVpcToRemoteClassicLink: bool


class EC2ModifyVpcTenancyResult(TypedDict, total=False):
    ReturnValue: bool


class EC2ModifyVpnConnectionResult(TypedDict, total=False):
    VpnConnection: EC2VpnConnection


class EC2MonitorInstancesResult(TypedDict, total=False):
    InstanceMonitorings: List[EC2InstanceMonitoring]


class EC2InstanceMonitoring(TypedDict, total=False):
    InstanceId: str
    Monitoring: EC2Monitoring


class EC2MoveAddressToVpcResult(TypedDict, total=False):
    AllocationId: str
    Status: str


class EC2CidrAuthorizationContext(TypedDict):
    Message: str
    Signature: str


class EC2ProvisionByoipCidrResult(TypedDict, total=False):
    ByoipCidr: EC2ByoipCidr


class EC2PurchaseHostReservationResult(TypedDict, total=False):
    ClientToken: str
    CurrencyCode: str
    Purchase: List[EC2Purchase]
    TotalHourlyPrice: str
    TotalUpfrontPrice: str


class EC2ReservedInstanceLimitPrice(TypedDict, total=False):
    Amount: float
    CurrencyCode: str


class EC2PurchaseReservedInstancesOfferingResult(TypedDict, total=False):
    ReservedInstancesId: str


class EC2PurchaseRequest(TypedDict):
    InstanceCount: int
    PurchaseToken: str


class EC2PurchaseScheduledInstancesResult(TypedDict, total=False):
    ScheduledInstanceSet: List[EC2ScheduledInstance]


class EC2RegisterImageResult(TypedDict, total=False):
    ImageId: str


class EC2RejectTransitGatewayVpcAttachmentResult(TypedDict, total=False):
    TransitGatewayVpcAttachment: EC2TransitGatewayVpcAttachment


class EC2RejectVpcEndpointConnectionsResult(TypedDict, total=False):
    Unsuccessful: List[EC2UnsuccessfulItem]


class EC2RejectVpcPeeringConnectionResult(TypedDict, total=False):
    Return: bool


class EC2ReleaseHostsResult(TypedDict, total=False):
    Successful: List[str]
    Unsuccessful: List[EC2UnsuccessfulItem]


class EC2ReplaceIamInstanceProfileAssociationResult(TypedDict, total=False):
    IamInstanceProfileAssociation: EC2IamInstanceProfileAssociation


class EC2ReplaceNetworkAclAssociationResult(TypedDict, total=False):
    NewAssociationId: str


class EC2ReplaceRouteTableAssociationResult(TypedDict, total=False):
    NewAssociationId: str


class EC2ReplaceTransitGatewayRouteResult(TypedDict, total=False):
    Route: EC2TransitGatewayRoute


class EC2RequestSpotFleetResponse(TypedDict, total=False):
    SpotFleetRequestId: str


class EC2RequestSpotLaunchSpecification(TypedDict, total=False):
    SecurityGroupIds: List[str]
    SecurityGroups: List[str]
    AddressingType: str
    BlockDeviceMappings: List[EC2BlockDeviceMapping]
    EbsOptimized: bool
    IamInstanceProfile: EC2IamInstanceProfileSpecification
    ImageId: str
    InstanceType: str
    KernelId: str
    KeyName: str
    Monitoring: EC2RunInstancesMonitoringEnabled
    NetworkInterfaces: List[EC2InstanceNetworkInterfaceSpecification]
    Placement: EC2SpotPlacement
    RamdiskId: str
    SubnetId: str
    UserData: str


class EC2RequestSpotInstancesResult(TypedDict, total=False):
    SpotInstanceRequests: List[EC2SpotInstanceRequest]


class EC2ResetFpgaImageAttributeResult(TypedDict, total=False):
    Return: bool


class EC2RestoreAddressToClassicResult(TypedDict, total=False):
    PublicIp: str
    Status: str


class EC2RevokeClientVpnIngressResult(TypedDict, total=False):
    Status: EC2ClientVpnAuthorizationRuleStatus


class EC2ElasticInferenceAccelerator(TypedDict):
    Type: str


class EC2LaunchTemplateSpecification(TypedDict, total=False):
    LaunchTemplateId: str
    LaunchTemplateName: str
    Version: str


class EC2InstanceMarketOptionsRequest(TypedDict, total=False):
    MarketType: str
    SpotOptions: EC2SpotMarketOptions


class EC2SpotMarketOptions(TypedDict, total=False):
    MaxPrice: str
    SpotInstanceType: str
    BlockDurationMinutes: int
    ValidUntil: datetime.datetime
    InstanceInterruptionBehavior: str


class EC2CpuOptionsRequest(TypedDict, total=False):
    CoreCount: int
    ThreadsPerCore: int


class EC2HibernationOptionsRequest(TypedDict, total=False):
    Configured: bool


class EC2LicenseConfigurationRequest(TypedDict, total=False):
    LicenseConfigurationArn: str


class _EC2ScheduledInstancesLaunchSpecification(TypedDict):
    ImageId: str


class EC2ScheduledInstancesLaunchSpecification(_EC2ScheduledInstancesLaunchSpecification, total=False):
    BlockDeviceMappings: List[EC2ScheduledInstancesBlockDeviceMapping]
    EbsOptimized: bool
    IamInstanceProfile: EC2ScheduledInstancesIamInstanceProfile
    InstanceType: str
    KernelId: str
    KeyName: str
    Monitoring: EC2ScheduledInstancesMonitoring
    NetworkInterfaces: List[EC2ScheduledInstancesNetworkInterface]
    Placement: EC2ScheduledInstancesPlacement
    RamdiskId: str
    SecurityGroupIds: List[str]
    SubnetId: str
    UserData: str


class EC2ScheduledInstancesBlockDeviceMapping(TypedDict, total=False):
    DeviceName: str
    Ebs: EC2ScheduledInstancesEbs
    NoDevice: str
    VirtualName: str


class EC2ScheduledInstancesEbs(TypedDict, total=False):
    DeleteOnTermination: bool
    Encrypted: bool
    Iops: int
    SnapshotId: str
    VolumeSize: int
    VolumeType: str


class EC2ScheduledInstancesIamInstanceProfile(TypedDict, total=False):
    Arn: str
    Name: str


class EC2ScheduledInstancesMonitoring(TypedDict, total=False):
    Enabled: bool


class EC2ScheduledInstancesNetworkInterface(TypedDict, total=False):
    AssociatePublicIpAddress: bool
    DeleteOnTermination: bool
    Description: str
    DeviceIndex: int
    Groups: List[str]
    Ipv6AddressCount: int
    Ipv6Addresses: List[EC2ScheduledInstancesIpv6Address]
    NetworkInterfaceId: str
    PrivateIpAddress: str
    PrivateIpAddressConfigs: List[EC2ScheduledInstancesPrivateIpAddressConfig]
    SecondaryPrivateIpAddressCount: int
    SubnetId: str


class EC2ScheduledInstancesIpv6Address(TypedDict, total=False):
    Ipv6Address: str


class EC2ScheduledInstancesPrivateIpAddressConfig(TypedDict, total=False):
    Primary: bool
    PrivateIpAddress: str


class EC2ScheduledInstancesPlacement(TypedDict, total=False):
    AvailabilityZone: str
    GroupName: str


class EC2RunScheduledInstancesResult(TypedDict, total=False):
    InstanceIdSet: List[str]


class EC2SearchTransitGatewayRoutesResult(TypedDict, total=False):
    Routes: List[EC2TransitGatewayRoute]
    AdditionalRoutesAvailable: bool


class EC2StartInstancesResult(TypedDict, total=False):
    StartingInstances: List[EC2InstanceStateChange]


class EC2InstanceStateChange(TypedDict, total=False):
    CurrentState: EC2InstanceState
    InstanceId: str
    PreviousState: EC2InstanceState


class EC2StopInstancesResult(TypedDict, total=False):
    StoppingInstances: List[EC2InstanceStateChange]


class EC2TerminateClientVpnConnectionsResult(TypedDict, total=False):
    ClientVpnEndpointId: str
    Username: str
    ConnectionStatuses: List[EC2TerminateConnectionStatus]


class EC2TerminateConnectionStatus(TypedDict, total=False):
    ConnectionId: str
    PreviousStatus: EC2ClientVpnConnectionStatus
    CurrentStatus: EC2ClientVpnConnectionStatus


class EC2TerminateInstancesResult(TypedDict, total=False):
    TerminatingInstances: List[EC2InstanceStateChange]


class EC2UnassignIpv6AddressesResult(TypedDict, total=False):
    NetworkInterfaceId: str
    UnassignedIpv6Addresses: List[str]


class EC2UnmonitorInstancesResult(TypedDict, total=False):
    InstanceMonitorings: List[EC2InstanceMonitoring]


class EC2UpdateSecurityGroupRuleDescriptionsEgressResult(TypedDict, total=False):
    Return: bool


class EC2UpdateSecurityGroupRuleDescriptionsIngressResult(TypedDict, total=False):
    Return: bool


class EC2WithdrawByoipCidrResult(TypedDict, total=False):
    ByoipCidr: EC2ByoipCidr


class ECR(BaseClient):
    def batch_check_layer_availability(self, *,
        repositoryName: str,
        layerDigests: List[str],
        registryId: str = ...
    ) -> ECRBatchCheckLayerAvailabilityResponse: ...

    def batch_delete_image(self, *,
        repositoryName: str,
        imageIds: List[ECRImageIdentifier],
        registryId: str = ...
    ) -> ECRBatchDeleteImageResponse: ...

    def batch_get_image(self, *,
        repositoryName: str,
        imageIds: List[ECRImageIdentifier],
        registryId: str = ...,
        acceptedMediaTypes: List[str] = ...
    ) -> ECRBatchGetImageResponse: ...

    def complete_layer_upload(self, *,
        repositoryName: str,
        uploadId: str,
        layerDigests: List[str],
        registryId: str = ...
    ) -> ECRCompleteLayerUploadResponse: ...

    def create_repository(self, *,
        repositoryName: str,
        tags: List[ECRTag] = ...
    ) -> ECRCreateRepositoryResponse: ...

    def delete_lifecycle_policy(self, *,
        repositoryName: str,
        registryId: str = ...
    ) -> ECRDeleteLifecyclePolicyResponse: ...

    def delete_repository(self, *,
        repositoryName: str,
        registryId: str = ...,
        force: bool = ...
    ) -> ECRDeleteRepositoryResponse: ...

    def delete_repository_policy(self, *,
        repositoryName: str,
        registryId: str = ...
    ) -> ECRDeleteRepositoryPolicyResponse: ...

    def describe_images(self, *,
        repositoryName: str,
        registryId: str = ...,
        imageIds: List[ECRImageIdentifier] = ...,
        nextToken: str = ...,
        maxResults: int = ...,
        filter: ECRDescribeImagesFilter = ...
    ) -> ECRDescribeImagesResponse: ...

    def describe_repositories(self, *,
        registryId: str = ...,
        repositoryNames: List[str] = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> ECRDescribeRepositoriesResponse: ...

    def get_authorization_token(self, *,
        registryIds: List[str] = ...
    ) -> ECRGetAuthorizationTokenResponse: ...

    def get_download_url_for_layer(self, *,
        repositoryName: str,
        layerDigest: str,
        registryId: str = ...
    ) -> ECRGetDownloadUrlForLayerResponse: ...

    def get_lifecycle_policy(self, *,
        repositoryName: str,
        registryId: str = ...
    ) -> ECRGetLifecyclePolicyResponse: ...

    def get_lifecycle_policy_preview(self, *,
        repositoryName: str,
        registryId: str = ...,
        imageIds: List[ECRImageIdentifier] = ...,
        nextToken: str = ...,
        maxResults: int = ...,
        filter: ECRLifecyclePolicyPreviewFilter = ...
    ) -> ECRGetLifecyclePolicyPreviewResponse: ...

    def get_repository_policy(self, *,
        repositoryName: str,
        registryId: str = ...
    ) -> ECRGetRepositoryPolicyResponse: ...

    def initiate_layer_upload(self, *,
        repositoryName: str,
        registryId: str = ...
    ) -> ECRInitiateLayerUploadResponse: ...

    def list_images(self, *,
        repositoryName: str,
        registryId: str = ...,
        nextToken: str = ...,
        maxResults: int = ...,
        filter: ECRListImagesFilter = ...
    ) -> ECRListImagesResponse: ...

    def list_tags_for_resource(self, *,
        resourceArn: str
    ) -> ECRListTagsForResourceResponse: ...

    def put_image(self, *,
        repositoryName: str,
        imageManifest: str,
        registryId: str = ...,
        imageTag: str = ...
    ) -> ECRPutImageResponse: ...

    def put_lifecycle_policy(self, *,
        repositoryName: str,
        lifecyclePolicyText: str,
        registryId: str = ...
    ) -> ECRPutLifecyclePolicyResponse: ...

    def set_repository_policy(self, *,
        repositoryName: str,
        policyText: str,
        registryId: str = ...,
        force: bool = ...
    ) -> ECRSetRepositoryPolicyResponse: ...

    def start_lifecycle_policy_preview(self, *,
        repositoryName: str,
        registryId: str = ...,
        lifecyclePolicyText: str = ...
    ) -> ECRStartLifecyclePolicyPreviewResponse: ...

    def tag_resource(self, *,
        resourceArn: str,
        tags: List[ECRTag]
    ) -> ECRTagResourceResponse: ...

    def untag_resource(self, *,
        resourceArn: str,
        tagKeys: List[str]
    ) -> ECRUntagResourceResponse: ...

    def upload_layer_part(self, *,
        repositoryName: str,
        uploadId: str,
        partFirstByte: int,
        partLastByte: int,
        layerPartBlob: bytes,
        registryId: str = ...
    ) -> ECRUploadLayerPartResponse: ...


class ECRBatchCheckLayerAvailabilityResponse(TypedDict, total=False):
    layers: List[ECRLayer]
    failures: List[ECRLayerFailure]


class ECRLayer(TypedDict, total=False):
    layerDigest: str
    layerAvailability: str
    layerSize: int
    mediaType: str


class ECRLayerFailure(TypedDict, total=False):
    layerDigest: str
    failureCode: str
    failureReason: str


class ECRImageIdentifier(TypedDict, total=False):
    imageDigest: str
    imageTag: str


class ECRBatchDeleteImageResponse(TypedDict, total=False):
    imageIds: List[ECRImageIdentifier]
    failures: List[ECRImageFailure]


class ECRImageFailure(TypedDict, total=False):
    imageId: ECRImageIdentifier
    failureCode: str
    failureReason: str


class ECRBatchGetImageResponse(TypedDict, total=False):
    images: List[ECRImage]
    failures: List[ECRImageFailure]


class ECRImage(TypedDict, total=False):
    registryId: str
    repositoryName: str
    imageId: ECRImageIdentifier
    imageManifest: str


class ECRCompleteLayerUploadResponse(TypedDict, total=False):
    registryId: str
    repositoryName: str
    uploadId: str
    layerDigest: str


class ECRTag(TypedDict, total=False):
    Key: str
    Value: str


class ECRCreateRepositoryResponse(TypedDict, total=False):
    repository: ECRRepository


class ECRRepository(TypedDict, total=False):
    repositoryArn: str
    registryId: str
    repositoryName: str
    repositoryUri: str
    createdAt: datetime.datetime


class ECRDeleteLifecyclePolicyResponse(TypedDict, total=False):
    registryId: str
    repositoryName: str
    lifecyclePolicyText: str
    lastEvaluatedAt: datetime.datetime


class ECRDeleteRepositoryResponse(TypedDict, total=False):
    repository: ECRRepository


class ECRDeleteRepositoryPolicyResponse(TypedDict, total=False):
    registryId: str
    repositoryName: str
    policyText: str


class ECRDescribeImagesFilter(TypedDict, total=False):
    tagStatus: str


class ECRDescribeImagesResponse(TypedDict, total=False):
    imageDetails: List[ECRImageDetail]
    nextToken: str


class ECRImageDetail(TypedDict, total=False):
    registryId: str
    repositoryName: str
    imageDigest: str
    imageTags: List[str]
    imageSizeInBytes: int
    imagePushedAt: datetime.datetime


class ECRDescribeRepositoriesResponse(TypedDict, total=False):
    repositories: List[ECRRepository]
    nextToken: str


class ECRGetAuthorizationTokenResponse(TypedDict, total=False):
    authorizationData: List[ECRAuthorizationData]


class ECRAuthorizationData(TypedDict, total=False):
    authorizationToken: str
    expiresAt: datetime.datetime
    proxyEndpoint: str


class ECRGetDownloadUrlForLayerResponse(TypedDict, total=False):
    downloadUrl: str
    layerDigest: str


class ECRGetLifecyclePolicyResponse(TypedDict, total=False):
    registryId: str
    repositoryName: str
    lifecyclePolicyText: str
    lastEvaluatedAt: datetime.datetime


class ECRLifecyclePolicyPreviewFilter(TypedDict, total=False):
    tagStatus: str


class ECRGetLifecyclePolicyPreviewResponse(TypedDict, total=False):
    registryId: str
    repositoryName: str
    lifecyclePolicyText: str
    status: str
    nextToken: str
    previewResults: List[ECRLifecyclePolicyPreviewResult]
    summary: ECRLifecyclePolicyPreviewSummary


class ECRLifecyclePolicyPreviewResult(TypedDict, total=False):
    imageTags: List[str]
    imageDigest: str
    imagePushedAt: datetime.datetime
    action: ECRLifecyclePolicyRuleAction
    appliedRulePriority: int


class ECRLifecyclePolicyRuleAction(TypedDict, total=False):
    type: str


class ECRLifecyclePolicyPreviewSummary(TypedDict, total=False):
    expiringImageTotalCount: int


class ECRGetRepositoryPolicyResponse(TypedDict, total=False):
    registryId: str
    repositoryName: str
    policyText: str


class ECRInitiateLayerUploadResponse(TypedDict, total=False):
    uploadId: str
    partSize: int


class ECRListImagesFilter(TypedDict, total=False):
    tagStatus: str


class ECRListImagesResponse(TypedDict, total=False):
    imageIds: List[ECRImageIdentifier]
    nextToken: str


class ECRListTagsForResourceResponse(TypedDict, total=False):
    tags: List[ECRTag]


class ECRPutImageResponse(TypedDict, total=False):
    image: ECRImage


class ECRPutLifecyclePolicyResponse(TypedDict, total=False):
    registryId: str
    repositoryName: str
    lifecyclePolicyText: str


class ECRSetRepositoryPolicyResponse(TypedDict, total=False):
    registryId: str
    repositoryName: str
    policyText: str


class ECRStartLifecyclePolicyPreviewResponse(TypedDict, total=False):
    registryId: str
    repositoryName: str
    lifecyclePolicyText: str
    status: str


class ECRTagResourceResponse(TypedDict, total=False):
    pass


class ECRUntagResourceResponse(TypedDict, total=False):
    pass


class ECRUploadLayerPartResponse(TypedDict, total=False):
    registryId: str
    repositoryName: str
    uploadId: str
    lastByteReceived: int


class ECS(BaseClient):
    def create_cluster(self, *,
        clusterName: str = ...,
        tags: List[ECSTag] = ...
    ) -> ECSCreateClusterResponse: ...

    def create_service(self, *,
        serviceName: str,
        cluster: str = ...,
        taskDefinition: str = ...,
        loadBalancers: List[ECSLoadBalancer] = ...,
        serviceRegistries: List[ECSServiceRegistry] = ...,
        desiredCount: int = ...,
        clientToken: str = ...,
        launchType: str = ...,
        platformVersion: str = ...,
        role: str = ...,
        deploymentConfiguration: ECSDeploymentConfiguration = ...,
        placementConstraints: List[ECSPlacementConstraint] = ...,
        placementStrategy: List[ECSPlacementStrategy] = ...,
        networkConfiguration: ECSNetworkConfiguration = ...,
        healthCheckGracePeriodSeconds: int = ...,
        schedulingStrategy: str = ...,
        deploymentController: ECSDeploymentController = ...,
        tags: List[ECSTag] = ...,
        enableECSManagedTags: bool = ...,
        propagateTags: str = ...
    ) -> ECSCreateServiceResponse: ...

    def create_task_set(self, *,
        service: str,
        cluster: str,
        taskDefinition: str,
        externalId: str = ...,
        networkConfiguration: ECSNetworkConfiguration = ...,
        loadBalancers: List[ECSLoadBalancer] = ...,
        serviceRegistries: List[ECSServiceRegistry] = ...,
        launchType: str = ...,
        platformVersion: str = ...,
        scale: ECSScale = ...,
        clientToken: str = ...
    ) -> ECSCreateTaskSetResponse: ...

    def delete_account_setting(self, *,
        name: str,
        principalArn: str = ...
    ) -> ECSDeleteAccountSettingResponse: ...

    def delete_attributes(self, *,
        attributes: List[ECSAttribute],
        cluster: str = ...
    ) -> ECSDeleteAttributesResponse: ...

    def delete_cluster(self, *,
        cluster: str
    ) -> ECSDeleteClusterResponse: ...

    def delete_service(self, *,
        service: str,
        cluster: str = ...,
        force: bool = ...
    ) -> ECSDeleteServiceResponse: ...

    def delete_task_set(self, *,
        cluster: str,
        service: str,
        taskSet: str,
        force: bool = ...
    ) -> ECSDeleteTaskSetResponse: ...

    def deregister_container_instance(self, *,
        containerInstance: str,
        cluster: str = ...,
        force: bool = ...
    ) -> ECSDeregisterContainerInstanceResponse: ...

    def deregister_task_definition(self, *,
        taskDefinition: str
    ) -> ECSDeregisterTaskDefinitionResponse: ...

    def describe_clusters(self, *,
        clusters: List[str] = ...,
        include: List[str] = ...
    ) -> ECSDescribeClustersResponse: ...

    def describe_container_instances(self, *,
        containerInstances: List[str],
        cluster: str = ...,
        include: List[str] = ...
    ) -> ECSDescribeContainerInstancesResponse: ...

    def describe_services(self, *,
        services: List[str],
        cluster: str = ...,
        include: List[str] = ...
    ) -> ECSDescribeServicesResponse: ...

    def describe_task_definition(self, *,
        taskDefinition: str,
        include: List[str] = ...
    ) -> ECSDescribeTaskDefinitionResponse: ...

    def describe_task_sets(self, *,
        cluster: str,
        service: str,
        taskSets: List[str] = ...
    ) -> ECSDescribeTaskSetsResponse: ...

    def describe_tasks(self, *,
        tasks: List[str],
        cluster: str = ...,
        include: List[str] = ...
    ) -> ECSDescribeTasksResponse: ...

    def discover_poll_endpoint(self, *,
        containerInstance: str = ...,
        cluster: str = ...
    ) -> ECSDiscoverPollEndpointResponse: ...

    def list_account_settings(self, *,
        name: str = ...,
        value: str = ...,
        principalArn: str = ...,
        effectiveSettings: bool = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> ECSListAccountSettingsResponse: ...

    def list_attributes(self, *,
        targetType: str,
        cluster: str = ...,
        attributeName: str = ...,
        attributeValue: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> ECSListAttributesResponse: ...

    def list_clusters(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> ECSListClustersResponse: ...

    def list_container_instances(self, *,
        cluster: str = ...,
        filter: str = ...,
        nextToken: str = ...,
        maxResults: int = ...,
        status: str = ...
    ) -> ECSListContainerInstancesResponse: ...

    def list_services(self, *,
        cluster: str = ...,
        nextToken: str = ...,
        maxResults: int = ...,
        launchType: str = ...,
        schedulingStrategy: str = ...
    ) -> ECSListServicesResponse: ...

    def list_tags_for_resource(self, *,
        resourceArn: str
    ) -> ECSListTagsForResourceResponse: ...

    def list_task_definition_families(self, *,
        familyPrefix: str = ...,
        status: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> ECSListTaskDefinitionFamiliesResponse: ...

    def list_task_definitions(self, *,
        familyPrefix: str = ...,
        status: str = ...,
        sort: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> ECSListTaskDefinitionsResponse: ...

    def list_tasks(self, *,
        cluster: str = ...,
        containerInstance: str = ...,
        family: str = ...,
        nextToken: str = ...,
        maxResults: int = ...,
        startedBy: str = ...,
        serviceName: str = ...,
        desiredStatus: str = ...,
        launchType: str = ...
    ) -> ECSListTasksResponse: ...

    def put_account_setting(self, *,
        name: str,
        value: str,
        principalArn: str = ...
    ) -> ECSPutAccountSettingResponse: ...

    def put_account_setting_default(self, *,
        name: str,
        value: str
    ) -> ECSPutAccountSettingDefaultResponse: ...

    def put_attributes(self, *,
        attributes: List[ECSAttribute],
        cluster: str = ...
    ) -> ECSPutAttributesResponse: ...

    def register_container_instance(self, *,
        cluster: str = ...,
        instanceIdentityDocument: str = ...,
        instanceIdentityDocumentSignature: str = ...,
        totalResources: List[ECSResource] = ...,
        versionInfo: ECSVersionInfo = ...,
        containerInstanceArn: str = ...,
        attributes: List[ECSAttribute] = ...,
        platformDevices: List[ECSPlatformDevice] = ...,
        tags: List[ECSTag] = ...
    ) -> ECSRegisterContainerInstanceResponse: ...

    def register_task_definition(self, *,
        family: str,
        containerDefinitions: List[ECSContainerDefinition],
        taskRoleArn: str = ...,
        executionRoleArn: str = ...,
        networkMode: str = ...,
        volumes: List[ECSVolume] = ...,
        placementConstraints: List[ECSTaskDefinitionPlacementConstraint] = ...,
        requiresCompatibilities: List[str] = ...,
        cpu: str = ...,
        memory: str = ...,
        tags: List[ECSTag] = ...,
        pidMode: str = ...,
        ipcMode: str = ...,
        proxyConfiguration: ECSProxyConfiguration = ...
    ) -> ECSRegisterTaskDefinitionResponse: ...

    def run_task(self, *,
        taskDefinition: str,
        cluster: str = ...,
        overrides: ECSTaskOverride = ...,
        count: int = ...,
        startedBy: str = ...,
        group: str = ...,
        placementConstraints: List[ECSPlacementConstraint] = ...,
        placementStrategy: List[ECSPlacementStrategy] = ...,
        launchType: str = ...,
        platformVersion: str = ...,
        networkConfiguration: ECSNetworkConfiguration = ...,
        tags: List[ECSTag] = ...,
        enableECSManagedTags: bool = ...,
        propagateTags: str = ...
    ) -> ECSRunTaskResponse: ...

    def start_task(self, *,
        taskDefinition: str,
        containerInstances: List[str],
        cluster: str = ...,
        overrides: ECSTaskOverride = ...,
        startedBy: str = ...,
        group: str = ...,
        networkConfiguration: ECSNetworkConfiguration = ...,
        tags: List[ECSTag] = ...,
        enableECSManagedTags: bool = ...,
        propagateTags: str = ...
    ) -> ECSStartTaskResponse: ...

    def stop_task(self, *,
        task: str,
        cluster: str = ...,
        reason: str = ...
    ) -> ECSStopTaskResponse: ...

    def submit_container_state_change(self, *,
        cluster: str = ...,
        task: str = ...,
        containerName: str = ...,
        status: str = ...,
        exitCode: int = ...,
        reason: str = ...,
        networkBindings: List[ECSNetworkBinding] = ...
    ) -> ECSSubmitContainerStateChangeResponse: ...

    def submit_task_state_change(self, *,
        cluster: str = ...,
        task: str = ...,
        status: str = ...,
        reason: str = ...,
        containers: List[ECSContainerStateChange] = ...,
        attachments: List[ECSAttachmentStateChange] = ...,
        pullStartedAt: datetime.datetime = ...,
        pullStoppedAt: datetime.datetime = ...,
        executionStoppedAt: datetime.datetime = ...
    ) -> ECSSubmitTaskStateChangeResponse: ...

    def tag_resource(self, *,
        resourceArn: str,
        tags: List[ECSTag]
    ) -> ECSTagResourceResponse: ...

    def untag_resource(self, *,
        resourceArn: str,
        tagKeys: List[str]
    ) -> ECSUntagResourceResponse: ...

    def update_container_agent(self, *,
        containerInstance: str,
        cluster: str = ...
    ) -> ECSUpdateContainerAgentResponse: ...

    def update_container_instances_state(self, *,
        containerInstances: List[str],
        status: str,
        cluster: str = ...
    ) -> ECSUpdateContainerInstancesStateResponse: ...

    def update_service(self, *,
        service: str,
        cluster: str = ...,
        desiredCount: int = ...,
        taskDefinition: str = ...,
        deploymentConfiguration: ECSDeploymentConfiguration = ...,
        networkConfiguration: ECSNetworkConfiguration = ...,
        platformVersion: str = ...,
        forceNewDeployment: bool = ...,
        healthCheckGracePeriodSeconds: int = ...
    ) -> ECSUpdateServiceResponse: ...

    def update_service_primary_task_set(self, *,
        cluster: str,
        service: str,
        primaryTaskSet: str
    ) -> ECSUpdateServicePrimaryTaskSetResponse: ...

    def update_task_set(self, *,
        cluster: str,
        service: str,
        taskSet: str,
        scale: ECSScale
    ) -> ECSUpdateTaskSetResponse: ...


class ECSTag(TypedDict, total=False):
    key: str
    value: str


class ECSCreateClusterResponse(TypedDict, total=False):
    cluster: ECSCluster


class ECSCluster(TypedDict, total=False):
    clusterArn: str
    clusterName: str
    status: str
    registeredContainerInstancesCount: int
    runningTasksCount: int
    pendingTasksCount: int
    activeServicesCount: int
    statistics: List[ECSKeyValuePair]
    tags: List[ECSTag]


class ECSKeyValuePair(TypedDict, total=False):
    name: str
    value: str


class ECSLoadBalancer(TypedDict, total=False):
    targetGroupArn: str
    loadBalancerName: str
    containerName: str
    containerPort: int


class ECSServiceRegistry(TypedDict, total=False):
    registryArn: str
    port: int
    containerName: str
    containerPort: int


class ECSDeploymentConfiguration(TypedDict, total=False):
    maximumPercent: int
    minimumHealthyPercent: int


class ECSPlacementConstraint(TypedDict, total=False):
    type: str
    expression: str


class ECSPlacementStrategy(TypedDict, total=False):
    type: str
    field: str


class ECSNetworkConfiguration(TypedDict, total=False):
    awsvpcConfiguration: ECSAwsVpcConfiguration


class _ECSAwsVpcConfiguration(TypedDict):
    subnets: List[str]


class ECSAwsVpcConfiguration(_ECSAwsVpcConfiguration, total=False):
    securityGroups: List[str]
    assignPublicIp: str


class ECSDeploymentController(TypedDict):
    type: str


class ECSCreateServiceResponse(TypedDict, total=False):
    service: ECSService


class ECSService(TypedDict, total=False):
    serviceArn: str
    serviceName: str
    clusterArn: str
    loadBalancers: List[ECSLoadBalancer]
    serviceRegistries: List[ECSServiceRegistry]
    status: str
    desiredCount: int
    runningCount: int
    pendingCount: int
    launchType: str
    platformVersion: str
    taskDefinition: str
    deploymentConfiguration: ECSDeploymentConfiguration
    taskSets: List[ECSTaskSet]
    deployments: List[ECSDeployment]
    roleArn: str
    events: List[ECSServiceEvent]
    createdAt: datetime.datetime
    placementConstraints: List[ECSPlacementConstraint]
    placementStrategy: List[ECSPlacementStrategy]
    networkConfiguration: ECSNetworkConfiguration
    healthCheckGracePeriodSeconds: int
    schedulingStrategy: str
    deploymentController: ECSDeploymentController
    tags: List[ECSTag]
    createdBy: str
    enableECSManagedTags: bool
    propagateTags: str


class ECSTaskSet(TypedDict, total=False):
    id: str
    taskSetArn: str
    serviceArn: str
    clusterArn: str
    startedBy: str
    externalId: str
    status: str
    taskDefinition: str
    computedDesiredCount: int
    pendingCount: int
    runningCount: int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    launchType: str
    platformVersion: str
    networkConfiguration: ECSNetworkConfiguration
    loadBalancers: List[ECSLoadBalancer]
    serviceRegistries: List[ECSServiceRegistry]
    scale: ECSScale
    stabilityStatus: str
    stabilityStatusAt: datetime.datetime


class ECSScale(TypedDict, total=False):
    value: float
    unit: str


class ECSDeployment(TypedDict, total=False):
    id: str
    status: str
    taskDefinition: str
    desiredCount: int
    pendingCount: int
    runningCount: int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    launchType: str
    platformVersion: str
    networkConfiguration: ECSNetworkConfiguration


class ECSServiceEvent(TypedDict, total=False):
    id: str
    createdAt: datetime.datetime
    message: str


class ECSCreateTaskSetResponse(TypedDict, total=False):
    taskSet: ECSTaskSet


class ECSDeleteAccountSettingResponse(TypedDict, total=False):
    setting: ECSSetting


class ECSSetting(TypedDict, total=False):
    name: str
    value: str
    principalArn: str


class _ECSAttribute(TypedDict):
    name: str


class ECSAttribute(_ECSAttribute, total=False):
    value: str
    targetType: str
    targetId: str


class ECSDeleteAttributesResponse(TypedDict, total=False):
    attributes: List[ECSAttribute]


class ECSDeleteClusterResponse(TypedDict, total=False):
    cluster: ECSCluster


class ECSDeleteServiceResponse(TypedDict, total=False):
    service: ECSService


class ECSDeleteTaskSetResponse(TypedDict, total=False):
    taskSet: ECSTaskSet


class ECSDeregisterContainerInstanceResponse(TypedDict, total=False):
    containerInstance: ECSContainerInstance


class ECSContainerInstance(TypedDict, total=False):
    containerInstanceArn: str
    ec2InstanceId: str
    version: int
    versionInfo: ECSVersionInfo
    remainingResources: List[ECSResource]
    registeredResources: List[ECSResource]
    status: str
    agentConnected: bool
    runningTasksCount: int
    pendingTasksCount: int
    agentUpdateStatus: str
    attributes: List[ECSAttribute]
    registeredAt: datetime.datetime
    attachments: List[ECSAttachment]
    tags: List[ECSTag]


class ECSVersionInfo(TypedDict, total=False):
    agentVersion: str
    agentHash: str
    dockerVersion: str


class ECSResource(TypedDict, total=False):
    name: str
    type: str
    doubleValue: float
    longValue: int
    integerValue: int
    stringSetValue: List[str]


class ECSAttachment(TypedDict, total=False):
    id: str
    type: str
    status: str
    details: List[ECSKeyValuePair]


class ECSDeregisterTaskDefinitionResponse(TypedDict, total=False):
    taskDefinition: ECSTaskDefinition


class ECSTaskDefinition(TypedDict, total=False):
    taskDefinitionArn: str
    containerDefinitions: List[ECSContainerDefinition]
    family: str
    taskRoleArn: str
    executionRoleArn: str
    networkMode: str
    revision: int
    volumes: List[ECSVolume]
    status: str
    requiresAttributes: List[ECSAttribute]
    placementConstraints: List[ECSTaskDefinitionPlacementConstraint]
    compatibilities: List[str]
    requiresCompatibilities: List[str]
    cpu: str
    memory: str
    pidMode: str
    ipcMode: str
    proxyConfiguration: ECSProxyConfiguration


class ECSContainerDefinition(TypedDict, total=False):
    name: str
    image: str
    repositoryCredentials: ECSRepositoryCredentials
    cpu: int
    memory: int
    memoryReservation: int
    links: List[str]
    portMappings: List[ECSPortMapping]
    essential: bool
    entryPoint: List[str]
    command: List[str]
    environment: List[ECSKeyValuePair]
    mountPoints: List[ECSMountPoint]
    volumesFrom: List[ECSVolumeFrom]
    linuxParameters: ECSLinuxParameters
    secrets: List[ECSSecret]
    dependsOn: List[ECSContainerDependency]
    startTimeout: int
    stopTimeout: int
    hostname: str
    user: str
    workingDirectory: str
    disableNetworking: bool
    privileged: bool
    readonlyRootFilesystem: bool
    dnsServers: List[str]
    dnsSearchDomains: List[str]
    extraHosts: List[ECSHostEntry]
    dockerSecurityOptions: List[str]
    interactive: bool
    pseudoTerminal: bool
    dockerLabels: Dict[str, str]
    ulimits: List[ECSUlimit]
    logConfiguration: ECSLogConfiguration
    healthCheck: ECSHealthCheck
    systemControls: List[ECSSystemControl]
    resourceRequirements: List[ECSResourceRequirement]


class ECSRepositoryCredentials(TypedDict):
    credentialsParameter: str


class ECSPortMapping(TypedDict, total=False):
    containerPort: int
    hostPort: int
    protocol: str


class ECSMountPoint(TypedDict, total=False):
    sourceVolume: str
    containerPath: str
    readOnly: bool


class ECSVolumeFrom(TypedDict, total=False):
    sourceContainer: str
    readOnly: bool


class ECSLinuxParameters(TypedDict, total=False):
    capabilities: ECSKernelCapabilities
    devices: List[ECSDevice]
    initProcessEnabled: bool
    sharedMemorySize: int
    tmpfs: List[ECSTmpfs]


class ECSKernelCapabilities(TypedDict, total=False):
    add: List[str]
    drop: List[str]


class _ECSDevice(TypedDict):
    hostPath: str


class ECSDevice(_ECSDevice, total=False):
    containerPath: str
    permissions: List[str]


class _ECSTmpfs(TypedDict):
    containerPath: str
    size: int


class ECSTmpfs(_ECSTmpfs, total=False):
    mountOptions: List[str]


class ECSSecret(TypedDict):
    name: str
    valueFrom: str


class ECSContainerDependency(TypedDict):
    containerName: str
    condition: str


class ECSHostEntry(TypedDict):
    hostname: str
    ipAddress: str


class ECSUlimit(TypedDict):
    name: str
    softLimit: int
    hardLimit: int


class _ECSLogConfiguration(TypedDict):
    logDriver: str


class ECSLogConfiguration(_ECSLogConfiguration, total=False):
    options: Dict[str, str]
    secretOptions: List[ECSSecret]


class _ECSHealthCheck(TypedDict):
    command: List[str]


class ECSHealthCheck(_ECSHealthCheck, total=False):
    interval: int
    timeout: int
    retries: int
    startPeriod: int


class ECSSystemControl(TypedDict, total=False):
    namespace: str
    value: str


class ECSResourceRequirement(TypedDict):
    value: str
    type: str


class ECSVolume(TypedDict, total=False):
    name: str
    host: ECSHostVolumeProperties
    dockerVolumeConfiguration: ECSDockerVolumeConfiguration


class ECSHostVolumeProperties(TypedDict, total=False):
    sourcePath: str


class ECSDockerVolumeConfiguration(TypedDict, total=False):
    scope: str
    autoprovision: bool
    driver: str
    driverOpts: Dict[str, str]
    labels: Dict[str, str]


class ECSTaskDefinitionPlacementConstraint(TypedDict, total=False):
    type: str
    expression: str


class _ECSProxyConfiguration(TypedDict):
    containerName: str


class ECSProxyConfiguration(_ECSProxyConfiguration, total=False):
    type: str
    properties: List[ECSKeyValuePair]


class ECSDescribeClustersResponse(TypedDict, total=False):
    clusters: List[ECSCluster]
    failures: List[ECSFailure]


class ECSFailure(TypedDict, total=False):
    arn: str
    reason: str


class ECSDescribeContainerInstancesResponse(TypedDict, total=False):
    containerInstances: List[ECSContainerInstance]
    failures: List[ECSFailure]


class ECSDescribeServicesResponse(TypedDict, total=False):
    services: List[ECSService]
    failures: List[ECSFailure]


class ECSDescribeTaskDefinitionResponse(TypedDict, total=False):
    taskDefinition: ECSTaskDefinition
    tags: List[ECSTag]


class ECSDescribeTaskSetsResponse(TypedDict, total=False):
    taskSets: List[ECSTaskSet]
    failures: List[ECSFailure]


class ECSDescribeTasksResponse(TypedDict, total=False):
    tasks: List[ECSTask]
    failures: List[ECSFailure]


class ECSTask(TypedDict, total=False):
    taskArn: str
    clusterArn: str
    taskDefinitionArn: str
    containerInstanceArn: str
    overrides: ECSTaskOverride
    lastStatus: str
    desiredStatus: str
    cpu: str
    memory: str
    containers: List[ECSContainer]
    startedBy: str
    version: int
    stoppedReason: str
    stopCode: str
    connectivity: str
    connectivityAt: datetime.datetime
    pullStartedAt: datetime.datetime
    pullStoppedAt: datetime.datetime
    executionStoppedAt: datetime.datetime
    createdAt: datetime.datetime
    startedAt: datetime.datetime
    stoppingAt: datetime.datetime
    stoppedAt: datetime.datetime
    group: str
    launchType: str
    platformVersion: str
    attachments: List[ECSAttachment]
    healthStatus: str
    tags: List[ECSTag]


class ECSTaskOverride(TypedDict, total=False):
    containerOverrides: List[ECSContainerOverride]
    taskRoleArn: str
    executionRoleArn: str


class ECSContainerOverride(TypedDict, total=False):
    name: str
    command: List[str]
    environment: List[ECSKeyValuePair]
    cpu: int
    memory: int
    memoryReservation: int
    resourceRequirements: List[ECSResourceRequirement]


class ECSContainer(TypedDict, total=False):
    containerArn: str
    taskArn: str
    name: str
    lastStatus: str
    exitCode: int
    reason: str
    networkBindings: List[ECSNetworkBinding]
    networkInterfaces: List[ECSNetworkInterface]
    healthStatus: str
    cpu: str
    memory: str
    memoryReservation: str
    gpuIds: List[str]


class ECSNetworkBinding(TypedDict, total=False):
    bindIP: str
    containerPort: int
    hostPort: int
    protocol: str


class ECSNetworkInterface(TypedDict, total=False):
    attachmentId: str
    privateIpv4Address: str
    ipv6Address: str


class ECSDiscoverPollEndpointResponse(TypedDict, total=False):
    endpoint: str
    telemetryEndpoint: str


class ECSListAccountSettingsResponse(TypedDict, total=False):
    settings: List[ECSSetting]
    nextToken: str


class ECSListAttributesResponse(TypedDict, total=False):
    attributes: List[ECSAttribute]
    nextToken: str


class ECSListClustersResponse(TypedDict, total=False):
    clusterArns: List[str]
    nextToken: str


class ECSListContainerInstancesResponse(TypedDict, total=False):
    containerInstanceArns: List[str]
    nextToken: str


class ECSListServicesResponse(TypedDict, total=False):
    serviceArns: List[str]
    nextToken: str


class ECSListTagsForResourceResponse(TypedDict, total=False):
    tags: List[ECSTag]


class ECSListTaskDefinitionFamiliesResponse(TypedDict, total=False):
    families: List[str]
    nextToken: str


class ECSListTaskDefinitionsResponse(TypedDict, total=False):
    taskDefinitionArns: List[str]
    nextToken: str


class ECSListTasksResponse(TypedDict, total=False):
    taskArns: List[str]
    nextToken: str


class ECSPutAccountSettingResponse(TypedDict, total=False):
    setting: ECSSetting


class ECSPutAccountSettingDefaultResponse(TypedDict, total=False):
    setting: ECSSetting


class ECSPutAttributesResponse(TypedDict, total=False):
    attributes: List[ECSAttribute]


class ECSPlatformDevice(TypedDict):
    id: str
    type: str


class ECSRegisterContainerInstanceResponse(TypedDict, total=False):
    containerInstance: ECSContainerInstance


class ECSRegisterTaskDefinitionResponse(TypedDict, total=False):
    taskDefinition: ECSTaskDefinition
    tags: List[ECSTag]


class ECSRunTaskResponse(TypedDict, total=False):
    tasks: List[ECSTask]
    failures: List[ECSFailure]


class ECSStartTaskResponse(TypedDict, total=False):
    tasks: List[ECSTask]
    failures: List[ECSFailure]


class ECSStopTaskResponse(TypedDict, total=False):
    task: ECSTask


class ECSSubmitContainerStateChangeResponse(TypedDict, total=False):
    acknowledgment: str


class ECSContainerStateChange(TypedDict, total=False):
    containerName: str
    exitCode: int
    networkBindings: List[ECSNetworkBinding]
    reason: str
    status: str


class ECSAttachmentStateChange(TypedDict):
    attachmentArn: str
    status: str


class ECSSubmitTaskStateChangeResponse(TypedDict, total=False):
    acknowledgment: str


class ECSTagResourceResponse(TypedDict, total=False):
    pass


class ECSUntagResourceResponse(TypedDict, total=False):
    pass


class ECSUpdateContainerAgentResponse(TypedDict, total=False):
    containerInstance: ECSContainerInstance


class ECSUpdateContainerInstancesStateResponse(TypedDict, total=False):
    containerInstances: List[ECSContainerInstance]
    failures: List[ECSFailure]


class ECSUpdateServiceResponse(TypedDict, total=False):
    service: ECSService


class ECSUpdateServicePrimaryTaskSetResponse(TypedDict, total=False):
    taskSet: ECSTaskSet


class ECSUpdateTaskSetResponse(TypedDict, total=False):
    taskSet: ECSTaskSet


class EFS(BaseClient):
    def create_file_system(self, *,
        CreationToken: str,
        PerformanceMode: str = ...,
        Encrypted: bool = ...,
        KmsKeyId: str = ...,
        ThroughputMode: str = ...,
        ProvisionedThroughputInMibps: float = ...,
        Tags: List[EFSTag] = ...
    ) -> EFSFileSystemDescription: ...

    def create_mount_target(self, *,
        FileSystemId: str,
        SubnetId: str,
        IpAddress: str = ...,
        SecurityGroups: List[str] = ...
    ) -> EFSMountTargetDescription: ...

    def create_tags(self, *,
        FileSystemId: str,
        Tags: List[EFSTag]
    ): ...

    def delete_file_system(self, *,
        FileSystemId: str
    ): ...

    def delete_mount_target(self, *,
        MountTargetId: str
    ): ...

    def delete_tags(self, *,
        FileSystemId: str,
        TagKeys: List[str]
    ): ...

    def describe_file_systems(self, *,
        MaxItems: int = ...,
        Marker: str = ...,
        CreationToken: str = ...,
        FileSystemId: str = ...
    ) -> EFSDescribeFileSystemsResponse: ...

    def describe_lifecycle_configuration(self, *,
        FileSystemId: str
    ) -> EFSLifecycleConfigurationDescription: ...

    def describe_mount_target_security_groups(self, *,
        MountTargetId: str
    ) -> EFSDescribeMountTargetSecurityGroupsResponse: ...

    def describe_mount_targets(self, *,
        MaxItems: int = ...,
        Marker: str = ...,
        FileSystemId: str = ...,
        MountTargetId: str = ...
    ) -> EFSDescribeMountTargetsResponse: ...

    def describe_tags(self, *,
        FileSystemId: str,
        MaxItems: int = ...,
        Marker: str = ...
    ) -> EFSDescribeTagsResponse: ...

    def modify_mount_target_security_groups(self, *,
        MountTargetId: str,
        SecurityGroups: List[str] = ...
    ): ...

    def put_lifecycle_configuration(self, *,
        FileSystemId: str,
        LifecyclePolicies: List[EFSLifecyclePolicy]
    ) -> EFSLifecycleConfigurationDescription: ...

    def update_file_system(self, *,
        FileSystemId: str,
        ThroughputMode: str = ...,
        ProvisionedThroughputInMibps: float = ...
    ) -> EFSFileSystemDescription: ...


class EFSTag(TypedDict):
    Key: str
    Value: str


class _EFSFileSystemDescription(TypedDict):
    OwnerId: str
    CreationToken: str
    FileSystemId: str
    CreationTime: datetime.datetime
    LifeCycleState: str
    NumberOfMountTargets: int
    SizeInBytes: EFSFileSystemSize
    PerformanceMode: str
    Tags: List[EFSTag]


class EFSFileSystemDescription(_EFSFileSystemDescription, total=False):
    Name: str
    Encrypted: bool
    KmsKeyId: str
    ThroughputMode: str
    ProvisionedThroughputInMibps: float


class _EFSFileSystemSize(TypedDict):
    Value: int


class EFSFileSystemSize(_EFSFileSystemSize, total=False):
    Timestamp: datetime.datetime
    ValueInIA: int
    ValueInStandard: int


class _EFSMountTargetDescription(TypedDict):
    MountTargetId: str
    FileSystemId: str
    SubnetId: str
    LifeCycleState: str


class EFSMountTargetDescription(_EFSMountTargetDescription, total=False):
    OwnerId: str
    IpAddress: str
    NetworkInterfaceId: str


class EFSDescribeFileSystemsResponse(TypedDict, total=False):
    Marker: str
    FileSystems: List[EFSFileSystemDescription]
    NextMarker: str


class EFSLifecycleConfigurationDescription(TypedDict, total=False):
    LifecyclePolicies: List[EFSLifecyclePolicy]


class EFSLifecyclePolicy(TypedDict, total=False):
    TransitionToIA: str


class EFSDescribeMountTargetSecurityGroupsResponse(TypedDict):
    SecurityGroups: List[str]


class EFSDescribeMountTargetsResponse(TypedDict, total=False):
    Marker: str
    MountTargets: List[EFSMountTargetDescription]
    NextMarker: str


class _EFSDescribeTagsResponse(TypedDict):
    Tags: List[EFSTag]


class EFSDescribeTagsResponse(_EFSDescribeTagsResponse, total=False):
    Marker: str
    NextMarker: str


class EKS(BaseClient):
    def create_cluster(self, *,
        name: str,
        roleArn: str,
        resourcesVpcConfig: EKSVpcConfigRequest,
        version: str = ...,
        logging: EKSLogging = ...,
        clientRequestToken: str = ...
    ) -> EKSCreateClusterResponse: ...

    def delete_cluster(self, *,
        name: str
    ) -> EKSDeleteClusterResponse: ...

    def describe_cluster(self, *,
        name: str
    ) -> EKSDescribeClusterResponse: ...

    def describe_update(self, *,
        name: str,
        updateId: str
    ) -> EKSDescribeUpdateResponse: ...

    def list_clusters(self, *,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> EKSListClustersResponse: ...

    def list_updates(self, *,
        name: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> EKSListUpdatesResponse: ...

    def update_cluster_config(self, *,
        name: str,
        resourcesVpcConfig: EKSVpcConfigRequest = ...,
        logging: EKSLogging = ...,
        clientRequestToken: str = ...
    ) -> EKSUpdateClusterConfigResponse: ...

    def update_cluster_version(self, *,
        name: str,
        version: str,
        clientRequestToken: str = ...
    ) -> EKSUpdateClusterVersionResponse: ...


class EKSVpcConfigRequest(TypedDict, total=False):
    subnetIds: List[str]
    securityGroupIds: List[str]
    endpointPublicAccess: bool
    endpointPrivateAccess: bool


class EKSLogging(TypedDict, total=False):
    clusterLogging: List[EKSLogSetup]


class EKSLogSetup(TypedDict, total=False):
    types: List[str]
    enabled: bool


class EKSCreateClusterResponse(TypedDict, total=False):
    cluster: EKSCluster


class EKSCluster(TypedDict, total=False):
    name: str
    arn: str
    createdAt: datetime.datetime
    version: str
    endpoint: str
    roleArn: str
    resourcesVpcConfig: EKSVpcConfigResponse
    logging: EKSLogging
    status: str
    certificateAuthority: EKSCertificate
    clientRequestToken: str
    platformVersion: str


class EKSVpcConfigResponse(TypedDict, total=False):
    subnetIds: List[str]
    securityGroupIds: List[str]
    vpcId: str
    endpointPublicAccess: bool
    endpointPrivateAccess: bool


class EKSCertificate(TypedDict, total=False):
    data: str


class EKSDeleteClusterResponse(TypedDict, total=False):
    cluster: EKSCluster


class EKSDescribeClusterResponse(TypedDict, total=False):
    cluster: EKSCluster


class EKSDescribeUpdateResponse(TypedDict, total=False):
    update: EKSUpdate


class EKSUpdate(TypedDict, total=False):
    id: str
    status: str
    type: str
    params: List[EKSUpdateParam]
    createdAt: datetime.datetime
    errors: List[EKSErrorDetail]


class EKSUpdateParam(TypedDict, total=False):
    type: str
    value: str


class EKSErrorDetail(TypedDict, total=False):
    errorCode: str
    errorMessage: str
    resourceIds: List[str]


class EKSListClustersResponse(TypedDict, total=False):
    clusters: List[str]
    nextToken: str


class EKSListUpdatesResponse(TypedDict, total=False):
    updateIds: List[str]
    nextToken: str


class EKSUpdateClusterConfigResponse(TypedDict, total=False):
    update: EKSUpdate


class EKSUpdateClusterVersionResponse(TypedDict, total=False):
    update: EKSUpdate


class ElastiCache(BaseClient):
    def add_tags_to_resource(self, *,
        ResourceName: str,
        Tags: List[ElastiCacheTag]
    ) -> ElastiCacheTagListMessage: ...

    def authorize_cache_security_group_ingress(self, *,
        CacheSecurityGroupName: str,
        EC2SecurityGroupName: str,
        EC2SecurityGroupOwnerId: str
    ) -> ElastiCacheAuthorizeCacheSecurityGroupIngressResult: ...

    def copy_snapshot(self, *,
        SourceSnapshotName: str,
        TargetSnapshotName: str,
        TargetBucket: str = ...
    ) -> ElastiCacheCopySnapshotResult: ...

    def create_cache_cluster(self, *,
        CacheClusterId: str,
        ReplicationGroupId: str = ...,
        AZMode: str = ...,
        PreferredAvailabilityZone: str = ...,
        PreferredAvailabilityZones: List[str] = ...,
        NumCacheNodes: int = ...,
        CacheNodeType: str = ...,
        Engine: str = ...,
        EngineVersion: str = ...,
        CacheParameterGroupName: str = ...,
        CacheSubnetGroupName: str = ...,
        CacheSecurityGroupNames: List[str] = ...,
        SecurityGroupIds: List[str] = ...,
        Tags: List[ElastiCacheTag] = ...,
        SnapshotArns: List[str] = ...,
        SnapshotName: str = ...,
        PreferredMaintenanceWindow: str = ...,
        Port: int = ...,
        NotificationTopicArn: str = ...,
        AutoMinorVersionUpgrade: bool = ...,
        SnapshotRetentionLimit: int = ...,
        SnapshotWindow: str = ...,
        AuthToken: str = ...
    ) -> ElastiCacheCreateCacheClusterResult: ...

    def create_cache_parameter_group(self, *,
        CacheParameterGroupName: str,
        CacheParameterGroupFamily: str,
        Description: str
    ) -> ElastiCacheCreateCacheParameterGroupResult: ...

    def create_cache_security_group(self, *,
        CacheSecurityGroupName: str,
        Description: str
    ) -> ElastiCacheCreateCacheSecurityGroupResult: ...

    def create_cache_subnet_group(self, *,
        CacheSubnetGroupName: str,
        CacheSubnetGroupDescription: str,
        SubnetIds: List[str]
    ) -> ElastiCacheCreateCacheSubnetGroupResult: ...

    def create_replication_group(self, *,
        ReplicationGroupId: str,
        ReplicationGroupDescription: str,
        PrimaryClusterId: str = ...,
        AutomaticFailoverEnabled: bool = ...,
        NumCacheClusters: int = ...,
        PreferredCacheClusterAZs: List[str] = ...,
        NumNodeGroups: int = ...,
        ReplicasPerNodeGroup: int = ...,
        NodeGroupConfiguration: List[ElastiCacheNodeGroupConfiguration] = ...,
        CacheNodeType: str = ...,
        Engine: str = ...,
        EngineVersion: str = ...,
        CacheParameterGroupName: str = ...,
        CacheSubnetGroupName: str = ...,
        CacheSecurityGroupNames: List[str] = ...,
        SecurityGroupIds: List[str] = ...,
        Tags: List[ElastiCacheTag] = ...,
        SnapshotArns: List[str] = ...,
        SnapshotName: str = ...,
        PreferredMaintenanceWindow: str = ...,
        Port: int = ...,
        NotificationTopicArn: str = ...,
        AutoMinorVersionUpgrade: bool = ...,
        SnapshotRetentionLimit: int = ...,
        SnapshotWindow: str = ...,
        AuthToken: str = ...,
        TransitEncryptionEnabled: bool = ...,
        AtRestEncryptionEnabled: bool = ...
    ) -> ElastiCacheCreateReplicationGroupResult: ...

    def create_snapshot(self, *,
        SnapshotName: str,
        ReplicationGroupId: str = ...,
        CacheClusterId: str = ...
    ) -> ElastiCacheCreateSnapshotResult: ...

    def decrease_replica_count(self, *,
        ReplicationGroupId: str,
        ApplyImmediately: bool,
        NewReplicaCount: int = ...,
        ReplicaConfiguration: List[ElastiCacheConfigureShard] = ...,
        ReplicasToRemove: List[str] = ...
    ) -> ElastiCacheDecreaseReplicaCountResult: ...

    def delete_cache_cluster(self, *,
        CacheClusterId: str,
        FinalSnapshotIdentifier: str = ...
    ) -> ElastiCacheDeleteCacheClusterResult: ...

    def delete_cache_parameter_group(self, *,
        CacheParameterGroupName: str
    ): ...

    def delete_cache_security_group(self, *,
        CacheSecurityGroupName: str
    ): ...

    def delete_cache_subnet_group(self, *,
        CacheSubnetGroupName: str
    ): ...

    def delete_replication_group(self, *,
        ReplicationGroupId: str,
        RetainPrimaryCluster: bool = ...,
        FinalSnapshotIdentifier: str = ...
    ) -> ElastiCacheDeleteReplicationGroupResult: ...

    def delete_snapshot(self, *,
        SnapshotName: str
    ) -> ElastiCacheDeleteSnapshotResult: ...

    def describe_cache_clusters(self, *,
        CacheClusterId: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        ShowCacheNodeInfo: bool = ...,
        ShowCacheClustersNotInReplicationGroups: bool = ...
    ) -> ElastiCacheCacheClusterMessage: ...

    def describe_cache_engine_versions(self, *,
        Engine: str = ...,
        EngineVersion: str = ...,
        CacheParameterGroupFamily: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        DefaultOnly: bool = ...
    ) -> ElastiCacheCacheEngineVersionMessage: ...

    def describe_cache_parameter_groups(self, *,
        CacheParameterGroupName: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> ElastiCacheCacheParameterGroupsMessage: ...

    def describe_cache_parameters(self, *,
        CacheParameterGroupName: str,
        Source: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> ElastiCacheCacheParameterGroupDetails: ...

    def describe_cache_security_groups(self, *,
        CacheSecurityGroupName: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> ElastiCacheCacheSecurityGroupMessage: ...

    def describe_cache_subnet_groups(self, *,
        CacheSubnetGroupName: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> ElastiCacheCacheSubnetGroupMessage: ...

    def describe_engine_default_parameters(self, *,
        CacheParameterGroupFamily: str,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> ElastiCacheDescribeEngineDefaultParametersResult: ...

    def describe_events(self, *,
        SourceIdentifier: str = ...,
        SourceType: str = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        Duration: int = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> ElastiCacheEventsMessage: ...

    def describe_replication_groups(self, *,
        ReplicationGroupId: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> ElastiCacheReplicationGroupMessage: ...

    def describe_reserved_cache_nodes(self, *,
        ReservedCacheNodeId: str = ...,
        ReservedCacheNodesOfferingId: str = ...,
        CacheNodeType: str = ...,
        Duration: str = ...,
        ProductDescription: str = ...,
        OfferingType: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> ElastiCacheReservedCacheNodeMessage: ...

    def describe_reserved_cache_nodes_offerings(self, *,
        ReservedCacheNodesOfferingId: str = ...,
        CacheNodeType: str = ...,
        Duration: str = ...,
        ProductDescription: str = ...,
        OfferingType: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> ElastiCacheReservedCacheNodesOfferingMessage: ...

    def describe_snapshots(self, *,
        ReplicationGroupId: str = ...,
        CacheClusterId: str = ...,
        SnapshotName: str = ...,
        SnapshotSource: str = ...,
        Marker: str = ...,
        MaxRecords: int = ...,
        ShowNodeGroupConfig: bool = ...
    ) -> ElastiCacheDescribeSnapshotsListMessage: ...

    def increase_replica_count(self, *,
        ReplicationGroupId: str,
        ApplyImmediately: bool,
        NewReplicaCount: int = ...,
        ReplicaConfiguration: List[ElastiCacheConfigureShard] = ...
    ) -> ElastiCacheIncreaseReplicaCountResult: ...

    def list_allowed_node_type_modifications(self, *,
        CacheClusterId: str = ...,
        ReplicationGroupId: str = ...
    ) -> ElastiCacheAllowedNodeTypeModificationsMessage: ...

    def list_tags_for_resource(self, *,
        ResourceName: str
    ) -> ElastiCacheTagListMessage: ...

    def modify_cache_cluster(self, *,
        CacheClusterId: str,
        NumCacheNodes: int = ...,
        CacheNodeIdsToRemove: List[str] = ...,
        AZMode: str = ...,
        NewAvailabilityZones: List[str] = ...,
        CacheSecurityGroupNames: List[str] = ...,
        SecurityGroupIds: List[str] = ...,
        PreferredMaintenanceWindow: str = ...,
        NotificationTopicArn: str = ...,
        CacheParameterGroupName: str = ...,
        NotificationTopicStatus: str = ...,
        ApplyImmediately: bool = ...,
        EngineVersion: str = ...,
        AutoMinorVersionUpgrade: bool = ...,
        SnapshotRetentionLimit: int = ...,
        SnapshotWindow: str = ...,
        CacheNodeType: str = ...
    ) -> ElastiCacheModifyCacheClusterResult: ...

    def modify_cache_parameter_group(self, *,
        CacheParameterGroupName: str,
        ParameterNameValues: List[ElastiCacheParameterNameValue]
    ) -> ElastiCacheCacheParameterGroupNameMessage: ...

    def modify_cache_subnet_group(self, *,
        CacheSubnetGroupName: str,
        CacheSubnetGroupDescription: str = ...,
        SubnetIds: List[str] = ...
    ) -> ElastiCacheModifyCacheSubnetGroupResult: ...

    def modify_replication_group(self, *,
        ReplicationGroupId: str,
        ReplicationGroupDescription: str = ...,
        PrimaryClusterId: str = ...,
        SnapshottingClusterId: str = ...,
        AutomaticFailoverEnabled: bool = ...,
        CacheSecurityGroupNames: List[str] = ...,
        SecurityGroupIds: List[str] = ...,
        PreferredMaintenanceWindow: str = ...,
        NotificationTopicArn: str = ...,
        CacheParameterGroupName: str = ...,
        NotificationTopicStatus: str = ...,
        ApplyImmediately: bool = ...,
        EngineVersion: str = ...,
        AutoMinorVersionUpgrade: bool = ...,
        SnapshotRetentionLimit: int = ...,
        SnapshotWindow: str = ...,
        CacheNodeType: str = ...,
        NodeGroupId: str = ...
    ) -> ElastiCacheModifyReplicationGroupResult: ...

    def modify_replication_group_shard_configuration(self, *,
        ReplicationGroupId: str,
        NodeGroupCount: int,
        ApplyImmediately: bool,
        ReshardingConfiguration: List[ElastiCacheReshardingConfiguration] = ...,
        NodeGroupsToRemove: List[str] = ...,
        NodeGroupsToRetain: List[str] = ...
    ) -> ElastiCacheModifyReplicationGroupShardConfigurationResult: ...

    def purchase_reserved_cache_nodes_offering(self, *,
        ReservedCacheNodesOfferingId: str,
        ReservedCacheNodeId: str = ...,
        CacheNodeCount: int = ...
    ) -> ElastiCachePurchaseReservedCacheNodesOfferingResult: ...

    def reboot_cache_cluster(self, *,
        CacheClusterId: str,
        CacheNodeIdsToReboot: List[str]
    ) -> ElastiCacheRebootCacheClusterResult: ...

    def remove_tags_from_resource(self, *,
        ResourceName: str,
        TagKeys: List[str]
    ) -> ElastiCacheTagListMessage: ...

    def reset_cache_parameter_group(self, *,
        CacheParameterGroupName: str,
        ResetAllParameters: bool = ...,
        ParameterNameValues: List[ElastiCacheParameterNameValue] = ...
    ) -> ElastiCacheCacheParameterGroupNameMessage: ...

    def revoke_cache_security_group_ingress(self, *,
        CacheSecurityGroupName: str,
        EC2SecurityGroupName: str,
        EC2SecurityGroupOwnerId: str
    ) -> ElastiCacheRevokeCacheSecurityGroupIngressResult: ...

    def test_failover(self, *,
        ReplicationGroupId: str,
        NodeGroupId: str
    ) -> ElastiCacheTestFailoverResult: ...


class ElastiCacheTag(TypedDict, total=False):
    Key: str
    Value: str


class ElastiCacheTagListMessage(TypedDict, total=False):
    TagList: List[ElastiCacheTag]


class ElastiCacheAuthorizeCacheSecurityGroupIngressResult(TypedDict, total=False):
    CacheSecurityGroup: ElastiCacheCacheSecurityGroup


class ElastiCacheCacheSecurityGroup(TypedDict, total=False):
    OwnerId: str
    CacheSecurityGroupName: str
    Description: str
    EC2SecurityGroups: List[ElastiCacheEC2SecurityGroup]


class ElastiCacheEC2SecurityGroup(TypedDict, total=False):
    Status: str
    EC2SecurityGroupName: str
    EC2SecurityGroupOwnerId: str


class ElastiCacheCopySnapshotResult(TypedDict, total=False):
    Snapshot: ElastiCacheSnapshot


class ElastiCacheSnapshot(TypedDict, total=False):
    SnapshotName: str
    ReplicationGroupId: str
    ReplicationGroupDescription: str
    CacheClusterId: str
    SnapshotStatus: str
    SnapshotSource: str
    CacheNodeType: str
    Engine: str
    EngineVersion: str
    NumCacheNodes: int
    PreferredAvailabilityZone: str
    CacheClusterCreateTime: datetime.datetime
    PreferredMaintenanceWindow: str
    TopicArn: str
    Port: int
    CacheParameterGroupName: str
    CacheSubnetGroupName: str
    VpcId: str
    AutoMinorVersionUpgrade: bool
    SnapshotRetentionLimit: int
    SnapshotWindow: str
    NumNodeGroups: int
    AutomaticFailover: str
    NodeSnapshots: List[ElastiCacheNodeSnapshot]


class ElastiCacheNodeSnapshot(TypedDict, total=False):
    CacheClusterId: str
    NodeGroupId: str
    CacheNodeId: str
    NodeGroupConfiguration: ElastiCacheNodeGroupConfiguration
    CacheSize: str
    CacheNodeCreateTime: datetime.datetime
    SnapshotCreateTime: datetime.datetime


class ElastiCacheNodeGroupConfiguration(TypedDict, total=False):
    NodeGroupId: str
    Slots: str
    ReplicaCount: int
    PrimaryAvailabilityZone: str
    ReplicaAvailabilityZones: List[str]


class ElastiCacheCreateCacheClusterResult(TypedDict, total=False):
    CacheCluster: ElastiCacheCacheCluster


class ElastiCacheCacheCluster(TypedDict, total=False):
    CacheClusterId: str
    ConfigurationEndpoint: ElastiCacheEndpoint
    ClientDownloadLandingPage: str
    CacheNodeType: str
    Engine: str
    EngineVersion: str
    CacheClusterStatus: str
    NumCacheNodes: int
    PreferredAvailabilityZone: str
    CacheClusterCreateTime: datetime.datetime
    PreferredMaintenanceWindow: str
    PendingModifiedValues: ElastiCachePendingModifiedValues
    NotificationConfiguration: ElastiCacheNotificationConfiguration
    CacheSecurityGroups: List[ElastiCacheCacheSecurityGroupMembership]
    CacheParameterGroup: ElastiCacheCacheParameterGroupStatus
    CacheSubnetGroupName: str
    CacheNodes: List[ElastiCacheCacheNode]
    AutoMinorVersionUpgrade: bool
    SecurityGroups: List[ElastiCacheSecurityGroupMembership]
    ReplicationGroupId: str
    SnapshotRetentionLimit: int
    SnapshotWindow: str
    AuthTokenEnabled: bool
    TransitEncryptionEnabled: bool
    AtRestEncryptionEnabled: bool


class ElastiCacheEndpoint(TypedDict, total=False):
    Address: str
    Port: int


class ElastiCachePendingModifiedValues(TypedDict, total=False):
    NumCacheNodes: int
    CacheNodeIdsToRemove: List[str]
    EngineVersion: str
    CacheNodeType: str


class ElastiCacheNotificationConfiguration(TypedDict, total=False):
    TopicArn: str
    TopicStatus: str


class ElastiCacheCacheSecurityGroupMembership(TypedDict, total=False):
    CacheSecurityGroupName: str
    Status: str


class ElastiCacheCacheParameterGroupStatus(TypedDict, total=False):
    CacheParameterGroupName: str
    ParameterApplyStatus: str
    CacheNodeIdsToReboot: List[str]


class ElastiCacheCacheNode(TypedDict, total=False):
    CacheNodeId: str
    CacheNodeStatus: str
    CacheNodeCreateTime: datetime.datetime
    Endpoint: ElastiCacheEndpoint
    ParameterGroupStatus: str
    SourceCacheNodeId: str
    CustomerAvailabilityZone: str


class ElastiCacheSecurityGroupMembership(TypedDict, total=False):
    SecurityGroupId: str
    Status: str


class ElastiCacheCreateCacheParameterGroupResult(TypedDict, total=False):
    CacheParameterGroup: ElastiCacheCacheParameterGroup


class ElastiCacheCacheParameterGroup(TypedDict, total=False):
    CacheParameterGroupName: str
    CacheParameterGroupFamily: str
    Description: str


class ElastiCacheCreateCacheSecurityGroupResult(TypedDict, total=False):
    CacheSecurityGroup: ElastiCacheCacheSecurityGroup


class ElastiCacheCreateCacheSubnetGroupResult(TypedDict, total=False):
    CacheSubnetGroup: ElastiCacheCacheSubnetGroup


class ElastiCacheCacheSubnetGroup(TypedDict, total=False):
    CacheSubnetGroupName: str
    CacheSubnetGroupDescription: str
    VpcId: str
    Subnets: List[ElastiCacheSubnet]


class ElastiCacheSubnet(TypedDict, total=False):
    SubnetIdentifier: str
    SubnetAvailabilityZone: ElastiCacheAvailabilityZone


class ElastiCacheAvailabilityZone(TypedDict, total=False):
    Name: str


class ElastiCacheCreateReplicationGroupResult(TypedDict, total=False):
    ReplicationGroup: ElastiCacheReplicationGroup


class ElastiCacheReplicationGroup(TypedDict, total=False):
    ReplicationGroupId: str
    Description: str
    Status: str
    PendingModifiedValues: ElastiCacheReplicationGroupPendingModifiedValues
    MemberClusters: List[str]
    NodeGroups: List[ElastiCacheNodeGroup]
    SnapshottingClusterId: str
    AutomaticFailover: str
    ConfigurationEndpoint: ElastiCacheEndpoint
    SnapshotRetentionLimit: int
    SnapshotWindow: str
    ClusterEnabled: bool
    CacheNodeType: str
    AuthTokenEnabled: bool
    TransitEncryptionEnabled: bool
    AtRestEncryptionEnabled: bool


class ElastiCacheReplicationGroupPendingModifiedValues(TypedDict, total=False):
    PrimaryClusterId: str
    AutomaticFailoverStatus: str
    Resharding: ElastiCacheReshardingStatus


class ElastiCacheReshardingStatus(TypedDict, total=False):
    SlotMigration: ElastiCacheSlotMigration


class ElastiCacheSlotMigration(TypedDict, total=False):
    ProgressPercentage: float


class ElastiCacheNodeGroup(TypedDict, total=False):
    NodeGroupId: str
    Status: str
    PrimaryEndpoint: ElastiCacheEndpoint
    Slots: str
    NodeGroupMembers: List[ElastiCacheNodeGroupMember]


class ElastiCacheNodeGroupMember(TypedDict, total=False):
    CacheClusterId: str
    CacheNodeId: str
    ReadEndpoint: ElastiCacheEndpoint
    PreferredAvailabilityZone: str
    CurrentRole: str


class ElastiCacheCreateSnapshotResult(TypedDict, total=False):
    Snapshot: ElastiCacheSnapshot


class _ElastiCacheConfigureShard(TypedDict):
    NodeGroupId: str
    NewReplicaCount: int


class ElastiCacheConfigureShard(_ElastiCacheConfigureShard, total=False):
    PreferredAvailabilityZones: List[str]


class ElastiCacheDecreaseReplicaCountResult(TypedDict, total=False):
    ReplicationGroup: ElastiCacheReplicationGroup


class ElastiCacheDeleteCacheClusterResult(TypedDict, total=False):
    CacheCluster: ElastiCacheCacheCluster


class ElastiCacheDeleteReplicationGroupResult(TypedDict, total=False):
    ReplicationGroup: ElastiCacheReplicationGroup


class ElastiCacheDeleteSnapshotResult(TypedDict, total=False):
    Snapshot: ElastiCacheSnapshot


class ElastiCacheCacheClusterMessage(TypedDict, total=False):
    Marker: str
    CacheClusters: List[ElastiCacheCacheCluster]


class ElastiCacheCacheEngineVersionMessage(TypedDict, total=False):
    Marker: str
    CacheEngineVersions: List[ElastiCacheCacheEngineVersion]


class ElastiCacheCacheEngineVersion(TypedDict, total=False):
    Engine: str
    EngineVersion: str
    CacheParameterGroupFamily: str
    CacheEngineDescription: str
    CacheEngineVersionDescription: str


class ElastiCacheCacheParameterGroupsMessage(TypedDict, total=False):
    Marker: str
    CacheParameterGroups: List[ElastiCacheCacheParameterGroup]


class ElastiCacheCacheParameterGroupDetails(TypedDict, total=False):
    Marker: str
    Parameters: List[ElastiCacheParameter]
    CacheNodeTypeSpecificParameters: List[ElastiCacheCacheNodeTypeSpecificParameter]


class ElastiCacheParameter(TypedDict, total=False):
    ParameterName: str
    ParameterValue: str
    Description: str
    Source: str
    DataType: str
    AllowedValues: str
    IsModifiable: bool
    MinimumEngineVersion: str
    ChangeType: str


class ElastiCacheCacheNodeTypeSpecificParameter(TypedDict, total=False):
    ParameterName: str
    Description: str
    Source: str
    DataType: str
    AllowedValues: str
    IsModifiable: bool
    MinimumEngineVersion: str
    CacheNodeTypeSpecificValues: List[ElastiCacheCacheNodeTypeSpecificValue]
    ChangeType: str


class ElastiCacheCacheNodeTypeSpecificValue(TypedDict, total=False):
    CacheNodeType: str
    Value: str


class ElastiCacheCacheSecurityGroupMessage(TypedDict, total=False):
    Marker: str
    CacheSecurityGroups: List[ElastiCacheCacheSecurityGroup]


class ElastiCacheCacheSubnetGroupMessage(TypedDict, total=False):
    Marker: str
    CacheSubnetGroups: List[ElastiCacheCacheSubnetGroup]


class ElastiCacheDescribeEngineDefaultParametersResult(TypedDict, total=False):
    EngineDefaults: ElastiCacheEngineDefaults


class ElastiCacheEngineDefaults(TypedDict, total=False):
    CacheParameterGroupFamily: str
    Marker: str
    Parameters: List[ElastiCacheParameter]
    CacheNodeTypeSpecificParameters: List[ElastiCacheCacheNodeTypeSpecificParameter]


class ElastiCacheEventsMessage(TypedDict, total=False):
    Marker: str
    Events: List[ElastiCacheEvent]


class ElastiCacheEvent(TypedDict, total=False):
    SourceIdentifier: str
    SourceType: str
    Message: str
    Date: datetime.datetime


class ElastiCacheReplicationGroupMessage(TypedDict, total=False):
    Marker: str
    ReplicationGroups: List[ElastiCacheReplicationGroup]


class ElastiCacheReservedCacheNodeMessage(TypedDict, total=False):
    Marker: str
    ReservedCacheNodes: List[ElastiCacheReservedCacheNode]


class ElastiCacheReservedCacheNode(TypedDict, total=False):
    ReservedCacheNodeId: str
    ReservedCacheNodesOfferingId: str
    CacheNodeType: str
    StartTime: datetime.datetime
    Duration: int
    FixedPrice: float
    UsagePrice: float
    CacheNodeCount: int
    ProductDescription: str
    OfferingType: str
    State: str
    RecurringCharges: List[ElastiCacheRecurringCharge]
    ReservationARN: str


class ElastiCacheRecurringCharge(TypedDict, total=False):
    RecurringChargeAmount: float
    RecurringChargeFrequency: str


class ElastiCacheReservedCacheNodesOfferingMessage(TypedDict, total=False):
    Marker: str
    ReservedCacheNodesOfferings: List[ElastiCacheReservedCacheNodesOffering]


class ElastiCacheReservedCacheNodesOffering(TypedDict, total=False):
    ReservedCacheNodesOfferingId: str
    CacheNodeType: str
    Duration: int
    FixedPrice: float
    UsagePrice: float
    ProductDescription: str
    OfferingType: str
    RecurringCharges: List[ElastiCacheRecurringCharge]


class ElastiCacheDescribeSnapshotsListMessage(TypedDict, total=False):
    Marker: str
    Snapshots: List[ElastiCacheSnapshot]


class ElastiCacheIncreaseReplicaCountResult(TypedDict, total=False):
    ReplicationGroup: ElastiCacheReplicationGroup


class ElastiCacheAllowedNodeTypeModificationsMessage(TypedDict, total=False):
    ScaleUpModifications: List[str]


class ElastiCacheModifyCacheClusterResult(TypedDict, total=False):
    CacheCluster: ElastiCacheCacheCluster


class ElastiCacheParameterNameValue(TypedDict, total=False):
    ParameterName: str
    ParameterValue: str


class ElastiCacheCacheParameterGroupNameMessage(TypedDict, total=False):
    CacheParameterGroupName: str


class ElastiCacheModifyCacheSubnetGroupResult(TypedDict, total=False):
    CacheSubnetGroup: ElastiCacheCacheSubnetGroup


class ElastiCacheModifyReplicationGroupResult(TypedDict, total=False):
    ReplicationGroup: ElastiCacheReplicationGroup


class ElastiCacheReshardingConfiguration(TypedDict, total=False):
    NodeGroupId: str
    PreferredAvailabilityZones: List[str]


class ElastiCacheModifyReplicationGroupShardConfigurationResult(TypedDict, total=False):
    ReplicationGroup: ElastiCacheReplicationGroup


class ElastiCachePurchaseReservedCacheNodesOfferingResult(TypedDict, total=False):
    ReservedCacheNode: ElastiCacheReservedCacheNode


class ElastiCacheRebootCacheClusterResult(TypedDict, total=False):
    CacheCluster: ElastiCacheCacheCluster


class ElastiCacheRevokeCacheSecurityGroupIngressResult(TypedDict, total=False):
    CacheSecurityGroup: ElastiCacheCacheSecurityGroup


class ElastiCacheTestFailoverResult(TypedDict, total=False):
    ReplicationGroup: ElastiCacheReplicationGroup


class ElasticBeanstalk(BaseClient):
    def abort_environment_update(self, *,
        EnvironmentId: str = ...,
        EnvironmentName: str = ...
    ): ...

    def apply_environment_managed_action(self, *,
        ActionId: str,
        EnvironmentName: str = ...,
        EnvironmentId: str = ...
    ) -> ElasticBeanstalkApplyEnvironmentManagedActionResult: ...

    def check_dns_availability(self, *,
        CNAMEPrefix: str
    ) -> ElasticBeanstalkCheckDNSAvailabilityResultMessage: ...

    def compose_environments(self, *,
        ApplicationName: str = ...,
        GroupName: str = ...,
        VersionLabels: List[str] = ...
    ) -> ElasticBeanstalkEnvironmentDescriptionsMessage: ...

    def create_application(self, *,
        ApplicationName: str,
        Description: str = ...,
        ResourceLifecycleConfig: ElasticBeanstalkApplicationResourceLifecycleConfig = ...,
        Tags: List[ElasticBeanstalkTag] = ...
    ) -> ElasticBeanstalkApplicationDescriptionMessage: ...

    def create_application_version(self, *,
        ApplicationName: str,
        VersionLabel: str,
        Description: str = ...,
        SourceBuildInformation: ElasticBeanstalkSourceBuildInformation = ...,
        SourceBundle: ElasticBeanstalkS3Location = ...,
        BuildConfiguration: ElasticBeanstalkBuildConfiguration = ...,
        AutoCreateApplication: bool = ...,
        Process: bool = ...,
        Tags: List[ElasticBeanstalkTag] = ...
    ) -> ElasticBeanstalkApplicationVersionDescriptionMessage: ...

    def create_configuration_template(self, *,
        ApplicationName: str,
        TemplateName: str,
        SolutionStackName: str = ...,
        PlatformArn: str = ...,
        SourceConfiguration: ElasticBeanstalkSourceConfiguration = ...,
        EnvironmentId: str = ...,
        Description: str = ...,
        OptionSettings: List[ElasticBeanstalkConfigurationOptionSetting] = ...,
        Tags: List[ElasticBeanstalkTag] = ...
    ) -> ElasticBeanstalkConfigurationSettingsDescription: ...

    def create_environment(self, *,
        ApplicationName: str,
        EnvironmentName: str = ...,
        GroupName: str = ...,
        Description: str = ...,
        CNAMEPrefix: str = ...,
        Tier: ElasticBeanstalkEnvironmentTier = ...,
        Tags: List[ElasticBeanstalkTag] = ...,
        VersionLabel: str = ...,
        TemplateName: str = ...,
        SolutionStackName: str = ...,
        PlatformArn: str = ...,
        OptionSettings: List[ElasticBeanstalkConfigurationOptionSetting] = ...,
        OptionsToRemove: List[ElasticBeanstalkOptionSpecification] = ...
    ) -> ElasticBeanstalkEnvironmentDescription: ...

    def create_platform_version(self, *,
        PlatformName: str,
        PlatformVersion: str,
        PlatformDefinitionBundle: ElasticBeanstalkS3Location,
        EnvironmentName: str = ...,
        OptionSettings: List[ElasticBeanstalkConfigurationOptionSetting] = ...,
        Tags: List[ElasticBeanstalkTag] = ...
    ) -> ElasticBeanstalkCreatePlatformVersionResult: ...

    def create_storage_location(self) -> ElasticBeanstalkCreateStorageLocationResultMessage: ...

    def delete_application(self, *,
        ApplicationName: str,
        TerminateEnvByForce: bool = ...
    ): ...

    def delete_application_version(self, *,
        ApplicationName: str,
        VersionLabel: str,
        DeleteSourceBundle: bool = ...
    ): ...

    def delete_configuration_template(self, *,
        ApplicationName: str,
        TemplateName: str
    ): ...

    def delete_environment_configuration(self, *,
        ApplicationName: str,
        EnvironmentName: str
    ): ...

    def delete_platform_version(self, *,
        PlatformArn: str = ...
    ) -> ElasticBeanstalkDeletePlatformVersionResult: ...

    def describe_account_attributes(self) -> ElasticBeanstalkDescribeAccountAttributesResult: ...

    def describe_application_versions(self, *,
        ApplicationName: str = ...,
        VersionLabels: List[str] = ...,
        MaxRecords: int = ...,
        NextToken: str = ...
    ) -> ElasticBeanstalkApplicationVersionDescriptionsMessage: ...

    def describe_applications(self, *,
        ApplicationNames: List[str] = ...
    ) -> ElasticBeanstalkApplicationDescriptionsMessage: ...

    def describe_configuration_options(self, *,
        ApplicationName: str = ...,
        TemplateName: str = ...,
        EnvironmentName: str = ...,
        SolutionStackName: str = ...,
        PlatformArn: str = ...,
        Options: List[ElasticBeanstalkOptionSpecification] = ...
    ) -> ElasticBeanstalkConfigurationOptionsDescription: ...

    def describe_configuration_settings(self, *,
        ApplicationName: str,
        TemplateName: str = ...,
        EnvironmentName: str = ...
    ) -> ElasticBeanstalkConfigurationSettingsDescriptions: ...

    def describe_environment_health(self, *,
        EnvironmentName: str = ...,
        EnvironmentId: str = ...,
        AttributeNames: List[str] = ...
    ) -> ElasticBeanstalkDescribeEnvironmentHealthResult: ...

    def describe_environment_managed_action_history(self, *,
        EnvironmentId: str = ...,
        EnvironmentName: str = ...,
        NextToken: str = ...,
        MaxItems: int = ...
    ) -> ElasticBeanstalkDescribeEnvironmentManagedActionHistoryResult: ...

    def describe_environment_managed_actions(self, *,
        EnvironmentName: str = ...,
        EnvironmentId: str = ...,
        Status: str = ...
    ) -> ElasticBeanstalkDescribeEnvironmentManagedActionsResult: ...

    def describe_environment_resources(self, *,
        EnvironmentId: str = ...,
        EnvironmentName: str = ...
    ) -> ElasticBeanstalkEnvironmentResourceDescriptionsMessage: ...

    def describe_environments(self, *,
        ApplicationName: str = ...,
        VersionLabel: str = ...,
        EnvironmentIds: List[str] = ...,
        EnvironmentNames: List[str] = ...,
        IncludeDeleted: bool = ...,
        IncludedDeletedBackTo: datetime.datetime = ...,
        MaxRecords: int = ...,
        NextToken: str = ...
    ) -> ElasticBeanstalkEnvironmentDescriptionsMessage: ...

    def describe_events(self, *,
        ApplicationName: str = ...,
        VersionLabel: str = ...,
        TemplateName: str = ...,
        EnvironmentId: str = ...,
        EnvironmentName: str = ...,
        PlatformArn: str = ...,
        RequestId: str = ...,
        Severity: str = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        MaxRecords: int = ...,
        NextToken: str = ...
    ) -> ElasticBeanstalkEventDescriptionsMessage: ...

    def describe_instances_health(self, *,
        EnvironmentName: str = ...,
        EnvironmentId: str = ...,
        AttributeNames: List[str] = ...,
        NextToken: str = ...
    ) -> ElasticBeanstalkDescribeInstancesHealthResult: ...

    def describe_platform_version(self, *,
        PlatformArn: str = ...
    ) -> ElasticBeanstalkDescribePlatformVersionResult: ...

    def list_available_solution_stacks(self) -> ElasticBeanstalkListAvailableSolutionStacksResultMessage: ...

    def list_platform_versions(self, *,
        Filters: List[ElasticBeanstalkPlatformFilter] = ...,
        MaxRecords: int = ...,
        NextToken: str = ...
    ) -> ElasticBeanstalkListPlatformVersionsResult: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> ElasticBeanstalkResourceTagsDescriptionMessage: ...

    def rebuild_environment(self, *,
        EnvironmentId: str = ...,
        EnvironmentName: str = ...
    ): ...

    def request_environment_info(self, *,
        InfoType: str,
        EnvironmentId: str = ...,
        EnvironmentName: str = ...
    ): ...

    def restart_app_server(self, *,
        EnvironmentId: str = ...,
        EnvironmentName: str = ...
    ): ...

    def retrieve_environment_info(self, *,
        InfoType: str,
        EnvironmentId: str = ...,
        EnvironmentName: str = ...
    ) -> ElasticBeanstalkRetrieveEnvironmentInfoResultMessage: ...

    def swap_environment_cnames(self, *,
        SourceEnvironmentId: str = ...,
        SourceEnvironmentName: str = ...,
        DestinationEnvironmentId: str = ...,
        DestinationEnvironmentName: str = ...
    ): ...

    def terminate_environment(self, *,
        EnvironmentId: str = ...,
        EnvironmentName: str = ...,
        TerminateResources: bool = ...,
        ForceTerminate: bool = ...
    ) -> ElasticBeanstalkEnvironmentDescription: ...

    def update_application(self, *,
        ApplicationName: str,
        Description: str = ...
    ) -> ElasticBeanstalkApplicationDescriptionMessage: ...

    def update_application_resource_lifecycle(self, *,
        ApplicationName: str,
        ResourceLifecycleConfig: ElasticBeanstalkApplicationResourceLifecycleConfig
    ) -> ElasticBeanstalkApplicationResourceLifecycleDescriptionMessage: ...

    def update_application_version(self, *,
        ApplicationName: str,
        VersionLabel: str,
        Description: str = ...
    ) -> ElasticBeanstalkApplicationVersionDescriptionMessage: ...

    def update_configuration_template(self, *,
        ApplicationName: str,
        TemplateName: str,
        Description: str = ...,
        OptionSettings: List[ElasticBeanstalkConfigurationOptionSetting] = ...,
        OptionsToRemove: List[ElasticBeanstalkOptionSpecification] = ...
    ) -> ElasticBeanstalkConfigurationSettingsDescription: ...

    def update_environment(self, *,
        ApplicationName: str = ...,
        EnvironmentId: str = ...,
        EnvironmentName: str = ...,
        GroupName: str = ...,
        Description: str = ...,
        Tier: ElasticBeanstalkEnvironmentTier = ...,
        VersionLabel: str = ...,
        TemplateName: str = ...,
        SolutionStackName: str = ...,
        PlatformArn: str = ...,
        OptionSettings: List[ElasticBeanstalkConfigurationOptionSetting] = ...,
        OptionsToRemove: List[ElasticBeanstalkOptionSpecification] = ...
    ) -> ElasticBeanstalkEnvironmentDescription: ...

    def update_tags_for_resource(self, *,
        ResourceArn: str,
        TagsToAdd: List[ElasticBeanstalkTag] = ...,
        TagsToRemove: List[str] = ...
    ): ...

    def validate_configuration_settings(self, *,
        ApplicationName: str,
        OptionSettings: List[ElasticBeanstalkConfigurationOptionSetting],
        TemplateName: str = ...,
        EnvironmentName: str = ...
    ) -> ElasticBeanstalkConfigurationSettingsValidationMessages: ...


class ElasticBeanstalkApplyEnvironmentManagedActionResult(TypedDict, total=False):
    ActionId: str
    ActionDescription: str
    ActionType: str
    Status: str


class ElasticBeanstalkCheckDNSAvailabilityResultMessage(TypedDict, total=False):
    Available: bool
    FullyQualifiedCNAME: str


class ElasticBeanstalkEnvironmentDescriptionsMessage(TypedDict, total=False):
    Environments: List[ElasticBeanstalkEnvironmentDescription]
    NextToken: str


class ElasticBeanstalkEnvironmentDescription(TypedDict, total=False):
    EnvironmentName: str
    EnvironmentId: str
    ApplicationName: str
    VersionLabel: str
    SolutionStackName: str
    PlatformArn: str
    TemplateName: str
    Description: str
    EndpointURL: str
    CNAME: str
    DateCreated: datetime.datetime
    DateUpdated: datetime.datetime
    Status: str
    AbortableOperationInProgress: bool
    Health: str
    HealthStatus: str
    Resources: ElasticBeanstalkEnvironmentResourcesDescription
    Tier: ElasticBeanstalkEnvironmentTier
    EnvironmentLinks: List[ElasticBeanstalkEnvironmentLink]
    EnvironmentArn: str


class ElasticBeanstalkEnvironmentResourcesDescription(TypedDict, total=False):
    LoadBalancer: ElasticBeanstalkLoadBalancerDescription


class ElasticBeanstalkLoadBalancerDescription(TypedDict, total=False):
    LoadBalancerName: str
    Domain: str
    Listeners: List[ElasticBeanstalkListener]


class ElasticBeanstalkListener(TypedDict, total=False):
    Protocol: str
    Port: int


class ElasticBeanstalkEnvironmentTier(TypedDict, total=False):
    Name: str
    Type: str
    Version: str


class ElasticBeanstalkEnvironmentLink(TypedDict, total=False):
    LinkName: str
    EnvironmentName: str


class ElasticBeanstalkApplicationResourceLifecycleConfig(TypedDict, total=False):
    ServiceRole: str
    VersionLifecycleConfig: ElasticBeanstalkApplicationVersionLifecycleConfig


class ElasticBeanstalkApplicationVersionLifecycleConfig(TypedDict, total=False):
    MaxCountRule: ElasticBeanstalkMaxCountRule
    MaxAgeRule: ElasticBeanstalkMaxAgeRule


class _ElasticBeanstalkMaxCountRule(TypedDict):
    Enabled: bool


class ElasticBeanstalkMaxCountRule(_ElasticBeanstalkMaxCountRule, total=False):
    MaxCount: int
    DeleteSourceFromS3: bool


class _ElasticBeanstalkMaxAgeRule(TypedDict):
    Enabled: bool


class ElasticBeanstalkMaxAgeRule(_ElasticBeanstalkMaxAgeRule, total=False):
    MaxAgeInDays: int
    DeleteSourceFromS3: bool


class ElasticBeanstalkTag(TypedDict, total=False):
    Key: str
    Value: str


class ElasticBeanstalkApplicationDescriptionMessage(TypedDict, total=False):
    Application: ElasticBeanstalkApplicationDescription


class ElasticBeanstalkApplicationDescription(TypedDict, total=False):
    ApplicationArn: str
    ApplicationName: str
    Description: str
    DateCreated: datetime.datetime
    DateUpdated: datetime.datetime
    Versions: List[str]
    ConfigurationTemplates: List[str]
    ResourceLifecycleConfig: ElasticBeanstalkApplicationResourceLifecycleConfig


class ElasticBeanstalkSourceBuildInformation(TypedDict):
    SourceType: str
    SourceRepository: str
    SourceLocation: str


class ElasticBeanstalkS3Location(TypedDict, total=False):
    S3Bucket: str
    S3Key: str


class _ElasticBeanstalkBuildConfiguration(TypedDict):
    CodeBuildServiceRole: str
    Image: str


class ElasticBeanstalkBuildConfiguration(_ElasticBeanstalkBuildConfiguration, total=False):
    ArtifactName: str
    ComputeType: str
    TimeoutInMinutes: int


class ElasticBeanstalkApplicationVersionDescriptionMessage(TypedDict, total=False):
    ApplicationVersion: ElasticBeanstalkApplicationVersionDescription


class ElasticBeanstalkApplicationVersionDescription(TypedDict, total=False):
    ApplicationVersionArn: str
    ApplicationName: str
    Description: str
    VersionLabel: str
    SourceBuildInformation: ElasticBeanstalkSourceBuildInformation
    BuildArn: str
    SourceBundle: ElasticBeanstalkS3Location
    DateCreated: datetime.datetime
    DateUpdated: datetime.datetime
    Status: str


class ElasticBeanstalkSourceConfiguration(TypedDict, total=False):
    ApplicationName: str
    TemplateName: str


class ElasticBeanstalkConfigurationOptionSetting(TypedDict, total=False):
    ResourceName: str
    Namespace: str
    OptionName: str
    Value: str


class ElasticBeanstalkConfigurationSettingsDescription(TypedDict, total=False):
    SolutionStackName: str
    PlatformArn: str
    ApplicationName: str
    TemplateName: str
    Description: str
    EnvironmentName: str
    DeploymentStatus: str
    DateCreated: datetime.datetime
    DateUpdated: datetime.datetime
    OptionSettings: List[ElasticBeanstalkConfigurationOptionSetting]


class ElasticBeanstalkOptionSpecification(TypedDict, total=False):
    ResourceName: str
    Namespace: str
    OptionName: str


class ElasticBeanstalkCreatePlatformVersionResult(TypedDict, total=False):
    PlatformSummary: ElasticBeanstalkPlatformSummary
    Builder: ElasticBeanstalkBuilder


class ElasticBeanstalkPlatformSummary(TypedDict, total=False):
    PlatformArn: str
    PlatformOwner: str
    PlatformStatus: str
    PlatformCategory: str
    OperatingSystemName: str
    OperatingSystemVersion: str
    SupportedTierList: List[str]
    SupportedAddonList: List[str]


class ElasticBeanstalkBuilder(TypedDict, total=False):
    ARN: str


class ElasticBeanstalkCreateStorageLocationResultMessage(TypedDict, total=False):
    S3Bucket: str


class ElasticBeanstalkDeletePlatformVersionResult(TypedDict, total=False):
    PlatformSummary: ElasticBeanstalkPlatformSummary


class ElasticBeanstalkDescribeAccountAttributesResult(TypedDict, total=False):
    ResourceQuotas: ElasticBeanstalkResourceQuotas


class ElasticBeanstalkResourceQuotas(TypedDict, total=False):
    ApplicationQuota: ElasticBeanstalkResourceQuota
    ApplicationVersionQuota: ElasticBeanstalkResourceQuota
    EnvironmentQuota: ElasticBeanstalkResourceQuota
    ConfigurationTemplateQuota: ElasticBeanstalkResourceQuota
    CustomPlatformQuota: ElasticBeanstalkResourceQuota


class ElasticBeanstalkResourceQuota(TypedDict, total=False):
    Maximum: int


class ElasticBeanstalkApplicationVersionDescriptionsMessage(TypedDict, total=False):
    ApplicationVersions: List[ElasticBeanstalkApplicationVersionDescription]
    NextToken: str


class ElasticBeanstalkApplicationDescriptionsMessage(TypedDict, total=False):
    Applications: List[ElasticBeanstalkApplicationDescription]


class ElasticBeanstalkConfigurationOptionsDescription(TypedDict, total=False):
    SolutionStackName: str
    PlatformArn: str
    Options: List[ElasticBeanstalkConfigurationOptionDescription]


class ElasticBeanstalkConfigurationOptionDescription(TypedDict, total=False):
    Namespace: str
    Name: str
    DefaultValue: str
    ChangeSeverity: str
    UserDefined: bool
    ValueType: str
    ValueOptions: List[str]
    MinValue: int
    MaxValue: int
    MaxLength: int
    Regex: ElasticBeanstalkOptionRestrictionRegex


class ElasticBeanstalkOptionRestrictionRegex(TypedDict, total=False):
    Pattern: str
    Label: str


class ElasticBeanstalkConfigurationSettingsDescriptions(TypedDict, total=False):
    ConfigurationSettings: List[ElasticBeanstalkConfigurationSettingsDescription]


class ElasticBeanstalkDescribeEnvironmentHealthResult(TypedDict, total=False):
    EnvironmentName: str
    HealthStatus: str
    Status: str
    Color: str
    Causes: List[str]
    ApplicationMetrics: ElasticBeanstalkApplicationMetrics
    InstancesHealth: ElasticBeanstalkInstanceHealthSummary
    RefreshedAt: datetime.datetime


class ElasticBeanstalkApplicationMetrics(TypedDict, total=False):
    Duration: int
    RequestCount: int
    StatusCodes: ElasticBeanstalkStatusCodes
    Latency: ElasticBeanstalkLatency


class ElasticBeanstalkStatusCodes(TypedDict, total=False):
    Status2xx: int
    Status3xx: int
    Status4xx: int
    Status5xx: int


class ElasticBeanstalkLatency(TypedDict, total=False):
    P999: float
    P99: float
    P95: float
    P90: float
    P85: float
    P75: float
    P50: float
    P10: float


class ElasticBeanstalkInstanceHealthSummary(TypedDict, total=False):
    NoData: int
    Unknown: int
    Pending: int
    Ok: int
    Info: int
    Warning: int
    Degraded: int
    Severe: int


class ElasticBeanstalkDescribeEnvironmentManagedActionHistoryResult(TypedDict, total=False):
    ManagedActionHistoryItems: List[ElasticBeanstalkManagedActionHistoryItem]
    NextToken: str


class ElasticBeanstalkManagedActionHistoryItem(TypedDict, total=False):
    ActionId: str
    ActionType: str
    ActionDescription: str
    FailureType: str
    Status: str
    FailureDescription: str
    ExecutedTime: datetime.datetime
    FinishedTime: datetime.datetime


class ElasticBeanstalkDescribeEnvironmentManagedActionsResult(TypedDict, total=False):
    ManagedActions: List[ElasticBeanstalkManagedAction]


class ElasticBeanstalkManagedAction(TypedDict, total=False):
    ActionId: str
    ActionDescription: str
    ActionType: str
    Status: str
    WindowStartTime: datetime.datetime


class ElasticBeanstalkEnvironmentResourceDescriptionsMessage(TypedDict, total=False):
    EnvironmentResources: ElasticBeanstalkEnvironmentResourceDescription


class ElasticBeanstalkEnvironmentResourceDescription(TypedDict, total=False):
    EnvironmentName: str
    AutoScalingGroups: List[ElasticBeanstalkAutoScalingGroup]
    Instances: List[ElasticBeanstalkInstance]
    LaunchConfigurations: List[ElasticBeanstalkLaunchConfiguration]
    LaunchTemplates: List[ElasticBeanstalkLaunchTemplate]
    LoadBalancers: List[ElasticBeanstalkLoadBalancer]
    Triggers: List[ElasticBeanstalkTrigger]
    Queues: List[ElasticBeanstalkQueue]


class ElasticBeanstalkAutoScalingGroup(TypedDict, total=False):
    Name: str


class ElasticBeanstalkInstance(TypedDict, total=False):
    Id: str


class ElasticBeanstalkLaunchConfiguration(TypedDict, total=False):
    Name: str


class ElasticBeanstalkLaunchTemplate(TypedDict, total=False):
    Id: str


class ElasticBeanstalkLoadBalancer(TypedDict, total=False):
    Name: str


class ElasticBeanstalkTrigger(TypedDict, total=False):
    Name: str


class ElasticBeanstalkQueue(TypedDict, total=False):
    Name: str
    URL: str


class ElasticBeanstalkEventDescriptionsMessage(TypedDict, total=False):
    Events: List[ElasticBeanstalkEventDescription]
    NextToken: str


class ElasticBeanstalkEventDescription(TypedDict, total=False):
    EventDate: datetime.datetime
    Message: str
    ApplicationName: str
    VersionLabel: str
    TemplateName: str
    EnvironmentName: str
    PlatformArn: str
    RequestId: str
    Severity: str


class ElasticBeanstalkDescribeInstancesHealthResult(TypedDict, total=False):
    InstanceHealthList: List[ElasticBeanstalkSingleInstanceHealth]
    RefreshedAt: datetime.datetime
    NextToken: str


class ElasticBeanstalkSingleInstanceHealth(TypedDict, total=False):
    InstanceId: str
    HealthStatus: str
    Color: str
    Causes: List[str]
    LaunchedAt: datetime.datetime
    ApplicationMetrics: ElasticBeanstalkApplicationMetrics
    System: ElasticBeanstalkSystemStatus
    Deployment: ElasticBeanstalkDeployment
    AvailabilityZone: str
    InstanceType: str


class ElasticBeanstalkSystemStatus(TypedDict, total=False):
    CPUUtilization: ElasticBeanstalkCPUUtilization
    LoadAverage: List[float]


class ElasticBeanstalkCPUUtilization(TypedDict, total=False):
    User: float
    Nice: float
    System: float
    Idle: float
    IOWait: float
    IRQ: float
    SoftIRQ: float
    Privileged: float


class ElasticBeanstalkDeployment(TypedDict, total=False):
    VersionLabel: str
    DeploymentId: int
    Status: str
    DeploymentTime: datetime.datetime


class ElasticBeanstalkDescribePlatformVersionResult(TypedDict, total=False):
    PlatformDescription: ElasticBeanstalkPlatformDescription


class ElasticBeanstalkPlatformDescription(TypedDict, total=False):
    PlatformArn: str
    PlatformOwner: str
    PlatformName: str
    PlatformVersion: str
    SolutionStackName: str
    PlatformStatus: str
    DateCreated: datetime.datetime
    DateUpdated: datetime.datetime
    PlatformCategory: str
    Description: str
    Maintainer: str
    OperatingSystemName: str
    OperatingSystemVersion: str
    ProgrammingLanguages: List[ElasticBeanstalkPlatformProgrammingLanguage]
    Frameworks: List[ElasticBeanstalkPlatformFramework]
    CustomAmiList: List[ElasticBeanstalkCustomAmi]
    SupportedTierList: List[str]
    SupportedAddonList: List[str]


class ElasticBeanstalkPlatformProgrammingLanguage(TypedDict, total=False):
    Name: str
    Version: str


class ElasticBeanstalkPlatformFramework(TypedDict, total=False):
    Name: str
    Version: str


class ElasticBeanstalkCustomAmi(TypedDict, total=False):
    VirtualizationType: str
    ImageId: str


class ElasticBeanstalkListAvailableSolutionStacksResultMessage(TypedDict, total=False):
    SolutionStacks: List[str]
    SolutionStackDetails: List[ElasticBeanstalkSolutionStackDescription]


class ElasticBeanstalkSolutionStackDescription(TypedDict, total=False):
    SolutionStackName: str
    PermittedFileTypes: List[str]


class ElasticBeanstalkPlatformFilter(TypedDict, total=False):
    Type: str
    Operator: str
    Values: List[str]


class ElasticBeanstalkListPlatformVersionsResult(TypedDict, total=False):
    PlatformSummaryList: List[ElasticBeanstalkPlatformSummary]
    NextToken: str


class ElasticBeanstalkResourceTagsDescriptionMessage(TypedDict, total=False):
    ResourceArn: str
    ResourceTags: List[ElasticBeanstalkTag]


class ElasticBeanstalkRetrieveEnvironmentInfoResultMessage(TypedDict, total=False):
    EnvironmentInfo: List[ElasticBeanstalkEnvironmentInfoDescription]


class ElasticBeanstalkEnvironmentInfoDescription(TypedDict, total=False):
    InfoType: str
    Ec2InstanceId: str
    SampleTimestamp: datetime.datetime
    Message: str


class ElasticBeanstalkApplicationResourceLifecycleDescriptionMessage(TypedDict, total=False):
    ApplicationName: str
    ResourceLifecycleConfig: ElasticBeanstalkApplicationResourceLifecycleConfig


class ElasticBeanstalkConfigurationSettingsValidationMessages(TypedDict, total=False):
    Messages: List[ElasticBeanstalkValidationMessage]


class ElasticBeanstalkValidationMessage(TypedDict, total=False):
    Message: str
    Severity: str
    Namespace: str
    OptionName: str


class ElasticTranscoder(BaseClient):
    def cancel_job(self, *,
        Id: str
    ) -> ElasticTranscoderCancelJobResponse: ...

    def create_job(self, *,
        PipelineId: str,
        Input: ElasticTranscoderJobInput = ...,
        Inputs: List[ElasticTranscoderJobInput] = ...,
        Output: ElasticTranscoderCreateJobOutput = ...,
        Outputs: List[ElasticTranscoderCreateJobOutput] = ...,
        OutputKeyPrefix: str = ...,
        Playlists: List[ElasticTranscoderCreateJobPlaylist] = ...,
        UserMetadata: Dict[str, str] = ...
    ) -> ElasticTranscoderCreateJobResponse: ...

    def create_pipeline(self, *,
        Name: str,
        InputBucket: str,
        Role: str,
        OutputBucket: str = ...,
        AwsKmsKeyArn: str = ...,
        Notifications: ElasticTranscoderNotifications = ...,
        ContentConfig: ElasticTranscoderPipelineOutputConfig = ...,
        ThumbnailConfig: ElasticTranscoderPipelineOutputConfig = ...
    ) -> ElasticTranscoderCreatePipelineResponse: ...

    def create_preset(self, *,
        Name: str,
        Container: str,
        Description: str = ...,
        Video: ElasticTranscoderVideoParameters = ...,
        Audio: ElasticTranscoderAudioParameters = ...,
        Thumbnails: ElasticTranscoderThumbnails = ...
    ) -> ElasticTranscoderCreatePresetResponse: ...

    def delete_pipeline(self, *,
        Id: str
    ) -> ElasticTranscoderDeletePipelineResponse: ...

    def delete_preset(self, *,
        Id: str
    ) -> ElasticTranscoderDeletePresetResponse: ...

    def list_jobs_by_pipeline(self, *,
        PipelineId: str,
        Ascending: str = ...,
        PageToken: str = ...
    ) -> ElasticTranscoderListJobsByPipelineResponse: ...

    def list_jobs_by_status(self, *,
        Status: str,
        Ascending: str = ...,
        PageToken: str = ...
    ) -> ElasticTranscoderListJobsByStatusResponse: ...

    def list_pipelines(self, *,
        Ascending: str = ...,
        PageToken: str = ...
    ) -> ElasticTranscoderListPipelinesResponse: ...

    def list_presets(self, *,
        Ascending: str = ...,
        PageToken: str = ...
    ) -> ElasticTranscoderListPresetsResponse: ...

    def read_job(self, *,
        Id: str
    ) -> ElasticTranscoderReadJobResponse: ...

    def read_pipeline(self, *,
        Id: str
    ) -> ElasticTranscoderReadPipelineResponse: ...

    def read_preset(self, *,
        Id: str
    ) -> ElasticTranscoderReadPresetResponse: ...

    def test_role(self, *,
        Role: str,
        InputBucket: str,
        OutputBucket: str,
        Topics: List[str]
    ) -> ElasticTranscoderTestRoleResponse: ...

    def update_pipeline(self, *,
        Id: str,
        Name: str = ...,
        InputBucket: str = ...,
        Role: str = ...,
        AwsKmsKeyArn: str = ...,
        Notifications: ElasticTranscoderNotifications = ...,
        ContentConfig: ElasticTranscoderPipelineOutputConfig = ...,
        ThumbnailConfig: ElasticTranscoderPipelineOutputConfig = ...
    ) -> ElasticTranscoderUpdatePipelineResponse: ...

    def update_pipeline_notifications(self, *,
        Id: str,
        Notifications: ElasticTranscoderNotifications
    ) -> ElasticTranscoderUpdatePipelineNotificationsResponse: ...

    def update_pipeline_status(self, *,
        Id: str,
        Status: str
    ) -> ElasticTranscoderUpdatePipelineStatusResponse: ...


class ElasticTranscoderCancelJobResponse(TypedDict, total=False):
    pass


class ElasticTranscoderJobInput(TypedDict, total=False):
    Key: str
    FrameRate: str
    Resolution: str
    AspectRatio: str
    Interlaced: str
    Container: str
    Encryption: ElasticTranscoderEncryption
    TimeSpan: ElasticTranscoderTimeSpan
    InputCaptions: ElasticTranscoderInputCaptions
    DetectedProperties: ElasticTranscoderDetectedProperties


class ElasticTranscoderEncryption(TypedDict, total=False):
    Mode: str
    Key: str
    KeyMd5: str
    InitializationVector: str


class ElasticTranscoderTimeSpan(TypedDict, total=False):
    StartTime: str
    Duration: str


class ElasticTranscoderInputCaptions(TypedDict, total=False):
    MergePolicy: str
    CaptionSources: List[ElasticTranscoderCaptionSource]


class ElasticTranscoderCaptionSource(TypedDict, total=False):
    Key: str
    Language: str
    TimeOffset: str
    Label: str
    Encryption: ElasticTranscoderEncryption


class ElasticTranscoderDetectedProperties(TypedDict, total=False):
    Width: int
    Height: int
    FrameRate: str
    FileSize: int
    DurationMillis: int


class ElasticTranscoderCreateJobOutput(TypedDict, total=False):
    Key: str
    ThumbnailPattern: str
    ThumbnailEncryption: ElasticTranscoderEncryption
    Rotate: str
    PresetId: str
    SegmentDuration: str
    Watermarks: List[ElasticTranscoderJobWatermark]
    AlbumArt: ElasticTranscoderJobAlbumArt
    Composition: List[ElasticTranscoderClip]
    Captions: ElasticTranscoderCaptions
    Encryption: ElasticTranscoderEncryption


class ElasticTranscoderJobWatermark(TypedDict, total=False):
    PresetWatermarkId: str
    InputKey: str
    Encryption: ElasticTranscoderEncryption


class ElasticTranscoderJobAlbumArt(TypedDict, total=False):
    MergePolicy: str
    Artwork: List[ElasticTranscoderArtwork]


class ElasticTranscoderArtwork(TypedDict, total=False):
    InputKey: str
    MaxWidth: str
    MaxHeight: str
    SizingPolicy: str
    PaddingPolicy: str
    AlbumArtFormat: str
    Encryption: ElasticTranscoderEncryption


class ElasticTranscoderClip(TypedDict, total=False):
    TimeSpan: ElasticTranscoderTimeSpan


class ElasticTranscoderCaptions(TypedDict, total=False):
    MergePolicy: str
    CaptionSources: List[ElasticTranscoderCaptionSource]
    CaptionFormats: List[ElasticTranscoderCaptionFormat]


class ElasticTranscoderCaptionFormat(TypedDict, total=False):
    Format: str
    Pattern: str
    Encryption: ElasticTranscoderEncryption


class ElasticTranscoderCreateJobPlaylist(TypedDict, total=False):
    Name: str
    Format: str
    OutputKeys: List[str]
    HlsContentProtection: ElasticTranscoderHlsContentProtection
    PlayReadyDrm: ElasticTranscoderPlayReadyDrm


class ElasticTranscoderHlsContentProtection(TypedDict, total=False):
    Method: str
    Key: str
    KeyMd5: str
    InitializationVector: str
    LicenseAcquisitionUrl: str
    KeyStoragePolicy: str


class ElasticTranscoderPlayReadyDrm(TypedDict, total=False):
    Format: str
    Key: str
    KeyMd5: str
    KeyId: str
    InitializationVector: str
    LicenseAcquisitionUrl: str


class ElasticTranscoderCreateJobResponse(TypedDict, total=False):
    Job: ElasticTranscoderJob


class ElasticTranscoderJob(TypedDict, total=False):
    Id: str
    Arn: str
    PipelineId: str
    Input: ElasticTranscoderJobInput
    Inputs: List[ElasticTranscoderJobInput]
    Output: ElasticTranscoderJobOutput
    Outputs: List[ElasticTranscoderJobOutput]
    OutputKeyPrefix: str
    Playlists: List[ElasticTranscoderPlaylist]
    Status: str
    UserMetadata: Dict[str, str]
    Timing: ElasticTranscoderTiming


class ElasticTranscoderJobOutput(TypedDict, total=False):
    Id: str
    Key: str
    ThumbnailPattern: str
    ThumbnailEncryption: ElasticTranscoderEncryption
    Rotate: str
    PresetId: str
    SegmentDuration: str
    Status: str
    StatusDetail: str
    Duration: int
    Width: int
    Height: int
    FrameRate: str
    FileSize: int
    DurationMillis: int
    Watermarks: List[ElasticTranscoderJobWatermark]
    AlbumArt: ElasticTranscoderJobAlbumArt
    Composition: List[ElasticTranscoderClip]
    Captions: ElasticTranscoderCaptions
    Encryption: ElasticTranscoderEncryption
    AppliedColorSpaceConversion: str


class ElasticTranscoderPlaylist(TypedDict, total=False):
    Name: str
    Format: str
    OutputKeys: List[str]
    HlsContentProtection: ElasticTranscoderHlsContentProtection
    PlayReadyDrm: ElasticTranscoderPlayReadyDrm
    Status: str
    StatusDetail: str


class ElasticTranscoderTiming(TypedDict, total=False):
    SubmitTimeMillis: int
    StartTimeMillis: int
    FinishTimeMillis: int


class ElasticTranscoderNotifications(TypedDict, total=False):
    Progressing: str
    Completed: str
    Warning: str
    Error: str


class ElasticTranscoderPipelineOutputConfig(TypedDict, total=False):
    Bucket: str
    StorageClass: str
    Permissions: List[ElasticTranscoderPermission]


class ElasticTranscoderPermission(TypedDict, total=False):
    GranteeType: str
    Grantee: str
    Access: List[str]


class ElasticTranscoderCreatePipelineResponse(TypedDict, total=False):
    Pipeline: ElasticTranscoderPipeline
    Warnings: List[ElasticTranscoderWarning]


class ElasticTranscoderPipeline(TypedDict, total=False):
    Id: str
    Arn: str
    Name: str
    Status: str
    InputBucket: str
    OutputBucket: str
    Role: str
    AwsKmsKeyArn: str
    Notifications: ElasticTranscoderNotifications
    ContentConfig: ElasticTranscoderPipelineOutputConfig
    ThumbnailConfig: ElasticTranscoderPipelineOutputConfig


class ElasticTranscoderWarning(TypedDict, total=False):
    Code: str
    Message: str


class ElasticTranscoderVideoParameters(TypedDict, total=False):
    Codec: str
    CodecOptions: Dict[str, str]
    KeyframesMaxDist: str
    FixedGOP: str
    BitRate: str
    FrameRate: str
    MaxFrameRate: str
    Resolution: str
    AspectRatio: str
    MaxWidth: str
    MaxHeight: str
    DisplayAspectRatio: str
    SizingPolicy: str
    PaddingPolicy: str
    Watermarks: List[ElasticTranscoderPresetWatermark]


class ElasticTranscoderPresetWatermark(TypedDict, total=False):
    Id: str
    MaxWidth: str
    MaxHeight: str
    SizingPolicy: str
    HorizontalAlign: str
    HorizontalOffset: str
    VerticalAlign: str
    VerticalOffset: str
    Opacity: str
    Target: str


class ElasticTranscoderAudioParameters(TypedDict, total=False):
    Codec: str
    SampleRate: str
    BitRate: str
    Channels: str
    AudioPackingMode: str
    CodecOptions: ElasticTranscoderAudioCodecOptions


class ElasticTranscoderAudioCodecOptions(TypedDict, total=False):
    Profile: str
    BitDepth: str
    BitOrder: str
    Signed: str


class ElasticTranscoderThumbnails(TypedDict, total=False):
    Format: str
    Interval: str
    Resolution: str
    AspectRatio: str
    MaxWidth: str
    MaxHeight: str
    SizingPolicy: str
    PaddingPolicy: str


class ElasticTranscoderCreatePresetResponse(TypedDict, total=False):
    Preset: ElasticTranscoderPreset
    Warning: str


class ElasticTranscoderPreset(TypedDict, total=False):
    Id: str
    Arn: str
    Name: str
    Description: str
    Container: str
    Audio: ElasticTranscoderAudioParameters
    Video: ElasticTranscoderVideoParameters
    Thumbnails: ElasticTranscoderThumbnails
    Type: str


class ElasticTranscoderDeletePipelineResponse(TypedDict, total=False):
    pass


class ElasticTranscoderDeletePresetResponse(TypedDict, total=False):
    pass


class ElasticTranscoderListJobsByPipelineResponse(TypedDict, total=False):
    Jobs: List[ElasticTranscoderJob]
    NextPageToken: str


class ElasticTranscoderListJobsByStatusResponse(TypedDict, total=False):
    Jobs: List[ElasticTranscoderJob]
    NextPageToken: str


class ElasticTranscoderListPipelinesResponse(TypedDict, total=False):
    Pipelines: List[ElasticTranscoderPipeline]
    NextPageToken: str


class ElasticTranscoderListPresetsResponse(TypedDict, total=False):
    Presets: List[ElasticTranscoderPreset]
    NextPageToken: str


class ElasticTranscoderReadJobResponse(TypedDict, total=False):
    Job: ElasticTranscoderJob


class ElasticTranscoderReadPipelineResponse(TypedDict, total=False):
    Pipeline: ElasticTranscoderPipeline
    Warnings: List[ElasticTranscoderWarning]


class ElasticTranscoderReadPresetResponse(TypedDict, total=False):
    Preset: ElasticTranscoderPreset


class ElasticTranscoderTestRoleResponse(TypedDict, total=False):
    Success: str
    Messages: List[str]


class ElasticTranscoderUpdatePipelineResponse(TypedDict, total=False):
    Pipeline: ElasticTranscoderPipeline
    Warnings: List[ElasticTranscoderWarning]


class ElasticTranscoderUpdatePipelineNotificationsResponse(TypedDict, total=False):
    Pipeline: ElasticTranscoderPipeline


class ElasticTranscoderUpdatePipelineStatusResponse(TypedDict, total=False):
    Pipeline: ElasticTranscoderPipeline


class ElasticLoadBalancing(BaseClient):
    def add_tags(self, *,
        LoadBalancerNames: List[str],
        Tags: List[ElasticLoadBalancingTag]
    ) -> ElasticLoadBalancingAddTagsOutput: ...

    def apply_security_groups_to_load_balancer(self, *,
        LoadBalancerName: str,
        SecurityGroups: List[str]
    ) -> ElasticLoadBalancingApplySecurityGroupsToLoadBalancerOutput: ...

    def attach_load_balancer_to_subnets(self, *,
        LoadBalancerName: str,
        Subnets: List[str]
    ) -> ElasticLoadBalancingAttachLoadBalancerToSubnetsOutput: ...

    def configure_health_check(self, *,
        LoadBalancerName: str,
        HealthCheck: ElasticLoadBalancingHealthCheck
    ) -> ElasticLoadBalancingConfigureHealthCheckOutput: ...

    def create_app_cookie_stickiness_policy(self, *,
        LoadBalancerName: str,
        PolicyName: str,
        CookieName: str
    ) -> ElasticLoadBalancingCreateAppCookieStickinessPolicyOutput: ...

    def create_lb_cookie_stickiness_policy(self, *,
        LoadBalancerName: str,
        PolicyName: str,
        CookieExpirationPeriod: int = ...
    ) -> ElasticLoadBalancingCreateLBCookieStickinessPolicyOutput: ...

    def create_load_balancer(self, *,
        LoadBalancerName: str,
        Listeners: List[ElasticLoadBalancingListener],
        AvailabilityZones: List[str] = ...,
        Subnets: List[str] = ...,
        SecurityGroups: List[str] = ...,
        Scheme: str = ...,
        Tags: List[ElasticLoadBalancingTag] = ...
    ) -> ElasticLoadBalancingCreateAccessPointOutput: ...

    def create_load_balancer_listeners(self, *,
        LoadBalancerName: str,
        Listeners: List[ElasticLoadBalancingListener]
    ) -> ElasticLoadBalancingCreateLoadBalancerListenerOutput: ...

    def create_load_balancer_policy(self, *,
        LoadBalancerName: str,
        PolicyName: str,
        PolicyTypeName: str,
        PolicyAttributes: List[ElasticLoadBalancingPolicyAttribute] = ...
    ) -> ElasticLoadBalancingCreateLoadBalancerPolicyOutput: ...

    def delete_load_balancer(self, *,
        LoadBalancerName: str
    ) -> ElasticLoadBalancingDeleteAccessPointOutput: ...

    def delete_load_balancer_listeners(self, *,
        LoadBalancerName: str,
        LoadBalancerPorts: List[int]
    ) -> ElasticLoadBalancingDeleteLoadBalancerListenerOutput: ...

    def delete_load_balancer_policy(self, *,
        LoadBalancerName: str,
        PolicyName: str
    ) -> ElasticLoadBalancingDeleteLoadBalancerPolicyOutput: ...

    def deregister_instances_from_load_balancer(self, *,
        LoadBalancerName: str,
        Instances: List[ElasticLoadBalancingInstance]
    ) -> ElasticLoadBalancingDeregisterEndPointsOutput: ...

    def describe_account_limits(self, *,
        Marker: str = ...,
        PageSize: int = ...
    ) -> ElasticLoadBalancingDescribeAccountLimitsOutput: ...

    def describe_instance_health(self, *,
        LoadBalancerName: str,
        Instances: List[ElasticLoadBalancingInstance] = ...
    ) -> ElasticLoadBalancingDescribeEndPointStateOutput: ...

    def describe_load_balancer_attributes(self, *,
        LoadBalancerName: str
    ) -> ElasticLoadBalancingDescribeLoadBalancerAttributesOutput: ...

    def describe_load_balancer_policies(self, *,
        LoadBalancerName: str = ...,
        PolicyNames: List[str] = ...
    ) -> ElasticLoadBalancingDescribeLoadBalancerPoliciesOutput: ...

    def describe_load_balancer_policy_types(self, *,
        PolicyTypeNames: List[str] = ...
    ) -> ElasticLoadBalancingDescribeLoadBalancerPolicyTypesOutput: ...

    def describe_load_balancers(self, *,
        LoadBalancerNames: List[str] = ...,
        Marker: str = ...,
        PageSize: int = ...
    ) -> ElasticLoadBalancingDescribeAccessPointsOutput: ...

    def describe_tags(self, *,
        LoadBalancerNames: List[str]
    ) -> ElasticLoadBalancingDescribeTagsOutput: ...

    def detach_load_balancer_from_subnets(self, *,
        LoadBalancerName: str,
        Subnets: List[str]
    ) -> ElasticLoadBalancingDetachLoadBalancerFromSubnetsOutput: ...

    def disable_availability_zones_for_load_balancer(self, *,
        LoadBalancerName: str,
        AvailabilityZones: List[str]
    ) -> ElasticLoadBalancingRemoveAvailabilityZonesOutput: ...

    def enable_availability_zones_for_load_balancer(self, *,
        LoadBalancerName: str,
        AvailabilityZones: List[str]
    ) -> ElasticLoadBalancingAddAvailabilityZonesOutput: ...

    def modify_load_balancer_attributes(self, *,
        LoadBalancerName: str,
        LoadBalancerAttributes: ElasticLoadBalancingLoadBalancerAttributes
    ) -> ElasticLoadBalancingModifyLoadBalancerAttributesOutput: ...

    def register_instances_with_load_balancer(self, *,
        LoadBalancerName: str,
        Instances: List[ElasticLoadBalancingInstance]
    ) -> ElasticLoadBalancingRegisterEndPointsOutput: ...

    def remove_tags(self, *,
        LoadBalancerNames: List[str],
        Tags: List[ElasticLoadBalancingTagKeyOnly]
    ) -> ElasticLoadBalancingRemoveTagsOutput: ...

    def set_load_balancer_listener_ssl_certificate(self, *,
        LoadBalancerName: str,
        LoadBalancerPort: int,
        SSLCertificateId: str
    ) -> ElasticLoadBalancingSetLoadBalancerListenerSSLCertificateOutput: ...

    def set_load_balancer_policies_for_backend_server(self, *,
        LoadBalancerName: str,
        InstancePort: int,
        PolicyNames: List[str]
    ) -> ElasticLoadBalancingSetLoadBalancerPoliciesForBackendServerOutput: ...

    def set_load_balancer_policies_of_listener(self, *,
        LoadBalancerName: str,
        LoadBalancerPort: int,
        PolicyNames: List[str]
    ) -> ElasticLoadBalancingSetLoadBalancerPoliciesOfListenerOutput: ...


class _ElasticLoadBalancingTag(TypedDict):
    Key: str


class ElasticLoadBalancingTag(_ElasticLoadBalancingTag, total=False):
    Value: str


class ElasticLoadBalancingAddTagsOutput(TypedDict, total=False):
    pass


class ElasticLoadBalancingApplySecurityGroupsToLoadBalancerOutput(TypedDict, total=False):
    SecurityGroups: List[str]


class ElasticLoadBalancingAttachLoadBalancerToSubnetsOutput(TypedDict, total=False):
    Subnets: List[str]


class ElasticLoadBalancingHealthCheck(TypedDict):
    Target: str
    Interval: int
    Timeout: int
    UnhealthyThreshold: int
    HealthyThreshold: int


class ElasticLoadBalancingConfigureHealthCheckOutput(TypedDict, total=False):
    HealthCheck: ElasticLoadBalancingHealthCheck


class ElasticLoadBalancingCreateAppCookieStickinessPolicyOutput(TypedDict, total=False):
    pass


class ElasticLoadBalancingCreateLBCookieStickinessPolicyOutput(TypedDict, total=False):
    pass


class _ElasticLoadBalancingListener(TypedDict):
    Protocol: str
    LoadBalancerPort: int
    InstancePort: int


class ElasticLoadBalancingListener(_ElasticLoadBalancingListener, total=False):
    InstanceProtocol: str
    SSLCertificateId: str


class ElasticLoadBalancingCreateAccessPointOutput(TypedDict, total=False):
    DNSName: str


class ElasticLoadBalancingCreateLoadBalancerListenerOutput(TypedDict, total=False):
    pass


class ElasticLoadBalancingPolicyAttribute(TypedDict, total=False):
    AttributeName: str
    AttributeValue: str


class ElasticLoadBalancingCreateLoadBalancerPolicyOutput(TypedDict, total=False):
    pass


class ElasticLoadBalancingDeleteAccessPointOutput(TypedDict, total=False):
    pass


class ElasticLoadBalancingDeleteLoadBalancerListenerOutput(TypedDict, total=False):
    pass


class ElasticLoadBalancingDeleteLoadBalancerPolicyOutput(TypedDict, total=False):
    pass


class ElasticLoadBalancingInstance(TypedDict, total=False):
    InstanceId: str


class ElasticLoadBalancingDeregisterEndPointsOutput(TypedDict, total=False):
    Instances: List[ElasticLoadBalancingInstance]


class ElasticLoadBalancingDescribeAccountLimitsOutput(TypedDict, total=False):
    Limits: List[ElasticLoadBalancingLimit]
    NextMarker: str


class ElasticLoadBalancingLimit(TypedDict, total=False):
    Name: str
    Max: str


class ElasticLoadBalancingDescribeEndPointStateOutput(TypedDict, total=False):
    InstanceStates: List[ElasticLoadBalancingInstanceState]


class ElasticLoadBalancingInstanceState(TypedDict, total=False):
    InstanceId: str
    State: str
    ReasonCode: str
    Description: str


class ElasticLoadBalancingDescribeLoadBalancerAttributesOutput(TypedDict, total=False):
    LoadBalancerAttributes: ElasticLoadBalancingLoadBalancerAttributes


class ElasticLoadBalancingLoadBalancerAttributes(TypedDict, total=False):
    CrossZoneLoadBalancing: ElasticLoadBalancingCrossZoneLoadBalancing
    AccessLog: ElasticLoadBalancingAccessLog
    ConnectionDraining: ElasticLoadBalancingConnectionDraining
    ConnectionSettings: ElasticLoadBalancingConnectionSettings
    AdditionalAttributes: List[ElasticLoadBalancingAdditionalAttribute]


class ElasticLoadBalancingCrossZoneLoadBalancing(TypedDict):
    Enabled: bool


class _ElasticLoadBalancingAccessLog(TypedDict):
    Enabled: bool


class ElasticLoadBalancingAccessLog(_ElasticLoadBalancingAccessLog, total=False):
    S3BucketName: str
    EmitInterval: int
    S3BucketPrefix: str


class _ElasticLoadBalancingConnectionDraining(TypedDict):
    Enabled: bool


class ElasticLoadBalancingConnectionDraining(_ElasticLoadBalancingConnectionDraining, total=False):
    Timeout: int


class ElasticLoadBalancingConnectionSettings(TypedDict):
    IdleTimeout: int


class ElasticLoadBalancingAdditionalAttribute(TypedDict, total=False):
    Key: str
    Value: str


class ElasticLoadBalancingDescribeLoadBalancerPoliciesOutput(TypedDict, total=False):
    PolicyDescriptions: List[ElasticLoadBalancingPolicyDescription]


class ElasticLoadBalancingPolicyDescription(TypedDict, total=False):
    PolicyName: str
    PolicyTypeName: str
    PolicyAttributeDescriptions: List[ElasticLoadBalancingPolicyAttributeDescription]


class ElasticLoadBalancingPolicyAttributeDescription(TypedDict, total=False):
    AttributeName: str
    AttributeValue: str


class ElasticLoadBalancingDescribeLoadBalancerPolicyTypesOutput(TypedDict, total=False):
    PolicyTypeDescriptions: List[ElasticLoadBalancingPolicyTypeDescription]


class ElasticLoadBalancingPolicyTypeDescription(TypedDict, total=False):
    PolicyTypeName: str
    Description: str
    PolicyAttributeTypeDescriptions: List[ElasticLoadBalancingPolicyAttributeTypeDescription]


class ElasticLoadBalancingPolicyAttributeTypeDescription(TypedDict, total=False):
    AttributeName: str
    AttributeType: str
    Description: str
    DefaultValue: str
    Cardinality: str


class ElasticLoadBalancingDescribeAccessPointsOutput(TypedDict, total=False):
    LoadBalancerDescriptions: List[ElasticLoadBalancingLoadBalancerDescription]
    NextMarker: str


class ElasticLoadBalancingLoadBalancerDescription(TypedDict, total=False):
    LoadBalancerName: str
    DNSName: str
    CanonicalHostedZoneName: str
    CanonicalHostedZoneNameID: str
    ListenerDescriptions: List[ElasticLoadBalancingListenerDescription]
    Policies: ElasticLoadBalancingPolicies
    BackendServerDescriptions: List[ElasticLoadBalancingBackendServerDescription]
    AvailabilityZones: List[str]
    Subnets: List[str]
    VPCId: str
    Instances: List[ElasticLoadBalancingInstance]
    HealthCheck: ElasticLoadBalancingHealthCheck
    SourceSecurityGroup: ElasticLoadBalancingSourceSecurityGroup
    SecurityGroups: List[str]
    CreatedTime: datetime.datetime
    Scheme: str


class ElasticLoadBalancingListenerDescription(TypedDict, total=False):
    Listener: ElasticLoadBalancingListener
    PolicyNames: List[str]


class ElasticLoadBalancingPolicies(TypedDict, total=False):
    AppCookieStickinessPolicies: List[ElasticLoadBalancingAppCookieStickinessPolicy]
    LBCookieStickinessPolicies: List[ElasticLoadBalancingLBCookieStickinessPolicy]
    OtherPolicies: List[str]


class ElasticLoadBalancingAppCookieStickinessPolicy(TypedDict, total=False):
    PolicyName: str
    CookieName: str


class ElasticLoadBalancingLBCookieStickinessPolicy(TypedDict, total=False):
    PolicyName: str
    CookieExpirationPeriod: int


class ElasticLoadBalancingBackendServerDescription(TypedDict, total=False):
    InstancePort: int
    PolicyNames: List[str]


class ElasticLoadBalancingSourceSecurityGroup(TypedDict, total=False):
    OwnerAlias: str
    GroupName: str


class ElasticLoadBalancingDescribeTagsOutput(TypedDict, total=False):
    TagDescriptions: List[ElasticLoadBalancingTagDescription]


class ElasticLoadBalancingTagDescription(TypedDict, total=False):
    LoadBalancerName: str
    Tags: List[ElasticLoadBalancingTag]


class ElasticLoadBalancingDetachLoadBalancerFromSubnetsOutput(TypedDict, total=False):
    Subnets: List[str]


class ElasticLoadBalancingRemoveAvailabilityZonesOutput(TypedDict, total=False):
    AvailabilityZones: List[str]


class ElasticLoadBalancingAddAvailabilityZonesOutput(TypedDict, total=False):
    AvailabilityZones: List[str]


class ElasticLoadBalancingModifyLoadBalancerAttributesOutput(TypedDict, total=False):
    LoadBalancerName: str
    LoadBalancerAttributes: ElasticLoadBalancingLoadBalancerAttributes


class ElasticLoadBalancingRegisterEndPointsOutput(TypedDict, total=False):
    Instances: List[ElasticLoadBalancingInstance]


class ElasticLoadBalancingTagKeyOnly(TypedDict, total=False):
    Key: str


class ElasticLoadBalancingRemoveTagsOutput(TypedDict, total=False):
    pass


class ElasticLoadBalancingSetLoadBalancerListenerSSLCertificateOutput(TypedDict, total=False):
    pass


class ElasticLoadBalancingSetLoadBalancerPoliciesForBackendServerOutput(TypedDict, total=False):
    pass


class ElasticLoadBalancingSetLoadBalancerPoliciesOfListenerOutput(TypedDict, total=False):
    pass


class ElasticLoadBalancingv2(BaseClient):
    def add_listener_certificates(self, *,
        ListenerArn: str,
        Certificates: List[ElasticLoadBalancingv2Certificate]
    ) -> ElasticLoadBalancingv2AddListenerCertificatesOutput: ...

    def add_tags(self, *,
        ResourceArns: List[str],
        Tags: List[ElasticLoadBalancingv2Tag]
    ) -> ElasticLoadBalancingv2AddTagsOutput: ...

    def create_listener(self, *,
        LoadBalancerArn: str,
        Protocol: str,
        Port: int,
        DefaultActions: List[ElasticLoadBalancingv2Action],
        SslPolicy: str = ...,
        Certificates: List[ElasticLoadBalancingv2Certificate] = ...
    ) -> ElasticLoadBalancingv2CreateListenerOutput: ...

    def create_load_balancer(self, *,
        Name: str,
        Subnets: List[str] = ...,
        SubnetMappings: List[ElasticLoadBalancingv2SubnetMapping] = ...,
        SecurityGroups: List[str] = ...,
        Scheme: str = ...,
        Tags: List[ElasticLoadBalancingv2Tag] = ...,
        Type: str = ...,
        IpAddressType: str = ...
    ) -> ElasticLoadBalancingv2CreateLoadBalancerOutput: ...

    def create_rule(self, *,
        ListenerArn: str,
        Conditions: List[ElasticLoadBalancingv2RuleCondition],
        Priority: int,
        Actions: List[ElasticLoadBalancingv2Action]
    ) -> ElasticLoadBalancingv2CreateRuleOutput: ...

    def create_target_group(self, *,
        Name: str,
        Protocol: str = ...,
        Port: int = ...,
        VpcId: str = ...,
        HealthCheckProtocol: str = ...,
        HealthCheckPort: str = ...,
        HealthCheckEnabled: bool = ...,
        HealthCheckPath: str = ...,
        HealthCheckIntervalSeconds: int = ...,
        HealthCheckTimeoutSeconds: int = ...,
        HealthyThresholdCount: int = ...,
        UnhealthyThresholdCount: int = ...,
        Matcher: ElasticLoadBalancingv2Matcher = ...,
        TargetType: str = ...
    ) -> ElasticLoadBalancingv2CreateTargetGroupOutput: ...

    def delete_listener(self, *,
        ListenerArn: str
    ) -> ElasticLoadBalancingv2DeleteListenerOutput: ...

    def delete_load_balancer(self, *,
        LoadBalancerArn: str
    ) -> ElasticLoadBalancingv2DeleteLoadBalancerOutput: ...

    def delete_rule(self, *,
        RuleArn: str
    ) -> ElasticLoadBalancingv2DeleteRuleOutput: ...

    def delete_target_group(self, *,
        TargetGroupArn: str
    ) -> ElasticLoadBalancingv2DeleteTargetGroupOutput: ...

    def deregister_targets(self, *,
        TargetGroupArn: str,
        Targets: List[ElasticLoadBalancingv2TargetDescription]
    ) -> ElasticLoadBalancingv2DeregisterTargetsOutput: ...

    def describe_account_limits(self, *,
        Marker: str = ...,
        PageSize: int = ...
    ) -> ElasticLoadBalancingv2DescribeAccountLimitsOutput: ...

    def describe_listener_certificates(self, *,
        ListenerArn: str,
        Marker: str = ...,
        PageSize: int = ...
    ) -> ElasticLoadBalancingv2DescribeListenerCertificatesOutput: ...

    def describe_listeners(self, *,
        LoadBalancerArn: str = ...,
        ListenerArns: List[str] = ...,
        Marker: str = ...,
        PageSize: int = ...
    ) -> ElasticLoadBalancingv2DescribeListenersOutput: ...

    def describe_load_balancer_attributes(self, *,
        LoadBalancerArn: str
    ) -> ElasticLoadBalancingv2DescribeLoadBalancerAttributesOutput: ...

    def describe_load_balancers(self, *,
        LoadBalancerArns: List[str] = ...,
        Names: List[str] = ...,
        Marker: str = ...,
        PageSize: int = ...
    ) -> ElasticLoadBalancingv2DescribeLoadBalancersOutput: ...

    def describe_rules(self, *,
        ListenerArn: str = ...,
        RuleArns: List[str] = ...,
        Marker: str = ...,
        PageSize: int = ...
    ) -> ElasticLoadBalancingv2DescribeRulesOutput: ...

    def describe_ssl_policies(self, *,
        Names: List[str] = ...,
        Marker: str = ...,
        PageSize: int = ...
    ) -> ElasticLoadBalancingv2DescribeSSLPoliciesOutput: ...

    def describe_tags(self, *,
        ResourceArns: List[str]
    ) -> ElasticLoadBalancingv2DescribeTagsOutput: ...

    def describe_target_group_attributes(self, *,
        TargetGroupArn: str
    ) -> ElasticLoadBalancingv2DescribeTargetGroupAttributesOutput: ...

    def describe_target_groups(self, *,
        LoadBalancerArn: str = ...,
        TargetGroupArns: List[str] = ...,
        Names: List[str] = ...,
        Marker: str = ...,
        PageSize: int = ...
    ) -> ElasticLoadBalancingv2DescribeTargetGroupsOutput: ...

    def describe_target_health(self, *,
        TargetGroupArn: str,
        Targets: List[ElasticLoadBalancingv2TargetDescription] = ...
    ) -> ElasticLoadBalancingv2DescribeTargetHealthOutput: ...

    def modify_listener(self, *,
        ListenerArn: str,
        Port: int = ...,
        Protocol: str = ...,
        SslPolicy: str = ...,
        Certificates: List[ElasticLoadBalancingv2Certificate] = ...,
        DefaultActions: List[ElasticLoadBalancingv2Action] = ...
    ) -> ElasticLoadBalancingv2ModifyListenerOutput: ...

    def modify_load_balancer_attributes(self, *,
        LoadBalancerArn: str,
        Attributes: List[ElasticLoadBalancingv2LoadBalancerAttribute]
    ) -> ElasticLoadBalancingv2ModifyLoadBalancerAttributesOutput: ...

    def modify_rule(self, *,
        RuleArn: str,
        Conditions: List[ElasticLoadBalancingv2RuleCondition] = ...,
        Actions: List[ElasticLoadBalancingv2Action] = ...
    ) -> ElasticLoadBalancingv2ModifyRuleOutput: ...

    def modify_target_group(self, *,
        TargetGroupArn: str,
        HealthCheckProtocol: str = ...,
        HealthCheckPort: str = ...,
        HealthCheckPath: str = ...,
        HealthCheckEnabled: bool = ...,
        HealthCheckIntervalSeconds: int = ...,
        HealthCheckTimeoutSeconds: int = ...,
        HealthyThresholdCount: int = ...,
        UnhealthyThresholdCount: int = ...,
        Matcher: ElasticLoadBalancingv2Matcher = ...
    ) -> ElasticLoadBalancingv2ModifyTargetGroupOutput: ...

    def modify_target_group_attributes(self, *,
        TargetGroupArn: str,
        Attributes: List[ElasticLoadBalancingv2TargetGroupAttribute]
    ) -> ElasticLoadBalancingv2ModifyTargetGroupAttributesOutput: ...

    def register_targets(self, *,
        TargetGroupArn: str,
        Targets: List[ElasticLoadBalancingv2TargetDescription]
    ) -> ElasticLoadBalancingv2RegisterTargetsOutput: ...

    def remove_listener_certificates(self, *,
        ListenerArn: str,
        Certificates: List[ElasticLoadBalancingv2Certificate]
    ) -> ElasticLoadBalancingv2RemoveListenerCertificatesOutput: ...

    def remove_tags(self, *,
        ResourceArns: List[str],
        TagKeys: List[str]
    ) -> ElasticLoadBalancingv2RemoveTagsOutput: ...

    def set_ip_address_type(self, *,
        LoadBalancerArn: str,
        IpAddressType: str
    ) -> ElasticLoadBalancingv2SetIpAddressTypeOutput: ...

    def set_rule_priorities(self, *,
        RulePriorities: List[ElasticLoadBalancingv2RulePriorityPair]
    ) -> ElasticLoadBalancingv2SetRulePrioritiesOutput: ...

    def set_security_groups(self, *,
        LoadBalancerArn: str,
        SecurityGroups: List[str]
    ) -> ElasticLoadBalancingv2SetSecurityGroupsOutput: ...

    def set_subnets(self, *,
        LoadBalancerArn: str,
        Subnets: List[str] = ...,
        SubnetMappings: List[ElasticLoadBalancingv2SubnetMapping] = ...
    ) -> ElasticLoadBalancingv2SetSubnetsOutput: ...


class ElasticLoadBalancingv2Certificate(TypedDict, total=False):
    CertificateArn: str
    IsDefault: bool


class ElasticLoadBalancingv2AddListenerCertificatesOutput(TypedDict, total=False):
    Certificates: List[ElasticLoadBalancingv2Certificate]


class _ElasticLoadBalancingv2Tag(TypedDict):
    Key: str


class ElasticLoadBalancingv2Tag(_ElasticLoadBalancingv2Tag, total=False):
    Value: str


class ElasticLoadBalancingv2AddTagsOutput(TypedDict, total=False):
    pass


class _ElasticLoadBalancingv2Action(TypedDict):
    Type: str


class ElasticLoadBalancingv2Action(_ElasticLoadBalancingv2Action, total=False):
    TargetGroupArn: str
    AuthenticateOidcConfig: ElasticLoadBalancingv2AuthenticateOidcActionConfig
    AuthenticateCognitoConfig: ElasticLoadBalancingv2AuthenticateCognitoActionConfig
    Order: int
    RedirectConfig: ElasticLoadBalancingv2RedirectActionConfig
    FixedResponseConfig: ElasticLoadBalancingv2FixedResponseActionConfig


class _ElasticLoadBalancingv2AuthenticateOidcActionConfig(TypedDict):
    Issuer: str
    AuthorizationEndpoint: str
    TokenEndpoint: str
    UserInfoEndpoint: str
    ClientId: str


class ElasticLoadBalancingv2AuthenticateOidcActionConfig(_ElasticLoadBalancingv2AuthenticateOidcActionConfig, total=False):
    ClientSecret: str
    SessionCookieName: str
    Scope: str
    SessionTimeout: int
    AuthenticationRequestExtraParams: Dict[str, str]
    OnUnauthenticatedRequest: str
    UseExistingClientSecret: bool


class _ElasticLoadBalancingv2AuthenticateCognitoActionConfig(TypedDict):
    UserPoolArn: str
    UserPoolClientId: str
    UserPoolDomain: str


class ElasticLoadBalancingv2AuthenticateCognitoActionConfig(_ElasticLoadBalancingv2AuthenticateCognitoActionConfig, total=False):
    SessionCookieName: str
    Scope: str
    SessionTimeout: int
    AuthenticationRequestExtraParams: Dict[str, str]
    OnUnauthenticatedRequest: str


class _ElasticLoadBalancingv2RedirectActionConfig(TypedDict):
    StatusCode: str


class ElasticLoadBalancingv2RedirectActionConfig(_ElasticLoadBalancingv2RedirectActionConfig, total=False):
    Protocol: str
    Port: str
    Host: str
    Path: str
    Query: str


class _ElasticLoadBalancingv2FixedResponseActionConfig(TypedDict):
    StatusCode: str


class ElasticLoadBalancingv2FixedResponseActionConfig(_ElasticLoadBalancingv2FixedResponseActionConfig, total=False):
    MessageBody: str
    ContentType: str


class ElasticLoadBalancingv2CreateListenerOutput(TypedDict, total=False):
    Listeners: List[ElasticLoadBalancingv2Listener]


class ElasticLoadBalancingv2Listener(TypedDict, total=False):
    ListenerArn: str
    LoadBalancerArn: str
    Port: int
    Protocol: str
    Certificates: List[ElasticLoadBalancingv2Certificate]
    SslPolicy: str
    DefaultActions: List[ElasticLoadBalancingv2Action]


class ElasticLoadBalancingv2SubnetMapping(TypedDict, total=False):
    SubnetId: str
    AllocationId: str


class ElasticLoadBalancingv2CreateLoadBalancerOutput(TypedDict, total=False):
    LoadBalancers: List[ElasticLoadBalancingv2LoadBalancer]


class ElasticLoadBalancingv2LoadBalancer(TypedDict, total=False):
    LoadBalancerArn: str
    DNSName: str
    CanonicalHostedZoneId: str
    CreatedTime: datetime.datetime
    LoadBalancerName: str
    Scheme: str
    VpcId: str
    State: ElasticLoadBalancingv2LoadBalancerState
    Type: str
    AvailabilityZones: List[ElasticLoadBalancingv2AvailabilityZone]
    SecurityGroups: List[str]
    IpAddressType: str


class ElasticLoadBalancingv2LoadBalancerState(TypedDict, total=False):
    Code: str
    Reason: str


class ElasticLoadBalancingv2AvailabilityZone(TypedDict, total=False):
    ZoneName: str
    SubnetId: str
    LoadBalancerAddresses: List[ElasticLoadBalancingv2LoadBalancerAddress]


class ElasticLoadBalancingv2LoadBalancerAddress(TypedDict, total=False):
    IpAddress: str
    AllocationId: str


class ElasticLoadBalancingv2RuleCondition(TypedDict, total=False):
    Field: str
    Values: List[str]
    HostHeaderConfig: ElasticLoadBalancingv2HostHeaderConditionConfig
    PathPatternConfig: ElasticLoadBalancingv2PathPatternConditionConfig
    HttpHeaderConfig: ElasticLoadBalancingv2HttpHeaderConditionConfig
    QueryStringConfig: ElasticLoadBalancingv2QueryStringConditionConfig
    HttpRequestMethodConfig: ElasticLoadBalancingv2HttpRequestMethodConditionConfig
    SourceIpConfig: ElasticLoadBalancingv2SourceIpConditionConfig


class ElasticLoadBalancingv2HostHeaderConditionConfig(TypedDict, total=False):
    Values: List[str]


class ElasticLoadBalancingv2PathPatternConditionConfig(TypedDict, total=False):
    Values: List[str]


class ElasticLoadBalancingv2HttpHeaderConditionConfig(TypedDict, total=False):
    HttpHeaderName: str
    Values: List[str]


class ElasticLoadBalancingv2QueryStringConditionConfig(TypedDict, total=False):
    Values: List[ElasticLoadBalancingv2QueryStringKeyValuePair]


class ElasticLoadBalancingv2QueryStringKeyValuePair(TypedDict, total=False):
    Key: str
    Value: str


class ElasticLoadBalancingv2HttpRequestMethodConditionConfig(TypedDict, total=False):
    Values: List[str]


class ElasticLoadBalancingv2SourceIpConditionConfig(TypedDict, total=False):
    Values: List[str]


class ElasticLoadBalancingv2CreateRuleOutput(TypedDict, total=False):
    Rules: List[ElasticLoadBalancingv2Rule]


class ElasticLoadBalancingv2Rule(TypedDict, total=False):
    RuleArn: str
    Priority: str
    Conditions: List[ElasticLoadBalancingv2RuleCondition]
    Actions: List[ElasticLoadBalancingv2Action]
    IsDefault: bool


class ElasticLoadBalancingv2Matcher(TypedDict):
    HttpCode: str


class ElasticLoadBalancingv2CreateTargetGroupOutput(TypedDict, total=False):
    TargetGroups: List[ElasticLoadBalancingv2TargetGroup]


class ElasticLoadBalancingv2TargetGroup(TypedDict, total=False):
    TargetGroupArn: str
    TargetGroupName: str
    Protocol: str
    Port: int
    VpcId: str
    HealthCheckProtocol: str
    HealthCheckPort: str
    HealthCheckEnabled: bool
    HealthCheckIntervalSeconds: int
    HealthCheckTimeoutSeconds: int
    HealthyThresholdCount: int
    UnhealthyThresholdCount: int
    HealthCheckPath: str
    Matcher: ElasticLoadBalancingv2Matcher
    LoadBalancerArns: List[str]
    TargetType: str


class ElasticLoadBalancingv2DeleteListenerOutput(TypedDict, total=False):
    pass


class ElasticLoadBalancingv2DeleteLoadBalancerOutput(TypedDict, total=False):
    pass


class ElasticLoadBalancingv2DeleteRuleOutput(TypedDict, total=False):
    pass


class ElasticLoadBalancingv2DeleteTargetGroupOutput(TypedDict, total=False):
    pass


class _ElasticLoadBalancingv2TargetDescription(TypedDict):
    Id: str


class ElasticLoadBalancingv2TargetDescription(_ElasticLoadBalancingv2TargetDescription, total=False):
    Port: int
    AvailabilityZone: str


class ElasticLoadBalancingv2DeregisterTargetsOutput(TypedDict, total=False):
    pass


class ElasticLoadBalancingv2DescribeAccountLimitsOutput(TypedDict, total=False):
    Limits: List[ElasticLoadBalancingv2Limit]
    NextMarker: str


class ElasticLoadBalancingv2Limit(TypedDict, total=False):
    Name: str
    Max: str


class ElasticLoadBalancingv2DescribeListenerCertificatesOutput(TypedDict, total=False):
    Certificates: List[ElasticLoadBalancingv2Certificate]
    NextMarker: str


class ElasticLoadBalancingv2DescribeListenersOutput(TypedDict, total=False):
    Listeners: List[ElasticLoadBalancingv2Listener]
    NextMarker: str


class ElasticLoadBalancingv2DescribeLoadBalancerAttributesOutput(TypedDict, total=False):
    Attributes: List[ElasticLoadBalancingv2LoadBalancerAttribute]


class ElasticLoadBalancingv2LoadBalancerAttribute(TypedDict, total=False):
    Key: str
    Value: str


class ElasticLoadBalancingv2DescribeLoadBalancersOutput(TypedDict, total=False):
    LoadBalancers: List[ElasticLoadBalancingv2LoadBalancer]
    NextMarker: str


class ElasticLoadBalancingv2DescribeRulesOutput(TypedDict, total=False):
    Rules: List[ElasticLoadBalancingv2Rule]
    NextMarker: str


class ElasticLoadBalancingv2DescribeSSLPoliciesOutput(TypedDict, total=False):
    SslPolicies: List[ElasticLoadBalancingv2SslPolicy]
    NextMarker: str


class ElasticLoadBalancingv2SslPolicy(TypedDict, total=False):
    SslProtocols: List[str]
    Ciphers: List[ElasticLoadBalancingv2Cipher]
    Name: str


class ElasticLoadBalancingv2Cipher(TypedDict, total=False):
    Name: str
    Priority: int


class ElasticLoadBalancingv2DescribeTagsOutput(TypedDict, total=False):
    TagDescriptions: List[ElasticLoadBalancingv2TagDescription]


class ElasticLoadBalancingv2TagDescription(TypedDict, total=False):
    ResourceArn: str
    Tags: List[ElasticLoadBalancingv2Tag]


class ElasticLoadBalancingv2DescribeTargetGroupAttributesOutput(TypedDict, total=False):
    Attributes: List[ElasticLoadBalancingv2TargetGroupAttribute]


class ElasticLoadBalancingv2TargetGroupAttribute(TypedDict, total=False):
    Key: str
    Value: str


class ElasticLoadBalancingv2DescribeTargetGroupsOutput(TypedDict, total=False):
    TargetGroups: List[ElasticLoadBalancingv2TargetGroup]
    NextMarker: str


class ElasticLoadBalancingv2DescribeTargetHealthOutput(TypedDict, total=False):
    TargetHealthDescriptions: List[ElasticLoadBalancingv2TargetHealthDescription]


class ElasticLoadBalancingv2TargetHealthDescription(TypedDict, total=False):
    Target: ElasticLoadBalancingv2TargetDescription
    HealthCheckPort: str
    TargetHealth: ElasticLoadBalancingv2TargetHealth


class ElasticLoadBalancingv2TargetHealth(TypedDict, total=False):
    State: str
    Reason: str
    Description: str


class ElasticLoadBalancingv2ModifyListenerOutput(TypedDict, total=False):
    Listeners: List[ElasticLoadBalancingv2Listener]


class ElasticLoadBalancingv2ModifyLoadBalancerAttributesOutput(TypedDict, total=False):
    Attributes: List[ElasticLoadBalancingv2LoadBalancerAttribute]


class ElasticLoadBalancingv2ModifyRuleOutput(TypedDict, total=False):
    Rules: List[ElasticLoadBalancingv2Rule]


class ElasticLoadBalancingv2ModifyTargetGroupOutput(TypedDict, total=False):
    TargetGroups: List[ElasticLoadBalancingv2TargetGroup]


class ElasticLoadBalancingv2ModifyTargetGroupAttributesOutput(TypedDict, total=False):
    Attributes: List[ElasticLoadBalancingv2TargetGroupAttribute]


class ElasticLoadBalancingv2RegisterTargetsOutput(TypedDict, total=False):
    pass


class ElasticLoadBalancingv2RemoveListenerCertificatesOutput(TypedDict, total=False):
    pass


class ElasticLoadBalancingv2RemoveTagsOutput(TypedDict, total=False):
    pass


class ElasticLoadBalancingv2SetIpAddressTypeOutput(TypedDict, total=False):
    IpAddressType: str


class ElasticLoadBalancingv2RulePriorityPair(TypedDict, total=False):
    RuleArn: str
    Priority: int


class ElasticLoadBalancingv2SetRulePrioritiesOutput(TypedDict, total=False):
    Rules: List[ElasticLoadBalancingv2Rule]


class ElasticLoadBalancingv2SetSecurityGroupsOutput(TypedDict, total=False):
    SecurityGroupIds: List[str]


class ElasticLoadBalancingv2SetSubnetsOutput(TypedDict, total=False):
    AvailabilityZones: List[ElasticLoadBalancingv2AvailabilityZone]


class EMR(BaseClient):
    def add_instance_fleet(self, *,
        ClusterId: str,
        InstanceFleet: EMRInstanceFleetConfig
    ) -> EMRAddInstanceFleetOutput: ...

    def add_instance_groups(self, *,
        InstanceGroups: List[EMRInstanceGroupConfig],
        JobFlowId: str
    ) -> EMRAddInstanceGroupsOutput: ...

    def add_job_flow_steps(self, *,
        JobFlowId: str,
        Steps: List[EMRStepConfig]
    ) -> EMRAddJobFlowStepsOutput: ...

    def add_tags(self, *,
        ResourceId: str,
        Tags: List[EMRTag]
    ) -> EMRAddTagsOutput: ...

    def cancel_steps(self, *,
        ClusterId: str = ...,
        StepIds: List[str] = ...
    ) -> EMRCancelStepsOutput: ...

    def create_security_configuration(self, *,
        Name: str,
        SecurityConfiguration: str
    ) -> EMRCreateSecurityConfigurationOutput: ...

    def delete_security_configuration(self, *,
        Name: str
    ) -> EMRDeleteSecurityConfigurationOutput: ...

    def describe_cluster(self, *,
        ClusterId: str
    ) -> EMRDescribeClusterOutput: ...

    def describe_job_flows(self, *,
        CreatedAfter: datetime.datetime = ...,
        CreatedBefore: datetime.datetime = ...,
        JobFlowIds: List[str] = ...,
        JobFlowStates: List[str] = ...
    ) -> EMRDescribeJobFlowsOutput: ...

    def describe_security_configuration(self, *,
        Name: str
    ) -> EMRDescribeSecurityConfigurationOutput: ...

    def describe_step(self, *,
        ClusterId: str,
        StepId: str
    ) -> EMRDescribeStepOutput: ...

    def list_bootstrap_actions(self, *,
        ClusterId: str,
        Marker: str = ...
    ) -> EMRListBootstrapActionsOutput: ...

    def list_clusters(self, *,
        CreatedAfter: datetime.datetime = ...,
        CreatedBefore: datetime.datetime = ...,
        ClusterStates: List[str] = ...,
        Marker: str = ...
    ) -> EMRListClustersOutput: ...

    def list_instance_fleets(self, *,
        ClusterId: str,
        Marker: str = ...
    ) -> EMRListInstanceFleetsOutput: ...

    def list_instance_groups(self, *,
        ClusterId: str,
        Marker: str = ...
    ) -> EMRListInstanceGroupsOutput: ...

    def list_instances(self, *,
        ClusterId: str,
        InstanceGroupId: str = ...,
        InstanceGroupTypes: List[str] = ...,
        InstanceFleetId: str = ...,
        InstanceFleetType: str = ...,
        InstanceStates: List[str] = ...,
        Marker: str = ...
    ) -> EMRListInstancesOutput: ...

    def list_security_configurations(self, *,
        Marker: str = ...
    ) -> EMRListSecurityConfigurationsOutput: ...

    def list_steps(self, *,
        ClusterId: str,
        StepStates: List[str] = ...,
        StepIds: List[str] = ...,
        Marker: str = ...
    ) -> EMRListStepsOutput: ...

    def modify_instance_fleet(self, *,
        ClusterId: str,
        InstanceFleet: EMRInstanceFleetModifyConfig
    ): ...

    def modify_instance_groups(self, *,
        ClusterId: str = ...,
        InstanceGroups: List[EMRInstanceGroupModifyConfig] = ...
    ): ...

    def put_auto_scaling_policy(self, *,
        ClusterId: str,
        InstanceGroupId: str,
        AutoScalingPolicy: EMRAutoScalingPolicy
    ) -> EMRPutAutoScalingPolicyOutput: ...

    def remove_auto_scaling_policy(self, *,
        ClusterId: str,
        InstanceGroupId: str
    ) -> EMRRemoveAutoScalingPolicyOutput: ...

    def remove_tags(self, *,
        ResourceId: str,
        TagKeys: List[str]
    ) -> EMRRemoveTagsOutput: ...

    def run_job_flow(self, *,
        Name: str,
        Instances: EMRJobFlowInstancesConfig,
        LogUri: str = ...,
        AdditionalInfo: str = ...,
        AmiVersion: str = ...,
        ReleaseLabel: str = ...,
        Steps: List[EMRStepConfig] = ...,
        BootstrapActions: List[EMRBootstrapActionConfig] = ...,
        SupportedProducts: List[str] = ...,
        NewSupportedProducts: List[EMRSupportedProductConfig] = ...,
        Applications: List[EMRApplication] = ...,
        Configurations: List[EMRConfiguration] = ...,
        VisibleToAllUsers: bool = ...,
        JobFlowRole: str = ...,
        ServiceRole: str = ...,
        Tags: List[EMRTag] = ...,
        SecurityConfiguration: str = ...,
        AutoScalingRole: str = ...,
        ScaleDownBehavior: str = ...,
        CustomAmiId: str = ...,
        EbsRootVolumeSize: int = ...,
        RepoUpgradeOnBoot: str = ...,
        KerberosAttributes: EMRKerberosAttributes = ...
    ) -> EMRRunJobFlowOutput: ...

    def set_termination_protection(self, *,
        JobFlowIds: List[str],
        TerminationProtected: bool
    ): ...

    def set_visible_to_all_users(self, *,
        JobFlowIds: List[str],
        VisibleToAllUsers: bool
    ): ...

    def terminate_job_flows(self, *,
        JobFlowIds: List[str]
    ): ...


class _EMRInstanceFleetConfig(TypedDict):
    InstanceFleetType: str


class EMRInstanceFleetConfig(_EMRInstanceFleetConfig, total=False):
    Name: str
    TargetOnDemandCapacity: int
    TargetSpotCapacity: int
    InstanceTypeConfigs: List[EMRInstanceTypeConfig]
    LaunchSpecifications: EMRInstanceFleetProvisioningSpecifications


class _EMRInstanceTypeConfig(TypedDict):
    InstanceType: str


class EMRInstanceTypeConfig(_EMRInstanceTypeConfig, total=False):
    WeightedCapacity: int
    BidPrice: str
    BidPriceAsPercentageOfOnDemandPrice: float
    EbsConfiguration: EMREbsConfiguration
    Configurations: List[EMRConfiguration]


class EMREbsConfiguration(TypedDict, total=False):
    EbsBlockDeviceConfigs: List[EMREbsBlockDeviceConfig]
    EbsOptimized: bool


class _EMREbsBlockDeviceConfig(TypedDict):
    VolumeSpecification: EMRVolumeSpecification


class EMREbsBlockDeviceConfig(_EMREbsBlockDeviceConfig, total=False):
    VolumesPerInstance: int


class _EMRVolumeSpecification(TypedDict):
    VolumeType: str
    SizeInGB: int


class EMRVolumeSpecification(_EMRVolumeSpecification, total=False):
    Iops: int


class EMRConfiguration(TypedDict, total=False):
    Classification: str
    Configurations: List[EMRConfiguration]
    Properties: Dict[str, str]


class EMRInstanceFleetProvisioningSpecifications(TypedDict):
    SpotSpecification: EMRSpotProvisioningSpecification


class _EMRSpotProvisioningSpecification(TypedDict):
    TimeoutDurationMinutes: int
    TimeoutAction: str


class EMRSpotProvisioningSpecification(_EMRSpotProvisioningSpecification, total=False):
    BlockDurationMinutes: int


class EMRAddInstanceFleetOutput(TypedDict, total=False):
    ClusterId: str
    InstanceFleetId: str


class _EMRInstanceGroupConfig(TypedDict):
    InstanceRole: str
    InstanceType: str
    InstanceCount: int


class EMRInstanceGroupConfig(_EMRInstanceGroupConfig, total=False):
    Name: str
    Market: str
    BidPrice: str
    Configurations: List[EMRConfiguration]
    EbsConfiguration: EMREbsConfiguration
    AutoScalingPolicy: EMRAutoScalingPolicy


class EMRAutoScalingPolicy(TypedDict):
    Constraints: EMRScalingConstraints
    Rules: List[EMRScalingRule]


class EMRScalingConstraints(TypedDict):
    MinCapacity: int
    MaxCapacity: int


class _EMRScalingRule(TypedDict):
    Name: str
    Action: EMRScalingAction
    Trigger: EMRScalingTrigger


class EMRScalingRule(_EMRScalingRule, total=False):
    Description: str


class _EMRScalingAction(TypedDict):
    SimpleScalingPolicyConfiguration: EMRSimpleScalingPolicyConfiguration


class EMRScalingAction(_EMRScalingAction, total=False):
    Market: str


class _EMRSimpleScalingPolicyConfiguration(TypedDict):
    ScalingAdjustment: int


class EMRSimpleScalingPolicyConfiguration(_EMRSimpleScalingPolicyConfiguration, total=False):
    AdjustmentType: str
    CoolDown: int


class EMRScalingTrigger(TypedDict):
    CloudWatchAlarmDefinition: EMRCloudWatchAlarmDefinition


class _EMRCloudWatchAlarmDefinition(TypedDict):
    ComparisonOperator: str
    MetricName: str
    Period: int
    Threshold: float


class EMRCloudWatchAlarmDefinition(_EMRCloudWatchAlarmDefinition, total=False):
    EvaluationPeriods: int
    Namespace: str
    Statistic: str
    Unit: str
    Dimensions: List[EMRMetricDimension]


class EMRMetricDimension(TypedDict, total=False):
    Key: str
    Value: str


class EMRAddInstanceGroupsOutput(TypedDict, total=False):
    JobFlowId: str
    InstanceGroupIds: List[str]


class _EMRStepConfig(TypedDict):
    Name: str
    HadoopJarStep: EMRHadoopJarStepConfig


class EMRStepConfig(_EMRStepConfig, total=False):
    ActionOnFailure: str


class _EMRHadoopJarStepConfig(TypedDict):
    Jar: str


class EMRHadoopJarStepConfig(_EMRHadoopJarStepConfig, total=False):
    Properties: List[EMRKeyValue]
    MainClass: str
    Args: List[str]


class EMRKeyValue(TypedDict, total=False):
    Key: str
    Value: str


class EMRAddJobFlowStepsOutput(TypedDict, total=False):
    StepIds: List[str]


class EMRTag(TypedDict, total=False):
    Key: str
    Value: str


class EMRAddTagsOutput(TypedDict, total=False):
    pass


class EMRCancelStepsOutput(TypedDict, total=False):
    CancelStepsInfoList: List[EMRCancelStepsInfo]


class EMRCancelStepsInfo(TypedDict, total=False):
    StepId: str
    Status: str
    Reason: str


class EMRCreateSecurityConfigurationOutput(TypedDict):
    Name: str
    CreationDateTime: datetime.datetime


class EMRDeleteSecurityConfigurationOutput(TypedDict, total=False):
    pass


class EMRDescribeClusterOutput(TypedDict, total=False):
    Cluster: EMRCluster


class EMRCluster(TypedDict, total=False):
    Id: str
    Name: str
    Status: EMRClusterStatus
    Ec2InstanceAttributes: EMREc2InstanceAttributes
    InstanceCollectionType: str
    LogUri: str
    RequestedAmiVersion: str
    RunningAmiVersion: str
    ReleaseLabel: str
    AutoTerminate: bool
    TerminationProtected: bool
    VisibleToAllUsers: bool
    Applications: List[EMRApplication]
    Tags: List[EMRTag]
    ServiceRole: str
    NormalizedInstanceHours: int
    MasterPublicDnsName: str
    Configurations: List[EMRConfiguration]
    SecurityConfiguration: str
    AutoScalingRole: str
    ScaleDownBehavior: str
    CustomAmiId: str
    EbsRootVolumeSize: int
    RepoUpgradeOnBoot: str
    KerberosAttributes: EMRKerberosAttributes


class EMRClusterStatus(TypedDict, total=False):
    State: str
    StateChangeReason: EMRClusterStateChangeReason
    Timeline: EMRClusterTimeline


class EMRClusterStateChangeReason(TypedDict, total=False):
    Code: str
    Message: str


class EMRClusterTimeline(TypedDict, total=False):
    CreationDateTime: datetime.datetime
    ReadyDateTime: datetime.datetime
    EndDateTime: datetime.datetime


class EMREc2InstanceAttributes(TypedDict, total=False):
    Ec2KeyName: str
    Ec2SubnetId: str
    RequestedEc2SubnetIds: List[str]
    Ec2AvailabilityZone: str
    RequestedEc2AvailabilityZones: List[str]
    IamInstanceProfile: str
    EmrManagedMasterSecurityGroup: str
    EmrManagedSlaveSecurityGroup: str
    ServiceAccessSecurityGroup: str
    AdditionalMasterSecurityGroups: List[str]
    AdditionalSlaveSecurityGroups: List[str]


class EMRApplication(TypedDict, total=False):
    Name: str
    Version: str
    Args: List[str]
    AdditionalInfo: Dict[str, str]


class _EMRKerberosAttributes(TypedDict):
    Realm: str
    KdcAdminPassword: str


class EMRKerberosAttributes(_EMRKerberosAttributes, total=False):
    CrossRealmTrustPrincipalPassword: str
    ADDomainJoinUser: str
    ADDomainJoinPassword: str


class EMRDescribeJobFlowsOutput(TypedDict, total=False):
    JobFlows: List[EMRJobFlowDetail]


class _EMRJobFlowDetail(TypedDict):
    JobFlowId: str
    Name: str
    ExecutionStatusDetail: EMRJobFlowExecutionStatusDetail
    Instances: EMRJobFlowInstancesDetail


class EMRJobFlowDetail(_EMRJobFlowDetail, total=False):
    LogUri: str
    AmiVersion: str
    Steps: List[EMRStepDetail]
    BootstrapActions: List[EMRBootstrapActionDetail]
    SupportedProducts: List[str]
    VisibleToAllUsers: bool
    JobFlowRole: str
    ServiceRole: str
    AutoScalingRole: str
    ScaleDownBehavior: str


class _EMRJobFlowExecutionStatusDetail(TypedDict):
    State: str
    CreationDateTime: datetime.datetime


class EMRJobFlowExecutionStatusDetail(_EMRJobFlowExecutionStatusDetail, total=False):
    StartDateTime: datetime.datetime
    ReadyDateTime: datetime.datetime
    EndDateTime: datetime.datetime
    LastStateChangeReason: str


class _EMRJobFlowInstancesDetail(TypedDict):
    MasterInstanceType: str
    SlaveInstanceType: str
    InstanceCount: int


class EMRJobFlowInstancesDetail(_EMRJobFlowInstancesDetail, total=False):
    MasterPublicDnsName: str
    MasterInstanceId: str
    InstanceGroups: List[EMRInstanceGroupDetail]
    NormalizedInstanceHours: int
    Ec2KeyName: str
    Ec2SubnetId: str
    Placement: EMRPlacementType
    KeepJobFlowAliveWhenNoSteps: bool
    TerminationProtected: bool
    HadoopVersion: str


class _EMRInstanceGroupDetail(TypedDict):
    Market: str
    InstanceRole: str
    InstanceType: str
    InstanceRequestCount: int
    InstanceRunningCount: int
    State: str
    CreationDateTime: datetime.datetime


class EMRInstanceGroupDetail(_EMRInstanceGroupDetail, total=False):
    InstanceGroupId: str
    Name: str
    BidPrice: str
    LastStateChangeReason: str
    StartDateTime: datetime.datetime
    ReadyDateTime: datetime.datetime
    EndDateTime: datetime.datetime


class EMRPlacementType(TypedDict, total=False):
    AvailabilityZone: str
    AvailabilityZones: List[str]


class EMRStepDetail(TypedDict):
    StepConfig: EMRStepConfig
    ExecutionStatusDetail: EMRStepExecutionStatusDetail


class _EMRStepExecutionStatusDetail(TypedDict):
    State: str
    CreationDateTime: datetime.datetime


class EMRStepExecutionStatusDetail(_EMRStepExecutionStatusDetail, total=False):
    StartDateTime: datetime.datetime
    EndDateTime: datetime.datetime
    LastStateChangeReason: str


class EMRBootstrapActionDetail(TypedDict, total=False):
    BootstrapActionConfig: EMRBootstrapActionConfig


class EMRBootstrapActionConfig(TypedDict):
    Name: str
    ScriptBootstrapAction: EMRScriptBootstrapActionConfig


class _EMRScriptBootstrapActionConfig(TypedDict):
    Path: str


class EMRScriptBootstrapActionConfig(_EMRScriptBootstrapActionConfig, total=False):
    Args: List[str]


class EMRDescribeSecurityConfigurationOutput(TypedDict, total=False):
    Name: str
    SecurityConfiguration: str
    CreationDateTime: datetime.datetime


class EMRDescribeStepOutput(TypedDict, total=False):
    Step: EMRStep


class EMRStep(TypedDict, total=False):
    Id: str
    Name: str
    Config: EMRHadoopStepConfig
    ActionOnFailure: str
    Status: EMRStepStatus


class EMRHadoopStepConfig(TypedDict, total=False):
    Jar: str
    Properties: Dict[str, str]
    MainClass: str
    Args: List[str]


class EMRStepStatus(TypedDict, total=False):
    State: str
    StateChangeReason: EMRStepStateChangeReason
    FailureDetails: EMRFailureDetails
    Timeline: EMRStepTimeline


class EMRStepStateChangeReason(TypedDict, total=False):
    Code: str
    Message: str


class EMRFailureDetails(TypedDict, total=False):
    Reason: str
    Message: str
    LogFile: str


class EMRStepTimeline(TypedDict, total=False):
    CreationDateTime: datetime.datetime
    StartDateTime: datetime.datetime
    EndDateTime: datetime.datetime


class EMRListBootstrapActionsOutput(TypedDict, total=False):
    BootstrapActions: List[EMRCommand]
    Marker: str


class EMRCommand(TypedDict, total=False):
    Name: str
    ScriptPath: str
    Args: List[str]


class EMRListClustersOutput(TypedDict, total=False):
    Clusters: List[EMRClusterSummary]
    Marker: str


class EMRClusterSummary(TypedDict, total=False):
    Id: str
    Name: str
    Status: EMRClusterStatus
    NormalizedInstanceHours: int


class EMRListInstanceFleetsOutput(TypedDict, total=False):
    InstanceFleets: List[EMRInstanceFleet]
    Marker: str


class EMRInstanceFleet(TypedDict, total=False):
    Id: str
    Name: str
    Status: EMRInstanceFleetStatus
    InstanceFleetType: str
    TargetOnDemandCapacity: int
    TargetSpotCapacity: int
    ProvisionedOnDemandCapacity: int
    ProvisionedSpotCapacity: int
    InstanceTypeSpecifications: List[EMRInstanceTypeSpecification]
    LaunchSpecifications: EMRInstanceFleetProvisioningSpecifications


class EMRInstanceFleetStatus(TypedDict, total=False):
    State: str
    StateChangeReason: EMRInstanceFleetStateChangeReason
    Timeline: EMRInstanceFleetTimeline


class EMRInstanceFleetStateChangeReason(TypedDict, total=False):
    Code: str
    Message: str


class EMRInstanceFleetTimeline(TypedDict, total=False):
    CreationDateTime: datetime.datetime
    ReadyDateTime: datetime.datetime
    EndDateTime: datetime.datetime


class EMRInstanceTypeSpecification(TypedDict, total=False):
    InstanceType: str
    WeightedCapacity: int
    BidPrice: str
    BidPriceAsPercentageOfOnDemandPrice: float
    Configurations: List[EMRConfiguration]
    EbsBlockDevices: List[EMREbsBlockDevice]
    EbsOptimized: bool


class EMREbsBlockDevice(TypedDict, total=False):
    VolumeSpecification: EMRVolumeSpecification
    Device: str


class EMRListInstanceGroupsOutput(TypedDict, total=False):
    InstanceGroups: List[EMRInstanceGroup]
    Marker: str


class EMRInstanceGroup(TypedDict, total=False):
    Id: str
    Name: str
    Market: str
    InstanceGroupType: str
    BidPrice: str
    InstanceType: str
    RequestedInstanceCount: int
    RunningInstanceCount: int
    Status: EMRInstanceGroupStatus
    Configurations: List[EMRConfiguration]
    ConfigurationsVersion: int
    LastSuccessfullyAppliedConfigurations: List[EMRConfiguration]
    LastSuccessfullyAppliedConfigurationsVersion: int
    EbsBlockDevices: List[EMREbsBlockDevice]
    EbsOptimized: bool
    ShrinkPolicy: EMRShrinkPolicy
    AutoScalingPolicy: EMRAutoScalingPolicyDescription


class EMRInstanceGroupStatus(TypedDict, total=False):
    State: str
    StateChangeReason: EMRInstanceGroupStateChangeReason
    Timeline: EMRInstanceGroupTimeline


class EMRInstanceGroupStateChangeReason(TypedDict, total=False):
    Code: str
    Message: str


class EMRInstanceGroupTimeline(TypedDict, total=False):
    CreationDateTime: datetime.datetime
    ReadyDateTime: datetime.datetime
    EndDateTime: datetime.datetime


class EMRShrinkPolicy(TypedDict, total=False):
    DecommissionTimeout: int
    InstanceResizePolicy: EMRInstanceResizePolicy


class EMRInstanceResizePolicy(TypedDict, total=False):
    InstancesToTerminate: List[str]
    InstancesToProtect: List[str]
    InstanceTerminationTimeout: int


class EMRAutoScalingPolicyDescription(TypedDict, total=False):
    Status: EMRAutoScalingPolicyStatus
    Constraints: EMRScalingConstraints
    Rules: List[EMRScalingRule]


class EMRAutoScalingPolicyStatus(TypedDict, total=False):
    State: str
    StateChangeReason: EMRAutoScalingPolicyStateChangeReason


class EMRAutoScalingPolicyStateChangeReason(TypedDict, total=False):
    Code: str
    Message: str


class EMRListInstancesOutput(TypedDict, total=False):
    Instances: List[EMRInstance]
    Marker: str


class EMRInstance(TypedDict, total=False):
    Id: str
    Ec2InstanceId: str
    PublicDnsName: str
    PublicIpAddress: str
    PrivateDnsName: str
    PrivateIpAddress: str
    Status: EMRInstanceStatus
    InstanceGroupId: str
    InstanceFleetId: str
    Market: str
    InstanceType: str
    EbsVolumes: List[EMREbsVolume]


class EMRInstanceStatus(TypedDict, total=False):
    State: str
    StateChangeReason: EMRInstanceStateChangeReason
    Timeline: EMRInstanceTimeline


class EMRInstanceStateChangeReason(TypedDict, total=False):
    Code: str
    Message: str


class EMRInstanceTimeline(TypedDict, total=False):
    CreationDateTime: datetime.datetime
    ReadyDateTime: datetime.datetime
    EndDateTime: datetime.datetime


class EMREbsVolume(TypedDict, total=False):
    Device: str
    VolumeId: str


class EMRListSecurityConfigurationsOutput(TypedDict, total=False):
    SecurityConfigurations: List[EMRSecurityConfigurationSummary]
    Marker: str


class EMRSecurityConfigurationSummary(TypedDict, total=False):
    Name: str
    CreationDateTime: datetime.datetime


class EMRListStepsOutput(TypedDict, total=False):
    Steps: List[EMRStepSummary]
    Marker: str


class EMRStepSummary(TypedDict, total=False):
    Id: str
    Name: str
    Config: EMRHadoopStepConfig
    ActionOnFailure: str
    Status: EMRStepStatus


class _EMRInstanceFleetModifyConfig(TypedDict):
    InstanceFleetId: str


class EMRInstanceFleetModifyConfig(_EMRInstanceFleetModifyConfig, total=False):
    TargetOnDemandCapacity: int
    TargetSpotCapacity: int


class _EMRInstanceGroupModifyConfig(TypedDict):
    InstanceGroupId: str


class EMRInstanceGroupModifyConfig(_EMRInstanceGroupModifyConfig, total=False):
    InstanceCount: int
    EC2InstanceIdsToTerminate: List[str]
    ShrinkPolicy: EMRShrinkPolicy
    Configurations: List[EMRConfiguration]


class EMRPutAutoScalingPolicyOutput(TypedDict, total=False):
    ClusterId: str
    InstanceGroupId: str
    AutoScalingPolicy: EMRAutoScalingPolicyDescription


class EMRRemoveAutoScalingPolicyOutput(TypedDict, total=False):
    pass


class EMRRemoveTagsOutput(TypedDict, total=False):
    pass


class EMRJobFlowInstancesConfig(TypedDict, total=False):
    MasterInstanceType: str
    SlaveInstanceType: str
    InstanceCount: int
    InstanceGroups: List[EMRInstanceGroupConfig]
    InstanceFleets: List[EMRInstanceFleetConfig]
    Ec2KeyName: str
    Placement: EMRPlacementType
    KeepJobFlowAliveWhenNoSteps: bool
    TerminationProtected: bool
    HadoopVersion: str
    Ec2SubnetId: str
    Ec2SubnetIds: List[str]
    EmrManagedMasterSecurityGroup: str
    EmrManagedSlaveSecurityGroup: str
    ServiceAccessSecurityGroup: str
    AdditionalMasterSecurityGroups: List[str]
    AdditionalSlaveSecurityGroups: List[str]


class EMRSupportedProductConfig(TypedDict, total=False):
    Name: str
    Args: List[str]


class EMRRunJobFlowOutput(TypedDict, total=False):
    JobFlowId: str


class ElasticsearchService(BaseClient):
    def add_tags(self, *,
        ARN: str,
        TagList: List[ElasticsearchServiceTag]
    ): ...

    def cancel_elasticsearch_service_software_update(self, *,
        DomainName: str
    ) -> ElasticsearchServiceCancelElasticsearchServiceSoftwareUpdateResponse: ...

    def create_elasticsearch_domain(self, *,
        DomainName: str,
        ElasticsearchVersion: str = ...,
        ElasticsearchClusterConfig: ElasticsearchServiceElasticsearchClusterConfig = ...,
        EBSOptions: ElasticsearchServiceEBSOptions = ...,
        AccessPolicies: str = ...,
        SnapshotOptions: ElasticsearchServiceSnapshotOptions = ...,
        VPCOptions: ElasticsearchServiceVPCOptions = ...,
        CognitoOptions: ElasticsearchServiceCognitoOptions = ...,
        EncryptionAtRestOptions: ElasticsearchServiceEncryptionAtRestOptions = ...,
        NodeToNodeEncryptionOptions: ElasticsearchServiceNodeToNodeEncryptionOptions = ...,
        AdvancedOptions: Dict[str, str] = ...,
        LogPublishingOptions: Dict[str, ElasticsearchServiceLogPublishingOption] = ...
    ) -> ElasticsearchServiceCreateElasticsearchDomainResponse: ...

    def delete_elasticsearch_domain(self, *,
        DomainName: str
    ) -> ElasticsearchServiceDeleteElasticsearchDomainResponse: ...

    def delete_elasticsearch_service_role(self): ...

    def describe_elasticsearch_domain(self, *,
        DomainName: str
    ) -> ElasticsearchServiceDescribeElasticsearchDomainResponse: ...

    def describe_elasticsearch_domain_config(self, *,
        DomainName: str
    ) -> ElasticsearchServiceDescribeElasticsearchDomainConfigResponse: ...

    def describe_elasticsearch_domains(self, *,
        DomainNames: List[str]
    ) -> ElasticsearchServiceDescribeElasticsearchDomainsResponse: ...

    def describe_elasticsearch_instance_type_limits(self, *,
        InstanceType: str,
        ElasticsearchVersion: str,
        DomainName: str = ...
    ) -> ElasticsearchServiceDescribeElasticsearchInstanceTypeLimitsResponse: ...

    def describe_reserved_elasticsearch_instance_offerings(self, *,
        ReservedElasticsearchInstanceOfferingId: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ElasticsearchServiceDescribeReservedElasticsearchInstanceOfferingsResponse: ...

    def describe_reserved_elasticsearch_instances(self, *,
        ReservedElasticsearchInstanceId: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ElasticsearchServiceDescribeReservedElasticsearchInstancesResponse: ...

    def get_compatible_elasticsearch_versions(self, *,
        DomainName: str = ...
    ) -> ElasticsearchServiceGetCompatibleElasticsearchVersionsResponse: ...

    def get_upgrade_history(self, *,
        DomainName: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ElasticsearchServiceGetUpgradeHistoryResponse: ...

    def get_upgrade_status(self, *,
        DomainName: str
    ) -> ElasticsearchServiceGetUpgradeStatusResponse: ...

    def list_domain_names(self) -> ElasticsearchServiceListDomainNamesResponse: ...

    def list_elasticsearch_instance_types(self, *,
        ElasticsearchVersion: str,
        DomainName: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ElasticsearchServiceListElasticsearchInstanceTypesResponse: ...

    def list_elasticsearch_versions(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ElasticsearchServiceListElasticsearchVersionsResponse: ...

    def list_tags(self, *,
        ARN: str
    ) -> ElasticsearchServiceListTagsResponse: ...

    def purchase_reserved_elasticsearch_instance_offering(self, *,
        ReservedElasticsearchInstanceOfferingId: str,
        ReservationName: str,
        InstanceCount: int = ...
    ) -> ElasticsearchServicePurchaseReservedElasticsearchInstanceOfferingResponse: ...

    def remove_tags(self, *,
        ARN: str,
        TagKeys: List[str]
    ): ...

    def start_elasticsearch_service_software_update(self, *,
        DomainName: str
    ) -> ElasticsearchServiceStartElasticsearchServiceSoftwareUpdateResponse: ...

    def update_elasticsearch_domain_config(self, *,
        DomainName: str,
        ElasticsearchClusterConfig: ElasticsearchServiceElasticsearchClusterConfig = ...,
        EBSOptions: ElasticsearchServiceEBSOptions = ...,
        SnapshotOptions: ElasticsearchServiceSnapshotOptions = ...,
        VPCOptions: ElasticsearchServiceVPCOptions = ...,
        CognitoOptions: ElasticsearchServiceCognitoOptions = ...,
        AdvancedOptions: Dict[str, str] = ...,
        AccessPolicies: str = ...,
        LogPublishingOptions: Dict[str, ElasticsearchServiceLogPublishingOption] = ...
    ) -> ElasticsearchServiceUpdateElasticsearchDomainConfigResponse: ...

    def upgrade_elasticsearch_domain(self, *,
        DomainName: str,
        TargetVersion: str,
        PerformCheckOnly: bool = ...
    ) -> ElasticsearchServiceUpgradeElasticsearchDomainResponse: ...


class ElasticsearchServiceTag(TypedDict):
    Key: str
    Value: str


class ElasticsearchServiceCancelElasticsearchServiceSoftwareUpdateResponse(TypedDict, total=False):
    ServiceSoftwareOptions: ElasticsearchServiceServiceSoftwareOptions


class ElasticsearchServiceServiceSoftwareOptions(TypedDict, total=False):
    CurrentVersion: str
    NewVersion: str
    UpdateAvailable: bool
    Cancellable: bool
    UpdateStatus: str
    Description: str
    AutomatedUpdateDate: datetime.datetime


class ElasticsearchServiceElasticsearchClusterConfig(TypedDict, total=False):
    InstanceType: str
    InstanceCount: int
    DedicatedMasterEnabled: bool
    ZoneAwarenessEnabled: bool
    ZoneAwarenessConfig: ElasticsearchServiceZoneAwarenessConfig
    DedicatedMasterType: str
    DedicatedMasterCount: int


class ElasticsearchServiceZoneAwarenessConfig(TypedDict, total=False):
    AvailabilityZoneCount: int


class ElasticsearchServiceEBSOptions(TypedDict, total=False):
    EBSEnabled: bool
    VolumeType: str
    VolumeSize: int
    Iops: int


class ElasticsearchServiceSnapshotOptions(TypedDict, total=False):
    AutomatedSnapshotStartHour: int


class ElasticsearchServiceVPCOptions(TypedDict, total=False):
    SubnetIds: List[str]
    SecurityGroupIds: List[str]


class ElasticsearchServiceCognitoOptions(TypedDict, total=False):
    Enabled: bool
    UserPoolId: str
    IdentityPoolId: str
    RoleArn: str


class ElasticsearchServiceEncryptionAtRestOptions(TypedDict, total=False):
    Enabled: bool
    KmsKeyId: str


class ElasticsearchServiceNodeToNodeEncryptionOptions(TypedDict, total=False):
    Enabled: bool


class ElasticsearchServiceLogPublishingOption(TypedDict, total=False):
    CloudWatchLogsLogGroupArn: str
    Enabled: bool


class ElasticsearchServiceCreateElasticsearchDomainResponse(TypedDict, total=False):
    DomainStatus: ElasticsearchServiceElasticsearchDomainStatus


class _ElasticsearchServiceElasticsearchDomainStatus(TypedDict):
    DomainId: str
    DomainName: str
    ARN: str
    ElasticsearchClusterConfig: ElasticsearchServiceElasticsearchClusterConfig


class ElasticsearchServiceElasticsearchDomainStatus(_ElasticsearchServiceElasticsearchDomainStatus, total=False):
    Created: bool
    Deleted: bool
    Endpoint: str
    Endpoints: Dict[str, str]
    Processing: bool
    UpgradeProcessing: bool
    ElasticsearchVersion: str
    EBSOptions: ElasticsearchServiceEBSOptions
    AccessPolicies: str
    SnapshotOptions: ElasticsearchServiceSnapshotOptions
    VPCOptions: ElasticsearchServiceVPCDerivedInfo
    CognitoOptions: ElasticsearchServiceCognitoOptions
    EncryptionAtRestOptions: ElasticsearchServiceEncryptionAtRestOptions
    NodeToNodeEncryptionOptions: ElasticsearchServiceNodeToNodeEncryptionOptions
    AdvancedOptions: Dict[str, str]
    LogPublishingOptions: Dict[str, ElasticsearchServiceLogPublishingOption]
    ServiceSoftwareOptions: ElasticsearchServiceServiceSoftwareOptions


class ElasticsearchServiceVPCDerivedInfo(TypedDict, total=False):
    VPCId: str
    SubnetIds: List[str]
    AvailabilityZones: List[str]
    SecurityGroupIds: List[str]


class ElasticsearchServiceDeleteElasticsearchDomainResponse(TypedDict, total=False):
    DomainStatus: ElasticsearchServiceElasticsearchDomainStatus


class ElasticsearchServiceDescribeElasticsearchDomainResponse(TypedDict):
    DomainStatus: ElasticsearchServiceElasticsearchDomainStatus


class ElasticsearchServiceDescribeElasticsearchDomainConfigResponse(TypedDict):
    DomainConfig: ElasticsearchServiceElasticsearchDomainConfig


class ElasticsearchServiceElasticsearchDomainConfig(TypedDict, total=False):
    ElasticsearchVersion: ElasticsearchServiceElasticsearchVersionStatus
    ElasticsearchClusterConfig: ElasticsearchServiceElasticsearchClusterConfigStatus
    EBSOptions: ElasticsearchServiceEBSOptionsStatus
    AccessPolicies: ElasticsearchServiceAccessPoliciesStatus
    SnapshotOptions: ElasticsearchServiceSnapshotOptionsStatus
    VPCOptions: ElasticsearchServiceVPCDerivedInfoStatus
    CognitoOptions: ElasticsearchServiceCognitoOptionsStatus
    EncryptionAtRestOptions: ElasticsearchServiceEncryptionAtRestOptionsStatus
    NodeToNodeEncryptionOptions: ElasticsearchServiceNodeToNodeEncryptionOptionsStatus
    AdvancedOptions: ElasticsearchServiceAdvancedOptionsStatus
    LogPublishingOptions: ElasticsearchServiceLogPublishingOptionsStatus


class ElasticsearchServiceElasticsearchVersionStatus(TypedDict):
    Options: str
    Status: ElasticsearchServiceOptionStatus


class _ElasticsearchServiceOptionStatus(TypedDict):
    CreationDate: datetime.datetime
    UpdateDate: datetime.datetime
    State: str


class ElasticsearchServiceOptionStatus(_ElasticsearchServiceOptionStatus, total=False):
    UpdateVersion: int
    PendingDeletion: bool


class ElasticsearchServiceElasticsearchClusterConfigStatus(TypedDict):
    Options: ElasticsearchServiceElasticsearchClusterConfig
    Status: ElasticsearchServiceOptionStatus


class ElasticsearchServiceEBSOptionsStatus(TypedDict):
    Options: ElasticsearchServiceEBSOptions
    Status: ElasticsearchServiceOptionStatus


class ElasticsearchServiceAccessPoliciesStatus(TypedDict):
    Options: str
    Status: ElasticsearchServiceOptionStatus


class ElasticsearchServiceSnapshotOptionsStatus(TypedDict):
    Options: ElasticsearchServiceSnapshotOptions
    Status: ElasticsearchServiceOptionStatus


class ElasticsearchServiceVPCDerivedInfoStatus(TypedDict):
    Options: ElasticsearchServiceVPCDerivedInfo
    Status: ElasticsearchServiceOptionStatus


class ElasticsearchServiceCognitoOptionsStatus(TypedDict):
    Options: ElasticsearchServiceCognitoOptions
    Status: ElasticsearchServiceOptionStatus


class ElasticsearchServiceEncryptionAtRestOptionsStatus(TypedDict):
    Options: ElasticsearchServiceEncryptionAtRestOptions
    Status: ElasticsearchServiceOptionStatus


class ElasticsearchServiceNodeToNodeEncryptionOptionsStatus(TypedDict):
    Options: ElasticsearchServiceNodeToNodeEncryptionOptions
    Status: ElasticsearchServiceOptionStatus


class ElasticsearchServiceAdvancedOptionsStatus(TypedDict):
    Options: Dict[str, str]
    Status: ElasticsearchServiceOptionStatus


class ElasticsearchServiceLogPublishingOptionsStatus(TypedDict, total=False):
    Options: Dict[str, ElasticsearchServiceLogPublishingOption]
    Status: ElasticsearchServiceOptionStatus


class ElasticsearchServiceDescribeElasticsearchDomainsResponse(TypedDict):
    DomainStatusList: List[ElasticsearchServiceElasticsearchDomainStatus]


class ElasticsearchServiceDescribeElasticsearchInstanceTypeLimitsResponse(TypedDict, total=False):
    LimitsByRole: Dict[str, ElasticsearchServiceLimits]


class ElasticsearchServiceLimits(TypedDict, total=False):
    StorageTypes: List[ElasticsearchServiceStorageType]
    InstanceLimits: ElasticsearchServiceInstanceLimits
    AdditionalLimits: List[ElasticsearchServiceAdditionalLimit]


class ElasticsearchServiceStorageType(TypedDict, total=False):
    StorageTypeName: str
    StorageSubTypeName: str
    StorageTypeLimits: List[ElasticsearchServiceStorageTypeLimit]


class ElasticsearchServiceStorageTypeLimit(TypedDict, total=False):
    LimitName: str
    LimitValues: List[str]


class ElasticsearchServiceInstanceLimits(TypedDict, total=False):
    InstanceCountLimits: ElasticsearchServiceInstanceCountLimits


class ElasticsearchServiceInstanceCountLimits(TypedDict, total=False):
    MinimumInstanceCount: int
    MaximumInstanceCount: int


class ElasticsearchServiceAdditionalLimit(TypedDict, total=False):
    LimitName: str
    LimitValues: List[str]


class ElasticsearchServiceDescribeReservedElasticsearchInstanceOfferingsResponse(TypedDict, total=False):
    NextToken: str
    ReservedElasticsearchInstanceOfferings: List[ElasticsearchServiceReservedElasticsearchInstanceOffering]


class ElasticsearchServiceReservedElasticsearchInstanceOffering(TypedDict, total=False):
    ReservedElasticsearchInstanceOfferingId: str
    ElasticsearchInstanceType: str
    Duration: int
    FixedPrice: float
    UsagePrice: float
    CurrencyCode: str
    PaymentOption: str
    RecurringCharges: List[ElasticsearchServiceRecurringCharge]


class ElasticsearchServiceRecurringCharge(TypedDict, total=False):
    RecurringChargeAmount: float
    RecurringChargeFrequency: str


class ElasticsearchServiceDescribeReservedElasticsearchInstancesResponse(TypedDict, total=False):
    NextToken: str
    ReservedElasticsearchInstances: List[ElasticsearchServiceReservedElasticsearchInstance]


class ElasticsearchServiceReservedElasticsearchInstance(TypedDict, total=False):
    ReservationName: str
    ReservedElasticsearchInstanceId: str
    ReservedElasticsearchInstanceOfferingId: str
    ElasticsearchInstanceType: str
    StartTime: datetime.datetime
    Duration: int
    FixedPrice: float
    UsagePrice: float
    CurrencyCode: str
    ElasticsearchInstanceCount: int
    State: str
    PaymentOption: str
    RecurringCharges: List[ElasticsearchServiceRecurringCharge]


class ElasticsearchServiceGetCompatibleElasticsearchVersionsResponse(TypedDict, total=False):
    CompatibleElasticsearchVersions: List[ElasticsearchServiceCompatibleVersionsMap]


class ElasticsearchServiceCompatibleVersionsMap(TypedDict, total=False):
    SourceVersion: str
    TargetVersions: List[str]


class ElasticsearchServiceGetUpgradeHistoryResponse(TypedDict, total=False):
    UpgradeHistories: List[ElasticsearchServiceUpgradeHistory]
    NextToken: str


class ElasticsearchServiceUpgradeHistory(TypedDict, total=False):
    UpgradeName: str
    StartTimestamp: datetime.datetime
    UpgradeStatus: str
    StepsList: List[ElasticsearchServiceUpgradeStepItem]


class ElasticsearchServiceUpgradeStepItem(TypedDict, total=False):
    UpgradeStep: str
    UpgradeStepStatus: str
    Issues: List[str]
    ProgressPercent: float


class ElasticsearchServiceGetUpgradeStatusResponse(TypedDict, total=False):
    UpgradeStep: str
    StepStatus: str
    UpgradeName: str


class ElasticsearchServiceListDomainNamesResponse(TypedDict, total=False):
    DomainNames: List[ElasticsearchServiceDomainInfo]


class ElasticsearchServiceDomainInfo(TypedDict, total=False):
    DomainName: str


class ElasticsearchServiceListElasticsearchInstanceTypesResponse(TypedDict, total=False):
    ElasticsearchInstanceTypes: List[str]
    NextToken: str


class ElasticsearchServiceListElasticsearchVersionsResponse(TypedDict, total=False):
    ElasticsearchVersions: List[str]
    NextToken: str


class ElasticsearchServiceListTagsResponse(TypedDict, total=False):
    TagList: List[ElasticsearchServiceTag]


class ElasticsearchServicePurchaseReservedElasticsearchInstanceOfferingResponse(TypedDict, total=False):
    ReservedElasticsearchInstanceId: str
    ReservationName: str


class ElasticsearchServiceStartElasticsearchServiceSoftwareUpdateResponse(TypedDict, total=False):
    ServiceSoftwareOptions: ElasticsearchServiceServiceSoftwareOptions


class ElasticsearchServiceUpdateElasticsearchDomainConfigResponse(TypedDict):
    DomainConfig: ElasticsearchServiceElasticsearchDomainConfig


class ElasticsearchServiceUpgradeElasticsearchDomainResponse(TypedDict, total=False):
    DomainName: str
    TargetVersion: str
    PerformCheckOnly: bool


class CloudWatchEvents(BaseClient):
    def delete_rule(self, *,
        Name: str,
        Force: bool = ...
    ): ...

    def describe_event_bus(self) -> CloudWatchEventsDescribeEventBusResponse: ...

    def describe_rule(self, *,
        Name: str
    ) -> CloudWatchEventsDescribeRuleResponse: ...

    def disable_rule(self, *,
        Name: str
    ): ...

    def enable_rule(self, *,
        Name: str
    ): ...

    def list_rule_names_by_target(self, *,
        TargetArn: str,
        NextToken: str = ...,
        Limit: int = ...
    ) -> CloudWatchEventsListRuleNamesByTargetResponse: ...

    def list_rules(self, *,
        NamePrefix: str = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> CloudWatchEventsListRulesResponse: ...

    def list_tags_for_resource(self, *,
        ResourceARN: str
    ) -> CloudWatchEventsListTagsForResourceResponse: ...

    def list_targets_by_rule(self, *,
        Rule: str,
        NextToken: str = ...,
        Limit: int = ...
    ) -> CloudWatchEventsListTargetsByRuleResponse: ...

    def put_events(self, *,
        Entries: List[CloudWatchEventsPutEventsRequestEntry]
    ) -> CloudWatchEventsPutEventsResponse: ...

    def put_permission(self, *,
        Action: str,
        Principal: str,
        StatementId: str,
        Condition: CloudWatchEventsCondition = ...
    ): ...

    def put_rule(self, *,
        Name: str,
        ScheduleExpression: str = ...,
        EventPattern: str = ...,
        State: str = ...,
        Description: str = ...,
        RoleArn: str = ...,
        Tags: List[CloudWatchEventsTag] = ...
    ) -> CloudWatchEventsPutRuleResponse: ...

    def put_targets(self, *,
        Rule: str,
        Targets: List[CloudWatchEventsTarget]
    ) -> CloudWatchEventsPutTargetsResponse: ...

    def remove_permission(self, *,
        StatementId: str
    ): ...

    def remove_targets(self, *,
        Rule: str,
        Ids: List[str],
        Force: bool = ...
    ) -> CloudWatchEventsRemoveTargetsResponse: ...

    def tag_resource(self, *,
        ResourceARN: str,
        Tags: List[CloudWatchEventsTag]
    ) -> CloudWatchEventsTagResourceResponse: ...

    def test_event_pattern(self, *,
        EventPattern: str,
        Event: str
    ) -> CloudWatchEventsTestEventPatternResponse: ...

    def untag_resource(self, *,
        ResourceARN: str,
        TagKeys: List[str]
    ) -> CloudWatchEventsUntagResourceResponse: ...


class CloudWatchEventsDescribeEventBusResponse(TypedDict, total=False):
    Name: str
    Arn: str
    Policy: str


class CloudWatchEventsDescribeRuleResponse(TypedDict, total=False):
    Name: str
    Arn: str
    EventPattern: str
    ScheduleExpression: str
    State: str
    Description: str
    RoleArn: str
    ManagedBy: str


class CloudWatchEventsListRuleNamesByTargetResponse(TypedDict, total=False):
    RuleNames: List[str]
    NextToken: str


class CloudWatchEventsListRulesResponse(TypedDict, total=False):
    Rules: List[CloudWatchEventsRule]
    NextToken: str


class CloudWatchEventsRule(TypedDict, total=False):
    Name: str
    Arn: str
    EventPattern: str
    State: str
    Description: str
    ScheduleExpression: str
    RoleArn: str
    ManagedBy: str


class CloudWatchEventsListTagsForResourceResponse(TypedDict, total=False):
    Tags: List[CloudWatchEventsTag]


class CloudWatchEventsTag(TypedDict):
    Key: str
    Value: str


class CloudWatchEventsListTargetsByRuleResponse(TypedDict, total=False):
    Targets: List[CloudWatchEventsTarget]
    NextToken: str


class _CloudWatchEventsTarget(TypedDict):
    Id: str
    Arn: str


class CloudWatchEventsTarget(_CloudWatchEventsTarget, total=False):
    RoleArn: str
    Input: str
    InputPath: str
    InputTransformer: CloudWatchEventsInputTransformer
    KinesisParameters: CloudWatchEventsKinesisParameters
    RunCommandParameters: CloudWatchEventsRunCommandParameters
    EcsParameters: CloudWatchEventsEcsParameters
    BatchParameters: CloudWatchEventsBatchParameters
    SqsParameters: CloudWatchEventsSqsParameters


class _CloudWatchEventsInputTransformer(TypedDict):
    InputTemplate: str


class CloudWatchEventsInputTransformer(_CloudWatchEventsInputTransformer, total=False):
    InputPathsMap: Dict[str, str]


class CloudWatchEventsKinesisParameters(TypedDict):
    PartitionKeyPath: str


class CloudWatchEventsRunCommandParameters(TypedDict):
    RunCommandTargets: List[CloudWatchEventsRunCommandTarget]


class CloudWatchEventsRunCommandTarget(TypedDict):
    Key: str
    Values: List[str]


class _CloudWatchEventsEcsParameters(TypedDict):
    TaskDefinitionArn: str


class CloudWatchEventsEcsParameters(_CloudWatchEventsEcsParameters, total=False):
    TaskCount: int
    LaunchType: str
    NetworkConfiguration: CloudWatchEventsNetworkConfiguration
    PlatformVersion: str
    Group: str


class CloudWatchEventsNetworkConfiguration(TypedDict, total=False):
    awsvpcConfiguration: CloudWatchEventsAwsVpcConfiguration


class _CloudWatchEventsAwsVpcConfiguration(TypedDict):
    Subnets: List[str]


class CloudWatchEventsAwsVpcConfiguration(_CloudWatchEventsAwsVpcConfiguration, total=False):
    SecurityGroups: List[str]
    AssignPublicIp: str


class _CloudWatchEventsBatchParameters(TypedDict):
    JobDefinition: str
    JobName: str


class CloudWatchEventsBatchParameters(_CloudWatchEventsBatchParameters, total=False):
    ArrayProperties: CloudWatchEventsBatchArrayProperties
    RetryStrategy: CloudWatchEventsBatchRetryStrategy


class CloudWatchEventsBatchArrayProperties(TypedDict, total=False):
    Size: int


class CloudWatchEventsBatchRetryStrategy(TypedDict, total=False):
    Attempts: int


class CloudWatchEventsSqsParameters(TypedDict, total=False):
    MessageGroupId: str


class CloudWatchEventsPutEventsRequestEntry(TypedDict, total=False):
    Time: datetime.datetime
    Source: str
    Resources: List[str]
    DetailType: str
    Detail: str


class CloudWatchEventsPutEventsResponse(TypedDict, total=False):
    FailedEntryCount: int
    Entries: List[CloudWatchEventsPutEventsResultEntry]


class CloudWatchEventsPutEventsResultEntry(TypedDict, total=False):
    EventId: str
    ErrorCode: str
    ErrorMessage: str


class CloudWatchEventsCondition(TypedDict):
    Type: str
    Key: str
    Value: str


class CloudWatchEventsPutRuleResponse(TypedDict, total=False):
    RuleArn: str


class CloudWatchEventsPutTargetsResponse(TypedDict, total=False):
    FailedEntryCount: int
    FailedEntries: List[CloudWatchEventsPutTargetsResultEntry]


class CloudWatchEventsPutTargetsResultEntry(TypedDict, total=False):
    TargetId: str
    ErrorCode: str
    ErrorMessage: str


class CloudWatchEventsRemoveTargetsResponse(TypedDict, total=False):
    FailedEntryCount: int
    FailedEntries: List[CloudWatchEventsRemoveTargetsResultEntry]


class CloudWatchEventsRemoveTargetsResultEntry(TypedDict, total=False):
    TargetId: str
    ErrorCode: str
    ErrorMessage: str


class CloudWatchEventsTagResourceResponse(TypedDict, total=False):
    pass


class CloudWatchEventsTestEventPatternResponse(TypedDict, total=False):
    Result: bool


class CloudWatchEventsUntagResourceResponse(TypedDict, total=False):
    pass


class Firehose(BaseClient):
    def create_delivery_stream(self, *,
        DeliveryStreamName: str,
        DeliveryStreamType: str = ...,
        KinesisStreamSourceConfiguration: FirehoseKinesisStreamSourceConfiguration = ...,
        S3DestinationConfiguration: FirehoseS3DestinationConfiguration = ...,
        ExtendedS3DestinationConfiguration: FirehoseExtendedS3DestinationConfiguration = ...,
        RedshiftDestinationConfiguration: FirehoseRedshiftDestinationConfiguration = ...,
        ElasticsearchDestinationConfiguration: FirehoseElasticsearchDestinationConfiguration = ...,
        SplunkDestinationConfiguration: FirehoseSplunkDestinationConfiguration = ...,
        Tags: List[FirehoseTag] = ...
    ) -> FirehoseCreateDeliveryStreamOutput: ...

    def delete_delivery_stream(self, *,
        DeliveryStreamName: str
    ) -> FirehoseDeleteDeliveryStreamOutput: ...

    def describe_delivery_stream(self, *,
        DeliveryStreamName: str,
        Limit: int = ...,
        ExclusiveStartDestinationId: str = ...
    ) -> FirehoseDescribeDeliveryStreamOutput: ...

    def list_delivery_streams(self, *,
        Limit: int = ...,
        DeliveryStreamType: str = ...,
        ExclusiveStartDeliveryStreamName: str = ...
    ) -> FirehoseListDeliveryStreamsOutput: ...

    def list_tags_for_delivery_stream(self, *,
        DeliveryStreamName: str,
        ExclusiveStartTagKey: str = ...,
        Limit: int = ...
    ) -> FirehoseListTagsForDeliveryStreamOutput: ...

    def put_record(self, *,
        DeliveryStreamName: str,
        Record: FirehoseRecord
    ) -> FirehosePutRecordOutput: ...

    def put_record_batch(self, *,
        DeliveryStreamName: str,
        Records: List[FirehoseRecord]
    ) -> FirehosePutRecordBatchOutput: ...

    def start_delivery_stream_encryption(self, *,
        DeliveryStreamName: str
    ) -> FirehoseStartDeliveryStreamEncryptionOutput: ...

    def stop_delivery_stream_encryption(self, *,
        DeliveryStreamName: str
    ) -> FirehoseStopDeliveryStreamEncryptionOutput: ...

    def tag_delivery_stream(self, *,
        DeliveryStreamName: str,
        Tags: List[FirehoseTag]
    ) -> FirehoseTagDeliveryStreamOutput: ...

    def untag_delivery_stream(self, *,
        DeliveryStreamName: str,
        TagKeys: List[str]
    ) -> FirehoseUntagDeliveryStreamOutput: ...

    def update_destination(self, *,
        DeliveryStreamName: str,
        CurrentDeliveryStreamVersionId: str,
        DestinationId: str,
        S3DestinationUpdate: FirehoseS3DestinationUpdate = ...,
        ExtendedS3DestinationUpdate: FirehoseExtendedS3DestinationUpdate = ...,
        RedshiftDestinationUpdate: FirehoseRedshiftDestinationUpdate = ...,
        ElasticsearchDestinationUpdate: FirehoseElasticsearchDestinationUpdate = ...,
        SplunkDestinationUpdate: FirehoseSplunkDestinationUpdate = ...
    ) -> FirehoseUpdateDestinationOutput: ...


class FirehoseKinesisStreamSourceConfiguration(TypedDict):
    KinesisStreamARN: str
    RoleARN: str


class _FirehoseS3DestinationConfiguration(TypedDict):
    RoleARN: str
    BucketARN: str


class FirehoseS3DestinationConfiguration(_FirehoseS3DestinationConfiguration, total=False):
    Prefix: str
    ErrorOutputPrefix: str
    BufferingHints: FirehoseBufferingHints
    CompressionFormat: str
    EncryptionConfiguration: FirehoseEncryptionConfiguration
    CloudWatchLoggingOptions: FirehoseCloudWatchLoggingOptions


class FirehoseBufferingHints(TypedDict, total=False):
    SizeInMBs: int
    IntervalInSeconds: int


class FirehoseEncryptionConfiguration(TypedDict, total=False):
    NoEncryptionConfig: str
    KMSEncryptionConfig: FirehoseKMSEncryptionConfig


class FirehoseKMSEncryptionConfig(TypedDict):
    AWSKMSKeyARN: str


class FirehoseCloudWatchLoggingOptions(TypedDict, total=False):
    Enabled: bool
    LogGroupName: str
    LogStreamName: str


class _FirehoseExtendedS3DestinationConfiguration(TypedDict):
    RoleARN: str
    BucketARN: str


class FirehoseExtendedS3DestinationConfiguration(_FirehoseExtendedS3DestinationConfiguration, total=False):
    Prefix: str
    ErrorOutputPrefix: str
    BufferingHints: FirehoseBufferingHints
    CompressionFormat: str
    EncryptionConfiguration: FirehoseEncryptionConfiguration
    CloudWatchLoggingOptions: FirehoseCloudWatchLoggingOptions
    ProcessingConfiguration: FirehoseProcessingConfiguration
    S3BackupMode: str
    S3BackupConfiguration: FirehoseS3DestinationConfiguration
    DataFormatConversionConfiguration: FirehoseDataFormatConversionConfiguration


class FirehoseProcessingConfiguration(TypedDict, total=False):
    Enabled: bool
    Processors: List[FirehoseProcessor]


class _FirehoseProcessor(TypedDict):
    Type: str


class FirehoseProcessor(_FirehoseProcessor, total=False):
    Parameters: List[FirehoseProcessorParameter]


class FirehoseProcessorParameter(TypedDict):
    ParameterName: str
    ParameterValue: str


class FirehoseDataFormatConversionConfiguration(TypedDict, total=False):
    SchemaConfiguration: FirehoseSchemaConfiguration
    InputFormatConfiguration: FirehoseInputFormatConfiguration
    OutputFormatConfiguration: FirehoseOutputFormatConfiguration
    Enabled: bool


class FirehoseSchemaConfiguration(TypedDict, total=False):
    RoleARN: str
    CatalogId: str
    DatabaseName: str
    TableName: str
    Region: str
    VersionId: str


class FirehoseInputFormatConfiguration(TypedDict, total=False):
    Deserializer: FirehoseDeserializer


class FirehoseDeserializer(TypedDict, total=False):
    OpenXJsonSerDe: FirehoseOpenXJsonSerDe
    HiveJsonSerDe: FirehoseHiveJsonSerDe


class FirehoseOpenXJsonSerDe(TypedDict, total=False):
    ConvertDotsInJsonKeysToUnderscores: bool
    CaseInsensitive: bool
    ColumnToJsonKeyMappings: Dict[str, str]


class FirehoseHiveJsonSerDe(TypedDict, total=False):
    TimestampFormats: List[str]


class FirehoseOutputFormatConfiguration(TypedDict, total=False):
    Serializer: FirehoseSerializer


class FirehoseSerializer(TypedDict, total=False):
    ParquetSerDe: FirehoseParquetSerDe
    OrcSerDe: FirehoseOrcSerDe


class FirehoseParquetSerDe(TypedDict, total=False):
    BlockSizeBytes: int
    PageSizeBytes: int
    Compression: str
    EnableDictionaryCompression: bool
    MaxPaddingBytes: int
    WriterVersion: str


class FirehoseOrcSerDe(TypedDict, total=False):
    StripeSizeBytes: int
    BlockSizeBytes: int
    RowIndexStride: int
    EnablePadding: bool
    PaddingTolerance: float
    Compression: str
    BloomFilterColumns: List[str]
    BloomFilterFalsePositiveProbability: float
    DictionaryKeyThreshold: float
    FormatVersion: str


class _FirehoseRedshiftDestinationConfiguration(TypedDict):
    RoleARN: str
    ClusterJDBCURL: str
    CopyCommand: FirehoseCopyCommand
    Username: str
    Password: str
    S3Configuration: FirehoseS3DestinationConfiguration


class FirehoseRedshiftDestinationConfiguration(_FirehoseRedshiftDestinationConfiguration, total=False):
    RetryOptions: FirehoseRedshiftRetryOptions
    ProcessingConfiguration: FirehoseProcessingConfiguration
    S3BackupMode: str
    S3BackupConfiguration: FirehoseS3DestinationConfiguration
    CloudWatchLoggingOptions: FirehoseCloudWatchLoggingOptions


class _FirehoseCopyCommand(TypedDict):
    DataTableName: str


class FirehoseCopyCommand(_FirehoseCopyCommand, total=False):
    DataTableColumns: str
    CopyOptions: str


class FirehoseRedshiftRetryOptions(TypedDict, total=False):
    DurationInSeconds: int


class _FirehoseElasticsearchDestinationConfiguration(TypedDict):
    RoleARN: str
    DomainARN: str
    IndexName: str
    TypeName: str
    S3Configuration: FirehoseS3DestinationConfiguration


class FirehoseElasticsearchDestinationConfiguration(_FirehoseElasticsearchDestinationConfiguration, total=False):
    IndexRotationPeriod: str
    BufferingHints: FirehoseElasticsearchBufferingHints
    RetryOptions: FirehoseElasticsearchRetryOptions
    S3BackupMode: str
    ProcessingConfiguration: FirehoseProcessingConfiguration
    CloudWatchLoggingOptions: FirehoseCloudWatchLoggingOptions


class FirehoseElasticsearchBufferingHints(TypedDict, total=False):
    IntervalInSeconds: int
    SizeInMBs: int


class FirehoseElasticsearchRetryOptions(TypedDict, total=False):
    DurationInSeconds: int


class _FirehoseSplunkDestinationConfiguration(TypedDict):
    HECEndpoint: str
    HECEndpointType: str
    HECToken: str
    S3Configuration: FirehoseS3DestinationConfiguration


class FirehoseSplunkDestinationConfiguration(_FirehoseSplunkDestinationConfiguration, total=False):
    HECAcknowledgmentTimeoutInSeconds: int
    RetryOptions: FirehoseSplunkRetryOptions
    S3BackupMode: str
    ProcessingConfiguration: FirehoseProcessingConfiguration
    CloudWatchLoggingOptions: FirehoseCloudWatchLoggingOptions


class FirehoseSplunkRetryOptions(TypedDict, total=False):
    DurationInSeconds: int


class _FirehoseTag(TypedDict):
    Key: str


class FirehoseTag(_FirehoseTag, total=False):
    Value: str


class FirehoseCreateDeliveryStreamOutput(TypedDict, total=False):
    DeliveryStreamARN: str


class FirehoseDeleteDeliveryStreamOutput(TypedDict, total=False):
    pass


class FirehoseDescribeDeliveryStreamOutput(TypedDict):
    DeliveryStreamDescription: FirehoseDeliveryStreamDescription


class _FirehoseDeliveryStreamDescription(TypedDict):
    DeliveryStreamName: str
    DeliveryStreamARN: str
    DeliveryStreamStatus: str
    DeliveryStreamType: str
    VersionId: str
    Destinations: List[FirehoseDestinationDescription]
    HasMoreDestinations: bool


class FirehoseDeliveryStreamDescription(_FirehoseDeliveryStreamDescription, total=False):
    DeliveryStreamEncryptionConfiguration: FirehoseDeliveryStreamEncryptionConfiguration
    CreateTimestamp: datetime.datetime
    LastUpdateTimestamp: datetime.datetime
    Source: FirehoseSourceDescription


class FirehoseDeliveryStreamEncryptionConfiguration(TypedDict, total=False):
    Status: str


class FirehoseSourceDescription(TypedDict, total=False):
    KinesisStreamSourceDescription: FirehoseKinesisStreamSourceDescription


class FirehoseKinesisStreamSourceDescription(TypedDict, total=False):
    KinesisStreamARN: str
    RoleARN: str
    DeliveryStartTimestamp: datetime.datetime


class _FirehoseDestinationDescription(TypedDict):
    DestinationId: str


class FirehoseDestinationDescription(_FirehoseDestinationDescription, total=False):
    S3DestinationDescription: FirehoseS3DestinationDescription
    ExtendedS3DestinationDescription: FirehoseExtendedS3DestinationDescription
    RedshiftDestinationDescription: FirehoseRedshiftDestinationDescription
    ElasticsearchDestinationDescription: FirehoseElasticsearchDestinationDescription
    SplunkDestinationDescription: FirehoseSplunkDestinationDescription


class _FirehoseS3DestinationDescription(TypedDict):
    RoleARN: str
    BucketARN: str
    BufferingHints: FirehoseBufferingHints
    CompressionFormat: str
    EncryptionConfiguration: FirehoseEncryptionConfiguration


class FirehoseS3DestinationDescription(_FirehoseS3DestinationDescription, total=False):
    Prefix: str
    ErrorOutputPrefix: str
    CloudWatchLoggingOptions: FirehoseCloudWatchLoggingOptions


class _FirehoseExtendedS3DestinationDescription(TypedDict):
    RoleARN: str
    BucketARN: str
    BufferingHints: FirehoseBufferingHints
    CompressionFormat: str
    EncryptionConfiguration: FirehoseEncryptionConfiguration


class FirehoseExtendedS3DestinationDescription(_FirehoseExtendedS3DestinationDescription, total=False):
    Prefix: str
    ErrorOutputPrefix: str
    CloudWatchLoggingOptions: FirehoseCloudWatchLoggingOptions
    ProcessingConfiguration: FirehoseProcessingConfiguration
    S3BackupMode: str
    S3BackupDescription: FirehoseS3DestinationDescription
    DataFormatConversionConfiguration: FirehoseDataFormatConversionConfiguration


class _FirehoseRedshiftDestinationDescription(TypedDict):
    RoleARN: str
    ClusterJDBCURL: str
    CopyCommand: FirehoseCopyCommand
    Username: str
    S3DestinationDescription: FirehoseS3DestinationDescription


class FirehoseRedshiftDestinationDescription(_FirehoseRedshiftDestinationDescription, total=False):
    RetryOptions: FirehoseRedshiftRetryOptions
    ProcessingConfiguration: FirehoseProcessingConfiguration
    S3BackupMode: str
    S3BackupDescription: FirehoseS3DestinationDescription
    CloudWatchLoggingOptions: FirehoseCloudWatchLoggingOptions


class FirehoseElasticsearchDestinationDescription(TypedDict, total=False):
    RoleARN: str
    DomainARN: str
    IndexName: str
    TypeName: str
    IndexRotationPeriod: str
    BufferingHints: FirehoseElasticsearchBufferingHints
    RetryOptions: FirehoseElasticsearchRetryOptions
    S3BackupMode: str
    S3DestinationDescription: FirehoseS3DestinationDescription
    ProcessingConfiguration: FirehoseProcessingConfiguration
    CloudWatchLoggingOptions: FirehoseCloudWatchLoggingOptions


class FirehoseSplunkDestinationDescription(TypedDict, total=False):
    HECEndpoint: str
    HECEndpointType: str
    HECToken: str
    HECAcknowledgmentTimeoutInSeconds: int
    RetryOptions: FirehoseSplunkRetryOptions
    S3BackupMode: str
    S3DestinationDescription: FirehoseS3DestinationDescription
    ProcessingConfiguration: FirehoseProcessingConfiguration
    CloudWatchLoggingOptions: FirehoseCloudWatchLoggingOptions


class FirehoseListDeliveryStreamsOutput(TypedDict):
    DeliveryStreamNames: List[str]
    HasMoreDeliveryStreams: bool


class FirehoseListTagsForDeliveryStreamOutput(TypedDict):
    Tags: List[FirehoseTag]
    HasMoreTags: bool


class FirehoseRecord(TypedDict):
    Data: bytes


class _FirehosePutRecordOutput(TypedDict):
    RecordId: str


class FirehosePutRecordOutput(_FirehosePutRecordOutput, total=False):
    Encrypted: bool


class _FirehosePutRecordBatchOutput(TypedDict):
    FailedPutCount: int
    RequestResponses: List[FirehosePutRecordBatchResponseEntry]


class FirehosePutRecordBatchOutput(_FirehosePutRecordBatchOutput, total=False):
    Encrypted: bool


class FirehosePutRecordBatchResponseEntry(TypedDict, total=False):
    RecordId: str
    ErrorCode: str
    ErrorMessage: str


class FirehoseStartDeliveryStreamEncryptionOutput(TypedDict, total=False):
    pass


class FirehoseStopDeliveryStreamEncryptionOutput(TypedDict, total=False):
    pass


class FirehoseTagDeliveryStreamOutput(TypedDict, total=False):
    pass


class FirehoseUntagDeliveryStreamOutput(TypedDict, total=False):
    pass


class FirehoseS3DestinationUpdate(TypedDict, total=False):
    RoleARN: str
    BucketARN: str
    Prefix: str
    ErrorOutputPrefix: str
    BufferingHints: FirehoseBufferingHints
    CompressionFormat: str
    EncryptionConfiguration: FirehoseEncryptionConfiguration
    CloudWatchLoggingOptions: FirehoseCloudWatchLoggingOptions


class FirehoseExtendedS3DestinationUpdate(TypedDict, total=False):
    RoleARN: str
    BucketARN: str
    Prefix: str
    ErrorOutputPrefix: str
    BufferingHints: FirehoseBufferingHints
    CompressionFormat: str
    EncryptionConfiguration: FirehoseEncryptionConfiguration
    CloudWatchLoggingOptions: FirehoseCloudWatchLoggingOptions
    ProcessingConfiguration: FirehoseProcessingConfiguration
    S3BackupMode: str
    S3BackupUpdate: FirehoseS3DestinationUpdate
    DataFormatConversionConfiguration: FirehoseDataFormatConversionConfiguration


class FirehoseRedshiftDestinationUpdate(TypedDict, total=False):
    RoleARN: str
    ClusterJDBCURL: str
    CopyCommand: FirehoseCopyCommand
    Username: str
    Password: str
    RetryOptions: FirehoseRedshiftRetryOptions
    S3Update: FirehoseS3DestinationUpdate
    ProcessingConfiguration: FirehoseProcessingConfiguration
    S3BackupMode: str
    S3BackupUpdate: FirehoseS3DestinationUpdate
    CloudWatchLoggingOptions: FirehoseCloudWatchLoggingOptions


class FirehoseElasticsearchDestinationUpdate(TypedDict, total=False):
    RoleARN: str
    DomainARN: str
    IndexName: str
    TypeName: str
    IndexRotationPeriod: str
    BufferingHints: FirehoseElasticsearchBufferingHints
    RetryOptions: FirehoseElasticsearchRetryOptions
    S3Update: FirehoseS3DestinationUpdate
    ProcessingConfiguration: FirehoseProcessingConfiguration
    CloudWatchLoggingOptions: FirehoseCloudWatchLoggingOptions


class FirehoseSplunkDestinationUpdate(TypedDict, total=False):
    HECEndpoint: str
    HECEndpointType: str
    HECToken: str
    HECAcknowledgmentTimeoutInSeconds: int
    RetryOptions: FirehoseSplunkRetryOptions
    S3BackupMode: str
    S3Update: FirehoseS3DestinationUpdate
    ProcessingConfiguration: FirehoseProcessingConfiguration
    CloudWatchLoggingOptions: FirehoseCloudWatchLoggingOptions


class FirehoseUpdateDestinationOutput(TypedDict, total=False):
    pass


class FMS(BaseClient):
    def associate_admin_account(self, *,
        AdminAccount: str
    ): ...

    def delete_notification_channel(self): ...

    def delete_policy(self, *,
        PolicyId: str,
        DeleteAllPolicyResources: bool = ...
    ): ...

    def disassociate_admin_account(self): ...

    def get_admin_account(self) -> FMSGetAdminAccountResponse: ...

    def get_compliance_detail(self, *,
        PolicyId: str,
        MemberAccount: str
    ) -> FMSGetComplianceDetailResponse: ...

    def get_notification_channel(self) -> FMSGetNotificationChannelResponse: ...

    def get_policy(self, *,
        PolicyId: str
    ) -> FMSGetPolicyResponse: ...

    def get_protection_status(self, *,
        PolicyId: str,
        MemberAccountId: str = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> FMSGetProtectionStatusResponse: ...

    def list_compliance_status(self, *,
        PolicyId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> FMSListComplianceStatusResponse: ...

    def list_member_accounts(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> FMSListMemberAccountsResponse: ...

    def list_policies(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> FMSListPoliciesResponse: ...

    def put_notification_channel(self, *,
        SnsTopicArn: str,
        SnsRoleName: str
    ): ...

    def put_policy(self, *,
        Policy: FMSPolicy
    ) -> FMSPutPolicyResponse: ...


class FMSGetAdminAccountResponse(TypedDict, total=False):
    AdminAccount: str
    RoleStatus: str


class FMSGetComplianceDetailResponse(TypedDict, total=False):
    PolicyComplianceDetail: FMSPolicyComplianceDetail


class FMSPolicyComplianceDetail(TypedDict, total=False):
    PolicyOwner: str
    PolicyId: str
    MemberAccount: str
    Violators: List[FMSComplianceViolator]
    EvaluationLimitExceeded: bool
    ExpiredAt: datetime.datetime
    IssueInfoMap: Dict[str, str]


class FMSComplianceViolator(TypedDict, total=False):
    ResourceId: str
    ViolationReason: str
    ResourceType: str


class FMSGetNotificationChannelResponse(TypedDict, total=False):
    SnsTopicArn: str
    SnsRoleName: str


class FMSGetPolicyResponse(TypedDict, total=False):
    Policy: FMSPolicy
    PolicyArn: str


class _FMSPolicy(TypedDict):
    PolicyName: str
    SecurityServicePolicyData: FMSSecurityServicePolicyData
    ResourceType: str
    ExcludeResourceTags: bool
    RemediationEnabled: bool


class FMSPolicy(_FMSPolicy, total=False):
    PolicyId: str
    PolicyUpdateToken: str
    ResourceTypeList: List[str]
    ResourceTags: List[FMSResourceTag]
    IncludeMap: Dict[str, List[str]]
    ExcludeMap: Dict[str, List[str]]


class _FMSSecurityServicePolicyData(TypedDict):
    Type: str


class FMSSecurityServicePolicyData(_FMSSecurityServicePolicyData, total=False):
    ManagedServiceData: str


class _FMSResourceTag(TypedDict):
    Key: str


class FMSResourceTag(_FMSResourceTag, total=False):
    Value: str


class FMSGetProtectionStatusResponse(TypedDict, total=False):
    AdminAccountId: str
    ServiceType: str
    Data: str
    NextToken: str


class FMSListComplianceStatusResponse(TypedDict, total=False):
    PolicyComplianceStatusList: List[FMSPolicyComplianceStatus]
    NextToken: str


class FMSPolicyComplianceStatus(TypedDict, total=False):
    PolicyOwner: str
    PolicyId: str
    PolicyName: str
    MemberAccount: str
    EvaluationResults: List[FMSEvaluationResult]
    LastUpdated: datetime.datetime
    IssueInfoMap: Dict[str, str]


class FMSEvaluationResult(TypedDict, total=False):
    ComplianceStatus: str
    ViolatorCount: int
    EvaluationLimitExceeded: bool


class FMSListMemberAccountsResponse(TypedDict, total=False):
    MemberAccounts: List[str]
    NextToken: str


class FMSListPoliciesResponse(TypedDict, total=False):
    PolicyList: List[FMSPolicySummary]
    NextToken: str


class FMSPolicySummary(TypedDict, total=False):
    PolicyArn: str
    PolicyId: str
    PolicyName: str
    ResourceType: str
    SecurityServiceType: str
    RemediationEnabled: bool


class FMSPutPolicyResponse(TypedDict, total=False):
    Policy: FMSPolicy
    PolicyArn: str


class FSx(BaseClient):
    def create_backup(self, *,
        FileSystemId: str,
        ClientRequestToken: str = ...,
        Tags: List[FSxTag] = ...
    ) -> FSxCreateBackupResponse: ...

    def create_file_system(self, *,
        FileSystemType: str,
        StorageCapacity: int,
        SubnetIds: List[str],
        ClientRequestToken: str = ...,
        SecurityGroupIds: List[str] = ...,
        Tags: List[FSxTag] = ...,
        KmsKeyId: str = ...,
        WindowsConfiguration: FSxCreateFileSystemWindowsConfiguration = ...,
        LustreConfiguration: FSxCreateFileSystemLustreConfiguration = ...
    ) -> FSxCreateFileSystemResponse: ...

    def create_file_system_from_backup(self, *,
        BackupId: str,
        SubnetIds: List[str],
        ClientRequestToken: str = ...,
        SecurityGroupIds: List[str] = ...,
        Tags: List[FSxTag] = ...,
        WindowsConfiguration: FSxCreateFileSystemWindowsConfiguration = ...
    ) -> FSxCreateFileSystemFromBackupResponse: ...

    def delete_backup(self, *,
        BackupId: str,
        ClientRequestToken: str = ...
    ) -> FSxDeleteBackupResponse: ...

    def delete_file_system(self, *,
        FileSystemId: str,
        ClientRequestToken: str = ...,
        WindowsConfiguration: FSxDeleteFileSystemWindowsConfiguration = ...
    ) -> FSxDeleteFileSystemResponse: ...

    def describe_backups(self, *,
        BackupIds: List[str] = ...,
        Filters: List[FSxFilter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> FSxDescribeBackupsResponse: ...

    def describe_file_systems(self, *,
        FileSystemIds: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> FSxDescribeFileSystemsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceARN: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> FSxListTagsForResourceResponse: ...

    def tag_resource(self, *,
        ResourceARN: str,
        Tags: List[FSxTag]
    ) -> FSxTagResourceResponse: ...

    def untag_resource(self, *,
        ResourceARN: str,
        TagKeys: List[str]
    ) -> FSxUntagResourceResponse: ...

    def update_file_system(self, *,
        FileSystemId: str,
        ClientRequestToken: str = ...,
        WindowsConfiguration: FSxUpdateFileSystemWindowsConfiguration = ...,
        LustreConfiguration: FSxUpdateFileSystemLustreConfiguration = ...
    ) -> FSxUpdateFileSystemResponse: ...


class FSxTag(TypedDict, total=False):
    Key: str
    Value: str


class FSxCreateBackupResponse(TypedDict, total=False):
    Backup: FSxBackup


class _FSxBackup(TypedDict):
    BackupId: str
    Lifecycle: str
    Type: str
    CreationTime: datetime.datetime
    FileSystem: FSxFileSystem


class FSxBackup(_FSxBackup, total=False):
    FailureDetails: FSxBackupFailureDetails
    ProgressPercent: int
    KmsKeyId: str
    ResourceARN: str
    Tags: List[FSxTag]


class FSxBackupFailureDetails(TypedDict, total=False):
    Message: str


class FSxFileSystem(TypedDict, total=False):
    OwnerId: str
    CreationTime: datetime.datetime
    FileSystemId: str
    FileSystemType: str
    Lifecycle: str
    FailureDetails: FSxFileSystemFailureDetails
    StorageCapacity: int
    VpcId: str
    SubnetIds: List[str]
    NetworkInterfaceIds: List[str]
    DNSName: str
    KmsKeyId: str
    ResourceARN: str
    Tags: List[FSxTag]
    WindowsConfiguration: FSxWindowsFileSystemConfiguration
    LustreConfiguration: FSxLustreFileSystemConfiguration


class FSxFileSystemFailureDetails(TypedDict, total=False):
    Message: str


class FSxWindowsFileSystemConfiguration(TypedDict, total=False):
    ActiveDirectoryId: str
    ThroughputCapacity: int
    MaintenanceOperationsInProgress: List[str]
    WeeklyMaintenanceStartTime: str
    DailyAutomaticBackupStartTime: str
    AutomaticBackupRetentionDays: int
    CopyTagsToBackups: bool


class FSxLustreFileSystemConfiguration(TypedDict, total=False):
    WeeklyMaintenanceStartTime: str
    DataRepositoryConfiguration: FSxDataRepositoryConfiguration


class FSxDataRepositoryConfiguration(TypedDict, total=False):
    ImportPath: str
    ExportPath: str
    ImportedFileChunkSize: int


class _FSxCreateFileSystemWindowsConfiguration(TypedDict):
    ThroughputCapacity: int


class FSxCreateFileSystemWindowsConfiguration(_FSxCreateFileSystemWindowsConfiguration, total=False):
    ActiveDirectoryId: str
    WeeklyMaintenanceStartTime: str
    DailyAutomaticBackupStartTime: str
    AutomaticBackupRetentionDays: int
    CopyTagsToBackups: bool


class FSxCreateFileSystemLustreConfiguration(TypedDict, total=False):
    WeeklyMaintenanceStartTime: str
    ImportPath: str
    ExportPath: str
    ImportedFileChunkSize: int


class FSxCreateFileSystemResponse(TypedDict, total=False):
    FileSystem: FSxFileSystem


class FSxCreateFileSystemFromBackupResponse(TypedDict, total=False):
    FileSystem: FSxFileSystem


class FSxDeleteBackupResponse(TypedDict, total=False):
    BackupId: str
    Lifecycle: str


class FSxDeleteFileSystemWindowsConfiguration(TypedDict, total=False):
    SkipFinalBackup: bool
    FinalBackupTags: List[FSxTag]


class FSxDeleteFileSystemResponse(TypedDict, total=False):
    FileSystemId: str
    Lifecycle: str
    WindowsResponse: FSxDeleteFileSystemWindowsResponse


class FSxDeleteFileSystemWindowsResponse(TypedDict, total=False):
    FinalBackupId: str
    FinalBackupTags: List[FSxTag]


class FSxFilter(TypedDict, total=False):
    Name: str
    Values: List[str]


class FSxDescribeBackupsResponse(TypedDict, total=False):
    Backups: List[FSxBackup]
    NextToken: str


class FSxDescribeFileSystemsResponse(TypedDict, total=False):
    FileSystems: List[FSxFileSystem]
    NextToken: str


class FSxListTagsForResourceResponse(TypedDict, total=False):
    Tags: List[FSxTag]
    NextToken: str


class FSxTagResourceResponse(TypedDict, total=False):
    pass


class FSxUntagResourceResponse(TypedDict, total=False):
    pass


class FSxUpdateFileSystemWindowsConfiguration(TypedDict, total=False):
    WeeklyMaintenanceStartTime: str
    DailyAutomaticBackupStartTime: str
    AutomaticBackupRetentionDays: int


class FSxUpdateFileSystemLustreConfiguration(TypedDict, total=False):
    WeeklyMaintenanceStartTime: str


class FSxUpdateFileSystemResponse(TypedDict, total=False):
    FileSystem: FSxFileSystem


class GameLift(BaseClient):
    def accept_match(self, *,
        TicketId: str,
        PlayerIds: List[str],
        AcceptanceType: str
    ) -> GameLiftAcceptMatchOutput: ...

    def create_alias(self, *,
        Name: str,
        RoutingStrategy: GameLiftRoutingStrategy,
        Description: str = ...
    ) -> GameLiftCreateAliasOutput: ...

    def create_build(self, *,
        Name: str = ...,
        Version: str = ...,
        StorageLocation: GameLiftS3Location = ...,
        OperatingSystem: str = ...
    ) -> GameLiftCreateBuildOutput: ...

    def create_fleet(self, *,
        Name: str,
        EC2InstanceType: str,
        Description: str = ...,
        BuildId: str = ...,
        ScriptId: str = ...,
        ServerLaunchPath: str = ...,
        ServerLaunchParameters: str = ...,
        LogPaths: List[str] = ...,
        EC2InboundPermissions: List[GameLiftIpPermission] = ...,
        NewGameSessionProtectionPolicy: str = ...,
        RuntimeConfiguration: GameLiftRuntimeConfiguration = ...,
        ResourceCreationLimitPolicy: GameLiftResourceCreationLimitPolicy = ...,
        MetricGroups: List[str] = ...,
        PeerVpcAwsAccountId: str = ...,
        PeerVpcId: str = ...,
        FleetType: str = ...,
        InstanceRoleArn: str = ...
    ) -> GameLiftCreateFleetOutput: ...

    def create_game_session(self, *,
        MaximumPlayerSessionCount: int,
        FleetId: str = ...,
        AliasId: str = ...,
        Name: str = ...,
        GameProperties: List[GameLiftGameProperty] = ...,
        CreatorId: str = ...,
        GameSessionId: str = ...,
        IdempotencyToken: str = ...,
        GameSessionData: str = ...
    ) -> GameLiftCreateGameSessionOutput: ...

    def create_game_session_queue(self, *,
        Name: str,
        TimeoutInSeconds: int = ...,
        PlayerLatencyPolicies: List[GameLiftPlayerLatencyPolicy] = ...,
        Destinations: List[GameLiftGameSessionQueueDestination] = ...
    ) -> GameLiftCreateGameSessionQueueOutput: ...

    def create_matchmaking_configuration(self, *,
        Name: str,
        GameSessionQueueArns: List[str],
        RequestTimeoutSeconds: int,
        AcceptanceRequired: bool,
        RuleSetName: str,
        Description: str = ...,
        AcceptanceTimeoutSeconds: int = ...,
        NotificationTarget: str = ...,
        AdditionalPlayerCount: int = ...,
        CustomEventData: str = ...,
        GameProperties: List[GameLiftGameProperty] = ...,
        GameSessionData: str = ...
    ) -> GameLiftCreateMatchmakingConfigurationOutput: ...

    def create_matchmaking_rule_set(self, *,
        Name: str,
        RuleSetBody: str
    ) -> GameLiftCreateMatchmakingRuleSetOutput: ...

    def create_player_session(self, *,
        GameSessionId: str,
        PlayerId: str,
        PlayerData: str = ...
    ) -> GameLiftCreatePlayerSessionOutput: ...

    def create_player_sessions(self, *,
        GameSessionId: str,
        PlayerIds: List[str],
        PlayerDataMap: Dict[str, str] = ...
    ) -> GameLiftCreatePlayerSessionsOutput: ...

    def create_script(self, *,
        Name: str = ...,
        Version: str = ...,
        StorageLocation: GameLiftS3Location = ...,
        ZipFile: bytes = ...
    ) -> GameLiftCreateScriptOutput: ...

    def create_vpc_peering_authorization(self, *,
        GameLiftAwsAccountId: str,
        PeerVpcId: str
    ) -> GameLiftCreateVpcPeeringAuthorizationOutput: ...

    def create_vpc_peering_connection(self, *,
        FleetId: str,
        PeerVpcAwsAccountId: str,
        PeerVpcId: str
    ) -> GameLiftCreateVpcPeeringConnectionOutput: ...

    def delete_alias(self, *,
        AliasId: str
    ): ...

    def delete_build(self, *,
        BuildId: str
    ): ...

    def delete_fleet(self, *,
        FleetId: str
    ): ...

    def delete_game_session_queue(self, *,
        Name: str
    ) -> GameLiftDeleteGameSessionQueueOutput: ...

    def delete_matchmaking_configuration(self, *,
        Name: str
    ) -> GameLiftDeleteMatchmakingConfigurationOutput: ...

    def delete_matchmaking_rule_set(self, *,
        Name: str
    ) -> GameLiftDeleteMatchmakingRuleSetOutput: ...

    def delete_scaling_policy(self, *,
        Name: str,
        FleetId: str
    ): ...

    def delete_script(self, *,
        ScriptId: str
    ): ...

    def delete_vpc_peering_authorization(self, *,
        GameLiftAwsAccountId: str,
        PeerVpcId: str
    ) -> GameLiftDeleteVpcPeeringAuthorizationOutput: ...

    def delete_vpc_peering_connection(self, *,
        FleetId: str,
        VpcPeeringConnectionId: str
    ) -> GameLiftDeleteVpcPeeringConnectionOutput: ...

    def describe_alias(self, *,
        AliasId: str
    ) -> GameLiftDescribeAliasOutput: ...

    def describe_build(self, *,
        BuildId: str
    ) -> GameLiftDescribeBuildOutput: ...

    def describe_ec2_instance_limits(self, *,
        EC2InstanceType: str = ...
    ) -> GameLiftDescribeEC2InstanceLimitsOutput: ...

    def describe_fleet_attributes(self, *,
        FleetIds: List[str] = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftDescribeFleetAttributesOutput: ...

    def describe_fleet_capacity(self, *,
        FleetIds: List[str] = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftDescribeFleetCapacityOutput: ...

    def describe_fleet_events(self, *,
        FleetId: str,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftDescribeFleetEventsOutput: ...

    def describe_fleet_port_settings(self, *,
        FleetId: str
    ) -> GameLiftDescribeFleetPortSettingsOutput: ...

    def describe_fleet_utilization(self, *,
        FleetIds: List[str] = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftDescribeFleetUtilizationOutput: ...

    def describe_game_session_details(self, *,
        FleetId: str = ...,
        GameSessionId: str = ...,
        AliasId: str = ...,
        StatusFilter: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftDescribeGameSessionDetailsOutput: ...

    def describe_game_session_placement(self, *,
        PlacementId: str
    ) -> GameLiftDescribeGameSessionPlacementOutput: ...

    def describe_game_session_queues(self, *,
        Names: List[str] = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftDescribeGameSessionQueuesOutput: ...

    def describe_game_sessions(self, *,
        FleetId: str = ...,
        GameSessionId: str = ...,
        AliasId: str = ...,
        StatusFilter: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftDescribeGameSessionsOutput: ...

    def describe_instances(self, *,
        FleetId: str,
        InstanceId: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftDescribeInstancesOutput: ...

    def describe_matchmaking(self, *,
        TicketIds: List[str]
    ) -> GameLiftDescribeMatchmakingOutput: ...

    def describe_matchmaking_configurations(self, *,
        Names: List[str] = ...,
        RuleSetName: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftDescribeMatchmakingConfigurationsOutput: ...

    def describe_matchmaking_rule_sets(self, *,
        Names: List[str] = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftDescribeMatchmakingRuleSetsOutput: ...

    def describe_player_sessions(self, *,
        GameSessionId: str = ...,
        PlayerId: str = ...,
        PlayerSessionId: str = ...,
        PlayerSessionStatusFilter: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftDescribePlayerSessionsOutput: ...

    def describe_runtime_configuration(self, *,
        FleetId: str
    ) -> GameLiftDescribeRuntimeConfigurationOutput: ...

    def describe_scaling_policies(self, *,
        FleetId: str,
        StatusFilter: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftDescribeScalingPoliciesOutput: ...

    def describe_script(self, *,
        ScriptId: str
    ) -> GameLiftDescribeScriptOutput: ...

    def describe_vpc_peering_authorizations(self) -> GameLiftDescribeVpcPeeringAuthorizationsOutput: ...

    def describe_vpc_peering_connections(self, *,
        FleetId: str = ...
    ) -> GameLiftDescribeVpcPeeringConnectionsOutput: ...

    def get_game_session_log_url(self, *,
        GameSessionId: str
    ) -> GameLiftGetGameSessionLogUrlOutput: ...

    def get_instance_access(self, *,
        FleetId: str,
        InstanceId: str
    ) -> GameLiftGetInstanceAccessOutput: ...

    def list_aliases(self, *,
        RoutingStrategyType: str = ...,
        Name: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftListAliasesOutput: ...

    def list_builds(self, *,
        Status: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftListBuildsOutput: ...

    def list_fleets(self, *,
        BuildId: str = ...,
        ScriptId: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftListFleetsOutput: ...

    def list_scripts(self, *,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftListScriptsOutput: ...

    def put_scaling_policy(self, *,
        Name: str,
        FleetId: str,
        MetricName: str,
        ScalingAdjustment: int = ...,
        ScalingAdjustmentType: str = ...,
        Threshold: float = ...,
        ComparisonOperator: str = ...,
        EvaluationPeriods: int = ...,
        PolicyType: str = ...,
        TargetConfiguration: GameLiftTargetConfiguration = ...
    ) -> GameLiftPutScalingPolicyOutput: ...

    def request_upload_credentials(self, *,
        BuildId: str
    ) -> GameLiftRequestUploadCredentialsOutput: ...

    def resolve_alias(self, *,
        AliasId: str
    ) -> GameLiftResolveAliasOutput: ...

    def search_game_sessions(self, *,
        FleetId: str = ...,
        AliasId: str = ...,
        FilterExpression: str = ...,
        SortExpression: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> GameLiftSearchGameSessionsOutput: ...

    def start_fleet_actions(self, *,
        FleetId: str,
        Actions: List[str]
    ) -> GameLiftStartFleetActionsOutput: ...

    def start_game_session_placement(self, *,
        PlacementId: str,
        GameSessionQueueName: str,
        MaximumPlayerSessionCount: int,
        GameProperties: List[GameLiftGameProperty] = ...,
        GameSessionName: str = ...,
        PlayerLatencies: List[GameLiftPlayerLatency] = ...,
        DesiredPlayerSessions: List[GameLiftDesiredPlayerSession] = ...,
        GameSessionData: str = ...
    ) -> GameLiftStartGameSessionPlacementOutput: ...

    def start_match_backfill(self, *,
        ConfigurationName: str,
        GameSessionArn: str,
        Players: List[GameLiftPlayer],
        TicketId: str = ...
    ) -> GameLiftStartMatchBackfillOutput: ...

    def start_matchmaking(self, *,
        ConfigurationName: str,
        Players: List[GameLiftPlayer],
        TicketId: str = ...
    ) -> GameLiftStartMatchmakingOutput: ...

    def stop_fleet_actions(self, *,
        FleetId: str,
        Actions: List[str]
    ) -> GameLiftStopFleetActionsOutput: ...

    def stop_game_session_placement(self, *,
        PlacementId: str
    ) -> GameLiftStopGameSessionPlacementOutput: ...

    def stop_matchmaking(self, *,
        TicketId: str
    ) -> GameLiftStopMatchmakingOutput: ...

    def update_alias(self, *,
        AliasId: str,
        Name: str = ...,
        Description: str = ...,
        RoutingStrategy: GameLiftRoutingStrategy = ...
    ) -> GameLiftUpdateAliasOutput: ...

    def update_build(self, *,
        BuildId: str,
        Name: str = ...,
        Version: str = ...
    ) -> GameLiftUpdateBuildOutput: ...

    def update_fleet_attributes(self, *,
        FleetId: str,
        Name: str = ...,
        Description: str = ...,
        NewGameSessionProtectionPolicy: str = ...,
        ResourceCreationLimitPolicy: GameLiftResourceCreationLimitPolicy = ...,
        MetricGroups: List[str] = ...
    ) -> GameLiftUpdateFleetAttributesOutput: ...

    def update_fleet_capacity(self, *,
        FleetId: str,
        DesiredInstances: int = ...,
        MinSize: int = ...,
        MaxSize: int = ...
    ) -> GameLiftUpdateFleetCapacityOutput: ...

    def update_fleet_port_settings(self, *,
        FleetId: str,
        InboundPermissionAuthorizations: List[GameLiftIpPermission] = ...,
        InboundPermissionRevocations: List[GameLiftIpPermission] = ...
    ) -> GameLiftUpdateFleetPortSettingsOutput: ...

    def update_game_session(self, *,
        GameSessionId: str,
        MaximumPlayerSessionCount: int = ...,
        Name: str = ...,
        PlayerSessionCreationPolicy: str = ...,
        ProtectionPolicy: str = ...
    ) -> GameLiftUpdateGameSessionOutput: ...

    def update_game_session_queue(self, *,
        Name: str,
        TimeoutInSeconds: int = ...,
        PlayerLatencyPolicies: List[GameLiftPlayerLatencyPolicy] = ...,
        Destinations: List[GameLiftGameSessionQueueDestination] = ...
    ) -> GameLiftUpdateGameSessionQueueOutput: ...

    def update_matchmaking_configuration(self, *,
        Name: str,
        Description: str = ...,
        GameSessionQueueArns: List[str] = ...,
        RequestTimeoutSeconds: int = ...,
        AcceptanceTimeoutSeconds: int = ...,
        AcceptanceRequired: bool = ...,
        RuleSetName: str = ...,
        NotificationTarget: str = ...,
        AdditionalPlayerCount: int = ...,
        CustomEventData: str = ...,
        GameProperties: List[GameLiftGameProperty] = ...,
        GameSessionData: str = ...
    ) -> GameLiftUpdateMatchmakingConfigurationOutput: ...

    def update_runtime_configuration(self, *,
        FleetId: str,
        RuntimeConfiguration: GameLiftRuntimeConfiguration
    ) -> GameLiftUpdateRuntimeConfigurationOutput: ...

    def update_script(self, *,
        ScriptId: str,
        Name: str = ...,
        Version: str = ...,
        StorageLocation: GameLiftS3Location = ...,
        ZipFile: bytes = ...
    ) -> GameLiftUpdateScriptOutput: ...

    def validate_matchmaking_rule_set(self, *,
        RuleSetBody: str
    ) -> GameLiftValidateMatchmakingRuleSetOutput: ...


class GameLiftAcceptMatchOutput(TypedDict, total=False):
    pass


class GameLiftRoutingStrategy(TypedDict, total=False):
    Type: str
    FleetId: str
    Message: str


class GameLiftCreateAliasOutput(TypedDict, total=False):
    Alias: GameLiftAlias


class GameLiftAlias(TypedDict, total=False):
    AliasId: str
    Name: str
    AliasArn: str
    Description: str
    RoutingStrategy: GameLiftRoutingStrategy
    CreationTime: datetime.datetime
    LastUpdatedTime: datetime.datetime


class GameLiftS3Location(TypedDict, total=False):
    Bucket: str
    Key: str
    RoleArn: str
    ObjectVersion: str


class GameLiftCreateBuildOutput(TypedDict, total=False):
    Build: GameLiftBuild
    UploadCredentials: GameLiftAwsCredentials
    StorageLocation: GameLiftS3Location


class GameLiftBuild(TypedDict, total=False):
    BuildId: str
    Name: str
    Version: str
    Status: str
    SizeOnDisk: int
    OperatingSystem: str
    CreationTime: datetime.datetime


class GameLiftAwsCredentials(TypedDict, total=False):
    AccessKeyId: str
    SecretAccessKey: str
    SessionToken: str


class GameLiftIpPermission(TypedDict):
    FromPort: int
    ToPort: int
    IpRange: str
    Protocol: str


class GameLiftRuntimeConfiguration(TypedDict, total=False):
    ServerProcesses: List[GameLiftServerProcess]
    MaxConcurrentGameSessionActivations: int
    GameSessionActivationTimeoutSeconds: int


class _GameLiftServerProcess(TypedDict):
    LaunchPath: str
    ConcurrentExecutions: int


class GameLiftServerProcess(_GameLiftServerProcess, total=False):
    Parameters: str


class GameLiftResourceCreationLimitPolicy(TypedDict, total=False):
    NewGameSessionsPerCreator: int
    PolicyPeriodInMinutes: int


class GameLiftCreateFleetOutput(TypedDict, total=False):
    FleetAttributes: GameLiftFleetAttributes


class GameLiftFleetAttributes(TypedDict, total=False):
    FleetId: str
    FleetArn: str
    FleetType: str
    InstanceType: str
    Description: str
    Name: str
    CreationTime: datetime.datetime
    TerminationTime: datetime.datetime
    Status: str
    BuildId: str
    ScriptId: str
    ServerLaunchPath: str
    ServerLaunchParameters: str
    LogPaths: List[str]
    NewGameSessionProtectionPolicy: str
    OperatingSystem: str
    ResourceCreationLimitPolicy: GameLiftResourceCreationLimitPolicy
    MetricGroups: List[str]
    StoppedActions: List[str]
    InstanceRoleArn: str


class GameLiftGameProperty(TypedDict):
    Key: str
    Value: str


class GameLiftCreateGameSessionOutput(TypedDict, total=False):
    GameSession: GameLiftGameSession


class GameLiftGameSession(TypedDict, total=False):
    GameSessionId: str
    Name: str
    FleetId: str
    CreationTime: datetime.datetime
    TerminationTime: datetime.datetime
    CurrentPlayerSessionCount: int
    MaximumPlayerSessionCount: int
    Status: str
    StatusReason: str
    GameProperties: List[GameLiftGameProperty]
    IpAddress: str
    Port: int
    PlayerSessionCreationPolicy: str
    CreatorId: str
    GameSessionData: str
    MatchmakerData: str


class GameLiftPlayerLatencyPolicy(TypedDict, total=False):
    MaximumIndividualPlayerLatencyMilliseconds: int
    PolicyDurationSeconds: int


class GameLiftGameSessionQueueDestination(TypedDict, total=False):
    DestinationArn: str


class GameLiftCreateGameSessionQueueOutput(TypedDict, total=False):
    GameSessionQueue: GameLiftGameSessionQueue


class GameLiftGameSessionQueue(TypedDict, total=False):
    Name: str
    GameSessionQueueArn: str
    TimeoutInSeconds: int
    PlayerLatencyPolicies: List[GameLiftPlayerLatencyPolicy]
    Destinations: List[GameLiftGameSessionQueueDestination]


class GameLiftCreateMatchmakingConfigurationOutput(TypedDict, total=False):
    Configuration: GameLiftMatchmakingConfiguration


class GameLiftMatchmakingConfiguration(TypedDict, total=False):
    Name: str
    Description: str
    GameSessionQueueArns: List[str]
    RequestTimeoutSeconds: int
    AcceptanceTimeoutSeconds: int
    AcceptanceRequired: bool
    RuleSetName: str
    NotificationTarget: str
    AdditionalPlayerCount: int
    CustomEventData: str
    CreationTime: datetime.datetime
    GameProperties: List[GameLiftGameProperty]
    GameSessionData: str


class GameLiftCreateMatchmakingRuleSetOutput(TypedDict):
    RuleSet: GameLiftMatchmakingRuleSet


class _GameLiftMatchmakingRuleSet(TypedDict):
    RuleSetBody: str


class GameLiftMatchmakingRuleSet(_GameLiftMatchmakingRuleSet, total=False):
    RuleSetName: str
    CreationTime: datetime.datetime


class GameLiftCreatePlayerSessionOutput(TypedDict, total=False):
    PlayerSession: GameLiftPlayerSession


class GameLiftPlayerSession(TypedDict, total=False):
    PlayerSessionId: str
    PlayerId: str
    GameSessionId: str
    FleetId: str
    CreationTime: datetime.datetime
    TerminationTime: datetime.datetime
    Status: str
    IpAddress: str
    Port: int
    PlayerData: str


class GameLiftCreatePlayerSessionsOutput(TypedDict, total=False):
    PlayerSessions: List[GameLiftPlayerSession]


class GameLiftCreateScriptOutput(TypedDict, total=False):
    Script: GameLiftScript


class GameLiftScript(TypedDict, total=False):
    ScriptId: str
    Name: str
    Version: str
    SizeOnDisk: int
    CreationTime: datetime.datetime
    StorageLocation: GameLiftS3Location


class GameLiftCreateVpcPeeringAuthorizationOutput(TypedDict, total=False):
    VpcPeeringAuthorization: GameLiftVpcPeeringAuthorization


class GameLiftVpcPeeringAuthorization(TypedDict, total=False):
    GameLiftAwsAccountId: str
    PeerVpcAwsAccountId: str
    PeerVpcId: str
    CreationTime: datetime.datetime
    ExpirationTime: datetime.datetime


class GameLiftCreateVpcPeeringConnectionOutput(TypedDict, total=False):
    pass


class GameLiftDeleteGameSessionQueueOutput(TypedDict, total=False):
    pass


class GameLiftDeleteMatchmakingConfigurationOutput(TypedDict, total=False):
    pass


class GameLiftDeleteMatchmakingRuleSetOutput(TypedDict, total=False):
    pass


class GameLiftDeleteVpcPeeringAuthorizationOutput(TypedDict, total=False):
    pass


class GameLiftDeleteVpcPeeringConnectionOutput(TypedDict, total=False):
    pass


class GameLiftDescribeAliasOutput(TypedDict, total=False):
    Alias: GameLiftAlias


class GameLiftDescribeBuildOutput(TypedDict, total=False):
    Build: GameLiftBuild


class GameLiftDescribeEC2InstanceLimitsOutput(TypedDict, total=False):
    EC2InstanceLimits: List[GameLiftEC2InstanceLimit]


class GameLiftEC2InstanceLimit(TypedDict, total=False):
    EC2InstanceType: str
    CurrentInstances: int
    InstanceLimit: int


class GameLiftDescribeFleetAttributesOutput(TypedDict, total=False):
    FleetAttributes: List[GameLiftFleetAttributes]
    NextToken: str


class GameLiftDescribeFleetCapacityOutput(TypedDict, total=False):
    FleetCapacity: List[GameLiftFleetCapacity]
    NextToken: str


class GameLiftFleetCapacity(TypedDict, total=False):
    FleetId: str
    InstanceType: str
    InstanceCounts: GameLiftEC2InstanceCounts


class GameLiftEC2InstanceCounts(TypedDict, total=False):
    DESIRED: int
    MINIMUM: int
    MAXIMUM: int
    PENDING: int
    ACTIVE: int
    IDLE: int
    TERMINATING: int


class GameLiftDescribeFleetEventsOutput(TypedDict, total=False):
    Events: List[GameLiftEvent]
    NextToken: str


class GameLiftEvent(TypedDict, total=False):
    EventId: str
    ResourceId: str
    EventCode: str
    Message: str
    EventTime: datetime.datetime
    PreSignedLogUrl: str


class GameLiftDescribeFleetPortSettingsOutput(TypedDict, total=False):
    InboundPermissions: List[GameLiftIpPermission]


class GameLiftDescribeFleetUtilizationOutput(TypedDict, total=False):
    FleetUtilization: List[GameLiftFleetUtilization]
    NextToken: str


class GameLiftFleetUtilization(TypedDict, total=False):
    FleetId: str
    ActiveServerProcessCount: int
    ActiveGameSessionCount: int
    CurrentPlayerSessionCount: int
    MaximumPlayerSessionCount: int


class GameLiftDescribeGameSessionDetailsOutput(TypedDict, total=False):
    GameSessionDetails: List[GameLiftGameSessionDetail]
    NextToken: str


class GameLiftGameSessionDetail(TypedDict, total=False):
    GameSession: GameLiftGameSession
    ProtectionPolicy: str


class GameLiftDescribeGameSessionPlacementOutput(TypedDict, total=False):
    GameSessionPlacement: GameLiftGameSessionPlacement


class GameLiftGameSessionPlacement(TypedDict, total=False):
    PlacementId: str
    GameSessionQueueName: str
    Status: str
    GameProperties: List[GameLiftGameProperty]
    MaximumPlayerSessionCount: int
    GameSessionName: str
    GameSessionId: str
    GameSessionArn: str
    GameSessionRegion: str
    PlayerLatencies: List[GameLiftPlayerLatency]
    StartTime: datetime.datetime
    EndTime: datetime.datetime
    IpAddress: str
    Port: int
    PlacedPlayerSessions: List[GameLiftPlacedPlayerSession]
    GameSessionData: str
    MatchmakerData: str


class GameLiftPlayerLatency(TypedDict, total=False):
    PlayerId: str
    RegionIdentifier: str
    LatencyInMilliseconds: float


class GameLiftPlacedPlayerSession(TypedDict, total=False):
    PlayerId: str
    PlayerSessionId: str


class GameLiftDescribeGameSessionQueuesOutput(TypedDict, total=False):
    GameSessionQueues: List[GameLiftGameSessionQueue]
    NextToken: str


class GameLiftDescribeGameSessionsOutput(TypedDict, total=False):
    GameSessions: List[GameLiftGameSession]
    NextToken: str


class GameLiftDescribeInstancesOutput(TypedDict, total=False):
    Instances: List[GameLiftInstance]
    NextToken: str


class GameLiftInstance(TypedDict, total=False):
    FleetId: str
    InstanceId: str
    IpAddress: str
    OperatingSystem: str
    Type: str
    Status: str
    CreationTime: datetime.datetime


class GameLiftDescribeMatchmakingOutput(TypedDict, total=False):
    TicketList: List[GameLiftMatchmakingTicket]


class GameLiftMatchmakingTicket(TypedDict, total=False):
    TicketId: str
    ConfigurationName: str
    Status: str
    StatusReason: str
    StatusMessage: str
    StartTime: datetime.datetime
    EndTime: datetime.datetime
    Players: List[GameLiftPlayer]
    GameSessionConnectionInfo: GameLiftGameSessionConnectionInfo
    EstimatedWaitTime: int


class GameLiftPlayer(TypedDict, total=False):
    PlayerId: str
    PlayerAttributes: Dict[str, GameLiftAttributeValue]
    Team: str
    LatencyInMs: Dict[str, int]


class GameLiftAttributeValue(TypedDict, total=False):
    S: str
    N: float
    SL: List[str]
    SDM: Dict[str, float]


class GameLiftGameSessionConnectionInfo(TypedDict, total=False):
    GameSessionArn: str
    IpAddress: str
    Port: int
    MatchedPlayerSessions: List[GameLiftMatchedPlayerSession]


class GameLiftMatchedPlayerSession(TypedDict, total=False):
    PlayerId: str
    PlayerSessionId: str


class GameLiftDescribeMatchmakingConfigurationsOutput(TypedDict, total=False):
    Configurations: List[GameLiftMatchmakingConfiguration]
    NextToken: str


class _GameLiftDescribeMatchmakingRuleSetsOutput(TypedDict):
    RuleSets: List[GameLiftMatchmakingRuleSet]


class GameLiftDescribeMatchmakingRuleSetsOutput(_GameLiftDescribeMatchmakingRuleSetsOutput, total=False):
    NextToken: str


class GameLiftDescribePlayerSessionsOutput(TypedDict, total=False):
    PlayerSessions: List[GameLiftPlayerSession]
    NextToken: str


class GameLiftDescribeRuntimeConfigurationOutput(TypedDict, total=False):
    RuntimeConfiguration: GameLiftRuntimeConfiguration


class GameLiftDescribeScalingPoliciesOutput(TypedDict, total=False):
    ScalingPolicies: List[GameLiftScalingPolicy]
    NextToken: str


class GameLiftScalingPolicy(TypedDict, total=False):
    FleetId: str
    Name: str
    Status: str
    ScalingAdjustment: int
    ScalingAdjustmentType: str
    ComparisonOperator: str
    Threshold: float
    EvaluationPeriods: int
    MetricName: str
    PolicyType: str
    TargetConfiguration: GameLiftTargetConfiguration


class GameLiftTargetConfiguration(TypedDict):
    TargetValue: float


class GameLiftDescribeScriptOutput(TypedDict, total=False):
    Script: GameLiftScript


class GameLiftDescribeVpcPeeringAuthorizationsOutput(TypedDict, total=False):
    VpcPeeringAuthorizations: List[GameLiftVpcPeeringAuthorization]


class GameLiftDescribeVpcPeeringConnectionsOutput(TypedDict, total=False):
    VpcPeeringConnections: List[GameLiftVpcPeeringConnection]


class GameLiftVpcPeeringConnection(TypedDict, total=False):
    FleetId: str
    IpV4CidrBlock: str
    VpcPeeringConnectionId: str
    Status: GameLiftVpcPeeringConnectionStatus
    PeerVpcId: str
    GameLiftVpcId: str


class GameLiftVpcPeeringConnectionStatus(TypedDict, total=False):
    Code: str
    Message: str


class GameLiftGetGameSessionLogUrlOutput(TypedDict, total=False):
    PreSignedUrl: str


class GameLiftGetInstanceAccessOutput(TypedDict, total=False):
    InstanceAccess: GameLiftInstanceAccess


class GameLiftInstanceAccess(TypedDict, total=False):
    FleetId: str
    InstanceId: str
    IpAddress: str
    OperatingSystem: str
    Credentials: GameLiftInstanceCredentials


class GameLiftInstanceCredentials(TypedDict, total=False):
    UserName: str
    Secret: str


class GameLiftListAliasesOutput(TypedDict, total=False):
    Aliases: List[GameLiftAlias]
    NextToken: str


class GameLiftListBuildsOutput(TypedDict, total=False):
    Builds: List[GameLiftBuild]
    NextToken: str


class GameLiftListFleetsOutput(TypedDict, total=False):
    FleetIds: List[str]
    NextToken: str


class GameLiftListScriptsOutput(TypedDict, total=False):
    Scripts: List[GameLiftScript]
    NextToken: str


class GameLiftPutScalingPolicyOutput(TypedDict, total=False):
    Name: str


class GameLiftRequestUploadCredentialsOutput(TypedDict, total=False):
    UploadCredentials: GameLiftAwsCredentials
    StorageLocation: GameLiftS3Location


class GameLiftResolveAliasOutput(TypedDict, total=False):
    FleetId: str


class GameLiftSearchGameSessionsOutput(TypedDict, total=False):
    GameSessions: List[GameLiftGameSession]
    NextToken: str


class GameLiftStartFleetActionsOutput(TypedDict, total=False):
    pass


class GameLiftDesiredPlayerSession(TypedDict, total=False):
    PlayerId: str
    PlayerData: str


class GameLiftStartGameSessionPlacementOutput(TypedDict, total=False):
    GameSessionPlacement: GameLiftGameSessionPlacement


class GameLiftStartMatchBackfillOutput(TypedDict, total=False):
    MatchmakingTicket: GameLiftMatchmakingTicket


class GameLiftStartMatchmakingOutput(TypedDict, total=False):
    MatchmakingTicket: GameLiftMatchmakingTicket


class GameLiftStopFleetActionsOutput(TypedDict, total=False):
    pass


class GameLiftStopGameSessionPlacementOutput(TypedDict, total=False):
    GameSessionPlacement: GameLiftGameSessionPlacement


class GameLiftStopMatchmakingOutput(TypedDict, total=False):
    pass


class GameLiftUpdateAliasOutput(TypedDict, total=False):
    Alias: GameLiftAlias


class GameLiftUpdateBuildOutput(TypedDict, total=False):
    Build: GameLiftBuild


class GameLiftUpdateFleetAttributesOutput(TypedDict, total=False):
    FleetId: str


class GameLiftUpdateFleetCapacityOutput(TypedDict, total=False):
    FleetId: str


class GameLiftUpdateFleetPortSettingsOutput(TypedDict, total=False):
    FleetId: str


class GameLiftUpdateGameSessionOutput(TypedDict, total=False):
    GameSession: GameLiftGameSession


class GameLiftUpdateGameSessionQueueOutput(TypedDict, total=False):
    GameSessionQueue: GameLiftGameSessionQueue


class GameLiftUpdateMatchmakingConfigurationOutput(TypedDict, total=False):
    Configuration: GameLiftMatchmakingConfiguration


class GameLiftUpdateRuntimeConfigurationOutput(TypedDict, total=False):
    RuntimeConfiguration: GameLiftRuntimeConfiguration


class GameLiftUpdateScriptOutput(TypedDict, total=False):
    Script: GameLiftScript


class GameLiftValidateMatchmakingRuleSetOutput(TypedDict, total=False):
    Valid: bool


class Glacier(BaseClient):
    def abort_multipart_upload(self, *,
        accountId: str,
        vaultName: str,
        uploadId: str
    ): ...

    def abort_vault_lock(self, *,
        accountId: str,
        vaultName: str
    ): ...

    def add_tags_to_vault(self, *,
        accountId: str,
        vaultName: str,
        Tags: Dict[str, str] = ...
    ): ...

    def complete_multipart_upload(self, *,
        accountId: str,
        vaultName: str,
        uploadId: str,
        archiveSize: str = ...,
        checksum: str = ...
    ) -> GlacierArchiveCreationOutput: ...

    def complete_vault_lock(self, *,
        accountId: str,
        vaultName: str,
        lockId: str
    ): ...

    def create_vault(self, *,
        accountId: str,
        vaultName: str
    ) -> GlacierCreateVaultOutput: ...

    def delete_archive(self, *,
        accountId: str,
        vaultName: str,
        archiveId: str
    ): ...

    def delete_vault(self, *,
        accountId: str,
        vaultName: str
    ): ...

    def delete_vault_access_policy(self, *,
        accountId: str,
        vaultName: str
    ): ...

    def delete_vault_notifications(self, *,
        accountId: str,
        vaultName: str
    ): ...

    def describe_job(self, *,
        accountId: str,
        vaultName: str,
        jobId: str
    ) -> GlacierGlacierJobDescription: ...

    def describe_vault(self, *,
        accountId: str,
        vaultName: str
    ) -> GlacierDescribeVaultOutput: ...

    def get_data_retrieval_policy(self, *,
        accountId: str
    ) -> GlacierGetDataRetrievalPolicyOutput: ...

    def get_job_output(self, *,
        accountId: str,
        vaultName: str,
        jobId: str,
        range: str = ...
    ) -> GlacierGetJobOutputOutput: ...

    def get_vault_access_policy(self, *,
        accountId: str,
        vaultName: str
    ) -> GlacierGetVaultAccessPolicyOutput: ...

    def get_vault_lock(self, *,
        accountId: str,
        vaultName: str
    ) -> GlacierGetVaultLockOutput: ...

    def get_vault_notifications(self, *,
        accountId: str,
        vaultName: str
    ) -> GlacierGetVaultNotificationsOutput: ...

    def initiate_job(self, *,
        accountId: str,
        vaultName: str,
        jobParameters: GlacierJobParameters = ...
    ) -> GlacierInitiateJobOutput: ...

    def initiate_multipart_upload(self, *,
        accountId: str,
        vaultName: str,
        archiveDescription: str = ...,
        partSize: str = ...
    ) -> GlacierInitiateMultipartUploadOutput: ...

    def initiate_vault_lock(self, *,
        accountId: str,
        vaultName: str,
        policy: GlacierVaultLockPolicy = ...
    ) -> GlacierInitiateVaultLockOutput: ...

    def list_jobs(self, *,
        accountId: str,
        vaultName: str,
        limit: str = ...,
        marker: str = ...,
        statuscode: str = ...,
        completed: str = ...
    ) -> GlacierListJobsOutput: ...

    def list_multipart_uploads(self, *,
        accountId: str,
        vaultName: str,
        marker: str = ...,
        limit: str = ...
    ) -> GlacierListMultipartUploadsOutput: ...

    def list_parts(self, *,
        accountId: str,
        vaultName: str,
        uploadId: str,
        marker: str = ...,
        limit: str = ...
    ) -> GlacierListPartsOutput: ...

    def list_provisioned_capacity(self, *,
        accountId: str
    ) -> GlacierListProvisionedCapacityOutput: ...

    def list_tags_for_vault(self, *,
        accountId: str,
        vaultName: str
    ) -> GlacierListTagsForVaultOutput: ...

    def list_vaults(self, *,
        accountId: str,
        marker: str = ...,
        limit: str = ...
    ) -> GlacierListVaultsOutput: ...

    def purchase_provisioned_capacity(self, *,
        accountId: str
    ) -> GlacierPurchaseProvisionedCapacityOutput: ...

    def remove_tags_from_vault(self, *,
        accountId: str,
        vaultName: str,
        TagKeys: List[str] = ...
    ): ...

    def set_data_retrieval_policy(self, *,
        accountId: str,
        Policy: GlacierDataRetrievalPolicy = ...
    ): ...

    def set_vault_access_policy(self, *,
        accountId: str,
        vaultName: str,
        policy: GlacierVaultAccessPolicy = ...
    ): ...

    def set_vault_notifications(self, *,
        accountId: str,
        vaultName: str,
        vaultNotificationConfig: GlacierVaultNotificationConfig = ...
    ): ...

    def upload_archive(self, *,
        vaultName: str,
        accountId: str,
        archiveDescription: str = ...,
        checksum: str = ...,
        body: bytes = ...
    ) -> GlacierArchiveCreationOutput: ...

    def upload_multipart_part(self, *,
        accountId: str,
        vaultName: str,
        uploadId: str,
        checksum: str = ...,
        range: str = ...,
        body: bytes = ...
    ) -> GlacierUploadMultipartPartOutput: ...


class GlacierArchiveCreationOutput(TypedDict, total=False):
    location: str
    checksum: str
    archiveId: str


class GlacierCreateVaultOutput(TypedDict, total=False):
    location: str


class GlacierGlacierJobDescription(TypedDict, total=False):
    JobId: str
    JobDescription: str
    Action: str
    ArchiveId: str
    VaultARN: str
    CreationDate: str
    Completed: bool
    StatusCode: str
    StatusMessage: str
    ArchiveSizeInBytes: int
    InventorySizeInBytes: int
    SNSTopic: str
    CompletionDate: str
    SHA256TreeHash: str
    ArchiveSHA256TreeHash: str
    RetrievalByteRange: str
    Tier: str
    InventoryRetrievalParameters: GlacierInventoryRetrievalJobDescription
    JobOutputPath: str
    SelectParameters: GlacierSelectParameters
    OutputLocation: GlacierOutputLocation


class GlacierInventoryRetrievalJobDescription(TypedDict, total=False):
    Format: str
    StartDate: str
    EndDate: str
    Limit: str
    Marker: str


class GlacierSelectParameters(TypedDict, total=False):
    InputSerialization: GlacierInputSerialization
    ExpressionType: str
    Expression: str
    OutputSerialization: GlacierOutputSerialization


class GlacierInputSerialization(TypedDict, total=False):
    csv: GlacierCSVInput


class GlacierCSVInput(TypedDict, total=False):
    FileHeaderInfo: str
    Comments: str
    QuoteEscapeCharacter: str
    RecordDelimiter: str
    FieldDelimiter: str
    QuoteCharacter: str


class GlacierOutputSerialization(TypedDict, total=False):
    csv: GlacierCSVOutput


class GlacierCSVOutput(TypedDict, total=False):
    QuoteFields: str
    QuoteEscapeCharacter: str
    RecordDelimiter: str
    FieldDelimiter: str
    QuoteCharacter: str


class GlacierOutputLocation(TypedDict, total=False):
    S3: GlacierS3Location


class GlacierS3Location(TypedDict, total=False):
    BucketName: str
    Prefix: str
    Encryption: GlacierEncryption
    CannedACL: str
    AccessControlList: List[GlacierGrant]
    Tagging: Dict[str, str]
    UserMetadata: Dict[str, str]
    StorageClass: str


class GlacierEncryption(TypedDict, total=False):
    EncryptionType: str
    KMSKeyId: str
    KMSContext: str


class GlacierGrant(TypedDict, total=False):
    Grantee: GlacierGrantee
    Permission: str


class _GlacierGrantee(TypedDict):
    Type: str


class GlacierGrantee(_GlacierGrantee, total=False):
    DisplayName: str
    URI: str
    ID: str
    EmailAddress: str


class GlacierDescribeVaultOutput(TypedDict, total=False):
    VaultARN: str
    VaultName: str
    CreationDate: str
    LastInventoryDate: str
    NumberOfArchives: int
    SizeInBytes: int


class GlacierGetDataRetrievalPolicyOutput(TypedDict, total=False):
    Policy: GlacierDataRetrievalPolicy


class GlacierDataRetrievalPolicy(TypedDict, total=False):
    Rules: List[GlacierDataRetrievalRule]


class GlacierDataRetrievalRule(TypedDict, total=False):
    Strategy: str
    BytesPerHour: int


class GlacierGetJobOutputOutput(TypedDict, total=False):
    body: bytes
    checksum: str
    status: int
    contentRange: str
    acceptRanges: str
    contentType: str
    archiveDescription: str


class GlacierGetVaultAccessPolicyOutput(TypedDict, total=False):
    policy: GlacierVaultAccessPolicy


class GlacierVaultAccessPolicy(TypedDict, total=False):
    Policy: str


class GlacierGetVaultLockOutput(TypedDict, total=False):
    Policy: str
    State: str
    ExpirationDate: str
    CreationDate: str


class GlacierGetVaultNotificationsOutput(TypedDict, total=False):
    vaultNotificationConfig: GlacierVaultNotificationConfig


class GlacierVaultNotificationConfig(TypedDict, total=False):
    SNSTopic: str
    Events: List[str]


class GlacierJobParameters(TypedDict, total=False):
    Format: str
    Type: str
    ArchiveId: str
    Description: str
    SNSTopic: str
    RetrievalByteRange: str
    Tier: str
    InventoryRetrievalParameters: GlacierInventoryRetrievalJobInput
    SelectParameters: GlacierSelectParameters
    OutputLocation: GlacierOutputLocation


class GlacierInventoryRetrievalJobInput(TypedDict, total=False):
    StartDate: str
    EndDate: str
    Limit: str
    Marker: str


class GlacierInitiateJobOutput(TypedDict, total=False):
    location: str
    jobId: str
    jobOutputPath: str


class GlacierInitiateMultipartUploadOutput(TypedDict, total=False):
    location: str
    uploadId: str


class GlacierVaultLockPolicy(TypedDict, total=False):
    Policy: str


class GlacierInitiateVaultLockOutput(TypedDict, total=False):
    lockId: str


class GlacierListJobsOutput(TypedDict, total=False):
    JobList: List[GlacierGlacierJobDescription]
    Marker: str


class GlacierListMultipartUploadsOutput(TypedDict, total=False):
    UploadsList: List[GlacierUploadListElement]
    Marker: str


class GlacierUploadListElement(TypedDict, total=False):
    MultipartUploadId: str
    VaultARN: str
    ArchiveDescription: str
    PartSizeInBytes: int
    CreationDate: str


class GlacierListPartsOutput(TypedDict, total=False):
    MultipartUploadId: str
    VaultARN: str
    ArchiveDescription: str
    PartSizeInBytes: int
    CreationDate: str
    Parts: List[GlacierPartListElement]
    Marker: str


class GlacierPartListElement(TypedDict, total=False):
    RangeInBytes: str
    SHA256TreeHash: str


class GlacierListProvisionedCapacityOutput(TypedDict, total=False):
    ProvisionedCapacityList: List[GlacierProvisionedCapacityDescription]


class GlacierProvisionedCapacityDescription(TypedDict, total=False):
    CapacityId: str
    StartDate: str
    ExpirationDate: str


class GlacierListTagsForVaultOutput(TypedDict, total=False):
    Tags: Dict[str, str]


class GlacierListVaultsOutput(TypedDict, total=False):
    VaultList: List[GlacierDescribeVaultOutput]
    Marker: str


class GlacierPurchaseProvisionedCapacityOutput(TypedDict, total=False):
    capacityId: str


class GlacierUploadMultipartPartOutput(TypedDict, total=False):
    checksum: str


class GlobalAccelerator(BaseClient):
    def create_accelerator(self, *,
        Name: str,
        IdempotencyToken: str,
        IpAddressType: str = ...,
        Enabled: bool = ...
    ) -> GlobalAcceleratorCreateAcceleratorResponse: ...

    def create_endpoint_group(self, *,
        ListenerArn: str,
        EndpointGroupRegion: str,
        IdempotencyToken: str,
        EndpointConfigurations: List[GlobalAcceleratorEndpointConfiguration] = ...,
        TrafficDialPercentage: float = ...,
        HealthCheckPort: int = ...,
        HealthCheckProtocol: str = ...,
        HealthCheckPath: str = ...,
        HealthCheckIntervalSeconds: int = ...,
        ThresholdCount: int = ...
    ) -> GlobalAcceleratorCreateEndpointGroupResponse: ...

    def create_listener(self, *,
        AcceleratorArn: str,
        PortRanges: List[GlobalAcceleratorPortRange],
        Protocol: str,
        IdempotencyToken: str,
        ClientAffinity: str = ...
    ) -> GlobalAcceleratorCreateListenerResponse: ...

    def delete_accelerator(self, *,
        AcceleratorArn: str
    ): ...

    def delete_endpoint_group(self, *,
        EndpointGroupArn: str
    ): ...

    def delete_listener(self, *,
        ListenerArn: str
    ): ...

    def describe_accelerator(self, *,
        AcceleratorArn: str
    ) -> GlobalAcceleratorDescribeAcceleratorResponse: ...

    def describe_accelerator_attributes(self, *,
        AcceleratorArn: str = ...
    ) -> GlobalAcceleratorDescribeAcceleratorAttributesResponse: ...

    def describe_endpoint_group(self, *,
        EndpointGroupArn: str
    ) -> GlobalAcceleratorDescribeEndpointGroupResponse: ...

    def describe_listener(self, *,
        ListenerArn: str
    ) -> GlobalAcceleratorDescribeListenerResponse: ...

    def list_accelerators(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> GlobalAcceleratorListAcceleratorsResponse: ...

    def list_endpoint_groups(self, *,
        ListenerArn: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> GlobalAcceleratorListEndpointGroupsResponse: ...

    def list_listeners(self, *,
        AcceleratorArn: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> GlobalAcceleratorListListenersResponse: ...

    def update_accelerator(self, *,
        AcceleratorArn: str,
        Name: str = ...,
        IpAddressType: str = ...,
        Enabled: bool = ...
    ) -> GlobalAcceleratorUpdateAcceleratorResponse: ...

    def update_accelerator_attributes(self, *,
        AcceleratorArn: str = ...,
        FlowLogsEnabled: bool = ...,
        FlowLogsS3Bucket: str = ...,
        FlowLogsS3Prefix: str = ...
    ) -> GlobalAcceleratorUpdateAcceleratorAttributesResponse: ...

    def update_endpoint_group(self, *,
        EndpointGroupArn: str,
        EndpointConfigurations: List[GlobalAcceleratorEndpointConfiguration] = ...,
        TrafficDialPercentage: float = ...,
        HealthCheckPort: int = ...,
        HealthCheckProtocol: str = ...,
        HealthCheckPath: str = ...,
        HealthCheckIntervalSeconds: int = ...,
        ThresholdCount: int = ...
    ) -> GlobalAcceleratorUpdateEndpointGroupResponse: ...

    def update_listener(self, *,
        ListenerArn: str,
        PortRanges: List[GlobalAcceleratorPortRange] = ...,
        Protocol: str = ...,
        ClientAffinity: str = ...
    ) -> GlobalAcceleratorUpdateListenerResponse: ...


class GlobalAcceleratorCreateAcceleratorResponse(TypedDict, total=False):
    Accelerator: GlobalAcceleratorAccelerator


class GlobalAcceleratorAccelerator(TypedDict, total=False):
    AcceleratorArn: str
    Name: str
    IpAddressType: str
    Enabled: bool
    IpSets: List[GlobalAcceleratorIpSet]
    Status: str
    CreatedTime: datetime.datetime
    LastModifiedTime: datetime.datetime


class GlobalAcceleratorIpSet(TypedDict, total=False):
    IpFamily: str
    IpAddresses: List[str]


class GlobalAcceleratorEndpointConfiguration(TypedDict, total=False):
    EndpointId: str
    Weight: int


class GlobalAcceleratorCreateEndpointGroupResponse(TypedDict, total=False):
    EndpointGroup: GlobalAcceleratorEndpointGroup


class GlobalAcceleratorEndpointGroup(TypedDict, total=False):
    EndpointGroupArn: str
    EndpointGroupRegion: str
    EndpointDescriptions: List[GlobalAcceleratorEndpointDescription]
    TrafficDialPercentage: float
    HealthCheckPort: int
    HealthCheckProtocol: str
    HealthCheckPath: str
    HealthCheckIntervalSeconds: int
    ThresholdCount: int


class GlobalAcceleratorEndpointDescription(TypedDict, total=False):
    EndpointId: str
    Weight: int
    HealthState: str
    HealthReason: str


class GlobalAcceleratorPortRange(TypedDict, total=False):
    FromPort: int
    ToPort: int


class GlobalAcceleratorCreateListenerResponse(TypedDict, total=False):
    Listener: GlobalAcceleratorListener


class GlobalAcceleratorListener(TypedDict, total=False):
    ListenerArn: str
    PortRanges: List[GlobalAcceleratorPortRange]
    Protocol: str
    ClientAffinity: str


class GlobalAcceleratorDescribeAcceleratorResponse(TypedDict, total=False):
    Accelerator: GlobalAcceleratorAccelerator


class GlobalAcceleratorDescribeAcceleratorAttributesResponse(TypedDict, total=False):
    AcceleratorAttributes: GlobalAcceleratorAcceleratorAttributes


class GlobalAcceleratorAcceleratorAttributes(TypedDict, total=False):
    FlowLogsEnabled: bool
    FlowLogsS3Bucket: str
    FlowLogsS3Prefix: str


class GlobalAcceleratorDescribeEndpointGroupResponse(TypedDict, total=False):
    EndpointGroup: GlobalAcceleratorEndpointGroup


class GlobalAcceleratorDescribeListenerResponse(TypedDict, total=False):
    Listener: GlobalAcceleratorListener


class GlobalAcceleratorListAcceleratorsResponse(TypedDict, total=False):
    Accelerators: List[GlobalAcceleratorAccelerator]
    NextToken: str


class GlobalAcceleratorListEndpointGroupsResponse(TypedDict, total=False):
    EndpointGroups: List[GlobalAcceleratorEndpointGroup]
    NextToken: str


class GlobalAcceleratorListListenersResponse(TypedDict, total=False):
    Listeners: List[GlobalAcceleratorListener]
    NextToken: str


class GlobalAcceleratorUpdateAcceleratorResponse(TypedDict, total=False):
    Accelerator: GlobalAcceleratorAccelerator


class GlobalAcceleratorUpdateAcceleratorAttributesResponse(TypedDict, total=False):
    AcceleratorAttributes: GlobalAcceleratorAcceleratorAttributes


class GlobalAcceleratorUpdateEndpointGroupResponse(TypedDict, total=False):
    EndpointGroup: GlobalAcceleratorEndpointGroup


class GlobalAcceleratorUpdateListenerResponse(TypedDict, total=False):
    Listener: GlobalAcceleratorListener


class Glue(BaseClient):
    def batch_create_partition(self, *,
        DatabaseName: str,
        TableName: str,
        PartitionInputList: List[GluePartitionInput],
        CatalogId: str = ...
    ) -> GlueBatchCreatePartitionResponse: ...

    def batch_delete_connection(self, *,
        ConnectionNameList: List[str],
        CatalogId: str = ...
    ) -> GlueBatchDeleteConnectionResponse: ...

    def batch_delete_partition(self, *,
        DatabaseName: str,
        TableName: str,
        PartitionsToDelete: List[GluePartitionValueList],
        CatalogId: str = ...
    ) -> GlueBatchDeletePartitionResponse: ...

    def batch_delete_table(self, *,
        DatabaseName: str,
        TablesToDelete: List[str],
        CatalogId: str = ...
    ) -> GlueBatchDeleteTableResponse: ...

    def batch_delete_table_version(self, *,
        DatabaseName: str,
        TableName: str,
        VersionIds: List[str],
        CatalogId: str = ...
    ) -> GlueBatchDeleteTableVersionResponse: ...

    def batch_get_crawlers(self, *,
        CrawlerNames: List[str]
    ) -> GlueBatchGetCrawlersResponse: ...

    def batch_get_dev_endpoints(self, *,
        DevEndpointNames: List[str]
    ) -> GlueBatchGetDevEndpointsResponse: ...

    def batch_get_jobs(self, *,
        JobNames: List[str]
    ) -> GlueBatchGetJobsResponse: ...

    def batch_get_partition(self, *,
        DatabaseName: str,
        TableName: str,
        PartitionsToGet: List[GluePartitionValueList],
        CatalogId: str = ...
    ) -> GlueBatchGetPartitionResponse: ...

    def batch_get_triggers(self, *,
        TriggerNames: List[str]
    ) -> GlueBatchGetTriggersResponse: ...

    def batch_stop_job_run(self, *,
        JobName: str,
        JobRunIds: List[str]
    ) -> GlueBatchStopJobRunResponse: ...

    def create_classifier(self, *,
        GrokClassifier: GlueCreateGrokClassifierRequest = ...,
        XMLClassifier: GlueCreateXMLClassifierRequest = ...,
        JsonClassifier: GlueCreateJsonClassifierRequest = ...,
        CsvClassifier: GlueCreateCsvClassifierRequest = ...
    ) -> GlueCreateClassifierResponse: ...

    def create_connection(self, *,
        ConnectionInput: GlueConnectionInput,
        CatalogId: str = ...
    ) -> GlueCreateConnectionResponse: ...

    def create_crawler(self, *,
        Name: str,
        Role: str,
        Targets: GlueCrawlerTargets,
        DatabaseName: str = ...,
        Description: str = ...,
        Schedule: str = ...,
        Classifiers: List[str] = ...,
        TablePrefix: str = ...,
        SchemaChangePolicy: GlueSchemaChangePolicy = ...,
        Configuration: str = ...,
        CrawlerSecurityConfiguration: str = ...,
        Tags: Dict[str, str] = ...
    ) -> GlueCreateCrawlerResponse: ...

    def create_database(self, *,
        DatabaseInput: GlueDatabaseInput,
        CatalogId: str = ...
    ) -> GlueCreateDatabaseResponse: ...

    def create_dev_endpoint(self, *,
        EndpointName: str,
        RoleArn: str,
        SecurityGroupIds: List[str] = ...,
        SubnetId: str = ...,
        PublicKey: str = ...,
        PublicKeys: List[str] = ...,
        NumberOfNodes: int = ...,
        ExtraPythonLibsS3Path: str = ...,
        ExtraJarsS3Path: str = ...,
        SecurityConfiguration: str = ...,
        Tags: Dict[str, str] = ...,
        Arguments: Dict[str, str] = ...
    ) -> GlueCreateDevEndpointResponse: ...

    def create_job(self, *,
        Name: str,
        Role: str,
        Command: GlueJobCommand,
        Description: str = ...,
        LogUri: str = ...,
        ExecutionProperty: GlueExecutionProperty = ...,
        DefaultArguments: Dict[str, str] = ...,
        Connections: GlueConnectionsList = ...,
        MaxRetries: int = ...,
        AllocatedCapacity: int = ...,
        Timeout: int = ...,
        MaxCapacity: float = ...,
        NotificationProperty: GlueNotificationProperty = ...,
        WorkerType: str = ...,
        NumberOfWorkers: int = ...,
        SecurityConfiguration: str = ...,
        Tags: Dict[str, str] = ...
    ) -> GlueCreateJobResponse: ...

    def create_partition(self, *,
        DatabaseName: str,
        TableName: str,
        PartitionInput: GluePartitionInput,
        CatalogId: str = ...
    ) -> GlueCreatePartitionResponse: ...

    def create_script(self, *,
        DagNodes: List[GlueCodeGenNode] = ...,
        DagEdges: List[GlueCodeGenEdge] = ...,
        Language: str = ...
    ) -> GlueCreateScriptResponse: ...

    def create_security_configuration(self, *,
        Name: str,
        EncryptionConfiguration: GlueEncryptionConfiguration
    ) -> GlueCreateSecurityConfigurationResponse: ...

    def create_table(self, *,
        DatabaseName: str,
        TableInput: GlueTableInput,
        CatalogId: str = ...
    ) -> GlueCreateTableResponse: ...

    def create_trigger(self, *,
        Name: str,
        Type: str,
        Actions: List[GlueAction],
        Schedule: str = ...,
        Predicate: GluePredicate = ...,
        Description: str = ...,
        StartOnCreation: bool = ...,
        Tags: Dict[str, str] = ...
    ) -> GlueCreateTriggerResponse: ...

    def create_user_defined_function(self, *,
        DatabaseName: str,
        FunctionInput: GlueUserDefinedFunctionInput,
        CatalogId: str = ...
    ) -> GlueCreateUserDefinedFunctionResponse: ...

    def delete_classifier(self, *,
        Name: str
    ) -> GlueDeleteClassifierResponse: ...

    def delete_connection(self, *,
        ConnectionName: str,
        CatalogId: str = ...
    ) -> GlueDeleteConnectionResponse: ...

    def delete_crawler(self, *,
        Name: str
    ) -> GlueDeleteCrawlerResponse: ...

    def delete_database(self, *,
        Name: str,
        CatalogId: str = ...
    ) -> GlueDeleteDatabaseResponse: ...

    def delete_dev_endpoint(self, *,
        EndpointName: str
    ) -> GlueDeleteDevEndpointResponse: ...

    def delete_job(self, *,
        JobName: str
    ) -> GlueDeleteJobResponse: ...

    def delete_partition(self, *,
        DatabaseName: str,
        TableName: str,
        PartitionValues: List[str],
        CatalogId: str = ...
    ) -> GlueDeletePartitionResponse: ...

    def delete_resource_policy(self, *,
        PolicyHashCondition: str = ...
    ) -> GlueDeleteResourcePolicyResponse: ...

    def delete_security_configuration(self, *,
        Name: str
    ) -> GlueDeleteSecurityConfigurationResponse: ...

    def delete_table(self, *,
        DatabaseName: str,
        Name: str,
        CatalogId: str = ...
    ) -> GlueDeleteTableResponse: ...

    def delete_table_version(self, *,
        DatabaseName: str,
        TableName: str,
        VersionId: str,
        CatalogId: str = ...
    ) -> GlueDeleteTableVersionResponse: ...

    def delete_trigger(self, *,
        Name: str
    ) -> GlueDeleteTriggerResponse: ...

    def delete_user_defined_function(self, *,
        DatabaseName: str,
        FunctionName: str,
        CatalogId: str = ...
    ) -> GlueDeleteUserDefinedFunctionResponse: ...

    def get_catalog_import_status(self, *,
        CatalogId: str = ...
    ) -> GlueGetCatalogImportStatusResponse: ...

    def get_classifier(self, *,
        Name: str
    ) -> GlueGetClassifierResponse: ...

    def get_classifiers(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> GlueGetClassifiersResponse: ...

    def get_connection(self, *,
        Name: str,
        CatalogId: str = ...,
        HidePassword: bool = ...
    ) -> GlueGetConnectionResponse: ...

    def get_connections(self, *,
        CatalogId: str = ...,
        Filter: GlueGetConnectionsFilter = ...,
        HidePassword: bool = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> GlueGetConnectionsResponse: ...

    def get_crawler(self, *,
        Name: str
    ) -> GlueGetCrawlerResponse: ...

    def get_crawler_metrics(self, *,
        CrawlerNameList: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> GlueGetCrawlerMetricsResponse: ...

    def get_crawlers(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> GlueGetCrawlersResponse: ...

    def get_data_catalog_encryption_settings(self, *,
        CatalogId: str = ...
    ) -> GlueGetDataCatalogEncryptionSettingsResponse: ...

    def get_database(self, *,
        Name: str,
        CatalogId: str = ...
    ) -> GlueGetDatabaseResponse: ...

    def get_databases(self, *,
        CatalogId: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> GlueGetDatabasesResponse: ...

    def get_dataflow_graph(self, *,
        PythonScript: str = ...
    ) -> GlueGetDataflowGraphResponse: ...

    def get_dev_endpoint(self, *,
        EndpointName: str
    ) -> GlueGetDevEndpointResponse: ...

    def get_dev_endpoints(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> GlueGetDevEndpointsResponse: ...

    def get_job(self, *,
        JobName: str
    ) -> GlueGetJobResponse: ...

    def get_job_run(self, *,
        JobName: str,
        RunId: str,
        PredecessorsIncluded: bool = ...
    ) -> GlueGetJobRunResponse: ...

    def get_job_runs(self, *,
        JobName: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> GlueGetJobRunsResponse: ...

    def get_jobs(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> GlueGetJobsResponse: ...

    def get_mapping(self, *,
        Source: GlueCatalogEntry,
        Sinks: List[GlueCatalogEntry] = ...,
        Location: GlueLocation = ...
    ) -> GlueGetMappingResponse: ...

    def get_partition(self, *,
        DatabaseName: str,
        TableName: str,
        PartitionValues: List[str],
        CatalogId: str = ...
    ) -> GlueGetPartitionResponse: ...

    def get_partitions(self, *,
        DatabaseName: str,
        TableName: str,
        CatalogId: str = ...,
        Expression: str = ...,
        NextToken: str = ...,
        Segment: GlueSegment = ...,
        MaxResults: int = ...
    ) -> GlueGetPartitionsResponse: ...

    def get_plan(self, *,
        Mapping: List[GlueMappingEntry],
        Source: GlueCatalogEntry,
        Sinks: List[GlueCatalogEntry] = ...,
        Location: GlueLocation = ...,
        Language: str = ...
    ) -> GlueGetPlanResponse: ...

    def get_resource_policy(self) -> GlueGetResourcePolicyResponse: ...

    def get_security_configuration(self, *,
        Name: str
    ) -> GlueGetSecurityConfigurationResponse: ...

    def get_security_configurations(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> GlueGetSecurityConfigurationsResponse: ...

    def get_table(self, *,
        DatabaseName: str,
        Name: str,
        CatalogId: str = ...
    ) -> GlueGetTableResponse: ...

    def get_table_version(self, *,
        DatabaseName: str,
        TableName: str,
        CatalogId: str = ...,
        VersionId: str = ...
    ) -> GlueGetTableVersionResponse: ...

    def get_table_versions(self, *,
        DatabaseName: str,
        TableName: str,
        CatalogId: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> GlueGetTableVersionsResponse: ...

    def get_tables(self, *,
        DatabaseName: str,
        CatalogId: str = ...,
        Expression: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> GlueGetTablesResponse: ...

    def get_tags(self, *,
        ResourceArn: str
    ) -> GlueGetTagsResponse: ...

    def get_trigger(self, *,
        Name: str
    ) -> GlueGetTriggerResponse: ...

    def get_triggers(self, *,
        NextToken: str = ...,
        DependentJobName: str = ...,
        MaxResults: int = ...
    ) -> GlueGetTriggersResponse: ...

    def get_user_defined_function(self, *,
        DatabaseName: str,
        FunctionName: str,
        CatalogId: str = ...
    ) -> GlueGetUserDefinedFunctionResponse: ...

    def get_user_defined_functions(self, *,
        DatabaseName: str,
        Pattern: str,
        CatalogId: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> GlueGetUserDefinedFunctionsResponse: ...

    def import_catalog_to_glue(self, *,
        CatalogId: str = ...
    ) -> GlueImportCatalogToGlueResponse: ...

    def list_crawlers(self, *,
        MaxResults: int = ...,
        NextToken: str = ...,
        Tags: Dict[str, str] = ...
    ) -> GlueListCrawlersResponse: ...

    def list_dev_endpoints(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        Tags: Dict[str, str] = ...
    ) -> GlueListDevEndpointsResponse: ...

    def list_jobs(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        Tags: Dict[str, str] = ...
    ) -> GlueListJobsResponse: ...

    def list_triggers(self, *,
        NextToken: str = ...,
        DependentJobName: str = ...,
        MaxResults: int = ...,
        Tags: Dict[str, str] = ...
    ) -> GlueListTriggersResponse: ...

    def put_data_catalog_encryption_settings(self, *,
        DataCatalogEncryptionSettings: GlueDataCatalogEncryptionSettings,
        CatalogId: str = ...
    ) -> GluePutDataCatalogEncryptionSettingsResponse: ...

    def put_resource_policy(self, *,
        PolicyInJson: str,
        PolicyHashCondition: str = ...,
        PolicyExistsCondition: str = ...
    ) -> GluePutResourcePolicyResponse: ...

    def reset_job_bookmark(self, *,
        JobName: str
    ) -> GlueResetJobBookmarkResponse: ...

    def start_crawler(self, *,
        Name: str
    ) -> GlueStartCrawlerResponse: ...

    def start_crawler_schedule(self, *,
        CrawlerName: str
    ) -> GlueStartCrawlerScheduleResponse: ...

    def start_job_run(self, *,
        JobName: str,
        JobRunId: str = ...,
        Arguments: Dict[str, str] = ...,
        AllocatedCapacity: int = ...,
        Timeout: int = ...,
        MaxCapacity: float = ...,
        WorkerType: str = ...,
        NumberOfWorkers: int = ...,
        SecurityConfiguration: str = ...,
        NotificationProperty: GlueNotificationProperty = ...
    ) -> GlueStartJobRunResponse: ...

    def start_trigger(self, *,
        Name: str
    ) -> GlueStartTriggerResponse: ...

    def stop_crawler(self, *,
        Name: str
    ) -> GlueStopCrawlerResponse: ...

    def stop_crawler_schedule(self, *,
        CrawlerName: str
    ) -> GlueStopCrawlerScheduleResponse: ...

    def stop_trigger(self, *,
        Name: str
    ) -> GlueStopTriggerResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        TagsToAdd: Dict[str, str]
    ) -> GlueTagResourceResponse: ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagsToRemove: List[str]
    ) -> GlueUntagResourceResponse: ...

    def update_classifier(self, *,
        GrokClassifier: GlueUpdateGrokClassifierRequest = ...,
        XMLClassifier: GlueUpdateXMLClassifierRequest = ...,
        JsonClassifier: GlueUpdateJsonClassifierRequest = ...,
        CsvClassifier: GlueUpdateCsvClassifierRequest = ...
    ) -> GlueUpdateClassifierResponse: ...

    def update_connection(self, *,
        Name: str,
        ConnectionInput: GlueConnectionInput,
        CatalogId: str = ...
    ) -> GlueUpdateConnectionResponse: ...

    def update_crawler(self, *,
        Name: str,
        Role: str = ...,
        DatabaseName: str = ...,
        Description: str = ...,
        Targets: GlueCrawlerTargets = ...,
        Schedule: str = ...,
        Classifiers: List[str] = ...,
        TablePrefix: str = ...,
        SchemaChangePolicy: GlueSchemaChangePolicy = ...,
        Configuration: str = ...,
        CrawlerSecurityConfiguration: str = ...
    ) -> GlueUpdateCrawlerResponse: ...

    def update_crawler_schedule(self, *,
        CrawlerName: str,
        Schedule: str = ...
    ) -> GlueUpdateCrawlerScheduleResponse: ...

    def update_database(self, *,
        Name: str,
        DatabaseInput: GlueDatabaseInput,
        CatalogId: str = ...
    ) -> GlueUpdateDatabaseResponse: ...

    def update_dev_endpoint(self, *,
        EndpointName: str,
        PublicKey: str = ...,
        AddPublicKeys: List[str] = ...,
        DeletePublicKeys: List[str] = ...,
        CustomLibraries: GlueDevEndpointCustomLibraries = ...,
        UpdateEtlLibraries: bool = ...,
        DeleteArguments: List[str] = ...,
        AddArguments: Dict[str, str] = ...
    ) -> GlueUpdateDevEndpointResponse: ...

    def update_job(self, *,
        JobName: str,
        JobUpdate: GlueJobUpdate
    ) -> GlueUpdateJobResponse: ...

    def update_partition(self, *,
        DatabaseName: str,
        TableName: str,
        PartitionValueList: List[str],
        PartitionInput: GluePartitionInput,
        CatalogId: str = ...
    ) -> GlueUpdatePartitionResponse: ...

    def update_table(self, *,
        DatabaseName: str,
        TableInput: GlueTableInput,
        CatalogId: str = ...,
        SkipArchive: bool = ...
    ) -> GlueUpdateTableResponse: ...

    def update_trigger(self, *,
        Name: str,
        TriggerUpdate: GlueTriggerUpdate
    ) -> GlueUpdateTriggerResponse: ...

    def update_user_defined_function(self, *,
        DatabaseName: str,
        FunctionName: str,
        FunctionInput: GlueUserDefinedFunctionInput,
        CatalogId: str = ...
    ) -> GlueUpdateUserDefinedFunctionResponse: ...


class GluePartitionInput(TypedDict, total=False):
    Values: List[str]
    LastAccessTime: datetime.datetime
    StorageDescriptor: GlueStorageDescriptor
    Parameters: Dict[str, str]
    LastAnalyzedTime: datetime.datetime


class GlueStorageDescriptor(TypedDict, total=False):
    Columns: List[GlueColumn]
    Location: str
    InputFormat: str
    OutputFormat: str
    Compressed: bool
    NumberOfBuckets: int
    SerdeInfo: GlueSerDeInfo
    BucketColumns: List[str]
    SortColumns: List[GlueOrder]
    Parameters: Dict[str, str]
    SkewedInfo: GlueSkewedInfo
    StoredAsSubDirectories: bool


class _GlueColumn(TypedDict):
    Name: str


class GlueColumn(_GlueColumn, total=False):
    Type: str
    Comment: str


class GlueSerDeInfo(TypedDict, total=False):
    Name: str
    SerializationLibrary: str
    Parameters: Dict[str, str]


class GlueOrder(TypedDict):
    Column: str
    SortOrder: int


class GlueSkewedInfo(TypedDict, total=False):
    SkewedColumnNames: List[str]
    SkewedColumnValues: List[str]
    SkewedColumnValueLocationMaps: Dict[str, str]


class GlueBatchCreatePartitionResponse(TypedDict, total=False):
    Errors: List[GluePartitionError]


class GluePartitionError(TypedDict, total=False):
    PartitionValues: List[str]
    ErrorDetail: GlueErrorDetail


class GlueErrorDetail(TypedDict, total=False):
    ErrorCode: str
    ErrorMessage: str


class GlueBatchDeleteConnectionResponse(TypedDict, total=False):
    Succeeded: List[str]
    Errors: Dict[str, GlueErrorDetail]


class GluePartitionValueList(TypedDict):
    Values: List[str]


class GlueBatchDeletePartitionResponse(TypedDict, total=False):
    Errors: List[GluePartitionError]


class GlueBatchDeleteTableResponse(TypedDict, total=False):
    Errors: List[GlueTableError]


class GlueTableError(TypedDict, total=False):
    TableName: str
    ErrorDetail: GlueErrorDetail


class GlueBatchDeleteTableVersionResponse(TypedDict, total=False):
    Errors: List[GlueTableVersionError]


class GlueTableVersionError(TypedDict, total=False):
    TableName: str
    VersionId: str
    ErrorDetail: GlueErrorDetail


class GlueBatchGetCrawlersResponse(TypedDict, total=False):
    Crawlers: List[GlueCrawler]
    CrawlersNotFound: List[str]


class GlueCrawler(TypedDict, total=False):
    Name: str
    Role: str
    Targets: GlueCrawlerTargets
    DatabaseName: str
    Description: str
    Classifiers: List[str]
    SchemaChangePolicy: GlueSchemaChangePolicy
    State: str
    TablePrefix: str
    Schedule: GlueSchedule
    CrawlElapsedTime: int
    CreationTime: datetime.datetime
    LastUpdated: datetime.datetime
    LastCrawl: GlueLastCrawlInfo
    Version: int
    Configuration: str
    CrawlerSecurityConfiguration: str


class GlueCrawlerTargets(TypedDict, total=False):
    S3Targets: List[GlueS3Target]
    JdbcTargets: List[GlueJdbcTarget]
    DynamoDBTargets: List[GlueDynamoDBTarget]
    CatalogTargets: List[GlueCatalogTarget]


class GlueS3Target(TypedDict, total=False):
    Path: str
    Exclusions: List[str]


class GlueJdbcTarget(TypedDict, total=False):
    ConnectionName: str
    Path: str
    Exclusions: List[str]


class GlueDynamoDBTarget(TypedDict, total=False):
    Path: str


class GlueCatalogTarget(TypedDict):
    DatabaseName: str
    Tables: List[str]


class GlueSchemaChangePolicy(TypedDict, total=False):
    UpdateBehavior: str
    DeleteBehavior: str


class GlueSchedule(TypedDict, total=False):
    ScheduleExpression: str
    State: str


class GlueLastCrawlInfo(TypedDict, total=False):
    Status: str
    ErrorMessage: str
    LogGroup: str
    LogStream: str
    MessagePrefix: str
    StartTime: datetime.datetime


class GlueBatchGetDevEndpointsResponse(TypedDict, total=False):
    DevEndpoints: List[GlueDevEndpoint]
    DevEndpointsNotFound: List[str]


class GlueDevEndpoint(TypedDict, total=False):
    EndpointName: str
    RoleArn: str
    SecurityGroupIds: List[str]
    SubnetId: str
    YarnEndpointAddress: str
    PrivateAddress: str
    ZeppelinRemoteSparkInterpreterPort: int
    PublicAddress: str
    Status: str
    NumberOfNodes: int
    AvailabilityZone: str
    VpcId: str
    ExtraPythonLibsS3Path: str
    ExtraJarsS3Path: str
    FailureReason: str
    LastUpdateStatus: str
    CreatedTimestamp: datetime.datetime
    LastModifiedTimestamp: datetime.datetime
    PublicKey: str
    PublicKeys: List[str]
    SecurityConfiguration: str
    Arguments: Dict[str, str]


class GlueBatchGetJobsResponse(TypedDict, total=False):
    Jobs: List[GlueJob]
    JobsNotFound: List[str]


class GlueJob(TypedDict, total=False):
    Name: str
    Description: str
    LogUri: str
    Role: str
    CreatedOn: datetime.datetime
    LastModifiedOn: datetime.datetime
    ExecutionProperty: GlueExecutionProperty
    Command: GlueJobCommand
    DefaultArguments: Dict[str, str]
    Connections: GlueConnectionsList
    MaxRetries: int
    AllocatedCapacity: int
    Timeout: int
    MaxCapacity: float
    WorkerType: str
    NumberOfWorkers: int
    SecurityConfiguration: str
    NotificationProperty: GlueNotificationProperty


class GlueExecutionProperty(TypedDict, total=False):
    MaxConcurrentRuns: int


class GlueJobCommand(TypedDict, total=False):
    Name: str
    ScriptLocation: str


class GlueConnectionsList(TypedDict, total=False):
    Connections: List[str]


class GlueNotificationProperty(TypedDict, total=False):
    NotifyDelayAfter: int


class GlueBatchGetPartitionResponse(TypedDict, total=False):
    Partitions: List[GluePartition]
    UnprocessedKeys: List[GluePartitionValueList]


class GluePartition(TypedDict, total=False):
    Values: List[str]
    DatabaseName: str
    TableName: str
    CreationTime: datetime.datetime
    LastAccessTime: datetime.datetime
    StorageDescriptor: GlueStorageDescriptor
    Parameters: Dict[str, str]
    LastAnalyzedTime: datetime.datetime


class GlueBatchGetTriggersResponse(TypedDict, total=False):
    Triggers: List[GlueTrigger]
    TriggersNotFound: List[str]


class GlueTrigger(TypedDict, total=False):
    Name: str
    Id: str
    Type: str
    State: str
    Description: str
    Schedule: str
    Actions: List[GlueAction]
    Predicate: GluePredicate


class GlueAction(TypedDict, total=False):
    JobName: str
    Arguments: Dict[str, str]
    Timeout: int
    NotificationProperty: GlueNotificationProperty
    SecurityConfiguration: str


class GluePredicate(TypedDict, total=False):
    Logical: str
    Conditions: List[GlueCondition]


class GlueCondition(TypedDict, total=False):
    LogicalOperator: str
    JobName: str
    State: str


class GlueBatchStopJobRunResponse(TypedDict, total=False):
    SuccessfulSubmissions: List[GlueBatchStopJobRunSuccessfulSubmission]
    Errors: List[GlueBatchStopJobRunError]


class GlueBatchStopJobRunSuccessfulSubmission(TypedDict, total=False):
    JobName: str
    JobRunId: str


class GlueBatchStopJobRunError(TypedDict, total=False):
    JobName: str
    JobRunId: str
    ErrorDetail: GlueErrorDetail


class _GlueCreateGrokClassifierRequest(TypedDict):
    Classification: str
    Name: str
    GrokPattern: str


class GlueCreateGrokClassifierRequest(_GlueCreateGrokClassifierRequest, total=False):
    CustomPatterns: str


class _GlueCreateXMLClassifierRequest(TypedDict):
    Classification: str
    Name: str


class GlueCreateXMLClassifierRequest(_GlueCreateXMLClassifierRequest, total=False):
    RowTag: str


class GlueCreateJsonClassifierRequest(TypedDict):
    Name: str
    JsonPath: str


class _GlueCreateCsvClassifierRequest(TypedDict):
    Name: str


class GlueCreateCsvClassifierRequest(_GlueCreateCsvClassifierRequest, total=False):
    Delimiter: str
    QuoteSymbol: str
    ContainsHeader: str
    Header: List[str]
    DisableValueTrimming: bool
    AllowSingleColumn: bool


class GlueCreateClassifierResponse(TypedDict, total=False):
    pass


class _GlueConnectionInput(TypedDict):
    Name: str
    ConnectionType: str
    ConnectionProperties: Dict[str, str]


class GlueConnectionInput(_GlueConnectionInput, total=False):
    Description: str
    MatchCriteria: List[str]
    PhysicalConnectionRequirements: GluePhysicalConnectionRequirements


class GluePhysicalConnectionRequirements(TypedDict, total=False):
    SubnetId: str
    SecurityGroupIdList: List[str]
    AvailabilityZone: str


class GlueCreateConnectionResponse(TypedDict, total=False):
    pass


class GlueCreateCrawlerResponse(TypedDict, total=False):
    pass


class _GlueDatabaseInput(TypedDict):
    Name: str


class GlueDatabaseInput(_GlueDatabaseInput, total=False):
    Description: str
    LocationUri: str
    Parameters: Dict[str, str]


class GlueCreateDatabaseResponse(TypedDict, total=False):
    pass


class GlueCreateDevEndpointResponse(TypedDict, total=False):
    EndpointName: str
    Status: str
    SecurityGroupIds: List[str]
    SubnetId: str
    RoleArn: str
    YarnEndpointAddress: str
    ZeppelinRemoteSparkInterpreterPort: int
    NumberOfNodes: int
    AvailabilityZone: str
    VpcId: str
    ExtraPythonLibsS3Path: str
    ExtraJarsS3Path: str
    FailureReason: str
    SecurityConfiguration: str
    CreatedTimestamp: datetime.datetime
    Arguments: Dict[str, str]


class GlueCreateJobResponse(TypedDict, total=False):
    Name: str


class GlueCreatePartitionResponse(TypedDict, total=False):
    pass


class _GlueCodeGenNode(TypedDict):
    Id: str
    NodeType: str
    Args: List[GlueCodeGenNodeArg]


class GlueCodeGenNode(_GlueCodeGenNode, total=False):
    LineNumber: int


class _GlueCodeGenNodeArg(TypedDict):
    Name: str
    Value: str


class GlueCodeGenNodeArg(_GlueCodeGenNodeArg, total=False):
    Param: bool


class _GlueCodeGenEdge(TypedDict):
    Source: str
    Target: str


class GlueCodeGenEdge(_GlueCodeGenEdge, total=False):
    TargetParameter: str


class GlueCreateScriptResponse(TypedDict, total=False):
    PythonScript: str
    ScalaCode: str


class GlueEncryptionConfiguration(TypedDict, total=False):
    S3Encryption: List[GlueS3Encryption]
    CloudWatchEncryption: GlueCloudWatchEncryption
    JobBookmarksEncryption: GlueJobBookmarksEncryption


class GlueS3Encryption(TypedDict, total=False):
    S3EncryptionMode: str
    KmsKeyArn: str


class GlueCloudWatchEncryption(TypedDict, total=False):
    CloudWatchEncryptionMode: str
    KmsKeyArn: str


class GlueJobBookmarksEncryption(TypedDict, total=False):
    JobBookmarksEncryptionMode: str
    KmsKeyArn: str


class GlueCreateSecurityConfigurationResponse(TypedDict, total=False):
    Name: str
    CreatedTimestamp: datetime.datetime


class _GlueTableInput(TypedDict):
    Name: str


class GlueTableInput(_GlueTableInput, total=False):
    Description: str
    Owner: str
    LastAccessTime: datetime.datetime
    LastAnalyzedTime: datetime.datetime
    Retention: int
    StorageDescriptor: GlueStorageDescriptor
    PartitionKeys: List[GlueColumn]
    ViewOriginalText: str
    ViewExpandedText: str
    TableType: str
    Parameters: Dict[str, str]


class GlueCreateTableResponse(TypedDict, total=False):
    pass


class GlueCreateTriggerResponse(TypedDict, total=False):
    Name: str


class GlueUserDefinedFunctionInput(TypedDict, total=False):
    FunctionName: str
    ClassName: str
    OwnerName: str
    OwnerType: str
    ResourceUris: List[GlueResourceUri]


class GlueResourceUri(TypedDict, total=False):
    ResourceType: str
    Uri: str


class GlueCreateUserDefinedFunctionResponse(TypedDict, total=False):
    pass


class GlueDeleteClassifierResponse(TypedDict, total=False):
    pass


class GlueDeleteConnectionResponse(TypedDict, total=False):
    pass


class GlueDeleteCrawlerResponse(TypedDict, total=False):
    pass


class GlueDeleteDatabaseResponse(TypedDict, total=False):
    pass


class GlueDeleteDevEndpointResponse(TypedDict, total=False):
    pass


class GlueDeleteJobResponse(TypedDict, total=False):
    JobName: str


class GlueDeletePartitionResponse(TypedDict, total=False):
    pass


class GlueDeleteResourcePolicyResponse(TypedDict, total=False):
    pass


class GlueDeleteSecurityConfigurationResponse(TypedDict, total=False):
    pass


class GlueDeleteTableResponse(TypedDict, total=False):
    pass


class GlueDeleteTableVersionResponse(TypedDict, total=False):
    pass


class GlueDeleteTriggerResponse(TypedDict, total=False):
    Name: str


class GlueDeleteUserDefinedFunctionResponse(TypedDict, total=False):
    pass


class GlueGetCatalogImportStatusResponse(TypedDict, total=False):
    ImportStatus: GlueCatalogImportStatus


class GlueCatalogImportStatus(TypedDict, total=False):
    ImportCompleted: bool
    ImportTime: datetime.datetime
    ImportedBy: str


class GlueGetClassifierResponse(TypedDict, total=False):
    Classifier: GlueClassifier


class GlueClassifier(TypedDict, total=False):
    GrokClassifier: GlueGrokClassifier
    XMLClassifier: GlueXMLClassifier
    JsonClassifier: GlueJsonClassifier
    CsvClassifier: GlueCsvClassifier


class _GlueGrokClassifier(TypedDict):
    Name: str
    Classification: str
    GrokPattern: str


class GlueGrokClassifier(_GlueGrokClassifier, total=False):
    CreationTime: datetime.datetime
    LastUpdated: datetime.datetime
    Version: int
    CustomPatterns: str


class _GlueXMLClassifier(TypedDict):
    Name: str
    Classification: str


class GlueXMLClassifier(_GlueXMLClassifier, total=False):
    CreationTime: datetime.datetime
    LastUpdated: datetime.datetime
    Version: int
    RowTag: str


class _GlueJsonClassifier(TypedDict):
    Name: str
    JsonPath: str


class GlueJsonClassifier(_GlueJsonClassifier, total=False):
    CreationTime: datetime.datetime
    LastUpdated: datetime.datetime
    Version: int


class _GlueCsvClassifier(TypedDict):
    Name: str


class GlueCsvClassifier(_GlueCsvClassifier, total=False):
    CreationTime: datetime.datetime
    LastUpdated: datetime.datetime
    Version: int
    Delimiter: str
    QuoteSymbol: str
    ContainsHeader: str
    Header: List[str]
    DisableValueTrimming: bool
    AllowSingleColumn: bool


class GlueGetClassifiersResponse(TypedDict, total=False):
    Classifiers: List[GlueClassifier]
    NextToken: str


class GlueGetConnectionResponse(TypedDict, total=False):
    Connection: GlueConnection


class GlueConnection(TypedDict, total=False):
    Name: str
    Description: str
    ConnectionType: str
    MatchCriteria: List[str]
    ConnectionProperties: Dict[str, str]
    PhysicalConnectionRequirements: GluePhysicalConnectionRequirements
    CreationTime: datetime.datetime
    LastUpdatedTime: datetime.datetime
    LastUpdatedBy: str


class GlueGetConnectionsFilter(TypedDict, total=False):
    MatchCriteria: List[str]
    ConnectionType: str


class GlueGetConnectionsResponse(TypedDict, total=False):
    ConnectionList: List[GlueConnection]
    NextToken: str


class GlueGetCrawlerResponse(TypedDict, total=False):
    Crawler: GlueCrawler


class GlueGetCrawlerMetricsResponse(TypedDict, total=False):
    CrawlerMetricsList: List[GlueCrawlerMetrics]
    NextToken: str


class GlueCrawlerMetrics(TypedDict, total=False):
    CrawlerName: str
    TimeLeftSeconds: float
    StillEstimating: bool
    LastRuntimeSeconds: float
    MedianRuntimeSeconds: float
    TablesCreated: int
    TablesUpdated: int
    TablesDeleted: int


class GlueGetCrawlersResponse(TypedDict, total=False):
    Crawlers: List[GlueCrawler]
    NextToken: str


class GlueGetDataCatalogEncryptionSettingsResponse(TypedDict, total=False):
    DataCatalogEncryptionSettings: GlueDataCatalogEncryptionSettings


class GlueDataCatalogEncryptionSettings(TypedDict, total=False):
    EncryptionAtRest: GlueEncryptionAtRest
    ConnectionPasswordEncryption: GlueConnectionPasswordEncryption


class _GlueEncryptionAtRest(TypedDict):
    CatalogEncryptionMode: str


class GlueEncryptionAtRest(_GlueEncryptionAtRest, total=False):
    SseAwsKmsKeyId: str


class _GlueConnectionPasswordEncryption(TypedDict):
    ReturnConnectionPasswordEncrypted: bool


class GlueConnectionPasswordEncryption(_GlueConnectionPasswordEncryption, total=False):
    AwsKmsKeyId: str


class GlueGetDatabaseResponse(TypedDict, total=False):
    Database: GlueDatabase


class _GlueDatabase(TypedDict):
    Name: str


class GlueDatabase(_GlueDatabase, total=False):
    Description: str
    LocationUri: str
    Parameters: Dict[str, str]
    CreateTime: datetime.datetime


class _GlueGetDatabasesResponse(TypedDict):
    DatabaseList: List[GlueDatabase]


class GlueGetDatabasesResponse(_GlueGetDatabasesResponse, total=False):
    NextToken: str


class GlueGetDataflowGraphResponse(TypedDict, total=False):
    DagNodes: List[GlueCodeGenNode]
    DagEdges: List[GlueCodeGenEdge]


class GlueGetDevEndpointResponse(TypedDict, total=False):
    DevEndpoint: GlueDevEndpoint


class GlueGetDevEndpointsResponse(TypedDict, total=False):
    DevEndpoints: List[GlueDevEndpoint]
    NextToken: str


class GlueGetJobResponse(TypedDict, total=False):
    Job: GlueJob


class GlueGetJobRunResponse(TypedDict, total=False):
    JobRun: GlueJobRun


class GlueJobRun(TypedDict, total=False):
    Id: str
    Attempt: int
    PreviousRunId: str
    TriggerName: str
    JobName: str
    StartedOn: datetime.datetime
    LastModifiedOn: datetime.datetime
    CompletedOn: datetime.datetime
    JobRunState: str
    Arguments: Dict[str, str]
    ErrorMessage: str
    PredecessorRuns: List[GluePredecessor]
    AllocatedCapacity: int
    ExecutionTime: int
    Timeout: int
    MaxCapacity: float
    NotificationProperty: GlueNotificationProperty
    WorkerType: str
    NumberOfWorkers: int
    SecurityConfiguration: str
    LogGroupName: str


class GluePredecessor(TypedDict, total=False):
    JobName: str
    RunId: str


class GlueGetJobRunsResponse(TypedDict, total=False):
    JobRuns: List[GlueJobRun]
    NextToken: str


class GlueGetJobsResponse(TypedDict, total=False):
    Jobs: List[GlueJob]
    NextToken: str


class GlueCatalogEntry(TypedDict):
    DatabaseName: str
    TableName: str


class GlueLocation(TypedDict, total=False):
    Jdbc: List[GlueCodeGenNodeArg]
    S3: List[GlueCodeGenNodeArg]
    DynamoDB: List[GlueCodeGenNodeArg]


class GlueGetMappingResponse(TypedDict):
    Mapping: List[GlueMappingEntry]


class GlueMappingEntry(TypedDict, total=False):
    SourceTable: str
    SourcePath: str
    SourceType: str
    TargetTable: str
    TargetPath: str
    TargetType: str


class GlueGetPartitionResponse(TypedDict, total=False):
    Partition: GluePartition


class GlueSegment(TypedDict):
    SegmentNumber: int
    TotalSegments: int


class GlueGetPartitionsResponse(TypedDict, total=False):
    Partitions: List[GluePartition]
    NextToken: str


class GlueGetPlanResponse(TypedDict, total=False):
    PythonScript: str
    ScalaCode: str


class GlueGetResourcePolicyResponse(TypedDict, total=False):
    PolicyInJson: str
    PolicyHash: str
    CreateTime: datetime.datetime
    UpdateTime: datetime.datetime


class GlueGetSecurityConfigurationResponse(TypedDict, total=False):
    SecurityConfiguration: GlueSecurityConfiguration


class GlueSecurityConfiguration(TypedDict, total=False):
    Name: str
    CreatedTimeStamp: datetime.datetime
    EncryptionConfiguration: GlueEncryptionConfiguration


class GlueGetSecurityConfigurationsResponse(TypedDict, total=False):
    SecurityConfigurations: List[GlueSecurityConfiguration]
    NextToken: str


class GlueGetTableResponse(TypedDict, total=False):
    Table: GlueTable


class _GlueTable(TypedDict):
    Name: str


class GlueTable(_GlueTable, total=False):
    DatabaseName: str
    Description: str
    Owner: str
    CreateTime: datetime.datetime
    UpdateTime: datetime.datetime
    LastAccessTime: datetime.datetime
    LastAnalyzedTime: datetime.datetime
    Retention: int
    StorageDescriptor: GlueStorageDescriptor
    PartitionKeys: List[GlueColumn]
    ViewOriginalText: str
    ViewExpandedText: str
    TableType: str
    Parameters: Dict[str, str]
    CreatedBy: str


class GlueGetTableVersionResponse(TypedDict, total=False):
    TableVersion: GlueTableVersion


class GlueTableVersion(TypedDict, total=False):
    Table: GlueTable
    VersionId: str


class GlueGetTableVersionsResponse(TypedDict, total=False):
    TableVersions: List[GlueTableVersion]
    NextToken: str


class GlueGetTablesResponse(TypedDict, total=False):
    TableList: List[GlueTable]
    NextToken: str


class GlueGetTagsResponse(TypedDict, total=False):
    Tags: Dict[str, str]


class GlueGetTriggerResponse(TypedDict, total=False):
    Trigger: GlueTrigger


class GlueGetTriggersResponse(TypedDict, total=False):
    Triggers: List[GlueTrigger]
    NextToken: str


class GlueGetUserDefinedFunctionResponse(TypedDict, total=False):
    UserDefinedFunction: GlueUserDefinedFunction


class GlueUserDefinedFunction(TypedDict, total=False):
    FunctionName: str
    ClassName: str
    OwnerName: str
    OwnerType: str
    CreateTime: datetime.datetime
    ResourceUris: List[GlueResourceUri]


class GlueGetUserDefinedFunctionsResponse(TypedDict, total=False):
    UserDefinedFunctions: List[GlueUserDefinedFunction]
    NextToken: str


class GlueImportCatalogToGlueResponse(TypedDict, total=False):
    pass


class GlueListCrawlersResponse(TypedDict, total=False):
    CrawlerNames: List[str]
    NextToken: str


class GlueListDevEndpointsResponse(TypedDict, total=False):
    DevEndpointNames: List[str]
    NextToken: str


class GlueListJobsResponse(TypedDict, total=False):
    JobNames: List[str]
    NextToken: str


class GlueListTriggersResponse(TypedDict, total=False):
    TriggerNames: List[str]
    NextToken: str


class GluePutDataCatalogEncryptionSettingsResponse(TypedDict, total=False):
    pass


class GluePutResourcePolicyResponse(TypedDict, total=False):
    PolicyHash: str


class GlueResetJobBookmarkResponse(TypedDict, total=False):
    JobBookmarkEntry: GlueJobBookmarkEntry


class GlueJobBookmarkEntry(TypedDict, total=False):
    JobName: str
    Version: int
    Run: int
    Attempt: int
    JobBookmark: str


class GlueStartCrawlerResponse(TypedDict, total=False):
    pass


class GlueStartCrawlerScheduleResponse(TypedDict, total=False):
    pass


class GlueStartJobRunResponse(TypedDict, total=False):
    JobRunId: str


class GlueStartTriggerResponse(TypedDict, total=False):
    Name: str


class GlueStopCrawlerResponse(TypedDict, total=False):
    pass


class GlueStopCrawlerScheduleResponse(TypedDict, total=False):
    pass


class GlueStopTriggerResponse(TypedDict, total=False):
    Name: str


class GlueTagResourceResponse(TypedDict, total=False):
    pass


class GlueUntagResourceResponse(TypedDict, total=False):
    pass


class _GlueUpdateGrokClassifierRequest(TypedDict):
    Name: str


class GlueUpdateGrokClassifierRequest(_GlueUpdateGrokClassifierRequest, total=False):
    Classification: str
    GrokPattern: str
    CustomPatterns: str


class _GlueUpdateXMLClassifierRequest(TypedDict):
    Name: str


class GlueUpdateXMLClassifierRequest(_GlueUpdateXMLClassifierRequest, total=False):
    Classification: str
    RowTag: str


class _GlueUpdateJsonClassifierRequest(TypedDict):
    Name: str


class GlueUpdateJsonClassifierRequest(_GlueUpdateJsonClassifierRequest, total=False):
    JsonPath: str


class _GlueUpdateCsvClassifierRequest(TypedDict):
    Name: str


class GlueUpdateCsvClassifierRequest(_GlueUpdateCsvClassifierRequest, total=False):
    Delimiter: str
    QuoteSymbol: str
    ContainsHeader: str
    Header: List[str]
    DisableValueTrimming: bool
    AllowSingleColumn: bool


class GlueUpdateClassifierResponse(TypedDict, total=False):
    pass


class GlueUpdateConnectionResponse(TypedDict, total=False):
    pass


class GlueUpdateCrawlerResponse(TypedDict, total=False):
    pass


class GlueUpdateCrawlerScheduleResponse(TypedDict, total=False):
    pass


class GlueUpdateDatabaseResponse(TypedDict, total=False):
    pass


class GlueDevEndpointCustomLibraries(TypedDict, total=False):
    ExtraPythonLibsS3Path: str
    ExtraJarsS3Path: str


class GlueUpdateDevEndpointResponse(TypedDict, total=False):
    pass


class GlueJobUpdate(TypedDict, total=False):
    Description: str
    LogUri: str
    Role: str
    ExecutionProperty: GlueExecutionProperty
    Command: GlueJobCommand
    DefaultArguments: Dict[str, str]
    Connections: GlueConnectionsList
    MaxRetries: int
    AllocatedCapacity: int
    Timeout: int
    MaxCapacity: float
    WorkerType: str
    NumberOfWorkers: int
    SecurityConfiguration: str
    NotificationProperty: GlueNotificationProperty


class GlueUpdateJobResponse(TypedDict, total=False):
    JobName: str


class GlueUpdatePartitionResponse(TypedDict, total=False):
    pass


class GlueUpdateTableResponse(TypedDict, total=False):
    pass


class GlueTriggerUpdate(TypedDict, total=False):
    Name: str
    Description: str
    Schedule: str
    Actions: List[GlueAction]
    Predicate: GluePredicate


class GlueUpdateTriggerResponse(TypedDict, total=False):
    Trigger: GlueTrigger


class GlueUpdateUserDefinedFunctionResponse(TypedDict, total=False):
    pass


class Greengrass(BaseClient):
    def associate_role_to_group(self, *,
        GroupId: str,
        RoleArn: str = ...
    ) -> GreengrassAssociateRoleToGroupResponse: ...

    def associate_service_role_to_account(self, *,
        RoleArn: str = ...
    ) -> GreengrassAssociateServiceRoleToAccountResponse: ...

    def create_connector_definition(self, *,
        AmznClientToken: str = ...,
        InitialVersion: GreengrassConnectorDefinitionVersion = ...,
        Name: str = ...,
        tags: Dict[str, str] = ...
    ) -> GreengrassCreateConnectorDefinitionResponse: ...

    def create_connector_definition_version(self, *,
        ConnectorDefinitionId: str,
        AmznClientToken: str = ...,
        Connectors: List[GreengrassConnector] = ...
    ) -> GreengrassCreateConnectorDefinitionVersionResponse: ...

    def create_core_definition(self, *,
        AmznClientToken: str = ...,
        InitialVersion: GreengrassCoreDefinitionVersion = ...,
        Name: str = ...,
        tags: Dict[str, str] = ...
    ) -> GreengrassCreateCoreDefinitionResponse: ...

    def create_core_definition_version(self, *,
        CoreDefinitionId: str,
        AmznClientToken: str = ...,
        Cores: List[GreengrassCore] = ...
    ) -> GreengrassCreateCoreDefinitionVersionResponse: ...

    def create_deployment(self, *,
        GroupId: str,
        AmznClientToken: str = ...,
        DeploymentId: str = ...,
        DeploymentType: str = ...,
        GroupVersionId: str = ...
    ) -> GreengrassCreateDeploymentResponse: ...

    def create_device_definition(self, *,
        AmznClientToken: str = ...,
        InitialVersion: GreengrassDeviceDefinitionVersion = ...,
        Name: str = ...,
        tags: Dict[str, str] = ...
    ) -> GreengrassCreateDeviceDefinitionResponse: ...

    def create_device_definition_version(self, *,
        DeviceDefinitionId: str,
        AmznClientToken: str = ...,
        Devices: List[GreengrassDevice] = ...
    ) -> GreengrassCreateDeviceDefinitionVersionResponse: ...

    def create_function_definition(self, *,
        AmznClientToken: str = ...,
        InitialVersion: GreengrassFunctionDefinitionVersion = ...,
        Name: str = ...,
        tags: Dict[str, str] = ...
    ) -> GreengrassCreateFunctionDefinitionResponse: ...

    def create_function_definition_version(self, *,
        FunctionDefinitionId: str,
        AmznClientToken: str = ...,
        DefaultConfig: GreengrassFunctionDefaultConfig = ...,
        Functions: List[GreengrassFunction] = ...
    ) -> GreengrassCreateFunctionDefinitionVersionResponse: ...

    def create_group(self, *,
        AmznClientToken: str = ...,
        InitialVersion: GreengrassGroupVersion = ...,
        Name: str = ...,
        tags: Dict[str, str] = ...
    ) -> GreengrassCreateGroupResponse: ...

    def create_group_certificate_authority(self, *,
        GroupId: str,
        AmznClientToken: str = ...
    ) -> GreengrassCreateGroupCertificateAuthorityResponse: ...

    def create_group_version(self, *,
        GroupId: str,
        AmznClientToken: str = ...,
        ConnectorDefinitionVersionArn: str = ...,
        CoreDefinitionVersionArn: str = ...,
        DeviceDefinitionVersionArn: str = ...,
        FunctionDefinitionVersionArn: str = ...,
        LoggerDefinitionVersionArn: str = ...,
        ResourceDefinitionVersionArn: str = ...,
        SubscriptionDefinitionVersionArn: str = ...
    ) -> GreengrassCreateGroupVersionResponse: ...

    def create_logger_definition(self, *,
        AmznClientToken: str = ...,
        InitialVersion: GreengrassLoggerDefinitionVersion = ...,
        Name: str = ...,
        tags: Dict[str, str] = ...
    ) -> GreengrassCreateLoggerDefinitionResponse: ...

    def create_logger_definition_version(self, *,
        LoggerDefinitionId: str,
        AmznClientToken: str = ...,
        Loggers: List[GreengrassLogger] = ...
    ) -> GreengrassCreateLoggerDefinitionVersionResponse: ...

    def create_resource_definition(self, *,
        AmznClientToken: str = ...,
        InitialVersion: GreengrassResourceDefinitionVersion = ...,
        Name: str = ...,
        tags: Dict[str, str] = ...
    ) -> GreengrassCreateResourceDefinitionResponse: ...

    def create_resource_definition_version(self, *,
        ResourceDefinitionId: str,
        AmznClientToken: str = ...,
        Resources: List[GreengrassResource] = ...
    ) -> GreengrassCreateResourceDefinitionVersionResponse: ...

    def create_software_update_job(self, *,
        AmznClientToken: str = ...,
        S3UrlSignerRole: str = ...,
        SoftwareToUpdate: str = ...,
        UpdateAgentLogLevel: str = ...,
        UpdateTargets: List[str] = ...,
        UpdateTargetsArchitecture: str = ...,
        UpdateTargetsOperatingSystem: str = ...
    ) -> GreengrassCreateSoftwareUpdateJobResponse: ...

    def create_subscription_definition(self, *,
        AmznClientToken: str = ...,
        InitialVersion: GreengrassSubscriptionDefinitionVersion = ...,
        Name: str = ...,
        tags: Dict[str, str] = ...
    ) -> GreengrassCreateSubscriptionDefinitionResponse: ...

    def create_subscription_definition_version(self, *,
        SubscriptionDefinitionId: str,
        AmznClientToken: str = ...,
        Subscriptions: List[GreengrassSubscription] = ...
    ) -> GreengrassCreateSubscriptionDefinitionVersionResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        tags: Dict[str, str]
    ): ...

    def delete_connector_definition(self, *,
        ConnectorDefinitionId: str
    ) -> GreengrassDeleteConnectorDefinitionResponse: ...

    def delete_core_definition(self, *,
        CoreDefinitionId: str
    ) -> GreengrassDeleteCoreDefinitionResponse: ...

    def delete_device_definition(self, *,
        DeviceDefinitionId: str
    ) -> GreengrassDeleteDeviceDefinitionResponse: ...

    def delete_function_definition(self, *,
        FunctionDefinitionId: str
    ) -> GreengrassDeleteFunctionDefinitionResponse: ...

    def delete_group(self, *,
        GroupId: str
    ) -> GreengrassDeleteGroupResponse: ...

    def delete_logger_definition(self, *,
        LoggerDefinitionId: str
    ) -> GreengrassDeleteLoggerDefinitionResponse: ...

    def delete_resource_definition(self, *,
        ResourceDefinitionId: str
    ) -> GreengrassDeleteResourceDefinitionResponse: ...

    def delete_subscription_definition(self, *,
        SubscriptionDefinitionId: str
    ) -> GreengrassDeleteSubscriptionDefinitionResponse: ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ): ...

    def disassociate_role_from_group(self, *,
        GroupId: str
    ) -> GreengrassDisassociateRoleFromGroupResponse: ...

    def disassociate_service_role_from_account(self) -> GreengrassDisassociateServiceRoleFromAccountResponse: ...

    def get_associated_role(self, *,
        GroupId: str
    ) -> GreengrassGetAssociatedRoleResponse: ...

    def get_bulk_deployment_status(self, *,
        BulkDeploymentId: str
    ) -> GreengrassGetBulkDeploymentStatusResponse: ...

    def get_connectivity_info(self, *,
        ThingName: str
    ) -> GreengrassGetConnectivityInfoResponse: ...

    def get_connector_definition(self, *,
        ConnectorDefinitionId: str
    ) -> GreengrassGetConnectorDefinitionResponse: ...

    def get_connector_definition_version(self, *,
        ConnectorDefinitionId: str,
        ConnectorDefinitionVersionId: str,
        NextToken: str = ...
    ) -> GreengrassGetConnectorDefinitionVersionResponse: ...

    def get_core_definition(self, *,
        CoreDefinitionId: str
    ) -> GreengrassGetCoreDefinitionResponse: ...

    def get_core_definition_version(self, *,
        CoreDefinitionId: str,
        CoreDefinitionVersionId: str
    ) -> GreengrassGetCoreDefinitionVersionResponse: ...

    def get_deployment_status(self, *,
        DeploymentId: str,
        GroupId: str
    ) -> GreengrassGetDeploymentStatusResponse: ...

    def get_device_definition(self, *,
        DeviceDefinitionId: str
    ) -> GreengrassGetDeviceDefinitionResponse: ...

    def get_device_definition_version(self, *,
        DeviceDefinitionId: str,
        DeviceDefinitionVersionId: str,
        NextToken: str = ...
    ) -> GreengrassGetDeviceDefinitionVersionResponse: ...

    def get_function_definition(self, *,
        FunctionDefinitionId: str
    ) -> GreengrassGetFunctionDefinitionResponse: ...

    def get_function_definition_version(self, *,
        FunctionDefinitionId: str,
        FunctionDefinitionVersionId: str,
        NextToken: str = ...
    ) -> GreengrassGetFunctionDefinitionVersionResponse: ...

    def get_group(self, *,
        GroupId: str
    ) -> GreengrassGetGroupResponse: ...

    def get_group_certificate_authority(self, *,
        CertificateAuthorityId: str,
        GroupId: str
    ) -> GreengrassGetGroupCertificateAuthorityResponse: ...

    def get_group_certificate_configuration(self, *,
        GroupId: str
    ) -> GreengrassGetGroupCertificateConfigurationResponse: ...

    def get_group_version(self, *,
        GroupId: str,
        GroupVersionId: str
    ) -> GreengrassGetGroupVersionResponse: ...

    def get_logger_definition(self, *,
        LoggerDefinitionId: str
    ) -> GreengrassGetLoggerDefinitionResponse: ...

    def get_logger_definition_version(self, *,
        LoggerDefinitionId: str,
        LoggerDefinitionVersionId: str,
        NextToken: str = ...
    ) -> GreengrassGetLoggerDefinitionVersionResponse: ...

    def get_resource_definition(self, *,
        ResourceDefinitionId: str
    ) -> GreengrassGetResourceDefinitionResponse: ...

    def get_resource_definition_version(self, *,
        ResourceDefinitionId: str,
        ResourceDefinitionVersionId: str
    ) -> GreengrassGetResourceDefinitionVersionResponse: ...

    def get_service_role_for_account(self) -> GreengrassGetServiceRoleForAccountResponse: ...

    def get_subscription_definition(self, *,
        SubscriptionDefinitionId: str
    ) -> GreengrassGetSubscriptionDefinitionResponse: ...

    def get_subscription_definition_version(self, *,
        SubscriptionDefinitionId: str,
        SubscriptionDefinitionVersionId: str,
        NextToken: str = ...
    ) -> GreengrassGetSubscriptionDefinitionVersionResponse: ...

    def list_bulk_deployment_detailed_reports(self, *,
        BulkDeploymentId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListBulkDeploymentDetailedReportsResponse: ...

    def list_bulk_deployments(self, *,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListBulkDeploymentsResponse: ...

    def list_connector_definition_versions(self, *,
        ConnectorDefinitionId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListConnectorDefinitionVersionsResponse: ...

    def list_connector_definitions(self, *,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListConnectorDefinitionsResponse: ...

    def list_core_definition_versions(self, *,
        CoreDefinitionId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListCoreDefinitionVersionsResponse: ...

    def list_core_definitions(self, *,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListCoreDefinitionsResponse: ...

    def list_deployments(self, *,
        GroupId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListDeploymentsResponse: ...

    def list_device_definition_versions(self, *,
        DeviceDefinitionId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListDeviceDefinitionVersionsResponse: ...

    def list_device_definitions(self, *,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListDeviceDefinitionsResponse: ...

    def list_function_definition_versions(self, *,
        FunctionDefinitionId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListFunctionDefinitionVersionsResponse: ...

    def list_function_definitions(self, *,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListFunctionDefinitionsResponse: ...

    def list_group_certificate_authorities(self, *,
        GroupId: str
    ) -> GreengrassListGroupCertificateAuthoritiesResponse: ...

    def list_group_versions(self, *,
        GroupId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListGroupVersionsResponse: ...

    def list_groups(self, *,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListGroupsResponse: ...

    def list_logger_definition_versions(self, *,
        LoggerDefinitionId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListLoggerDefinitionVersionsResponse: ...

    def list_logger_definitions(self, *,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListLoggerDefinitionsResponse: ...

    def list_resource_definition_versions(self, *,
        ResourceDefinitionId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListResourceDefinitionVersionsResponse: ...

    def list_resource_definitions(self, *,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListResourceDefinitionsResponse: ...

    def list_subscription_definition_versions(self, *,
        SubscriptionDefinitionId: str,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListSubscriptionDefinitionVersionsResponse: ...

    def list_subscription_definitions(self, *,
        MaxResults: str = ...,
        NextToken: str = ...
    ) -> GreengrassListSubscriptionDefinitionsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> GreengrassListTagsForResourceResponse: ...

    def reset_deployments(self, *,
        GroupId: str,
        AmznClientToken: str = ...,
        Force: bool = ...
    ) -> GreengrassResetDeploymentsResponse: ...

    def start_bulk_deployment(self, *,
        AmznClientToken: str = ...,
        ExecutionRoleArn: str = ...,
        InputFileUri: str = ...,
        tags: Dict[str, str] = ...
    ) -> GreengrassStartBulkDeploymentResponse: ...

    def stop_bulk_deployment(self, *,
        BulkDeploymentId: str
    ) -> GreengrassStopBulkDeploymentResponse: ...

    def update_connectivity_info(self, *,
        ThingName: str,
        ConnectivityInfo: List[GreengrassConnectivityInfo] = ...
    ) -> GreengrassUpdateConnectivityInfoResponse: ...

    def update_connector_definition(self, *,
        ConnectorDefinitionId: str,
        Name: str = ...
    ) -> GreengrassUpdateConnectorDefinitionResponse: ...

    def update_core_definition(self, *,
        CoreDefinitionId: str,
        Name: str = ...
    ) -> GreengrassUpdateCoreDefinitionResponse: ...

    def update_device_definition(self, *,
        DeviceDefinitionId: str,
        Name: str = ...
    ) -> GreengrassUpdateDeviceDefinitionResponse: ...

    def update_function_definition(self, *,
        FunctionDefinitionId: str,
        Name: str = ...
    ) -> GreengrassUpdateFunctionDefinitionResponse: ...

    def update_group(self, *,
        GroupId: str,
        Name: str = ...
    ) -> GreengrassUpdateGroupResponse: ...

    def update_group_certificate_configuration(self, *,
        GroupId: str,
        CertificateExpiryInMilliseconds: str = ...
    ) -> GreengrassUpdateGroupCertificateConfigurationResponse: ...

    def update_logger_definition(self, *,
        LoggerDefinitionId: str,
        Name: str = ...
    ) -> GreengrassUpdateLoggerDefinitionResponse: ...

    def update_resource_definition(self, *,
        ResourceDefinitionId: str,
        Name: str = ...
    ) -> GreengrassUpdateResourceDefinitionResponse: ...

    def update_subscription_definition(self, *,
        SubscriptionDefinitionId: str,
        Name: str = ...
    ) -> GreengrassUpdateSubscriptionDefinitionResponse: ...


class GreengrassAssociateRoleToGroupResponse(TypedDict, total=False):
    AssociatedAt: str


class GreengrassAssociateServiceRoleToAccountResponse(TypedDict, total=False):
    AssociatedAt: str


class GreengrassConnectorDefinitionVersion(TypedDict, total=False):
    Connectors: List[GreengrassConnector]


class GreengrassConnector(TypedDict, total=False):
    ConnectorArn: str
    Id: str
    Parameters: Dict[str, str]


class GreengrassCreateConnectorDefinitionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Id: str
    LastUpdatedTimestamp: str
    LatestVersion: str
    LatestVersionArn: str
    Name: str


class GreengrassCreateConnectorDefinitionVersionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Id: str
    Version: str


class GreengrassCoreDefinitionVersion(TypedDict, total=False):
    Cores: List[GreengrassCore]


class GreengrassCore(TypedDict, total=False):
    CertificateArn: str
    Id: str
    SyncShadow: bool
    ThingArn: str


class GreengrassCreateCoreDefinitionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Id: str
    LastUpdatedTimestamp: str
    LatestVersion: str
    LatestVersionArn: str
    Name: str


class GreengrassCreateCoreDefinitionVersionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Id: str
    Version: str


class GreengrassCreateDeploymentResponse(TypedDict, total=False):
    DeploymentArn: str
    DeploymentId: str


class GreengrassDeviceDefinitionVersion(TypedDict, total=False):
    Devices: List[GreengrassDevice]


class GreengrassDevice(TypedDict, total=False):
    CertificateArn: str
    Id: str
    SyncShadow: bool
    ThingArn: str


class GreengrassCreateDeviceDefinitionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Id: str
    LastUpdatedTimestamp: str
    LatestVersion: str
    LatestVersionArn: str
    Name: str


class GreengrassCreateDeviceDefinitionVersionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Id: str
    Version: str


class GreengrassFunctionDefinitionVersion(TypedDict, total=False):
    DefaultConfig: GreengrassFunctionDefaultConfig
    Functions: List[GreengrassFunction]


class GreengrassFunctionDefaultConfig(TypedDict, total=False):
    Execution: GreengrassFunctionDefaultExecutionConfig


class GreengrassFunctionDefaultExecutionConfig(TypedDict, total=False):
    IsolationMode: str
    RunAs: GreengrassFunctionRunAsConfig


class GreengrassFunctionRunAsConfig(TypedDict, total=False):
    Gid: int
    Uid: int


class GreengrassFunction(TypedDict, total=False):
    FunctionArn: str
    FunctionConfiguration: GreengrassFunctionConfiguration
    Id: str


class GreengrassFunctionConfiguration(TypedDict, total=False):
    EncodingType: str
    Environment: GreengrassFunctionConfigurationEnvironment
    ExecArgs: str
    Executable: str
    MemorySize: int
    Pinned: bool
    Timeout: int


class GreengrassFunctionConfigurationEnvironment(TypedDict, total=False):
    AccessSysfs: bool
    Execution: GreengrassFunctionExecutionConfig
    ResourceAccessPolicies: List[GreengrassResourceAccessPolicy]
    Variables: Dict[str, str]


class GreengrassFunctionExecutionConfig(TypedDict, total=False):
    IsolationMode: str
    RunAs: GreengrassFunctionRunAsConfig


class GreengrassResourceAccessPolicy(TypedDict, total=False):
    Permission: str
    ResourceId: str


class GreengrassCreateFunctionDefinitionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Id: str
    LastUpdatedTimestamp: str
    LatestVersion: str
    LatestVersionArn: str
    Name: str


class GreengrassCreateFunctionDefinitionVersionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Id: str
    Version: str


class GreengrassGroupVersion(TypedDict, total=False):
    ConnectorDefinitionVersionArn: str
    CoreDefinitionVersionArn: str
    DeviceDefinitionVersionArn: str
    FunctionDefinitionVersionArn: str
    LoggerDefinitionVersionArn: str
    ResourceDefinitionVersionArn: str
    SubscriptionDefinitionVersionArn: str


class GreengrassCreateGroupResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Id: str
    LastUpdatedTimestamp: str
    LatestVersion: str
    LatestVersionArn: str
    Name: str


class GreengrassCreateGroupCertificateAuthorityResponse(TypedDict, total=False):
    GroupCertificateAuthorityArn: str


class GreengrassCreateGroupVersionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Id: str
    Version: str


class GreengrassLoggerDefinitionVersion(TypedDict, total=False):
    Loggers: List[GreengrassLogger]


class GreengrassLogger(TypedDict, total=False):
    Component: str
    Id: str
    Level: str
    Space: int
    Type: str


class GreengrassCreateLoggerDefinitionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Id: str
    LastUpdatedTimestamp: str
    LatestVersion: str
    LatestVersionArn: str
    Name: str


class GreengrassCreateLoggerDefinitionVersionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Id: str
    Version: str


class GreengrassResourceDefinitionVersion(TypedDict, total=False):
    Resources: List[GreengrassResource]


class GreengrassResource(TypedDict, total=False):
    Id: str
    Name: str
    ResourceDataContainer: GreengrassResourceDataContainer


class GreengrassResourceDataContainer(TypedDict, total=False):
    LocalDeviceResourceData: GreengrassLocalDeviceResourceData
    LocalVolumeResourceData: GreengrassLocalVolumeResourceData
    S3MachineLearningModelResourceData: GreengrassS3MachineLearningModelResourceData
    SageMakerMachineLearningModelResourceData: GreengrassSageMakerMachineLearningModelResourceData
    SecretsManagerSecretResourceData: GreengrassSecretsManagerSecretResourceData


class GreengrassLocalDeviceResourceData(TypedDict, total=False):
    GroupOwnerSetting: GreengrassGroupOwnerSetting
    SourcePath: str


class GreengrassGroupOwnerSetting(TypedDict, total=False):
    AutoAddGroupOwner: bool
    GroupOwner: str


class GreengrassLocalVolumeResourceData(TypedDict, total=False):
    DestinationPath: str
    GroupOwnerSetting: GreengrassGroupOwnerSetting
    SourcePath: str


class GreengrassS3MachineLearningModelResourceData(TypedDict, total=False):
    DestinationPath: str
    S3Uri: str


class GreengrassSageMakerMachineLearningModelResourceData(TypedDict, total=False):
    DestinationPath: str
    SageMakerJobArn: str


class GreengrassSecretsManagerSecretResourceData(TypedDict, total=False):
    ARN: str
    AdditionalStagingLabelsToDownload: List[str]


class GreengrassCreateResourceDefinitionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Id: str
    LastUpdatedTimestamp: str
    LatestVersion: str
    LatestVersionArn: str
    Name: str


class GreengrassCreateResourceDefinitionVersionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Id: str
    Version: str


class GreengrassCreateSoftwareUpdateJobResponse(TypedDict, total=False):
    IotJobArn: str
    IotJobId: str


class GreengrassSubscriptionDefinitionVersion(TypedDict, total=False):
    Subscriptions: List[GreengrassSubscription]


class GreengrassSubscription(TypedDict, total=False):
    Id: str
    Source: str
    Subject: str
    Target: str


class GreengrassCreateSubscriptionDefinitionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Id: str
    LastUpdatedTimestamp: str
    LatestVersion: str
    LatestVersionArn: str
    Name: str


class GreengrassCreateSubscriptionDefinitionVersionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Id: str
    Version: str


class GreengrassDeleteConnectorDefinitionResponse(TypedDict, total=False):
    pass


class GreengrassDeleteCoreDefinitionResponse(TypedDict, total=False):
    pass


class GreengrassDeleteDeviceDefinitionResponse(TypedDict, total=False):
    pass


class GreengrassDeleteFunctionDefinitionResponse(TypedDict, total=False):
    pass


class GreengrassDeleteGroupResponse(TypedDict, total=False):
    pass


class GreengrassDeleteLoggerDefinitionResponse(TypedDict, total=False):
    pass


class GreengrassDeleteResourceDefinitionResponse(TypedDict, total=False):
    pass


class GreengrassDeleteSubscriptionDefinitionResponse(TypedDict, total=False):
    pass


class GreengrassDisassociateRoleFromGroupResponse(TypedDict, total=False):
    DisassociatedAt: str


class GreengrassDisassociateServiceRoleFromAccountResponse(TypedDict, total=False):
    DisassociatedAt: str


class GreengrassGetAssociatedRoleResponse(TypedDict, total=False):
    AssociatedAt: str
    RoleArn: str


class GreengrassGetBulkDeploymentStatusResponse(TypedDict, total=False):
    BulkDeploymentMetrics: GreengrassBulkDeploymentMetrics
    BulkDeploymentStatus: str
    CreatedAt: str
    ErrorDetails: List[GreengrassErrorDetail]
    ErrorMessage: str
    tags: Dict[str, str]


class GreengrassBulkDeploymentMetrics(TypedDict, total=False):
    InvalidInputRecords: int
    RecordsProcessed: int
    RetryAttempts: int


class GreengrassErrorDetail(TypedDict, total=False):
    DetailedErrorCode: str
    DetailedErrorMessage: str


class GreengrassGetConnectivityInfoResponse(TypedDict, total=False):
    ConnectivityInfo: List[GreengrassConnectivityInfo]
    Message: str


class GreengrassConnectivityInfo(TypedDict, total=False):
    HostAddress: str
    Id: str
    Metadata: str
    PortNumber: int


class GreengrassGetConnectorDefinitionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Id: str
    LastUpdatedTimestamp: str
    LatestVersion: str
    LatestVersionArn: str
    Name: str
    tags: Dict[str, str]


class GreengrassGetConnectorDefinitionVersionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Definition: GreengrassConnectorDefinitionVersion
    Id: str
    NextToken: str
    Version: str


class GreengrassGetCoreDefinitionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Id: str
    LastUpdatedTimestamp: str
    LatestVersion: str
    LatestVersionArn: str
    Name: str
    tags: Dict[str, str]


class GreengrassGetCoreDefinitionVersionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Definition: GreengrassCoreDefinitionVersion
    Id: str
    NextToken: str
    Version: str


class GreengrassGetDeploymentStatusResponse(TypedDict, total=False):
    DeploymentStatus: str
    DeploymentType: str
    ErrorDetails: List[GreengrassErrorDetail]
    ErrorMessage: str
    UpdatedAt: str


class GreengrassGetDeviceDefinitionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Id: str
    LastUpdatedTimestamp: str
    LatestVersion: str
    LatestVersionArn: str
    Name: str
    tags: Dict[str, str]


class GreengrassGetDeviceDefinitionVersionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Definition: GreengrassDeviceDefinitionVersion
    Id: str
    NextToken: str
    Version: str


class GreengrassGetFunctionDefinitionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Id: str
    LastUpdatedTimestamp: str
    LatestVersion: str
    LatestVersionArn: str
    Name: str
    tags: Dict[str, str]


class GreengrassGetFunctionDefinitionVersionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Definition: GreengrassFunctionDefinitionVersion
    Id: str
    NextToken: str
    Version: str


class GreengrassGetGroupResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Id: str
    LastUpdatedTimestamp: str
    LatestVersion: str
    LatestVersionArn: str
    Name: str
    tags: Dict[str, str]


class GreengrassGetGroupCertificateAuthorityResponse(TypedDict, total=False):
    GroupCertificateAuthorityArn: str
    GroupCertificateAuthorityId: str
    PemEncodedCertificate: str


class GreengrassGetGroupCertificateConfigurationResponse(TypedDict, total=False):
    CertificateAuthorityExpiryInMilliseconds: str
    CertificateExpiryInMilliseconds: str
    GroupId: str


class GreengrassGetGroupVersionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Definition: GreengrassGroupVersion
    Id: str
    Version: str


class GreengrassGetLoggerDefinitionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Id: str
    LastUpdatedTimestamp: str
    LatestVersion: str
    LatestVersionArn: str
    Name: str
    tags: Dict[str, str]


class GreengrassGetLoggerDefinitionVersionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Definition: GreengrassLoggerDefinitionVersion
    Id: str
    Version: str


class GreengrassGetResourceDefinitionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Id: str
    LastUpdatedTimestamp: str
    LatestVersion: str
    LatestVersionArn: str
    Name: str
    tags: Dict[str, str]


class GreengrassGetResourceDefinitionVersionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Definition: GreengrassResourceDefinitionVersion
    Id: str
    Version: str


class GreengrassGetServiceRoleForAccountResponse(TypedDict, total=False):
    AssociatedAt: str
    RoleArn: str


class GreengrassGetSubscriptionDefinitionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Id: str
    LastUpdatedTimestamp: str
    LatestVersion: str
    LatestVersionArn: str
    Name: str
    tags: Dict[str, str]


class GreengrassGetSubscriptionDefinitionVersionResponse(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Definition: GreengrassSubscriptionDefinitionVersion
    Id: str
    NextToken: str
    Version: str


class GreengrassListBulkDeploymentDetailedReportsResponse(TypedDict, total=False):
    Deployments: List[GreengrassBulkDeploymentResult]
    NextToken: str


class GreengrassBulkDeploymentResult(TypedDict, total=False):
    CreatedAt: str
    DeploymentArn: str
    DeploymentId: str
    DeploymentStatus: str
    DeploymentType: str
    ErrorDetails: List[GreengrassErrorDetail]
    ErrorMessage: str
    GroupArn: str


class GreengrassListBulkDeploymentsResponse(TypedDict, total=False):
    BulkDeployments: List[GreengrassBulkDeployment]
    NextToken: str


class GreengrassBulkDeployment(TypedDict, total=False):
    BulkDeploymentArn: str
    BulkDeploymentId: str
    CreatedAt: str


class GreengrassListConnectorDefinitionVersionsResponse(TypedDict, total=False):
    NextToken: str
    Versions: List[GreengrassVersionInformation]


class GreengrassVersionInformation(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Id: str
    Version: str


class GreengrassListConnectorDefinitionsResponse(TypedDict, total=False):
    Definitions: List[GreengrassDefinitionInformation]
    NextToken: str


class GreengrassDefinitionInformation(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Id: str
    LastUpdatedTimestamp: str
    LatestVersion: str
    LatestVersionArn: str
    Name: str
    Tags: Dict[str, str]


class GreengrassListCoreDefinitionVersionsResponse(TypedDict, total=False):
    NextToken: str
    Versions: List[GreengrassVersionInformation]


class GreengrassListCoreDefinitionsResponse(TypedDict, total=False):
    Definitions: List[GreengrassDefinitionInformation]
    NextToken: str


class GreengrassListDeploymentsResponse(TypedDict, total=False):
    Deployments: List[GreengrassDeployment]
    NextToken: str


class GreengrassDeployment(TypedDict, total=False):
    CreatedAt: str
    DeploymentArn: str
    DeploymentId: str
    DeploymentType: str
    GroupArn: str


class GreengrassListDeviceDefinitionVersionsResponse(TypedDict, total=False):
    NextToken: str
    Versions: List[GreengrassVersionInformation]


class GreengrassListDeviceDefinitionsResponse(TypedDict, total=False):
    Definitions: List[GreengrassDefinitionInformation]
    NextToken: str


class GreengrassListFunctionDefinitionVersionsResponse(TypedDict, total=False):
    NextToken: str
    Versions: List[GreengrassVersionInformation]


class GreengrassListFunctionDefinitionsResponse(TypedDict, total=False):
    Definitions: List[GreengrassDefinitionInformation]
    NextToken: str


class GreengrassListGroupCertificateAuthoritiesResponse(TypedDict, total=False):
    GroupCertificateAuthorities: List[GreengrassGroupCertificateAuthorityProperties]


class GreengrassGroupCertificateAuthorityProperties(TypedDict, total=False):
    GroupCertificateAuthorityArn: str
    GroupCertificateAuthorityId: str


class GreengrassListGroupVersionsResponse(TypedDict, total=False):
    NextToken: str
    Versions: List[GreengrassVersionInformation]


class GreengrassListGroupsResponse(TypedDict, total=False):
    Groups: List[GreengrassGroupInformation]
    NextToken: str


class GreengrassGroupInformation(TypedDict, total=False):
    Arn: str
    CreationTimestamp: str
    Id: str
    LastUpdatedTimestamp: str
    LatestVersion: str
    LatestVersionArn: str
    Name: str


class GreengrassListLoggerDefinitionVersionsResponse(TypedDict, total=False):
    NextToken: str
    Versions: List[GreengrassVersionInformation]


class GreengrassListLoggerDefinitionsResponse(TypedDict, total=False):
    Definitions: List[GreengrassDefinitionInformation]
    NextToken: str


class GreengrassListResourceDefinitionVersionsResponse(TypedDict, total=False):
    NextToken: str
    Versions: List[GreengrassVersionInformation]


class GreengrassListResourceDefinitionsResponse(TypedDict, total=False):
    Definitions: List[GreengrassDefinitionInformation]
    NextToken: str


class GreengrassListSubscriptionDefinitionVersionsResponse(TypedDict, total=False):
    NextToken: str
    Versions: List[GreengrassVersionInformation]


class GreengrassListSubscriptionDefinitionsResponse(TypedDict, total=False):
    Definitions: List[GreengrassDefinitionInformation]
    NextToken: str


class GreengrassListTagsForResourceResponse(TypedDict, total=False):
    tags: Dict[str, str]


class GreengrassResetDeploymentsResponse(TypedDict, total=False):
    DeploymentArn: str
    DeploymentId: str


class GreengrassStartBulkDeploymentResponse(TypedDict, total=False):
    BulkDeploymentArn: str
    BulkDeploymentId: str


class GreengrassStopBulkDeploymentResponse(TypedDict, total=False):
    pass


class GreengrassUpdateConnectivityInfoResponse(TypedDict, total=False):
    Message: str
    Version: str


class GreengrassUpdateConnectorDefinitionResponse(TypedDict, total=False):
    pass


class GreengrassUpdateCoreDefinitionResponse(TypedDict, total=False):
    pass


class GreengrassUpdateDeviceDefinitionResponse(TypedDict, total=False):
    pass


class GreengrassUpdateFunctionDefinitionResponse(TypedDict, total=False):
    pass


class GreengrassUpdateGroupResponse(TypedDict, total=False):
    pass


class GreengrassUpdateGroupCertificateConfigurationResponse(TypedDict, total=False):
    CertificateAuthorityExpiryInMilliseconds: str
    CertificateExpiryInMilliseconds: str
    GroupId: str


class GreengrassUpdateLoggerDefinitionResponse(TypedDict, total=False):
    pass


class GreengrassUpdateResourceDefinitionResponse(TypedDict, total=False):
    pass


class GreengrassUpdateSubscriptionDefinitionResponse(TypedDict, total=False):
    pass


class GuardDuty(BaseClient):
    def accept_invitation(self, *,
        DetectorId: str,
        InvitationId: str,
        MasterId: str
    ) -> GuardDutyAcceptInvitationResponse: ...

    def archive_findings(self, *,
        DetectorId: str,
        FindingIds: List[str]
    ) -> GuardDutyArchiveFindingsResponse: ...

    def create_detector(self, *,
        Enable: bool,
        ClientToken: str = ...,
        FindingPublishingFrequency: str = ...
    ) -> GuardDutyCreateDetectorResponse: ...

    def create_filter(self, *,
        DetectorId: str,
        FindingCriteria: GuardDutyFindingCriteria,
        Name: str,
        Action: str = ...,
        ClientToken: str = ...,
        Description: str = ...,
        Rank: int = ...
    ) -> GuardDutyCreateFilterResponse: ...

    def create_ip_set(self, *,
        Activate: bool,
        DetectorId: str,
        Format: str,
        Location: str,
        Name: str,
        ClientToken: str = ...
    ) -> GuardDutyCreateIPSetResponse: ...

    def create_members(self, *,
        AccountDetails: List[GuardDutyAccountDetail],
        DetectorId: str
    ) -> GuardDutyCreateMembersResponse: ...

    def create_sample_findings(self, *,
        DetectorId: str,
        FindingTypes: List[str] = ...
    ) -> GuardDutyCreateSampleFindingsResponse: ...

    def create_threat_intel_set(self, *,
        Activate: bool,
        DetectorId: str,
        Format: str,
        Location: str,
        Name: str,
        ClientToken: str = ...
    ) -> GuardDutyCreateThreatIntelSetResponse: ...

    def decline_invitations(self, *,
        AccountIds: List[str]
    ) -> GuardDutyDeclineInvitationsResponse: ...

    def delete_detector(self, *,
        DetectorId: str
    ) -> GuardDutyDeleteDetectorResponse: ...

    def delete_filter(self, *,
        DetectorId: str,
        FilterName: str
    ) -> GuardDutyDeleteFilterResponse: ...

    def delete_ip_set(self, *,
        DetectorId: str,
        IpSetId: str
    ) -> GuardDutyDeleteIPSetResponse: ...

    def delete_invitations(self, *,
        AccountIds: List[str]
    ) -> GuardDutyDeleteInvitationsResponse: ...

    def delete_members(self, *,
        AccountIds: List[str],
        DetectorId: str
    ) -> GuardDutyDeleteMembersResponse: ...

    def delete_threat_intel_set(self, *,
        DetectorId: str,
        ThreatIntelSetId: str
    ) -> GuardDutyDeleteThreatIntelSetResponse: ...

    def disassociate_from_master_account(self, *,
        DetectorId: str
    ) -> GuardDutyDisassociateFromMasterAccountResponse: ...

    def disassociate_members(self, *,
        AccountIds: List[str],
        DetectorId: str
    ) -> GuardDutyDisassociateMembersResponse: ...

    def get_detector(self, *,
        DetectorId: str
    ) -> GuardDutyGetDetectorResponse: ...

    def get_filter(self, *,
        DetectorId: str,
        FilterName: str
    ) -> GuardDutyGetFilterResponse: ...

    def get_findings(self, *,
        DetectorId: str,
        FindingIds: List[str],
        SortCriteria: GuardDutySortCriteria = ...
    ) -> GuardDutyGetFindingsResponse: ...

    def get_findings_statistics(self, *,
        DetectorId: str,
        FindingStatisticTypes: List[str],
        FindingCriteria: GuardDutyFindingCriteria = ...
    ) -> GuardDutyGetFindingsStatisticsResponse: ...

    def get_ip_set(self, *,
        DetectorId: str,
        IpSetId: str
    ) -> GuardDutyGetIPSetResponse: ...

    def get_invitations_count(self) -> GuardDutyGetInvitationsCountResponse: ...

    def get_master_account(self, *,
        DetectorId: str
    ) -> GuardDutyGetMasterAccountResponse: ...

    def get_members(self, *,
        AccountIds: List[str],
        DetectorId: str
    ) -> GuardDutyGetMembersResponse: ...

    def get_threat_intel_set(self, *,
        DetectorId: str,
        ThreatIntelSetId: str
    ) -> GuardDutyGetThreatIntelSetResponse: ...

    def invite_members(self, *,
        AccountIds: List[str],
        DetectorId: str,
        DisableEmailNotification: bool = ...,
        Message: str = ...
    ) -> GuardDutyInviteMembersResponse: ...

    def list_detectors(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> GuardDutyListDetectorsResponse: ...

    def list_filters(self, *,
        DetectorId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> GuardDutyListFiltersResponse: ...

    def list_findings(self, *,
        DetectorId: str,
        FindingCriteria: GuardDutyFindingCriteria = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        SortCriteria: GuardDutySortCriteria = ...
    ) -> GuardDutyListFindingsResponse: ...

    def list_ip_sets(self, *,
        DetectorId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> GuardDutyListIPSetsResponse: ...

    def list_invitations(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> GuardDutyListInvitationsResponse: ...

    def list_members(self, *,
        DetectorId: str,
        MaxResults: int = ...,
        NextToken: str = ...,
        OnlyAssociated: str = ...
    ) -> GuardDutyListMembersResponse: ...

    def list_threat_intel_sets(self, *,
        DetectorId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> GuardDutyListThreatIntelSetsResponse: ...

    def start_monitoring_members(self, *,
        AccountIds: List[str],
        DetectorId: str
    ) -> GuardDutyStartMonitoringMembersResponse: ...

    def stop_monitoring_members(self, *,
        AccountIds: List[str],
        DetectorId: str
    ) -> GuardDutyStopMonitoringMembersResponse: ...

    def unarchive_findings(self, *,
        DetectorId: str,
        FindingIds: List[str]
    ) -> GuardDutyUnarchiveFindingsResponse: ...

    def update_detector(self, *,
        DetectorId: str,
        Enable: bool = ...,
        FindingPublishingFrequency: str = ...
    ) -> GuardDutyUpdateDetectorResponse: ...

    def update_filter(self, *,
        DetectorId: str,
        FilterName: str,
        Action: str = ...,
        Description: str = ...,
        FindingCriteria: GuardDutyFindingCriteria = ...,
        Rank: int = ...
    ) -> GuardDutyUpdateFilterResponse: ...

    def update_findings_feedback(self, *,
        DetectorId: str,
        Feedback: str,
        FindingIds: List[str],
        Comments: str = ...
    ) -> GuardDutyUpdateFindingsFeedbackResponse: ...

    def update_ip_set(self, *,
        DetectorId: str,
        IpSetId: str,
        Activate: bool = ...,
        Location: str = ...,
        Name: str = ...
    ) -> GuardDutyUpdateIPSetResponse: ...

    def update_threat_intel_set(self, *,
        DetectorId: str,
        ThreatIntelSetId: str,
        Activate: bool = ...,
        Location: str = ...,
        Name: str = ...
    ) -> GuardDutyUpdateThreatIntelSetResponse: ...


class GuardDutyAcceptInvitationResponse(TypedDict, total=False):
    pass


class GuardDutyArchiveFindingsResponse(TypedDict, total=False):
    pass


class GuardDutyCreateDetectorResponse(TypedDict, total=False):
    DetectorId: str


class GuardDutyFindingCriteria(TypedDict, total=False):
    Criterion: Dict[str, GuardDutyCondition]


class GuardDutyCondition(TypedDict, total=False):
    Eq: List[str]
    Gt: int
    Gte: int
    Lt: int
    Lte: int
    Neq: List[str]


class GuardDutyCreateFilterResponse(TypedDict, total=False):
    Name: str


class GuardDutyCreateIPSetResponse(TypedDict, total=False):
    IpSetId: str


class GuardDutyAccountDetail(TypedDict):
    AccountId: str
    Email: str


class GuardDutyCreateMembersResponse(TypedDict, total=False):
    UnprocessedAccounts: List[GuardDutyUnprocessedAccount]


class GuardDutyUnprocessedAccount(TypedDict):
    AccountId: str
    Result: str


class GuardDutyCreateSampleFindingsResponse(TypedDict, total=False):
    pass


class GuardDutyCreateThreatIntelSetResponse(TypedDict, total=False):
    ThreatIntelSetId: str


class GuardDutyDeclineInvitationsResponse(TypedDict, total=False):
    UnprocessedAccounts: List[GuardDutyUnprocessedAccount]


class GuardDutyDeleteDetectorResponse(TypedDict, total=False):
    pass


class GuardDutyDeleteFilterResponse(TypedDict, total=False):
    pass


class GuardDutyDeleteIPSetResponse(TypedDict, total=False):
    pass


class GuardDutyDeleteInvitationsResponse(TypedDict, total=False):
    UnprocessedAccounts: List[GuardDutyUnprocessedAccount]


class GuardDutyDeleteMembersResponse(TypedDict, total=False):
    UnprocessedAccounts: List[GuardDutyUnprocessedAccount]


class GuardDutyDeleteThreatIntelSetResponse(TypedDict, total=False):
    pass


class GuardDutyDisassociateFromMasterAccountResponse(TypedDict, total=False):
    pass


class GuardDutyDisassociateMembersResponse(TypedDict, total=False):
    UnprocessedAccounts: List[GuardDutyUnprocessedAccount]


class GuardDutyGetDetectorResponse(TypedDict, total=False):
    CreatedAt: str
    FindingPublishingFrequency: str
    ServiceRole: str
    Status: str
    UpdatedAt: str


class GuardDutyGetFilterResponse(TypedDict, total=False):
    Action: str
    Description: str
    FindingCriteria: GuardDutyFindingCriteria
    Name: str
    Rank: int


class GuardDutySortCriteria(TypedDict, total=False):
    AttributeName: str
    OrderBy: str


class GuardDutyGetFindingsResponse(TypedDict, total=False):
    Findings: List[GuardDutyFinding]


class _GuardDutyFinding(TypedDict):
    AccountId: str
    Arn: str
    CreatedAt: str
    Id: str
    Region: str
    Resource: GuardDutyResource
    SchemaVersion: str
    Severity: float
    Type: str
    UpdatedAt: str


class GuardDutyFinding(_GuardDutyFinding, total=False):
    Confidence: float
    Description: str
    Partition: str
    Service: GuardDutyService
    Title: str


class GuardDutyResource(TypedDict, total=False):
    AccessKeyDetails: GuardDutyAccessKeyDetails
    InstanceDetails: GuardDutyInstanceDetails
    ResourceType: str


class GuardDutyAccessKeyDetails(TypedDict, total=False):
    AccessKeyId: str
    PrincipalId: str
    UserName: str
    UserType: str


class GuardDutyInstanceDetails(TypedDict, total=False):
    AvailabilityZone: str
    IamInstanceProfile: GuardDutyIamInstanceProfile
    ImageDescription: str
    ImageId: str
    InstanceId: str
    InstanceState: str
    InstanceType: str
    LaunchTime: str
    NetworkInterfaces: List[GuardDutyNetworkInterface]
    Platform: str
    ProductCodes: List[GuardDutyProductCode]
    Tags: List[GuardDutyTag]


class GuardDutyIamInstanceProfile(TypedDict, total=False):
    Arn: str
    Id: str


class GuardDutyNetworkInterface(TypedDict, total=False):
    Ipv6Addresses: List[str]
    NetworkInterfaceId: str
    PrivateDnsName: str
    PrivateIpAddress: str
    PrivateIpAddresses: List[GuardDutyPrivateIpAddressDetails]
    PublicDnsName: str
    PublicIp: str
    SecurityGroups: List[GuardDutySecurityGroup]
    SubnetId: str
    VpcId: str


class GuardDutyPrivateIpAddressDetails(TypedDict, total=False):
    PrivateDnsName: str
    PrivateIpAddress: str


class GuardDutySecurityGroup(TypedDict, total=False):
    GroupId: str
    GroupName: str


class GuardDutyProductCode(TypedDict, total=False):
    Code: str
    ProductType: str


class GuardDutyTag(TypedDict, total=False):
    Key: str
    Value: str


class GuardDutyService(TypedDict, total=False):
    Action: GuardDutyAction
    Archived: bool
    Count: int
    DetectorId: str
    EventFirstSeen: str
    EventLastSeen: str
    ResourceRole: str
    ServiceName: str
    UserFeedback: str


class GuardDutyAction(TypedDict, total=False):
    ActionType: str
    AwsApiCallAction: GuardDutyAwsApiCallAction
    DnsRequestAction: GuardDutyDnsRequestAction
    NetworkConnectionAction: GuardDutyNetworkConnectionAction
    PortProbeAction: GuardDutyPortProbeAction


class GuardDutyAwsApiCallAction(TypedDict, total=False):
    Api: str
    CallerType: str
    DomainDetails: GuardDutyDomainDetails
    RemoteIpDetails: GuardDutyRemoteIpDetails
    ServiceName: str


class GuardDutyDomainDetails(TypedDict, total=False):
    pass


class GuardDutyRemoteIpDetails(TypedDict, total=False):
    City: GuardDutyCity
    Country: GuardDutyCountry
    GeoLocation: GuardDutyGeoLocation
    IpAddressV4: str
    Organization: GuardDutyOrganization


class GuardDutyCity(TypedDict, total=False):
    CityName: str


class GuardDutyCountry(TypedDict, total=False):
    CountryCode: str
    CountryName: str


class GuardDutyGeoLocation(TypedDict, total=False):
    Lat: float
    Lon: float


class GuardDutyOrganization(TypedDict, total=False):
    Asn: str
    AsnOrg: str
    Isp: str
    Org: str


class GuardDutyDnsRequestAction(TypedDict, total=False):
    Domain: str


class GuardDutyNetworkConnectionAction(TypedDict, total=False):
    Blocked: bool
    ConnectionDirection: str
    LocalPortDetails: GuardDutyLocalPortDetails
    Protocol: str
    RemoteIpDetails: GuardDutyRemoteIpDetails
    RemotePortDetails: GuardDutyRemotePortDetails


class GuardDutyLocalPortDetails(TypedDict, total=False):
    Port: int
    PortName: str


class GuardDutyRemotePortDetails(TypedDict, total=False):
    Port: int
    PortName: str


class GuardDutyPortProbeAction(TypedDict, total=False):
    Blocked: bool
    PortProbeDetails: List[GuardDutyPortProbeDetail]


class GuardDutyPortProbeDetail(TypedDict, total=False):
    LocalPortDetails: GuardDutyLocalPortDetails
    RemoteIpDetails: GuardDutyRemoteIpDetails


class GuardDutyGetFindingsStatisticsResponse(TypedDict, total=False):
    FindingStatistics: GuardDutyFindingStatistics


class GuardDutyFindingStatistics(TypedDict, total=False):
    CountBySeverity: Dict[str, int]


class GuardDutyGetIPSetResponse(TypedDict, total=False):
    Format: str
    Location: str
    Name: str
    Status: str


class GuardDutyGetInvitationsCountResponse(TypedDict, total=False):
    InvitationsCount: int


class GuardDutyGetMasterAccountResponse(TypedDict, total=False):
    Master: GuardDutyMaster


class GuardDutyMaster(TypedDict, total=False):
    AccountId: str
    InvitationId: str
    InvitedAt: str
    RelationshipStatus: str


class GuardDutyGetMembersResponse(TypedDict, total=False):
    Members: List[GuardDutyMember]
    UnprocessedAccounts: List[GuardDutyUnprocessedAccount]


class _GuardDutyMember(TypedDict):
    AccountId: str
    Email: str
    MasterId: str
    RelationshipStatus: str
    UpdatedAt: str


class GuardDutyMember(_GuardDutyMember, total=False):
    DetectorId: str
    InvitedAt: str


class GuardDutyGetThreatIntelSetResponse(TypedDict, total=False):
    Format: str
    Location: str
    Name: str
    Status: str


class GuardDutyInviteMembersResponse(TypedDict, total=False):
    UnprocessedAccounts: List[GuardDutyUnprocessedAccount]


class GuardDutyListDetectorsResponse(TypedDict, total=False):
    DetectorIds: List[str]
    NextToken: str


class GuardDutyListFiltersResponse(TypedDict, total=False):
    FilterNames: List[str]
    NextToken: str


class GuardDutyListFindingsResponse(TypedDict, total=False):
    FindingIds: List[str]
    NextToken: str


class GuardDutyListIPSetsResponse(TypedDict, total=False):
    IpSetIds: List[str]
    NextToken: str


class GuardDutyListInvitationsResponse(TypedDict, total=False):
    Invitations: List[GuardDutyInvitation]
    NextToken: str


class GuardDutyInvitation(TypedDict, total=False):
    AccountId: str
    InvitationId: str
    InvitedAt: str
    RelationshipStatus: str


class GuardDutyListMembersResponse(TypedDict, total=False):
    Members: List[GuardDutyMember]
    NextToken: str


class GuardDutyListThreatIntelSetsResponse(TypedDict, total=False):
    NextToken: str
    ThreatIntelSetIds: List[str]


class GuardDutyStartMonitoringMembersResponse(TypedDict, total=False):
    UnprocessedAccounts: List[GuardDutyUnprocessedAccount]


class GuardDutyStopMonitoringMembersResponse(TypedDict, total=False):
    UnprocessedAccounts: List[GuardDutyUnprocessedAccount]


class GuardDutyUnarchiveFindingsResponse(TypedDict, total=False):
    pass


class GuardDutyUpdateDetectorResponse(TypedDict, total=False):
    pass


class GuardDutyUpdateFilterResponse(TypedDict, total=False):
    Name: str


class GuardDutyUpdateFindingsFeedbackResponse(TypedDict, total=False):
    pass


class GuardDutyUpdateIPSetResponse(TypedDict, total=False):
    pass


class GuardDutyUpdateThreatIntelSetResponse(TypedDict, total=False):
    pass


class IAM(BaseClient):
    def add_client_id_to_open_id_connect_provider(self, *,
        OpenIDConnectProviderArn: str,
        ClientID: str
    ): ...

    def add_role_to_instance_profile(self, *,
        InstanceProfileName: str,
        RoleName: str
    ): ...

    def add_user_to_group(self, *,
        GroupName: str,
        UserName: str
    ): ...

    def attach_group_policy(self, *,
        GroupName: str,
        PolicyArn: str
    ): ...

    def attach_role_policy(self, *,
        RoleName: str,
        PolicyArn: str
    ): ...

    def attach_user_policy(self, *,
        UserName: str,
        PolicyArn: str
    ): ...

    def change_password(self, *,
        OldPassword: str,
        NewPassword: str
    ): ...

    def create_access_key(self, *,
        UserName: str = ...
    ) -> IAMCreateAccessKeyResponse: ...

    def create_account_alias(self, *,
        AccountAlias: str
    ): ...

    def create_group(self, *,
        GroupName: str,
        Path: str = ...
    ) -> IAMCreateGroupResponse: ...

    def create_instance_profile(self, *,
        InstanceProfileName: str,
        Path: str = ...
    ) -> IAMCreateInstanceProfileResponse: ...

    def create_login_profile(self, *,
        UserName: str,
        Password: str,
        PasswordResetRequired: bool = ...
    ) -> IAMCreateLoginProfileResponse: ...

    def create_open_id_connect_provider(self, *,
        Url: str,
        ThumbprintList: List[str],
        ClientIDList: List[str] = ...
    ) -> IAMCreateOpenIDConnectProviderResponse: ...

    def create_policy(self, *,
        PolicyName: str,
        PolicyDocument: str,
        Path: str = ...,
        Description: str = ...
    ) -> IAMCreatePolicyResponse: ...

    def create_policy_version(self, *,
        PolicyArn: str,
        PolicyDocument: str,
        SetAsDefault: bool = ...
    ) -> IAMCreatePolicyVersionResponse: ...

    def create_role(self, *,
        RoleName: str,
        AssumeRolePolicyDocument: str,
        Path: str = ...,
        Description: str = ...,
        MaxSessionDuration: int = ...,
        PermissionsBoundary: str = ...,
        Tags: List[IAMTag] = ...
    ) -> IAMCreateRoleResponse: ...

    def create_saml_provider(self, *,
        SAMLMetadataDocument: str,
        Name: str
    ) -> IAMCreateSAMLProviderResponse: ...

    def create_service_linked_role(self, *,
        AWSServiceName: str,
        Description: str = ...,
        CustomSuffix: str = ...
    ) -> IAMCreateServiceLinkedRoleResponse: ...

    def create_service_specific_credential(self, *,
        UserName: str,
        ServiceName: str
    ) -> IAMCreateServiceSpecificCredentialResponse: ...

    def create_user(self, *,
        UserName: str,
        Path: str = ...,
        PermissionsBoundary: str = ...,
        Tags: List[IAMTag] = ...
    ) -> IAMCreateUserResponse: ...

    def create_virtual_mfa_device(self, *,
        VirtualMFADeviceName: str,
        Path: str = ...
    ) -> IAMCreateVirtualMFADeviceResponse: ...

    def deactivate_mfa_device(self, *,
        UserName: str,
        SerialNumber: str
    ): ...

    def delete_access_key(self, *,
        AccessKeyId: str,
        UserName: str = ...
    ): ...

    def delete_account_alias(self, *,
        AccountAlias: str
    ): ...

    def delete_account_password_policy(self): ...

    def delete_group(self, *,
        GroupName: str
    ): ...

    def delete_group_policy(self, *,
        GroupName: str,
        PolicyName: str
    ): ...

    def delete_instance_profile(self, *,
        InstanceProfileName: str
    ): ...

    def delete_login_profile(self, *,
        UserName: str
    ): ...

    def delete_open_id_connect_provider(self, *,
        OpenIDConnectProviderArn: str
    ): ...

    def delete_policy(self, *,
        PolicyArn: str
    ): ...

    def delete_policy_version(self, *,
        PolicyArn: str,
        VersionId: str
    ): ...

    def delete_role(self, *,
        RoleName: str
    ): ...

    def delete_role_permissions_boundary(self, *,
        RoleName: str
    ): ...

    def delete_role_policy(self, *,
        RoleName: str,
        PolicyName: str
    ): ...

    def delete_saml_provider(self, *,
        SAMLProviderArn: str
    ): ...

    def delete_ssh_public_key(self, *,
        UserName: str,
        SSHPublicKeyId: str
    ): ...

    def delete_server_certificate(self, *,
        ServerCertificateName: str
    ): ...

    def delete_service_linked_role(self, *,
        RoleName: str
    ) -> IAMDeleteServiceLinkedRoleResponse: ...

    def delete_service_specific_credential(self, *,
        ServiceSpecificCredentialId: str,
        UserName: str = ...
    ): ...

    def delete_signing_certificate(self, *,
        CertificateId: str,
        UserName: str = ...
    ): ...

    def delete_user(self, *,
        UserName: str
    ): ...

    def delete_user_permissions_boundary(self, *,
        UserName: str
    ): ...

    def delete_user_policy(self, *,
        UserName: str,
        PolicyName: str
    ): ...

    def delete_virtual_mfa_device(self, *,
        SerialNumber: str
    ): ...

    def detach_group_policy(self, *,
        GroupName: str,
        PolicyArn: str
    ): ...

    def detach_role_policy(self, *,
        RoleName: str,
        PolicyArn: str
    ): ...

    def detach_user_policy(self, *,
        UserName: str,
        PolicyArn: str
    ): ...

    def enable_mfa_device(self, *,
        UserName: str,
        SerialNumber: str,
        AuthenticationCode1: str,
        AuthenticationCode2: str
    ): ...

    def generate_credential_report(self) -> IAMGenerateCredentialReportResponse: ...

    def generate_service_last_accessed_details(self, *,
        Arn: str
    ) -> IAMGenerateServiceLastAccessedDetailsResponse: ...

    def get_access_key_last_used(self, *,
        AccessKeyId: str
    ) -> IAMGetAccessKeyLastUsedResponse: ...

    def get_account_authorization_details(self, *,
        Filter: List[str] = ...,
        MaxItems: int = ...,
        Marker: str = ...
    ) -> IAMGetAccountAuthorizationDetailsResponse: ...

    def get_account_password_policy(self) -> IAMGetAccountPasswordPolicyResponse: ...

    def get_account_summary(self) -> IAMGetAccountSummaryResponse: ...

    def get_context_keys_for_custom_policy(self, *,
        PolicyInputList: List[str]
    ) -> IAMGetContextKeysForPolicyResponse: ...

    def get_context_keys_for_principal_policy(self, *,
        PolicySourceArn: str,
        PolicyInputList: List[str] = ...
    ) -> IAMGetContextKeysForPolicyResponse: ...

    def get_credential_report(self) -> IAMGetCredentialReportResponse: ...

    def get_group(self, *,
        GroupName: str,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMGetGroupResponse: ...

    def get_group_policy(self, *,
        GroupName: str,
        PolicyName: str
    ) -> IAMGetGroupPolicyResponse: ...

    def get_instance_profile(self, *,
        InstanceProfileName: str
    ) -> IAMGetInstanceProfileResponse: ...

    def get_login_profile(self, *,
        UserName: str
    ) -> IAMGetLoginProfileResponse: ...

    def get_open_id_connect_provider(self, *,
        OpenIDConnectProviderArn: str
    ) -> IAMGetOpenIDConnectProviderResponse: ...

    def get_policy(self, *,
        PolicyArn: str
    ) -> IAMGetPolicyResponse: ...

    def get_policy_version(self, *,
        PolicyArn: str,
        VersionId: str
    ) -> IAMGetPolicyVersionResponse: ...

    def get_role(self, *,
        RoleName: str
    ) -> IAMGetRoleResponse: ...

    def get_role_policy(self, *,
        RoleName: str,
        PolicyName: str
    ) -> IAMGetRolePolicyResponse: ...

    def get_saml_provider(self, *,
        SAMLProviderArn: str
    ) -> IAMGetSAMLProviderResponse: ...

    def get_ssh_public_key(self, *,
        UserName: str,
        SSHPublicKeyId: str,
        Encoding: str
    ) -> IAMGetSSHPublicKeyResponse: ...

    def get_server_certificate(self, *,
        ServerCertificateName: str
    ) -> IAMGetServerCertificateResponse: ...

    def get_service_last_accessed_details(self, *,
        JobId: str,
        MaxItems: int = ...,
        Marker: str = ...
    ) -> IAMGetServiceLastAccessedDetailsResponse: ...

    def get_service_last_accessed_details_with_entities(self, *,
        JobId: str,
        ServiceNamespace: str,
        MaxItems: int = ...,
        Marker: str = ...
    ) -> IAMGetServiceLastAccessedDetailsWithEntitiesResponse: ...

    def get_service_linked_role_deletion_status(self, *,
        DeletionTaskId: str
    ) -> IAMGetServiceLinkedRoleDeletionStatusResponse: ...

    def get_user(self, *,
        UserName: str = ...
    ) -> IAMGetUserResponse: ...

    def get_user_policy(self, *,
        UserName: str,
        PolicyName: str
    ) -> IAMGetUserPolicyResponse: ...

    def list_access_keys(self, *,
        UserName: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListAccessKeysResponse: ...

    def list_account_aliases(self, *,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListAccountAliasesResponse: ...

    def list_attached_group_policies(self, *,
        GroupName: str,
        PathPrefix: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListAttachedGroupPoliciesResponse: ...

    def list_attached_role_policies(self, *,
        RoleName: str,
        PathPrefix: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListAttachedRolePoliciesResponse: ...

    def list_attached_user_policies(self, *,
        UserName: str,
        PathPrefix: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListAttachedUserPoliciesResponse: ...

    def list_entities_for_policy(self, *,
        PolicyArn: str,
        EntityFilter: str = ...,
        PathPrefix: str = ...,
        PolicyUsageFilter: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListEntitiesForPolicyResponse: ...

    def list_group_policies(self, *,
        GroupName: str,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListGroupPoliciesResponse: ...

    def list_groups(self, *,
        PathPrefix: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListGroupsResponse: ...

    def list_groups_for_user(self, *,
        UserName: str,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListGroupsForUserResponse: ...

    def list_instance_profiles(self, *,
        PathPrefix: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListInstanceProfilesResponse: ...

    def list_instance_profiles_for_role(self, *,
        RoleName: str,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListInstanceProfilesForRoleResponse: ...

    def list_mfa_devices(self, *,
        UserName: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListMFADevicesResponse: ...

    def list_open_id_connect_providers(self) -> IAMListOpenIDConnectProvidersResponse: ...

    def list_policies(self, *,
        Scope: str = ...,
        OnlyAttached: bool = ...,
        PathPrefix: str = ...,
        PolicyUsageFilter: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListPoliciesResponse: ...

    def list_policies_granting_service_access(self, *,
        Arn: str,
        ServiceNamespaces: List[str],
        Marker: str = ...
    ) -> IAMListPoliciesGrantingServiceAccessResponse: ...

    def list_policy_versions(self, *,
        PolicyArn: str,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListPolicyVersionsResponse: ...

    def list_role_policies(self, *,
        RoleName: str,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListRolePoliciesResponse: ...

    def list_role_tags(self, *,
        RoleName: str,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListRoleTagsResponse: ...

    def list_roles(self, *,
        PathPrefix: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListRolesResponse: ...

    def list_saml_providers(self) -> IAMListSAMLProvidersResponse: ...

    def list_ssh_public_keys(self, *,
        UserName: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListSSHPublicKeysResponse: ...

    def list_server_certificates(self, *,
        PathPrefix: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListServerCertificatesResponse: ...

    def list_service_specific_credentials(self, *,
        UserName: str = ...,
        ServiceName: str = ...
    ) -> IAMListServiceSpecificCredentialsResponse: ...

    def list_signing_certificates(self, *,
        UserName: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListSigningCertificatesResponse: ...

    def list_user_policies(self, *,
        UserName: str,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListUserPoliciesResponse: ...

    def list_user_tags(self, *,
        UserName: str,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListUserTagsResponse: ...

    def list_users(self, *,
        PathPrefix: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListUsersResponse: ...

    def list_virtual_mfa_devices(self, *,
        AssignmentStatus: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> IAMListVirtualMFADevicesResponse: ...

    def put_group_policy(self, *,
        GroupName: str,
        PolicyName: str,
        PolicyDocument: str
    ): ...

    def put_role_permissions_boundary(self, *,
        RoleName: str,
        PermissionsBoundary: str
    ): ...

    def put_role_policy(self, *,
        RoleName: str,
        PolicyName: str,
        PolicyDocument: str
    ): ...

    def put_user_permissions_boundary(self, *,
        UserName: str,
        PermissionsBoundary: str
    ): ...

    def put_user_policy(self, *,
        UserName: str,
        PolicyName: str,
        PolicyDocument: str
    ): ...

    def remove_client_id_from_open_id_connect_provider(self, *,
        OpenIDConnectProviderArn: str,
        ClientID: str
    ): ...

    def remove_role_from_instance_profile(self, *,
        InstanceProfileName: str,
        RoleName: str
    ): ...

    def remove_user_from_group(self, *,
        GroupName: str,
        UserName: str
    ): ...

    def reset_service_specific_credential(self, *,
        ServiceSpecificCredentialId: str,
        UserName: str = ...
    ) -> IAMResetServiceSpecificCredentialResponse: ...

    def resync_mfa_device(self, *,
        UserName: str,
        SerialNumber: str,
        AuthenticationCode1: str,
        AuthenticationCode2: str
    ): ...

    def set_default_policy_version(self, *,
        PolicyArn: str,
        VersionId: str
    ): ...

    def set_security_token_service_preferences(self, *,
        GlobalEndpointTokenVersion: str
    ): ...

    def simulate_custom_policy(self, *,
        PolicyInputList: List[str],
        ActionNames: List[str],
        ResourceArns: List[str] = ...,
        ResourcePolicy: str = ...,
        ResourceOwner: str = ...,
        CallerArn: str = ...,
        ContextEntries: List[IAMContextEntry] = ...,
        ResourceHandlingOption: str = ...,
        MaxItems: int = ...,
        Marker: str = ...
    ) -> IAMSimulatePolicyResponse: ...

    def simulate_principal_policy(self, *,
        PolicySourceArn: str,
        ActionNames: List[str],
        PolicyInputList: List[str] = ...,
        ResourceArns: List[str] = ...,
        ResourcePolicy: str = ...,
        ResourceOwner: str = ...,
        CallerArn: str = ...,
        ContextEntries: List[IAMContextEntry] = ...,
        ResourceHandlingOption: str = ...,
        MaxItems: int = ...,
        Marker: str = ...
    ) -> IAMSimulatePolicyResponse: ...

    def tag_role(self, *,
        RoleName: str,
        Tags: List[IAMTag]
    ): ...

    def tag_user(self, *,
        UserName: str,
        Tags: List[IAMTag]
    ): ...

    def untag_role(self, *,
        RoleName: str,
        TagKeys: List[str]
    ): ...

    def untag_user(self, *,
        UserName: str,
        TagKeys: List[str]
    ): ...

    def update_access_key(self, *,
        AccessKeyId: str,
        Status: str,
        UserName: str = ...
    ): ...

    def update_account_password_policy(self, *,
        MinimumPasswordLength: int = ...,
        RequireSymbols: bool = ...,
        RequireNumbers: bool = ...,
        RequireUppercaseCharacters: bool = ...,
        RequireLowercaseCharacters: bool = ...,
        AllowUsersToChangePassword: bool = ...,
        MaxPasswordAge: int = ...,
        PasswordReusePrevention: int = ...,
        HardExpiry: bool = ...
    ): ...

    def update_assume_role_policy(self, *,
        RoleName: str,
        PolicyDocument: str
    ): ...

    def update_group(self, *,
        GroupName: str,
        NewPath: str = ...,
        NewGroupName: str = ...
    ): ...

    def update_login_profile(self, *,
        UserName: str,
        Password: str = ...,
        PasswordResetRequired: bool = ...
    ): ...

    def update_open_id_connect_provider_thumbprint(self, *,
        OpenIDConnectProviderArn: str,
        ThumbprintList: List[str]
    ): ...

    def update_role(self, *,
        RoleName: str,
        Description: str = ...,
        MaxSessionDuration: int = ...
    ) -> IAMUpdateRoleResponse: ...

    def update_role_description(self, *,
        RoleName: str,
        Description: str
    ) -> IAMUpdateRoleDescriptionResponse: ...

    def update_saml_provider(self, *,
        SAMLMetadataDocument: str,
        SAMLProviderArn: str
    ) -> IAMUpdateSAMLProviderResponse: ...

    def update_ssh_public_key(self, *,
        UserName: str,
        SSHPublicKeyId: str,
        Status: str
    ): ...

    def update_server_certificate(self, *,
        ServerCertificateName: str,
        NewPath: str = ...,
        NewServerCertificateName: str = ...
    ): ...

    def update_service_specific_credential(self, *,
        ServiceSpecificCredentialId: str,
        Status: str,
        UserName: str = ...
    ): ...

    def update_signing_certificate(self, *,
        CertificateId: str,
        Status: str,
        UserName: str = ...
    ): ...

    def update_user(self, *,
        UserName: str,
        NewPath: str = ...,
        NewUserName: str = ...
    ): ...

    def upload_ssh_public_key(self, *,
        UserName: str,
        SSHPublicKeyBody: str
    ) -> IAMUploadSSHPublicKeyResponse: ...

    def upload_server_certificate(self, *,
        ServerCertificateName: str,
        CertificateBody: str,
        PrivateKey: str,
        Path: str = ...,
        CertificateChain: str = ...
    ) -> IAMUploadServerCertificateResponse: ...

    def upload_signing_certificate(self, *,
        CertificateBody: str,
        UserName: str = ...
    ) -> IAMUploadSigningCertificateResponse: ...


class IAMCreateAccessKeyResponse(TypedDict):
    AccessKey: IAMAccessKey


class _IAMAccessKey(TypedDict):
    UserName: str
    AccessKeyId: str
    Status: str
    SecretAccessKey: str


class IAMAccessKey(_IAMAccessKey, total=False):
    CreateDate: datetime.datetime


class IAMCreateGroupResponse(TypedDict):
    Group: IAMGroup


class IAMGroup(TypedDict):
    Path: str
    GroupName: str
    GroupId: str
    Arn: str
    CreateDate: datetime.datetime


class IAMCreateInstanceProfileResponse(TypedDict):
    InstanceProfile: IAMInstanceProfile


class IAMInstanceProfile(TypedDict):
    Path: str
    InstanceProfileName: str
    InstanceProfileId: str
    Arn: str
    CreateDate: datetime.datetime
    Roles: List[IAMRole]


class _IAMRole(TypedDict):
    Path: str
    RoleName: str
    RoleId: str
    Arn: str
    CreateDate: datetime.datetime


class IAMRole(_IAMRole, total=False):
    AssumeRolePolicyDocument: str
    Description: str
    MaxSessionDuration: int
    PermissionsBoundary: IAMAttachedPermissionsBoundary
    Tags: List[IAMTag]


class IAMAttachedPermissionsBoundary(TypedDict, total=False):
    PermissionsBoundaryType: str
    PermissionsBoundaryArn: str


class IAMTag(TypedDict):
    Key: str
    Value: str


class IAMCreateLoginProfileResponse(TypedDict):
    LoginProfile: IAMLoginProfile


class _IAMLoginProfile(TypedDict):
    UserName: str
    CreateDate: datetime.datetime


class IAMLoginProfile(_IAMLoginProfile, total=False):
    PasswordResetRequired: bool


class IAMCreateOpenIDConnectProviderResponse(TypedDict, total=False):
    OpenIDConnectProviderArn: str


class IAMCreatePolicyResponse(TypedDict, total=False):
    Policy: IAMPolicy


class IAMPolicy(TypedDict, total=False):
    PolicyName: str
    PolicyId: str
    Arn: str
    Path: str
    DefaultVersionId: str
    AttachmentCount: int
    PermissionsBoundaryUsageCount: int
    IsAttachable: bool
    Description: str
    CreateDate: datetime.datetime
    UpdateDate: datetime.datetime


class IAMCreatePolicyVersionResponse(TypedDict, total=False):
    PolicyVersion: IAMPolicyVersion


class IAMPolicyVersion(TypedDict, total=False):
    Document: str
    VersionId: str
    IsDefaultVersion: bool
    CreateDate: datetime.datetime


class IAMCreateRoleResponse(TypedDict):
    Role: IAMRole


class IAMCreateSAMLProviderResponse(TypedDict, total=False):
    SAMLProviderArn: str


class IAMCreateServiceLinkedRoleResponse(TypedDict, total=False):
    Role: IAMRole


class IAMCreateServiceSpecificCredentialResponse(TypedDict, total=False):
    ServiceSpecificCredential: IAMServiceSpecificCredential


class IAMServiceSpecificCredential(TypedDict):
    CreateDate: datetime.datetime
    ServiceName: str
    ServiceUserName: str
    ServicePassword: str
    ServiceSpecificCredentialId: str
    UserName: str
    Status: str


class IAMCreateUserResponse(TypedDict, total=False):
    User: IAMUser


class _IAMUser(TypedDict):
    Path: str
    UserName: str
    UserId: str
    Arn: str
    CreateDate: datetime.datetime


class IAMUser(_IAMUser, total=False):
    PasswordLastUsed: datetime.datetime
    PermissionsBoundary: IAMAttachedPermissionsBoundary
    Tags: List[IAMTag]


class IAMCreateVirtualMFADeviceResponse(TypedDict):
    VirtualMFADevice: IAMVirtualMFADevice


class _IAMVirtualMFADevice(TypedDict):
    SerialNumber: str


class IAMVirtualMFADevice(_IAMVirtualMFADevice, total=False):
    Base32StringSeed: bytes
    QRCodePNG: bytes
    User: IAMUser
    EnableDate: datetime.datetime


class IAMDeleteServiceLinkedRoleResponse(TypedDict):
    DeletionTaskId: str


class IAMGenerateCredentialReportResponse(TypedDict, total=False):
    State: str
    Description: str


class IAMGenerateServiceLastAccessedDetailsResponse(TypedDict, total=False):
    JobId: str


class IAMGetAccessKeyLastUsedResponse(TypedDict, total=False):
    UserName: str
    AccessKeyLastUsed: IAMAccessKeyLastUsed


class IAMAccessKeyLastUsed(TypedDict):
    LastUsedDate: datetime.datetime
    ServiceName: str
    Region: str


class IAMGetAccountAuthorizationDetailsResponse(TypedDict, total=False):
    UserDetailList: List[IAMUserDetail]
    GroupDetailList: List[IAMGroupDetail]
    RoleDetailList: List[IAMRoleDetail]
    Policies: List[IAMManagedPolicyDetail]
    IsTruncated: bool
    Marker: str


class IAMUserDetail(TypedDict, total=False):
    Path: str
    UserName: str
    UserId: str
    Arn: str
    CreateDate: datetime.datetime
    UserPolicyList: List[IAMPolicyDetail]
    GroupList: List[str]
    AttachedManagedPolicies: List[IAMAttachedPolicy]
    PermissionsBoundary: IAMAttachedPermissionsBoundary
    Tags: List[IAMTag]


class IAMPolicyDetail(TypedDict, total=False):
    PolicyName: str
    PolicyDocument: str


class IAMAttachedPolicy(TypedDict, total=False):
    PolicyName: str
    PolicyArn: str


class IAMGroupDetail(TypedDict, total=False):
    Path: str
    GroupName: str
    GroupId: str
    Arn: str
    CreateDate: datetime.datetime
    GroupPolicyList: List[IAMPolicyDetail]
    AttachedManagedPolicies: List[IAMAttachedPolicy]


class IAMRoleDetail(TypedDict, total=False):
    Path: str
    RoleName: str
    RoleId: str
    Arn: str
    CreateDate: datetime.datetime
    AssumeRolePolicyDocument: str
    InstanceProfileList: List[IAMInstanceProfile]
    RolePolicyList: List[IAMPolicyDetail]
    AttachedManagedPolicies: List[IAMAttachedPolicy]
    PermissionsBoundary: IAMAttachedPermissionsBoundary
    Tags: List[IAMTag]


class IAMManagedPolicyDetail(TypedDict, total=False):
    PolicyName: str
    PolicyId: str
    Arn: str
    Path: str
    DefaultVersionId: str
    AttachmentCount: int
    PermissionsBoundaryUsageCount: int
    IsAttachable: bool
    Description: str
    CreateDate: datetime.datetime
    UpdateDate: datetime.datetime
    PolicyVersionList: List[IAMPolicyVersion]


class IAMGetAccountPasswordPolicyResponse(TypedDict):
    PasswordPolicy: IAMPasswordPolicy


class IAMPasswordPolicy(TypedDict, total=False):
    MinimumPasswordLength: int
    RequireSymbols: bool
    RequireNumbers: bool
    RequireUppercaseCharacters: bool
    RequireLowercaseCharacters: bool
    AllowUsersToChangePassword: bool
    ExpirePasswords: bool
    MaxPasswordAge: int
    PasswordReusePrevention: int
    HardExpiry: bool


class IAMGetAccountSummaryResponse(TypedDict, total=False):
    SummaryMap: Dict[str, int]


class IAMGetContextKeysForPolicyResponse(TypedDict, total=False):
    ContextKeyNames: List[str]


class IAMGetCredentialReportResponse(TypedDict, total=False):
    Content: bytes
    ReportFormat: str
    GeneratedTime: datetime.datetime


class _IAMGetGroupResponse(TypedDict):
    Group: IAMGroup
    Users: List[IAMUser]


class IAMGetGroupResponse(_IAMGetGroupResponse, total=False):
    IsTruncated: bool
    Marker: str


class IAMGetGroupPolicyResponse(TypedDict):
    GroupName: str
    PolicyName: str
    PolicyDocument: str


class IAMGetInstanceProfileResponse(TypedDict):
    InstanceProfile: IAMInstanceProfile


class IAMGetLoginProfileResponse(TypedDict):
    LoginProfile: IAMLoginProfile


class IAMGetOpenIDConnectProviderResponse(TypedDict, total=False):
    Url: str
    ClientIDList: List[str]
    ThumbprintList: List[str]
    CreateDate: datetime.datetime


class IAMGetPolicyResponse(TypedDict, total=False):
    Policy: IAMPolicy


class IAMGetPolicyVersionResponse(TypedDict, total=False):
    PolicyVersion: IAMPolicyVersion


class IAMGetRoleResponse(TypedDict):
    Role: IAMRole


class IAMGetRolePolicyResponse(TypedDict):
    RoleName: str
    PolicyName: str
    PolicyDocument: str


class IAMGetSAMLProviderResponse(TypedDict, total=False):
    SAMLMetadataDocument: str
    CreateDate: datetime.datetime
    ValidUntil: datetime.datetime


class IAMGetSSHPublicKeyResponse(TypedDict, total=False):
    SSHPublicKey: IAMSSHPublicKey


class _IAMSSHPublicKey(TypedDict):
    UserName: str
    SSHPublicKeyId: str
    Fingerprint: str
    SSHPublicKeyBody: str
    Status: str


class IAMSSHPublicKey(_IAMSSHPublicKey, total=False):
    UploadDate: datetime.datetime


class IAMGetServerCertificateResponse(TypedDict):
    ServerCertificate: IAMServerCertificate


class _IAMServerCertificate(TypedDict):
    ServerCertificateMetadata: IAMServerCertificateMetadata
    CertificateBody: str


class IAMServerCertificate(_IAMServerCertificate, total=False):
    CertificateChain: str


class _IAMServerCertificateMetadata(TypedDict):
    Path: str
    ServerCertificateName: str
    ServerCertificateId: str
    Arn: str


class IAMServerCertificateMetadata(_IAMServerCertificateMetadata, total=False):
    UploadDate: datetime.datetime
    Expiration: datetime.datetime


class _IAMGetServiceLastAccessedDetailsResponse(TypedDict):
    JobStatus: str
    JobCreationDate: datetime.datetime
    ServicesLastAccessed: List[IAMServiceLastAccessed]
    JobCompletionDate: datetime.datetime


class IAMGetServiceLastAccessedDetailsResponse(_IAMGetServiceLastAccessedDetailsResponse, total=False):
    IsTruncated: bool
    Marker: str
    Error: IAMErrorDetails


class _IAMServiceLastAccessed(TypedDict):
    ServiceName: str
    ServiceNamespace: str


class IAMServiceLastAccessed(_IAMServiceLastAccessed, total=False):
    LastAuthenticated: datetime.datetime
    LastAuthenticatedEntity: str
    TotalAuthenticatedEntities: int


class IAMErrorDetails(TypedDict):
    Message: str
    Code: str


class _IAMGetServiceLastAccessedDetailsWithEntitiesResponse(TypedDict):
    JobStatus: str
    JobCreationDate: datetime.datetime
    JobCompletionDate: datetime.datetime
    EntityDetailsList: List[IAMEntityDetails]


class IAMGetServiceLastAccessedDetailsWithEntitiesResponse(_IAMGetServiceLastAccessedDetailsWithEntitiesResponse, total=False):
    IsTruncated: bool
    Marker: str
    Error: IAMErrorDetails


class _IAMEntityDetails(TypedDict):
    EntityInfo: IAMEntityInfo


class IAMEntityDetails(_IAMEntityDetails, total=False):
    LastAuthenticated: datetime.datetime


class _IAMEntityInfo(TypedDict):
    Arn: str
    Name: str
    Type: str
    Id: str


class IAMEntityInfo(_IAMEntityInfo, total=False):
    Path: str


class _IAMGetServiceLinkedRoleDeletionStatusResponse(TypedDict):
    Status: str


class IAMGetServiceLinkedRoleDeletionStatusResponse(_IAMGetServiceLinkedRoleDeletionStatusResponse, total=False):
    Reason: IAMDeletionTaskFailureReasonType


class IAMDeletionTaskFailureReasonType(TypedDict, total=False):
    Reason: str
    RoleUsageList: List[IAMRoleUsageType]


class IAMRoleUsageType(TypedDict, total=False):
    Region: str
    Resources: List[str]


class IAMGetUserResponse(TypedDict):
    User: IAMUser


class IAMGetUserPolicyResponse(TypedDict):
    UserName: str
    PolicyName: str
    PolicyDocument: str


class _IAMListAccessKeysResponse(TypedDict):
    AccessKeyMetadata: List[IAMAccessKeyMetadata]


class IAMListAccessKeysResponse(_IAMListAccessKeysResponse, total=False):
    IsTruncated: bool
    Marker: str


class IAMAccessKeyMetadata(TypedDict, total=False):
    UserName: str
    AccessKeyId: str
    Status: str
    CreateDate: datetime.datetime


class _IAMListAccountAliasesResponse(TypedDict):
    AccountAliases: List[str]


class IAMListAccountAliasesResponse(_IAMListAccountAliasesResponse, total=False):
    IsTruncated: bool
    Marker: str


class IAMListAttachedGroupPoliciesResponse(TypedDict, total=False):
    AttachedPolicies: List[IAMAttachedPolicy]
    IsTruncated: bool
    Marker: str


class IAMListAttachedRolePoliciesResponse(TypedDict, total=False):
    AttachedPolicies: List[IAMAttachedPolicy]
    IsTruncated: bool
    Marker: str


class IAMListAttachedUserPoliciesResponse(TypedDict, total=False):
    AttachedPolicies: List[IAMAttachedPolicy]
    IsTruncated: bool
    Marker: str


class IAMListEntitiesForPolicyResponse(TypedDict, total=False):
    PolicyGroups: List[IAMPolicyGroup]
    PolicyUsers: List[IAMPolicyUser]
    PolicyRoles: List[IAMPolicyRole]
    IsTruncated: bool
    Marker: str


class IAMPolicyGroup(TypedDict, total=False):
    GroupName: str
    GroupId: str


class IAMPolicyUser(TypedDict, total=False):
    UserName: str
    UserId: str


class IAMPolicyRole(TypedDict, total=False):
    RoleName: str
    RoleId: str


class _IAMListGroupPoliciesResponse(TypedDict):
    PolicyNames: List[str]


class IAMListGroupPoliciesResponse(_IAMListGroupPoliciesResponse, total=False):
    IsTruncated: bool
    Marker: str


class _IAMListGroupsResponse(TypedDict):
    Groups: List[IAMGroup]


class IAMListGroupsResponse(_IAMListGroupsResponse, total=False):
    IsTruncated: bool
    Marker: str


class _IAMListGroupsForUserResponse(TypedDict):
    Groups: List[IAMGroup]


class IAMListGroupsForUserResponse(_IAMListGroupsForUserResponse, total=False):
    IsTruncated: bool
    Marker: str


class _IAMListInstanceProfilesResponse(TypedDict):
    InstanceProfiles: List[IAMInstanceProfile]


class IAMListInstanceProfilesResponse(_IAMListInstanceProfilesResponse, total=False):
    IsTruncated: bool
    Marker: str


class _IAMListInstanceProfilesForRoleResponse(TypedDict):
    InstanceProfiles: List[IAMInstanceProfile]


class IAMListInstanceProfilesForRoleResponse(_IAMListInstanceProfilesForRoleResponse, total=False):
    IsTruncated: bool
    Marker: str


class _IAMListMFADevicesResponse(TypedDict):
    MFADevices: List[IAMMFADevice]


class IAMListMFADevicesResponse(_IAMListMFADevicesResponse, total=False):
    IsTruncated: bool
    Marker: str


class IAMMFADevice(TypedDict):
    UserName: str
    SerialNumber: str
    EnableDate: datetime.datetime


class IAMListOpenIDConnectProvidersResponse(TypedDict, total=False):
    OpenIDConnectProviderList: List[IAMOpenIDConnectProviderListEntry]


class IAMOpenIDConnectProviderListEntry(TypedDict, total=False):
    Arn: str


class IAMListPoliciesResponse(TypedDict, total=False):
    Policies: List[IAMPolicy]
    IsTruncated: bool
    Marker: str


class _IAMListPoliciesGrantingServiceAccessResponse(TypedDict):
    PoliciesGrantingServiceAccess: List[IAMListPoliciesGrantingServiceAccessEntry]


class IAMListPoliciesGrantingServiceAccessResponse(_IAMListPoliciesGrantingServiceAccessResponse, total=False):
    IsTruncated: bool
    Marker: str


class IAMListPoliciesGrantingServiceAccessEntry(TypedDict, total=False):
    ServiceNamespace: str
    Policies: List[IAMPolicyGrantingServiceAccess]


class _IAMPolicyGrantingServiceAccess(TypedDict):
    PolicyName: str
    PolicyType: str


class IAMPolicyGrantingServiceAccess(_IAMPolicyGrantingServiceAccess, total=False):
    PolicyArn: str
    EntityType: str
    EntityName: str


class IAMListPolicyVersionsResponse(TypedDict, total=False):
    Versions: List[IAMPolicyVersion]
    IsTruncated: bool
    Marker: str


class _IAMListRolePoliciesResponse(TypedDict):
    PolicyNames: List[str]


class IAMListRolePoliciesResponse(_IAMListRolePoliciesResponse, total=False):
    IsTruncated: bool
    Marker: str


class _IAMListRoleTagsResponse(TypedDict):
    Tags: List[IAMTag]


class IAMListRoleTagsResponse(_IAMListRoleTagsResponse, total=False):
    IsTruncated: bool
    Marker: str


class _IAMListRolesResponse(TypedDict):
    Roles: List[IAMRole]


class IAMListRolesResponse(_IAMListRolesResponse, total=False):
    IsTruncated: bool
    Marker: str


class IAMListSAMLProvidersResponse(TypedDict, total=False):
    SAMLProviderList: List[IAMSAMLProviderListEntry]


class IAMSAMLProviderListEntry(TypedDict, total=False):
    Arn: str
    ValidUntil: datetime.datetime
    CreateDate: datetime.datetime


class IAMListSSHPublicKeysResponse(TypedDict, total=False):
    SSHPublicKeys: List[IAMSSHPublicKeyMetadata]
    IsTruncated: bool
    Marker: str


class IAMSSHPublicKeyMetadata(TypedDict):
    UserName: str
    SSHPublicKeyId: str
    Status: str
    UploadDate: datetime.datetime


class _IAMListServerCertificatesResponse(TypedDict):
    ServerCertificateMetadataList: List[IAMServerCertificateMetadata]


class IAMListServerCertificatesResponse(_IAMListServerCertificatesResponse, total=False):
    IsTruncated: bool
    Marker: str


class IAMListServiceSpecificCredentialsResponse(TypedDict, total=False):
    ServiceSpecificCredentials: List[IAMServiceSpecificCredentialMetadata]


class IAMServiceSpecificCredentialMetadata(TypedDict):
    UserName: str
    Status: str
    ServiceUserName: str
    CreateDate: datetime.datetime
    ServiceSpecificCredentialId: str
    ServiceName: str


class _IAMListSigningCertificatesResponse(TypedDict):
    Certificates: List[IAMSigningCertificate]


class IAMListSigningCertificatesResponse(_IAMListSigningCertificatesResponse, total=False):
    IsTruncated: bool
    Marker: str


class _IAMSigningCertificate(TypedDict):
    UserName: str
    CertificateId: str
    CertificateBody: str
    Status: str


class IAMSigningCertificate(_IAMSigningCertificate, total=False):
    UploadDate: datetime.datetime


class _IAMListUserPoliciesResponse(TypedDict):
    PolicyNames: List[str]


class IAMListUserPoliciesResponse(_IAMListUserPoliciesResponse, total=False):
    IsTruncated: bool
    Marker: str


class _IAMListUserTagsResponse(TypedDict):
    Tags: List[IAMTag]


class IAMListUserTagsResponse(_IAMListUserTagsResponse, total=False):
    IsTruncated: bool
    Marker: str


class _IAMListUsersResponse(TypedDict):
    Users: List[IAMUser]


class IAMListUsersResponse(_IAMListUsersResponse, total=False):
    IsTruncated: bool
    Marker: str


class _IAMListVirtualMFADevicesResponse(TypedDict):
    VirtualMFADevices: List[IAMVirtualMFADevice]


class IAMListVirtualMFADevicesResponse(_IAMListVirtualMFADevicesResponse, total=False):
    IsTruncated: bool
    Marker: str


class IAMResetServiceSpecificCredentialResponse(TypedDict, total=False):
    ServiceSpecificCredential: IAMServiceSpecificCredential


class IAMContextEntry(TypedDict, total=False):
    ContextKeyName: str
    ContextKeyValues: List[str]
    ContextKeyType: str


class IAMSimulatePolicyResponse(TypedDict, total=False):
    EvaluationResults: List[IAMEvaluationResult]
    IsTruncated: bool
    Marker: str


class _IAMEvaluationResult(TypedDict):
    EvalActionName: str
    EvalDecision: str


class IAMEvaluationResult(_IAMEvaluationResult, total=False):
    EvalResourceName: str
    MatchedStatements: List[IAMStatement]
    MissingContextValues: List[str]
    OrganizationsDecisionDetail: IAMOrganizationsDecisionDetail
    EvalDecisionDetails: Dict[str, str]
    ResourceSpecificResults: List[IAMResourceSpecificResult]


class IAMStatement(TypedDict, total=False):
    SourcePolicyId: str
    SourcePolicyType: str
    StartPosition: IAMPosition
    EndPosition: IAMPosition


class IAMPosition(TypedDict, total=False):
    Line: int
    Column: int


class IAMOrganizationsDecisionDetail(TypedDict, total=False):
    AllowedByOrganizations: bool


class _IAMResourceSpecificResult(TypedDict):
    EvalResourceName: str
    EvalResourceDecision: str


class IAMResourceSpecificResult(_IAMResourceSpecificResult, total=False):
    MatchedStatements: List[IAMStatement]
    MissingContextValues: List[str]
    EvalDecisionDetails: Dict[str, str]


class IAMUpdateRoleResponse(TypedDict, total=False):
    pass


class IAMUpdateRoleDescriptionResponse(TypedDict, total=False):
    Role: IAMRole


class IAMUpdateSAMLProviderResponse(TypedDict, total=False):
    SAMLProviderArn: str


class IAMUploadSSHPublicKeyResponse(TypedDict, total=False):
    SSHPublicKey: IAMSSHPublicKey


class IAMUploadServerCertificateResponse(TypedDict, total=False):
    ServerCertificateMetadata: IAMServerCertificateMetadata


class IAMUploadSigningCertificateResponse(TypedDict):
    Certificate: IAMSigningCertificate


class ImportExport(BaseClient):
    def cancel_job(self, *,
        JobId: str,
        APIVersion: str = ...
    ) -> ImportExportCancelJobOutput: ...

    def create_job(self, *,
        JobType: str,
        Manifest: str,
        ValidateOnly: bool,
        ManifestAddendum: str = ...,
        APIVersion: str = ...
    ) -> ImportExportCreateJobOutput: ...

    def get_shipping_label(self, *,
        jobIds: List[str],
        name: str = ...,
        company: str = ...,
        phoneNumber: str = ...,
        country: str = ...,
        stateOrProvince: str = ...,
        city: str = ...,
        postalCode: str = ...,
        street1: str = ...,
        street2: str = ...,
        street3: str = ...,
        APIVersion: str = ...
    ) -> ImportExportGetShippingLabelOutput: ...

    def get_status(self, *,
        JobId: str,
        APIVersion: str = ...
    ) -> ImportExportGetStatusOutput: ...

    def list_jobs(self, *,
        MaxJobs: int = ...,
        Marker: str = ...,
        APIVersion: str = ...
    ) -> ImportExportListJobsOutput: ...

    def update_job(self, *,
        JobId: str,
        Manifest: str,
        JobType: str,
        ValidateOnly: bool,
        APIVersion: str = ...
    ) -> ImportExportUpdateJobOutput: ...


class ImportExportCancelJobOutput(TypedDict, total=False):
    Success: bool


class ImportExportCreateJobOutput(TypedDict, total=False):
    JobId: str
    JobType: str
    Signature: str
    SignatureFileContents: str
    WarningMessage: str
    ArtifactList: List[ImportExportArtifact]


class ImportExportArtifact(TypedDict, total=False):
    Description: str
    URL: str


class ImportExportGetShippingLabelOutput(TypedDict, total=False):
    ShippingLabelURL: str
    Warning: str


class ImportExportGetStatusOutput(TypedDict, total=False):
    JobId: str
    JobType: str
    LocationCode: str
    LocationMessage: str
    ProgressCode: str
    ProgressMessage: str
    Carrier: str
    TrackingNumber: str
    LogBucket: str
    LogKey: str
    ErrorCount: int
    Signature: str
    SignatureFileContents: str
    CurrentManifest: str
    CreationDate: datetime.datetime
    ArtifactList: List[ImportExportArtifact]


class ImportExportListJobsOutput(TypedDict, total=False):
    Jobs: List[ImportExportJob]
    IsTruncated: bool


class ImportExportJob(TypedDict, total=False):
    JobId: str
    CreationDate: datetime.datetime
    IsCanceled: bool
    JobType: str


class ImportExportUpdateJobOutput(TypedDict, total=False):
    Success: bool
    WarningMessage: str
    ArtifactList: List[ImportExportArtifact]


class Inspector(BaseClient):
    def add_attributes_to_findings(self, *,
        findingArns: List[str],
        attributes: List[InspectorAttribute]
    ) -> InspectorAddAttributesToFindingsResponse: ...

    def create_assessment_target(self, *,
        assessmentTargetName: str,
        resourceGroupArn: str = ...
    ) -> InspectorCreateAssessmentTargetResponse: ...

    def create_assessment_template(self, *,
        assessmentTargetArn: str,
        assessmentTemplateName: str,
        durationInSeconds: int,
        rulesPackageArns: List[str],
        userAttributesForFindings: List[InspectorAttribute] = ...
    ) -> InspectorCreateAssessmentTemplateResponse: ...

    def create_exclusions_preview(self, *,
        assessmentTemplateArn: str
    ) -> InspectorCreateExclusionsPreviewResponse: ...

    def create_resource_group(self, *,
        resourceGroupTags: List[InspectorResourceGroupTag]
    ) -> InspectorCreateResourceGroupResponse: ...

    def delete_assessment_run(self, *,
        assessmentRunArn: str
    ): ...

    def delete_assessment_target(self, *,
        assessmentTargetArn: str
    ): ...

    def delete_assessment_template(self, *,
        assessmentTemplateArn: str
    ): ...

    def describe_assessment_runs(self, *,
        assessmentRunArns: List[str]
    ) -> InspectorDescribeAssessmentRunsResponse: ...

    def describe_assessment_targets(self, *,
        assessmentTargetArns: List[str]
    ) -> InspectorDescribeAssessmentTargetsResponse: ...

    def describe_assessment_templates(self, *,
        assessmentTemplateArns: List[str]
    ) -> InspectorDescribeAssessmentTemplatesResponse: ...

    def describe_cross_account_access_role(self) -> InspectorDescribeCrossAccountAccessRoleResponse: ...

    def describe_exclusions(self, *,
        exclusionArns: List[str],
        locale: str = ...
    ) -> InspectorDescribeExclusionsResponse: ...

    def describe_findings(self, *,
        findingArns: List[str],
        locale: str = ...
    ) -> InspectorDescribeFindingsResponse: ...

    def describe_resource_groups(self, *,
        resourceGroupArns: List[str]
    ) -> InspectorDescribeResourceGroupsResponse: ...

    def describe_rules_packages(self, *,
        rulesPackageArns: List[str],
        locale: str = ...
    ) -> InspectorDescribeRulesPackagesResponse: ...

    def get_assessment_report(self, *,
        assessmentRunArn: str,
        reportFileFormat: str,
        reportType: str
    ) -> InspectorGetAssessmentReportResponse: ...

    def get_exclusions_preview(self, *,
        assessmentTemplateArn: str,
        previewToken: str,
        nextToken: str = ...,
        maxResults: int = ...,
        locale: str = ...
    ) -> InspectorGetExclusionsPreviewResponse: ...

    def get_telemetry_metadata(self, *,
        assessmentRunArn: str
    ) -> InspectorGetTelemetryMetadataResponse: ...

    def list_assessment_run_agents(self, *,
        assessmentRunArn: str,
        filter: InspectorAgentFilter = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> InspectorListAssessmentRunAgentsResponse: ...

    def list_assessment_runs(self, *,
        assessmentTemplateArns: List[str] = ...,
        filter: InspectorAssessmentRunFilter = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> InspectorListAssessmentRunsResponse: ...

    def list_assessment_targets(self, *,
        filter: InspectorAssessmentTargetFilter = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> InspectorListAssessmentTargetsResponse: ...

    def list_assessment_templates(self, *,
        assessmentTargetArns: List[str] = ...,
        filter: InspectorAssessmentTemplateFilter = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> InspectorListAssessmentTemplatesResponse: ...

    def list_event_subscriptions(self, *,
        resourceArn: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> InspectorListEventSubscriptionsResponse: ...

    def list_exclusions(self, *,
        assessmentRunArn: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> InspectorListExclusionsResponse: ...

    def list_findings(self, *,
        assessmentRunArns: List[str] = ...,
        filter: InspectorFindingFilter = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> InspectorListFindingsResponse: ...

    def list_rules_packages(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> InspectorListRulesPackagesResponse: ...

    def list_tags_for_resource(self, *,
        resourceArn: str
    ) -> InspectorListTagsForResourceResponse: ...

    def preview_agents(self, *,
        previewAgentsArn: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> InspectorPreviewAgentsResponse: ...

    def register_cross_account_access_role(self, *,
        roleArn: str
    ): ...

    def remove_attributes_from_findings(self, *,
        findingArns: List[str],
        attributeKeys: List[str]
    ) -> InspectorRemoveAttributesFromFindingsResponse: ...

    def set_tags_for_resource(self, *,
        resourceArn: str,
        tags: List[InspectorTag] = ...
    ): ...

    def start_assessment_run(self, *,
        assessmentTemplateArn: str,
        assessmentRunName: str = ...
    ) -> InspectorStartAssessmentRunResponse: ...

    def stop_assessment_run(self, *,
        assessmentRunArn: str,
        stopAction: str = ...
    ): ...

    def subscribe_to_event(self, *,
        resourceArn: str,
        event: str,
        topicArn: str
    ): ...

    def unsubscribe_from_event(self, *,
        resourceArn: str,
        event: str,
        topicArn: str
    ): ...

    def update_assessment_target(self, *,
        assessmentTargetArn: str,
        assessmentTargetName: str,
        resourceGroupArn: str = ...
    ): ...


class _InspectorAttribute(TypedDict):
    key: str


class InspectorAttribute(_InspectorAttribute, total=False):
    value: str


class InspectorAddAttributesToFindingsResponse(TypedDict):
    failedItems: Dict[str, InspectorFailedItemDetails]


class InspectorFailedItemDetails(TypedDict):
    failureCode: str
    retryable: bool


class InspectorCreateAssessmentTargetResponse(TypedDict):
    assessmentTargetArn: str


class InspectorCreateAssessmentTemplateResponse(TypedDict):
    assessmentTemplateArn: str


class InspectorCreateExclusionsPreviewResponse(TypedDict):
    previewToken: str


class _InspectorResourceGroupTag(TypedDict):
    key: str


class InspectorResourceGroupTag(_InspectorResourceGroupTag, total=False):
    value: str


class InspectorCreateResourceGroupResponse(TypedDict):
    resourceGroupArn: str


class InspectorDescribeAssessmentRunsResponse(TypedDict):
    assessmentRuns: List[InspectorAssessmentRun]
    failedItems: Dict[str, InspectorFailedItemDetails]


class _InspectorAssessmentRun(TypedDict):
    arn: str
    name: str
    assessmentTemplateArn: str
    state: str
    durationInSeconds: int
    rulesPackageArns: List[str]
    userAttributesForFindings: List[InspectorAttribute]
    createdAt: datetime.datetime
    stateChangedAt: datetime.datetime
    dataCollected: bool
    stateChanges: List[InspectorAssessmentRunStateChange]
    notifications: List[InspectorAssessmentRunNotification]
    findingCounts: Dict[str, int]


class InspectorAssessmentRun(_InspectorAssessmentRun, total=False):
    startedAt: datetime.datetime
    completedAt: datetime.datetime


class InspectorAssessmentRunStateChange(TypedDict):
    stateChangedAt: datetime.datetime
    state: str


class _InspectorAssessmentRunNotification(TypedDict):
    date: datetime.datetime
    event: str
    error: bool


class InspectorAssessmentRunNotification(_InspectorAssessmentRunNotification, total=False):
    message: str
    snsTopicArn: str
    snsPublishStatusCode: str


class InspectorDescribeAssessmentTargetsResponse(TypedDict):
    assessmentTargets: List[InspectorAssessmentTarget]
    failedItems: Dict[str, InspectorFailedItemDetails]


class _InspectorAssessmentTarget(TypedDict):
    arn: str
    name: str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class InspectorAssessmentTarget(_InspectorAssessmentTarget, total=False):
    resourceGroupArn: str


class InspectorDescribeAssessmentTemplatesResponse(TypedDict):
    assessmentTemplates: List[InspectorAssessmentTemplate]
    failedItems: Dict[str, InspectorFailedItemDetails]


class _InspectorAssessmentTemplate(TypedDict):
    arn: str
    name: str
    assessmentTargetArn: str
    durationInSeconds: int
    rulesPackageArns: List[str]
    userAttributesForFindings: List[InspectorAttribute]
    assessmentRunCount: int
    createdAt: datetime.datetime


class InspectorAssessmentTemplate(_InspectorAssessmentTemplate, total=False):
    lastAssessmentRunArn: str


class InspectorDescribeCrossAccountAccessRoleResponse(TypedDict):
    roleArn: str
    valid: bool
    registeredAt: datetime.datetime


class InspectorDescribeExclusionsResponse(TypedDict):
    exclusions: Dict[str, InspectorExclusion]
    failedItems: Dict[str, InspectorFailedItemDetails]


class _InspectorExclusion(TypedDict):
    arn: str
    title: str
    description: str
    recommendation: str
    scopes: List[InspectorScope]


class InspectorExclusion(_InspectorExclusion, total=False):
    attributes: List[InspectorAttribute]


class InspectorScope(TypedDict, total=False):
    key: str
    value: str


class InspectorDescribeFindingsResponse(TypedDict):
    findings: List[InspectorFinding]
    failedItems: Dict[str, InspectorFailedItemDetails]


class _InspectorFinding(TypedDict):
    arn: str
    attributes: List[InspectorAttribute]
    userAttributes: List[InspectorAttribute]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class InspectorFinding(_InspectorFinding, total=False):
    schemaVersion: int
    service: str
    serviceAttributes: InspectorInspectorServiceAttributes
    assetType: str
    assetAttributes: InspectorAssetAttributes
    id: str
    title: str
    description: str
    recommendation: str
    severity: str
    numericSeverity: float
    confidence: int
    indicatorOfCompromise: bool


class _InspectorInspectorServiceAttributes(TypedDict):
    schemaVersion: int


class InspectorInspectorServiceAttributes(_InspectorInspectorServiceAttributes, total=False):
    assessmentRunArn: str
    rulesPackageArn: str


class _InspectorAssetAttributes(TypedDict):
    schemaVersion: int


class InspectorAssetAttributes(_InspectorAssetAttributes, total=False):
    agentId: str
    autoScalingGroup: str
    amiId: str
    hostname: str
    ipv4Addresses: List[str]
    tags: List[InspectorTag]
    networkInterfaces: List[InspectorNetworkInterface]


class _InspectorTag(TypedDict):
    key: str


class InspectorTag(_InspectorTag, total=False):
    value: str


class InspectorNetworkInterface(TypedDict, total=False):
    networkInterfaceId: str
    subnetId: str
    vpcId: str
    privateDnsName: str
    privateIpAddress: str
    privateIpAddresses: List[InspectorPrivateIp]
    publicDnsName: str
    publicIp: str
    ipv6Addresses: List[str]
    securityGroups: List[InspectorSecurityGroup]


class InspectorPrivateIp(TypedDict, total=False):
    privateDnsName: str
    privateIpAddress: str


class InspectorSecurityGroup(TypedDict, total=False):
    groupName: str
    groupId: str


class InspectorDescribeResourceGroupsResponse(TypedDict):
    resourceGroups: List[InspectorResourceGroup]
    failedItems: Dict[str, InspectorFailedItemDetails]


class InspectorResourceGroup(TypedDict):
    arn: str
    tags: List[InspectorResourceGroupTag]
    createdAt: datetime.datetime


class InspectorDescribeRulesPackagesResponse(TypedDict):
    rulesPackages: List[InspectorRulesPackage]
    failedItems: Dict[str, InspectorFailedItemDetails]


class _InspectorRulesPackage(TypedDict):
    arn: str
    name: str
    version: str
    provider: str


class InspectorRulesPackage(_InspectorRulesPackage, total=False):
    description: str


class _InspectorGetAssessmentReportResponse(TypedDict):
    status: str


class InspectorGetAssessmentReportResponse(_InspectorGetAssessmentReportResponse, total=False):
    url: str


class _InspectorGetExclusionsPreviewResponse(TypedDict):
    previewStatus: str


class InspectorGetExclusionsPreviewResponse(_InspectorGetExclusionsPreviewResponse, total=False):
    exclusionPreviews: List[InspectorExclusionPreview]
    nextToken: str


class _InspectorExclusionPreview(TypedDict):
    title: str
    description: str
    recommendation: str
    scopes: List[InspectorScope]


class InspectorExclusionPreview(_InspectorExclusionPreview, total=False):
    attributes: List[InspectorAttribute]


class InspectorGetTelemetryMetadataResponse(TypedDict):
    telemetryMetadata: List[InspectorTelemetryMetadata]


class _InspectorTelemetryMetadata(TypedDict):
    messageType: str
    count: int


class InspectorTelemetryMetadata(_InspectorTelemetryMetadata, total=False):
    dataSize: int


class InspectorAgentFilter(TypedDict):
    agentHealths: List[str]
    agentHealthCodes: List[str]


class _InspectorListAssessmentRunAgentsResponse(TypedDict):
    assessmentRunAgents: List[InspectorAssessmentRunAgent]


class InspectorListAssessmentRunAgentsResponse(_InspectorListAssessmentRunAgentsResponse, total=False):
    nextToken: str


class _InspectorAssessmentRunAgent(TypedDict):
    agentId: str
    assessmentRunArn: str
    agentHealth: str
    agentHealthCode: str
    telemetryMetadata: List[InspectorTelemetryMetadata]


class InspectorAssessmentRunAgent(_InspectorAssessmentRunAgent, total=False):
    agentHealthDetails: str
    autoScalingGroup: str


class InspectorAssessmentRunFilter(TypedDict, total=False):
    namePattern: str
    states: List[str]
    durationRange: InspectorDurationRange
    rulesPackageArns: List[str]
    startTimeRange: InspectorTimestampRange
    completionTimeRange: InspectorTimestampRange
    stateChangeTimeRange: InspectorTimestampRange


class InspectorDurationRange(TypedDict, total=False):
    minSeconds: int
    maxSeconds: int


class InspectorTimestampRange(TypedDict, total=False):
    beginDate: datetime.datetime
    endDate: datetime.datetime


class _InspectorListAssessmentRunsResponse(TypedDict):
    assessmentRunArns: List[str]


class InspectorListAssessmentRunsResponse(_InspectorListAssessmentRunsResponse, total=False):
    nextToken: str


class InspectorAssessmentTargetFilter(TypedDict, total=False):
    assessmentTargetNamePattern: str


class _InspectorListAssessmentTargetsResponse(TypedDict):
    assessmentTargetArns: List[str]


class InspectorListAssessmentTargetsResponse(_InspectorListAssessmentTargetsResponse, total=False):
    nextToken: str


class InspectorAssessmentTemplateFilter(TypedDict, total=False):
    namePattern: str
    durationRange: InspectorDurationRange
    rulesPackageArns: List[str]


class _InspectorListAssessmentTemplatesResponse(TypedDict):
    assessmentTemplateArns: List[str]


class InspectorListAssessmentTemplatesResponse(_InspectorListAssessmentTemplatesResponse, total=False):
    nextToken: str


class _InspectorListEventSubscriptionsResponse(TypedDict):
    subscriptions: List[InspectorSubscription]


class InspectorListEventSubscriptionsResponse(_InspectorListEventSubscriptionsResponse, total=False):
    nextToken: str


class InspectorSubscription(TypedDict):
    resourceArn: str
    topicArn: str
    eventSubscriptions: List[InspectorEventSubscription]


class InspectorEventSubscription(TypedDict):
    event: str
    subscribedAt: datetime.datetime


class _InspectorListExclusionsResponse(TypedDict):
    exclusionArns: List[str]


class InspectorListExclusionsResponse(_InspectorListExclusionsResponse, total=False):
    nextToken: str


class InspectorFindingFilter(TypedDict, total=False):
    agentIds: List[str]
    autoScalingGroups: List[str]
    ruleNames: List[str]
    severities: List[str]
    rulesPackageArns: List[str]
    attributes: List[InspectorAttribute]
    userAttributes: List[InspectorAttribute]
    creationTimeRange: InspectorTimestampRange


class _InspectorListFindingsResponse(TypedDict):
    findingArns: List[str]


class InspectorListFindingsResponse(_InspectorListFindingsResponse, total=False):
    nextToken: str


class _InspectorListRulesPackagesResponse(TypedDict):
    rulesPackageArns: List[str]


class InspectorListRulesPackagesResponse(_InspectorListRulesPackagesResponse, total=False):
    nextToken: str


class InspectorListTagsForResourceResponse(TypedDict):
    tags: List[InspectorTag]


class _InspectorPreviewAgentsResponse(TypedDict):
    agentPreviews: List[InspectorAgentPreview]


class InspectorPreviewAgentsResponse(_InspectorPreviewAgentsResponse, total=False):
    nextToken: str


class _InspectorAgentPreview(TypedDict):
    agentId: str


class InspectorAgentPreview(_InspectorAgentPreview, total=False):
    hostname: str
    autoScalingGroup: str
    agentHealth: str
    agentVersion: str
    operatingSystem: str
    kernelVersion: str
    ipv4Address: str


class InspectorRemoveAttributesFromFindingsResponse(TypedDict):
    failedItems: Dict[str, InspectorFailedItemDetails]


class InspectorStartAssessmentRunResponse(TypedDict):
    assessmentRunArn: str


class IoT(BaseClient):
    def accept_certificate_transfer(self, *,
        certificateId: str,
        setAsActive: bool = ...
    ): ...

    def add_thing_to_billing_group(self, *,
        billingGroupName: str = ...,
        billingGroupArn: str = ...,
        thingName: str = ...,
        thingArn: str = ...
    ) -> IoTAddThingToBillingGroupResponse: ...

    def add_thing_to_thing_group(self, *,
        thingGroupName: str = ...,
        thingGroupArn: str = ...,
        thingName: str = ...,
        thingArn: str = ...,
        overrideDynamicGroups: bool = ...
    ) -> IoTAddThingToThingGroupResponse: ...

    def associate_targets_with_job(self, *,
        targets: List[str],
        jobId: str,
        comment: str = ...
    ) -> IoTAssociateTargetsWithJobResponse: ...

    def attach_policy(self, *,
        policyName: str,
        target: str
    ): ...

    def attach_principal_policy(self, *,
        policyName: str,
        principal: str
    ): ...

    def attach_security_profile(self, *,
        securityProfileName: str,
        securityProfileTargetArn: str
    ) -> IoTAttachSecurityProfileResponse: ...

    def attach_thing_principal(self, *,
        thingName: str,
        principal: str
    ) -> IoTAttachThingPrincipalResponse: ...

    def cancel_audit_task(self, *,
        taskId: str
    ) -> IoTCancelAuditTaskResponse: ...

    def cancel_certificate_transfer(self, *,
        certificateId: str
    ): ...

    def cancel_job(self, *,
        jobId: str,
        reasonCode: str = ...,
        comment: str = ...,
        force: bool = ...
    ) -> IoTCancelJobResponse: ...

    def cancel_job_execution(self, *,
        jobId: str,
        thingName: str,
        force: bool = ...,
        expectedVersion: int = ...,
        statusDetails: Dict[str, str] = ...
    ): ...

    def clear_default_authorizer(self) -> IoTClearDefaultAuthorizerResponse: ...

    def create_authorizer(self, *,
        authorizerName: str,
        authorizerFunctionArn: str,
        tokenKeyName: str,
        tokenSigningPublicKeys: Dict[str, str],
        status: str = ...
    ) -> IoTCreateAuthorizerResponse: ...

    def create_billing_group(self, *,
        billingGroupName: str,
        billingGroupProperties: IoTBillingGroupProperties = ...,
        tags: List[IoTTag] = ...
    ) -> IoTCreateBillingGroupResponse: ...

    def create_certificate_from_csr(self, *,
        certificateSigningRequest: str,
        setAsActive: bool = ...
    ) -> IoTCreateCertificateFromCsrResponse: ...

    def create_dynamic_thing_group(self, *,
        thingGroupName: str,
        queryString: str,
        thingGroupProperties: IoTThingGroupProperties = ...,
        indexName: str = ...,
        queryVersion: str = ...,
        tags: List[IoTTag] = ...
    ) -> IoTCreateDynamicThingGroupResponse: ...

    def create_job(self, *,
        jobId: str,
        targets: List[str],
        documentSource: str = ...,
        document: str = ...,
        description: str = ...,
        presignedUrlConfig: IoTPresignedUrlConfig = ...,
        targetSelection: str = ...,
        jobExecutionsRolloutConfig: IoTJobExecutionsRolloutConfig = ...,
        abortConfig: IoTAbortConfig = ...,
        timeoutConfig: IoTTimeoutConfig = ...,
        tags: List[IoTTag] = ...
    ) -> IoTCreateJobResponse: ...

    def create_keys_and_certificate(self, *,
        setAsActive: bool = ...
    ) -> IoTCreateKeysAndCertificateResponse: ...

    def create_ota_update(self, *,
        otaUpdateId: str,
        targets: List[str],
        files: List[IoTOTAUpdateFile],
        roleArn: str,
        description: str = ...,
        targetSelection: str = ...,
        awsJobExecutionsRolloutConfig: IoTAwsJobExecutionsRolloutConfig = ...,
        additionalParameters: Dict[str, str] = ...,
        tags: List[IoTTag] = ...
    ) -> IoTCreateOTAUpdateResponse: ...

    def create_policy(self, *,
        policyName: str,
        policyDocument: str
    ) -> IoTCreatePolicyResponse: ...

    def create_policy_version(self, *,
        policyName: str,
        policyDocument: str,
        setAsDefault: bool = ...
    ) -> IoTCreatePolicyVersionResponse: ...

    def create_role_alias(self, *,
        roleAlias: str,
        roleArn: str,
        credentialDurationSeconds: int = ...
    ) -> IoTCreateRoleAliasResponse: ...

    def create_scheduled_audit(self, *,
        frequency: str,
        targetCheckNames: List[str],
        scheduledAuditName: str,
        dayOfMonth: str = ...,
        dayOfWeek: str = ...,
        tags: List[IoTTag] = ...
    ) -> IoTCreateScheduledAuditResponse: ...

    def create_security_profile(self, *,
        securityProfileName: str,
        securityProfileDescription: str = ...,
        behaviors: List[IoTBehavior] = ...,
        alertTargets: Dict[str, IoTAlertTarget] = ...,
        additionalMetricsToRetain: List[str] = ...,
        tags: List[IoTTag] = ...
    ) -> IoTCreateSecurityProfileResponse: ...

    def create_stream(self, *,
        streamId: str,
        files: List[IoTStreamFile],
        roleArn: str,
        description: str = ...,
        tags: List[IoTTag] = ...
    ) -> IoTCreateStreamResponse: ...

    def create_thing(self, *,
        thingName: str,
        thingTypeName: str = ...,
        attributePayload: IoTAttributePayload = ...,
        billingGroupName: str = ...
    ) -> IoTCreateThingResponse: ...

    def create_thing_group(self, *,
        thingGroupName: str,
        parentGroupName: str = ...,
        thingGroupProperties: IoTThingGroupProperties = ...,
        tags: List[IoTTag] = ...
    ) -> IoTCreateThingGroupResponse: ...

    def create_thing_type(self, *,
        thingTypeName: str,
        thingTypeProperties: IoTThingTypeProperties = ...,
        tags: List[IoTTag] = ...
    ) -> IoTCreateThingTypeResponse: ...

    def create_topic_rule(self, *,
        ruleName: str,
        topicRulePayload: IoTTopicRulePayload,
        tags: str = ...
    ): ...

    def delete_account_audit_configuration(self, *,
        deleteScheduledAudits: bool = ...
    ) -> IoTDeleteAccountAuditConfigurationResponse: ...

    def delete_authorizer(self, *,
        authorizerName: str
    ) -> IoTDeleteAuthorizerResponse: ...

    def delete_billing_group(self, *,
        billingGroupName: str,
        expectedVersion: int = ...
    ) -> IoTDeleteBillingGroupResponse: ...

    def delete_ca_certificate(self, *,
        certificateId: str
    ) -> IoTDeleteCACertificateResponse: ...

    def delete_certificate(self, *,
        certificateId: str,
        forceDelete: bool = ...
    ): ...

    def delete_dynamic_thing_group(self, *,
        thingGroupName: str,
        expectedVersion: int = ...
    ) -> IoTDeleteDynamicThingGroupResponse: ...

    def delete_job(self, *,
        jobId: str,
        force: bool = ...
    ): ...

    def delete_job_execution(self, *,
        jobId: str,
        thingName: str,
        executionNumber: int,
        force: bool = ...
    ): ...

    def delete_ota_update(self, *,
        otaUpdateId: str,
        deleteStream: bool = ...,
        forceDeleteAWSJob: bool = ...
    ) -> IoTDeleteOTAUpdateResponse: ...

    def delete_policy(self, *,
        policyName: str
    ): ...

    def delete_policy_version(self, *,
        policyName: str,
        policyVersionId: str
    ): ...

    def delete_registration_code(self) -> IoTDeleteRegistrationCodeResponse: ...

    def delete_role_alias(self, *,
        roleAlias: str
    ) -> IoTDeleteRoleAliasResponse: ...

    def delete_scheduled_audit(self, *,
        scheduledAuditName: str
    ) -> IoTDeleteScheduledAuditResponse: ...

    def delete_security_profile(self, *,
        securityProfileName: str,
        expectedVersion: int = ...
    ) -> IoTDeleteSecurityProfileResponse: ...

    def delete_stream(self, *,
        streamId: str
    ) -> IoTDeleteStreamResponse: ...

    def delete_thing(self, *,
        thingName: str,
        expectedVersion: int = ...
    ) -> IoTDeleteThingResponse: ...

    def delete_thing_group(self, *,
        thingGroupName: str,
        expectedVersion: int = ...
    ) -> IoTDeleteThingGroupResponse: ...

    def delete_thing_type(self, *,
        thingTypeName: str
    ) -> IoTDeleteThingTypeResponse: ...

    def delete_topic_rule(self, *,
        ruleName: str
    ): ...

    def delete_v2_logging_level(self, *,
        targetType: str,
        targetName: str
    ): ...

    def deprecate_thing_type(self, *,
        thingTypeName: str,
        undoDeprecate: bool = ...
    ) -> IoTDeprecateThingTypeResponse: ...

    def describe_account_audit_configuration(self) -> IoTDescribeAccountAuditConfigurationResponse: ...

    def describe_audit_task(self, *,
        taskId: str
    ) -> IoTDescribeAuditTaskResponse: ...

    def describe_authorizer(self, *,
        authorizerName: str
    ) -> IoTDescribeAuthorizerResponse: ...

    def describe_billing_group(self, *,
        billingGroupName: str
    ) -> IoTDescribeBillingGroupResponse: ...

    def describe_ca_certificate(self, *,
        certificateId: str
    ) -> IoTDescribeCACertificateResponse: ...

    def describe_certificate(self, *,
        certificateId: str
    ) -> IoTDescribeCertificateResponse: ...

    def describe_default_authorizer(self) -> IoTDescribeDefaultAuthorizerResponse: ...

    def describe_endpoint(self, *,
        endpointType: str = ...
    ) -> IoTDescribeEndpointResponse: ...

    def describe_event_configurations(self) -> IoTDescribeEventConfigurationsResponse: ...

    def describe_index(self, *,
        indexName: str
    ) -> IoTDescribeIndexResponse: ...

    def describe_job(self, *,
        jobId: str
    ) -> IoTDescribeJobResponse: ...

    def describe_job_execution(self, *,
        jobId: str,
        thingName: str,
        executionNumber: int = ...
    ) -> IoTDescribeJobExecutionResponse: ...

    def describe_role_alias(self, *,
        roleAlias: str
    ) -> IoTDescribeRoleAliasResponse: ...

    def describe_scheduled_audit(self, *,
        scheduledAuditName: str
    ) -> IoTDescribeScheduledAuditResponse: ...

    def describe_security_profile(self, *,
        securityProfileName: str
    ) -> IoTDescribeSecurityProfileResponse: ...

    def describe_stream(self, *,
        streamId: str
    ) -> IoTDescribeStreamResponse: ...

    def describe_thing(self, *,
        thingName: str
    ) -> IoTDescribeThingResponse: ...

    def describe_thing_group(self, *,
        thingGroupName: str
    ) -> IoTDescribeThingGroupResponse: ...

    def describe_thing_registration_task(self, *,
        taskId: str
    ) -> IoTDescribeThingRegistrationTaskResponse: ...

    def describe_thing_type(self, *,
        thingTypeName: str
    ) -> IoTDescribeThingTypeResponse: ...

    def detach_policy(self, *,
        policyName: str,
        target: str
    ): ...

    def detach_principal_policy(self, *,
        policyName: str,
        principal: str
    ): ...

    def detach_security_profile(self, *,
        securityProfileName: str,
        securityProfileTargetArn: str
    ) -> IoTDetachSecurityProfileResponse: ...

    def detach_thing_principal(self, *,
        thingName: str,
        principal: str
    ) -> IoTDetachThingPrincipalResponse: ...

    def disable_topic_rule(self, *,
        ruleName: str
    ): ...

    def enable_topic_rule(self, *,
        ruleName: str
    ): ...

    def get_effective_policies(self, *,
        principal: str = ...,
        cognitoIdentityPoolId: str = ...,
        thingName: str = ...
    ) -> IoTGetEffectivePoliciesResponse: ...

    def get_indexing_configuration(self) -> IoTGetIndexingConfigurationResponse: ...

    def get_job_document(self, *,
        jobId: str
    ) -> IoTGetJobDocumentResponse: ...

    def get_logging_options(self) -> IoTGetLoggingOptionsResponse: ...

    def get_ota_update(self, *,
        otaUpdateId: str
    ) -> IoTGetOTAUpdateResponse: ...

    def get_policy(self, *,
        policyName: str
    ) -> IoTGetPolicyResponse: ...

    def get_policy_version(self, *,
        policyName: str,
        policyVersionId: str
    ) -> IoTGetPolicyVersionResponse: ...

    def get_registration_code(self) -> IoTGetRegistrationCodeResponse: ...

    def get_statistics(self, *,
        queryString: str,
        indexName: str = ...,
        aggregationField: str = ...,
        queryVersion: str = ...
    ) -> IoTGetStatisticsResponse: ...

    def get_topic_rule(self, *,
        ruleName: str
    ) -> IoTGetTopicRuleResponse: ...

    def get_v2_logging_options(self) -> IoTGetV2LoggingOptionsResponse: ...

    def list_active_violations(self, *,
        thingName: str = ...,
        securityProfileName: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTListActiveViolationsResponse: ...

    def list_attached_policies(self, *,
        target: str,
        recursive: bool = ...,
        marker: str = ...,
        pageSize: int = ...
    ) -> IoTListAttachedPoliciesResponse: ...

    def list_audit_findings(self, *,
        taskId: str = ...,
        checkName: str = ...,
        resourceIdentifier: IoTResourceIdentifier = ...,
        maxResults: int = ...,
        nextToken: str = ...,
        startTime: datetime.datetime = ...,
        endTime: datetime.datetime = ...
    ) -> IoTListAuditFindingsResponse: ...

    def list_audit_tasks(self, *,
        startTime: datetime.datetime,
        endTime: datetime.datetime,
        taskType: str = ...,
        taskStatus: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTListAuditTasksResponse: ...

    def list_authorizers(self, *,
        pageSize: int = ...,
        marker: str = ...,
        ascendingOrder: bool = ...,
        status: str = ...
    ) -> IoTListAuthorizersResponse: ...

    def list_billing_groups(self, *,
        nextToken: str = ...,
        maxResults: int = ...,
        namePrefixFilter: str = ...
    ) -> IoTListBillingGroupsResponse: ...

    def list_ca_certificates(self, *,
        pageSize: int = ...,
        marker: str = ...,
        ascendingOrder: bool = ...
    ) -> IoTListCACertificatesResponse: ...

    def list_certificates(self, *,
        pageSize: int = ...,
        marker: str = ...,
        ascendingOrder: bool = ...
    ) -> IoTListCertificatesResponse: ...

    def list_certificates_by_ca(self, *,
        caCertificateId: str,
        pageSize: int = ...,
        marker: str = ...,
        ascendingOrder: bool = ...
    ) -> IoTListCertificatesByCAResponse: ...

    def list_indices(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTListIndicesResponse: ...

    def list_job_executions_for_job(self, *,
        jobId: str,
        status: str = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> IoTListJobExecutionsForJobResponse: ...

    def list_job_executions_for_thing(self, *,
        thingName: str,
        status: str = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> IoTListJobExecutionsForThingResponse: ...

    def list_jobs(self, *,
        status: str = ...,
        targetSelection: str = ...,
        maxResults: int = ...,
        nextToken: str = ...,
        thingGroupName: str = ...,
        thingGroupId: str = ...
    ) -> IoTListJobsResponse: ...

    def list_ota_updates(self, *,
        maxResults: int = ...,
        nextToken: str = ...,
        otaUpdateStatus: str = ...
    ) -> IoTListOTAUpdatesResponse: ...

    def list_outgoing_certificates(self, *,
        pageSize: int = ...,
        marker: str = ...,
        ascendingOrder: bool = ...
    ) -> IoTListOutgoingCertificatesResponse: ...

    def list_policies(self, *,
        marker: str = ...,
        pageSize: int = ...,
        ascendingOrder: bool = ...
    ) -> IoTListPoliciesResponse: ...

    def list_policy_principals(self, *,
        policyName: str,
        marker: str = ...,
        pageSize: int = ...,
        ascendingOrder: bool = ...
    ) -> IoTListPolicyPrincipalsResponse: ...

    def list_policy_versions(self, *,
        policyName: str
    ) -> IoTListPolicyVersionsResponse: ...

    def list_principal_policies(self, *,
        principal: str,
        marker: str = ...,
        pageSize: int = ...,
        ascendingOrder: bool = ...
    ) -> IoTListPrincipalPoliciesResponse: ...

    def list_principal_things(self, *,
        principal: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTListPrincipalThingsResponse: ...

    def list_role_aliases(self, *,
        pageSize: int = ...,
        marker: str = ...,
        ascendingOrder: bool = ...
    ) -> IoTListRoleAliasesResponse: ...

    def list_scheduled_audits(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTListScheduledAuditsResponse: ...

    def list_security_profiles(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTListSecurityProfilesResponse: ...

    def list_security_profiles_for_target(self, *,
        securityProfileTargetArn: str,
        nextToken: str = ...,
        maxResults: int = ...,
        recursive: bool = ...
    ) -> IoTListSecurityProfilesForTargetResponse: ...

    def list_streams(self, *,
        maxResults: int = ...,
        nextToken: str = ...,
        ascendingOrder: bool = ...
    ) -> IoTListStreamsResponse: ...

    def list_tags_for_resource(self, *,
        resourceArn: str,
        nextToken: str = ...
    ) -> IoTListTagsForResourceResponse: ...

    def list_targets_for_policy(self, *,
        policyName: str,
        marker: str = ...,
        pageSize: int = ...
    ) -> IoTListTargetsForPolicyResponse: ...

    def list_targets_for_security_profile(self, *,
        securityProfileName: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTListTargetsForSecurityProfileResponse: ...

    def list_thing_groups(self, *,
        nextToken: str = ...,
        maxResults: int = ...,
        parentGroup: str = ...,
        namePrefixFilter: str = ...,
        recursive: bool = ...
    ) -> IoTListThingGroupsResponse: ...

    def list_thing_groups_for_thing(self, *,
        thingName: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTListThingGroupsForThingResponse: ...

    def list_thing_principals(self, *,
        thingName: str
    ) -> IoTListThingPrincipalsResponse: ...

    def list_thing_registration_task_reports(self, *,
        taskId: str,
        reportType: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTListThingRegistrationTaskReportsResponse: ...

    def list_thing_registration_tasks(self, *,
        nextToken: str = ...,
        maxResults: int = ...,
        status: str = ...
    ) -> IoTListThingRegistrationTasksResponse: ...

    def list_thing_types(self, *,
        nextToken: str = ...,
        maxResults: int = ...,
        thingTypeName: str = ...
    ) -> IoTListThingTypesResponse: ...

    def list_things(self, *,
        nextToken: str = ...,
        maxResults: int = ...,
        attributeName: str = ...,
        attributeValue: str = ...,
        thingTypeName: str = ...
    ) -> IoTListThingsResponse: ...

    def list_things_in_billing_group(self, *,
        billingGroupName: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTListThingsInBillingGroupResponse: ...

    def list_things_in_thing_group(self, *,
        thingGroupName: str,
        recursive: bool = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTListThingsInThingGroupResponse: ...

    def list_topic_rules(self, *,
        topic: str = ...,
        maxResults: int = ...,
        nextToken: str = ...,
        ruleDisabled: bool = ...
    ) -> IoTListTopicRulesResponse: ...

    def list_v2_logging_levels(self, *,
        targetType: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTListV2LoggingLevelsResponse: ...

    def list_violation_events(self, *,
        startTime: datetime.datetime,
        endTime: datetime.datetime,
        thingName: str = ...,
        securityProfileName: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTListViolationEventsResponse: ...

    def register_ca_certificate(self, *,
        caCertificate: str,
        verificationCertificate: str,
        setAsActive: bool = ...,
        allowAutoRegistration: bool = ...,
        registrationConfig: IoTRegistrationConfig = ...
    ) -> IoTRegisterCACertificateResponse: ...

    def register_certificate(self, *,
        certificatePem: str,
        caCertificatePem: str = ...,
        setAsActive: bool = ...,
        status: str = ...
    ) -> IoTRegisterCertificateResponse: ...

    def register_thing(self, *,
        templateBody: str,
        parameters: Dict[str, str] = ...
    ) -> IoTRegisterThingResponse: ...

    def reject_certificate_transfer(self, *,
        certificateId: str,
        rejectReason: str = ...
    ): ...

    def remove_thing_from_billing_group(self, *,
        billingGroupName: str = ...,
        billingGroupArn: str = ...,
        thingName: str = ...,
        thingArn: str = ...
    ) -> IoTRemoveThingFromBillingGroupResponse: ...

    def remove_thing_from_thing_group(self, *,
        thingGroupName: str = ...,
        thingGroupArn: str = ...,
        thingName: str = ...,
        thingArn: str = ...
    ) -> IoTRemoveThingFromThingGroupResponse: ...

    def replace_topic_rule(self, *,
        ruleName: str,
        topicRulePayload: IoTTopicRulePayload
    ): ...

    def search_index(self, *,
        queryString: str,
        indexName: str = ...,
        nextToken: str = ...,
        maxResults: int = ...,
        queryVersion: str = ...
    ) -> IoTSearchIndexResponse: ...

    def set_default_authorizer(self, *,
        authorizerName: str
    ) -> IoTSetDefaultAuthorizerResponse: ...

    def set_default_policy_version(self, *,
        policyName: str,
        policyVersionId: str
    ): ...

    def set_logging_options(self, *,
        loggingOptionsPayload: IoTLoggingOptionsPayload
    ): ...

    def set_v2_logging_level(self, *,
        logTarget: IoTLogTarget,
        logLevel: str
    ): ...

    def set_v2_logging_options(self, *,
        roleArn: str = ...,
        defaultLogLevel: str = ...,
        disableAllLogs: bool = ...
    ): ...

    def start_on_demand_audit_task(self, *,
        targetCheckNames: List[str]
    ) -> IoTStartOnDemandAuditTaskResponse: ...

    def start_thing_registration_task(self, *,
        templateBody: str,
        inputFileBucket: str,
        inputFileKey: str,
        roleArn: str
    ) -> IoTStartThingRegistrationTaskResponse: ...

    def stop_thing_registration_task(self, *,
        taskId: str
    ) -> IoTStopThingRegistrationTaskResponse: ...

    def tag_resource(self, *,
        resourceArn: str,
        tags: List[IoTTag]
    ) -> IoTTagResourceResponse: ...

    def test_authorization(self, *,
        authInfos: List[IoTAuthInfo],
        principal: str = ...,
        cognitoIdentityPoolId: str = ...,
        clientId: str = ...,
        policyNamesToAdd: List[str] = ...,
        policyNamesToSkip: List[str] = ...
    ) -> IoTTestAuthorizationResponse: ...

    def test_invoke_authorizer(self, *,
        authorizerName: str,
        token: str,
        tokenSignature: str
    ) -> IoTTestInvokeAuthorizerResponse: ...

    def transfer_certificate(self, *,
        certificateId: str,
        targetAwsAccount: str,
        transferMessage: str = ...
    ) -> IoTTransferCertificateResponse: ...

    def untag_resource(self, *,
        resourceArn: str,
        tagKeys: List[str]
    ) -> IoTUntagResourceResponse: ...

    def update_account_audit_configuration(self, *,
        roleArn: str = ...,
        auditNotificationTargetConfigurations: Dict[str, IoTAuditNotificationTarget] = ...,
        auditCheckConfigurations: Dict[str, IoTAuditCheckConfiguration] = ...
    ) -> IoTUpdateAccountAuditConfigurationResponse: ...

    def update_authorizer(self, *,
        authorizerName: str,
        authorizerFunctionArn: str = ...,
        tokenKeyName: str = ...,
        tokenSigningPublicKeys: Dict[str, str] = ...,
        status: str = ...
    ) -> IoTUpdateAuthorizerResponse: ...

    def update_billing_group(self, *,
        billingGroupName: str,
        billingGroupProperties: IoTBillingGroupProperties,
        expectedVersion: int = ...
    ) -> IoTUpdateBillingGroupResponse: ...

    def update_ca_certificate(self, *,
        certificateId: str,
        newStatus: str = ...,
        newAutoRegistrationStatus: str = ...,
        registrationConfig: IoTRegistrationConfig = ...,
        removeAutoRegistration: bool = ...
    ): ...

    def update_certificate(self, *,
        certificateId: str,
        newStatus: str
    ): ...

    def update_dynamic_thing_group(self, *,
        thingGroupName: str,
        thingGroupProperties: IoTThingGroupProperties,
        expectedVersion: int = ...,
        indexName: str = ...,
        queryString: str = ...,
        queryVersion: str = ...
    ) -> IoTUpdateDynamicThingGroupResponse: ...

    def update_event_configurations(self, *,
        eventConfigurations: Dict[str, IoTConfiguration] = ...
    ) -> IoTUpdateEventConfigurationsResponse: ...

    def update_indexing_configuration(self, *,
        thingIndexingConfiguration: IoTThingIndexingConfiguration = ...,
        thingGroupIndexingConfiguration: IoTThingGroupIndexingConfiguration = ...
    ) -> IoTUpdateIndexingConfigurationResponse: ...

    def update_job(self, *,
        jobId: str,
        description: str = ...,
        presignedUrlConfig: IoTPresignedUrlConfig = ...,
        jobExecutionsRolloutConfig: IoTJobExecutionsRolloutConfig = ...,
        abortConfig: IoTAbortConfig = ...,
        timeoutConfig: IoTTimeoutConfig = ...
    ): ...

    def update_role_alias(self, *,
        roleAlias: str,
        roleArn: str = ...,
        credentialDurationSeconds: int = ...
    ) -> IoTUpdateRoleAliasResponse: ...

    def update_scheduled_audit(self, *,
        scheduledAuditName: str,
        frequency: str = ...,
        dayOfMonth: str = ...,
        dayOfWeek: str = ...,
        targetCheckNames: List[str] = ...
    ) -> IoTUpdateScheduledAuditResponse: ...

    def update_security_profile(self, *,
        securityProfileName: str,
        securityProfileDescription: str = ...,
        behaviors: List[IoTBehavior] = ...,
        alertTargets: Dict[str, IoTAlertTarget] = ...,
        additionalMetricsToRetain: List[str] = ...,
        deleteBehaviors: bool = ...,
        deleteAlertTargets: bool = ...,
        deleteAdditionalMetricsToRetain: bool = ...,
        expectedVersion: int = ...
    ) -> IoTUpdateSecurityProfileResponse: ...

    def update_stream(self, *,
        streamId: str,
        description: str = ...,
        files: List[IoTStreamFile] = ...,
        roleArn: str = ...
    ) -> IoTUpdateStreamResponse: ...

    def update_thing(self, *,
        thingName: str,
        thingTypeName: str = ...,
        attributePayload: IoTAttributePayload = ...,
        expectedVersion: int = ...,
        removeThingType: bool = ...
    ) -> IoTUpdateThingResponse: ...

    def update_thing_group(self, *,
        thingGroupName: str,
        thingGroupProperties: IoTThingGroupProperties,
        expectedVersion: int = ...
    ) -> IoTUpdateThingGroupResponse: ...

    def update_thing_groups_for_thing(self, *,
        thingName: str = ...,
        thingGroupsToAdd: List[str] = ...,
        thingGroupsToRemove: List[str] = ...,
        overrideDynamicGroups: bool = ...
    ) -> IoTUpdateThingGroupsForThingResponse: ...

    def validate_security_profile_behaviors(self, *,
        behaviors: List[IoTBehavior]
    ) -> IoTValidateSecurityProfileBehaviorsResponse: ...


class IoTAddThingToBillingGroupResponse(TypedDict, total=False):
    pass


class IoTAddThingToThingGroupResponse(TypedDict, total=False):
    pass


class IoTAssociateTargetsWithJobResponse(TypedDict, total=False):
    jobArn: str
    jobId: str
    description: str


class IoTAttachSecurityProfileResponse(TypedDict, total=False):
    pass


class IoTAttachThingPrincipalResponse(TypedDict, total=False):
    pass


class IoTCancelAuditTaskResponse(TypedDict, total=False):
    pass


class IoTCancelJobResponse(TypedDict, total=False):
    jobArn: str
    jobId: str
    description: str


class IoTClearDefaultAuthorizerResponse(TypedDict, total=False):
    pass


class IoTCreateAuthorizerResponse(TypedDict, total=False):
    authorizerName: str
    authorizerArn: str


class IoTBillingGroupProperties(TypedDict, total=False):
    billingGroupDescription: str


class IoTTag(TypedDict, total=False):
    Key: str
    Value: str


class IoTCreateBillingGroupResponse(TypedDict, total=False):
    billingGroupName: str
    billingGroupArn: str
    billingGroupId: str


class IoTCreateCertificateFromCsrResponse(TypedDict, total=False):
    certificateArn: str
    certificateId: str
    certificatePem: str


class IoTThingGroupProperties(TypedDict, total=False):
    thingGroupDescription: str
    attributePayload: IoTAttributePayload


class IoTAttributePayload(TypedDict, total=False):
    attributes: Dict[str, str]
    merge: bool


class IoTCreateDynamicThingGroupResponse(TypedDict, total=False):
    thingGroupName: str
    thingGroupArn: str
    thingGroupId: str
    indexName: str
    queryString: str
    queryVersion: str


class IoTPresignedUrlConfig(TypedDict, total=False):
    roleArn: str
    expiresInSec: int


class IoTJobExecutionsRolloutConfig(TypedDict, total=False):
    maximumPerMinute: int
    exponentialRate: IoTExponentialRolloutRate


class IoTExponentialRolloutRate(TypedDict):
    baseRatePerMinute: int
    incrementFactor: float
    rateIncreaseCriteria: IoTRateIncreaseCriteria


class IoTRateIncreaseCriteria(TypedDict, total=False):
    numberOfNotifiedThings: int
    numberOfSucceededThings: int


class IoTAbortConfig(TypedDict):
    criteriaList: List[IoTAbortCriteria]


class IoTAbortCriteria(TypedDict):
    failureType: str
    action: str
    thresholdPercentage: float
    minNumberOfExecutedThings: int


class IoTTimeoutConfig(TypedDict, total=False):
    inProgressTimeoutInMinutes: int


class IoTCreateJobResponse(TypedDict, total=False):
    jobArn: str
    jobId: str
    description: str


class IoTCreateKeysAndCertificateResponse(TypedDict, total=False):
    certificateArn: str
    certificateId: str
    certificatePem: str
    keyPair: IoTKeyPair


class IoTKeyPair(TypedDict, total=False):
    PublicKey: str
    PrivateKey: str


class IoTAwsJobExecutionsRolloutConfig(TypedDict, total=False):
    maximumPerMinute: int


class IoTOTAUpdateFile(TypedDict, total=False):
    fileName: str
    fileVersion: str
    fileLocation: IoTFileLocation
    codeSigning: IoTCodeSigning
    attributes: Dict[str, str]


class IoTFileLocation(TypedDict, total=False):
    stream: IoTStream
    s3Location: IoTS3Location


class IoTStream(TypedDict, total=False):
    streamId: str
    fileId: int


class IoTS3Location(TypedDict, total=False):
    bucket: str
    key: str
    version: str


class IoTCodeSigning(TypedDict, total=False):
    awsSignerJobId: str
    startSigningJobParameter: IoTStartSigningJobParameter
    customCodeSigning: IoTCustomCodeSigning


class IoTStartSigningJobParameter(TypedDict, total=False):
    signingProfileParameter: IoTSigningProfileParameter
    signingProfileName: str
    destination: IoTDestination


class IoTSigningProfileParameter(TypedDict, total=False):
    certificateArn: str
    platform: str
    certificatePathOnDevice: str


class IoTDestination(TypedDict, total=False):
    s3Destination: IoTS3Destination


class IoTS3Destination(TypedDict, total=False):
    bucket: str
    prefix: str


class IoTCustomCodeSigning(TypedDict, total=False):
    signature: IoTCodeSigningSignature
    certificateChain: IoTCodeSigningCertificateChain
    hashAlgorithm: str
    signatureAlgorithm: str


class IoTCodeSigningSignature(TypedDict, total=False):
    inlineDocument: bytes


class IoTCodeSigningCertificateChain(TypedDict, total=False):
    certificateName: str
    inlineDocument: str


class IoTCreateOTAUpdateResponse(TypedDict, total=False):
    otaUpdateId: str
    awsIotJobId: str
    otaUpdateArn: str
    awsIotJobArn: str
    otaUpdateStatus: str


class IoTCreatePolicyResponse(TypedDict, total=False):
    policyName: str
    policyArn: str
    policyDocument: str
    policyVersionId: str


class IoTCreatePolicyVersionResponse(TypedDict, total=False):
    policyArn: str
    policyDocument: str
    policyVersionId: str
    isDefaultVersion: bool


class IoTCreateRoleAliasResponse(TypedDict, total=False):
    roleAlias: str
    roleAliasArn: str


class IoTCreateScheduledAuditResponse(TypedDict, total=False):
    scheduledAuditArn: str


class _IoTBehavior(TypedDict):
    name: str


class IoTBehavior(_IoTBehavior, total=False):
    metric: str
    criteria: IoTBehaviorCriteria


class IoTBehaviorCriteria(TypedDict, total=False):
    comparisonOperator: str
    value: IoTMetricValue
    durationSeconds: int
    consecutiveDatapointsToAlarm: int
    consecutiveDatapointsToClear: int
    statisticalThreshold: IoTStatisticalThreshold


class IoTMetricValue(TypedDict, total=False):
    count: int
    cidrs: List[str]
    ports: List[int]


class IoTStatisticalThreshold(TypedDict, total=False):
    statistic: str


class IoTAlertTarget(TypedDict):
    alertTargetArn: str
    roleArn: str


class IoTCreateSecurityProfileResponse(TypedDict, total=False):
    securityProfileName: str
    securityProfileArn: str


class IoTStreamFile(TypedDict, total=False):
    fileId: int
    s3Location: IoTS3Location


class IoTCreateStreamResponse(TypedDict, total=False):
    streamId: str
    streamArn: str
    description: str
    streamVersion: int


class IoTCreateThingResponse(TypedDict, total=False):
    thingName: str
    thingArn: str
    thingId: str


class IoTCreateThingGroupResponse(TypedDict, total=False):
    thingGroupName: str
    thingGroupArn: str
    thingGroupId: str


class IoTThingTypeProperties(TypedDict, total=False):
    thingTypeDescription: str
    searchableAttributes: List[str]


class IoTCreateThingTypeResponse(TypedDict, total=False):
    thingTypeName: str
    thingTypeArn: str
    thingTypeId: str


class _IoTTopicRulePayload(TypedDict):
    sql: str
    actions: List[IoTAction]


class IoTTopicRulePayload(_IoTTopicRulePayload, total=False):
    description: str
    ruleDisabled: bool
    awsIotSqlVersion: str
    errorAction: IoTAction


class IoTAction(TypedDict, total=False):
    dynamoDB: IoTDynamoDBAction
    dynamoDBv2: IoTDynamoDBv2Action
    lambda: IoTLambdaAction
    sns: IoTSnsAction
    sqs: IoTSqsAction
    kinesis: IoTKinesisAction
    republish: IoTRepublishAction
    s3: IoTS3Action
    firehose: IoTFirehoseAction
    cloudwatchMetric: IoTCloudwatchMetricAction
    cloudwatchAlarm: IoTCloudwatchAlarmAction
    elasticsearch: IoTElasticsearchAction
    salesforce: IoTSalesforceAction
    iotAnalytics: IoTIotAnalyticsAction
    iotEvents: IoTIotEventsAction
    stepFunctions: IoTStepFunctionsAction


class _IoTDynamoDBAction(TypedDict):
    tableName: str
    roleArn: str
    hashKeyField: str
    hashKeyValue: str


class IoTDynamoDBAction(_IoTDynamoDBAction, total=False):
    operation: str
    hashKeyType: str
    rangeKeyField: str
    rangeKeyValue: str
    rangeKeyType: str
    payloadField: str


class IoTDynamoDBv2Action(TypedDict):
    roleArn: str
    putItem: IoTPutItemInput


class IoTPutItemInput(TypedDict):
    tableName: str


class IoTLambdaAction(TypedDict):
    functionArn: str


class _IoTSnsAction(TypedDict):
    targetArn: str
    roleArn: str


class IoTSnsAction(_IoTSnsAction, total=False):
    messageFormat: str


class _IoTSqsAction(TypedDict):
    roleArn: str
    queueUrl: str


class IoTSqsAction(_IoTSqsAction, total=False):
    useBase64: bool


class _IoTKinesisAction(TypedDict):
    roleArn: str
    streamName: str


class IoTKinesisAction(_IoTKinesisAction, total=False):
    partitionKey: str


class IoTRepublishAction(TypedDict):
    roleArn: str
    topic: str


class _IoTS3Action(TypedDict):
    roleArn: str
    bucketName: str
    key: str


class IoTS3Action(_IoTS3Action, total=False):
    cannedAcl: str


class _IoTFirehoseAction(TypedDict):
    roleArn: str
    deliveryStreamName: str


class IoTFirehoseAction(_IoTFirehoseAction, total=False):
    separator: str


class _IoTCloudwatchMetricAction(TypedDict):
    roleArn: str
    metricNamespace: str
    metricName: str
    metricValue: str
    metricUnit: str


class IoTCloudwatchMetricAction(_IoTCloudwatchMetricAction, total=False):
    metricTimestamp: str


class IoTCloudwatchAlarmAction(TypedDict):
    roleArn: str
    alarmName: str
    stateReason: str
    stateValue: str


class IoTElasticsearchAction(TypedDict):
    roleArn: str
    endpoint: str
    index: str
    type: str
    id: str


class IoTSalesforceAction(TypedDict):
    token: str
    url: str


class IoTIotAnalyticsAction(TypedDict, total=False):
    channelArn: str
    channelName: str
    roleArn: str


class _IoTIotEventsAction(TypedDict):
    inputName: str
    roleArn: str


class IoTIotEventsAction(_IoTIotEventsAction, total=False):
    messageId: str


class _IoTStepFunctionsAction(TypedDict):
    stateMachineName: str
    roleArn: str


class IoTStepFunctionsAction(_IoTStepFunctionsAction, total=False):
    executionNamePrefix: str


class IoTDeleteAccountAuditConfigurationResponse(TypedDict, total=False):
    pass


class IoTDeleteAuthorizerResponse(TypedDict, total=False):
    pass


class IoTDeleteBillingGroupResponse(TypedDict, total=False):
    pass


class IoTDeleteCACertificateResponse(TypedDict, total=False):
    pass


class IoTDeleteDynamicThingGroupResponse(TypedDict, total=False):
    pass


class IoTDeleteOTAUpdateResponse(TypedDict, total=False):
    pass


class IoTDeleteRegistrationCodeResponse(TypedDict, total=False):
    pass


class IoTDeleteRoleAliasResponse(TypedDict, total=False):
    pass


class IoTDeleteScheduledAuditResponse(TypedDict, total=False):
    pass


class IoTDeleteSecurityProfileResponse(TypedDict, total=False):
    pass


class IoTDeleteStreamResponse(TypedDict, total=False):
    pass


class IoTDeleteThingResponse(TypedDict, total=False):
    pass


class IoTDeleteThingGroupResponse(TypedDict, total=False):
    pass


class IoTDeleteThingTypeResponse(TypedDict, total=False):
    pass


class IoTDeprecateThingTypeResponse(TypedDict, total=False):
    pass


class IoTDescribeAccountAuditConfigurationResponse(TypedDict, total=False):
    roleArn: str
    auditNotificationTargetConfigurations: Dict[str, IoTAuditNotificationTarget]
    auditCheckConfigurations: Dict[str, IoTAuditCheckConfiguration]


class IoTAuditNotificationTarget(TypedDict, total=False):
    targetArn: str
    roleArn: str
    enabled: bool


class IoTAuditCheckConfiguration(TypedDict, total=False):
    enabled: bool


class IoTDescribeAuditTaskResponse(TypedDict, total=False):
    taskStatus: str
    taskType: str
    taskStartTime: datetime.datetime
    taskStatistics: IoTTaskStatistics
    scheduledAuditName: str
    auditDetails: Dict[str, IoTAuditCheckDetails]


class IoTTaskStatistics(TypedDict, total=False):
    totalChecks: int
    inProgressChecks: int
    waitingForDataCollectionChecks: int
    compliantChecks: int
    nonCompliantChecks: int
    failedChecks: int
    canceledChecks: int


class IoTAuditCheckDetails(TypedDict, total=False):
    checkRunStatus: str
    checkCompliant: bool
    totalResourcesCount: int
    nonCompliantResourcesCount: int
    errorCode: str
    message: str


class IoTDescribeAuthorizerResponse(TypedDict, total=False):
    authorizerDescription: IoTAuthorizerDescription


class IoTAuthorizerDescription(TypedDict, total=False):
    authorizerName: str
    authorizerArn: str
    authorizerFunctionArn: str
    tokenKeyName: str
    tokenSigningPublicKeys: Dict[str, str]
    status: str
    creationDate: datetime.datetime
    lastModifiedDate: datetime.datetime


class IoTDescribeBillingGroupResponse(TypedDict, total=False):
    billingGroupName: str
    billingGroupId: str
    billingGroupArn: str
    version: int
    billingGroupProperties: IoTBillingGroupProperties
    billingGroupMetadata: IoTBillingGroupMetadata


class IoTBillingGroupMetadata(TypedDict, total=False):
    creationDate: datetime.datetime


class IoTDescribeCACertificateResponse(TypedDict, total=False):
    certificateDescription: IoTCACertificateDescription
    registrationConfig: IoTRegistrationConfig


class IoTCACertificateDescription(TypedDict, total=False):
    certificateArn: str
    certificateId: str
    status: str
    certificatePem: str
    ownedBy: str
    creationDate: datetime.datetime
    autoRegistrationStatus: str
    lastModifiedDate: datetime.datetime
    customerVersion: int
    generationId: str
    validity: IoTCertificateValidity


class IoTCertificateValidity(TypedDict, total=False):
    notBefore: datetime.datetime
    notAfter: datetime.datetime


class IoTRegistrationConfig(TypedDict, total=False):
    templateBody: str
    roleArn: str


class IoTDescribeCertificateResponse(TypedDict, total=False):
    certificateDescription: IoTCertificateDescription


class IoTCertificateDescription(TypedDict, total=False):
    certificateArn: str
    certificateId: str
    caCertificateId: str
    status: str
    certificatePem: str
    ownedBy: str
    previousOwnedBy: str
    creationDate: datetime.datetime
    lastModifiedDate: datetime.datetime
    customerVersion: int
    transferData: IoTTransferData
    generationId: str
    validity: IoTCertificateValidity


class IoTTransferData(TypedDict, total=False):
    transferMessage: str
    rejectReason: str
    transferDate: datetime.datetime
    acceptDate: datetime.datetime
    rejectDate: datetime.datetime


class IoTDescribeDefaultAuthorizerResponse(TypedDict, total=False):
    authorizerDescription: IoTAuthorizerDescription


class IoTDescribeEndpointResponse(TypedDict, total=False):
    endpointAddress: str


class IoTDescribeEventConfigurationsResponse(TypedDict, total=False):
    eventConfigurations: Dict[str, IoTConfiguration]
    creationDate: datetime.datetime
    lastModifiedDate: datetime.datetime


class IoTConfiguration(TypedDict, total=False):
    Enabled: bool


class IoTDescribeIndexResponse(TypedDict, total=False):
    indexName: str
    indexStatus: str
    schema: str


class IoTDescribeJobResponse(TypedDict, total=False):
    documentSource: str
    job: IoTJob


class IoTJob(TypedDict, total=False):
    jobArn: str
    jobId: str
    targetSelection: str
    status: str
    forceCanceled: bool
    reasonCode: str
    comment: str
    targets: List[str]
    description: str
    presignedUrlConfig: IoTPresignedUrlConfig
    jobExecutionsRolloutConfig: IoTJobExecutionsRolloutConfig
    abortConfig: IoTAbortConfig
    createdAt: datetime.datetime
    lastUpdatedAt: datetime.datetime
    completedAt: datetime.datetime
    jobProcessDetails: IoTJobProcessDetails
    timeoutConfig: IoTTimeoutConfig


class IoTJobProcessDetails(TypedDict, total=False):
    processingTargets: List[str]
    numberOfCanceledThings: int
    numberOfSucceededThings: int
    numberOfFailedThings: int
    numberOfRejectedThings: int
    numberOfQueuedThings: int
    numberOfInProgressThings: int
    numberOfRemovedThings: int
    numberOfTimedOutThings: int


class IoTDescribeJobExecutionResponse(TypedDict, total=False):
    execution: IoTJobExecution


class IoTJobExecution(TypedDict, total=False):
    jobId: str
    status: str
    forceCanceled: bool
    statusDetails: IoTJobExecutionStatusDetails
    thingArn: str
    queuedAt: datetime.datetime
    startedAt: datetime.datetime
    lastUpdatedAt: datetime.datetime
    executionNumber: int
    versionNumber: int
    approximateSecondsBeforeTimedOut: int


class IoTJobExecutionStatusDetails(TypedDict, total=False):
    detailsMap: Dict[str, str]


class IoTDescribeRoleAliasResponse(TypedDict, total=False):
    roleAliasDescription: IoTRoleAliasDescription


class IoTRoleAliasDescription(TypedDict, total=False):
    roleAlias: str
    roleAliasArn: str
    roleArn: str
    owner: str
    credentialDurationSeconds: int
    creationDate: datetime.datetime
    lastModifiedDate: datetime.datetime


class IoTDescribeScheduledAuditResponse(TypedDict, total=False):
    frequency: str
    dayOfMonth: str
    dayOfWeek: str
    targetCheckNames: List[str]
    scheduledAuditName: str
    scheduledAuditArn: str


class IoTDescribeSecurityProfileResponse(TypedDict, total=False):
    securityProfileName: str
    securityProfileArn: str
    securityProfileDescription: str
    behaviors: List[IoTBehavior]
    alertTargets: Dict[str, IoTAlertTarget]
    additionalMetricsToRetain: List[str]
    version: int
    creationDate: datetime.datetime
    lastModifiedDate: datetime.datetime


class IoTDescribeStreamResponse(TypedDict, total=False):
    streamInfo: IoTStreamInfo


class IoTStreamInfo(TypedDict, total=False):
    streamId: str
    streamArn: str
    streamVersion: int
    description: str
    files: List[IoTStreamFile]
    createdAt: datetime.datetime
    lastUpdatedAt: datetime.datetime
    roleArn: str


class IoTDescribeThingResponse(TypedDict, total=False):
    defaultClientId: str
    thingName: str
    thingId: str
    thingArn: str
    thingTypeName: str
    attributes: Dict[str, str]
    version: int
    billingGroupName: str


class IoTDescribeThingGroupResponse(TypedDict, total=False):
    thingGroupName: str
    thingGroupId: str
    thingGroupArn: str
    version: int
    thingGroupProperties: IoTThingGroupProperties
    thingGroupMetadata: IoTThingGroupMetadata
    indexName: str
    queryString: str
    queryVersion: str
    status: str


class IoTThingGroupMetadata(TypedDict, total=False):
    parentGroupName: str
    rootToParentThingGroups: List[IoTGroupNameAndArn]
    creationDate: datetime.datetime


class IoTGroupNameAndArn(TypedDict, total=False):
    groupName: str
    groupArn: str


class IoTDescribeThingRegistrationTaskResponse(TypedDict, total=False):
    taskId: str
    creationDate: datetime.datetime
    lastModifiedDate: datetime.datetime
    templateBody: str
    inputFileBucket: str
    inputFileKey: str
    roleArn: str
    status: str
    message: str
    successCount: int
    failureCount: int
    percentageProgress: int


class IoTDescribeThingTypeResponse(TypedDict, total=False):
    thingTypeName: str
    thingTypeId: str
    thingTypeArn: str
    thingTypeProperties: IoTThingTypeProperties
    thingTypeMetadata: IoTThingTypeMetadata


class IoTThingTypeMetadata(TypedDict, total=False):
    deprecated: bool
    deprecationDate: datetime.datetime
    creationDate: datetime.datetime


class IoTDetachSecurityProfileResponse(TypedDict, total=False):
    pass


class IoTDetachThingPrincipalResponse(TypedDict, total=False):
    pass


class IoTGetEffectivePoliciesResponse(TypedDict, total=False):
    effectivePolicies: List[IoTEffectivePolicy]


class IoTEffectivePolicy(TypedDict, total=False):
    policyName: str
    policyArn: str
    policyDocument: str


class IoTGetIndexingConfigurationResponse(TypedDict, total=False):
    thingIndexingConfiguration: IoTThingIndexingConfiguration
    thingGroupIndexingConfiguration: IoTThingGroupIndexingConfiguration


class _IoTThingIndexingConfiguration(TypedDict):
    thingIndexingMode: str


class IoTThingIndexingConfiguration(_IoTThingIndexingConfiguration, total=False):
    thingConnectivityIndexingMode: str


class IoTThingGroupIndexingConfiguration(TypedDict):
    thingGroupIndexingMode: str


class IoTGetJobDocumentResponse(TypedDict, total=False):
    document: str


class IoTGetLoggingOptionsResponse(TypedDict, total=False):
    roleArn: str
    logLevel: str


class IoTGetOTAUpdateResponse(TypedDict, total=False):
    otaUpdateInfo: IoTOTAUpdateInfo


class IoTOTAUpdateInfo(TypedDict, total=False):
    otaUpdateId: str
    otaUpdateArn: str
    creationDate: datetime.datetime
    lastModifiedDate: datetime.datetime
    description: str
    targets: List[str]
    awsJobExecutionsRolloutConfig: IoTAwsJobExecutionsRolloutConfig
    targetSelection: str
    otaUpdateFiles: List[IoTOTAUpdateFile]
    otaUpdateStatus: str
    awsIotJobId: str
    awsIotJobArn: str
    errorInfo: IoTErrorInfo
    additionalParameters: Dict[str, str]


class IoTErrorInfo(TypedDict, total=False):
    code: str
    message: str


class IoTGetPolicyResponse(TypedDict, total=False):
    policyName: str
    policyArn: str
    policyDocument: str
    defaultVersionId: str
    creationDate: datetime.datetime
    lastModifiedDate: datetime.datetime
    generationId: str


class IoTGetPolicyVersionResponse(TypedDict, total=False):
    policyArn: str
    policyName: str
    policyDocument: str
    policyVersionId: str
    isDefaultVersion: bool
    creationDate: datetime.datetime
    lastModifiedDate: datetime.datetime
    generationId: str


class IoTGetRegistrationCodeResponse(TypedDict, total=False):
    registrationCode: str


class IoTGetStatisticsResponse(TypedDict, total=False):
    statistics: IoTStatistics


class IoTStatistics(TypedDict, total=False):
    count: int


class IoTGetTopicRuleResponse(TypedDict, total=False):
    ruleArn: str
    rule: IoTTopicRule


class IoTTopicRule(TypedDict, total=False):
    ruleName: str
    sql: str
    description: str
    createdAt: datetime.datetime
    actions: List[IoTAction]
    ruleDisabled: bool
    awsIotSqlVersion: str
    errorAction: IoTAction


class IoTGetV2LoggingOptionsResponse(TypedDict, total=False):
    roleArn: str
    defaultLogLevel: str
    disableAllLogs: bool


class IoTListActiveViolationsResponse(TypedDict, total=False):
    activeViolations: List[IoTActiveViolation]
    nextToken: str


class IoTActiveViolation(TypedDict, total=False):
    violationId: str
    thingName: str
    securityProfileName: str
    behavior: IoTBehavior
    lastViolationValue: IoTMetricValue
    lastViolationTime: datetime.datetime
    violationStartTime: datetime.datetime


class IoTListAttachedPoliciesResponse(TypedDict, total=False):
    policies: List[IoTPolicy]
    nextMarker: str


class IoTPolicy(TypedDict, total=False):
    policyName: str
    policyArn: str


class IoTResourceIdentifier(TypedDict, total=False):
    deviceCertificateId: str
    caCertificateId: str
    cognitoIdentityPoolId: str
    clientId: str
    policyVersionIdentifier: IoTPolicyVersionIdentifier
    account: str


class IoTPolicyVersionIdentifier(TypedDict, total=False):
    policyName: str
    policyVersionId: str


class IoTListAuditFindingsResponse(TypedDict, total=False):
    findings: List[IoTAuditFinding]
    nextToken: str


class IoTAuditFinding(TypedDict, total=False):
    taskId: str
    checkName: str
    taskStartTime: datetime.datetime
    findingTime: datetime.datetime
    severity: str
    nonCompliantResource: IoTNonCompliantResource
    relatedResources: List[IoTRelatedResource]
    reasonForNonCompliance: str
    reasonForNonComplianceCode: str


class IoTNonCompliantResource(TypedDict, total=False):
    resourceType: str
    resourceIdentifier: IoTResourceIdentifier
    additionalInfo: Dict[str, str]


class IoTRelatedResource(TypedDict, total=False):
    resourceType: str
    resourceIdentifier: IoTResourceIdentifier
    additionalInfo: Dict[str, str]


class IoTListAuditTasksResponse(TypedDict, total=False):
    tasks: List[IoTAuditTaskMetadata]
    nextToken: str


class IoTAuditTaskMetadata(TypedDict, total=False):
    taskId: str
    taskStatus: str
    taskType: str


class IoTListAuthorizersResponse(TypedDict, total=False):
    authorizers: List[IoTAuthorizerSummary]
    nextMarker: str


class IoTAuthorizerSummary(TypedDict, total=False):
    authorizerName: str
    authorizerArn: str


class IoTListBillingGroupsResponse(TypedDict, total=False):
    billingGroups: List[IoTGroupNameAndArn]
    nextToken: str


class IoTListCACertificatesResponse(TypedDict, total=False):
    certificates: List[IoTCACertificate]
    nextMarker: str


class IoTCACertificate(TypedDict, total=False):
    certificateArn: str
    certificateId: str
    status: str
    creationDate: datetime.datetime


class IoTListCertificatesResponse(TypedDict, total=False):
    certificates: List[IoTCertificate]
    nextMarker: str


class IoTCertificate(TypedDict, total=False):
    certificateArn: str
    certificateId: str
    status: str
    creationDate: datetime.datetime


class IoTListCertificatesByCAResponse(TypedDict, total=False):
    certificates: List[IoTCertificate]
    nextMarker: str


class IoTListIndicesResponse(TypedDict, total=False):
    indexNames: List[str]
    nextToken: str


class IoTListJobExecutionsForJobResponse(TypedDict, total=False):
    executionSummaries: List[IoTJobExecutionSummaryForJob]
    nextToken: str


class IoTJobExecutionSummaryForJob(TypedDict, total=False):
    thingArn: str
    jobExecutionSummary: IoTJobExecutionSummary


class IoTJobExecutionSummary(TypedDict, total=False):
    status: str
    queuedAt: datetime.datetime
    startedAt: datetime.datetime
    lastUpdatedAt: datetime.datetime
    executionNumber: int


class IoTListJobExecutionsForThingResponse(TypedDict, total=False):
    executionSummaries: List[IoTJobExecutionSummaryForThing]
    nextToken: str


class IoTJobExecutionSummaryForThing(TypedDict, total=False):
    jobId: str
    jobExecutionSummary: IoTJobExecutionSummary


class IoTListJobsResponse(TypedDict, total=False):
    jobs: List[IoTJobSummary]
    nextToken: str


class IoTJobSummary(TypedDict, total=False):
    jobArn: str
    jobId: str
    thingGroupId: str
    targetSelection: str
    status: str
    createdAt: datetime.datetime
    lastUpdatedAt: datetime.datetime
    completedAt: datetime.datetime


class IoTListOTAUpdatesResponse(TypedDict, total=False):
    otaUpdates: List[IoTOTAUpdateSummary]
    nextToken: str


class IoTOTAUpdateSummary(TypedDict, total=False):
    otaUpdateId: str
    otaUpdateArn: str
    creationDate: datetime.datetime


class IoTListOutgoingCertificatesResponse(TypedDict, total=False):
    outgoingCertificates: List[IoTOutgoingCertificate]
    nextMarker: str


class IoTOutgoingCertificate(TypedDict, total=False):
    certificateArn: str
    certificateId: str
    transferredTo: str
    transferDate: datetime.datetime
    transferMessage: str
    creationDate: datetime.datetime


class IoTListPoliciesResponse(TypedDict, total=False):
    policies: List[IoTPolicy]
    nextMarker: str


class IoTListPolicyPrincipalsResponse(TypedDict, total=False):
    principals: List[str]
    nextMarker: str


class IoTListPolicyVersionsResponse(TypedDict, total=False):
    policyVersions: List[IoTPolicyVersion]


class IoTPolicyVersion(TypedDict, total=False):
    versionId: str
    isDefaultVersion: bool
    createDate: datetime.datetime


class IoTListPrincipalPoliciesResponse(TypedDict, total=False):
    policies: List[IoTPolicy]
    nextMarker: str


class IoTListPrincipalThingsResponse(TypedDict, total=False):
    things: List[str]
    nextToken: str


class IoTListRoleAliasesResponse(TypedDict, total=False):
    roleAliases: List[str]
    nextMarker: str


class IoTListScheduledAuditsResponse(TypedDict, total=False):
    scheduledAudits: List[IoTScheduledAuditMetadata]
    nextToken: str


class IoTScheduledAuditMetadata(TypedDict, total=False):
    scheduledAuditName: str
    scheduledAuditArn: str
    frequency: str
    dayOfMonth: str
    dayOfWeek: str


class IoTListSecurityProfilesResponse(TypedDict, total=False):
    securityProfileIdentifiers: List[IoTSecurityProfileIdentifier]
    nextToken: str


class IoTSecurityProfileIdentifier(TypedDict):
    name: str
    arn: str


class IoTListSecurityProfilesForTargetResponse(TypedDict, total=False):
    securityProfileTargetMappings: List[IoTSecurityProfileTargetMapping]
    nextToken: str


class IoTSecurityProfileTargetMapping(TypedDict, total=False):
    securityProfileIdentifier: IoTSecurityProfileIdentifier
    target: IoTSecurityProfileTarget


class IoTSecurityProfileTarget(TypedDict):
    arn: str


class IoTListStreamsResponse(TypedDict, total=False):
    streams: List[IoTStreamSummary]
    nextToken: str


class IoTStreamSummary(TypedDict, total=False):
    streamId: str
    streamArn: str
    streamVersion: int
    description: str


class IoTListTagsForResourceResponse(TypedDict, total=False):
    tags: List[IoTTag]
    nextToken: str


class IoTListTargetsForPolicyResponse(TypedDict, total=False):
    targets: List[str]
    nextMarker: str


class IoTListTargetsForSecurityProfileResponse(TypedDict, total=False):
    securityProfileTargets: List[IoTSecurityProfileTarget]
    nextToken: str


class IoTListThingGroupsResponse(TypedDict, total=False):
    thingGroups: List[IoTGroupNameAndArn]
    nextToken: str


class IoTListThingGroupsForThingResponse(TypedDict, total=False):
    thingGroups: List[IoTGroupNameAndArn]
    nextToken: str


class IoTListThingPrincipalsResponse(TypedDict, total=False):
    principals: List[str]


class IoTListThingRegistrationTaskReportsResponse(TypedDict, total=False):
    resourceLinks: List[str]
    reportType: str
    nextToken: str


class IoTListThingRegistrationTasksResponse(TypedDict, total=False):
    taskIds: List[str]
    nextToken: str


class IoTListThingTypesResponse(TypedDict, total=False):
    thingTypes: List[IoTThingTypeDefinition]
    nextToken: str


class IoTThingTypeDefinition(TypedDict, total=False):
    thingTypeName: str
    thingTypeArn: str
    thingTypeProperties: IoTThingTypeProperties
    thingTypeMetadata: IoTThingTypeMetadata


class IoTListThingsResponse(TypedDict, total=False):
    things: List[IoTThingAttribute]
    nextToken: str


class IoTThingAttribute(TypedDict, total=False):
    thingName: str
    thingTypeName: str
    thingArn: str
    attributes: Dict[str, str]
    version: int


class IoTListThingsInBillingGroupResponse(TypedDict, total=False):
    things: List[str]
    nextToken: str


class IoTListThingsInThingGroupResponse(TypedDict, total=False):
    things: List[str]
    nextToken: str


class IoTListTopicRulesResponse(TypedDict, total=False):
    rules: List[IoTTopicRuleListItem]
    nextToken: str


class IoTTopicRuleListItem(TypedDict, total=False):
    ruleArn: str
    ruleName: str
    topicPattern: str
    createdAt: datetime.datetime
    ruleDisabled: bool


class IoTListV2LoggingLevelsResponse(TypedDict, total=False):
    logTargetConfigurations: List[IoTLogTargetConfiguration]
    nextToken: str


class IoTLogTargetConfiguration(TypedDict, total=False):
    logTarget: IoTLogTarget
    logLevel: str


class _IoTLogTarget(TypedDict):
    targetType: str


class IoTLogTarget(_IoTLogTarget, total=False):
    targetName: str


class IoTListViolationEventsResponse(TypedDict, total=False):
    violationEvents: List[IoTViolationEvent]
    nextToken: str


class IoTViolationEvent(TypedDict, total=False):
    violationId: str
    thingName: str
    securityProfileName: str
    behavior: IoTBehavior
    metricValue: IoTMetricValue
    violationEventType: str
    violationEventTime: datetime.datetime


class IoTRegisterCACertificateResponse(TypedDict, total=False):
    certificateArn: str
    certificateId: str


class IoTRegisterCertificateResponse(TypedDict, total=False):
    certificateArn: str
    certificateId: str


class IoTRegisterThingResponse(TypedDict, total=False):
    certificatePem: str
    resourceArns: Dict[str, str]


class IoTRemoveThingFromBillingGroupResponse(TypedDict, total=False):
    pass


class IoTRemoveThingFromThingGroupResponse(TypedDict, total=False):
    pass


class IoTSearchIndexResponse(TypedDict, total=False):
    nextToken: str
    things: List[IoTThingDocument]
    thingGroups: List[IoTThingGroupDocument]


class IoTThingDocument(TypedDict, total=False):
    thingName: str
    thingId: str
    thingTypeName: str
    thingGroupNames: List[str]
    attributes: Dict[str, str]
    shadow: str
    connectivity: IoTThingConnectivity


class IoTThingConnectivity(TypedDict, total=False):
    connected: bool
    timestamp: int


class IoTThingGroupDocument(TypedDict, total=False):
    thingGroupName: str
    thingGroupId: str
    thingGroupDescription: str
    attributes: Dict[str, str]
    parentGroupNames: List[str]


class IoTSetDefaultAuthorizerResponse(TypedDict, total=False):
    authorizerName: str
    authorizerArn: str


class _IoTLoggingOptionsPayload(TypedDict):
    roleArn: str


class IoTLoggingOptionsPayload(_IoTLoggingOptionsPayload, total=False):
    logLevel: str


class IoTStartOnDemandAuditTaskResponse(TypedDict, total=False):
    taskId: str


class IoTStartThingRegistrationTaskResponse(TypedDict, total=False):
    taskId: str


class IoTStopThingRegistrationTaskResponse(TypedDict, total=False):
    pass


class IoTTagResourceResponse(TypedDict, total=False):
    pass


class IoTAuthInfo(TypedDict, total=False):
    actionType: str
    resources: List[str]


class IoTTestAuthorizationResponse(TypedDict, total=False):
    authResults: List[IoTAuthResult]


class IoTAuthResult(TypedDict, total=False):
    authInfo: IoTAuthInfo
    allowed: IoTAllowed
    denied: IoTDenied
    authDecision: str
    missingContextValues: List[str]


class IoTAllowed(TypedDict, total=False):
    policies: List[IoTPolicy]


class IoTDenied(TypedDict, total=False):
    implicitDeny: IoTImplicitDeny
    explicitDeny: IoTExplicitDeny


class IoTImplicitDeny(TypedDict, total=False):
    policies: List[IoTPolicy]


class IoTExplicitDeny(TypedDict, total=False):
    policies: List[IoTPolicy]


class IoTTestInvokeAuthorizerResponse(TypedDict, total=False):
    isAuthenticated: bool
    principalId: str
    policyDocuments: List[str]
    refreshAfterInSeconds: int
    disconnectAfterInSeconds: int


class IoTTransferCertificateResponse(TypedDict, total=False):
    transferredCertificateArn: str


class IoTUntagResourceResponse(TypedDict, total=False):
    pass


class IoTUpdateAccountAuditConfigurationResponse(TypedDict, total=False):
    pass


class IoTUpdateAuthorizerResponse(TypedDict, total=False):
    authorizerName: str
    authorizerArn: str


class IoTUpdateBillingGroupResponse(TypedDict, total=False):
    version: int


class IoTUpdateDynamicThingGroupResponse(TypedDict, total=False):
    version: int


class IoTUpdateEventConfigurationsResponse(TypedDict, total=False):
    pass


class IoTUpdateIndexingConfigurationResponse(TypedDict, total=False):
    pass


class IoTUpdateRoleAliasResponse(TypedDict, total=False):
    roleAlias: str
    roleAliasArn: str


class IoTUpdateScheduledAuditResponse(TypedDict, total=False):
    scheduledAuditArn: str


class IoTUpdateSecurityProfileResponse(TypedDict, total=False):
    securityProfileName: str
    securityProfileArn: str
    securityProfileDescription: str
    behaviors: List[IoTBehavior]
    alertTargets: Dict[str, IoTAlertTarget]
    additionalMetricsToRetain: List[str]
    version: int
    creationDate: datetime.datetime
    lastModifiedDate: datetime.datetime


class IoTUpdateStreamResponse(TypedDict, total=False):
    streamId: str
    streamArn: str
    description: str
    streamVersion: int


class IoTUpdateThingResponse(TypedDict, total=False):
    pass


class IoTUpdateThingGroupResponse(TypedDict, total=False):
    version: int


class IoTUpdateThingGroupsForThingResponse(TypedDict, total=False):
    pass


class IoTValidateSecurityProfileBehaviorsResponse(TypedDict, total=False):
    valid: bool
    validationErrors: List[IoTValidationError]


class IoTValidationError(TypedDict, total=False):
    errorMessage: str


class IoTDataPlane(BaseClient):
    def delete_thing_shadow(self, *,
        thingName: str
    ) -> IoTDataPlaneDeleteThingShadowResponse: ...

    def get_thing_shadow(self, *,
        thingName: str
    ) -> IoTDataPlaneGetThingShadowResponse: ...

    def publish(self, *,
        topic: str,
        qos: int = ...,
        payload: bytes = ...
    ): ...

    def update_thing_shadow(self, *,
        thingName: str,
        payload: bytes
    ) -> IoTDataPlaneUpdateThingShadowResponse: ...


class IoTDataPlaneDeleteThingShadowResponse(TypedDict):
    payload: bytes


class IoTDataPlaneGetThingShadowResponse(TypedDict, total=False):
    payload: bytes


class IoTDataPlaneUpdateThingShadowResponse(TypedDict, total=False):
    payload: bytes


class IoTJobsDataPlane(BaseClient):
    def describe_job_execution(self, *,
        jobId: str,
        thingName: str,
        includeJobDocument: bool = ...,
        executionNumber: int = ...
    ) -> IoTJobsDataPlaneDescribeJobExecutionResponse: ...

    def get_pending_job_executions(self, *,
        thingName: str
    ) -> IoTJobsDataPlaneGetPendingJobExecutionsResponse: ...

    def start_next_pending_job_execution(self, *,
        thingName: str,
        statusDetails: Dict[str, str] = ...,
        stepTimeoutInMinutes: int = ...
    ) -> IoTJobsDataPlaneStartNextPendingJobExecutionResponse: ...

    def update_job_execution(self, *,
        jobId: str,
        thingName: str,
        status: str,
        statusDetails: Dict[str, str] = ...,
        stepTimeoutInMinutes: int = ...,
        expectedVersion: int = ...,
        includeJobExecutionState: bool = ...,
        includeJobDocument: bool = ...,
        executionNumber: int = ...
    ) -> IoTJobsDataPlaneUpdateJobExecutionResponse: ...


class IoTJobsDataPlaneDescribeJobExecutionResponse(TypedDict, total=False):
    execution: IoTJobsDataPlaneJobExecution


class IoTJobsDataPlaneJobExecution(TypedDict, total=False):
    jobId: str
    thingName: str
    status: str
    statusDetails: Dict[str, str]
    queuedAt: int
    startedAt: int
    lastUpdatedAt: int
    approximateSecondsBeforeTimedOut: int
    versionNumber: int
    executionNumber: int
    jobDocument: str


class IoTJobsDataPlaneGetPendingJobExecutionsResponse(TypedDict, total=False):
    inProgressJobs: List[IoTJobsDataPlaneJobExecutionSummary]
    queuedJobs: List[IoTJobsDataPlaneJobExecutionSummary]


class IoTJobsDataPlaneJobExecutionSummary(TypedDict, total=False):
    jobId: str
    queuedAt: int
    startedAt: int
    lastUpdatedAt: int
    versionNumber: int
    executionNumber: int


class IoTJobsDataPlaneStartNextPendingJobExecutionResponse(TypedDict, total=False):
    execution: IoTJobsDataPlaneJobExecution


class IoTJobsDataPlaneUpdateJobExecutionResponse(TypedDict, total=False):
    executionState: IoTJobsDataPlaneJobExecutionState
    jobDocument: str


class IoTJobsDataPlaneJobExecutionState(TypedDict, total=False):
    status: str
    statusDetails: Dict[str, str]
    versionNumber: int


class IoT1ClickDevicesService(BaseClient):
    def claim_devices_by_claim_code(self, *,
        ClaimCode: str
    ) -> IoT1ClickDevicesServiceClaimDevicesByClaimCodeResponse: ...

    def describe_device(self, *,
        DeviceId: str
    ) -> IoT1ClickDevicesServiceDescribeDeviceResponse: ...

    def finalize_device_claim(self, *,
        DeviceId: str,
        Tags: Dict[str, str] = ...
    ) -> IoT1ClickDevicesServiceFinalizeDeviceClaimResponse: ...

    def get_device_methods(self, *,
        DeviceId: str
    ) -> IoT1ClickDevicesServiceGetDeviceMethodsResponse: ...

    def initiate_device_claim(self, *,
        DeviceId: str
    ) -> IoT1ClickDevicesServiceInitiateDeviceClaimResponse: ...

    def invoke_device_method(self, *,
        DeviceId: str,
        DeviceMethod: IoT1ClickDevicesServiceDeviceMethod = ...,
        DeviceMethodParameters: str = ...
    ) -> IoT1ClickDevicesServiceInvokeDeviceMethodResponse: ...

    def list_device_events(self, *,
        DeviceId: str,
        FromTimeStamp: datetime.datetime,
        ToTimeStamp: datetime.datetime,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> IoT1ClickDevicesServiceListDeviceEventsResponse: ...

    def list_devices(self, *,
        DeviceType: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> IoT1ClickDevicesServiceListDevicesResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> IoT1ClickDevicesServiceListTagsForResourceResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: Dict[str, str]
    ): ...

    def unclaim_device(self, *,
        DeviceId: str
    ) -> IoT1ClickDevicesServiceUnclaimDeviceResponse: ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ): ...

    def update_device_state(self, *,
        DeviceId: str,
        Enabled: bool = ...
    ) -> IoT1ClickDevicesServiceUpdateDeviceStateResponse: ...


class IoT1ClickDevicesServiceClaimDevicesByClaimCodeResponse(TypedDict, total=False):
    ClaimCode: str
    Total: int


class IoT1ClickDevicesServiceDescribeDeviceResponse(TypedDict, total=False):
    DeviceDescription: IoT1ClickDevicesServiceDeviceDescription


class IoT1ClickDevicesServiceDeviceDescription(TypedDict, total=False):
    Arn: str
    Attributes: Dict[str, str]
    DeviceId: str
    Enabled: bool
    RemainingLife: float
    Type: str
    Tags: Dict[str, str]


class IoT1ClickDevicesServiceFinalizeDeviceClaimResponse(TypedDict, total=False):
    State: str


class IoT1ClickDevicesServiceGetDeviceMethodsResponse(TypedDict, total=False):
    DeviceMethods: List[IoT1ClickDevicesServiceDeviceMethod]


class IoT1ClickDevicesServiceDeviceMethod(TypedDict, total=False):
    DeviceType: str
    MethodName: str


class IoT1ClickDevicesServiceInitiateDeviceClaimResponse(TypedDict, total=False):
    State: str


class IoT1ClickDevicesServiceInvokeDeviceMethodResponse(TypedDict, total=False):
    DeviceMethodResponse: str


class IoT1ClickDevicesServiceListDeviceEventsResponse(TypedDict, total=False):
    Events: List[IoT1ClickDevicesServiceDeviceEvent]
    NextToken: str


class IoT1ClickDevicesServiceDeviceEvent(TypedDict, total=False):
    Device: IoT1ClickDevicesServiceDevice
    StdEvent: str


class IoT1ClickDevicesServiceDevice(TypedDict, total=False):
    Attributes: IoT1ClickDevicesServiceAttributes
    DeviceId: str
    Type: str


class IoT1ClickDevicesServiceAttributes(TypedDict, total=False):
    pass


class IoT1ClickDevicesServiceListDevicesResponse(TypedDict, total=False):
    Devices: List[IoT1ClickDevicesServiceDeviceDescription]
    NextToken: str


class IoT1ClickDevicesServiceListTagsForResourceResponse(TypedDict, total=False):
    Tags: Dict[str, str]


class IoT1ClickDevicesServiceUnclaimDeviceResponse(TypedDict, total=False):
    State: str


class IoT1ClickDevicesServiceUpdateDeviceStateResponse(TypedDict, total=False):
    pass


class IoT1ClickProjects(BaseClient):
    def associate_device_with_placement(self, *,
        projectName: str,
        placementName: str,
        deviceId: str,
        deviceTemplateName: str
    ) -> IoT1ClickProjectsAssociateDeviceWithPlacementResponse: ...

    def create_placement(self, *,
        placementName: str,
        projectName: str,
        attributes: Dict[str, str] = ...
    ) -> IoT1ClickProjectsCreatePlacementResponse: ...

    def create_project(self, *,
        projectName: str,
        description: str = ...,
        placementTemplate: IoT1ClickProjectsPlacementTemplate = ...,
        tags: Dict[str, str] = ...
    ) -> IoT1ClickProjectsCreateProjectResponse: ...

    def delete_placement(self, *,
        placementName: str,
        projectName: str
    ) -> IoT1ClickProjectsDeletePlacementResponse: ...

    def delete_project(self, *,
        projectName: str
    ) -> IoT1ClickProjectsDeleteProjectResponse: ...

    def describe_placement(self, *,
        placementName: str,
        projectName: str
    ) -> IoT1ClickProjectsDescribePlacementResponse: ...

    def describe_project(self, *,
        projectName: str
    ) -> IoT1ClickProjectsDescribeProjectResponse: ...

    def disassociate_device_from_placement(self, *,
        projectName: str,
        placementName: str,
        deviceTemplateName: str
    ) -> IoT1ClickProjectsDisassociateDeviceFromPlacementResponse: ...

    def get_devices_in_placement(self, *,
        projectName: str,
        placementName: str
    ) -> IoT1ClickProjectsGetDevicesInPlacementResponse: ...

    def list_placements(self, *,
        projectName: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoT1ClickProjectsListPlacementsResponse: ...

    def list_projects(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoT1ClickProjectsListProjectsResponse: ...

    def list_tags_for_resource(self, *,
        resourceArn: str
    ) -> IoT1ClickProjectsListTagsForResourceResponse: ...

    def tag_resource(self, *,
        resourceArn: str,
        tags: Dict[str, str]
    ) -> IoT1ClickProjectsTagResourceResponse: ...

    def untag_resource(self, *,
        resourceArn: str,
        tagKeys: List[str]
    ) -> IoT1ClickProjectsUntagResourceResponse: ...

    def update_placement(self, *,
        placementName: str,
        projectName: str,
        attributes: Dict[str, str] = ...
    ) -> IoT1ClickProjectsUpdatePlacementResponse: ...

    def update_project(self, *,
        projectName: str,
        description: str = ...,
        placementTemplate: IoT1ClickProjectsPlacementTemplate = ...
    ) -> IoT1ClickProjectsUpdateProjectResponse: ...


class IoT1ClickProjectsAssociateDeviceWithPlacementResponse(TypedDict, total=False):
    pass


class IoT1ClickProjectsCreatePlacementResponse(TypedDict, total=False):
    pass


class IoT1ClickProjectsPlacementTemplate(TypedDict, total=False):
    defaultAttributes: Dict[str, str]
    deviceTemplates: Dict[str, IoT1ClickProjectsDeviceTemplate]


class IoT1ClickProjectsDeviceTemplate(TypedDict, total=False):
    deviceType: str
    callbackOverrides: Dict[str, str]


class IoT1ClickProjectsCreateProjectResponse(TypedDict, total=False):
    pass


class IoT1ClickProjectsDeletePlacementResponse(TypedDict, total=False):
    pass


class IoT1ClickProjectsDeleteProjectResponse(TypedDict, total=False):
    pass


class IoT1ClickProjectsDescribePlacementResponse(TypedDict):
    placement: IoT1ClickProjectsPlacementDescription


class IoT1ClickProjectsPlacementDescription(TypedDict):
    projectName: str
    placementName: str
    attributes: Dict[str, str]
    createdDate: datetime.datetime
    updatedDate: datetime.datetime


class IoT1ClickProjectsDescribeProjectResponse(TypedDict):
    project: IoT1ClickProjectsProjectDescription


class _IoT1ClickProjectsProjectDescription(TypedDict):
    projectName: str
    createdDate: datetime.datetime
    updatedDate: datetime.datetime


class IoT1ClickProjectsProjectDescription(_IoT1ClickProjectsProjectDescription, total=False):
    arn: str
    description: str
    placementTemplate: IoT1ClickProjectsPlacementTemplate
    tags: Dict[str, str]


class IoT1ClickProjectsDisassociateDeviceFromPlacementResponse(TypedDict, total=False):
    pass


class IoT1ClickProjectsGetDevicesInPlacementResponse(TypedDict):
    devices: Dict[str, str]


class _IoT1ClickProjectsListPlacementsResponse(TypedDict):
    placements: List[IoT1ClickProjectsPlacementSummary]


class IoT1ClickProjectsListPlacementsResponse(_IoT1ClickProjectsListPlacementsResponse, total=False):
    nextToken: str


class IoT1ClickProjectsPlacementSummary(TypedDict):
    projectName: str
    placementName: str
    createdDate: datetime.datetime
    updatedDate: datetime.datetime


class _IoT1ClickProjectsListProjectsResponse(TypedDict):
    projects: List[IoT1ClickProjectsProjectSummary]


class IoT1ClickProjectsListProjectsResponse(_IoT1ClickProjectsListProjectsResponse, total=False):
    nextToken: str


class _IoT1ClickProjectsProjectSummary(TypedDict):
    projectName: str
    createdDate: datetime.datetime
    updatedDate: datetime.datetime


class IoT1ClickProjectsProjectSummary(_IoT1ClickProjectsProjectSummary, total=False):
    arn: str
    tags: Dict[str, str]


class IoT1ClickProjectsListTagsForResourceResponse(TypedDict, total=False):
    tags: Dict[str, str]


class IoT1ClickProjectsTagResourceResponse(TypedDict, total=False):
    pass


class IoT1ClickProjectsUntagResourceResponse(TypedDict, total=False):
    pass


class IoT1ClickProjectsUpdatePlacementResponse(TypedDict, total=False):
    pass


class IoT1ClickProjectsUpdateProjectResponse(TypedDict, total=False):
    pass


class IoTAnalytics(BaseClient):
    def batch_put_message(self, *,
        channelName: str,
        messages: List[IoTAnalyticsMessage]
    ) -> IoTAnalyticsBatchPutMessageResponse: ...

    def cancel_pipeline_reprocessing(self, *,
        pipelineName: str,
        reprocessingId: str
    ) -> IoTAnalyticsCancelPipelineReprocessingResponse: ...

    def create_channel(self, *,
        channelName: str,
        retentionPeriod: IoTAnalyticsRetentionPeriod = ...,
        tags: List[IoTAnalyticsTag] = ...
    ) -> IoTAnalyticsCreateChannelResponse: ...

    def create_dataset(self, *,
        datasetName: str,
        actions: List[IoTAnalyticsDatasetAction],
        triggers: List[IoTAnalyticsDatasetTrigger] = ...,
        contentDeliveryRules: List[IoTAnalyticsDatasetContentDeliveryRule] = ...,
        retentionPeriod: IoTAnalyticsRetentionPeriod = ...,
        versioningConfiguration: IoTAnalyticsVersioningConfiguration = ...,
        tags: List[IoTAnalyticsTag] = ...
    ) -> IoTAnalyticsCreateDatasetResponse: ...

    def create_dataset_content(self, *,
        datasetName: str
    ) -> IoTAnalyticsCreateDatasetContentResponse: ...

    def create_datastore(self, *,
        datastoreName: str,
        retentionPeriod: IoTAnalyticsRetentionPeriod = ...,
        tags: List[IoTAnalyticsTag] = ...
    ) -> IoTAnalyticsCreateDatastoreResponse: ...

    def create_pipeline(self, *,
        pipelineName: str,
        pipelineActivities: List[IoTAnalyticsPipelineActivity],
        tags: List[IoTAnalyticsTag] = ...
    ) -> IoTAnalyticsCreatePipelineResponse: ...

    def delete_channel(self, *,
        channelName: str
    ): ...

    def delete_dataset(self, *,
        datasetName: str
    ): ...

    def delete_dataset_content(self, *,
        datasetName: str,
        versionId: str = ...
    ): ...

    def delete_datastore(self, *,
        datastoreName: str
    ): ...

    def delete_pipeline(self, *,
        pipelineName: str
    ): ...

    def describe_channel(self, *,
        channelName: str,
        includeStatistics: bool = ...
    ) -> IoTAnalyticsDescribeChannelResponse: ...

    def describe_dataset(self, *,
        datasetName: str
    ) -> IoTAnalyticsDescribeDatasetResponse: ...

    def describe_datastore(self, *,
        datastoreName: str,
        includeStatistics: bool = ...
    ) -> IoTAnalyticsDescribeDatastoreResponse: ...

    def describe_logging_options(self) -> IoTAnalyticsDescribeLoggingOptionsResponse: ...

    def describe_pipeline(self, *,
        pipelineName: str
    ) -> IoTAnalyticsDescribePipelineResponse: ...

    def get_dataset_content(self, *,
        datasetName: str,
        versionId: str = ...
    ) -> IoTAnalyticsGetDatasetContentResponse: ...

    def list_channels(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTAnalyticsListChannelsResponse: ...

    def list_dataset_contents(self, *,
        datasetName: str,
        nextToken: str = ...,
        maxResults: int = ...,
        scheduledOnOrAfter: datetime.datetime = ...,
        scheduledBefore: datetime.datetime = ...
    ) -> IoTAnalyticsListDatasetContentsResponse: ...

    def list_datasets(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTAnalyticsListDatasetsResponse: ...

    def list_datastores(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTAnalyticsListDatastoresResponse: ...

    def list_pipelines(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> IoTAnalyticsListPipelinesResponse: ...

    def list_tags_for_resource(self, *,
        resourceArn: str
    ) -> IoTAnalyticsListTagsForResourceResponse: ...

    def put_logging_options(self, *,
        loggingOptions: IoTAnalyticsLoggingOptions
    ): ...

    def run_pipeline_activity(self, *,
        pipelineActivity: IoTAnalyticsPipelineActivity,
        payloads: List[bytes]
    ) -> IoTAnalyticsRunPipelineActivityResponse: ...

    def sample_channel_data(self, *,
        channelName: str,
        maxMessages: int = ...,
        startTime: datetime.datetime = ...,
        endTime: datetime.datetime = ...
    ) -> IoTAnalyticsSampleChannelDataResponse: ...

    def start_pipeline_reprocessing(self, *,
        pipelineName: str,
        startTime: datetime.datetime = ...,
        endTime: datetime.datetime = ...
    ) -> IoTAnalyticsStartPipelineReprocessingResponse: ...

    def tag_resource(self, *,
        resourceArn: str,
        tags: List[IoTAnalyticsTag]
    ) -> IoTAnalyticsTagResourceResponse: ...

    def untag_resource(self, *,
        resourceArn: str,
        tagKeys: List[str]
    ) -> IoTAnalyticsUntagResourceResponse: ...

    def update_channel(self, *,
        channelName: str,
        retentionPeriod: IoTAnalyticsRetentionPeriod = ...
    ): ...

    def update_dataset(self, *,
        datasetName: str,
        actions: List[IoTAnalyticsDatasetAction],
        triggers: List[IoTAnalyticsDatasetTrigger] = ...,
        contentDeliveryRules: List[IoTAnalyticsDatasetContentDeliveryRule] = ...,
        retentionPeriod: IoTAnalyticsRetentionPeriod = ...,
        versioningConfiguration: IoTAnalyticsVersioningConfiguration = ...
    ): ...

    def update_datastore(self, *,
        datastoreName: str,
        retentionPeriod: IoTAnalyticsRetentionPeriod = ...
    ): ...

    def update_pipeline(self, *,
        pipelineName: str,
        pipelineActivities: List[IoTAnalyticsPipelineActivity]
    ): ...


class IoTAnalyticsMessage(TypedDict):
    messageId: str
    payload: bytes


class IoTAnalyticsBatchPutMessageResponse(TypedDict, total=False):
    batchPutMessageErrorEntries: List[IoTAnalyticsBatchPutMessageErrorEntry]


class IoTAnalyticsBatchPutMessageErrorEntry(TypedDict, total=False):
    messageId: str
    errorCode: str
    errorMessage: str


class IoTAnalyticsCancelPipelineReprocessingResponse(TypedDict, total=False):
    pass


class IoTAnalyticsRetentionPeriod(TypedDict, total=False):
    unlimited: bool
    numberOfDays: int


class IoTAnalyticsTag(TypedDict):
    key: str
    value: str


class IoTAnalyticsCreateChannelResponse(TypedDict, total=False):
    channelName: str
    channelArn: str
    retentionPeriod: IoTAnalyticsRetentionPeriod


class IoTAnalyticsDatasetAction(TypedDict, total=False):
    actionName: str
    queryAction: IoTAnalyticsSqlQueryDatasetAction
    containerAction: IoTAnalyticsContainerDatasetAction


class _IoTAnalyticsSqlQueryDatasetAction(TypedDict):
    sqlQuery: str


class IoTAnalyticsSqlQueryDatasetAction(_IoTAnalyticsSqlQueryDatasetAction, total=False):
    filters: List[IoTAnalyticsQueryFilter]


class IoTAnalyticsQueryFilter(TypedDict, total=False):
    deltaTime: IoTAnalyticsDeltaTime


class IoTAnalyticsDeltaTime(TypedDict):
    offsetSeconds: int
    timeExpression: str


class _IoTAnalyticsContainerDatasetAction(TypedDict):
    image: str
    executionRoleArn: str
    resourceConfiguration: IoTAnalyticsResourceConfiguration


class IoTAnalyticsContainerDatasetAction(_IoTAnalyticsContainerDatasetAction, total=False):
    variables: List[IoTAnalyticsVariable]


class IoTAnalyticsResourceConfiguration(TypedDict):
    computeType: str
    volumeSizeInGB: int


class _IoTAnalyticsVariable(TypedDict):
    name: str


class IoTAnalyticsVariable(_IoTAnalyticsVariable, total=False):
    stringValue: str
    doubleValue: float
    datasetContentVersionValue: IoTAnalyticsDatasetContentVersionValue
    outputFileUriValue: IoTAnalyticsOutputFileUriValue


class IoTAnalyticsDatasetContentVersionValue(TypedDict):
    datasetName: str


class IoTAnalyticsOutputFileUriValue(TypedDict):
    fileName: str


class IoTAnalyticsDatasetTrigger(TypedDict, total=False):
    schedule: IoTAnalyticsSchedule
    dataset: IoTAnalyticsTriggeringDataset


class IoTAnalyticsSchedule(TypedDict, total=False):
    expression: str


class IoTAnalyticsTriggeringDataset(TypedDict):
    name: str


class _IoTAnalyticsDatasetContentDeliveryRule(TypedDict):
    destination: IoTAnalyticsDatasetContentDeliveryDestination


class IoTAnalyticsDatasetContentDeliveryRule(_IoTAnalyticsDatasetContentDeliveryRule, total=False):
    entryName: str


class IoTAnalyticsDatasetContentDeliveryDestination(TypedDict, total=False):
    iotEventsDestinationConfiguration: IoTAnalyticsIotEventsDestinationConfiguration
    s3DestinationConfiguration: IoTAnalyticsS3DestinationConfiguration


class IoTAnalyticsIotEventsDestinationConfiguration(TypedDict):
    inputName: str
    roleArn: str


class _IoTAnalyticsS3DestinationConfiguration(TypedDict):
    bucket: str
    key: str
    roleArn: str


class IoTAnalyticsS3DestinationConfiguration(_IoTAnalyticsS3DestinationConfiguration, total=False):
    glueConfiguration: IoTAnalyticsGlueConfiguration


class IoTAnalyticsGlueConfiguration(TypedDict):
    tableName: str
    databaseName: str


class IoTAnalyticsVersioningConfiguration(TypedDict, total=False):
    unlimited: bool
    maxVersions: int


class IoTAnalyticsCreateDatasetResponse(TypedDict, total=False):
    datasetName: str
    datasetArn: str
    retentionPeriod: IoTAnalyticsRetentionPeriod


class IoTAnalyticsCreateDatasetContentResponse(TypedDict, total=False):
    versionId: str


class IoTAnalyticsCreateDatastoreResponse(TypedDict, total=False):
    datastoreName: str
    datastoreArn: str
    retentionPeriod: IoTAnalyticsRetentionPeriod


class IoTAnalyticsPipelineActivity(TypedDict, total=False):
    channel: IoTAnalyticsChannelActivity
    lambda: IoTAnalyticsLambdaActivity
    datastore: IoTAnalyticsDatastoreActivity
    addAttributes: IoTAnalyticsAddAttributesActivity
    removeAttributes: IoTAnalyticsRemoveAttributesActivity
    selectAttributes: IoTAnalyticsSelectAttributesActivity
    filter: IoTAnalyticsFilterActivity
    math: IoTAnalyticsMathActivity
    deviceRegistryEnrich: IoTAnalyticsDeviceRegistryEnrichActivity
    deviceShadowEnrich: IoTAnalyticsDeviceShadowEnrichActivity


class _IoTAnalyticsChannelActivity(TypedDict):
    name: str
    channelName: str


class IoTAnalyticsChannelActivity(_IoTAnalyticsChannelActivity, total=False):
    next: str


class _IoTAnalyticsLambdaActivity(TypedDict):
    name: str
    lambdaName: str
    batchSize: int


class IoTAnalyticsLambdaActivity(_IoTAnalyticsLambdaActivity, total=False):
    next: str


class IoTAnalyticsDatastoreActivity(TypedDict):
    name: str
    datastoreName: str


class _IoTAnalyticsAddAttributesActivity(TypedDict):
    name: str
    attributes: Dict[str, str]


class IoTAnalyticsAddAttributesActivity(_IoTAnalyticsAddAttributesActivity, total=False):
    next: str


class _IoTAnalyticsRemoveAttributesActivity(TypedDict):
    name: str
    attributes: List[str]


class IoTAnalyticsRemoveAttributesActivity(_IoTAnalyticsRemoveAttributesActivity, total=False):
    next: str


class _IoTAnalyticsSelectAttributesActivity(TypedDict):
    name: str
    attributes: List[str]


class IoTAnalyticsSelectAttributesActivity(_IoTAnalyticsSelectAttributesActivity, total=False):
    next: str


class _IoTAnalyticsFilterActivity(TypedDict):
    name: str
    filter: str


class IoTAnalyticsFilterActivity(_IoTAnalyticsFilterActivity, total=False):
    next: str


class _IoTAnalyticsMathActivity(TypedDict):
    name: str
    attribute: str
    math: str


class IoTAnalyticsMathActivity(_IoTAnalyticsMathActivity, total=False):
    next: str


class _IoTAnalyticsDeviceRegistryEnrichActivity(TypedDict):
    name: str
    attribute: str
    thingName: str
    roleArn: str


class IoTAnalyticsDeviceRegistryEnrichActivity(_IoTAnalyticsDeviceRegistryEnrichActivity, total=False):
    next: str


class _IoTAnalyticsDeviceShadowEnrichActivity(TypedDict):
    name: str
    attribute: str
    thingName: str
    roleArn: str


class IoTAnalyticsDeviceShadowEnrichActivity(_IoTAnalyticsDeviceShadowEnrichActivity, total=False):
    next: str


class IoTAnalyticsCreatePipelineResponse(TypedDict, total=False):
    pipelineName: str
    pipelineArn: str


class IoTAnalyticsDescribeChannelResponse(TypedDict, total=False):
    channel: IoTAnalyticsChannel
    statistics: IoTAnalyticsChannelStatistics


class IoTAnalyticsChannel(TypedDict, total=False):
    name: str
    arn: str
    status: str
    retentionPeriod: IoTAnalyticsRetentionPeriod
    creationTime: datetime.datetime
    lastUpdateTime: datetime.datetime


class IoTAnalyticsChannelStatistics(TypedDict, total=False):
    size: IoTAnalyticsEstimatedResourceSize


class IoTAnalyticsEstimatedResourceSize(TypedDict, total=False):
    estimatedSizeInBytes: float
    estimatedOn: datetime.datetime


class IoTAnalyticsDescribeDatasetResponse(TypedDict, total=False):
    dataset: IoTAnalyticsDataset


class IoTAnalyticsDataset(TypedDict, total=False):
    name: str
    arn: str
    actions: List[IoTAnalyticsDatasetAction]
    triggers: List[IoTAnalyticsDatasetTrigger]
    contentDeliveryRules: List[IoTAnalyticsDatasetContentDeliveryRule]
    status: str
    creationTime: datetime.datetime
    lastUpdateTime: datetime.datetime
    retentionPeriod: IoTAnalyticsRetentionPeriod
    versioningConfiguration: IoTAnalyticsVersioningConfiguration


class IoTAnalyticsDescribeDatastoreResponse(TypedDict, total=False):
    datastore: IoTAnalyticsDatastore
    statistics: IoTAnalyticsDatastoreStatistics


class IoTAnalyticsDatastore(TypedDict, total=False):
    name: str
    arn: str
    status: str
    retentionPeriod: IoTAnalyticsRetentionPeriod
    creationTime: datetime.datetime
    lastUpdateTime: datetime.datetime


class IoTAnalyticsDatastoreStatistics(TypedDict, total=False):
    size: IoTAnalyticsEstimatedResourceSize


class IoTAnalyticsDescribeLoggingOptionsResponse(TypedDict, total=False):
    loggingOptions: IoTAnalyticsLoggingOptions


class IoTAnalyticsLoggingOptions(TypedDict):
    roleArn: str
    level: str
    enabled: bool


class IoTAnalyticsDescribePipelineResponse(TypedDict, total=False):
    pipeline: IoTAnalyticsPipeline


class IoTAnalyticsPipeline(TypedDict, total=False):
    name: str
    arn: str
    activities: List[IoTAnalyticsPipelineActivity]
    reprocessingSummaries: List[IoTAnalyticsReprocessingSummary]
    creationTime: datetime.datetime
    lastUpdateTime: datetime.datetime


class IoTAnalyticsReprocessingSummary(TypedDict, total=False):
    id: str
    status: str
    creationTime: datetime.datetime


class IoTAnalyticsGetDatasetContentResponse(TypedDict, total=False):
    entries: List[IoTAnalyticsDatasetEntry]
    timestamp: datetime.datetime
    status: IoTAnalyticsDatasetContentStatus


class IoTAnalyticsDatasetEntry(TypedDict, total=False):
    entryName: str
    dataURI: str


class IoTAnalyticsDatasetContentStatus(TypedDict, total=False):
    state: str
    reason: str


class IoTAnalyticsListChannelsResponse(TypedDict, total=False):
    channelSummaries: List[IoTAnalyticsChannelSummary]
    nextToken: str


class IoTAnalyticsChannelSummary(TypedDict, total=False):
    channelName: str
    status: str
    creationTime: datetime.datetime
    lastUpdateTime: datetime.datetime


class IoTAnalyticsListDatasetContentsResponse(TypedDict, total=False):
    datasetContentSummaries: List[IoTAnalyticsDatasetContentSummary]
    nextToken: str


class IoTAnalyticsDatasetContentSummary(TypedDict, total=False):
    version: str
    status: IoTAnalyticsDatasetContentStatus
    creationTime: datetime.datetime
    scheduleTime: datetime.datetime


class IoTAnalyticsListDatasetsResponse(TypedDict, total=False):
    datasetSummaries: List[IoTAnalyticsDatasetSummary]
    nextToken: str


class IoTAnalyticsDatasetSummary(TypedDict, total=False):
    datasetName: str
    status: str
    creationTime: datetime.datetime
    lastUpdateTime: datetime.datetime
    triggers: List[IoTAnalyticsDatasetTrigger]
    actions: List[IoTAnalyticsDatasetActionSummary]


class IoTAnalyticsDatasetActionSummary(TypedDict, total=False):
    actionName: str
    actionType: str


class IoTAnalyticsListDatastoresResponse(TypedDict, total=False):
    datastoreSummaries: List[IoTAnalyticsDatastoreSummary]
    nextToken: str


class IoTAnalyticsDatastoreSummary(TypedDict, total=False):
    datastoreName: str
    status: str
    creationTime: datetime.datetime
    lastUpdateTime: datetime.datetime


class IoTAnalyticsListPipelinesResponse(TypedDict, total=False):
    pipelineSummaries: List[IoTAnalyticsPipelineSummary]
    nextToken: str


class IoTAnalyticsPipelineSummary(TypedDict, total=False):
    pipelineName: str
    reprocessingSummaries: List[IoTAnalyticsReprocessingSummary]
    creationTime: datetime.datetime
    lastUpdateTime: datetime.datetime


class IoTAnalyticsListTagsForResourceResponse(TypedDict, total=False):
    tags: List[IoTAnalyticsTag]


class IoTAnalyticsRunPipelineActivityResponse(TypedDict, total=False):
    payloads: List[bytes]
    logResult: str


class IoTAnalyticsSampleChannelDataResponse(TypedDict, total=False):
    payloads: List[bytes]


class IoTAnalyticsStartPipelineReprocessingResponse(TypedDict, total=False):
    reprocessingId: str


class IoTAnalyticsTagResourceResponse(TypedDict, total=False):
    pass


class IoTAnalyticsUntagResourceResponse(TypedDict, total=False):
    pass


class Kafka(BaseClient):
    def create_cluster(self, *,
        BrokerNodeGroupInfo: KafkaBrokerNodeGroupInfo,
        ClusterName: str,
        KafkaVersion: str,
        NumberOfBrokerNodes: int,
        EncryptionInfo: KafkaEncryptionInfo = ...,
        EnhancedMonitoring: str = ...
    ) -> KafkaCreateClusterResponse: ...

    def delete_cluster(self, *,
        ClusterArn: str,
        CurrentVersion: str = ...
    ) -> KafkaDeleteClusterResponse: ...

    def describe_cluster(self, *,
        ClusterArn: str
    ) -> KafkaDescribeClusterResponse: ...

    def get_bootstrap_brokers(self, *,
        ClusterArn: str
    ) -> KafkaGetBootstrapBrokersResponse: ...

    def list_clusters(self, *,
        ClusterNameFilter: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> KafkaListClustersResponse: ...

    def list_nodes(self, *,
        ClusterArn: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> KafkaListNodesResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> KafkaListTagsForResourceResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: Dict[str, str]
    ): ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ): ...


class _KafkaBrokerNodeGroupInfo(TypedDict):
    ClientSubnets: List[str]
    InstanceType: str


class KafkaBrokerNodeGroupInfo(_KafkaBrokerNodeGroupInfo, total=False):
    BrokerAZDistribution: str
    SecurityGroups: List[str]
    StorageInfo: KafkaStorageInfo


class KafkaStorageInfo(TypedDict, total=False):
    EbsStorageInfo: KafkaEBSStorageInfo


class KafkaEBSStorageInfo(TypedDict, total=False):
    VolumeSize: int


class KafkaEncryptionInfo(TypedDict, total=False):
    EncryptionAtRest: KafkaEncryptionAtRest


class KafkaEncryptionAtRest(TypedDict):
    DataVolumeKMSKeyId: str


class KafkaCreateClusterResponse(TypedDict, total=False):
    ClusterArn: str
    ClusterName: str
    State: str


class KafkaDeleteClusterResponse(TypedDict, total=False):
    ClusterArn: str
    State: str


class KafkaDescribeClusterResponse(TypedDict, total=False):
    ClusterInfo: KafkaClusterInfo


class KafkaClusterInfo(TypedDict, total=False):
    BrokerNodeGroupInfo: KafkaBrokerNodeGroupInfo
    ClusterArn: str
    ClusterName: str
    CreationTime: datetime.datetime
    CurrentBrokerSoftwareInfo: KafkaBrokerSoftwareInfo
    CurrentVersion: str
    EncryptionInfo: KafkaEncryptionInfo
    EnhancedMonitoring: str
    NumberOfBrokerNodes: int
    State: str
    ZookeeperConnectString: str


class KafkaBrokerSoftwareInfo(TypedDict, total=False):
    ConfigurationArn: str
    ConfigurationRevision: str
    KafkaVersion: str


class KafkaGetBootstrapBrokersResponse(TypedDict, total=False):
    BootstrapBrokerString: str


class KafkaListClustersResponse(TypedDict, total=False):
    ClusterInfoList: List[KafkaClusterInfo]
    NextToken: str


class KafkaListNodesResponse(TypedDict, total=False):
    NextToken: str
    NodeInfoList: List[KafkaNodeInfo]


class KafkaNodeInfo(TypedDict, total=False):
    AddedToClusterTime: str
    BrokerNodeInfo: KafkaBrokerNodeInfo
    InstanceType: str
    NodeARN: str
    NodeType: str
    ZookeeperNodeInfo: KafkaZookeeperNodeInfo


class KafkaBrokerNodeInfo(TypedDict, total=False):
    AttachedENIId: str
    BrokerId: float
    ClientSubnet: str
    ClientVpcIpAddress: str
    CurrentBrokerSoftwareInfo: KafkaBrokerSoftwareInfo


class KafkaZookeeperNodeInfo(TypedDict, total=False):
    AttachedENIId: str
    ClientVpcIpAddress: str
    ZookeeperId: float
    ZookeeperVersion: str


class KafkaListTagsForResourceResponse(TypedDict, total=False):
    Tags: Dict[str, str]


class Kinesis(BaseClient):
    def add_tags_to_stream(self, *,
        StreamName: str,
        Tags: Dict[str, str]
    ): ...

    def create_stream(self, *,
        StreamName: str,
        ShardCount: int
    ): ...

    def decrease_stream_retention_period(self, *,
        StreamName: str,
        RetentionPeriodHours: int
    ): ...

    def delete_stream(self, *,
        StreamName: str,
        EnforceConsumerDeletion: bool = ...
    ): ...

    def deregister_stream_consumer(self, *,
        StreamARN: str = ...,
        ConsumerName: str = ...,
        ConsumerARN: str = ...
    ): ...

    def describe_limits(self) -> KinesisDescribeLimitsOutput: ...

    def describe_stream(self, *,
        StreamName: str,
        Limit: int = ...,
        ExclusiveStartShardId: str = ...
    ) -> KinesisDescribeStreamOutput: ...

    def describe_stream_consumer(self, *,
        StreamARN: str = ...,
        ConsumerName: str = ...,
        ConsumerARN: str = ...
    ) -> KinesisDescribeStreamConsumerOutput: ...

    def describe_stream_summary(self, *,
        StreamName: str
    ) -> KinesisDescribeStreamSummaryOutput: ...

    def disable_enhanced_monitoring(self, *,
        StreamName: str,
        ShardLevelMetrics: List[str]
    ) -> KinesisEnhancedMonitoringOutput: ...

    def enable_enhanced_monitoring(self, *,
        StreamName: str,
        ShardLevelMetrics: List[str]
    ) -> KinesisEnhancedMonitoringOutput: ...

    def get_records(self, *,
        ShardIterator: str,
        Limit: int = ...
    ) -> KinesisGetRecordsOutput: ...

    def get_shard_iterator(self, *,
        StreamName: str,
        ShardId: str,
        ShardIteratorType: str,
        StartingSequenceNumber: str = ...,
        Timestamp: datetime.datetime = ...
    ) -> KinesisGetShardIteratorOutput: ...

    def increase_stream_retention_period(self, *,
        StreamName: str,
        RetentionPeriodHours: int
    ): ...

    def list_shards(self, *,
        StreamName: str = ...,
        NextToken: str = ...,
        ExclusiveStartShardId: str = ...,
        MaxResults: int = ...,
        StreamCreationTimestamp: datetime.datetime = ...
    ) -> KinesisListShardsOutput: ...

    def list_stream_consumers(self, *,
        StreamARN: str,
        NextToken: str = ...,
        MaxResults: int = ...,
        StreamCreationTimestamp: datetime.datetime = ...
    ) -> KinesisListStreamConsumersOutput: ...

    def list_streams(self, *,
        Limit: int = ...,
        ExclusiveStartStreamName: str = ...
    ) -> KinesisListStreamsOutput: ...

    def list_tags_for_stream(self, *,
        StreamName: str,
        ExclusiveStartTagKey: str = ...,
        Limit: int = ...
    ) -> KinesisListTagsForStreamOutput: ...

    def merge_shards(self, *,
        StreamName: str,
        ShardToMerge: str,
        AdjacentShardToMerge: str
    ): ...

    def put_record(self, *,
        StreamName: str,
        Data: bytes,
        PartitionKey: str,
        ExplicitHashKey: str = ...,
        SequenceNumberForOrdering: str = ...
    ) -> KinesisPutRecordOutput: ...

    def put_records(self, *,
        Records: List[KinesisPutRecordsRequestEntry],
        StreamName: str
    ) -> KinesisPutRecordsOutput: ...

    def register_stream_consumer(self, *,
        StreamARN: str,
        ConsumerName: str
    ) -> KinesisRegisterStreamConsumerOutput: ...

    def remove_tags_from_stream(self, *,
        StreamName: str,
        TagKeys: List[str]
    ): ...

    def split_shard(self, *,
        StreamName: str,
        ShardToSplit: str,
        NewStartingHashKey: str
    ): ...

    def start_stream_encryption(self, *,
        StreamName: str,
        EncryptionType: str,
        KeyId: str
    ): ...

    def stop_stream_encryption(self, *,
        StreamName: str,
        EncryptionType: str,
        KeyId: str
    ): ...

    def subscribe_to_shard(self, *,
        ConsumerARN: str,
        ShardId: str,
        StartingPosition: KinesisStartingPosition
    ) -> KinesisSubscribeToShardOutput: ...

    def update_shard_count(self, *,
        StreamName: str,
        TargetShardCount: int,
        ScalingType: str
    ) -> KinesisUpdateShardCountOutput: ...


class KinesisDescribeLimitsOutput(TypedDict):
    ShardLimit: int
    OpenShardCount: int


class KinesisDescribeStreamOutput(TypedDict):
    StreamDescription: KinesisStreamDescription


class _KinesisStreamDescription(TypedDict):
    StreamName: str
    StreamARN: str
    StreamStatus: str
    Shards: List[KinesisShard]
    HasMoreShards: bool
    RetentionPeriodHours: int
    StreamCreationTimestamp: datetime.datetime
    EnhancedMonitoring: List[KinesisEnhancedMetrics]


class KinesisStreamDescription(_KinesisStreamDescription, total=False):
    EncryptionType: str
    KeyId: str


class _KinesisShard(TypedDict):
    ShardId: str
    HashKeyRange: KinesisHashKeyRange
    SequenceNumberRange: KinesisSequenceNumberRange


class KinesisShard(_KinesisShard, total=False):
    ParentShardId: str
    AdjacentParentShardId: str


class KinesisHashKeyRange(TypedDict):
    StartingHashKey: str
    EndingHashKey: str


class _KinesisSequenceNumberRange(TypedDict):
    StartingSequenceNumber: str


class KinesisSequenceNumberRange(_KinesisSequenceNumberRange, total=False):
    EndingSequenceNumber: str


class KinesisEnhancedMetrics(TypedDict, total=False):
    ShardLevelMetrics: List[str]


class KinesisDescribeStreamConsumerOutput(TypedDict):
    ConsumerDescription: KinesisConsumerDescription


class KinesisConsumerDescription(TypedDict):
    ConsumerName: str
    ConsumerARN: str
    ConsumerStatus: str
    ConsumerCreationTimestamp: datetime.datetime
    StreamARN: str


class KinesisDescribeStreamSummaryOutput(TypedDict):
    StreamDescriptionSummary: KinesisStreamDescriptionSummary


class _KinesisStreamDescriptionSummary(TypedDict):
    StreamName: str
    StreamARN: str
    StreamStatus: str
    RetentionPeriodHours: int
    StreamCreationTimestamp: datetime.datetime
    EnhancedMonitoring: List[KinesisEnhancedMetrics]
    OpenShardCount: int


class KinesisStreamDescriptionSummary(_KinesisStreamDescriptionSummary, total=False):
    EncryptionType: str
    KeyId: str
    ConsumerCount: int


class KinesisEnhancedMonitoringOutput(TypedDict, total=False):
    StreamName: str
    CurrentShardLevelMetrics: List[str]
    DesiredShardLevelMetrics: List[str]


class _KinesisGetRecordsOutput(TypedDict):
    Records: List[KinesisRecord]


class KinesisGetRecordsOutput(_KinesisGetRecordsOutput, total=False):
    NextShardIterator: str
    MillisBehindLatest: int


class _KinesisRecord(TypedDict):
    SequenceNumber: str
    Data: bytes
    PartitionKey: str


class KinesisRecord(_KinesisRecord, total=False):
    ApproximateArrivalTimestamp: datetime.datetime
    EncryptionType: str


class KinesisGetShardIteratorOutput(TypedDict, total=False):
    ShardIterator: str


class KinesisListShardsOutput(TypedDict, total=False):
    Shards: List[KinesisShard]
    NextToken: str


class KinesisListStreamConsumersOutput(TypedDict, total=False):
    Consumers: List[KinesisConsumer]
    NextToken: str


class KinesisConsumer(TypedDict):
    ConsumerName: str
    ConsumerARN: str
    ConsumerStatus: str
    ConsumerCreationTimestamp: datetime.datetime


class KinesisListStreamsOutput(TypedDict):
    StreamNames: List[str]
    HasMoreStreams: bool


class KinesisListTagsForStreamOutput(TypedDict):
    Tags: List[KinesisTag]
    HasMoreTags: bool


class _KinesisTag(TypedDict):
    Key: str


class KinesisTag(_KinesisTag, total=False):
    Value: str


class _KinesisPutRecordOutput(TypedDict):
    ShardId: str
    SequenceNumber: str


class KinesisPutRecordOutput(_KinesisPutRecordOutput, total=False):
    EncryptionType: str


class _KinesisPutRecordsRequestEntry(TypedDict):
    Data: bytes
    PartitionKey: str


class KinesisPutRecordsRequestEntry(_KinesisPutRecordsRequestEntry, total=False):
    ExplicitHashKey: str


class _KinesisPutRecordsOutput(TypedDict):
    Records: List[KinesisPutRecordsResultEntry]


class KinesisPutRecordsOutput(_KinesisPutRecordsOutput, total=False):
    FailedRecordCount: int
    EncryptionType: str


class KinesisPutRecordsResultEntry(TypedDict, total=False):
    SequenceNumber: str
    ShardId: str
    ErrorCode: str
    ErrorMessage: str


class KinesisRegisterStreamConsumerOutput(TypedDict):
    Consumer: KinesisConsumer


class _KinesisStartingPosition(TypedDict):
    Type: str


class KinesisStartingPosition(_KinesisStartingPosition, total=False):
    SequenceNumber: str
    Timestamp: datetime.datetime


class KinesisSubscribeToShardOutput(TypedDict):
    EventStream: KinesisSubscribeToShardEventStream


class _KinesisSubscribeToShardEventStream(TypedDict):
    SubscribeToShardEvent: KinesisSubscribeToShardEvent


class KinesisSubscribeToShardEventStream(_KinesisSubscribeToShardEventStream, total=False):
    ResourceNotFoundException: KinesisResourceNotFoundException
    ResourceInUseException: KinesisResourceInUseException
    KMSDisabledException: KinesisKMSDisabledException
    KMSInvalidStateException: KinesisKMSInvalidStateException
    KMSAccessDeniedException: KinesisKMSAccessDeniedException
    KMSNotFoundException: KinesisKMSNotFoundException
    KMSOptInRequired: KinesisKMSOptInRequired
    KMSThrottlingException: KinesisKMSThrottlingException
    InternalFailureException: KinesisInternalFailureException


class KinesisSubscribeToShardEvent(TypedDict):
    Records: List[KinesisRecord]
    ContinuationSequenceNumber: str
    MillisBehindLatest: int


class KinesisResourceNotFoundException(TypedDict, total=False):
    message: str


class KinesisResourceInUseException(TypedDict, total=False):
    message: str


class KinesisKMSDisabledException(TypedDict, total=False):
    message: str


class KinesisKMSInvalidStateException(TypedDict, total=False):
    message: str


class KinesisKMSAccessDeniedException(TypedDict, total=False):
    message: str


class KinesisKMSNotFoundException(TypedDict, total=False):
    message: str


class KinesisKMSOptInRequired(TypedDict, total=False):
    message: str


class KinesisKMSThrottlingException(TypedDict, total=False):
    message: str


class KinesisInternalFailureException(TypedDict, total=False):
    message: str


class KinesisUpdateShardCountOutput(TypedDict, total=False):
    StreamName: str
    CurrentShardCount: int
    TargetShardCount: int


class KinesisVideoArchivedMedia(BaseClient):
    def get_hls_streaming_session_url(self, *,
        StreamName: str = ...,
        StreamARN: str = ...,
        PlaybackMode: str = ...,
        HLSFragmentSelector: KinesisVideoArchivedMediaHLSFragmentSelector = ...,
        ContainerFormat: str = ...,
        DiscontinuityMode: str = ...,
        DisplayFragmentTimestamp: str = ...,
        Expires: int = ...,
        MaxMediaPlaylistFragmentResults: int = ...
    ) -> KinesisVideoArchivedMediaGetHLSStreamingSessionURLOutput: ...

    def get_media_for_fragment_list(self, *,
        StreamName: str,
        Fragments: List[str]
    ) -> KinesisVideoArchivedMediaGetMediaForFragmentListOutput: ...

    def list_fragments(self, *,
        StreamName: str,
        MaxResults: int = ...,
        NextToken: str = ...,
        FragmentSelector: KinesisVideoArchivedMediaFragmentSelector = ...
    ) -> KinesisVideoArchivedMediaListFragmentsOutput: ...


class KinesisVideoArchivedMediaHLSFragmentSelector(TypedDict, total=False):
    FragmentSelectorType: str
    TimestampRange: KinesisVideoArchivedMediaHLSTimestampRange


class KinesisVideoArchivedMediaHLSTimestampRange(TypedDict, total=False):
    StartTimestamp: datetime.datetime
    EndTimestamp: datetime.datetime


class KinesisVideoArchivedMediaGetHLSStreamingSessionURLOutput(TypedDict, total=False):
    HLSStreamingSessionURL: str


class KinesisVideoArchivedMediaGetMediaForFragmentListOutput(TypedDict, total=False):
    ContentType: str
    Payload: bytes


class KinesisVideoArchivedMediaFragmentSelector(TypedDict):
    FragmentSelectorType: str
    TimestampRange: KinesisVideoArchivedMediaTimestampRange


class KinesisVideoArchivedMediaTimestampRange(TypedDict):
    StartTimestamp: datetime.datetime
    EndTimestamp: datetime.datetime


class KinesisVideoArchivedMediaListFragmentsOutput(TypedDict, total=False):
    Fragments: List[KinesisVideoArchivedMediaFragment]
    NextToken: str


class KinesisVideoArchivedMediaFragment(TypedDict, total=False):
    FragmentNumber: str
    FragmentSizeInBytes: int
    ProducerTimestamp: datetime.datetime
    ServerTimestamp: datetime.datetime
    FragmentLengthInMilliseconds: int


class KinesisVideoMedia(BaseClient):
    def get_media(self, *,
        StartSelector: KinesisVideoMediaStartSelector,
        StreamName: str = ...,
        StreamARN: str = ...
    ) -> KinesisVideoMediaGetMediaOutput: ...


class _KinesisVideoMediaStartSelector(TypedDict):
    StartSelectorType: str


class KinesisVideoMediaStartSelector(_KinesisVideoMediaStartSelector, total=False):
    AfterFragmentNumber: str
    StartTimestamp: datetime.datetime
    ContinuationToken: str


class KinesisVideoMediaGetMediaOutput(TypedDict, total=False):
    ContentType: str
    Payload: bytes


class KinesisAnalytics(BaseClient):
    def add_application_cloud_watch_logging_option(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        CloudWatchLoggingOption: KinesisAnalyticsCloudWatchLoggingOption
    ) -> KinesisAnalyticsAddApplicationCloudWatchLoggingOptionResponse: ...

    def add_application_input(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        Input: KinesisAnalyticsInput
    ) -> KinesisAnalyticsAddApplicationInputResponse: ...

    def add_application_input_processing_configuration(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        InputId: str,
        InputProcessingConfiguration: KinesisAnalyticsInputProcessingConfiguration
    ) -> KinesisAnalyticsAddApplicationInputProcessingConfigurationResponse: ...

    def add_application_output(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        Output: KinesisAnalyticsOutput
    ) -> KinesisAnalyticsAddApplicationOutputResponse: ...

    def add_application_reference_data_source(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        ReferenceDataSource: KinesisAnalyticsReferenceDataSource
    ) -> KinesisAnalyticsAddApplicationReferenceDataSourceResponse: ...

    def create_application(self, *,
        ApplicationName: str,
        ApplicationDescription: str = ...,
        Inputs: List[KinesisAnalyticsInput] = ...,
        Outputs: List[KinesisAnalyticsOutput] = ...,
        CloudWatchLoggingOptions: List[KinesisAnalyticsCloudWatchLoggingOption] = ...,
        ApplicationCode: str = ...,
        Tags: List[KinesisAnalyticsTag] = ...
    ) -> KinesisAnalyticsCreateApplicationResponse: ...

    def delete_application(self, *,
        ApplicationName: str,
        CreateTimestamp: datetime.datetime
    ) -> KinesisAnalyticsDeleteApplicationResponse: ...

    def delete_application_cloud_watch_logging_option(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        CloudWatchLoggingOptionId: str
    ) -> KinesisAnalyticsDeleteApplicationCloudWatchLoggingOptionResponse: ...

    def delete_application_input_processing_configuration(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        InputId: str
    ) -> KinesisAnalyticsDeleteApplicationInputProcessingConfigurationResponse: ...

    def delete_application_output(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        OutputId: str
    ) -> KinesisAnalyticsDeleteApplicationOutputResponse: ...

    def delete_application_reference_data_source(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        ReferenceId: str
    ) -> KinesisAnalyticsDeleteApplicationReferenceDataSourceResponse: ...

    def describe_application(self, *,
        ApplicationName: str
    ) -> KinesisAnalyticsDescribeApplicationResponse: ...

    def discover_input_schema(self, *,
        ResourceARN: str = ...,
        RoleARN: str = ...,
        InputStartingPositionConfiguration: KinesisAnalyticsInputStartingPositionConfiguration = ...,
        S3Configuration: KinesisAnalyticsS3Configuration = ...,
        InputProcessingConfiguration: KinesisAnalyticsInputProcessingConfiguration = ...
    ) -> KinesisAnalyticsDiscoverInputSchemaResponse: ...

    def list_applications(self, *,
        Limit: int = ...,
        ExclusiveStartApplicationName: str = ...
    ) -> KinesisAnalyticsListApplicationsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceARN: str
    ) -> KinesisAnalyticsListTagsForResourceResponse: ...

    def start_application(self, *,
        ApplicationName: str,
        InputConfigurations: List[KinesisAnalyticsInputConfiguration]
    ) -> KinesisAnalyticsStartApplicationResponse: ...

    def stop_application(self, *,
        ApplicationName: str
    ) -> KinesisAnalyticsStopApplicationResponse: ...

    def tag_resource(self, *,
        ResourceARN: str,
        Tags: List[KinesisAnalyticsTag]
    ) -> KinesisAnalyticsTagResourceResponse: ...

    def untag_resource(self, *,
        ResourceARN: str,
        TagKeys: List[str]
    ) -> KinesisAnalyticsUntagResourceResponse: ...

    def update_application(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        ApplicationUpdate: KinesisAnalyticsApplicationUpdate
    ) -> KinesisAnalyticsUpdateApplicationResponse: ...


class KinesisAnalyticsCloudWatchLoggingOption(TypedDict):
    LogStreamARN: str
    RoleARN: str


class KinesisAnalyticsAddApplicationCloudWatchLoggingOptionResponse(TypedDict, total=False):
    pass


class _KinesisAnalyticsInput(TypedDict):
    NamePrefix: str
    InputSchema: KinesisAnalyticsSourceSchema


class KinesisAnalyticsInput(_KinesisAnalyticsInput, total=False):
    InputProcessingConfiguration: KinesisAnalyticsInputProcessingConfiguration
    KinesisStreamsInput: KinesisAnalyticsKinesisStreamsInput
    KinesisFirehoseInput: KinesisAnalyticsKinesisFirehoseInput
    InputParallelism: KinesisAnalyticsInputParallelism


class KinesisAnalyticsInputProcessingConfiguration(TypedDict):
    InputLambdaProcessor: KinesisAnalyticsInputLambdaProcessor


class KinesisAnalyticsInputLambdaProcessor(TypedDict):
    ResourceARN: str
    RoleARN: str


class KinesisAnalyticsKinesisStreamsInput(TypedDict):
    ResourceARN: str
    RoleARN: str


class KinesisAnalyticsKinesisFirehoseInput(TypedDict):
    ResourceARN: str
    RoleARN: str


class KinesisAnalyticsInputParallelism(TypedDict, total=False):
    Count: int


class _KinesisAnalyticsSourceSchema(TypedDict):
    RecordFormat: KinesisAnalyticsRecordFormat
    RecordColumns: List[KinesisAnalyticsRecordColumn]


class KinesisAnalyticsSourceSchema(_KinesisAnalyticsSourceSchema, total=False):
    RecordEncoding: str


class _KinesisAnalyticsRecordFormat(TypedDict):
    RecordFormatType: str


class KinesisAnalyticsRecordFormat(_KinesisAnalyticsRecordFormat, total=False):
    MappingParameters: KinesisAnalyticsMappingParameters


class KinesisAnalyticsMappingParameters(TypedDict, total=False):
    JSONMappingParameters: KinesisAnalyticsJSONMappingParameters
    CSVMappingParameters: KinesisAnalyticsCSVMappingParameters


class KinesisAnalyticsJSONMappingParameters(TypedDict):
    RecordRowPath: str


class KinesisAnalyticsCSVMappingParameters(TypedDict):
    RecordRowDelimiter: str
    RecordColumnDelimiter: str


class _KinesisAnalyticsRecordColumn(TypedDict):
    Name: str
    SqlType: str


class KinesisAnalyticsRecordColumn(_KinesisAnalyticsRecordColumn, total=False):
    Mapping: str


class KinesisAnalyticsAddApplicationInputResponse(TypedDict, total=False):
    pass


class KinesisAnalyticsAddApplicationInputProcessingConfigurationResponse(TypedDict, total=False):
    pass


class _KinesisAnalyticsOutput(TypedDict):
    Name: str
    DestinationSchema: KinesisAnalyticsDestinationSchema


class KinesisAnalyticsOutput(_KinesisAnalyticsOutput, total=False):
    KinesisStreamsOutput: KinesisAnalyticsKinesisStreamsOutput
    KinesisFirehoseOutput: KinesisAnalyticsKinesisFirehoseOutput
    LambdaOutput: KinesisAnalyticsLambdaOutput


class KinesisAnalyticsKinesisStreamsOutput(TypedDict):
    ResourceARN: str
    RoleARN: str


class KinesisAnalyticsKinesisFirehoseOutput(TypedDict):
    ResourceARN: str
    RoleARN: str


class KinesisAnalyticsLambdaOutput(TypedDict):
    ResourceARN: str
    RoleARN: str


class KinesisAnalyticsDestinationSchema(TypedDict):
    RecordFormatType: str


class KinesisAnalyticsAddApplicationOutputResponse(TypedDict, total=False):
    pass


class _KinesisAnalyticsReferenceDataSource(TypedDict):
    TableName: str
    ReferenceSchema: KinesisAnalyticsSourceSchema


class KinesisAnalyticsReferenceDataSource(_KinesisAnalyticsReferenceDataSource, total=False):
    S3ReferenceDataSource: KinesisAnalyticsS3ReferenceDataSource


class KinesisAnalyticsS3ReferenceDataSource(TypedDict):
    BucketARN: str
    FileKey: str
    ReferenceRoleARN: str


class KinesisAnalyticsAddApplicationReferenceDataSourceResponse(TypedDict, total=False):
    pass


class _KinesisAnalyticsTag(TypedDict):
    Key: str


class KinesisAnalyticsTag(_KinesisAnalyticsTag, total=False):
    Value: str


class KinesisAnalyticsCreateApplicationResponse(TypedDict):
    ApplicationSummary: KinesisAnalyticsApplicationSummary


class KinesisAnalyticsApplicationSummary(TypedDict):
    ApplicationName: str
    ApplicationARN: str
    ApplicationStatus: str


class KinesisAnalyticsDeleteApplicationResponse(TypedDict, total=False):
    pass


class KinesisAnalyticsDeleteApplicationCloudWatchLoggingOptionResponse(TypedDict, total=False):
    pass


class KinesisAnalyticsDeleteApplicationInputProcessingConfigurationResponse(TypedDict, total=False):
    pass


class KinesisAnalyticsDeleteApplicationOutputResponse(TypedDict, total=False):
    pass


class KinesisAnalyticsDeleteApplicationReferenceDataSourceResponse(TypedDict, total=False):
    pass


class KinesisAnalyticsDescribeApplicationResponse(TypedDict):
    ApplicationDetail: KinesisAnalyticsApplicationDetail


class _KinesisAnalyticsApplicationDetail(TypedDict):
    ApplicationName: str
    ApplicationARN: str
    ApplicationStatus: str
    ApplicationVersionId: int


class KinesisAnalyticsApplicationDetail(_KinesisAnalyticsApplicationDetail, total=False):
    ApplicationDescription: str
    CreateTimestamp: datetime.datetime
    LastUpdateTimestamp: datetime.datetime
    InputDescriptions: List[KinesisAnalyticsInputDescription]
    OutputDescriptions: List[KinesisAnalyticsOutputDescription]
    ReferenceDataSourceDescriptions: List[KinesisAnalyticsReferenceDataSourceDescription]
    CloudWatchLoggingOptionDescriptions: List[KinesisAnalyticsCloudWatchLoggingOptionDescription]
    ApplicationCode: str


class KinesisAnalyticsInputDescription(TypedDict, total=False):
    InputId: str
    NamePrefix: str
    InAppStreamNames: List[str]
    InputProcessingConfigurationDescription: KinesisAnalyticsInputProcessingConfigurationDescription
    KinesisStreamsInputDescription: KinesisAnalyticsKinesisStreamsInputDescription
    KinesisFirehoseInputDescription: KinesisAnalyticsKinesisFirehoseInputDescription
    InputSchema: KinesisAnalyticsSourceSchema
    InputParallelism: KinesisAnalyticsInputParallelism
    InputStartingPositionConfiguration: KinesisAnalyticsInputStartingPositionConfiguration


class KinesisAnalyticsInputProcessingConfigurationDescription(TypedDict, total=False):
    InputLambdaProcessorDescription: KinesisAnalyticsInputLambdaProcessorDescription


class KinesisAnalyticsInputLambdaProcessorDescription(TypedDict, total=False):
    ResourceARN: str
    RoleARN: str


class KinesisAnalyticsKinesisStreamsInputDescription(TypedDict, total=False):
    ResourceARN: str
    RoleARN: str


class KinesisAnalyticsKinesisFirehoseInputDescription(TypedDict, total=False):
    ResourceARN: str
    RoleARN: str


class KinesisAnalyticsInputStartingPositionConfiguration(TypedDict, total=False):
    InputStartingPosition: str


class KinesisAnalyticsOutputDescription(TypedDict, total=False):
    OutputId: str
    Name: str
    KinesisStreamsOutputDescription: KinesisAnalyticsKinesisStreamsOutputDescription
    KinesisFirehoseOutputDescription: KinesisAnalyticsKinesisFirehoseOutputDescription
    LambdaOutputDescription: KinesisAnalyticsLambdaOutputDescription
    DestinationSchema: KinesisAnalyticsDestinationSchema


class KinesisAnalyticsKinesisStreamsOutputDescription(TypedDict, total=False):
    ResourceARN: str
    RoleARN: str


class KinesisAnalyticsKinesisFirehoseOutputDescription(TypedDict, total=False):
    ResourceARN: str
    RoleARN: str


class KinesisAnalyticsLambdaOutputDescription(TypedDict, total=False):
    ResourceARN: str
    RoleARN: str


class _KinesisAnalyticsReferenceDataSourceDescription(TypedDict):
    ReferenceId: str
    TableName: str
    S3ReferenceDataSourceDescription: KinesisAnalyticsS3ReferenceDataSourceDescription


class KinesisAnalyticsReferenceDataSourceDescription(_KinesisAnalyticsReferenceDataSourceDescription, total=False):
    ReferenceSchema: KinesisAnalyticsSourceSchema


class KinesisAnalyticsS3ReferenceDataSourceDescription(TypedDict):
    BucketARN: str
    FileKey: str
    ReferenceRoleARN: str


class _KinesisAnalyticsCloudWatchLoggingOptionDescription(TypedDict):
    LogStreamARN: str
    RoleARN: str


class KinesisAnalyticsCloudWatchLoggingOptionDescription(_KinesisAnalyticsCloudWatchLoggingOptionDescription, total=False):
    CloudWatchLoggingOptionId: str


class KinesisAnalyticsS3Configuration(TypedDict):
    RoleARN: str
    BucketARN: str
    FileKey: str


class KinesisAnalyticsDiscoverInputSchemaResponse(TypedDict, total=False):
    InputSchema: KinesisAnalyticsSourceSchema
    ParsedInputRecords: List[List[str]]
    ProcessedInputRecords: List[str]
    RawInputRecords: List[str]


class KinesisAnalyticsListApplicationsResponse(TypedDict):
    ApplicationSummaries: List[KinesisAnalyticsApplicationSummary]
    HasMoreApplications: bool


class KinesisAnalyticsListTagsForResourceResponse(TypedDict, total=False):
    Tags: List[KinesisAnalyticsTag]


class KinesisAnalyticsInputConfiguration(TypedDict):
    Id: str
    InputStartingPositionConfiguration: KinesisAnalyticsInputStartingPositionConfiguration


class KinesisAnalyticsStartApplicationResponse(TypedDict, total=False):
    pass


class KinesisAnalyticsStopApplicationResponse(TypedDict, total=False):
    pass


class KinesisAnalyticsTagResourceResponse(TypedDict, total=False):
    pass


class KinesisAnalyticsUntagResourceResponse(TypedDict, total=False):
    pass


class KinesisAnalyticsApplicationUpdate(TypedDict, total=False):
    InputUpdates: List[KinesisAnalyticsInputUpdate]
    ApplicationCodeUpdate: str
    OutputUpdates: List[KinesisAnalyticsOutputUpdate]
    ReferenceDataSourceUpdates: List[KinesisAnalyticsReferenceDataSourceUpdate]
    CloudWatchLoggingOptionUpdates: List[KinesisAnalyticsCloudWatchLoggingOptionUpdate]


class _KinesisAnalyticsInputUpdate(TypedDict):
    InputId: str


class KinesisAnalyticsInputUpdate(_KinesisAnalyticsInputUpdate, total=False):
    NamePrefixUpdate: str
    InputProcessingConfigurationUpdate: KinesisAnalyticsInputProcessingConfigurationUpdate
    KinesisStreamsInputUpdate: KinesisAnalyticsKinesisStreamsInputUpdate
    KinesisFirehoseInputUpdate: KinesisAnalyticsKinesisFirehoseInputUpdate
    InputSchemaUpdate: KinesisAnalyticsInputSchemaUpdate
    InputParallelismUpdate: KinesisAnalyticsInputParallelismUpdate


class KinesisAnalyticsInputProcessingConfigurationUpdate(TypedDict):
    InputLambdaProcessorUpdate: KinesisAnalyticsInputLambdaProcessorUpdate


class KinesisAnalyticsInputLambdaProcessorUpdate(TypedDict, total=False):
    ResourceARNUpdate: str
    RoleARNUpdate: str


class KinesisAnalyticsKinesisStreamsInputUpdate(TypedDict, total=False):
    ResourceARNUpdate: str
    RoleARNUpdate: str


class KinesisAnalyticsKinesisFirehoseInputUpdate(TypedDict, total=False):
    ResourceARNUpdate: str
    RoleARNUpdate: str


class KinesisAnalyticsInputSchemaUpdate(TypedDict, total=False):
    RecordFormatUpdate: KinesisAnalyticsRecordFormat
    RecordEncodingUpdate: str
    RecordColumnUpdates: List[KinesisAnalyticsRecordColumn]


class KinesisAnalyticsInputParallelismUpdate(TypedDict, total=False):
    CountUpdate: int


class _KinesisAnalyticsOutputUpdate(TypedDict):
    OutputId: str


class KinesisAnalyticsOutputUpdate(_KinesisAnalyticsOutputUpdate, total=False):
    NameUpdate: str
    KinesisStreamsOutputUpdate: KinesisAnalyticsKinesisStreamsOutputUpdate
    KinesisFirehoseOutputUpdate: KinesisAnalyticsKinesisFirehoseOutputUpdate
    LambdaOutputUpdate: KinesisAnalyticsLambdaOutputUpdate
    DestinationSchemaUpdate: KinesisAnalyticsDestinationSchema


class KinesisAnalyticsKinesisStreamsOutputUpdate(TypedDict, total=False):
    ResourceARNUpdate: str
    RoleARNUpdate: str


class KinesisAnalyticsKinesisFirehoseOutputUpdate(TypedDict, total=False):
    ResourceARNUpdate: str
    RoleARNUpdate: str


class KinesisAnalyticsLambdaOutputUpdate(TypedDict, total=False):
    ResourceARNUpdate: str
    RoleARNUpdate: str


class _KinesisAnalyticsReferenceDataSourceUpdate(TypedDict):
    ReferenceId: str


class KinesisAnalyticsReferenceDataSourceUpdate(_KinesisAnalyticsReferenceDataSourceUpdate, total=False):
    TableNameUpdate: str
    S3ReferenceDataSourceUpdate: KinesisAnalyticsS3ReferenceDataSourceUpdate
    ReferenceSchemaUpdate: KinesisAnalyticsSourceSchema


class KinesisAnalyticsS3ReferenceDataSourceUpdate(TypedDict, total=False):
    BucketARNUpdate: str
    FileKeyUpdate: str
    ReferenceRoleARNUpdate: str


class _KinesisAnalyticsCloudWatchLoggingOptionUpdate(TypedDict):
    CloudWatchLoggingOptionId: str


class KinesisAnalyticsCloudWatchLoggingOptionUpdate(_KinesisAnalyticsCloudWatchLoggingOptionUpdate, total=False):
    LogStreamARNUpdate: str
    RoleARNUpdate: str


class KinesisAnalyticsUpdateApplicationResponse(TypedDict, total=False):
    pass


class KinesisAnalyticsV2(BaseClient):
    def add_application_cloud_watch_logging_option(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        CloudWatchLoggingOption: KinesisAnalyticsV2CloudWatchLoggingOption
    ) -> KinesisAnalyticsV2AddApplicationCloudWatchLoggingOptionResponse: ...

    def add_application_input(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        Input: KinesisAnalyticsV2Input
    ) -> KinesisAnalyticsV2AddApplicationInputResponse: ...

    def add_application_input_processing_configuration(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        InputId: str,
        InputProcessingConfiguration: KinesisAnalyticsV2InputProcessingConfiguration
    ) -> KinesisAnalyticsV2AddApplicationInputProcessingConfigurationResponse: ...

    def add_application_output(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        Output: KinesisAnalyticsV2Output
    ) -> KinesisAnalyticsV2AddApplicationOutputResponse: ...

    def add_application_reference_data_source(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        ReferenceDataSource: KinesisAnalyticsV2ReferenceDataSource
    ) -> KinesisAnalyticsV2AddApplicationReferenceDataSourceResponse: ...

    def create_application(self, *,
        ApplicationName: str,
        RuntimeEnvironment: str,
        ServiceExecutionRole: str,
        ApplicationDescription: str = ...,
        ApplicationConfiguration: KinesisAnalyticsV2ApplicationConfiguration = ...,
        CloudWatchLoggingOptions: List[KinesisAnalyticsV2CloudWatchLoggingOption] = ...,
        Tags: List[KinesisAnalyticsV2Tag] = ...
    ) -> KinesisAnalyticsV2CreateApplicationResponse: ...

    def create_application_snapshot(self, *,
        ApplicationName: str,
        SnapshotName: str
    ) -> KinesisAnalyticsV2CreateApplicationSnapshotResponse: ...

    def delete_application(self, *,
        ApplicationName: str,
        CreateTimestamp: datetime.datetime
    ) -> KinesisAnalyticsV2DeleteApplicationResponse: ...

    def delete_application_cloud_watch_logging_option(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        CloudWatchLoggingOptionId: str
    ) -> KinesisAnalyticsV2DeleteApplicationCloudWatchLoggingOptionResponse: ...

    def delete_application_input_processing_configuration(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        InputId: str
    ) -> KinesisAnalyticsV2DeleteApplicationInputProcessingConfigurationResponse: ...

    def delete_application_output(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        OutputId: str
    ) -> KinesisAnalyticsV2DeleteApplicationOutputResponse: ...

    def delete_application_reference_data_source(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        ReferenceId: str
    ) -> KinesisAnalyticsV2DeleteApplicationReferenceDataSourceResponse: ...

    def delete_application_snapshot(self, *,
        ApplicationName: str,
        SnapshotName: str,
        SnapshotCreationTimestamp: datetime.datetime
    ) -> KinesisAnalyticsV2DeleteApplicationSnapshotResponse: ...

    def describe_application(self, *,
        ApplicationName: str,
        IncludeAdditionalDetails: bool = ...
    ) -> KinesisAnalyticsV2DescribeApplicationResponse: ...

    def describe_application_snapshot(self, *,
        ApplicationName: str,
        SnapshotName: str
    ) -> KinesisAnalyticsV2DescribeApplicationSnapshotResponse: ...

    def discover_input_schema(self, *,
        ServiceExecutionRole: str,
        ResourceARN: str = ...,
        InputStartingPositionConfiguration: KinesisAnalyticsV2InputStartingPositionConfiguration = ...,
        S3Configuration: KinesisAnalyticsV2S3Configuration = ...,
        InputProcessingConfiguration: KinesisAnalyticsV2InputProcessingConfiguration = ...
    ) -> KinesisAnalyticsV2DiscoverInputSchemaResponse: ...

    def list_application_snapshots(self, *,
        ApplicationName: str,
        Limit: int = ...,
        NextToken: str = ...
    ) -> KinesisAnalyticsV2ListApplicationSnapshotsResponse: ...

    def list_applications(self, *,
        Limit: int = ...,
        NextToken: str = ...
    ) -> KinesisAnalyticsV2ListApplicationsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceARN: str
    ) -> KinesisAnalyticsV2ListTagsForResourceResponse: ...

    def start_application(self, *,
        ApplicationName: str,
        RunConfiguration: KinesisAnalyticsV2RunConfiguration
    ) -> KinesisAnalyticsV2StartApplicationResponse: ...

    def stop_application(self, *,
        ApplicationName: str
    ) -> KinesisAnalyticsV2StopApplicationResponse: ...

    def tag_resource(self, *,
        ResourceARN: str,
        Tags: List[KinesisAnalyticsV2Tag]
    ) -> KinesisAnalyticsV2TagResourceResponse: ...

    def untag_resource(self, *,
        ResourceARN: str,
        TagKeys: List[str]
    ) -> KinesisAnalyticsV2UntagResourceResponse: ...

    def update_application(self, *,
        ApplicationName: str,
        CurrentApplicationVersionId: int,
        ApplicationConfigurationUpdate: KinesisAnalyticsV2ApplicationConfigurationUpdate = ...,
        ServiceExecutionRoleUpdate: str = ...,
        RunConfigurationUpdate: KinesisAnalyticsV2RunConfigurationUpdate = ...,
        CloudWatchLoggingOptionUpdates: List[KinesisAnalyticsV2CloudWatchLoggingOptionUpdate] = ...
    ) -> KinesisAnalyticsV2UpdateApplicationResponse: ...


class KinesisAnalyticsV2CloudWatchLoggingOption(TypedDict):
    LogStreamARN: str


class KinesisAnalyticsV2AddApplicationCloudWatchLoggingOptionResponse(TypedDict, total=False):
    ApplicationARN: str
    ApplicationVersionId: int
    CloudWatchLoggingOptionDescriptions: List[KinesisAnalyticsV2CloudWatchLoggingOptionDescription]


class _KinesisAnalyticsV2CloudWatchLoggingOptionDescription(TypedDict):
    LogStreamARN: str


class KinesisAnalyticsV2CloudWatchLoggingOptionDescription(_KinesisAnalyticsV2CloudWatchLoggingOptionDescription, total=False):
    CloudWatchLoggingOptionId: str
    RoleARN: str


class _KinesisAnalyticsV2Input(TypedDict):
    NamePrefix: str
    InputSchema: KinesisAnalyticsV2SourceSchema


class KinesisAnalyticsV2Input(_KinesisAnalyticsV2Input, total=False):
    InputProcessingConfiguration: KinesisAnalyticsV2InputProcessingConfiguration
    KinesisStreamsInput: KinesisAnalyticsV2KinesisStreamsInput
    KinesisFirehoseInput: KinesisAnalyticsV2KinesisFirehoseInput
    InputParallelism: KinesisAnalyticsV2InputParallelism


class KinesisAnalyticsV2InputProcessingConfiguration(TypedDict):
    InputLambdaProcessor: KinesisAnalyticsV2InputLambdaProcessor


class KinesisAnalyticsV2InputLambdaProcessor(TypedDict):
    ResourceARN: str


class KinesisAnalyticsV2KinesisStreamsInput(TypedDict):
    ResourceARN: str


class KinesisAnalyticsV2KinesisFirehoseInput(TypedDict):
    ResourceARN: str


class KinesisAnalyticsV2InputParallelism(TypedDict, total=False):
    Count: int


class _KinesisAnalyticsV2SourceSchema(TypedDict):
    RecordFormat: KinesisAnalyticsV2RecordFormat
    RecordColumns: List[KinesisAnalyticsV2RecordColumn]


class KinesisAnalyticsV2SourceSchema(_KinesisAnalyticsV2SourceSchema, total=False):
    RecordEncoding: str


class _KinesisAnalyticsV2RecordFormat(TypedDict):
    RecordFormatType: str


class KinesisAnalyticsV2RecordFormat(_KinesisAnalyticsV2RecordFormat, total=False):
    MappingParameters: KinesisAnalyticsV2MappingParameters


class KinesisAnalyticsV2MappingParameters(TypedDict, total=False):
    JSONMappingParameters: KinesisAnalyticsV2JSONMappingParameters
    CSVMappingParameters: KinesisAnalyticsV2CSVMappingParameters


class KinesisAnalyticsV2JSONMappingParameters(TypedDict):
    RecordRowPath: str


class KinesisAnalyticsV2CSVMappingParameters(TypedDict):
    RecordRowDelimiter: str
    RecordColumnDelimiter: str


class _KinesisAnalyticsV2RecordColumn(TypedDict):
    Name: str
    SqlType: str


class KinesisAnalyticsV2RecordColumn(_KinesisAnalyticsV2RecordColumn, total=False):
    Mapping: str


class KinesisAnalyticsV2AddApplicationInputResponse(TypedDict, total=False):
    ApplicationARN: str
    ApplicationVersionId: int
    InputDescriptions: List[KinesisAnalyticsV2InputDescription]


class KinesisAnalyticsV2InputDescription(TypedDict, total=False):
    InputId: str
    NamePrefix: str
    InAppStreamNames: List[str]
    InputProcessingConfigurationDescription: KinesisAnalyticsV2InputProcessingConfigurationDescription
    KinesisStreamsInputDescription: KinesisAnalyticsV2KinesisStreamsInputDescription
    KinesisFirehoseInputDescription: KinesisAnalyticsV2KinesisFirehoseInputDescription
    InputSchema: KinesisAnalyticsV2SourceSchema
    InputParallelism: KinesisAnalyticsV2InputParallelism
    InputStartingPositionConfiguration: KinesisAnalyticsV2InputStartingPositionConfiguration


class KinesisAnalyticsV2InputProcessingConfigurationDescription(TypedDict, total=False):
    InputLambdaProcessorDescription: KinesisAnalyticsV2InputLambdaProcessorDescription


class _KinesisAnalyticsV2InputLambdaProcessorDescription(TypedDict):
    ResourceARN: str


class KinesisAnalyticsV2InputLambdaProcessorDescription(_KinesisAnalyticsV2InputLambdaProcessorDescription, total=False):
    RoleARN: str


class _KinesisAnalyticsV2KinesisStreamsInputDescription(TypedDict):
    ResourceARN: str


class KinesisAnalyticsV2KinesisStreamsInputDescription(_KinesisAnalyticsV2KinesisStreamsInputDescription, total=False):
    RoleARN: str


class _KinesisAnalyticsV2KinesisFirehoseInputDescription(TypedDict):
    ResourceARN: str


class KinesisAnalyticsV2KinesisFirehoseInputDescription(_KinesisAnalyticsV2KinesisFirehoseInputDescription, total=False):
    RoleARN: str


class KinesisAnalyticsV2InputStartingPositionConfiguration(TypedDict, total=False):
    InputStartingPosition: str


class KinesisAnalyticsV2AddApplicationInputProcessingConfigurationResponse(TypedDict, total=False):
    ApplicationARN: str
    ApplicationVersionId: int
    InputId: str
    InputProcessingConfigurationDescription: KinesisAnalyticsV2InputProcessingConfigurationDescription


class _KinesisAnalyticsV2Output(TypedDict):
    Name: str
    DestinationSchema: KinesisAnalyticsV2DestinationSchema


class KinesisAnalyticsV2Output(_KinesisAnalyticsV2Output, total=False):
    KinesisStreamsOutput: KinesisAnalyticsV2KinesisStreamsOutput
    KinesisFirehoseOutput: KinesisAnalyticsV2KinesisFirehoseOutput
    LambdaOutput: KinesisAnalyticsV2LambdaOutput


class KinesisAnalyticsV2KinesisStreamsOutput(TypedDict):
    ResourceARN: str


class KinesisAnalyticsV2KinesisFirehoseOutput(TypedDict):
    ResourceARN: str


class KinesisAnalyticsV2LambdaOutput(TypedDict):
    ResourceARN: str


class KinesisAnalyticsV2DestinationSchema(TypedDict):
    RecordFormatType: str


class KinesisAnalyticsV2AddApplicationOutputResponse(TypedDict, total=False):
    ApplicationARN: str
    ApplicationVersionId: int
    OutputDescriptions: List[KinesisAnalyticsV2OutputDescription]


class KinesisAnalyticsV2OutputDescription(TypedDict, total=False):
    OutputId: str
    Name: str
    KinesisStreamsOutputDescription: KinesisAnalyticsV2KinesisStreamsOutputDescription
    KinesisFirehoseOutputDescription: KinesisAnalyticsV2KinesisFirehoseOutputDescription
    LambdaOutputDescription: KinesisAnalyticsV2LambdaOutputDescription
    DestinationSchema: KinesisAnalyticsV2DestinationSchema


class _KinesisAnalyticsV2KinesisStreamsOutputDescription(TypedDict):
    ResourceARN: str


class KinesisAnalyticsV2KinesisStreamsOutputDescription(_KinesisAnalyticsV2KinesisStreamsOutputDescription, total=False):
    RoleARN: str


class _KinesisAnalyticsV2KinesisFirehoseOutputDescription(TypedDict):
    ResourceARN: str


class KinesisAnalyticsV2KinesisFirehoseOutputDescription(_KinesisAnalyticsV2KinesisFirehoseOutputDescription, total=False):
    RoleARN: str


class _KinesisAnalyticsV2LambdaOutputDescription(TypedDict):
    ResourceARN: str


class KinesisAnalyticsV2LambdaOutputDescription(_KinesisAnalyticsV2LambdaOutputDescription, total=False):
    RoleARN: str


class _KinesisAnalyticsV2ReferenceDataSource(TypedDict):
    TableName: str
    ReferenceSchema: KinesisAnalyticsV2SourceSchema


class KinesisAnalyticsV2ReferenceDataSource(_KinesisAnalyticsV2ReferenceDataSource, total=False):
    S3ReferenceDataSource: KinesisAnalyticsV2S3ReferenceDataSource


class KinesisAnalyticsV2S3ReferenceDataSource(TypedDict, total=False):
    BucketARN: str
    FileKey: str


class KinesisAnalyticsV2AddApplicationReferenceDataSourceResponse(TypedDict, total=False):
    ApplicationARN: str
    ApplicationVersionId: int
    ReferenceDataSourceDescriptions: List[KinesisAnalyticsV2ReferenceDataSourceDescription]


class _KinesisAnalyticsV2ReferenceDataSourceDescription(TypedDict):
    ReferenceId: str
    TableName: str
    S3ReferenceDataSourceDescription: KinesisAnalyticsV2S3ReferenceDataSourceDescription


class KinesisAnalyticsV2ReferenceDataSourceDescription(_KinesisAnalyticsV2ReferenceDataSourceDescription, total=False):
    ReferenceSchema: KinesisAnalyticsV2SourceSchema


class _KinesisAnalyticsV2S3ReferenceDataSourceDescription(TypedDict):
    BucketARN: str
    FileKey: str


class KinesisAnalyticsV2S3ReferenceDataSourceDescription(_KinesisAnalyticsV2S3ReferenceDataSourceDescription, total=False):
    ReferenceRoleARN: str


class _KinesisAnalyticsV2ApplicationConfiguration(TypedDict):
    ApplicationCodeConfiguration: KinesisAnalyticsV2ApplicationCodeConfiguration


class KinesisAnalyticsV2ApplicationConfiguration(_KinesisAnalyticsV2ApplicationConfiguration, total=False):
    SqlApplicationConfiguration: KinesisAnalyticsV2SqlApplicationConfiguration
    FlinkApplicationConfiguration: KinesisAnalyticsV2FlinkApplicationConfiguration
    EnvironmentProperties: KinesisAnalyticsV2EnvironmentProperties
    ApplicationSnapshotConfiguration: KinesisAnalyticsV2ApplicationSnapshotConfiguration


class KinesisAnalyticsV2SqlApplicationConfiguration(TypedDict, total=False):
    Inputs: List[KinesisAnalyticsV2Input]
    Outputs: List[KinesisAnalyticsV2Output]
    ReferenceDataSources: List[KinesisAnalyticsV2ReferenceDataSource]


class KinesisAnalyticsV2FlinkApplicationConfiguration(TypedDict, total=False):
    CheckpointConfiguration: KinesisAnalyticsV2CheckpointConfiguration
    MonitoringConfiguration: KinesisAnalyticsV2MonitoringConfiguration
    ParallelismConfiguration: KinesisAnalyticsV2ParallelismConfiguration


class _KinesisAnalyticsV2CheckpointConfiguration(TypedDict):
    ConfigurationType: str


class KinesisAnalyticsV2CheckpointConfiguration(_KinesisAnalyticsV2CheckpointConfiguration, total=False):
    CheckpointingEnabled: bool
    CheckpointInterval: int
    MinPauseBetweenCheckpoints: int


class _KinesisAnalyticsV2MonitoringConfiguration(TypedDict):
    ConfigurationType: str


class KinesisAnalyticsV2MonitoringConfiguration(_KinesisAnalyticsV2MonitoringConfiguration, total=False):
    MetricsLevel: str
    LogLevel: str


class _KinesisAnalyticsV2ParallelismConfiguration(TypedDict):
    ConfigurationType: str


class KinesisAnalyticsV2ParallelismConfiguration(_KinesisAnalyticsV2ParallelismConfiguration, total=False):
    Parallelism: int
    ParallelismPerKPU: int
    AutoScalingEnabled: bool


class KinesisAnalyticsV2EnvironmentProperties(TypedDict):
    PropertyGroups: List[KinesisAnalyticsV2PropertyGroup]


class KinesisAnalyticsV2PropertyGroup(TypedDict):
    PropertyGroupId: str
    PropertyMap: Dict[str, str]


class _KinesisAnalyticsV2ApplicationCodeConfiguration(TypedDict):
    CodeContentType: str


class KinesisAnalyticsV2ApplicationCodeConfiguration(_KinesisAnalyticsV2ApplicationCodeConfiguration, total=False):
    CodeContent: KinesisAnalyticsV2CodeContent


class KinesisAnalyticsV2CodeContent(TypedDict, total=False):
    TextContent: str
    ZipFileContent: bytes
    S3ContentLocation: KinesisAnalyticsV2S3ContentLocation


class _KinesisAnalyticsV2S3ContentLocation(TypedDict):
    BucketARN: str
    FileKey: str


class KinesisAnalyticsV2S3ContentLocation(_KinesisAnalyticsV2S3ContentLocation, total=False):
    ObjectVersion: str


class KinesisAnalyticsV2ApplicationSnapshotConfiguration(TypedDict):
    SnapshotsEnabled: bool


class _KinesisAnalyticsV2Tag(TypedDict):
    Key: str


class KinesisAnalyticsV2Tag(_KinesisAnalyticsV2Tag, total=False):
    Value: str


class KinesisAnalyticsV2CreateApplicationResponse(TypedDict):
    ApplicationDetail: KinesisAnalyticsV2ApplicationDetail


class _KinesisAnalyticsV2ApplicationDetail(TypedDict):
    ApplicationARN: str
    ApplicationName: str
    RuntimeEnvironment: str
    ApplicationStatus: str
    ApplicationVersionId: int


class KinesisAnalyticsV2ApplicationDetail(_KinesisAnalyticsV2ApplicationDetail, total=False):
    ApplicationDescription: str
    ServiceExecutionRole: str
    CreateTimestamp: datetime.datetime
    LastUpdateTimestamp: datetime.datetime
    ApplicationConfigurationDescription: KinesisAnalyticsV2ApplicationConfigurationDescription
    CloudWatchLoggingOptionDescriptions: List[KinesisAnalyticsV2CloudWatchLoggingOptionDescription]


class KinesisAnalyticsV2ApplicationConfigurationDescription(TypedDict, total=False):
    SqlApplicationConfigurationDescription: KinesisAnalyticsV2SqlApplicationConfigurationDescription
    ApplicationCodeConfigurationDescription: KinesisAnalyticsV2ApplicationCodeConfigurationDescription
    RunConfigurationDescription: KinesisAnalyticsV2RunConfigurationDescription
    FlinkApplicationConfigurationDescription: KinesisAnalyticsV2FlinkApplicationConfigurationDescription
    EnvironmentPropertyDescriptions: KinesisAnalyticsV2EnvironmentPropertyDescriptions
    ApplicationSnapshotConfigurationDescription: KinesisAnalyticsV2ApplicationSnapshotConfigurationDescription


class KinesisAnalyticsV2SqlApplicationConfigurationDescription(TypedDict, total=False):
    InputDescriptions: List[KinesisAnalyticsV2InputDescription]
    OutputDescriptions: List[KinesisAnalyticsV2OutputDescription]
    ReferenceDataSourceDescriptions: List[KinesisAnalyticsV2ReferenceDataSourceDescription]


class _KinesisAnalyticsV2ApplicationCodeConfigurationDescription(TypedDict):
    CodeContentType: str


class KinesisAnalyticsV2ApplicationCodeConfigurationDescription(_KinesisAnalyticsV2ApplicationCodeConfigurationDescription, total=False):
    CodeContentDescription: KinesisAnalyticsV2CodeContentDescription


class KinesisAnalyticsV2CodeContentDescription(TypedDict, total=False):
    TextContent: str
    CodeMD5: str
    CodeSize: int
    S3ApplicationCodeLocationDescription: KinesisAnalyticsV2S3ApplicationCodeLocationDescription


class _KinesisAnalyticsV2S3ApplicationCodeLocationDescription(TypedDict):
    BucketARN: str
    FileKey: str


class KinesisAnalyticsV2S3ApplicationCodeLocationDescription(_KinesisAnalyticsV2S3ApplicationCodeLocationDescription, total=False):
    ObjectVersion: str


class KinesisAnalyticsV2RunConfigurationDescription(TypedDict, total=False):
    ApplicationRestoreConfigurationDescription: KinesisAnalyticsV2ApplicationRestoreConfiguration


class _KinesisAnalyticsV2ApplicationRestoreConfiguration(TypedDict):
    ApplicationRestoreType: str


class KinesisAnalyticsV2ApplicationRestoreConfiguration(_KinesisAnalyticsV2ApplicationRestoreConfiguration, total=False):
    SnapshotName: str


class KinesisAnalyticsV2FlinkApplicationConfigurationDescription(TypedDict, total=False):
    CheckpointConfigurationDescription: KinesisAnalyticsV2CheckpointConfigurationDescription
    MonitoringConfigurationDescription: KinesisAnalyticsV2MonitoringConfigurationDescription
    ParallelismConfigurationDescription: KinesisAnalyticsV2ParallelismConfigurationDescription
    JobPlanDescription: str


class KinesisAnalyticsV2CheckpointConfigurationDescription(TypedDict, total=False):
    ConfigurationType: str
    CheckpointingEnabled: bool
    CheckpointInterval: int
    MinPauseBetweenCheckpoints: int


class KinesisAnalyticsV2MonitoringConfigurationDescription(TypedDict, total=False):
    ConfigurationType: str
    MetricsLevel: str
    LogLevel: str


class KinesisAnalyticsV2ParallelismConfigurationDescription(TypedDict, total=False):
    ConfigurationType: str
    Parallelism: int
    ParallelismPerKPU: int
    CurrentParallelism: int
    AutoScalingEnabled: bool


class KinesisAnalyticsV2EnvironmentPropertyDescriptions(TypedDict, total=False):
    PropertyGroupDescriptions: List[KinesisAnalyticsV2PropertyGroup]


class KinesisAnalyticsV2ApplicationSnapshotConfigurationDescription(TypedDict):
    SnapshotsEnabled: bool


class KinesisAnalyticsV2CreateApplicationSnapshotResponse(TypedDict, total=False):
    pass


class KinesisAnalyticsV2DeleteApplicationResponse(TypedDict, total=False):
    pass


class KinesisAnalyticsV2DeleteApplicationCloudWatchLoggingOptionResponse(TypedDict, total=False):
    ApplicationARN: str
    ApplicationVersionId: int
    CloudWatchLoggingOptionDescriptions: List[KinesisAnalyticsV2CloudWatchLoggingOptionDescription]


class KinesisAnalyticsV2DeleteApplicationInputProcessingConfigurationResponse(TypedDict, total=False):
    ApplicationARN: str
    ApplicationVersionId: int


class KinesisAnalyticsV2DeleteApplicationOutputResponse(TypedDict, total=False):
    ApplicationARN: str
    ApplicationVersionId: int


class KinesisAnalyticsV2DeleteApplicationReferenceDataSourceResponse(TypedDict, total=False):
    ApplicationARN: str
    ApplicationVersionId: int


class KinesisAnalyticsV2DeleteApplicationSnapshotResponse(TypedDict, total=False):
    pass


class KinesisAnalyticsV2DescribeApplicationResponse(TypedDict):
    ApplicationDetail: KinesisAnalyticsV2ApplicationDetail


class KinesisAnalyticsV2DescribeApplicationSnapshotResponse(TypedDict):
    SnapshotDetails: KinesisAnalyticsV2SnapshotDetails


class _KinesisAnalyticsV2SnapshotDetails(TypedDict):
    SnapshotName: str
    SnapshotStatus: str
    ApplicationVersionId: int


class KinesisAnalyticsV2SnapshotDetails(_KinesisAnalyticsV2SnapshotDetails, total=False):
    SnapshotCreationTimestamp: datetime.datetime


class KinesisAnalyticsV2S3Configuration(TypedDict):
    BucketARN: str
    FileKey: str


class KinesisAnalyticsV2DiscoverInputSchemaResponse(TypedDict, total=False):
    InputSchema: KinesisAnalyticsV2SourceSchema
    ParsedInputRecords: List[List[str]]
    ProcessedInputRecords: List[str]
    RawInputRecords: List[str]


class KinesisAnalyticsV2ListApplicationSnapshotsResponse(TypedDict, total=False):
    SnapshotSummaries: List[KinesisAnalyticsV2SnapshotDetails]
    NextToken: str


class _KinesisAnalyticsV2ListApplicationsResponse(TypedDict):
    ApplicationSummaries: List[KinesisAnalyticsV2ApplicationSummary]


class KinesisAnalyticsV2ListApplicationsResponse(_KinesisAnalyticsV2ListApplicationsResponse, total=False):
    NextToken: str


class KinesisAnalyticsV2ApplicationSummary(TypedDict):
    ApplicationName: str
    ApplicationARN: str
    ApplicationStatus: str
    ApplicationVersionId: int
    RuntimeEnvironment: str


class KinesisAnalyticsV2ListTagsForResourceResponse(TypedDict, total=False):
    Tags: List[KinesisAnalyticsV2Tag]


class KinesisAnalyticsV2RunConfiguration(TypedDict, total=False):
    SqlRunConfigurations: List[KinesisAnalyticsV2SqlRunConfiguration]
    ApplicationRestoreConfiguration: KinesisAnalyticsV2ApplicationRestoreConfiguration


class KinesisAnalyticsV2SqlRunConfiguration(TypedDict):
    InputId: str
    InputStartingPositionConfiguration: KinesisAnalyticsV2InputStartingPositionConfiguration


class KinesisAnalyticsV2StartApplicationResponse(TypedDict, total=False):
    pass


class KinesisAnalyticsV2StopApplicationResponse(TypedDict, total=False):
    pass


class KinesisAnalyticsV2TagResourceResponse(TypedDict, total=False):
    pass


class KinesisAnalyticsV2UntagResourceResponse(TypedDict, total=False):
    pass


class KinesisAnalyticsV2ApplicationConfigurationUpdate(TypedDict, total=False):
    SqlApplicationConfigurationUpdate: KinesisAnalyticsV2SqlApplicationConfigurationUpdate
    ApplicationCodeConfigurationUpdate: KinesisAnalyticsV2ApplicationCodeConfigurationUpdate
    FlinkApplicationConfigurationUpdate: KinesisAnalyticsV2FlinkApplicationConfigurationUpdate
    EnvironmentPropertyUpdates: KinesisAnalyticsV2EnvironmentPropertyUpdates
    ApplicationSnapshotConfigurationUpdate: KinesisAnalyticsV2ApplicationSnapshotConfigurationUpdate


class KinesisAnalyticsV2SqlApplicationConfigurationUpdate(TypedDict, total=False):
    InputUpdates: List[KinesisAnalyticsV2InputUpdate]
    OutputUpdates: List[KinesisAnalyticsV2OutputUpdate]
    ReferenceDataSourceUpdates: List[KinesisAnalyticsV2ReferenceDataSourceUpdate]


class _KinesisAnalyticsV2InputUpdate(TypedDict):
    InputId: str


class KinesisAnalyticsV2InputUpdate(_KinesisAnalyticsV2InputUpdate, total=False):
    NamePrefixUpdate: str
    InputProcessingConfigurationUpdate: KinesisAnalyticsV2InputProcessingConfigurationUpdate
    KinesisStreamsInputUpdate: KinesisAnalyticsV2KinesisStreamsInputUpdate
    KinesisFirehoseInputUpdate: KinesisAnalyticsV2KinesisFirehoseInputUpdate
    InputSchemaUpdate: KinesisAnalyticsV2InputSchemaUpdate
    InputParallelismUpdate: KinesisAnalyticsV2InputParallelismUpdate


class KinesisAnalyticsV2InputProcessingConfigurationUpdate(TypedDict):
    InputLambdaProcessorUpdate: KinesisAnalyticsV2InputLambdaProcessorUpdate


class KinesisAnalyticsV2InputLambdaProcessorUpdate(TypedDict):
    ResourceARNUpdate: str


class KinesisAnalyticsV2KinesisStreamsInputUpdate(TypedDict):
    ResourceARNUpdate: str


class KinesisAnalyticsV2KinesisFirehoseInputUpdate(TypedDict):
    ResourceARNUpdate: str


class KinesisAnalyticsV2InputSchemaUpdate(TypedDict, total=False):
    RecordFormatUpdate: KinesisAnalyticsV2RecordFormat
    RecordEncodingUpdate: str
    RecordColumnUpdates: List[KinesisAnalyticsV2RecordColumn]


class KinesisAnalyticsV2InputParallelismUpdate(TypedDict):
    CountUpdate: int


class _KinesisAnalyticsV2OutputUpdate(TypedDict):
    OutputId: str


class KinesisAnalyticsV2OutputUpdate(_KinesisAnalyticsV2OutputUpdate, total=False):
    NameUpdate: str
    KinesisStreamsOutputUpdate: KinesisAnalyticsV2KinesisStreamsOutputUpdate
    KinesisFirehoseOutputUpdate: KinesisAnalyticsV2KinesisFirehoseOutputUpdate
    LambdaOutputUpdate: KinesisAnalyticsV2LambdaOutputUpdate
    DestinationSchemaUpdate: KinesisAnalyticsV2DestinationSchema


class KinesisAnalyticsV2KinesisStreamsOutputUpdate(TypedDict):
    ResourceARNUpdate: str


class KinesisAnalyticsV2KinesisFirehoseOutputUpdate(TypedDict):
    ResourceARNUpdate: str


class KinesisAnalyticsV2LambdaOutputUpdate(TypedDict):
    ResourceARNUpdate: str


class _KinesisAnalyticsV2ReferenceDataSourceUpdate(TypedDict):
    ReferenceId: str


class KinesisAnalyticsV2ReferenceDataSourceUpdate(_KinesisAnalyticsV2ReferenceDataSourceUpdate, total=False):
    TableNameUpdate: str
    S3ReferenceDataSourceUpdate: KinesisAnalyticsV2S3ReferenceDataSourceUpdate
    ReferenceSchemaUpdate: KinesisAnalyticsV2SourceSchema


class KinesisAnalyticsV2S3ReferenceDataSourceUpdate(TypedDict, total=False):
    BucketARNUpdate: str
    FileKeyUpdate: str


class KinesisAnalyticsV2ApplicationCodeConfigurationUpdate(TypedDict, total=False):
    CodeContentTypeUpdate: str
    CodeContentUpdate: KinesisAnalyticsV2CodeContentUpdate


class KinesisAnalyticsV2CodeContentUpdate(TypedDict, total=False):
    TextContentUpdate: str
    ZipFileContentUpdate: bytes
    S3ContentLocationUpdate: KinesisAnalyticsV2S3ContentLocationUpdate


class KinesisAnalyticsV2S3ContentLocationUpdate(TypedDict, total=False):
    BucketARNUpdate: str
    FileKeyUpdate: str
    ObjectVersionUpdate: str


class KinesisAnalyticsV2FlinkApplicationConfigurationUpdate(TypedDict, total=False):
    CheckpointConfigurationUpdate: KinesisAnalyticsV2CheckpointConfigurationUpdate
    MonitoringConfigurationUpdate: KinesisAnalyticsV2MonitoringConfigurationUpdate
    ParallelismConfigurationUpdate: KinesisAnalyticsV2ParallelismConfigurationUpdate


class KinesisAnalyticsV2CheckpointConfigurationUpdate(TypedDict, total=False):
    ConfigurationTypeUpdate: str
    CheckpointingEnabledUpdate: bool
    CheckpointIntervalUpdate: int
    MinPauseBetweenCheckpointsUpdate: int


class KinesisAnalyticsV2MonitoringConfigurationUpdate(TypedDict, total=False):
    ConfigurationTypeUpdate: str
    MetricsLevelUpdate: str
    LogLevelUpdate: str


class KinesisAnalyticsV2ParallelismConfigurationUpdate(TypedDict, total=False):
    ConfigurationTypeUpdate: str
    ParallelismUpdate: int
    ParallelismPerKPUUpdate: int
    AutoScalingEnabledUpdate: bool


class KinesisAnalyticsV2EnvironmentPropertyUpdates(TypedDict):
    PropertyGroups: List[KinesisAnalyticsV2PropertyGroup]


class KinesisAnalyticsV2ApplicationSnapshotConfigurationUpdate(TypedDict):
    SnapshotsEnabledUpdate: bool


class KinesisAnalyticsV2RunConfigurationUpdate(TypedDict, total=False):
    ApplicationRestoreConfiguration: KinesisAnalyticsV2ApplicationRestoreConfiguration


class _KinesisAnalyticsV2CloudWatchLoggingOptionUpdate(TypedDict):
    CloudWatchLoggingOptionId: str


class KinesisAnalyticsV2CloudWatchLoggingOptionUpdate(_KinesisAnalyticsV2CloudWatchLoggingOptionUpdate, total=False):
    LogStreamARNUpdate: str


class KinesisAnalyticsV2UpdateApplicationResponse(TypedDict):
    ApplicationDetail: KinesisAnalyticsV2ApplicationDetail


class KinesisVideo(BaseClient):
    def create_stream(self, *,
        StreamName: str,
        DeviceName: str = ...,
        MediaType: str = ...,
        KmsKeyId: str = ...,
        DataRetentionInHours: int = ...,
        Tags: Dict[str, str] = ...
    ) -> KinesisVideoCreateStreamOutput: ...

    def delete_stream(self, *,
        StreamARN: str,
        CurrentVersion: str = ...
    ) -> KinesisVideoDeleteStreamOutput: ...

    def describe_stream(self, *,
        StreamName: str = ...,
        StreamARN: str = ...
    ) -> KinesisVideoDescribeStreamOutput: ...

    def get_data_endpoint(self, *,
        APIName: str,
        StreamName: str = ...,
        StreamARN: str = ...
    ) -> KinesisVideoGetDataEndpointOutput: ...

    def list_streams(self, *,
        MaxResults: int = ...,
        NextToken: str = ...,
        StreamNameCondition: KinesisVideoStreamNameCondition = ...
    ) -> KinesisVideoListStreamsOutput: ...

    def list_tags_for_stream(self, *,
        NextToken: str = ...,
        StreamARN: str = ...,
        StreamName: str = ...
    ) -> KinesisVideoListTagsForStreamOutput: ...

    def tag_stream(self, *,
        Tags: Dict[str, str],
        StreamARN: str = ...,
        StreamName: str = ...
    ) -> KinesisVideoTagStreamOutput: ...

    def untag_stream(self, *,
        TagKeyList: List[str],
        StreamARN: str = ...,
        StreamName: str = ...
    ) -> KinesisVideoUntagStreamOutput: ...

    def update_data_retention(self, *,
        CurrentVersion: str,
        Operation: str,
        DataRetentionChangeInHours: int,
        StreamName: str = ...,
        StreamARN: str = ...
    ) -> KinesisVideoUpdateDataRetentionOutput: ...

    def update_stream(self, *,
        CurrentVersion: str,
        StreamName: str = ...,
        StreamARN: str = ...,
        DeviceName: str = ...,
        MediaType: str = ...
    ) -> KinesisVideoUpdateStreamOutput: ...


class KinesisVideoCreateStreamOutput(TypedDict, total=False):
    StreamARN: str


class KinesisVideoDeleteStreamOutput(TypedDict, total=False):
    pass


class KinesisVideoDescribeStreamOutput(TypedDict, total=False):
    StreamInfo: KinesisVideoStreamInfo


class KinesisVideoStreamInfo(TypedDict, total=False):
    DeviceName: str
    StreamName: str
    StreamARN: str
    MediaType: str
    KmsKeyId: str
    Version: str
    Status: str
    CreationTime: datetime.datetime
    DataRetentionInHours: int


class KinesisVideoGetDataEndpointOutput(TypedDict, total=False):
    DataEndpoint: str


class KinesisVideoStreamNameCondition(TypedDict, total=False):
    ComparisonOperator: str
    ComparisonValue: str


class KinesisVideoListStreamsOutput(TypedDict, total=False):
    StreamInfoList: List[KinesisVideoStreamInfo]
    NextToken: str


class KinesisVideoListTagsForStreamOutput(TypedDict, total=False):
    NextToken: str
    Tags: Dict[str, str]


class KinesisVideoTagStreamOutput(TypedDict, total=False):
    pass


class KinesisVideoUntagStreamOutput(TypedDict, total=False):
    pass


class KinesisVideoUpdateDataRetentionOutput(TypedDict, total=False):
    pass


class KinesisVideoUpdateStreamOutput(TypedDict, total=False):
    pass


class KMS(BaseClient):
    def cancel_key_deletion(self, *,
        KeyId: str
    ) -> KMSCancelKeyDeletionResponse: ...

    def connect_custom_key_store(self, *,
        CustomKeyStoreId: str
    ) -> KMSConnectCustomKeyStoreResponse: ...

    def create_alias(self, *,
        AliasName: str,
        TargetKeyId: str
    ): ...

    def create_custom_key_store(self, *,
        CustomKeyStoreName: str,
        CloudHsmClusterId: str,
        TrustAnchorCertificate: str,
        KeyStorePassword: str
    ) -> KMSCreateCustomKeyStoreResponse: ...

    def create_grant(self, *,
        KeyId: str,
        GranteePrincipal: str,
        Operations: List[str],
        RetiringPrincipal: str = ...,
        Constraints: KMSGrantConstraints = ...,
        GrantTokens: List[str] = ...,
        Name: str = ...
    ) -> KMSCreateGrantResponse: ...

    def create_key(self, *,
        Policy: str = ...,
        Description: str = ...,
        KeyUsage: str = ...,
        Origin: str = ...,
        CustomKeyStoreId: str = ...,
        BypassPolicyLockoutSafetyCheck: bool = ...,
        Tags: List[KMSTag] = ...
    ) -> KMSCreateKeyResponse: ...

    def decrypt(self, *,
        CiphertextBlob: bytes,
        EncryptionContext: Dict[str, str] = ...,
        GrantTokens: List[str] = ...
    ) -> KMSDecryptResponse: ...

    def delete_alias(self, *,
        AliasName: str
    ): ...

    def delete_custom_key_store(self, *,
        CustomKeyStoreId: str
    ) -> KMSDeleteCustomKeyStoreResponse: ...

    def delete_imported_key_material(self, *,
        KeyId: str
    ): ...

    def describe_custom_key_stores(self, *,
        CustomKeyStoreId: str = ...,
        CustomKeyStoreName: str = ...,
        Limit: int = ...,
        Marker: str = ...
    ) -> KMSDescribeCustomKeyStoresResponse: ...

    def describe_key(self, *,
        KeyId: str,
        GrantTokens: List[str] = ...
    ) -> KMSDescribeKeyResponse: ...

    def disable_key(self, *,
        KeyId: str
    ): ...

    def disable_key_rotation(self, *,
        KeyId: str
    ): ...

    def disconnect_custom_key_store(self, *,
        CustomKeyStoreId: str
    ) -> KMSDisconnectCustomKeyStoreResponse: ...

    def enable_key(self, *,
        KeyId: str
    ): ...

    def enable_key_rotation(self, *,
        KeyId: str
    ): ...

    def encrypt(self, *,
        KeyId: str,
        Plaintext: bytes,
        EncryptionContext: Dict[str, str] = ...,
        GrantTokens: List[str] = ...
    ) -> KMSEncryptResponse: ...

    def generate_data_key(self, *,
        KeyId: str,
        EncryptionContext: Dict[str, str] = ...,
        NumberOfBytes: int = ...,
        KeySpec: str = ...,
        GrantTokens: List[str] = ...
    ) -> KMSGenerateDataKeyResponse: ...

    def generate_data_key_without_plaintext(self, *,
        KeyId: str,
        EncryptionContext: Dict[str, str] = ...,
        KeySpec: str = ...,
        NumberOfBytes: int = ...,
        GrantTokens: List[str] = ...
    ) -> KMSGenerateDataKeyWithoutPlaintextResponse: ...

    def generate_random(self, *,
        NumberOfBytes: int = ...,
        CustomKeyStoreId: str = ...
    ) -> KMSGenerateRandomResponse: ...

    def get_key_policy(self, *,
        KeyId: str,
        PolicyName: str
    ) -> KMSGetKeyPolicyResponse: ...

    def get_key_rotation_status(self, *,
        KeyId: str
    ) -> KMSGetKeyRotationStatusResponse: ...

    def get_parameters_for_import(self, *,
        KeyId: str,
        WrappingAlgorithm: str,
        WrappingKeySpec: str
    ) -> KMSGetParametersForImportResponse: ...

    def import_key_material(self, *,
        KeyId: str,
        ImportToken: bytes,
        EncryptedKeyMaterial: bytes,
        ValidTo: datetime.datetime = ...,
        ExpirationModel: str = ...
    ) -> KMSImportKeyMaterialResponse: ...

    def list_aliases(self, *,
        KeyId: str = ...,
        Limit: int = ...,
        Marker: str = ...
    ) -> KMSListAliasesResponse: ...

    def list_grants(self, *,
        KeyId: str,
        Limit: int = ...,
        Marker: str = ...
    ) -> KMSListGrantsResponse: ...

    def list_key_policies(self, *,
        KeyId: str,
        Limit: int = ...,
        Marker: str = ...
    ) -> KMSListKeyPoliciesResponse: ...

    def list_keys(self, *,
        Limit: int = ...,
        Marker: str = ...
    ) -> KMSListKeysResponse: ...

    def list_resource_tags(self, *,
        KeyId: str,
        Limit: int = ...,
        Marker: str = ...
    ) -> KMSListResourceTagsResponse: ...

    def list_retirable_grants(self, *,
        RetiringPrincipal: str,
        Limit: int = ...,
        Marker: str = ...
    ) -> KMSListGrantsResponse: ...

    def put_key_policy(self, *,
        KeyId: str,
        PolicyName: str,
        Policy: str,
        BypassPolicyLockoutSafetyCheck: bool = ...
    ): ...

    def re_encrypt(self, *,
        CiphertextBlob: bytes,
        DestinationKeyId: str,
        SourceEncryptionContext: Dict[str, str] = ...,
        DestinationEncryptionContext: Dict[str, str] = ...,
        GrantTokens: List[str] = ...
    ) -> KMSReEncryptResponse: ...

    def retire_grant(self, *,
        GrantToken: str = ...,
        KeyId: str = ...,
        GrantId: str = ...
    ): ...

    def revoke_grant(self, *,
        KeyId: str,
        GrantId: str
    ): ...

    def schedule_key_deletion(self, *,
        KeyId: str,
        PendingWindowInDays: int = ...
    ) -> KMSScheduleKeyDeletionResponse: ...

    def tag_resource(self, *,
        KeyId: str,
        Tags: List[KMSTag]
    ): ...

    def untag_resource(self, *,
        KeyId: str,
        TagKeys: List[str]
    ): ...

    def update_alias(self, *,
        AliasName: str,
        TargetKeyId: str
    ): ...

    def update_custom_key_store(self, *,
        CustomKeyStoreId: str,
        NewCustomKeyStoreName: str = ...,
        KeyStorePassword: str = ...,
        CloudHsmClusterId: str = ...
    ) -> KMSUpdateCustomKeyStoreResponse: ...

    def update_key_description(self, *,
        KeyId: str,
        Description: str
    ): ...


class KMSCancelKeyDeletionResponse(TypedDict, total=False):
    KeyId: str


class KMSConnectCustomKeyStoreResponse(TypedDict, total=False):
    pass


class KMSCreateCustomKeyStoreResponse(TypedDict, total=False):
    CustomKeyStoreId: str


class KMSGrantConstraints(TypedDict, total=False):
    EncryptionContextSubset: Dict[str, str]
    EncryptionContextEquals: Dict[str, str]


class KMSCreateGrantResponse(TypedDict, total=False):
    GrantToken: str
    GrantId: str


class KMSTag(TypedDict):
    TagKey: str
    TagValue: str


class KMSCreateKeyResponse(TypedDict, total=False):
    KeyMetadata: KMSKeyMetadata


class _KMSKeyMetadata(TypedDict):
    KeyId: str


class KMSKeyMetadata(_KMSKeyMetadata, total=False):
    AWSAccountId: str
    Arn: str
    CreationDate: datetime.datetime
    Enabled: bool
    Description: str
    KeyUsage: str
    KeyState: str
    DeletionDate: datetime.datetime
    ValidTo: datetime.datetime
    Origin: str
    CustomKeyStoreId: str
    CloudHsmClusterId: str
    ExpirationModel: str
    KeyManager: str


class KMSDecryptResponse(TypedDict, total=False):
    KeyId: str
    Plaintext: bytes


class KMSDeleteCustomKeyStoreResponse(TypedDict, total=False):
    pass


class KMSDescribeCustomKeyStoresResponse(TypedDict, total=False):
    CustomKeyStores: List[KMSCustomKeyStoresListEntry]
    NextMarker: str
    Truncated: bool


class KMSCustomKeyStoresListEntry(TypedDict, total=False):
    CustomKeyStoreId: str
    CustomKeyStoreName: str
    CloudHsmClusterId: str
    TrustAnchorCertificate: str
    ConnectionState: str
    ConnectionErrorCode: str
    CreationDate: datetime.datetime


class KMSDescribeKeyResponse(TypedDict, total=False):
    KeyMetadata: KMSKeyMetadata


class KMSDisconnectCustomKeyStoreResponse(TypedDict, total=False):
    pass


class KMSEncryptResponse(TypedDict, total=False):
    CiphertextBlob: bytes
    KeyId: str


class KMSGenerateDataKeyResponse(TypedDict, total=False):
    CiphertextBlob: bytes
    Plaintext: bytes
    KeyId: str


class KMSGenerateDataKeyWithoutPlaintextResponse(TypedDict, total=False):
    CiphertextBlob: bytes
    KeyId: str


class KMSGenerateRandomResponse(TypedDict, total=False):
    Plaintext: bytes


class KMSGetKeyPolicyResponse(TypedDict, total=False):
    Policy: str


class KMSGetKeyRotationStatusResponse(TypedDict, total=False):
    KeyRotationEnabled: bool


class KMSGetParametersForImportResponse(TypedDict, total=False):
    KeyId: str
    ImportToken: bytes
    PublicKey: bytes
    ParametersValidTo: datetime.datetime


class KMSImportKeyMaterialResponse(TypedDict, total=False):
    pass


class KMSListAliasesResponse(TypedDict, total=False):
    Aliases: List[KMSAliasListEntry]
    NextMarker: str
    Truncated: bool


class KMSAliasListEntry(TypedDict, total=False):
    AliasName: str
    AliasArn: str
    TargetKeyId: str


class KMSListGrantsResponse(TypedDict, total=False):
    Grants: List[KMSGrantListEntry]
    NextMarker: str
    Truncated: bool


class KMSGrantListEntry(TypedDict, total=False):
    KeyId: str
    GrantId: str
    Name: str
    CreationDate: datetime.datetime
    GranteePrincipal: str
    RetiringPrincipal: str
    IssuingAccount: str
    Operations: List[str]
    Constraints: KMSGrantConstraints


class KMSListKeyPoliciesResponse(TypedDict, total=False):
    PolicyNames: List[str]
    NextMarker: str
    Truncated: bool


class KMSListKeysResponse(TypedDict, total=False):
    Keys: List[KMSKeyListEntry]
    NextMarker: str
    Truncated: bool


class KMSKeyListEntry(TypedDict, total=False):
    KeyId: str
    KeyArn: str


class KMSListResourceTagsResponse(TypedDict, total=False):
    Tags: List[KMSTag]
    NextMarker: str
    Truncated: bool


class KMSReEncryptResponse(TypedDict, total=False):
    CiphertextBlob: bytes
    SourceKeyId: str
    KeyId: str


class KMSScheduleKeyDeletionResponse(TypedDict, total=False):
    KeyId: str
    DeletionDate: datetime.datetime


class KMSUpdateCustomKeyStoreResponse(TypedDict, total=False):
    pass


class Lambda(BaseClient):
    def add_layer_version_permission(self, *,
        LayerName: str,
        VersionNumber: int,
        StatementId: str,
        Action: str,
        Principal: str,
        OrganizationId: str = ...,
        RevisionId: str = ...
    ) -> LambdaAddLayerVersionPermissionResponse: ...

    def add_permission(self, *,
        FunctionName: str,
        StatementId: str,
        Action: str,
        Principal: str,
        SourceArn: str = ...,
        SourceAccount: str = ...,
        EventSourceToken: str = ...,
        Qualifier: str = ...,
        RevisionId: str = ...
    ) -> LambdaAddPermissionResponse: ...

    def create_alias(self, *,
        FunctionName: str,
        Name: str,
        FunctionVersion: str,
        Description: str = ...,
        RoutingConfig: LambdaAliasRoutingConfiguration = ...
    ) -> LambdaAliasConfiguration: ...

    def create_event_source_mapping(self, *,
        EventSourceArn: str,
        FunctionName: str,
        Enabled: bool = ...,
        BatchSize: int = ...,
        StartingPosition: str = ...,
        StartingPositionTimestamp: datetime.datetime = ...
    ) -> LambdaEventSourceMappingConfiguration: ...

    def create_function(self, *,
        FunctionName: str,
        Runtime: str,
        Role: str,
        Handler: str,
        Code: LambdaFunctionCode,
        Description: str = ...,
        Timeout: int = ...,
        MemorySize: int = ...,
        Publish: bool = ...,
        VpcConfig: LambdaVpcConfig = ...,
        DeadLetterConfig: LambdaDeadLetterConfig = ...,
        Environment: LambdaEnvironment = ...,
        KMSKeyArn: str = ...,
        TracingConfig: LambdaTracingConfig = ...,
        Tags: Dict[str, str] = ...,
        Layers: List[str] = ...
    ) -> LambdaFunctionConfiguration: ...

    def delete_alias(self, *,
        FunctionName: str,
        Name: str
    ): ...

    def delete_event_source_mapping(self, *,
        UUID: str
    ) -> LambdaEventSourceMappingConfiguration: ...

    def delete_function(self, *,
        FunctionName: str,
        Qualifier: str = ...
    ): ...

    def delete_function_concurrency(self, *,
        FunctionName: str
    ): ...

    def delete_layer_version(self, *,
        LayerName: str,
        VersionNumber: int
    ): ...

    def get_account_settings(self) -> LambdaGetAccountSettingsResponse: ...

    def get_alias(self, *,
        FunctionName: str,
        Name: str
    ) -> LambdaAliasConfiguration: ...

    def get_event_source_mapping(self, *,
        UUID: str
    ) -> LambdaEventSourceMappingConfiguration: ...

    def get_function(self, *,
        FunctionName: str,
        Qualifier: str = ...
    ) -> LambdaGetFunctionResponse: ...

    def get_function_configuration(self, *,
        FunctionName: str,
        Qualifier: str = ...
    ) -> LambdaFunctionConfiguration: ...

    def get_layer_version(self, *,
        LayerName: str,
        VersionNumber: int
    ) -> LambdaGetLayerVersionResponse: ...

    def get_layer_version_by_arn(self, *,
        Arn: str
    ) -> LambdaGetLayerVersionResponse: ...

    def get_layer_version_policy(self, *,
        LayerName: str,
        VersionNumber: int
    ) -> LambdaGetLayerVersionPolicyResponse: ...

    def get_policy(self, *,
        FunctionName: str,
        Qualifier: str = ...
    ) -> LambdaGetPolicyResponse: ...

    def invoke(self, *,
        FunctionName: str,
        InvocationType: str = ...,
        LogType: str = ...,
        ClientContext: str = ...,
        Payload: bytes = ...,
        Qualifier: str = ...
    ) -> LambdaInvocationResponse: ...

    def invoke_async(self, *,
        FunctionName: str,
        InvokeArgs: bytes
    ) -> LambdaInvokeAsyncResponse: ...

    def list_aliases(self, *,
        FunctionName: str,
        FunctionVersion: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> LambdaListAliasesResponse: ...

    def list_event_source_mappings(self, *,
        EventSourceArn: str = ...,
        FunctionName: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> LambdaListEventSourceMappingsResponse: ...

    def list_functions(self, *,
        MasterRegion: str = ...,
        FunctionVersion: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> LambdaListFunctionsResponse: ...

    def list_layer_versions(self, *,
        LayerName: str,
        CompatibleRuntime: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> LambdaListLayerVersionsResponse: ...

    def list_layers(self, *,
        CompatibleRuntime: str = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> LambdaListLayersResponse: ...

    def list_tags(self, *,
        Resource: str
    ) -> LambdaListTagsResponse: ...

    def list_versions_by_function(self, *,
        FunctionName: str,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> LambdaListVersionsByFunctionResponse: ...

    def publish_layer_version(self, *,
        LayerName: str,
        Content: LambdaLayerVersionContentInput,
        Description: str = ...,
        CompatibleRuntimes: List[str] = ...,
        LicenseInfo: str = ...
    ) -> LambdaPublishLayerVersionResponse: ...

    def publish_version(self, *,
        FunctionName: str,
        CodeSha256: str = ...,
        Description: str = ...,
        RevisionId: str = ...
    ) -> LambdaFunctionConfiguration: ...

    def put_function_concurrency(self, *,
        FunctionName: str,
        ReservedConcurrentExecutions: int
    ) -> LambdaConcurrency: ...

    def remove_layer_version_permission(self, *,
        LayerName: str,
        VersionNumber: int,
        StatementId: str,
        RevisionId: str = ...
    ): ...

    def remove_permission(self, *,
        FunctionName: str,
        StatementId: str,
        Qualifier: str = ...,
        RevisionId: str = ...
    ): ...

    def tag_resource(self, *,
        Resource: str,
        Tags: Dict[str, str]
    ): ...

    def untag_resource(self, *,
        Resource: str,
        TagKeys: List[str]
    ): ...

    def update_alias(self, *,
        FunctionName: str,
        Name: str,
        FunctionVersion: str = ...,
        Description: str = ...,
        RoutingConfig: LambdaAliasRoutingConfiguration = ...,
        RevisionId: str = ...
    ) -> LambdaAliasConfiguration: ...

    def update_event_source_mapping(self, *,
        UUID: str,
        FunctionName: str = ...,
        Enabled: bool = ...,
        BatchSize: int = ...
    ) -> LambdaEventSourceMappingConfiguration: ...

    def update_function_code(self, *,
        FunctionName: str,
        ZipFile: bytes = ...,
        S3Bucket: str = ...,
        S3Key: str = ...,
        S3ObjectVersion: str = ...,
        Publish: bool = ...,
        DryRun: bool = ...,
        RevisionId: str = ...
    ) -> LambdaFunctionConfiguration: ...

    def update_function_configuration(self, *,
        FunctionName: str,
        Role: str = ...,
        Handler: str = ...,
        Description: str = ...,
        Timeout: int = ...,
        MemorySize: int = ...,
        VpcConfig: LambdaVpcConfig = ...,
        Environment: LambdaEnvironment = ...,
        Runtime: str = ...,
        DeadLetterConfig: LambdaDeadLetterConfig = ...,
        KMSKeyArn: str = ...,
        TracingConfig: LambdaTracingConfig = ...,
        RevisionId: str = ...,
        Layers: List[str] = ...
    ) -> LambdaFunctionConfiguration: ...


class LambdaAddLayerVersionPermissionResponse(TypedDict, total=False):
    Statement: str
    RevisionId: str


class LambdaAddPermissionResponse(TypedDict, total=False):
    Statement: str


class LambdaAliasRoutingConfiguration(TypedDict, total=False):
    AdditionalVersionWeights: Dict[str, float]


class LambdaAliasConfiguration(TypedDict, total=False):
    AliasArn: str
    Name: str
    FunctionVersion: str
    Description: str
    RoutingConfig: LambdaAliasRoutingConfiguration
    RevisionId: str


class LambdaEventSourceMappingConfiguration(TypedDict, total=False):
    UUID: str
    BatchSize: int
    EventSourceArn: str
    FunctionArn: str
    LastModified: datetime.datetime
    LastProcessingResult: str
    State: str
    StateTransitionReason: str


class LambdaFunctionCode(TypedDict, total=False):
    ZipFile: bytes
    S3Bucket: str
    S3Key: str
    S3ObjectVersion: str


class LambdaVpcConfig(TypedDict, total=False):
    SubnetIds: List[str]
    SecurityGroupIds: List[str]


class LambdaDeadLetterConfig(TypedDict, total=False):
    TargetArn: str


class LambdaEnvironment(TypedDict, total=False):
    Variables: Dict[str, str]


class LambdaTracingConfig(TypedDict, total=False):
    Mode: str


class LambdaFunctionConfiguration(TypedDict, total=False):
    FunctionName: str
    FunctionArn: str
    Runtime: str
    Role: str
    Handler: str
    CodeSize: int
    Description: str
    Timeout: int
    MemorySize: int
    LastModified: str
    CodeSha256: str
    Version: str
    VpcConfig: LambdaVpcConfigResponse
    DeadLetterConfig: LambdaDeadLetterConfig
    Environment: LambdaEnvironmentResponse
    KMSKeyArn: str
    TracingConfig: LambdaTracingConfigResponse
    MasterArn: str
    RevisionId: str
    Layers: List[LambdaLayer]


class LambdaVpcConfigResponse(TypedDict, total=False):
    SubnetIds: List[str]
    SecurityGroupIds: List[str]
    VpcId: str


class LambdaEnvironmentResponse(TypedDict, total=False):
    Variables: Dict[str, str]
    Error: LambdaEnvironmentError


class LambdaEnvironmentError(TypedDict, total=False):
    ErrorCode: str
    Message: str


class LambdaTracingConfigResponse(TypedDict, total=False):
    Mode: str


class LambdaLayer(TypedDict, total=False):
    Arn: str
    CodeSize: int


class LambdaGetAccountSettingsResponse(TypedDict, total=False):
    AccountLimit: LambdaAccountLimit
    AccountUsage: LambdaAccountUsage


class LambdaAccountLimit(TypedDict, total=False):
    TotalCodeSize: int
    CodeSizeUnzipped: int
    CodeSizeZipped: int
    ConcurrentExecutions: int
    UnreservedConcurrentExecutions: int


class LambdaAccountUsage(TypedDict, total=False):
    TotalCodeSize: int
    FunctionCount: int


class LambdaGetFunctionResponse(TypedDict, total=False):
    Configuration: LambdaFunctionConfiguration
    Code: LambdaFunctionCodeLocation
    Tags: Dict[str, str]
    Concurrency: LambdaConcurrency


class LambdaFunctionCodeLocation(TypedDict, total=False):
    RepositoryType: str
    Location: str


class LambdaConcurrency(TypedDict, total=False):
    ReservedConcurrentExecutions: int


class LambdaGetLayerVersionResponse(TypedDict, total=False):
    Content: LambdaLayerVersionContentOutput
    LayerArn: str
    LayerVersionArn: str
    Description: str
    CreatedDate: str
    Version: int
    CompatibleRuntimes: List[str]
    LicenseInfo: str


class LambdaLayerVersionContentOutput(TypedDict, total=False):
    Location: str
    CodeSha256: str
    CodeSize: int


class LambdaGetLayerVersionPolicyResponse(TypedDict, total=False):
    Policy: str
    RevisionId: str


class LambdaGetPolicyResponse(TypedDict, total=False):
    Policy: str
    RevisionId: str


class LambdaInvocationResponse(TypedDict, total=False):
    StatusCode: int
    FunctionError: str
    LogResult: str
    Payload: bytes
    ExecutedVersion: str


class LambdaInvokeAsyncResponse(TypedDict, total=False):
    Status: int


class LambdaListAliasesResponse(TypedDict, total=False):
    NextMarker: str
    Aliases: List[LambdaAliasConfiguration]


class LambdaListEventSourceMappingsResponse(TypedDict, total=False):
    NextMarker: str
    EventSourceMappings: List[LambdaEventSourceMappingConfiguration]


class LambdaListFunctionsResponse(TypedDict, total=False):
    NextMarker: str
    Functions: List[LambdaFunctionConfiguration]


class LambdaListLayerVersionsResponse(TypedDict, total=False):
    NextMarker: str
    LayerVersions: List[LambdaLayerVersionsListItem]


class LambdaLayerVersionsListItem(TypedDict, total=False):
    LayerVersionArn: str
    Version: int
    Description: str
    CreatedDate: str
    CompatibleRuntimes: List[str]
    LicenseInfo: str


class LambdaListLayersResponse(TypedDict, total=False):
    NextMarker: str
    Layers: List[LambdaLayersListItem]


class LambdaLayersListItem(TypedDict, total=False):
    LayerName: str
    LayerArn: str
    LatestMatchingVersion: LambdaLayerVersionsListItem


class LambdaListTagsResponse(TypedDict, total=False):
    Tags: Dict[str, str]


class LambdaListVersionsByFunctionResponse(TypedDict, total=False):
    NextMarker: str
    Versions: List[LambdaFunctionConfiguration]


class LambdaLayerVersionContentInput(TypedDict, total=False):
    S3Bucket: str
    S3Key: str
    S3ObjectVersion: str
    ZipFile: bytes


class LambdaPublishLayerVersionResponse(TypedDict, total=False):
    Content: LambdaLayerVersionContentOutput
    LayerArn: str
    LayerVersionArn: str
    Description: str
    CreatedDate: str
    Version: int
    CompatibleRuntimes: List[str]
    LicenseInfo: str


class LexModelBuildingService(BaseClient):
    def create_bot_version(self, *,
        name: str,
        checksum: str = ...
    ) -> LexModelBuildingServiceCreateBotVersionResponse: ...

    def create_intent_version(self, *,
        name: str,
        checksum: str = ...
    ) -> LexModelBuildingServiceCreateIntentVersionResponse: ...

    def create_slot_type_version(self, *,
        name: str,
        checksum: str = ...
    ) -> LexModelBuildingServiceCreateSlotTypeVersionResponse: ...

    def delete_bot(self, *,
        name: str
    ): ...

    def delete_bot_alias(self, *,
        name: str,
        botName: str
    ): ...

    def delete_bot_channel_association(self, *,
        name: str,
        botName: str,
        botAlias: str
    ): ...

    def delete_bot_version(self, *,
        name: str,
        version: str
    ): ...

    def delete_intent(self, *,
        name: str
    ): ...

    def delete_intent_version(self, *,
        name: str,
        version: str
    ): ...

    def delete_slot_type(self, *,
        name: str
    ): ...

    def delete_slot_type_version(self, *,
        name: str,
        version: str
    ): ...

    def delete_utterances(self, *,
        botName: str,
        userId: str
    ): ...

    def get_bot(self, *,
        name: str,
        versionOrAlias: str
    ) -> LexModelBuildingServiceGetBotResponse: ...

    def get_bot_alias(self, *,
        name: str,
        botName: str
    ) -> LexModelBuildingServiceGetBotAliasResponse: ...

    def get_bot_aliases(self, *,
        botName: str,
        nextToken: str = ...,
        maxResults: int = ...,
        nameContains: str = ...
    ) -> LexModelBuildingServiceGetBotAliasesResponse: ...

    def get_bot_channel_association(self, *,
        name: str,
        botName: str,
        botAlias: str
    ) -> LexModelBuildingServiceGetBotChannelAssociationResponse: ...

    def get_bot_channel_associations(self, *,
        botName: str,
        botAlias: str,
        nextToken: str = ...,
        maxResults: int = ...,
        nameContains: str = ...
    ) -> LexModelBuildingServiceGetBotChannelAssociationsResponse: ...

    def get_bot_versions(self, *,
        name: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> LexModelBuildingServiceGetBotVersionsResponse: ...

    def get_bots(self, *,
        nextToken: str = ...,
        maxResults: int = ...,
        nameContains: str = ...
    ) -> LexModelBuildingServiceGetBotsResponse: ...

    def get_builtin_intent(self, *,
        signature: str
    ) -> LexModelBuildingServiceGetBuiltinIntentResponse: ...

    def get_builtin_intents(self, *,
        locale: str = ...,
        signatureContains: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> LexModelBuildingServiceGetBuiltinIntentsResponse: ...

    def get_builtin_slot_types(self, *,
        locale: str = ...,
        signatureContains: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> LexModelBuildingServiceGetBuiltinSlotTypesResponse: ...

    def get_export(self, *,
        name: str,
        version: str,
        resourceType: str,
        exportType: str
    ) -> LexModelBuildingServiceGetExportResponse: ...

    def get_import(self, *,
        importId: str
    ) -> LexModelBuildingServiceGetImportResponse: ...

    def get_intent(self, *,
        name: str,
        version: str
    ) -> LexModelBuildingServiceGetIntentResponse: ...

    def get_intent_versions(self, *,
        name: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> LexModelBuildingServiceGetIntentVersionsResponse: ...

    def get_intents(self, *,
        nextToken: str = ...,
        maxResults: int = ...,
        nameContains: str = ...
    ) -> LexModelBuildingServiceGetIntentsResponse: ...

    def get_slot_type(self, *,
        name: str,
        version: str
    ) -> LexModelBuildingServiceGetSlotTypeResponse: ...

    def get_slot_type_versions(self, *,
        name: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> LexModelBuildingServiceGetSlotTypeVersionsResponse: ...

    def get_slot_types(self, *,
        nextToken: str = ...,
        maxResults: int = ...,
        nameContains: str = ...
    ) -> LexModelBuildingServiceGetSlotTypesResponse: ...

    def get_utterances_view(self, *,
        botName: str,
        botVersions: List[str],
        statusType: str
    ) -> LexModelBuildingServiceGetUtterancesViewResponse: ...

    def put_bot(self, *,
        name: str,
        locale: str,
        childDirected: bool,
        description: str = ...,
        intents: List[LexModelBuildingServiceIntent] = ...,
        clarificationPrompt: LexModelBuildingServicePrompt = ...,
        abortStatement: LexModelBuildingServiceStatement = ...,
        idleSessionTTLInSeconds: int = ...,
        voiceId: str = ...,
        checksum: str = ...,
        processBehavior: str = ...,
        createVersion: bool = ...
    ) -> LexModelBuildingServicePutBotResponse: ...

    def put_bot_alias(self, *,
        name: str,
        botVersion: str,
        botName: str,
        description: str = ...,
        checksum: str = ...
    ) -> LexModelBuildingServicePutBotAliasResponse: ...

    def put_intent(self, *,
        name: str,
        description: str = ...,
        slots: List[LexModelBuildingServiceSlot] = ...,
        sampleUtterances: List[str] = ...,
        confirmationPrompt: LexModelBuildingServicePrompt = ...,
        rejectionStatement: LexModelBuildingServiceStatement = ...,
        followUpPrompt: LexModelBuildingServiceFollowUpPrompt = ...,
        conclusionStatement: LexModelBuildingServiceStatement = ...,
        dialogCodeHook: LexModelBuildingServiceCodeHook = ...,
        fulfillmentActivity: LexModelBuildingServiceFulfillmentActivity = ...,
        parentIntentSignature: str = ...,
        checksum: str = ...,
        createVersion: bool = ...
    ) -> LexModelBuildingServicePutIntentResponse: ...

    def put_slot_type(self, *,
        name: str,
        description: str = ...,
        enumerationValues: List[LexModelBuildingServiceEnumerationValue] = ...,
        checksum: str = ...,
        valueSelectionStrategy: str = ...,
        createVersion: bool = ...
    ) -> LexModelBuildingServicePutSlotTypeResponse: ...

    def start_import(self, *,
        payload: bytes,
        resourceType: str,
        mergeStrategy: str
    ) -> LexModelBuildingServiceStartImportResponse: ...


class LexModelBuildingServiceCreateBotVersionResponse(TypedDict, total=False):
    name: str
    description: str
    intents: List[LexModelBuildingServiceIntent]
    clarificationPrompt: LexModelBuildingServicePrompt
    abortStatement: LexModelBuildingServiceStatement
    status: str
    failureReason: str
    lastUpdatedDate: datetime.datetime
    createdDate: datetime.datetime
    idleSessionTTLInSeconds: int
    voiceId: str
    checksum: str
    version: str
    locale: str
    childDirected: bool


class LexModelBuildingServiceIntent(TypedDict):
    intentName: str
    intentVersion: str


class _LexModelBuildingServicePrompt(TypedDict):
    messages: List[LexModelBuildingServiceMessage]
    maxAttempts: int


class LexModelBuildingServicePrompt(_LexModelBuildingServicePrompt, total=False):
    responseCard: str


class _LexModelBuildingServiceMessage(TypedDict):
    contentType: str
    content: str


class LexModelBuildingServiceMessage(_LexModelBuildingServiceMessage, total=False):
    groupNumber: int


class _LexModelBuildingServiceStatement(TypedDict):
    messages: List[LexModelBuildingServiceMessage]


class LexModelBuildingServiceStatement(_LexModelBuildingServiceStatement, total=False):
    responseCard: str


class LexModelBuildingServiceCreateIntentVersionResponse(TypedDict, total=False):
    name: str
    description: str
    slots: List[LexModelBuildingServiceSlot]
    sampleUtterances: List[str]
    confirmationPrompt: LexModelBuildingServicePrompt
    rejectionStatement: LexModelBuildingServiceStatement
    followUpPrompt: LexModelBuildingServiceFollowUpPrompt
    conclusionStatement: LexModelBuildingServiceStatement
    dialogCodeHook: LexModelBuildingServiceCodeHook
    fulfillmentActivity: LexModelBuildingServiceFulfillmentActivity
    parentIntentSignature: str
    lastUpdatedDate: datetime.datetime
    createdDate: datetime.datetime
    version: str
    checksum: str


class _LexModelBuildingServiceSlot(TypedDict):
    name: str
    slotConstraint: str


class LexModelBuildingServiceSlot(_LexModelBuildingServiceSlot, total=False):
    description: str
    slotType: str
    slotTypeVersion: str
    valueElicitationPrompt: LexModelBuildingServicePrompt
    priority: int
    sampleUtterances: List[str]
    responseCard: str


class LexModelBuildingServiceFollowUpPrompt(TypedDict):
    prompt: LexModelBuildingServicePrompt
    rejectionStatement: LexModelBuildingServiceStatement


class LexModelBuildingServiceCodeHook(TypedDict):
    uri: str
    messageVersion: str


class _LexModelBuildingServiceFulfillmentActivity(TypedDict):
    type: str


class LexModelBuildingServiceFulfillmentActivity(_LexModelBuildingServiceFulfillmentActivity, total=False):
    codeHook: LexModelBuildingServiceCodeHook


class LexModelBuildingServiceCreateSlotTypeVersionResponse(TypedDict, total=False):
    name: str
    description: str
    enumerationValues: List[LexModelBuildingServiceEnumerationValue]
    lastUpdatedDate: datetime.datetime
    createdDate: datetime.datetime
    version: str
    checksum: str
    valueSelectionStrategy: str


class _LexModelBuildingServiceEnumerationValue(TypedDict):
    value: str


class LexModelBuildingServiceEnumerationValue(_LexModelBuildingServiceEnumerationValue, total=False):
    synonyms: List[str]


class LexModelBuildingServiceGetBotResponse(TypedDict, total=False):
    name: str
    description: str
    intents: List[LexModelBuildingServiceIntent]
    clarificationPrompt: LexModelBuildingServicePrompt
    abortStatement: LexModelBuildingServiceStatement
    status: str
    failureReason: str
    lastUpdatedDate: datetime.datetime
    createdDate: datetime.datetime
    idleSessionTTLInSeconds: int
    voiceId: str
    checksum: str
    version: str
    locale: str
    childDirected: bool


class LexModelBuildingServiceGetBotAliasResponse(TypedDict, total=False):
    name: str
    description: str
    botVersion: str
    botName: str
    lastUpdatedDate: datetime.datetime
    createdDate: datetime.datetime
    checksum: str


class LexModelBuildingServiceGetBotAliasesResponse(TypedDict, total=False):
    BotAliases: List[LexModelBuildingServiceBotAliasMetadata]
    nextToken: str


class LexModelBuildingServiceBotAliasMetadata(TypedDict, total=False):
    name: str
    description: str
    botVersion: str
    botName: str
    lastUpdatedDate: datetime.datetime
    createdDate: datetime.datetime
    checksum: str


class LexModelBuildingServiceGetBotChannelAssociationResponse(TypedDict, total=False):
    name: str
    description: str
    botAlias: str
    botName: str
    createdDate: datetime.datetime
    type: str
    botConfiguration: Dict[str, str]
    status: str
    failureReason: str


class LexModelBuildingServiceGetBotChannelAssociationsResponse(TypedDict, total=False):
    botChannelAssociations: List[LexModelBuildingServiceBotChannelAssociation]
    nextToken: str


class LexModelBuildingServiceBotChannelAssociation(TypedDict, total=False):
    name: str
    description: str
    botAlias: str
    botName: str
    createdDate: datetime.datetime
    type: str
    botConfiguration: Dict[str, str]
    status: str
    failureReason: str


class LexModelBuildingServiceGetBotVersionsResponse(TypedDict, total=False):
    bots: List[LexModelBuildingServiceBotMetadata]
    nextToken: str


class LexModelBuildingServiceBotMetadata(TypedDict, total=False):
    name: str
    description: str
    status: str
    lastUpdatedDate: datetime.datetime
    createdDate: datetime.datetime
    version: str


class LexModelBuildingServiceGetBotsResponse(TypedDict, total=False):
    bots: List[LexModelBuildingServiceBotMetadata]
    nextToken: str


class LexModelBuildingServiceGetBuiltinIntentResponse(TypedDict, total=False):
    signature: str
    supportedLocales: List[str]
    slots: List[LexModelBuildingServiceBuiltinIntentSlot]


class LexModelBuildingServiceBuiltinIntentSlot(TypedDict, total=False):
    name: str


class LexModelBuildingServiceGetBuiltinIntentsResponse(TypedDict, total=False):
    intents: List[LexModelBuildingServiceBuiltinIntentMetadata]
    nextToken: str


class LexModelBuildingServiceBuiltinIntentMetadata(TypedDict, total=False):
    signature: str
    supportedLocales: List[str]


class LexModelBuildingServiceGetBuiltinSlotTypesResponse(TypedDict, total=False):
    slotTypes: List[LexModelBuildingServiceBuiltinSlotTypeMetadata]
    nextToken: str


class LexModelBuildingServiceBuiltinSlotTypeMetadata(TypedDict, total=False):
    signature: str
    supportedLocales: List[str]


class LexModelBuildingServiceGetExportResponse(TypedDict, total=False):
    name: str
    version: str
    resourceType: str
    exportType: str
    exportStatus: str
    failureReason: str
    url: str


class LexModelBuildingServiceGetImportResponse(TypedDict, total=False):
    name: str
    resourceType: str
    mergeStrategy: str
    importId: str
    importStatus: str
    failureReason: List[str]
    createdDate: datetime.datetime


class LexModelBuildingServiceGetIntentResponse(TypedDict, total=False):
    name: str
    description: str
    slots: List[LexModelBuildingServiceSlot]
    sampleUtterances: List[str]
    confirmationPrompt: LexModelBuildingServicePrompt
    rejectionStatement: LexModelBuildingServiceStatement
    followUpPrompt: LexModelBuildingServiceFollowUpPrompt
    conclusionStatement: LexModelBuildingServiceStatement
    dialogCodeHook: LexModelBuildingServiceCodeHook
    fulfillmentActivity: LexModelBuildingServiceFulfillmentActivity
    parentIntentSignature: str
    lastUpdatedDate: datetime.datetime
    createdDate: datetime.datetime
    version: str
    checksum: str


class LexModelBuildingServiceGetIntentVersionsResponse(TypedDict, total=False):
    intents: List[LexModelBuildingServiceIntentMetadata]
    nextToken: str


class LexModelBuildingServiceIntentMetadata(TypedDict, total=False):
    name: str
    description: str
    lastUpdatedDate: datetime.datetime
    createdDate: datetime.datetime
    version: str


class LexModelBuildingServiceGetIntentsResponse(TypedDict, total=False):
    intents: List[LexModelBuildingServiceIntentMetadata]
    nextToken: str


class LexModelBuildingServiceGetSlotTypeResponse(TypedDict, total=False):
    name: str
    description: str
    enumerationValues: List[LexModelBuildingServiceEnumerationValue]
    lastUpdatedDate: datetime.datetime
    createdDate: datetime.datetime
    version: str
    checksum: str
    valueSelectionStrategy: str


class LexModelBuildingServiceGetSlotTypeVersionsResponse(TypedDict, total=False):
    slotTypes: List[LexModelBuildingServiceSlotTypeMetadata]
    nextToken: str


class LexModelBuildingServiceSlotTypeMetadata(TypedDict, total=False):
    name: str
    description: str
    lastUpdatedDate: datetime.datetime
    createdDate: datetime.datetime
    version: str


class LexModelBuildingServiceGetSlotTypesResponse(TypedDict, total=False):
    slotTypes: List[LexModelBuildingServiceSlotTypeMetadata]
    nextToken: str


class LexModelBuildingServiceGetUtterancesViewResponse(TypedDict, total=False):
    botName: str
    utterances: List[LexModelBuildingServiceUtteranceList]


class LexModelBuildingServiceUtteranceList(TypedDict, total=False):
    botVersion: str
    utterances: List[LexModelBuildingServiceUtteranceData]


class LexModelBuildingServiceUtteranceData(TypedDict, total=False):
    utteranceString: str
    count: int
    distinctUsers: int
    firstUtteredDate: datetime.datetime
    lastUtteredDate: datetime.datetime


class LexModelBuildingServicePutBotResponse(TypedDict, total=False):
    name: str
    description: str
    intents: List[LexModelBuildingServiceIntent]
    clarificationPrompt: LexModelBuildingServicePrompt
    abortStatement: LexModelBuildingServiceStatement
    status: str
    failureReason: str
    lastUpdatedDate: datetime.datetime
    createdDate: datetime.datetime
    idleSessionTTLInSeconds: int
    voiceId: str
    checksum: str
    version: str
    locale: str
    childDirected: bool
    createVersion: bool


class LexModelBuildingServicePutBotAliasResponse(TypedDict, total=False):
    name: str
    description: str
    botVersion: str
    botName: str
    lastUpdatedDate: datetime.datetime
    createdDate: datetime.datetime
    checksum: str


class LexModelBuildingServicePutIntentResponse(TypedDict, total=False):
    name: str
    description: str
    slots: List[LexModelBuildingServiceSlot]
    sampleUtterances: List[str]
    confirmationPrompt: LexModelBuildingServicePrompt
    rejectionStatement: LexModelBuildingServiceStatement
    followUpPrompt: LexModelBuildingServiceFollowUpPrompt
    conclusionStatement: LexModelBuildingServiceStatement
    dialogCodeHook: LexModelBuildingServiceCodeHook
    fulfillmentActivity: LexModelBuildingServiceFulfillmentActivity
    parentIntentSignature: str
    lastUpdatedDate: datetime.datetime
    createdDate: datetime.datetime
    version: str
    checksum: str
    createVersion: bool


class LexModelBuildingServicePutSlotTypeResponse(TypedDict, total=False):
    name: str
    description: str
    enumerationValues: List[LexModelBuildingServiceEnumerationValue]
    lastUpdatedDate: datetime.datetime
    createdDate: datetime.datetime
    version: str
    checksum: str
    valueSelectionStrategy: str
    createVersion: bool


class LexModelBuildingServiceStartImportResponse(TypedDict, total=False):
    name: str
    resourceType: str
    mergeStrategy: str
    importId: str
    importStatus: str
    createdDate: datetime.datetime


class LexRuntimeService(BaseClient):
    def post_content(self, *,
        botName: str,
        botAlias: str,
        userId: str,
        contentType: str,
        inputStream: bytes,
        sessionAttributes: str = ...,
        requestAttributes: str = ...,
        accept: str = ...
    ) -> LexRuntimeServicePostContentResponse: ...

    def post_text(self, *,
        botName: str,
        botAlias: str,
        userId: str,
        inputText: str,
        sessionAttributes: Dict[str, str] = ...,
        requestAttributes: Dict[str, str] = ...
    ) -> LexRuntimeServicePostTextResponse: ...


class LexRuntimeServicePostContentResponse(TypedDict, total=False):
    contentType: str
    intentName: str
    slots: str
    sessionAttributes: str
    message: str
    messageFormat: str
    dialogState: str
    slotToElicit: str
    inputTranscript: str
    audioStream: bytes


class LexRuntimeServicePostTextResponse(TypedDict, total=False):
    intentName: str
    slots: Dict[str, str]
    sessionAttributes: Dict[str, str]
    message: str
    messageFormat: str
    dialogState: str
    slotToElicit: str
    responseCard: LexRuntimeServiceResponseCard


class LexRuntimeServiceResponseCard(TypedDict, total=False):
    version: str
    contentType: str
    genericAttachments: List[LexRuntimeServiceGenericAttachment]


class LexRuntimeServiceGenericAttachment(TypedDict, total=False):
    title: str
    subTitle: str
    attachmentLinkUrl: str
    imageUrl: str
    buttons: List[LexRuntimeServiceButton]


class LexRuntimeServiceButton(TypedDict):
    text: str
    value: str


class LicenseManager(BaseClient):
    def create_license_configuration(self, *,
        Name: str,
        LicenseCountingType: str,
        Description: str = ...,
        LicenseCount: int = ...,
        LicenseCountHardLimit: bool = ...,
        LicenseRules: List[str] = ...,
        Tags: List[LicenseManagerTag] = ...
    ) -> LicenseManagerCreateLicenseConfigurationResponse: ...

    def delete_license_configuration(self, *,
        LicenseConfigurationArn: str
    ) -> LicenseManagerDeleteLicenseConfigurationResponse: ...

    def get_license_configuration(self, *,
        LicenseConfigurationArn: str
    ) -> LicenseManagerGetLicenseConfigurationResponse: ...

    def get_service_settings(self) -> LicenseManagerGetServiceSettingsResponse: ...

    def list_associations_for_license_configuration(self, *,
        LicenseConfigurationArn: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> LicenseManagerListAssociationsForLicenseConfigurationResponse: ...

    def list_license_configurations(self, *,
        LicenseConfigurationArns: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        Filters: List[LicenseManagerFilter] = ...
    ) -> LicenseManagerListLicenseConfigurationsResponse: ...

    def list_license_specifications_for_resource(self, *,
        ResourceArn: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> LicenseManagerListLicenseSpecificationsForResourceResponse: ...

    def list_resource_inventory(self, *,
        MaxResults: int = ...,
        NextToken: str = ...,
        Filters: List[LicenseManagerInventoryFilter] = ...
    ) -> LicenseManagerListResourceInventoryResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> LicenseManagerListTagsForResourceResponse: ...

    def list_usage_for_license_configuration(self, *,
        LicenseConfigurationArn: str,
        MaxResults: int = ...,
        NextToken: str = ...,
        Filters: List[LicenseManagerFilter] = ...
    ) -> LicenseManagerListUsageForLicenseConfigurationResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: List[LicenseManagerTag]
    ) -> LicenseManagerTagResourceResponse: ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ) -> LicenseManagerUntagResourceResponse: ...

    def update_license_configuration(self, *,
        LicenseConfigurationArn: str,
        LicenseConfigurationStatus: str = ...,
        LicenseRules: List[str] = ...,
        LicenseCount: int = ...,
        LicenseCountHardLimit: bool = ...,
        Name: str = ...,
        Description: str = ...
    ) -> LicenseManagerUpdateLicenseConfigurationResponse: ...

    def update_license_specifications_for_resource(self, *,
        ResourceArn: str,
        AddLicenseSpecifications: List[LicenseManagerLicenseSpecification] = ...,
        RemoveLicenseSpecifications: List[LicenseManagerLicenseSpecification] = ...
    ) -> LicenseManagerUpdateLicenseSpecificationsForResourceResponse: ...

    def update_service_settings(self, *,
        S3BucketArn: str = ...,
        SnsTopicArn: str = ...,
        OrganizationConfiguration: LicenseManagerOrganizationConfiguration = ...,
        EnableCrossAccountsDiscovery: bool = ...
    ) -> LicenseManagerUpdateServiceSettingsResponse: ...


class LicenseManagerTag(TypedDict, total=False):
    Key: str
    Value: str


class LicenseManagerCreateLicenseConfigurationResponse(TypedDict, total=False):
    LicenseConfigurationArn: str


class LicenseManagerDeleteLicenseConfigurationResponse(TypedDict, total=False):
    pass


class LicenseManagerGetLicenseConfigurationResponse(TypedDict, total=False):
    LicenseConfigurationId: str
    LicenseConfigurationArn: str
    Name: str
    Description: str
    LicenseCountingType: str
    LicenseRules: List[str]
    LicenseCount: int
    LicenseCountHardLimit: bool
    ConsumedLicenses: int
    Status: str
    OwnerAccountId: str
    ConsumedLicenseSummaryList: List[LicenseManagerConsumedLicenseSummary]
    ManagedResourceSummaryList: List[LicenseManagerManagedResourceSummary]
    Tags: List[LicenseManagerTag]


class LicenseManagerConsumedLicenseSummary(TypedDict, total=False):
    ResourceType: str
    ConsumedLicenses: int


class LicenseManagerManagedResourceSummary(TypedDict, total=False):
    ResourceType: str
    AssociationCount: int


class LicenseManagerGetServiceSettingsResponse(TypedDict, total=False):
    S3BucketArn: str
    SnsTopicArn: str
    OrganizationConfiguration: LicenseManagerOrganizationConfiguration
    EnableCrossAccountsDiscovery: bool


class LicenseManagerOrganizationConfiguration(TypedDict):
    EnableIntegration: bool


class LicenseManagerListAssociationsForLicenseConfigurationResponse(TypedDict, total=False):
    LicenseConfigurationAssociations: List[LicenseManagerLicenseConfigurationAssociation]
    NextToken: str


class LicenseManagerLicenseConfigurationAssociation(TypedDict, total=False):
    ResourceArn: str
    ResourceType: str
    ResourceOwnerId: str
    AssociationTime: datetime.datetime


class LicenseManagerFilter(TypedDict, total=False):
    Name: str
    Values: List[str]


class LicenseManagerListLicenseConfigurationsResponse(TypedDict, total=False):
    LicenseConfigurations: List[LicenseManagerLicenseConfiguration]
    NextToken: str


class LicenseManagerLicenseConfiguration(TypedDict, total=False):
    LicenseConfigurationId: str
    LicenseConfigurationArn: str
    Name: str
    Description: str
    LicenseCountingType: str
    LicenseRules: List[str]
    LicenseCount: int
    LicenseCountHardLimit: bool
    ConsumedLicenses: int
    Status: str
    OwnerAccountId: str
    ConsumedLicenseSummaryList: List[LicenseManagerConsumedLicenseSummary]
    ManagedResourceSummaryList: List[LicenseManagerManagedResourceSummary]


class LicenseManagerListLicenseSpecificationsForResourceResponse(TypedDict, total=False):
    LicenseSpecifications: List[LicenseManagerLicenseSpecification]
    NextToken: str


class LicenseManagerLicenseSpecification(TypedDict):
    LicenseConfigurationArn: str


class _LicenseManagerInventoryFilter(TypedDict):
    Name: str
    Condition: str


class LicenseManagerInventoryFilter(_LicenseManagerInventoryFilter, total=False):
    Value: str


class LicenseManagerListResourceInventoryResponse(TypedDict, total=False):
    ResourceInventoryList: List[LicenseManagerResourceInventory]
    NextToken: str


class LicenseManagerResourceInventory(TypedDict, total=False):
    ResourceId: str
    ResourceType: str
    ResourceArn: str
    Platform: str
    PlatformVersion: str
    ResourceOwningAccountId: str


class LicenseManagerListTagsForResourceResponse(TypedDict, total=False):
    Tags: List[LicenseManagerTag]


class LicenseManagerListUsageForLicenseConfigurationResponse(TypedDict, total=False):
    LicenseConfigurationUsageList: List[LicenseManagerLicenseConfigurationUsage]
    NextToken: str


class LicenseManagerLicenseConfigurationUsage(TypedDict, total=False):
    ResourceArn: str
    ResourceType: str
    ResourceStatus: str
    ResourceOwnerId: str
    AssociationTime: datetime.datetime
    ConsumedLicenses: int


class LicenseManagerTagResourceResponse(TypedDict, total=False):
    pass


class LicenseManagerUntagResourceResponse(TypedDict, total=False):
    pass


class LicenseManagerUpdateLicenseConfigurationResponse(TypedDict, total=False):
    pass


class LicenseManagerUpdateLicenseSpecificationsForResourceResponse(TypedDict, total=False):
    pass


class LicenseManagerUpdateServiceSettingsResponse(TypedDict, total=False):
    pass


class Lightsail(BaseClient):
    def allocate_static_ip(self, *,
        staticIpName: str
    ) -> LightsailAllocateStaticIpResult: ...

    def attach_disk(self, *,
        diskName: str,
        instanceName: str,
        diskPath: str
    ) -> LightsailAttachDiskResult: ...

    def attach_instances_to_load_balancer(self, *,
        loadBalancerName: str,
        instanceNames: List[str]
    ) -> LightsailAttachInstancesToLoadBalancerResult: ...

    def attach_load_balancer_tls_certificate(self, *,
        loadBalancerName: str,
        certificateName: str
    ) -> LightsailAttachLoadBalancerTlsCertificateResult: ...

    def attach_static_ip(self, *,
        staticIpName: str,
        instanceName: str
    ) -> LightsailAttachStaticIpResult: ...

    def close_instance_public_ports(self, *,
        portInfo: LightsailPortInfo,
        instanceName: str
    ) -> LightsailCloseInstancePublicPortsResult: ...

    def copy_snapshot(self, *,
        sourceSnapshotName: str,
        targetSnapshotName: str,
        sourceRegion: str
    ) -> LightsailCopySnapshotResult: ...

    def create_cloud_formation_stack(self, *,
        instances: List[LightsailInstanceEntry]
    ) -> LightsailCreateCloudFormationStackResult: ...

    def create_disk(self, *,
        diskName: str,
        availabilityZone: str,
        sizeInGb: int,
        tags: List[LightsailTag] = ...
    ) -> LightsailCreateDiskResult: ...

    def create_disk_from_snapshot(self, *,
        diskName: str,
        diskSnapshotName: str,
        availabilityZone: str,
        sizeInGb: int,
        tags: List[LightsailTag] = ...
    ) -> LightsailCreateDiskFromSnapshotResult: ...

    def create_disk_snapshot(self, *,
        diskSnapshotName: str,
        diskName: str = ...,
        instanceName: str = ...,
        tags: List[LightsailTag] = ...
    ) -> LightsailCreateDiskSnapshotResult: ...

    def create_domain(self, *,
        domainName: str,
        tags: List[LightsailTag] = ...
    ) -> LightsailCreateDomainResult: ...

    def create_domain_entry(self, *,
        domainName: str,
        domainEntry: LightsailDomainEntry
    ) -> LightsailCreateDomainEntryResult: ...

    def create_instance_snapshot(self, *,
        instanceSnapshotName: str,
        instanceName: str,
        tags: List[LightsailTag] = ...
    ) -> LightsailCreateInstanceSnapshotResult: ...

    def create_instances(self, *,
        instanceNames: List[str],
        availabilityZone: str,
        blueprintId: str,
        bundleId: str,
        customImageName: str = ...,
        userData: str = ...,
        keyPairName: str = ...,
        tags: List[LightsailTag] = ...
    ) -> LightsailCreateInstancesResult: ...

    def create_instances_from_snapshot(self, *,
        instanceNames: List[str],
        availabilityZone: str,
        instanceSnapshotName: str,
        bundleId: str,
        attachedDiskMapping: Dict[str, List[LightsailDiskMap]] = ...,
        userData: str = ...,
        keyPairName: str = ...,
        tags: List[LightsailTag] = ...
    ) -> LightsailCreateInstancesFromSnapshotResult: ...

    def create_key_pair(self, *,
        keyPairName: str,
        tags: List[LightsailTag] = ...
    ) -> LightsailCreateKeyPairResult: ...

    def create_load_balancer(self, *,
        loadBalancerName: str,
        instancePort: int,
        healthCheckPath: str = ...,
        certificateName: str = ...,
        certificateDomainName: str = ...,
        certificateAlternativeNames: List[str] = ...,
        tags: List[LightsailTag] = ...
    ) -> LightsailCreateLoadBalancerResult: ...

    def create_load_balancer_tls_certificate(self, *,
        loadBalancerName: str,
        certificateName: str,
        certificateDomainName: str,
        certificateAlternativeNames: List[str] = ...,
        tags: List[LightsailTag] = ...
    ) -> LightsailCreateLoadBalancerTlsCertificateResult: ...

    def create_relational_database(self, *,
        relationalDatabaseName: str,
        relationalDatabaseBlueprintId: str,
        relationalDatabaseBundleId: str,
        masterDatabaseName: str,
        masterUsername: str,
        availabilityZone: str = ...,
        masterUserPassword: str = ...,
        preferredBackupWindow: str = ...,
        preferredMaintenanceWindow: str = ...,
        publiclyAccessible: bool = ...,
        tags: List[LightsailTag] = ...
    ) -> LightsailCreateRelationalDatabaseResult: ...

    def create_relational_database_from_snapshot(self, *,
        relationalDatabaseName: str,
        availabilityZone: str = ...,
        publiclyAccessible: bool = ...,
        relationalDatabaseSnapshotName: str = ...,
        relationalDatabaseBundleId: str = ...,
        sourceRelationalDatabaseName: str = ...,
        restoreTime: datetime.datetime = ...,
        useLatestRestorableTime: bool = ...,
        tags: List[LightsailTag] = ...
    ) -> LightsailCreateRelationalDatabaseFromSnapshotResult: ...

    def create_relational_database_snapshot(self, *,
        relationalDatabaseName: str,
        relationalDatabaseSnapshotName: str,
        tags: List[LightsailTag] = ...
    ) -> LightsailCreateRelationalDatabaseSnapshotResult: ...

    def delete_disk(self, *,
        diskName: str
    ) -> LightsailDeleteDiskResult: ...

    def delete_disk_snapshot(self, *,
        diskSnapshotName: str
    ) -> LightsailDeleteDiskSnapshotResult: ...

    def delete_domain(self, *,
        domainName: str
    ) -> LightsailDeleteDomainResult: ...

    def delete_domain_entry(self, *,
        domainName: str,
        domainEntry: LightsailDomainEntry
    ) -> LightsailDeleteDomainEntryResult: ...

    def delete_instance(self, *,
        instanceName: str
    ) -> LightsailDeleteInstanceResult: ...

    def delete_instance_snapshot(self, *,
        instanceSnapshotName: str
    ) -> LightsailDeleteInstanceSnapshotResult: ...

    def delete_key_pair(self, *,
        keyPairName: str
    ) -> LightsailDeleteKeyPairResult: ...

    def delete_known_host_keys(self, *,
        instanceName: str
    ) -> LightsailDeleteKnownHostKeysResult: ...

    def delete_load_balancer(self, *,
        loadBalancerName: str
    ) -> LightsailDeleteLoadBalancerResult: ...

    def delete_load_balancer_tls_certificate(self, *,
        loadBalancerName: str,
        certificateName: str,
        force: bool = ...
    ) -> LightsailDeleteLoadBalancerTlsCertificateResult: ...

    def delete_relational_database(self, *,
        relationalDatabaseName: str,
        skipFinalSnapshot: bool = ...,
        finalRelationalDatabaseSnapshotName: str = ...
    ) -> LightsailDeleteRelationalDatabaseResult: ...

    def delete_relational_database_snapshot(self, *,
        relationalDatabaseSnapshotName: str
    ) -> LightsailDeleteRelationalDatabaseSnapshotResult: ...

    def detach_disk(self, *,
        diskName: str
    ) -> LightsailDetachDiskResult: ...

    def detach_instances_from_load_balancer(self, *,
        loadBalancerName: str,
        instanceNames: List[str]
    ) -> LightsailDetachInstancesFromLoadBalancerResult: ...

    def detach_static_ip(self, *,
        staticIpName: str
    ) -> LightsailDetachStaticIpResult: ...

    def download_default_key_pair(self) -> LightsailDownloadDefaultKeyPairResult: ...

    def export_snapshot(self, *,
        sourceSnapshotName: str
    ) -> LightsailExportSnapshotResult: ...

    def get_active_names(self, *,
        pageToken: str = ...
    ) -> LightsailGetActiveNamesResult: ...

    def get_blueprints(self, *,
        includeInactive: bool = ...,
        pageToken: str = ...
    ) -> LightsailGetBlueprintsResult: ...

    def get_bundles(self, *,
        includeInactive: bool = ...,
        pageToken: str = ...
    ) -> LightsailGetBundlesResult: ...

    def get_cloud_formation_stack_records(self, *,
        pageToken: str = ...
    ) -> LightsailGetCloudFormationStackRecordsResult: ...

    def get_disk(self, *,
        diskName: str
    ) -> LightsailGetDiskResult: ...

    def get_disk_snapshot(self, *,
        diskSnapshotName: str
    ) -> LightsailGetDiskSnapshotResult: ...

    def get_disk_snapshots(self, *,
        pageToken: str = ...
    ) -> LightsailGetDiskSnapshotsResult: ...

    def get_disks(self, *,
        pageToken: str = ...
    ) -> LightsailGetDisksResult: ...

    def get_domain(self, *,
        domainName: str
    ) -> LightsailGetDomainResult: ...

    def get_domains(self, *,
        pageToken: str = ...
    ) -> LightsailGetDomainsResult: ...

    def get_export_snapshot_records(self, *,
        pageToken: str = ...
    ) -> LightsailGetExportSnapshotRecordsResult: ...

    def get_instance(self, *,
        instanceName: str
    ) -> LightsailGetInstanceResult: ...

    def get_instance_access_details(self, *,
        instanceName: str,
        protocol: str = ...
    ) -> LightsailGetInstanceAccessDetailsResult: ...

    def get_instance_metric_data(self, *,
        instanceName: str,
        metricName: str,
        period: int,
        startTime: datetime.datetime,
        endTime: datetime.datetime,
        unit: str,
        statistics: List[str]
    ) -> LightsailGetInstanceMetricDataResult: ...

    def get_instance_port_states(self, *,
        instanceName: str
    ) -> LightsailGetInstancePortStatesResult: ...

    def get_instance_snapshot(self, *,
        instanceSnapshotName: str
    ) -> LightsailGetInstanceSnapshotResult: ...

    def get_instance_snapshots(self, *,
        pageToken: str = ...
    ) -> LightsailGetInstanceSnapshotsResult: ...

    def get_instance_state(self, *,
        instanceName: str
    ) -> LightsailGetInstanceStateResult: ...

    def get_instances(self, *,
        pageToken: str = ...
    ) -> LightsailGetInstancesResult: ...

    def get_key_pair(self, *,
        keyPairName: str
    ) -> LightsailGetKeyPairResult: ...

    def get_key_pairs(self, *,
        pageToken: str = ...
    ) -> LightsailGetKeyPairsResult: ...

    def get_load_balancer(self, *,
        loadBalancerName: str
    ) -> LightsailGetLoadBalancerResult: ...

    def get_load_balancer_metric_data(self, *,
        loadBalancerName: str,
        metricName: str,
        period: int,
        startTime: datetime.datetime,
        endTime: datetime.datetime,
        unit: str,
        statistics: List[str]
    ) -> LightsailGetLoadBalancerMetricDataResult: ...

    def get_load_balancer_tls_certificates(self, *,
        loadBalancerName: str
    ) -> LightsailGetLoadBalancerTlsCertificatesResult: ...

    def get_load_balancers(self, *,
        pageToken: str = ...
    ) -> LightsailGetLoadBalancersResult: ...

    def get_operation(self, *,
        operationId: str
    ) -> LightsailGetOperationResult: ...

    def get_operations(self, *,
        pageToken: str = ...
    ) -> LightsailGetOperationsResult: ...

    def get_operations_for_resource(self, *,
        resourceName: str,
        pageToken: str = ...
    ) -> LightsailGetOperationsForResourceResult: ...

    def get_regions(self, *,
        includeAvailabilityZones: bool = ...,
        includeRelationalDatabaseAvailabilityZones: bool = ...
    ) -> LightsailGetRegionsResult: ...

    def get_relational_database(self, *,
        relationalDatabaseName: str
    ) -> LightsailGetRelationalDatabaseResult: ...

    def get_relational_database_blueprints(self, *,
        pageToken: str = ...
    ) -> LightsailGetRelationalDatabaseBlueprintsResult: ...

    def get_relational_database_bundles(self, *,
        pageToken: str = ...
    ) -> LightsailGetRelationalDatabaseBundlesResult: ...

    def get_relational_database_events(self, *,
        relationalDatabaseName: str,
        durationInMinutes: int = ...,
        pageToken: str = ...
    ) -> LightsailGetRelationalDatabaseEventsResult: ...

    def get_relational_database_log_events(self, *,
        relationalDatabaseName: str,
        logStreamName: str,
        startTime: datetime.datetime = ...,
        endTime: datetime.datetime = ...,
        startFromHead: bool = ...,
        pageToken: str = ...
    ) -> LightsailGetRelationalDatabaseLogEventsResult: ...

    def get_relational_database_log_streams(self, *,
        relationalDatabaseName: str
    ) -> LightsailGetRelationalDatabaseLogStreamsResult: ...

    def get_relational_database_master_user_password(self, *,
        relationalDatabaseName: str,
        passwordVersion: str = ...
    ) -> LightsailGetRelationalDatabaseMasterUserPasswordResult: ...

    def get_relational_database_metric_data(self, *,
        relationalDatabaseName: str,
        metricName: str,
        period: int,
        startTime: datetime.datetime,
        endTime: datetime.datetime,
        unit: str,
        statistics: List[str]
    ) -> LightsailGetRelationalDatabaseMetricDataResult: ...

    def get_relational_database_parameters(self, *,
        relationalDatabaseName: str,
        pageToken: str = ...
    ) -> LightsailGetRelationalDatabaseParametersResult: ...

    def get_relational_database_snapshot(self, *,
        relationalDatabaseSnapshotName: str
    ) -> LightsailGetRelationalDatabaseSnapshotResult: ...

    def get_relational_database_snapshots(self, *,
        pageToken: str = ...
    ) -> LightsailGetRelationalDatabaseSnapshotsResult: ...

    def get_relational_databases(self, *,
        pageToken: str = ...
    ) -> LightsailGetRelationalDatabasesResult: ...

    def get_static_ip(self, *,
        staticIpName: str
    ) -> LightsailGetStaticIpResult: ...

    def get_static_ips(self, *,
        pageToken: str = ...
    ) -> LightsailGetStaticIpsResult: ...

    def import_key_pair(self, *,
        keyPairName: str,
        publicKeyBase64: str
    ) -> LightsailImportKeyPairResult: ...

    def is_vpc_peered(self) -> LightsailIsVpcPeeredResult: ...

    def open_instance_public_ports(self, *,
        portInfo: LightsailPortInfo,
        instanceName: str
    ) -> LightsailOpenInstancePublicPortsResult: ...

    def peer_vpc(self) -> LightsailPeerVpcResult: ...

    def put_instance_public_ports(self, *,
        portInfos: List[LightsailPortInfo],
        instanceName: str
    ) -> LightsailPutInstancePublicPortsResult: ...

    def reboot_instance(self, *,
        instanceName: str
    ) -> LightsailRebootInstanceResult: ...

    def reboot_relational_database(self, *,
        relationalDatabaseName: str
    ) -> LightsailRebootRelationalDatabaseResult: ...

    def release_static_ip(self, *,
        staticIpName: str
    ) -> LightsailReleaseStaticIpResult: ...

    def start_instance(self, *,
        instanceName: str
    ) -> LightsailStartInstanceResult: ...

    def start_relational_database(self, *,
        relationalDatabaseName: str
    ) -> LightsailStartRelationalDatabaseResult: ...

    def stop_instance(self, *,
        instanceName: str,
        force: bool = ...
    ) -> LightsailStopInstanceResult: ...

    def stop_relational_database(self, *,
        relationalDatabaseName: str,
        relationalDatabaseSnapshotName: str = ...
    ) -> LightsailStopRelationalDatabaseResult: ...

    def tag_resource(self, *,
        resourceName: str,
        tags: List[LightsailTag]
    ) -> LightsailTagResourceResult: ...

    def unpeer_vpc(self) -> LightsailUnpeerVpcResult: ...

    def untag_resource(self, *,
        resourceName: str,
        tagKeys: List[str]
    ) -> LightsailUntagResourceResult: ...

    def update_domain_entry(self, *,
        domainName: str,
        domainEntry: LightsailDomainEntry
    ) -> LightsailUpdateDomainEntryResult: ...

    def update_load_balancer_attribute(self, *,
        loadBalancerName: str,
        attributeName: str,
        attributeValue: str
    ) -> LightsailUpdateLoadBalancerAttributeResult: ...

    def update_relational_database(self, *,
        relationalDatabaseName: str,
        masterUserPassword: str = ...,
        rotateMasterUserPassword: bool = ...,
        preferredBackupWindow: str = ...,
        preferredMaintenanceWindow: str = ...,
        enableBackupRetention: bool = ...,
        disableBackupRetention: bool = ...,
        publiclyAccessible: bool = ...,
        applyImmediately: bool = ...
    ) -> LightsailUpdateRelationalDatabaseResult: ...

    def update_relational_database_parameters(self, *,
        relationalDatabaseName: str,
        parameters: List[LightsailRelationalDatabaseParameter]
    ) -> LightsailUpdateRelationalDatabaseParametersResult: ...


class LightsailAllocateStaticIpResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailOperation(TypedDict, total=False):
    id: str
    resourceName: str
    resourceType: str
    createdAt: datetime.datetime
    location: LightsailResourceLocation
    isTerminal: bool
    operationDetails: str
    operationType: str
    status: str
    statusChangedAt: datetime.datetime
    errorCode: str
    errorDetails: str


class LightsailResourceLocation(TypedDict, total=False):
    availabilityZone: str
    regionName: str


class LightsailAttachDiskResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailAttachInstancesToLoadBalancerResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailAttachLoadBalancerTlsCertificateResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailAttachStaticIpResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailPortInfo(TypedDict, total=False):
    fromPort: int
    toPort: int
    protocol: str


class LightsailCloseInstancePublicPortsResult(TypedDict, total=False):
    operation: LightsailOperation


class LightsailCopySnapshotResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class _LightsailInstanceEntry(TypedDict):
    sourceName: str
    instanceType: str
    portInfoSource: str
    availabilityZone: str


class LightsailInstanceEntry(_LightsailInstanceEntry, total=False):
    userData: str


class LightsailCreateCloudFormationStackResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailTag(TypedDict, total=False):
    key: str
    value: str


class LightsailCreateDiskResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailCreateDiskFromSnapshotResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailCreateDiskSnapshotResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailCreateDomainResult(TypedDict, total=False):
    operation: LightsailOperation


class LightsailDomainEntry(TypedDict, total=False):
    id: str
    name: str
    target: str
    isAlias: bool
    type: str
    options: Dict[str, str]


class LightsailCreateDomainEntryResult(TypedDict, total=False):
    operation: LightsailOperation


class LightsailCreateInstanceSnapshotResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailCreateInstancesResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailDiskMap(TypedDict, total=False):
    originalDiskPath: str
    newDiskName: str


class LightsailCreateInstancesFromSnapshotResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailCreateKeyPairResult(TypedDict, total=False):
    keyPair: LightsailKeyPair
    publicKeyBase64: str
    privateKeyBase64: str
    operation: LightsailOperation


class LightsailKeyPair(TypedDict, total=False):
    name: str
    arn: str
    supportCode: str
    createdAt: datetime.datetime
    location: LightsailResourceLocation
    resourceType: str
    tags: List[LightsailTag]
    fingerprint: str


class LightsailCreateLoadBalancerResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailCreateLoadBalancerTlsCertificateResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailCreateRelationalDatabaseResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailCreateRelationalDatabaseFromSnapshotResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailCreateRelationalDatabaseSnapshotResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailDeleteDiskResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailDeleteDiskSnapshotResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailDeleteDomainResult(TypedDict, total=False):
    operation: LightsailOperation


class LightsailDeleteDomainEntryResult(TypedDict, total=False):
    operation: LightsailOperation


class LightsailDeleteInstanceResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailDeleteInstanceSnapshotResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailDeleteKeyPairResult(TypedDict, total=False):
    operation: LightsailOperation


class LightsailDeleteKnownHostKeysResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailDeleteLoadBalancerResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailDeleteLoadBalancerTlsCertificateResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailDeleteRelationalDatabaseResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailDeleteRelationalDatabaseSnapshotResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailDetachDiskResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailDetachInstancesFromLoadBalancerResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailDetachStaticIpResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailDownloadDefaultKeyPairResult(TypedDict, total=False):
    publicKeyBase64: str
    privateKeyBase64: str


class LightsailExportSnapshotResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailGetActiveNamesResult(TypedDict, total=False):
    activeNames: List[str]
    nextPageToken: str


class LightsailGetBlueprintsResult(TypedDict, total=False):
    blueprints: List[LightsailBlueprint]
    nextPageToken: str


class LightsailBlueprint(TypedDict, total=False):
    blueprintId: str
    name: str
    group: str
    type: str
    description: str
    isActive: bool
    minPower: int
    version: str
    versionCode: str
    productUrl: str
    licenseUrl: str
    platform: str


class LightsailGetBundlesResult(TypedDict, total=False):
    bundles: List[LightsailBundle]
    nextPageToken: str


class LightsailBundle(TypedDict, total=False):
    price: float
    cpuCount: int
    diskSizeInGb: int
    bundleId: str
    instanceType: str
    isActive: bool
    name: str
    power: int
    ramSizeInGb: float
    transferPerMonthInGb: int
    supportedPlatforms: List[str]


class LightsailGetCloudFormationStackRecordsResult(TypedDict, total=False):
    cloudFormationStackRecords: List[LightsailCloudFormationStackRecord]
    nextPageToken: str


class LightsailCloudFormationStackRecord(TypedDict, total=False):
    name: str
    arn: str
    createdAt: datetime.datetime
    location: LightsailResourceLocation
    resourceType: str
    state: str
    sourceInfo: List[LightsailCloudFormationStackRecordSourceInfo]
    destinationInfo: LightsailDestinationInfo


class LightsailCloudFormationStackRecordSourceInfo(TypedDict, total=False):
    resourceType: str
    name: str
    arn: str


class LightsailDestinationInfo(TypedDict, total=False):
    id: str
    service: str


class LightsailGetDiskResult(TypedDict, total=False):
    disk: LightsailDisk


class LightsailDisk(TypedDict, total=False):
    name: str
    arn: str
    supportCode: str
    createdAt: datetime.datetime
    location: LightsailResourceLocation
    resourceType: str
    tags: List[LightsailTag]
    sizeInGb: int
    isSystemDisk: bool
    iops: int
    path: str
    state: str
    attachedTo: str
    isAttached: bool
    attachmentState: str
    gbInUse: int


class LightsailGetDiskSnapshotResult(TypedDict, total=False):
    diskSnapshot: LightsailDiskSnapshot


class LightsailDiskSnapshot(TypedDict, total=False):
    name: str
    arn: str
    supportCode: str
    createdAt: datetime.datetime
    location: LightsailResourceLocation
    resourceType: str
    tags: List[LightsailTag]
    sizeInGb: int
    state: str
    progress: str
    fromDiskName: str
    fromDiskArn: str
    fromInstanceName: str
    fromInstanceArn: str


class LightsailGetDiskSnapshotsResult(TypedDict, total=False):
    diskSnapshots: List[LightsailDiskSnapshot]
    nextPageToken: str


class LightsailGetDisksResult(TypedDict, total=False):
    disks: List[LightsailDisk]
    nextPageToken: str


class LightsailGetDomainResult(TypedDict, total=False):
    domain: LightsailDomain


class LightsailDomain(TypedDict, total=False):
    name: str
    arn: str
    supportCode: str
    createdAt: datetime.datetime
    location: LightsailResourceLocation
    resourceType: str
    tags: List[LightsailTag]
    domainEntries: List[LightsailDomainEntry]


class LightsailGetDomainsResult(TypedDict, total=False):
    domains: List[LightsailDomain]
    nextPageToken: str


class LightsailGetExportSnapshotRecordsResult(TypedDict, total=False):
    exportSnapshotRecords: List[LightsailExportSnapshotRecord]
    nextPageToken: str


class LightsailExportSnapshotRecord(TypedDict, total=False):
    name: str
    arn: str
    createdAt: datetime.datetime
    location: LightsailResourceLocation
    resourceType: str
    state: str
    sourceInfo: LightsailExportSnapshotRecordSourceInfo
    destinationInfo: LightsailDestinationInfo


class LightsailExportSnapshotRecordSourceInfo(TypedDict, total=False):
    resourceType: str
    createdAt: datetime.datetime
    name: str
    arn: str
    fromResourceName: str
    fromResourceArn: str
    instanceSnapshotInfo: LightsailInstanceSnapshotInfo
    diskSnapshotInfo: LightsailDiskSnapshotInfo


class LightsailInstanceSnapshotInfo(TypedDict, total=False):
    fromBundleId: str
    fromBlueprintId: str
    fromDiskInfo: List[LightsailDiskInfo]


class LightsailDiskInfo(TypedDict, total=False):
    name: str
    path: str
    sizeInGb: int
    isSystemDisk: bool


class LightsailDiskSnapshotInfo(TypedDict, total=False):
    sizeInGb: int


class LightsailGetInstanceResult(TypedDict, total=False):
    instance: LightsailInstance


class LightsailInstance(TypedDict, total=False):
    name: str
    arn: str
    supportCode: str
    createdAt: datetime.datetime
    location: LightsailResourceLocation
    resourceType: str
    tags: List[LightsailTag]
    blueprintId: str
    blueprintName: str
    bundleId: str
    isStaticIp: bool
    privateIpAddress: str
    publicIpAddress: str
    ipv6Address: str
    hardware: LightsailInstanceHardware
    networking: LightsailInstanceNetworking
    state: LightsailInstanceState
    username: str
    sshKeyName: str


class LightsailInstanceHardware(TypedDict, total=False):
    cpuCount: int
    disks: List[LightsailDisk]
    ramSizeInGb: float


class LightsailInstanceNetworking(TypedDict, total=False):
    monthlyTransfer: LightsailMonthlyTransfer
    ports: List[LightsailInstancePortInfo]


class LightsailMonthlyTransfer(TypedDict, total=False):
    gbPerMonthAllocated: int


class LightsailInstancePortInfo(TypedDict, total=False):
    fromPort: int
    toPort: int
    protocol: str
    accessFrom: str
    accessType: str
    commonName: str
    accessDirection: str


class LightsailInstanceState(TypedDict, total=False):
    code: int
    name: str


class LightsailGetInstanceAccessDetailsResult(TypedDict, total=False):
    accessDetails: LightsailInstanceAccessDetails


class LightsailInstanceAccessDetails(TypedDict, total=False):
    certKey: str
    expiresAt: datetime.datetime
    ipAddress: str
    password: str
    passwordData: LightsailPasswordData
    privateKey: str
    protocol: str
    instanceName: str
    username: str
    hostKeys: List[LightsailHostKeyAttributes]


class LightsailPasswordData(TypedDict, total=False):
    ciphertext: str
    keyPairName: str


class LightsailHostKeyAttributes(TypedDict, total=False):
    algorithm: str
    publicKey: str
    witnessedAt: datetime.datetime
    fingerprintSHA1: str
    fingerprintSHA256: str
    notValidBefore: datetime.datetime
    notValidAfter: datetime.datetime


class LightsailGetInstanceMetricDataResult(TypedDict, total=False):
    metricName: str
    metricData: List[LightsailMetricDatapoint]


class LightsailMetricDatapoint(TypedDict, total=False):
    average: float
    maximum: float
    minimum: float
    sampleCount: float
    sum: float
    timestamp: datetime.datetime
    unit: str


class LightsailGetInstancePortStatesResult(TypedDict, total=False):
    portStates: List[LightsailInstancePortState]


class LightsailInstancePortState(TypedDict, total=False):
    fromPort: int
    toPort: int
    protocol: str
    state: str


class LightsailGetInstanceSnapshotResult(TypedDict, total=False):
    instanceSnapshot: LightsailInstanceSnapshot


class LightsailInstanceSnapshot(TypedDict, total=False):
    name: str
    arn: str
    supportCode: str
    createdAt: datetime.datetime
    location: LightsailResourceLocation
    resourceType: str
    tags: List[LightsailTag]
    state: str
    progress: str
    fromAttachedDisks: List[LightsailDisk]
    fromInstanceName: str
    fromInstanceArn: str
    fromBlueprintId: str
    fromBundleId: str
    sizeInGb: int


class LightsailGetInstanceSnapshotsResult(TypedDict, total=False):
    instanceSnapshots: List[LightsailInstanceSnapshot]
    nextPageToken: str


class LightsailGetInstanceStateResult(TypedDict, total=False):
    state: LightsailInstanceState


class LightsailGetInstancesResult(TypedDict, total=False):
    instances: List[LightsailInstance]
    nextPageToken: str


class LightsailGetKeyPairResult(TypedDict, total=False):
    keyPair: LightsailKeyPair


class LightsailGetKeyPairsResult(TypedDict, total=False):
    keyPairs: List[LightsailKeyPair]
    nextPageToken: str


class LightsailGetLoadBalancerResult(TypedDict, total=False):
    loadBalancer: LightsailLoadBalancer


class LightsailLoadBalancer(TypedDict, total=False):
    name: str
    arn: str
    supportCode: str
    createdAt: datetime.datetime
    location: LightsailResourceLocation
    resourceType: str
    tags: List[LightsailTag]
    dnsName: str
    state: str
    protocol: str
    publicPorts: List[int]
    healthCheckPath: str
    instancePort: int
    instanceHealthSummary: List[LightsailInstanceHealthSummary]
    tlsCertificateSummaries: List[LightsailLoadBalancerTlsCertificateSummary]
    configurationOptions: Dict[str, str]


class LightsailInstanceHealthSummary(TypedDict, total=False):
    instanceName: str
    instanceHealth: str
    instanceHealthReason: str


class LightsailLoadBalancerTlsCertificateSummary(TypedDict, total=False):
    name: str
    isAttached: bool


class LightsailGetLoadBalancerMetricDataResult(TypedDict, total=False):
    metricName: str
    metricData: List[LightsailMetricDatapoint]


class LightsailGetLoadBalancerTlsCertificatesResult(TypedDict, total=False):
    tlsCertificates: List[LightsailLoadBalancerTlsCertificate]


class LightsailLoadBalancerTlsCertificate(TypedDict, total=False):
    name: str
    arn: str
    supportCode: str
    createdAt: datetime.datetime
    location: LightsailResourceLocation
    resourceType: str
    tags: List[LightsailTag]
    loadBalancerName: str
    isAttached: bool
    status: str
    domainName: str
    domainValidationRecords: List[LightsailLoadBalancerTlsCertificateDomainValidationRecord]
    failureReason: str
    issuedAt: datetime.datetime
    issuer: str
    keyAlgorithm: str
    notAfter: datetime.datetime
    notBefore: datetime.datetime
    renewalSummary: LightsailLoadBalancerTlsCertificateRenewalSummary
    revocationReason: str
    revokedAt: datetime.datetime
    serial: str
    signatureAlgorithm: str
    subject: str
    subjectAlternativeNames: List[str]


class LightsailLoadBalancerTlsCertificateDomainValidationRecord(TypedDict, total=False):
    name: str
    type: str
    value: str
    validationStatus: str
    domainName: str


class LightsailLoadBalancerTlsCertificateRenewalSummary(TypedDict, total=False):
    renewalStatus: str
    domainValidationOptions: List[LightsailLoadBalancerTlsCertificateDomainValidationOption]


class LightsailLoadBalancerTlsCertificateDomainValidationOption(TypedDict, total=False):
    domainName: str
    validationStatus: str


class LightsailGetLoadBalancersResult(TypedDict, total=False):
    loadBalancers: List[LightsailLoadBalancer]
    nextPageToken: str


class LightsailGetOperationResult(TypedDict, total=False):
    operation: LightsailOperation


class LightsailGetOperationsResult(TypedDict, total=False):
    operations: List[LightsailOperation]
    nextPageToken: str


class LightsailGetOperationsForResourceResult(TypedDict, total=False):
    operations: List[LightsailOperation]
    nextPageCount: str
    nextPageToken: str


class LightsailGetRegionsResult(TypedDict, total=False):
    regions: List[LightsailRegion]


class LightsailRegion(TypedDict, total=False):
    continentCode: str
    description: str
    displayName: str
    name: str
    availabilityZones: List[LightsailAvailabilityZone]
    relationalDatabaseAvailabilityZones: List[LightsailAvailabilityZone]


class LightsailAvailabilityZone(TypedDict, total=False):
    zoneName: str
    state: str


class LightsailGetRelationalDatabaseResult(TypedDict, total=False):
    relationalDatabase: LightsailRelationalDatabase


class LightsailRelationalDatabase(TypedDict, total=False):
    name: str
    arn: str
    supportCode: str
    createdAt: datetime.datetime
    location: LightsailResourceLocation
    resourceType: str
    tags: List[LightsailTag]
    relationalDatabaseBlueprintId: str
    relationalDatabaseBundleId: str
    masterDatabaseName: str
    hardware: LightsailRelationalDatabaseHardware
    state: str
    secondaryAvailabilityZone: str
    backupRetentionEnabled: bool
    pendingModifiedValues: LightsailPendingModifiedRelationalDatabaseValues
    engine: str
    engineVersion: str
    latestRestorableTime: datetime.datetime
    masterUsername: str
    parameterApplyStatus: str
    preferredBackupWindow: str
    preferredMaintenanceWindow: str
    publiclyAccessible: bool
    masterEndpoint: LightsailRelationalDatabaseEndpoint
    pendingMaintenanceActions: List[LightsailPendingMaintenanceAction]


class LightsailRelationalDatabaseHardware(TypedDict, total=False):
    cpuCount: int
    diskSizeInGb: int
    ramSizeInGb: float


class LightsailPendingModifiedRelationalDatabaseValues(TypedDict, total=False):
    masterUserPassword: str
    engineVersion: str
    backupRetentionEnabled: bool


class LightsailRelationalDatabaseEndpoint(TypedDict, total=False):
    port: int
    address: str


class LightsailPendingMaintenanceAction(TypedDict, total=False):
    action: str
    description: str
    currentApplyDate: datetime.datetime


class LightsailGetRelationalDatabaseBlueprintsResult(TypedDict, total=False):
    blueprints: List[LightsailRelationalDatabaseBlueprint]
    nextPageToken: str


class LightsailRelationalDatabaseBlueprint(TypedDict, total=False):
    blueprintId: str
    engine: str
    engineVersion: str
    engineDescription: str
    engineVersionDescription: str
    isEngineDefault: bool


class LightsailGetRelationalDatabaseBundlesResult(TypedDict, total=False):
    bundles: List[LightsailRelationalDatabaseBundle]
    nextPageToken: str


class LightsailRelationalDatabaseBundle(TypedDict, total=False):
    bundleId: str
    name: str
    price: float
    ramSizeInGb: float
    diskSizeInGb: int
    transferPerMonthInGb: int
    cpuCount: int
    isEncrypted: bool
    isActive: bool


class LightsailGetRelationalDatabaseEventsResult(TypedDict, total=False):
    relationalDatabaseEvents: List[LightsailRelationalDatabaseEvent]
    nextPageToken: str


class LightsailRelationalDatabaseEvent(TypedDict, total=False):
    resource: str
    createdAt: datetime.datetime
    message: str
    eventCategories: List[str]


class LightsailGetRelationalDatabaseLogEventsResult(TypedDict, total=False):
    resourceLogEvents: List[LightsailLogEvent]
    nextBackwardToken: str
    nextForwardToken: str


class LightsailLogEvent(TypedDict, total=False):
    createdAt: datetime.datetime
    message: str


class LightsailGetRelationalDatabaseLogStreamsResult(TypedDict, total=False):
    logStreams: List[str]


class LightsailGetRelationalDatabaseMasterUserPasswordResult(TypedDict, total=False):
    masterUserPassword: str
    createdAt: datetime.datetime


class LightsailGetRelationalDatabaseMetricDataResult(TypedDict, total=False):
    metricName: str
    metricData: List[LightsailMetricDatapoint]


class LightsailGetRelationalDatabaseParametersResult(TypedDict, total=False):
    parameters: List[LightsailRelationalDatabaseParameter]
    nextPageToken: str


class LightsailRelationalDatabaseParameter(TypedDict, total=False):
    allowedValues: str
    applyMethod: str
    applyType: str
    dataType: str
    description: str
    isModifiable: bool
    parameterName: str
    parameterValue: str


class LightsailGetRelationalDatabaseSnapshotResult(TypedDict, total=False):
    relationalDatabaseSnapshot: LightsailRelationalDatabaseSnapshot


class LightsailRelationalDatabaseSnapshot(TypedDict, total=False):
    name: str
    arn: str
    supportCode: str
    createdAt: datetime.datetime
    location: LightsailResourceLocation
    resourceType: str
    tags: List[LightsailTag]
    engine: str
    engineVersion: str
    sizeInGb: int
    state: str
    fromRelationalDatabaseName: str
    fromRelationalDatabaseArn: str
    fromRelationalDatabaseBundleId: str
    fromRelationalDatabaseBlueprintId: str


class LightsailGetRelationalDatabaseSnapshotsResult(TypedDict, total=False):
    relationalDatabaseSnapshots: List[LightsailRelationalDatabaseSnapshot]
    nextPageToken: str


class LightsailGetRelationalDatabasesResult(TypedDict, total=False):
    relationalDatabases: List[LightsailRelationalDatabase]
    nextPageToken: str


class LightsailGetStaticIpResult(TypedDict, total=False):
    staticIp: LightsailStaticIp


class LightsailStaticIp(TypedDict, total=False):
    name: str
    arn: str
    supportCode: str
    createdAt: datetime.datetime
    location: LightsailResourceLocation
    resourceType: str
    ipAddress: str
    attachedTo: str
    isAttached: bool


class LightsailGetStaticIpsResult(TypedDict, total=False):
    staticIps: List[LightsailStaticIp]
    nextPageToken: str


class LightsailImportKeyPairResult(TypedDict, total=False):
    operation: LightsailOperation


class LightsailIsVpcPeeredResult(TypedDict, total=False):
    isPeered: bool


class LightsailOpenInstancePublicPortsResult(TypedDict, total=False):
    operation: LightsailOperation


class LightsailPeerVpcResult(TypedDict, total=False):
    operation: LightsailOperation


class LightsailPutInstancePublicPortsResult(TypedDict, total=False):
    operation: LightsailOperation


class LightsailRebootInstanceResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailRebootRelationalDatabaseResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailReleaseStaticIpResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailStartInstanceResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailStartRelationalDatabaseResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailStopInstanceResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailStopRelationalDatabaseResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailTagResourceResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailUnpeerVpcResult(TypedDict, total=False):
    operation: LightsailOperation


class LightsailUntagResourceResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailUpdateDomainEntryResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailUpdateLoadBalancerAttributeResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailUpdateRelationalDatabaseResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class LightsailUpdateRelationalDatabaseParametersResult(TypedDict, total=False):
    operations: List[LightsailOperation]


class MachineLearning(BaseClient):
    def add_tags(self, *,
        Tags: List[MachineLearningTag],
        ResourceId: str,
        ResourceType: str
    ) -> MachineLearningAddTagsOutput: ...

    def create_batch_prediction(self, *,
        BatchPredictionId: str,
        MLModelId: str,
        BatchPredictionDataSourceId: str,
        OutputUri: str,
        BatchPredictionName: str = ...
    ) -> MachineLearningCreateBatchPredictionOutput: ...

    def create_data_source_from_rds(self, *,
        DataSourceId: str,
        RDSData: MachineLearningRDSDataSpec,
        RoleARN: str,
        DataSourceName: str = ...,
        ComputeStatistics: bool = ...
    ) -> MachineLearningCreateDataSourceFromRDSOutput: ...

    def create_data_source_from_redshift(self, *,
        DataSourceId: str,
        DataSpec: MachineLearningRedshiftDataSpec,
        RoleARN: str,
        DataSourceName: str = ...,
        ComputeStatistics: bool = ...
    ) -> MachineLearningCreateDataSourceFromRedshiftOutput: ...

    def create_data_source_from_s3(self, *,
        DataSourceId: str,
        DataSpec: MachineLearningS3DataSpec,
        DataSourceName: str = ...,
        ComputeStatistics: bool = ...
    ) -> MachineLearningCreateDataSourceFromS3Output: ...

    def create_evaluation(self, *,
        EvaluationId: str,
        MLModelId: str,
        EvaluationDataSourceId: str,
        EvaluationName: str = ...
    ) -> MachineLearningCreateEvaluationOutput: ...

    def create_ml_model(self, *,
        MLModelId: str,
        MLModelType: str,
        TrainingDataSourceId: str,
        MLModelName: str = ...,
        Parameters: Dict[str, str] = ...,
        Recipe: str = ...,
        RecipeUri: str = ...
    ) -> MachineLearningCreateMLModelOutput: ...

    def create_realtime_endpoint(self, *,
        MLModelId: str
    ) -> MachineLearningCreateRealtimeEndpointOutput: ...

    def delete_batch_prediction(self, *,
        BatchPredictionId: str
    ) -> MachineLearningDeleteBatchPredictionOutput: ...

    def delete_data_source(self, *,
        DataSourceId: str
    ) -> MachineLearningDeleteDataSourceOutput: ...

    def delete_evaluation(self, *,
        EvaluationId: str
    ) -> MachineLearningDeleteEvaluationOutput: ...

    def delete_ml_model(self, *,
        MLModelId: str
    ) -> MachineLearningDeleteMLModelOutput: ...

    def delete_realtime_endpoint(self, *,
        MLModelId: str
    ) -> MachineLearningDeleteRealtimeEndpointOutput: ...

    def delete_tags(self, *,
        TagKeys: List[str],
        ResourceId: str,
        ResourceType: str
    ) -> MachineLearningDeleteTagsOutput: ...

    def describe_batch_predictions(self, *,
        FilterVariable: str = ...,
        EQ: str = ...,
        GT: str = ...,
        LT: str = ...,
        GE: str = ...,
        LE: str = ...,
        NE: str = ...,
        Prefix: str = ...,
        SortOrder: str = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> MachineLearningDescribeBatchPredictionsOutput: ...

    def describe_data_sources(self, *,
        FilterVariable: str = ...,
        EQ: str = ...,
        GT: str = ...,
        LT: str = ...,
        GE: str = ...,
        LE: str = ...,
        NE: str = ...,
        Prefix: str = ...,
        SortOrder: str = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> MachineLearningDescribeDataSourcesOutput: ...

    def describe_evaluations(self, *,
        FilterVariable: str = ...,
        EQ: str = ...,
        GT: str = ...,
        LT: str = ...,
        GE: str = ...,
        LE: str = ...,
        NE: str = ...,
        Prefix: str = ...,
        SortOrder: str = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> MachineLearningDescribeEvaluationsOutput: ...

    def describe_ml_models(self, *,
        FilterVariable: str = ...,
        EQ: str = ...,
        GT: str = ...,
        LT: str = ...,
        GE: str = ...,
        LE: str = ...,
        NE: str = ...,
        Prefix: str = ...,
        SortOrder: str = ...,
        NextToken: str = ...,
        Limit: int = ...
    ) -> MachineLearningDescribeMLModelsOutput: ...

    def describe_tags(self, *,
        ResourceId: str,
        ResourceType: str
    ) -> MachineLearningDescribeTagsOutput: ...

    def get_batch_prediction(self, *,
        BatchPredictionId: str
    ) -> MachineLearningGetBatchPredictionOutput: ...

    def get_data_source(self, *,
        DataSourceId: str,
        Verbose: bool = ...
    ) -> MachineLearningGetDataSourceOutput: ...

    def get_evaluation(self, *,
        EvaluationId: str
    ) -> MachineLearningGetEvaluationOutput: ...

    def get_ml_model(self, *,
        MLModelId: str,
        Verbose: bool = ...
    ) -> MachineLearningGetMLModelOutput: ...

    def predict(self, *,
        MLModelId: str,
        Record: Dict[str, str],
        PredictEndpoint: str
    ) -> MachineLearningPredictOutput: ...

    def update_batch_prediction(self, *,
        BatchPredictionId: str,
        BatchPredictionName: str
    ) -> MachineLearningUpdateBatchPredictionOutput: ...

    def update_data_source(self, *,
        DataSourceId: str,
        DataSourceName: str
    ) -> MachineLearningUpdateDataSourceOutput: ...

    def update_evaluation(self, *,
        EvaluationId: str,
        EvaluationName: str
    ) -> MachineLearningUpdateEvaluationOutput: ...

    def update_ml_model(self, *,
        MLModelId: str,
        MLModelName: str = ...,
        ScoreThreshold: float = ...
    ) -> MachineLearningUpdateMLModelOutput: ...


class MachineLearningTag(TypedDict, total=False):
    Key: str
    Value: str


class MachineLearningAddTagsOutput(TypedDict, total=False):
    ResourceId: str
    ResourceType: str


class MachineLearningCreateBatchPredictionOutput(TypedDict, total=False):
    BatchPredictionId: str


class _MachineLearningRDSDataSpec(TypedDict):
    DatabaseInformation: MachineLearningRDSDatabase
    SelectSqlQuery: str
    DatabaseCredentials: MachineLearningRDSDatabaseCredentials
    S3StagingLocation: str
    ResourceRole: str
    ServiceRole: str
    SubnetId: str
    SecurityGroupIds: List[str]


class MachineLearningRDSDataSpec(_MachineLearningRDSDataSpec, total=False):
    DataRearrangement: str
    DataSchema: str
    DataSchemaUri: str


class MachineLearningRDSDatabase(TypedDict):
    InstanceIdentifier: str
    DatabaseName: str


class MachineLearningRDSDatabaseCredentials(TypedDict):
    Username: str
    Password: str


class MachineLearningCreateDataSourceFromRDSOutput(TypedDict, total=False):
    DataSourceId: str


class _MachineLearningRedshiftDataSpec(TypedDict):
    DatabaseInformation: MachineLearningRedshiftDatabase
    SelectSqlQuery: str
    DatabaseCredentials: MachineLearningRedshiftDatabaseCredentials
    S3StagingLocation: str


class MachineLearningRedshiftDataSpec(_MachineLearningRedshiftDataSpec, total=False):
    DataRearrangement: str
    DataSchema: str
    DataSchemaUri: str


class MachineLearningRedshiftDatabase(TypedDict):
    DatabaseName: str
    ClusterIdentifier: str


class MachineLearningRedshiftDatabaseCredentials(TypedDict):
    Username: str
    Password: str


class MachineLearningCreateDataSourceFromRedshiftOutput(TypedDict, total=False):
    DataSourceId: str


class _MachineLearningS3DataSpec(TypedDict):
    DataLocationS3: str


class MachineLearningS3DataSpec(_MachineLearningS3DataSpec, total=False):
    DataRearrangement: str
    DataSchema: str
    DataSchemaLocationS3: str


class MachineLearningCreateDataSourceFromS3Output(TypedDict, total=False):
    DataSourceId: str


class MachineLearningCreateEvaluationOutput(TypedDict, total=False):
    EvaluationId: str


class MachineLearningCreateMLModelOutput(TypedDict, total=False):
    MLModelId: str


class MachineLearningCreateRealtimeEndpointOutput(TypedDict, total=False):
    MLModelId: str
    RealtimeEndpointInfo: MachineLearningRealtimeEndpointInfo


class MachineLearningRealtimeEndpointInfo(TypedDict, total=False):
    PeakRequestsPerSecond: int
    CreatedAt: datetime.datetime
    EndpointUrl: str
    EndpointStatus: str


class MachineLearningDeleteBatchPredictionOutput(TypedDict, total=False):
    BatchPredictionId: str


class MachineLearningDeleteDataSourceOutput(TypedDict, total=False):
    DataSourceId: str


class MachineLearningDeleteEvaluationOutput(TypedDict, total=False):
    EvaluationId: str


class MachineLearningDeleteMLModelOutput(TypedDict, total=False):
    MLModelId: str


class MachineLearningDeleteRealtimeEndpointOutput(TypedDict, total=False):
    MLModelId: str
    RealtimeEndpointInfo: MachineLearningRealtimeEndpointInfo


class MachineLearningDeleteTagsOutput(TypedDict, total=False):
    ResourceId: str
    ResourceType: str


class MachineLearningDescribeBatchPredictionsOutput(TypedDict, total=False):
    Results: List[MachineLearningBatchPrediction]
    NextToken: str


class MachineLearningBatchPrediction(TypedDict, total=False):
    BatchPredictionId: str
    MLModelId: str
    BatchPredictionDataSourceId: str
    InputDataLocationS3: str
    CreatedByIamUser: str
    CreatedAt: datetime.datetime
    LastUpdatedAt: datetime.datetime
    Name: str
    Status: str
    OutputUri: str
    Message: str
    ComputeTime: int
    FinishedAt: datetime.datetime
    StartedAt: datetime.datetime
    TotalRecordCount: int
    InvalidRecordCount: int


class MachineLearningDescribeDataSourcesOutput(TypedDict, total=False):
    Results: List[MachineLearningDataSource]
    NextToken: str


class MachineLearningDataSource(TypedDict, total=False):
    DataSourceId: str
    DataLocationS3: str
    DataRearrangement: str
    CreatedByIamUser: str
    CreatedAt: datetime.datetime
    LastUpdatedAt: datetime.datetime
    DataSizeInBytes: int
    NumberOfFiles: int
    Name: str
    Status: str
    Message: str
    RedshiftMetadata: MachineLearningRedshiftMetadata
    RDSMetadata: MachineLearningRDSMetadata
    RoleARN: str
    ComputeStatistics: bool
    ComputeTime: int
    FinishedAt: datetime.datetime
    StartedAt: datetime.datetime


class MachineLearningRedshiftMetadata(TypedDict, total=False):
    RedshiftDatabase: MachineLearningRedshiftDatabase
    DatabaseUserName: str
    SelectSqlQuery: str


class MachineLearningRDSMetadata(TypedDict, total=False):
    Database: MachineLearningRDSDatabase
    DatabaseUserName: str
    SelectSqlQuery: str
    ResourceRole: str
    ServiceRole: str
    DataPipelineId: str


class MachineLearningDescribeEvaluationsOutput(TypedDict, total=False):
    Results: List[MachineLearningEvaluation]
    NextToken: str


class MachineLearningEvaluation(TypedDict, total=False):
    EvaluationId: str
    MLModelId: str
    EvaluationDataSourceId: str
    InputDataLocationS3: str
    CreatedByIamUser: str
    CreatedAt: datetime.datetime
    LastUpdatedAt: datetime.datetime
    Name: str
    Status: str
    PerformanceMetrics: MachineLearningPerformanceMetrics
    Message: str
    ComputeTime: int
    FinishedAt: datetime.datetime
    StartedAt: datetime.datetime


class MachineLearningPerformanceMetrics(TypedDict, total=False):
    Properties: Dict[str, str]


class MachineLearningDescribeMLModelsOutput(TypedDict, total=False):
    Results: List[MachineLearningMLModel]
    NextToken: str


class MachineLearningMLModel(TypedDict, total=False):
    MLModelId: str
    TrainingDataSourceId: str
    CreatedByIamUser: str
    CreatedAt: datetime.datetime
    LastUpdatedAt: datetime.datetime
    Name: str
    Status: str
    SizeInBytes: int
    EndpointInfo: MachineLearningRealtimeEndpointInfo
    TrainingParameters: Dict[str, str]
    InputDataLocationS3: str
    Algorithm: str
    MLModelType: str
    ScoreThreshold: float
    ScoreThresholdLastUpdatedAt: datetime.datetime
    Message: str
    ComputeTime: int
    FinishedAt: datetime.datetime
    StartedAt: datetime.datetime


class MachineLearningDescribeTagsOutput(TypedDict, total=False):
    ResourceId: str
    ResourceType: str
    Tags: List[MachineLearningTag]


class MachineLearningGetBatchPredictionOutput(TypedDict, total=False):
    BatchPredictionId: str
    MLModelId: str
    BatchPredictionDataSourceId: str
    InputDataLocationS3: str
    CreatedByIamUser: str
    CreatedAt: datetime.datetime
    LastUpdatedAt: datetime.datetime
    Name: str
    Status: str
    OutputUri: str
    LogUri: str
    Message: str
    ComputeTime: int
    FinishedAt: datetime.datetime
    StartedAt: datetime.datetime
    TotalRecordCount: int
    InvalidRecordCount: int


class MachineLearningGetDataSourceOutput(TypedDict, total=False):
    DataSourceId: str
    DataLocationS3: str
    DataRearrangement: str
    CreatedByIamUser: str
    CreatedAt: datetime.datetime
    LastUpdatedAt: datetime.datetime
    DataSizeInBytes: int
    NumberOfFiles: int
    Name: str
    Status: str
    LogUri: str
    Message: str
    RedshiftMetadata: MachineLearningRedshiftMetadata
    RDSMetadata: MachineLearningRDSMetadata
    RoleARN: str
    ComputeStatistics: bool
    ComputeTime: int
    FinishedAt: datetime.datetime
    StartedAt: datetime.datetime
    DataSourceSchema: str


class MachineLearningGetEvaluationOutput(TypedDict, total=False):
    EvaluationId: str
    MLModelId: str
    EvaluationDataSourceId: str
    InputDataLocationS3: str
    CreatedByIamUser: str
    CreatedAt: datetime.datetime
    LastUpdatedAt: datetime.datetime
    Name: str
    Status: str
    PerformanceMetrics: MachineLearningPerformanceMetrics
    LogUri: str
    Message: str
    ComputeTime: int
    FinishedAt: datetime.datetime
    StartedAt: datetime.datetime


class MachineLearningGetMLModelOutput(TypedDict, total=False):
    MLModelId: str
    TrainingDataSourceId: str
    CreatedByIamUser: str
    CreatedAt: datetime.datetime
    LastUpdatedAt: datetime.datetime
    Name: str
    Status: str
    SizeInBytes: int
    EndpointInfo: MachineLearningRealtimeEndpointInfo
    TrainingParameters: Dict[str, str]
    InputDataLocationS3: str
    MLModelType: str
    ScoreThreshold: float
    ScoreThresholdLastUpdatedAt: datetime.datetime
    LogUri: str
    Message: str
    ComputeTime: int
    FinishedAt: datetime.datetime
    StartedAt: datetime.datetime
    Recipe: str
    Schema: str


class MachineLearningPredictOutput(TypedDict, total=False):
    Prediction: MachineLearningPrediction


class MachineLearningPrediction(TypedDict, total=False):
    predictedLabel: str
    predictedValue: float
    predictedScores: Dict[str, float]
    details: Dict[str, str]


class MachineLearningUpdateBatchPredictionOutput(TypedDict, total=False):
    BatchPredictionId: str


class MachineLearningUpdateDataSourceOutput(TypedDict, total=False):
    DataSourceId: str


class MachineLearningUpdateEvaluationOutput(TypedDict, total=False):
    EvaluationId: str


class MachineLearningUpdateMLModelOutput(TypedDict, total=False):
    MLModelId: str


class Macie(BaseClient):
    def associate_member_account(self, *,
        memberAccountId: str
    ): ...

    def associate_s3_resources(self, *,
        s3Resources: List[MacieS3ResourceClassification],
        memberAccountId: str = ...
    ) -> MacieAssociateS3ResourcesResult: ...

    def disassociate_member_account(self, *,
        memberAccountId: str
    ): ...

    def disassociate_s3_resources(self, *,
        associatedS3Resources: List[MacieS3Resource],
        memberAccountId: str = ...
    ) -> MacieDisassociateS3ResourcesResult: ...

    def list_member_accounts(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> MacieListMemberAccountsResult: ...

    def list_s3_resources(self, *,
        memberAccountId: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> MacieListS3ResourcesResult: ...

    def update_s3_resources(self, *,
        s3ResourcesUpdate: List[MacieS3ResourceClassificationUpdate],
        memberAccountId: str = ...
    ) -> MacieUpdateS3ResourcesResult: ...


class _MacieS3ResourceClassification(TypedDict):
    bucketName: str
    classificationType: MacieClassificationType


class MacieS3ResourceClassification(_MacieS3ResourceClassification, total=False):
    prefix: str


class MacieClassificationType(TypedDict):
    oneTime: str
    continuous: str


class MacieAssociateS3ResourcesResult(TypedDict, total=False):
    failedS3Resources: List[MacieFailedS3Resource]


class MacieFailedS3Resource(TypedDict, total=False):
    failedItem: MacieS3Resource
    errorCode: str
    errorMessage: str


class _MacieS3Resource(TypedDict):
    bucketName: str


class MacieS3Resource(_MacieS3Resource, total=False):
    prefix: str


class MacieDisassociateS3ResourcesResult(TypedDict, total=False):
    failedS3Resources: List[MacieFailedS3Resource]


class MacieListMemberAccountsResult(TypedDict, total=False):
    memberAccounts: List[MacieMemberAccount]
    nextToken: str


class MacieMemberAccount(TypedDict, total=False):
    accountId: str


class MacieListS3ResourcesResult(TypedDict, total=False):
    s3Resources: List[MacieS3ResourceClassification]
    nextToken: str


class _MacieS3ResourceClassificationUpdate(TypedDict):
    bucketName: str
    classificationTypeUpdate: MacieClassificationTypeUpdate


class MacieS3ResourceClassificationUpdate(_MacieS3ResourceClassificationUpdate, total=False):
    prefix: str


class MacieClassificationTypeUpdate(TypedDict, total=False):
    oneTime: str
    continuous: str


class MacieUpdateS3ResourcesResult(TypedDict, total=False):
    failedS3Resources: List[MacieFailedS3Resource]


class ManagedBlockchain(BaseClient):
    def create_member(self, *,
        ClientRequestToken: str,
        InvitationId: str,
        NetworkId: str,
        MemberConfiguration: ManagedBlockchainMemberConfiguration
    ) -> ManagedBlockchainCreateMemberOutput: ...

    def create_network(self, *,
        ClientRequestToken: str,
        Name: str,
        Framework: str,
        FrameworkVersion: str,
        VotingPolicy: ManagedBlockchainVotingPolicy,
        MemberConfiguration: ManagedBlockchainMemberConfiguration,
        Description: str = ...,
        FrameworkConfiguration: ManagedBlockchainNetworkFrameworkConfiguration = ...
    ) -> ManagedBlockchainCreateNetworkOutput: ...

    def create_node(self, *,
        ClientRequestToken: str,
        NetworkId: str,
        MemberId: str,
        NodeConfiguration: ManagedBlockchainNodeConfiguration
    ) -> ManagedBlockchainCreateNodeOutput: ...

    def create_proposal(self, *,
        ClientRequestToken: str,
        NetworkId: str,
        MemberId: str,
        Actions: ManagedBlockchainProposalActions,
        Description: str = ...
    ) -> ManagedBlockchainCreateProposalOutput: ...

    def delete_member(self, *,
        NetworkId: str,
        MemberId: str
    ) -> ManagedBlockchainDeleteMemberOutput: ...

    def delete_node(self, *,
        NetworkId: str,
        MemberId: str,
        NodeId: str
    ) -> ManagedBlockchainDeleteNodeOutput: ...

    def get_member(self, *,
        NetworkId: str,
        MemberId: str
    ) -> ManagedBlockchainGetMemberOutput: ...

    def get_network(self, *,
        NetworkId: str
    ) -> ManagedBlockchainGetNetworkOutput: ...

    def get_node(self, *,
        NetworkId: str,
        MemberId: str,
        NodeId: str
    ) -> ManagedBlockchainGetNodeOutput: ...

    def get_proposal(self, *,
        NetworkId: str,
        ProposalId: str
    ) -> ManagedBlockchainGetProposalOutput: ...

    def list_invitations(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ManagedBlockchainListInvitationsOutput: ...

    def list_members(self, *,
        NetworkId: str,
        Name: str = ...,
        Status: str = ...,
        IsOwned: bool = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ManagedBlockchainListMembersOutput: ...

    def list_networks(self, *,
        Name: str = ...,
        Framework: str = ...,
        Status: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ManagedBlockchainListNetworksOutput: ...

    def list_nodes(self, *,
        NetworkId: str,
        MemberId: str,
        Status: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ManagedBlockchainListNodesOutput: ...

    def list_proposal_votes(self, *,
        NetworkId: str,
        ProposalId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ManagedBlockchainListProposalVotesOutput: ...

    def list_proposals(self, *,
        NetworkId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ManagedBlockchainListProposalsOutput: ...

    def reject_invitation(self, *,
        InvitationId: str
    ) -> ManagedBlockchainRejectInvitationOutput: ...

    def vote_on_proposal(self, *,
        NetworkId: str,
        ProposalId: str,
        VoterMemberId: str,
        Vote: str
    ) -> ManagedBlockchainVoteOnProposalOutput: ...


class _ManagedBlockchainMemberConfiguration(TypedDict):
    Name: str
    FrameworkConfiguration: ManagedBlockchainMemberFrameworkConfiguration


class ManagedBlockchainMemberConfiguration(_ManagedBlockchainMemberConfiguration, total=False):
    Description: str


class ManagedBlockchainMemberFrameworkConfiguration(TypedDict, total=False):
    Fabric: ManagedBlockchainMemberFabricConfiguration


class ManagedBlockchainMemberFabricConfiguration(TypedDict):
    AdminUsername: str
    AdminPassword: str


class ManagedBlockchainCreateMemberOutput(TypedDict, total=False):
    MemberId: str


class ManagedBlockchainNetworkFrameworkConfiguration(TypedDict, total=False):
    Fabric: ManagedBlockchainNetworkFabricConfiguration


class ManagedBlockchainNetworkFabricConfiguration(TypedDict):
    Edition: str


class ManagedBlockchainVotingPolicy(TypedDict, total=False):
    ApprovalThresholdPolicy: ManagedBlockchainApprovalThresholdPolicy


class ManagedBlockchainApprovalThresholdPolicy(TypedDict, total=False):
    ThresholdPercentage: int
    ProposalDurationInHours: int
    ThresholdComparator: str


class ManagedBlockchainCreateNetworkOutput(TypedDict, total=False):
    NetworkId: str
    MemberId: str


class ManagedBlockchainNodeConfiguration(TypedDict):
    InstanceType: str
    AvailabilityZone: str


class ManagedBlockchainCreateNodeOutput(TypedDict, total=False):
    NodeId: str


class ManagedBlockchainProposalActions(TypedDict, total=False):
    Invitations: List[ManagedBlockchainInviteAction]
    Removals: List[ManagedBlockchainRemoveAction]


class ManagedBlockchainInviteAction(TypedDict):
    Principal: str


class ManagedBlockchainRemoveAction(TypedDict):
    MemberId: str


class ManagedBlockchainCreateProposalOutput(TypedDict, total=False):
    ProposalId: str


class ManagedBlockchainDeleteMemberOutput(TypedDict, total=False):
    pass


class ManagedBlockchainDeleteNodeOutput(TypedDict, total=False):
    pass


class ManagedBlockchainGetMemberOutput(TypedDict, total=False):
    Member: ManagedBlockchainMember


class ManagedBlockchainMember(TypedDict, total=False):
    NetworkId: str
    Id: str
    Name: str
    Description: str
    FrameworkAttributes: ManagedBlockchainMemberFrameworkAttributes
    Status: str
    CreationDate: datetime.datetime


class ManagedBlockchainMemberFrameworkAttributes(TypedDict, total=False):
    Fabric: ManagedBlockchainMemberFabricAttributes


class ManagedBlockchainMemberFabricAttributes(TypedDict, total=False):
    AdminUsername: str
    CaEndpoint: str


class ManagedBlockchainGetNetworkOutput(TypedDict, total=False):
    Network: ManagedBlockchainNetwork


class ManagedBlockchainNetwork(TypedDict, total=False):
    Id: str
    Name: str
    Description: str
    Framework: str
    FrameworkVersion: str
    FrameworkAttributes: ManagedBlockchainNetworkFrameworkAttributes
    VpcEndpointServiceName: str
    VotingPolicy: ManagedBlockchainVotingPolicy
    Status: str
    CreationDate: datetime.datetime


class ManagedBlockchainNetworkFrameworkAttributes(TypedDict, total=False):
    Fabric: ManagedBlockchainNetworkFabricAttributes


class ManagedBlockchainNetworkFabricAttributes(TypedDict, total=False):
    OrderingServiceEndpoint: str
    Edition: str


class ManagedBlockchainGetNodeOutput(TypedDict, total=False):
    Node: ManagedBlockchainNode


class ManagedBlockchainNode(TypedDict, total=False):
    NetworkId: str
    MemberId: str
    Id: str
    InstanceType: str
    AvailabilityZone: str
    FrameworkAttributes: ManagedBlockchainNodeFrameworkAttributes
    Status: str
    CreationDate: datetime.datetime


class ManagedBlockchainNodeFrameworkAttributes(TypedDict, total=False):
    Fabric: ManagedBlockchainNodeFabricAttributes


class ManagedBlockchainNodeFabricAttributes(TypedDict, total=False):
    PeerEndpoint: str
    PeerEventEndpoint: str


class ManagedBlockchainGetProposalOutput(TypedDict, total=False):
    Proposal: ManagedBlockchainProposal


class ManagedBlockchainProposal(TypedDict, total=False):
    ProposalId: str
    NetworkId: str
    Description: str
    Actions: ManagedBlockchainProposalActions
    ProposedByMemberId: str
    ProposedByMemberName: str
    Status: str
    CreationDate: datetime.datetime
    ExpirationDate: datetime.datetime
    YesVoteCount: int
    NoVoteCount: int
    OutstandingVoteCount: int


class ManagedBlockchainListInvitationsOutput(TypedDict, total=False):
    Invitations: List[ManagedBlockchainInvitation]
    NextToken: str


class ManagedBlockchainInvitation(TypedDict, total=False):
    InvitationId: str
    CreationDate: datetime.datetime
    ExpirationDate: datetime.datetime
    Status: str
    NetworkSummary: ManagedBlockchainNetworkSummary


class ManagedBlockchainNetworkSummary(TypedDict, total=False):
    Id: str
    Name: str
    Description: str
    Framework: str
    FrameworkVersion: str
    Status: str
    CreationDate: datetime.datetime


class ManagedBlockchainListMembersOutput(TypedDict, total=False):
    Members: List[ManagedBlockchainMemberSummary]
    NextToken: str


class ManagedBlockchainMemberSummary(TypedDict, total=False):
    Id: str
    Name: str
    Description: str
    Status: str
    CreationDate: datetime.datetime
    IsOwned: bool


class ManagedBlockchainListNetworksOutput(TypedDict, total=False):
    Networks: List[ManagedBlockchainNetworkSummary]
    NextToken: str


class ManagedBlockchainListNodesOutput(TypedDict, total=False):
    Nodes: List[ManagedBlockchainNodeSummary]
    NextToken: str


class ManagedBlockchainNodeSummary(TypedDict, total=False):
    Id: str
    Status: str
    CreationDate: datetime.datetime
    AvailabilityZone: str
    InstanceType: str


class ManagedBlockchainListProposalVotesOutput(TypedDict, total=False):
    ProposalVotes: List[ManagedBlockchainVoteSummary]
    NextToken: str


class ManagedBlockchainVoteSummary(TypedDict, total=False):
    Vote: str
    MemberName: str
    MemberId: str


class ManagedBlockchainListProposalsOutput(TypedDict, total=False):
    Proposals: List[ManagedBlockchainProposalSummary]
    NextToken: str


class ManagedBlockchainProposalSummary(TypedDict, total=False):
    ProposalId: str
    Description: str
    ProposedByMemberId: str
    ProposedByMemberName: str
    Status: str
    CreationDate: datetime.datetime
    ExpirationDate: datetime.datetime


class ManagedBlockchainRejectInvitationOutput(TypedDict, total=False):
    pass


class ManagedBlockchainVoteOnProposalOutput(TypedDict, total=False):
    pass


class MarketplaceEntitlementService(BaseClient):
    def get_entitlements(self, *,
        ProductCode: str,
        Filter: Dict[str, List[str]] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MarketplaceEntitlementServiceGetEntitlementsResult: ...


class MarketplaceEntitlementServiceGetEntitlementsResult(TypedDict, total=False):
    Entitlements: List[MarketplaceEntitlementServiceEntitlement]
    NextToken: str


class MarketplaceEntitlementServiceEntitlement(TypedDict, total=False):
    ProductCode: str
    Dimension: str
    CustomerIdentifier: str
    Value: MarketplaceEntitlementServiceEntitlementValue
    ExpirationDate: datetime.datetime


class MarketplaceEntitlementServiceEntitlementValue(TypedDict, total=False):
    IntegerValue: int
    DoubleValue: float
    BooleanValue: bool
    StringValue: str


class MarketplaceCommerceAnalytics(BaseClient):
    def generate_data_set(self, *,
        dataSetType: str,
        dataSetPublicationDate: datetime.datetime,
        roleNameArn: str,
        destinationS3BucketName: str,
        snsTopicArn: str,
        destinationS3Prefix: str = ...,
        customerDefinedValues: Dict[str, str] = ...
    ) -> MarketplaceCommerceAnalyticsGenerateDataSetResult: ...

    def start_support_data_export(self, *,
        dataSetType: str,
        fromDate: datetime.datetime,
        roleNameArn: str,
        destinationS3BucketName: str,
        snsTopicArn: str,
        destinationS3Prefix: str = ...,
        customerDefinedValues: Dict[str, str] = ...
    ) -> MarketplaceCommerceAnalyticsStartSupportDataExportResult: ...


class MarketplaceCommerceAnalyticsGenerateDataSetResult(TypedDict, total=False):
    dataSetRequestId: str


class MarketplaceCommerceAnalyticsStartSupportDataExportResult(TypedDict, total=False):
    dataSetRequestId: str


class MediaConnect(BaseClient):
    def add_flow_outputs(self, *,
        FlowArn: str,
        Outputs: List[MediaConnectAddOutputRequest]
    ) -> MediaConnectAddFlowOutputsResponse: ...

    def create_flow(self, *,
        Name: str,
        Source: MediaConnectSetSourceRequest,
        AvailabilityZone: str = ...,
        Entitlements: List[MediaConnectGrantEntitlementRequest] = ...,
        Outputs: List[MediaConnectAddOutputRequest] = ...
    ) -> MediaConnectCreateFlowResponse: ...

    def delete_flow(self, *,
        FlowArn: str
    ) -> MediaConnectDeleteFlowResponse: ...

    def describe_flow(self, *,
        FlowArn: str
    ) -> MediaConnectDescribeFlowResponse: ...

    def grant_flow_entitlements(self, *,
        Entitlements: List[MediaConnectGrantEntitlementRequest],
        FlowArn: str
    ) -> MediaConnectGrantFlowEntitlementsResponse: ...

    def list_entitlements(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MediaConnectListEntitlementsResponse: ...

    def list_flows(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MediaConnectListFlowsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> MediaConnectListTagsForResourceResponse: ...

    def remove_flow_output(self, *,
        FlowArn: str,
        OutputArn: str
    ) -> MediaConnectRemoveFlowOutputResponse: ...

    def revoke_flow_entitlement(self, *,
        EntitlementArn: str,
        FlowArn: str
    ) -> MediaConnectRevokeFlowEntitlementResponse: ...

    def start_flow(self, *,
        FlowArn: str
    ) -> MediaConnectStartFlowResponse: ...

    def stop_flow(self, *,
        FlowArn: str
    ) -> MediaConnectStopFlowResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: Dict[str, str]
    ): ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ): ...

    def update_flow_entitlement(self, *,
        EntitlementArn: str,
        FlowArn: str,
        Description: str = ...,
        Encryption: MediaConnectUpdateEncryption = ...,
        Subscribers: List[str] = ...
    ) -> MediaConnectUpdateFlowEntitlementResponse: ...

    def update_flow_output(self, *,
        FlowArn: str,
        OutputArn: str,
        Description: str = ...,
        Destination: str = ...,
        Encryption: MediaConnectUpdateEncryption = ...,
        MaxLatency: int = ...,
        Port: int = ...,
        Protocol: str = ...,
        SmoothingLatency: int = ...,
        StreamId: str = ...
    ) -> MediaConnectUpdateFlowOutputResponse: ...

    def update_flow_source(self, *,
        FlowArn: str,
        SourceArn: str,
        Decryption: MediaConnectUpdateEncryption = ...,
        Description: str = ...,
        EntitlementArn: str = ...,
        IngestPort: int = ...,
        MaxBitrate: int = ...,
        MaxLatency: int = ...,
        Protocol: str = ...,
        StreamId: str = ...,
        WhitelistCidr: str = ...
    ) -> MediaConnectUpdateFlowSourceResponse: ...


class _MediaConnectAddOutputRequest(TypedDict):
    Destination: str
    Port: int
    Protocol: str


class MediaConnectAddOutputRequest(_MediaConnectAddOutputRequest, total=False):
    Description: str
    Encryption: MediaConnectEncryption
    MaxLatency: int
    Name: str
    SmoothingLatency: int
    StreamId: str


class _MediaConnectEncryption(TypedDict):
    Algorithm: str
    RoleArn: str
    SecretArn: str


class MediaConnectEncryption(_MediaConnectEncryption, total=False):
    KeyType: str


class MediaConnectAddFlowOutputsResponse(TypedDict, total=False):
    FlowArn: str
    Outputs: List[MediaConnectOutput]


class _MediaConnectOutput(TypedDict):
    Name: str
    OutputArn: str


class MediaConnectOutput(_MediaConnectOutput, total=False):
    Description: str
    Destination: str
    Encryption: MediaConnectEncryption
    EntitlementArn: str
    MediaLiveInputArn: str
    Port: int
    Transport: MediaConnectTransport


class _MediaConnectTransport(TypedDict):
    Protocol: str


class MediaConnectTransport(_MediaConnectTransport, total=False):
    MaxBitrate: int
    MaxLatency: int
    SmoothingLatency: int
    StreamId: str


class _MediaConnectGrantEntitlementRequest(TypedDict):
    Subscribers: List[str]


class MediaConnectGrantEntitlementRequest(_MediaConnectGrantEntitlementRequest, total=False):
    Description: str
    Encryption: MediaConnectEncryption
    Name: str


class MediaConnectSetSourceRequest(TypedDict, total=False):
    Decryption: MediaConnectEncryption
    Description: str
    EntitlementArn: str
    IngestPort: int
    MaxBitrate: int
    MaxLatency: int
    Name: str
    Protocol: str
    StreamId: str
    WhitelistCidr: str


class MediaConnectCreateFlowResponse(TypedDict, total=False):
    Flow: MediaConnectFlow


class _MediaConnectFlow(TypedDict):
    AvailabilityZone: str
    Entitlements: List[MediaConnectEntitlement]
    FlowArn: str
    Name: str
    Outputs: List[MediaConnectOutput]
    Source: MediaConnectSource
    Status: str


class MediaConnectFlow(_MediaConnectFlow, total=False):
    Description: str
    EgressIp: str


class _MediaConnectEntitlement(TypedDict):
    EntitlementArn: str
    Name: str
    Subscribers: List[str]


class MediaConnectEntitlement(_MediaConnectEntitlement, total=False):
    Description: str
    Encryption: MediaConnectEncryption


class _MediaConnectSource(TypedDict):
    Name: str
    SourceArn: str


class MediaConnectSource(_MediaConnectSource, total=False):
    Decryption: MediaConnectEncryption
    Description: str
    EntitlementArn: str
    IngestIp: str
    IngestPort: int
    Transport: MediaConnectTransport
    WhitelistCidr: str


class MediaConnectDeleteFlowResponse(TypedDict, total=False):
    FlowArn: str
    Status: str


class MediaConnectDescribeFlowResponse(TypedDict, total=False):
    Flow: MediaConnectFlow
    Messages: MediaConnectMessages


class MediaConnectMessages(TypedDict):
    Errors: List[str]


class MediaConnectGrantFlowEntitlementsResponse(TypedDict, total=False):
    Entitlements: List[MediaConnectEntitlement]
    FlowArn: str


class MediaConnectListEntitlementsResponse(TypedDict, total=False):
    Entitlements: List[MediaConnectListedEntitlement]
    NextToken: str


class MediaConnectListedEntitlement(TypedDict):
    EntitlementArn: str
    EntitlementName: str


class MediaConnectListFlowsResponse(TypedDict, total=False):
    Flows: List[MediaConnectListedFlow]
    NextToken: str


class MediaConnectListedFlow(TypedDict):
    AvailabilityZone: str
    Description: str
    FlowArn: str
    Name: str
    SourceType: str
    Status: str


class MediaConnectListTagsForResourceResponse(TypedDict, total=False):
    Tags: Dict[str, str]


class MediaConnectRemoveFlowOutputResponse(TypedDict, total=False):
    FlowArn: str
    OutputArn: str


class MediaConnectRevokeFlowEntitlementResponse(TypedDict, total=False):
    EntitlementArn: str
    FlowArn: str


class MediaConnectStartFlowResponse(TypedDict, total=False):
    FlowArn: str
    Status: str


class MediaConnectStopFlowResponse(TypedDict, total=False):
    FlowArn: str
    Status: str


class MediaConnectUpdateEncryption(TypedDict, total=False):
    Algorithm: str
    KeyType: str
    RoleArn: str
    SecretArn: str


class MediaConnectUpdateFlowEntitlementResponse(TypedDict, total=False):
    Entitlement: MediaConnectEntitlement
    FlowArn: str


class MediaConnectUpdateFlowOutputResponse(TypedDict, total=False):
    FlowArn: str
    Output: MediaConnectOutput


class MediaConnectUpdateFlowSourceResponse(TypedDict, total=False):
    FlowArn: str
    Source: MediaConnectSource


class MediaConvert(BaseClient):
    def associate_certificate(self, *,
        Arn: str
    ) -> MediaConvertAssociateCertificateResponse: ...

    def cancel_job(self, *,
        Id: str
    ) -> MediaConvertCancelJobResponse: ...

    def create_job(self, *,
        Role: str,
        Settings: MediaConvertJobSettings,
        AccelerationSettings: MediaConvertAccelerationSettings = ...,
        BillingTagsSource: str = ...,
        ClientRequestToken: str = ...,
        JobTemplate: str = ...,
        Queue: str = ...,
        StatusUpdateInterval: str = ...,
        UserMetadata: Dict[str, str] = ...
    ) -> MediaConvertCreateJobResponse: ...

    def create_job_template(self, *,
        Name: str,
        Settings: MediaConvertJobTemplateSettings,
        AccelerationSettings: MediaConvertAccelerationSettings = ...,
        Category: str = ...,
        Description: str = ...,
        Queue: str = ...,
        StatusUpdateInterval: str = ...,
        Tags: Dict[str, str] = ...
    ) -> MediaConvertCreateJobTemplateResponse: ...

    def create_preset(self, *,
        Name: str,
        Settings: MediaConvertPresetSettings,
        Category: str = ...,
        Description: str = ...,
        Tags: Dict[str, str] = ...
    ) -> MediaConvertCreatePresetResponse: ...

    def create_queue(self, *,
        Name: str,
        Description: str = ...,
        PricingPlan: str = ...,
        ReservationPlanSettings: MediaConvertReservationPlanSettings = ...,
        Tags: Dict[str, str] = ...
    ) -> MediaConvertCreateQueueResponse: ...

    def delete_job_template(self, *,
        Name: str
    ) -> MediaConvertDeleteJobTemplateResponse: ...

    def delete_preset(self, *,
        Name: str
    ) -> MediaConvertDeletePresetResponse: ...

    def delete_queue(self, *,
        Name: str
    ) -> MediaConvertDeleteQueueResponse: ...

    def describe_endpoints(self, *,
        MaxResults: int = ...,
        Mode: str = ...,
        NextToken: str = ...
    ) -> MediaConvertDescribeEndpointsResponse: ...

    def disassociate_certificate(self, *,
        Arn: str
    ) -> MediaConvertDisassociateCertificateResponse: ...

    def get_job(self, *,
        Id: str
    ) -> MediaConvertGetJobResponse: ...

    def get_job_template(self, *,
        Name: str
    ) -> MediaConvertGetJobTemplateResponse: ...

    def get_preset(self, *,
        Name: str
    ) -> MediaConvertGetPresetResponse: ...

    def get_queue(self, *,
        Name: str
    ) -> MediaConvertGetQueueResponse: ...

    def list_job_templates(self, *,
        Category: str = ...,
        ListBy: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        Order: str = ...
    ) -> MediaConvertListJobTemplatesResponse: ...

    def list_jobs(self, *,
        MaxResults: int = ...,
        NextToken: str = ...,
        Order: str = ...,
        Queue: str = ...,
        Status: str = ...
    ) -> MediaConvertListJobsResponse: ...

    def list_presets(self, *,
        Category: str = ...,
        ListBy: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        Order: str = ...
    ) -> MediaConvertListPresetsResponse: ...

    def list_queues(self, *,
        ListBy: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        Order: str = ...
    ) -> MediaConvertListQueuesResponse: ...

    def list_tags_for_resource(self, *,
        Arn: str
    ) -> MediaConvertListTagsForResourceResponse: ...

    def tag_resource(self, *,
        Arn: str,
        Tags: Dict[str, str]
    ) -> MediaConvertTagResourceResponse: ...

    def untag_resource(self, *,
        Arn: str,
        TagKeys: List[str] = ...
    ) -> MediaConvertUntagResourceResponse: ...

    def update_job_template(self, *,
        Name: str,
        AccelerationSettings: MediaConvertAccelerationSettings = ...,
        Category: str = ...,
        Description: str = ...,
        Queue: str = ...,
        Settings: MediaConvertJobTemplateSettings = ...,
        StatusUpdateInterval: str = ...
    ) -> MediaConvertUpdateJobTemplateResponse: ...

    def update_preset(self, *,
        Name: str,
        Category: str = ...,
        Description: str = ...,
        Settings: MediaConvertPresetSettings = ...
    ) -> MediaConvertUpdatePresetResponse: ...

    def update_queue(self, *,
        Name: str,
        Description: str = ...,
        ReservationPlanSettings: MediaConvertReservationPlanSettings = ...,
        Status: str = ...
    ) -> MediaConvertUpdateQueueResponse: ...


class MediaConvertAssociateCertificateResponse(TypedDict, total=False):
    pass


class MediaConvertCancelJobResponse(TypedDict, total=False):
    pass


class MediaConvertAccelerationSettings(TypedDict):
    Mode: str


class MediaConvertJobSettings(TypedDict, total=False):
    AdAvailOffset: int
    AvailBlanking: MediaConvertAvailBlanking
    Esam: MediaConvertEsamSettings
    Inputs: List[MediaConvertInput]
    MotionImageInserter: MediaConvertMotionImageInserter
    NielsenConfiguration: MediaConvertNielsenConfiguration
    OutputGroups: List[MediaConvertOutputGroup]
    TimecodeConfig: MediaConvertTimecodeConfig
    TimedMetadataInsertion: MediaConvertTimedMetadataInsertion


class MediaConvertAvailBlanking(TypedDict, total=False):
    AvailBlankingImage: str


class MediaConvertEsamSettings(TypedDict, total=False):
    ManifestConfirmConditionNotification: MediaConvertEsamManifestConfirmConditionNotification
    ResponseSignalPreroll: int
    SignalProcessingNotification: MediaConvertEsamSignalProcessingNotification


class MediaConvertEsamManifestConfirmConditionNotification(TypedDict, total=False):
    MccXml: str


class MediaConvertEsamSignalProcessingNotification(TypedDict, total=False):
    SccXml: str


class MediaConvertInput(TypedDict, total=False):
    AudioSelectorGroups: Dict[str, MediaConvertAudioSelectorGroup]
    AudioSelectors: Dict[str, MediaConvertAudioSelector]
    CaptionSelectors: Dict[str, MediaConvertCaptionSelector]
    DeblockFilter: str
    DecryptionSettings: MediaConvertInputDecryptionSettings
    DenoiseFilter: str
    FileInput: str
    FilterEnable: str
    FilterStrength: int
    ImageInserter: MediaConvertImageInserter
    InputClippings: List[MediaConvertInputClipping]
    ProgramNumber: int
    PsiControl: str
    SupplementalImps: List[str]
    TimecodeSource: str
    VideoSelector: MediaConvertVideoSelector


class MediaConvertAudioSelectorGroup(TypedDict, total=False):
    AudioSelectorNames: List[str]


class MediaConvertAudioSelector(TypedDict, total=False):
    CustomLanguageCode: str
    DefaultSelection: str
    ExternalAudioFileInput: str
    LanguageCode: str
    Offset: int
    Pids: List[int]
    ProgramSelection: int
    RemixSettings: MediaConvertRemixSettings
    SelectorType: str
    Tracks: List[int]


class MediaConvertRemixSettings(TypedDict, total=False):
    ChannelMapping: MediaConvertChannelMapping
    ChannelsIn: int
    ChannelsOut: int


class MediaConvertChannelMapping(TypedDict, total=False):
    OutputChannels: List[MediaConvertOutputChannelMapping]


class MediaConvertOutputChannelMapping(TypedDict, total=False):
    InputChannels: List[int]


class MediaConvertCaptionSelector(TypedDict, total=False):
    CustomLanguageCode: str
    LanguageCode: str
    SourceSettings: MediaConvertCaptionSourceSettings


class MediaConvertCaptionSourceSettings(TypedDict, total=False):
    AncillarySourceSettings: MediaConvertAncillarySourceSettings
    DvbSubSourceSettings: MediaConvertDvbSubSourceSettings
    EmbeddedSourceSettings: MediaConvertEmbeddedSourceSettings
    FileSourceSettings: MediaConvertFileSourceSettings
    SourceType: str
    TeletextSourceSettings: MediaConvertTeletextSourceSettings
    TrackSourceSettings: MediaConvertTrackSourceSettings


class MediaConvertAncillarySourceSettings(TypedDict, total=False):
    SourceAncillaryChannelNumber: int


class MediaConvertDvbSubSourceSettings(TypedDict, total=False):
    Pid: int


class MediaConvertEmbeddedSourceSettings(TypedDict, total=False):
    Convert608To708: str
    Source608ChannelNumber: int
    Source608TrackNumber: int


class MediaConvertFileSourceSettings(TypedDict, total=False):
    Convert608To708: str
    SourceFile: str
    TimeDelta: int


class MediaConvertTeletextSourceSettings(TypedDict, total=False):
    PageNumber: str


class MediaConvertTrackSourceSettings(TypedDict, total=False):
    TrackNumber: int


class MediaConvertInputDecryptionSettings(TypedDict, total=False):
    DecryptionMode: str
    EncryptedDecryptionKey: str
    InitializationVector: str
    KmsKeyRegion: str


class MediaConvertImageInserter(TypedDict, total=False):
    InsertableImages: List[MediaConvertInsertableImage]


class MediaConvertInsertableImage(TypedDict, total=False):
    Duration: int
    FadeIn: int
    FadeOut: int
    Height: int
    ImageInserterInput: str
    ImageX: int
    ImageY: int
    Layer: int
    Opacity: int
    StartTime: str
    Width: int


class MediaConvertInputClipping(TypedDict, total=False):
    EndTimecode: str
    StartTimecode: str


class MediaConvertVideoSelector(TypedDict, total=False):
    ColorSpace: str
    ColorSpaceUsage: str
    Hdr10Metadata: MediaConvertHdr10Metadata
    Pid: int
    ProgramNumber: int
    Rotate: str


class MediaConvertHdr10Metadata(TypedDict, total=False):
    BluePrimaryX: int
    BluePrimaryY: int
    GreenPrimaryX: int
    GreenPrimaryY: int
    MaxContentLightLevel: int
    MaxFrameAverageLightLevel: int
    MaxLuminance: int
    MinLuminance: int
    RedPrimaryX: int
    RedPrimaryY: int
    WhitePointX: int
    WhitePointY: int


class MediaConvertMotionImageInserter(TypedDict, total=False):
    Framerate: MediaConvertMotionImageInsertionFramerate
    Input: str
    InsertionMode: str
    Offset: MediaConvertMotionImageInsertionOffset
    Playback: str
    StartTime: str


class MediaConvertMotionImageInsertionFramerate(TypedDict, total=False):
    FramerateDenominator: int
    FramerateNumerator: int


class MediaConvertMotionImageInsertionOffset(TypedDict, total=False):
    ImageX: int
    ImageY: int


class MediaConvertNielsenConfiguration(TypedDict, total=False):
    BreakoutCode: int
    DistributorId: str


class MediaConvertOutputGroup(TypedDict, total=False):
    CustomName: str
    Name: str
    OutputGroupSettings: MediaConvertOutputGroupSettings
    Outputs: List[MediaConvertOutput]


class MediaConvertOutputGroupSettings(TypedDict, total=False):
    CmafGroupSettings: MediaConvertCmafGroupSettings
    DashIsoGroupSettings: MediaConvertDashIsoGroupSettings
    FileGroupSettings: MediaConvertFileGroupSettings
    HlsGroupSettings: MediaConvertHlsGroupSettings
    MsSmoothGroupSettings: MediaConvertMsSmoothGroupSettings
    Type: str


class MediaConvertCmafGroupSettings(TypedDict, total=False):
    BaseUrl: str
    ClientCache: str
    CodecSpecification: str
    Destination: str
    DestinationSettings: MediaConvertDestinationSettings
    Encryption: MediaConvertCmafEncryptionSettings
    FragmentLength: int
    ManifestCompression: str
    ManifestDurationFormat: str
    MinBufferTime: int
    MinFinalSegmentLength: float
    SegmentControl: str
    SegmentLength: int
    StreamInfResolution: str
    WriteDashManifest: str
    WriteHlsManifest: str


class MediaConvertDestinationSettings(TypedDict, total=False):
    S3Settings: MediaConvertS3DestinationSettings


class MediaConvertS3DestinationSettings(TypedDict, total=False):
    Encryption: MediaConvertS3EncryptionSettings


class MediaConvertS3EncryptionSettings(TypedDict, total=False):
    EncryptionType: str
    KmsKeyArn: str


class MediaConvertCmafEncryptionSettings(TypedDict, total=False):
    ConstantInitializationVector: str
    EncryptionMethod: str
    InitializationVectorInManifest: str
    StaticKeyProvider: MediaConvertStaticKeyProvider
    Type: str


class MediaConvertStaticKeyProvider(TypedDict, total=False):
    KeyFormat: str
    KeyFormatVersions: str
    StaticKeyValue: str
    Url: str


class MediaConvertDashIsoGroupSettings(TypedDict, total=False):
    BaseUrl: str
    Destination: str
    DestinationSettings: MediaConvertDestinationSettings
    Encryption: MediaConvertDashIsoEncryptionSettings
    FragmentLength: int
    HbbtvCompliance: str
    MinBufferTime: int
    SegmentControl: str
    SegmentLength: int
    WriteSegmentTimelineInRepresentation: str


class MediaConvertDashIsoEncryptionSettings(TypedDict, total=False):
    PlaybackDeviceCompatibility: str
    SpekeKeyProvider: MediaConvertSpekeKeyProvider


class MediaConvertSpekeKeyProvider(TypedDict, total=False):
    CertificateArn: str
    ResourceId: str
    SystemIds: List[str]
    Url: str


class MediaConvertFileGroupSettings(TypedDict, total=False):
    Destination: str
    DestinationSettings: MediaConvertDestinationSettings


class MediaConvertHlsGroupSettings(TypedDict, total=False):
    AdMarkers: List[str]
    BaseUrl: str
    CaptionLanguageMappings: List[MediaConvertHlsCaptionLanguageMapping]
    CaptionLanguageSetting: str
    ClientCache: str
    CodecSpecification: str
    Destination: str
    DestinationSettings: MediaConvertDestinationSettings
    DirectoryStructure: str
    Encryption: MediaConvertHlsEncryptionSettings
    ManifestCompression: str
    ManifestDurationFormat: str
    MinFinalSegmentLength: float
    MinSegmentLength: int
    OutputSelection: str
    ProgramDateTime: str
    ProgramDateTimePeriod: int
    SegmentControl: str
    SegmentLength: int
    SegmentsPerSubdirectory: int
    StreamInfResolution: str
    TimedMetadataId3Frame: str
    TimedMetadataId3Period: int
    TimestampDeltaMilliseconds: int


class MediaConvertHlsCaptionLanguageMapping(TypedDict, total=False):
    CaptionChannel: int
    CustomLanguageCode: str
    LanguageCode: str
    LanguageDescription: str


class MediaConvertHlsEncryptionSettings(TypedDict, total=False):
    ConstantInitializationVector: str
    EncryptionMethod: str
    InitializationVectorInManifest: str
    OfflineEncrypted: str
    SpekeKeyProvider: MediaConvertSpekeKeyProvider
    StaticKeyProvider: MediaConvertStaticKeyProvider
    Type: str


class MediaConvertMsSmoothGroupSettings(TypedDict, total=False):
    AudioDeduplication: str
    Destination: str
    DestinationSettings: MediaConvertDestinationSettings
    Encryption: MediaConvertMsSmoothEncryptionSettings
    FragmentLength: int
    ManifestEncoding: str


class MediaConvertMsSmoothEncryptionSettings(TypedDict, total=False):
    SpekeKeyProvider: MediaConvertSpekeKeyProvider


class MediaConvertOutput(TypedDict, total=False):
    AudioDescriptions: List[MediaConvertAudioDescription]
    CaptionDescriptions: List[MediaConvertCaptionDescription]
    ContainerSettings: MediaConvertContainerSettings
    Extension: str
    NameModifier: str
    OutputSettings: MediaConvertOutputSettings
    Preset: str
    VideoDescription: MediaConvertVideoDescription


class MediaConvertAudioDescription(TypedDict, total=False):
    AudioNormalizationSettings: MediaConvertAudioNormalizationSettings
    AudioSourceName: str
    AudioType: int
    AudioTypeControl: str
    CodecSettings: MediaConvertAudioCodecSettings
    CustomLanguageCode: str
    LanguageCode: str
    LanguageCodeControl: str
    RemixSettings: MediaConvertRemixSettings
    StreamName: str


class MediaConvertAudioNormalizationSettings(TypedDict, total=False):
    Algorithm: str
    AlgorithmControl: str
    CorrectionGateLevel: int
    LoudnessLogging: str
    PeakCalculation: str
    TargetLkfs: float


class MediaConvertAudioCodecSettings(TypedDict, total=False):
    AacSettings: MediaConvertAacSettings
    Ac3Settings: MediaConvertAc3Settings
    AiffSettings: MediaConvertAiffSettings
    Codec: str
    Eac3Settings: MediaConvertEac3Settings
    Mp2Settings: MediaConvertMp2Settings
    WavSettings: MediaConvertWavSettings


class MediaConvertAacSettings(TypedDict, total=False):
    AudioDescriptionBroadcasterMix: str
    Bitrate: int
    CodecProfile: str
    CodingMode: str
    RateControlMode: str
    RawFormat: str
    SampleRate: int
    Specification: str
    VbrQuality: str


class MediaConvertAc3Settings(TypedDict, total=False):
    Bitrate: int
    BitstreamMode: str
    CodingMode: str
    Dialnorm: int
    DynamicRangeCompressionProfile: str
    LfeFilter: str
    MetadataControl: str
    SampleRate: int


class MediaConvertAiffSettings(TypedDict, total=False):
    BitDepth: int
    Channels: int
    SampleRate: int


class MediaConvertEac3Settings(TypedDict, total=False):
    AttenuationControl: str
    Bitrate: int
    BitstreamMode: str
    CodingMode: str
    DcFilter: str
    Dialnorm: int
    DynamicRangeCompressionLine: str
    DynamicRangeCompressionRf: str
    LfeControl: str
    LfeFilter: str
    LoRoCenterMixLevel: float
    LoRoSurroundMixLevel: float
    LtRtCenterMixLevel: float
    LtRtSurroundMixLevel: float
    MetadataControl: str
    PassthroughControl: str
    PhaseControl: str
    SampleRate: int
    StereoDownmix: str
    SurroundExMode: str
    SurroundMode: str


class MediaConvertMp2Settings(TypedDict, total=False):
    Bitrate: int
    Channels: int
    SampleRate: int


class MediaConvertWavSettings(TypedDict, total=False):
    BitDepth: int
    Channels: int
    Format: str
    SampleRate: int


class MediaConvertCaptionDescription(TypedDict, total=False):
    CaptionSelectorName: str
    CustomLanguageCode: str
    DestinationSettings: MediaConvertCaptionDestinationSettings
    LanguageCode: str
    LanguageDescription: str


class MediaConvertCaptionDestinationSettings(TypedDict, total=False):
    BurninDestinationSettings: MediaConvertBurninDestinationSettings
    DestinationType: str
    DvbSubDestinationSettings: MediaConvertDvbSubDestinationSettings
    EmbeddedDestinationSettings: MediaConvertEmbeddedDestinationSettings
    SccDestinationSettings: MediaConvertSccDestinationSettings
    TeletextDestinationSettings: MediaConvertTeletextDestinationSettings
    TtmlDestinationSettings: MediaConvertTtmlDestinationSettings


class MediaConvertBurninDestinationSettings(TypedDict, total=False):
    Alignment: str
    BackgroundColor: str
    BackgroundOpacity: int
    FontColor: str
    FontOpacity: int
    FontResolution: int
    FontScript: str
    FontSize: int
    OutlineColor: str
    OutlineSize: int
    ShadowColor: str
    ShadowOpacity: int
    ShadowXOffset: int
    ShadowYOffset: int
    TeletextSpacing: str
    XPosition: int
    YPosition: int


class MediaConvertDvbSubDestinationSettings(TypedDict, total=False):
    Alignment: str
    BackgroundColor: str
    BackgroundOpacity: int
    FontColor: str
    FontOpacity: int
    FontResolution: int
    FontScript: str
    FontSize: int
    OutlineColor: str
    OutlineSize: int
    ShadowColor: str
    ShadowOpacity: int
    ShadowXOffset: int
    ShadowYOffset: int
    TeletextSpacing: str
    XPosition: int
    YPosition: int


class MediaConvertEmbeddedDestinationSettings(TypedDict, total=False):
    Destination608ChannelNumber: int


class MediaConvertSccDestinationSettings(TypedDict, total=False):
    Framerate: str


class MediaConvertTeletextDestinationSettings(TypedDict, total=False):
    PageNumber: str


class MediaConvertTtmlDestinationSettings(TypedDict, total=False):
    StylePassthrough: str


class MediaConvertContainerSettings(TypedDict, total=False):
    Container: str
    F4vSettings: MediaConvertF4vSettings
    M2tsSettings: MediaConvertM2tsSettings
    M3u8Settings: MediaConvertM3u8Settings
    MovSettings: MediaConvertMovSettings
    Mp4Settings: MediaConvertMp4Settings


class MediaConvertF4vSettings(TypedDict, total=False):
    MoovPlacement: str


class MediaConvertM2tsSettings(TypedDict, total=False):
    AudioBufferModel: str
    AudioFramesPerPes: int
    AudioPids: List[int]
    Bitrate: int
    BufferModel: str
    DvbNitSettings: MediaConvertDvbNitSettings
    DvbSdtSettings: MediaConvertDvbSdtSettings
    DvbSubPids: List[int]
    DvbTdtSettings: MediaConvertDvbTdtSettings
    DvbTeletextPid: int
    EbpAudioInterval: str
    EbpPlacement: str
    EsRateInPes: str
    ForceTsVideoEbpOrder: str
    FragmentTime: float
    MaxPcrInterval: int
    MinEbpInterval: int
    NielsenId3: str
    NullPacketBitrate: float
    PatInterval: int
    PcrControl: str
    PcrPid: int
    PmtInterval: int
    PmtPid: int
    PrivateMetadataPid: int
    ProgramNumber: int
    RateMode: str
    Scte35Esam: MediaConvertM2tsScte35Esam
    Scte35Pid: int
    Scte35Source: str
    SegmentationMarkers: str
    SegmentationStyle: str
    SegmentationTime: float
    TimedMetadataPid: int
    TransportStreamId: int
    VideoPid: int


class MediaConvertDvbNitSettings(TypedDict, total=False):
    NetworkId: int
    NetworkName: str
    NitInterval: int


class MediaConvertDvbSdtSettings(TypedDict, total=False):
    OutputSdt: str
    SdtInterval: int
    ServiceName: str
    ServiceProviderName: str


class MediaConvertDvbTdtSettings(TypedDict, total=False):
    TdtInterval: int


class MediaConvertM2tsScte35Esam(TypedDict, total=False):
    Scte35EsamPid: int


class MediaConvertM3u8Settings(TypedDict, total=False):
    AudioFramesPerPes: int
    AudioPids: List[int]
    NielsenId3: str
    PatInterval: int
    PcrControl: str
    PcrPid: int
    PmtInterval: int
    PmtPid: int
    PrivateMetadataPid: int
    ProgramNumber: int
    Scte35Pid: int
    Scte35Source: str
    TimedMetadata: str
    TimedMetadataPid: int
    TransportStreamId: int
    VideoPid: int


class MediaConvertMovSettings(TypedDict, total=False):
    ClapAtom: str
    CslgAtom: str
    Mpeg2FourCCControl: str
    PaddingControl: str
    Reference: str


class MediaConvertMp4Settings(TypedDict, total=False):
    CslgAtom: str
    FreeSpaceBox: str
    MoovPlacement: str
    Mp4MajorBrand: str


class MediaConvertOutputSettings(TypedDict, total=False):
    HlsSettings: MediaConvertHlsSettings


class MediaConvertHlsSettings(TypedDict, total=False):
    AudioGroupId: str
    AudioRenditionSets: str
    AudioTrackType: str
    IFrameOnlyManifest: str
    SegmentModifier: str


class MediaConvertVideoDescription(TypedDict, total=False):
    AfdSignaling: str
    AntiAlias: str
    CodecSettings: MediaConvertVideoCodecSettings
    ColorMetadata: str
    Crop: MediaConvertRectangle
    DropFrameTimecode: str
    FixedAfd: int
    Height: int
    Position: MediaConvertRectangle
    RespondToAfd: str
    ScalingBehavior: str
    Sharpness: int
    TimecodeInsertion: str
    VideoPreprocessors: MediaConvertVideoPreprocessor
    Width: int


class MediaConvertVideoCodecSettings(TypedDict, total=False):
    Codec: str
    FrameCaptureSettings: MediaConvertFrameCaptureSettings
    H264Settings: MediaConvertH264Settings
    H265Settings: MediaConvertH265Settings
    Mpeg2Settings: MediaConvertMpeg2Settings
    ProresSettings: MediaConvertProresSettings


class MediaConvertFrameCaptureSettings(TypedDict, total=False):
    FramerateDenominator: int
    FramerateNumerator: int
    MaxCaptures: int
    Quality: int


class MediaConvertH264Settings(TypedDict, total=False):
    AdaptiveQuantization: str
    Bitrate: int
    CodecLevel: str
    CodecProfile: str
    DynamicSubGop: str
    EntropyEncoding: str
    FieldEncoding: str
    FlickerAdaptiveQuantization: str
    FramerateControl: str
    FramerateConversionAlgorithm: str
    FramerateDenominator: int
    FramerateNumerator: int
    GopBReference: str
    GopClosedCadence: int
    GopSize: float
    GopSizeUnits: str
    HrdBufferInitialFillPercentage: int
    HrdBufferSize: int
    InterlaceMode: str
    MaxBitrate: int
    MinIInterval: int
    NumberBFramesBetweenReferenceFrames: int
    NumberReferenceFrames: int
    ParControl: str
    ParDenominator: int
    ParNumerator: int
    QualityTuningLevel: str
    QvbrSettings: MediaConvertH264QvbrSettings
    RateControlMode: str
    RepeatPps: str
    SceneChangeDetect: str
    Slices: int
    SlowPal: str
    Softness: int
    SpatialAdaptiveQuantization: str
    Syntax: str
    Telecine: str
    TemporalAdaptiveQuantization: str
    UnregisteredSeiTimecode: str


class MediaConvertH264QvbrSettings(TypedDict, total=False):
    MaxAverageBitrate: int
    QvbrQualityLevel: int


class MediaConvertH265Settings(TypedDict, total=False):
    AdaptiveQuantization: str
    AlternateTransferFunctionSei: str
    Bitrate: int
    CodecLevel: str
    CodecProfile: str
    DynamicSubGop: str
    FlickerAdaptiveQuantization: str
    FramerateControl: str
    FramerateConversionAlgorithm: str
    FramerateDenominator: int
    FramerateNumerator: int
    GopBReference: str
    GopClosedCadence: int
    GopSize: float
    GopSizeUnits: str
    HrdBufferInitialFillPercentage: int
    HrdBufferSize: int
    InterlaceMode: str
    MaxBitrate: int
    MinIInterval: int
    NumberBFramesBetweenReferenceFrames: int
    NumberReferenceFrames: int
    ParControl: str
    ParDenominator: int
    ParNumerator: int
    QualityTuningLevel: str
    QvbrSettings: MediaConvertH265QvbrSettings
    RateControlMode: str
    SampleAdaptiveOffsetFilterMode: str
    SceneChangeDetect: str
    Slices: int
    SlowPal: str
    SpatialAdaptiveQuantization: str
    Telecine: str
    TemporalAdaptiveQuantization: str
    TemporalIds: str
    Tiles: str
    UnregisteredSeiTimecode: str
    WriteMp4PackagingType: str


class MediaConvertH265QvbrSettings(TypedDict, total=False):
    MaxAverageBitrate: int
    QvbrQualityLevel: int


class MediaConvertMpeg2Settings(TypedDict, total=False):
    AdaptiveQuantization: str
    Bitrate: int
    CodecLevel: str
    CodecProfile: str
    DynamicSubGop: str
    FramerateControl: str
    FramerateConversionAlgorithm: str
    FramerateDenominator: int
    FramerateNumerator: int
    GopClosedCadence: int
    GopSize: float
    GopSizeUnits: str
    HrdBufferInitialFillPercentage: int
    HrdBufferSize: int
    InterlaceMode: str
    IntraDcPrecision: str
    MaxBitrate: int
    MinIInterval: int
    NumberBFramesBetweenReferenceFrames: int
    ParControl: str
    ParDenominator: int
    ParNumerator: int
    QualityTuningLevel: str
    RateControlMode: str
    SceneChangeDetect: str
    SlowPal: str
    Softness: int
    SpatialAdaptiveQuantization: str
    Syntax: str
    Telecine: str
    TemporalAdaptiveQuantization: str


class MediaConvertProresSettings(TypedDict, total=False):
    CodecProfile: str
    FramerateControl: str
    FramerateConversionAlgorithm: str
    FramerateDenominator: int
    FramerateNumerator: int
    InterlaceMode: str
    ParControl: str
    ParDenominator: int
    ParNumerator: int
    SlowPal: str
    Telecine: str


class MediaConvertRectangle(TypedDict, total=False):
    Height: int
    Width: int
    X: int
    Y: int


class MediaConvertVideoPreprocessor(TypedDict, total=False):
    ColorCorrector: MediaConvertColorCorrector
    Deinterlacer: MediaConvertDeinterlacer
    ImageInserter: MediaConvertImageInserter
    NoiseReducer: MediaConvertNoiseReducer
    TimecodeBurnin: MediaConvertTimecodeBurnin


class MediaConvertColorCorrector(TypedDict, total=False):
    Brightness: int
    ColorSpaceConversion: str
    Contrast: int
    Hdr10Metadata: MediaConvertHdr10Metadata
    Hue: int
    Saturation: int


class MediaConvertDeinterlacer(TypedDict, total=False):
    Algorithm: str
    Control: str
    Mode: str


class MediaConvertNoiseReducer(TypedDict, total=False):
    Filter: str
    FilterSettings: MediaConvertNoiseReducerFilterSettings
    SpatialFilterSettings: MediaConvertNoiseReducerSpatialFilterSettings


class MediaConvertNoiseReducerFilterSettings(TypedDict, total=False):
    Strength: int


class MediaConvertNoiseReducerSpatialFilterSettings(TypedDict, total=False):
    PostFilterSharpenStrength: int
    Speed: int
    Strength: int


class MediaConvertTimecodeBurnin(TypedDict, total=False):
    FontSize: int
    Position: str
    Prefix: str


class MediaConvertTimecodeConfig(TypedDict, total=False):
    Anchor: str
    Source: str
    Start: str
    TimestampOffset: str


class MediaConvertTimedMetadataInsertion(TypedDict, total=False):
    Id3Insertions: List[MediaConvertId3Insertion]


class MediaConvertId3Insertion(TypedDict, total=False):
    Id3: str
    Timecode: str


class MediaConvertCreateJobResponse(TypedDict, total=False):
    Job: MediaConvertJob


class _MediaConvertJob(TypedDict):
    Role: str
    Settings: MediaConvertJobSettings


class MediaConvertJob(_MediaConvertJob, total=False):
    AccelerationSettings: MediaConvertAccelerationSettings
    Arn: str
    BillingTagsSource: str
    CreatedAt: datetime.datetime
    CurrentPhase: str
    ErrorCode: int
    ErrorMessage: str
    Id: str
    JobPercentComplete: int
    JobTemplate: str
    OutputGroupDetails: List[MediaConvertOutputGroupDetail]
    Queue: str
    RetryCount: int
    Status: str
    StatusUpdateInterval: str
    Timing: MediaConvertTiming
    UserMetadata: Dict[str, str]


class MediaConvertOutputGroupDetail(TypedDict, total=False):
    OutputDetails: List[MediaConvertOutputDetail]


class MediaConvertOutputDetail(TypedDict, total=False):
    DurationInMs: int
    VideoDetails: MediaConvertVideoDetail


class MediaConvertVideoDetail(TypedDict, total=False):
    HeightInPx: int
    WidthInPx: int


class MediaConvertTiming(TypedDict, total=False):
    FinishTime: datetime.datetime
    StartTime: datetime.datetime
    SubmitTime: datetime.datetime


class MediaConvertJobTemplateSettings(TypedDict, total=False):
    AdAvailOffset: int
    AvailBlanking: MediaConvertAvailBlanking
    Esam: MediaConvertEsamSettings
    Inputs: List[MediaConvertInputTemplate]
    MotionImageInserter: MediaConvertMotionImageInserter
    NielsenConfiguration: MediaConvertNielsenConfiguration
    OutputGroups: List[MediaConvertOutputGroup]
    TimecodeConfig: MediaConvertTimecodeConfig
    TimedMetadataInsertion: MediaConvertTimedMetadataInsertion


class MediaConvertInputTemplate(TypedDict, total=False):
    AudioSelectorGroups: Dict[str, MediaConvertAudioSelectorGroup]
    AudioSelectors: Dict[str, MediaConvertAudioSelector]
    CaptionSelectors: Dict[str, MediaConvertCaptionSelector]
    DeblockFilter: str
    DenoiseFilter: str
    FilterEnable: str
    FilterStrength: int
    ImageInserter: MediaConvertImageInserter
    InputClippings: List[MediaConvertInputClipping]
    ProgramNumber: int
    PsiControl: str
    TimecodeSource: str
    VideoSelector: MediaConvertVideoSelector


class MediaConvertCreateJobTemplateResponse(TypedDict, total=False):
    JobTemplate: MediaConvertJobTemplate


class _MediaConvertJobTemplate(TypedDict):
    Name: str
    Settings: MediaConvertJobTemplateSettings


class MediaConvertJobTemplate(_MediaConvertJobTemplate, total=False):
    AccelerationSettings: MediaConvertAccelerationSettings
    Arn: str
    Category: str
    CreatedAt: datetime.datetime
    Description: str
    LastUpdated: datetime.datetime
    Queue: str
    StatusUpdateInterval: str
    Type: str


class MediaConvertPresetSettings(TypedDict, total=False):
    AudioDescriptions: List[MediaConvertAudioDescription]
    CaptionDescriptions: List[MediaConvertCaptionDescriptionPreset]
    ContainerSettings: MediaConvertContainerSettings
    VideoDescription: MediaConvertVideoDescription


class MediaConvertCaptionDescriptionPreset(TypedDict, total=False):
    CustomLanguageCode: str
    DestinationSettings: MediaConvertCaptionDestinationSettings
    LanguageCode: str
    LanguageDescription: str


class MediaConvertCreatePresetResponse(TypedDict, total=False):
    Preset: MediaConvertPreset


class _MediaConvertPreset(TypedDict):
    Name: str
    Settings: MediaConvertPresetSettings


class MediaConvertPreset(_MediaConvertPreset, total=False):
    Arn: str
    Category: str
    CreatedAt: datetime.datetime
    Description: str
    LastUpdated: datetime.datetime
    Type: str


class MediaConvertReservationPlanSettings(TypedDict):
    Commitment: str
    RenewalType: str
    ReservedSlots: int


class MediaConvertCreateQueueResponse(TypedDict, total=False):
    Queue: MediaConvertQueue


class _MediaConvertQueue(TypedDict):
    Name: str


class MediaConvertQueue(_MediaConvertQueue, total=False):
    Arn: str
    CreatedAt: datetime.datetime
    Description: str
    LastUpdated: datetime.datetime
    PricingPlan: str
    ProgressingJobsCount: int
    ReservationPlan: MediaConvertReservationPlan
    Status: str
    SubmittedJobsCount: int
    Type: str


class MediaConvertReservationPlan(TypedDict, total=False):
    Commitment: str
    ExpiresAt: datetime.datetime
    PurchasedAt: datetime.datetime
    RenewalType: str
    ReservedSlots: int
    Status: str


class MediaConvertDeleteJobTemplateResponse(TypedDict, total=False):
    pass


class MediaConvertDeletePresetResponse(TypedDict, total=False):
    pass


class MediaConvertDeleteQueueResponse(TypedDict, total=False):
    pass


class MediaConvertDescribeEndpointsResponse(TypedDict, total=False):
    Endpoints: List[MediaConvertEndpoint]
    NextToken: str


class MediaConvertEndpoint(TypedDict, total=False):
    Url: str


class MediaConvertDisassociateCertificateResponse(TypedDict, total=False):
    pass


class MediaConvertGetJobResponse(TypedDict, total=False):
    Job: MediaConvertJob


class MediaConvertGetJobTemplateResponse(TypedDict, total=False):
    JobTemplate: MediaConvertJobTemplate


class MediaConvertGetPresetResponse(TypedDict, total=False):
    Preset: MediaConvertPreset


class MediaConvertGetQueueResponse(TypedDict, total=False):
    Queue: MediaConvertQueue


class MediaConvertListJobTemplatesResponse(TypedDict, total=False):
    JobTemplates: List[MediaConvertJobTemplate]
    NextToken: str


class MediaConvertListJobsResponse(TypedDict, total=False):
    Jobs: List[MediaConvertJob]
    NextToken: str


class MediaConvertListPresetsResponse(TypedDict, total=False):
    NextToken: str
    Presets: List[MediaConvertPreset]


class MediaConvertListQueuesResponse(TypedDict, total=False):
    NextToken: str
    Queues: List[MediaConvertQueue]


class MediaConvertListTagsForResourceResponse(TypedDict, total=False):
    ResourceTags: MediaConvertResourceTags


class MediaConvertResourceTags(TypedDict, total=False):
    Arn: str
    Tags: Dict[str, str]


class MediaConvertTagResourceResponse(TypedDict, total=False):
    pass


class MediaConvertUntagResourceResponse(TypedDict, total=False):
    pass


class MediaConvertUpdateJobTemplateResponse(TypedDict, total=False):
    JobTemplate: MediaConvertJobTemplate


class MediaConvertUpdatePresetResponse(TypedDict, total=False):
    Preset: MediaConvertPreset


class MediaConvertUpdateQueueResponse(TypedDict, total=False):
    Queue: MediaConvertQueue


class MediaLive(BaseClient):
    def batch_update_schedule(self, *,
        ChannelId: str,
        Creates: MediaLiveBatchScheduleActionCreateRequest = ...,
        Deletes: MediaLiveBatchScheduleActionDeleteRequest = ...
    ) -> MediaLiveBatchUpdateScheduleResponse: ...

    def create_channel(self, *,
        ChannelClass: str = ...,
        Destinations: List[MediaLiveOutputDestination] = ...,
        EncoderSettings: MediaLiveEncoderSettings = ...,
        InputAttachments: List[MediaLiveInputAttachment] = ...,
        InputSpecification: MediaLiveInputSpecification = ...,
        LogLevel: str = ...,
        Name: str = ...,
        RequestId: str = ...,
        Reserved: str = ...,
        RoleArn: str = ...,
        Tags: Dict[str, str] = ...
    ) -> MediaLiveCreateChannelResponse: ...

    def create_input(self, *,
        Destinations: List[MediaLiveInputDestinationRequest] = ...,
        InputSecurityGroups: List[str] = ...,
        MediaConnectFlows: List[MediaLiveMediaConnectFlowRequest] = ...,
        Name: str = ...,
        RequestId: str = ...,
        RoleArn: str = ...,
        Sources: List[MediaLiveInputSourceRequest] = ...,
        Tags: Dict[str, str] = ...,
        Type: str = ...,
        Vpc: MediaLiveInputVpcRequest = ...
    ) -> MediaLiveCreateInputResponse: ...

    def create_input_security_group(self, *,
        Tags: Dict[str, str] = ...,
        WhitelistRules: List[MediaLiveInputWhitelistRuleCidr] = ...
    ) -> MediaLiveCreateInputSecurityGroupResponse: ...

    def create_tags(self, *,
        ResourceArn: str,
        Tags: Dict[str, str] = ...
    ): ...

    def delete_channel(self, *,
        ChannelId: str
    ) -> MediaLiveDeleteChannelResponse: ...

    def delete_input(self, *,
        InputId: str
    ) -> MediaLiveDeleteInputResponse: ...

    def delete_input_security_group(self, *,
        InputSecurityGroupId: str
    ) -> MediaLiveDeleteInputSecurityGroupResponse: ...

    def delete_reservation(self, *,
        ReservationId: str
    ) -> MediaLiveDeleteReservationResponse: ...

    def delete_schedule(self, *,
        ChannelId: str
    ) -> MediaLiveDeleteScheduleResponse: ...

    def delete_tags(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ): ...

    def describe_channel(self, *,
        ChannelId: str
    ) -> MediaLiveDescribeChannelResponse: ...

    def describe_input(self, *,
        InputId: str
    ) -> MediaLiveDescribeInputResponse: ...

    def describe_input_security_group(self, *,
        InputSecurityGroupId: str
    ) -> MediaLiveDescribeInputSecurityGroupResponse: ...

    def describe_offering(self, *,
        OfferingId: str
    ) -> MediaLiveDescribeOfferingResponse: ...

    def describe_reservation(self, *,
        ReservationId: str
    ) -> MediaLiveDescribeReservationResponse: ...

    def describe_schedule(self, *,
        ChannelId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MediaLiveDescribeScheduleResponse: ...

    def list_channels(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MediaLiveListChannelsResponse: ...

    def list_input_security_groups(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MediaLiveListInputSecurityGroupsResponse: ...

    def list_inputs(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MediaLiveListInputsResponse: ...

    def list_offerings(self, *,
        ChannelClass: str = ...,
        ChannelConfiguration: str = ...,
        Codec: str = ...,
        MaxResults: int = ...,
        MaximumBitrate: str = ...,
        MaximumFramerate: str = ...,
        NextToken: str = ...,
        Resolution: str = ...,
        ResourceType: str = ...,
        SpecialFeature: str = ...,
        VideoQuality: str = ...
    ) -> MediaLiveListOfferingsResponse: ...

    def list_reservations(self, *,
        ChannelClass: str = ...,
        Codec: str = ...,
        MaxResults: int = ...,
        MaximumBitrate: str = ...,
        MaximumFramerate: str = ...,
        NextToken: str = ...,
        Resolution: str = ...,
        ResourceType: str = ...,
        SpecialFeature: str = ...,
        VideoQuality: str = ...
    ) -> MediaLiveListReservationsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> MediaLiveListTagsForResourceResponse: ...

    def purchase_offering(self, *,
        Count: int,
        OfferingId: str,
        Name: str = ...,
        RequestId: str = ...,
        Start: str = ...,
        Tags: Dict[str, str] = ...
    ) -> MediaLivePurchaseOfferingResponse: ...

    def start_channel(self, *,
        ChannelId: str
    ) -> MediaLiveStartChannelResponse: ...

    def stop_channel(self, *,
        ChannelId: str
    ) -> MediaLiveStopChannelResponse: ...

    def update_channel(self, *,
        ChannelId: str,
        Destinations: List[MediaLiveOutputDestination] = ...,
        EncoderSettings: MediaLiveEncoderSettings = ...,
        InputAttachments: List[MediaLiveInputAttachment] = ...,
        InputSpecification: MediaLiveInputSpecification = ...,
        LogLevel: str = ...,
        Name: str = ...,
        RoleArn: str = ...
    ) -> MediaLiveUpdateChannelResponse: ...

    def update_channel_class(self, *,
        ChannelClass: str,
        ChannelId: str,
        Destinations: List[MediaLiveOutputDestination] = ...
    ) -> MediaLiveUpdateChannelClassResponse: ...

    def update_input(self, *,
        InputId: str,
        Destinations: List[MediaLiveInputDestinationRequest] = ...,
        InputSecurityGroups: List[str] = ...,
        MediaConnectFlows: List[MediaLiveMediaConnectFlowRequest] = ...,
        Name: str = ...,
        RoleArn: str = ...,
        Sources: List[MediaLiveInputSourceRequest] = ...
    ) -> MediaLiveUpdateInputResponse: ...

    def update_input_security_group(self, *,
        InputSecurityGroupId: str,
        Tags: Dict[str, str] = ...,
        WhitelistRules: List[MediaLiveInputWhitelistRuleCidr] = ...
    ) -> MediaLiveUpdateInputSecurityGroupResponse: ...

    def update_reservation(self, *,
        ReservationId: str,
        Name: str = ...
    ) -> MediaLiveUpdateReservationResponse: ...


class MediaLiveBatchScheduleActionCreateRequest(TypedDict):
    ScheduleActions: List[MediaLiveScheduleAction]


class MediaLiveScheduleAction(TypedDict):
    ActionName: str
    ScheduleActionSettings: MediaLiveScheduleActionSettings
    ScheduleActionStartSettings: MediaLiveScheduleActionStartSettings


class MediaLiveScheduleActionSettings(TypedDict, total=False):
    HlsTimedMetadataSettings: MediaLiveHlsTimedMetadataScheduleActionSettings
    InputSwitchSettings: MediaLiveInputSwitchScheduleActionSettings
    PauseStateSettings: MediaLivePauseStateScheduleActionSettings
    Scte35ReturnToNetworkSettings: MediaLiveScte35ReturnToNetworkScheduleActionSettings
    Scte35SpliceInsertSettings: MediaLiveScte35SpliceInsertScheduleActionSettings
    Scte35TimeSignalSettings: MediaLiveScte35TimeSignalScheduleActionSettings
    StaticImageActivateSettings: MediaLiveStaticImageActivateScheduleActionSettings
    StaticImageDeactivateSettings: MediaLiveStaticImageDeactivateScheduleActionSettings


class MediaLiveHlsTimedMetadataScheduleActionSettings(TypedDict):
    Id3: str


class MediaLiveInputSwitchScheduleActionSettings(TypedDict):
    InputAttachmentNameReference: str


class MediaLivePauseStateScheduleActionSettings(TypedDict, total=False):
    Pipelines: List[MediaLivePipelinePauseStateSettings]


class MediaLivePipelinePauseStateSettings(TypedDict):
    PipelineId: str


class MediaLiveScte35ReturnToNetworkScheduleActionSettings(TypedDict):
    SpliceEventId: int


class _MediaLiveScte35SpliceInsertScheduleActionSettings(TypedDict):
    SpliceEventId: int


class MediaLiveScte35SpliceInsertScheduleActionSettings(_MediaLiveScte35SpliceInsertScheduleActionSettings, total=False):
    Duration: int


class MediaLiveScte35TimeSignalScheduleActionSettings(TypedDict):
    Scte35Descriptors: List[MediaLiveScte35Descriptor]


class MediaLiveScte35Descriptor(TypedDict):
    Scte35DescriptorSettings: MediaLiveScte35DescriptorSettings


class MediaLiveScte35DescriptorSettings(TypedDict):
    SegmentationDescriptorScte35DescriptorSettings: MediaLiveScte35SegmentationDescriptor


class _MediaLiveScte35SegmentationDescriptor(TypedDict):
    SegmentationCancelIndicator: str
    SegmentationEventId: int


class MediaLiveScte35SegmentationDescriptor(_MediaLiveScte35SegmentationDescriptor, total=False):
    DeliveryRestrictions: MediaLiveScte35DeliveryRestrictions
    SegmentNum: int
    SegmentationDuration: int
    SegmentationTypeId: int
    SegmentationUpid: str
    SegmentationUpidType: int
    SegmentsExpected: int
    SubSegmentNum: int
    SubSegmentsExpected: int


class MediaLiveScte35DeliveryRestrictions(TypedDict):
    ArchiveAllowedFlag: str
    DeviceRestrictions: str
    NoRegionalBlackoutFlag: str
    WebDeliveryAllowedFlag: str


class _MediaLiveStaticImageActivateScheduleActionSettings(TypedDict):
    Image: MediaLiveInputLocation


class MediaLiveStaticImageActivateScheduleActionSettings(_MediaLiveStaticImageActivateScheduleActionSettings, total=False):
    Duration: int
    FadeIn: int
    FadeOut: int
    Height: int
    ImageX: int
    ImageY: int
    Layer: int
    Opacity: int
    Width: int


class _MediaLiveInputLocation(TypedDict):
    Uri: str


class MediaLiveInputLocation(_MediaLiveInputLocation, total=False):
    PasswordParam: str
    Username: str


class MediaLiveStaticImageDeactivateScheduleActionSettings(TypedDict, total=False):
    FadeOut: int
    Layer: int


class MediaLiveScheduleActionStartSettings(TypedDict, total=False):
    FixedModeScheduleActionStartSettings: MediaLiveFixedModeScheduleActionStartSettings
    FollowModeScheduleActionStartSettings: MediaLiveFollowModeScheduleActionStartSettings


class MediaLiveFixedModeScheduleActionStartSettings(TypedDict):
    Time: str


class MediaLiveFollowModeScheduleActionStartSettings(TypedDict):
    FollowPoint: str
    ReferenceActionName: str


class MediaLiveBatchScheduleActionDeleteRequest(TypedDict):
    ActionNames: List[str]


class MediaLiveBatchUpdateScheduleResponse(TypedDict, total=False):
    Creates: MediaLiveBatchScheduleActionCreateResult
    Deletes: MediaLiveBatchScheduleActionDeleteResult


class MediaLiveBatchScheduleActionCreateResult(TypedDict):
    ScheduleActions: List[MediaLiveScheduleAction]


class MediaLiveBatchScheduleActionDeleteResult(TypedDict):
    ScheduleActions: List[MediaLiveScheduleAction]


class MediaLiveOutputDestination(TypedDict, total=False):
    Id: str
    MediaPackageSettings: List[MediaLiveMediaPackageOutputDestinationSettings]
    Settings: List[MediaLiveOutputDestinationSettings]


class MediaLiveMediaPackageOutputDestinationSettings(TypedDict, total=False):
    ChannelId: str


class MediaLiveOutputDestinationSettings(TypedDict, total=False):
    PasswordParam: str
    StreamName: str
    Url: str
    Username: str


class _MediaLiveEncoderSettings(TypedDict):
    AudioDescriptions: List[MediaLiveAudioDescription]
    OutputGroups: List[MediaLiveOutputGroup]
    TimecodeConfig: MediaLiveTimecodeConfig
    VideoDescriptions: List[MediaLiveVideoDescription]


class MediaLiveEncoderSettings(_MediaLiveEncoderSettings, total=False):
    AvailBlanking: MediaLiveAvailBlanking
    AvailConfiguration: MediaLiveAvailConfiguration
    BlackoutSlate: MediaLiveBlackoutSlate
    CaptionDescriptions: List[MediaLiveCaptionDescription]
    GlobalConfiguration: MediaLiveGlobalConfiguration


class _MediaLiveAudioDescription(TypedDict):
    AudioSelectorName: str
    Name: str


class MediaLiveAudioDescription(_MediaLiveAudioDescription, total=False):
    AudioNormalizationSettings: MediaLiveAudioNormalizationSettings
    AudioType: str
    AudioTypeControl: str
    CodecSettings: MediaLiveAudioCodecSettings
    LanguageCode: str
    LanguageCodeControl: str
    RemixSettings: MediaLiveRemixSettings
    StreamName: str


class MediaLiveAudioNormalizationSettings(TypedDict, total=False):
    Algorithm: str
    AlgorithmControl: str
    TargetLkfs: float


class MediaLiveAudioCodecSettings(TypedDict, total=False):
    AacSettings: MediaLiveAacSettings
    Ac3Settings: MediaLiveAc3Settings
    Eac3Settings: MediaLiveEac3Settings
    Mp2Settings: MediaLiveMp2Settings
    PassThroughSettings: MediaLivePassThroughSettings


class MediaLiveAacSettings(TypedDict, total=False):
    Bitrate: float
    CodingMode: str
    InputType: str
    Profile: str
    RateControlMode: str
    RawFormat: str
    SampleRate: float
    Spec: str
    VbrQuality: str


class MediaLiveAc3Settings(TypedDict, total=False):
    Bitrate: float
    BitstreamMode: str
    CodingMode: str
    Dialnorm: int
    DrcProfile: str
    LfeFilter: str
    MetadataControl: str


class MediaLiveEac3Settings(TypedDict, total=False):
    AttenuationControl: str
    Bitrate: float
    BitstreamMode: str
    CodingMode: str
    DcFilter: str
    Dialnorm: int
    DrcLine: str
    DrcRf: str
    LfeControl: str
    LfeFilter: str
    LoRoCenterMixLevel: float
    LoRoSurroundMixLevel: float
    LtRtCenterMixLevel: float
    LtRtSurroundMixLevel: float
    MetadataControl: str
    PassthroughControl: str
    PhaseControl: str
    StereoDownmix: str
    SurroundExMode: str
    SurroundMode: str


class MediaLiveMp2Settings(TypedDict, total=False):
    Bitrate: float
    CodingMode: str
    SampleRate: float


class MediaLivePassThroughSettings(TypedDict, total=False):
    pass


class _MediaLiveRemixSettings(TypedDict):
    ChannelMappings: List[MediaLiveAudioChannelMapping]


class MediaLiveRemixSettings(_MediaLiveRemixSettings, total=False):
    ChannelsIn: int
    ChannelsOut: int


class MediaLiveAudioChannelMapping(TypedDict):
    InputChannelLevels: List[MediaLiveInputChannelLevel]
    OutputChannel: int


class MediaLiveInputChannelLevel(TypedDict):
    Gain: int
    InputChannel: int


class MediaLiveAvailBlanking(TypedDict, total=False):
    AvailBlankingImage: MediaLiveInputLocation
    State: str


class MediaLiveAvailConfiguration(TypedDict, total=False):
    AvailSettings: MediaLiveAvailSettings


class MediaLiveAvailSettings(TypedDict, total=False):
    Scte35SpliceInsert: MediaLiveScte35SpliceInsert
    Scte35TimeSignalApos: MediaLiveScte35TimeSignalApos


class MediaLiveScte35SpliceInsert(TypedDict, total=False):
    AdAvailOffset: int
    NoRegionalBlackoutFlag: str
    WebDeliveryAllowedFlag: str


class MediaLiveScte35TimeSignalApos(TypedDict, total=False):
    AdAvailOffset: int
    NoRegionalBlackoutFlag: str
    WebDeliveryAllowedFlag: str


class MediaLiveBlackoutSlate(TypedDict, total=False):
    BlackoutSlateImage: MediaLiveInputLocation
    NetworkEndBlackout: str
    NetworkEndBlackoutImage: MediaLiveInputLocation
    NetworkId: str
    State: str


class _MediaLiveCaptionDescription(TypedDict):
    CaptionSelectorName: str
    Name: str


class MediaLiveCaptionDescription(_MediaLiveCaptionDescription, total=False):
    DestinationSettings: MediaLiveCaptionDestinationSettings
    LanguageCode: str
    LanguageDescription: str


class MediaLiveCaptionDestinationSettings(TypedDict, total=False):
    AribDestinationSettings: MediaLiveAribDestinationSettings
    BurnInDestinationSettings: MediaLiveBurnInDestinationSettings
    DvbSubDestinationSettings: MediaLiveDvbSubDestinationSettings
    EmbeddedDestinationSettings: MediaLiveEmbeddedDestinationSettings
    EmbeddedPlusScte20DestinationSettings: MediaLiveEmbeddedPlusScte20DestinationSettings
    RtmpCaptionInfoDestinationSettings: MediaLiveRtmpCaptionInfoDestinationSettings
    Scte20PlusEmbeddedDestinationSettings: MediaLiveScte20PlusEmbeddedDestinationSettings
    Scte27DestinationSettings: MediaLiveScte27DestinationSettings
    SmpteTtDestinationSettings: MediaLiveSmpteTtDestinationSettings
    TeletextDestinationSettings: MediaLiveTeletextDestinationSettings
    TtmlDestinationSettings: MediaLiveTtmlDestinationSettings
    WebvttDestinationSettings: MediaLiveWebvttDestinationSettings


class MediaLiveAribDestinationSettings(TypedDict, total=False):
    pass


class MediaLiveBurnInDestinationSettings(TypedDict, total=False):
    Alignment: str
    BackgroundColor: str
    BackgroundOpacity: int
    Font: MediaLiveInputLocation
    FontColor: str
    FontOpacity: int
    FontResolution: int
    FontSize: str
    OutlineColor: str
    OutlineSize: int
    ShadowColor: str
    ShadowOpacity: int
    ShadowXOffset: int
    ShadowYOffset: int
    TeletextGridControl: str
    XPosition: int
    YPosition: int


class MediaLiveDvbSubDestinationSettings(TypedDict, total=False):
    Alignment: str
    BackgroundColor: str
    BackgroundOpacity: int
    Font: MediaLiveInputLocation
    FontColor: str
    FontOpacity: int
    FontResolution: int
    FontSize: str
    OutlineColor: str
    OutlineSize: int
    ShadowColor: str
    ShadowOpacity: int
    ShadowXOffset: int
    ShadowYOffset: int
    TeletextGridControl: str
    XPosition: int
    YPosition: int


class MediaLiveEmbeddedDestinationSettings(TypedDict, total=False):
    pass


class MediaLiveEmbeddedPlusScte20DestinationSettings(TypedDict, total=False):
    pass


class MediaLiveRtmpCaptionInfoDestinationSettings(TypedDict, total=False):
    pass


class MediaLiveScte20PlusEmbeddedDestinationSettings(TypedDict, total=False):
    pass


class MediaLiveScte27DestinationSettings(TypedDict, total=False):
    pass


class MediaLiveSmpteTtDestinationSettings(TypedDict, total=False):
    pass


class MediaLiveTeletextDestinationSettings(TypedDict, total=False):
    pass


class MediaLiveTtmlDestinationSettings(TypedDict, total=False):
    StyleControl: str


class MediaLiveWebvttDestinationSettings(TypedDict, total=False):
    pass


class MediaLiveGlobalConfiguration(TypedDict, total=False):
    InitialAudioGain: int
    InputEndAction: str
    InputLossBehavior: MediaLiveInputLossBehavior
    OutputLockingMode: str
    OutputTimingSource: str
    SupportLowFramerateInputs: str


class MediaLiveInputLossBehavior(TypedDict, total=False):
    BlackFrameMsec: int
    InputLossImageColor: str
    InputLossImageSlate: MediaLiveInputLocation
    InputLossImageType: str
    RepeatFrameMsec: int


class _MediaLiveOutputGroup(TypedDict):
    OutputGroupSettings: MediaLiveOutputGroupSettings
    Outputs: List[MediaLiveOutput]


class MediaLiveOutputGroup(_MediaLiveOutputGroup, total=False):
    Name: str


class MediaLiveOutputGroupSettings(TypedDict, total=False):
    ArchiveGroupSettings: MediaLiveArchiveGroupSettings
    FrameCaptureGroupSettings: MediaLiveFrameCaptureGroupSettings
    HlsGroupSettings: MediaLiveHlsGroupSettings
    MediaPackageGroupSettings: MediaLiveMediaPackageGroupSettings
    MsSmoothGroupSettings: MediaLiveMsSmoothGroupSettings
    RtmpGroupSettings: MediaLiveRtmpGroupSettings
    UdpGroupSettings: MediaLiveUdpGroupSettings


class _MediaLiveArchiveGroupSettings(TypedDict):
    Destination: MediaLiveOutputLocationRef


class MediaLiveArchiveGroupSettings(_MediaLiveArchiveGroupSettings, total=False):
    RolloverInterval: int


class MediaLiveOutputLocationRef(TypedDict, total=False):
    DestinationRefId: str


class MediaLiveFrameCaptureGroupSettings(TypedDict):
    Destination: MediaLiveOutputLocationRef


class _MediaLiveHlsGroupSettings(TypedDict):
    Destination: MediaLiveOutputLocationRef


class MediaLiveHlsGroupSettings(_MediaLiveHlsGroupSettings, total=False):
    AdMarkers: List[str]
    BaseUrlContent: str
    BaseUrlManifest: str
    CaptionLanguageMappings: List[MediaLiveCaptionLanguageMapping]
    CaptionLanguageSetting: str
    ClientCache: str
    CodecSpecification: str
    ConstantIv: str
    DirectoryStructure: str
    EncryptionType: str
    HlsCdnSettings: MediaLiveHlsCdnSettings
    IFrameOnlyPlaylists: str
    IndexNSegments: int
    InputLossAction: str
    IvInManifest: str
    IvSource: str
    KeepSegments: int
    KeyFormat: str
    KeyFormatVersions: str
    KeyProviderSettings: MediaLiveKeyProviderSettings
    ManifestCompression: str
    ManifestDurationFormat: str
    MinSegmentLength: int
    Mode: str
    OutputSelection: str
    ProgramDateTime: str
    ProgramDateTimePeriod: int
    RedundantManifest: str
    SegmentLength: int
    SegmentationMode: str
    SegmentsPerSubdirectory: int
    StreamInfResolution: str
    TimedMetadataId3Frame: str
    TimedMetadataId3Period: int
    TimestampDeltaMilliseconds: int
    TsFileMode: str


class MediaLiveCaptionLanguageMapping(TypedDict):
    CaptionChannel: int
    LanguageCode: str
    LanguageDescription: str


class MediaLiveHlsCdnSettings(TypedDict, total=False):
    HlsAkamaiSettings: MediaLiveHlsAkamaiSettings
    HlsBasicPutSettings: MediaLiveHlsBasicPutSettings
    HlsMediaStoreSettings: MediaLiveHlsMediaStoreSettings
    HlsWebdavSettings: MediaLiveHlsWebdavSettings


class MediaLiveHlsAkamaiSettings(TypedDict, total=False):
    ConnectionRetryInterval: int
    FilecacheDuration: int
    HttpTransferMode: str
    NumRetries: int
    RestartDelay: int
    Salt: str
    Token: str


class MediaLiveHlsBasicPutSettings(TypedDict, total=False):
    ConnectionRetryInterval: int
    FilecacheDuration: int
    NumRetries: int
    RestartDelay: int


class MediaLiveHlsMediaStoreSettings(TypedDict, total=False):
    ConnectionRetryInterval: int
    FilecacheDuration: int
    MediaStoreStorageClass: str
    NumRetries: int
    RestartDelay: int


class MediaLiveHlsWebdavSettings(TypedDict, total=False):
    ConnectionRetryInterval: int
    FilecacheDuration: int
    HttpTransferMode: str
    NumRetries: int
    RestartDelay: int


class MediaLiveKeyProviderSettings(TypedDict, total=False):
    StaticKeySettings: MediaLiveStaticKeySettings


class _MediaLiveStaticKeySettings(TypedDict):
    StaticKeyValue: str


class MediaLiveStaticKeySettings(_MediaLiveStaticKeySettings, total=False):
    KeyProviderServer: MediaLiveInputLocation


class MediaLiveMediaPackageGroupSettings(TypedDict):
    Destination: MediaLiveOutputLocationRef


class _MediaLiveMsSmoothGroupSettings(TypedDict):
    Destination: MediaLiveOutputLocationRef


class MediaLiveMsSmoothGroupSettings(_MediaLiveMsSmoothGroupSettings, total=False):
    AcquisitionPointId: str
    AudioOnlyTimecodeControl: str
    CertificateMode: str
    ConnectionRetryInterval: int
    EventId: str
    EventIdMode: str
    EventStopBehavior: str
    FilecacheDuration: int
    FragmentLength: int
    InputLossAction: str
    NumRetries: int
    RestartDelay: int
    SegmentationMode: str
    SendDelayMs: int
    SparseTrackType: str
    StreamManifestBehavior: str
    TimestampOffset: str
    TimestampOffsetMode: str


class MediaLiveRtmpGroupSettings(TypedDict, total=False):
    AuthenticationScheme: str
    CacheFullBehavior: str
    CacheLength: int
    CaptionData: str
    InputLossAction: str
    RestartDelay: int


class MediaLiveUdpGroupSettings(TypedDict, total=False):
    InputLossAction: str
    TimedMetadataId3Frame: str
    TimedMetadataId3Period: int


class _MediaLiveOutput(TypedDict):
    OutputSettings: MediaLiveOutputSettings


class MediaLiveOutput(_MediaLiveOutput, total=False):
    AudioDescriptionNames: List[str]
    CaptionDescriptionNames: List[str]
    OutputName: str
    VideoDescriptionName: str


class MediaLiveOutputSettings(TypedDict, total=False):
    ArchiveOutputSettings: MediaLiveArchiveOutputSettings
    FrameCaptureOutputSettings: MediaLiveFrameCaptureOutputSettings
    HlsOutputSettings: MediaLiveHlsOutputSettings
    MediaPackageOutputSettings: MediaLiveMediaPackageOutputSettings
    MsSmoothOutputSettings: MediaLiveMsSmoothOutputSettings
    RtmpOutputSettings: MediaLiveRtmpOutputSettings
    UdpOutputSettings: MediaLiveUdpOutputSettings


class _MediaLiveArchiveOutputSettings(TypedDict):
    ContainerSettings: MediaLiveArchiveContainerSettings


class MediaLiveArchiveOutputSettings(_MediaLiveArchiveOutputSettings, total=False):
    Extension: str
    NameModifier: str


class MediaLiveArchiveContainerSettings(TypedDict, total=False):
    M2tsSettings: MediaLiveM2tsSettings


class MediaLiveM2tsSettings(TypedDict, total=False):
    AbsentInputAudioBehavior: str
    Arib: str
    AribCaptionsPid: str
    AribCaptionsPidControl: str
    AudioBufferModel: str
    AudioFramesPerPes: int
    AudioPids: str
    AudioStreamType: str
    Bitrate: int
    BufferModel: str
    CcDescriptor: str
    DvbNitSettings: MediaLiveDvbNitSettings
    DvbSdtSettings: MediaLiveDvbSdtSettings
    DvbSubPids: str
    DvbTdtSettings: MediaLiveDvbTdtSettings
    DvbTeletextPid: str
    Ebif: str
    EbpAudioInterval: str
    EbpLookaheadMs: int
    EbpPlacement: str
    EcmPid: str
    EsRateInPes: str
    EtvPlatformPid: str
    EtvSignalPid: str
    FragmentTime: float
    Klv: str
    KlvDataPids: str
    NullPacketBitrate: float
    PatInterval: int
    PcrControl: str
    PcrPeriod: int
    PcrPid: str
    PmtInterval: int
    PmtPid: str
    ProgramNum: int
    RateMode: str
    Scte27Pids: str
    Scte35Control: str
    Scte35Pid: str
    SegmentationMarkers: str
    SegmentationStyle: str
    SegmentationTime: float
    TimedMetadataBehavior: str
    TimedMetadataPid: str
    TransportStreamId: int
    VideoPid: str


class _MediaLiveDvbNitSettings(TypedDict):
    NetworkId: int
    NetworkName: str


class MediaLiveDvbNitSettings(_MediaLiveDvbNitSettings, total=False):
    RepInterval: int


class MediaLiveDvbSdtSettings(TypedDict, total=False):
    OutputSdt: str
    RepInterval: int
    ServiceName: str
    ServiceProviderName: str


class MediaLiveDvbTdtSettings(TypedDict, total=False):
    RepInterval: int


class MediaLiveFrameCaptureOutputSettings(TypedDict, total=False):
    NameModifier: str


class _MediaLiveHlsOutputSettings(TypedDict):
    HlsSettings: MediaLiveHlsSettings


class MediaLiveHlsOutputSettings(_MediaLiveHlsOutputSettings, total=False):
    NameModifier: str
    SegmentModifier: str


class MediaLiveHlsSettings(TypedDict, total=False):
    AudioOnlyHlsSettings: MediaLiveAudioOnlyHlsSettings
    StandardHlsSettings: MediaLiveStandardHlsSettings


class MediaLiveAudioOnlyHlsSettings(TypedDict, total=False):
    AudioGroupId: str
    AudioOnlyImage: MediaLiveInputLocation
    AudioTrackType: str


class _MediaLiveStandardHlsSettings(TypedDict):
    M3u8Settings: MediaLiveM3u8Settings


class MediaLiveStandardHlsSettings(_MediaLiveStandardHlsSettings, total=False):
    AudioRenditionSets: str


class MediaLiveM3u8Settings(TypedDict, total=False):
    AudioFramesPerPes: int
    AudioPids: str
    EcmPid: str
    PatInterval: int
    PcrControl: str
    PcrPeriod: int
    PcrPid: str
    PmtInterval: int
    PmtPid: str
    ProgramNum: int
    Scte35Behavior: str
    Scte35Pid: str
    TimedMetadataBehavior: str
    TimedMetadataPid: str
    TransportStreamId: int
    VideoPid: str


class MediaLiveMediaPackageOutputSettings(TypedDict, total=False):
    pass


class MediaLiveMsSmoothOutputSettings(TypedDict, total=False):
    NameModifier: str


class _MediaLiveRtmpOutputSettings(TypedDict):
    Destination: MediaLiveOutputLocationRef


class MediaLiveRtmpOutputSettings(_MediaLiveRtmpOutputSettings, total=False):
    CertificateMode: str
    ConnectionRetryInterval: int
    NumRetries: int


class _MediaLiveUdpOutputSettings(TypedDict):
    ContainerSettings: MediaLiveUdpContainerSettings
    Destination: MediaLiveOutputLocationRef


class MediaLiveUdpOutputSettings(_MediaLiveUdpOutputSettings, total=False):
    BufferMsec: int
    FecOutputSettings: MediaLiveFecOutputSettings


class MediaLiveUdpContainerSettings(TypedDict, total=False):
    M2tsSettings: MediaLiveM2tsSettings


class MediaLiveFecOutputSettings(TypedDict, total=False):
    ColumnDepth: int
    IncludeFec: str
    RowLength: int


class _MediaLiveTimecodeConfig(TypedDict):
    Source: str


class MediaLiveTimecodeConfig(_MediaLiveTimecodeConfig, total=False):
    SyncThreshold: int


class _MediaLiveVideoDescription(TypedDict):
    Name: str


class MediaLiveVideoDescription(_MediaLiveVideoDescription, total=False):
    CodecSettings: MediaLiveVideoCodecSettings
    Height: int
    RespondToAfd: str
    ScalingBehavior: str
    Sharpness: int
    Width: int


class MediaLiveVideoCodecSettings(TypedDict, total=False):
    FrameCaptureSettings: MediaLiveFrameCaptureSettings
    H264Settings: MediaLiveH264Settings


class MediaLiveFrameCaptureSettings(TypedDict):
    CaptureInterval: int


class MediaLiveH264Settings(TypedDict, total=False):
    AdaptiveQuantization: str
    AfdSignaling: str
    Bitrate: int
    BufFillPct: int
    BufSize: int
    ColorMetadata: str
    EntropyEncoding: str
    FixedAfd: str
    FlickerAq: str
    FramerateControl: str
    FramerateDenominator: int
    FramerateNumerator: int
    GopBReference: str
    GopClosedCadence: int
    GopNumBFrames: int
    GopSize: float
    GopSizeUnits: str
    Level: str
    LookAheadRateControl: str
    MaxBitrate: int
    MinIInterval: int
    NumRefFrames: int
    ParControl: str
    ParDenominator: int
    ParNumerator: int
    Profile: str
    QvbrQualityLevel: int
    RateControlMode: str
    ScanType: str
    SceneChangeDetect: str
    Slices: int
    Softness: int
    SpatialAq: str
    SubgopLength: str
    Syntax: str
    TemporalAq: str
    TimecodeInsertion: str


class MediaLiveInputAttachment(TypedDict, total=False):
    InputAttachmentName: str
    InputId: str
    InputSettings: MediaLiveInputSettings


class MediaLiveInputSettings(TypedDict, total=False):
    AudioSelectors: List[MediaLiveAudioSelector]
    CaptionSelectors: List[MediaLiveCaptionSelector]
    DeblockFilter: str
    DenoiseFilter: str
    FilterStrength: int
    InputFilter: str
    NetworkInputSettings: MediaLiveNetworkInputSettings
    SourceEndBehavior: str
    VideoSelector: MediaLiveVideoSelector


class _MediaLiveAudioSelector(TypedDict):
    Name: str


class MediaLiveAudioSelector(_MediaLiveAudioSelector, total=False):
    SelectorSettings: MediaLiveAudioSelectorSettings


class MediaLiveAudioSelectorSettings(TypedDict, total=False):
    AudioLanguageSelection: MediaLiveAudioLanguageSelection
    AudioPidSelection: MediaLiveAudioPidSelection


class _MediaLiveAudioLanguageSelection(TypedDict):
    LanguageCode: str


class MediaLiveAudioLanguageSelection(_MediaLiveAudioLanguageSelection, total=False):
    LanguageSelectionPolicy: str


class MediaLiveAudioPidSelection(TypedDict):
    Pid: int


class _MediaLiveCaptionSelector(TypedDict):
    Name: str


class MediaLiveCaptionSelector(_MediaLiveCaptionSelector, total=False):
    LanguageCode: str
    SelectorSettings: MediaLiveCaptionSelectorSettings


class MediaLiveCaptionSelectorSettings(TypedDict, total=False):
    AribSourceSettings: MediaLiveAribSourceSettings
    DvbSubSourceSettings: MediaLiveDvbSubSourceSettings
    EmbeddedSourceSettings: MediaLiveEmbeddedSourceSettings
    Scte20SourceSettings: MediaLiveScte20SourceSettings
    Scte27SourceSettings: MediaLiveScte27SourceSettings
    TeletextSourceSettings: MediaLiveTeletextSourceSettings


class MediaLiveAribSourceSettings(TypedDict, total=False):
    pass


class MediaLiveDvbSubSourceSettings(TypedDict, total=False):
    Pid: int


class MediaLiveEmbeddedSourceSettings(TypedDict, total=False):
    Convert608To708: str
    Scte20Detection: str
    Source608ChannelNumber: int
    Source608TrackNumber: int


class MediaLiveScte20SourceSettings(TypedDict, total=False):
    Convert608To708: str
    Source608ChannelNumber: int


class MediaLiveScte27SourceSettings(TypedDict, total=False):
    Pid: int


class MediaLiveTeletextSourceSettings(TypedDict, total=False):
    PageNumber: str


class MediaLiveNetworkInputSettings(TypedDict, total=False):
    HlsInputSettings: MediaLiveHlsInputSettings
    ServerValidation: str


class MediaLiveHlsInputSettings(TypedDict, total=False):
    Bandwidth: int
    BufferSegments: int
    Retries: int
    RetryInterval: int


class MediaLiveVideoSelector(TypedDict, total=False):
    ColorSpace: str
    ColorSpaceUsage: str
    SelectorSettings: MediaLiveVideoSelectorSettings


class MediaLiveVideoSelectorSettings(TypedDict, total=False):
    VideoSelectorPid: MediaLiveVideoSelectorPid
    VideoSelectorProgramId: MediaLiveVideoSelectorProgramId


class MediaLiveVideoSelectorPid(TypedDict, total=False):
    Pid: int


class MediaLiveVideoSelectorProgramId(TypedDict, total=False):
    ProgramId: int


class MediaLiveInputSpecification(TypedDict, total=False):
    Codec: str
    MaximumBitrate: str
    Resolution: str


class MediaLiveCreateChannelResponse(TypedDict, total=False):
    Channel: MediaLiveChannel


class MediaLiveChannel(TypedDict, total=False):
    Arn: str
    ChannelClass: str
    Destinations: List[MediaLiveOutputDestination]
    EgressEndpoints: List[MediaLiveChannelEgressEndpoint]
    EncoderSettings: MediaLiveEncoderSettings
    Id: str
    InputAttachments: List[MediaLiveInputAttachment]
    InputSpecification: MediaLiveInputSpecification
    LogLevel: str
    Name: str
    PipelinesRunningCount: int
    RoleArn: str
    State: str
    Tags: Dict[str, str]


class MediaLiveChannelEgressEndpoint(TypedDict, total=False):
    SourceIp: str


class MediaLiveInputDestinationRequest(TypedDict, total=False):
    StreamName: str


class MediaLiveMediaConnectFlowRequest(TypedDict, total=False):
    FlowArn: str


class MediaLiveInputSourceRequest(TypedDict, total=False):
    PasswordParam: str
    Url: str
    Username: str


class _MediaLiveInputVpcRequest(TypedDict):
    SubnetIds: List[str]


class MediaLiveInputVpcRequest(_MediaLiveInputVpcRequest, total=False):
    SecurityGroupIds: List[str]


class MediaLiveCreateInputResponse(TypedDict, total=False):
    Input: MediaLiveInput


class MediaLiveInput(TypedDict, total=False):
    Arn: str
    AttachedChannels: List[str]
    Destinations: List[MediaLiveInputDestination]
    Id: str
    InputClass: str
    MediaConnectFlows: List[MediaLiveMediaConnectFlow]
    Name: str
    RoleArn: str
    SecurityGroups: List[str]
    Sources: List[MediaLiveInputSource]
    State: str
    Tags: Dict[str, str]
    Type: str


class MediaLiveInputDestination(TypedDict, total=False):
    Ip: str
    Port: str
    Url: str
    Vpc: MediaLiveInputDestinationVpc


class MediaLiveInputDestinationVpc(TypedDict, total=False):
    AvailabilityZone: str
    NetworkInterfaceId: str


class MediaLiveMediaConnectFlow(TypedDict, total=False):
    FlowArn: str


class MediaLiveInputSource(TypedDict, total=False):
    PasswordParam: str
    Url: str
    Username: str


class MediaLiveInputWhitelistRuleCidr(TypedDict, total=False):
    Cidr: str


class MediaLiveCreateInputSecurityGroupResponse(TypedDict, total=False):
    SecurityGroup: MediaLiveInputSecurityGroup


class MediaLiveInputSecurityGroup(TypedDict, total=False):
    Arn: str
    Id: str
    Inputs: List[str]
    State: str
    Tags: Dict[str, str]
    WhitelistRules: List[MediaLiveInputWhitelistRule]


class MediaLiveInputWhitelistRule(TypedDict, total=False):
    Cidr: str


class MediaLiveDeleteChannelResponse(TypedDict, total=False):
    Arn: str
    ChannelClass: str
    Destinations: List[MediaLiveOutputDestination]
    EgressEndpoints: List[MediaLiveChannelEgressEndpoint]
    EncoderSettings: MediaLiveEncoderSettings
    Id: str
    InputAttachments: List[MediaLiveInputAttachment]
    InputSpecification: MediaLiveInputSpecification
    LogLevel: str
    Name: str
    PipelinesRunningCount: int
    RoleArn: str
    State: str
    Tags: Dict[str, str]


class MediaLiveDeleteInputResponse(TypedDict, total=False):
    pass


class MediaLiveDeleteInputSecurityGroupResponse(TypedDict, total=False):
    pass


class MediaLiveDeleteReservationResponse(TypedDict, total=False):
    Arn: str
    Count: int
    CurrencyCode: str
    Duration: int
    DurationUnits: str
    End: str
    FixedPrice: float
    Name: str
    OfferingDescription: str
    OfferingId: str
    OfferingType: str
    Region: str
    ReservationId: str
    ResourceSpecification: MediaLiveReservationResourceSpecification
    Start: str
    State: str
    Tags: Dict[str, str]
    UsagePrice: float


class MediaLiveReservationResourceSpecification(TypedDict, total=False):
    ChannelClass: str
    Codec: str
    MaximumBitrate: str
    MaximumFramerate: str
    Resolution: str
    ResourceType: str
    SpecialFeature: str
    VideoQuality: str


class MediaLiveDeleteScheduleResponse(TypedDict, total=False):
    pass


class MediaLiveDescribeChannelResponse(TypedDict, total=False):
    Arn: str
    ChannelClass: str
    Destinations: List[MediaLiveOutputDestination]
    EgressEndpoints: List[MediaLiveChannelEgressEndpoint]
    EncoderSettings: MediaLiveEncoderSettings
    Id: str
    InputAttachments: List[MediaLiveInputAttachment]
    InputSpecification: MediaLiveInputSpecification
    LogLevel: str
    Name: str
    PipelinesRunningCount: int
    RoleArn: str
    State: str
    Tags: Dict[str, str]


class MediaLiveDescribeInputResponse(TypedDict, total=False):
    Arn: str
    AttachedChannels: List[str]
    Destinations: List[MediaLiveInputDestination]
    Id: str
    InputClass: str
    MediaConnectFlows: List[MediaLiveMediaConnectFlow]
    Name: str
    RoleArn: str
    SecurityGroups: List[str]
    Sources: List[MediaLiveInputSource]
    State: str
    Tags: Dict[str, str]
    Type: str


class MediaLiveDescribeInputSecurityGroupResponse(TypedDict, total=False):
    Arn: str
    Id: str
    Inputs: List[str]
    State: str
    Tags: Dict[str, str]
    WhitelistRules: List[MediaLiveInputWhitelistRule]


class MediaLiveDescribeOfferingResponse(TypedDict, total=False):
    Arn: str
    CurrencyCode: str
    Duration: int
    DurationUnits: str
    FixedPrice: float
    OfferingDescription: str
    OfferingId: str
    OfferingType: str
    Region: str
    ResourceSpecification: MediaLiveReservationResourceSpecification
    UsagePrice: float


class MediaLiveDescribeReservationResponse(TypedDict, total=False):
    Arn: str
    Count: int
    CurrencyCode: str
    Duration: int
    DurationUnits: str
    End: str
    FixedPrice: float
    Name: str
    OfferingDescription: str
    OfferingId: str
    OfferingType: str
    Region: str
    ReservationId: str
    ResourceSpecification: MediaLiveReservationResourceSpecification
    Start: str
    State: str
    Tags: Dict[str, str]
    UsagePrice: float


class MediaLiveDescribeScheduleResponse(TypedDict, total=False):
    NextToken: str
    ScheduleActions: List[MediaLiveScheduleAction]


class MediaLiveListChannelsResponse(TypedDict, total=False):
    Channels: List[MediaLiveChannelSummary]
    NextToken: str


class MediaLiveChannelSummary(TypedDict, total=False):
    Arn: str
    ChannelClass: str
    Destinations: List[MediaLiveOutputDestination]
    EgressEndpoints: List[MediaLiveChannelEgressEndpoint]
    Id: str
    InputAttachments: List[MediaLiveInputAttachment]
    InputSpecification: MediaLiveInputSpecification
    LogLevel: str
    Name: str
    PipelinesRunningCount: int
    RoleArn: str
    State: str
    Tags: Dict[str, str]


class MediaLiveListInputSecurityGroupsResponse(TypedDict, total=False):
    InputSecurityGroups: List[MediaLiveInputSecurityGroup]
    NextToken: str


class MediaLiveListInputsResponse(TypedDict, total=False):
    Inputs: List[MediaLiveInput]
    NextToken: str


class MediaLiveListOfferingsResponse(TypedDict, total=False):
    NextToken: str
    Offerings: List[MediaLiveOffering]


class MediaLiveOffering(TypedDict, total=False):
    Arn: str
    CurrencyCode: str
    Duration: int
    DurationUnits: str
    FixedPrice: float
    OfferingDescription: str
    OfferingId: str
    OfferingType: str
    Region: str
    ResourceSpecification: MediaLiveReservationResourceSpecification
    UsagePrice: float


class MediaLiveListReservationsResponse(TypedDict, total=False):
    NextToken: str
    Reservations: List[MediaLiveReservation]


class MediaLiveReservation(TypedDict, total=False):
    Arn: str
    Count: int
    CurrencyCode: str
    Duration: int
    DurationUnits: str
    End: str
    FixedPrice: float
    Name: str
    OfferingDescription: str
    OfferingId: str
    OfferingType: str
    Region: str
    ReservationId: str
    ResourceSpecification: MediaLiveReservationResourceSpecification
    Start: str
    State: str
    Tags: Dict[str, str]
    UsagePrice: float


class MediaLiveListTagsForResourceResponse(TypedDict, total=False):
    Tags: Dict[str, str]


class MediaLivePurchaseOfferingResponse(TypedDict, total=False):
    Reservation: MediaLiveReservation


class MediaLiveStartChannelResponse(TypedDict, total=False):
    Arn: str
    ChannelClass: str
    Destinations: List[MediaLiveOutputDestination]
    EgressEndpoints: List[MediaLiveChannelEgressEndpoint]
    EncoderSettings: MediaLiveEncoderSettings
    Id: str
    InputAttachments: List[MediaLiveInputAttachment]
    InputSpecification: MediaLiveInputSpecification
    LogLevel: str
    Name: str
    PipelinesRunningCount: int
    RoleArn: str
    State: str
    Tags: Dict[str, str]


class MediaLiveStopChannelResponse(TypedDict, total=False):
    Arn: str
    ChannelClass: str
    Destinations: List[MediaLiveOutputDestination]
    EgressEndpoints: List[MediaLiveChannelEgressEndpoint]
    EncoderSettings: MediaLiveEncoderSettings
    Id: str
    InputAttachments: List[MediaLiveInputAttachment]
    InputSpecification: MediaLiveInputSpecification
    LogLevel: str
    Name: str
    PipelinesRunningCount: int
    RoleArn: str
    State: str
    Tags: Dict[str, str]


class MediaLiveUpdateChannelResponse(TypedDict, total=False):
    Channel: MediaLiveChannel


class MediaLiveUpdateChannelClassResponse(TypedDict, total=False):
    Channel: MediaLiveChannel


class MediaLiveUpdateInputResponse(TypedDict, total=False):
    Input: MediaLiveInput


class MediaLiveUpdateInputSecurityGroupResponse(TypedDict, total=False):
    SecurityGroup: MediaLiveInputSecurityGroup


class MediaLiveUpdateReservationResponse(TypedDict, total=False):
    Reservation: MediaLiveReservation


class MediaPackage(BaseClient):
    def create_channel(self, *,
        Id: str,
        Description: str = ...,
        Tags: Dict[str, str] = ...
    ) -> MediaPackageCreateChannelResponse: ...

    def create_origin_endpoint(self, *,
        ChannelId: str,
        Id: str,
        CmafPackage: MediaPackageCmafPackageCreateOrUpdateParameters = ...,
        DashPackage: MediaPackageDashPackage = ...,
        Description: str = ...,
        HlsPackage: MediaPackageHlsPackage = ...,
        ManifestName: str = ...,
        MssPackage: MediaPackageMssPackage = ...,
        StartoverWindowSeconds: int = ...,
        Tags: Dict[str, str] = ...,
        TimeDelaySeconds: int = ...,
        Whitelist: List[str] = ...
    ) -> MediaPackageCreateOriginEndpointResponse: ...

    def delete_channel(self, *,
        Id: str
    ) -> MediaPackageDeleteChannelResponse: ...

    def delete_origin_endpoint(self, *,
        Id: str
    ) -> MediaPackageDeleteOriginEndpointResponse: ...

    def describe_channel(self, *,
        Id: str
    ) -> MediaPackageDescribeChannelResponse: ...

    def describe_origin_endpoint(self, *,
        Id: str
    ) -> MediaPackageDescribeOriginEndpointResponse: ...

    def list_channels(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MediaPackageListChannelsResponse: ...

    def list_origin_endpoints(self, *,
        ChannelId: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MediaPackageListOriginEndpointsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> MediaPackageListTagsForResourceResponse: ...

    def rotate_channel_credentials(self, *,
        Id: str
    ) -> MediaPackageRotateChannelCredentialsResponse: ...

    def rotate_ingest_endpoint_credentials(self, *,
        Id: str,
        IngestEndpointId: str
    ) -> MediaPackageRotateIngestEndpointCredentialsResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: Dict[str, str]
    ): ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ): ...

    def update_channel(self, *,
        Id: str,
        Description: str = ...
    ) -> MediaPackageUpdateChannelResponse: ...

    def update_origin_endpoint(self, *,
        Id: str,
        CmafPackage: MediaPackageCmafPackageCreateOrUpdateParameters = ...,
        DashPackage: MediaPackageDashPackage = ...,
        Description: str = ...,
        HlsPackage: MediaPackageHlsPackage = ...,
        ManifestName: str = ...,
        MssPackage: MediaPackageMssPackage = ...,
        StartoverWindowSeconds: int = ...,
        TimeDelaySeconds: int = ...,
        Whitelist: List[str] = ...
    ) -> MediaPackageUpdateOriginEndpointResponse: ...


class MediaPackageCreateChannelResponse(TypedDict, total=False):
    Arn: str
    Description: str
    HlsIngest: MediaPackageHlsIngest
    Id: str
    Tags: Dict[str, str]


class MediaPackageHlsIngest(TypedDict, total=False):
    IngestEndpoints: List[MediaPackageIngestEndpoint]


class MediaPackageIngestEndpoint(TypedDict, total=False):
    Id: str
    Password: str
    Url: str
    Username: str


class MediaPackageCmafPackageCreateOrUpdateParameters(TypedDict, total=False):
    Encryption: MediaPackageCmafEncryption
    HlsManifests: List[MediaPackageHlsManifestCreateOrUpdateParameters]
    SegmentDurationSeconds: int
    SegmentPrefix: str
    StreamSelection: MediaPackageStreamSelection


class _MediaPackageCmafEncryption(TypedDict):
    SpekeKeyProvider: MediaPackageSpekeKeyProvider


class MediaPackageCmafEncryption(_MediaPackageCmafEncryption, total=False):
    KeyRotationIntervalSeconds: int


class _MediaPackageSpekeKeyProvider(TypedDict):
    ResourceId: str
    RoleArn: str
    SystemIds: List[str]
    Url: str


class MediaPackageSpekeKeyProvider(_MediaPackageSpekeKeyProvider, total=False):
    CertificateArn: str


class _MediaPackageHlsManifestCreateOrUpdateParameters(TypedDict):
    Id: str


class MediaPackageHlsManifestCreateOrUpdateParameters(_MediaPackageHlsManifestCreateOrUpdateParameters, total=False):
    AdMarkers: str
    IncludeIframeOnlyStream: bool
    ManifestName: str
    PlaylistType: str
    PlaylistWindowSeconds: int
    ProgramDateTimeIntervalSeconds: int


class MediaPackageStreamSelection(TypedDict, total=False):
    MaxVideoBitsPerSecond: int
    MinVideoBitsPerSecond: int
    StreamOrder: str


class MediaPackageDashPackage(TypedDict, total=False):
    Encryption: MediaPackageDashEncryption
    ManifestLayout: str
    ManifestWindowSeconds: int
    MinBufferTimeSeconds: int
    MinUpdatePeriodSeconds: int
    PeriodTriggers: List[str]
    Profile: str
    SegmentDurationSeconds: int
    SegmentTemplateFormat: str
    StreamSelection: MediaPackageStreamSelection
    SuggestedPresentationDelaySeconds: int


class _MediaPackageDashEncryption(TypedDict):
    SpekeKeyProvider: MediaPackageSpekeKeyProvider


class MediaPackageDashEncryption(_MediaPackageDashEncryption, total=False):
    KeyRotationIntervalSeconds: int


class MediaPackageHlsPackage(TypedDict, total=False):
    AdMarkers: str
    Encryption: MediaPackageHlsEncryption
    IncludeIframeOnlyStream: bool
    PlaylistType: str
    PlaylistWindowSeconds: int
    ProgramDateTimeIntervalSeconds: int
    SegmentDurationSeconds: int
    StreamSelection: MediaPackageStreamSelection
    UseAudioRenditionGroup: bool


class _MediaPackageHlsEncryption(TypedDict):
    SpekeKeyProvider: MediaPackageSpekeKeyProvider


class MediaPackageHlsEncryption(_MediaPackageHlsEncryption, total=False):
    ConstantInitializationVector: str
    EncryptionMethod: str
    KeyRotationIntervalSeconds: int
    RepeatExtXKey: bool


class MediaPackageMssPackage(TypedDict, total=False):
    Encryption: MediaPackageMssEncryption
    ManifestWindowSeconds: int
    SegmentDurationSeconds: int
    StreamSelection: MediaPackageStreamSelection


class MediaPackageMssEncryption(TypedDict):
    SpekeKeyProvider: MediaPackageSpekeKeyProvider


class MediaPackageCreateOriginEndpointResponse(TypedDict, total=False):
    Arn: str
    ChannelId: str
    CmafPackage: MediaPackageCmafPackage
    DashPackage: MediaPackageDashPackage
    Description: str
    HlsPackage: MediaPackageHlsPackage
    Id: str
    ManifestName: str
    MssPackage: MediaPackageMssPackage
    StartoverWindowSeconds: int
    Tags: Dict[str, str]
    TimeDelaySeconds: int
    Url: str
    Whitelist: List[str]


class MediaPackageCmafPackage(TypedDict, total=False):
    Encryption: MediaPackageCmafEncryption
    HlsManifests: List[MediaPackageHlsManifest]
    SegmentDurationSeconds: int
    SegmentPrefix: str
    StreamSelection: MediaPackageStreamSelection


class _MediaPackageHlsManifest(TypedDict):
    Id: str


class MediaPackageHlsManifest(_MediaPackageHlsManifest, total=False):
    AdMarkers: str
    IncludeIframeOnlyStream: bool
    ManifestName: str
    PlaylistType: str
    PlaylistWindowSeconds: int
    ProgramDateTimeIntervalSeconds: int
    Url: str


class MediaPackageDeleteChannelResponse(TypedDict, total=False):
    pass


class MediaPackageDeleteOriginEndpointResponse(TypedDict, total=False):
    pass


class MediaPackageDescribeChannelResponse(TypedDict, total=False):
    Arn: str
    Description: str
    HlsIngest: MediaPackageHlsIngest
    Id: str
    Tags: Dict[str, str]


class MediaPackageDescribeOriginEndpointResponse(TypedDict, total=False):
    Arn: str
    ChannelId: str
    CmafPackage: MediaPackageCmafPackage
    DashPackage: MediaPackageDashPackage
    Description: str
    HlsPackage: MediaPackageHlsPackage
    Id: str
    ManifestName: str
    MssPackage: MediaPackageMssPackage
    StartoverWindowSeconds: int
    Tags: Dict[str, str]
    TimeDelaySeconds: int
    Url: str
    Whitelist: List[str]


class MediaPackageListChannelsResponse(TypedDict, total=False):
    Channels: List[MediaPackageChannel]
    NextToken: str


class MediaPackageChannel(TypedDict, total=False):
    Arn: str
    Description: str
    HlsIngest: MediaPackageHlsIngest
    Id: str
    Tags: Dict[str, str]


class MediaPackageListOriginEndpointsResponse(TypedDict, total=False):
    NextToken: str
    OriginEndpoints: List[MediaPackageOriginEndpoint]


class MediaPackageOriginEndpoint(TypedDict, total=False):
    Arn: str
    ChannelId: str
    CmafPackage: MediaPackageCmafPackage
    DashPackage: MediaPackageDashPackage
    Description: str
    HlsPackage: MediaPackageHlsPackage
    Id: str
    ManifestName: str
    MssPackage: MediaPackageMssPackage
    StartoverWindowSeconds: int
    Tags: Dict[str, str]
    TimeDelaySeconds: int
    Url: str
    Whitelist: List[str]


class MediaPackageListTagsForResourceResponse(TypedDict, total=False):
    Tags: Dict[str, str]


class MediaPackageRotateChannelCredentialsResponse(TypedDict, total=False):
    Arn: str
    Description: str
    HlsIngest: MediaPackageHlsIngest
    Id: str
    Tags: Dict[str, str]


class MediaPackageRotateIngestEndpointCredentialsResponse(TypedDict, total=False):
    Arn: str
    Description: str
    HlsIngest: MediaPackageHlsIngest
    Id: str
    Tags: Dict[str, str]


class MediaPackageUpdateChannelResponse(TypedDict, total=False):
    Arn: str
    Description: str
    HlsIngest: MediaPackageHlsIngest
    Id: str
    Tags: Dict[str, str]


class MediaPackageUpdateOriginEndpointResponse(TypedDict, total=False):
    Arn: str
    ChannelId: str
    CmafPackage: MediaPackageCmafPackage
    DashPackage: MediaPackageDashPackage
    Description: str
    HlsPackage: MediaPackageHlsPackage
    Id: str
    ManifestName: str
    MssPackage: MediaPackageMssPackage
    StartoverWindowSeconds: int
    Tags: Dict[str, str]
    TimeDelaySeconds: int
    Url: str
    Whitelist: List[str]


class MediaStore(BaseClient):
    def create_container(self, *,
        ContainerName: str
    ) -> MediaStoreCreateContainerOutput: ...

    def delete_container(self, *,
        ContainerName: str
    ) -> MediaStoreDeleteContainerOutput: ...

    def delete_container_policy(self, *,
        ContainerName: str
    ) -> MediaStoreDeleteContainerPolicyOutput: ...

    def delete_cors_policy(self, *,
        ContainerName: str
    ) -> MediaStoreDeleteCorsPolicyOutput: ...

    def delete_lifecycle_policy(self, *,
        ContainerName: str
    ) -> MediaStoreDeleteLifecyclePolicyOutput: ...

    def describe_container(self, *,
        ContainerName: str = ...
    ) -> MediaStoreDescribeContainerOutput: ...

    def get_container_policy(self, *,
        ContainerName: str
    ) -> MediaStoreGetContainerPolicyOutput: ...

    def get_cors_policy(self, *,
        ContainerName: str
    ) -> MediaStoreGetCorsPolicyOutput: ...

    def get_lifecycle_policy(self, *,
        ContainerName: str
    ) -> MediaStoreGetLifecyclePolicyOutput: ...

    def list_containers(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MediaStoreListContainersOutput: ...

    def put_container_policy(self, *,
        ContainerName: str,
        Policy: str
    ) -> MediaStorePutContainerPolicyOutput: ...

    def put_cors_policy(self, *,
        ContainerName: str,
        CorsPolicy: List[MediaStoreCorsRule]
    ) -> MediaStorePutCorsPolicyOutput: ...

    def put_lifecycle_policy(self, *,
        ContainerName: str,
        LifecyclePolicy: str
    ) -> MediaStorePutLifecyclePolicyOutput: ...

    def start_access_logging(self, *,
        ContainerName: str
    ) -> MediaStoreStartAccessLoggingOutput: ...

    def stop_access_logging(self, *,
        ContainerName: str
    ) -> MediaStoreStopAccessLoggingOutput: ...


class MediaStoreCreateContainerOutput(TypedDict):
    Container: MediaStoreContainer


class MediaStoreContainer(TypedDict, total=False):
    Endpoint: str
    CreationTime: datetime.datetime
    ARN: str
    Name: str
    Status: str
    AccessLoggingEnabled: bool


class MediaStoreDeleteContainerOutput(TypedDict, total=False):
    pass


class MediaStoreDeleteContainerPolicyOutput(TypedDict, total=False):
    pass


class MediaStoreDeleteCorsPolicyOutput(TypedDict, total=False):
    pass


class MediaStoreDeleteLifecyclePolicyOutput(TypedDict, total=False):
    pass


class MediaStoreDescribeContainerOutput(TypedDict, total=False):
    Container: MediaStoreContainer


class MediaStoreGetContainerPolicyOutput(TypedDict):
    Policy: str


class MediaStoreGetCorsPolicyOutput(TypedDict):
    CorsPolicy: List[MediaStoreCorsRule]


class _MediaStoreCorsRule(TypedDict):
    AllowedOrigins: List[str]
    AllowedHeaders: List[str]


class MediaStoreCorsRule(_MediaStoreCorsRule, total=False):
    AllowedMethods: List[str]
    MaxAgeSeconds: int
    ExposeHeaders: List[str]


class MediaStoreGetLifecyclePolicyOutput(TypedDict):
    LifecyclePolicy: str


class _MediaStoreListContainersOutput(TypedDict):
    Containers: List[MediaStoreContainer]


class MediaStoreListContainersOutput(_MediaStoreListContainersOutput, total=False):
    NextToken: str


class MediaStorePutContainerPolicyOutput(TypedDict, total=False):
    pass


class MediaStorePutCorsPolicyOutput(TypedDict, total=False):
    pass


class MediaStorePutLifecyclePolicyOutput(TypedDict, total=False):
    pass


class MediaStoreStartAccessLoggingOutput(TypedDict, total=False):
    pass


class MediaStoreStopAccessLoggingOutput(TypedDict, total=False):
    pass


class MediaStoreData(BaseClient):
    def delete_object(self, *,
        Path: str
    ) -> MediaStoreDataDeleteObjectResponse: ...

    def describe_object(self, *,
        Path: str
    ) -> MediaStoreDataDescribeObjectResponse: ...

    def get_object(self, *,
        Path: str,
        Range: str = ...
    ) -> MediaStoreDataGetObjectResponse: ...

    def list_items(self, *,
        Path: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MediaStoreDataListItemsResponse: ...

    def put_object(self, *,
        Body: bytes,
        Path: str,
        ContentType: str = ...,
        CacheControl: str = ...,
        StorageClass: str = ...
    ) -> MediaStoreDataPutObjectResponse: ...


class MediaStoreDataDeleteObjectResponse(TypedDict, total=False):
    pass


class MediaStoreDataDescribeObjectResponse(TypedDict, total=False):
    ETag: str
    ContentType: str
    ContentLength: int
    CacheControl: str
    LastModified: datetime.datetime


class _MediaStoreDataGetObjectResponse(TypedDict):
    StatusCode: int


class MediaStoreDataGetObjectResponse(_MediaStoreDataGetObjectResponse, total=False):
    Body: bytes
    CacheControl: str
    ContentRange: str
    ContentLength: int
    ContentType: str
    ETag: str
    LastModified: datetime.datetime


class MediaStoreDataListItemsResponse(TypedDict, total=False):
    Items: List[MediaStoreDataItem]
    NextToken: str


class MediaStoreDataItem(TypedDict, total=False):
    Name: str
    Type: str
    ETag: str
    LastModified: datetime.datetime
    ContentType: str
    ContentLength: int


class MediaStoreDataPutObjectResponse(TypedDict, total=False):
    ContentSHA256: str
    ETag: str
    StorageClass: str


class MediaTailor(BaseClient):
    def delete_playback_configuration(self, *,
        Name: str
    ) -> MediaTailorDeletePlaybackConfigurationResponse: ...

    def get_playback_configuration(self, *,
        Name: str
    ) -> MediaTailorGetPlaybackConfigurationResponse: ...

    def list_playback_configurations(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MediaTailorListPlaybackConfigurationsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> MediaTailorListTagsForResourceResponse: ...

    def put_playback_configuration(self, *,
        AdDecisionServerUrl: str = ...,
        CdnConfiguration: MediaTailorCdnConfiguration = ...,
        DashConfiguration: MediaTailorDashConfigurationForPut = ...,
        Name: str = ...,
        SlateAdUrl: str = ...,
        Tags: Dict[str, str] = ...,
        TranscodeProfileName: str = ...,
        VideoContentSourceUrl: str = ...
    ) -> MediaTailorPutPlaybackConfigurationResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: Dict[str, str]
    ): ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ): ...


class MediaTailorDeletePlaybackConfigurationResponse(TypedDict, total=False):
    pass


class MediaTailorGetPlaybackConfigurationResponse(TypedDict, total=False):
    AdDecisionServerUrl: str
    CdnConfiguration: MediaTailorCdnConfiguration
    DashConfiguration: MediaTailorDashConfiguration
    HlsConfiguration: MediaTailorHlsConfiguration
    Name: str
    PlaybackConfigurationArn: str
    PlaybackEndpointPrefix: str
    SessionInitializationEndpointPrefix: str
    SlateAdUrl: str
    Tags: Dict[str, str]
    TranscodeProfileName: str
    VideoContentSourceUrl: str


class MediaTailorCdnConfiguration(TypedDict, total=False):
    AdSegmentUrlPrefix: str
    ContentSegmentUrlPrefix: str


class MediaTailorDashConfiguration(TypedDict, total=False):
    ManifestEndpointPrefix: str
    MpdLocation: str
    OriginManifestType: str


class MediaTailorHlsConfiguration(TypedDict, total=False):
    ManifestEndpointPrefix: str


class MediaTailorListPlaybackConfigurationsResponse(TypedDict, total=False):
    Items: List[MediaTailorPlaybackConfiguration]
    NextToken: str


class MediaTailorPlaybackConfiguration(TypedDict, total=False):
    AdDecisionServerUrl: str
    CdnConfiguration: MediaTailorCdnConfiguration
    DashConfiguration: MediaTailorDashConfiguration
    HlsConfiguration: MediaTailorHlsConfiguration
    Name: str
    PlaybackConfigurationArn: str
    PlaybackEndpointPrefix: str
    SessionInitializationEndpointPrefix: str
    SlateAdUrl: str
    Tags: Dict[str, str]
    TranscodeProfileName: str
    VideoContentSourceUrl: str


class MediaTailorListTagsForResourceResponse(TypedDict, total=False):
    Tags: Dict[str, str]


class MediaTailorDashConfigurationForPut(TypedDict, total=False):
    MpdLocation: str
    OriginManifestType: str


class MediaTailorPutPlaybackConfigurationResponse(TypedDict, total=False):
    AdDecisionServerUrl: str
    CdnConfiguration: MediaTailorCdnConfiguration
    DashConfiguration: MediaTailorDashConfiguration
    HlsConfiguration: MediaTailorHlsConfiguration
    Name: str
    PlaybackConfigurationArn: str
    PlaybackEndpointPrefix: str
    SessionInitializationEndpointPrefix: str
    SlateAdUrl: str
    Tags: Dict[str, str]
    TranscodeProfileName: str
    VideoContentSourceUrl: str


class MarketplaceMetering(BaseClient):
    def batch_meter_usage(self, *,
        UsageRecords: List[MarketplaceMeteringUsageRecord],
        ProductCode: str
    ) -> MarketplaceMeteringBatchMeterUsageResult: ...

    def meter_usage(self, *,
        ProductCode: str,
        Timestamp: datetime.datetime,
        UsageDimension: str,
        UsageQuantity: int = ...,
        DryRun: bool = ...
    ) -> MarketplaceMeteringMeterUsageResult: ...

    def register_usage(self, *,
        ProductCode: str,
        PublicKeyVersion: int,
        Nonce: str = ...
    ) -> MarketplaceMeteringRegisterUsageResult: ...

    def resolve_customer(self, *,
        RegistrationToken: str
    ) -> MarketplaceMeteringResolveCustomerResult: ...


class _MarketplaceMeteringUsageRecord(TypedDict):
    Timestamp: datetime.datetime
    CustomerIdentifier: str
    Dimension: str


class MarketplaceMeteringUsageRecord(_MarketplaceMeteringUsageRecord, total=False):
    Quantity: int


class MarketplaceMeteringBatchMeterUsageResult(TypedDict, total=False):
    Results: List[MarketplaceMeteringUsageRecordResult]
    UnprocessedRecords: List[MarketplaceMeteringUsageRecord]


class MarketplaceMeteringUsageRecordResult(TypedDict, total=False):
    UsageRecord: MarketplaceMeteringUsageRecord
    MeteringRecordId: str
    Status: str


class MarketplaceMeteringMeterUsageResult(TypedDict, total=False):
    MeteringRecordId: str


class MarketplaceMeteringRegisterUsageResult(TypedDict, total=False):
    PublicKeyRotationTimestamp: datetime.datetime
    Signature: str


class MarketplaceMeteringResolveCustomerResult(TypedDict, total=False):
    CustomerIdentifier: str
    ProductCode: str


class MigrationHub(BaseClient):
    def associate_created_artifact(self, *,
        ProgressUpdateStream: str,
        MigrationTaskName: str,
        CreatedArtifact: MigrationHubCreatedArtifact,
        DryRun: bool = ...
    ) -> MigrationHubAssociateCreatedArtifactResult: ...

    def associate_discovered_resource(self, *,
        ProgressUpdateStream: str,
        MigrationTaskName: str,
        DiscoveredResource: MigrationHubDiscoveredResource,
        DryRun: bool = ...
    ) -> MigrationHubAssociateDiscoveredResourceResult: ...

    def create_progress_update_stream(self, *,
        ProgressUpdateStreamName: str,
        DryRun: bool = ...
    ) -> MigrationHubCreateProgressUpdateStreamResult: ...

    def delete_progress_update_stream(self, *,
        ProgressUpdateStreamName: str,
        DryRun: bool = ...
    ) -> MigrationHubDeleteProgressUpdateStreamResult: ...

    def describe_application_state(self, *,
        ApplicationId: str
    ) -> MigrationHubDescribeApplicationStateResult: ...

    def describe_migration_task(self, *,
        ProgressUpdateStream: str,
        MigrationTaskName: str
    ) -> MigrationHubDescribeMigrationTaskResult: ...

    def disassociate_created_artifact(self, *,
        ProgressUpdateStream: str,
        MigrationTaskName: str,
        CreatedArtifactName: str,
        DryRun: bool = ...
    ) -> MigrationHubDisassociateCreatedArtifactResult: ...

    def disassociate_discovered_resource(self, *,
        ProgressUpdateStream: str,
        MigrationTaskName: str,
        ConfigurationId: str,
        DryRun: bool = ...
    ) -> MigrationHubDisassociateDiscoveredResourceResult: ...

    def import_migration_task(self, *,
        ProgressUpdateStream: str,
        MigrationTaskName: str,
        DryRun: bool = ...
    ) -> MigrationHubImportMigrationTaskResult: ...

    def list_created_artifacts(self, *,
        ProgressUpdateStream: str,
        MigrationTaskName: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MigrationHubListCreatedArtifactsResult: ...

    def list_discovered_resources(self, *,
        ProgressUpdateStream: str,
        MigrationTaskName: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MigrationHubListDiscoveredResourcesResult: ...

    def list_migration_tasks(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        ResourceName: str = ...
    ) -> MigrationHubListMigrationTasksResult: ...

    def list_progress_update_streams(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MigrationHubListProgressUpdateStreamsResult: ...

    def notify_application_state(self, *,
        ApplicationId: str,
        Status: str,
        DryRun: bool = ...
    ) -> MigrationHubNotifyApplicationStateResult: ...

    def notify_migration_task_state(self, *,
        ProgressUpdateStream: str,
        MigrationTaskName: str,
        Task: MigrationHubTask,
        UpdateDateTime: datetime.datetime,
        NextUpdateSeconds: int,
        DryRun: bool = ...
    ) -> MigrationHubNotifyMigrationTaskStateResult: ...

    def put_resource_attributes(self, *,
        ProgressUpdateStream: str,
        MigrationTaskName: str,
        ResourceAttributeList: List[MigrationHubResourceAttribute],
        DryRun: bool = ...
    ) -> MigrationHubPutResourceAttributesResult: ...


class _MigrationHubCreatedArtifact(TypedDict):
    Name: str


class MigrationHubCreatedArtifact(_MigrationHubCreatedArtifact, total=False):
    Description: str


class MigrationHubAssociateCreatedArtifactResult(TypedDict, total=False):
    pass


class _MigrationHubDiscoveredResource(TypedDict):
    ConfigurationId: str


class MigrationHubDiscoveredResource(_MigrationHubDiscoveredResource, total=False):
    Description: str


class MigrationHubAssociateDiscoveredResourceResult(TypedDict, total=False):
    pass


class MigrationHubCreateProgressUpdateStreamResult(TypedDict, total=False):
    pass


class MigrationHubDeleteProgressUpdateStreamResult(TypedDict, total=False):
    pass


class MigrationHubDescribeApplicationStateResult(TypedDict, total=False):
    ApplicationStatus: str
    LastUpdatedTime: datetime.datetime


class MigrationHubDescribeMigrationTaskResult(TypedDict, total=False):
    MigrationTask: MigrationHubMigrationTask


class MigrationHubMigrationTask(TypedDict, total=False):
    ProgressUpdateStream: str
    MigrationTaskName: str
    Task: MigrationHubTask
    UpdateDateTime: datetime.datetime
    ResourceAttributeList: List[MigrationHubResourceAttribute]


class _MigrationHubTask(TypedDict):
    Status: str


class MigrationHubTask(_MigrationHubTask, total=False):
    StatusDetail: str
    ProgressPercent: int


class MigrationHubResourceAttribute(TypedDict):
    Type: str
    Value: str


class MigrationHubDisassociateCreatedArtifactResult(TypedDict, total=False):
    pass


class MigrationHubDisassociateDiscoveredResourceResult(TypedDict, total=False):
    pass


class MigrationHubImportMigrationTaskResult(TypedDict, total=False):
    pass


class MigrationHubListCreatedArtifactsResult(TypedDict, total=False):
    NextToken: str
    CreatedArtifactList: List[MigrationHubCreatedArtifact]


class MigrationHubListDiscoveredResourcesResult(TypedDict, total=False):
    NextToken: str
    DiscoveredResourceList: List[MigrationHubDiscoveredResource]


class MigrationHubListMigrationTasksResult(TypedDict, total=False):
    NextToken: str
    MigrationTaskSummaryList: List[MigrationHubMigrationTaskSummary]


class MigrationHubMigrationTaskSummary(TypedDict, total=False):
    ProgressUpdateStream: str
    MigrationTaskName: str
    Status: str
    ProgressPercent: int
    StatusDetail: str
    UpdateDateTime: datetime.datetime


class MigrationHubListProgressUpdateStreamsResult(TypedDict, total=False):
    ProgressUpdateStreamSummaryList: List[MigrationHubProgressUpdateStreamSummary]
    NextToken: str


class MigrationHubProgressUpdateStreamSummary(TypedDict, total=False):
    ProgressUpdateStreamName: str


class MigrationHubNotifyApplicationStateResult(TypedDict, total=False):
    pass


class MigrationHubNotifyMigrationTaskStateResult(TypedDict, total=False):
    pass


class MigrationHubPutResourceAttributesResult(TypedDict, total=False):
    pass


class Mobile(BaseClient):
    def create_project(self, *,
        name: str = ...,
        region: str = ...,
        contents: bytes = ...,
        snapshotId: str = ...
    ) -> MobileCreateProjectResult: ...

    def delete_project(self, *,
        projectId: str
    ) -> MobileDeleteProjectResult: ...

    def describe_bundle(self, *,
        bundleId: str
    ) -> MobileDescribeBundleResult: ...

    def describe_project(self, *,
        projectId: str,
        syncFromResources: bool = ...
    ) -> MobileDescribeProjectResult: ...

    def export_bundle(self, *,
        bundleId: str,
        projectId: str = ...,
        platform: str = ...
    ) -> MobileExportBundleResult: ...

    def export_project(self, *,
        projectId: str
    ) -> MobileExportProjectResult: ...

    def list_bundles(self, *,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> MobileListBundlesResult: ...

    def list_projects(self, *,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> MobileListProjectsResult: ...

    def update_project(self, *,
        projectId: str,
        contents: bytes = ...
    ) -> MobileUpdateProjectResult: ...


class MobileCreateProjectResult(TypedDict, total=False):
    details: MobileProjectDetails


class MobileProjectDetails(TypedDict, total=False):
    name: str
    projectId: str
    region: str
    state: str
    createdDate: datetime.datetime
    lastUpdatedDate: datetime.datetime
    consoleUrl: str
    resources: List[MobileResource]


class MobileResource(TypedDict, total=False):
    type: str
    name: str
    arn: str
    feature: str
    attributes: Dict[str, str]


class MobileDeleteProjectResult(TypedDict, total=False):
    deletedResources: List[MobileResource]
    orphanedResources: List[MobileResource]


class MobileDescribeBundleResult(TypedDict, total=False):
    details: MobileBundleDetails


class MobileBundleDetails(TypedDict, total=False):
    bundleId: str
    title: str
    version: str
    description: str
    iconUrl: str
    availablePlatforms: List[str]


class MobileDescribeProjectResult(TypedDict, total=False):
    details: MobileProjectDetails


class MobileExportBundleResult(TypedDict, total=False):
    downloadUrl: str


class MobileExportProjectResult(TypedDict, total=False):
    downloadUrl: str
    shareUrl: str
    snapshotId: str


class MobileListBundlesResult(TypedDict, total=False):
    bundleList: List[MobileBundleDetails]
    nextToken: str


class MobileListProjectsResult(TypedDict, total=False):
    projects: List[MobileProjectSummary]
    nextToken: str


class MobileProjectSummary(TypedDict, total=False):
    name: str
    projectId: str


class MobileUpdateProjectResult(TypedDict, total=False):
    details: MobileProjectDetails


class MQ(BaseClient):
    def create_broker(self, *,
        AutoMinorVersionUpgrade: bool = ...,
        BrokerName: str = ...,
        Configuration: MQConfigurationId = ...,
        CreatorRequestId: str = ...,
        DeploymentMode: str = ...,
        EngineType: str = ...,
        EngineVersion: str = ...,
        HostInstanceType: str = ...,
        Logs: MQLogs = ...,
        MaintenanceWindowStartTime: MQWeeklyStartTime = ...,
        PubliclyAccessible: bool = ...,
        SecurityGroups: List[str] = ...,
        SubnetIds: List[str] = ...,
        Tags: Dict[str, str] = ...,
        Users: List[MQUser] = ...
    ) -> MQCreateBrokerResponse: ...

    def create_configuration(self, *,
        EngineType: str = ...,
        EngineVersion: str = ...,
        Name: str = ...,
        Tags: Dict[str, str] = ...
    ) -> MQCreateConfigurationResponse: ...

    def create_tags(self, *,
        ResourceArn: str,
        Tags: Dict[str, str] = ...
    ): ...

    def create_user(self, *,
        BrokerId: str,
        Username: str,
        ConsoleAccess: bool = ...,
        Groups: List[str] = ...,
        Password: str = ...
    ) -> MQCreateUserResponse: ...

    def delete_broker(self, *,
        BrokerId: str
    ) -> MQDeleteBrokerResponse: ...

    def delete_tags(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ): ...

    def delete_user(self, *,
        BrokerId: str,
        Username: str
    ) -> MQDeleteUserResponse: ...

    def describe_broker(self, *,
        BrokerId: str
    ) -> MQDescribeBrokerResponse: ...

    def describe_broker_engine_types(self, *,
        EngineType: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MQDescribeBrokerEngineTypesResponse: ...

    def describe_broker_instance_options(self, *,
        EngineType: str = ...,
        HostInstanceType: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MQDescribeBrokerInstanceOptionsResponse: ...

    def describe_configuration(self, *,
        ConfigurationId: str
    ) -> MQDescribeConfigurationResponse: ...

    def describe_configuration_revision(self, *,
        ConfigurationId: str,
        ConfigurationRevision: str
    ) -> MQDescribeConfigurationRevisionResponse: ...

    def describe_user(self, *,
        BrokerId: str,
        Username: str
    ) -> MQDescribeUserResponse: ...

    def list_brokers(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MQListBrokersResponse: ...

    def list_configuration_revisions(self, *,
        ConfigurationId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MQListConfigurationRevisionsResponse: ...

    def list_configurations(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MQListConfigurationsResponse: ...

    def list_tags(self, *,
        ResourceArn: str
    ) -> MQListTagsResponse: ...

    def list_users(self, *,
        BrokerId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> MQListUsersResponse: ...

    def reboot_broker(self, *,
        BrokerId: str
    ) -> MQRebootBrokerResponse: ...

    def update_broker(self, *,
        BrokerId: str,
        AutoMinorVersionUpgrade: bool = ...,
        Configuration: MQConfigurationId = ...,
        EngineVersion: str = ...,
        Logs: MQLogs = ...
    ) -> MQUpdateBrokerResponse: ...

    def update_configuration(self, *,
        ConfigurationId: str,
        Data: str = ...,
        Description: str = ...
    ) -> MQUpdateConfigurationResponse: ...

    def update_user(self, *,
        BrokerId: str,
        Username: str,
        ConsoleAccess: bool = ...,
        Groups: List[str] = ...,
        Password: str = ...
    ) -> MQUpdateUserResponse: ...


class MQConfigurationId(TypedDict, total=False):
    Id: str
    Revision: int


class MQLogs(TypedDict, total=False):
    Audit: bool
    General: bool


class MQWeeklyStartTime(TypedDict, total=False):
    DayOfWeek: str
    TimeOfDay: str
    TimeZone: str


class MQUser(TypedDict, total=False):
    ConsoleAccess: bool
    Groups: List[str]
    Password: str
    Username: str


class MQCreateBrokerResponse(TypedDict, total=False):
    BrokerArn: str
    BrokerId: str


class MQCreateConfigurationResponse(TypedDict, total=False):
    Arn: str
    Created: datetime.datetime
    Id: str
    LatestRevision: MQConfigurationRevision
    Name: str


class MQConfigurationRevision(TypedDict, total=False):
    Created: datetime.datetime
    Description: str
    Revision: int


class MQCreateUserResponse(TypedDict, total=False):
    pass


class MQDeleteBrokerResponse(TypedDict, total=False):
    BrokerId: str


class MQDeleteUserResponse(TypedDict, total=False):
    pass


class MQDescribeBrokerResponse(TypedDict, total=False):
    AutoMinorVersionUpgrade: bool
    BrokerArn: str
    BrokerId: str
    BrokerInstances: List[MQBrokerInstance]
    BrokerName: str
    BrokerState: str
    Configurations: MQConfigurations
    Created: datetime.datetime
    DeploymentMode: str
    EngineType: str
    EngineVersion: str
    HostInstanceType: str
    Logs: MQLogsSummary
    MaintenanceWindowStartTime: MQWeeklyStartTime
    PendingEngineVersion: str
    PubliclyAccessible: bool
    SecurityGroups: List[str]
    SubnetIds: List[str]
    Tags: Dict[str, str]
    Users: List[MQUserSummary]


class MQBrokerInstance(TypedDict, total=False):
    ConsoleURL: str
    Endpoints: List[str]
    IpAddress: str


class MQConfigurations(TypedDict, total=False):
    Current: MQConfigurationId
    History: List[MQConfigurationId]
    Pending: MQConfigurationId


class MQLogsSummary(TypedDict, total=False):
    Audit: bool
    AuditLogGroup: str
    General: bool
    GeneralLogGroup: str
    Pending: MQPendingLogs


class MQPendingLogs(TypedDict, total=False):
    Audit: bool
    General: bool


class MQUserSummary(TypedDict, total=False):
    PendingChange: str
    Username: str


class MQDescribeBrokerEngineTypesResponse(TypedDict, total=False):
    BrokerEngineTypes: List[MQBrokerEngineType]
    MaxResults: int
    NextToken: str


class MQBrokerEngineType(TypedDict, total=False):
    EngineType: str
    EngineVersions: List[MQEngineVersion]


class MQEngineVersion(TypedDict, total=False):
    Name: str


class MQDescribeBrokerInstanceOptionsResponse(TypedDict, total=False):
    BrokerInstanceOptions: List[MQBrokerInstanceOption]
    MaxResults: int
    NextToken: str


class MQBrokerInstanceOption(TypedDict, total=False):
    AvailabilityZones: List[MQAvailabilityZone]
    EngineType: str
    HostInstanceType: str
    SupportedEngineVersions: List[str]


class MQAvailabilityZone(TypedDict, total=False):
    Name: str


class MQDescribeConfigurationResponse(TypedDict, total=False):
    Arn: str
    Created: datetime.datetime
    Description: str
    EngineType: str
    EngineVersion: str
    Id: str
    LatestRevision: MQConfigurationRevision
    Name: str
    Tags: Dict[str, str]


class MQDescribeConfigurationRevisionResponse(TypedDict, total=False):
    ConfigurationId: str
    Created: datetime.datetime
    Data: str
    Description: str


class MQDescribeUserResponse(TypedDict, total=False):
    BrokerId: str
    ConsoleAccess: bool
    Groups: List[str]
    Pending: MQUserPendingChanges
    Username: str


class MQUserPendingChanges(TypedDict, total=False):
    ConsoleAccess: bool
    Groups: List[str]
    PendingChange: str


class MQListBrokersResponse(TypedDict, total=False):
    BrokerSummaries: List[MQBrokerSummary]
    NextToken: str


class MQBrokerSummary(TypedDict, total=False):
    BrokerArn: str
    BrokerId: str
    BrokerName: str
    BrokerState: str
    Created: datetime.datetime
    DeploymentMode: str
    HostInstanceType: str


class MQListConfigurationRevisionsResponse(TypedDict, total=False):
    ConfigurationId: str
    MaxResults: int
    NextToken: str
    Revisions: List[MQConfigurationRevision]


class MQListConfigurationsResponse(TypedDict, total=False):
    Configurations: List[MQConfiguration]
    MaxResults: int
    NextToken: str


class MQConfiguration(TypedDict, total=False):
    Arn: str
    Created: datetime.datetime
    Description: str
    EngineType: str
    EngineVersion: str
    Id: str
    LatestRevision: MQConfigurationRevision
    Name: str
    Tags: Dict[str, str]


class MQListTagsResponse(TypedDict, total=False):
    Tags: Dict[str, str]


class MQListUsersResponse(TypedDict, total=False):
    BrokerId: str
    MaxResults: int
    NextToken: str
    Users: List[MQUserSummary]


class MQRebootBrokerResponse(TypedDict, total=False):
    pass


class MQUpdateBrokerResponse(TypedDict, total=False):
    AutoMinorVersionUpgrade: bool
    BrokerId: str
    Configuration: MQConfigurationId
    EngineVersion: str
    Logs: MQLogs


class MQUpdateConfigurationResponse(TypedDict, total=False):
    Arn: str
    Created: datetime.datetime
    Id: str
    LatestRevision: MQConfigurationRevision
    Name: str
    Warnings: List[MQSanitizationWarning]


class MQSanitizationWarning(TypedDict, total=False):
    AttributeName: str
    ElementName: str
    Reason: str


class MQUpdateUserResponse(TypedDict, total=False):
    pass


class MTurk(BaseClient):
    def accept_qualification_request(self, *,
        QualificationRequestId: str,
        IntegerValue: int = ...
    ) -> MTurkAcceptQualificationRequestResponse: ...

    def approve_assignment(self, *,
        AssignmentId: str,
        RequesterFeedback: str = ...,
        OverrideRejection: bool = ...
    ) -> MTurkApproveAssignmentResponse: ...

    def associate_qualification_with_worker(self, *,
        QualificationTypeId: str,
        WorkerId: str,
        IntegerValue: int = ...,
        SendNotification: bool = ...
    ) -> MTurkAssociateQualificationWithWorkerResponse: ...

    def create_additional_assignments_for_hit(self, *,
        HITId: str,
        NumberOfAdditionalAssignments: int,
        UniqueRequestToken: str = ...
    ) -> MTurkCreateAdditionalAssignmentsForHITResponse: ...

    def create_hit(self, *,
        LifetimeInSeconds: int,
        AssignmentDurationInSeconds: int,
        Reward: str,
        Title: str,
        Description: str,
        MaxAssignments: int = ...,
        AutoApprovalDelayInSeconds: int = ...,
        Keywords: str = ...,
        Question: str = ...,
        RequesterAnnotation: str = ...,
        QualificationRequirements: List[MTurkQualificationRequirement] = ...,
        UniqueRequestToken: str = ...,
        AssignmentReviewPolicy: MTurkReviewPolicy = ...,
        HITReviewPolicy: MTurkReviewPolicy = ...,
        HITLayoutId: str = ...,
        HITLayoutParameters: List[MTurkHITLayoutParameter] = ...
    ) -> MTurkCreateHITResponse: ...

    def create_hit_type(self, *,
        AssignmentDurationInSeconds: int,
        Reward: str,
        Title: str,
        Description: str,
        AutoApprovalDelayInSeconds: int = ...,
        Keywords: str = ...,
        QualificationRequirements: List[MTurkQualificationRequirement] = ...
    ) -> MTurkCreateHITTypeResponse: ...

    def create_hit_with_hit_type(self, *,
        HITTypeId: str,
        LifetimeInSeconds: int,
        MaxAssignments: int = ...,
        Question: str = ...,
        RequesterAnnotation: str = ...,
        UniqueRequestToken: str = ...,
        AssignmentReviewPolicy: MTurkReviewPolicy = ...,
        HITReviewPolicy: MTurkReviewPolicy = ...,
        HITLayoutId: str = ...,
        HITLayoutParameters: List[MTurkHITLayoutParameter] = ...
    ) -> MTurkCreateHITWithHITTypeResponse: ...

    def create_qualification_type(self, *,
        Name: str,
        Description: str,
        QualificationTypeStatus: str,
        Keywords: str = ...,
        RetryDelayInSeconds: int = ...,
        Test: str = ...,
        AnswerKey: str = ...,
        TestDurationInSeconds: int = ...,
        AutoGranted: bool = ...,
        AutoGrantedValue: int = ...
    ) -> MTurkCreateQualificationTypeResponse: ...

    def create_worker_block(self, *,
        WorkerId: str,
        Reason: str
    ) -> MTurkCreateWorkerBlockResponse: ...

    def delete_hit(self, *,
        HITId: str
    ) -> MTurkDeleteHITResponse: ...

    def delete_qualification_type(self, *,
        QualificationTypeId: str
    ) -> MTurkDeleteQualificationTypeResponse: ...

    def delete_worker_block(self, *,
        WorkerId: str,
        Reason: str = ...
    ) -> MTurkDeleteWorkerBlockResponse: ...

    def disassociate_qualification_from_worker(self, *,
        WorkerId: str,
        QualificationTypeId: str,
        Reason: str = ...
    ) -> MTurkDisassociateQualificationFromWorkerResponse: ...

    def get_account_balance(self) -> MTurkGetAccountBalanceResponse: ...

    def get_assignment(self, *,
        AssignmentId: str
    ) -> MTurkGetAssignmentResponse: ...

    def get_file_upload_url(self, *,
        AssignmentId: str,
        QuestionIdentifier: str
    ) -> MTurkGetFileUploadURLResponse: ...

    def get_hit(self, *,
        HITId: str
    ) -> MTurkGetHITResponse: ...

    def get_qualification_score(self, *,
        QualificationTypeId: str,
        WorkerId: str
    ) -> MTurkGetQualificationScoreResponse: ...

    def get_qualification_type(self, *,
        QualificationTypeId: str
    ) -> MTurkGetQualificationTypeResponse: ...

    def list_assignments_for_hit(self, *,
        HITId: str,
        NextToken: str = ...,
        MaxResults: int = ...,
        AssignmentStatuses: List[str] = ...
    ) -> MTurkListAssignmentsForHITResponse: ...

    def list_bonus_payments(self, *,
        HITId: str = ...,
        AssignmentId: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MTurkListBonusPaymentsResponse: ...

    def list_hits(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MTurkListHITsResponse: ...

    def list_hits_for_qualification_type(self, *,
        QualificationTypeId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MTurkListHITsForQualificationTypeResponse: ...

    def list_qualification_requests(self, *,
        QualificationTypeId: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MTurkListQualificationRequestsResponse: ...

    def list_qualification_types(self, *,
        MustBeRequestable: bool,
        Query: str = ...,
        MustBeOwnedByCaller: bool = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MTurkListQualificationTypesResponse: ...

    def list_review_policy_results_for_hit(self, *,
        HITId: str,
        PolicyLevels: List[str] = ...,
        RetrieveActions: bool = ...,
        RetrieveResults: bool = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MTurkListReviewPolicyResultsForHITResponse: ...

    def list_reviewable_hits(self, *,
        HITTypeId: str = ...,
        Status: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MTurkListReviewableHITsResponse: ...

    def list_worker_blocks(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MTurkListWorkerBlocksResponse: ...

    def list_workers_with_qualification_type(self, *,
        QualificationTypeId: str,
        Status: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> MTurkListWorkersWithQualificationTypeResponse: ...

    def notify_workers(self, *,
        Subject: str,
        MessageText: str,
        WorkerIds: List[str]
    ) -> MTurkNotifyWorkersResponse: ...

    def reject_assignment(self, *,
        AssignmentId: str,
        RequesterFeedback: str
    ) -> MTurkRejectAssignmentResponse: ...

    def reject_qualification_request(self, *,
        QualificationRequestId: str,
        Reason: str = ...
    ) -> MTurkRejectQualificationRequestResponse: ...

    def send_bonus(self, *,
        WorkerId: str,
        BonusAmount: str,
        AssignmentId: str,
        Reason: str,
        UniqueRequestToken: str = ...
    ) -> MTurkSendBonusResponse: ...

    def send_test_event_notification(self, *,
        Notification: MTurkNotificationSpecification,
        TestEventType: str
    ) -> MTurkSendTestEventNotificationResponse: ...

    def update_expiration_for_hit(self, *,
        HITId: str,
        ExpireAt: datetime.datetime
    ) -> MTurkUpdateExpirationForHITResponse: ...

    def update_hit_review_status(self, *,
        HITId: str,
        Revert: bool = ...
    ) -> MTurkUpdateHITReviewStatusResponse: ...

    def update_hit_type_of_hit(self, *,
        HITId: str,
        HITTypeId: str
    ) -> MTurkUpdateHITTypeOfHITResponse: ...

    def update_notification_settings(self, *,
        HITTypeId: str,
        Notification: MTurkNotificationSpecification = ...,
        Active: bool = ...
    ) -> MTurkUpdateNotificationSettingsResponse: ...

    def update_qualification_type(self, *,
        QualificationTypeId: str,
        Description: str = ...,
        QualificationTypeStatus: str = ...,
        Test: str = ...,
        AnswerKey: str = ...,
        TestDurationInSeconds: int = ...,
        RetryDelayInSeconds: int = ...,
        AutoGranted: bool = ...,
        AutoGrantedValue: int = ...
    ) -> MTurkUpdateQualificationTypeResponse: ...


class MTurkAcceptQualificationRequestResponse(TypedDict, total=False):
    pass


class MTurkApproveAssignmentResponse(TypedDict, total=False):
    pass


class MTurkAssociateQualificationWithWorkerResponse(TypedDict, total=False):
    pass


class MTurkCreateAdditionalAssignmentsForHITResponse(TypedDict, total=False):
    pass


class _MTurkQualificationRequirement(TypedDict):
    QualificationTypeId: str
    Comparator: str


class MTurkQualificationRequirement(_MTurkQualificationRequirement, total=False):
    IntegerValues: List[int]
    LocaleValues: List[MTurkLocale]
    RequiredToPreview: bool
    ActionsGuarded: str


class _MTurkLocale(TypedDict):
    Country: str


class MTurkLocale(_MTurkLocale, total=False):
    Subdivision: str


class _MTurkReviewPolicy(TypedDict):
    PolicyName: str


class MTurkReviewPolicy(_MTurkReviewPolicy, total=False):
    Parameters: List[MTurkPolicyParameter]


class MTurkPolicyParameter(TypedDict, total=False):
    Key: str
    Values: List[str]
    MapEntries: List[MTurkParameterMapEntry]


class MTurkParameterMapEntry(TypedDict, total=False):
    Key: str
    Values: List[str]


class MTurkHITLayoutParameter(TypedDict):
    Name: str
    Value: str


class MTurkCreateHITResponse(TypedDict, total=False):
    HIT: MTurkHIT


class MTurkHIT(TypedDict, total=False):
    HITId: str
    HITTypeId: str
    HITGroupId: str
    HITLayoutId: str
    CreationTime: datetime.datetime
    Title: str
    Description: str
    Question: str
    Keywords: str
    HITStatus: str
    MaxAssignments: int
    Reward: str
    AutoApprovalDelayInSeconds: int
    Expiration: datetime.datetime
    AssignmentDurationInSeconds: int
    RequesterAnnotation: str
    QualificationRequirements: List[MTurkQualificationRequirement]
    HITReviewStatus: str
    NumberOfAssignmentsPending: int
    NumberOfAssignmentsAvailable: int
    NumberOfAssignmentsCompleted: int


class MTurkCreateHITTypeResponse(TypedDict, total=False):
    HITTypeId: str


class MTurkCreateHITWithHITTypeResponse(TypedDict, total=False):
    HIT: MTurkHIT


class MTurkCreateQualificationTypeResponse(TypedDict, total=False):
    QualificationType: MTurkQualificationType


class MTurkQualificationType(TypedDict, total=False):
    QualificationTypeId: str
    CreationTime: datetime.datetime
    Name: str
    Description: str
    Keywords: str
    QualificationTypeStatus: str
    Test: str
    TestDurationInSeconds: int
    AnswerKey: str
    RetryDelayInSeconds: int
    IsRequestable: bool
    AutoGranted: bool
    AutoGrantedValue: int


class MTurkCreateWorkerBlockResponse(TypedDict, total=False):
    pass


class MTurkDeleteHITResponse(TypedDict, total=False):
    pass


class MTurkDeleteQualificationTypeResponse(TypedDict, total=False):
    pass


class MTurkDeleteWorkerBlockResponse(TypedDict, total=False):
    pass


class MTurkDisassociateQualificationFromWorkerResponse(TypedDict, total=False):
    pass


class MTurkGetAccountBalanceResponse(TypedDict, total=False):
    AvailableBalance: str
    OnHoldBalance: str


class MTurkGetAssignmentResponse(TypedDict, total=False):
    Assignment: MTurkAssignment
    HIT: MTurkHIT


class MTurkAssignment(TypedDict, total=False):
    AssignmentId: str
    WorkerId: str
    HITId: str
    AssignmentStatus: str
    AutoApprovalTime: datetime.datetime
    AcceptTime: datetime.datetime
    SubmitTime: datetime.datetime
    ApprovalTime: datetime.datetime
    RejectionTime: datetime.datetime
    Deadline: datetime.datetime
    Answer: str
    RequesterFeedback: str


class MTurkGetFileUploadURLResponse(TypedDict, total=False):
    FileUploadURL: str


class MTurkGetHITResponse(TypedDict, total=False):
    HIT: MTurkHIT


class MTurkGetQualificationScoreResponse(TypedDict, total=False):
    Qualification: MTurkQualification


class MTurkQualification(TypedDict, total=False):
    QualificationTypeId: str
    WorkerId: str
    GrantTime: datetime.datetime
    IntegerValue: int
    LocaleValue: MTurkLocale
    Status: str


class MTurkGetQualificationTypeResponse(TypedDict, total=False):
    QualificationType: MTurkQualificationType


class MTurkListAssignmentsForHITResponse(TypedDict, total=False):
    NextToken: str
    NumResults: int
    Assignments: List[MTurkAssignment]


class MTurkListBonusPaymentsResponse(TypedDict, total=False):
    NumResults: int
    NextToken: str
    BonusPayments: List[MTurkBonusPayment]


class MTurkBonusPayment(TypedDict, total=False):
    WorkerId: str
    BonusAmount: str
    AssignmentId: str
    Reason: str
    GrantTime: datetime.datetime


class MTurkListHITsResponse(TypedDict, total=False):
    NextToken: str
    NumResults: int
    HITs: List[MTurkHIT]


class MTurkListHITsForQualificationTypeResponse(TypedDict, total=False):
    NextToken: str
    NumResults: int
    HITs: List[MTurkHIT]


class MTurkListQualificationRequestsResponse(TypedDict, total=False):
    NumResults: int
    NextToken: str
    QualificationRequests: List[MTurkQualificationRequest]


class MTurkQualificationRequest(TypedDict, total=False):
    QualificationRequestId: str
    QualificationTypeId: str
    WorkerId: str
    Test: str
    Answer: str
    SubmitTime: datetime.datetime


class MTurkListQualificationTypesResponse(TypedDict, total=False):
    NumResults: int
    NextToken: str
    QualificationTypes: List[MTurkQualificationType]


class MTurkListReviewPolicyResultsForHITResponse(TypedDict, total=False):
    HITId: str
    AssignmentReviewPolicy: MTurkReviewPolicy
    HITReviewPolicy: MTurkReviewPolicy
    AssignmentReviewReport: MTurkReviewReport
    HITReviewReport: MTurkReviewReport
    NextToken: str


class MTurkReviewReport(TypedDict, total=False):
    ReviewResults: List[MTurkReviewResultDetail]
    ReviewActions: List[MTurkReviewActionDetail]


class MTurkReviewResultDetail(TypedDict, total=False):
    ActionId: str
    SubjectId: str
    SubjectType: str
    QuestionId: str
    Key: str
    Value: str


class MTurkReviewActionDetail(TypedDict, total=False):
    ActionId: str
    ActionName: str
    TargetId: str
    TargetType: str
    Status: str
    CompleteTime: datetime.datetime
    Result: str
    ErrorCode: str


class MTurkListReviewableHITsResponse(TypedDict, total=False):
    NextToken: str
    NumResults: int
    HITs: List[MTurkHIT]


class MTurkListWorkerBlocksResponse(TypedDict, total=False):
    NextToken: str
    NumResults: int
    WorkerBlocks: List[MTurkWorkerBlock]


class MTurkWorkerBlock(TypedDict, total=False):
    WorkerId: str
    Reason: str


class MTurkListWorkersWithQualificationTypeResponse(TypedDict, total=False):
    NextToken: str
    NumResults: int
    Qualifications: List[MTurkQualification]


class MTurkNotifyWorkersResponse(TypedDict, total=False):
    NotifyWorkersFailureStatuses: List[MTurkNotifyWorkersFailureStatus]


class MTurkNotifyWorkersFailureStatus(TypedDict, total=False):
    NotifyWorkersFailureCode: str
    NotifyWorkersFailureMessage: str
    WorkerId: str


class MTurkRejectAssignmentResponse(TypedDict, total=False):
    pass


class MTurkRejectQualificationRequestResponse(TypedDict, total=False):
    pass


class MTurkSendBonusResponse(TypedDict, total=False):
    pass


class MTurkNotificationSpecification(TypedDict):
    Destination: str
    Transport: str
    Version: str
    EventTypes: List[str]


class MTurkSendTestEventNotificationResponse(TypedDict, total=False):
    pass


class MTurkUpdateExpirationForHITResponse(TypedDict, total=False):
    pass


class MTurkUpdateHITReviewStatusResponse(TypedDict, total=False):
    pass


class MTurkUpdateHITTypeOfHITResponse(TypedDict, total=False):
    pass


class MTurkUpdateNotificationSettingsResponse(TypedDict, total=False):
    pass


class MTurkUpdateQualificationTypeResponse(TypedDict, total=False):
    QualificationType: MTurkQualificationType


class Neptune(BaseClient):
    def add_role_to_db_cluster(self, *,
        DBClusterIdentifier: str,
        RoleArn: str
    ): ...

    def add_source_identifier_to_subscription(self, *,
        SubscriptionName: str,
        SourceIdentifier: str
    ) -> NeptuneAddSourceIdentifierToSubscriptionResult: ...

    def add_tags_to_resource(self, *,
        ResourceName: str,
        Tags: List[NeptuneTag]
    ): ...

    def apply_pending_maintenance_action(self, *,
        ResourceIdentifier: str,
        ApplyAction: str,
        OptInType: str
    ) -> NeptuneApplyPendingMaintenanceActionResult: ...

    def copy_db_cluster_parameter_group(self, *,
        SourceDBClusterParameterGroupIdentifier: str,
        TargetDBClusterParameterGroupIdentifier: str,
        TargetDBClusterParameterGroupDescription: str,
        Tags: List[NeptuneTag] = ...
    ) -> NeptuneCopyDBClusterParameterGroupResult: ...

    def copy_db_cluster_snapshot(self, *,
        SourceDBClusterSnapshotIdentifier: str,
        TargetDBClusterSnapshotIdentifier: str,
        KmsKeyId: str = ...,
        PreSignedUrl: str = ...,
        CopyTags: bool = ...,
        Tags: List[NeptuneTag] = ...,
        SourceRegion: str = ...
    ) -> NeptuneCopyDBClusterSnapshotResult: ...

    def copy_db_parameter_group(self, *,
        SourceDBParameterGroupIdentifier: str,
        TargetDBParameterGroupIdentifier: str,
        TargetDBParameterGroupDescription: str,
        Tags: List[NeptuneTag] = ...
    ) -> NeptuneCopyDBParameterGroupResult: ...

    def create_db_cluster(self, *,
        DBClusterIdentifier: str,
        Engine: str,
        AvailabilityZones: List[str] = ...,
        BackupRetentionPeriod: int = ...,
        CharacterSetName: str = ...,
        DatabaseName: str = ...,
        DBClusterParameterGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        DBSubnetGroupName: str = ...,
        EngineVersion: str = ...,
        Port: int = ...,
        MasterUsername: str = ...,
        MasterUserPassword: str = ...,
        OptionGroupName: str = ...,
        PreferredBackupWindow: str = ...,
        PreferredMaintenanceWindow: str = ...,
        ReplicationSourceIdentifier: str = ...,
        Tags: List[NeptuneTag] = ...,
        StorageEncrypted: bool = ...,
        KmsKeyId: str = ...,
        PreSignedUrl: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        SourceRegion: str = ...
    ) -> NeptuneCreateDBClusterResult: ...

    def create_db_cluster_parameter_group(self, *,
        DBClusterParameterGroupName: str,
        DBParameterGroupFamily: str,
        Description: str,
        Tags: List[NeptuneTag] = ...
    ) -> NeptuneCreateDBClusterParameterGroupResult: ...

    def create_db_cluster_snapshot(self, *,
        DBClusterSnapshotIdentifier: str,
        DBClusterIdentifier: str,
        Tags: List[NeptuneTag] = ...
    ) -> NeptuneCreateDBClusterSnapshotResult: ...

    def create_db_instance(self, *,
        DBInstanceIdentifier: str,
        DBInstanceClass: str,
        Engine: str,
        DBName: str = ...,
        AllocatedStorage: int = ...,
        MasterUsername: str = ...,
        MasterUserPassword: str = ...,
        DBSecurityGroups: List[str] = ...,
        VpcSecurityGroupIds: List[str] = ...,
        AvailabilityZone: str = ...,
        DBSubnetGroupName: str = ...,
        PreferredMaintenanceWindow: str = ...,
        DBParameterGroupName: str = ...,
        BackupRetentionPeriod: int = ...,
        PreferredBackupWindow: str = ...,
        Port: int = ...,
        MultiAZ: bool = ...,
        EngineVersion: str = ...,
        AutoMinorVersionUpgrade: bool = ...,
        LicenseModel: str = ...,
        Iops: int = ...,
        OptionGroupName: str = ...,
        CharacterSetName: str = ...,
        PubliclyAccessible: bool = ...,
        Tags: List[NeptuneTag] = ...,
        DBClusterIdentifier: str = ...,
        StorageType: str = ...,
        TdeCredentialArn: str = ...,
        TdeCredentialPassword: str = ...,
        StorageEncrypted: bool = ...,
        KmsKeyId: str = ...,
        Domain: str = ...,
        CopyTagsToSnapshot: bool = ...,
        MonitoringInterval: int = ...,
        MonitoringRoleArn: str = ...,
        DomainIAMRoleName: str = ...,
        PromotionTier: int = ...,
        Timezone: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        EnablePerformanceInsights: bool = ...,
        PerformanceInsightsKMSKeyId: str = ...,
        EnableCloudwatchLogsExports: List[str] = ...
    ) -> NeptuneCreateDBInstanceResult: ...

    def create_db_parameter_group(self, *,
        DBParameterGroupName: str,
        DBParameterGroupFamily: str,
        Description: str,
        Tags: List[NeptuneTag] = ...
    ) -> NeptuneCreateDBParameterGroupResult: ...

    def create_db_subnet_group(self, *,
        DBSubnetGroupName: str,
        DBSubnetGroupDescription: str,
        SubnetIds: List[str],
        Tags: List[NeptuneTag] = ...
    ) -> NeptuneCreateDBSubnetGroupResult: ...

    def create_event_subscription(self, *,
        SubscriptionName: str,
        SnsTopicArn: str,
        SourceType: str = ...,
        EventCategories: List[str] = ...,
        SourceIds: List[str] = ...,
        Enabled: bool = ...,
        Tags: List[NeptuneTag] = ...
    ) -> NeptuneCreateEventSubscriptionResult: ...

    def delete_db_cluster(self, *,
        DBClusterIdentifier: str,
        SkipFinalSnapshot: bool = ...,
        FinalDBSnapshotIdentifier: str = ...
    ) -> NeptuneDeleteDBClusterResult: ...

    def delete_db_cluster_parameter_group(self, *,
        DBClusterParameterGroupName: str
    ): ...

    def delete_db_cluster_snapshot(self, *,
        DBClusterSnapshotIdentifier: str
    ) -> NeptuneDeleteDBClusterSnapshotResult: ...

    def delete_db_instance(self, *,
        DBInstanceIdentifier: str,
        SkipFinalSnapshot: bool = ...,
        FinalDBSnapshotIdentifier: str = ...
    ) -> NeptuneDeleteDBInstanceResult: ...

    def delete_db_parameter_group(self, *,
        DBParameterGroupName: str
    ): ...

    def delete_db_subnet_group(self, *,
        DBSubnetGroupName: str
    ): ...

    def delete_event_subscription(self, *,
        SubscriptionName: str
    ) -> NeptuneDeleteEventSubscriptionResult: ...

    def describe_db_cluster_parameter_groups(self, *,
        DBClusterParameterGroupName: str = ...,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> NeptuneDBClusterParameterGroupsMessage: ...

    def describe_db_cluster_parameters(self, *,
        DBClusterParameterGroupName: str,
        Source: str = ...,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> NeptuneDBClusterParameterGroupDetails: ...

    def describe_db_cluster_snapshot_attributes(self, *,
        DBClusterSnapshotIdentifier: str
    ) -> NeptuneDescribeDBClusterSnapshotAttributesResult: ...

    def describe_db_cluster_snapshots(self, *,
        DBClusterIdentifier: str = ...,
        DBClusterSnapshotIdentifier: str = ...,
        SnapshotType: str = ...,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        IncludeShared: bool = ...,
        IncludePublic: bool = ...
    ) -> NeptuneDBClusterSnapshotMessage: ...

    def describe_db_clusters(self, *,
        DBClusterIdentifier: str = ...,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> NeptuneDBClusterMessage: ...

    def describe_db_engine_versions(self, *,
        Engine: str = ...,
        EngineVersion: str = ...,
        DBParameterGroupFamily: str = ...,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        DefaultOnly: bool = ...,
        ListSupportedCharacterSets: bool = ...,
        ListSupportedTimezones: bool = ...
    ) -> NeptuneDBEngineVersionMessage: ...

    def describe_db_instances(self, *,
        DBInstanceIdentifier: str = ...,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> NeptuneDBInstanceMessage: ...

    def describe_db_parameter_groups(self, *,
        DBParameterGroupName: str = ...,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> NeptuneDBParameterGroupsMessage: ...

    def describe_db_parameters(self, *,
        DBParameterGroupName: str,
        Source: str = ...,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> NeptuneDBParameterGroupDetails: ...

    def describe_db_subnet_groups(self, *,
        DBSubnetGroupName: str = ...,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> NeptuneDBSubnetGroupMessage: ...

    def describe_engine_default_cluster_parameters(self, *,
        DBParameterGroupFamily: str,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> NeptuneDescribeEngineDefaultClusterParametersResult: ...

    def describe_engine_default_parameters(self, *,
        DBParameterGroupFamily: str,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> NeptuneDescribeEngineDefaultParametersResult: ...

    def describe_event_categories(self, *,
        SourceType: str = ...,
        Filters: List[NeptuneFilter] = ...
    ) -> NeptuneEventCategoriesMessage: ...

    def describe_event_subscriptions(self, *,
        SubscriptionName: str = ...,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> NeptuneEventSubscriptionsMessage: ...

    def describe_events(self, *,
        SourceIdentifier: str = ...,
        SourceType: str = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        Duration: int = ...,
        EventCategories: List[str] = ...,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> NeptuneEventsMessage: ...

    def describe_orderable_db_instance_options(self, *,
        Engine: str,
        EngineVersion: str = ...,
        DBInstanceClass: str = ...,
        LicenseModel: str = ...,
        Vpc: bool = ...,
        Filters: List[NeptuneFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> NeptuneOrderableDBInstanceOptionsMessage: ...

    def describe_pending_maintenance_actions(self, *,
        ResourceIdentifier: str = ...,
        Filters: List[NeptuneFilter] = ...,
        Marker: str = ...,
        MaxRecords: int = ...
    ) -> NeptunePendingMaintenanceActionsMessage: ...

    def describe_valid_db_instance_modifications(self, *,
        DBInstanceIdentifier: str
    ) -> NeptuneDescribeValidDBInstanceModificationsResult: ...

    def failover_db_cluster(self, *,
        DBClusterIdentifier: str = ...,
        TargetDBInstanceIdentifier: str = ...
    ) -> NeptuneFailoverDBClusterResult: ...

    def list_tags_for_resource(self, *,
        ResourceName: str,
        Filters: List[NeptuneFilter] = ...
    ) -> NeptuneTagListMessage: ...

    def modify_db_cluster(self, *,
        DBClusterIdentifier: str,
        NewDBClusterIdentifier: str = ...,
        ApplyImmediately: bool = ...,
        BackupRetentionPeriod: int = ...,
        DBClusterParameterGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        Port: int = ...,
        MasterUserPassword: str = ...,
        OptionGroupName: str = ...,
        PreferredBackupWindow: str = ...,
        PreferredMaintenanceWindow: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        EngineVersion: str = ...
    ) -> NeptuneModifyDBClusterResult: ...

    def modify_db_cluster_parameter_group(self, *,
        DBClusterParameterGroupName: str,
        Parameters: List[NeptuneParameter]
    ) -> NeptuneDBClusterParameterGroupNameMessage: ...

    def modify_db_cluster_snapshot_attribute(self, *,
        DBClusterSnapshotIdentifier: str,
        AttributeName: str,
        ValuesToAdd: List[str] = ...,
        ValuesToRemove: List[str] = ...
    ) -> NeptuneModifyDBClusterSnapshotAttributeResult: ...

    def modify_db_instance(self, *,
        DBInstanceIdentifier: str,
        AllocatedStorage: int = ...,
        DBInstanceClass: str = ...,
        DBSubnetGroupName: str = ...,
        DBSecurityGroups: List[str] = ...,
        VpcSecurityGroupIds: List[str] = ...,
        ApplyImmediately: bool = ...,
        MasterUserPassword: str = ...,
        DBParameterGroupName: str = ...,
        BackupRetentionPeriod: int = ...,
        PreferredBackupWindow: str = ...,
        PreferredMaintenanceWindow: str = ...,
        MultiAZ: bool = ...,
        EngineVersion: str = ...,
        AllowMajorVersionUpgrade: bool = ...,
        AutoMinorVersionUpgrade: bool = ...,
        LicenseModel: str = ...,
        Iops: int = ...,
        OptionGroupName: str = ...,
        NewDBInstanceIdentifier: str = ...,
        StorageType: str = ...,
        TdeCredentialArn: str = ...,
        TdeCredentialPassword: str = ...,
        CACertificateIdentifier: str = ...,
        Domain: str = ...,
        CopyTagsToSnapshot: bool = ...,
        MonitoringInterval: int = ...,
        DBPortNumber: int = ...,
        PubliclyAccessible: bool = ...,
        MonitoringRoleArn: str = ...,
        DomainIAMRoleName: str = ...,
        PromotionTier: int = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        EnablePerformanceInsights: bool = ...,
        PerformanceInsightsKMSKeyId: str = ...,
        CloudwatchLogsExportConfiguration: NeptuneCloudwatchLogsExportConfiguration = ...
    ) -> NeptuneModifyDBInstanceResult: ...

    def modify_db_parameter_group(self, *,
        DBParameterGroupName: str,
        Parameters: List[NeptuneParameter]
    ) -> NeptuneDBParameterGroupNameMessage: ...

    def modify_db_subnet_group(self, *,
        DBSubnetGroupName: str,
        SubnetIds: List[str],
        DBSubnetGroupDescription: str = ...
    ) -> NeptuneModifyDBSubnetGroupResult: ...

    def modify_event_subscription(self, *,
        SubscriptionName: str,
        SnsTopicArn: str = ...,
        SourceType: str = ...,
        EventCategories: List[str] = ...,
        Enabled: bool = ...
    ) -> NeptuneModifyEventSubscriptionResult: ...

    def promote_read_replica_db_cluster(self, *,
        DBClusterIdentifier: str
    ) -> NeptunePromoteReadReplicaDBClusterResult: ...

    def reboot_db_instance(self, *,
        DBInstanceIdentifier: str,
        ForceFailover: bool = ...
    ) -> NeptuneRebootDBInstanceResult: ...

    def remove_role_from_db_cluster(self, *,
        DBClusterIdentifier: str,
        RoleArn: str
    ): ...

    def remove_source_identifier_from_subscription(self, *,
        SubscriptionName: str,
        SourceIdentifier: str
    ) -> NeptuneRemoveSourceIdentifierFromSubscriptionResult: ...

    def remove_tags_from_resource(self, *,
        ResourceName: str,
        TagKeys: List[str]
    ): ...

    def reset_db_cluster_parameter_group(self, *,
        DBClusterParameterGroupName: str,
        ResetAllParameters: bool = ...,
        Parameters: List[NeptuneParameter] = ...
    ) -> NeptuneDBClusterParameterGroupNameMessage: ...

    def reset_db_parameter_group(self, *,
        DBParameterGroupName: str,
        ResetAllParameters: bool = ...,
        Parameters: List[NeptuneParameter] = ...
    ) -> NeptuneDBParameterGroupNameMessage: ...

    def restore_db_cluster_from_snapshot(self, *,
        DBClusterIdentifier: str,
        SnapshotIdentifier: str,
        Engine: str,
        AvailabilityZones: List[str] = ...,
        EngineVersion: str = ...,
        Port: int = ...,
        DBSubnetGroupName: str = ...,
        DatabaseName: str = ...,
        OptionGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        Tags: List[NeptuneTag] = ...,
        KmsKeyId: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        DBClusterParameterGroupName: str = ...
    ) -> NeptuneRestoreDBClusterFromSnapshotResult: ...

    def restore_db_cluster_to_point_in_time(self, *,
        DBClusterIdentifier: str,
        SourceDBClusterIdentifier: str,
        RestoreType: str = ...,
        RestoreToTime: datetime.datetime = ...,
        UseLatestRestorableTime: bool = ...,
        Port: int = ...,
        DBSubnetGroupName: str = ...,
        OptionGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        Tags: List[NeptuneTag] = ...,
        KmsKeyId: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        DBClusterParameterGroupName: str = ...
    ) -> NeptuneRestoreDBClusterToPointInTimeResult: ...


class NeptuneAddSourceIdentifierToSubscriptionResult(TypedDict, total=False):
    EventSubscription: NeptuneEventSubscription


class NeptuneEventSubscription(TypedDict, total=False):
    CustomerAwsId: str
    CustSubscriptionId: str
    SnsTopicArn: str
    Status: str
    SubscriptionCreationTime: str
    SourceType: str
    SourceIdsList: List[str]
    EventCategoriesList: List[str]
    Enabled: bool
    EventSubscriptionArn: str


class NeptuneTag(TypedDict, total=False):
    Key: str
    Value: str


class NeptuneApplyPendingMaintenanceActionResult(TypedDict, total=False):
    ResourcePendingMaintenanceActions: NeptuneResourcePendingMaintenanceActions


class NeptuneResourcePendingMaintenanceActions(TypedDict, total=False):
    ResourceIdentifier: str
    PendingMaintenanceActionDetails: List[NeptunePendingMaintenanceAction]


class NeptunePendingMaintenanceAction(TypedDict, total=False):
    Action: str
    AutoAppliedAfterDate: datetime.datetime
    ForcedApplyDate: datetime.datetime
    OptInStatus: str
    CurrentApplyDate: datetime.datetime
    Description: str


class NeptuneCopyDBClusterParameterGroupResult(TypedDict, total=False):
    DBClusterParameterGroup: NeptuneDBClusterParameterGroup


class NeptuneDBClusterParameterGroup(TypedDict, total=False):
    DBClusterParameterGroupName: str
    DBParameterGroupFamily: str
    Description: str
    DBClusterParameterGroupArn: str


class NeptuneCopyDBClusterSnapshotResult(TypedDict, total=False):
    DBClusterSnapshot: NeptuneDBClusterSnapshot


class NeptuneDBClusterSnapshot(TypedDict, total=False):
    AvailabilityZones: List[str]
    DBClusterSnapshotIdentifier: str
    DBClusterIdentifier: str
    SnapshotCreateTime: datetime.datetime
    Engine: str
    AllocatedStorage: int
    Status: str
    Port: int
    VpcId: str
    ClusterCreateTime: datetime.datetime
    MasterUsername: str
    EngineVersion: str
    LicenseModel: str
    SnapshotType: str
    PercentProgress: int
    StorageEncrypted: bool
    KmsKeyId: str
    DBClusterSnapshotArn: str
    SourceDBClusterSnapshotArn: str
    IAMDatabaseAuthenticationEnabled: bool


class NeptuneCopyDBParameterGroupResult(TypedDict, total=False):
    DBParameterGroup: NeptuneDBParameterGroup


class NeptuneDBParameterGroup(TypedDict, total=False):
    DBParameterGroupName: str
    DBParameterGroupFamily: str
    Description: str
    DBParameterGroupArn: str


class NeptuneCreateDBClusterResult(TypedDict, total=False):
    DBCluster: NeptuneDBCluster


class NeptuneDBCluster(TypedDict, total=False):
    AllocatedStorage: int
    AvailabilityZones: List[str]
    BackupRetentionPeriod: int
    CharacterSetName: str
    DatabaseName: str
    DBClusterIdentifier: str
    DBClusterParameterGroup: str
    DBSubnetGroup: str
    Status: str
    PercentProgress: str
    EarliestRestorableTime: datetime.datetime
    Endpoint: str
    ReaderEndpoint: str
    MultiAZ: bool
    Engine: str
    EngineVersion: str
    LatestRestorableTime: datetime.datetime
    Port: int
    MasterUsername: str
    DBClusterOptionGroupMemberships: List[NeptuneDBClusterOptionGroupStatus]
    PreferredBackupWindow: str
    PreferredMaintenanceWindow: str
    ReplicationSourceIdentifier: str
    ReadReplicaIdentifiers: List[str]
    DBClusterMembers: List[NeptuneDBClusterMember]
    VpcSecurityGroups: List[NeptuneVpcSecurityGroupMembership]
    HostedZoneId: str
    StorageEncrypted: bool
    KmsKeyId: str
    DbClusterResourceId: str
    DBClusterArn: str
    AssociatedRoles: List[NeptuneDBClusterRole]
    IAMDatabaseAuthenticationEnabled: bool
    CloneGroupId: str
    ClusterCreateTime: datetime.datetime


class NeptuneDBClusterOptionGroupStatus(TypedDict, total=False):
    DBClusterOptionGroupName: str
    Status: str


class NeptuneDBClusterMember(TypedDict, total=False):
    DBInstanceIdentifier: str
    IsClusterWriter: bool
    DBClusterParameterGroupStatus: str
    PromotionTier: int


class NeptuneVpcSecurityGroupMembership(TypedDict, total=False):
    VpcSecurityGroupId: str
    Status: str


class NeptuneDBClusterRole(TypedDict, total=False):
    RoleArn: str
    Status: str


class NeptuneCreateDBClusterParameterGroupResult(TypedDict, total=False):
    DBClusterParameterGroup: NeptuneDBClusterParameterGroup


class NeptuneCreateDBClusterSnapshotResult(TypedDict, total=False):
    DBClusterSnapshot: NeptuneDBClusterSnapshot


class NeptuneCreateDBInstanceResult(TypedDict, total=False):
    DBInstance: NeptuneDBInstance


class NeptuneDBInstance(TypedDict, total=False):
    DBInstanceIdentifier: str
    DBInstanceClass: str
    Engine: str
    DBInstanceStatus: str
    MasterUsername: str
    DBName: str
    Endpoint: NeptuneEndpoint
    AllocatedStorage: int
    InstanceCreateTime: datetime.datetime
    PreferredBackupWindow: str
    BackupRetentionPeriod: int
    DBSecurityGroups: List[NeptuneDBSecurityGroupMembership]
    VpcSecurityGroups: List[NeptuneVpcSecurityGroupMembership]
    DBParameterGroups: List[NeptuneDBParameterGroupStatus]
    AvailabilityZone: str
    DBSubnetGroup: NeptuneDBSubnetGroup
    PreferredMaintenanceWindow: str
    PendingModifiedValues: NeptunePendingModifiedValues
    LatestRestorableTime: datetime.datetime
    MultiAZ: bool
    EngineVersion: str
    AutoMinorVersionUpgrade: bool
    ReadReplicaSourceDBInstanceIdentifier: str
    ReadReplicaDBInstanceIdentifiers: List[str]
    ReadReplicaDBClusterIdentifiers: List[str]
    LicenseModel: str
    Iops: int
    OptionGroupMemberships: List[NeptuneOptionGroupMembership]
    CharacterSetName: str
    SecondaryAvailabilityZone: str
    PubliclyAccessible: bool
    StatusInfos: List[NeptuneDBInstanceStatusInfo]
    StorageType: str
    TdeCredentialArn: str
    DbInstancePort: int
    DBClusterIdentifier: str
    StorageEncrypted: bool
    KmsKeyId: str
    DbiResourceId: str
    CACertificateIdentifier: str
    DomainMemberships: List[NeptuneDomainMembership]
    CopyTagsToSnapshot: bool
    MonitoringInterval: int
    EnhancedMonitoringResourceArn: str
    MonitoringRoleArn: str
    PromotionTier: int
    DBInstanceArn: str
    Timezone: str
    IAMDatabaseAuthenticationEnabled: bool
    PerformanceInsightsEnabled: bool
    PerformanceInsightsKMSKeyId: str
    EnabledCloudwatchLogsExports: List[str]


class NeptuneEndpoint(TypedDict, total=False):
    Address: str
    Port: int
    HostedZoneId: str


class NeptuneDBSecurityGroupMembership(TypedDict, total=False):
    DBSecurityGroupName: str
    Status: str


class NeptuneDBParameterGroupStatus(TypedDict, total=False):
    DBParameterGroupName: str
    ParameterApplyStatus: str


class NeptuneDBSubnetGroup(TypedDict, total=False):
    DBSubnetGroupName: str
    DBSubnetGroupDescription: str
    VpcId: str
    SubnetGroupStatus: str
    Subnets: List[NeptuneSubnet]
    DBSubnetGroupArn: str


class NeptuneSubnet(TypedDict, total=False):
    SubnetIdentifier: str
    SubnetAvailabilityZone: NeptuneAvailabilityZone
    SubnetStatus: str


class NeptuneAvailabilityZone(TypedDict, total=False):
    Name: str


class NeptunePendingModifiedValues(TypedDict, total=False):
    DBInstanceClass: str
    AllocatedStorage: int
    MasterUserPassword: str
    Port: int
    BackupRetentionPeriod: int
    MultiAZ: bool
    EngineVersion: str
    LicenseModel: str
    Iops: int
    DBInstanceIdentifier: str
    StorageType: str
    CACertificateIdentifier: str
    DBSubnetGroupName: str
    PendingCloudwatchLogsExports: NeptunePendingCloudwatchLogsExports


class NeptunePendingCloudwatchLogsExports(TypedDict, total=False):
    LogTypesToEnable: List[str]
    LogTypesToDisable: List[str]


class NeptuneOptionGroupMembership(TypedDict, total=False):
    OptionGroupName: str
    Status: str


class NeptuneDBInstanceStatusInfo(TypedDict, total=False):
    StatusType: str
    Normal: bool
    Status: str
    Message: str


class NeptuneDomainMembership(TypedDict, total=False):
    Domain: str
    Status: str
    FQDN: str
    IAMRoleName: str


class NeptuneCreateDBParameterGroupResult(TypedDict, total=False):
    DBParameterGroup: NeptuneDBParameterGroup


class NeptuneCreateDBSubnetGroupResult(TypedDict, total=False):
    DBSubnetGroup: NeptuneDBSubnetGroup


class NeptuneCreateEventSubscriptionResult(TypedDict, total=False):
    EventSubscription: NeptuneEventSubscription


class NeptuneDeleteDBClusterResult(TypedDict, total=False):
    DBCluster: NeptuneDBCluster


class NeptuneDeleteDBClusterSnapshotResult(TypedDict, total=False):
    DBClusterSnapshot: NeptuneDBClusterSnapshot


class NeptuneDeleteDBInstanceResult(TypedDict, total=False):
    DBInstance: NeptuneDBInstance


class NeptuneDeleteEventSubscriptionResult(TypedDict, total=False):
    EventSubscription: NeptuneEventSubscription


class NeptuneFilter(TypedDict):
    Name: str
    Values: List[str]


class NeptuneDBClusterParameterGroupsMessage(TypedDict, total=False):
    Marker: str
    DBClusterParameterGroups: List[NeptuneDBClusterParameterGroup]


class NeptuneDBClusterParameterGroupDetails(TypedDict, total=False):
    Parameters: List[NeptuneParameter]
    Marker: str


class NeptuneParameter(TypedDict, total=False):
    ParameterName: str
    ParameterValue: str
    Description: str
    Source: str
    ApplyType: str
    DataType: str
    AllowedValues: str
    IsModifiable: bool
    MinimumEngineVersion: str
    ApplyMethod: str


class NeptuneDescribeDBClusterSnapshotAttributesResult(TypedDict, total=False):
    DBClusterSnapshotAttributesResult: NeptuneDBClusterSnapshotAttributesResult


class NeptuneDBClusterSnapshotAttributesResult(TypedDict, total=False):
    DBClusterSnapshotIdentifier: str
    DBClusterSnapshotAttributes: List[NeptuneDBClusterSnapshotAttribute]


class NeptuneDBClusterSnapshotAttribute(TypedDict, total=False):
    AttributeName: str
    AttributeValues: List[str]


class NeptuneDBClusterSnapshotMessage(TypedDict, total=False):
    Marker: str
    DBClusterSnapshots: List[NeptuneDBClusterSnapshot]


class NeptuneDBClusterMessage(TypedDict, total=False):
    Marker: str
    DBClusters: List[NeptuneDBCluster]


class NeptuneDBEngineVersionMessage(TypedDict, total=False):
    Marker: str
    DBEngineVersions: List[NeptuneDBEngineVersion]


class NeptuneDBEngineVersion(TypedDict, total=False):
    Engine: str
    EngineVersion: str
    DBParameterGroupFamily: str
    DBEngineDescription: str
    DBEngineVersionDescription: str
    DefaultCharacterSet: NeptuneCharacterSet
    SupportedCharacterSets: List[NeptuneCharacterSet]
    ValidUpgradeTarget: List[NeptuneUpgradeTarget]
    SupportedTimezones: List[NeptuneTimezone]
    ExportableLogTypes: List[str]
    SupportsLogExportsToCloudwatchLogs: bool
    SupportsReadReplica: bool


class NeptuneCharacterSet(TypedDict, total=False):
    CharacterSetName: str
    CharacterSetDescription: str


class NeptuneUpgradeTarget(TypedDict, total=False):
    Engine: str
    EngineVersion: str
    Description: str
    AutoUpgrade: bool
    IsMajorVersionUpgrade: bool


class NeptuneTimezone(TypedDict, total=False):
    TimezoneName: str


class NeptuneDBInstanceMessage(TypedDict, total=False):
    Marker: str
    DBInstances: List[NeptuneDBInstance]


class NeptuneDBParameterGroupsMessage(TypedDict, total=False):
    Marker: str
    DBParameterGroups: List[NeptuneDBParameterGroup]


class NeptuneDBParameterGroupDetails(TypedDict, total=False):
    Parameters: List[NeptuneParameter]
    Marker: str


class NeptuneDBSubnetGroupMessage(TypedDict, total=False):
    Marker: str
    DBSubnetGroups: List[NeptuneDBSubnetGroup]


class NeptuneDescribeEngineDefaultClusterParametersResult(TypedDict, total=False):
    EngineDefaults: NeptuneEngineDefaults


class NeptuneEngineDefaults(TypedDict, total=False):
    DBParameterGroupFamily: str
    Marker: str
    Parameters: List[NeptuneParameter]


class NeptuneDescribeEngineDefaultParametersResult(TypedDict, total=False):
    EngineDefaults: NeptuneEngineDefaults


class NeptuneEventCategoriesMessage(TypedDict, total=False):
    EventCategoriesMapList: List[NeptuneEventCategoriesMap]


class NeptuneEventCategoriesMap(TypedDict, total=False):
    SourceType: str
    EventCategories: List[str]


class NeptuneEventSubscriptionsMessage(TypedDict, total=False):
    Marker: str
    EventSubscriptionsList: List[NeptuneEventSubscription]


class NeptuneEventsMessage(TypedDict, total=False):
    Marker: str
    Events: List[NeptuneEvent]


class NeptuneEvent(TypedDict, total=False):
    SourceIdentifier: str
    SourceType: str
    Message: str
    EventCategories: List[str]
    Date: datetime.datetime
    SourceArn: str


class NeptuneOrderableDBInstanceOptionsMessage(TypedDict, total=False):
    OrderableDBInstanceOptions: List[NeptuneOrderableDBInstanceOption]
    Marker: str


class NeptuneOrderableDBInstanceOption(TypedDict, total=False):
    Engine: str
    EngineVersion: str
    DBInstanceClass: str
    LicenseModel: str
    AvailabilityZones: List[NeptuneAvailabilityZone]
    MultiAZCapable: bool
    ReadReplicaCapable: bool
    Vpc: bool
    SupportsStorageEncryption: bool
    StorageType: str
    SupportsIops: bool
    SupportsEnhancedMonitoring: bool
    SupportsIAMDatabaseAuthentication: bool
    SupportsPerformanceInsights: bool
    MinStorageSize: int
    MaxStorageSize: int
    MinIopsPerDbInstance: int
    MaxIopsPerDbInstance: int
    MinIopsPerGib: float
    MaxIopsPerGib: float


class NeptunePendingMaintenanceActionsMessage(TypedDict, total=False):
    PendingMaintenanceActions: List[NeptuneResourcePendingMaintenanceActions]
    Marker: str


class NeptuneDescribeValidDBInstanceModificationsResult(TypedDict, total=False):
    ValidDBInstanceModificationsMessage: NeptuneValidDBInstanceModificationsMessage


class NeptuneValidDBInstanceModificationsMessage(TypedDict, total=False):
    Storage: List[NeptuneValidStorageOptions]


class NeptuneValidStorageOptions(TypedDict, total=False):
    StorageType: str
    StorageSize: List[NeptuneRange]
    ProvisionedIops: List[NeptuneRange]
    IopsToStorageRatio: List[NeptuneDoubleRange]


class NeptuneRange(TypedDict, total=False):
    From: int
    To: int
    Step: int


class NeptuneDoubleRange(TypedDict, total=False):
    From: float
    To: float


class NeptuneFailoverDBClusterResult(TypedDict, total=False):
    DBCluster: NeptuneDBCluster


class NeptuneTagListMessage(TypedDict, total=False):
    TagList: List[NeptuneTag]


class NeptuneModifyDBClusterResult(TypedDict, total=False):
    DBCluster: NeptuneDBCluster


class NeptuneDBClusterParameterGroupNameMessage(TypedDict, total=False):
    DBClusterParameterGroupName: str


class NeptuneModifyDBClusterSnapshotAttributeResult(TypedDict, total=False):
    DBClusterSnapshotAttributesResult: NeptuneDBClusterSnapshotAttributesResult


class NeptuneCloudwatchLogsExportConfiguration(TypedDict, total=False):
    EnableLogTypes: List[str]
    DisableLogTypes: List[str]


class NeptuneModifyDBInstanceResult(TypedDict, total=False):
    DBInstance: NeptuneDBInstance


class NeptuneDBParameterGroupNameMessage(TypedDict, total=False):
    DBParameterGroupName: str


class NeptuneModifyDBSubnetGroupResult(TypedDict, total=False):
    DBSubnetGroup: NeptuneDBSubnetGroup


class NeptuneModifyEventSubscriptionResult(TypedDict, total=False):
    EventSubscription: NeptuneEventSubscription


class NeptunePromoteReadReplicaDBClusterResult(TypedDict, total=False):
    DBCluster: NeptuneDBCluster


class NeptuneRebootDBInstanceResult(TypedDict, total=False):
    DBInstance: NeptuneDBInstance


class NeptuneRemoveSourceIdentifierFromSubscriptionResult(TypedDict, total=False):
    EventSubscription: NeptuneEventSubscription


class NeptuneRestoreDBClusterFromSnapshotResult(TypedDict, total=False):
    DBCluster: NeptuneDBCluster


class NeptuneRestoreDBClusterToPointInTimeResult(TypedDict, total=False):
    DBCluster: NeptuneDBCluster


class OpsWorks(BaseClient):
    def assign_instance(self, *,
        InstanceId: str,
        LayerIds: List[str]
    ): ...

    def assign_volume(self, *,
        VolumeId: str,
        InstanceId: str = ...
    ): ...

    def associate_elastic_ip(self, *,
        ElasticIp: str,
        InstanceId: str = ...
    ): ...

    def attach_elastic_load_balancer(self, *,
        ElasticLoadBalancerName: str,
        LayerId: str
    ): ...

    def clone_stack(self, *,
        SourceStackId: str,
        ServiceRoleArn: str,
        Name: str = ...,
        Region: str = ...,
        VpcId: str = ...,
        Attributes: Dict[str, str] = ...,
        DefaultInstanceProfileArn: str = ...,
        DefaultOs: str = ...,
        HostnameTheme: str = ...,
        DefaultAvailabilityZone: str = ...,
        DefaultSubnetId: str = ...,
        CustomJson: str = ...,
        ConfigurationManager: OpsWorksStackConfigurationManager = ...,
        ChefConfiguration: OpsWorksChefConfiguration = ...,
        UseCustomCookbooks: bool = ...,
        UseOpsworksSecurityGroups: bool = ...,
        CustomCookbooksSource: OpsWorksSource = ...,
        DefaultSshKeyName: str = ...,
        ClonePermissions: bool = ...,
        CloneAppIds: List[str] = ...,
        DefaultRootDeviceType: str = ...,
        AgentVersion: str = ...
    ) -> OpsWorksCloneStackResult: ...

    def create_app(self, *,
        StackId: str,
        Name: str,
        Type: str,
        Shortname: str = ...,
        Description: str = ...,
        DataSources: List[OpsWorksDataSource] = ...,
        AppSource: OpsWorksSource = ...,
        Domains: List[str] = ...,
        EnableSsl: bool = ...,
        SslConfiguration: OpsWorksSslConfiguration = ...,
        Attributes: Dict[str, str] = ...,
        Environment: List[OpsWorksEnvironmentVariable] = ...
    ) -> OpsWorksCreateAppResult: ...

    def create_deployment(self, *,
        StackId: str,
        Command: OpsWorksDeploymentCommand,
        AppId: str = ...,
        InstanceIds: List[str] = ...,
        LayerIds: List[str] = ...,
        Comment: str = ...,
        CustomJson: str = ...
    ) -> OpsWorksCreateDeploymentResult: ...

    def create_instance(self, *,
        StackId: str,
        LayerIds: List[str],
        InstanceType: str,
        AutoScalingType: str = ...,
        Hostname: str = ...,
        Os: str = ...,
        AmiId: str = ...,
        SshKeyName: str = ...,
        AvailabilityZone: str = ...,
        VirtualizationType: str = ...,
        SubnetId: str = ...,
        Architecture: str = ...,
        RootDeviceType: str = ...,
        BlockDeviceMappings: List[OpsWorksBlockDeviceMapping] = ...,
        InstallUpdatesOnBoot: bool = ...,
        EbsOptimized: bool = ...,
        AgentVersion: str = ...,
        Tenancy: str = ...
    ) -> OpsWorksCreateInstanceResult: ...

    def create_layer(self, *,
        StackId: str,
        Type: str,
        Name: str,
        Shortname: str,
        Attributes: Dict[str, str] = ...,
        CloudWatchLogsConfiguration: OpsWorksCloudWatchLogsConfiguration = ...,
        CustomInstanceProfileArn: str = ...,
        CustomJson: str = ...,
        CustomSecurityGroupIds: List[str] = ...,
        Packages: List[str] = ...,
        VolumeConfigurations: List[OpsWorksVolumeConfiguration] = ...,
        EnableAutoHealing: bool = ...,
        AutoAssignElasticIps: bool = ...,
        AutoAssignPublicIps: bool = ...,
        CustomRecipes: OpsWorksRecipes = ...,
        InstallUpdatesOnBoot: bool = ...,
        UseEbsOptimizedInstances: bool = ...,
        LifecycleEventConfiguration: OpsWorksLifecycleEventConfiguration = ...
    ) -> OpsWorksCreateLayerResult: ...

    def create_stack(self, *,
        Name: str,
        Region: str,
        ServiceRoleArn: str,
        DefaultInstanceProfileArn: str,
        VpcId: str = ...,
        Attributes: Dict[str, str] = ...,
        DefaultOs: str = ...,
        HostnameTheme: str = ...,
        DefaultAvailabilityZone: str = ...,
        DefaultSubnetId: str = ...,
        CustomJson: str = ...,
        ConfigurationManager: OpsWorksStackConfigurationManager = ...,
        ChefConfiguration: OpsWorksChefConfiguration = ...,
        UseCustomCookbooks: bool = ...,
        UseOpsworksSecurityGroups: bool = ...,
        CustomCookbooksSource: OpsWorksSource = ...,
        DefaultSshKeyName: str = ...,
        DefaultRootDeviceType: str = ...,
        AgentVersion: str = ...
    ) -> OpsWorksCreateStackResult: ...

    def create_user_profile(self, *,
        IamUserArn: str,
        SshUsername: str = ...,
        SshPublicKey: str = ...,
        AllowSelfManagement: bool = ...
    ) -> OpsWorksCreateUserProfileResult: ...

    def delete_app(self, *,
        AppId: str
    ): ...

    def delete_instance(self, *,
        InstanceId: str,
        DeleteElasticIp: bool = ...,
        DeleteVolumes: bool = ...
    ): ...

    def delete_layer(self, *,
        LayerId: str
    ): ...

    def delete_stack(self, *,
        StackId: str
    ): ...

    def delete_user_profile(self, *,
        IamUserArn: str
    ): ...

    def deregister_ecs_cluster(self, *,
        EcsClusterArn: str
    ): ...

    def deregister_elastic_ip(self, *,
        ElasticIp: str
    ): ...

    def deregister_instance(self, *,
        InstanceId: str
    ): ...

    def deregister_rds_db_instance(self, *,
        RdsDbInstanceArn: str
    ): ...

    def deregister_volume(self, *,
        VolumeId: str
    ): ...

    def describe_agent_versions(self, *,
        StackId: str = ...,
        ConfigurationManager: OpsWorksStackConfigurationManager = ...
    ) -> OpsWorksDescribeAgentVersionsResult: ...

    def describe_apps(self, *,
        StackId: str = ...,
        AppIds: List[str] = ...
    ) -> OpsWorksDescribeAppsResult: ...

    def describe_commands(self, *,
        DeploymentId: str = ...,
        InstanceId: str = ...,
        CommandIds: List[str] = ...
    ) -> OpsWorksDescribeCommandsResult: ...

    def describe_deployments(self, *,
        StackId: str = ...,
        AppId: str = ...,
        DeploymentIds: List[str] = ...
    ) -> OpsWorksDescribeDeploymentsResult: ...

    def describe_ecs_clusters(self, *,
        EcsClusterArns: List[str] = ...,
        StackId: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> OpsWorksDescribeEcsClustersResult: ...

    def describe_elastic_ips(self, *,
        InstanceId: str = ...,
        StackId: str = ...,
        Ips: List[str] = ...
    ) -> OpsWorksDescribeElasticIpsResult: ...

    def describe_elastic_load_balancers(self, *,
        StackId: str = ...,
        LayerIds: List[str] = ...
    ) -> OpsWorksDescribeElasticLoadBalancersResult: ...

    def describe_instances(self, *,
        StackId: str = ...,
        LayerId: str = ...,
        InstanceIds: List[str] = ...
    ) -> OpsWorksDescribeInstancesResult: ...

    def describe_layers(self, *,
        StackId: str = ...,
        LayerIds: List[str] = ...
    ) -> OpsWorksDescribeLayersResult: ...

    def describe_load_based_auto_scaling(self, *,
        LayerIds: List[str]
    ) -> OpsWorksDescribeLoadBasedAutoScalingResult: ...

    def describe_my_user_profile(self) -> OpsWorksDescribeMyUserProfileResult: ...

    def describe_operating_systems(self) -> OpsWorksDescribeOperatingSystemsResponse: ...

    def describe_permissions(self, *,
        IamUserArn: str = ...,
        StackId: str = ...
    ) -> OpsWorksDescribePermissionsResult: ...

    def describe_raid_arrays(self, *,
        InstanceId: str = ...,
        StackId: str = ...,
        RaidArrayIds: List[str] = ...
    ) -> OpsWorksDescribeRaidArraysResult: ...

    def describe_rds_db_instances(self, *,
        StackId: str,
        RdsDbInstanceArns: List[str] = ...
    ) -> OpsWorksDescribeRdsDbInstancesResult: ...

    def describe_service_errors(self, *,
        StackId: str = ...,
        InstanceId: str = ...,
        ServiceErrorIds: List[str] = ...
    ) -> OpsWorksDescribeServiceErrorsResult: ...

    def describe_stack_provisioning_parameters(self, *,
        StackId: str
    ) -> OpsWorksDescribeStackProvisioningParametersResult: ...

    def describe_stack_summary(self, *,
        StackId: str
    ) -> OpsWorksDescribeStackSummaryResult: ...

    def describe_stacks(self, *,
        StackIds: List[str] = ...
    ) -> OpsWorksDescribeStacksResult: ...

    def describe_time_based_auto_scaling(self, *,
        InstanceIds: List[str]
    ) -> OpsWorksDescribeTimeBasedAutoScalingResult: ...

    def describe_user_profiles(self, *,
        IamUserArns: List[str] = ...
    ) -> OpsWorksDescribeUserProfilesResult: ...

    def describe_volumes(self, *,
        InstanceId: str = ...,
        StackId: str = ...,
        RaidArrayId: str = ...,
        VolumeIds: List[str] = ...
    ) -> OpsWorksDescribeVolumesResult: ...

    def detach_elastic_load_balancer(self, *,
        ElasticLoadBalancerName: str,
        LayerId: str
    ): ...

    def disassociate_elastic_ip(self, *,
        ElasticIp: str
    ): ...

    def get_hostname_suggestion(self, *,
        LayerId: str
    ) -> OpsWorksGetHostnameSuggestionResult: ...

    def grant_access(self, *,
        InstanceId: str,
        ValidForInMinutes: int = ...
    ) -> OpsWorksGrantAccessResult: ...

    def list_tags(self, *,
        ResourceArn: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> OpsWorksListTagsResult: ...

    def reboot_instance(self, *,
        InstanceId: str
    ): ...

    def register_ecs_cluster(self, *,
        EcsClusterArn: str,
        StackId: str
    ) -> OpsWorksRegisterEcsClusterResult: ...

    def register_elastic_ip(self, *,
        ElasticIp: str,
        StackId: str
    ) -> OpsWorksRegisterElasticIpResult: ...

    def register_instance(self, *,
        StackId: str,
        Hostname: str = ...,
        PublicIp: str = ...,
        PrivateIp: str = ...,
        RsaPublicKey: str = ...,
        RsaPublicKeyFingerprint: str = ...,
        InstanceIdentity: OpsWorksInstanceIdentity = ...
    ) -> OpsWorksRegisterInstanceResult: ...

    def register_rds_db_instance(self, *,
        StackId: str,
        RdsDbInstanceArn: str,
        DbUser: str,
        DbPassword: str
    ): ...

    def register_volume(self, *,
        StackId: str,
        Ec2VolumeId: str = ...
    ) -> OpsWorksRegisterVolumeResult: ...

    def set_load_based_auto_scaling(self, *,
        LayerId: str,
        Enable: bool = ...,
        UpScaling: OpsWorksAutoScalingThresholds = ...,
        DownScaling: OpsWorksAutoScalingThresholds = ...
    ): ...

    def set_permission(self, *,
        StackId: str,
        IamUserArn: str,
        AllowSsh: bool = ...,
        AllowSudo: bool = ...,
        Level: str = ...
    ): ...

    def set_time_based_auto_scaling(self, *,
        InstanceId: str,
        AutoScalingSchedule: OpsWorksWeeklyAutoScalingSchedule = ...
    ): ...

    def start_instance(self, *,
        InstanceId: str
    ): ...

    def start_stack(self, *,
        StackId: str
    ): ...

    def stop_instance(self, *,
        InstanceId: str,
        Force: bool = ...
    ): ...

    def stop_stack(self, *,
        StackId: str
    ): ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: Dict[str, str]
    ): ...

    def unassign_instance(self, *,
        InstanceId: str
    ): ...

    def unassign_volume(self, *,
        VolumeId: str
    ): ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ): ...

    def update_app(self, *,
        AppId: str,
        Name: str = ...,
        Description: str = ...,
        DataSources: List[OpsWorksDataSource] = ...,
        Type: str = ...,
        AppSource: OpsWorksSource = ...,
        Domains: List[str] = ...,
        EnableSsl: bool = ...,
        SslConfiguration: OpsWorksSslConfiguration = ...,
        Attributes: Dict[str, str] = ...,
        Environment: List[OpsWorksEnvironmentVariable] = ...
    ): ...

    def update_elastic_ip(self, *,
        ElasticIp: str,
        Name: str = ...
    ): ...

    def update_instance(self, *,
        InstanceId: str,
        LayerIds: List[str] = ...,
        InstanceType: str = ...,
        AutoScalingType: str = ...,
        Hostname: str = ...,
        Os: str = ...,
        AmiId: str = ...,
        SshKeyName: str = ...,
        Architecture: str = ...,
        InstallUpdatesOnBoot: bool = ...,
        EbsOptimized: bool = ...,
        AgentVersion: str = ...
    ): ...

    def update_layer(self, *,
        LayerId: str,
        Name: str = ...,
        Shortname: str = ...,
        Attributes: Dict[str, str] = ...,
        CloudWatchLogsConfiguration: OpsWorksCloudWatchLogsConfiguration = ...,
        CustomInstanceProfileArn: str = ...,
        CustomJson: str = ...,
        CustomSecurityGroupIds: List[str] = ...,
        Packages: List[str] = ...,
        VolumeConfigurations: List[OpsWorksVolumeConfiguration] = ...,
        EnableAutoHealing: bool = ...,
        AutoAssignElasticIps: bool = ...,
        AutoAssignPublicIps: bool = ...,
        CustomRecipes: OpsWorksRecipes = ...,
        InstallUpdatesOnBoot: bool = ...,
        UseEbsOptimizedInstances: bool = ...,
        LifecycleEventConfiguration: OpsWorksLifecycleEventConfiguration = ...
    ): ...

    def update_my_user_profile(self, *,
        SshPublicKey: str = ...
    ): ...

    def update_rds_db_instance(self, *,
        RdsDbInstanceArn: str,
        DbUser: str = ...,
        DbPassword: str = ...
    ): ...

    def update_stack(self, *,
        StackId: str,
        Name: str = ...,
        Attributes: Dict[str, str] = ...,
        ServiceRoleArn: str = ...,
        DefaultInstanceProfileArn: str = ...,
        DefaultOs: str = ...,
        HostnameTheme: str = ...,
        DefaultAvailabilityZone: str = ...,
        DefaultSubnetId: str = ...,
        CustomJson: str = ...,
        ConfigurationManager: OpsWorksStackConfigurationManager = ...,
        ChefConfiguration: OpsWorksChefConfiguration = ...,
        UseCustomCookbooks: bool = ...,
        CustomCookbooksSource: OpsWorksSource = ...,
        DefaultSshKeyName: str = ...,
        DefaultRootDeviceType: str = ...,
        UseOpsworksSecurityGroups: bool = ...,
        AgentVersion: str = ...
    ): ...

    def update_user_profile(self, *,
        IamUserArn: str,
        SshUsername: str = ...,
        SshPublicKey: str = ...,
        AllowSelfManagement: bool = ...
    ): ...

    def update_volume(self, *,
        VolumeId: str,
        Name: str = ...,
        MountPoint: str = ...
    ): ...


class OpsWorksStackConfigurationManager(TypedDict, total=False):
    Name: str
    Version: str


class OpsWorksChefConfiguration(TypedDict, total=False):
    ManageBerkshelf: bool
    BerkshelfVersion: str


class OpsWorksSource(TypedDict, total=False):
    Type: str
    Url: str
    Username: str
    Password: str
    SshKey: str
    Revision: str


class OpsWorksCloneStackResult(TypedDict, total=False):
    StackId: str


class OpsWorksDataSource(TypedDict, total=False):
    Type: str
    Arn: str
    DatabaseName: str


class _OpsWorksSslConfiguration(TypedDict):
    Certificate: str
    PrivateKey: str


class OpsWorksSslConfiguration(_OpsWorksSslConfiguration, total=False):
    Chain: str


class _OpsWorksEnvironmentVariable(TypedDict):
    Key: str
    Value: str


class OpsWorksEnvironmentVariable(_OpsWorksEnvironmentVariable, total=False):
    Secure: bool


class OpsWorksCreateAppResult(TypedDict, total=False):
    AppId: str


class _OpsWorksDeploymentCommand(TypedDict):
    Name: str


class OpsWorksDeploymentCommand(_OpsWorksDeploymentCommand, total=False):
    Args: Dict[str, List[str]]


class OpsWorksCreateDeploymentResult(TypedDict, total=False):
    DeploymentId: str


class OpsWorksBlockDeviceMapping(TypedDict, total=False):
    DeviceName: str
    NoDevice: str
    VirtualName: str
    Ebs: OpsWorksEbsBlockDevice


class OpsWorksEbsBlockDevice(TypedDict, total=False):
    SnapshotId: str
    Iops: int
    VolumeSize: int
    VolumeType: str
    DeleteOnTermination: bool


class OpsWorksCreateInstanceResult(TypedDict, total=False):
    InstanceId: str


class OpsWorksCloudWatchLogsConfiguration(TypedDict, total=False):
    Enabled: bool
    LogStreams: List[OpsWorksCloudWatchLogsLogStream]


class OpsWorksCloudWatchLogsLogStream(TypedDict, total=False):
    LogGroupName: str
    DatetimeFormat: str
    TimeZone: str
    File: str
    FileFingerprintLines: str
    MultiLineStartPattern: str
    InitialPosition: str
    Encoding: str
    BufferDuration: int
    BatchCount: int
    BatchSize: int


class _OpsWorksVolumeConfiguration(TypedDict):
    MountPoint: str
    NumberOfDisks: int
    Size: int


class OpsWorksVolumeConfiguration(_OpsWorksVolumeConfiguration, total=False):
    RaidLevel: int
    VolumeType: str
    Iops: int
    Encrypted: bool


class OpsWorksRecipes(TypedDict, total=False):
    Setup: List[str]
    Configure: List[str]
    Deploy: List[str]
    Undeploy: List[str]
    Shutdown: List[str]


class OpsWorksLifecycleEventConfiguration(TypedDict, total=False):
    Shutdown: OpsWorksShutdownEventConfiguration


class OpsWorksShutdownEventConfiguration(TypedDict, total=False):
    ExecutionTimeout: int
    DelayUntilElbConnectionsDrained: bool


class OpsWorksCreateLayerResult(TypedDict, total=False):
    LayerId: str


class OpsWorksCreateStackResult(TypedDict, total=False):
    StackId: str


class OpsWorksCreateUserProfileResult(TypedDict, total=False):
    IamUserArn: str


class OpsWorksDescribeAgentVersionsResult(TypedDict, total=False):
    AgentVersions: List[OpsWorksAgentVersion]


class OpsWorksAgentVersion(TypedDict, total=False):
    Version: str
    ConfigurationManager: OpsWorksStackConfigurationManager


class OpsWorksDescribeAppsResult(TypedDict, total=False):
    Apps: List[OpsWorksApp]


class OpsWorksApp(TypedDict, total=False):
    AppId: str
    StackId: str
    Shortname: str
    Name: str
    Description: str
    DataSources: List[OpsWorksDataSource]
    Type: str
    AppSource: OpsWorksSource
    Domains: List[str]
    EnableSsl: bool
    SslConfiguration: OpsWorksSslConfiguration
    Attributes: Dict[str, str]
    CreatedAt: str
    Environment: List[OpsWorksEnvironmentVariable]


class OpsWorksDescribeCommandsResult(TypedDict, total=False):
    Commands: List[OpsWorksCommand]


class OpsWorksCommand(TypedDict, total=False):
    CommandId: str
    InstanceId: str
    DeploymentId: str
    CreatedAt: str
    AcknowledgedAt: str
    CompletedAt: str
    Status: str
    ExitCode: int
    LogUrl: str
    Type: str


class OpsWorksDescribeDeploymentsResult(TypedDict, total=False):
    Deployments: List[OpsWorksDeployment]


class OpsWorksDeployment(TypedDict, total=False):
    DeploymentId: str
    StackId: str
    AppId: str
    CreatedAt: str
    CompletedAt: str
    Duration: int
    IamUserArn: str
    Comment: str
    Command: OpsWorksDeploymentCommand
    Status: str
    CustomJson: str
    InstanceIds: List[str]


class OpsWorksDescribeEcsClustersResult(TypedDict, total=False):
    EcsClusters: List[OpsWorksEcsCluster]
    NextToken: str


class OpsWorksEcsCluster(TypedDict, total=False):
    EcsClusterArn: str
    EcsClusterName: str
    StackId: str
    RegisteredAt: str


class OpsWorksDescribeElasticIpsResult(TypedDict, total=False):
    ElasticIps: List[OpsWorksElasticIp]


class OpsWorksElasticIp(TypedDict, total=False):
    Ip: str
    Name: str
    Domain: str
    Region: str
    InstanceId: str


class OpsWorksDescribeElasticLoadBalancersResult(TypedDict, total=False):
    ElasticLoadBalancers: List[OpsWorksElasticLoadBalancer]


class OpsWorksElasticLoadBalancer(TypedDict, total=False):
    ElasticLoadBalancerName: str
    Region: str
    DnsName: str
    StackId: str
    LayerId: str
    VpcId: str
    AvailabilityZones: List[str]
    SubnetIds: List[str]
    Ec2InstanceIds: List[str]


class OpsWorksDescribeInstancesResult(TypedDict, total=False):
    Instances: List[OpsWorksInstance]


class OpsWorksInstance(TypedDict, total=False):
    AgentVersion: str
    AmiId: str
    Architecture: str
    Arn: str
    AutoScalingType: str
    AvailabilityZone: str
    BlockDeviceMappings: List[OpsWorksBlockDeviceMapping]
    CreatedAt: str
    EbsOptimized: bool
    Ec2InstanceId: str
    EcsClusterArn: str
    EcsContainerInstanceArn: str
    ElasticIp: str
    Hostname: str
    InfrastructureClass: str
    InstallUpdatesOnBoot: bool
    InstanceId: str
    InstanceProfileArn: str
    InstanceType: str
    LastServiceErrorId: str
    LayerIds: List[str]
    Os: str
    Platform: str
    PrivateDns: str
    PrivateIp: str
    PublicDns: str
    PublicIp: str
    RegisteredBy: str
    ReportedAgentVersion: str
    ReportedOs: OpsWorksReportedOs
    RootDeviceType: str
    RootDeviceVolumeId: str
    SecurityGroupIds: List[str]
    SshHostDsaKeyFingerprint: str
    SshHostRsaKeyFingerprint: str
    SshKeyName: str
    StackId: str
    Status: str
    SubnetId: str
    Tenancy: str
    VirtualizationType: str


class OpsWorksReportedOs(TypedDict, total=False):
    Family: str
    Name: str
    Version: str


class OpsWorksDescribeLayersResult(TypedDict, total=False):
    Layers: List[OpsWorksLayer]


class OpsWorksLayer(TypedDict, total=False):
    Arn: str
    StackId: str
    LayerId: str
    Type: str
    Name: str
    Shortname: str
    Attributes: Dict[str, str]
    CloudWatchLogsConfiguration: OpsWorksCloudWatchLogsConfiguration
    CustomInstanceProfileArn: str
    CustomJson: str
    CustomSecurityGroupIds: List[str]
    DefaultSecurityGroupNames: List[str]
    Packages: List[str]
    VolumeConfigurations: List[OpsWorksVolumeConfiguration]
    EnableAutoHealing: bool
    AutoAssignElasticIps: bool
    AutoAssignPublicIps: bool
    DefaultRecipes: OpsWorksRecipes
    CustomRecipes: OpsWorksRecipes
    CreatedAt: str
    InstallUpdatesOnBoot: bool
    UseEbsOptimizedInstances: bool
    LifecycleEventConfiguration: OpsWorksLifecycleEventConfiguration


class OpsWorksDescribeLoadBasedAutoScalingResult(TypedDict, total=False):
    LoadBasedAutoScalingConfigurations: List[OpsWorksLoadBasedAutoScalingConfiguration]


class OpsWorksLoadBasedAutoScalingConfiguration(TypedDict, total=False):
    LayerId: str
    Enable: bool
    UpScaling: OpsWorksAutoScalingThresholds
    DownScaling: OpsWorksAutoScalingThresholds


class OpsWorksAutoScalingThresholds(TypedDict, total=False):
    InstanceCount: int
    ThresholdsWaitTime: int
    IgnoreMetricsTime: int
    CpuThreshold: float
    MemoryThreshold: float
    LoadThreshold: float
    Alarms: List[str]


class OpsWorksDescribeMyUserProfileResult(TypedDict, total=False):
    UserProfile: OpsWorksSelfUserProfile


class OpsWorksSelfUserProfile(TypedDict, total=False):
    IamUserArn: str
    Name: str
    SshUsername: str
    SshPublicKey: str


class OpsWorksDescribeOperatingSystemsResponse(TypedDict, total=False):
    OperatingSystems: List[OpsWorksOperatingSystem]


class OpsWorksOperatingSystem(TypedDict, total=False):
    Name: str
    Id: str
    Type: str
    ConfigurationManagers: List[OpsWorksOperatingSystemConfigurationManager]
    ReportedName: str
    ReportedVersion: str
    Supported: bool


class OpsWorksOperatingSystemConfigurationManager(TypedDict, total=False):
    Name: str
    Version: str


class OpsWorksDescribePermissionsResult(TypedDict, total=False):
    Permissions: List[OpsWorksPermission]


class OpsWorksPermission(TypedDict, total=False):
    StackId: str
    IamUserArn: str
    AllowSsh: bool
    AllowSudo: bool
    Level: str


class OpsWorksDescribeRaidArraysResult(TypedDict, total=False):
    RaidArrays: List[OpsWorksRaidArray]


class OpsWorksRaidArray(TypedDict, total=False):
    RaidArrayId: str
    InstanceId: str
    Name: str
    RaidLevel: int
    NumberOfDisks: int
    Size: int
    Device: str
    MountPoint: str
    AvailabilityZone: str
    CreatedAt: str
    StackId: str
    VolumeType: str
    Iops: int


class OpsWorksDescribeRdsDbInstancesResult(TypedDict, total=False):
    RdsDbInstances: List[OpsWorksRdsDbInstance]


class OpsWorksRdsDbInstance(TypedDict, total=False):
    RdsDbInstanceArn: str
    DbInstanceIdentifier: str
    DbUser: str
    DbPassword: str
    Region: str
    Address: str
    Engine: str
    StackId: str
    MissingOnRds: bool


class OpsWorksDescribeServiceErrorsResult(TypedDict, total=False):
    ServiceErrors: List[OpsWorksServiceError]


class OpsWorksServiceError(TypedDict, total=False):
    ServiceErrorId: str
    StackId: str
    InstanceId: str
    Type: str
    Message: str
    CreatedAt: str


class OpsWorksDescribeStackProvisioningParametersResult(TypedDict, total=False):
    AgentInstallerUrl: str
    Parameters: Dict[str, str]


class OpsWorksDescribeStackSummaryResult(TypedDict, total=False):
    StackSummary: OpsWorksStackSummary


class OpsWorksStackSummary(TypedDict, total=False):
    StackId: str
    Name: str
    Arn: str
    LayersCount: int
    AppsCount: int
    InstancesCount: OpsWorksInstancesCount


class OpsWorksInstancesCount(TypedDict, total=False):
    Assigning: int
    Booting: int
    ConnectionLost: int
    Deregistering: int
    Online: int
    Pending: int
    Rebooting: int
    Registered: int
    Registering: int
    Requested: int
    RunningSetup: int
    SetupFailed: int
    ShuttingDown: int
    StartFailed: int
    StopFailed: int
    Stopped: int
    Stopping: int
    Terminated: int
    Terminating: int
    Unassigning: int


class OpsWorksDescribeStacksResult(TypedDict, total=False):
    Stacks: List[OpsWorksStack]


class OpsWorksStack(TypedDict, total=False):
    StackId: str
    Name: str
    Arn: str
    Region: str
    VpcId: str
    Attributes: Dict[str, str]
    ServiceRoleArn: str
    DefaultInstanceProfileArn: str
    DefaultOs: str
    HostnameTheme: str
    DefaultAvailabilityZone: str
    DefaultSubnetId: str
    CustomJson: str
    ConfigurationManager: OpsWorksStackConfigurationManager
    ChefConfiguration: OpsWorksChefConfiguration
    UseCustomCookbooks: bool
    UseOpsworksSecurityGroups: bool
    CustomCookbooksSource: OpsWorksSource
    DefaultSshKeyName: str
    CreatedAt: str
    DefaultRootDeviceType: str
    AgentVersion: str


class OpsWorksDescribeTimeBasedAutoScalingResult(TypedDict, total=False):
    TimeBasedAutoScalingConfigurations: List[OpsWorksTimeBasedAutoScalingConfiguration]


class OpsWorksTimeBasedAutoScalingConfiguration(TypedDict, total=False):
    InstanceId: str
    AutoScalingSchedule: OpsWorksWeeklyAutoScalingSchedule


class OpsWorksWeeklyAutoScalingSchedule(TypedDict, total=False):
    Monday: Dict[str, str]
    Tuesday: Dict[str, str]
    Wednesday: Dict[str, str]
    Thursday: Dict[str, str]
    Friday: Dict[str, str]
    Saturday: Dict[str, str]
    Sunday: Dict[str, str]


class OpsWorksDescribeUserProfilesResult(TypedDict, total=False):
    UserProfiles: List[OpsWorksUserProfile]


class OpsWorksUserProfile(TypedDict, total=False):
    IamUserArn: str
    Name: str
    SshUsername: str
    SshPublicKey: str
    AllowSelfManagement: bool


class OpsWorksDescribeVolumesResult(TypedDict, total=False):
    Volumes: List[OpsWorksVolume]


class OpsWorksVolume(TypedDict, total=False):
    VolumeId: str
    Ec2VolumeId: str
    Name: str
    RaidArrayId: str
    InstanceId: str
    Status: str
    Size: int
    Device: str
    MountPoint: str
    Region: str
    AvailabilityZone: str
    VolumeType: str
    Iops: int
    Encrypted: bool


class OpsWorksGetHostnameSuggestionResult(TypedDict, total=False):
    LayerId: str
    Hostname: str


class OpsWorksGrantAccessResult(TypedDict, total=False):
    TemporaryCredential: OpsWorksTemporaryCredential


class OpsWorksTemporaryCredential(TypedDict, total=False):
    Username: str
    Password: str
    ValidForInMinutes: int
    InstanceId: str


class OpsWorksListTagsResult(TypedDict, total=False):
    Tags: Dict[str, str]
    NextToken: str


class OpsWorksRegisterEcsClusterResult(TypedDict, total=False):
    EcsClusterArn: str


class OpsWorksRegisterElasticIpResult(TypedDict, total=False):
    ElasticIp: str


class OpsWorksInstanceIdentity(TypedDict, total=False):
    Document: str
    Signature: str


class OpsWorksRegisterInstanceResult(TypedDict, total=False):
    InstanceId: str


class OpsWorksRegisterVolumeResult(TypedDict, total=False):
    VolumeId: str


class OpsWorksCM(BaseClient):
    def associate_node(self, *,
        ServerName: str,
        NodeName: str,
        EngineAttributes: List[OpsWorksCMEngineAttribute]
    ) -> OpsWorksCMAssociateNodeResponse: ...

    def create_backup(self, *,
        ServerName: str,
        Description: str = ...
    ) -> OpsWorksCMCreateBackupResponse: ...

    def create_server(self, *,
        ServerName: str,
        InstanceProfileArn: str,
        InstanceType: str,
        ServiceRoleArn: str,
        AssociatePublicIpAddress: bool = ...,
        DisableAutomatedBackup: bool = ...,
        Engine: str = ...,
        EngineModel: str = ...,
        EngineVersion: str = ...,
        EngineAttributes: List[OpsWorksCMEngineAttribute] = ...,
        BackupRetentionCount: int = ...,
        KeyPair: str = ...,
        PreferredMaintenanceWindow: str = ...,
        PreferredBackupWindow: str = ...,
        SecurityGroupIds: List[str] = ...,
        SubnetIds: List[str] = ...,
        BackupId: str = ...
    ) -> OpsWorksCMCreateServerResponse: ...

    def delete_backup(self, *,
        BackupId: str
    ) -> OpsWorksCMDeleteBackupResponse: ...

    def delete_server(self, *,
        ServerName: str
    ) -> OpsWorksCMDeleteServerResponse: ...

    def describe_account_attributes(self) -> OpsWorksCMDescribeAccountAttributesResponse: ...

    def describe_backups(self, *,
        BackupId: str = ...,
        ServerName: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> OpsWorksCMDescribeBackupsResponse: ...

    def describe_events(self, *,
        ServerName: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> OpsWorksCMDescribeEventsResponse: ...

    def describe_node_association_status(self, *,
        NodeAssociationStatusToken: str,
        ServerName: str
    ) -> OpsWorksCMDescribeNodeAssociationStatusResponse: ...

    def describe_servers(self, *,
        ServerName: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> OpsWorksCMDescribeServersResponse: ...

    def disassociate_node(self, *,
        ServerName: str,
        NodeName: str,
        EngineAttributes: List[OpsWorksCMEngineAttribute] = ...
    ) -> OpsWorksCMDisassociateNodeResponse: ...

    def export_server_engine_attribute(self, *,
        ExportAttributeName: str,
        ServerName: str,
        InputAttributes: List[OpsWorksCMEngineAttribute] = ...
    ) -> OpsWorksCMExportServerEngineAttributeResponse: ...

    def restore_server(self, *,
        BackupId: str,
        ServerName: str,
        InstanceType: str = ...,
        KeyPair: str = ...
    ) -> OpsWorksCMRestoreServerResponse: ...

    def start_maintenance(self, *,
        ServerName: str,
        EngineAttributes: List[OpsWorksCMEngineAttribute] = ...
    ) -> OpsWorksCMStartMaintenanceResponse: ...

    def update_server(self, *,
        ServerName: str,
        DisableAutomatedBackup: bool = ...,
        BackupRetentionCount: int = ...,
        PreferredMaintenanceWindow: str = ...,
        PreferredBackupWindow: str = ...
    ) -> OpsWorksCMUpdateServerResponse: ...

    def update_server_engine_attributes(self, *,
        ServerName: str,
        AttributeName: str,
        AttributeValue: str = ...
    ) -> OpsWorksCMUpdateServerEngineAttributesResponse: ...


class OpsWorksCMEngineAttribute(TypedDict, total=False):
    Name: str
    Value: str


class OpsWorksCMAssociateNodeResponse(TypedDict, total=False):
    NodeAssociationStatusToken: str


class OpsWorksCMCreateBackupResponse(TypedDict, total=False):
    Backup: OpsWorksCMBackup


class OpsWorksCMBackup(TypedDict, total=False):
    BackupArn: str
    BackupId: str
    BackupType: str
    CreatedAt: datetime.datetime
    Description: str
    Engine: str
    EngineModel: str
    EngineVersion: str
    InstanceProfileArn: str
    InstanceType: str
    KeyPair: str
    PreferredBackupWindow: str
    PreferredMaintenanceWindow: str
    S3DataSize: int
    S3DataUrl: str
    S3LogUrl: str
    SecurityGroupIds: List[str]
    ServerName: str
    ServiceRoleArn: str
    Status: str
    StatusDescription: str
    SubnetIds: List[str]
    ToolsVersion: str
    UserArn: str


class OpsWorksCMCreateServerResponse(TypedDict, total=False):
    Server: OpsWorksCMServer


class OpsWorksCMServer(TypedDict, total=False):
    AssociatePublicIpAddress: bool
    BackupRetentionCount: int
    ServerName: str
    CreatedAt: datetime.datetime
    CloudFormationStackArn: str
    DisableAutomatedBackup: bool
    Endpoint: str
    Engine: str
    EngineModel: str
    EngineAttributes: List[OpsWorksCMEngineAttribute]
    EngineVersion: str
    InstanceProfileArn: str
    InstanceType: str
    KeyPair: str
    MaintenanceStatus: str
    PreferredMaintenanceWindow: str
    PreferredBackupWindow: str
    SecurityGroupIds: List[str]
    ServiceRoleArn: str
    Status: str
    StatusReason: str
    SubnetIds: List[str]
    ServerArn: str


class OpsWorksCMDeleteBackupResponse(TypedDict, total=False):
    pass


class OpsWorksCMDeleteServerResponse(TypedDict, total=False):
    pass


class OpsWorksCMDescribeAccountAttributesResponse(TypedDict, total=False):
    Attributes: List[OpsWorksCMAccountAttribute]


class OpsWorksCMAccountAttribute(TypedDict, total=False):
    Name: str
    Maximum: int
    Used: int


class OpsWorksCMDescribeBackupsResponse(TypedDict, total=False):
    Backups: List[OpsWorksCMBackup]
    NextToken: str


class OpsWorksCMDescribeEventsResponse(TypedDict, total=False):
    ServerEvents: List[OpsWorksCMServerEvent]
    NextToken: str


class OpsWorksCMServerEvent(TypedDict, total=False):
    CreatedAt: datetime.datetime
    ServerName: str
    Message: str
    LogUrl: str


class OpsWorksCMDescribeNodeAssociationStatusResponse(TypedDict, total=False):
    NodeAssociationStatus: str
    EngineAttributes: List[OpsWorksCMEngineAttribute]


class OpsWorksCMDescribeServersResponse(TypedDict, total=False):
    Servers: List[OpsWorksCMServer]
    NextToken: str


class OpsWorksCMDisassociateNodeResponse(TypedDict, total=False):
    NodeAssociationStatusToken: str


class OpsWorksCMExportServerEngineAttributeResponse(TypedDict, total=False):
    EngineAttribute: OpsWorksCMEngineAttribute
    ServerName: str


class OpsWorksCMRestoreServerResponse(TypedDict, total=False):
    pass


class OpsWorksCMStartMaintenanceResponse(TypedDict, total=False):
    Server: OpsWorksCMServer


class OpsWorksCMUpdateServerResponse(TypedDict, total=False):
    Server: OpsWorksCMServer


class OpsWorksCMUpdateServerEngineAttributesResponse(TypedDict, total=False):
    Server: OpsWorksCMServer


class Organizations(BaseClient):
    def accept_handshake(self, *,
        HandshakeId: str
    ) -> OrganizationsAcceptHandshakeResponse: ...

    def attach_policy(self, *,
        PolicyId: str,
        TargetId: str
    ): ...

    def cancel_handshake(self, *,
        HandshakeId: str
    ) -> OrganizationsCancelHandshakeResponse: ...

    def create_account(self, *,
        Email: str,
        AccountName: str,
        RoleName: str = ...,
        IamUserAccessToBilling: str = ...
    ) -> OrganizationsCreateAccountResponse: ...

    def create_gov_cloud_account(self, *,
        Email: str,
        AccountName: str,
        RoleName: str = ...,
        IamUserAccessToBilling: str = ...
    ) -> OrganizationsCreateGovCloudAccountResponse: ...

    def create_organization(self, *,
        FeatureSet: str = ...
    ) -> OrganizationsCreateOrganizationResponse: ...

    def create_organizational_unit(self, *,
        ParentId: str,
        Name: str
    ) -> OrganizationsCreateOrganizationalUnitResponse: ...

    def create_policy(self, *,
        Content: str,
        Description: str,
        Name: str,
        Type: str
    ) -> OrganizationsCreatePolicyResponse: ...

    def decline_handshake(self, *,
        HandshakeId: str
    ) -> OrganizationsDeclineHandshakeResponse: ...

    def delete_organization(self): ...

    def delete_organizational_unit(self, *,
        OrganizationalUnitId: str
    ): ...

    def delete_policy(self, *,
        PolicyId: str
    ): ...

    def describe_account(self, *,
        AccountId: str
    ) -> OrganizationsDescribeAccountResponse: ...

    def describe_create_account_status(self, *,
        CreateAccountRequestId: str
    ) -> OrganizationsDescribeCreateAccountStatusResponse: ...

    def describe_handshake(self, *,
        HandshakeId: str
    ) -> OrganizationsDescribeHandshakeResponse: ...

    def describe_organization(self) -> OrganizationsDescribeOrganizationResponse: ...

    def describe_organizational_unit(self, *,
        OrganizationalUnitId: str
    ) -> OrganizationsDescribeOrganizationalUnitResponse: ...

    def describe_policy(self, *,
        PolicyId: str
    ) -> OrganizationsDescribePolicyResponse: ...

    def detach_policy(self, *,
        PolicyId: str,
        TargetId: str
    ): ...

    def disable_aws_service_access(self, *,
        ServicePrincipal: str
    ): ...

    def disable_policy_type(self, *,
        RootId: str,
        PolicyType: str
    ) -> OrganizationsDisablePolicyTypeResponse: ...

    def enable_aws_service_access(self, *,
        ServicePrincipal: str
    ): ...

    def enable_all_features(self) -> OrganizationsEnableAllFeaturesResponse: ...

    def enable_policy_type(self, *,
        RootId: str,
        PolicyType: str
    ) -> OrganizationsEnablePolicyTypeResponse: ...

    def invite_account_to_organization(self, *,
        Target: OrganizationsHandshakeParty,
        Notes: str = ...
    ) -> OrganizationsInviteAccountToOrganizationResponse: ...

    def leave_organization(self): ...

    def list_aws_service_access_for_organization(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> OrganizationsListAWSServiceAccessForOrganizationResponse: ...

    def list_accounts(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> OrganizationsListAccountsResponse: ...

    def list_accounts_for_parent(self, *,
        ParentId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> OrganizationsListAccountsForParentResponse: ...

    def list_children(self, *,
        ParentId: str,
        ChildType: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> OrganizationsListChildrenResponse: ...

    def list_create_account_status(self, *,
        States: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> OrganizationsListCreateAccountStatusResponse: ...

    def list_handshakes_for_account(self, *,
        Filter: OrganizationsHandshakeFilter = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> OrganizationsListHandshakesForAccountResponse: ...

    def list_handshakes_for_organization(self, *,
        Filter: OrganizationsHandshakeFilter = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> OrganizationsListHandshakesForOrganizationResponse: ...

    def list_organizational_units_for_parent(self, *,
        ParentId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> OrganizationsListOrganizationalUnitsForParentResponse: ...

    def list_parents(self, *,
        ChildId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> OrganizationsListParentsResponse: ...

    def list_policies(self, *,
        Filter: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> OrganizationsListPoliciesResponse: ...

    def list_policies_for_target(self, *,
        TargetId: str,
        Filter: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> OrganizationsListPoliciesForTargetResponse: ...

    def list_roots(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> OrganizationsListRootsResponse: ...

    def list_targets_for_policy(self, *,
        PolicyId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> OrganizationsListTargetsForPolicyResponse: ...

    def move_account(self, *,
        AccountId: str,
        SourceParentId: str,
        DestinationParentId: str
    ): ...

    def remove_account_from_organization(self, *,
        AccountId: str
    ): ...

    def update_organizational_unit(self, *,
        OrganizationalUnitId: str,
        Name: str = ...
    ) -> OrganizationsUpdateOrganizationalUnitResponse: ...

    def update_policy(self, *,
        PolicyId: str,
        Name: str = ...,
        Description: str = ...,
        Content: str = ...
    ) -> OrganizationsUpdatePolicyResponse: ...


class OrganizationsAcceptHandshakeResponse(TypedDict, total=False):
    Handshake: OrganizationsHandshake


class OrganizationsHandshake(TypedDict, total=False):
    Id: str
    Arn: str
    Parties: List[OrganizationsHandshakeParty]
    State: str
    RequestedTimestamp: datetime.datetime
    ExpirationTimestamp: datetime.datetime
    Action: str
    Resources: List[OrganizationsHandshakeResource]


class OrganizationsHandshakeParty(TypedDict):
    Id: str
    Type: str


class OrganizationsHandshakeResource(TypedDict, total=False):
    Value: str
    Type: str
    Resources: List[OrganizationsHandshakeResource]


class OrganizationsCancelHandshakeResponse(TypedDict, total=False):
    Handshake: OrganizationsHandshake


class OrganizationsCreateAccountResponse(TypedDict, total=False):
    CreateAccountStatus: OrganizationsCreateAccountStatus


class OrganizationsCreateAccountStatus(TypedDict, total=False):
    Id: str
    AccountName: str
    State: str
    RequestedTimestamp: datetime.datetime
    CompletedTimestamp: datetime.datetime
    AccountId: str
    GovCloudAccountId: str
    FailureReason: str


class OrganizationsCreateGovCloudAccountResponse(TypedDict, total=False):
    CreateAccountStatus: OrganizationsCreateAccountStatus


class OrganizationsCreateOrganizationResponse(TypedDict, total=False):
    Organization: OrganizationsOrganization


class OrganizationsOrganization(TypedDict, total=False):
    Id: str
    Arn: str
    FeatureSet: str
    MasterAccountArn: str
    MasterAccountId: str
    MasterAccountEmail: str
    AvailablePolicyTypes: List[OrganizationsPolicyTypeSummary]


class OrganizationsPolicyTypeSummary(TypedDict, total=False):
    Type: str
    Status: str


class OrganizationsCreateOrganizationalUnitResponse(TypedDict, total=False):
    OrganizationalUnit: OrganizationsOrganizationalUnit


class OrganizationsOrganizationalUnit(TypedDict, total=False):
    Id: str
    Arn: str
    Name: str


class OrganizationsCreatePolicyResponse(TypedDict, total=False):
    Policy: OrganizationsPolicy


class OrganizationsPolicy(TypedDict, total=False):
    PolicySummary: OrganizationsPolicySummary
    Content: str


class OrganizationsPolicySummary(TypedDict, total=False):
    Id: str
    Arn: str
    Name: str
    Description: str
    Type: str
    AwsManaged: bool


class OrganizationsDeclineHandshakeResponse(TypedDict, total=False):
    Handshake: OrganizationsHandshake


class OrganizationsDescribeAccountResponse(TypedDict, total=False):
    Account: OrganizationsAccount


class OrganizationsAccount(TypedDict, total=False):
    Id: str
    Arn: str
    Email: str
    Name: str
    Status: str
    JoinedMethod: str
    JoinedTimestamp: datetime.datetime


class OrganizationsDescribeCreateAccountStatusResponse(TypedDict, total=False):
    CreateAccountStatus: OrganizationsCreateAccountStatus


class OrganizationsDescribeHandshakeResponse(TypedDict, total=False):
    Handshake: OrganizationsHandshake


class OrganizationsDescribeOrganizationResponse(TypedDict, total=False):
    Organization: OrganizationsOrganization


class OrganizationsDescribeOrganizationalUnitResponse(TypedDict, total=False):
    OrganizationalUnit: OrganizationsOrganizationalUnit


class OrganizationsDescribePolicyResponse(TypedDict, total=False):
    Policy: OrganizationsPolicy


class OrganizationsDisablePolicyTypeResponse(TypedDict, total=False):
    Root: OrganizationsRoot


class OrganizationsRoot(TypedDict, total=False):
    Id: str
    Arn: str
    Name: str
    PolicyTypes: List[OrganizationsPolicyTypeSummary]


class OrganizationsEnableAllFeaturesResponse(TypedDict, total=False):
    Handshake: OrganizationsHandshake


class OrganizationsEnablePolicyTypeResponse(TypedDict, total=False):
    Root: OrganizationsRoot


class OrganizationsInviteAccountToOrganizationResponse(TypedDict, total=False):
    Handshake: OrganizationsHandshake


class OrganizationsListAWSServiceAccessForOrganizationResponse(TypedDict, total=False):
    EnabledServicePrincipals: List[OrganizationsEnabledServicePrincipal]
    NextToken: str


class OrganizationsEnabledServicePrincipal(TypedDict, total=False):
    ServicePrincipal: str
    DateEnabled: datetime.datetime


class OrganizationsListAccountsResponse(TypedDict, total=False):
    Accounts: List[OrganizationsAccount]
    NextToken: str


class OrganizationsListAccountsForParentResponse(TypedDict, total=False):
    Accounts: List[OrganizationsAccount]
    NextToken: str


class OrganizationsListChildrenResponse(TypedDict, total=False):
    Children: List[OrganizationsChild]
    NextToken: str


class OrganizationsChild(TypedDict, total=False):
    Id: str
    Type: str


class OrganizationsListCreateAccountStatusResponse(TypedDict, total=False):
    CreateAccountStatuses: List[OrganizationsCreateAccountStatus]
    NextToken: str


class OrganizationsHandshakeFilter(TypedDict, total=False):
    ActionType: str
    ParentHandshakeId: str


class OrganizationsListHandshakesForAccountResponse(TypedDict, total=False):
    Handshakes: List[OrganizationsHandshake]
    NextToken: str


class OrganizationsListHandshakesForOrganizationResponse(TypedDict, total=False):
    Handshakes: List[OrganizationsHandshake]
    NextToken: str


class OrganizationsListOrganizationalUnitsForParentResponse(TypedDict, total=False):
    OrganizationalUnits: List[OrganizationsOrganizationalUnit]
    NextToken: str


class OrganizationsListParentsResponse(TypedDict, total=False):
    Parents: List[OrganizationsParent]
    NextToken: str


class OrganizationsParent(TypedDict, total=False):
    Id: str
    Type: str


class OrganizationsListPoliciesResponse(TypedDict, total=False):
    Policies: List[OrganizationsPolicySummary]
    NextToken: str


class OrganizationsListPoliciesForTargetResponse(TypedDict, total=False):
    Policies: List[OrganizationsPolicySummary]
    NextToken: str


class OrganizationsListRootsResponse(TypedDict, total=False):
    Roots: List[OrganizationsRoot]
    NextToken: str


class OrganizationsListTargetsForPolicyResponse(TypedDict, total=False):
    Targets: List[OrganizationsPolicyTargetSummary]
    NextToken: str


class OrganizationsPolicyTargetSummary(TypedDict, total=False):
    TargetId: str
    Arn: str
    Name: str
    Type: str


class OrganizationsUpdateOrganizationalUnitResponse(TypedDict, total=False):
    OrganizationalUnit: OrganizationsOrganizationalUnit


class OrganizationsUpdatePolicyResponse(TypedDict, total=False):
    Policy: OrganizationsPolicy


class PI(BaseClient):
    def describe_dimension_keys(self, *,
        ServiceType: str,
        Identifier: str,
        StartTime: datetime.datetime,
        EndTime: datetime.datetime,
        Metric: str,
        GroupBy: PIDimensionGroup,
        PeriodInSeconds: int = ...,
        PartitionBy: PIDimensionGroup = ...,
        Filter: Dict[str, str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> PIDescribeDimensionKeysResponse: ...

    def get_resource_metrics(self, *,
        ServiceType: str,
        Identifier: str,
        MetricQueries: List[PIMetricQuery],
        StartTime: datetime.datetime,
        EndTime: datetime.datetime,
        PeriodInSeconds: int = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> PIGetResourceMetricsResponse: ...


class _PIDimensionGroup(TypedDict):
    Group: str


class PIDimensionGroup(_PIDimensionGroup, total=False):
    Dimensions: List[str]
    Limit: int


class PIDescribeDimensionKeysResponse(TypedDict, total=False):
    AlignedStartTime: datetime.datetime
    AlignedEndTime: datetime.datetime
    PartitionKeys: List[PIResponsePartitionKey]
    Keys: List[PIDimensionKeyDescription]
    NextToken: str


class PIResponsePartitionKey(TypedDict):
    Dimensions: Dict[str, str]


class PIDimensionKeyDescription(TypedDict, total=False):
    Dimensions: Dict[str, str]
    Total: float
    Partitions: List[float]


class _PIMetricQuery(TypedDict):
    Metric: str


class PIMetricQuery(_PIMetricQuery, total=False):
    GroupBy: PIDimensionGroup
    Filter: Dict[str, str]


class PIGetResourceMetricsResponse(TypedDict, total=False):
    AlignedStartTime: datetime.datetime
    AlignedEndTime: datetime.datetime
    Identifier: str
    MetricList: List[PIMetricKeyDataPoints]
    NextToken: str


class PIMetricKeyDataPoints(TypedDict, total=False):
    Key: PIResponseResourceMetricKey
    DataPoints: List[PIDataPoint]


class _PIResponseResourceMetricKey(TypedDict):
    Metric: str


class PIResponseResourceMetricKey(_PIResponseResourceMetricKey, total=False):
    Dimensions: Dict[str, str]


class PIDataPoint(TypedDict):
    Timestamp: datetime.datetime
    Value: float


class Pinpoint(BaseClient):
    def create_app(self, *,
        CreateApplicationRequest: PinpointCreateApplicationRequest
    ) -> PinpointCreateAppResponse: ...

    def create_campaign(self, *,
        ApplicationId: str,
        WriteCampaignRequest: PinpointWriteCampaignRequest
    ) -> PinpointCreateCampaignResponse: ...

    def create_export_job(self, *,
        ApplicationId: str,
        ExportJobRequest: PinpointExportJobRequest
    ) -> PinpointCreateExportJobResponse: ...

    def create_import_job(self, *,
        ApplicationId: str,
        ImportJobRequest: PinpointImportJobRequest
    ) -> PinpointCreateImportJobResponse: ...

    def create_segment(self, *,
        ApplicationId: str,
        WriteSegmentRequest: PinpointWriteSegmentRequest
    ) -> PinpointCreateSegmentResponse: ...

    def delete_adm_channel(self, *,
        ApplicationId: str
    ) -> PinpointDeleteAdmChannelResponse: ...

    def delete_apns_channel(self, *,
        ApplicationId: str
    ) -> PinpointDeleteApnsChannelResponse: ...

    def delete_apns_sandbox_channel(self, *,
        ApplicationId: str
    ) -> PinpointDeleteApnsSandboxChannelResponse: ...

    def delete_apns_voip_channel(self, *,
        ApplicationId: str
    ) -> PinpointDeleteApnsVoipChannelResponse: ...

    def delete_apns_voip_sandbox_channel(self, *,
        ApplicationId: str
    ) -> PinpointDeleteApnsVoipSandboxChannelResponse: ...

    def delete_app(self, *,
        ApplicationId: str
    ) -> PinpointDeleteAppResponse: ...

    def delete_baidu_channel(self, *,
        ApplicationId: str
    ) -> PinpointDeleteBaiduChannelResponse: ...

    def delete_campaign(self, *,
        ApplicationId: str,
        CampaignId: str
    ) -> PinpointDeleteCampaignResponse: ...

    def delete_email_channel(self, *,
        ApplicationId: str
    ) -> PinpointDeleteEmailChannelResponse: ...

    def delete_endpoint(self, *,
        ApplicationId: str,
        EndpointId: str
    ) -> PinpointDeleteEndpointResponse: ...

    def delete_event_stream(self, *,
        ApplicationId: str
    ) -> PinpointDeleteEventStreamResponse: ...

    def delete_gcm_channel(self, *,
        ApplicationId: str
    ) -> PinpointDeleteGcmChannelResponse: ...

    def delete_segment(self, *,
        ApplicationId: str,
        SegmentId: str
    ) -> PinpointDeleteSegmentResponse: ...

    def delete_sms_channel(self, *,
        ApplicationId: str
    ) -> PinpointDeleteSmsChannelResponse: ...

    def delete_user_endpoints(self, *,
        ApplicationId: str,
        UserId: str
    ) -> PinpointDeleteUserEndpointsResponse: ...

    def delete_voice_channel(self, *,
        ApplicationId: str
    ) -> PinpointDeleteVoiceChannelResponse: ...

    def get_adm_channel(self, *,
        ApplicationId: str
    ) -> PinpointGetAdmChannelResponse: ...

    def get_apns_channel(self, *,
        ApplicationId: str
    ) -> PinpointGetApnsChannelResponse: ...

    def get_apns_sandbox_channel(self, *,
        ApplicationId: str
    ) -> PinpointGetApnsSandboxChannelResponse: ...

    def get_apns_voip_channel(self, *,
        ApplicationId: str
    ) -> PinpointGetApnsVoipChannelResponse: ...

    def get_apns_voip_sandbox_channel(self, *,
        ApplicationId: str
    ) -> PinpointGetApnsVoipSandboxChannelResponse: ...

    def get_app(self, *,
        ApplicationId: str
    ) -> PinpointGetAppResponse: ...

    def get_application_settings(self, *,
        ApplicationId: str
    ) -> PinpointGetApplicationSettingsResponse: ...

    def get_apps(self, *,
        PageSize: str = ...,
        Token: str = ...
    ) -> PinpointGetAppsResponse: ...

    def get_baidu_channel(self, *,
        ApplicationId: str
    ) -> PinpointGetBaiduChannelResponse: ...

    def get_campaign(self, *,
        ApplicationId: str,
        CampaignId: str
    ) -> PinpointGetCampaignResponse: ...

    def get_campaign_activities(self, *,
        ApplicationId: str,
        CampaignId: str,
        PageSize: str = ...,
        Token: str = ...
    ) -> PinpointGetCampaignActivitiesResponse: ...

    def get_campaign_version(self, *,
        ApplicationId: str,
        CampaignId: str,
        Version: str
    ) -> PinpointGetCampaignVersionResponse: ...

    def get_campaign_versions(self, *,
        ApplicationId: str,
        CampaignId: str,
        PageSize: str = ...,
        Token: str = ...
    ) -> PinpointGetCampaignVersionsResponse: ...

    def get_campaigns(self, *,
        ApplicationId: str,
        PageSize: str = ...,
        Token: str = ...
    ) -> PinpointGetCampaignsResponse: ...

    def get_channels(self, *,
        ApplicationId: str
    ) -> PinpointGetChannelsResponse: ...

    def get_email_channel(self, *,
        ApplicationId: str
    ) -> PinpointGetEmailChannelResponse: ...

    def get_endpoint(self, *,
        ApplicationId: str,
        EndpointId: str
    ) -> PinpointGetEndpointResponse: ...

    def get_event_stream(self, *,
        ApplicationId: str
    ) -> PinpointGetEventStreamResponse: ...

    def get_export_job(self, *,
        ApplicationId: str,
        JobId: str
    ) -> PinpointGetExportJobResponse: ...

    def get_export_jobs(self, *,
        ApplicationId: str,
        PageSize: str = ...,
        Token: str = ...
    ) -> PinpointGetExportJobsResponse: ...

    def get_gcm_channel(self, *,
        ApplicationId: str
    ) -> PinpointGetGcmChannelResponse: ...

    def get_import_job(self, *,
        ApplicationId: str,
        JobId: str
    ) -> PinpointGetImportJobResponse: ...

    def get_import_jobs(self, *,
        ApplicationId: str,
        PageSize: str = ...,
        Token: str = ...
    ) -> PinpointGetImportJobsResponse: ...

    def get_segment(self, *,
        ApplicationId: str,
        SegmentId: str
    ) -> PinpointGetSegmentResponse: ...

    def get_segment_export_jobs(self, *,
        ApplicationId: str,
        SegmentId: str,
        PageSize: str = ...,
        Token: str = ...
    ) -> PinpointGetSegmentExportJobsResponse: ...

    def get_segment_import_jobs(self, *,
        ApplicationId: str,
        SegmentId: str,
        PageSize: str = ...,
        Token: str = ...
    ) -> PinpointGetSegmentImportJobsResponse: ...

    def get_segment_version(self, *,
        ApplicationId: str,
        SegmentId: str,
        Version: str
    ) -> PinpointGetSegmentVersionResponse: ...

    def get_segment_versions(self, *,
        ApplicationId: str,
        SegmentId: str,
        PageSize: str = ...,
        Token: str = ...
    ) -> PinpointGetSegmentVersionsResponse: ...

    def get_segments(self, *,
        ApplicationId: str,
        PageSize: str = ...,
        Token: str = ...
    ) -> PinpointGetSegmentsResponse: ...

    def get_sms_channel(self, *,
        ApplicationId: str
    ) -> PinpointGetSmsChannelResponse: ...

    def get_user_endpoints(self, *,
        ApplicationId: str,
        UserId: str
    ) -> PinpointGetUserEndpointsResponse: ...

    def get_voice_channel(self, *,
        ApplicationId: str
    ) -> PinpointGetVoiceChannelResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> PinpointListTagsForResourceResponse: ...

    def phone_number_validate(self, *,
        NumberValidateRequest: PinpointNumberValidateRequest
    ) -> PinpointPhoneNumberValidateResponse: ...

    def put_event_stream(self, *,
        ApplicationId: str,
        WriteEventStream: PinpointWriteEventStream
    ) -> PinpointPutEventStreamResponse: ...

    def put_events(self, *,
        ApplicationId: str,
        EventsRequest: PinpointEventsRequest
    ) -> PinpointPutEventsResponse: ...

    def remove_attributes(self, *,
        ApplicationId: str,
        AttributeType: str,
        UpdateAttributesRequest: PinpointUpdateAttributesRequest
    ) -> PinpointRemoveAttributesResponse: ...

    def send_messages(self, *,
        ApplicationId: str,
        MessageRequest: PinpointMessageRequest
    ) -> PinpointSendMessagesResponse: ...

    def send_users_messages(self, *,
        ApplicationId: str,
        SendUsersMessageRequest: PinpointSendUsersMessageRequest
    ) -> PinpointSendUsersMessagesResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        TagsModel: PinpointTagsModel
    ): ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ): ...

    def update_adm_channel(self, *,
        ADMChannelRequest: PinpointADMChannelRequest,
        ApplicationId: str
    ) -> PinpointUpdateAdmChannelResponse: ...

    def update_apns_channel(self, *,
        APNSChannelRequest: PinpointAPNSChannelRequest,
        ApplicationId: str
    ) -> PinpointUpdateApnsChannelResponse: ...

    def update_apns_sandbox_channel(self, *,
        APNSSandboxChannelRequest: PinpointAPNSSandboxChannelRequest,
        ApplicationId: str
    ) -> PinpointUpdateApnsSandboxChannelResponse: ...

    def update_apns_voip_channel(self, *,
        APNSVoipChannelRequest: PinpointAPNSVoipChannelRequest,
        ApplicationId: str
    ) -> PinpointUpdateApnsVoipChannelResponse: ...

    def update_apns_voip_sandbox_channel(self, *,
        APNSVoipSandboxChannelRequest: PinpointAPNSVoipSandboxChannelRequest,
        ApplicationId: str
    ) -> PinpointUpdateApnsVoipSandboxChannelResponse: ...

    def update_application_settings(self, *,
        ApplicationId: str,
        WriteApplicationSettingsRequest: PinpointWriteApplicationSettingsRequest
    ) -> PinpointUpdateApplicationSettingsResponse: ...

    def update_baidu_channel(self, *,
        ApplicationId: str,
        BaiduChannelRequest: PinpointBaiduChannelRequest
    ) -> PinpointUpdateBaiduChannelResponse: ...

    def update_campaign(self, *,
        ApplicationId: str,
        CampaignId: str,
        WriteCampaignRequest: PinpointWriteCampaignRequest
    ) -> PinpointUpdateCampaignResponse: ...

    def update_email_channel(self, *,
        ApplicationId: str,
        EmailChannelRequest: PinpointEmailChannelRequest
    ) -> PinpointUpdateEmailChannelResponse: ...

    def update_endpoint(self, *,
        ApplicationId: str,
        EndpointId: str,
        EndpointRequest: PinpointEndpointRequest
    ) -> PinpointUpdateEndpointResponse: ...

    def update_endpoints_batch(self, *,
        ApplicationId: str,
        EndpointBatchRequest: PinpointEndpointBatchRequest
    ) -> PinpointUpdateEndpointsBatchResponse: ...

    def update_gcm_channel(self, *,
        ApplicationId: str,
        GCMChannelRequest: PinpointGCMChannelRequest
    ) -> PinpointUpdateGcmChannelResponse: ...

    def update_segment(self, *,
        ApplicationId: str,
        SegmentId: str,
        WriteSegmentRequest: PinpointWriteSegmentRequest
    ) -> PinpointUpdateSegmentResponse: ...

    def update_sms_channel(self, *,
        ApplicationId: str,
        SMSChannelRequest: PinpointSMSChannelRequest
    ) -> PinpointUpdateSmsChannelResponse: ...

    def update_voice_channel(self, *,
        ApplicationId: str,
        VoiceChannelRequest: PinpointVoiceChannelRequest
    ) -> PinpointUpdateVoiceChannelResponse: ...


class PinpointCreateApplicationRequest(TypedDict, total=False):
    Name: str
    tags: Dict[str, str]


class PinpointCreateAppResponse(TypedDict):
    ApplicationResponse: PinpointApplicationResponse


class PinpointApplicationResponse(TypedDict, total=False):
    Arn: str
    Id: str
    Name: str
    tags: Dict[str, str]


class PinpointWriteCampaignRequest(TypedDict, total=False):
    AdditionalTreatments: List[PinpointWriteTreatmentResource]
    Description: str
    HoldoutPercent: int
    Hook: PinpointCampaignHook
    IsPaused: bool
    Limits: PinpointCampaignLimits
    MessageConfiguration: PinpointMessageConfiguration
    Name: str
    Schedule: PinpointSchedule
    SegmentId: str
    SegmentVersion: int
    tags: Dict[str, str]
    TreatmentDescription: str
    TreatmentName: str


class PinpointWriteTreatmentResource(TypedDict, total=False):
    MessageConfiguration: PinpointMessageConfiguration
    Schedule: PinpointSchedule
    SizePercent: int
    TreatmentDescription: str
    TreatmentName: str


class PinpointMessageConfiguration(TypedDict, total=False):
    ADMMessage: PinpointMessage
    APNSMessage: PinpointMessage
    BaiduMessage: PinpointMessage
    DefaultMessage: PinpointMessage
    EmailMessage: PinpointCampaignEmailMessage
    GCMMessage: PinpointMessage
    SMSMessage: PinpointCampaignSmsMessage


class PinpointMessage(TypedDict, total=False):
    Action: str
    Body: str
    ImageIconUrl: str
    ImageSmallIconUrl: str
    ImageUrl: str
    JsonBody: str
    MediaUrl: str
    RawContent: str
    SilentPush: bool
    TimeToLive: int
    Title: str
    Url: str


class PinpointCampaignEmailMessage(TypedDict, total=False):
    Body: str
    FromAddress: str
    HtmlBody: str
    Title: str


class PinpointCampaignSmsMessage(TypedDict, total=False):
    Body: str
    MessageType: str
    SenderId: str


class PinpointSchedule(TypedDict, total=False):
    EndTime: str
    EventFilter: PinpointCampaignEventFilter
    Frequency: str
    IsLocalTime: bool
    QuietTime: PinpointQuietTime
    StartTime: str
    Timezone: str


class PinpointCampaignEventFilter(TypedDict, total=False):
    Dimensions: PinpointEventDimensions
    FilterType: str


class PinpointEventDimensions(TypedDict, total=False):
    Attributes: Dict[str, PinpointAttributeDimension]
    EventType: PinpointSetDimension
    Metrics: Dict[str, PinpointMetricDimension]


class PinpointAttributeDimension(TypedDict, total=False):
    AttributeType: str
    Values: List[str]


class PinpointSetDimension(TypedDict, total=False):
    DimensionType: str
    Values: List[str]


class PinpointMetricDimension(TypedDict, total=False):
    ComparisonOperator: str
    Value: float


class PinpointQuietTime(TypedDict, total=False):
    End: str
    Start: str


class PinpointCampaignHook(TypedDict, total=False):
    LambdaFunctionName: str
    Mode: str
    WebUrl: str


class PinpointCampaignLimits(TypedDict, total=False):
    Daily: int
    MaximumDuration: int
    MessagesPerSecond: int
    Total: int


class PinpointCreateCampaignResponse(TypedDict):
    CampaignResponse: PinpointCampaignResponse


class PinpointCampaignResponse(TypedDict, total=False):
    AdditionalTreatments: List[PinpointTreatmentResource]
    ApplicationId: str
    Arn: str
    CreationDate: str
    DefaultState: PinpointCampaignState
    Description: str
    HoldoutPercent: int
    Hook: PinpointCampaignHook
    Id: str
    IsPaused: bool
    LastModifiedDate: str
    Limits: PinpointCampaignLimits
    MessageConfiguration: PinpointMessageConfiguration
    Name: str
    Schedule: PinpointSchedule
    SegmentId: str
    SegmentVersion: int
    State: PinpointCampaignState
    tags: Dict[str, str]
    TreatmentDescription: str
    TreatmentName: str
    Version: int


class PinpointTreatmentResource(TypedDict, total=False):
    Id: str
    MessageConfiguration: PinpointMessageConfiguration
    Schedule: PinpointSchedule
    SizePercent: int
    State: PinpointCampaignState
    TreatmentDescription: str
    TreatmentName: str


class PinpointCampaignState(TypedDict, total=False):
    CampaignStatus: str


class PinpointExportJobRequest(TypedDict, total=False):
    RoleArn: str
    S3UrlPrefix: str
    SegmentId: str
    SegmentVersion: int


class PinpointCreateExportJobResponse(TypedDict):
    ExportJobResponse: PinpointExportJobResponse


class PinpointExportJobResponse(TypedDict, total=False):
    ApplicationId: str
    CompletedPieces: int
    CompletionDate: str
    CreationDate: str
    Definition: PinpointExportJobResource
    FailedPieces: int
    Failures: List[str]
    Id: str
    JobStatus: str
    TotalFailures: int
    TotalPieces: int
    TotalProcessed: int
    Type: str


class PinpointExportJobResource(TypedDict, total=False):
    RoleArn: str
    S3UrlPrefix: str
    SegmentId: str
    SegmentVersion: int


class PinpointImportJobRequest(TypedDict, total=False):
    DefineSegment: bool
    ExternalId: str
    Format: str
    RegisterEndpoints: bool
    RoleArn: str
    S3Url: str
    SegmentId: str
    SegmentName: str


class PinpointCreateImportJobResponse(TypedDict):
    ImportJobResponse: PinpointImportJobResponse


class PinpointImportJobResponse(TypedDict, total=False):
    ApplicationId: str
    CompletedPieces: int
    CompletionDate: str
    CreationDate: str
    Definition: PinpointImportJobResource
    FailedPieces: int
    Failures: List[str]
    Id: str
    JobStatus: str
    TotalFailures: int
    TotalPieces: int
    TotalProcessed: int
    Type: str


class PinpointImportJobResource(TypedDict, total=False):
    DefineSegment: bool
    ExternalId: str
    Format: str
    RegisterEndpoints: bool
    RoleArn: str
    S3Url: str
    SegmentId: str
    SegmentName: str


class PinpointWriteSegmentRequest(TypedDict, total=False):
    Dimensions: PinpointSegmentDimensions
    Name: str
    SegmentGroups: PinpointSegmentGroupList
    tags: Dict[str, str]


class PinpointSegmentDimensions(TypedDict, total=False):
    Attributes: Dict[str, PinpointAttributeDimension]
    Behavior: PinpointSegmentBehaviors
    Demographic: PinpointSegmentDemographics
    Location: PinpointSegmentLocation
    Metrics: Dict[str, PinpointMetricDimension]
    UserAttributes: Dict[str, PinpointAttributeDimension]


class PinpointSegmentBehaviors(TypedDict, total=False):
    Recency: PinpointRecencyDimension


class PinpointRecencyDimension(TypedDict, total=False):
    Duration: str
    RecencyType: str


class PinpointSegmentDemographics(TypedDict, total=False):
    AppVersion: PinpointSetDimension
    Channel: PinpointSetDimension
    DeviceType: PinpointSetDimension
    Make: PinpointSetDimension
    Model: PinpointSetDimension
    Platform: PinpointSetDimension


class PinpointSegmentLocation(TypedDict, total=False):
    Country: PinpointSetDimension
    GPSPoint: PinpointGPSPointDimension


class PinpointGPSPointDimension(TypedDict, total=False):
    Coordinates: PinpointGPSCoordinates
    RangeInKilometers: float


class PinpointGPSCoordinates(TypedDict, total=False):
    Latitude: float
    Longitude: float


class PinpointSegmentGroupList(TypedDict, total=False):
    Groups: List[PinpointSegmentGroup]
    Include: str


class PinpointSegmentGroup(TypedDict, total=False):
    Dimensions: List[PinpointSegmentDimensions]
    SourceSegments: List[PinpointSegmentReference]
    SourceType: str
    Type: str


class PinpointSegmentReference(TypedDict, total=False):
    Id: str
    Version: int


class PinpointCreateSegmentResponse(TypedDict):
    SegmentResponse: PinpointSegmentResponse


class PinpointSegmentResponse(TypedDict, total=False):
    ApplicationId: str
    Arn: str
    CreationDate: str
    Dimensions: PinpointSegmentDimensions
    Id: str
    ImportDefinition: PinpointSegmentImportResource
    LastModifiedDate: str
    Name: str
    SegmentGroups: PinpointSegmentGroupList
    SegmentType: str
    tags: Dict[str, str]
    Version: int


class PinpointSegmentImportResource(TypedDict, total=False):
    ChannelCounts: Dict[str, int]
    ExternalId: str
    Format: str
    RoleArn: str
    S3Url: str
    Size: int


class PinpointDeleteAdmChannelResponse(TypedDict):
    ADMChannelResponse: PinpointADMChannelResponse


class PinpointADMChannelResponse(TypedDict, total=False):
    ApplicationId: str
    CreationDate: str
    Enabled: bool
    HasCredential: bool
    Id: str
    IsArchived: bool
    LastModifiedBy: str
    LastModifiedDate: str
    Platform: str
    Version: int


class PinpointDeleteApnsChannelResponse(TypedDict):
    APNSChannelResponse: PinpointAPNSChannelResponse


class PinpointAPNSChannelResponse(TypedDict, total=False):
    ApplicationId: str
    CreationDate: str
    DefaultAuthenticationMethod: str
    Enabled: bool
    HasCredential: bool
    HasTokenKey: bool
    Id: str
    IsArchived: bool
    LastModifiedBy: str
    LastModifiedDate: str
    Platform: str
    Version: int


class PinpointDeleteApnsSandboxChannelResponse(TypedDict):
    APNSSandboxChannelResponse: PinpointAPNSSandboxChannelResponse


class PinpointAPNSSandboxChannelResponse(TypedDict, total=False):
    ApplicationId: str
    CreationDate: str
    DefaultAuthenticationMethod: str
    Enabled: bool
    HasCredential: bool
    HasTokenKey: bool
    Id: str
    IsArchived: bool
    LastModifiedBy: str
    LastModifiedDate: str
    Platform: str
    Version: int


class PinpointDeleteApnsVoipChannelResponse(TypedDict):
    APNSVoipChannelResponse: PinpointAPNSVoipChannelResponse


class PinpointAPNSVoipChannelResponse(TypedDict, total=False):
    ApplicationId: str
    CreationDate: str
    DefaultAuthenticationMethod: str
    Enabled: bool
    HasCredential: bool
    HasTokenKey: bool
    Id: str
    IsArchived: bool
    LastModifiedBy: str
    LastModifiedDate: str
    Platform: str
    Version: int


class PinpointDeleteApnsVoipSandboxChannelResponse(TypedDict):
    APNSVoipSandboxChannelResponse: PinpointAPNSVoipSandboxChannelResponse


class PinpointAPNSVoipSandboxChannelResponse(TypedDict, total=False):
    ApplicationId: str
    CreationDate: str
    DefaultAuthenticationMethod: str
    Enabled: bool
    HasCredential: bool
    HasTokenKey: bool
    Id: str
    IsArchived: bool
    LastModifiedBy: str
    LastModifiedDate: str
    Platform: str
    Version: int


class PinpointDeleteAppResponse(TypedDict):
    ApplicationResponse: PinpointApplicationResponse


class PinpointDeleteBaiduChannelResponse(TypedDict):
    BaiduChannelResponse: PinpointBaiduChannelResponse


class PinpointBaiduChannelResponse(TypedDict, total=False):
    ApplicationId: str
    CreationDate: str
    Credential: str
    Enabled: bool
    HasCredential: bool
    Id: str
    IsArchived: bool
    LastModifiedBy: str
    LastModifiedDate: str
    Platform: str
    Version: int


class PinpointDeleteCampaignResponse(TypedDict):
    CampaignResponse: PinpointCampaignResponse


class PinpointDeleteEmailChannelResponse(TypedDict):
    EmailChannelResponse: PinpointEmailChannelResponse


class PinpointEmailChannelResponse(TypedDict, total=False):
    ApplicationId: str
    ConfigurationSet: str
    CreationDate: str
    Enabled: bool
    FromAddress: str
    HasCredential: bool
    Id: str
    Identity: str
    IsArchived: bool
    LastModifiedBy: str
    LastModifiedDate: str
    MessagesPerSecond: int
    Platform: str
    RoleArn: str
    Version: int


class PinpointDeleteEndpointResponse(TypedDict):
    EndpointResponse: PinpointEndpointResponse


class PinpointEndpointResponse(TypedDict, total=False):
    Address: str
    ApplicationId: str
    Attributes: Dict[str, List[str]]
    ChannelType: str
    CohortId: str
    CreationDate: str
    Demographic: PinpointEndpointDemographic
    EffectiveDate: str
    EndpointStatus: str
    Id: str
    Location: PinpointEndpointLocation
    Metrics: Dict[str, float]
    OptOut: str
    RequestId: str
    User: PinpointEndpointUser


class PinpointEndpointDemographic(TypedDict, total=False):
    AppVersion: str
    Locale: str
    Make: str
    Model: str
    ModelVersion: str
    Platform: str
    PlatformVersion: str
    Timezone: str


class PinpointEndpointLocation(TypedDict, total=False):
    City: str
    Country: str
    Latitude: float
    Longitude: float
    PostalCode: str
    Region: str


class PinpointEndpointUser(TypedDict, total=False):
    UserAttributes: Dict[str, List[str]]
    UserId: str


class PinpointDeleteEventStreamResponse(TypedDict):
    EventStream: PinpointEventStream


class PinpointEventStream(TypedDict, total=False):
    ApplicationId: str
    DestinationStreamArn: str
    ExternalId: str
    LastModifiedDate: str
    LastUpdatedBy: str
    RoleArn: str


class PinpointDeleteGcmChannelResponse(TypedDict):
    GCMChannelResponse: PinpointGCMChannelResponse


class PinpointGCMChannelResponse(TypedDict, total=False):
    ApplicationId: str
    CreationDate: str
    Credential: str
    Enabled: bool
    HasCredential: bool
    Id: str
    IsArchived: bool
    LastModifiedBy: str
    LastModifiedDate: str
    Platform: str
    Version: int


class PinpointDeleteSegmentResponse(TypedDict):
    SegmentResponse: PinpointSegmentResponse


class PinpointDeleteSmsChannelResponse(TypedDict):
    SMSChannelResponse: PinpointSMSChannelResponse


class PinpointSMSChannelResponse(TypedDict, total=False):
    ApplicationId: str
    CreationDate: str
    Enabled: bool
    HasCredential: bool
    Id: str
    IsArchived: bool
    LastModifiedBy: str
    LastModifiedDate: str
    Platform: str
    PromotionalMessagesPerSecond: int
    SenderId: str
    ShortCode: str
    TransactionalMessagesPerSecond: int
    Version: int


class PinpointDeleteUserEndpointsResponse(TypedDict):
    EndpointsResponse: PinpointEndpointsResponse


class PinpointEndpointsResponse(TypedDict, total=False):
    Item: List[PinpointEndpointResponse]


class PinpointDeleteVoiceChannelResponse(TypedDict):
    VoiceChannelResponse: PinpointVoiceChannelResponse


class PinpointVoiceChannelResponse(TypedDict, total=False):
    ApplicationId: str
    CreationDate: str
    Enabled: bool
    HasCredential: bool
    Id: str
    IsArchived: bool
    LastModifiedBy: str
    LastModifiedDate: str
    Platform: str
    Version: int


class PinpointGetAdmChannelResponse(TypedDict):
    ADMChannelResponse: PinpointADMChannelResponse


class PinpointGetApnsChannelResponse(TypedDict):
    APNSChannelResponse: PinpointAPNSChannelResponse


class PinpointGetApnsSandboxChannelResponse(TypedDict):
    APNSSandboxChannelResponse: PinpointAPNSSandboxChannelResponse


class PinpointGetApnsVoipChannelResponse(TypedDict):
    APNSVoipChannelResponse: PinpointAPNSVoipChannelResponse


class PinpointGetApnsVoipSandboxChannelResponse(TypedDict):
    APNSVoipSandboxChannelResponse: PinpointAPNSVoipSandboxChannelResponse


class PinpointGetAppResponse(TypedDict):
    ApplicationResponse: PinpointApplicationResponse


class PinpointGetApplicationSettingsResponse(TypedDict):
    ApplicationSettingsResource: PinpointApplicationSettingsResource


class PinpointApplicationSettingsResource(TypedDict, total=False):
    ApplicationId: str
    CampaignHook: PinpointCampaignHook
    LastModifiedDate: str
    Limits: PinpointCampaignLimits
    QuietTime: PinpointQuietTime


class PinpointGetAppsResponse(TypedDict):
    ApplicationsResponse: PinpointApplicationsResponse


class PinpointApplicationsResponse(TypedDict, total=False):
    Item: List[PinpointApplicationResponse]
    NextToken: str


class PinpointGetBaiduChannelResponse(TypedDict):
    BaiduChannelResponse: PinpointBaiduChannelResponse


class PinpointGetCampaignResponse(TypedDict):
    CampaignResponse: PinpointCampaignResponse


class PinpointGetCampaignActivitiesResponse(TypedDict):
    ActivitiesResponse: PinpointActivitiesResponse


class PinpointActivitiesResponse(TypedDict, total=False):
    Item: List[PinpointActivityResponse]
    NextToken: str


class PinpointActivityResponse(TypedDict, total=False):
    ApplicationId: str
    CampaignId: str
    End: str
    Id: str
    Result: str
    ScheduledStart: str
    Start: str
    State: str
    SuccessfulEndpointCount: int
    TimezonesCompletedCount: int
    TimezonesTotalCount: int
    TotalEndpointCount: int
    TreatmentId: str


class PinpointGetCampaignVersionResponse(TypedDict):
    CampaignResponse: PinpointCampaignResponse


class PinpointGetCampaignVersionsResponse(TypedDict):
    CampaignsResponse: PinpointCampaignsResponse


class PinpointCampaignsResponse(TypedDict, total=False):
    Item: List[PinpointCampaignResponse]
    NextToken: str


class PinpointGetCampaignsResponse(TypedDict):
    CampaignsResponse: PinpointCampaignsResponse


class PinpointGetChannelsResponse(TypedDict):
    ChannelsResponse: PinpointChannelsResponse


class PinpointChannelsResponse(TypedDict, total=False):
    Channels: Dict[str, PinpointChannelResponse]


class PinpointChannelResponse(TypedDict, total=False):
    ApplicationId: str
    CreationDate: str
    Enabled: bool
    HasCredential: bool
    Id: str
    IsArchived: bool
    LastModifiedBy: str
    LastModifiedDate: str
    Version: int


class PinpointGetEmailChannelResponse(TypedDict):
    EmailChannelResponse: PinpointEmailChannelResponse


class PinpointGetEndpointResponse(TypedDict):
    EndpointResponse: PinpointEndpointResponse


class PinpointGetEventStreamResponse(TypedDict):
    EventStream: PinpointEventStream


class PinpointGetExportJobResponse(TypedDict):
    ExportJobResponse: PinpointExportJobResponse


class PinpointGetExportJobsResponse(TypedDict):
    ExportJobsResponse: PinpointExportJobsResponse


class PinpointExportJobsResponse(TypedDict, total=False):
    Item: List[PinpointExportJobResponse]
    NextToken: str


class PinpointGetGcmChannelResponse(TypedDict):
    GCMChannelResponse: PinpointGCMChannelResponse


class PinpointGetImportJobResponse(TypedDict):
    ImportJobResponse: PinpointImportJobResponse


class PinpointGetImportJobsResponse(TypedDict):
    ImportJobsResponse: PinpointImportJobsResponse


class PinpointImportJobsResponse(TypedDict, total=False):
    Item: List[PinpointImportJobResponse]
    NextToken: str


class PinpointGetSegmentResponse(TypedDict):
    SegmentResponse: PinpointSegmentResponse


class PinpointGetSegmentExportJobsResponse(TypedDict):
    ExportJobsResponse: PinpointExportJobsResponse


class PinpointGetSegmentImportJobsResponse(TypedDict):
    ImportJobsResponse: PinpointImportJobsResponse


class PinpointGetSegmentVersionResponse(TypedDict):
    SegmentResponse: PinpointSegmentResponse


class PinpointGetSegmentVersionsResponse(TypedDict):
    SegmentsResponse: PinpointSegmentsResponse


class PinpointSegmentsResponse(TypedDict, total=False):
    Item: List[PinpointSegmentResponse]
    NextToken: str


class PinpointGetSegmentsResponse(TypedDict):
    SegmentsResponse: PinpointSegmentsResponse


class PinpointGetSmsChannelResponse(TypedDict):
    SMSChannelResponse: PinpointSMSChannelResponse


class PinpointGetUserEndpointsResponse(TypedDict):
    EndpointsResponse: PinpointEndpointsResponse


class PinpointGetVoiceChannelResponse(TypedDict):
    VoiceChannelResponse: PinpointVoiceChannelResponse


class PinpointListTagsForResourceResponse(TypedDict):
    TagsModel: PinpointTagsModel


class PinpointTagsModel(TypedDict):
    tags: Dict[str, str]


class PinpointNumberValidateRequest(TypedDict, total=False):
    IsoCountryCode: str
    PhoneNumber: str


class PinpointPhoneNumberValidateResponse(TypedDict):
    NumberValidateResponse: PinpointNumberValidateResponse


class PinpointNumberValidateResponse(TypedDict, total=False):
    Carrier: str
    City: str
    CleansedPhoneNumberE164: str
    CleansedPhoneNumberNational: str
    Country: str
    CountryCodeIso2: str
    CountryCodeNumeric: str
    County: str
    OriginalCountryCodeIso2: str
    OriginalPhoneNumber: str
    PhoneType: str
    PhoneTypeCode: int
    Timezone: str
    ZipCode: str


class PinpointWriteEventStream(TypedDict, total=False):
    DestinationStreamArn: str
    RoleArn: str


class PinpointPutEventStreamResponse(TypedDict):
    EventStream: PinpointEventStream


class PinpointEventsRequest(TypedDict, total=False):
    BatchItem: Dict[str, PinpointEventsBatch]


class PinpointEventsBatch(TypedDict, total=False):
    Endpoint: PinpointPublicEndpoint
    Events: Dict[str, PinpointEvent]


class PinpointPublicEndpoint(TypedDict, total=False):
    Address: str
    Attributes: Dict[str, List[str]]
    ChannelType: str
    Demographic: PinpointEndpointDemographic
    EffectiveDate: str
    EndpointStatus: str
    Location: PinpointEndpointLocation
    Metrics: Dict[str, float]
    OptOut: str
    RequestId: str
    User: PinpointEndpointUser


class PinpointEvent(TypedDict, total=False):
    AppPackageName: str
    AppTitle: str
    AppVersionCode: str
    Attributes: Dict[str, str]
    ClientSdkVersion: str
    EventType: str
    Metrics: Dict[str, float]
    SdkName: str
    Session: PinpointSession
    Timestamp: str


class PinpointSession(TypedDict, total=False):
    Duration: int
    Id: str
    StartTimestamp: str
    StopTimestamp: str


class PinpointPutEventsResponse(TypedDict):
    EventsResponse: PinpointEventsResponse


class PinpointEventsResponse(TypedDict, total=False):
    Results: Dict[str, PinpointItemResponse]


class PinpointItemResponse(TypedDict, total=False):
    EndpointItemResponse: PinpointEndpointItemResponse
    EventsItemResponse: Dict[str, PinpointEventItemResponse]


class PinpointEndpointItemResponse(TypedDict, total=False):
    Message: str
    StatusCode: int


class PinpointEventItemResponse(TypedDict, total=False):
    Message: str
    StatusCode: int


class PinpointUpdateAttributesRequest(TypedDict, total=False):
    Blacklist: List[str]


class PinpointRemoveAttributesResponse(TypedDict):
    AttributesResource: PinpointAttributesResource


class PinpointAttributesResource(TypedDict, total=False):
    ApplicationId: str
    AttributeType: str
    Attributes: List[str]


class PinpointMessageRequest(TypedDict, total=False):
    Addresses: Dict[str, PinpointAddressConfiguration]
    Context: Dict[str, str]
    Endpoints: Dict[str, PinpointEndpointSendConfiguration]
    MessageConfiguration: PinpointDirectMessageConfiguration
    TraceId: str


class PinpointAddressConfiguration(TypedDict, total=False):
    BodyOverride: str
    ChannelType: str
    Context: Dict[str, str]
    RawContent: str
    Substitutions: Dict[str, List[str]]
    TitleOverride: str


class PinpointEndpointSendConfiguration(TypedDict, total=False):
    BodyOverride: str
    Context: Dict[str, str]
    RawContent: str
    Substitutions: Dict[str, List[str]]
    TitleOverride: str


class PinpointDirectMessageConfiguration(TypedDict, total=False):
    ADMMessage: PinpointADMMessage
    APNSMessage: PinpointAPNSMessage
    BaiduMessage: PinpointBaiduMessage
    DefaultMessage: PinpointDefaultMessage
    DefaultPushNotificationMessage: PinpointDefaultPushNotificationMessage
    EmailMessage: PinpointEmailMessage
    GCMMessage: PinpointGCMMessage
    SMSMessage: PinpointSMSMessage
    VoiceMessage: PinpointVoiceMessage


class PinpointADMMessage(TypedDict, total=False):
    Action: str
    Body: str
    ConsolidationKey: str
    Data: Dict[str, str]
    ExpiresAfter: str
    IconReference: str
    ImageIconUrl: str
    ImageUrl: str
    MD5: str
    RawContent: str
    SilentPush: bool
    SmallImageIconUrl: str
    Sound: str
    Substitutions: Dict[str, List[str]]
    Title: str
    Url: str


class PinpointAPNSMessage(TypedDict, total=False):
    Action: str
    Badge: int
    Body: str
    Category: str
    CollapseId: str
    Data: Dict[str, str]
    MediaUrl: str
    PreferredAuthenticationMethod: str
    Priority: str
    RawContent: str
    SilentPush: bool
    Sound: str
    Substitutions: Dict[str, List[str]]
    ThreadId: str
    TimeToLive: int
    Title: str
    Url: str


class PinpointBaiduMessage(TypedDict, total=False):
    Action: str
    Body: str
    Data: Dict[str, str]
    IconReference: str
    ImageIconUrl: str
    ImageUrl: str
    RawContent: str
    SilentPush: bool
    SmallImageIconUrl: str
    Sound: str
    Substitutions: Dict[str, List[str]]
    TimeToLive: int
    Title: str
    Url: str


class PinpointDefaultMessage(TypedDict, total=False):
    Body: str
    Substitutions: Dict[str, List[str]]


class PinpointDefaultPushNotificationMessage(TypedDict, total=False):
    Action: str
    Body: str
    Data: Dict[str, str]
    SilentPush: bool
    Substitutions: Dict[str, List[str]]
    Title: str
    Url: str


class PinpointEmailMessage(TypedDict, total=False):
    Body: str
    FeedbackForwardingAddress: str
    FromAddress: str
    RawEmail: PinpointRawEmail
    ReplyToAddresses: List[str]
    SimpleEmail: PinpointSimpleEmail
    Substitutions: Dict[str, List[str]]


class PinpointRawEmail(TypedDict, total=False):
    Data: bytes


class PinpointSimpleEmail(TypedDict, total=False):
    HtmlPart: PinpointSimpleEmailPart
    Subject: PinpointSimpleEmailPart
    TextPart: PinpointSimpleEmailPart


class PinpointSimpleEmailPart(TypedDict, total=False):
    Charset: str
    Data: str


class PinpointGCMMessage(TypedDict, total=False):
    Action: str
    Body: str
    CollapseKey: str
    Data: Dict[str, str]
    IconReference: str
    ImageIconUrl: str
    ImageUrl: str
    Priority: str
    RawContent: str
    RestrictedPackageName: str
    SilentPush: bool
    SmallImageIconUrl: str
    Sound: str
    Substitutions: Dict[str, List[str]]
    TimeToLive: int
    Title: str
    Url: str


class PinpointSMSMessage(TypedDict, total=False):
    Body: str
    Keyword: str
    MessageType: str
    OriginationNumber: str
    SenderId: str
    Substitutions: Dict[str, List[str]]


class PinpointVoiceMessage(TypedDict, total=False):
    Body: str
    LanguageCode: str
    OriginationNumber: str
    Substitutions: Dict[str, List[str]]
    VoiceId: str


class PinpointSendMessagesResponse(TypedDict):
    MessageResponse: PinpointMessageResponse


class PinpointMessageResponse(TypedDict, total=False):
    ApplicationId: str
    EndpointResult: Dict[str, PinpointEndpointMessageResult]
    RequestId: str
    Result: Dict[str, PinpointMessageResult]


class PinpointEndpointMessageResult(TypedDict, total=False):
    Address: str
    DeliveryStatus: str
    MessageId: str
    StatusCode: int
    StatusMessage: str
    UpdatedToken: str


class PinpointMessageResult(TypedDict, total=False):
    DeliveryStatus: str
    MessageId: str
    StatusCode: int
    StatusMessage: str
    UpdatedToken: str


class PinpointSendUsersMessageRequest(TypedDict, total=False):
    Context: Dict[str, str]
    MessageConfiguration: PinpointDirectMessageConfiguration
    TraceId: str
    Users: Dict[str, PinpointEndpointSendConfiguration]


class PinpointSendUsersMessagesResponse(TypedDict):
    SendUsersMessageResponse: PinpointSendUsersMessageResponse


class PinpointSendUsersMessageResponse(TypedDict, total=False):
    ApplicationId: str
    RequestId: str
    Result: Dict[str, Dict[str, PinpointEndpointMessageResult]]


class PinpointADMChannelRequest(TypedDict, total=False):
    ClientId: str
    ClientSecret: str
    Enabled: bool


class PinpointUpdateAdmChannelResponse(TypedDict):
    ADMChannelResponse: PinpointADMChannelResponse


class PinpointAPNSChannelRequest(TypedDict, total=False):
    BundleId: str
    Certificate: str
    DefaultAuthenticationMethod: str
    Enabled: bool
    PrivateKey: str
    TeamId: str
    TokenKey: str
    TokenKeyId: str


class PinpointUpdateApnsChannelResponse(TypedDict):
    APNSChannelResponse: PinpointAPNSChannelResponse


class PinpointAPNSSandboxChannelRequest(TypedDict, total=False):
    BundleId: str
    Certificate: str
    DefaultAuthenticationMethod: str
    Enabled: bool
    PrivateKey: str
    TeamId: str
    TokenKey: str
    TokenKeyId: str


class PinpointUpdateApnsSandboxChannelResponse(TypedDict):
    APNSSandboxChannelResponse: PinpointAPNSSandboxChannelResponse


class PinpointAPNSVoipChannelRequest(TypedDict, total=False):
    BundleId: str
    Certificate: str
    DefaultAuthenticationMethod: str
    Enabled: bool
    PrivateKey: str
    TeamId: str
    TokenKey: str
    TokenKeyId: str


class PinpointUpdateApnsVoipChannelResponse(TypedDict):
    APNSVoipChannelResponse: PinpointAPNSVoipChannelResponse


class PinpointAPNSVoipSandboxChannelRequest(TypedDict, total=False):
    BundleId: str
    Certificate: str
    DefaultAuthenticationMethod: str
    Enabled: bool
    PrivateKey: str
    TeamId: str
    TokenKey: str
    TokenKeyId: str


class PinpointUpdateApnsVoipSandboxChannelResponse(TypedDict):
    APNSVoipSandboxChannelResponse: PinpointAPNSVoipSandboxChannelResponse


class PinpointWriteApplicationSettingsRequest(TypedDict, total=False):
    CampaignHook: PinpointCampaignHook
    CloudWatchMetricsEnabled: bool
    Limits: PinpointCampaignLimits
    QuietTime: PinpointQuietTime


class PinpointUpdateApplicationSettingsResponse(TypedDict):
    ApplicationSettingsResource: PinpointApplicationSettingsResource


class PinpointBaiduChannelRequest(TypedDict, total=False):
    ApiKey: str
    Enabled: bool
    SecretKey: str


class PinpointUpdateBaiduChannelResponse(TypedDict):
    BaiduChannelResponse: PinpointBaiduChannelResponse


class PinpointUpdateCampaignResponse(TypedDict):
    CampaignResponse: PinpointCampaignResponse


class PinpointEmailChannelRequest(TypedDict, total=False):
    ConfigurationSet: str
    Enabled: bool
    FromAddress: str
    Identity: str
    RoleArn: str


class PinpointUpdateEmailChannelResponse(TypedDict):
    EmailChannelResponse: PinpointEmailChannelResponse


class PinpointEndpointRequest(TypedDict, total=False):
    Address: str
    Attributes: Dict[str, List[str]]
    ChannelType: str
    Demographic: PinpointEndpointDemographic
    EffectiveDate: str
    EndpointStatus: str
    Location: PinpointEndpointLocation
    Metrics: Dict[str, float]
    OptOut: str
    RequestId: str
    User: PinpointEndpointUser


class PinpointUpdateEndpointResponse(TypedDict):
    MessageBody: PinpointMessageBody


class PinpointMessageBody(TypedDict, total=False):
    Message: str
    RequestID: str


class PinpointEndpointBatchRequest(TypedDict, total=False):
    Item: List[PinpointEndpointBatchItem]


class PinpointEndpointBatchItem(TypedDict, total=False):
    Address: str
    Attributes: Dict[str, List[str]]
    ChannelType: str
    Demographic: PinpointEndpointDemographic
    EffectiveDate: str
    EndpointStatus: str
    Id: str
    Location: PinpointEndpointLocation
    Metrics: Dict[str, float]
    OptOut: str
    RequestId: str
    User: PinpointEndpointUser


class PinpointUpdateEndpointsBatchResponse(TypedDict):
    MessageBody: PinpointMessageBody


class PinpointGCMChannelRequest(TypedDict, total=False):
    ApiKey: str
    Enabled: bool


class PinpointUpdateGcmChannelResponse(TypedDict):
    GCMChannelResponse: PinpointGCMChannelResponse


class PinpointUpdateSegmentResponse(TypedDict):
    SegmentResponse: PinpointSegmentResponse


class PinpointSMSChannelRequest(TypedDict, total=False):
    Enabled: bool
    SenderId: str
    ShortCode: str


class PinpointUpdateSmsChannelResponse(TypedDict):
    SMSChannelResponse: PinpointSMSChannelResponse


class PinpointVoiceChannelRequest(TypedDict, total=False):
    Enabled: bool


class PinpointUpdateVoiceChannelResponse(TypedDict):
    VoiceChannelResponse: PinpointVoiceChannelResponse


class PinpointEmail(BaseClient):
    def create_configuration_set(self, *,
        ConfigurationSetName: str = ...,
        TrackingOptions: PinpointEmailTrackingOptions = ...,
        DeliveryOptions: PinpointEmailDeliveryOptions = ...,
        ReputationOptions: PinpointEmailReputationOptions = ...,
        SendingOptions: PinpointEmailSendingOptions = ...,
        Tags: List[PinpointEmailTag] = ...
    ) -> PinpointEmailCreateConfigurationSetResponse: ...

    def create_configuration_set_event_destination(self, *,
        ConfigurationSetName: str,
        EventDestinationName: str,
        EventDestination: PinpointEmailEventDestinationDefinition
    ) -> PinpointEmailCreateConfigurationSetEventDestinationResponse: ...

    def create_dedicated_ip_pool(self, *,
        PoolName: str,
        Tags: List[PinpointEmailTag] = ...
    ) -> PinpointEmailCreateDedicatedIpPoolResponse: ...

    def create_deliverability_test_report(self, *,
        FromEmailAddress: str,
        Content: PinpointEmailEmailContent,
        ReportName: str = ...,
        Tags: List[PinpointEmailTag] = ...
    ) -> PinpointEmailCreateDeliverabilityTestReportResponse: ...

    def create_email_identity(self, *,
        EmailIdentity: str,
        Tags: List[PinpointEmailTag] = ...
    ) -> PinpointEmailCreateEmailIdentityResponse: ...

    def delete_configuration_set(self, *,
        ConfigurationSetName: str
    ) -> PinpointEmailDeleteConfigurationSetResponse: ...

    def delete_configuration_set_event_destination(self, *,
        ConfigurationSetName: str,
        EventDestinationName: str
    ) -> PinpointEmailDeleteConfigurationSetEventDestinationResponse: ...

    def delete_dedicated_ip_pool(self, *,
        PoolName: str
    ) -> PinpointEmailDeleteDedicatedIpPoolResponse: ...

    def delete_email_identity(self, *,
        EmailIdentity: str
    ) -> PinpointEmailDeleteEmailIdentityResponse: ...

    def get_account(self) -> PinpointEmailGetAccountResponse: ...

    def get_blacklist_reports(self, *,
        BlacklistItemNames: List[str]
    ) -> PinpointEmailGetBlacklistReportsResponse: ...

    def get_configuration_set(self, *,
        ConfigurationSetName: str
    ) -> PinpointEmailGetConfigurationSetResponse: ...

    def get_configuration_set_event_destinations(self, *,
        ConfigurationSetName: str
    ) -> PinpointEmailGetConfigurationSetEventDestinationsResponse: ...

    def get_dedicated_ip(self, *,
        Ip: str
    ) -> PinpointEmailGetDedicatedIpResponse: ...

    def get_dedicated_ips(self, *,
        PoolName: str = ...,
        NextToken: str = ...,
        PageSize: int = ...
    ) -> PinpointEmailGetDedicatedIpsResponse: ...

    def get_deliverability_dashboard_options(self) -> PinpointEmailGetDeliverabilityDashboardOptionsResponse: ...

    def get_deliverability_test_report(self, *,
        ReportId: str
    ) -> PinpointEmailGetDeliverabilityTestReportResponse: ...

    def get_domain_statistics_report(self, *,
        Domain: str,
        StartDate: datetime.datetime,
        EndDate: datetime.datetime
    ) -> PinpointEmailGetDomainStatisticsReportResponse: ...

    def get_email_identity(self, *,
        EmailIdentity: str
    ) -> PinpointEmailGetEmailIdentityResponse: ...

    def list_configuration_sets(self, *,
        NextToken: str = ...,
        PageSize: int = ...
    ) -> PinpointEmailListConfigurationSetsResponse: ...

    def list_dedicated_ip_pools(self, *,
        NextToken: str = ...,
        PageSize: int = ...
    ) -> PinpointEmailListDedicatedIpPoolsResponse: ...

    def list_deliverability_test_reports(self, *,
        NextToken: str = ...,
        PageSize: int = ...
    ) -> PinpointEmailListDeliverabilityTestReportsResponse: ...

    def list_email_identities(self, *,
        NextToken: str = ...,
        PageSize: int = ...
    ) -> PinpointEmailListEmailIdentitiesResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> PinpointEmailListTagsForResourceResponse: ...

    def put_account_dedicated_ip_warmup_attributes(self, *,
        AutoWarmupEnabled: bool = ...
    ) -> PinpointEmailPutAccountDedicatedIpWarmupAttributesResponse: ...

    def put_account_sending_attributes(self, *,
        SendingEnabled: bool = ...
    ) -> PinpointEmailPutAccountSendingAttributesResponse: ...

    def put_configuration_set_delivery_options(self, *,
        ConfigurationSetName: str,
        SendingPoolName: str = ...
    ) -> PinpointEmailPutConfigurationSetDeliveryOptionsResponse: ...

    def put_configuration_set_reputation_options(self, *,
        ConfigurationSetName: str,
        ReputationMetricsEnabled: bool = ...
    ) -> PinpointEmailPutConfigurationSetReputationOptionsResponse: ...

    def put_configuration_set_sending_options(self, *,
        ConfigurationSetName: str,
        SendingEnabled: bool = ...
    ) -> PinpointEmailPutConfigurationSetSendingOptionsResponse: ...

    def put_configuration_set_tracking_options(self, *,
        ConfigurationSetName: str,
        CustomRedirectDomain: str = ...
    ) -> PinpointEmailPutConfigurationSetTrackingOptionsResponse: ...

    def put_dedicated_ip_in_pool(self, *,
        Ip: str,
        DestinationPoolName: str
    ) -> PinpointEmailPutDedicatedIpInPoolResponse: ...

    def put_dedicated_ip_warmup_attributes(self, *,
        Ip: str,
        WarmupPercentage: int
    ) -> PinpointEmailPutDedicatedIpWarmupAttributesResponse: ...

    def put_deliverability_dashboard_option(self, *,
        DashboardEnabled: bool
    ) -> PinpointEmailPutDeliverabilityDashboardOptionResponse: ...

    def put_email_identity_dkim_attributes(self, *,
        EmailIdentity: str,
        SigningEnabled: bool = ...
    ) -> PinpointEmailPutEmailIdentityDkimAttributesResponse: ...

    def put_email_identity_feedback_attributes(self, *,
        EmailIdentity: str,
        EmailForwardingEnabled: bool = ...
    ) -> PinpointEmailPutEmailIdentityFeedbackAttributesResponse: ...

    def put_email_identity_mail_from_attributes(self, *,
        EmailIdentity: str,
        MailFromDomain: str = ...,
        BehaviorOnMxFailure: str = ...
    ) -> PinpointEmailPutEmailIdentityMailFromAttributesResponse: ...

    def send_email(self, *,
        Destination: PinpointEmailDestination,
        Content: PinpointEmailEmailContent,
        FromEmailAddress: str = ...,
        ReplyToAddresses: List[str] = ...,
        FeedbackForwardingEmailAddress: str = ...,
        EmailTags: List[PinpointEmailMessageTag] = ...,
        ConfigurationSetName: str = ...
    ) -> PinpointEmailSendEmailResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: List[PinpointEmailTag]
    ) -> PinpointEmailTagResourceResponse: ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ) -> PinpointEmailUntagResourceResponse: ...

    def update_configuration_set_event_destination(self, *,
        ConfigurationSetName: str,
        EventDestinationName: str,
        EventDestination: PinpointEmailEventDestinationDefinition
    ) -> PinpointEmailUpdateConfigurationSetEventDestinationResponse: ...


class PinpointEmailTrackingOptions(TypedDict):
    CustomRedirectDomain: str


class PinpointEmailDeliveryOptions(TypedDict, total=False):
    SendingPoolName: str


class PinpointEmailReputationOptions(TypedDict, total=False):
    ReputationMetricsEnabled: bool
    LastFreshStart: datetime.datetime


class PinpointEmailSendingOptions(TypedDict, total=False):
    SendingEnabled: bool


class PinpointEmailTag(TypedDict):
    Key: str
    Value: str


class PinpointEmailCreateConfigurationSetResponse(TypedDict, total=False):
    pass


class PinpointEmailEventDestinationDefinition(TypedDict, total=False):
    Enabled: bool
    MatchingEventTypes: List[str]
    KinesisFirehoseDestination: PinpointEmailKinesisFirehoseDestination
    CloudWatchDestination: PinpointEmailCloudWatchDestination
    SnsDestination: PinpointEmailSnsDestination
    PinpointDestination: PinpointEmailPinpointDestination


class PinpointEmailKinesisFirehoseDestination(TypedDict):
    IamRoleArn: str
    DeliveryStreamArn: str


class PinpointEmailCloudWatchDestination(TypedDict):
    DimensionConfigurations: List[PinpointEmailCloudWatchDimensionConfiguration]


class PinpointEmailCloudWatchDimensionConfiguration(TypedDict):
    DimensionName: str
    DimensionValueSource: str
    DefaultDimensionValue: str


class PinpointEmailSnsDestination(TypedDict):
    TopicArn: str


class PinpointEmailPinpointDestination(TypedDict, total=False):
    ApplicationArn: str


class PinpointEmailCreateConfigurationSetEventDestinationResponse(TypedDict, total=False):
    pass


class PinpointEmailCreateDedicatedIpPoolResponse(TypedDict, total=False):
    pass


class PinpointEmailEmailContent(TypedDict, total=False):
    Simple: PinpointEmailMessage
    Raw: PinpointEmailRawMessage


class PinpointEmailMessage(TypedDict):
    Subject: PinpointEmailContent
    Body: PinpointEmailBody


class _PinpointEmailContent(TypedDict):
    Data: str


class PinpointEmailContent(_PinpointEmailContent, total=False):
    Charset: str


class PinpointEmailBody(TypedDict, total=False):
    Text: PinpointEmailContent
    Html: PinpointEmailContent


class PinpointEmailRawMessage(TypedDict):
    Data: bytes


class PinpointEmailCreateDeliverabilityTestReportResponse(TypedDict):
    ReportId: str
    DeliverabilityTestStatus: str


class PinpointEmailCreateEmailIdentityResponse(TypedDict, total=False):
    IdentityType: str
    VerifiedForSendingStatus: bool
    DkimAttributes: PinpointEmailDkimAttributes


class PinpointEmailDkimAttributes(TypedDict, total=False):
    SigningEnabled: bool
    Status: str
    Tokens: List[str]


class PinpointEmailDeleteConfigurationSetResponse(TypedDict, total=False):
    pass


class PinpointEmailDeleteConfigurationSetEventDestinationResponse(TypedDict, total=False):
    pass


class PinpointEmailDeleteDedicatedIpPoolResponse(TypedDict, total=False):
    pass


class PinpointEmailDeleteEmailIdentityResponse(TypedDict, total=False):
    pass


class PinpointEmailGetAccountResponse(TypedDict, total=False):
    SendQuota: PinpointEmailSendQuota
    SendingEnabled: bool
    DedicatedIpAutoWarmupEnabled: bool
    EnforcementStatus: str
    ProductionAccessEnabled: bool


class PinpointEmailSendQuota(TypedDict, total=False):
    Max24HourSend: float
    MaxSendRate: float
    SentLast24Hours: float


class PinpointEmailGetBlacklistReportsResponse(TypedDict):
    BlacklistReport: Dict[str, List[PinpointEmailBlacklistEntry]]


class PinpointEmailBlacklistEntry(TypedDict, total=False):
    RblName: str
    ListingTime: datetime.datetime
    Description: str


class PinpointEmailGetConfigurationSetResponse(TypedDict, total=False):
    ConfigurationSetName: str
    TrackingOptions: PinpointEmailTrackingOptions
    DeliveryOptions: PinpointEmailDeliveryOptions
    ReputationOptions: PinpointEmailReputationOptions
    SendingOptions: PinpointEmailSendingOptions


class PinpointEmailGetConfigurationSetEventDestinationsResponse(TypedDict, total=False):
    EventDestinations: List[PinpointEmailEventDestination]


class _PinpointEmailEventDestination(TypedDict):
    Name: str
    MatchingEventTypes: List[str]


class PinpointEmailEventDestination(_PinpointEmailEventDestination, total=False):
    Enabled: bool
    KinesisFirehoseDestination: PinpointEmailKinesisFirehoseDestination
    CloudWatchDestination: PinpointEmailCloudWatchDestination
    SnsDestination: PinpointEmailSnsDestination
    PinpointDestination: PinpointEmailPinpointDestination


class PinpointEmailGetDedicatedIpResponse(TypedDict, total=False):
    DedicatedIp: PinpointEmailDedicatedIp


class _PinpointEmailDedicatedIp(TypedDict):
    Ip: str
    WarmupStatus: str
    WarmupPercentage: int


class PinpointEmailDedicatedIp(_PinpointEmailDedicatedIp, total=False):
    PoolName: str


class PinpointEmailGetDedicatedIpsResponse(TypedDict, total=False):
    DedicatedIps: List[PinpointEmailDedicatedIp]
    NextToken: str


class PinpointEmailGetDeliverabilityDashboardOptionsResponse(TypedDict):
    DashboardEnabled: bool


class _PinpointEmailGetDeliverabilityTestReportResponse(TypedDict):
    DeliverabilityTestReport: PinpointEmailDeliverabilityTestReport
    OverallPlacement: PinpointEmailPlacementStatistics
    IspPlacements: List[PinpointEmailIspPlacement]


class PinpointEmailGetDeliverabilityTestReportResponse(_PinpointEmailGetDeliverabilityTestReportResponse, total=False):
    Message: str


class PinpointEmailDeliverabilityTestReport(TypedDict, total=False):
    ReportId: str
    ReportName: str
    Subject: str
    FromEmailAddress: str
    CreateDate: datetime.datetime
    DeliverabilityTestStatus: str


class PinpointEmailPlacementStatistics(TypedDict, total=False):
    InboxPercentage: float
    SpamPercentage: float
    MissingPercentage: float
    SpfPercentage: float
    DkimPercentage: float


class PinpointEmailIspPlacement(TypedDict, total=False):
    IspName: str
    PlacementStatistics: PinpointEmailPlacementStatistics


class PinpointEmailGetDomainStatisticsReportResponse(TypedDict):
    OverallVolume: PinpointEmailOverallVolume
    DailyVolumes: List[PinpointEmailDailyVolume]


class PinpointEmailOverallVolume(TypedDict, total=False):
    VolumeStatistics: PinpointEmailVolumeStatistics
    ReadRatePercent: float
    DomainIspPlacements: List[PinpointEmailDomainIspPlacement]


class PinpointEmailVolumeStatistics(TypedDict, total=False):
    InboxRawCount: int
    SpamRawCount: int
    ProjectedInbox: int
    ProjectedSpam: int


class PinpointEmailDomainIspPlacement(TypedDict, total=False):
    IspName: str
    InboxRawCount: int
    SpamRawCount: int
    InboxPercentage: float
    SpamPercentage: float


class PinpointEmailDailyVolume(TypedDict, total=False):
    StartDate: datetime.datetime
    VolumeStatistics: PinpointEmailVolumeStatistics
    DomainIspPlacements: List[PinpointEmailDomainIspPlacement]


class PinpointEmailGetEmailIdentityResponse(TypedDict, total=False):
    IdentityType: str
    FeedbackForwardingStatus: bool
    VerifiedForSendingStatus: bool
    DkimAttributes: PinpointEmailDkimAttributes
    MailFromAttributes: PinpointEmailMailFromAttributes


class PinpointEmailMailFromAttributes(TypedDict):
    MailFromDomain: str
    MailFromDomainStatus: str
    BehaviorOnMxFailure: str


class PinpointEmailListConfigurationSetsResponse(TypedDict, total=False):
    ConfigurationSets: List[str]
    NextToken: str


class PinpointEmailListDedicatedIpPoolsResponse(TypedDict, total=False):
    DedicatedIpPools: List[str]
    NextToken: str


class _PinpointEmailListDeliverabilityTestReportsResponse(TypedDict):
    DeliverabilityTestReports: List[PinpointEmailDeliverabilityTestReport]


class PinpointEmailListDeliverabilityTestReportsResponse(_PinpointEmailListDeliverabilityTestReportsResponse, total=False):
    NextToken: str


class PinpointEmailListEmailIdentitiesResponse(TypedDict, total=False):
    EmailIdentities: List[PinpointEmailIdentityInfo]
    NextToken: str


class PinpointEmailIdentityInfo(TypedDict, total=False):
    IdentityType: str
    IdentityName: str
    SendingEnabled: bool


class PinpointEmailListTagsForResourceResponse(TypedDict):
    Tags: List[PinpointEmailTag]


class PinpointEmailPutAccountDedicatedIpWarmupAttributesResponse(TypedDict, total=False):
    pass


class PinpointEmailPutAccountSendingAttributesResponse(TypedDict, total=False):
    pass


class PinpointEmailPutConfigurationSetDeliveryOptionsResponse(TypedDict, total=False):
    pass


class PinpointEmailPutConfigurationSetReputationOptionsResponse(TypedDict, total=False):
    pass


class PinpointEmailPutConfigurationSetSendingOptionsResponse(TypedDict, total=False):
    pass


class PinpointEmailPutConfigurationSetTrackingOptionsResponse(TypedDict, total=False):
    pass


class PinpointEmailPutDedicatedIpInPoolResponse(TypedDict, total=False):
    pass


class PinpointEmailPutDedicatedIpWarmupAttributesResponse(TypedDict, total=False):
    pass


class PinpointEmailPutDeliverabilityDashboardOptionResponse(TypedDict, total=False):
    pass


class PinpointEmailPutEmailIdentityDkimAttributesResponse(TypedDict, total=False):
    pass


class PinpointEmailPutEmailIdentityFeedbackAttributesResponse(TypedDict, total=False):
    pass


class PinpointEmailPutEmailIdentityMailFromAttributesResponse(TypedDict, total=False):
    pass


class PinpointEmailDestination(TypedDict, total=False):
    ToAddresses: List[str]
    CcAddresses: List[str]
    BccAddresses: List[str]


class PinpointEmailMessageTag(TypedDict):
    Name: str
    Value: str


class PinpointEmailSendEmailResponse(TypedDict, total=False):
    MessageId: str


class PinpointEmailTagResourceResponse(TypedDict, total=False):
    pass


class PinpointEmailUntagResourceResponse(TypedDict, total=False):
    pass


class PinpointEmailUpdateConfigurationSetEventDestinationResponse(TypedDict, total=False):
    pass


class PinpointSMSVoice(BaseClient):
    def create_configuration_set(self, *,
        ConfigurationSetName: str = ...
    ) -> PinpointSMSVoiceCreateConfigurationSetResponse: ...

    def create_configuration_set_event_destination(self, *,
        ConfigurationSetName: str,
        EventDestination: PinpointSMSVoiceEventDestinationDefinition = ...,
        EventDestinationName: str = ...
    ) -> PinpointSMSVoiceCreateConfigurationSetEventDestinationResponse: ...

    def delete_configuration_set(self, *,
        ConfigurationSetName: str
    ) -> PinpointSMSVoiceDeleteConfigurationSetResponse: ...

    def delete_configuration_set_event_destination(self, *,
        ConfigurationSetName: str,
        EventDestinationName: str
    ) -> PinpointSMSVoiceDeleteConfigurationSetEventDestinationResponse: ...

    def get_configuration_set_event_destinations(self, *,
        ConfigurationSetName: str
    ) -> PinpointSMSVoiceGetConfigurationSetEventDestinationsResponse: ...

    def send_voice_message(self, *,
        CallerId: str = ...,
        ConfigurationSetName: str = ...,
        Content: PinpointSMSVoiceVoiceMessageContent = ...,
        DestinationPhoneNumber: str = ...,
        OriginationPhoneNumber: str = ...
    ) -> PinpointSMSVoiceSendVoiceMessageResponse: ...

    def update_configuration_set_event_destination(self, *,
        ConfigurationSetName: str,
        EventDestinationName: str,
        EventDestination: PinpointSMSVoiceEventDestinationDefinition = ...
    ) -> PinpointSMSVoiceUpdateConfigurationSetEventDestinationResponse: ...


class PinpointSMSVoiceCreateConfigurationSetResponse(TypedDict, total=False):
    pass


class PinpointSMSVoiceEventDestinationDefinition(TypedDict, total=False):
    CloudWatchLogsDestination: PinpointSMSVoiceCloudWatchLogsDestination
    Enabled: bool
    KinesisFirehoseDestination: PinpointSMSVoiceKinesisFirehoseDestination
    MatchingEventTypes: List[str]
    SnsDestination: PinpointSMSVoiceSnsDestination


class PinpointSMSVoiceCloudWatchLogsDestination(TypedDict, total=False):
    IamRoleArn: str
    LogGroupArn: str


class PinpointSMSVoiceKinesisFirehoseDestination(TypedDict, total=False):
    DeliveryStreamArn: str
    IamRoleArn: str


class PinpointSMSVoiceSnsDestination(TypedDict, total=False):
    TopicArn: str


class PinpointSMSVoiceCreateConfigurationSetEventDestinationResponse(TypedDict, total=False):
    pass


class PinpointSMSVoiceDeleteConfigurationSetResponse(TypedDict, total=False):
    pass


class PinpointSMSVoiceDeleteConfigurationSetEventDestinationResponse(TypedDict, total=False):
    pass


class PinpointSMSVoiceGetConfigurationSetEventDestinationsResponse(TypedDict, total=False):
    EventDestinations: List[PinpointSMSVoiceEventDestination]


class PinpointSMSVoiceEventDestination(TypedDict, total=False):
    CloudWatchLogsDestination: PinpointSMSVoiceCloudWatchLogsDestination
    Enabled: bool
    KinesisFirehoseDestination: PinpointSMSVoiceKinesisFirehoseDestination
    MatchingEventTypes: List[str]
    Name: str
    SnsDestination: PinpointSMSVoiceSnsDestination


class PinpointSMSVoiceVoiceMessageContent(TypedDict, total=False):
    CallInstructionsMessage: PinpointSMSVoiceCallInstructionsMessageType
    PlainTextMessage: PinpointSMSVoicePlainTextMessageType
    SSMLMessage: PinpointSMSVoiceSSMLMessageType


class PinpointSMSVoiceCallInstructionsMessageType(TypedDict, total=False):
    Text: str


class PinpointSMSVoicePlainTextMessageType(TypedDict, total=False):
    LanguageCode: str
    Text: str
    VoiceId: str


class PinpointSMSVoiceSSMLMessageType(TypedDict, total=False):
    LanguageCode: str
    Text: str
    VoiceId: str


class PinpointSMSVoiceSendVoiceMessageResponse(TypedDict, total=False):
    MessageId: str


class PinpointSMSVoiceUpdateConfigurationSetEventDestinationResponse(TypedDict, total=False):
    pass


class Polly(BaseClient):
    def delete_lexicon(self, *,
        Name: str
    ) -> PollyDeleteLexiconOutput: ...

    def describe_voices(self, *,
        LanguageCode: str = ...,
        IncludeAdditionalLanguageCodes: bool = ...,
        NextToken: str = ...
    ) -> PollyDescribeVoicesOutput: ...

    def get_lexicon(self, *,
        Name: str
    ) -> PollyGetLexiconOutput: ...

    def get_speech_synthesis_task(self, *,
        TaskId: str
    ) -> PollyGetSpeechSynthesisTaskOutput: ...

    def list_lexicons(self, *,
        NextToken: str = ...
    ) -> PollyListLexiconsOutput: ...

    def list_speech_synthesis_tasks(self, *,
        MaxResults: int = ...,
        NextToken: str = ...,
        Status: str = ...
    ) -> PollyListSpeechSynthesisTasksOutput: ...

    def put_lexicon(self, *,
        Name: str,
        Content: str
    ) -> PollyPutLexiconOutput: ...

    def start_speech_synthesis_task(self, *,
        OutputFormat: str,
        OutputS3BucketName: str,
        Text: str,
        VoiceId: str,
        LexiconNames: List[str] = ...,
        OutputS3KeyPrefix: str = ...,
        SampleRate: str = ...,
        SnsTopicArn: str = ...,
        SpeechMarkTypes: List[str] = ...,
        TextType: str = ...,
        LanguageCode: str = ...
    ) -> PollyStartSpeechSynthesisTaskOutput: ...

    def synthesize_speech(self, *,
        OutputFormat: str,
        Text: str,
        VoiceId: str,
        LexiconNames: List[str] = ...,
        SampleRate: str = ...,
        SpeechMarkTypes: List[str] = ...,
        TextType: str = ...,
        LanguageCode: str = ...
    ) -> PollySynthesizeSpeechOutput: ...


class PollyDeleteLexiconOutput(TypedDict, total=False):
    pass


class PollyDescribeVoicesOutput(TypedDict, total=False):
    Voices: List[PollyVoice]
    NextToken: str


class PollyVoice(TypedDict, total=False):
    Gender: str
    Id: str
    LanguageCode: str
    LanguageName: str
    Name: str
    AdditionalLanguageCodes: List[str]


class PollyGetLexiconOutput(TypedDict, total=False):
    Lexicon: PollyLexicon
    LexiconAttributes: PollyLexiconAttributes


class PollyLexicon(TypedDict, total=False):
    Content: str
    Name: str


class PollyLexiconAttributes(TypedDict, total=False):
    Alphabet: str
    LanguageCode: str
    LastModified: datetime.datetime
    LexiconArn: str
    LexemesCount: int
    Size: int


class PollyGetSpeechSynthesisTaskOutput(TypedDict, total=False):
    SynthesisTask: PollySynthesisTask


class PollySynthesisTask(TypedDict, total=False):
    TaskId: str
    TaskStatus: str
    TaskStatusReason: str
    OutputUri: str
    CreationTime: datetime.datetime
    RequestCharacters: int
    SnsTopicArn: str
    LexiconNames: List[str]
    OutputFormat: str
    SampleRate: str
    SpeechMarkTypes: List[str]
    TextType: str
    VoiceId: str
    LanguageCode: str


class PollyListLexiconsOutput(TypedDict, total=False):
    Lexicons: List[PollyLexiconDescription]
    NextToken: str


class PollyLexiconDescription(TypedDict, total=False):
    Name: str
    Attributes: PollyLexiconAttributes


class PollyListSpeechSynthesisTasksOutput(TypedDict, total=False):
    NextToken: str
    SynthesisTasks: List[PollySynthesisTask]


class PollyPutLexiconOutput(TypedDict, total=False):
    pass


class PollyStartSpeechSynthesisTaskOutput(TypedDict, total=False):
    SynthesisTask: PollySynthesisTask


class PollySynthesizeSpeechOutput(TypedDict, total=False):
    AudioStream: bytes
    ContentType: str
    RequestCharacters: int


class Pricing(BaseClient):
    def describe_services(self, *,
        ServiceCode: str = ...,
        FormatVersion: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> PricingDescribeServicesResponse: ...

    def get_attribute_values(self, *,
        ServiceCode: str,
        AttributeName: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> PricingGetAttributeValuesResponse: ...

    def get_products(self, *,
        ServiceCode: str = ...,
        Filters: List[PricingFilter] = ...,
        FormatVersion: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> PricingGetProductsResponse: ...


class PricingDescribeServicesResponse(TypedDict, total=False):
    Services: List[PricingService]
    FormatVersion: str
    NextToken: str


class PricingService(TypedDict, total=False):
    ServiceCode: str
    AttributeNames: List[str]


class PricingGetAttributeValuesResponse(TypedDict, total=False):
    AttributeValues: List[PricingAttributeValue]
    NextToken: str


class PricingAttributeValue(TypedDict, total=False):
    Value: str


class PricingFilter(TypedDict):
    Type: str
    Field: str
    Value: str


class PricingGetProductsResponse(TypedDict, total=False):
    FormatVersion: str
    PriceList: List[str]
    NextToken: str


class QuickSight(BaseClient):
    def create_group(self, *,
        GroupName: str,
        AwsAccountId: str,
        Namespace: str,
        Description: str = ...
    ) -> QuickSightCreateGroupResponse: ...

    def create_group_membership(self, *,
        MemberName: str,
        GroupName: str,
        AwsAccountId: str,
        Namespace: str
    ) -> QuickSightCreateGroupMembershipResponse: ...

    def delete_group(self, *,
        GroupName: str,
        AwsAccountId: str,
        Namespace: str
    ) -> QuickSightDeleteGroupResponse: ...

    def delete_group_membership(self, *,
        MemberName: str,
        GroupName: str,
        AwsAccountId: str,
        Namespace: str
    ) -> QuickSightDeleteGroupMembershipResponse: ...

    def delete_user(self, *,
        UserName: str,
        AwsAccountId: str,
        Namespace: str
    ) -> QuickSightDeleteUserResponse: ...

    def delete_user_by_principal_id(self, *,
        PrincipalId: str,
        AwsAccountId: str,
        Namespace: str
    ) -> QuickSightDeleteUserByPrincipalIdResponse: ...

    def describe_group(self, *,
        GroupName: str,
        AwsAccountId: str,
        Namespace: str
    ) -> QuickSightDescribeGroupResponse: ...

    def describe_user(self, *,
        UserName: str,
        AwsAccountId: str,
        Namespace: str
    ) -> QuickSightDescribeUserResponse: ...

    def get_dashboard_embed_url(self, *,
        AwsAccountId: str,
        DashboardId: str,
        IdentityType: str,
        SessionLifetimeInMinutes: int = ...,
        UndoRedoDisabled: bool = ...,
        ResetDisabled: bool = ...
    ) -> QuickSightGetDashboardEmbedUrlResponse: ...

    def list_group_memberships(self, *,
        GroupName: str,
        AwsAccountId: str,
        Namespace: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> QuickSightListGroupMembershipsResponse: ...

    def list_groups(self, *,
        AwsAccountId: str,
        Namespace: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> QuickSightListGroupsResponse: ...

    def list_user_groups(self, *,
        UserName: str,
        AwsAccountId: str,
        Namespace: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> QuickSightListUserGroupsResponse: ...

    def list_users(self, *,
        AwsAccountId: str,
        Namespace: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> QuickSightListUsersResponse: ...

    def register_user(self, *,
        IdentityType: str,
        Email: str,
        UserRole: str,
        AwsAccountId: str,
        Namespace: str,
        IamArn: str = ...,
        SessionName: str = ...,
        UserName: str = ...
    ) -> QuickSightRegisterUserResponse: ...

    def update_group(self, *,
        GroupName: str,
        AwsAccountId: str,
        Namespace: str,
        Description: str = ...
    ) -> QuickSightUpdateGroupResponse: ...

    def update_user(self, *,
        UserName: str,
        AwsAccountId: str,
        Namespace: str,
        Email: str,
        Role: str
    ) -> QuickSightUpdateUserResponse: ...


class QuickSightCreateGroupResponse(TypedDict, total=False):
    Group: QuickSightGroup
    RequestId: str
    Status: int


class QuickSightGroup(TypedDict, total=False):
    Arn: str
    GroupName: str
    Description: str
    PrincipalId: str


class QuickSightCreateGroupMembershipResponse(TypedDict, total=False):
    GroupMember: QuickSightGroupMember
    RequestId: str
    Status: int


class QuickSightGroupMember(TypedDict, total=False):
    Arn: str
    MemberName: str


class QuickSightDeleteGroupResponse(TypedDict, total=False):
    RequestId: str
    Status: int


class QuickSightDeleteGroupMembershipResponse(TypedDict, total=False):
    RequestId: str
    Status: int


class QuickSightDeleteUserResponse(TypedDict, total=False):
    RequestId: str
    Status: int


class QuickSightDeleteUserByPrincipalIdResponse(TypedDict, total=False):
    RequestId: str
    Status: int


class QuickSightDescribeGroupResponse(TypedDict, total=False):
    Group: QuickSightGroup
    RequestId: str
    Status: int


class QuickSightDescribeUserResponse(TypedDict, total=False):
    User: QuickSightUser
    RequestId: str
    Status: int


class QuickSightUser(TypedDict, total=False):
    Arn: str
    UserName: str
    Email: str
    Role: str
    IdentityType: str
    Active: bool
    PrincipalId: str


class QuickSightGetDashboardEmbedUrlResponse(TypedDict, total=False):
    EmbedUrl: str
    Status: int
    RequestId: str


class QuickSightListGroupMembershipsResponse(TypedDict, total=False):
    GroupMemberList: List[QuickSightGroupMember]
    NextToken: str
    RequestId: str
    Status: int


class QuickSightListGroupsResponse(TypedDict, total=False):
    GroupList: List[QuickSightGroup]
    NextToken: str
    RequestId: str
    Status: int


class QuickSightListUserGroupsResponse(TypedDict, total=False):
    GroupList: List[QuickSightGroup]
    NextToken: str
    RequestId: str
    Status: int


class QuickSightListUsersResponse(TypedDict, total=False):
    UserList: List[QuickSightUser]
    NextToken: str
    RequestId: str
    Status: int


class QuickSightRegisterUserResponse(TypedDict, total=False):
    User: QuickSightUser
    UserInvitationUrl: str
    RequestId: str
    Status: int


class QuickSightUpdateGroupResponse(TypedDict, total=False):
    Group: QuickSightGroup
    RequestId: str
    Status: int


class QuickSightUpdateUserResponse(TypedDict, total=False):
    User: QuickSightUser
    RequestId: str
    Status: int


class RAM(BaseClient):
    def accept_resource_share_invitation(self, *,
        resourceShareInvitationArn: str,
        clientToken: str = ...
    ) -> RAMAcceptResourceShareInvitationResponse: ...

    def associate_resource_share(self, *,
        resourceShareArn: str,
        resourceArns: List[str] = ...,
        principals: List[str] = ...,
        clientToken: str = ...
    ) -> RAMAssociateResourceShareResponse: ...

    def create_resource_share(self, *,
        name: str,
        resourceArns: List[str] = ...,
        principals: List[str] = ...,
        tags: List[RAMTag] = ...,
        allowExternalPrincipals: bool = ...,
        clientToken: str = ...
    ) -> RAMCreateResourceShareResponse: ...

    def delete_resource_share(self, *,
        resourceShareArn: str,
        clientToken: str = ...
    ) -> RAMDeleteResourceShareResponse: ...

    def disassociate_resource_share(self, *,
        resourceShareArn: str,
        resourceArns: List[str] = ...,
        principals: List[str] = ...,
        clientToken: str = ...
    ) -> RAMDisassociateResourceShareResponse: ...

    def enable_sharing_with_aws_organization(self) -> RAMEnableSharingWithAwsOrganizationResponse: ...

    def get_resource_policies(self, *,
        resourceArns: List[str],
        principal: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> RAMGetResourcePoliciesResponse: ...

    def get_resource_share_associations(self, *,
        associationType: str,
        resourceShareArns: List[str] = ...,
        resourceArn: str = ...,
        principal: str = ...,
        associationStatus: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> RAMGetResourceShareAssociationsResponse: ...

    def get_resource_share_invitations(self, *,
        resourceShareInvitationArns: List[str] = ...,
        resourceShareArns: List[str] = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> RAMGetResourceShareInvitationsResponse: ...

    def get_resource_shares(self, *,
        resourceOwner: str,
        resourceShareArns: List[str] = ...,
        resourceShareStatus: str = ...,
        name: str = ...,
        tagFilters: List[RAMTagFilter] = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> RAMGetResourceSharesResponse: ...

    def list_principals(self, *,
        resourceOwner: str,
        resourceArn: str = ...,
        principals: List[str] = ...,
        resourceType: str = ...,
        resourceShareArns: List[str] = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> RAMListPrincipalsResponse: ...

    def list_resources(self, *,
        resourceOwner: str,
        principal: str = ...,
        resourceType: str = ...,
        resourceArns: List[str] = ...,
        resourceShareArns: List[str] = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> RAMListResourcesResponse: ...

    def reject_resource_share_invitation(self, *,
        resourceShareInvitationArn: str,
        clientToken: str = ...
    ) -> RAMRejectResourceShareInvitationResponse: ...

    def tag_resource(self, *,
        resourceShareArn: str,
        tags: List[RAMTag]
    ) -> RAMTagResourceResponse: ...

    def untag_resource(self, *,
        resourceShareArn: str,
        tagKeys: List[str]
    ) -> RAMUntagResourceResponse: ...

    def update_resource_share(self, *,
        resourceShareArn: str,
        name: str = ...,
        allowExternalPrincipals: bool = ...,
        clientToken: str = ...
    ) -> RAMUpdateResourceShareResponse: ...


class RAMAcceptResourceShareInvitationResponse(TypedDict, total=False):
    resourceShareInvitation: RAMResourceShareInvitation
    clientToken: str


class RAMResourceShareInvitation(TypedDict, total=False):
    resourceShareInvitationArn: str
    resourceShareName: str
    resourceShareArn: str
    senderAccountId: str
    receiverAccountId: str
    invitationTimestamp: datetime.datetime
    status: str
    resourceShareAssociations: List[RAMResourceShareAssociation]


class RAMResourceShareAssociation(TypedDict, total=False):
    resourceShareArn: str
    associatedEntity: str
    associationType: str
    status: str
    statusMessage: str
    creationTime: datetime.datetime
    lastUpdatedTime: datetime.datetime
    external: bool


class RAMAssociateResourceShareResponse(TypedDict, total=False):
    resourceShareAssociations: List[RAMResourceShareAssociation]
    clientToken: str


class RAMTag(TypedDict, total=False):
    key: str
    value: str


class RAMCreateResourceShareResponse(TypedDict, total=False):
    resourceShare: RAMResourceShare
    clientToken: str


class RAMResourceShare(TypedDict, total=False):
    resourceShareArn: str
    name: str
    owningAccountId: str
    allowExternalPrincipals: bool
    status: str
    statusMessage: str
    tags: List[RAMTag]
    creationTime: datetime.datetime
    lastUpdatedTime: datetime.datetime


class RAMDeleteResourceShareResponse(TypedDict, total=False):
    returnValue: bool
    clientToken: str


class RAMDisassociateResourceShareResponse(TypedDict, total=False):
    resourceShareAssociations: List[RAMResourceShareAssociation]
    clientToken: str


class RAMEnableSharingWithAwsOrganizationResponse(TypedDict, total=False):
    returnValue: bool


class RAMGetResourcePoliciesResponse(TypedDict, total=False):
    policies: List[str]
    nextToken: str


class RAMGetResourceShareAssociationsResponse(TypedDict, total=False):
    resourceShareAssociations: List[RAMResourceShareAssociation]
    nextToken: str


class RAMGetResourceShareInvitationsResponse(TypedDict, total=False):
    resourceShareInvitations: List[RAMResourceShareInvitation]
    nextToken: str


class RAMTagFilter(TypedDict, total=False):
    tagKey: str
    tagValues: List[str]


class RAMGetResourceSharesResponse(TypedDict, total=False):
    resourceShares: List[RAMResourceShare]
    nextToken: str


class RAMListPrincipalsResponse(TypedDict, total=False):
    principals: List[RAMPrincipal]
    nextToken: str


class RAMPrincipal(TypedDict, total=False):
    id: str
    resourceShareArn: str
    creationTime: datetime.datetime
    lastUpdatedTime: datetime.datetime
    external: bool


class RAMListResourcesResponse(TypedDict, total=False):
    resources: List[RAMResource]
    nextToken: str


class RAMResource(TypedDict, total=False):
    arn: str
    type: str
    resourceShareArn: str
    status: str
    statusMessage: str
    creationTime: datetime.datetime
    lastUpdatedTime: datetime.datetime


class RAMRejectResourceShareInvitationResponse(TypedDict, total=False):
    resourceShareInvitation: RAMResourceShareInvitation
    clientToken: str


class RAMTagResourceResponse(TypedDict, total=False):
    pass


class RAMUntagResourceResponse(TypedDict, total=False):
    pass


class RAMUpdateResourceShareResponse(TypedDict, total=False):
    resourceShare: RAMResourceShare
    clientToken: str


class RDS(BaseClient):
    def add_role_to_db_cluster(self, *,
        DBClusterIdentifier: str,
        RoleArn: str,
        FeatureName: str = ...
    ): ...

    def add_role_to_db_instance(self, *,
        DBInstanceIdentifier: str,
        RoleArn: str,
        FeatureName: str
    ): ...

    def add_source_identifier_to_subscription(self, *,
        SubscriptionName: str,
        SourceIdentifier: str
    ) -> RDSAddSourceIdentifierToSubscriptionResult: ...

    def add_tags_to_resource(self, *,
        ResourceName: str,
        Tags: List[RDSTag]
    ): ...

    def apply_pending_maintenance_action(self, *,
        ResourceIdentifier: str,
        ApplyAction: str,
        OptInType: str
    ) -> RDSApplyPendingMaintenanceActionResult: ...

    def authorize_db_security_group_ingress(self, *,
        DBSecurityGroupName: str,
        CIDRIP: str = ...,
        EC2SecurityGroupName: str = ...,
        EC2SecurityGroupId: str = ...,
        EC2SecurityGroupOwnerId: str = ...
    ) -> RDSAuthorizeDBSecurityGroupIngressResult: ...

    def backtrack_db_cluster(self, *,
        DBClusterIdentifier: str,
        BacktrackTo: datetime.datetime,
        Force: bool = ...,
        UseEarliestTimeOnPointInTimeUnavailable: bool = ...
    ) -> RDSDBClusterBacktrack: ...

    def copy_db_cluster_parameter_group(self, *,
        SourceDBClusterParameterGroupIdentifier: str,
        TargetDBClusterParameterGroupIdentifier: str,
        TargetDBClusterParameterGroupDescription: str,
        Tags: List[RDSTag] = ...
    ) -> RDSCopyDBClusterParameterGroupResult: ...

    def copy_db_cluster_snapshot(self, *,
        SourceDBClusterSnapshotIdentifier: str,
        TargetDBClusterSnapshotIdentifier: str,
        KmsKeyId: str = ...,
        PreSignedUrl: str = ...,
        CopyTags: bool = ...,
        Tags: List[RDSTag] = ...,
        SourceRegion: str = ...
    ) -> RDSCopyDBClusterSnapshotResult: ...

    def copy_db_parameter_group(self, *,
        SourceDBParameterGroupIdentifier: str,
        TargetDBParameterGroupIdentifier: str,
        TargetDBParameterGroupDescription: str,
        Tags: List[RDSTag] = ...
    ) -> RDSCopyDBParameterGroupResult: ...

    def copy_db_snapshot(self, *,
        SourceDBSnapshotIdentifier: str,
        TargetDBSnapshotIdentifier: str,
        KmsKeyId: str = ...,
        Tags: List[RDSTag] = ...,
        CopyTags: bool = ...,
        PreSignedUrl: str = ...,
        OptionGroupName: str = ...,
        SourceRegion: str = ...
    ) -> RDSCopyDBSnapshotResult: ...

    def copy_option_group(self, *,
        SourceOptionGroupIdentifier: str,
        TargetOptionGroupIdentifier: str,
        TargetOptionGroupDescription: str,
        Tags: List[RDSTag] = ...
    ) -> RDSCopyOptionGroupResult: ...

    def create_db_cluster(self, *,
        DBClusterIdentifier: str,
        Engine: str,
        AvailabilityZones: List[str] = ...,
        BackupRetentionPeriod: int = ...,
        CharacterSetName: str = ...,
        DatabaseName: str = ...,
        DBClusterParameterGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        DBSubnetGroupName: str = ...,
        EngineVersion: str = ...,
        Port: int = ...,
        MasterUsername: str = ...,
        MasterUserPassword: str = ...,
        OptionGroupName: str = ...,
        PreferredBackupWindow: str = ...,
        PreferredMaintenanceWindow: str = ...,
        ReplicationSourceIdentifier: str = ...,
        Tags: List[RDSTag] = ...,
        StorageEncrypted: bool = ...,
        KmsKeyId: str = ...,
        PreSignedUrl: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        BacktrackWindow: int = ...,
        EnableCloudwatchLogsExports: List[str] = ...,
        EngineMode: str = ...,
        ScalingConfiguration: RDSScalingConfiguration = ...,
        DeletionProtection: bool = ...,
        GlobalClusterIdentifier: str = ...,
        CopyTagsToSnapshot: bool = ...,
        SourceRegion: str = ...
    ) -> RDSCreateDBClusterResult: ...

    def create_db_cluster_endpoint(self, *,
        DBClusterIdentifier: str,
        DBClusterEndpointIdentifier: str,
        EndpointType: str,
        StaticMembers: List[str] = ...,
        ExcludedMembers: List[str] = ...
    ) -> RDSDBClusterEndpoint: ...

    def create_db_cluster_parameter_group(self, *,
        DBClusterParameterGroupName: str,
        DBParameterGroupFamily: str,
        Description: str,
        Tags: List[RDSTag] = ...
    ) -> RDSCreateDBClusterParameterGroupResult: ...

    def create_db_cluster_snapshot(self, *,
        DBClusterSnapshotIdentifier: str,
        DBClusterIdentifier: str,
        Tags: List[RDSTag] = ...
    ) -> RDSCreateDBClusterSnapshotResult: ...

    def create_db_instance(self, *,
        DBInstanceIdentifier: str,
        DBInstanceClass: str,
        Engine: str,
        DBName: str = ...,
        AllocatedStorage: int = ...,
        MasterUsername: str = ...,
        MasterUserPassword: str = ...,
        DBSecurityGroups: List[str] = ...,
        VpcSecurityGroupIds: List[str] = ...,
        AvailabilityZone: str = ...,
        DBSubnetGroupName: str = ...,
        PreferredMaintenanceWindow: str = ...,
        DBParameterGroupName: str = ...,
        BackupRetentionPeriod: int = ...,
        PreferredBackupWindow: str = ...,
        Port: int = ...,
        MultiAZ: bool = ...,
        EngineVersion: str = ...,
        AutoMinorVersionUpgrade: bool = ...,
        LicenseModel: str = ...,
        Iops: int = ...,
        OptionGroupName: str = ...,
        CharacterSetName: str = ...,
        PubliclyAccessible: bool = ...,
        Tags: List[RDSTag] = ...,
        DBClusterIdentifier: str = ...,
        StorageType: str = ...,
        TdeCredentialArn: str = ...,
        TdeCredentialPassword: str = ...,
        StorageEncrypted: bool = ...,
        KmsKeyId: str = ...,
        Domain: str = ...,
        CopyTagsToSnapshot: bool = ...,
        MonitoringInterval: int = ...,
        MonitoringRoleArn: str = ...,
        DomainIAMRoleName: str = ...,
        PromotionTier: int = ...,
        Timezone: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        EnablePerformanceInsights: bool = ...,
        PerformanceInsightsKMSKeyId: str = ...,
        PerformanceInsightsRetentionPeriod: int = ...,
        EnableCloudwatchLogsExports: List[str] = ...,
        ProcessorFeatures: List[RDSProcessorFeature] = ...,
        DeletionProtection: bool = ...
    ) -> RDSCreateDBInstanceResult: ...

    def create_db_instance_read_replica(self, *,
        DBInstanceIdentifier: str,
        SourceDBInstanceIdentifier: str,
        DBInstanceClass: str = ...,
        AvailabilityZone: str = ...,
        Port: int = ...,
        MultiAZ: bool = ...,
        AutoMinorVersionUpgrade: bool = ...,
        Iops: int = ...,
        OptionGroupName: str = ...,
        PubliclyAccessible: bool = ...,
        Tags: List[RDSTag] = ...,
        DBSubnetGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        StorageType: str = ...,
        CopyTagsToSnapshot: bool = ...,
        MonitoringInterval: int = ...,
        MonitoringRoleArn: str = ...,
        KmsKeyId: str = ...,
        PreSignedUrl: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        EnablePerformanceInsights: bool = ...,
        PerformanceInsightsKMSKeyId: str = ...,
        PerformanceInsightsRetentionPeriod: int = ...,
        EnableCloudwatchLogsExports: List[str] = ...,
        ProcessorFeatures: List[RDSProcessorFeature] = ...,
        UseDefaultProcessorFeatures: bool = ...,
        DeletionProtection: bool = ...,
        SourceRegion: str = ...
    ) -> RDSCreateDBInstanceReadReplicaResult: ...

    def create_db_parameter_group(self, *,
        DBParameterGroupName: str,
        DBParameterGroupFamily: str,
        Description: str,
        Tags: List[RDSTag] = ...
    ) -> RDSCreateDBParameterGroupResult: ...

    def create_db_security_group(self, *,
        DBSecurityGroupName: str,
        DBSecurityGroupDescription: str,
        Tags: List[RDSTag] = ...
    ) -> RDSCreateDBSecurityGroupResult: ...

    def create_db_snapshot(self, *,
        DBSnapshotIdentifier: str,
        DBInstanceIdentifier: str,
        Tags: List[RDSTag] = ...
    ) -> RDSCreateDBSnapshotResult: ...

    def create_db_subnet_group(self, *,
        DBSubnetGroupName: str,
        DBSubnetGroupDescription: str,
        SubnetIds: List[str],
        Tags: List[RDSTag] = ...
    ) -> RDSCreateDBSubnetGroupResult: ...

    def create_event_subscription(self, *,
        SubscriptionName: str,
        SnsTopicArn: str,
        SourceType: str = ...,
        EventCategories: List[str] = ...,
        SourceIds: List[str] = ...,
        Enabled: bool = ...,
        Tags: List[RDSTag] = ...
    ) -> RDSCreateEventSubscriptionResult: ...

    def create_global_cluster(self, *,
        GlobalClusterIdentifier: str = ...,
        SourceDBClusterIdentifier: str = ...,
        Engine: str = ...,
        EngineVersion: str = ...,
        DeletionProtection: bool = ...,
        DatabaseName: str = ...,
        StorageEncrypted: bool = ...
    ) -> RDSCreateGlobalClusterResult: ...

    def create_option_group(self, *,
        OptionGroupName: str,
        EngineName: str,
        MajorEngineVersion: str,
        OptionGroupDescription: str,
        Tags: List[RDSTag] = ...
    ) -> RDSCreateOptionGroupResult: ...

    def delete_db_cluster(self, *,
        DBClusterIdentifier: str,
        SkipFinalSnapshot: bool = ...,
        FinalDBSnapshotIdentifier: str = ...
    ) -> RDSDeleteDBClusterResult: ...

    def delete_db_cluster_endpoint(self, *,
        DBClusterEndpointIdentifier: str
    ) -> RDSDBClusterEndpoint: ...

    def delete_db_cluster_parameter_group(self, *,
        DBClusterParameterGroupName: str
    ): ...

    def delete_db_cluster_snapshot(self, *,
        DBClusterSnapshotIdentifier: str
    ) -> RDSDeleteDBClusterSnapshotResult: ...

    def delete_db_instance(self, *,
        DBInstanceIdentifier: str,
        SkipFinalSnapshot: bool = ...,
        FinalDBSnapshotIdentifier: str = ...,
        DeleteAutomatedBackups: bool = ...
    ) -> RDSDeleteDBInstanceResult: ...

    def delete_db_instance_automated_backup(self, *,
        DbiResourceId: str
    ) -> RDSDeleteDBInstanceAutomatedBackupResult: ...

    def delete_db_parameter_group(self, *,
        DBParameterGroupName: str
    ): ...

    def delete_db_security_group(self, *,
        DBSecurityGroupName: str
    ): ...

    def delete_db_snapshot(self, *,
        DBSnapshotIdentifier: str
    ) -> RDSDeleteDBSnapshotResult: ...

    def delete_db_subnet_group(self, *,
        DBSubnetGroupName: str
    ): ...

    def delete_event_subscription(self, *,
        SubscriptionName: str
    ) -> RDSDeleteEventSubscriptionResult: ...

    def delete_global_cluster(self, *,
        GlobalClusterIdentifier: str
    ) -> RDSDeleteGlobalClusterResult: ...

    def delete_option_group(self, *,
        OptionGroupName: str
    ): ...

    def describe_account_attributes(self) -> RDSAccountAttributesMessage: ...

    def describe_certificates(self, *,
        CertificateIdentifier: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSCertificateMessage: ...

    def describe_db_cluster_backtracks(self, *,
        DBClusterIdentifier: str,
        BacktrackIdentifier: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDBClusterBacktrackMessage: ...

    def describe_db_cluster_endpoints(self, *,
        DBClusterIdentifier: str = ...,
        DBClusterEndpointIdentifier: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDBClusterEndpointMessage: ...

    def describe_db_cluster_parameter_groups(self, *,
        DBClusterParameterGroupName: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDBClusterParameterGroupsMessage: ...

    def describe_db_cluster_parameters(self, *,
        DBClusterParameterGroupName: str,
        Source: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDBClusterParameterGroupDetails: ...

    def describe_db_cluster_snapshot_attributes(self, *,
        DBClusterSnapshotIdentifier: str
    ) -> RDSDescribeDBClusterSnapshotAttributesResult: ...

    def describe_db_cluster_snapshots(self, *,
        DBClusterIdentifier: str = ...,
        DBClusterSnapshotIdentifier: str = ...,
        SnapshotType: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        IncludeShared: bool = ...,
        IncludePublic: bool = ...
    ) -> RDSDBClusterSnapshotMessage: ...

    def describe_db_clusters(self, *,
        DBClusterIdentifier: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDBClusterMessage: ...

    def describe_db_engine_versions(self, *,
        Engine: str = ...,
        EngineVersion: str = ...,
        DBParameterGroupFamily: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        DefaultOnly: bool = ...,
        ListSupportedCharacterSets: bool = ...,
        ListSupportedTimezones: bool = ...
    ) -> RDSDBEngineVersionMessage: ...

    def describe_db_instance_automated_backups(self, *,
        DbiResourceId: str = ...,
        DBInstanceIdentifier: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDBInstanceAutomatedBackupMessage: ...

    def describe_db_instances(self, *,
        DBInstanceIdentifier: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDBInstanceMessage: ...

    def describe_db_log_files(self, *,
        DBInstanceIdentifier: str,
        FilenameContains: str = ...,
        FileLastWritten: int = ...,
        FileSize: int = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDescribeDBLogFilesResponse: ...

    def describe_db_parameter_groups(self, *,
        DBParameterGroupName: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDBParameterGroupsMessage: ...

    def describe_db_parameters(self, *,
        DBParameterGroupName: str,
        Source: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDBParameterGroupDetails: ...

    def describe_db_security_groups(self, *,
        DBSecurityGroupName: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDBSecurityGroupMessage: ...

    def describe_db_snapshot_attributes(self, *,
        DBSnapshotIdentifier: str
    ) -> RDSDescribeDBSnapshotAttributesResult: ...

    def describe_db_snapshots(self, *,
        DBInstanceIdentifier: str = ...,
        DBSnapshotIdentifier: str = ...,
        SnapshotType: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        IncludeShared: bool = ...,
        IncludePublic: bool = ...,
        DbiResourceId: str = ...
    ) -> RDSDBSnapshotMessage: ...

    def describe_db_subnet_groups(self, *,
        DBSubnetGroupName: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDBSubnetGroupMessage: ...

    def describe_engine_default_cluster_parameters(self, *,
        DBParameterGroupFamily: str,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDescribeEngineDefaultClusterParametersResult: ...

    def describe_engine_default_parameters(self, *,
        DBParameterGroupFamily: str,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSDescribeEngineDefaultParametersResult: ...

    def describe_event_categories(self, *,
        SourceType: str = ...,
        Filters: List[RDSFilter] = ...
    ) -> RDSEventCategoriesMessage: ...

    def describe_event_subscriptions(self, *,
        SubscriptionName: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSEventSubscriptionsMessage: ...

    def describe_events(self, *,
        SourceIdentifier: str = ...,
        SourceType: str = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        Duration: int = ...,
        EventCategories: List[str] = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSEventsMessage: ...

    def describe_global_clusters(self, *,
        GlobalClusterIdentifier: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSGlobalClustersMessage: ...

    def describe_option_group_options(self, *,
        EngineName: str,
        MajorEngineVersion: str = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSOptionGroupOptionsMessage: ...

    def describe_option_groups(self, *,
        OptionGroupName: str = ...,
        Filters: List[RDSFilter] = ...,
        Marker: str = ...,
        MaxRecords: int = ...,
        EngineName: str = ...,
        MajorEngineVersion: str = ...
    ) -> RDSOptionGroups: ...

    def describe_orderable_db_instance_options(self, *,
        Engine: str,
        EngineVersion: str = ...,
        DBInstanceClass: str = ...,
        LicenseModel: str = ...,
        Vpc: bool = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSOrderableDBInstanceOptionsMessage: ...

    def describe_pending_maintenance_actions(self, *,
        ResourceIdentifier: str = ...,
        Filters: List[RDSFilter] = ...,
        Marker: str = ...,
        MaxRecords: int = ...
    ) -> RDSPendingMaintenanceActionsMessage: ...

    def describe_reserved_db_instances(self, *,
        ReservedDBInstanceId: str = ...,
        ReservedDBInstancesOfferingId: str = ...,
        DBInstanceClass: str = ...,
        Duration: str = ...,
        ProductDescription: str = ...,
        OfferingType: str = ...,
        MultiAZ: bool = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSReservedDBInstanceMessage: ...

    def describe_reserved_db_instances_offerings(self, *,
        ReservedDBInstancesOfferingId: str = ...,
        DBInstanceClass: str = ...,
        Duration: str = ...,
        ProductDescription: str = ...,
        OfferingType: str = ...,
        MultiAZ: bool = ...,
        Filters: List[RDSFilter] = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RDSReservedDBInstancesOfferingMessage: ...

    def describe_source_regions(self, *,
        RegionName: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        Filters: List[RDSFilter] = ...
    ) -> RDSSourceRegionMessage: ...

    def describe_valid_db_instance_modifications(self, *,
        DBInstanceIdentifier: str
    ) -> RDSDescribeValidDBInstanceModificationsResult: ...

    def download_db_log_file_portion(self, *,
        DBInstanceIdentifier: str,
        LogFileName: str,
        Marker: str = ...,
        NumberOfLines: int = ...
    ) -> RDSDownloadDBLogFilePortionDetails: ...

    def failover_db_cluster(self, *,
        DBClusterIdentifier: str,
        TargetDBInstanceIdentifier: str = ...
    ) -> RDSFailoverDBClusterResult: ...

    def list_tags_for_resource(self, *,
        ResourceName: str,
        Filters: List[RDSFilter] = ...
    ) -> RDSTagListMessage: ...

    def modify_current_db_cluster_capacity(self, *,
        DBClusterIdentifier: str,
        Capacity: int = ...,
        SecondsBeforeTimeout: int = ...,
        TimeoutAction: str = ...
    ) -> RDSDBClusterCapacityInfo: ...

    def modify_db_cluster(self, *,
        DBClusterIdentifier: str,
        NewDBClusterIdentifier: str = ...,
        ApplyImmediately: bool = ...,
        BackupRetentionPeriod: int = ...,
        DBClusterParameterGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        Port: int = ...,
        MasterUserPassword: str = ...,
        OptionGroupName: str = ...,
        PreferredBackupWindow: str = ...,
        PreferredMaintenanceWindow: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        BacktrackWindow: int = ...,
        CloudwatchLogsExportConfiguration: RDSCloudwatchLogsExportConfiguration = ...,
        EngineVersion: str = ...,
        ScalingConfiguration: RDSScalingConfiguration = ...,
        DeletionProtection: bool = ...,
        EnableHttpEndpoint: bool = ...,
        CopyTagsToSnapshot: bool = ...
    ) -> RDSModifyDBClusterResult: ...

    def modify_db_cluster_endpoint(self, *,
        DBClusterEndpointIdentifier: str,
        EndpointType: str = ...,
        StaticMembers: List[str] = ...,
        ExcludedMembers: List[str] = ...
    ) -> RDSDBClusterEndpoint: ...

    def modify_db_cluster_parameter_group(self, *,
        DBClusterParameterGroupName: str,
        Parameters: List[RDSParameter]
    ) -> RDSDBClusterParameterGroupNameMessage: ...

    def modify_db_cluster_snapshot_attribute(self, *,
        DBClusterSnapshotIdentifier: str,
        AttributeName: str,
        ValuesToAdd: List[str] = ...,
        ValuesToRemove: List[str] = ...
    ) -> RDSModifyDBClusterSnapshotAttributeResult: ...

    def modify_db_instance(self, *,
        DBInstanceIdentifier: str,
        AllocatedStorage: int = ...,
        DBInstanceClass: str = ...,
        DBSubnetGroupName: str = ...,
        DBSecurityGroups: List[str] = ...,
        VpcSecurityGroupIds: List[str] = ...,
        ApplyImmediately: bool = ...,
        MasterUserPassword: str = ...,
        DBParameterGroupName: str = ...,
        BackupRetentionPeriod: int = ...,
        PreferredBackupWindow: str = ...,
        PreferredMaintenanceWindow: str = ...,
        MultiAZ: bool = ...,
        EngineVersion: str = ...,
        AllowMajorVersionUpgrade: bool = ...,
        AutoMinorVersionUpgrade: bool = ...,
        LicenseModel: str = ...,
        Iops: int = ...,
        OptionGroupName: str = ...,
        NewDBInstanceIdentifier: str = ...,
        StorageType: str = ...,
        TdeCredentialArn: str = ...,
        TdeCredentialPassword: str = ...,
        CACertificateIdentifier: str = ...,
        Domain: str = ...,
        CopyTagsToSnapshot: bool = ...,
        MonitoringInterval: int = ...,
        DBPortNumber: int = ...,
        PubliclyAccessible: bool = ...,
        MonitoringRoleArn: str = ...,
        DomainIAMRoleName: str = ...,
        PromotionTier: int = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        EnablePerformanceInsights: bool = ...,
        PerformanceInsightsKMSKeyId: str = ...,
        PerformanceInsightsRetentionPeriod: int = ...,
        CloudwatchLogsExportConfiguration: RDSCloudwatchLogsExportConfiguration = ...,
        ProcessorFeatures: List[RDSProcessorFeature] = ...,
        UseDefaultProcessorFeatures: bool = ...,
        DeletionProtection: bool = ...
    ) -> RDSModifyDBInstanceResult: ...

    def modify_db_parameter_group(self, *,
        DBParameterGroupName: str,
        Parameters: List[RDSParameter]
    ) -> RDSDBParameterGroupNameMessage: ...

    def modify_db_snapshot(self, *,
        DBSnapshotIdentifier: str,
        EngineVersion: str = ...,
        OptionGroupName: str = ...
    ) -> RDSModifyDBSnapshotResult: ...

    def modify_db_snapshot_attribute(self, *,
        DBSnapshotIdentifier: str,
        AttributeName: str,
        ValuesToAdd: List[str] = ...,
        ValuesToRemove: List[str] = ...
    ) -> RDSModifyDBSnapshotAttributeResult: ...

    def modify_db_subnet_group(self, *,
        DBSubnetGroupName: str,
        SubnetIds: List[str],
        DBSubnetGroupDescription: str = ...
    ) -> RDSModifyDBSubnetGroupResult: ...

    def modify_event_subscription(self, *,
        SubscriptionName: str,
        SnsTopicArn: str = ...,
        SourceType: str = ...,
        EventCategories: List[str] = ...,
        Enabled: bool = ...
    ) -> RDSModifyEventSubscriptionResult: ...

    def modify_global_cluster(self, *,
        GlobalClusterIdentifier: str = ...,
        NewGlobalClusterIdentifier: str = ...,
        DeletionProtection: bool = ...
    ) -> RDSModifyGlobalClusterResult: ...

    def modify_option_group(self, *,
        OptionGroupName: str,
        OptionsToInclude: List[RDSOptionConfiguration] = ...,
        OptionsToRemove: List[str] = ...,
        ApplyImmediately: bool = ...
    ) -> RDSModifyOptionGroupResult: ...

    def promote_read_replica(self, *,
        DBInstanceIdentifier: str,
        BackupRetentionPeriod: int = ...,
        PreferredBackupWindow: str = ...
    ) -> RDSPromoteReadReplicaResult: ...

    def promote_read_replica_db_cluster(self, *,
        DBClusterIdentifier: str
    ) -> RDSPromoteReadReplicaDBClusterResult: ...

    def purchase_reserved_db_instances_offering(self, *,
        ReservedDBInstancesOfferingId: str,
        ReservedDBInstanceId: str = ...,
        DBInstanceCount: int = ...,
        Tags: List[RDSTag] = ...
    ) -> RDSPurchaseReservedDBInstancesOfferingResult: ...

    def reboot_db_instance(self, *,
        DBInstanceIdentifier: str,
        ForceFailover: bool = ...
    ) -> RDSRebootDBInstanceResult: ...

    def remove_from_global_cluster(self, *,
        GlobalClusterIdentifier: str = ...,
        DbClusterIdentifier: str = ...
    ) -> RDSRemoveFromGlobalClusterResult: ...

    def remove_role_from_db_cluster(self, *,
        DBClusterIdentifier: str,
        RoleArn: str,
        FeatureName: str = ...
    ): ...

    def remove_role_from_db_instance(self, *,
        DBInstanceIdentifier: str,
        RoleArn: str,
        FeatureName: str
    ): ...

    def remove_source_identifier_from_subscription(self, *,
        SubscriptionName: str,
        SourceIdentifier: str
    ) -> RDSRemoveSourceIdentifierFromSubscriptionResult: ...

    def remove_tags_from_resource(self, *,
        ResourceName: str,
        TagKeys: List[str]
    ): ...

    def reset_db_cluster_parameter_group(self, *,
        DBClusterParameterGroupName: str,
        ResetAllParameters: bool = ...,
        Parameters: List[RDSParameter] = ...
    ) -> RDSDBClusterParameterGroupNameMessage: ...

    def reset_db_parameter_group(self, *,
        DBParameterGroupName: str,
        ResetAllParameters: bool = ...,
        Parameters: List[RDSParameter] = ...
    ) -> RDSDBParameterGroupNameMessage: ...

    def restore_db_cluster_from_s3(self, *,
        DBClusterIdentifier: str,
        Engine: str,
        MasterUsername: str,
        MasterUserPassword: str,
        SourceEngine: str,
        SourceEngineVersion: str,
        S3BucketName: str,
        S3IngestionRoleArn: str,
        AvailabilityZones: List[str] = ...,
        BackupRetentionPeriod: int = ...,
        CharacterSetName: str = ...,
        DatabaseName: str = ...,
        DBClusterParameterGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        DBSubnetGroupName: str = ...,
        EngineVersion: str = ...,
        Port: int = ...,
        OptionGroupName: str = ...,
        PreferredBackupWindow: str = ...,
        PreferredMaintenanceWindow: str = ...,
        Tags: List[RDSTag] = ...,
        StorageEncrypted: bool = ...,
        KmsKeyId: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        S3Prefix: str = ...,
        BacktrackWindow: int = ...,
        EnableCloudwatchLogsExports: List[str] = ...,
        DeletionProtection: bool = ...,
        CopyTagsToSnapshot: bool = ...
    ) -> RDSRestoreDBClusterFromS3Result: ...

    def restore_db_cluster_from_snapshot(self, *,
        DBClusterIdentifier: str,
        SnapshotIdentifier: str,
        Engine: str,
        AvailabilityZones: List[str] = ...,
        EngineVersion: str = ...,
        Port: int = ...,
        DBSubnetGroupName: str = ...,
        DatabaseName: str = ...,
        OptionGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        Tags: List[RDSTag] = ...,
        KmsKeyId: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        BacktrackWindow: int = ...,
        EnableCloudwatchLogsExports: List[str] = ...,
        EngineMode: str = ...,
        ScalingConfiguration: RDSScalingConfiguration = ...,
        DBClusterParameterGroupName: str = ...,
        DeletionProtection: bool = ...,
        CopyTagsToSnapshot: bool = ...
    ) -> RDSRestoreDBClusterFromSnapshotResult: ...

    def restore_db_cluster_to_point_in_time(self, *,
        DBClusterIdentifier: str,
        SourceDBClusterIdentifier: str,
        RestoreType: str = ...,
        RestoreToTime: datetime.datetime = ...,
        UseLatestRestorableTime: bool = ...,
        Port: int = ...,
        DBSubnetGroupName: str = ...,
        OptionGroupName: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        Tags: List[RDSTag] = ...,
        KmsKeyId: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        BacktrackWindow: int = ...,
        EnableCloudwatchLogsExports: List[str] = ...,
        DBClusterParameterGroupName: str = ...,
        DeletionProtection: bool = ...,
        CopyTagsToSnapshot: bool = ...
    ) -> RDSRestoreDBClusterToPointInTimeResult: ...

    def restore_db_instance_from_db_snapshot(self, *,
        DBInstanceIdentifier: str,
        DBSnapshotIdentifier: str,
        DBInstanceClass: str = ...,
        Port: int = ...,
        AvailabilityZone: str = ...,
        DBSubnetGroupName: str = ...,
        MultiAZ: bool = ...,
        PubliclyAccessible: bool = ...,
        AutoMinorVersionUpgrade: bool = ...,
        LicenseModel: str = ...,
        DBName: str = ...,
        Engine: str = ...,
        Iops: int = ...,
        OptionGroupName: str = ...,
        Tags: List[RDSTag] = ...,
        StorageType: str = ...,
        TdeCredentialArn: str = ...,
        TdeCredentialPassword: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        Domain: str = ...,
        CopyTagsToSnapshot: bool = ...,
        DomainIAMRoleName: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        EnableCloudwatchLogsExports: List[str] = ...,
        ProcessorFeatures: List[RDSProcessorFeature] = ...,
        UseDefaultProcessorFeatures: bool = ...,
        DBParameterGroupName: str = ...,
        DeletionProtection: bool = ...
    ) -> RDSRestoreDBInstanceFromDBSnapshotResult: ...

    def restore_db_instance_from_s3(self, *,
        DBInstanceIdentifier: str,
        DBInstanceClass: str,
        Engine: str,
        SourceEngine: str,
        SourceEngineVersion: str,
        S3BucketName: str,
        S3IngestionRoleArn: str,
        DBName: str = ...,
        AllocatedStorage: int = ...,
        MasterUsername: str = ...,
        MasterUserPassword: str = ...,
        DBSecurityGroups: List[str] = ...,
        VpcSecurityGroupIds: List[str] = ...,
        AvailabilityZone: str = ...,
        DBSubnetGroupName: str = ...,
        PreferredMaintenanceWindow: str = ...,
        DBParameterGroupName: str = ...,
        BackupRetentionPeriod: int = ...,
        PreferredBackupWindow: str = ...,
        Port: int = ...,
        MultiAZ: bool = ...,
        EngineVersion: str = ...,
        AutoMinorVersionUpgrade: bool = ...,
        LicenseModel: str = ...,
        Iops: int = ...,
        OptionGroupName: str = ...,
        PubliclyAccessible: bool = ...,
        Tags: List[RDSTag] = ...,
        StorageType: str = ...,
        StorageEncrypted: bool = ...,
        KmsKeyId: str = ...,
        CopyTagsToSnapshot: bool = ...,
        MonitoringInterval: int = ...,
        MonitoringRoleArn: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        S3Prefix: str = ...,
        EnablePerformanceInsights: bool = ...,
        PerformanceInsightsKMSKeyId: str = ...,
        PerformanceInsightsRetentionPeriod: int = ...,
        EnableCloudwatchLogsExports: List[str] = ...,
        ProcessorFeatures: List[RDSProcessorFeature] = ...,
        UseDefaultProcessorFeatures: bool = ...,
        DeletionProtection: bool = ...
    ) -> RDSRestoreDBInstanceFromS3Result: ...

    def restore_db_instance_to_point_in_time(self, *,
        TargetDBInstanceIdentifier: str,
        SourceDBInstanceIdentifier: str = ...,
        RestoreTime: datetime.datetime = ...,
        UseLatestRestorableTime: bool = ...,
        DBInstanceClass: str = ...,
        Port: int = ...,
        AvailabilityZone: str = ...,
        DBSubnetGroupName: str = ...,
        MultiAZ: bool = ...,
        PubliclyAccessible: bool = ...,
        AutoMinorVersionUpgrade: bool = ...,
        LicenseModel: str = ...,
        DBName: str = ...,
        Engine: str = ...,
        Iops: int = ...,
        OptionGroupName: str = ...,
        CopyTagsToSnapshot: bool = ...,
        Tags: List[RDSTag] = ...,
        StorageType: str = ...,
        TdeCredentialArn: str = ...,
        TdeCredentialPassword: str = ...,
        VpcSecurityGroupIds: List[str] = ...,
        Domain: str = ...,
        DomainIAMRoleName: str = ...,
        EnableIAMDatabaseAuthentication: bool = ...,
        EnableCloudwatchLogsExports: List[str] = ...,
        ProcessorFeatures: List[RDSProcessorFeature] = ...,
        UseDefaultProcessorFeatures: bool = ...,
        DBParameterGroupName: str = ...,
        DeletionProtection: bool = ...,
        SourceDbiResourceId: str = ...
    ) -> RDSRestoreDBInstanceToPointInTimeResult: ...

    def revoke_db_security_group_ingress(self, *,
        DBSecurityGroupName: str,
        CIDRIP: str = ...,
        EC2SecurityGroupName: str = ...,
        EC2SecurityGroupId: str = ...,
        EC2SecurityGroupOwnerId: str = ...
    ) -> RDSRevokeDBSecurityGroupIngressResult: ...

    def start_db_cluster(self, *,
        DBClusterIdentifier: str
    ) -> RDSStartDBClusterResult: ...

    def start_db_instance(self, *,
        DBInstanceIdentifier: str
    ) -> RDSStartDBInstanceResult: ...

    def stop_db_cluster(self, *,
        DBClusterIdentifier: str
    ) -> RDSStopDBClusterResult: ...

    def stop_db_instance(self, *,
        DBInstanceIdentifier: str,
        DBSnapshotIdentifier: str = ...
    ) -> RDSStopDBInstanceResult: ...


class RDSAddSourceIdentifierToSubscriptionResult(TypedDict, total=False):
    EventSubscription: RDSEventSubscription


class RDSEventSubscription(TypedDict, total=False):
    CustomerAwsId: str
    CustSubscriptionId: str
    SnsTopicArn: str
    Status: str
    SubscriptionCreationTime: str
    SourceType: str
    SourceIdsList: List[str]
    EventCategoriesList: List[str]
    Enabled: bool
    EventSubscriptionArn: str


class RDSTag(TypedDict, total=False):
    Key: str
    Value: str


class RDSApplyPendingMaintenanceActionResult(TypedDict, total=False):
    ResourcePendingMaintenanceActions: RDSResourcePendingMaintenanceActions


class RDSResourcePendingMaintenanceActions(TypedDict, total=False):
    ResourceIdentifier: str
    PendingMaintenanceActionDetails: List[RDSPendingMaintenanceAction]


class RDSPendingMaintenanceAction(TypedDict, total=False):
    Action: str
    AutoAppliedAfterDate: datetime.datetime
    ForcedApplyDate: datetime.datetime
    OptInStatus: str
    CurrentApplyDate: datetime.datetime
    Description: str


class RDSAuthorizeDBSecurityGroupIngressResult(TypedDict, total=False):
    DBSecurityGroup: RDSDBSecurityGroup


class RDSDBSecurityGroup(TypedDict, total=False):
    OwnerId: str
    DBSecurityGroupName: str
    DBSecurityGroupDescription: str
    VpcId: str
    EC2SecurityGroups: List[RDSEC2SecurityGroup]
    IPRanges: List[RDSIPRange]
    DBSecurityGroupArn: str


class RDSEC2SecurityGroup(TypedDict, total=False):
    Status: str
    EC2SecurityGroupName: str
    EC2SecurityGroupId: str
    EC2SecurityGroupOwnerId: str


class RDSIPRange(TypedDict, total=False):
    Status: str
    CIDRIP: str


class RDSDBClusterBacktrack(TypedDict, total=False):
    DBClusterIdentifier: str
    BacktrackIdentifier: str
    BacktrackTo: datetime.datetime
    BacktrackedFrom: datetime.datetime
    BacktrackRequestCreationTime: datetime.datetime
    Status: str


class RDSCopyDBClusterParameterGroupResult(TypedDict, total=False):
    DBClusterParameterGroup: RDSDBClusterParameterGroup


class RDSDBClusterParameterGroup(TypedDict, total=False):
    DBClusterParameterGroupName: str
    DBParameterGroupFamily: str
    Description: str
    DBClusterParameterGroupArn: str


class RDSCopyDBClusterSnapshotResult(TypedDict, total=False):
    DBClusterSnapshot: RDSDBClusterSnapshot


class RDSDBClusterSnapshot(TypedDict, total=False):
    AvailabilityZones: List[str]
    DBClusterSnapshotIdentifier: str
    DBClusterIdentifier: str
    SnapshotCreateTime: datetime.datetime
    Engine: str
    AllocatedStorage: int
    Status: str
    Port: int
    VpcId: str
    ClusterCreateTime: datetime.datetime
    MasterUsername: str
    EngineVersion: str
    LicenseModel: str
    SnapshotType: str
    PercentProgress: int
    StorageEncrypted: bool
    KmsKeyId: str
    DBClusterSnapshotArn: str
    SourceDBClusterSnapshotArn: str
    IAMDatabaseAuthenticationEnabled: bool


class RDSCopyDBParameterGroupResult(TypedDict, total=False):
    DBParameterGroup: RDSDBParameterGroup


class RDSDBParameterGroup(TypedDict, total=False):
    DBParameterGroupName: str
    DBParameterGroupFamily: str
    Description: str
    DBParameterGroupArn: str


class RDSCopyDBSnapshotResult(TypedDict, total=False):
    DBSnapshot: RDSDBSnapshot


class RDSDBSnapshot(TypedDict, total=False):
    DBSnapshotIdentifier: str
    DBInstanceIdentifier: str
    SnapshotCreateTime: datetime.datetime
    Engine: str
    AllocatedStorage: int
    Status: str
    Port: int
    AvailabilityZone: str
    VpcId: str
    InstanceCreateTime: datetime.datetime
    MasterUsername: str
    EngineVersion: str
    LicenseModel: str
    SnapshotType: str
    Iops: int
    OptionGroupName: str
    PercentProgress: int
    SourceRegion: str
    SourceDBSnapshotIdentifier: str
    StorageType: str
    TdeCredentialArn: str
    Encrypted: bool
    KmsKeyId: str
    DBSnapshotArn: str
    Timezone: str
    IAMDatabaseAuthenticationEnabled: bool
    ProcessorFeatures: List[RDSProcessorFeature]
    DbiResourceId: str


class RDSProcessorFeature(TypedDict, total=False):
    Name: str
    Value: str


class RDSCopyOptionGroupResult(TypedDict, total=False):
    OptionGroup: RDSOptionGroup


class RDSOptionGroup(TypedDict, total=False):
    OptionGroupName: str
    OptionGroupDescription: str
    EngineName: str
    MajorEngineVersion: str
    Options: List[RDSOption]
    AllowsVpcAndNonVpcInstanceMemberships: bool
    VpcId: str
    OptionGroupArn: str


class RDSOption(TypedDict, total=False):
    OptionName: str
    OptionDescription: str
    Persistent: bool
    Permanent: bool
    Port: int
    OptionVersion: str
    OptionSettings: List[RDSOptionSetting]
    DBSecurityGroupMemberships: List[RDSDBSecurityGroupMembership]
    VpcSecurityGroupMemberships: List[RDSVpcSecurityGroupMembership]


class RDSOptionSetting(TypedDict, total=False):
    Name: str
    Value: str
    DefaultValue: str
    Description: str
    ApplyType: str
    DataType: str
    AllowedValues: str
    IsModifiable: bool
    IsCollection: bool


class RDSDBSecurityGroupMembership(TypedDict, total=False):
    DBSecurityGroupName: str
    Status: str


class RDSVpcSecurityGroupMembership(TypedDict, total=False):
    VpcSecurityGroupId: str
    Status: str


class RDSScalingConfiguration(TypedDict, total=False):
    MinCapacity: int
    MaxCapacity: int
    AutoPause: bool
    SecondsUntilAutoPause: int
    TimeoutAction: str


class RDSCreateDBClusterResult(TypedDict, total=False):
    DBCluster: RDSDBCluster


class RDSDBCluster(TypedDict, total=False):
    AllocatedStorage: int
    AvailabilityZones: List[str]
    BackupRetentionPeriod: int
    CharacterSetName: str
    DatabaseName: str
    DBClusterIdentifier: str
    DBClusterParameterGroup: str
    DBSubnetGroup: str
    Status: str
    PercentProgress: str
    EarliestRestorableTime: datetime.datetime
    Endpoint: str
    ReaderEndpoint: str
    CustomEndpoints: List[str]
    MultiAZ: bool
    Engine: str
    EngineVersion: str
    LatestRestorableTime: datetime.datetime
    Port: int
    MasterUsername: str
    DBClusterOptionGroupMemberships: List[RDSDBClusterOptionGroupStatus]
    PreferredBackupWindow: str
    PreferredMaintenanceWindow: str
    ReplicationSourceIdentifier: str
    ReadReplicaIdentifiers: List[str]
    DBClusterMembers: List[RDSDBClusterMember]
    VpcSecurityGroups: List[RDSVpcSecurityGroupMembership]
    HostedZoneId: str
    StorageEncrypted: bool
    KmsKeyId: str
    DbClusterResourceId: str
    DBClusterArn: str
    AssociatedRoles: List[RDSDBClusterRole]
    IAMDatabaseAuthenticationEnabled: bool
    CloneGroupId: str
    ClusterCreateTime: datetime.datetime
    EarliestBacktrackTime: datetime.datetime
    BacktrackWindow: int
    BacktrackConsumedChangeRecords: int
    EnabledCloudwatchLogsExports: List[str]
    Capacity: int
    EngineMode: str
    ScalingConfigurationInfo: RDSScalingConfigurationInfo
    DeletionProtection: bool
    HttpEndpointEnabled: bool
    CopyTagsToSnapshot: bool


class RDSDBClusterOptionGroupStatus(TypedDict, total=False):
    DBClusterOptionGroupName: str
    Status: str


class RDSDBClusterMember(TypedDict, total=False):
    DBInstanceIdentifier: str
    IsClusterWriter: bool
    DBClusterParameterGroupStatus: str
    PromotionTier: int


class RDSDBClusterRole(TypedDict, total=False):
    RoleArn: str
    Status: str
    FeatureName: str


class RDSScalingConfigurationInfo(TypedDict, total=False):
    MinCapacity: int
    MaxCapacity: int
    AutoPause: bool
    SecondsUntilAutoPause: int
    TimeoutAction: str


class RDSDBClusterEndpoint(TypedDict, total=False):
    DBClusterEndpointIdentifier: str
    DBClusterIdentifier: str
    DBClusterEndpointResourceIdentifier: str
    Endpoint: str
    Status: str
    EndpointType: str
    CustomEndpointType: str
    StaticMembers: List[str]
    ExcludedMembers: List[str]
    DBClusterEndpointArn: str


class RDSCreateDBClusterParameterGroupResult(TypedDict, total=False):
    DBClusterParameterGroup: RDSDBClusterParameterGroup


class RDSCreateDBClusterSnapshotResult(TypedDict, total=False):
    DBClusterSnapshot: RDSDBClusterSnapshot


class RDSCreateDBInstanceResult(TypedDict, total=False):
    DBInstance: RDSDBInstance


class RDSDBInstance(TypedDict, total=False):
    DBInstanceIdentifier: str
    DBInstanceClass: str
    Engine: str
    DBInstanceStatus: str
    MasterUsername: str
    DBName: str
    Endpoint: RDSEndpoint
    AllocatedStorage: int
    InstanceCreateTime: datetime.datetime
    PreferredBackupWindow: str
    BackupRetentionPeriod: int
    DBSecurityGroups: List[RDSDBSecurityGroupMembership]
    VpcSecurityGroups: List[RDSVpcSecurityGroupMembership]
    DBParameterGroups: List[RDSDBParameterGroupStatus]
    AvailabilityZone: str
    DBSubnetGroup: RDSDBSubnetGroup
    PreferredMaintenanceWindow: str
    PendingModifiedValues: RDSPendingModifiedValues
    LatestRestorableTime: datetime.datetime
    MultiAZ: bool
    EngineVersion: str
    AutoMinorVersionUpgrade: bool
    ReadReplicaSourceDBInstanceIdentifier: str
    ReadReplicaDBInstanceIdentifiers: List[str]
    ReadReplicaDBClusterIdentifiers: List[str]
    LicenseModel: str
    Iops: int
    OptionGroupMemberships: List[RDSOptionGroupMembership]
    CharacterSetName: str
    SecondaryAvailabilityZone: str
    PubliclyAccessible: bool
    StatusInfos: List[RDSDBInstanceStatusInfo]
    StorageType: str
    TdeCredentialArn: str
    DbInstancePort: int
    DBClusterIdentifier: str
    StorageEncrypted: bool
    KmsKeyId: str
    DbiResourceId: str
    CACertificateIdentifier: str
    DomainMemberships: List[RDSDomainMembership]
    CopyTagsToSnapshot: bool
    MonitoringInterval: int
    EnhancedMonitoringResourceArn: str
    MonitoringRoleArn: str
    PromotionTier: int
    DBInstanceArn: str
    Timezone: str
    IAMDatabaseAuthenticationEnabled: bool
    PerformanceInsightsEnabled: bool
    PerformanceInsightsKMSKeyId: str
    PerformanceInsightsRetentionPeriod: int
    EnabledCloudwatchLogsExports: List[str]
    ProcessorFeatures: List[RDSProcessorFeature]
    DeletionProtection: bool
    AssociatedRoles: List[RDSDBInstanceRole]
    ListenerEndpoint: RDSEndpoint


class RDSEndpoint(TypedDict, total=False):
    Address: str
    Port: int
    HostedZoneId: str


class RDSDBParameterGroupStatus(TypedDict, total=False):
    DBParameterGroupName: str
    ParameterApplyStatus: str


class RDSDBSubnetGroup(TypedDict, total=False):
    DBSubnetGroupName: str
    DBSubnetGroupDescription: str
    VpcId: str
    SubnetGroupStatus: str
    Subnets: List[RDSSubnet]
    DBSubnetGroupArn: str


class RDSSubnet(TypedDict, total=False):
    SubnetIdentifier: str
    SubnetAvailabilityZone: RDSAvailabilityZone
    SubnetStatus: str


class RDSAvailabilityZone(TypedDict, total=False):
    Name: str


class RDSPendingModifiedValues(TypedDict, total=False):
    DBInstanceClass: str
    AllocatedStorage: int
    MasterUserPassword: str
    Port: int
    BackupRetentionPeriod: int
    MultiAZ: bool
    EngineVersion: str
    LicenseModel: str
    Iops: int
    DBInstanceIdentifier: str
    StorageType: str
    CACertificateIdentifier: str
    DBSubnetGroupName: str
    PendingCloudwatchLogsExports: RDSPendingCloudwatchLogsExports
    ProcessorFeatures: List[RDSProcessorFeature]


class RDSPendingCloudwatchLogsExports(TypedDict, total=False):
    LogTypesToEnable: List[str]
    LogTypesToDisable: List[str]


class RDSOptionGroupMembership(TypedDict, total=False):
    OptionGroupName: str
    Status: str


class RDSDBInstanceStatusInfo(TypedDict, total=False):
    StatusType: str
    Normal: bool
    Status: str
    Message: str


class RDSDomainMembership(TypedDict, total=False):
    Domain: str
    Status: str
    FQDN: str
    IAMRoleName: str


class RDSDBInstanceRole(TypedDict, total=False):
    RoleArn: str
    FeatureName: str
    Status: str


class RDSCreateDBInstanceReadReplicaResult(TypedDict, total=False):
    DBInstance: RDSDBInstance


class RDSCreateDBParameterGroupResult(TypedDict, total=False):
    DBParameterGroup: RDSDBParameterGroup


class RDSCreateDBSecurityGroupResult(TypedDict, total=False):
    DBSecurityGroup: RDSDBSecurityGroup


class RDSCreateDBSnapshotResult(TypedDict, total=False):
    DBSnapshot: RDSDBSnapshot


class RDSCreateDBSubnetGroupResult(TypedDict, total=False):
    DBSubnetGroup: RDSDBSubnetGroup


class RDSCreateEventSubscriptionResult(TypedDict, total=False):
    EventSubscription: RDSEventSubscription


class RDSCreateGlobalClusterResult(TypedDict, total=False):
    GlobalCluster: RDSGlobalCluster


class RDSGlobalCluster(TypedDict, total=False):
    GlobalClusterIdentifier: str
    GlobalClusterResourceId: str
    GlobalClusterArn: str
    Status: str
    Engine: str
    EngineVersion: str
    DatabaseName: str
    StorageEncrypted: bool
    DeletionProtection: bool
    GlobalClusterMembers: List[RDSGlobalClusterMember]


class RDSGlobalClusterMember(TypedDict, total=False):
    DBClusterArn: str
    Readers: List[str]
    IsWriter: bool


class RDSCreateOptionGroupResult(TypedDict, total=False):
    OptionGroup: RDSOptionGroup


class RDSDeleteDBClusterResult(TypedDict, total=False):
    DBCluster: RDSDBCluster


class RDSDeleteDBClusterSnapshotResult(TypedDict, total=False):
    DBClusterSnapshot: RDSDBClusterSnapshot


class RDSDeleteDBInstanceResult(TypedDict, total=False):
    DBInstance: RDSDBInstance


class RDSDeleteDBInstanceAutomatedBackupResult(TypedDict, total=False):
    DBInstanceAutomatedBackup: RDSDBInstanceAutomatedBackup


class RDSDBInstanceAutomatedBackup(TypedDict, total=False):
    DBInstanceArn: str
    DbiResourceId: str
    Region: str
    DBInstanceIdentifier: str
    RestoreWindow: RDSRestoreWindow
    AllocatedStorage: int
    Status: str
    Port: int
    AvailabilityZone: str
    VpcId: str
    InstanceCreateTime: datetime.datetime
    MasterUsername: str
    Engine: str
    EngineVersion: str
    LicenseModel: str
    Iops: int
    OptionGroupName: str
    TdeCredentialArn: str
    Encrypted: bool
    StorageType: str
    KmsKeyId: str
    Timezone: str
    IAMDatabaseAuthenticationEnabled: bool


class RDSRestoreWindow(TypedDict, total=False):
    EarliestTime: datetime.datetime
    LatestTime: datetime.datetime


class RDSDeleteDBSnapshotResult(TypedDict, total=False):
    DBSnapshot: RDSDBSnapshot


class RDSDeleteEventSubscriptionResult(TypedDict, total=False):
    EventSubscription: RDSEventSubscription


class RDSDeleteGlobalClusterResult(TypedDict, total=False):
    GlobalCluster: RDSGlobalCluster


class RDSAccountAttributesMessage(TypedDict, total=False):
    AccountQuotas: List[RDSAccountQuota]


class RDSAccountQuota(TypedDict, total=False):
    AccountQuotaName: str
    Used: int
    Max: int


class RDSFilter(TypedDict):
    Name: str
    Values: List[str]


class RDSCertificateMessage(TypedDict, total=False):
    Certificates: List[RDSCertificate]
    Marker: str


class RDSCertificate(TypedDict, total=False):
    CertificateIdentifier: str
    CertificateType: str
    Thumbprint: str
    ValidFrom: datetime.datetime
    ValidTill: datetime.datetime
    CertificateArn: str


class RDSDBClusterBacktrackMessage(TypedDict, total=False):
    Marker: str
    DBClusterBacktracks: List[RDSDBClusterBacktrack]


class RDSDBClusterEndpointMessage(TypedDict, total=False):
    Marker: str
    DBClusterEndpoints: List[RDSDBClusterEndpoint]


class RDSDBClusterParameterGroupsMessage(TypedDict, total=False):
    Marker: str
    DBClusterParameterGroups: List[RDSDBClusterParameterGroup]


class RDSDBClusterParameterGroupDetails(TypedDict, total=False):
    Parameters: List[RDSParameter]
    Marker: str


class RDSParameter(TypedDict, total=False):
    ParameterName: str
    ParameterValue: str
    Description: str
    Source: str
    ApplyType: str
    DataType: str
    AllowedValues: str
    IsModifiable: bool
    MinimumEngineVersion: str
    ApplyMethod: str
    SupportedEngineModes: List[str]


class RDSDescribeDBClusterSnapshotAttributesResult(TypedDict, total=False):
    DBClusterSnapshotAttributesResult: RDSDBClusterSnapshotAttributesResult


class RDSDBClusterSnapshotAttributesResult(TypedDict, total=False):
    DBClusterSnapshotIdentifier: str
    DBClusterSnapshotAttributes: List[RDSDBClusterSnapshotAttribute]


class RDSDBClusterSnapshotAttribute(TypedDict, total=False):
    AttributeName: str
    AttributeValues: List[str]


class RDSDBClusterSnapshotMessage(TypedDict, total=False):
    Marker: str
    DBClusterSnapshots: List[RDSDBClusterSnapshot]


class RDSDBClusterMessage(TypedDict, total=False):
    Marker: str
    DBClusters: List[RDSDBCluster]


class RDSDBEngineVersionMessage(TypedDict, total=False):
    Marker: str
    DBEngineVersions: List[RDSDBEngineVersion]


class RDSDBEngineVersion(TypedDict, total=False):
    Engine: str
    EngineVersion: str
    DBParameterGroupFamily: str
    DBEngineDescription: str
    DBEngineVersionDescription: str
    DefaultCharacterSet: RDSCharacterSet
    SupportedCharacterSets: List[RDSCharacterSet]
    ValidUpgradeTarget: List[RDSUpgradeTarget]
    SupportedTimezones: List[RDSTimezone]
    ExportableLogTypes: List[str]
    SupportsLogExportsToCloudwatchLogs: bool
    SupportsReadReplica: bool
    SupportedEngineModes: List[str]
    SupportedFeatureNames: List[str]


class RDSCharacterSet(TypedDict, total=False):
    CharacterSetName: str
    CharacterSetDescription: str


class RDSUpgradeTarget(TypedDict, total=False):
    Engine: str
    EngineVersion: str
    Description: str
    AutoUpgrade: bool
    IsMajorVersionUpgrade: bool


class RDSTimezone(TypedDict, total=False):
    TimezoneName: str


class RDSDBInstanceAutomatedBackupMessage(TypedDict, total=False):
    Marker: str
    DBInstanceAutomatedBackups: List[RDSDBInstanceAutomatedBackup]


class RDSDBInstanceMessage(TypedDict, total=False):
    Marker: str
    DBInstances: List[RDSDBInstance]


class RDSDescribeDBLogFilesResponse(TypedDict, total=False):
    DescribeDBLogFiles: List[RDSDescribeDBLogFilesDetails]
    Marker: str


class RDSDescribeDBLogFilesDetails(TypedDict, total=False):
    LogFileName: str
    LastWritten: int
    Size: int


class RDSDBParameterGroupsMessage(TypedDict, total=False):
    Marker: str
    DBParameterGroups: List[RDSDBParameterGroup]


class RDSDBParameterGroupDetails(TypedDict, total=False):
    Parameters: List[RDSParameter]
    Marker: str


class RDSDBSecurityGroupMessage(TypedDict, total=False):
    Marker: str
    DBSecurityGroups: List[RDSDBSecurityGroup]


class RDSDescribeDBSnapshotAttributesResult(TypedDict, total=False):
    DBSnapshotAttributesResult: RDSDBSnapshotAttributesResult


class RDSDBSnapshotAttributesResult(TypedDict, total=False):
    DBSnapshotIdentifier: str
    DBSnapshotAttributes: List[RDSDBSnapshotAttribute]


class RDSDBSnapshotAttribute(TypedDict, total=False):
    AttributeName: str
    AttributeValues: List[str]


class RDSDBSnapshotMessage(TypedDict, total=False):
    Marker: str
    DBSnapshots: List[RDSDBSnapshot]


class RDSDBSubnetGroupMessage(TypedDict, total=False):
    Marker: str
    DBSubnetGroups: List[RDSDBSubnetGroup]


class RDSDescribeEngineDefaultClusterParametersResult(TypedDict, total=False):
    EngineDefaults: RDSEngineDefaults


class RDSEngineDefaults(TypedDict, total=False):
    DBParameterGroupFamily: str
    Marker: str
    Parameters: List[RDSParameter]


class RDSDescribeEngineDefaultParametersResult(TypedDict, total=False):
    EngineDefaults: RDSEngineDefaults


class RDSEventCategoriesMessage(TypedDict, total=False):
    EventCategoriesMapList: List[RDSEventCategoriesMap]


class RDSEventCategoriesMap(TypedDict, total=False):
    SourceType: str
    EventCategories: List[str]


class RDSEventSubscriptionsMessage(TypedDict, total=False):
    Marker: str
    EventSubscriptionsList: List[RDSEventSubscription]


class RDSEventsMessage(TypedDict, total=False):
    Marker: str
    Events: List[RDSEvent]


class RDSEvent(TypedDict, total=False):
    SourceIdentifier: str
    SourceType: str
    Message: str
    EventCategories: List[str]
    Date: datetime.datetime
    SourceArn: str


class RDSGlobalClustersMessage(TypedDict, total=False):
    Marker: str
    GlobalClusters: List[RDSGlobalCluster]


class RDSOptionGroupOptionsMessage(TypedDict, total=False):
    OptionGroupOptions: List[RDSOptionGroupOption]
    Marker: str


class RDSOptionGroupOption(TypedDict, total=False):
    Name: str
    Description: str
    EngineName: str
    MajorEngineVersion: str
    MinimumRequiredMinorEngineVersion: str
    PortRequired: bool
    DefaultPort: int
    OptionsDependedOn: List[str]
    OptionsConflictsWith: List[str]
    Persistent: bool
    Permanent: bool
    RequiresAutoMinorEngineVersionUpgrade: bool
    VpcOnly: bool
    SupportsOptionVersionDowngrade: bool
    OptionGroupOptionSettings: List[RDSOptionGroupOptionSetting]
    OptionGroupOptionVersions: List[RDSOptionVersion]


class RDSOptionGroupOptionSetting(TypedDict, total=False):
    SettingName: str
    SettingDescription: str
    DefaultValue: str
    ApplyType: str
    AllowedValues: str
    IsModifiable: bool
    IsRequired: bool
    MinimumEngineVersionPerAllowedValue: List[RDSMinimumEngineVersionPerAllowedValue]


class RDSMinimumEngineVersionPerAllowedValue(TypedDict, total=False):
    AllowedValue: str
    MinimumEngineVersion: str


class RDSOptionVersion(TypedDict, total=False):
    Version: str
    IsDefault: bool


class RDSOptionGroups(TypedDict, total=False):
    OptionGroupsList: List[RDSOptionGroup]
    Marker: str


class RDSOrderableDBInstanceOptionsMessage(TypedDict, total=False):
    OrderableDBInstanceOptions: List[RDSOrderableDBInstanceOption]
    Marker: str


class RDSOrderableDBInstanceOption(TypedDict, total=False):
    Engine: str
    EngineVersion: str
    DBInstanceClass: str
    LicenseModel: str
    AvailabilityZones: List[RDSAvailabilityZone]
    MultiAZCapable: bool
    ReadReplicaCapable: bool
    Vpc: bool
    SupportsStorageEncryption: bool
    StorageType: str
    SupportsIops: bool
    SupportsEnhancedMonitoring: bool
    SupportsIAMDatabaseAuthentication: bool
    SupportsPerformanceInsights: bool
    MinStorageSize: int
    MaxStorageSize: int
    MinIopsPerDbInstance: int
    MaxIopsPerDbInstance: int
    MinIopsPerGib: float
    MaxIopsPerGib: float
    AvailableProcessorFeatures: List[RDSAvailableProcessorFeature]
    SupportedEngineModes: List[str]


class RDSAvailableProcessorFeature(TypedDict, total=False):
    Name: str
    DefaultValue: str
    AllowedValues: str


class RDSPendingMaintenanceActionsMessage(TypedDict, total=False):
    PendingMaintenanceActions: List[RDSResourcePendingMaintenanceActions]
    Marker: str


class RDSReservedDBInstanceMessage(TypedDict, total=False):
    Marker: str
    ReservedDBInstances: List[RDSReservedDBInstance]


class RDSReservedDBInstance(TypedDict, total=False):
    ReservedDBInstanceId: str
    ReservedDBInstancesOfferingId: str
    DBInstanceClass: str
    StartTime: datetime.datetime
    Duration: int
    FixedPrice: float
    UsagePrice: float
    CurrencyCode: str
    DBInstanceCount: int
    ProductDescription: str
    OfferingType: str
    MultiAZ: bool
    State: str
    RecurringCharges: List[RDSRecurringCharge]
    ReservedDBInstanceArn: str


class RDSRecurringCharge(TypedDict, total=False):
    RecurringChargeAmount: float
    RecurringChargeFrequency: str


class RDSReservedDBInstancesOfferingMessage(TypedDict, total=False):
    Marker: str
    ReservedDBInstancesOfferings: List[RDSReservedDBInstancesOffering]


class RDSReservedDBInstancesOffering(TypedDict, total=False):
    ReservedDBInstancesOfferingId: str
    DBInstanceClass: str
    Duration: int
    FixedPrice: float
    UsagePrice: float
    CurrencyCode: str
    ProductDescription: str
    OfferingType: str
    MultiAZ: bool
    RecurringCharges: List[RDSRecurringCharge]


class RDSSourceRegionMessage(TypedDict, total=False):
    Marker: str
    SourceRegions: List[RDSSourceRegion]


class RDSSourceRegion(TypedDict, total=False):
    RegionName: str
    Endpoint: str
    Status: str


class RDSDescribeValidDBInstanceModificationsResult(TypedDict, total=False):
    ValidDBInstanceModificationsMessage: RDSValidDBInstanceModificationsMessage


class RDSValidDBInstanceModificationsMessage(TypedDict, total=False):
    Storage: List[RDSValidStorageOptions]
    ValidProcessorFeatures: List[RDSAvailableProcessorFeature]


class RDSValidStorageOptions(TypedDict, total=False):
    StorageType: str
    StorageSize: List[RDSRange]
    ProvisionedIops: List[RDSRange]
    IopsToStorageRatio: List[RDSDoubleRange]


class RDSRange(TypedDict, total=False):
    From: int
    To: int
    Step: int


class RDSDoubleRange(TypedDict, total=False):
    From: float
    To: float


class RDSDownloadDBLogFilePortionDetails(TypedDict, total=False):
    LogFileData: str
    Marker: str
    AdditionalDataPending: bool


class RDSFailoverDBClusterResult(TypedDict, total=False):
    DBCluster: RDSDBCluster


class RDSTagListMessage(TypedDict, total=False):
    TagList: List[RDSTag]


class RDSDBClusterCapacityInfo(TypedDict, total=False):
    DBClusterIdentifier: str
    PendingCapacity: int
    CurrentCapacity: int
    SecondsBeforeTimeout: int
    TimeoutAction: str


class RDSCloudwatchLogsExportConfiguration(TypedDict, total=False):
    EnableLogTypes: List[str]
    DisableLogTypes: List[str]


class RDSModifyDBClusterResult(TypedDict, total=False):
    DBCluster: RDSDBCluster


class RDSDBClusterParameterGroupNameMessage(TypedDict, total=False):
    DBClusterParameterGroupName: str


class RDSModifyDBClusterSnapshotAttributeResult(TypedDict, total=False):
    DBClusterSnapshotAttributesResult: RDSDBClusterSnapshotAttributesResult


class RDSModifyDBInstanceResult(TypedDict, total=False):
    DBInstance: RDSDBInstance


class RDSDBParameterGroupNameMessage(TypedDict, total=False):
    DBParameterGroupName: str


class RDSModifyDBSnapshotResult(TypedDict, total=False):
    DBSnapshot: RDSDBSnapshot


class RDSModifyDBSnapshotAttributeResult(TypedDict, total=False):
    DBSnapshotAttributesResult: RDSDBSnapshotAttributesResult


class RDSModifyDBSubnetGroupResult(TypedDict, total=False):
    DBSubnetGroup: RDSDBSubnetGroup


class RDSModifyEventSubscriptionResult(TypedDict, total=False):
    EventSubscription: RDSEventSubscription


class RDSModifyGlobalClusterResult(TypedDict, total=False):
    GlobalCluster: RDSGlobalCluster


class _RDSOptionConfiguration(TypedDict):
    OptionName: str


class RDSOptionConfiguration(_RDSOptionConfiguration, total=False):
    Port: int
    OptionVersion: str
    DBSecurityGroupMemberships: List[str]
    VpcSecurityGroupMemberships: List[str]
    OptionSettings: List[RDSOptionSetting]


class RDSModifyOptionGroupResult(TypedDict, total=False):
    OptionGroup: RDSOptionGroup


class RDSPromoteReadReplicaResult(TypedDict, total=False):
    DBInstance: RDSDBInstance


class RDSPromoteReadReplicaDBClusterResult(TypedDict, total=False):
    DBCluster: RDSDBCluster


class RDSPurchaseReservedDBInstancesOfferingResult(TypedDict, total=False):
    ReservedDBInstance: RDSReservedDBInstance


class RDSRebootDBInstanceResult(TypedDict, total=False):
    DBInstance: RDSDBInstance


class RDSRemoveFromGlobalClusterResult(TypedDict, total=False):
    GlobalCluster: RDSGlobalCluster


class RDSRemoveSourceIdentifierFromSubscriptionResult(TypedDict, total=False):
    EventSubscription: RDSEventSubscription


class RDSRestoreDBClusterFromS3Result(TypedDict, total=False):
    DBCluster: RDSDBCluster


class RDSRestoreDBClusterFromSnapshotResult(TypedDict, total=False):
    DBCluster: RDSDBCluster


class RDSRestoreDBClusterToPointInTimeResult(TypedDict, total=False):
    DBCluster: RDSDBCluster


class RDSRestoreDBInstanceFromDBSnapshotResult(TypedDict, total=False):
    DBInstance: RDSDBInstance


class RDSRestoreDBInstanceFromS3Result(TypedDict, total=False):
    DBInstance: RDSDBInstance


class RDSRestoreDBInstanceToPointInTimeResult(TypedDict, total=False):
    DBInstance: RDSDBInstance


class RDSRevokeDBSecurityGroupIngressResult(TypedDict, total=False):
    DBSecurityGroup: RDSDBSecurityGroup


class RDSStartDBClusterResult(TypedDict, total=False):
    DBCluster: RDSDBCluster


class RDSStartDBInstanceResult(TypedDict, total=False):
    DBInstance: RDSDBInstance


class RDSStopDBClusterResult(TypedDict, total=False):
    DBCluster: RDSDBCluster


class RDSStopDBInstanceResult(TypedDict, total=False):
    DBInstance: RDSDBInstance


class RDSDataService(BaseClient):
    def execute_sql(self, *,
        awsSecretStoreArn: str,
        dbClusterOrInstanceArn: str,
        sqlStatements: str,
        database: str = ...,
        schema: str = ...
    ) -> RDSDataServiceExecuteSqlResponse: ...


class RDSDataServiceExecuteSqlResponse(TypedDict):
    sqlStatementResults: List[RDSDataServiceSqlStatementResult]


class RDSDataServiceSqlStatementResult(TypedDict, total=False):
    numberOfRecordsUpdated: int
    resultFrame: RDSDataServiceResultFrame


class RDSDataServiceResultFrame(TypedDict, total=False):
    records: List[RDSDataServiceRecord]
    resultSetMetadata: RDSDataServiceResultSetMetadata


class RDSDataServiceRecord(TypedDict, total=False):
    values: List[RDSDataServiceValue]


class RDSDataServiceValue(TypedDict, total=False):
    arrayValues: List[RDSDataServiceValue]
    bigIntValue: int
    bitValue: bool
    blobValue: bytes
    doubleValue: float
    intValue: int
    isNull: bool
    realValue: float
    stringValue: str
    structValue: RDSDataServiceStructValue


class RDSDataServiceStructValue(TypedDict, total=False):
    attributes: List[RDSDataServiceValue]


class RDSDataServiceResultSetMetadata(TypedDict, total=False):
    columnCount: int
    columnMetadata: List[RDSDataServiceColumnMetadata]


class RDSDataServiceColumnMetadata(TypedDict, total=False):
    arrayBaseColumnType: int
    isAutoIncrement: bool
    isCaseSensitive: bool
    isCurrency: bool
    isSigned: bool
    label: str
    name: str
    nullable: int
    precision: int
    scale: int
    schemaName: str
    tableName: str
    type: int
    typeName: str


class Redshift(BaseClient):
    def accept_reserved_node_exchange(self, *,
        ReservedNodeId: str,
        TargetReservedNodeOfferingId: str
    ) -> RedshiftAcceptReservedNodeExchangeOutputMessage: ...

    def authorize_cluster_security_group_ingress(self, *,
        ClusterSecurityGroupName: str,
        CIDRIP: str = ...,
        EC2SecurityGroupName: str = ...,
        EC2SecurityGroupOwnerId: str = ...
    ) -> RedshiftAuthorizeClusterSecurityGroupIngressResult: ...

    def authorize_snapshot_access(self, *,
        SnapshotIdentifier: str,
        AccountWithRestoreAccess: str,
        SnapshotClusterIdentifier: str = ...
    ) -> RedshiftAuthorizeSnapshotAccessResult: ...

    def batch_delete_cluster_snapshots(self, *,
        Identifiers: List[RedshiftDeleteClusterSnapshotMessage]
    ) -> RedshiftBatchDeleteClusterSnapshotsResult: ...

    def batch_modify_cluster_snapshots(self, *,
        SnapshotIdentifierList: List[str],
        ManualSnapshotRetentionPeriod: int = ...,
        Force: bool = ...
    ) -> RedshiftBatchModifyClusterSnapshotsOutputMessage: ...

    def cancel_resize(self, *,
        ClusterIdentifier: str
    ) -> RedshiftResizeProgressMessage: ...

    def copy_cluster_snapshot(self, *,
        SourceSnapshotIdentifier: str,
        TargetSnapshotIdentifier: str,
        SourceSnapshotClusterIdentifier: str = ...,
        ManualSnapshotRetentionPeriod: int = ...
    ) -> RedshiftCopyClusterSnapshotResult: ...

    def create_cluster(self, *,
        ClusterIdentifier: str,
        NodeType: str,
        MasterUsername: str,
        MasterUserPassword: str,
        DBName: str = ...,
        ClusterType: str = ...,
        ClusterSecurityGroups: List[str] = ...,
        VpcSecurityGroupIds: List[str] = ...,
        ClusterSubnetGroupName: str = ...,
        AvailabilityZone: str = ...,
        PreferredMaintenanceWindow: str = ...,
        ClusterParameterGroupName: str = ...,
        AutomatedSnapshotRetentionPeriod: int = ...,
        ManualSnapshotRetentionPeriod: int = ...,
        Port: int = ...,
        ClusterVersion: str = ...,
        AllowVersionUpgrade: bool = ...,
        NumberOfNodes: int = ...,
        PubliclyAccessible: bool = ...,
        Encrypted: bool = ...,
        HsmClientCertificateIdentifier: str = ...,
        HsmConfigurationIdentifier: str = ...,
        ElasticIp: str = ...,
        Tags: List[RedshiftTag] = ...,
        KmsKeyId: str = ...,
        EnhancedVpcRouting: bool = ...,
        AdditionalInfo: str = ...,
        IamRoles: List[str] = ...,
        MaintenanceTrackName: str = ...,
        SnapshotScheduleIdentifier: str = ...
    ) -> RedshiftCreateClusterResult: ...

    def create_cluster_parameter_group(self, *,
        ParameterGroupName: str,
        ParameterGroupFamily: str,
        Description: str,
        Tags: List[RedshiftTag] = ...
    ) -> RedshiftCreateClusterParameterGroupResult: ...

    def create_cluster_security_group(self, *,
        ClusterSecurityGroupName: str,
        Description: str,
        Tags: List[RedshiftTag] = ...
    ) -> RedshiftCreateClusterSecurityGroupResult: ...

    def create_cluster_snapshot(self, *,
        SnapshotIdentifier: str,
        ClusterIdentifier: str,
        ManualSnapshotRetentionPeriod: int = ...,
        Tags: List[RedshiftTag] = ...
    ) -> RedshiftCreateClusterSnapshotResult: ...

    def create_cluster_subnet_group(self, *,
        ClusterSubnetGroupName: str,
        Description: str,
        SubnetIds: List[str],
        Tags: List[RedshiftTag] = ...
    ) -> RedshiftCreateClusterSubnetGroupResult: ...

    def create_event_subscription(self, *,
        SubscriptionName: str,
        SnsTopicArn: str,
        SourceType: str = ...,
        SourceIds: List[str] = ...,
        EventCategories: List[str] = ...,
        Severity: str = ...,
        Enabled: bool = ...,
        Tags: List[RedshiftTag] = ...
    ) -> RedshiftCreateEventSubscriptionResult: ...

    def create_hsm_client_certificate(self, *,
        HsmClientCertificateIdentifier: str,
        Tags: List[RedshiftTag] = ...
    ) -> RedshiftCreateHsmClientCertificateResult: ...

    def create_hsm_configuration(self, *,
        HsmConfigurationIdentifier: str,
        Description: str,
        HsmIpAddress: str,
        HsmPartitionName: str,
        HsmPartitionPassword: str,
        HsmServerPublicCertificate: str,
        Tags: List[RedshiftTag] = ...
    ) -> RedshiftCreateHsmConfigurationResult: ...

    def create_snapshot_copy_grant(self, *,
        SnapshotCopyGrantName: str,
        KmsKeyId: str = ...,
        Tags: List[RedshiftTag] = ...
    ) -> RedshiftCreateSnapshotCopyGrantResult: ...

    def create_snapshot_schedule(self, *,
        ScheduleDefinitions: List[str] = ...,
        ScheduleIdentifier: str = ...,
        ScheduleDescription: str = ...,
        Tags: List[RedshiftTag] = ...,
        DryRun: bool = ...,
        NextInvocations: int = ...
    ) -> RedshiftSnapshotSchedule: ...

    def create_tags(self, *,
        ResourceName: str,
        Tags: List[RedshiftTag]
    ): ...

    def delete_cluster(self, *,
        ClusterIdentifier: str,
        SkipFinalClusterSnapshot: bool = ...,
        FinalClusterSnapshotIdentifier: str = ...,
        FinalClusterSnapshotRetentionPeriod: int = ...
    ) -> RedshiftDeleteClusterResult: ...

    def delete_cluster_parameter_group(self, *,
        ParameterGroupName: str
    ): ...

    def delete_cluster_security_group(self, *,
        ClusterSecurityGroupName: str
    ): ...

    def delete_cluster_snapshot(self, *,
        SnapshotIdentifier: str,
        SnapshotClusterIdentifier: str = ...
    ) -> RedshiftDeleteClusterSnapshotResult: ...

    def delete_cluster_subnet_group(self, *,
        ClusterSubnetGroupName: str
    ): ...

    def delete_event_subscription(self, *,
        SubscriptionName: str
    ): ...

    def delete_hsm_client_certificate(self, *,
        HsmClientCertificateIdentifier: str
    ): ...

    def delete_hsm_configuration(self, *,
        HsmConfigurationIdentifier: str
    ): ...

    def delete_snapshot_copy_grant(self, *,
        SnapshotCopyGrantName: str
    ): ...

    def delete_snapshot_schedule(self, *,
        ScheduleIdentifier: str
    ): ...

    def delete_tags(self, *,
        ResourceName: str,
        TagKeys: List[str]
    ): ...

    def describe_account_attributes(self, *,
        AttributeNames: List[str] = ...
    ) -> RedshiftAccountAttributeList: ...

    def describe_cluster_db_revisions(self, *,
        ClusterIdentifier: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RedshiftClusterDbRevisionsMessage: ...

    def describe_cluster_parameter_groups(self, *,
        ParameterGroupName: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        TagKeys: List[str] = ...,
        TagValues: List[str] = ...
    ) -> RedshiftClusterParameterGroupsMessage: ...

    def describe_cluster_parameters(self, *,
        ParameterGroupName: str,
        Source: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RedshiftClusterParameterGroupDetails: ...

    def describe_cluster_security_groups(self, *,
        ClusterSecurityGroupName: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        TagKeys: List[str] = ...,
        TagValues: List[str] = ...
    ) -> RedshiftClusterSecurityGroupMessage: ...

    def describe_cluster_snapshots(self, *,
        ClusterIdentifier: str = ...,
        SnapshotIdentifier: str = ...,
        SnapshotType: str = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        OwnerAccount: str = ...,
        TagKeys: List[str] = ...,
        TagValues: List[str] = ...,
        ClusterExists: bool = ...,
        SortingEntities: List[RedshiftSnapshotSortingEntity] = ...
    ) -> RedshiftSnapshotMessage: ...

    def describe_cluster_subnet_groups(self, *,
        ClusterSubnetGroupName: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        TagKeys: List[str] = ...,
        TagValues: List[str] = ...
    ) -> RedshiftClusterSubnetGroupMessage: ...

    def describe_cluster_tracks(self, *,
        MaintenanceTrackName: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RedshiftTrackListMessage: ...

    def describe_cluster_versions(self, *,
        ClusterVersion: str = ...,
        ClusterParameterGroupFamily: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RedshiftClusterVersionsMessage: ...

    def describe_clusters(self, *,
        ClusterIdentifier: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        TagKeys: List[str] = ...,
        TagValues: List[str] = ...
    ) -> RedshiftClustersMessage: ...

    def describe_default_cluster_parameters(self, *,
        ParameterGroupFamily: str,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RedshiftDescribeDefaultClusterParametersResult: ...

    def describe_event_categories(self, *,
        SourceType: str = ...
    ) -> RedshiftEventCategoriesMessage: ...

    def describe_event_subscriptions(self, *,
        SubscriptionName: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        TagKeys: List[str] = ...,
        TagValues: List[str] = ...
    ) -> RedshiftEventSubscriptionsMessage: ...

    def describe_events(self, *,
        SourceIdentifier: str = ...,
        SourceType: str = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        Duration: int = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RedshiftEventsMessage: ...

    def describe_hsm_client_certificates(self, *,
        HsmClientCertificateIdentifier: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        TagKeys: List[str] = ...,
        TagValues: List[str] = ...
    ) -> RedshiftHsmClientCertificateMessage: ...

    def describe_hsm_configurations(self, *,
        HsmConfigurationIdentifier: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        TagKeys: List[str] = ...,
        TagValues: List[str] = ...
    ) -> RedshiftHsmConfigurationMessage: ...

    def describe_logging_status(self, *,
        ClusterIdentifier: str
    ) -> RedshiftLoggingStatus: ...

    def describe_orderable_cluster_options(self, *,
        ClusterVersion: str = ...,
        NodeType: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RedshiftOrderableClusterOptionsMessage: ...

    def describe_reserved_node_offerings(self, *,
        ReservedNodeOfferingId: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RedshiftReservedNodeOfferingsMessage: ...

    def describe_reserved_nodes(self, *,
        ReservedNodeId: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RedshiftReservedNodesMessage: ...

    def describe_resize(self, *,
        ClusterIdentifier: str
    ) -> RedshiftResizeProgressMessage: ...

    def describe_snapshot_copy_grants(self, *,
        SnapshotCopyGrantName: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        TagKeys: List[str] = ...,
        TagValues: List[str] = ...
    ) -> RedshiftSnapshotCopyGrantMessage: ...

    def describe_snapshot_schedules(self, *,
        ClusterIdentifier: str = ...,
        ScheduleIdentifier: str = ...,
        TagKeys: List[str] = ...,
        TagValues: List[str] = ...,
        Marker: str = ...,
        MaxRecords: int = ...
    ) -> RedshiftDescribeSnapshotSchedulesOutputMessage: ...

    def describe_storage(self) -> RedshiftCustomerStorageMessage: ...

    def describe_table_restore_status(self, *,
        ClusterIdentifier: str = ...,
        TableRestoreRequestId: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RedshiftTableRestoreStatusMessage: ...

    def describe_tags(self, *,
        ResourceName: str = ...,
        ResourceType: str = ...,
        MaxRecords: int = ...,
        Marker: str = ...,
        TagKeys: List[str] = ...,
        TagValues: List[str] = ...
    ) -> RedshiftTaggedResourceListMessage: ...

    def disable_logging(self, *,
        ClusterIdentifier: str
    ) -> RedshiftLoggingStatus: ...

    def disable_snapshot_copy(self, *,
        ClusterIdentifier: str
    ) -> RedshiftDisableSnapshotCopyResult: ...

    def enable_logging(self, *,
        ClusterIdentifier: str,
        BucketName: str,
        S3KeyPrefix: str = ...
    ) -> RedshiftLoggingStatus: ...

    def enable_snapshot_copy(self, *,
        ClusterIdentifier: str,
        DestinationRegion: str,
        RetentionPeriod: int = ...,
        SnapshotCopyGrantName: str = ...,
        ManualSnapshotRetentionPeriod: int = ...
    ) -> RedshiftEnableSnapshotCopyResult: ...

    def get_cluster_credentials(self, *,
        DbUser: str,
        ClusterIdentifier: str,
        DbName: str = ...,
        DurationSeconds: int = ...,
        AutoCreate: bool = ...,
        DbGroups: List[str] = ...
    ) -> RedshiftClusterCredentials: ...

    def get_reserved_node_exchange_offerings(self, *,
        ReservedNodeId: str,
        MaxRecords: int = ...,
        Marker: str = ...
    ) -> RedshiftGetReservedNodeExchangeOfferingsOutputMessage: ...

    def modify_cluster(self, *,
        ClusterIdentifier: str,
        ClusterType: str = ...,
        NodeType: str = ...,
        NumberOfNodes: int = ...,
        ClusterSecurityGroups: List[str] = ...,
        VpcSecurityGroupIds: List[str] = ...,
        MasterUserPassword: str = ...,
        ClusterParameterGroupName: str = ...,
        AutomatedSnapshotRetentionPeriod: int = ...,
        ManualSnapshotRetentionPeriod: int = ...,
        PreferredMaintenanceWindow: str = ...,
        ClusterVersion: str = ...,
        AllowVersionUpgrade: bool = ...,
        HsmClientCertificateIdentifier: str = ...,
        HsmConfigurationIdentifier: str = ...,
        NewClusterIdentifier: str = ...,
        PubliclyAccessible: bool = ...,
        ElasticIp: str = ...,
        EnhancedVpcRouting: bool = ...,
        MaintenanceTrackName: str = ...,
        Encrypted: bool = ...,
        KmsKeyId: str = ...
    ) -> RedshiftModifyClusterResult: ...

    def modify_cluster_db_revision(self, *,
        ClusterIdentifier: str,
        RevisionTarget: str
    ) -> RedshiftModifyClusterDbRevisionResult: ...

    def modify_cluster_iam_roles(self, *,
        ClusterIdentifier: str,
        AddIamRoles: List[str] = ...,
        RemoveIamRoles: List[str] = ...
    ) -> RedshiftModifyClusterIamRolesResult: ...

    def modify_cluster_maintenance(self, *,
        ClusterIdentifier: str,
        DeferMaintenance: bool = ...,
        DeferMaintenanceIdentifier: str = ...,
        DeferMaintenanceStartTime: datetime.datetime = ...,
        DeferMaintenanceEndTime: datetime.datetime = ...,
        DeferMaintenanceDuration: int = ...
    ) -> RedshiftModifyClusterMaintenanceResult: ...

    def modify_cluster_parameter_group(self, *,
        ParameterGroupName: str,
        Parameters: List[RedshiftParameter]
    ) -> RedshiftClusterParameterGroupNameMessage: ...

    def modify_cluster_snapshot(self, *,
        SnapshotIdentifier: str,
        ManualSnapshotRetentionPeriod: int = ...,
        Force: bool = ...
    ) -> RedshiftModifyClusterSnapshotResult: ...

    def modify_cluster_snapshot_schedule(self, *,
        ClusterIdentifier: str,
        ScheduleIdentifier: str = ...,
        DisassociateSchedule: bool = ...
    ): ...

    def modify_cluster_subnet_group(self, *,
        ClusterSubnetGroupName: str,
        SubnetIds: List[str],
        Description: str = ...
    ) -> RedshiftModifyClusterSubnetGroupResult: ...

    def modify_event_subscription(self, *,
        SubscriptionName: str,
        SnsTopicArn: str = ...,
        SourceType: str = ...,
        SourceIds: List[str] = ...,
        EventCategories: List[str] = ...,
        Severity: str = ...,
        Enabled: bool = ...
    ) -> RedshiftModifyEventSubscriptionResult: ...

    def modify_snapshot_copy_retention_period(self, *,
        ClusterIdentifier: str,
        RetentionPeriod: int,
        Manual: bool = ...
    ) -> RedshiftModifySnapshotCopyRetentionPeriodResult: ...

    def modify_snapshot_schedule(self, *,
        ScheduleIdentifier: str,
        ScheduleDefinitions: List[str]
    ) -> RedshiftSnapshotSchedule: ...

    def purchase_reserved_node_offering(self, *,
        ReservedNodeOfferingId: str,
        NodeCount: int = ...
    ) -> RedshiftPurchaseReservedNodeOfferingResult: ...

    def reboot_cluster(self, *,
        ClusterIdentifier: str
    ) -> RedshiftRebootClusterResult: ...

    def reset_cluster_parameter_group(self, *,
        ParameterGroupName: str,
        ResetAllParameters: bool = ...,
        Parameters: List[RedshiftParameter] = ...
    ) -> RedshiftClusterParameterGroupNameMessage: ...

    def resize_cluster(self, *,
        ClusterIdentifier: str,
        NumberOfNodes: int,
        ClusterType: str = ...,
        NodeType: str = ...,
        Classic: bool = ...
    ) -> RedshiftResizeClusterResult: ...

    def restore_from_cluster_snapshot(self, *,
        ClusterIdentifier: str,
        SnapshotIdentifier: str,
        SnapshotClusterIdentifier: str = ...,
        Port: int = ...,
        AvailabilityZone: str = ...,
        AllowVersionUpgrade: bool = ...,
        ClusterSubnetGroupName: str = ...,
        PubliclyAccessible: bool = ...,
        OwnerAccount: str = ...,
        HsmClientCertificateIdentifier: str = ...,
        HsmConfigurationIdentifier: str = ...,
        ElasticIp: str = ...,
        ClusterParameterGroupName: str = ...,
        ClusterSecurityGroups: List[str] = ...,
        VpcSecurityGroupIds: List[str] = ...,
        PreferredMaintenanceWindow: str = ...,
        AutomatedSnapshotRetentionPeriod: int = ...,
        ManualSnapshotRetentionPeriod: int = ...,
        KmsKeyId: str = ...,
        NodeType: str = ...,
        EnhancedVpcRouting: bool = ...,
        AdditionalInfo: str = ...,
        IamRoles: List[str] = ...,
        MaintenanceTrackName: str = ...,
        SnapshotScheduleIdentifier: str = ...
    ) -> RedshiftRestoreFromClusterSnapshotResult: ...

    def restore_table_from_cluster_snapshot(self, *,
        ClusterIdentifier: str,
        SnapshotIdentifier: str,
        SourceDatabaseName: str,
        SourceTableName: str,
        NewTableName: str,
        SourceSchemaName: str = ...,
        TargetDatabaseName: str = ...,
        TargetSchemaName: str = ...
    ) -> RedshiftRestoreTableFromClusterSnapshotResult: ...

    def revoke_cluster_security_group_ingress(self, *,
        ClusterSecurityGroupName: str,
        CIDRIP: str = ...,
        EC2SecurityGroupName: str = ...,
        EC2SecurityGroupOwnerId: str = ...
    ) -> RedshiftRevokeClusterSecurityGroupIngressResult: ...

    def revoke_snapshot_access(self, *,
        SnapshotIdentifier: str,
        AccountWithRestoreAccess: str,
        SnapshotClusterIdentifier: str = ...
    ) -> RedshiftRevokeSnapshotAccessResult: ...

    def rotate_encryption_key(self, *,
        ClusterIdentifier: str
    ) -> RedshiftRotateEncryptionKeyResult: ...


class RedshiftAcceptReservedNodeExchangeOutputMessage(TypedDict, total=False):
    ExchangedReservedNode: RedshiftReservedNode


class RedshiftReservedNode(TypedDict, total=False):
    ReservedNodeId: str
    ReservedNodeOfferingId: str
    NodeType: str
    StartTime: datetime.datetime
    Duration: int
    FixedPrice: float
    UsagePrice: float
    CurrencyCode: str
    NodeCount: int
    State: str
    OfferingType: str
    RecurringCharges: List[RedshiftRecurringCharge]
    ReservedNodeOfferingType: str


class RedshiftRecurringCharge(TypedDict, total=False):
    RecurringChargeAmount: float
    RecurringChargeFrequency: str


class RedshiftAuthorizeClusterSecurityGroupIngressResult(TypedDict, total=False):
    ClusterSecurityGroup: RedshiftClusterSecurityGroup


class RedshiftClusterSecurityGroup(TypedDict, total=False):
    ClusterSecurityGroupName: str
    Description: str
    EC2SecurityGroups: List[RedshiftEC2SecurityGroup]
    IPRanges: List[RedshiftIPRange]
    Tags: List[RedshiftTag]


class RedshiftEC2SecurityGroup(TypedDict, total=False):
    Status: str
    EC2SecurityGroupName: str
    EC2SecurityGroupOwnerId: str
    Tags: List[RedshiftTag]


class RedshiftTag(TypedDict, total=False):
    Key: str
    Value: str


class RedshiftIPRange(TypedDict, total=False):
    Status: str
    CIDRIP: str
    Tags: List[RedshiftTag]


class RedshiftAuthorizeSnapshotAccessResult(TypedDict, total=False):
    Snapshot: RedshiftSnapshot


class RedshiftSnapshot(TypedDict, total=False):
    SnapshotIdentifier: str
    ClusterIdentifier: str
    SnapshotCreateTime: datetime.datetime
    Status: str
    Port: int
    AvailabilityZone: str
    ClusterCreateTime: datetime.datetime
    MasterUsername: str
    ClusterVersion: str
    SnapshotType: str
    NodeType: str
    NumberOfNodes: int
    DBName: str
    VpcId: str
    Encrypted: bool
    KmsKeyId: str
    EncryptedWithHSM: bool
    AccountsWithRestoreAccess: List[RedshiftAccountWithRestoreAccess]
    OwnerAccount: str
    TotalBackupSizeInMegaBytes: float
    ActualIncrementalBackupSizeInMegaBytes: float
    BackupProgressInMegaBytes: float
    CurrentBackupRateInMegaBytesPerSecond: float
    EstimatedSecondsToCompletion: int
    ElapsedTimeInSeconds: int
    SourceRegion: str
    Tags: List[RedshiftTag]
    RestorableNodeTypes: List[str]
    EnhancedVpcRouting: bool
    MaintenanceTrackName: str
    ManualSnapshotRetentionPeriod: int
    ManualSnapshotRemainingDays: int
    SnapshotRetentionStartTime: datetime.datetime


class RedshiftAccountWithRestoreAccess(TypedDict, total=False):
    AccountId: str
    AccountAlias: str


class _RedshiftDeleteClusterSnapshotMessage(TypedDict):
    SnapshotIdentifier: str


class RedshiftDeleteClusterSnapshotMessage(_RedshiftDeleteClusterSnapshotMessage, total=False):
    SnapshotClusterIdentifier: str


class RedshiftBatchDeleteClusterSnapshotsResult(TypedDict, total=False):
    Resources: List[str]
    Errors: List[RedshiftSnapshotErrorMessage]


class RedshiftSnapshotErrorMessage(TypedDict, total=False):
    SnapshotIdentifier: str
    SnapshotClusterIdentifier: str
    FailureCode: str
    FailureReason: str


class RedshiftBatchModifyClusterSnapshotsOutputMessage(TypedDict, total=False):
    Resources: List[str]
    Errors: List[RedshiftSnapshotErrorMessage]


class RedshiftResizeProgressMessage(TypedDict, total=False):
    TargetNodeType: str
    TargetNumberOfNodes: int
    TargetClusterType: str
    Status: str
    ImportTablesCompleted: List[str]
    ImportTablesInProgress: List[str]
    ImportTablesNotStarted: List[str]
    AvgResizeRateInMegaBytesPerSecond: float
    TotalResizeDataInMegaBytes: int
    ProgressInMegaBytes: int
    ElapsedTimeInSeconds: int
    EstimatedTimeToCompletionInSeconds: int
    ResizeType: str
    Message: str
    TargetEncryptionType: str
    DataTransferProgressPercent: float


class RedshiftCopyClusterSnapshotResult(TypedDict, total=False):
    Snapshot: RedshiftSnapshot


class RedshiftCreateClusterResult(TypedDict, total=False):
    Cluster: RedshiftCluster


class RedshiftCluster(TypedDict, total=False):
    ClusterIdentifier: str
    NodeType: str
    ClusterStatus: str
    ModifyStatus: str
    MasterUsername: str
    DBName: str
    Endpoint: RedshiftEndpoint
    ClusterCreateTime: datetime.datetime
    AutomatedSnapshotRetentionPeriod: int
    ManualSnapshotRetentionPeriod: int
    ClusterSecurityGroups: List[RedshiftClusterSecurityGroupMembership]
    VpcSecurityGroups: List[RedshiftVpcSecurityGroupMembership]
    ClusterParameterGroups: List[RedshiftClusterParameterGroupStatus]
    ClusterSubnetGroupName: str
    VpcId: str
    AvailabilityZone: str
    PreferredMaintenanceWindow: str
    PendingModifiedValues: RedshiftPendingModifiedValues
    ClusterVersion: str
    AllowVersionUpgrade: bool
    NumberOfNodes: int
    PubliclyAccessible: bool
    Encrypted: bool
    RestoreStatus: RedshiftRestoreStatus
    DataTransferProgress: RedshiftDataTransferProgress
    HsmStatus: RedshiftHsmStatus
    ClusterSnapshotCopyStatus: RedshiftClusterSnapshotCopyStatus
    ClusterPublicKey: str
    ClusterNodes: List[RedshiftClusterNode]
    ElasticIpStatus: RedshiftElasticIpStatus
    ClusterRevisionNumber: str
    Tags: List[RedshiftTag]
    KmsKeyId: str
    EnhancedVpcRouting: bool
    IamRoles: List[RedshiftClusterIamRole]
    PendingActions: List[str]
    MaintenanceTrackName: str
    ElasticResizeNumberOfNodeOptions: str
    DeferredMaintenanceWindows: List[RedshiftDeferredMaintenanceWindow]
    SnapshotScheduleIdentifier: str
    SnapshotScheduleState: str
    ResizeInfo: RedshiftResizeInfo


class RedshiftEndpoint(TypedDict, total=False):
    Address: str
    Port: int


class RedshiftClusterSecurityGroupMembership(TypedDict, total=False):
    ClusterSecurityGroupName: str
    Status: str


class RedshiftVpcSecurityGroupMembership(TypedDict, total=False):
    VpcSecurityGroupId: str
    Status: str


class RedshiftClusterParameterGroupStatus(TypedDict, total=False):
    ParameterGroupName: str
    ParameterApplyStatus: str
    ClusterParameterStatusList: List[RedshiftClusterParameterStatus]


class RedshiftClusterParameterStatus(TypedDict, total=False):
    ParameterName: str
    ParameterApplyStatus: str
    ParameterApplyErrorDescription: str


class RedshiftPendingModifiedValues(TypedDict, total=False):
    MasterUserPassword: str
    NodeType: str
    NumberOfNodes: int
    ClusterType: str
    ClusterVersion: str
    AutomatedSnapshotRetentionPeriod: int
    ClusterIdentifier: str
    PubliclyAccessible: bool
    EnhancedVpcRouting: bool
    MaintenanceTrackName: str
    EncryptionType: str


class RedshiftRestoreStatus(TypedDict, total=False):
    Status: str
    CurrentRestoreRateInMegaBytesPerSecond: float
    SnapshotSizeInMegaBytes: int
    ProgressInMegaBytes: int
    ElapsedTimeInSeconds: int
    EstimatedTimeToCompletionInSeconds: int


class RedshiftDataTransferProgress(TypedDict, total=False):
    Status: str
    CurrentRateInMegaBytesPerSecond: float
    TotalDataInMegaBytes: int
    DataTransferredInMegaBytes: int
    EstimatedTimeToCompletionInSeconds: int
    ElapsedTimeInSeconds: int


class RedshiftHsmStatus(TypedDict, total=False):
    HsmClientCertificateIdentifier: str
    HsmConfigurationIdentifier: str
    Status: str


class RedshiftClusterSnapshotCopyStatus(TypedDict, total=False):
    DestinationRegion: str
    RetentionPeriod: int
    ManualSnapshotRetentionPeriod: int
    SnapshotCopyGrantName: str


class RedshiftClusterNode(TypedDict, total=False):
    NodeRole: str
    PrivateIPAddress: str
    PublicIPAddress: str


class RedshiftElasticIpStatus(TypedDict, total=False):
    ElasticIp: str
    Status: str


class RedshiftClusterIamRole(TypedDict, total=False):
    IamRoleArn: str
    ApplyStatus: str


class RedshiftDeferredMaintenanceWindow(TypedDict, total=False):
    DeferMaintenanceIdentifier: str
    DeferMaintenanceStartTime: datetime.datetime
    DeferMaintenanceEndTime: datetime.datetime


class RedshiftResizeInfo(TypedDict, total=False):
    ResizeType: str
    AllowCancelResize: bool


class RedshiftCreateClusterParameterGroupResult(TypedDict, total=False):
    ClusterParameterGroup: RedshiftClusterParameterGroup


class RedshiftClusterParameterGroup(TypedDict, total=False):
    ParameterGroupName: str
    ParameterGroupFamily: str
    Description: str
    Tags: List[RedshiftTag]


class RedshiftCreateClusterSecurityGroupResult(TypedDict, total=False):
    ClusterSecurityGroup: RedshiftClusterSecurityGroup


class RedshiftCreateClusterSnapshotResult(TypedDict, total=False):
    Snapshot: RedshiftSnapshot


class RedshiftCreateClusterSubnetGroupResult(TypedDict, total=False):
    ClusterSubnetGroup: RedshiftClusterSubnetGroup


class RedshiftClusterSubnetGroup(TypedDict, total=False):
    ClusterSubnetGroupName: str
    Description: str
    VpcId: str
    SubnetGroupStatus: str
    Subnets: List[RedshiftSubnet]
    Tags: List[RedshiftTag]


class RedshiftSubnet(TypedDict, total=False):
    SubnetIdentifier: str
    SubnetAvailabilityZone: RedshiftAvailabilityZone
    SubnetStatus: str


class RedshiftAvailabilityZone(TypedDict, total=False):
    Name: str
    SupportedPlatforms: List[RedshiftSupportedPlatform]


class RedshiftSupportedPlatform(TypedDict, total=False):
    Name: str


class RedshiftCreateEventSubscriptionResult(TypedDict, total=False):
    EventSubscription: RedshiftEventSubscription


class RedshiftEventSubscription(TypedDict, total=False):
    CustomerAwsId: str
    CustSubscriptionId: str
    SnsTopicArn: str
    Status: str
    SubscriptionCreationTime: datetime.datetime
    SourceType: str
    SourceIdsList: List[str]
    EventCategoriesList: List[str]
    Severity: str
    Enabled: bool
    Tags: List[RedshiftTag]


class RedshiftCreateHsmClientCertificateResult(TypedDict, total=False):
    HsmClientCertificate: RedshiftHsmClientCertificate


class RedshiftHsmClientCertificate(TypedDict, total=False):
    HsmClientCertificateIdentifier: str
    HsmClientCertificatePublicKey: str
    Tags: List[RedshiftTag]


class RedshiftCreateHsmConfigurationResult(TypedDict, total=False):
    HsmConfiguration: RedshiftHsmConfiguration


class RedshiftHsmConfiguration(TypedDict, total=False):
    HsmConfigurationIdentifier: str
    Description: str
    HsmIpAddress: str
    HsmPartitionName: str
    Tags: List[RedshiftTag]


class RedshiftCreateSnapshotCopyGrantResult(TypedDict, total=False):
    SnapshotCopyGrant: RedshiftSnapshotCopyGrant


class RedshiftSnapshotCopyGrant(TypedDict, total=False):
    SnapshotCopyGrantName: str
    KmsKeyId: str
    Tags: List[RedshiftTag]


class RedshiftSnapshotSchedule(TypedDict, total=False):
    ScheduleDefinitions: List[str]
    ScheduleIdentifier: str
    ScheduleDescription: str
    Tags: List[RedshiftTag]
    NextInvocations: List[datetime.datetime]
    AssociatedClusterCount: int
    AssociatedClusters: List[RedshiftClusterAssociatedToSchedule]


class RedshiftClusterAssociatedToSchedule(TypedDict, total=False):
    ClusterIdentifier: str
    ScheduleAssociationState: str


class RedshiftDeleteClusterResult(TypedDict, total=False):
    Cluster: RedshiftCluster


class RedshiftDeleteClusterSnapshotResult(TypedDict, total=False):
    Snapshot: RedshiftSnapshot


class RedshiftAccountAttributeList(TypedDict, total=False):
    AccountAttributes: List[RedshiftAccountAttribute]


class RedshiftAccountAttribute(TypedDict, total=False):
    AttributeName: str
    AttributeValues: List[RedshiftAttributeValueTarget]


class RedshiftAttributeValueTarget(TypedDict, total=False):
    AttributeValue: str


class RedshiftClusterDbRevisionsMessage(TypedDict, total=False):
    Marker: str
    ClusterDbRevisions: List[RedshiftClusterDbRevision]


class RedshiftClusterDbRevision(TypedDict, total=False):
    ClusterIdentifier: str
    CurrentDatabaseRevision: str
    DatabaseRevisionReleaseDate: datetime.datetime
    RevisionTargets: List[RedshiftRevisionTarget]


class RedshiftRevisionTarget(TypedDict, total=False):
    DatabaseRevision: str
    Description: str
    DatabaseRevisionReleaseDate: datetime.datetime


class RedshiftClusterParameterGroupsMessage(TypedDict, total=False):
    Marker: str
    ParameterGroups: List[RedshiftClusterParameterGroup]


class RedshiftClusterParameterGroupDetails(TypedDict, total=False):
    Parameters: List[RedshiftParameter]
    Marker: str


class RedshiftParameter(TypedDict, total=False):
    ParameterName: str
    ParameterValue: str
    Description: str
    Source: str
    DataType: str
    AllowedValues: str
    ApplyType: str
    IsModifiable: bool
    MinimumEngineVersion: str


class RedshiftClusterSecurityGroupMessage(TypedDict, total=False):
    Marker: str
    ClusterSecurityGroups: List[RedshiftClusterSecurityGroup]


class _RedshiftSnapshotSortingEntity(TypedDict):
    Attribute: str


class RedshiftSnapshotSortingEntity(_RedshiftSnapshotSortingEntity, total=False):
    SortOrder: str


class RedshiftSnapshotMessage(TypedDict, total=False):
    Marker: str
    Snapshots: List[RedshiftSnapshot]


class RedshiftClusterSubnetGroupMessage(TypedDict, total=False):
    Marker: str
    ClusterSubnetGroups: List[RedshiftClusterSubnetGroup]


class RedshiftTrackListMessage(TypedDict, total=False):
    MaintenanceTracks: List[RedshiftMaintenanceTrack]
    Marker: str


class RedshiftMaintenanceTrack(TypedDict, total=False):
    MaintenanceTrackName: str
    DatabaseVersion: str
    UpdateTargets: List[RedshiftUpdateTarget]


class RedshiftUpdateTarget(TypedDict, total=False):
    MaintenanceTrackName: str
    DatabaseVersion: str
    SupportedOperations: List[RedshiftSupportedOperation]


class RedshiftSupportedOperation(TypedDict, total=False):
    OperationName: str


class RedshiftClusterVersionsMessage(TypedDict, total=False):
    Marker: str
    ClusterVersions: List[RedshiftClusterVersion]


class RedshiftClusterVersion(TypedDict, total=False):
    ClusterVersion: str
    ClusterParameterGroupFamily: str
    Description: str


class RedshiftClustersMessage(TypedDict, total=False):
    Marker: str
    Clusters: List[RedshiftCluster]


class RedshiftDescribeDefaultClusterParametersResult(TypedDict, total=False):
    DefaultClusterParameters: RedshiftDefaultClusterParameters


class RedshiftDefaultClusterParameters(TypedDict, total=False):
    ParameterGroupFamily: str
    Marker: str
    Parameters: List[RedshiftParameter]


class RedshiftEventCategoriesMessage(TypedDict, total=False):
    EventCategoriesMapList: List[RedshiftEventCategoriesMap]


class RedshiftEventCategoriesMap(TypedDict, total=False):
    SourceType: str
    Events: List[RedshiftEventInfoMap]


class RedshiftEventInfoMap(TypedDict, total=False):
    EventId: str
    EventCategories: List[str]
    EventDescription: str
    Severity: str


class RedshiftEventSubscriptionsMessage(TypedDict, total=False):
    Marker: str
    EventSubscriptionsList: List[RedshiftEventSubscription]


class RedshiftEventsMessage(TypedDict, total=False):
    Marker: str
    Events: List[RedshiftEvent]


class RedshiftEvent(TypedDict, total=False):
    SourceIdentifier: str
    SourceType: str
    Message: str
    EventCategories: List[str]
    Severity: str
    Date: datetime.datetime
    EventId: str


class RedshiftHsmClientCertificateMessage(TypedDict, total=False):
    Marker: str
    HsmClientCertificates: List[RedshiftHsmClientCertificate]


class RedshiftHsmConfigurationMessage(TypedDict, total=False):
    Marker: str
    HsmConfigurations: List[RedshiftHsmConfiguration]


class RedshiftLoggingStatus(TypedDict, total=False):
    LoggingEnabled: bool
    BucketName: str
    S3KeyPrefix: str
    LastSuccessfulDeliveryTime: datetime.datetime
    LastFailureTime: datetime.datetime
    LastFailureMessage: str


class RedshiftOrderableClusterOptionsMessage(TypedDict, total=False):
    OrderableClusterOptions: List[RedshiftOrderableClusterOption]
    Marker: str


class RedshiftOrderableClusterOption(TypedDict, total=False):
    ClusterVersion: str
    ClusterType: str
    NodeType: str
    AvailabilityZones: List[RedshiftAvailabilityZone]


class RedshiftReservedNodeOfferingsMessage(TypedDict, total=False):
    Marker: str
    ReservedNodeOfferings: List[RedshiftReservedNodeOffering]


class RedshiftReservedNodeOffering(TypedDict, total=False):
    ReservedNodeOfferingId: str
    NodeType: str
    Duration: int
    FixedPrice: float
    UsagePrice: float
    CurrencyCode: str
    OfferingType: str
    RecurringCharges: List[RedshiftRecurringCharge]
    ReservedNodeOfferingType: str


class RedshiftReservedNodesMessage(TypedDict, total=False):
    Marker: str
    ReservedNodes: List[RedshiftReservedNode]


class RedshiftSnapshotCopyGrantMessage(TypedDict, total=False):
    Marker: str
    SnapshotCopyGrants: List[RedshiftSnapshotCopyGrant]


class RedshiftDescribeSnapshotSchedulesOutputMessage(TypedDict, total=False):
    SnapshotSchedules: List[RedshiftSnapshotSchedule]
    Marker: str


class RedshiftCustomerStorageMessage(TypedDict, total=False):
    TotalBackupSizeInMegaBytes: float
    TotalProvisionedStorageInMegaBytes: float


class RedshiftTableRestoreStatusMessage(TypedDict, total=False):
    TableRestoreStatusDetails: List[RedshiftTableRestoreStatus]
    Marker: str


class RedshiftTableRestoreStatus(TypedDict, total=False):
    TableRestoreRequestId: str
    Status: str
    Message: str
    RequestTime: datetime.datetime
    ProgressInMegaBytes: int
    TotalDataInMegaBytes: int
    ClusterIdentifier: str
    SnapshotIdentifier: str
    SourceDatabaseName: str
    SourceSchemaName: str
    SourceTableName: str
    TargetDatabaseName: str
    TargetSchemaName: str
    NewTableName: str


class RedshiftTaggedResourceListMessage(TypedDict, total=False):
    TaggedResources: List[RedshiftTaggedResource]
    Marker: str


class RedshiftTaggedResource(TypedDict, total=False):
    Tag: RedshiftTag
    ResourceName: str
    ResourceType: str


class RedshiftDisableSnapshotCopyResult(TypedDict, total=False):
    Cluster: RedshiftCluster


class RedshiftEnableSnapshotCopyResult(TypedDict, total=False):
    Cluster: RedshiftCluster


class RedshiftClusterCredentials(TypedDict, total=False):
    DbUser: str
    DbPassword: str
    Expiration: datetime.datetime


class RedshiftGetReservedNodeExchangeOfferingsOutputMessage(TypedDict, total=False):
    Marker: str
    ReservedNodeOfferings: List[RedshiftReservedNodeOffering]


class RedshiftModifyClusterResult(TypedDict, total=False):
    Cluster: RedshiftCluster


class RedshiftModifyClusterDbRevisionResult(TypedDict, total=False):
    Cluster: RedshiftCluster


class RedshiftModifyClusterIamRolesResult(TypedDict, total=False):
    Cluster: RedshiftCluster


class RedshiftModifyClusterMaintenanceResult(TypedDict, total=False):
    Cluster: RedshiftCluster


class RedshiftClusterParameterGroupNameMessage(TypedDict, total=False):
    ParameterGroupName: str
    ParameterGroupStatus: str


class RedshiftModifyClusterSnapshotResult(TypedDict, total=False):
    Snapshot: RedshiftSnapshot


class RedshiftModifyClusterSubnetGroupResult(TypedDict, total=False):
    ClusterSubnetGroup: RedshiftClusterSubnetGroup


class RedshiftModifyEventSubscriptionResult(TypedDict, total=False):
    EventSubscription: RedshiftEventSubscription


class RedshiftModifySnapshotCopyRetentionPeriodResult(TypedDict, total=False):
    Cluster: RedshiftCluster


class RedshiftPurchaseReservedNodeOfferingResult(TypedDict, total=False):
    ReservedNode: RedshiftReservedNode


class RedshiftRebootClusterResult(TypedDict, total=False):
    Cluster: RedshiftCluster


class RedshiftResizeClusterResult(TypedDict, total=False):
    Cluster: RedshiftCluster


class RedshiftRestoreFromClusterSnapshotResult(TypedDict, total=False):
    Cluster: RedshiftCluster


class RedshiftRestoreTableFromClusterSnapshotResult(TypedDict, total=False):
    TableRestoreStatus: RedshiftTableRestoreStatus


class RedshiftRevokeClusterSecurityGroupIngressResult(TypedDict, total=False):
    ClusterSecurityGroup: RedshiftClusterSecurityGroup


class RedshiftRevokeSnapshotAccessResult(TypedDict, total=False):
    Snapshot: RedshiftSnapshot


class RedshiftRotateEncryptionKeyResult(TypedDict, total=False):
    Cluster: RedshiftCluster


class Rekognition(BaseClient):
    def compare_faces(self, *,
        SourceImage: RekognitionImage,
        TargetImage: RekognitionImage,
        SimilarityThreshold: float = ...
    ) -> RekognitionCompareFacesResponse: ...

    def create_collection(self, *,
        CollectionId: str
    ) -> RekognitionCreateCollectionResponse: ...

    def create_stream_processor(self, *,
        Input: RekognitionStreamProcessorInput,
        Output: RekognitionStreamProcessorOutput,
        Name: str,
        Settings: RekognitionStreamProcessorSettings,
        RoleArn: str
    ) -> RekognitionCreateStreamProcessorResponse: ...

    def delete_collection(self, *,
        CollectionId: str
    ) -> RekognitionDeleteCollectionResponse: ...

    def delete_faces(self, *,
        CollectionId: str,
        FaceIds: List[str]
    ) -> RekognitionDeleteFacesResponse: ...

    def delete_stream_processor(self, *,
        Name: str
    ) -> RekognitionDeleteStreamProcessorResponse: ...

    def describe_collection(self, *,
        CollectionId: str
    ) -> RekognitionDescribeCollectionResponse: ...

    def describe_stream_processor(self, *,
        Name: str
    ) -> RekognitionDescribeStreamProcessorResponse: ...

    def detect_faces(self, *,
        Image: RekognitionImage,
        Attributes: List[str] = ...
    ) -> RekognitionDetectFacesResponse: ...

    def detect_labels(self, *,
        Image: RekognitionImage,
        MaxLabels: int = ...,
        MinConfidence: float = ...
    ) -> RekognitionDetectLabelsResponse: ...

    def detect_moderation_labels(self, *,
        Image: RekognitionImage,
        MinConfidence: float = ...
    ) -> RekognitionDetectModerationLabelsResponse: ...

    def detect_text(self, *,
        Image: RekognitionImage
    ) -> RekognitionDetectTextResponse: ...

    def get_celebrity_info(self, *,
        Id: str
    ) -> RekognitionGetCelebrityInfoResponse: ...

    def get_celebrity_recognition(self, *,
        JobId: str,
        MaxResults: int = ...,
        NextToken: str = ...,
        SortBy: str = ...
    ) -> RekognitionGetCelebrityRecognitionResponse: ...

    def get_content_moderation(self, *,
        JobId: str,
        MaxResults: int = ...,
        NextToken: str = ...,
        SortBy: str = ...
    ) -> RekognitionGetContentModerationResponse: ...

    def get_face_detection(self, *,
        JobId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> RekognitionGetFaceDetectionResponse: ...

    def get_face_search(self, *,
        JobId: str,
        MaxResults: int = ...,
        NextToken: str = ...,
        SortBy: str = ...
    ) -> RekognitionGetFaceSearchResponse: ...

    def get_label_detection(self, *,
        JobId: str,
        MaxResults: int = ...,
        NextToken: str = ...,
        SortBy: str = ...
    ) -> RekognitionGetLabelDetectionResponse: ...

    def get_person_tracking(self, *,
        JobId: str,
        MaxResults: int = ...,
        NextToken: str = ...,
        SortBy: str = ...
    ) -> RekognitionGetPersonTrackingResponse: ...

    def index_faces(self, *,
        CollectionId: str,
        Image: RekognitionImage,
        ExternalImageId: str = ...,
        DetectionAttributes: List[str] = ...,
        MaxFaces: int = ...,
        QualityFilter: str = ...
    ) -> RekognitionIndexFacesResponse: ...

    def list_collections(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> RekognitionListCollectionsResponse: ...

    def list_faces(self, *,
        CollectionId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> RekognitionListFacesResponse: ...

    def list_stream_processors(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> RekognitionListStreamProcessorsResponse: ...

    def recognize_celebrities(self, *,
        Image: RekognitionImage
    ) -> RekognitionRecognizeCelebritiesResponse: ...

    def search_faces(self, *,
        CollectionId: str,
        FaceId: str,
        MaxFaces: int = ...,
        FaceMatchThreshold: float = ...
    ) -> RekognitionSearchFacesResponse: ...

    def search_faces_by_image(self, *,
        CollectionId: str,
        Image: RekognitionImage,
        MaxFaces: int = ...,
        FaceMatchThreshold: float = ...
    ) -> RekognitionSearchFacesByImageResponse: ...

    def start_celebrity_recognition(self, *,
        Video: RekognitionVideo,
        ClientRequestToken: str = ...,
        NotificationChannel: RekognitionNotificationChannel = ...,
        JobTag: str = ...
    ) -> RekognitionStartCelebrityRecognitionResponse: ...

    def start_content_moderation(self, *,
        Video: RekognitionVideo,
        MinConfidence: float = ...,
        ClientRequestToken: str = ...,
        NotificationChannel: RekognitionNotificationChannel = ...,
        JobTag: str = ...
    ) -> RekognitionStartContentModerationResponse: ...

    def start_face_detection(self, *,
        Video: RekognitionVideo,
        ClientRequestToken: str = ...,
        NotificationChannel: RekognitionNotificationChannel = ...,
        FaceAttributes: str = ...,
        JobTag: str = ...
    ) -> RekognitionStartFaceDetectionResponse: ...

    def start_face_search(self, *,
        Video: RekognitionVideo,
        CollectionId: str,
        ClientRequestToken: str = ...,
        FaceMatchThreshold: float = ...,
        NotificationChannel: RekognitionNotificationChannel = ...,
        JobTag: str = ...
    ) -> RekognitionStartFaceSearchResponse: ...

    def start_label_detection(self, *,
        Video: RekognitionVideo,
        ClientRequestToken: str = ...,
        MinConfidence: float = ...,
        NotificationChannel: RekognitionNotificationChannel = ...,
        JobTag: str = ...
    ) -> RekognitionStartLabelDetectionResponse: ...

    def start_person_tracking(self, *,
        Video: RekognitionVideo,
        ClientRequestToken: str = ...,
        NotificationChannel: RekognitionNotificationChannel = ...,
        JobTag: str = ...
    ) -> RekognitionStartPersonTrackingResponse: ...

    def start_stream_processor(self, *,
        Name: str
    ) -> RekognitionStartStreamProcessorResponse: ...

    def stop_stream_processor(self, *,
        Name: str
    ) -> RekognitionStopStreamProcessorResponse: ...


class RekognitionImage(TypedDict, total=False):
    Bytes: bytes
    S3Object: RekognitionS3Object


class RekognitionS3Object(TypedDict, total=False):
    Bucket: str
    Name: str
    Version: str


class RekognitionCompareFacesResponse(TypedDict, total=False):
    SourceImageFace: RekognitionComparedSourceImageFace
    FaceMatches: List[RekognitionCompareFacesMatch]
    UnmatchedFaces: List[RekognitionComparedFace]
    SourceImageOrientationCorrection: str
    TargetImageOrientationCorrection: str


class RekognitionComparedSourceImageFace(TypedDict, total=False):
    BoundingBox: RekognitionBoundingBox
    Confidence: float


class RekognitionBoundingBox(TypedDict, total=False):
    Width: float
    Height: float
    Left: float
    Top: float


class RekognitionCompareFacesMatch(TypedDict, total=False):
    Similarity: float
    Face: RekognitionComparedFace


class RekognitionComparedFace(TypedDict, total=False):
    BoundingBox: RekognitionBoundingBox
    Confidence: float
    Landmarks: List[RekognitionLandmark]
    Pose: RekognitionPose
    Quality: RekognitionImageQuality


class RekognitionLandmark(TypedDict, total=False):
    Type: str
    X: float
    Y: float


class RekognitionPose(TypedDict, total=False):
    Roll: float
    Yaw: float
    Pitch: float


class RekognitionImageQuality(TypedDict, total=False):
    Brightness: float
    Sharpness: float


class RekognitionCreateCollectionResponse(TypedDict, total=False):
    StatusCode: int
    CollectionArn: str
    FaceModelVersion: str


class RekognitionStreamProcessorInput(TypedDict, total=False):
    KinesisVideoStream: RekognitionKinesisVideoStream


class RekognitionKinesisVideoStream(TypedDict, total=False):
    Arn: str


class RekognitionStreamProcessorOutput(TypedDict, total=False):
    KinesisDataStream: RekognitionKinesisDataStream


class RekognitionKinesisDataStream(TypedDict, total=False):
    Arn: str


class RekognitionStreamProcessorSettings(TypedDict, total=False):
    FaceSearch: RekognitionFaceSearchSettings


class RekognitionFaceSearchSettings(TypedDict, total=False):
    CollectionId: str
    FaceMatchThreshold: float


class RekognitionCreateStreamProcessorResponse(TypedDict, total=False):
    StreamProcessorArn: str


class RekognitionDeleteCollectionResponse(TypedDict, total=False):
    StatusCode: int


class RekognitionDeleteFacesResponse(TypedDict, total=False):
    DeletedFaces: List[str]


class RekognitionDeleteStreamProcessorResponse(TypedDict, total=False):
    pass


class RekognitionDescribeCollectionResponse(TypedDict, total=False):
    FaceCount: int
    FaceModelVersion: str
    CollectionARN: str
    CreationTimestamp: datetime.datetime


class RekognitionDescribeStreamProcessorResponse(TypedDict, total=False):
    Name: str
    StreamProcessorArn: str
    Status: str
    StatusMessage: str
    CreationTimestamp: datetime.datetime
    LastUpdateTimestamp: datetime.datetime
    Input: RekognitionStreamProcessorInput
    Output: RekognitionStreamProcessorOutput
    RoleArn: str
    Settings: RekognitionStreamProcessorSettings


class RekognitionDetectFacesResponse(TypedDict, total=False):
    FaceDetails: List[RekognitionFaceDetail]
    OrientationCorrection: str


class RekognitionFaceDetail(TypedDict, total=False):
    BoundingBox: RekognitionBoundingBox
    AgeRange: RekognitionAgeRange
    Smile: RekognitionSmile
    Eyeglasses: RekognitionEyeglasses
    Sunglasses: RekognitionSunglasses
    Gender: RekognitionGender
    Beard: RekognitionBeard
    Mustache: RekognitionMustache
    EyesOpen: RekognitionEyeOpen
    MouthOpen: RekognitionMouthOpen
    Emotions: List[RekognitionEmotion]
    Landmarks: List[RekognitionLandmark]
    Pose: RekognitionPose
    Quality: RekognitionImageQuality
    Confidence: float


class RekognitionAgeRange(TypedDict, total=False):
    Low: int
    High: int


class RekognitionSmile(TypedDict, total=False):
    Value: bool
    Confidence: float


class RekognitionEyeglasses(TypedDict, total=False):
    Value: bool
    Confidence: float


class RekognitionSunglasses(TypedDict, total=False):
    Value: bool
    Confidence: float


class RekognitionGender(TypedDict, total=False):
    Value: str
    Confidence: float


class RekognitionBeard(TypedDict, total=False):
    Value: bool
    Confidence: float


class RekognitionMustache(TypedDict, total=False):
    Value: bool
    Confidence: float


class RekognitionEyeOpen(TypedDict, total=False):
    Value: bool
    Confidence: float


class RekognitionMouthOpen(TypedDict, total=False):
    Value: bool
    Confidence: float


class RekognitionEmotion(TypedDict, total=False):
    Type: str
    Confidence: float


class RekognitionDetectLabelsResponse(TypedDict, total=False):
    Labels: List[RekognitionLabel]
    OrientationCorrection: str
    LabelModelVersion: str


class RekognitionLabel(TypedDict, total=False):
    Name: str
    Confidence: float
    Instances: List[RekognitionInstance]
    Parents: List[RekognitionParent]


class RekognitionInstance(TypedDict, total=False):
    BoundingBox: RekognitionBoundingBox
    Confidence: float


class RekognitionParent(TypedDict, total=False):
    Name: str


class RekognitionDetectModerationLabelsResponse(TypedDict, total=False):
    ModerationLabels: List[RekognitionModerationLabel]
    ModerationModelVersion: str


class RekognitionModerationLabel(TypedDict, total=False):
    Confidence: float
    Name: str
    ParentName: str


class RekognitionDetectTextResponse(TypedDict, total=False):
    TextDetections: List[RekognitionTextDetection]


class RekognitionTextDetection(TypedDict, total=False):
    DetectedText: str
    Type: str
    Id: int
    ParentId: int
    Confidence: float
    Geometry: RekognitionGeometry


class RekognitionGeometry(TypedDict, total=False):
    BoundingBox: RekognitionBoundingBox
    Polygon: List[RekognitionPoint]


class RekognitionPoint(TypedDict, total=False):
    X: float
    Y: float


class RekognitionGetCelebrityInfoResponse(TypedDict, total=False):
    Urls: List[str]
    Name: str


class RekognitionGetCelebrityRecognitionResponse(TypedDict, total=False):
    JobStatus: str
    StatusMessage: str
    VideoMetadata: RekognitionVideoMetadata
    NextToken: str
    Celebrities: List[RekognitionCelebrityRecognition]


class RekognitionVideoMetadata(TypedDict, total=False):
    Codec: str
    DurationMillis: int
    Format: str
    FrameRate: float
    FrameHeight: int
    FrameWidth: int


class RekognitionCelebrityRecognition(TypedDict, total=False):
    Timestamp: int
    Celebrity: RekognitionCelebrityDetail


class RekognitionCelebrityDetail(TypedDict, total=False):
    Urls: List[str]
    Name: str
    Id: str
    Confidence: float
    BoundingBox: RekognitionBoundingBox
    Face: RekognitionFaceDetail


class RekognitionGetContentModerationResponse(TypedDict, total=False):
    JobStatus: str
    StatusMessage: str
    VideoMetadata: RekognitionVideoMetadata
    ModerationLabels: List[RekognitionContentModerationDetection]
    NextToken: str
    ModerationModelVersion: str


class RekognitionContentModerationDetection(TypedDict, total=False):
    Timestamp: int
    ModerationLabel: RekognitionModerationLabel


class RekognitionGetFaceDetectionResponse(TypedDict, total=False):
    JobStatus: str
    StatusMessage: str
    VideoMetadata: RekognitionVideoMetadata
    NextToken: str
    Faces: List[RekognitionFaceDetection]


class RekognitionFaceDetection(TypedDict, total=False):
    Timestamp: int
    Face: RekognitionFaceDetail


class RekognitionGetFaceSearchResponse(TypedDict, total=False):
    JobStatus: str
    StatusMessage: str
    NextToken: str
    VideoMetadata: RekognitionVideoMetadata
    Persons: List[RekognitionPersonMatch]


class RekognitionPersonMatch(TypedDict, total=False):
    Timestamp: int
    Person: RekognitionPersonDetail
    FaceMatches: List[RekognitionFaceMatch]


class RekognitionPersonDetail(TypedDict, total=False):
    Index: int
    BoundingBox: RekognitionBoundingBox
    Face: RekognitionFaceDetail


class RekognitionFaceMatch(TypedDict, total=False):
    Similarity: float
    Face: RekognitionFace


class RekognitionFace(TypedDict, total=False):
    FaceId: str
    BoundingBox: RekognitionBoundingBox
    ImageId: str
    ExternalImageId: str
    Confidence: float


class RekognitionGetLabelDetectionResponse(TypedDict, total=False):
    JobStatus: str
    StatusMessage: str
    VideoMetadata: RekognitionVideoMetadata
    NextToken: str
    Labels: List[RekognitionLabelDetection]
    LabelModelVersion: str


class RekognitionLabelDetection(TypedDict, total=False):
    Timestamp: int
    Label: RekognitionLabel


class RekognitionGetPersonTrackingResponse(TypedDict, total=False):
    JobStatus: str
    StatusMessage: str
    VideoMetadata: RekognitionVideoMetadata
    NextToken: str
    Persons: List[RekognitionPersonDetection]


class RekognitionPersonDetection(TypedDict, total=False):
    Timestamp: int
    Person: RekognitionPersonDetail


class RekognitionIndexFacesResponse(TypedDict, total=False):
    FaceRecords: List[RekognitionFaceRecord]
    OrientationCorrection: str
    FaceModelVersion: str
    UnindexedFaces: List[RekognitionUnindexedFace]


class RekognitionFaceRecord(TypedDict, total=False):
    Face: RekognitionFace
    FaceDetail: RekognitionFaceDetail


class RekognitionUnindexedFace(TypedDict, total=False):
    Reasons: List[str]
    FaceDetail: RekognitionFaceDetail


class RekognitionListCollectionsResponse(TypedDict, total=False):
    CollectionIds: List[str]
    NextToken: str
    FaceModelVersions: List[str]


class RekognitionListFacesResponse(TypedDict, total=False):
    Faces: List[RekognitionFace]
    NextToken: str
    FaceModelVersion: str


class RekognitionListStreamProcessorsResponse(TypedDict, total=False):
    NextToken: str
    StreamProcessors: List[RekognitionStreamProcessor]


class RekognitionStreamProcessor(TypedDict, total=False):
    Name: str
    Status: str


class RekognitionRecognizeCelebritiesResponse(TypedDict, total=False):
    CelebrityFaces: List[RekognitionCelebrity]
    UnrecognizedFaces: List[RekognitionComparedFace]
    OrientationCorrection: str


class RekognitionCelebrity(TypedDict, total=False):
    Urls: List[str]
    Name: str
    Id: str
    Face: RekognitionComparedFace
    MatchConfidence: float


class RekognitionSearchFacesResponse(TypedDict, total=False):
    SearchedFaceId: str
    FaceMatches: List[RekognitionFaceMatch]
    FaceModelVersion: str


class RekognitionSearchFacesByImageResponse(TypedDict, total=False):
    SearchedFaceBoundingBox: RekognitionBoundingBox
    SearchedFaceConfidence: float
    FaceMatches: List[RekognitionFaceMatch]
    FaceModelVersion: str


class RekognitionVideo(TypedDict, total=False):
    S3Object: RekognitionS3Object


class RekognitionNotificationChannel(TypedDict):
    SNSTopicArn: str
    RoleArn: str


class RekognitionStartCelebrityRecognitionResponse(TypedDict, total=False):
    JobId: str


class RekognitionStartContentModerationResponse(TypedDict, total=False):
    JobId: str


class RekognitionStartFaceDetectionResponse(TypedDict, total=False):
    JobId: str


class RekognitionStartFaceSearchResponse(TypedDict, total=False):
    JobId: str


class RekognitionStartLabelDetectionResponse(TypedDict, total=False):
    JobId: str


class RekognitionStartPersonTrackingResponse(TypedDict, total=False):
    JobId: str


class RekognitionStartStreamProcessorResponse(TypedDict, total=False):
    pass


class RekognitionStopStreamProcessorResponse(TypedDict, total=False):
    pass


class ResourceGroups(BaseClient):
    def create_group(self, *,
        Name: str,
        ResourceQuery: ResourceGroupsResourceQuery,
        Description: str = ...,
        Tags: Dict[str, str] = ...
    ) -> ResourceGroupsCreateGroupOutput: ...

    def delete_group(self, *,
        GroupName: str
    ) -> ResourceGroupsDeleteGroupOutput: ...

    def get_group(self, *,
        GroupName: str
    ) -> ResourceGroupsGetGroupOutput: ...

    def get_group_query(self, *,
        GroupName: str
    ) -> ResourceGroupsGetGroupQueryOutput: ...

    def get_tags(self, *,
        Arn: str
    ) -> ResourceGroupsGetTagsOutput: ...

    def list_group_resources(self, *,
        GroupName: str,
        Filters: List[ResourceGroupsResourceFilter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ResourceGroupsListGroupResourcesOutput: ...

    def list_groups(self, *,
        Filters: List[ResourceGroupsGroupFilter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ResourceGroupsListGroupsOutput: ...

    def search_resources(self, *,
        ResourceQuery: ResourceGroupsResourceQuery,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ResourceGroupsSearchResourcesOutput: ...

    def tag(self, *,
        Arn: str,
        Tags: Dict[str, str]
    ) -> ResourceGroupsTagOutput: ...

    def untag(self, *,
        Arn: str,
        Keys: List[str]
    ) -> ResourceGroupsUntagOutput: ...

    def update_group(self, *,
        GroupName: str,
        Description: str = ...
    ) -> ResourceGroupsUpdateGroupOutput: ...

    def update_group_query(self, *,
        GroupName: str,
        ResourceQuery: ResourceGroupsResourceQuery
    ) -> ResourceGroupsUpdateGroupQueryOutput: ...


class ResourceGroupsResourceQuery(TypedDict):
    Type: str
    Query: str


class ResourceGroupsCreateGroupOutput(TypedDict, total=False):
    Group: ResourceGroupsGroup
    ResourceQuery: ResourceGroupsResourceQuery
    Tags: Dict[str, str]


class _ResourceGroupsGroup(TypedDict):
    GroupArn: str
    Name: str


class ResourceGroupsGroup(_ResourceGroupsGroup, total=False):
    Description: str


class ResourceGroupsDeleteGroupOutput(TypedDict, total=False):
    Group: ResourceGroupsGroup


class ResourceGroupsGetGroupOutput(TypedDict, total=False):
    Group: ResourceGroupsGroup


class ResourceGroupsGetGroupQueryOutput(TypedDict, total=False):
    GroupQuery: ResourceGroupsGroupQuery


class ResourceGroupsGroupQuery(TypedDict):
    GroupName: str
    ResourceQuery: ResourceGroupsResourceQuery


class ResourceGroupsGetTagsOutput(TypedDict, total=False):
    Arn: str
    Tags: Dict[str, str]


class ResourceGroupsResourceFilter(TypedDict):
    Name: str
    Values: List[str]


class ResourceGroupsListGroupResourcesOutput(TypedDict, total=False):
    ResourceIdentifiers: List[ResourceGroupsResourceIdentifier]
    NextToken: str
    QueryErrors: List[ResourceGroupsQueryError]


class ResourceGroupsResourceIdentifier(TypedDict, total=False):
    ResourceArn: str
    ResourceType: str


class ResourceGroupsQueryError(TypedDict, total=False):
    ErrorCode: str
    Message: str


class ResourceGroupsGroupFilter(TypedDict):
    Name: str
    Values: List[str]


class ResourceGroupsListGroupsOutput(TypedDict, total=False):
    GroupIdentifiers: List[ResourceGroupsGroupIdentifier]
    Groups: List[ResourceGroupsGroup]
    NextToken: str


class ResourceGroupsGroupIdentifier(TypedDict, total=False):
    GroupName: str
    GroupArn: str


class ResourceGroupsSearchResourcesOutput(TypedDict, total=False):
    ResourceIdentifiers: List[ResourceGroupsResourceIdentifier]
    NextToken: str
    QueryErrors: List[ResourceGroupsQueryError]


class ResourceGroupsTagOutput(TypedDict, total=False):
    Arn: str
    Tags: Dict[str, str]


class ResourceGroupsUntagOutput(TypedDict, total=False):
    Arn: str
    Keys: List[str]


class ResourceGroupsUpdateGroupOutput(TypedDict, total=False):
    Group: ResourceGroupsGroup


class ResourceGroupsUpdateGroupQueryOutput(TypedDict, total=False):
    GroupQuery: ResourceGroupsGroupQuery


class ResourceGroupsTaggingAPI(BaseClient):
    def get_resources(self, *,
        PaginationToken: str = ...,
        TagFilters: List[ResourceGroupsTaggingAPITagFilter] = ...,
        ResourcesPerPage: int = ...,
        TagsPerPage: int = ...,
        ResourceTypeFilters: List[str] = ...
    ) -> ResourceGroupsTaggingAPIGetResourcesOutput: ...

    def get_tag_keys(self, *,
        PaginationToken: str = ...
    ) -> ResourceGroupsTaggingAPIGetTagKeysOutput: ...

    def get_tag_values(self, *,
        Key: str,
        PaginationToken: str = ...
    ) -> ResourceGroupsTaggingAPIGetTagValuesOutput: ...

    def tag_resources(self, *,
        ResourceARNList: List[str],
        Tags: Dict[str, str]
    ) -> ResourceGroupsTaggingAPITagResourcesOutput: ...

    def untag_resources(self, *,
        ResourceARNList: List[str],
        TagKeys: List[str]
    ) -> ResourceGroupsTaggingAPIUntagResourcesOutput: ...


class ResourceGroupsTaggingAPITagFilter(TypedDict, total=False):
    Key: str
    Values: List[str]


class ResourceGroupsTaggingAPIGetResourcesOutput(TypedDict, total=False):
    PaginationToken: str
    ResourceTagMappingList: List[ResourceGroupsTaggingAPIResourceTagMapping]


class ResourceGroupsTaggingAPIResourceTagMapping(TypedDict, total=False):
    ResourceARN: str
    Tags: List[ResourceGroupsTaggingAPITag]


class ResourceGroupsTaggingAPITag(TypedDict):
    Key: str
    Value: str


class ResourceGroupsTaggingAPIGetTagKeysOutput(TypedDict, total=False):
    PaginationToken: str
    TagKeys: List[str]


class ResourceGroupsTaggingAPIGetTagValuesOutput(TypedDict, total=False):
    PaginationToken: str
    TagValues: List[str]


class ResourceGroupsTaggingAPITagResourcesOutput(TypedDict, total=False):
    FailedResourcesMap: Dict[str, ResourceGroupsTaggingAPIFailureInfo]


class ResourceGroupsTaggingAPIFailureInfo(TypedDict, total=False):
    StatusCode: int
    ErrorCode: str
    ErrorMessage: str


class ResourceGroupsTaggingAPIUntagResourcesOutput(TypedDict, total=False):
    FailedResourcesMap: Dict[str, ResourceGroupsTaggingAPIFailureInfo]


class RoboMaker(BaseClient):
    def batch_describe_simulation_job(self, *,
        jobs: List[str]
    ) -> RoboMakerBatchDescribeSimulationJobResponse: ...

    def cancel_simulation_job(self, *,
        job: str
    ) -> RoboMakerCancelSimulationJobResponse: ...

    def create_deployment_job(self, *,
        clientRequestToken: str,
        fleet: str,
        deploymentApplicationConfigs: List[RoboMakerDeploymentApplicationConfig],
        deploymentConfig: RoboMakerDeploymentConfig = ...,
        tags: Dict[str, str] = ...
    ) -> RoboMakerCreateDeploymentJobResponse: ...

    def create_fleet(self, *,
        name: str,
        tags: Dict[str, str] = ...
    ) -> RoboMakerCreateFleetResponse: ...

    def create_robot(self, *,
        name: str,
        architecture: str,
        greengrassGroupId: str,
        tags: Dict[str, str] = ...
    ) -> RoboMakerCreateRobotResponse: ...

    def create_robot_application(self, *,
        name: str,
        sources: List[RoboMakerSourceConfig],
        robotSoftwareSuite: RoboMakerRobotSoftwareSuite,
        tags: Dict[str, str] = ...
    ) -> RoboMakerCreateRobotApplicationResponse: ...

    def create_robot_application_version(self, *,
        application: str,
        currentRevisionId: str = ...
    ) -> RoboMakerCreateRobotApplicationVersionResponse: ...

    def create_simulation_application(self, *,
        name: str,
        sources: List[RoboMakerSourceConfig],
        simulationSoftwareSuite: RoboMakerSimulationSoftwareSuite,
        robotSoftwareSuite: RoboMakerRobotSoftwareSuite,
        renderingEngine: RoboMakerRenderingEngine,
        tags: Dict[str, str] = ...
    ) -> RoboMakerCreateSimulationApplicationResponse: ...

    def create_simulation_application_version(self, *,
        application: str,
        currentRevisionId: str = ...
    ) -> RoboMakerCreateSimulationApplicationVersionResponse: ...

    def create_simulation_job(self, *,
        maxJobDurationInSeconds: int,
        iamRole: str,
        clientRequestToken: str = ...,
        outputLocation: RoboMakerOutputLocation = ...,
        failureBehavior: str = ...,
        robotApplications: List[RoboMakerRobotApplicationConfig] = ...,
        simulationApplications: List[RoboMakerSimulationApplicationConfig] = ...,
        tags: Dict[str, str] = ...,
        vpcConfig: RoboMakerVPCConfig = ...
    ) -> RoboMakerCreateSimulationJobResponse: ...

    def delete_fleet(self, *,
        fleet: str
    ) -> RoboMakerDeleteFleetResponse: ...

    def delete_robot(self, *,
        robot: str
    ) -> RoboMakerDeleteRobotResponse: ...

    def delete_robot_application(self, *,
        application: str,
        applicationVersion: str = ...
    ) -> RoboMakerDeleteRobotApplicationResponse: ...

    def delete_simulation_application(self, *,
        application: str,
        applicationVersion: str = ...
    ) -> RoboMakerDeleteSimulationApplicationResponse: ...

    def deregister_robot(self, *,
        fleet: str,
        robot: str
    ) -> RoboMakerDeregisterRobotResponse: ...

    def describe_deployment_job(self, *,
        job: str
    ) -> RoboMakerDescribeDeploymentJobResponse: ...

    def describe_fleet(self, *,
        fleet: str
    ) -> RoboMakerDescribeFleetResponse: ...

    def describe_robot(self, *,
        robot: str
    ) -> RoboMakerDescribeRobotResponse: ...

    def describe_robot_application(self, *,
        application: str,
        applicationVersion: str = ...
    ) -> RoboMakerDescribeRobotApplicationResponse: ...

    def describe_simulation_application(self, *,
        application: str,
        applicationVersion: str = ...
    ) -> RoboMakerDescribeSimulationApplicationResponse: ...

    def describe_simulation_job(self, *,
        job: str
    ) -> RoboMakerDescribeSimulationJobResponse: ...

    def list_deployment_jobs(self, *,
        filters: List[RoboMakerFilter] = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> RoboMakerListDeploymentJobsResponse: ...

    def list_fleets(self, *,
        nextToken: str = ...,
        maxResults: int = ...,
        filters: List[RoboMakerFilter] = ...
    ) -> RoboMakerListFleetsResponse: ...

    def list_robot_applications(self, *,
        versionQualifier: str = ...,
        nextToken: str = ...,
        maxResults: int = ...,
        filters: List[RoboMakerFilter] = ...
    ) -> RoboMakerListRobotApplicationsResponse: ...

    def list_robots(self, *,
        nextToken: str = ...,
        maxResults: int = ...,
        filters: List[RoboMakerFilter] = ...
    ) -> RoboMakerListRobotsResponse: ...

    def list_simulation_applications(self, *,
        versionQualifier: str = ...,
        nextToken: str = ...,
        maxResults: int = ...,
        filters: List[RoboMakerFilter] = ...
    ) -> RoboMakerListSimulationApplicationsResponse: ...

    def list_simulation_jobs(self, *,
        nextToken: str = ...,
        maxResults: int = ...,
        filters: List[RoboMakerFilter] = ...
    ) -> RoboMakerListSimulationJobsResponse: ...

    def list_tags_for_resource(self, *,
        resourceArn: str
    ) -> RoboMakerListTagsForResourceResponse: ...

    def register_robot(self, *,
        fleet: str,
        robot: str
    ) -> RoboMakerRegisterRobotResponse: ...

    def restart_simulation_job(self, *,
        job: str
    ) -> RoboMakerRestartSimulationJobResponse: ...

    def sync_deployment_job(self, *,
        clientRequestToken: str,
        fleet: str
    ) -> RoboMakerSyncDeploymentJobResponse: ...

    def tag_resource(self, *,
        resourceArn: str,
        tags: Dict[str, str]
    ) -> RoboMakerTagResourceResponse: ...

    def untag_resource(self, *,
        resourceArn: str,
        tagKeys: List[str]
    ) -> RoboMakerUntagResourceResponse: ...

    def update_robot_application(self, *,
        application: str,
        sources: List[RoboMakerSourceConfig],
        robotSoftwareSuite: RoboMakerRobotSoftwareSuite,
        currentRevisionId: str = ...
    ) -> RoboMakerUpdateRobotApplicationResponse: ...

    def update_simulation_application(self, *,
        application: str,
        sources: List[RoboMakerSourceConfig],
        simulationSoftwareSuite: RoboMakerSimulationSoftwareSuite,
        robotSoftwareSuite: RoboMakerRobotSoftwareSuite,
        renderingEngine: RoboMakerRenderingEngine,
        currentRevisionId: str = ...
    ) -> RoboMakerUpdateSimulationApplicationResponse: ...


class RoboMakerBatchDescribeSimulationJobResponse(TypedDict, total=False):
    jobs: List[RoboMakerSimulationJob]
    unprocessedJobs: List[str]


class RoboMakerSimulationJob(TypedDict, total=False):
    arn: str
    name: str
    status: str
    lastUpdatedAt: datetime.datetime
    failureBehavior: str
    failureCode: str
    failureReason: str
    clientRequestToken: str
    outputLocation: RoboMakerOutputLocation
    maxJobDurationInSeconds: int
    simulationTimeMillis: int
    iamRole: str
    robotApplications: List[RoboMakerRobotApplicationConfig]
    simulationApplications: List[RoboMakerSimulationApplicationConfig]
    tags: Dict[str, str]
    vpcConfig: RoboMakerVPCConfigResponse


class RoboMakerOutputLocation(TypedDict, total=False):
    s3Bucket: str
    s3Prefix: str


class _RoboMakerRobotApplicationConfig(TypedDict):
    application: str
    launchConfig: RoboMakerLaunchConfig


class RoboMakerRobotApplicationConfig(_RoboMakerRobotApplicationConfig, total=False):
    applicationVersion: str


class _RoboMakerLaunchConfig(TypedDict):
    packageName: str
    launchFile: str


class RoboMakerLaunchConfig(_RoboMakerLaunchConfig, total=False):
    environmentVariables: Dict[str, str]


class _RoboMakerSimulationApplicationConfig(TypedDict):
    application: str
    launchConfig: RoboMakerLaunchConfig


class RoboMakerSimulationApplicationConfig(_RoboMakerSimulationApplicationConfig, total=False):
    applicationVersion: str


class RoboMakerVPCConfigResponse(TypedDict, total=False):
    subnets: List[str]
    securityGroups: List[str]
    vpcId: str
    assignPublicIp: bool


class RoboMakerCancelSimulationJobResponse(TypedDict, total=False):
    pass


class RoboMakerDeploymentConfig(TypedDict, total=False):
    concurrentDeploymentPercentage: int
    failureThresholdPercentage: int


class RoboMakerDeploymentApplicationConfig(TypedDict):
    application: str
    applicationVersion: str
    launchConfig: RoboMakerDeploymentLaunchConfig


class _RoboMakerDeploymentLaunchConfig(TypedDict):
    packageName: str
    launchFile: str


class RoboMakerDeploymentLaunchConfig(_RoboMakerDeploymentLaunchConfig, total=False):
    preLaunchFile: str
    postLaunchFile: str
    environmentVariables: Dict[str, str]


class RoboMakerCreateDeploymentJobResponse(TypedDict, total=False):
    arn: str
    fleet: str
    status: str
    deploymentApplicationConfigs: List[RoboMakerDeploymentApplicationConfig]
    failureReason: str
    failureCode: str
    createdAt: datetime.datetime
    deploymentConfig: RoboMakerDeploymentConfig
    tags: Dict[str, str]


class RoboMakerCreateFleetResponse(TypedDict, total=False):
    arn: str
    name: str
    createdAt: datetime.datetime
    tags: Dict[str, str]


class RoboMakerCreateRobotResponse(TypedDict, total=False):
    arn: str
    name: str
    createdAt: datetime.datetime
    greengrassGroupId: str
    architecture: str
    tags: Dict[str, str]


class RoboMakerSourceConfig(TypedDict, total=False):
    s3Bucket: str
    s3Key: str
    architecture: str


class RoboMakerRobotSoftwareSuite(TypedDict, total=False):
    name: str
    version: str


class RoboMakerCreateRobotApplicationResponse(TypedDict, total=False):
    arn: str
    name: str
    version: str
    sources: List[RoboMakerSource]
    robotSoftwareSuite: RoboMakerRobotSoftwareSuite
    lastUpdatedAt: datetime.datetime
    revisionId: str
    tags: Dict[str, str]


class RoboMakerSource(TypedDict, total=False):
    s3Bucket: str
    s3Key: str
    etag: str
    architecture: str


class RoboMakerCreateRobotApplicationVersionResponse(TypedDict, total=False):
    arn: str
    name: str
    version: str
    sources: List[RoboMakerSource]
    robotSoftwareSuite: RoboMakerRobotSoftwareSuite
    lastUpdatedAt: datetime.datetime
    revisionId: str


class RoboMakerSimulationSoftwareSuite(TypedDict, total=False):
    name: str
    version: str


class RoboMakerRenderingEngine(TypedDict, total=False):
    name: str
    version: str


class RoboMakerCreateSimulationApplicationResponse(TypedDict, total=False):
    arn: str
    name: str
    version: str
    sources: List[RoboMakerSource]
    simulationSoftwareSuite: RoboMakerSimulationSoftwareSuite
    robotSoftwareSuite: RoboMakerRobotSoftwareSuite
    renderingEngine: RoboMakerRenderingEngine
    lastUpdatedAt: datetime.datetime
    revisionId: str
    tags: Dict[str, str]


class RoboMakerCreateSimulationApplicationVersionResponse(TypedDict, total=False):
    arn: str
    name: str
    version: str
    sources: List[RoboMakerSource]
    simulationSoftwareSuite: RoboMakerSimulationSoftwareSuite
    robotSoftwareSuite: RoboMakerRobotSoftwareSuite
    renderingEngine: RoboMakerRenderingEngine
    lastUpdatedAt: datetime.datetime
    revisionId: str


class _RoboMakerVPCConfig(TypedDict):
    subnets: List[str]


class RoboMakerVPCConfig(_RoboMakerVPCConfig, total=False):
    securityGroups: List[str]
    assignPublicIp: bool


class RoboMakerCreateSimulationJobResponse(TypedDict, total=False):
    arn: str
    status: str
    lastUpdatedAt: datetime.datetime
    failureBehavior: str
    failureCode: str
    clientRequestToken: str
    outputLocation: RoboMakerOutputLocation
    maxJobDurationInSeconds: int
    simulationTimeMillis: int
    iamRole: str
    robotApplications: List[RoboMakerRobotApplicationConfig]
    simulationApplications: List[RoboMakerSimulationApplicationConfig]
    tags: Dict[str, str]
    vpcConfig: RoboMakerVPCConfigResponse


class RoboMakerDeleteFleetResponse(TypedDict, total=False):
    pass


class RoboMakerDeleteRobotResponse(TypedDict, total=False):
    pass


class RoboMakerDeleteRobotApplicationResponse(TypedDict, total=False):
    pass


class RoboMakerDeleteSimulationApplicationResponse(TypedDict, total=False):
    pass


class RoboMakerDeregisterRobotResponse(TypedDict, total=False):
    fleet: str
    robot: str


class RoboMakerDescribeDeploymentJobResponse(TypedDict, total=False):
    arn: str
    fleet: str
    status: str
    deploymentConfig: RoboMakerDeploymentConfig
    deploymentApplicationConfigs: List[RoboMakerDeploymentApplicationConfig]
    failureReason: str
    failureCode: str
    createdAt: datetime.datetime
    robotDeploymentSummary: List[RoboMakerRobotDeployment]
    tags: Dict[str, str]


class RoboMakerRobotDeployment(TypedDict, total=False):
    arn: str
    deploymentStartTime: datetime.datetime
    deploymentFinishTime: datetime.datetime
    status: str
    progressDetail: RoboMakerProgressDetail
    failureReason: str
    failureCode: str


class RoboMakerProgressDetail(TypedDict, total=False):
    currentProgress: str
    percentDone: float
    estimatedTimeRemainingSeconds: int
    targetResource: str


class RoboMakerDescribeFleetResponse(TypedDict, total=False):
    name: str
    arn: str
    robots: List[RoboMakerRobot]
    createdAt: datetime.datetime
    lastDeploymentStatus: str
    lastDeploymentJob: str
    lastDeploymentTime: datetime.datetime
    tags: Dict[str, str]


class RoboMakerRobot(TypedDict, total=False):
    arn: str
    name: str
    fleetArn: str
    status: str
    greenGrassGroupId: str
    createdAt: datetime.datetime
    architecture: str
    lastDeploymentJob: str
    lastDeploymentTime: datetime.datetime


class RoboMakerDescribeRobotResponse(TypedDict, total=False):
    arn: str
    name: str
    fleetArn: str
    status: str
    greengrassGroupId: str
    createdAt: datetime.datetime
    architecture: str
    lastDeploymentJob: str
    lastDeploymentTime: datetime.datetime
    tags: Dict[str, str]


class RoboMakerDescribeRobotApplicationResponse(TypedDict, total=False):
    arn: str
    name: str
    version: str
    sources: List[RoboMakerSource]
    robotSoftwareSuite: RoboMakerRobotSoftwareSuite
    revisionId: str
    lastUpdatedAt: datetime.datetime
    tags: Dict[str, str]


class RoboMakerDescribeSimulationApplicationResponse(TypedDict, total=False):
    arn: str
    name: str
    version: str
    sources: List[RoboMakerSource]
    simulationSoftwareSuite: RoboMakerSimulationSoftwareSuite
    robotSoftwareSuite: RoboMakerRobotSoftwareSuite
    renderingEngine: RoboMakerRenderingEngine
    revisionId: str
    lastUpdatedAt: datetime.datetime
    tags: Dict[str, str]


class RoboMakerDescribeSimulationJobResponse(TypedDict, total=False):
    arn: str
    name: str
    status: str
    lastUpdatedAt: datetime.datetime
    failureBehavior: str
    failureCode: str
    failureReason: str
    clientRequestToken: str
    outputLocation: RoboMakerOutputLocation
    maxJobDurationInSeconds: int
    simulationTimeMillis: int
    iamRole: str
    robotApplications: List[RoboMakerRobotApplicationConfig]
    simulationApplications: List[RoboMakerSimulationApplicationConfig]
    tags: Dict[str, str]
    vpcConfig: RoboMakerVPCConfigResponse


class RoboMakerFilter(TypedDict, total=False):
    name: str
    values: List[str]


class RoboMakerListDeploymentJobsResponse(TypedDict, total=False):
    deploymentJobs: List[RoboMakerDeploymentJob]
    nextToken: str


class RoboMakerDeploymentJob(TypedDict, total=False):
    arn: str
    fleet: str
    status: str
    deploymentApplicationConfigs: List[RoboMakerDeploymentApplicationConfig]
    deploymentConfig: RoboMakerDeploymentConfig
    failureReason: str
    failureCode: str
    createdAt: datetime.datetime


class RoboMakerListFleetsResponse(TypedDict, total=False):
    fleetDetails: List[RoboMakerFleet]
    nextToken: str


class RoboMakerFleet(TypedDict, total=False):
    name: str
    arn: str
    createdAt: datetime.datetime
    lastDeploymentStatus: str
    lastDeploymentJob: str
    lastDeploymentTime: datetime.datetime


class RoboMakerListRobotApplicationsResponse(TypedDict, total=False):
    robotApplicationSummaries: List[RoboMakerRobotApplicationSummary]
    nextToken: str


class RoboMakerRobotApplicationSummary(TypedDict, total=False):
    name: str
    arn: str
    version: str
    lastUpdatedAt: datetime.datetime


class RoboMakerListRobotsResponse(TypedDict, total=False):
    robots: List[RoboMakerRobot]
    nextToken: str


class RoboMakerListSimulationApplicationsResponse(TypedDict, total=False):
    simulationApplicationSummaries: List[RoboMakerSimulationApplicationSummary]
    nextToken: str


class RoboMakerSimulationApplicationSummary(TypedDict, total=False):
    name: str
    arn: str
    version: str
    lastUpdatedAt: datetime.datetime


class _RoboMakerListSimulationJobsResponse(TypedDict):
    simulationJobSummaries: List[RoboMakerSimulationJobSummary]


class RoboMakerListSimulationJobsResponse(_RoboMakerListSimulationJobsResponse, total=False):
    nextToken: str


class RoboMakerSimulationJobSummary(TypedDict, total=False):
    arn: str
    lastUpdatedAt: datetime.datetime
    name: str
    status: str
    simulationApplicationNames: List[str]
    robotApplicationNames: List[str]


class RoboMakerListTagsForResourceResponse(TypedDict, total=False):
    tags: Dict[str, str]


class RoboMakerRegisterRobotResponse(TypedDict, total=False):
    fleet: str
    robot: str


class RoboMakerRestartSimulationJobResponse(TypedDict, total=False):
    pass


class RoboMakerSyncDeploymentJobResponse(TypedDict, total=False):
    arn: str
    fleet: str
    status: str
    deploymentConfig: RoboMakerDeploymentConfig
    deploymentApplicationConfigs: List[RoboMakerDeploymentApplicationConfig]
    failureReason: str
    failureCode: str
    createdAt: datetime.datetime


class RoboMakerTagResourceResponse(TypedDict, total=False):
    pass


class RoboMakerUntagResourceResponse(TypedDict, total=False):
    pass


class RoboMakerUpdateRobotApplicationResponse(TypedDict, total=False):
    arn: str
    name: str
    version: str
    sources: List[RoboMakerSource]
    robotSoftwareSuite: RoboMakerRobotSoftwareSuite
    lastUpdatedAt: datetime.datetime
    revisionId: str


class RoboMakerUpdateSimulationApplicationResponse(TypedDict, total=False):
    arn: str
    name: str
    version: str
    sources: List[RoboMakerSource]
    simulationSoftwareSuite: RoboMakerSimulationSoftwareSuite
    robotSoftwareSuite: RoboMakerRobotSoftwareSuite
    renderingEngine: RoboMakerRenderingEngine
    lastUpdatedAt: datetime.datetime
    revisionId: str


class Route53(BaseClient):
    def associate_vpc_with_hosted_zone(self, *,
        HostedZoneId: str,
        VPC: Route53VPC,
        Comment: str = ...
    ) -> Route53AssociateVPCWithHostedZoneResponse: ...

    def change_resource_record_sets(self, *,
        HostedZoneId: str,
        ChangeBatch: Route53ChangeBatch
    ) -> Route53ChangeResourceRecordSetsResponse: ...

    def change_tags_for_resource(self, *,
        ResourceType: str,
        ResourceId: str,
        AddTags: List[Route53Tag] = ...,
        RemoveTagKeys: List[str] = ...
    ) -> Route53ChangeTagsForResourceResponse: ...

    def create_health_check(self, *,
        CallerReference: str,
        HealthCheckConfig: Route53HealthCheckConfig
    ) -> Route53CreateHealthCheckResponse: ...

    def create_hosted_zone(self, *,
        Name: str,
        CallerReference: str,
        VPC: Route53VPC = ...,
        HostedZoneConfig: Route53HostedZoneConfig = ...,
        DelegationSetId: str = ...
    ) -> Route53CreateHostedZoneResponse: ...

    def create_query_logging_config(self, *,
        HostedZoneId: str,
        CloudWatchLogsLogGroupArn: str
    ) -> Route53CreateQueryLoggingConfigResponse: ...

    def create_reusable_delegation_set(self, *,
        CallerReference: str,
        HostedZoneId: str = ...
    ) -> Route53CreateReusableDelegationSetResponse: ...

    def create_traffic_policy(self, *,
        Name: str,
        Document: str,
        Comment: str = ...
    ) -> Route53CreateTrafficPolicyResponse: ...

    def create_traffic_policy_instance(self, *,
        HostedZoneId: str,
        Name: str,
        TTL: int,
        TrafficPolicyId: str,
        TrafficPolicyVersion: int
    ) -> Route53CreateTrafficPolicyInstanceResponse: ...

    def create_traffic_policy_version(self, *,
        Id: str,
        Document: str,
        Comment: str = ...
    ) -> Route53CreateTrafficPolicyVersionResponse: ...

    def create_vpc_association_authorization(self, *,
        HostedZoneId: str,
        VPC: Route53VPC
    ) -> Route53CreateVPCAssociationAuthorizationResponse: ...

    def delete_health_check(self, *,
        HealthCheckId: str
    ) -> Route53DeleteHealthCheckResponse: ...

    def delete_hosted_zone(self, *,
        Id: str
    ) -> Route53DeleteHostedZoneResponse: ...

    def delete_query_logging_config(self, *,
        Id: str
    ) -> Route53DeleteQueryLoggingConfigResponse: ...

    def delete_reusable_delegation_set(self, *,
        Id: str
    ) -> Route53DeleteReusableDelegationSetResponse: ...

    def delete_traffic_policy(self, *,
        Id: str,
        Version: int
    ) -> Route53DeleteTrafficPolicyResponse: ...

    def delete_traffic_policy_instance(self, *,
        Id: str
    ) -> Route53DeleteTrafficPolicyInstanceResponse: ...

    def delete_vpc_association_authorization(self, *,
        HostedZoneId: str,
        VPC: Route53VPC
    ) -> Route53DeleteVPCAssociationAuthorizationResponse: ...

    def disassociate_vpc_from_hosted_zone(self, *,
        HostedZoneId: str,
        VPC: Route53VPC,
        Comment: str = ...
    ) -> Route53DisassociateVPCFromHostedZoneResponse: ...

    def get_account_limit(self, *,
        Type: str
    ) -> Route53GetAccountLimitResponse: ...

    def get_change(self, *,
        Id: str
    ) -> Route53GetChangeResponse: ...

    def get_checker_ip_ranges(self) -> Route53GetCheckerIpRangesResponse: ...

    def get_geo_location(self, *,
        ContinentCode: str = ...,
        CountryCode: str = ...,
        SubdivisionCode: str = ...
    ) -> Route53GetGeoLocationResponse: ...

    def get_health_check(self, *,
        HealthCheckId: str
    ) -> Route53GetHealthCheckResponse: ...

    def get_health_check_count(self) -> Route53GetHealthCheckCountResponse: ...

    def get_health_check_last_failure_reason(self, *,
        HealthCheckId: str
    ) -> Route53GetHealthCheckLastFailureReasonResponse: ...

    def get_health_check_status(self, *,
        HealthCheckId: str
    ) -> Route53GetHealthCheckStatusResponse: ...

    def get_hosted_zone(self, *,
        Id: str
    ) -> Route53GetHostedZoneResponse: ...

    def get_hosted_zone_count(self) -> Route53GetHostedZoneCountResponse: ...

    def get_hosted_zone_limit(self, *,
        Type: str,
        HostedZoneId: str
    ) -> Route53GetHostedZoneLimitResponse: ...

    def get_query_logging_config(self, *,
        Id: str
    ) -> Route53GetQueryLoggingConfigResponse: ...

    def get_reusable_delegation_set(self, *,
        Id: str
    ) -> Route53GetReusableDelegationSetResponse: ...

    def get_reusable_delegation_set_limit(self, *,
        Type: str,
        DelegationSetId: str
    ) -> Route53GetReusableDelegationSetLimitResponse: ...

    def get_traffic_policy(self, *,
        Id: str,
        Version: int
    ) -> Route53GetTrafficPolicyResponse: ...

    def get_traffic_policy_instance(self, *,
        Id: str
    ) -> Route53GetTrafficPolicyInstanceResponse: ...

    def get_traffic_policy_instance_count(self) -> Route53GetTrafficPolicyInstanceCountResponse: ...

    def list_geo_locations(self, *,
        StartContinentCode: str = ...,
        StartCountryCode: str = ...,
        StartSubdivisionCode: str = ...,
        MaxItems: str = ...
    ) -> Route53ListGeoLocationsResponse: ...

    def list_health_checks(self, *,
        Marker: str = ...,
        MaxItems: str = ...
    ) -> Route53ListHealthChecksResponse: ...

    def list_hosted_zones(self, *,
        Marker: str = ...,
        MaxItems: str = ...,
        DelegationSetId: str = ...
    ) -> Route53ListHostedZonesResponse: ...

    def list_hosted_zones_by_name(self, *,
        DNSName: str = ...,
        HostedZoneId: str = ...,
        MaxItems: str = ...
    ) -> Route53ListHostedZonesByNameResponse: ...

    def list_query_logging_configs(self, *,
        HostedZoneId: str = ...,
        NextToken: str = ...,
        MaxResults: str = ...
    ) -> Route53ListQueryLoggingConfigsResponse: ...

    def list_resource_record_sets(self, *,
        HostedZoneId: str,
        StartRecordName: str = ...,
        StartRecordType: str = ...,
        StartRecordIdentifier: str = ...,
        MaxItems: str = ...
    ) -> Route53ListResourceRecordSetsResponse: ...

    def list_reusable_delegation_sets(self, *,
        Marker: str = ...,
        MaxItems: str = ...
    ) -> Route53ListReusableDelegationSetsResponse: ...

    def list_tags_for_resource(self, *,
        ResourceType: str,
        ResourceId: str
    ) -> Route53ListTagsForResourceResponse: ...

    def list_tags_for_resources(self, *,
        ResourceType: str,
        ResourceIds: List[str]
    ) -> Route53ListTagsForResourcesResponse: ...

    def list_traffic_policies(self, *,
        TrafficPolicyIdMarker: str = ...,
        MaxItems: str = ...
    ) -> Route53ListTrafficPoliciesResponse: ...

    def list_traffic_policy_instances(self, *,
        HostedZoneIdMarker: str = ...,
        TrafficPolicyInstanceNameMarker: str = ...,
        TrafficPolicyInstanceTypeMarker: str = ...,
        MaxItems: str = ...
    ) -> Route53ListTrafficPolicyInstancesResponse: ...

    def list_traffic_policy_instances_by_hosted_zone(self, *,
        HostedZoneId: str,
        TrafficPolicyInstanceNameMarker: str = ...,
        TrafficPolicyInstanceTypeMarker: str = ...,
        MaxItems: str = ...
    ) -> Route53ListTrafficPolicyInstancesByHostedZoneResponse: ...

    def list_traffic_policy_instances_by_policy(self, *,
        TrafficPolicyId: str,
        TrafficPolicyVersion: int,
        HostedZoneIdMarker: str = ...,
        TrafficPolicyInstanceNameMarker: str = ...,
        TrafficPolicyInstanceTypeMarker: str = ...,
        MaxItems: str = ...
    ) -> Route53ListTrafficPolicyInstancesByPolicyResponse: ...

    def list_traffic_policy_versions(self, *,
        Id: str,
        TrafficPolicyVersionMarker: str = ...,
        MaxItems: str = ...
    ) -> Route53ListTrafficPolicyVersionsResponse: ...

    def list_vpc_association_authorizations(self, *,
        HostedZoneId: str,
        NextToken: str = ...,
        MaxResults: str = ...
    ) -> Route53ListVPCAssociationAuthorizationsResponse: ...

    def test_dns_answer(self, *,
        HostedZoneId: str,
        RecordName: str,
        RecordType: str,
        ResolverIP: str = ...,
        EDNS0ClientSubnetIP: str = ...,
        EDNS0ClientSubnetMask: str = ...
    ) -> Route53TestDNSAnswerResponse: ...

    def update_health_check(self, *,
        HealthCheckId: str,
        HealthCheckVersion: int = ...,
        IPAddress: str = ...,
        Port: int = ...,
        ResourcePath: str = ...,
        FullyQualifiedDomainName: str = ...,
        SearchString: str = ...,
        FailureThreshold: int = ...,
        Inverted: bool = ...,
        Disabled: bool = ...,
        HealthThreshold: int = ...,
        ChildHealthChecks: List[str] = ...,
        EnableSNI: bool = ...,
        Regions: List[str] = ...,
        AlarmIdentifier: Route53AlarmIdentifier = ...,
        InsufficientDataHealthStatus: str = ...,
        ResetElements: List[str] = ...
    ) -> Route53UpdateHealthCheckResponse: ...

    def update_hosted_zone_comment(self, *,
        Id: str,
        Comment: str = ...
    ) -> Route53UpdateHostedZoneCommentResponse: ...

    def update_traffic_policy_comment(self, *,
        Id: str,
        Version: int,
        Comment: str
    ) -> Route53UpdateTrafficPolicyCommentResponse: ...

    def update_traffic_policy_instance(self, *,
        Id: str,
        TTL: int,
        TrafficPolicyId: str,
        TrafficPolicyVersion: int
    ) -> Route53UpdateTrafficPolicyInstanceResponse: ...


class Route53VPC(TypedDict, total=False):
    VPCRegion: str
    VPCId: str


class Route53AssociateVPCWithHostedZoneResponse(TypedDict):
    ChangeInfo: Route53ChangeInfo


class _Route53ChangeInfo(TypedDict):
    Id: str
    Status: str
    SubmittedAt: datetime.datetime


class Route53ChangeInfo(_Route53ChangeInfo, total=False):
    Comment: str


class _Route53ChangeBatch(TypedDict):
    Changes: List[Route53Change]


class Route53ChangeBatch(_Route53ChangeBatch, total=False):
    Comment: str


class Route53Change(TypedDict):
    Action: str
    ResourceRecordSet: Route53ResourceRecordSet


class _Route53ResourceRecordSet(TypedDict):
    Name: str
    Type: str


class Route53ResourceRecordSet(_Route53ResourceRecordSet, total=False):
    SetIdentifier: str
    Weight: int
    Region: str
    GeoLocation: Route53GeoLocation
    Failover: str
    MultiValueAnswer: bool
    TTL: int
    ResourceRecords: List[Route53ResourceRecord]
    AliasTarget: Route53AliasTarget
    HealthCheckId: str
    TrafficPolicyInstanceId: str


class Route53GeoLocation(TypedDict, total=False):
    ContinentCode: str
    CountryCode: str
    SubdivisionCode: str


class Route53ResourceRecord(TypedDict):
    Value: str


class Route53AliasTarget(TypedDict):
    HostedZoneId: str
    DNSName: str
    EvaluateTargetHealth: bool


class Route53ChangeResourceRecordSetsResponse(TypedDict):
    ChangeInfo: Route53ChangeInfo


class Route53Tag(TypedDict, total=False):
    Key: str
    Value: str


class Route53ChangeTagsForResourceResponse(TypedDict, total=False):
    pass


class _Route53HealthCheckConfig(TypedDict):
    Type: str


class Route53HealthCheckConfig(_Route53HealthCheckConfig, total=False):
    IPAddress: str
    Port: int
    ResourcePath: str
    FullyQualifiedDomainName: str
    SearchString: str
    RequestInterval: int
    FailureThreshold: int
    MeasureLatency: bool
    Inverted: bool
    Disabled: bool
    HealthThreshold: int
    ChildHealthChecks: List[str]
    EnableSNI: bool
    Regions: List[str]
    AlarmIdentifier: Route53AlarmIdentifier
    InsufficientDataHealthStatus: str


class Route53AlarmIdentifier(TypedDict):
    Region: str
    Name: str


class Route53CreateHealthCheckResponse(TypedDict):
    HealthCheck: Route53HealthCheck
    Location: str


class _Route53HealthCheck(TypedDict):
    Id: str
    CallerReference: str
    HealthCheckConfig: Route53HealthCheckConfig
    HealthCheckVersion: int


class Route53HealthCheck(_Route53HealthCheck, total=False):
    LinkedService: Route53LinkedService
    CloudWatchAlarmConfiguration: Route53CloudWatchAlarmConfiguration


class Route53LinkedService(TypedDict, total=False):
    ServicePrincipal: str
    Description: str


class _Route53CloudWatchAlarmConfiguration(TypedDict):
    EvaluationPeriods: int
    Threshold: float
    ComparisonOperator: str
    Period: int
    MetricName: str
    Namespace: str
    Statistic: str


class Route53CloudWatchAlarmConfiguration(_Route53CloudWatchAlarmConfiguration, total=False):
    Dimensions: List[Route53Dimension]


class Route53Dimension(TypedDict):
    Name: str
    Value: str


class Route53HostedZoneConfig(TypedDict, total=False):
    Comment: str
    PrivateZone: bool


class _Route53CreateHostedZoneResponse(TypedDict):
    HostedZone: Route53HostedZone
    ChangeInfo: Route53ChangeInfo
    DelegationSet: Route53DelegationSet
    Location: str


class Route53CreateHostedZoneResponse(_Route53CreateHostedZoneResponse, total=False):
    VPC: Route53VPC


class _Route53HostedZone(TypedDict):
    Id: str
    Name: str
    CallerReference: str


class Route53HostedZone(_Route53HostedZone, total=False):
    Config: Route53HostedZoneConfig
    ResourceRecordSetCount: int
    LinkedService: Route53LinkedService


class _Route53DelegationSet(TypedDict):
    NameServers: List[str]


class Route53DelegationSet(_Route53DelegationSet, total=False):
    Id: str
    CallerReference: str


class Route53CreateQueryLoggingConfigResponse(TypedDict):
    QueryLoggingConfig: Route53QueryLoggingConfig
    Location: str


class Route53QueryLoggingConfig(TypedDict):
    Id: str
    HostedZoneId: str
    CloudWatchLogsLogGroupArn: str


class Route53CreateReusableDelegationSetResponse(TypedDict):
    DelegationSet: Route53DelegationSet
    Location: str


class Route53CreateTrafficPolicyResponse(TypedDict):
    TrafficPolicy: Route53TrafficPolicy
    Location: str


class _Route53TrafficPolicy(TypedDict):
    Id: str
    Version: int
    Name: str
    Type: str
    Document: str


class Route53TrafficPolicy(_Route53TrafficPolicy, total=False):
    Comment: str


class Route53CreateTrafficPolicyInstanceResponse(TypedDict):
    TrafficPolicyInstance: Route53TrafficPolicyInstance
    Location: str


class Route53TrafficPolicyInstance(TypedDict):
    Id: str
    HostedZoneId: str
    Name: str
    TTL: int
    State: str
    Message: str
    TrafficPolicyId: str
    TrafficPolicyVersion: int
    TrafficPolicyType: str


class Route53CreateTrafficPolicyVersionResponse(TypedDict):
    TrafficPolicy: Route53TrafficPolicy
    Location: str


class Route53CreateVPCAssociationAuthorizationResponse(TypedDict):
    HostedZoneId: str
    VPC: Route53VPC


class Route53DeleteHealthCheckResponse(TypedDict, total=False):
    pass


class Route53DeleteHostedZoneResponse(TypedDict):
    ChangeInfo: Route53ChangeInfo


class Route53DeleteQueryLoggingConfigResponse(TypedDict, total=False):
    pass


class Route53DeleteReusableDelegationSetResponse(TypedDict, total=False):
    pass


class Route53DeleteTrafficPolicyResponse(TypedDict, total=False):
    pass


class Route53DeleteTrafficPolicyInstanceResponse(TypedDict, total=False):
    pass


class Route53DeleteVPCAssociationAuthorizationResponse(TypedDict, total=False):
    pass


class Route53DisassociateVPCFromHostedZoneResponse(TypedDict):
    ChangeInfo: Route53ChangeInfo


class Route53GetAccountLimitResponse(TypedDict):
    Limit: Route53AccountLimit
    Count: int


class Route53AccountLimit(TypedDict):
    Type: str
    Value: int


class Route53GetChangeResponse(TypedDict):
    ChangeInfo: Route53ChangeInfo


class Route53GetCheckerIpRangesResponse(TypedDict):
    CheckerIpRanges: List[str]


class Route53GetGeoLocationResponse(TypedDict):
    GeoLocationDetails: Route53GeoLocationDetails


class Route53GeoLocationDetails(TypedDict, total=False):
    ContinentCode: str
    ContinentName: str
    CountryCode: str
    CountryName: str
    SubdivisionCode: str
    SubdivisionName: str


class Route53GetHealthCheckResponse(TypedDict):
    HealthCheck: Route53HealthCheck


class Route53GetHealthCheckCountResponse(TypedDict):
    HealthCheckCount: int


class Route53GetHealthCheckLastFailureReasonResponse(TypedDict):
    HealthCheckObservations: List[Route53HealthCheckObservation]


class Route53HealthCheckObservation(TypedDict, total=False):
    Region: str
    IPAddress: str
    StatusReport: Route53StatusReport


class Route53StatusReport(TypedDict, total=False):
    Status: str
    CheckedTime: datetime.datetime


class Route53GetHealthCheckStatusResponse(TypedDict):
    HealthCheckObservations: List[Route53HealthCheckObservation]


class _Route53GetHostedZoneResponse(TypedDict):
    HostedZone: Route53HostedZone


class Route53GetHostedZoneResponse(_Route53GetHostedZoneResponse, total=False):
    DelegationSet: Route53DelegationSet
    VPCs: List[Route53VPC]


class Route53GetHostedZoneCountResponse(TypedDict):
    HostedZoneCount: int


class Route53GetHostedZoneLimitResponse(TypedDict):
    Limit: Route53HostedZoneLimit
    Count: int


class Route53HostedZoneLimit(TypedDict):
    Type: str
    Value: int


class Route53GetQueryLoggingConfigResponse(TypedDict):
    QueryLoggingConfig: Route53QueryLoggingConfig


class Route53GetReusableDelegationSetResponse(TypedDict):
    DelegationSet: Route53DelegationSet


class Route53GetReusableDelegationSetLimitResponse(TypedDict):
    Limit: Route53ReusableDelegationSetLimit
    Count: int


class Route53ReusableDelegationSetLimit(TypedDict):
    Type: str
    Value: int


class Route53GetTrafficPolicyResponse(TypedDict):
    TrafficPolicy: Route53TrafficPolicy


class Route53GetTrafficPolicyInstanceResponse(TypedDict):
    TrafficPolicyInstance: Route53TrafficPolicyInstance


class Route53GetTrafficPolicyInstanceCountResponse(TypedDict):
    TrafficPolicyInstanceCount: int


class _Route53ListGeoLocationsResponse(TypedDict):
    GeoLocationDetailsList: List[Route53GeoLocationDetails]
    IsTruncated: bool
    MaxItems: str


class Route53ListGeoLocationsResponse(_Route53ListGeoLocationsResponse, total=False):
    NextContinentCode: str
    NextCountryCode: str
    NextSubdivisionCode: str


class _Route53ListHealthChecksResponse(TypedDict):
    HealthChecks: List[Route53HealthCheck]
    Marker: str
    IsTruncated: bool
    MaxItems: str


class Route53ListHealthChecksResponse(_Route53ListHealthChecksResponse, total=False):
    NextMarker: str


class _Route53ListHostedZonesResponse(TypedDict):
    HostedZones: List[Route53HostedZone]
    Marker: str
    IsTruncated: bool
    MaxItems: str


class Route53ListHostedZonesResponse(_Route53ListHostedZonesResponse, total=False):
    NextMarker: str


class _Route53ListHostedZonesByNameResponse(TypedDict):
    HostedZones: List[Route53HostedZone]
    IsTruncated: bool
    MaxItems: str


class Route53ListHostedZonesByNameResponse(_Route53ListHostedZonesByNameResponse, total=False):
    DNSName: str
    HostedZoneId: str
    NextDNSName: str
    NextHostedZoneId: str


class _Route53ListQueryLoggingConfigsResponse(TypedDict):
    QueryLoggingConfigs: List[Route53QueryLoggingConfig]


class Route53ListQueryLoggingConfigsResponse(_Route53ListQueryLoggingConfigsResponse, total=False):
    NextToken: str


class _Route53ListResourceRecordSetsResponse(TypedDict):
    ResourceRecordSets: List[Route53ResourceRecordSet]
    IsTruncated: bool
    MaxItems: str


class Route53ListResourceRecordSetsResponse(_Route53ListResourceRecordSetsResponse, total=False):
    NextRecordName: str
    NextRecordType: str
    NextRecordIdentifier: str


class _Route53ListReusableDelegationSetsResponse(TypedDict):
    DelegationSets: List[Route53DelegationSet]
    Marker: str
    IsTruncated: bool
    MaxItems: str


class Route53ListReusableDelegationSetsResponse(_Route53ListReusableDelegationSetsResponse, total=False):
    NextMarker: str


class Route53ListTagsForResourceResponse(TypedDict):
    ResourceTagSet: Route53ResourceTagSet


class Route53ResourceTagSet(TypedDict, total=False):
    ResourceType: str
    ResourceId: str
    Tags: List[Route53Tag]


class Route53ListTagsForResourcesResponse(TypedDict):
    ResourceTagSets: List[Route53ResourceTagSet]


class Route53ListTrafficPoliciesResponse(TypedDict):
    TrafficPolicySummaries: List[Route53TrafficPolicySummary]
    IsTruncated: bool
    TrafficPolicyIdMarker: str
    MaxItems: str


class Route53TrafficPolicySummary(TypedDict):
    Id: str
    Name: str
    Type: str
    LatestVersion: int
    TrafficPolicyCount: int


class _Route53ListTrafficPolicyInstancesResponse(TypedDict):
    TrafficPolicyInstances: List[Route53TrafficPolicyInstance]
    IsTruncated: bool
    MaxItems: str


class Route53ListTrafficPolicyInstancesResponse(_Route53ListTrafficPolicyInstancesResponse, total=False):
    HostedZoneIdMarker: str
    TrafficPolicyInstanceNameMarker: str
    TrafficPolicyInstanceTypeMarker: str


class _Route53ListTrafficPolicyInstancesByHostedZoneResponse(TypedDict):
    TrafficPolicyInstances: List[Route53TrafficPolicyInstance]
    IsTruncated: bool
    MaxItems: str


class Route53ListTrafficPolicyInstancesByHostedZoneResponse(_Route53ListTrafficPolicyInstancesByHostedZoneResponse, total=False):
    TrafficPolicyInstanceNameMarker: str
    TrafficPolicyInstanceTypeMarker: str


class _Route53ListTrafficPolicyInstancesByPolicyResponse(TypedDict):
    TrafficPolicyInstances: List[Route53TrafficPolicyInstance]
    IsTruncated: bool
    MaxItems: str


class Route53ListTrafficPolicyInstancesByPolicyResponse(_Route53ListTrafficPolicyInstancesByPolicyResponse, total=False):
    HostedZoneIdMarker: str
    TrafficPolicyInstanceNameMarker: str
    TrafficPolicyInstanceTypeMarker: str


class Route53ListTrafficPolicyVersionsResponse(TypedDict):
    TrafficPolicies: List[Route53TrafficPolicy]
    IsTruncated: bool
    TrafficPolicyVersionMarker: str
    MaxItems: str


class _Route53ListVPCAssociationAuthorizationsResponse(TypedDict):
    HostedZoneId: str
    VPCs: List[Route53VPC]


class Route53ListVPCAssociationAuthorizationsResponse(_Route53ListVPCAssociationAuthorizationsResponse, total=False):
    NextToken: str


class Route53TestDNSAnswerResponse(TypedDict):
    Nameserver: str
    RecordName: str
    RecordType: str
    RecordData: List[str]
    ResponseCode: str
    Protocol: str


class Route53UpdateHealthCheckResponse(TypedDict):
    HealthCheck: Route53HealthCheck


class Route53UpdateHostedZoneCommentResponse(TypedDict):
    HostedZone: Route53HostedZone


class Route53UpdateTrafficPolicyCommentResponse(TypedDict):
    TrafficPolicy: Route53TrafficPolicy


class Route53UpdateTrafficPolicyInstanceResponse(TypedDict):
    TrafficPolicyInstance: Route53TrafficPolicyInstance


class Route53Domains(BaseClient):
    def check_domain_availability(self, *,
        DomainName: str,
        IdnLangCode: str = ...
    ) -> Route53DomainsCheckDomainAvailabilityResponse: ...

    def check_domain_transferability(self, *,
        DomainName: str,
        AuthCode: str = ...
    ) -> Route53DomainsCheckDomainTransferabilityResponse: ...

    def delete_tags_for_domain(self, *,
        DomainName: str,
        TagsToDelete: List[str]
    ) -> Route53DomainsDeleteTagsForDomainResponse: ...

    def disable_domain_auto_renew(self, *,
        DomainName: str
    ) -> Route53DomainsDisableDomainAutoRenewResponse: ...

    def disable_domain_transfer_lock(self, *,
        DomainName: str
    ) -> Route53DomainsDisableDomainTransferLockResponse: ...

    def enable_domain_auto_renew(self, *,
        DomainName: str
    ) -> Route53DomainsEnableDomainAutoRenewResponse: ...

    def enable_domain_transfer_lock(self, *,
        DomainName: str
    ) -> Route53DomainsEnableDomainTransferLockResponse: ...

    def get_contact_reachability_status(self, *,
        domainName: str = ...
    ) -> Route53DomainsGetContactReachabilityStatusResponse: ...

    def get_domain_detail(self, *,
        DomainName: str
    ) -> Route53DomainsGetDomainDetailResponse: ...

    def get_domain_suggestions(self, *,
        DomainName: str,
        SuggestionCount: int,
        OnlyAvailable: bool
    ) -> Route53DomainsGetDomainSuggestionsResponse: ...

    def get_operation_detail(self, *,
        OperationId: str
    ) -> Route53DomainsGetOperationDetailResponse: ...

    def list_domains(self, *,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> Route53DomainsListDomainsResponse: ...

    def list_operations(self, *,
        SubmittedSince: datetime.datetime = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> Route53DomainsListOperationsResponse: ...

    def list_tags_for_domain(self, *,
        DomainName: str
    ) -> Route53DomainsListTagsForDomainResponse: ...

    def register_domain(self, *,
        DomainName: str,
        DurationInYears: int,
        AdminContact: Route53DomainsContactDetail,
        RegistrantContact: Route53DomainsContactDetail,
        TechContact: Route53DomainsContactDetail,
        IdnLangCode: str = ...,
        AutoRenew: bool = ...,
        PrivacyProtectAdminContact: bool = ...,
        PrivacyProtectRegistrantContact: bool = ...,
        PrivacyProtectTechContact: bool = ...
    ) -> Route53DomainsRegisterDomainResponse: ...

    def renew_domain(self, *,
        DomainName: str,
        CurrentExpiryYear: int,
        DurationInYears: int = ...
    ) -> Route53DomainsRenewDomainResponse: ...

    def resend_contact_reachability_email(self, *,
        domainName: str = ...
    ) -> Route53DomainsResendContactReachabilityEmailResponse: ...

    def retrieve_domain_auth_code(self, *,
        DomainName: str
    ) -> Route53DomainsRetrieveDomainAuthCodeResponse: ...

    def transfer_domain(self, *,
        DomainName: str,
        DurationInYears: int,
        AdminContact: Route53DomainsContactDetail,
        RegistrantContact: Route53DomainsContactDetail,
        TechContact: Route53DomainsContactDetail,
        IdnLangCode: str = ...,
        Nameservers: List[Route53DomainsNameserver] = ...,
        AuthCode: str = ...,
        AutoRenew: bool = ...,
        PrivacyProtectAdminContact: bool = ...,
        PrivacyProtectRegistrantContact: bool = ...,
        PrivacyProtectTechContact: bool = ...
    ) -> Route53DomainsTransferDomainResponse: ...

    def update_domain_contact(self, *,
        DomainName: str,
        AdminContact: Route53DomainsContactDetail = ...,
        RegistrantContact: Route53DomainsContactDetail = ...,
        TechContact: Route53DomainsContactDetail = ...
    ) -> Route53DomainsUpdateDomainContactResponse: ...

    def update_domain_contact_privacy(self, *,
        DomainName: str,
        AdminPrivacy: bool = ...,
        RegistrantPrivacy: bool = ...,
        TechPrivacy: bool = ...
    ) -> Route53DomainsUpdateDomainContactPrivacyResponse: ...

    def update_domain_nameservers(self, *,
        DomainName: str,
        Nameservers: List[Route53DomainsNameserver],
        FIAuthKey: str = ...
    ) -> Route53DomainsUpdateDomainNameserversResponse: ...

    def update_tags_for_domain(self, *,
        DomainName: str,
        TagsToUpdate: List[Route53DomainsTag] = ...
    ) -> Route53DomainsUpdateTagsForDomainResponse: ...

    def view_billing(self, *,
        Start: datetime.datetime = ...,
        End: datetime.datetime = ...,
        Marker: str = ...,
        MaxItems: int = ...
    ) -> Route53DomainsViewBillingResponse: ...


class Route53DomainsCheckDomainAvailabilityResponse(TypedDict):
    Availability: str


class Route53DomainsCheckDomainTransferabilityResponse(TypedDict):
    Transferability: Route53DomainsDomainTransferability


class Route53DomainsDomainTransferability(TypedDict, total=False):
    Transferable: str


class Route53DomainsDeleteTagsForDomainResponse(TypedDict, total=False):
    pass


class Route53DomainsDisableDomainAutoRenewResponse(TypedDict, total=False):
    pass


class Route53DomainsDisableDomainTransferLockResponse(TypedDict):
    OperationId: str


class Route53DomainsEnableDomainAutoRenewResponse(TypedDict, total=False):
    pass


class Route53DomainsEnableDomainTransferLockResponse(TypedDict):
    OperationId: str


class Route53DomainsGetContactReachabilityStatusResponse(TypedDict, total=False):
    domainName: str
    status: str


class _Route53DomainsGetDomainDetailResponse(TypedDict):
    DomainName: str
    Nameservers: List[Route53DomainsNameserver]
    AdminContact: Route53DomainsContactDetail
    RegistrantContact: Route53DomainsContactDetail
    TechContact: Route53DomainsContactDetail


class Route53DomainsGetDomainDetailResponse(_Route53DomainsGetDomainDetailResponse, total=False):
    AutoRenew: bool
    AdminPrivacy: bool
    RegistrantPrivacy: bool
    TechPrivacy: bool
    RegistrarName: str
    WhoIsServer: str
    RegistrarUrl: str
    AbuseContactEmail: str
    AbuseContactPhone: str
    RegistryDomainId: str
    CreationDate: datetime.datetime
    UpdatedDate: datetime.datetime
    ExpirationDate: datetime.datetime
    Reseller: str
    DnsSec: str
    StatusList: List[str]


class _Route53DomainsNameserver(TypedDict):
    Name: str


class Route53DomainsNameserver(_Route53DomainsNameserver, total=False):
    GlueIps: List[str]


class Route53DomainsContactDetail(TypedDict, total=False):
    FirstName: str
    LastName: str
    ContactType: str
    OrganizationName: str
    AddressLine1: str
    AddressLine2: str
    City: str
    State: str
    CountryCode: str
    ZipCode: str
    PhoneNumber: str
    Email: str
    Fax: str
    ExtraParams: List[Route53DomainsExtraParam]


class Route53DomainsExtraParam(TypedDict):
    Name: str
    Value: str


class Route53DomainsGetDomainSuggestionsResponse(TypedDict, total=False):
    SuggestionsList: List[Route53DomainsDomainSuggestion]


class Route53DomainsDomainSuggestion(TypedDict, total=False):
    DomainName: str
    Availability: str


class Route53DomainsGetOperationDetailResponse(TypedDict, total=False):
    OperationId: str
    Status: str
    Message: str
    DomainName: str
    Type: str
    SubmittedDate: datetime.datetime


class _Route53DomainsListDomainsResponse(TypedDict):
    Domains: List[Route53DomainsDomainSummary]


class Route53DomainsListDomainsResponse(_Route53DomainsListDomainsResponse, total=False):
    NextPageMarker: str


class _Route53DomainsDomainSummary(TypedDict):
    DomainName: str


class Route53DomainsDomainSummary(_Route53DomainsDomainSummary, total=False):
    AutoRenew: bool
    TransferLock: bool
    Expiry: datetime.datetime


class _Route53DomainsListOperationsResponse(TypedDict):
    Operations: List[Route53DomainsOperationSummary]


class Route53DomainsListOperationsResponse(_Route53DomainsListOperationsResponse, total=False):
    NextPageMarker: str


class Route53DomainsOperationSummary(TypedDict):
    OperationId: str
    Status: str
    Type: str
    SubmittedDate: datetime.datetime


class Route53DomainsListTagsForDomainResponse(TypedDict):
    TagList: List[Route53DomainsTag]


class Route53DomainsTag(TypedDict, total=False):
    Key: str
    Value: str


class Route53DomainsRegisterDomainResponse(TypedDict):
    OperationId: str


class Route53DomainsRenewDomainResponse(TypedDict):
    OperationId: str


class Route53DomainsResendContactReachabilityEmailResponse(TypedDict, total=False):
    domainName: str
    emailAddress: str
    isAlreadyVerified: bool


class Route53DomainsRetrieveDomainAuthCodeResponse(TypedDict):
    AuthCode: str


class Route53DomainsTransferDomainResponse(TypedDict):
    OperationId: str


class Route53DomainsUpdateDomainContactResponse(TypedDict):
    OperationId: str


class Route53DomainsUpdateDomainContactPrivacyResponse(TypedDict):
    OperationId: str


class Route53DomainsUpdateDomainNameserversResponse(TypedDict):
    OperationId: str


class Route53DomainsUpdateTagsForDomainResponse(TypedDict, total=False):
    pass


class Route53DomainsViewBillingResponse(TypedDict, total=False):
    NextPageMarker: str
    BillingRecords: List[Route53DomainsBillingRecord]


class Route53DomainsBillingRecord(TypedDict, total=False):
    DomainName: str
    Operation: str
    InvoiceId: str
    BillDate: datetime.datetime
    Price: float


class Route53Resolver(BaseClient):
    def associate_resolver_endpoint_ip_address(self, *,
        ResolverEndpointId: str,
        IpAddress: Route53ResolverIpAddressUpdate
    ) -> Route53ResolverAssociateResolverEndpointIpAddressResponse: ...

    def associate_resolver_rule(self, *,
        ResolverRuleId: str,
        VPCId: str,
        Name: str = ...
    ) -> Route53ResolverAssociateResolverRuleResponse: ...

    def create_resolver_endpoint(self, *,
        CreatorRequestId: str,
        SecurityGroupIds: List[str],
        Direction: str,
        IpAddresses: List[Route53ResolverIpAddressRequest],
        Name: str = ...,
        Tags: List[Route53ResolverTag] = ...
    ) -> Route53ResolverCreateResolverEndpointResponse: ...

    def create_resolver_rule(self, *,
        CreatorRequestId: str,
        RuleType: str,
        DomainName: str,
        Name: str = ...,
        TargetIps: List[Route53ResolverTargetAddress] = ...,
        ResolverEndpointId: str = ...,
        Tags: List[Route53ResolverTag] = ...
    ) -> Route53ResolverCreateResolverRuleResponse: ...

    def delete_resolver_endpoint(self, *,
        ResolverEndpointId: str
    ) -> Route53ResolverDeleteResolverEndpointResponse: ...

    def delete_resolver_rule(self, *,
        ResolverRuleId: str
    ) -> Route53ResolverDeleteResolverRuleResponse: ...

    def disassociate_resolver_endpoint_ip_address(self, *,
        ResolverEndpointId: str,
        IpAddress: Route53ResolverIpAddressUpdate
    ) -> Route53ResolverDisassociateResolverEndpointIpAddressResponse: ...

    def disassociate_resolver_rule(self, *,
        VPCId: str,
        ResolverRuleId: str
    ) -> Route53ResolverDisassociateResolverRuleResponse: ...

    def get_resolver_endpoint(self, *,
        ResolverEndpointId: str
    ) -> Route53ResolverGetResolverEndpointResponse: ...

    def get_resolver_rule(self, *,
        ResolverRuleId: str
    ) -> Route53ResolverGetResolverRuleResponse: ...

    def get_resolver_rule_association(self, *,
        ResolverRuleAssociationId: str
    ) -> Route53ResolverGetResolverRuleAssociationResponse: ...

    def get_resolver_rule_policy(self, *,
        Arn: str
    ) -> Route53ResolverGetResolverRulePolicyResponse: ...

    def list_resolver_endpoint_ip_addresses(self, *,
        ResolverEndpointId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> Route53ResolverListResolverEndpointIpAddressesResponse: ...

    def list_resolver_endpoints(self, *,
        MaxResults: int = ...,
        NextToken: str = ...,
        Filters: List[Route53ResolverFilter] = ...
    ) -> Route53ResolverListResolverEndpointsResponse: ...

    def list_resolver_rule_associations(self, *,
        MaxResults: int = ...,
        NextToken: str = ...,
        Filters: List[Route53ResolverFilter] = ...
    ) -> Route53ResolverListResolverRuleAssociationsResponse: ...

    def list_resolver_rules(self, *,
        MaxResults: int = ...,
        NextToken: str = ...,
        Filters: List[Route53ResolverFilter] = ...
    ) -> Route53ResolverListResolverRulesResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> Route53ResolverListTagsForResourceResponse: ...

    def put_resolver_rule_policy(self, *,
        Arn: str,
        ResolverRulePolicy: str
    ) -> Route53ResolverPutResolverRulePolicyResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: List[Route53ResolverTag]
    ) -> Route53ResolverTagResourceResponse: ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ) -> Route53ResolverUntagResourceResponse: ...

    def update_resolver_endpoint(self, *,
        ResolverEndpointId: str,
        Name: str = ...
    ) -> Route53ResolverUpdateResolverEndpointResponse: ...

    def update_resolver_rule(self, *,
        ResolverRuleId: str,
        Config: Route53ResolverResolverRuleConfig
    ) -> Route53ResolverUpdateResolverRuleResponse: ...


class Route53ResolverIpAddressUpdate(TypedDict, total=False):
    IpId: str
    SubnetId: str
    Ip: str


class Route53ResolverAssociateResolverEndpointIpAddressResponse(TypedDict, total=False):
    ResolverEndpoint: Route53ResolverResolverEndpoint


class Route53ResolverResolverEndpoint(TypedDict, total=False):
    Id: str
    CreatorRequestId: str
    Arn: str
    Name: str
    SecurityGroupIds: List[str]
    Direction: str
    IpAddressCount: int
    HostVPCId: str
    Status: str
    StatusMessage: str
    CreationTime: str
    ModificationTime: str


class Route53ResolverAssociateResolverRuleResponse(TypedDict, total=False):
    ResolverRuleAssociation: Route53ResolverResolverRuleAssociation


class Route53ResolverResolverRuleAssociation(TypedDict, total=False):
    Id: str
    ResolverRuleId: str
    Name: str
    VPCId: str
    Status: str
    StatusMessage: str


class _Route53ResolverIpAddressRequest(TypedDict):
    SubnetId: str


class Route53ResolverIpAddressRequest(_Route53ResolverIpAddressRequest, total=False):
    Ip: str


class Route53ResolverTag(TypedDict, total=False):
    Key: str
    Value: str


class Route53ResolverCreateResolverEndpointResponse(TypedDict, total=False):
    ResolverEndpoint: Route53ResolverResolverEndpoint


class _Route53ResolverTargetAddress(TypedDict):
    Ip: str


class Route53ResolverTargetAddress(_Route53ResolverTargetAddress, total=False):
    Port: int


class Route53ResolverCreateResolverRuleResponse(TypedDict, total=False):
    ResolverRule: Route53ResolverResolverRule


class Route53ResolverResolverRule(TypedDict, total=False):
    Id: str
    CreatorRequestId: str
    Arn: str
    DomainName: str
    Status: str
    StatusMessage: str
    RuleType: str
    Name: str
    TargetIps: List[Route53ResolverTargetAddress]
    ResolverEndpointId: str
    OwnerId: str
    ShareStatus: str


class Route53ResolverDeleteResolverEndpointResponse(TypedDict, total=False):
    ResolverEndpoint: Route53ResolverResolverEndpoint


class Route53ResolverDeleteResolverRuleResponse(TypedDict, total=False):
    ResolverRule: Route53ResolverResolverRule


class Route53ResolverDisassociateResolverEndpointIpAddressResponse(TypedDict, total=False):
    ResolverEndpoint: Route53ResolverResolverEndpoint


class Route53ResolverDisassociateResolverRuleResponse(TypedDict, total=False):
    ResolverRuleAssociation: Route53ResolverResolverRuleAssociation


class Route53ResolverGetResolverEndpointResponse(TypedDict, total=False):
    ResolverEndpoint: Route53ResolverResolverEndpoint


class Route53ResolverGetResolverRuleResponse(TypedDict, total=False):
    ResolverRule: Route53ResolverResolverRule


class Route53ResolverGetResolverRuleAssociationResponse(TypedDict, total=False):
    ResolverRuleAssociation: Route53ResolverResolverRuleAssociation


class Route53ResolverGetResolverRulePolicyResponse(TypedDict, total=False):
    ResolverRulePolicy: str


class Route53ResolverListResolverEndpointIpAddressesResponse(TypedDict, total=False):
    NextToken: str
    MaxResults: int
    IpAddresses: List[Route53ResolverIpAddressResponse]


class Route53ResolverIpAddressResponse(TypedDict, total=False):
    IpId: str
    SubnetId: str
    Ip: str
    Status: str
    StatusMessage: str
    CreationTime: str
    ModificationTime: str


class Route53ResolverFilter(TypedDict, total=False):
    Name: str
    Values: List[str]


class Route53ResolverListResolverEndpointsResponse(TypedDict, total=False):
    NextToken: str
    MaxResults: int
    ResolverEndpoints: List[Route53ResolverResolverEndpoint]


class Route53ResolverListResolverRuleAssociationsResponse(TypedDict, total=False):
    NextToken: str
    MaxResults: int
    ResolverRuleAssociations: List[Route53ResolverResolverRuleAssociation]


class Route53ResolverListResolverRulesResponse(TypedDict, total=False):
    NextToken: str
    MaxResults: int
    ResolverRules: List[Route53ResolverResolverRule]


class Route53ResolverListTagsForResourceResponse(TypedDict, total=False):
    Tags: List[Route53ResolverTag]
    NextToken: str


class Route53ResolverPutResolverRulePolicyResponse(TypedDict, total=False):
    ReturnValue: bool


class Route53ResolverTagResourceResponse(TypedDict, total=False):
    pass


class Route53ResolverUntagResourceResponse(TypedDict, total=False):
    pass


class Route53ResolverUpdateResolverEndpointResponse(TypedDict, total=False):
    ResolverEndpoint: Route53ResolverResolverEndpoint


class Route53ResolverResolverRuleConfig(TypedDict, total=False):
    Name: str
    TargetIps: List[Route53ResolverTargetAddress]
    ResolverEndpointId: str


class Route53ResolverUpdateResolverRuleResponse(TypedDict, total=False):
    ResolverRule: Route53ResolverResolverRule


class S3(BaseClient):
    def abort_multipart_upload(self, *,
        Bucket: str,
        Key: str,
        UploadId: str,
        RequestPayer: str = ...
    ) -> S3AbortMultipartUploadOutput: ...

    def complete_multipart_upload(self, *,
        Bucket: str,
        Key: str,
        UploadId: str,
        MultipartUpload: S3CompletedMultipartUpload = ...,
        RequestPayer: str = ...
    ) -> S3CompleteMultipartUploadOutput: ...

    def copy_object(self, *,
        Bucket: str,
        CopySource: str,
        Key: str,
        ACL: str = ...,
        CacheControl: str = ...,
        ContentDisposition: str = ...,
        ContentEncoding: str = ...,
        ContentLanguage: str = ...,
        ContentType: str = ...,
        CopySourceIfMatch: str = ...,
        CopySourceIfModifiedSince: datetime.datetime = ...,
        CopySourceIfNoneMatch: str = ...,
        CopySourceIfUnmodifiedSince: datetime.datetime = ...,
        Expires: datetime.datetime = ...,
        GrantFullControl: str = ...,
        GrantRead: str = ...,
        GrantReadACP: str = ...,
        GrantWriteACP: str = ...,
        Metadata: Dict[str, str] = ...,
        MetadataDirective: str = ...,
        TaggingDirective: str = ...,
        ServerSideEncryption: str = ...,
        StorageClass: str = ...,
        WebsiteRedirectLocation: str = ...,
        SSECustomerAlgorithm: str = ...,
        SSECustomerKey: str = ...,
        SSECustomerKeyMD5: str = ...,
        SSEKMSKeyId: str = ...,
        CopySourceSSECustomerAlgorithm: str = ...,
        CopySourceSSECustomerKey: str = ...,
        CopySourceSSECustomerKeyMD5: str = ...,
        RequestPayer: str = ...,
        Tagging: str = ...,
        ObjectLockMode: str = ...,
        ObjectLockRetainUntilDate: datetime.datetime = ...,
        ObjectLockLegalHoldStatus: str = ...
    ) -> S3CopyObjectOutput: ...

    def create_bucket(self, *,
        Bucket: str,
        ACL: str = ...,
        CreateBucketConfiguration: S3CreateBucketConfiguration = ...,
        GrantFullControl: str = ...,
        GrantRead: str = ...,
        GrantReadACP: str = ...,
        GrantWrite: str = ...,
        GrantWriteACP: str = ...,
        ObjectLockEnabledForBucket: bool = ...
    ) -> S3CreateBucketOutput: ...

    def create_multipart_upload(self, *,
        Bucket: str,
        Key: str,
        ACL: str = ...,
        CacheControl: str = ...,
        ContentDisposition: str = ...,
        ContentEncoding: str = ...,
        ContentLanguage: str = ...,
        ContentType: str = ...,
        Expires: datetime.datetime = ...,
        GrantFullControl: str = ...,
        GrantRead: str = ...,
        GrantReadACP: str = ...,
        GrantWriteACP: str = ...,
        Metadata: Dict[str, str] = ...,
        ServerSideEncryption: str = ...,
        StorageClass: str = ...,
        WebsiteRedirectLocation: str = ...,
        SSECustomerAlgorithm: str = ...,
        SSECustomerKey: str = ...,
        SSECustomerKeyMD5: str = ...,
        SSEKMSKeyId: str = ...,
        RequestPayer: str = ...,
        Tagging: str = ...,
        ObjectLockMode: str = ...,
        ObjectLockRetainUntilDate: datetime.datetime = ...,
        ObjectLockLegalHoldStatus: str = ...
    ) -> S3CreateMultipartUploadOutput: ...

    def delete_bucket(self, *,
        Bucket: str
    ): ...

    def delete_bucket_analytics_configuration(self, *,
        Bucket: str,
        Id: str
    ): ...

    def delete_bucket_cors(self, *,
        Bucket: str
    ): ...

    def delete_bucket_encryption(self, *,
        Bucket: str
    ): ...

    def delete_bucket_inventory_configuration(self, *,
        Bucket: str,
        Id: str
    ): ...

    def delete_bucket_lifecycle(self, *,
        Bucket: str
    ): ...

    def delete_bucket_metrics_configuration(self, *,
        Bucket: str,
        Id: str
    ): ...

    def delete_bucket_policy(self, *,
        Bucket: str
    ): ...

    def delete_bucket_replication(self, *,
        Bucket: str
    ): ...

    def delete_bucket_tagging(self, *,
        Bucket: str
    ): ...

    def delete_bucket_website(self, *,
        Bucket: str
    ): ...

    def delete_object(self, *,
        Bucket: str,
        Key: str,
        MFA: str = ...,
        VersionId: str = ...,
        RequestPayer: str = ...,
        BypassGovernanceRetention: bool = ...
    ) -> S3DeleteObjectOutput: ...

    def delete_object_tagging(self, *,
        Bucket: str,
        Key: str,
        VersionId: str = ...
    ) -> S3DeleteObjectTaggingOutput: ...

    def delete_objects(self, *,
        Bucket: str,
        Delete: S3Delete,
        MFA: str = ...,
        RequestPayer: str = ...,
        BypassGovernanceRetention: bool = ...
    ) -> S3DeleteObjectsOutput: ...

    def delete_public_access_block(self, *,
        Bucket: str
    ): ...

    def get_bucket_accelerate_configuration(self, *,
        Bucket: str
    ) -> S3GetBucketAccelerateConfigurationOutput: ...

    def get_bucket_acl(self, *,
        Bucket: str
    ) -> S3GetBucketAclOutput: ...

    def get_bucket_analytics_configuration(self, *,
        Bucket: str,
        Id: str
    ) -> S3GetBucketAnalyticsConfigurationOutput: ...

    def get_bucket_cors(self, *,
        Bucket: str
    ) -> S3GetBucketCorsOutput: ...

    def get_bucket_encryption(self, *,
        Bucket: str
    ) -> S3GetBucketEncryptionOutput: ...

    def get_bucket_inventory_configuration(self, *,
        Bucket: str,
        Id: str
    ) -> S3GetBucketInventoryConfigurationOutput: ...

    def get_bucket_lifecycle(self, *,
        Bucket: str
    ) -> S3GetBucketLifecycleOutput: ...

    def get_bucket_lifecycle_configuration(self, *,
        Bucket: str
    ) -> S3GetBucketLifecycleConfigurationOutput: ...

    def get_bucket_location(self, *,
        Bucket: str
    ) -> S3GetBucketLocationOutput: ...

    def get_bucket_logging(self, *,
        Bucket: str
    ) -> S3GetBucketLoggingOutput: ...

    def get_bucket_metrics_configuration(self, *,
        Bucket: str,
        Id: str
    ) -> S3GetBucketMetricsConfigurationOutput: ...

    def get_bucket_notification(self, *,
        Bucket: str
    ) -> S3NotificationConfigurationDeprecated: ...

    def get_bucket_notification_configuration(self, *,
        Bucket: str
    ) -> S3NotificationConfiguration: ...

    def get_bucket_policy(self, *,
        Bucket: str
    ) -> S3GetBucketPolicyOutput: ...

    def get_bucket_policy_status(self, *,
        Bucket: str
    ) -> S3GetBucketPolicyStatusOutput: ...

    def get_bucket_replication(self, *,
        Bucket: str
    ) -> S3GetBucketReplicationOutput: ...

    def get_bucket_request_payment(self, *,
        Bucket: str
    ) -> S3GetBucketRequestPaymentOutput: ...

    def get_bucket_tagging(self, *,
        Bucket: str
    ) -> S3GetBucketTaggingOutput: ...

    def get_bucket_versioning(self, *,
        Bucket: str
    ) -> S3GetBucketVersioningOutput: ...

    def get_bucket_website(self, *,
        Bucket: str
    ) -> S3GetBucketWebsiteOutput: ...

    def get_object(self, *,
        Bucket: str,
        Key: str,
        IfMatch: str = ...,
        IfModifiedSince: datetime.datetime = ...,
        IfNoneMatch: str = ...,
        IfUnmodifiedSince: datetime.datetime = ...,
        Range: str = ...,
        ResponseCacheControl: str = ...,
        ResponseContentDisposition: str = ...,
        ResponseContentEncoding: str = ...,
        ResponseContentLanguage: str = ...,
        ResponseContentType: str = ...,
        ResponseExpires: datetime.datetime = ...,
        VersionId: str = ...,
        SSECustomerAlgorithm: str = ...,
        SSECustomerKey: str = ...,
        SSECustomerKeyMD5: str = ...,
        RequestPayer: str = ...,
        PartNumber: int = ...
    ) -> S3GetObjectOutput: ...

    def get_object_acl(self, *,
        Bucket: str,
        Key: str,
        VersionId: str = ...,
        RequestPayer: str = ...
    ) -> S3GetObjectAclOutput: ...

    def get_object_legal_hold(self, *,
        Bucket: str,
        Key: str,
        VersionId: str = ...,
        RequestPayer: str = ...
    ) -> S3GetObjectLegalHoldOutput: ...

    def get_object_lock_configuration(self, *,
        Bucket: str
    ) -> S3GetObjectLockConfigurationOutput: ...

    def get_object_retention(self, *,
        Bucket: str,
        Key: str,
        VersionId: str = ...,
        RequestPayer: str = ...
    ) -> S3GetObjectRetentionOutput: ...

    def get_object_tagging(self, *,
        Bucket: str,
        Key: str,
        VersionId: str = ...
    ) -> S3GetObjectTaggingOutput: ...

    def get_object_torrent(self, *,
        Bucket: str,
        Key: str,
        RequestPayer: str = ...
    ) -> S3GetObjectTorrentOutput: ...

    def get_public_access_block(self, *,
        Bucket: str
    ) -> S3GetPublicAccessBlockOutput: ...

    def head_bucket(self, *,
        Bucket: str
    ): ...

    def head_object(self, *,
        Bucket: str,
        Key: str,
        IfMatch: str = ...,
        IfModifiedSince: datetime.datetime = ...,
        IfNoneMatch: str = ...,
        IfUnmodifiedSince: datetime.datetime = ...,
        Range: str = ...,
        VersionId: str = ...,
        SSECustomerAlgorithm: str = ...,
        SSECustomerKey: str = ...,
        SSECustomerKeyMD5: str = ...,
        RequestPayer: str = ...,
        PartNumber: int = ...
    ) -> S3HeadObjectOutput: ...

    def list_bucket_analytics_configurations(self, *,
        Bucket: str,
        ContinuationToken: str = ...
    ) -> S3ListBucketAnalyticsConfigurationsOutput: ...

    def list_bucket_inventory_configurations(self, *,
        Bucket: str,
        ContinuationToken: str = ...
    ) -> S3ListBucketInventoryConfigurationsOutput: ...

    def list_bucket_metrics_configurations(self, *,
        Bucket: str,
        ContinuationToken: str = ...
    ) -> S3ListBucketMetricsConfigurationsOutput: ...

    def list_buckets(self) -> S3ListBucketsOutput: ...

    def list_multipart_uploads(self, *,
        Bucket: str,
        Delimiter: str = ...,
        EncodingType: str = ...,
        KeyMarker: str = ...,
        MaxUploads: int = ...,
        Prefix: str = ...,
        UploadIdMarker: str = ...
    ) -> S3ListMultipartUploadsOutput: ...

    def list_object_versions(self, *,
        Bucket: str,
        Delimiter: str = ...,
        EncodingType: str = ...,
        KeyMarker: str = ...,
        MaxKeys: int = ...,
        Prefix: str = ...,
        VersionIdMarker: str = ...
    ) -> S3ListObjectVersionsOutput: ...

    def list_objects(self, *,
        Bucket: str,
        Delimiter: str = ...,
        EncodingType: str = ...,
        Marker: str = ...,
        MaxKeys: int = ...,
        Prefix: str = ...,
        RequestPayer: str = ...
    ) -> S3ListObjectsOutput: ...

    def list_objects_v2(self, *,
        Bucket: str,
        Delimiter: str = ...,
        EncodingType: str = ...,
        MaxKeys: int = ...,
        Prefix: str = ...,
        ContinuationToken: str = ...,
        FetchOwner: bool = ...,
        StartAfter: str = ...,
        RequestPayer: str = ...
    ) -> S3ListObjectsV2Output: ...

    def list_parts(self, *,
        Bucket: str,
        Key: str,
        UploadId: str,
        MaxParts: int = ...,
        PartNumberMarker: int = ...,
        RequestPayer: str = ...
    ) -> S3ListPartsOutput: ...

    def put_bucket_accelerate_configuration(self, *,
        Bucket: str,
        AccelerateConfiguration: S3AccelerateConfiguration
    ): ...

    def put_bucket_acl(self, *,
        Bucket: str,
        ACL: str = ...,
        AccessControlPolicy: S3AccessControlPolicy = ...,
        ContentMD5: str = ...,
        GrantFullControl: str = ...,
        GrantRead: str = ...,
        GrantReadACP: str = ...,
        GrantWrite: str = ...,
        GrantWriteACP: str = ...
    ): ...

    def put_bucket_analytics_configuration(self, *,
        Bucket: str,
        Id: str,
        AnalyticsConfiguration: S3AnalyticsConfiguration
    ): ...

    def put_bucket_cors(self, *,
        Bucket: str,
        CORSConfiguration: S3CORSConfiguration,
        ContentMD5: str = ...
    ): ...

    def put_bucket_encryption(self, *,
        Bucket: str,
        ServerSideEncryptionConfiguration: S3ServerSideEncryptionConfiguration,
        ContentMD5: str = ...
    ): ...

    def put_bucket_inventory_configuration(self, *,
        Bucket: str,
        Id: str,
        InventoryConfiguration: S3InventoryConfiguration
    ): ...

    def put_bucket_lifecycle(self, *,
        Bucket: str,
        ContentMD5: str = ...,
        LifecycleConfiguration: S3LifecycleConfiguration = ...
    ): ...

    def put_bucket_lifecycle_configuration(self, *,
        Bucket: str,
        LifecycleConfiguration: S3BucketLifecycleConfiguration = ...
    ): ...

    def put_bucket_logging(self, *,
        Bucket: str,
        BucketLoggingStatus: S3BucketLoggingStatus,
        ContentMD5: str = ...
    ): ...

    def put_bucket_metrics_configuration(self, *,
        Bucket: str,
        Id: str,
        MetricsConfiguration: S3MetricsConfiguration
    ): ...

    def put_bucket_notification(self, *,
        Bucket: str,
        NotificationConfiguration: S3NotificationConfigurationDeprecated,
        ContentMD5: str = ...
    ): ...

    def put_bucket_notification_configuration(self, *,
        Bucket: str,
        NotificationConfiguration: S3NotificationConfiguration
    ): ...

    def put_bucket_policy(self, *,
        Bucket: str,
        Policy: str,
        ContentMD5: str = ...,
        ConfirmRemoveSelfBucketAccess: bool = ...
    ): ...

    def put_bucket_replication(self, *,
        Bucket: str,
        ReplicationConfiguration: S3ReplicationConfiguration,
        ContentMD5: str = ...
    ): ...

    def put_bucket_request_payment(self, *,
        Bucket: str,
        RequestPaymentConfiguration: S3RequestPaymentConfiguration,
        ContentMD5: str = ...
    ): ...

    def put_bucket_tagging(self, *,
        Bucket: str,
        Tagging: S3Tagging,
        ContentMD5: str = ...
    ): ...

    def put_bucket_versioning(self, *,
        Bucket: str,
        VersioningConfiguration: S3VersioningConfiguration,
        ContentMD5: str = ...,
        MFA: str = ...
    ): ...

    def put_bucket_website(self, *,
        Bucket: str,
        WebsiteConfiguration: S3WebsiteConfiguration,
        ContentMD5: str = ...
    ): ...

    def put_object(self, *,
        Bucket: str,
        Key: str,
        ACL: str = ...,
        Body: bytes = ...,
        CacheControl: str = ...,
        ContentDisposition: str = ...,
        ContentEncoding: str = ...,
        ContentLanguage: str = ...,
        ContentLength: int = ...,
        ContentMD5: str = ...,
        ContentType: str = ...,
        Expires: datetime.datetime = ...,
        GrantFullControl: str = ...,
        GrantRead: str = ...,
        GrantReadACP: str = ...,
        GrantWriteACP: str = ...,
        Metadata: Dict[str, str] = ...,
        ServerSideEncryption: str = ...,
        StorageClass: str = ...,
        WebsiteRedirectLocation: str = ...,
        SSECustomerAlgorithm: str = ...,
        SSECustomerKey: str = ...,
        SSECustomerKeyMD5: str = ...,
        SSEKMSKeyId: str = ...,
        RequestPayer: str = ...,
        Tagging: str = ...,
        ObjectLockMode: str = ...,
        ObjectLockRetainUntilDate: datetime.datetime = ...,
        ObjectLockLegalHoldStatus: str = ...
    ) -> S3PutObjectOutput: ...

    def put_object_acl(self, *,
        Bucket: str,
        Key: str,
        ACL: str = ...,
        AccessControlPolicy: S3AccessControlPolicy = ...,
        ContentMD5: str = ...,
        GrantFullControl: str = ...,
        GrantRead: str = ...,
        GrantReadACP: str = ...,
        GrantWrite: str = ...,
        GrantWriteACP: str = ...,
        RequestPayer: str = ...,
        VersionId: str = ...
    ) -> S3PutObjectAclOutput: ...

    def put_object_legal_hold(self, *,
        Bucket: str,
        Key: str,
        LegalHold: S3ObjectLockLegalHold = ...,
        RequestPayer: str = ...,
        VersionId: str = ...,
        ContentMD5: str = ...
    ) -> S3PutObjectLegalHoldOutput: ...

    def put_object_lock_configuration(self, *,
        Bucket: str,
        ObjectLockConfiguration: S3ObjectLockConfiguration = ...,
        RequestPayer: str = ...,
        Token: str = ...,
        ContentMD5: str = ...
    ) -> S3PutObjectLockConfigurationOutput: ...

    def put_object_retention(self, *,
        Bucket: str,
        Key: str,
        Retention: S3ObjectLockRetention = ...,
        RequestPayer: str = ...,
        VersionId: str = ...,
        BypassGovernanceRetention: bool = ...,
        ContentMD5: str = ...
    ) -> S3PutObjectRetentionOutput: ...

    def put_object_tagging(self, *,
        Bucket: str,
        Key: str,
        Tagging: S3Tagging,
        VersionId: str = ...,
        ContentMD5: str = ...
    ) -> S3PutObjectTaggingOutput: ...

    def put_public_access_block(self, *,
        Bucket: str,
        PublicAccessBlockConfiguration: S3PublicAccessBlockConfiguration,
        ContentMD5: str = ...
    ): ...

    def restore_object(self, *,
        Bucket: str,
        Key: str,
        VersionId: str = ...,
        RestoreRequest: S3RestoreRequest = ...,
        RequestPayer: str = ...
    ) -> S3RestoreObjectOutput: ...

    def select_object_content(self, *,
        Bucket: str,
        Key: str,
        Expression: str,
        ExpressionType: str,
        InputSerialization: S3InputSerialization,
        OutputSerialization: S3OutputSerialization,
        SSECustomerAlgorithm: str = ...,
        SSECustomerKey: str = ...,
        SSECustomerKeyMD5: str = ...,
        RequestProgress: S3RequestProgress = ...
    ) -> S3SelectObjectContentOutput: ...

    def upload_part(self, *,
        Bucket: str,
        Key: str,
        PartNumber: int,
        UploadId: str,
        Body: bytes = ...,
        ContentLength: int = ...,
        ContentMD5: str = ...,
        SSECustomerAlgorithm: str = ...,
        SSECustomerKey: str = ...,
        SSECustomerKeyMD5: str = ...,
        RequestPayer: str = ...
    ) -> S3UploadPartOutput: ...

    def upload_part_copy(self, *,
        Bucket: str,
        CopySource: str,
        Key: str,
        PartNumber: int,
        UploadId: str,
        CopySourceIfMatch: str = ...,
        CopySourceIfModifiedSince: datetime.datetime = ...,
        CopySourceIfNoneMatch: str = ...,
        CopySourceIfUnmodifiedSince: datetime.datetime = ...,
        CopySourceRange: str = ...,
        SSECustomerAlgorithm: str = ...,
        SSECustomerKey: str = ...,
        SSECustomerKeyMD5: str = ...,
        CopySourceSSECustomerAlgorithm: str = ...,
        CopySourceSSECustomerKey: str = ...,
        CopySourceSSECustomerKeyMD5: str = ...,
        RequestPayer: str = ...
    ) -> S3UploadPartCopyOutput: ...


class S3AbortMultipartUploadOutput(TypedDict, total=False):
    RequestCharged: str


class S3CompletedMultipartUpload(TypedDict, total=False):
    Parts: List[S3CompletedPart]


class S3CompletedPart(TypedDict, total=False):
    ETag: str
    PartNumber: int


class S3CompleteMultipartUploadOutput(TypedDict, total=False):
    Location: str
    Bucket: str
    Key: str
    Expiration: str
    ETag: str
    ServerSideEncryption: str
    VersionId: str
    SSEKMSKeyId: str
    RequestCharged: str


class S3CopyObjectOutput(TypedDict, total=False):
    CopyObjectResult: S3CopyObjectResult
    Expiration: str
    CopySourceVersionId: str
    VersionId: str
    ServerSideEncryption: str
    SSECustomerAlgorithm: str
    SSECustomerKeyMD5: str
    SSEKMSKeyId: str
    RequestCharged: str


class S3CopyObjectResult(TypedDict, total=False):
    ETag: str
    LastModified: datetime.datetime


class S3CreateBucketConfiguration(TypedDict, total=False):
    LocationConstraint: str


class S3CreateBucketOutput(TypedDict, total=False):
    Location: str


class S3CreateMultipartUploadOutput(TypedDict, total=False):
    AbortDate: datetime.datetime
    AbortRuleId: str
    Bucket: str
    Key: str
    UploadId: str
    ServerSideEncryption: str
    SSECustomerAlgorithm: str
    SSECustomerKeyMD5: str
    SSEKMSKeyId: str
    RequestCharged: str


class S3DeleteObjectOutput(TypedDict, total=False):
    DeleteMarker: bool
    VersionId: str
    RequestCharged: str


class S3DeleteObjectTaggingOutput(TypedDict, total=False):
    VersionId: str


class _S3Delete(TypedDict):
    Objects: List[S3ObjectIdentifier]


class S3Delete(_S3Delete, total=False):
    Quiet: bool


class _S3ObjectIdentifier(TypedDict):
    Key: str


class S3ObjectIdentifier(_S3ObjectIdentifier, total=False):
    VersionId: str


class S3DeleteObjectsOutput(TypedDict, total=False):
    Deleted: List[S3DeletedObject]
    RequestCharged: str
    Errors: List[S3Error]


class S3DeletedObject(TypedDict, total=False):
    Key: str
    VersionId: str
    DeleteMarker: bool
    DeleteMarkerVersionId: str


class S3Error(TypedDict, total=False):
    Key: str
    VersionId: str
    Code: str
    Message: str


class S3GetBucketAccelerateConfigurationOutput(TypedDict, total=False):
    Status: str


class S3GetBucketAclOutput(TypedDict, total=False):
    Owner: S3Owner
    Grants: List[S3Grant]


class S3Owner(TypedDict, total=False):
    DisplayName: str
    ID: str


class S3Grant(TypedDict, total=False):
    Grantee: S3Grantee
    Permission: str


class _S3Grantee(TypedDict):
    Type: str


class S3Grantee(_S3Grantee, total=False):
    DisplayName: str
    EmailAddress: str
    ID: str
    URI: str


class S3GetBucketAnalyticsConfigurationOutput(TypedDict, total=False):
    AnalyticsConfiguration: S3AnalyticsConfiguration


class _S3AnalyticsConfiguration(TypedDict):
    Id: str
    StorageClassAnalysis: S3StorageClassAnalysis


class S3AnalyticsConfiguration(_S3AnalyticsConfiguration, total=False):
    Filter: S3AnalyticsFilter


class S3AnalyticsFilter(TypedDict, total=False):
    Prefix: str
    Tag: S3Tag
    And: S3AnalyticsAndOperator


class S3Tag(TypedDict):
    Key: str
    Value: str


class S3AnalyticsAndOperator(TypedDict, total=False):
    Prefix: str
    Tags: List[S3Tag]


class S3StorageClassAnalysis(TypedDict, total=False):
    DataExport: S3StorageClassAnalysisDataExport


class S3StorageClassAnalysisDataExport(TypedDict):
    OutputSchemaVersion: str
    Destination: S3AnalyticsExportDestination


class S3AnalyticsExportDestination(TypedDict):
    S3BucketDestination: S3AnalyticsS3BucketDestination


class _S3AnalyticsS3BucketDestination(TypedDict):
    Format: str
    Bucket: str


class S3AnalyticsS3BucketDestination(_S3AnalyticsS3BucketDestination, total=False):
    BucketAccountId: str
    Prefix: str


class S3GetBucketCorsOutput(TypedDict, total=False):
    CORSRules: List[S3CORSRule]


class _S3CORSRule(TypedDict):
    AllowedMethods: List[str]
    AllowedOrigins: List[str]


class S3CORSRule(_S3CORSRule, total=False):
    AllowedHeaders: List[str]
    ExposeHeaders: List[str]
    MaxAgeSeconds: int


class S3GetBucketEncryptionOutput(TypedDict, total=False):
    ServerSideEncryptionConfiguration: S3ServerSideEncryptionConfiguration


class S3ServerSideEncryptionConfiguration(TypedDict):
    Rules: List[S3ServerSideEncryptionRule]


class S3ServerSideEncryptionRule(TypedDict, total=False):
    ApplyServerSideEncryptionByDefault: S3ServerSideEncryptionByDefault


class _S3ServerSideEncryptionByDefault(TypedDict):
    SSEAlgorithm: str


class S3ServerSideEncryptionByDefault(_S3ServerSideEncryptionByDefault, total=False):
    KMSMasterKeyID: str


class S3GetBucketInventoryConfigurationOutput(TypedDict, total=False):
    InventoryConfiguration: S3InventoryConfiguration


class _S3InventoryConfiguration(TypedDict):
    Destination: S3InventoryDestination
    IsEnabled: bool
    Id: str
    IncludedObjectVersions: str
    Schedule: S3InventorySchedule


class S3InventoryConfiguration(_S3InventoryConfiguration, total=False):
    Filter: S3InventoryFilter
    OptionalFields: List[str]


class S3InventoryDestination(TypedDict):
    S3BucketDestination: S3InventoryS3BucketDestination


class _S3InventoryS3BucketDestination(TypedDict):
    Bucket: str
    Format: str


class S3InventoryS3BucketDestination(_S3InventoryS3BucketDestination, total=False):
    AccountId: str
    Prefix: str
    Encryption: S3InventoryEncryption


class S3InventoryEncryption(TypedDict, total=False):
    SSES3: S3SSES3
    SSEKMS: S3SSEKMS


class S3SSES3(TypedDict, total=False):
    pass


class S3SSEKMS(TypedDict):
    KeyId: str


class S3InventoryFilter(TypedDict):
    Prefix: str


class S3InventorySchedule(TypedDict):
    Frequency: str


class S3GetBucketLifecycleOutput(TypedDict, total=False):
    Rules: List[S3Rule]


class _S3Rule(TypedDict):
    Prefix: str
    Status: str


class S3Rule(_S3Rule, total=False):
    Expiration: S3LifecycleExpiration
    ID: str
    Transition: S3Transition
    NoncurrentVersionTransition: S3NoncurrentVersionTransition
    NoncurrentVersionExpiration: S3NoncurrentVersionExpiration
    AbortIncompleteMultipartUpload: S3AbortIncompleteMultipartUpload


class S3LifecycleExpiration(TypedDict, total=False):
    Date: datetime.datetime
    Days: int
    ExpiredObjectDeleteMarker: bool


class S3Transition(TypedDict, total=False):
    Date: datetime.datetime
    Days: int
    StorageClass: str


class S3NoncurrentVersionTransition(TypedDict, total=False):
    NoncurrentDays: int
    StorageClass: str


class S3NoncurrentVersionExpiration(TypedDict, total=False):
    NoncurrentDays: int


class S3AbortIncompleteMultipartUpload(TypedDict, total=False):
    DaysAfterInitiation: int


class S3GetBucketLifecycleConfigurationOutput(TypedDict, total=False):
    Rules: List[S3LifecycleRule]


class _S3LifecycleRule(TypedDict):
    Status: str


class S3LifecycleRule(_S3LifecycleRule, total=False):
    Expiration: S3LifecycleExpiration
    ID: str
    Prefix: str
    Filter: S3LifecycleRuleFilter
    Transitions: List[S3Transition]
    NoncurrentVersionTransitions: List[S3NoncurrentVersionTransition]
    NoncurrentVersionExpiration: S3NoncurrentVersionExpiration
    AbortIncompleteMultipartUpload: S3AbortIncompleteMultipartUpload


class S3LifecycleRuleFilter(TypedDict, total=False):
    Prefix: str
    Tag: S3Tag
    And: S3LifecycleRuleAndOperator


class S3LifecycleRuleAndOperator(TypedDict, total=False):
    Prefix: str
    Tags: List[S3Tag]


class S3GetBucketLocationOutput(TypedDict, total=False):
    LocationConstraint: str


class S3GetBucketLoggingOutput(TypedDict, total=False):
    LoggingEnabled: S3LoggingEnabled


class _S3LoggingEnabled(TypedDict):
    TargetBucket: str
    TargetPrefix: str


class S3LoggingEnabled(_S3LoggingEnabled, total=False):
    TargetGrants: List[S3TargetGrant]


class S3TargetGrant(TypedDict, total=False):
    Grantee: S3Grantee
    Permission: str


class S3GetBucketMetricsConfigurationOutput(TypedDict, total=False):
    MetricsConfiguration: S3MetricsConfiguration


class _S3MetricsConfiguration(TypedDict):
    Id: str


class S3MetricsConfiguration(_S3MetricsConfiguration, total=False):
    Filter: S3MetricsFilter


class S3MetricsFilter(TypedDict, total=False):
    Prefix: str
    Tag: S3Tag
    And: S3MetricsAndOperator


class S3MetricsAndOperator(TypedDict, total=False):
    Prefix: str
    Tags: List[S3Tag]


class S3NotificationConfigurationDeprecated(TypedDict, total=False):
    TopicConfiguration: S3TopicConfigurationDeprecated
    QueueConfiguration: S3QueueConfigurationDeprecated
    CloudFunctionConfiguration: S3CloudFunctionConfiguration


class S3TopicConfigurationDeprecated(TypedDict, total=False):
    Id: str
    Events: List[str]
    Event: str
    Topic: str


class S3QueueConfigurationDeprecated(TypedDict, total=False):
    Id: str
    Event: str
    Events: List[str]
    Queue: str


class S3CloudFunctionConfiguration(TypedDict, total=False):
    Id: str
    Event: str
    Events: List[str]
    CloudFunction: str
    InvocationRole: str


class S3NotificationConfiguration(TypedDict, total=False):
    TopicConfigurations: List[S3TopicConfiguration]
    QueueConfigurations: List[S3QueueConfiguration]
    LambdaFunctionConfigurations: List[S3LambdaFunctionConfiguration]


class _S3TopicConfiguration(TypedDict):
    TopicArn: str
    Events: List[str]


class S3TopicConfiguration(_S3TopicConfiguration, total=False):
    Id: str
    Filter: S3NotificationConfigurationFilter


class S3NotificationConfigurationFilter(TypedDict, total=False):
    Key: S3S3KeyFilter


class S3S3KeyFilter(TypedDict, total=False):
    FilterRules: List[S3FilterRule]


class S3FilterRule(TypedDict, total=False):
    Name: str
    Value: str


class _S3QueueConfiguration(TypedDict):
    QueueArn: str
    Events: List[str]


class S3QueueConfiguration(_S3QueueConfiguration, total=False):
    Id: str
    Filter: S3NotificationConfigurationFilter


class _S3LambdaFunctionConfiguration(TypedDict):
    LambdaFunctionArn: str
    Events: List[str]


class S3LambdaFunctionConfiguration(_S3LambdaFunctionConfiguration, total=False):
    Id: str
    Filter: S3NotificationConfigurationFilter


class S3GetBucketPolicyOutput(TypedDict, total=False):
    Policy: str


class S3GetBucketPolicyStatusOutput(TypedDict, total=False):
    PolicyStatus: S3PolicyStatus


class S3PolicyStatus(TypedDict, total=False):
    IsPublic: bool


class S3GetBucketReplicationOutput(TypedDict, total=False):
    ReplicationConfiguration: S3ReplicationConfiguration


class S3ReplicationConfiguration(TypedDict):
    Role: str
    Rules: List[S3ReplicationRule]


class _S3ReplicationRule(TypedDict):
    Status: str
    Destination: S3Destination


class S3ReplicationRule(_S3ReplicationRule, total=False):
    ID: str
    Priority: int
    Prefix: str
    Filter: S3ReplicationRuleFilter
    SourceSelectionCriteria: S3SourceSelectionCriteria
    DeleteMarkerReplication: S3DeleteMarkerReplication


class S3ReplicationRuleFilter(TypedDict, total=False):
    Prefix: str
    Tag: S3Tag
    And: S3ReplicationRuleAndOperator


class S3ReplicationRuleAndOperator(TypedDict, total=False):
    Prefix: str
    Tags: List[S3Tag]


class S3SourceSelectionCriteria(TypedDict, total=False):
    SseKmsEncryptedObjects: S3SseKmsEncryptedObjects


class S3SseKmsEncryptedObjects(TypedDict):
    Status: str


class _S3Destination(TypedDict):
    Bucket: str


class S3Destination(_S3Destination, total=False):
    Account: str
    StorageClass: str
    AccessControlTranslation: S3AccessControlTranslation
    EncryptionConfiguration: S3EncryptionConfiguration


class S3AccessControlTranslation(TypedDict):
    Owner: str


class S3EncryptionConfiguration(TypedDict, total=False):
    ReplicaKmsKeyID: str


class S3DeleteMarkerReplication(TypedDict, total=False):
    Status: str


class S3GetBucketRequestPaymentOutput(TypedDict, total=False):
    Payer: str


class S3GetBucketTaggingOutput(TypedDict):
    TagSet: List[S3Tag]


class S3GetBucketVersioningOutput(TypedDict, total=False):
    Status: str
    MFADelete: str


class S3GetBucketWebsiteOutput(TypedDict, total=False):
    RedirectAllRequestsTo: S3RedirectAllRequestsTo
    IndexDocument: S3IndexDocument
    ErrorDocument: S3ErrorDocument
    RoutingRules: List[S3RoutingRule]


class _S3RedirectAllRequestsTo(TypedDict):
    HostName: str


class S3RedirectAllRequestsTo(_S3RedirectAllRequestsTo, total=False):
    Protocol: str


class S3IndexDocument(TypedDict):
    Suffix: str


class S3ErrorDocument(TypedDict):
    Key: str


class _S3RoutingRule(TypedDict):
    Redirect: S3Redirect


class S3RoutingRule(_S3RoutingRule, total=False):
    Condition: S3Condition


class S3Condition(TypedDict, total=False):
    HttpErrorCodeReturnedEquals: str
    KeyPrefixEquals: str


class S3Redirect(TypedDict, total=False):
    HostName: str
    HttpRedirectCode: str
    Protocol: str
    ReplaceKeyPrefixWith: str
    ReplaceKeyWith: str


class S3GetObjectOutput(TypedDict, total=False):
    Body: bytes
    DeleteMarker: bool
    AcceptRanges: str
    Expiration: str
    Restore: str
    LastModified: datetime.datetime
    ContentLength: int
    ETag: str
    MissingMeta: int
    VersionId: str
    CacheControl: str
    ContentDisposition: str
    ContentEncoding: str
    ContentLanguage: str
    ContentRange: str
    ContentType: str
    Expires: datetime.datetime
    WebsiteRedirectLocation: str
    ServerSideEncryption: str
    Metadata: Dict[str, str]
    SSECustomerAlgorithm: str
    SSECustomerKeyMD5: str
    SSEKMSKeyId: str
    StorageClass: str
    RequestCharged: str
    ReplicationStatus: str
    PartsCount: int
    TagCount: int
    ObjectLockMode: str
    ObjectLockRetainUntilDate: datetime.datetime
    ObjectLockLegalHoldStatus: str


class S3GetObjectAclOutput(TypedDict, total=False):
    Owner: S3Owner
    Grants: List[S3Grant]
    RequestCharged: str


class S3GetObjectLegalHoldOutput(TypedDict, total=False):
    LegalHold: S3ObjectLockLegalHold


class S3ObjectLockLegalHold(TypedDict, total=False):
    Status: str


class S3GetObjectLockConfigurationOutput(TypedDict, total=False):
    ObjectLockConfiguration: S3ObjectLockConfiguration


class S3ObjectLockConfiguration(TypedDict, total=False):
    ObjectLockEnabled: str
    Rule: S3ObjectLockRule


class S3ObjectLockRule(TypedDict, total=False):
    DefaultRetention: S3DefaultRetention


class S3DefaultRetention(TypedDict, total=False):
    Mode: str
    Days: int
    Years: int


class S3GetObjectRetentionOutput(TypedDict, total=False):
    Retention: S3ObjectLockRetention


class S3ObjectLockRetention(TypedDict, total=False):
    Mode: str
    RetainUntilDate: datetime.datetime


class _S3GetObjectTaggingOutput(TypedDict):
    TagSet: List[S3Tag]


class S3GetObjectTaggingOutput(_S3GetObjectTaggingOutput, total=False):
    VersionId: str


class S3GetObjectTorrentOutput(TypedDict, total=False):
    Body: bytes
    RequestCharged: str


class S3GetPublicAccessBlockOutput(TypedDict, total=False):
    PublicAccessBlockConfiguration: S3PublicAccessBlockConfiguration


class S3PublicAccessBlockConfiguration(TypedDict, total=False):
    BlockPublicAcls: bool
    IgnorePublicAcls: bool
    BlockPublicPolicy: bool
    RestrictPublicBuckets: bool


class S3HeadObjectOutput(TypedDict, total=False):
    DeleteMarker: bool
    AcceptRanges: str
    Expiration: str
    Restore: str
    LastModified: datetime.datetime
    ContentLength: int
    ETag: str
    MissingMeta: int
    VersionId: str
    CacheControl: str
    ContentDisposition: str
    ContentEncoding: str
    ContentLanguage: str
    ContentType: str
    Expires: datetime.datetime
    WebsiteRedirectLocation: str
    ServerSideEncryption: str
    Metadata: Dict[str, str]
    SSECustomerAlgorithm: str
    SSECustomerKeyMD5: str
    SSEKMSKeyId: str
    StorageClass: str
    RequestCharged: str
    ReplicationStatus: str
    PartsCount: int
    ObjectLockMode: str
    ObjectLockRetainUntilDate: datetime.datetime
    ObjectLockLegalHoldStatus: str


class S3ListBucketAnalyticsConfigurationsOutput(TypedDict, total=False):
    IsTruncated: bool
    ContinuationToken: str
    NextContinuationToken: str
    AnalyticsConfigurationList: List[S3AnalyticsConfiguration]


class S3ListBucketInventoryConfigurationsOutput(TypedDict, total=False):
    ContinuationToken: str
    InventoryConfigurationList: List[S3InventoryConfiguration]
    IsTruncated: bool
    NextContinuationToken: str


class S3ListBucketMetricsConfigurationsOutput(TypedDict, total=False):
    IsTruncated: bool
    ContinuationToken: str
    NextContinuationToken: str
    MetricsConfigurationList: List[S3MetricsConfiguration]


class S3ListBucketsOutput(TypedDict, total=False):
    Buckets: List[S3Bucket]
    Owner: S3Owner


class S3Bucket(TypedDict, total=False):
    Name: str
    CreationDate: datetime.datetime


class S3ListMultipartUploadsOutput(TypedDict, total=False):
    Bucket: str
    KeyMarker: str
    UploadIdMarker: str
    NextKeyMarker: str
    Prefix: str
    Delimiter: str
    NextUploadIdMarker: str
    MaxUploads: int
    IsTruncated: bool
    Uploads: List[S3MultipartUpload]
    CommonPrefixes: List[S3CommonPrefix]
    EncodingType: str


class S3MultipartUpload(TypedDict, total=False):
    UploadId: str
    Key: str
    Initiated: datetime.datetime
    StorageClass: str
    Owner: S3Owner
    Initiator: S3Initiator


class S3Initiator(TypedDict, total=False):
    ID: str
    DisplayName: str


class S3CommonPrefix(TypedDict, total=False):
    Prefix: str


class S3ListObjectVersionsOutput(TypedDict, total=False):
    IsTruncated: bool
    KeyMarker: str
    VersionIdMarker: str
    NextKeyMarker: str
    NextVersionIdMarker: str
    Versions: List[S3ObjectVersion]
    DeleteMarkers: List[S3DeleteMarkerEntry]
    Name: str
    Prefix: str
    Delimiter: str
    MaxKeys: int
    CommonPrefixes: List[S3CommonPrefix]
    EncodingType: str


class S3ObjectVersion(TypedDict, total=False):
    ETag: str
    Size: int
    StorageClass: str
    Key: str
    VersionId: str
    IsLatest: bool
    LastModified: datetime.datetime
    Owner: S3Owner


class S3DeleteMarkerEntry(TypedDict, total=False):
    Owner: S3Owner
    Key: str
    VersionId: str
    IsLatest: bool
    LastModified: datetime.datetime


class S3ListObjectsOutput(TypedDict, total=False):
    IsTruncated: bool
    Marker: str
    NextMarker: str
    Contents: List[S3Object]
    Name: str
    Prefix: str
    Delimiter: str
    MaxKeys: int
    CommonPrefixes: List[S3CommonPrefix]
    EncodingType: str


class S3Object(TypedDict, total=False):
    Key: str
    LastModified: datetime.datetime
    ETag: str
    Size: int
    StorageClass: str
    Owner: S3Owner


class S3ListObjectsV2Output(TypedDict, total=False):
    IsTruncated: bool
    Contents: List[S3Object]
    Name: str
    Prefix: str
    Delimiter: str
    MaxKeys: int
    CommonPrefixes: List[S3CommonPrefix]
    EncodingType: str
    KeyCount: int
    ContinuationToken: str
    NextContinuationToken: str
    StartAfter: str


class S3ListPartsOutput(TypedDict, total=False):
    AbortDate: datetime.datetime
    AbortRuleId: str
    Bucket: str
    Key: str
    UploadId: str
    PartNumberMarker: int
    NextPartNumberMarker: int
    MaxParts: int
    IsTruncated: bool
    Parts: List[S3Part]
    Initiator: S3Initiator
    Owner: S3Owner
    StorageClass: str
    RequestCharged: str


class S3Part(TypedDict, total=False):
    PartNumber: int
    LastModified: datetime.datetime
    ETag: str
    Size: int


class S3AccelerateConfiguration(TypedDict, total=False):
    Status: str


class S3AccessControlPolicy(TypedDict, total=False):
    Grants: List[S3Grant]
    Owner: S3Owner


class S3CORSConfiguration(TypedDict):
    CORSRules: List[S3CORSRule]


class S3LifecycleConfiguration(TypedDict):
    Rules: List[S3Rule]


class S3BucketLifecycleConfiguration(TypedDict):
    Rules: List[S3LifecycleRule]


class S3BucketLoggingStatus(TypedDict, total=False):
    LoggingEnabled: S3LoggingEnabled


class S3RequestPaymentConfiguration(TypedDict):
    Payer: str


class S3Tagging(TypedDict):
    TagSet: List[S3Tag]


class S3VersioningConfiguration(TypedDict, total=False):
    MFADelete: str
    Status: str


class S3WebsiteConfiguration(TypedDict, total=False):
    ErrorDocument: S3ErrorDocument
    IndexDocument: S3IndexDocument
    RedirectAllRequestsTo: S3RedirectAllRequestsTo
    RoutingRules: List[S3RoutingRule]


class S3PutObjectOutput(TypedDict, total=False):
    Expiration: str
    ETag: str
    ServerSideEncryption: str
    VersionId: str
    SSECustomerAlgorithm: str
    SSECustomerKeyMD5: str
    SSEKMSKeyId: str
    RequestCharged: str


class S3PutObjectAclOutput(TypedDict, total=False):
    RequestCharged: str


class S3PutObjectLegalHoldOutput(TypedDict, total=False):
    RequestCharged: str


class S3PutObjectLockConfigurationOutput(TypedDict, total=False):
    RequestCharged: str


class S3PutObjectRetentionOutput(TypedDict, total=False):
    RequestCharged: str


class S3PutObjectTaggingOutput(TypedDict, total=False):
    VersionId: str


class S3RestoreRequest(TypedDict, total=False):
    Days: int
    GlacierJobParameters: S3GlacierJobParameters
    Type: str
    Tier: str
    Description: str
    SelectParameters: S3SelectParameters
    OutputLocation: S3OutputLocation


class S3GlacierJobParameters(TypedDict):
    Tier: str


class S3SelectParameters(TypedDict):
    InputSerialization: S3InputSerialization
    ExpressionType: str
    Expression: str
    OutputSerialization: S3OutputSerialization


class S3InputSerialization(TypedDict, total=False):
    CSV: S3CSVInput
    CompressionType: str
    JSON: S3JSONInput
    Parquet: S3ParquetInput


class S3CSVInput(TypedDict, total=False):
    FileHeaderInfo: str
    Comments: str
    QuoteEscapeCharacter: str
    RecordDelimiter: str
    FieldDelimiter: str
    QuoteCharacter: str
    AllowQuotedRecordDelimiter: bool


class S3JSONInput(TypedDict, total=False):
    Type: str


class S3ParquetInput(TypedDict, total=False):
    pass


class S3OutputSerialization(TypedDict, total=False):
    CSV: S3CSVOutput
    JSON: S3JSONOutput


class S3CSVOutput(TypedDict, total=False):
    QuoteFields: str
    QuoteEscapeCharacter: str
    RecordDelimiter: str
    FieldDelimiter: str
    QuoteCharacter: str


class S3JSONOutput(TypedDict, total=False):
    RecordDelimiter: str


class S3OutputLocation(TypedDict, total=False):
    S3: S3S3Location


class _S3S3Location(TypedDict):
    BucketName: str
    Prefix: str


class S3S3Location(_S3S3Location, total=False):
    Encryption: S3Encryption
    CannedACL: str
    AccessControlList: List[S3Grant]
    Tagging: S3Tagging
    UserMetadata: List[S3MetadataEntry]
    StorageClass: str


class _S3Encryption(TypedDict):
    EncryptionType: str


class S3Encryption(_S3Encryption, total=False):
    KMSKeyId: str
    KMSContext: str


class S3MetadataEntry(TypedDict, total=False):
    Name: str
    Value: str


class S3RestoreObjectOutput(TypedDict, total=False):
    RequestCharged: str
    RestoreOutputPath: str


class S3RequestProgress(TypedDict, total=False):
    Enabled: bool


class S3SelectObjectContentOutput(TypedDict, total=False):
    Payload: S3SelectObjectContentEventStream


class S3SelectObjectContentEventStream(TypedDict, total=False):
    Records: S3RecordsEvent
    Stats: S3StatsEvent
    Progress: S3ProgressEvent
    Cont: S3ContinuationEvent
    End: S3EndEvent


class S3RecordsEvent(TypedDict, total=False):
    Payload: bytes


class S3StatsEvent(TypedDict, total=False):
    Details: S3Stats


class S3Stats(TypedDict, total=False):
    BytesScanned: int
    BytesProcessed: int
    BytesReturned: int


class S3ProgressEvent(TypedDict, total=False):
    Details: S3Progress


class S3Progress(TypedDict, total=False):
    BytesScanned: int
    BytesProcessed: int
    BytesReturned: int


class S3ContinuationEvent(TypedDict, total=False):
    pass


class S3EndEvent(TypedDict, total=False):
    pass


class S3UploadPartOutput(TypedDict, total=False):
    ServerSideEncryption: str
    ETag: str
    SSECustomerAlgorithm: str
    SSECustomerKeyMD5: str
    SSEKMSKeyId: str
    RequestCharged: str


class S3UploadPartCopyOutput(TypedDict, total=False):
    CopySourceVersionId: str
    CopyPartResult: S3CopyPartResult
    ServerSideEncryption: str
    SSECustomerAlgorithm: str
    SSECustomerKeyMD5: str
    SSEKMSKeyId: str
    RequestCharged: str


class S3CopyPartResult(TypedDict, total=False):
    ETag: str
    LastModified: datetime.datetime


class S3Control(BaseClient):
    def create_job(self, *,
        AccountId: str,
        Operation: S3ControlJobOperation,
        Report: S3ControlJobReport,
        ClientRequestToken: str,
        Manifest: S3ControlJobManifest,
        Priority: int,
        RoleArn: str,
        ConfirmationRequired: bool = ...,
        Description: str = ...
    ) -> S3ControlCreateJobResult: ...

    def delete_public_access_block(self, *,
        AccountId: str
    ): ...

    def describe_job(self, *,
        AccountId: str,
        JobId: str
    ) -> S3ControlDescribeJobResult: ...

    def get_public_access_block(self, *,
        AccountId: str
    ) -> S3ControlGetPublicAccessBlockOutput: ...

    def list_jobs(self, *,
        AccountId: str,
        JobStatuses: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> S3ControlListJobsResult: ...

    def put_public_access_block(self, *,
        PublicAccessBlockConfiguration: S3ControlPublicAccessBlockConfiguration,
        AccountId: str
    ): ...

    def update_job_priority(self, *,
        AccountId: str,
        JobId: str,
        Priority: int
    ) -> S3ControlUpdateJobPriorityResult: ...

    def update_job_status(self, *,
        AccountId: str,
        JobId: str,
        RequestedJobStatus: str,
        StatusUpdateReason: str = ...
    ) -> S3ControlUpdateJobStatusResult: ...


class S3ControlJobOperation(TypedDict, total=False):
    LambdaInvoke: S3ControlLambdaInvokeOperation
    S3PutObjectCopy: S3ControlS3CopyObjectOperation
    S3PutObjectAcl: S3ControlS3SetObjectAclOperation
    S3PutObjectTagging: S3ControlS3SetObjectTaggingOperation
    S3InitiateRestoreObject: S3ControlS3InitiateRestoreObjectOperation


class S3ControlLambdaInvokeOperation(TypedDict, total=False):
    FunctionArn: str


class S3ControlS3CopyObjectOperation(TypedDict, total=False):
    TargetResource: str
    CannedAccessControlList: str
    AccessControlGrants: List[S3ControlS3Grant]
    MetadataDirective: str
    ModifiedSinceConstraint: datetime.datetime
    NewObjectMetadata: S3ControlS3ObjectMetadata
    NewObjectTagging: List[S3ControlS3Tag]
    RedirectLocation: str
    RequesterPays: bool
    StorageClass: str
    UnModifiedSinceConstraint: datetime.datetime
    SSEAwsKmsKeyId: str
    TargetKeyPrefix: str
    ObjectLockLegalHoldStatus: str
    ObjectLockMode: str
    ObjectLockRetainUntilDate: datetime.datetime


class S3ControlS3Grant(TypedDict, total=False):
    Grantee: S3ControlS3Grantee
    Permission: str


class S3ControlS3Grantee(TypedDict, total=False):
    TypeIdentifier: str
    Identifier: str
    DisplayName: str


class S3ControlS3ObjectMetadata(TypedDict, total=False):
    CacheControl: str
    ContentDisposition: str
    ContentEncoding: str
    ContentLanguage: str
    UserMetadata: Dict[str, str]
    ContentLength: int
    ContentMD5: str
    ContentType: str
    HttpExpiresDate: datetime.datetime
    RequesterCharged: bool
    SSEAlgorithm: str


class S3ControlS3Tag(TypedDict):
    Key: str
    Value: str


class S3ControlS3SetObjectAclOperation(TypedDict, total=False):
    AccessControlPolicy: S3ControlS3AccessControlPolicy


class S3ControlS3AccessControlPolicy(TypedDict, total=False):
    AccessControlList: S3ControlS3AccessControlList
    CannedAccessControlList: str


class _S3ControlS3AccessControlList(TypedDict):
    Owner: S3ControlS3ObjectOwner


class S3ControlS3AccessControlList(_S3ControlS3AccessControlList, total=False):
    Grants: List[S3ControlS3Grant]


class S3ControlS3ObjectOwner(TypedDict, total=False):
    ID: str
    DisplayName: str


class S3ControlS3SetObjectTaggingOperation(TypedDict, total=False):
    TagSet: List[S3ControlS3Tag]


class S3ControlS3InitiateRestoreObjectOperation(TypedDict, total=False):
    ExpirationInDays: int
    GlacierJobTier: str


class _S3ControlJobReport(TypedDict):
    Enabled: bool


class S3ControlJobReport(_S3ControlJobReport, total=False):
    Bucket: str
    Format: str
    Prefix: str
    ReportScope: str


class S3ControlJobManifest(TypedDict):
    Spec: S3ControlJobManifestSpec
    Location: S3ControlJobManifestLocation


class _S3ControlJobManifestSpec(TypedDict):
    Format: str


class S3ControlJobManifestSpec(_S3ControlJobManifestSpec, total=False):
    Fields: List[str]


class _S3ControlJobManifestLocation(TypedDict):
    ObjectArn: str
    ETag: str


class S3ControlJobManifestLocation(_S3ControlJobManifestLocation, total=False):
    ObjectVersionId: str


class S3ControlCreateJobResult(TypedDict, total=False):
    JobId: str


class S3ControlDescribeJobResult(TypedDict, total=False):
    Job: S3ControlJobDescriptor


class S3ControlJobDescriptor(TypedDict, total=False):
    JobId: str
    ConfirmationRequired: bool
    Description: str
    JobArn: str
    Status: str
    Manifest: S3ControlJobManifest
    Operation: S3ControlJobOperation
    Priority: int
    ProgressSummary: S3ControlJobProgressSummary
    StatusUpdateReason: str
    FailureReasons: List[S3ControlJobFailure]
    Report: S3ControlJobReport
    CreationTime: datetime.datetime
    TerminationDate: datetime.datetime
    RoleArn: str
    SuspendedDate: datetime.datetime
    SuspendedCause: str


class S3ControlJobProgressSummary(TypedDict, total=False):
    TotalNumberOfTasks: int
    NumberOfTasksSucceeded: int
    NumberOfTasksFailed: int


class S3ControlJobFailure(TypedDict, total=False):
    FailureCode: str
    FailureReason: str


class S3ControlGetPublicAccessBlockOutput(TypedDict, total=False):
    PublicAccessBlockConfiguration: S3ControlPublicAccessBlockConfiguration


class S3ControlPublicAccessBlockConfiguration(TypedDict, total=False):
    BlockPublicAcls: bool
    IgnorePublicAcls: bool
    BlockPublicPolicy: bool
    RestrictPublicBuckets: bool


class S3ControlListJobsResult(TypedDict, total=False):
    NextToken: str
    Jobs: List[S3ControlJobListDescriptor]


class S3ControlJobListDescriptor(TypedDict, total=False):
    JobId: str
    Description: str
    Operation: str
    Priority: int
    Status: str
    CreationTime: datetime.datetime
    TerminationDate: datetime.datetime
    ProgressSummary: S3ControlJobProgressSummary


class S3ControlUpdateJobPriorityResult(TypedDict):
    JobId: str
    Priority: int


class S3ControlUpdateJobStatusResult(TypedDict, total=False):
    JobId: str
    Status: str
    StatusUpdateReason: str


class SageMaker(BaseClient):
    def add_tags(self, *,
        ResourceArn: str,
        Tags: List[SageMakerTag]
    ) -> SageMakerAddTagsOutput: ...

    def create_algorithm(self, *,
        AlgorithmName: str,
        TrainingSpecification: SageMakerTrainingSpecification,
        AlgorithmDescription: str = ...,
        InferenceSpecification: SageMakerInferenceSpecification = ...,
        ValidationSpecification: SageMakerAlgorithmValidationSpecification = ...,
        CertifyForMarketplace: bool = ...
    ) -> SageMakerCreateAlgorithmOutput: ...

    def create_code_repository(self, *,
        CodeRepositoryName: str,
        GitConfig: SageMakerGitConfig
    ) -> SageMakerCreateCodeRepositoryOutput: ...

    def create_compilation_job(self, *,
        CompilationJobName: str,
        RoleArn: str,
        InputConfig: SageMakerInputConfig,
        OutputConfig: SageMakerOutputConfig,
        StoppingCondition: SageMakerStoppingCondition
    ) -> SageMakerCreateCompilationJobResponse: ...

    def create_endpoint(self, *,
        EndpointName: str,
        EndpointConfigName: str,
        Tags: List[SageMakerTag] = ...
    ) -> SageMakerCreateEndpointOutput: ...

    def create_endpoint_config(self, *,
        EndpointConfigName: str,
        ProductionVariants: List[SageMakerProductionVariant],
        Tags: List[SageMakerTag] = ...,
        KmsKeyId: str = ...
    ) -> SageMakerCreateEndpointConfigOutput: ...

    def create_hyper_parameter_tuning_job(self, *,
        HyperParameterTuningJobName: str,
        HyperParameterTuningJobConfig: SageMakerHyperParameterTuningJobConfig,
        TrainingJobDefinition: SageMakerHyperParameterTrainingJobDefinition = ...,
        WarmStartConfig: SageMakerHyperParameterTuningJobWarmStartConfig = ...,
        Tags: List[SageMakerTag] = ...
    ) -> SageMakerCreateHyperParameterTuningJobResponse: ...

    def create_labeling_job(self, *,
        LabelingJobName: str,
        LabelAttributeName: str,
        InputConfig: SageMakerLabelingJobInputConfig,
        OutputConfig: SageMakerLabelingJobOutputConfig,
        RoleArn: str,
        HumanTaskConfig: SageMakerHumanTaskConfig,
        LabelCategoryConfigS3Uri: str = ...,
        StoppingConditions: SageMakerLabelingJobStoppingConditions = ...,
        LabelingJobAlgorithmsConfig: SageMakerLabelingJobAlgorithmsConfig = ...,
        Tags: List[SageMakerTag] = ...
    ) -> SageMakerCreateLabelingJobResponse: ...

    def create_model(self, *,
        ModelName: str,
        ExecutionRoleArn: str,
        PrimaryContainer: SageMakerContainerDefinition = ...,
        Containers: List[SageMakerContainerDefinition] = ...,
        Tags: List[SageMakerTag] = ...,
        VpcConfig: SageMakerVpcConfig = ...,
        EnableNetworkIsolation: bool = ...
    ) -> SageMakerCreateModelOutput: ...

    def create_model_package(self, *,
        ModelPackageName: str,
        ModelPackageDescription: str = ...,
        InferenceSpecification: SageMakerInferenceSpecification = ...,
        ValidationSpecification: SageMakerModelPackageValidationSpecification = ...,
        SourceAlgorithmSpecification: SageMakerSourceAlgorithmSpecification = ...,
        CertifyForMarketplace: bool = ...
    ) -> SageMakerCreateModelPackageOutput: ...

    def create_notebook_instance(self, *,
        NotebookInstanceName: str,
        InstanceType: str,
        RoleArn: str,
        SubnetId: str = ...,
        SecurityGroupIds: List[str] = ...,
        KmsKeyId: str = ...,
        Tags: List[SageMakerTag] = ...,
        LifecycleConfigName: str = ...,
        DirectInternetAccess: str = ...,
        VolumeSizeInGB: int = ...,
        AcceleratorTypes: List[str] = ...,
        DefaultCodeRepository: str = ...,
        AdditionalCodeRepositories: List[str] = ...,
        RootAccess: str = ...
    ) -> SageMakerCreateNotebookInstanceOutput: ...

    def create_notebook_instance_lifecycle_config(self, *,
        NotebookInstanceLifecycleConfigName: str,
        OnCreate: List[SageMakerNotebookInstanceLifecycleHook] = ...,
        OnStart: List[SageMakerNotebookInstanceLifecycleHook] = ...
    ) -> SageMakerCreateNotebookInstanceLifecycleConfigOutput: ...

    def create_presigned_notebook_instance_url(self, *,
        NotebookInstanceName: str,
        SessionExpirationDurationInSeconds: int = ...
    ) -> SageMakerCreatePresignedNotebookInstanceUrlOutput: ...

    def create_training_job(self, *,
        TrainingJobName: str,
        AlgorithmSpecification: SageMakerAlgorithmSpecification,
        RoleArn: str,
        OutputDataConfig: SageMakerOutputDataConfig,
        ResourceConfig: SageMakerResourceConfig,
        StoppingCondition: SageMakerStoppingCondition,
        HyperParameters: Dict[str, str] = ...,
        InputDataConfig: List[SageMakerChannel] = ...,
        VpcConfig: SageMakerVpcConfig = ...,
        Tags: List[SageMakerTag] = ...,
        EnableNetworkIsolation: bool = ...,
        EnableInterContainerTrafficEncryption: bool = ...
    ) -> SageMakerCreateTrainingJobResponse: ...

    def create_transform_job(self, *,
        TransformJobName: str,
        ModelName: str,
        TransformInput: SageMakerTransformInput,
        TransformOutput: SageMakerTransformOutput,
        TransformResources: SageMakerTransformResources,
        MaxConcurrentTransforms: int = ...,
        MaxPayloadInMB: int = ...,
        BatchStrategy: str = ...,
        Environment: Dict[str, str] = ...,
        Tags: List[SageMakerTag] = ...
    ) -> SageMakerCreateTransformJobResponse: ...

    def create_workteam(self, *,
        WorkteamName: str,
        MemberDefinitions: List[SageMakerMemberDefinition],
        Description: str,
        NotificationConfiguration: SageMakerNotificationConfiguration = ...,
        Tags: List[SageMakerTag] = ...
    ) -> SageMakerCreateWorkteamResponse: ...

    def delete_algorithm(self, *,
        AlgorithmName: str
    ): ...

    def delete_code_repository(self, *,
        CodeRepositoryName: str
    ): ...

    def delete_endpoint(self, *,
        EndpointName: str
    ): ...

    def delete_endpoint_config(self, *,
        EndpointConfigName: str
    ): ...

    def delete_model(self, *,
        ModelName: str
    ): ...

    def delete_model_package(self, *,
        ModelPackageName: str
    ): ...

    def delete_notebook_instance(self, *,
        NotebookInstanceName: str
    ): ...

    def delete_notebook_instance_lifecycle_config(self, *,
        NotebookInstanceLifecycleConfigName: str
    ): ...

    def delete_tags(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ) -> SageMakerDeleteTagsOutput: ...

    def delete_workteam(self, *,
        WorkteamName: str
    ) -> SageMakerDeleteWorkteamResponse: ...

    def describe_algorithm(self, *,
        AlgorithmName: str
    ) -> SageMakerDescribeAlgorithmOutput: ...

    def describe_code_repository(self, *,
        CodeRepositoryName: str
    ) -> SageMakerDescribeCodeRepositoryOutput: ...

    def describe_compilation_job(self, *,
        CompilationJobName: str
    ) -> SageMakerDescribeCompilationJobResponse: ...

    def describe_endpoint(self, *,
        EndpointName: str
    ) -> SageMakerDescribeEndpointOutput: ...

    def describe_endpoint_config(self, *,
        EndpointConfigName: str
    ) -> SageMakerDescribeEndpointConfigOutput: ...

    def describe_hyper_parameter_tuning_job(self, *,
        HyperParameterTuningJobName: str
    ) -> SageMakerDescribeHyperParameterTuningJobResponse: ...

    def describe_labeling_job(self, *,
        LabelingJobName: str
    ) -> SageMakerDescribeLabelingJobResponse: ...

    def describe_model(self, *,
        ModelName: str
    ) -> SageMakerDescribeModelOutput: ...

    def describe_model_package(self, *,
        ModelPackageName: str
    ) -> SageMakerDescribeModelPackageOutput: ...

    def describe_notebook_instance(self, *,
        NotebookInstanceName: str
    ) -> SageMakerDescribeNotebookInstanceOutput: ...

    def describe_notebook_instance_lifecycle_config(self, *,
        NotebookInstanceLifecycleConfigName: str
    ) -> SageMakerDescribeNotebookInstanceLifecycleConfigOutput: ...

    def describe_subscribed_workteam(self, *,
        WorkteamArn: str
    ) -> SageMakerDescribeSubscribedWorkteamResponse: ...

    def describe_training_job(self, *,
        TrainingJobName: str
    ) -> SageMakerDescribeTrainingJobResponse: ...

    def describe_transform_job(self, *,
        TransformJobName: str
    ) -> SageMakerDescribeTransformJobResponse: ...

    def describe_workteam(self, *,
        WorkteamName: str
    ) -> SageMakerDescribeWorkteamResponse: ...

    def get_search_suggestions(self, *,
        Resource: str,
        SuggestionQuery: SageMakerSuggestionQuery = ...
    ) -> SageMakerGetSearchSuggestionsResponse: ...

    def list_algorithms(self, *,
        CreationTimeAfter: datetime.datetime = ...,
        CreationTimeBefore: datetime.datetime = ...,
        MaxResults: int = ...,
        NameContains: str = ...,
        NextToken: str = ...,
        SortBy: str = ...,
        SortOrder: str = ...
    ) -> SageMakerListAlgorithmsOutput: ...

    def list_code_repositories(self, *,
        CreationTimeAfter: datetime.datetime = ...,
        CreationTimeBefore: datetime.datetime = ...,
        LastModifiedTimeAfter: datetime.datetime = ...,
        LastModifiedTimeBefore: datetime.datetime = ...,
        MaxResults: int = ...,
        NameContains: str = ...,
        NextToken: str = ...,
        SortBy: str = ...,
        SortOrder: str = ...
    ) -> SageMakerListCodeRepositoriesOutput: ...

    def list_compilation_jobs(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        CreationTimeAfter: datetime.datetime = ...,
        CreationTimeBefore: datetime.datetime = ...,
        LastModifiedTimeAfter: datetime.datetime = ...,
        LastModifiedTimeBefore: datetime.datetime = ...,
        NameContains: str = ...,
        StatusEquals: str = ...,
        SortBy: str = ...,
        SortOrder: str = ...
    ) -> SageMakerListCompilationJobsResponse: ...

    def list_endpoint_configs(self, *,
        SortBy: str = ...,
        SortOrder: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...,
        NameContains: str = ...,
        CreationTimeBefore: datetime.datetime = ...,
        CreationTimeAfter: datetime.datetime = ...
    ) -> SageMakerListEndpointConfigsOutput: ...

    def list_endpoints(self, *,
        SortBy: str = ...,
        SortOrder: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...,
        NameContains: str = ...,
        CreationTimeBefore: datetime.datetime = ...,
        CreationTimeAfter: datetime.datetime = ...,
        LastModifiedTimeBefore: datetime.datetime = ...,
        LastModifiedTimeAfter: datetime.datetime = ...,
        StatusEquals: str = ...
    ) -> SageMakerListEndpointsOutput: ...

    def list_hyper_parameter_tuning_jobs(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        SortBy: str = ...,
        SortOrder: str = ...,
        NameContains: str = ...,
        CreationTimeAfter: datetime.datetime = ...,
        CreationTimeBefore: datetime.datetime = ...,
        LastModifiedTimeAfter: datetime.datetime = ...,
        LastModifiedTimeBefore: datetime.datetime = ...,
        StatusEquals: str = ...
    ) -> SageMakerListHyperParameterTuningJobsResponse: ...

    def list_labeling_jobs(self, *,
        CreationTimeAfter: datetime.datetime = ...,
        CreationTimeBefore: datetime.datetime = ...,
        LastModifiedTimeAfter: datetime.datetime = ...,
        LastModifiedTimeBefore: datetime.datetime = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        NameContains: str = ...,
        SortBy: str = ...,
        SortOrder: str = ...,
        StatusEquals: str = ...
    ) -> SageMakerListLabelingJobsResponse: ...

    def list_labeling_jobs_for_workteam(self, *,
        WorkteamArn: str,
        MaxResults: int = ...,
        NextToken: str = ...,
        CreationTimeAfter: datetime.datetime = ...,
        CreationTimeBefore: datetime.datetime = ...,
        JobReferenceCodeContains: str = ...,
        SortBy: str = ...,
        SortOrder: str = ...
    ) -> SageMakerListLabelingJobsForWorkteamResponse: ...

    def list_model_packages(self, *,
        CreationTimeAfter: datetime.datetime = ...,
        CreationTimeBefore: datetime.datetime = ...,
        MaxResults: int = ...,
        NameContains: str = ...,
        NextToken: str = ...,
        SortBy: str = ...,
        SortOrder: str = ...
    ) -> SageMakerListModelPackagesOutput: ...

    def list_models(self, *,
        SortBy: str = ...,
        SortOrder: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...,
        NameContains: str = ...,
        CreationTimeBefore: datetime.datetime = ...,
        CreationTimeAfter: datetime.datetime = ...
    ) -> SageMakerListModelsOutput: ...

    def list_notebook_instance_lifecycle_configs(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        SortBy: str = ...,
        SortOrder: str = ...,
        NameContains: str = ...,
        CreationTimeBefore: datetime.datetime = ...,
        CreationTimeAfter: datetime.datetime = ...,
        LastModifiedTimeBefore: datetime.datetime = ...,
        LastModifiedTimeAfter: datetime.datetime = ...
    ) -> SageMakerListNotebookInstanceLifecycleConfigsOutput: ...

    def list_notebook_instances(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        SortBy: str = ...,
        SortOrder: str = ...,
        NameContains: str = ...,
        CreationTimeBefore: datetime.datetime = ...,
        CreationTimeAfter: datetime.datetime = ...,
        LastModifiedTimeBefore: datetime.datetime = ...,
        LastModifiedTimeAfter: datetime.datetime = ...,
        StatusEquals: str = ...,
        NotebookInstanceLifecycleConfigNameContains: str = ...,
        DefaultCodeRepositoryContains: str = ...,
        AdditionalCodeRepositoryEquals: str = ...
    ) -> SageMakerListNotebookInstancesOutput: ...

    def list_subscribed_workteams(self, *,
        NameContains: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> SageMakerListSubscribedWorkteamsResponse: ...

    def list_tags(self, *,
        ResourceArn: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> SageMakerListTagsOutput: ...

    def list_training_jobs(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        CreationTimeAfter: datetime.datetime = ...,
        CreationTimeBefore: datetime.datetime = ...,
        LastModifiedTimeAfter: datetime.datetime = ...,
        LastModifiedTimeBefore: datetime.datetime = ...,
        NameContains: str = ...,
        StatusEquals: str = ...,
        SortBy: str = ...,
        SortOrder: str = ...
    ) -> SageMakerListTrainingJobsResponse: ...

    def list_training_jobs_for_hyper_parameter_tuning_job(self, *,
        HyperParameterTuningJobName: str,
        NextToken: str = ...,
        MaxResults: int = ...,
        StatusEquals: str = ...,
        SortBy: str = ...,
        SortOrder: str = ...
    ) -> SageMakerListTrainingJobsForHyperParameterTuningJobResponse: ...

    def list_transform_jobs(self, *,
        CreationTimeAfter: datetime.datetime = ...,
        CreationTimeBefore: datetime.datetime = ...,
        LastModifiedTimeAfter: datetime.datetime = ...,
        LastModifiedTimeBefore: datetime.datetime = ...,
        NameContains: str = ...,
        StatusEquals: str = ...,
        SortBy: str = ...,
        SortOrder: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> SageMakerListTransformJobsResponse: ...

    def list_workteams(self, *,
        SortBy: str = ...,
        SortOrder: str = ...,
        NameContains: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> SageMakerListWorkteamsResponse: ...

    def render_ui_template(self, *,
        UiTemplate: SageMakerUiTemplate,
        Task: SageMakerRenderableTask,
        RoleArn: str
    ) -> SageMakerRenderUiTemplateResponse: ...

    def search(self, *,
        Resource: str,
        SearchExpression: SageMakerSearchExpression = ...,
        SortBy: str = ...,
        SortOrder: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> SageMakerSearchResponse: ...

    def start_notebook_instance(self, *,
        NotebookInstanceName: str
    ): ...

    def stop_compilation_job(self, *,
        CompilationJobName: str
    ): ...

    def stop_hyper_parameter_tuning_job(self, *,
        HyperParameterTuningJobName: str
    ): ...

    def stop_labeling_job(self, *,
        LabelingJobName: str
    ): ...

    def stop_notebook_instance(self, *,
        NotebookInstanceName: str
    ): ...

    def stop_training_job(self, *,
        TrainingJobName: str
    ): ...

    def stop_transform_job(self, *,
        TransformJobName: str
    ): ...

    def update_code_repository(self, *,
        CodeRepositoryName: str,
        GitConfig: SageMakerGitConfigForUpdate = ...
    ) -> SageMakerUpdateCodeRepositoryOutput: ...

    def update_endpoint(self, *,
        EndpointName: str,
        EndpointConfigName: str
    ) -> SageMakerUpdateEndpointOutput: ...

    def update_endpoint_weights_and_capacities(self, *,
        EndpointName: str,
        DesiredWeightsAndCapacities: List[SageMakerDesiredWeightAndCapacity]
    ) -> SageMakerUpdateEndpointWeightsAndCapacitiesOutput: ...

    def update_notebook_instance(self, *,
        NotebookInstanceName: str,
        InstanceType: str = ...,
        RoleArn: str = ...,
        LifecycleConfigName: str = ...,
        DisassociateLifecycleConfig: bool = ...,
        VolumeSizeInGB: int = ...,
        DefaultCodeRepository: str = ...,
        AdditionalCodeRepositories: List[str] = ...,
        AcceleratorTypes: List[str] = ...,
        DisassociateAcceleratorTypes: bool = ...,
        DisassociateDefaultCodeRepository: bool = ...,
        DisassociateAdditionalCodeRepositories: bool = ...,
        RootAccess: str = ...
    ) -> SageMakerUpdateNotebookInstanceOutput: ...

    def update_notebook_instance_lifecycle_config(self, *,
        NotebookInstanceLifecycleConfigName: str,
        OnCreate: List[SageMakerNotebookInstanceLifecycleHook] = ...,
        OnStart: List[SageMakerNotebookInstanceLifecycleHook] = ...
    ) -> SageMakerUpdateNotebookInstanceLifecycleConfigOutput: ...

    def update_workteam(self, *,
        WorkteamName: str,
        MemberDefinitions: List[SageMakerMemberDefinition] = ...,
        Description: str = ...,
        NotificationConfiguration: SageMakerNotificationConfiguration = ...
    ) -> SageMakerUpdateWorkteamResponse: ...


class SageMakerTag(TypedDict):
    Key: str
    Value: str


class SageMakerAddTagsOutput(TypedDict, total=False):
    Tags: List[SageMakerTag]


class _SageMakerTrainingSpecification(TypedDict):
    TrainingImage: str
    SupportedTrainingInstanceTypes: List[str]
    TrainingChannels: List[SageMakerChannelSpecification]


class SageMakerTrainingSpecification(_SageMakerTrainingSpecification, total=False):
    TrainingImageDigest: str
    SupportedHyperParameters: List[SageMakerHyperParameterSpecification]
    SupportsDistributedTraining: bool
    MetricDefinitions: List[SageMakerMetricDefinition]
    SupportedTuningJobObjectiveMetrics: List[SageMakerHyperParameterTuningJobObjective]


class _SageMakerHyperParameterSpecification(TypedDict):
    Name: str
    Type: str


class SageMakerHyperParameterSpecification(_SageMakerHyperParameterSpecification, total=False):
    Description: str
    Range: SageMakerParameterRange
    IsTunable: bool
    IsRequired: bool
    DefaultValue: str


class SageMakerParameterRange(TypedDict, total=False):
    IntegerParameterRangeSpecification: SageMakerIntegerParameterRangeSpecification
    ContinuousParameterRangeSpecification: SageMakerContinuousParameterRangeSpecification
    CategoricalParameterRangeSpecification: SageMakerCategoricalParameterRangeSpecification


class SageMakerIntegerParameterRangeSpecification(TypedDict):
    MinValue: str
    MaxValue: str


class SageMakerContinuousParameterRangeSpecification(TypedDict):
    MinValue: str
    MaxValue: str


class SageMakerCategoricalParameterRangeSpecification(TypedDict):
    Values: List[str]


class SageMakerMetricDefinition(TypedDict):
    Name: str
    Regex: str


class _SageMakerChannelSpecification(TypedDict):
    Name: str
    SupportedContentTypes: List[str]
    SupportedInputModes: List[str]


class SageMakerChannelSpecification(_SageMakerChannelSpecification, total=False):
    Description: str
    IsRequired: bool
    SupportedCompressionTypes: List[str]


class SageMakerHyperParameterTuningJobObjective(TypedDict):
    Type: str
    MetricName: str


class SageMakerInferenceSpecification(TypedDict):
    Containers: List[SageMakerModelPackageContainerDefinition]
    SupportedTransformInstanceTypes: List[str]
    SupportedRealtimeInferenceInstanceTypes: List[str]
    SupportedContentTypes: List[str]
    SupportedResponseMIMETypes: List[str]


class _SageMakerModelPackageContainerDefinition(TypedDict):
    Image: str


class SageMakerModelPackageContainerDefinition(_SageMakerModelPackageContainerDefinition, total=False):
    ContainerHostname: str
    ImageDigest: str
    ModelDataUrl: str
    ProductId: str


class SageMakerAlgorithmValidationSpecification(TypedDict):
    ValidationRole: str
    ValidationProfiles: List[SageMakerAlgorithmValidationProfile]


class _SageMakerAlgorithmValidationProfile(TypedDict):
    ProfileName: str
    TrainingJobDefinition: SageMakerTrainingJobDefinition


class SageMakerAlgorithmValidationProfile(_SageMakerAlgorithmValidationProfile, total=False):
    TransformJobDefinition: SageMakerTransformJobDefinition


class _SageMakerTrainingJobDefinition(TypedDict):
    TrainingInputMode: str
    InputDataConfig: List[SageMakerChannel]
    OutputDataConfig: SageMakerOutputDataConfig
    ResourceConfig: SageMakerResourceConfig
    StoppingCondition: SageMakerStoppingCondition


class SageMakerTrainingJobDefinition(_SageMakerTrainingJobDefinition, total=False):
    HyperParameters: Dict[str, str]


class _SageMakerChannel(TypedDict):
    ChannelName: str
    DataSource: SageMakerDataSource


class SageMakerChannel(_SageMakerChannel, total=False):
    ContentType: str
    CompressionType: str
    RecordWrapperType: str
    InputMode: str
    ShuffleConfig: SageMakerShuffleConfig


class SageMakerDataSource(TypedDict, total=False):
    S3DataSource: SageMakerS3DataSource


class _SageMakerS3DataSource(TypedDict):
    S3DataType: str
    S3Uri: str


class SageMakerS3DataSource(_SageMakerS3DataSource, total=False):
    S3DataDistributionType: str
    AttributeNames: List[str]


class SageMakerShuffleConfig(TypedDict):
    Seed: int


class _SageMakerOutputDataConfig(TypedDict):
    S3OutputPath: str


class SageMakerOutputDataConfig(_SageMakerOutputDataConfig, total=False):
    KmsKeyId: str


class _SageMakerResourceConfig(TypedDict):
    InstanceType: str
    InstanceCount: int
    VolumeSizeInGB: int


class SageMakerResourceConfig(_SageMakerResourceConfig, total=False):
    VolumeKmsKeyId: str


class SageMakerStoppingCondition(TypedDict, total=False):
    MaxRuntimeInSeconds: int


class _SageMakerTransformJobDefinition(TypedDict):
    TransformInput: SageMakerTransformInput
    TransformOutput: SageMakerTransformOutput
    TransformResources: SageMakerTransformResources


class SageMakerTransformJobDefinition(_SageMakerTransformJobDefinition, total=False):
    MaxConcurrentTransforms: int
    MaxPayloadInMB: int
    BatchStrategy: str
    Environment: Dict[str, str]


class _SageMakerTransformInput(TypedDict):
    DataSource: SageMakerTransformDataSource


class SageMakerTransformInput(_SageMakerTransformInput, total=False):
    ContentType: str
    CompressionType: str
    SplitType: str


class SageMakerTransformDataSource(TypedDict):
    S3DataSource: SageMakerTransformS3DataSource


class SageMakerTransformS3DataSource(TypedDict):
    S3DataType: str
    S3Uri: str


class _SageMakerTransformOutput(TypedDict):
    S3OutputPath: str


class SageMakerTransformOutput(_SageMakerTransformOutput, total=False):
    Accept: str
    AssembleWith: str
    KmsKeyId: str


class _SageMakerTransformResources(TypedDict):
    InstanceType: str
    InstanceCount: int


class SageMakerTransformResources(_SageMakerTransformResources, total=False):
    VolumeKmsKeyId: str


class SageMakerCreateAlgorithmOutput(TypedDict):
    AlgorithmArn: str


class _SageMakerGitConfig(TypedDict):
    RepositoryUrl: str


class SageMakerGitConfig(_SageMakerGitConfig, total=False):
    Branch: str
    SecretArn: str


class SageMakerCreateCodeRepositoryOutput(TypedDict):
    CodeRepositoryArn: str


class SageMakerInputConfig(TypedDict):
    S3Uri: str
    DataInputConfig: str
    Framework: str


class SageMakerOutputConfig(TypedDict):
    S3OutputLocation: str
    TargetDevice: str


class SageMakerCreateCompilationJobResponse(TypedDict):
    CompilationJobArn: str


class SageMakerCreateEndpointOutput(TypedDict):
    EndpointArn: str


class _SageMakerProductionVariant(TypedDict):
    VariantName: str
    ModelName: str
    InitialInstanceCount: int
    InstanceType: str


class SageMakerProductionVariant(_SageMakerProductionVariant, total=False):
    InitialVariantWeight: float
    AcceleratorType: str


class SageMakerCreateEndpointConfigOutput(TypedDict):
    EndpointConfigArn: str


class _SageMakerHyperParameterTuningJobConfig(TypedDict):
    Strategy: str
    ResourceLimits: SageMakerResourceLimits


class SageMakerHyperParameterTuningJobConfig(_SageMakerHyperParameterTuningJobConfig, total=False):
    HyperParameterTuningJobObjective: SageMakerHyperParameterTuningJobObjective
    ParameterRanges: SageMakerParameterRanges
    TrainingJobEarlyStoppingType: str


class SageMakerResourceLimits(TypedDict):
    MaxNumberOfTrainingJobs: int
    MaxParallelTrainingJobs: int


class SageMakerParameterRanges(TypedDict, total=False):
    IntegerParameterRanges: List[SageMakerIntegerParameterRange]
    ContinuousParameterRanges: List[SageMakerContinuousParameterRange]
    CategoricalParameterRanges: List[SageMakerCategoricalParameterRange]


class _SageMakerIntegerParameterRange(TypedDict):
    Name: str
    MinValue: str
    MaxValue: str


class SageMakerIntegerParameterRange(_SageMakerIntegerParameterRange, total=False):
    ScalingType: str


class _SageMakerContinuousParameterRange(TypedDict):
    Name: str
    MinValue: str
    MaxValue: str


class SageMakerContinuousParameterRange(_SageMakerContinuousParameterRange, total=False):
    ScalingType: str


class SageMakerCategoricalParameterRange(TypedDict):
    Name: str
    Values: List[str]


class _SageMakerHyperParameterTrainingJobDefinition(TypedDict):
    AlgorithmSpecification: SageMakerHyperParameterAlgorithmSpecification
    RoleArn: str
    OutputDataConfig: SageMakerOutputDataConfig
    ResourceConfig: SageMakerResourceConfig
    StoppingCondition: SageMakerStoppingCondition


class SageMakerHyperParameterTrainingJobDefinition(_SageMakerHyperParameterTrainingJobDefinition, total=False):
    StaticHyperParameters: Dict[str, str]
    InputDataConfig: List[SageMakerChannel]
    VpcConfig: SageMakerVpcConfig
    EnableNetworkIsolation: bool
    EnableInterContainerTrafficEncryption: bool


class _SageMakerHyperParameterAlgorithmSpecification(TypedDict):
    TrainingInputMode: str


class SageMakerHyperParameterAlgorithmSpecification(_SageMakerHyperParameterAlgorithmSpecification, total=False):
    TrainingImage: str
    AlgorithmName: str
    MetricDefinitions: List[SageMakerMetricDefinition]


class SageMakerVpcConfig(TypedDict):
    SecurityGroupIds: List[str]
    Subnets: List[str]


class SageMakerHyperParameterTuningJobWarmStartConfig(TypedDict):
    ParentHyperParameterTuningJobs: List[SageMakerParentHyperParameterTuningJob]
    WarmStartType: str


class SageMakerParentHyperParameterTuningJob(TypedDict, total=False):
    HyperParameterTuningJobName: str


class SageMakerCreateHyperParameterTuningJobResponse(TypedDict):
    HyperParameterTuningJobArn: str


class _SageMakerLabelingJobInputConfig(TypedDict):
    DataSource: SageMakerLabelingJobDataSource


class SageMakerLabelingJobInputConfig(_SageMakerLabelingJobInputConfig, total=False):
    DataAttributes: SageMakerLabelingJobDataAttributes


class SageMakerLabelingJobDataSource(TypedDict):
    S3DataSource: SageMakerLabelingJobS3DataSource


class SageMakerLabelingJobS3DataSource(TypedDict):
    ManifestS3Uri: str


class SageMakerLabelingJobDataAttributes(TypedDict, total=False):
    ContentClassifiers: List[str]


class _SageMakerLabelingJobOutputConfig(TypedDict):
    S3OutputPath: str


class SageMakerLabelingJobOutputConfig(_SageMakerLabelingJobOutputConfig, total=False):
    KmsKeyId: str


class SageMakerLabelingJobStoppingConditions(TypedDict, total=False):
    MaxHumanLabeledObjectCount: int
    MaxPercentageOfInputDatasetLabeled: int


class _SageMakerLabelingJobAlgorithmsConfig(TypedDict):
    LabelingJobAlgorithmSpecificationArn: str


class SageMakerLabelingJobAlgorithmsConfig(_SageMakerLabelingJobAlgorithmsConfig, total=False):
    InitialActiveLearningModelArn: str
    LabelingJobResourceConfig: SageMakerLabelingJobResourceConfig


class SageMakerLabelingJobResourceConfig(TypedDict, total=False):
    VolumeKmsKeyId: str


class _SageMakerHumanTaskConfig(TypedDict):
    WorkteamArn: str
    UiConfig: SageMakerUiConfig
    PreHumanTaskLambdaArn: str
    TaskTitle: str
    TaskDescription: str
    NumberOfHumanWorkersPerDataObject: int
    TaskTimeLimitInSeconds: int
    AnnotationConsolidationConfig: SageMakerAnnotationConsolidationConfig


class SageMakerHumanTaskConfig(_SageMakerHumanTaskConfig, total=False):
    TaskKeywords: List[str]
    TaskAvailabilityLifetimeInSeconds: int
    MaxConcurrentTaskCount: int
    PublicWorkforceTaskPrice: SageMakerPublicWorkforceTaskPrice


class SageMakerUiConfig(TypedDict):
    UiTemplateS3Uri: str


class SageMakerAnnotationConsolidationConfig(TypedDict):
    AnnotationConsolidationLambdaArn: str


class SageMakerPublicWorkforceTaskPrice(TypedDict, total=False):
    AmountInUsd: SageMakerUSD


class SageMakerUSD(TypedDict, total=False):
    Dollars: int
    Cents: int
    TenthFractionsOfACent: int


class SageMakerCreateLabelingJobResponse(TypedDict):
    LabelingJobArn: str


class SageMakerContainerDefinition(TypedDict, total=False):
    ContainerHostname: str
    Image: str
    ModelDataUrl: str
    Environment: Dict[str, str]
    ModelPackageName: str


class SageMakerCreateModelOutput(TypedDict):
    ModelArn: str


class SageMakerModelPackageValidationSpecification(TypedDict):
    ValidationRole: str
    ValidationProfiles: List[SageMakerModelPackageValidationProfile]


class SageMakerModelPackageValidationProfile(TypedDict):
    ProfileName: str
    TransformJobDefinition: SageMakerTransformJobDefinition


class SageMakerSourceAlgorithmSpecification(TypedDict):
    SourceAlgorithms: List[SageMakerSourceAlgorithm]


class _SageMakerSourceAlgorithm(TypedDict):
    AlgorithmName: str


class SageMakerSourceAlgorithm(_SageMakerSourceAlgorithm, total=False):
    ModelDataUrl: str


class SageMakerCreateModelPackageOutput(TypedDict):
    ModelPackageArn: str


class SageMakerCreateNotebookInstanceOutput(TypedDict, total=False):
    NotebookInstanceArn: str


class SageMakerNotebookInstanceLifecycleHook(TypedDict, total=False):
    Content: str


class SageMakerCreateNotebookInstanceLifecycleConfigOutput(TypedDict, total=False):
    NotebookInstanceLifecycleConfigArn: str


class SageMakerCreatePresignedNotebookInstanceUrlOutput(TypedDict, total=False):
    AuthorizedUrl: str


class _SageMakerAlgorithmSpecification(TypedDict):
    TrainingInputMode: str


class SageMakerAlgorithmSpecification(_SageMakerAlgorithmSpecification, total=False):
    TrainingImage: str
    AlgorithmName: str
    MetricDefinitions: List[SageMakerMetricDefinition]


class SageMakerCreateTrainingJobResponse(TypedDict):
    TrainingJobArn: str


class SageMakerCreateTransformJobResponse(TypedDict):
    TransformJobArn: str


class SageMakerMemberDefinition(TypedDict, total=False):
    CognitoMemberDefinition: SageMakerCognitoMemberDefinition


class SageMakerCognitoMemberDefinition(TypedDict):
    UserPool: str
    UserGroup: str
    ClientId: str


class SageMakerNotificationConfiguration(TypedDict, total=False):
    NotificationTopicArn: str


class SageMakerCreateWorkteamResponse(TypedDict, total=False):
    WorkteamArn: str


class SageMakerDeleteTagsOutput(TypedDict, total=False):
    pass


class SageMakerDeleteWorkteamResponse(TypedDict):
    Success: bool


class _SageMakerDescribeAlgorithmOutput(TypedDict):
    AlgorithmName: str
    AlgorithmArn: str
    CreationTime: datetime.datetime
    TrainingSpecification: SageMakerTrainingSpecification
    AlgorithmStatus: str
    AlgorithmStatusDetails: SageMakerAlgorithmStatusDetails


class SageMakerDescribeAlgorithmOutput(_SageMakerDescribeAlgorithmOutput, total=False):
    AlgorithmDescription: str
    InferenceSpecification: SageMakerInferenceSpecification
    ValidationSpecification: SageMakerAlgorithmValidationSpecification
    ProductId: str
    CertifyForMarketplace: bool


class SageMakerAlgorithmStatusDetails(TypedDict, total=False):
    ValidationStatuses: List[SageMakerAlgorithmStatusItem]
    ImageScanStatuses: List[SageMakerAlgorithmStatusItem]


class _SageMakerAlgorithmStatusItem(TypedDict):
    Name: str
    Status: str


class SageMakerAlgorithmStatusItem(_SageMakerAlgorithmStatusItem, total=False):
    FailureReason: str


class _SageMakerDescribeCodeRepositoryOutput(TypedDict):
    CodeRepositoryName: str
    CodeRepositoryArn: str
    CreationTime: datetime.datetime
    LastModifiedTime: datetime.datetime


class SageMakerDescribeCodeRepositoryOutput(_SageMakerDescribeCodeRepositoryOutput, total=False):
    GitConfig: SageMakerGitConfig


class _SageMakerDescribeCompilationJobResponse(TypedDict):
    CompilationJobName: str
    CompilationJobArn: str
    CompilationJobStatus: str
    StoppingCondition: SageMakerStoppingCondition
    CreationTime: datetime.datetime
    LastModifiedTime: datetime.datetime
    FailureReason: str
    ModelArtifacts: SageMakerModelArtifacts
    RoleArn: str
    InputConfig: SageMakerInputConfig
    OutputConfig: SageMakerOutputConfig


class SageMakerDescribeCompilationJobResponse(_SageMakerDescribeCompilationJobResponse, total=False):
    CompilationStartTime: datetime.datetime
    CompilationEndTime: datetime.datetime


class SageMakerModelArtifacts(TypedDict):
    S3ModelArtifacts: str


class _SageMakerDescribeEndpointOutput(TypedDict):
    EndpointName: str
    EndpointArn: str
    EndpointConfigName: str
    EndpointStatus: str
    CreationTime: datetime.datetime
    LastModifiedTime: datetime.datetime


class SageMakerDescribeEndpointOutput(_SageMakerDescribeEndpointOutput, total=False):
    ProductionVariants: List[SageMakerProductionVariantSummary]
    FailureReason: str


class _SageMakerProductionVariantSummary(TypedDict):
    VariantName: str


class SageMakerProductionVariantSummary(_SageMakerProductionVariantSummary, total=False):
    DeployedImages: List[SageMakerDeployedImage]
    CurrentWeight: float
    DesiredWeight: float
    CurrentInstanceCount: int
    DesiredInstanceCount: int


class SageMakerDeployedImage(TypedDict, total=False):
    SpecifiedImage: str
    ResolvedImage: str
    ResolutionTime: datetime.datetime


class _SageMakerDescribeEndpointConfigOutput(TypedDict):
    EndpointConfigName: str
    EndpointConfigArn: str
    ProductionVariants: List[SageMakerProductionVariant]
    CreationTime: datetime.datetime


class SageMakerDescribeEndpointConfigOutput(_SageMakerDescribeEndpointConfigOutput, total=False):
    KmsKeyId: str


class _SageMakerDescribeHyperParameterTuningJobResponse(TypedDict):
    HyperParameterTuningJobName: str
    HyperParameterTuningJobArn: str
    HyperParameterTuningJobConfig: SageMakerHyperParameterTuningJobConfig
    HyperParameterTuningJobStatus: str
    CreationTime: datetime.datetime
    TrainingJobStatusCounters: SageMakerTrainingJobStatusCounters
    ObjectiveStatusCounters: SageMakerObjectiveStatusCounters


class SageMakerDescribeHyperParameterTuningJobResponse(_SageMakerDescribeHyperParameterTuningJobResponse, total=False):
    TrainingJobDefinition: SageMakerHyperParameterTrainingJobDefinition
    HyperParameterTuningEndTime: datetime.datetime
    LastModifiedTime: datetime.datetime
    BestTrainingJob: SageMakerHyperParameterTrainingJobSummary
    OverallBestTrainingJob: SageMakerHyperParameterTrainingJobSummary
    WarmStartConfig: SageMakerHyperParameterTuningJobWarmStartConfig
    FailureReason: str


class SageMakerTrainingJobStatusCounters(TypedDict, total=False):
    Completed: int
    InProgress: int
    RetryableError: int
    NonRetryableError: int
    Stopped: int


class SageMakerObjectiveStatusCounters(TypedDict, total=False):
    Succeeded: int
    Pending: int
    Failed: int


class _SageMakerHyperParameterTrainingJobSummary(TypedDict):
    TrainingJobName: str
    TrainingJobArn: str
    CreationTime: datetime.datetime
    TrainingJobStatus: str
    TunedHyperParameters: Dict[str, str]


class SageMakerHyperParameterTrainingJobSummary(_SageMakerHyperParameterTrainingJobSummary, total=False):
    TuningJobName: str
    TrainingStartTime: datetime.datetime
    TrainingEndTime: datetime.datetime
    FailureReason: str
    FinalHyperParameterTuningJobObjectiveMetric: SageMakerFinalHyperParameterTuningJobObjectiveMetric
    ObjectiveStatus: str


class _SageMakerFinalHyperParameterTuningJobObjectiveMetric(TypedDict):
    MetricName: str
    Value: float


class SageMakerFinalHyperParameterTuningJobObjectiveMetric(_SageMakerFinalHyperParameterTuningJobObjectiveMetric, total=False):
    Type: str


class _SageMakerDescribeLabelingJobResponse(TypedDict):
    LabelingJobStatus: str
    LabelCounters: SageMakerLabelCounters
    CreationTime: datetime.datetime
    LastModifiedTime: datetime.datetime
    JobReferenceCode: str
    LabelingJobName: str
    LabelingJobArn: str
    InputConfig: SageMakerLabelingJobInputConfig
    OutputConfig: SageMakerLabelingJobOutputConfig
    RoleArn: str
    HumanTaskConfig: SageMakerHumanTaskConfig


class SageMakerDescribeLabelingJobResponse(_SageMakerDescribeLabelingJobResponse, total=False):
    FailureReason: str
    LabelAttributeName: str
    LabelCategoryConfigS3Uri: str
    StoppingConditions: SageMakerLabelingJobStoppingConditions
    LabelingJobAlgorithmsConfig: SageMakerLabelingJobAlgorithmsConfig
    Tags: List[SageMakerTag]
    LabelingJobOutput: SageMakerLabelingJobOutput


class SageMakerLabelCounters(TypedDict, total=False):
    TotalLabeled: int
    HumanLabeled: int
    MachineLabeled: int
    FailedNonRetryableError: int
    Unlabeled: int


class _SageMakerLabelingJobOutput(TypedDict):
    OutputDatasetS3Uri: str


class SageMakerLabelingJobOutput(_SageMakerLabelingJobOutput, total=False):
    FinalActiveLearningModelArn: str


class _SageMakerDescribeModelOutput(TypedDict):
    ModelName: str
    ExecutionRoleArn: str
    CreationTime: datetime.datetime
    ModelArn: str


class SageMakerDescribeModelOutput(_SageMakerDescribeModelOutput, total=False):
    PrimaryContainer: SageMakerContainerDefinition
    Containers: List[SageMakerContainerDefinition]
    VpcConfig: SageMakerVpcConfig
    EnableNetworkIsolation: bool


class _SageMakerDescribeModelPackageOutput(TypedDict):
    ModelPackageName: str
    ModelPackageArn: str
    CreationTime: datetime.datetime
    ModelPackageStatus: str
    ModelPackageStatusDetails: SageMakerModelPackageStatusDetails


class SageMakerDescribeModelPackageOutput(_SageMakerDescribeModelPackageOutput, total=False):
    ModelPackageDescription: str
    InferenceSpecification: SageMakerInferenceSpecification
    SourceAlgorithmSpecification: SageMakerSourceAlgorithmSpecification
    ValidationSpecification: SageMakerModelPackageValidationSpecification
    CertifyForMarketplace: bool


class _SageMakerModelPackageStatusDetails(TypedDict):
    ValidationStatuses: List[SageMakerModelPackageStatusItem]


class SageMakerModelPackageStatusDetails(_SageMakerModelPackageStatusDetails, total=False):
    ImageScanStatuses: List[SageMakerModelPackageStatusItem]


class _SageMakerModelPackageStatusItem(TypedDict):
    Name: str
    Status: str


class SageMakerModelPackageStatusItem(_SageMakerModelPackageStatusItem, total=False):
    FailureReason: str


class SageMakerDescribeNotebookInstanceOutput(TypedDict, total=False):
    NotebookInstanceArn: str
    NotebookInstanceName: str
    NotebookInstanceStatus: str
    FailureReason: str
    Url: str
    InstanceType: str
    SubnetId: str
    SecurityGroups: List[str]
    RoleArn: str
    KmsKeyId: str
    NetworkInterfaceId: str
    LastModifiedTime: datetime.datetime
    CreationTime: datetime.datetime
    NotebookInstanceLifecycleConfigName: str
    DirectInternetAccess: str
    VolumeSizeInGB: int
    AcceleratorTypes: List[str]
    DefaultCodeRepository: str
    AdditionalCodeRepositories: List[str]
    RootAccess: str


class SageMakerDescribeNotebookInstanceLifecycleConfigOutput(TypedDict, total=False):
    NotebookInstanceLifecycleConfigArn: str
    NotebookInstanceLifecycleConfigName: str
    OnCreate: List[SageMakerNotebookInstanceLifecycleHook]
    OnStart: List[SageMakerNotebookInstanceLifecycleHook]
    LastModifiedTime: datetime.datetime
    CreationTime: datetime.datetime


class SageMakerDescribeSubscribedWorkteamResponse(TypedDict):
    SubscribedWorkteam: SageMakerSubscribedWorkteam


class _SageMakerSubscribedWorkteam(TypedDict):
    WorkteamArn: str


class SageMakerSubscribedWorkteam(_SageMakerSubscribedWorkteam, total=False):
    MarketplaceTitle: str
    SellerName: str
    MarketplaceDescription: str
    ListingId: str


class _SageMakerDescribeTrainingJobResponse(TypedDict):
    TrainingJobName: str
    TrainingJobArn: str
    ModelArtifacts: SageMakerModelArtifacts
    TrainingJobStatus: str
    SecondaryStatus: str
    AlgorithmSpecification: SageMakerAlgorithmSpecification
    ResourceConfig: SageMakerResourceConfig
    StoppingCondition: SageMakerStoppingCondition
    CreationTime: datetime.datetime


class SageMakerDescribeTrainingJobResponse(_SageMakerDescribeTrainingJobResponse, total=False):
    TuningJobArn: str
    LabelingJobArn: str
    FailureReason: str
    HyperParameters: Dict[str, str]
    RoleArn: str
    InputDataConfig: List[SageMakerChannel]
    OutputDataConfig: SageMakerOutputDataConfig
    VpcConfig: SageMakerVpcConfig
    TrainingStartTime: datetime.datetime
    TrainingEndTime: datetime.datetime
    LastModifiedTime: datetime.datetime
    SecondaryStatusTransitions: List[SageMakerSecondaryStatusTransition]
    FinalMetricDataList: List[SageMakerMetricData]
    EnableNetworkIsolation: bool
    EnableInterContainerTrafficEncryption: bool


class _SageMakerSecondaryStatusTransition(TypedDict):
    Status: str
    StartTime: datetime.datetime


class SageMakerSecondaryStatusTransition(_SageMakerSecondaryStatusTransition, total=False):
    EndTime: datetime.datetime
    StatusMessage: str


class SageMakerMetricData(TypedDict, total=False):
    MetricName: str
    Value: float
    Timestamp: datetime.datetime


class _SageMakerDescribeTransformJobResponse(TypedDict):
    TransformJobName: str
    TransformJobArn: str
    TransformJobStatus: str
    ModelName: str
    TransformInput: SageMakerTransformInput
    TransformResources: SageMakerTransformResources
    CreationTime: datetime.datetime


class SageMakerDescribeTransformJobResponse(_SageMakerDescribeTransformJobResponse, total=False):
    FailureReason: str
    MaxConcurrentTransforms: int
    MaxPayloadInMB: int
    BatchStrategy: str
    Environment: Dict[str, str]
    TransformOutput: SageMakerTransformOutput
    TransformStartTime: datetime.datetime
    TransformEndTime: datetime.datetime
    LabelingJobArn: str


class SageMakerDescribeWorkteamResponse(TypedDict):
    Workteam: SageMakerWorkteam


class _SageMakerWorkteam(TypedDict):
    WorkteamName: str
    MemberDefinitions: List[SageMakerMemberDefinition]
    WorkteamArn: str
    Description: str


class SageMakerWorkteam(_SageMakerWorkteam, total=False):
    ProductListingIds: List[str]
    SubDomain: str
    CreateDate: datetime.datetime
    LastUpdatedDate: datetime.datetime
    NotificationConfiguration: SageMakerNotificationConfiguration


class SageMakerSuggestionQuery(TypedDict, total=False):
    PropertyNameQuery: SageMakerPropertyNameQuery


class SageMakerPropertyNameQuery(TypedDict):
    PropertyNameHint: str


class SageMakerGetSearchSuggestionsResponse(TypedDict, total=False):
    PropertyNameSuggestions: List[SageMakerPropertyNameSuggestion]


class SageMakerPropertyNameSuggestion(TypedDict, total=False):
    PropertyName: str


class _SageMakerListAlgorithmsOutput(TypedDict):
    AlgorithmSummaryList: List[SageMakerAlgorithmSummary]


class SageMakerListAlgorithmsOutput(_SageMakerListAlgorithmsOutput, total=False):
    NextToken: str


class _SageMakerAlgorithmSummary(TypedDict):
    AlgorithmName: str
    AlgorithmArn: str
    CreationTime: datetime.datetime
    AlgorithmStatus: str


class SageMakerAlgorithmSummary(_SageMakerAlgorithmSummary, total=False):
    AlgorithmDescription: str


class _SageMakerListCodeRepositoriesOutput(TypedDict):
    CodeRepositorySummaryList: List[SageMakerCodeRepositorySummary]


class SageMakerListCodeRepositoriesOutput(_SageMakerListCodeRepositoriesOutput, total=False):
    NextToken: str


class _SageMakerCodeRepositorySummary(TypedDict):
    CodeRepositoryName: str
    CodeRepositoryArn: str
    CreationTime: datetime.datetime
    LastModifiedTime: datetime.datetime


class SageMakerCodeRepositorySummary(_SageMakerCodeRepositorySummary, total=False):
    GitConfig: SageMakerGitConfig


class _SageMakerListCompilationJobsResponse(TypedDict):
    CompilationJobSummaries: List[SageMakerCompilationJobSummary]


class SageMakerListCompilationJobsResponse(_SageMakerListCompilationJobsResponse, total=False):
    NextToken: str


class _SageMakerCompilationJobSummary(TypedDict):
    CompilationJobName: str
    CompilationJobArn: str
    CreationTime: datetime.datetime
    CompilationTargetDevice: str
    CompilationJobStatus: str


class SageMakerCompilationJobSummary(_SageMakerCompilationJobSummary, total=False):
    CompilationStartTime: datetime.datetime
    CompilationEndTime: datetime.datetime
    LastModifiedTime: datetime.datetime


class _SageMakerListEndpointConfigsOutput(TypedDict):
    EndpointConfigs: List[SageMakerEndpointConfigSummary]


class SageMakerListEndpointConfigsOutput(_SageMakerListEndpointConfigsOutput, total=False):
    NextToken: str


class SageMakerEndpointConfigSummary(TypedDict):
    EndpointConfigName: str
    EndpointConfigArn: str
    CreationTime: datetime.datetime


class _SageMakerListEndpointsOutput(TypedDict):
    Endpoints: List[SageMakerEndpointSummary]


class SageMakerListEndpointsOutput(_SageMakerListEndpointsOutput, total=False):
    NextToken: str


class SageMakerEndpointSummary(TypedDict):
    EndpointName: str
    EndpointArn: str
    CreationTime: datetime.datetime
    LastModifiedTime: datetime.datetime
    EndpointStatus: str


class _SageMakerListHyperParameterTuningJobsResponse(TypedDict):
    HyperParameterTuningJobSummaries: List[SageMakerHyperParameterTuningJobSummary]


class SageMakerListHyperParameterTuningJobsResponse(_SageMakerListHyperParameterTuningJobsResponse, total=False):
    NextToken: str


class _SageMakerHyperParameterTuningJobSummary(TypedDict):
    HyperParameterTuningJobName: str
    HyperParameterTuningJobArn: str
    HyperParameterTuningJobStatus: str
    Strategy: str
    CreationTime: datetime.datetime
    TrainingJobStatusCounters: SageMakerTrainingJobStatusCounters
    ObjectiveStatusCounters: SageMakerObjectiveStatusCounters


class SageMakerHyperParameterTuningJobSummary(_SageMakerHyperParameterTuningJobSummary, total=False):
    HyperParameterTuningEndTime: datetime.datetime
    LastModifiedTime: datetime.datetime
    ResourceLimits: SageMakerResourceLimits


class SageMakerListLabelingJobsResponse(TypedDict, total=False):
    LabelingJobSummaryList: List[SageMakerLabelingJobSummary]
    NextToken: str


class _SageMakerLabelingJobSummary(TypedDict):
    LabelingJobName: str
    LabelingJobArn: str
    CreationTime: datetime.datetime
    LastModifiedTime: datetime.datetime
    LabelingJobStatus: str
    LabelCounters: SageMakerLabelCounters
    WorkteamArn: str
    PreHumanTaskLambdaArn: str


class SageMakerLabelingJobSummary(_SageMakerLabelingJobSummary, total=False):
    AnnotationConsolidationLambdaArn: str
    FailureReason: str
    LabelingJobOutput: SageMakerLabelingJobOutput
    InputConfig: SageMakerLabelingJobInputConfig


class _SageMakerListLabelingJobsForWorkteamResponse(TypedDict):
    LabelingJobSummaryList: List[SageMakerLabelingJobForWorkteamSummary]


class SageMakerListLabelingJobsForWorkteamResponse(_SageMakerListLabelingJobsForWorkteamResponse, total=False):
    NextToken: str


class _SageMakerLabelingJobForWorkteamSummary(TypedDict):
    JobReferenceCode: str
    WorkRequesterAccountId: str
    CreationTime: datetime.datetime


class SageMakerLabelingJobForWorkteamSummary(_SageMakerLabelingJobForWorkteamSummary, total=False):
    LabelingJobName: str
    LabelCounters: SageMakerLabelCountersForWorkteam
    NumberOfHumanWorkersPerDataObject: int


class SageMakerLabelCountersForWorkteam(TypedDict, total=False):
    HumanLabeled: int
    PendingHuman: int
    Total: int


class _SageMakerListModelPackagesOutput(TypedDict):
    ModelPackageSummaryList: List[SageMakerModelPackageSummary]


class SageMakerListModelPackagesOutput(_SageMakerListModelPackagesOutput, total=False):
    NextToken: str


class _SageMakerModelPackageSummary(TypedDict):
    ModelPackageName: str
    ModelPackageArn: str
    CreationTime: datetime.datetime
    ModelPackageStatus: str


class SageMakerModelPackageSummary(_SageMakerModelPackageSummary, total=False):
    ModelPackageDescription: str


class _SageMakerListModelsOutput(TypedDict):
    Models: List[SageMakerModelSummary]


class SageMakerListModelsOutput(_SageMakerListModelsOutput, total=False):
    NextToken: str


class SageMakerModelSummary(TypedDict):
    ModelName: str
    ModelArn: str
    CreationTime: datetime.datetime


class SageMakerListNotebookInstanceLifecycleConfigsOutput(TypedDict, total=False):
    NextToken: str
    NotebookInstanceLifecycleConfigs: List[SageMakerNotebookInstanceLifecycleConfigSummary]


class _SageMakerNotebookInstanceLifecycleConfigSummary(TypedDict):
    NotebookInstanceLifecycleConfigName: str
    NotebookInstanceLifecycleConfigArn: str


class SageMakerNotebookInstanceLifecycleConfigSummary(_SageMakerNotebookInstanceLifecycleConfigSummary, total=False):
    CreationTime: datetime.datetime
    LastModifiedTime: datetime.datetime


class SageMakerListNotebookInstancesOutput(TypedDict, total=False):
    NextToken: str
    NotebookInstances: List[SageMakerNotebookInstanceSummary]


class _SageMakerNotebookInstanceSummary(TypedDict):
    NotebookInstanceName: str
    NotebookInstanceArn: str


class SageMakerNotebookInstanceSummary(_SageMakerNotebookInstanceSummary, total=False):
    NotebookInstanceStatus: str
    Url: str
    InstanceType: str
    CreationTime: datetime.datetime
    LastModifiedTime: datetime.datetime
    NotebookInstanceLifecycleConfigName: str
    DefaultCodeRepository: str
    AdditionalCodeRepositories: List[str]


class _SageMakerListSubscribedWorkteamsResponse(TypedDict):
    SubscribedWorkteams: List[SageMakerSubscribedWorkteam]


class SageMakerListSubscribedWorkteamsResponse(_SageMakerListSubscribedWorkteamsResponse, total=False):
    NextToken: str


class SageMakerListTagsOutput(TypedDict, total=False):
    Tags: List[SageMakerTag]
    NextToken: str


class _SageMakerListTrainingJobsResponse(TypedDict):
    TrainingJobSummaries: List[SageMakerTrainingJobSummary]


class SageMakerListTrainingJobsResponse(_SageMakerListTrainingJobsResponse, total=False):
    NextToken: str


class _SageMakerTrainingJobSummary(TypedDict):
    TrainingJobName: str
    TrainingJobArn: str
    CreationTime: datetime.datetime
    TrainingJobStatus: str


class SageMakerTrainingJobSummary(_SageMakerTrainingJobSummary, total=False):
    TrainingEndTime: datetime.datetime
    LastModifiedTime: datetime.datetime


class _SageMakerListTrainingJobsForHyperParameterTuningJobResponse(TypedDict):
    TrainingJobSummaries: List[SageMakerHyperParameterTrainingJobSummary]


class SageMakerListTrainingJobsForHyperParameterTuningJobResponse(_SageMakerListTrainingJobsForHyperParameterTuningJobResponse, total=False):
    NextToken: str


class _SageMakerListTransformJobsResponse(TypedDict):
    TransformJobSummaries: List[SageMakerTransformJobSummary]


class SageMakerListTransformJobsResponse(_SageMakerListTransformJobsResponse, total=False):
    NextToken: str


class _SageMakerTransformJobSummary(TypedDict):
    TransformJobName: str
    TransformJobArn: str
    CreationTime: datetime.datetime
    TransformJobStatus: str


class SageMakerTransformJobSummary(_SageMakerTransformJobSummary, total=False):
    TransformEndTime: datetime.datetime
    LastModifiedTime: datetime.datetime
    FailureReason: str


class _SageMakerListWorkteamsResponse(TypedDict):
    Workteams: List[SageMakerWorkteam]


class SageMakerListWorkteamsResponse(_SageMakerListWorkteamsResponse, total=False):
    NextToken: str


class SageMakerUiTemplate(TypedDict):
    Content: str


class SageMakerRenderableTask(TypedDict):
    Input: str


class SageMakerRenderUiTemplateResponse(TypedDict):
    RenderedContent: str
    Errors: List[SageMakerRenderingError]


class SageMakerRenderingError(TypedDict):
    Code: str
    Message: str


class SageMakerSearchExpression(TypedDict, total=False):
    Filters: List[SageMakerFilter]
    NestedFilters: List[SageMakerNestedFilters]
    SubExpressions: List[SageMakerSearchExpression]
    Operator: str


class _SageMakerFilter(TypedDict):
    Name: str


class SageMakerFilter(_SageMakerFilter, total=False):
    Operator: str
    Value: str


class SageMakerNestedFilters(TypedDict):
    NestedPropertyName: str
    Filters: List[SageMakerFilter]


class SageMakerSearchResponse(TypedDict, total=False):
    Results: List[SageMakerSearchRecord]
    NextToken: str


class SageMakerSearchRecord(TypedDict, total=False):
    TrainingJob: SageMakerTrainingJob


class SageMakerTrainingJob(TypedDict, total=False):
    TrainingJobName: str
    TrainingJobArn: str
    TuningJobArn: str
    LabelingJobArn: str
    ModelArtifacts: SageMakerModelArtifacts
    TrainingJobStatus: str
    SecondaryStatus: str
    FailureReason: str
    HyperParameters: Dict[str, str]
    AlgorithmSpecification: SageMakerAlgorithmSpecification
    RoleArn: str
    InputDataConfig: List[SageMakerChannel]
    OutputDataConfig: SageMakerOutputDataConfig
    ResourceConfig: SageMakerResourceConfig
    VpcConfig: SageMakerVpcConfig
    StoppingCondition: SageMakerStoppingCondition
    CreationTime: datetime.datetime
    TrainingStartTime: datetime.datetime
    TrainingEndTime: datetime.datetime
    LastModifiedTime: datetime.datetime
    SecondaryStatusTransitions: List[SageMakerSecondaryStatusTransition]
    FinalMetricDataList: List[SageMakerMetricData]
    EnableNetworkIsolation: bool
    EnableInterContainerTrafficEncryption: bool
    Tags: List[SageMakerTag]


class SageMakerGitConfigForUpdate(TypedDict, total=False):
    SecretArn: str


class SageMakerUpdateCodeRepositoryOutput(TypedDict):
    CodeRepositoryArn: str


class SageMakerUpdateEndpointOutput(TypedDict):
    EndpointArn: str


class _SageMakerDesiredWeightAndCapacity(TypedDict):
    VariantName: str


class SageMakerDesiredWeightAndCapacity(_SageMakerDesiredWeightAndCapacity, total=False):
    DesiredWeight: float
    DesiredInstanceCount: int


class SageMakerUpdateEndpointWeightsAndCapacitiesOutput(TypedDict):
    EndpointArn: str


class SageMakerUpdateNotebookInstanceOutput(TypedDict, total=False):
    pass


class SageMakerUpdateNotebookInstanceLifecycleConfigOutput(TypedDict, total=False):
    pass


class SageMakerUpdateWorkteamResponse(TypedDict):
    Workteam: SageMakerWorkteam


class SageMakerRuntime(BaseClient):
    def invoke_endpoint(self, *,
        EndpointName: str,
        Body: bytes,
        ContentType: str = ...,
        Accept: str = ...,
        CustomAttributes: str = ...
    ) -> SageMakerRuntimeInvokeEndpointOutput: ...


class _SageMakerRuntimeInvokeEndpointOutput(TypedDict):
    Body: bytes


class SageMakerRuntimeInvokeEndpointOutput(_SageMakerRuntimeInvokeEndpointOutput, total=False):
    ContentType: str
    InvokedProductionVariant: str
    CustomAttributes: str


class SimpleDB(BaseClient):
    def batch_delete_attributes(self, *,
        DomainName: str,
        Items: List[SimpleDBDeletableItem]
    ): ...

    def batch_put_attributes(self, *,
        DomainName: str,
        Items: List[SimpleDBReplaceableItem]
    ): ...

    def create_domain(self, *,
        DomainName: str
    ): ...

    def delete_attributes(self, *,
        DomainName: str,
        ItemName: str,
        Attributes: List[SimpleDBAttribute] = ...,
        Expected: SimpleDBUpdateCondition = ...
    ): ...

    def delete_domain(self, *,
        DomainName: str
    ): ...

    def domain_metadata(self, *,
        DomainName: str
    ) -> SimpleDBDomainMetadataResult: ...

    def get_attributes(self, *,
        DomainName: str,
        ItemName: str,
        AttributeNames: List[str] = ...,
        ConsistentRead: bool = ...
    ) -> SimpleDBGetAttributesResult: ...

    def list_domains(self, *,
        MaxNumberOfDomains: int = ...,
        NextToken: str = ...
    ) -> SimpleDBListDomainsResult: ...

    def put_attributes(self, *,
        DomainName: str,
        ItemName: str,
        Attributes: List[SimpleDBReplaceableAttribute],
        Expected: SimpleDBUpdateCondition = ...
    ): ...

    def select(self, *,
        SelectExpression: str,
        NextToken: str = ...,
        ConsistentRead: bool = ...
    ) -> SimpleDBSelectResult: ...


class _SimpleDBDeletableItem(TypedDict):
    Name: str


class SimpleDBDeletableItem(_SimpleDBDeletableItem, total=False):
    Attributes: List[SimpleDBAttribute]


class _SimpleDBAttribute(TypedDict):
    Name: str
    Value: str


class SimpleDBAttribute(_SimpleDBAttribute, total=False):
    AlternateNameEncoding: str
    AlternateValueEncoding: str


class SimpleDBReplaceableItem(TypedDict):
    Name: str
    Attributes: List[SimpleDBReplaceableAttribute]


class _SimpleDBReplaceableAttribute(TypedDict):
    Name: str
    Value: str


class SimpleDBReplaceableAttribute(_SimpleDBReplaceableAttribute, total=False):
    Replace: bool


class SimpleDBUpdateCondition(TypedDict, total=False):
    Name: str
    Value: str
    Exists: bool


class SimpleDBDomainMetadataResult(TypedDict, total=False):
    ItemCount: int
    ItemNamesSizeBytes: int
    AttributeNameCount: int
    AttributeNamesSizeBytes: int
    AttributeValueCount: int
    AttributeValuesSizeBytes: int
    Timestamp: int


class SimpleDBGetAttributesResult(TypedDict, total=False):
    Attributes: List[SimpleDBAttribute]


class SimpleDBListDomainsResult(TypedDict, total=False):
    DomainNames: List[str]
    NextToken: str


class SimpleDBSelectResult(TypedDict, total=False):
    Items: List[SimpleDBItem]
    NextToken: str


class _SimpleDBItem(TypedDict):
    Name: str
    Attributes: List[SimpleDBAttribute]


class SimpleDBItem(_SimpleDBItem, total=False):
    AlternateNameEncoding: str


class SecretsManager(BaseClient):
    def cancel_rotate_secret(self, *,
        SecretId: str
    ) -> SecretsManagerCancelRotateSecretResponse: ...

    def create_secret(self, *,
        Name: str,
        ClientRequestToken: str = ...,
        Description: str = ...,
        KmsKeyId: str = ...,
        SecretBinary: bytes = ...,
        SecretString: str = ...,
        Tags: List[SecretsManagerTag] = ...
    ) -> SecretsManagerCreateSecretResponse: ...

    def delete_resource_policy(self, *,
        SecretId: str
    ) -> SecretsManagerDeleteResourcePolicyResponse: ...

    def delete_secret(self, *,
        SecretId: str,
        RecoveryWindowInDays: int = ...,
        ForceDeleteWithoutRecovery: bool = ...
    ) -> SecretsManagerDeleteSecretResponse: ...

    def describe_secret(self, *,
        SecretId: str
    ) -> SecretsManagerDescribeSecretResponse: ...

    def get_random_password(self, *,
        PasswordLength: int = ...,
        ExcludeCharacters: str = ...,
        ExcludeNumbers: bool = ...,
        ExcludePunctuation: bool = ...,
        ExcludeUppercase: bool = ...,
        ExcludeLowercase: bool = ...,
        IncludeSpace: bool = ...,
        RequireEachIncludedType: bool = ...
    ) -> SecretsManagerGetRandomPasswordResponse: ...

    def get_resource_policy(self, *,
        SecretId: str
    ) -> SecretsManagerGetResourcePolicyResponse: ...

    def get_secret_value(self, *,
        SecretId: str,
        VersionId: str = ...,
        VersionStage: str = ...
    ) -> SecretsManagerGetSecretValueResponse: ...

    def list_secret_version_ids(self, *,
        SecretId: str,
        MaxResults: int = ...,
        NextToken: str = ...,
        IncludeDeprecated: bool = ...
    ) -> SecretsManagerListSecretVersionIdsResponse: ...

    def list_secrets(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SecretsManagerListSecretsResponse: ...

    def put_resource_policy(self, *,
        SecretId: str,
        ResourcePolicy: str
    ) -> SecretsManagerPutResourcePolicyResponse: ...

    def put_secret_value(self, *,
        SecretId: str,
        ClientRequestToken: str = ...,
        SecretBinary: bytes = ...,
        SecretString: str = ...,
        VersionStages: List[str] = ...
    ) -> SecretsManagerPutSecretValueResponse: ...

    def restore_secret(self, *,
        SecretId: str
    ) -> SecretsManagerRestoreSecretResponse: ...

    def rotate_secret(self, *,
        SecretId: str,
        ClientRequestToken: str = ...,
        RotationLambdaARN: str = ...,
        RotationRules: SecretsManagerRotationRulesType = ...
    ) -> SecretsManagerRotateSecretResponse: ...

    def tag_resource(self, *,
        SecretId: str,
        Tags: List[SecretsManagerTag]
    ): ...

    def untag_resource(self, *,
        SecretId: str,
        TagKeys: List[str]
    ): ...

    def update_secret(self, *,
        SecretId: str,
        ClientRequestToken: str = ...,
        Description: str = ...,
        KmsKeyId: str = ...,
        SecretBinary: bytes = ...,
        SecretString: str = ...
    ) -> SecretsManagerUpdateSecretResponse: ...

    def update_secret_version_stage(self, *,
        SecretId: str,
        VersionStage: str,
        RemoveFromVersionId: str = ...,
        MoveToVersionId: str = ...
    ) -> SecretsManagerUpdateSecretVersionStageResponse: ...


class SecretsManagerCancelRotateSecretResponse(TypedDict, total=False):
    ARN: str
    Name: str
    VersionId: str


class SecretsManagerTag(TypedDict, total=False):
    Key: str
    Value: str


class SecretsManagerCreateSecretResponse(TypedDict, total=False):
    ARN: str
    Name: str
    VersionId: str


class SecretsManagerDeleteResourcePolicyResponse(TypedDict, total=False):
    ARN: str
    Name: str


class SecretsManagerDeleteSecretResponse(TypedDict, total=False):
    ARN: str
    Name: str
    DeletionDate: datetime.datetime


class SecretsManagerDescribeSecretResponse(TypedDict, total=False):
    ARN: str
    Name: str
    Description: str
    KmsKeyId: str
    RotationEnabled: bool
    RotationLambdaARN: str
    RotationRules: SecretsManagerRotationRulesType
    LastRotatedDate: datetime.datetime
    LastChangedDate: datetime.datetime
    LastAccessedDate: datetime.datetime
    DeletedDate: datetime.datetime
    Tags: List[SecretsManagerTag]
    VersionIdsToStages: Dict[str, List[str]]


class SecretsManagerRotationRulesType(TypedDict, total=False):
    AutomaticallyAfterDays: int


class SecretsManagerGetRandomPasswordResponse(TypedDict, total=False):
    RandomPassword: str


class SecretsManagerGetResourcePolicyResponse(TypedDict, total=False):
    ARN: str
    Name: str
    ResourcePolicy: str


class SecretsManagerGetSecretValueResponse(TypedDict, total=False):
    ARN: str
    Name: str
    VersionId: str
    SecretBinary: bytes
    SecretString: str
    VersionStages: List[str]
    CreatedDate: datetime.datetime


class SecretsManagerListSecretVersionIdsResponse(TypedDict, total=False):
    Versions: List[SecretsManagerSecretVersionsListEntry]
    NextToken: str
    ARN: str
    Name: str


class SecretsManagerSecretVersionsListEntry(TypedDict, total=False):
    VersionId: str
    VersionStages: List[str]
    LastAccessedDate: datetime.datetime
    CreatedDate: datetime.datetime


class SecretsManagerListSecretsResponse(TypedDict, total=False):
    SecretList: List[SecretsManagerSecretListEntry]
    NextToken: str


class SecretsManagerSecretListEntry(TypedDict, total=False):
    ARN: str
    Name: str
    Description: str
    KmsKeyId: str
    RotationEnabled: bool
    RotationLambdaARN: str
    RotationRules: SecretsManagerRotationRulesType
    LastRotatedDate: datetime.datetime
    LastChangedDate: datetime.datetime
    LastAccessedDate: datetime.datetime
    DeletedDate: datetime.datetime
    Tags: List[SecretsManagerTag]
    SecretVersionsToStages: Dict[str, List[str]]


class SecretsManagerPutResourcePolicyResponse(TypedDict, total=False):
    ARN: str
    Name: str


class SecretsManagerPutSecretValueResponse(TypedDict, total=False):
    ARN: str
    Name: str
    VersionId: str
    VersionStages: List[str]


class SecretsManagerRestoreSecretResponse(TypedDict, total=False):
    ARN: str
    Name: str


class SecretsManagerRotateSecretResponse(TypedDict, total=False):
    ARN: str
    Name: str
    VersionId: str


class SecretsManagerUpdateSecretResponse(TypedDict, total=False):
    ARN: str
    Name: str
    VersionId: str


class SecretsManagerUpdateSecretVersionStageResponse(TypedDict, total=False):
    ARN: str
    Name: str


class SecurityHub(BaseClient):
    def accept_invitation(self, *,
        MasterId: str = ...,
        InvitationId: str = ...
    ) -> SecurityHubAcceptInvitationResponse: ...

    def batch_disable_standards(self, *,
        StandardsSubscriptionArns: List[str]
    ) -> SecurityHubBatchDisableStandardsResponse: ...

    def batch_enable_standards(self, *,
        StandardsSubscriptionRequests: List[SecurityHubStandardsSubscriptionRequest]
    ) -> SecurityHubBatchEnableStandardsResponse: ...

    def batch_import_findings(self, *,
        Findings: List[SecurityHubAwsSecurityFinding]
    ) -> SecurityHubBatchImportFindingsResponse: ...

    def create_insight(self, *,
        Name: str,
        Filters: SecurityHubAwsSecurityFindingFilters,
        GroupByAttribute: str
    ) -> SecurityHubCreateInsightResponse: ...

    def create_members(self, *,
        AccountDetails: List[SecurityHubAccountDetails] = ...
    ) -> SecurityHubCreateMembersResponse: ...

    def decline_invitations(self, *,
        AccountIds: List[str] = ...
    ) -> SecurityHubDeclineInvitationsResponse: ...

    def delete_insight(self, *,
        InsightArn: str
    ) -> SecurityHubDeleteInsightResponse: ...

    def delete_invitations(self, *,
        AccountIds: List[str] = ...
    ) -> SecurityHubDeleteInvitationsResponse: ...

    def delete_members(self, *,
        AccountIds: List[str] = ...
    ) -> SecurityHubDeleteMembersResponse: ...

    def disable_import_findings_for_product(self, *,
        ProductSubscriptionArn: str
    ) -> SecurityHubDisableImportFindingsForProductResponse: ...

    def disable_security_hub(self) -> SecurityHubDisableSecurityHubResponse: ...

    def disassociate_from_master_account(self) -> SecurityHubDisassociateFromMasterAccountResponse: ...

    def disassociate_members(self, *,
        AccountIds: List[str] = ...
    ) -> SecurityHubDisassociateMembersResponse: ...

    def enable_import_findings_for_product(self, *,
        ProductArn: str
    ) -> SecurityHubEnableImportFindingsForProductResponse: ...

    def enable_security_hub(self) -> SecurityHubEnableSecurityHubResponse: ...

    def get_enabled_standards(self, *,
        StandardsSubscriptionArns: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> SecurityHubGetEnabledStandardsResponse: ...

    def get_findings(self, *,
        Filters: SecurityHubAwsSecurityFindingFilters = ...,
        SortCriteria: List[SecurityHubSortCriterion] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> SecurityHubGetFindingsResponse: ...

    def get_insight_results(self, *,
        InsightArn: str
    ) -> SecurityHubGetInsightResultsResponse: ...

    def get_insights(self, *,
        InsightArns: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> SecurityHubGetInsightsResponse: ...

    def get_invitations_count(self) -> SecurityHubGetInvitationsCountResponse: ...

    def get_master_account(self) -> SecurityHubGetMasterAccountResponse: ...

    def get_members(self, *,
        AccountIds: List[str]
    ) -> SecurityHubGetMembersResponse: ...

    def invite_members(self, *,
        AccountIds: List[str] = ...
    ) -> SecurityHubInviteMembersResponse: ...

    def list_enabled_products_for_import(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> SecurityHubListEnabledProductsForImportResponse: ...

    def list_invitations(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SecurityHubListInvitationsResponse: ...

    def list_members(self, *,
        OnlyAssociated: bool = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SecurityHubListMembersResponse: ...

    def update_findings(self, *,
        Filters: SecurityHubAwsSecurityFindingFilters,
        Note: SecurityHubNoteUpdate = ...,
        RecordState: str = ...
    ) -> SecurityHubUpdateFindingsResponse: ...

    def update_insight(self, *,
        InsightArn: str,
        Name: str = ...,
        Filters: SecurityHubAwsSecurityFindingFilters = ...,
        GroupByAttribute: str = ...
    ) -> SecurityHubUpdateInsightResponse: ...


class SecurityHubAcceptInvitationResponse(TypedDict, total=False):
    pass


class SecurityHubBatchDisableStandardsResponse(TypedDict, total=False):
    StandardsSubscriptions: List[SecurityHubStandardsSubscription]


class SecurityHubStandardsSubscription(TypedDict):
    StandardsSubscriptionArn: str
    StandardsArn: str
    StandardsInput: Dict[str, str]
    StandardsStatus: str


class _SecurityHubStandardsSubscriptionRequest(TypedDict):
    StandardsArn: str


class SecurityHubStandardsSubscriptionRequest(_SecurityHubStandardsSubscriptionRequest, total=False):
    StandardsInput: Dict[str, str]


class SecurityHubBatchEnableStandardsResponse(TypedDict, total=False):
    StandardsSubscriptions: List[SecurityHubStandardsSubscription]


class _SecurityHubAwsSecurityFinding(TypedDict):
    SchemaVersion: str
    Id: str
    ProductArn: str
    GeneratorId: str
    AwsAccountId: str
    Types: List[str]
    CreatedAt: str
    UpdatedAt: str
    Severity: SecurityHubSeverity
    Resources: List[SecurityHubResource]


class SecurityHubAwsSecurityFinding(_SecurityHubAwsSecurityFinding, total=False):
    FirstObservedAt: str
    LastObservedAt: str
    Confidence: int
    Criticality: int
    Title: str
    Description: str
    Remediation: SecurityHubRemediation
    SourceUrl: str
    ProductFields: Dict[str, str]
    UserDefinedFields: Dict[str, str]
    Malware: List[SecurityHubMalware]
    Network: SecurityHubNetwork
    Process: SecurityHubProcessDetails
    ThreatIntelIndicators: List[SecurityHubThreatIntelIndicator]
    Compliance: SecurityHubCompliance
    VerificationState: str
    WorkflowState: str
    RecordState: str
    RelatedFindings: List[SecurityHubRelatedFinding]
    Note: SecurityHubNote


class _SecurityHubSeverity(TypedDict):
    Normalized: int


class SecurityHubSeverity(_SecurityHubSeverity, total=False):
    Product: float


class SecurityHubRemediation(TypedDict, total=False):
    Recommendation: SecurityHubRecommendation


class SecurityHubRecommendation(TypedDict, total=False):
    Text: str
    Url: str


class _SecurityHubMalware(TypedDict):
    Name: str


class SecurityHubMalware(_SecurityHubMalware, total=False):
    Type: str
    Path: str
    State: str


class SecurityHubNetwork(TypedDict, total=False):
    Direction: str
    Protocol: str
    SourceIpV4: str
    SourceIpV6: str
    SourcePort: int
    SourceDomain: str
    SourceMac: str
    DestinationIpV4: str
    DestinationIpV6: str
    DestinationPort: int
    DestinationDomain: str


class SecurityHubProcessDetails(TypedDict, total=False):
    Name: str
    Path: str
    Pid: int
    ParentPid: int
    LaunchedAt: str
    TerminatedAt: str


class SecurityHubThreatIntelIndicator(TypedDict, total=False):
    Type: str
    Value: str
    Category: str
    LastObservedAt: str
    Source: str
    SourceUrl: str


class _SecurityHubResource(TypedDict):
    Type: str
    Id: str


class SecurityHubResource(_SecurityHubResource, total=False):
    Partition: str
    Region: str
    Tags: Dict[str, str]
    Details: SecurityHubResourceDetails


class SecurityHubResourceDetails(TypedDict, total=False):
    AwsEc2Instance: SecurityHubAwsEc2InstanceDetails
    AwsS3Bucket: SecurityHubAwsS3BucketDetails
    AwsIamAccessKey: SecurityHubAwsIamAccessKeyDetails
    Container: SecurityHubContainerDetails
    Other: Dict[str, str]


class SecurityHubAwsEc2InstanceDetails(TypedDict, total=False):
    Type: str
    ImageId: str
    IpV4Addresses: List[str]
    IpV6Addresses: List[str]
    KeyName: str
    IamInstanceProfileArn: str
    VpcId: str
    SubnetId: str
    LaunchedAt: str


class SecurityHubAwsS3BucketDetails(TypedDict, total=False):
    OwnerId: str
    OwnerName: str


class SecurityHubAwsIamAccessKeyDetails(TypedDict, total=False):
    UserName: str
    Status: str
    CreatedAt: str


class SecurityHubContainerDetails(TypedDict, total=False):
    Name: str
    ImageId: str
    ImageName: str
    LaunchedAt: str


class SecurityHubCompliance(TypedDict, total=False):
    Status: str


class SecurityHubRelatedFinding(TypedDict):
    ProductArn: str
    Id: str


class SecurityHubNote(TypedDict):
    Text: str
    UpdatedBy: str
    UpdatedAt: str


class _SecurityHubBatchImportFindingsResponse(TypedDict):
    FailedCount: int
    SuccessCount: int


class SecurityHubBatchImportFindingsResponse(_SecurityHubBatchImportFindingsResponse, total=False):
    FailedFindings: List[SecurityHubImportFindingsError]


class SecurityHubImportFindingsError(TypedDict):
    Id: str
    ErrorCode: str
    ErrorMessage: str


class SecurityHubAwsSecurityFindingFilters(TypedDict, total=False):
    ProductArn: List[SecurityHubStringFilter]
    AwsAccountId: List[SecurityHubStringFilter]
    Id: List[SecurityHubStringFilter]
    GeneratorId: List[SecurityHubStringFilter]
    Type: List[SecurityHubStringFilter]
    FirstObservedAt: List[SecurityHubDateFilter]
    LastObservedAt: List[SecurityHubDateFilter]
    CreatedAt: List[SecurityHubDateFilter]
    UpdatedAt: List[SecurityHubDateFilter]
    SeverityProduct: List[SecurityHubNumberFilter]
    SeverityNormalized: List[SecurityHubNumberFilter]
    SeverityLabel: List[SecurityHubStringFilter]
    Confidence: List[SecurityHubNumberFilter]
    Criticality: List[SecurityHubNumberFilter]
    Title: List[SecurityHubStringFilter]
    Description: List[SecurityHubStringFilter]
    RecommendationText: List[SecurityHubStringFilter]
    SourceUrl: List[SecurityHubStringFilter]
    ProductFields: List[SecurityHubMapFilter]
    ProductName: List[SecurityHubStringFilter]
    CompanyName: List[SecurityHubStringFilter]
    UserDefinedFields: List[SecurityHubMapFilter]
    MalwareName: List[SecurityHubStringFilter]
    MalwareType: List[SecurityHubStringFilter]
    MalwarePath: List[SecurityHubStringFilter]
    MalwareState: List[SecurityHubStringFilter]
    NetworkDirection: List[SecurityHubStringFilter]
    NetworkProtocol: List[SecurityHubStringFilter]
    NetworkSourceIpV4: List[SecurityHubIpFilter]
    NetworkSourceIpV6: List[SecurityHubIpFilter]
    NetworkSourcePort: List[SecurityHubNumberFilter]
    NetworkSourceDomain: List[SecurityHubStringFilter]
    NetworkSourceMac: List[SecurityHubStringFilter]
    NetworkDestinationIpV4: List[SecurityHubIpFilter]
    NetworkDestinationIpV6: List[SecurityHubIpFilter]
    NetworkDestinationPort: List[SecurityHubNumberFilter]
    NetworkDestinationDomain: List[SecurityHubStringFilter]
    ProcessName: List[SecurityHubStringFilter]
    ProcessPath: List[SecurityHubStringFilter]
    ProcessPid: List[SecurityHubNumberFilter]
    ProcessParentPid: List[SecurityHubNumberFilter]
    ProcessLaunchedAt: List[SecurityHubDateFilter]
    ProcessTerminatedAt: List[SecurityHubDateFilter]
    ThreatIntelIndicatorType: List[SecurityHubStringFilter]
    ThreatIntelIndicatorValue: List[SecurityHubStringFilter]
    ThreatIntelIndicatorCategory: List[SecurityHubStringFilter]
    ThreatIntelIndicatorLastObservedAt: List[SecurityHubDateFilter]
    ThreatIntelIndicatorSource: List[SecurityHubStringFilter]
    ThreatIntelIndicatorSourceUrl: List[SecurityHubStringFilter]
    ResourceType: List[SecurityHubStringFilter]
    ResourceId: List[SecurityHubStringFilter]
    ResourcePartition: List[SecurityHubStringFilter]
    ResourceRegion: List[SecurityHubStringFilter]
    ResourceTags: List[SecurityHubMapFilter]
    ResourceAwsEc2InstanceType: List[SecurityHubStringFilter]
    ResourceAwsEc2InstanceImageId: List[SecurityHubStringFilter]
    ResourceAwsEc2InstanceIpV4Addresses: List[SecurityHubIpFilter]
    ResourceAwsEc2InstanceIpV6Addresses: List[SecurityHubIpFilter]
    ResourceAwsEc2InstanceKeyName: List[SecurityHubStringFilter]
    ResourceAwsEc2InstanceIamInstanceProfileArn: List[SecurityHubStringFilter]
    ResourceAwsEc2InstanceVpcId: List[SecurityHubStringFilter]
    ResourceAwsEc2InstanceSubnetId: List[SecurityHubStringFilter]
    ResourceAwsEc2InstanceLaunchedAt: List[SecurityHubDateFilter]
    ResourceAwsS3BucketOwnerId: List[SecurityHubStringFilter]
    ResourceAwsS3BucketOwnerName: List[SecurityHubStringFilter]
    ResourceAwsIamAccessKeyUserName: List[SecurityHubStringFilter]
    ResourceAwsIamAccessKeyStatus: List[SecurityHubStringFilter]
    ResourceAwsIamAccessKeyCreatedAt: List[SecurityHubDateFilter]
    ResourceContainerName: List[SecurityHubStringFilter]
    ResourceContainerImageId: List[SecurityHubStringFilter]
    ResourceContainerImageName: List[SecurityHubStringFilter]
    ResourceContainerLaunchedAt: List[SecurityHubDateFilter]
    ResourceDetailsOther: List[SecurityHubMapFilter]
    ComplianceStatus: List[SecurityHubStringFilter]
    VerificationState: List[SecurityHubStringFilter]
    WorkflowState: List[SecurityHubStringFilter]
    RecordState: List[SecurityHubStringFilter]
    RelatedFindingsProductArn: List[SecurityHubStringFilter]
    RelatedFindingsId: List[SecurityHubStringFilter]
    NoteText: List[SecurityHubStringFilter]
    NoteUpdatedAt: List[SecurityHubDateFilter]
    NoteUpdatedBy: List[SecurityHubStringFilter]
    Keyword: List[SecurityHubKeywordFilter]


class SecurityHubStringFilter(TypedDict, total=False):
    Value: str
    Comparison: str


class SecurityHubDateFilter(TypedDict, total=False):
    Start: str
    End: str
    DateRange: SecurityHubDateRange


class SecurityHubDateRange(TypedDict, total=False):
    Value: int
    Unit: str


class SecurityHubNumberFilter(TypedDict, total=False):
    Gte: float
    Lte: float
    Eq: float


class SecurityHubMapFilter(TypedDict, total=False):
    Key: str
    Value: str
    Comparison: str


class SecurityHubIpFilter(TypedDict, total=False):
    Cidr: str


class SecurityHubKeywordFilter(TypedDict, total=False):
    Value: str


class SecurityHubCreateInsightResponse(TypedDict):
    InsightArn: str


class SecurityHubAccountDetails(TypedDict, total=False):
    AccountId: str
    Email: str


class SecurityHubCreateMembersResponse(TypedDict, total=False):
    UnprocessedAccounts: List[SecurityHubResult]


class SecurityHubResult(TypedDict, total=False):
    AccountId: str
    ProcessingResult: str


class SecurityHubDeclineInvitationsResponse(TypedDict, total=False):
    UnprocessedAccounts: List[SecurityHubResult]


class SecurityHubDeleteInsightResponse(TypedDict):
    InsightArn: str


class SecurityHubDeleteInvitationsResponse(TypedDict, total=False):
    UnprocessedAccounts: List[SecurityHubResult]


class SecurityHubDeleteMembersResponse(TypedDict, total=False):
    UnprocessedAccounts: List[SecurityHubResult]


class SecurityHubDisableImportFindingsForProductResponse(TypedDict, total=False):
    pass


class SecurityHubDisableSecurityHubResponse(TypedDict, total=False):
    pass


class SecurityHubDisassociateFromMasterAccountResponse(TypedDict, total=False):
    pass


class SecurityHubDisassociateMembersResponse(TypedDict, total=False):
    pass


class SecurityHubEnableImportFindingsForProductResponse(TypedDict, total=False):
    ProductSubscriptionArn: str


class SecurityHubEnableSecurityHubResponse(TypedDict, total=False):
    pass


class SecurityHubGetEnabledStandardsResponse(TypedDict, total=False):
    StandardsSubscriptions: List[SecurityHubStandardsSubscription]
    NextToken: str


class SecurityHubSortCriterion(TypedDict, total=False):
    Field: str
    SortOrder: str


class _SecurityHubGetFindingsResponse(TypedDict):
    Findings: List[SecurityHubAwsSecurityFinding]


class SecurityHubGetFindingsResponse(_SecurityHubGetFindingsResponse, total=False):
    NextToken: str


class SecurityHubGetInsightResultsResponse(TypedDict):
    InsightResults: SecurityHubInsightResults


class SecurityHubInsightResults(TypedDict):
    InsightArn: str
    GroupByAttribute: str
    ResultValues: List[SecurityHubInsightResultValue]


class SecurityHubInsightResultValue(TypedDict):
    GroupByAttributeValue: str
    Count: int


class _SecurityHubGetInsightsResponse(TypedDict):
    Insights: List[SecurityHubInsight]


class SecurityHubGetInsightsResponse(_SecurityHubGetInsightsResponse, total=False):
    NextToken: str


class SecurityHubInsight(TypedDict):
    InsightArn: str
    Name: str
    Filters: SecurityHubAwsSecurityFindingFilters
    GroupByAttribute: str


class SecurityHubGetInvitationsCountResponse(TypedDict, total=False):
    InvitationsCount: int


class SecurityHubGetMasterAccountResponse(TypedDict, total=False):
    Master: SecurityHubInvitation


class SecurityHubInvitation(TypedDict, total=False):
    AccountId: str
    InvitationId: str
    InvitedAt: datetime.datetime
    MemberStatus: str


class SecurityHubGetMembersResponse(TypedDict, total=False):
    Members: List[SecurityHubMember]
    UnprocessedAccounts: List[SecurityHubResult]


class SecurityHubMember(TypedDict, total=False):
    AccountId: str
    Email: str
    MasterId: str
    MemberStatus: str
    InvitedAt: datetime.datetime
    UpdatedAt: datetime.datetime


class SecurityHubInviteMembersResponse(TypedDict, total=False):
    UnprocessedAccounts: List[SecurityHubResult]


class SecurityHubListEnabledProductsForImportResponse(TypedDict, total=False):
    ProductSubscriptions: List[str]
    NextToken: str


class SecurityHubListInvitationsResponse(TypedDict, total=False):
    Invitations: List[SecurityHubInvitation]
    NextToken: str


class SecurityHubListMembersResponse(TypedDict, total=False):
    Members: List[SecurityHubMember]
    NextToken: str


class SecurityHubNoteUpdate(TypedDict):
    Text: str
    UpdatedBy: str


class SecurityHubUpdateFindingsResponse(TypedDict, total=False):
    pass


class SecurityHubUpdateInsightResponse(TypedDict, total=False):
    pass


class ServerlessApplicationRepository(BaseClient):
    def create_application(self, *,
        Author: str,
        Description: str,
        Name: str,
        HomePageUrl: str = ...,
        Labels: List[str] = ...,
        LicenseBody: str = ...,
        LicenseUrl: str = ...,
        ReadmeBody: str = ...,
        ReadmeUrl: str = ...,
        SemanticVersion: str = ...,
        SourceCodeArchiveUrl: str = ...,
        SourceCodeUrl: str = ...,
        SpdxLicenseId: str = ...,
        TemplateBody: str = ...,
        TemplateUrl: str = ...
    ) -> ServerlessApplicationRepositoryCreateApplicationResponse: ...

    def create_application_version(self, *,
        ApplicationId: str,
        SemanticVersion: str,
        SourceCodeArchiveUrl: str = ...,
        SourceCodeUrl: str = ...,
        TemplateBody: str = ...,
        TemplateUrl: str = ...
    ) -> ServerlessApplicationRepositoryCreateApplicationVersionResponse: ...

    def create_cloud_formation_change_set(self, *,
        ApplicationId: str,
        StackName: str,
        Capabilities: List[str] = ...,
        ChangeSetName: str = ...,
        ClientToken: str = ...,
        Description: str = ...,
        NotificationArns: List[str] = ...,
        ParameterOverrides: List[ServerlessApplicationRepositoryParameterValue] = ...,
        ResourceTypes: List[str] = ...,
        RollbackConfiguration: ServerlessApplicationRepositoryRollbackConfiguration = ...,
        SemanticVersion: str = ...,
        Tags: List[ServerlessApplicationRepositoryTag] = ...,
        TemplateId: str = ...
    ) -> ServerlessApplicationRepositoryCreateCloudFormationChangeSetResponse: ...

    def create_cloud_formation_template(self, *,
        ApplicationId: str,
        SemanticVersion: str = ...
    ) -> ServerlessApplicationRepositoryCreateCloudFormationTemplateResponse: ...

    def delete_application(self, *,
        ApplicationId: str
    ): ...

    def get_application(self, *,
        ApplicationId: str,
        SemanticVersion: str = ...
    ) -> ServerlessApplicationRepositoryGetApplicationResponse: ...

    def get_application_policy(self, *,
        ApplicationId: str
    ) -> ServerlessApplicationRepositoryGetApplicationPolicyResponse: ...

    def get_cloud_formation_template(self, *,
        ApplicationId: str,
        TemplateId: str
    ) -> ServerlessApplicationRepositoryGetCloudFormationTemplateResponse: ...

    def list_application_dependencies(self, *,
        ApplicationId: str,
        MaxItems: int = ...,
        NextToken: str = ...,
        SemanticVersion: str = ...
    ) -> ServerlessApplicationRepositoryListApplicationDependenciesResponse: ...

    def list_application_versions(self, *,
        ApplicationId: str,
        MaxItems: int = ...,
        NextToken: str = ...
    ) -> ServerlessApplicationRepositoryListApplicationVersionsResponse: ...

    def list_applications(self, *,
        MaxItems: int = ...,
        NextToken: str = ...
    ) -> ServerlessApplicationRepositoryListApplicationsResponse: ...

    def put_application_policy(self, *,
        ApplicationId: str,
        Statements: List[ServerlessApplicationRepositoryApplicationPolicyStatement]
    ) -> ServerlessApplicationRepositoryPutApplicationPolicyResponse: ...

    def update_application(self, *,
        ApplicationId: str,
        Author: str = ...,
        Description: str = ...,
        HomePageUrl: str = ...,
        Labels: List[str] = ...,
        ReadmeBody: str = ...,
        ReadmeUrl: str = ...
    ) -> ServerlessApplicationRepositoryUpdateApplicationResponse: ...


class ServerlessApplicationRepositoryCreateApplicationResponse(TypedDict, total=False):
    ApplicationId: str
    Author: str
    CreationTime: str
    Description: str
    HomePageUrl: str
    Labels: List[str]
    LicenseUrl: str
    Name: str
    ReadmeUrl: str
    SpdxLicenseId: str
    Version: ServerlessApplicationRepositoryVersion


class _ServerlessApplicationRepositoryVersion(TypedDict):
    ApplicationId: str
    CreationTime: str
    ParameterDefinitions: List[ServerlessApplicationRepositoryParameterDefinition]
    RequiredCapabilities: List[str]
    ResourcesSupported: bool
    SemanticVersion: str
    TemplateUrl: str


class ServerlessApplicationRepositoryVersion(_ServerlessApplicationRepositoryVersion, total=False):
    SourceCodeArchiveUrl: str
    SourceCodeUrl: str


class _ServerlessApplicationRepositoryParameterDefinition(TypedDict):
    Name: str
    ReferencedByResources: List[str]


class ServerlessApplicationRepositoryParameterDefinition(_ServerlessApplicationRepositoryParameterDefinition, total=False):
    AllowedPattern: str
    AllowedValues: List[str]
    ConstraintDescription: str
    DefaultValue: str
    Description: str
    MaxLength: int
    MaxValue: int
    MinLength: int
    MinValue: int
    NoEcho: bool
    Type: str


class ServerlessApplicationRepositoryCreateApplicationVersionResponse(TypedDict, total=False):
    ApplicationId: str
    CreationTime: str
    ParameterDefinitions: List[ServerlessApplicationRepositoryParameterDefinition]
    RequiredCapabilities: List[str]
    ResourcesSupported: bool
    SemanticVersion: str
    SourceCodeArchiveUrl: str
    SourceCodeUrl: str
    TemplateUrl: str


class ServerlessApplicationRepositoryParameterValue(TypedDict):
    Name: str
    Value: str


class ServerlessApplicationRepositoryRollbackConfiguration(TypedDict, total=False):
    MonitoringTimeInMinutes: int
    RollbackTriggers: List[ServerlessApplicationRepositoryRollbackTrigger]


class ServerlessApplicationRepositoryRollbackTrigger(TypedDict):
    Arn: str
    Type: str


class ServerlessApplicationRepositoryTag(TypedDict):
    Key: str
    Value: str


class ServerlessApplicationRepositoryCreateCloudFormationChangeSetResponse(TypedDict, total=False):
    ApplicationId: str
    ChangeSetId: str
    SemanticVersion: str
    StackId: str


class ServerlessApplicationRepositoryCreateCloudFormationTemplateResponse(TypedDict, total=False):
    ApplicationId: str
    CreationTime: str
    ExpirationTime: str
    SemanticVersion: str
    Status: str
    TemplateId: str
    TemplateUrl: str


class ServerlessApplicationRepositoryGetApplicationResponse(TypedDict, total=False):
    ApplicationId: str
    Author: str
    CreationTime: str
    Description: str
    HomePageUrl: str
    Labels: List[str]
    LicenseUrl: str
    Name: str
    ReadmeUrl: str
    SpdxLicenseId: str
    Version: ServerlessApplicationRepositoryVersion


class ServerlessApplicationRepositoryGetApplicationPolicyResponse(TypedDict, total=False):
    Statements: List[ServerlessApplicationRepositoryApplicationPolicyStatement]


class _ServerlessApplicationRepositoryApplicationPolicyStatement(TypedDict):
    Actions: List[str]
    Principals: List[str]


class ServerlessApplicationRepositoryApplicationPolicyStatement(_ServerlessApplicationRepositoryApplicationPolicyStatement, total=False):
    StatementId: str


class ServerlessApplicationRepositoryGetCloudFormationTemplateResponse(TypedDict, total=False):
    ApplicationId: str
    CreationTime: str
    ExpirationTime: str
    SemanticVersion: str
    Status: str
    TemplateId: str
    TemplateUrl: str


class ServerlessApplicationRepositoryListApplicationDependenciesResponse(TypedDict, total=False):
    Dependencies: List[ServerlessApplicationRepositoryApplicationDependencySummary]
    NextToken: str


class ServerlessApplicationRepositoryApplicationDependencySummary(TypedDict):
    ApplicationId: str
    SemanticVersion: str


class ServerlessApplicationRepositoryListApplicationVersionsResponse(TypedDict, total=False):
    NextToken: str
    Versions: List[ServerlessApplicationRepositoryVersionSummary]


class _ServerlessApplicationRepositoryVersionSummary(TypedDict):
    ApplicationId: str
    CreationTime: str
    SemanticVersion: str


class ServerlessApplicationRepositoryVersionSummary(_ServerlessApplicationRepositoryVersionSummary, total=False):
    SourceCodeUrl: str


class ServerlessApplicationRepositoryListApplicationsResponse(TypedDict, total=False):
    Applications: List[ServerlessApplicationRepositoryApplicationSummary]
    NextToken: str


class _ServerlessApplicationRepositoryApplicationSummary(TypedDict):
    ApplicationId: str
    Author: str
    Description: str
    Name: str


class ServerlessApplicationRepositoryApplicationSummary(_ServerlessApplicationRepositoryApplicationSummary, total=False):
    CreationTime: str
    HomePageUrl: str
    Labels: List[str]
    SpdxLicenseId: str


class ServerlessApplicationRepositoryPutApplicationPolicyResponse(TypedDict, total=False):
    Statements: List[ServerlessApplicationRepositoryApplicationPolicyStatement]


class ServerlessApplicationRepositoryUpdateApplicationResponse(TypedDict, total=False):
    ApplicationId: str
    Author: str
    CreationTime: str
    Description: str
    HomePageUrl: str
    Labels: List[str]
    LicenseUrl: str
    Name: str
    ReadmeUrl: str
    SpdxLicenseId: str
    Version: ServerlessApplicationRepositoryVersion


class ServiceCatalog(BaseClient):
    def accept_portfolio_share(self, *,
        PortfolioId: str,
        AcceptLanguage: str = ...,
        PortfolioShareType: str = ...
    ) -> ServiceCatalogAcceptPortfolioShareOutput: ...

    def associate_budget_with_resource(self, *,
        BudgetName: str,
        ResourceId: str
    ) -> ServiceCatalogAssociateBudgetWithResourceOutput: ...

    def associate_principal_with_portfolio(self, *,
        PortfolioId: str,
        PrincipalARN: str,
        PrincipalType: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogAssociatePrincipalWithPortfolioOutput: ...

    def associate_product_with_portfolio(self, *,
        ProductId: str,
        PortfolioId: str,
        AcceptLanguage: str = ...,
        SourcePortfolioId: str = ...
    ) -> ServiceCatalogAssociateProductWithPortfolioOutput: ...

    def associate_service_action_with_provisioning_artifact(self, *,
        ProductId: str,
        ProvisioningArtifactId: str,
        ServiceActionId: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogAssociateServiceActionWithProvisioningArtifactOutput: ...

    def associate_tag_option_with_resource(self, *,
        ResourceId: str,
        TagOptionId: str
    ) -> ServiceCatalogAssociateTagOptionWithResourceOutput: ...

    def batch_associate_service_action_with_provisioning_artifact(self, *,
        ServiceActionAssociations: List[ServiceCatalogServiceActionAssociation],
        AcceptLanguage: str = ...
    ) -> ServiceCatalogBatchAssociateServiceActionWithProvisioningArtifactOutput: ...

    def batch_disassociate_service_action_from_provisioning_artifact(self, *,
        ServiceActionAssociations: List[ServiceCatalogServiceActionAssociation],
        AcceptLanguage: str = ...
    ) -> ServiceCatalogBatchDisassociateServiceActionFromProvisioningArtifactOutput: ...

    def copy_product(self, *,
        SourceProductArn: str,
        IdempotencyToken: str,
        AcceptLanguage: str = ...,
        TargetProductId: str = ...,
        TargetProductName: str = ...,
        SourceProvisioningArtifactIdentifiers: List[Dict[str, str]] = ...,
        CopyOptions: List[str] = ...
    ) -> ServiceCatalogCopyProductOutput: ...

    def create_constraint(self, *,
        PortfolioId: str,
        ProductId: str,
        Parameters: str,
        Type: str,
        IdempotencyToken: str,
        AcceptLanguage: str = ...,
        Description: str = ...
    ) -> ServiceCatalogCreateConstraintOutput: ...

    def create_portfolio(self, *,
        DisplayName: str,
        ProviderName: str,
        IdempotencyToken: str,
        AcceptLanguage: str = ...,
        Description: str = ...,
        Tags: List[ServiceCatalogTag] = ...
    ) -> ServiceCatalogCreatePortfolioOutput: ...

    def create_portfolio_share(self, *,
        PortfolioId: str,
        AcceptLanguage: str = ...,
        AccountId: str = ...,
        OrganizationNode: ServiceCatalogOrganizationNode = ...
    ) -> ServiceCatalogCreatePortfolioShareOutput: ...

    def create_product(self, *,
        Name: str,
        Owner: str,
        ProductType: str,
        ProvisioningArtifactParameters: ServiceCatalogProvisioningArtifactProperties,
        IdempotencyToken: str,
        AcceptLanguage: str = ...,
        Description: str = ...,
        Distributor: str = ...,
        SupportDescription: str = ...,
        SupportEmail: str = ...,
        SupportUrl: str = ...,
        Tags: List[ServiceCatalogTag] = ...
    ) -> ServiceCatalogCreateProductOutput: ...

    def create_provisioned_product_plan(self, *,
        PlanName: str,
        PlanType: str,
        ProductId: str,
        ProvisionedProductName: str,
        ProvisioningArtifactId: str,
        IdempotencyToken: str,
        AcceptLanguage: str = ...,
        NotificationArns: List[str] = ...,
        PathId: str = ...,
        ProvisioningParameters: List[ServiceCatalogUpdateProvisioningParameter] = ...,
        Tags: List[ServiceCatalogTag] = ...
    ) -> ServiceCatalogCreateProvisionedProductPlanOutput: ...

    def create_provisioning_artifact(self, *,
        ProductId: str,
        Parameters: ServiceCatalogProvisioningArtifactProperties,
        IdempotencyToken: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogCreateProvisioningArtifactOutput: ...

    def create_service_action(self, *,
        Name: str,
        DefinitionType: str,
        Definition: Dict[str, str],
        IdempotencyToken: str,
        Description: str = ...,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogCreateServiceActionOutput: ...

    def create_tag_option(self, *,
        Key: str,
        Value: str
    ) -> ServiceCatalogCreateTagOptionOutput: ...

    def delete_constraint(self, *,
        Id: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDeleteConstraintOutput: ...

    def delete_portfolio(self, *,
        Id: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDeletePortfolioOutput: ...

    def delete_portfolio_share(self, *,
        PortfolioId: str,
        AcceptLanguage: str = ...,
        AccountId: str = ...,
        OrganizationNode: ServiceCatalogOrganizationNode = ...
    ) -> ServiceCatalogDeletePortfolioShareOutput: ...

    def delete_product(self, *,
        Id: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDeleteProductOutput: ...

    def delete_provisioned_product_plan(self, *,
        PlanId: str,
        AcceptLanguage: str = ...,
        IgnoreErrors: bool = ...
    ) -> ServiceCatalogDeleteProvisionedProductPlanOutput: ...

    def delete_provisioning_artifact(self, *,
        ProductId: str,
        ProvisioningArtifactId: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDeleteProvisioningArtifactOutput: ...

    def delete_service_action(self, *,
        Id: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDeleteServiceActionOutput: ...

    def delete_tag_option(self, *,
        Id: str
    ) -> ServiceCatalogDeleteTagOptionOutput: ...

    def describe_constraint(self, *,
        Id: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDescribeConstraintOutput: ...

    def describe_copy_product_status(self, *,
        CopyProductToken: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDescribeCopyProductStatusOutput: ...

    def describe_portfolio(self, *,
        Id: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDescribePortfolioOutput: ...

    def describe_portfolio_share_status(self, *,
        PortfolioShareToken: str
    ) -> ServiceCatalogDescribePortfolioShareStatusOutput: ...

    def describe_product(self, *,
        Id: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDescribeProductOutput: ...

    def describe_product_as_admin(self, *,
        Id: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDescribeProductAsAdminOutput: ...

    def describe_product_view(self, *,
        Id: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDescribeProductViewOutput: ...

    def describe_provisioned_product(self, *,
        Id: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDescribeProvisionedProductOutput: ...

    def describe_provisioned_product_plan(self, *,
        PlanId: str,
        AcceptLanguage: str = ...,
        PageSize: int = ...,
        PageToken: str = ...
    ) -> ServiceCatalogDescribeProvisionedProductPlanOutput: ...

    def describe_provisioning_artifact(self, *,
        ProvisioningArtifactId: str,
        ProductId: str,
        AcceptLanguage: str = ...,
        Verbose: bool = ...
    ) -> ServiceCatalogDescribeProvisioningArtifactOutput: ...

    def describe_provisioning_parameters(self, *,
        ProductId: str,
        ProvisioningArtifactId: str,
        AcceptLanguage: str = ...,
        PathId: str = ...
    ) -> ServiceCatalogDescribeProvisioningParametersOutput: ...

    def describe_record(self, *,
        Id: str,
        AcceptLanguage: str = ...,
        PageToken: str = ...,
        PageSize: int = ...
    ) -> ServiceCatalogDescribeRecordOutput: ...

    def describe_service_action(self, *,
        Id: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDescribeServiceActionOutput: ...

    def describe_tag_option(self, *,
        Id: str
    ) -> ServiceCatalogDescribeTagOptionOutput: ...

    def disable_aws_organizations_access(self) -> ServiceCatalogDisableAWSOrganizationsAccessOutput: ...

    def disassociate_budget_from_resource(self, *,
        BudgetName: str,
        ResourceId: str
    ) -> ServiceCatalogDisassociateBudgetFromResourceOutput: ...

    def disassociate_principal_from_portfolio(self, *,
        PortfolioId: str,
        PrincipalARN: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDisassociatePrincipalFromPortfolioOutput: ...

    def disassociate_product_from_portfolio(self, *,
        ProductId: str,
        PortfolioId: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDisassociateProductFromPortfolioOutput: ...

    def disassociate_service_action_from_provisioning_artifact(self, *,
        ProductId: str,
        ProvisioningArtifactId: str,
        ServiceActionId: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogDisassociateServiceActionFromProvisioningArtifactOutput: ...

    def disassociate_tag_option_from_resource(self, *,
        ResourceId: str,
        TagOptionId: str
    ) -> ServiceCatalogDisassociateTagOptionFromResourceOutput: ...

    def enable_aws_organizations_access(self) -> ServiceCatalogEnableAWSOrganizationsAccessOutput: ...

    def execute_provisioned_product_plan(self, *,
        PlanId: str,
        IdempotencyToken: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogExecuteProvisionedProductPlanOutput: ...

    def execute_provisioned_product_service_action(self, *,
        ProvisionedProductId: str,
        ServiceActionId: str,
        ExecuteToken: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogExecuteProvisionedProductServiceActionOutput: ...

    def get_aws_organizations_access_status(self) -> ServiceCatalogGetAWSOrganizationsAccessStatusOutput: ...

    def list_accepted_portfolio_shares(self, *,
        AcceptLanguage: str = ...,
        PageToken: str = ...,
        PageSize: int = ...,
        PortfolioShareType: str = ...
    ) -> ServiceCatalogListAcceptedPortfolioSharesOutput: ...

    def list_budgets_for_resource(self, *,
        ResourceId: str,
        AcceptLanguage: str = ...,
        PageSize: int = ...,
        PageToken: str = ...
    ) -> ServiceCatalogListBudgetsForResourceOutput: ...

    def list_constraints_for_portfolio(self, *,
        PortfolioId: str,
        AcceptLanguage: str = ...,
        ProductId: str = ...,
        PageSize: int = ...,
        PageToken: str = ...
    ) -> ServiceCatalogListConstraintsForPortfolioOutput: ...

    def list_launch_paths(self, *,
        ProductId: str,
        AcceptLanguage: str = ...,
        PageSize: int = ...,
        PageToken: str = ...
    ) -> ServiceCatalogListLaunchPathsOutput: ...

    def list_organization_portfolio_access(self, *,
        PortfolioId: str,
        OrganizationNodeType: str,
        AcceptLanguage: str = ...,
        PageToken: str = ...,
        PageSize: int = ...
    ) -> ServiceCatalogListOrganizationPortfolioAccessOutput: ...

    def list_portfolio_access(self, *,
        PortfolioId: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogListPortfolioAccessOutput: ...

    def list_portfolios(self, *,
        AcceptLanguage: str = ...,
        PageToken: str = ...,
        PageSize: int = ...
    ) -> ServiceCatalogListPortfoliosOutput: ...

    def list_portfolios_for_product(self, *,
        ProductId: str,
        AcceptLanguage: str = ...,
        PageToken: str = ...,
        PageSize: int = ...
    ) -> ServiceCatalogListPortfoliosForProductOutput: ...

    def list_principals_for_portfolio(self, *,
        PortfolioId: str,
        AcceptLanguage: str = ...,
        PageSize: int = ...,
        PageToken: str = ...
    ) -> ServiceCatalogListPrincipalsForPortfolioOutput: ...

    def list_provisioned_product_plans(self, *,
        AcceptLanguage: str = ...,
        ProvisionProductId: str = ...,
        PageSize: int = ...,
        PageToken: str = ...,
        AccessLevelFilter: ServiceCatalogAccessLevelFilter = ...
    ) -> ServiceCatalogListProvisionedProductPlansOutput: ...

    def list_provisioning_artifacts(self, *,
        ProductId: str,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogListProvisioningArtifactsOutput: ...

    def list_provisioning_artifacts_for_service_action(self, *,
        ServiceActionId: str,
        PageSize: int = ...,
        PageToken: str = ...,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogListProvisioningArtifactsForServiceActionOutput: ...

    def list_record_history(self, *,
        AcceptLanguage: str = ...,
        AccessLevelFilter: ServiceCatalogAccessLevelFilter = ...,
        SearchFilter: ServiceCatalogListRecordHistorySearchFilter = ...,
        PageSize: int = ...,
        PageToken: str = ...
    ) -> ServiceCatalogListRecordHistoryOutput: ...

    def list_resources_for_tag_option(self, *,
        TagOptionId: str,
        ResourceType: str = ...,
        PageSize: int = ...,
        PageToken: str = ...
    ) -> ServiceCatalogListResourcesForTagOptionOutput: ...

    def list_service_actions(self, *,
        AcceptLanguage: str = ...,
        PageSize: int = ...,
        PageToken: str = ...
    ) -> ServiceCatalogListServiceActionsOutput: ...

    def list_service_actions_for_provisioning_artifact(self, *,
        ProductId: str,
        ProvisioningArtifactId: str,
        PageSize: int = ...,
        PageToken: str = ...,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogListServiceActionsForProvisioningArtifactOutput: ...

    def list_tag_options(self, *,
        Filters: ServiceCatalogListTagOptionsFilters = ...,
        PageSize: int = ...,
        PageToken: str = ...
    ) -> ServiceCatalogListTagOptionsOutput: ...

    def provision_product(self, *,
        ProductId: str,
        ProvisioningArtifactId: str,
        ProvisionedProductName: str,
        ProvisionToken: str,
        AcceptLanguage: str = ...,
        PathId: str = ...,
        ProvisioningParameters: List[ServiceCatalogProvisioningParameter] = ...,
        ProvisioningPreferences: ServiceCatalogProvisioningPreferences = ...,
        Tags: List[ServiceCatalogTag] = ...,
        NotificationArns: List[str] = ...
    ) -> ServiceCatalogProvisionProductOutput: ...

    def reject_portfolio_share(self, *,
        PortfolioId: str,
        AcceptLanguage: str = ...,
        PortfolioShareType: str = ...
    ) -> ServiceCatalogRejectPortfolioShareOutput: ...

    def scan_provisioned_products(self, *,
        AcceptLanguage: str = ...,
        AccessLevelFilter: ServiceCatalogAccessLevelFilter = ...,
        PageSize: int = ...,
        PageToken: str = ...
    ) -> ServiceCatalogScanProvisionedProductsOutput: ...

    def search_products(self, *,
        AcceptLanguage: str = ...,
        Filters: Dict[str, List[str]] = ...,
        PageSize: int = ...,
        SortBy: str = ...,
        SortOrder: str = ...,
        PageToken: str = ...
    ) -> ServiceCatalogSearchProductsOutput: ...

    def search_products_as_admin(self, *,
        AcceptLanguage: str = ...,
        PortfolioId: str = ...,
        Filters: Dict[str, List[str]] = ...,
        SortBy: str = ...,
        SortOrder: str = ...,
        PageToken: str = ...,
        PageSize: int = ...,
        ProductSource: str = ...
    ) -> ServiceCatalogSearchProductsAsAdminOutput: ...

    def search_provisioned_products(self, *,
        AcceptLanguage: str = ...,
        AccessLevelFilter: ServiceCatalogAccessLevelFilter = ...,
        Filters: Dict[str, List[str]] = ...,
        SortBy: str = ...,
        SortOrder: str = ...,
        PageSize: int = ...,
        PageToken: str = ...
    ) -> ServiceCatalogSearchProvisionedProductsOutput: ...

    def terminate_provisioned_product(self, *,
        TerminateToken: str,
        ProvisionedProductName: str = ...,
        ProvisionedProductId: str = ...,
        IgnoreErrors: bool = ...,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogTerminateProvisionedProductOutput: ...

    def update_constraint(self, *,
        Id: str,
        AcceptLanguage: str = ...,
        Description: str = ...,
        Parameters: str = ...
    ) -> ServiceCatalogUpdateConstraintOutput: ...

    def update_portfolio(self, *,
        Id: str,
        AcceptLanguage: str = ...,
        DisplayName: str = ...,
        Description: str = ...,
        ProviderName: str = ...,
        AddTags: List[ServiceCatalogTag] = ...,
        RemoveTags: List[str] = ...
    ) -> ServiceCatalogUpdatePortfolioOutput: ...

    def update_product(self, *,
        Id: str,
        AcceptLanguage: str = ...,
        Name: str = ...,
        Owner: str = ...,
        Description: str = ...,
        Distributor: str = ...,
        SupportDescription: str = ...,
        SupportEmail: str = ...,
        SupportUrl: str = ...,
        AddTags: List[ServiceCatalogTag] = ...,
        RemoveTags: List[str] = ...
    ) -> ServiceCatalogUpdateProductOutput: ...

    def update_provisioned_product(self, *,
        UpdateToken: str,
        AcceptLanguage: str = ...,
        ProvisionedProductName: str = ...,
        ProvisionedProductId: str = ...,
        ProductId: str = ...,
        ProvisioningArtifactId: str = ...,
        PathId: str = ...,
        ProvisioningParameters: List[ServiceCatalogUpdateProvisioningParameter] = ...,
        ProvisioningPreferences: ServiceCatalogUpdateProvisioningPreferences = ...,
        Tags: List[ServiceCatalogTag] = ...
    ) -> ServiceCatalogUpdateProvisionedProductOutput: ...

    def update_provisioning_artifact(self, *,
        ProductId: str,
        ProvisioningArtifactId: str,
        AcceptLanguage: str = ...,
        Name: str = ...,
        Description: str = ...,
        Active: bool = ...
    ) -> ServiceCatalogUpdateProvisioningArtifactOutput: ...

    def update_service_action(self, *,
        Id: str,
        Name: str = ...,
        Definition: Dict[str, str] = ...,
        Description: str = ...,
        AcceptLanguage: str = ...
    ) -> ServiceCatalogUpdateServiceActionOutput: ...

    def update_tag_option(self, *,
        Id: str,
        Value: str = ...,
        Active: bool = ...
    ) -> ServiceCatalogUpdateTagOptionOutput: ...


class ServiceCatalogAcceptPortfolioShareOutput(TypedDict, total=False):
    pass


class ServiceCatalogAssociateBudgetWithResourceOutput(TypedDict, total=False):
    pass


class ServiceCatalogAssociatePrincipalWithPortfolioOutput(TypedDict, total=False):
    pass


class ServiceCatalogAssociateProductWithPortfolioOutput(TypedDict, total=False):
    pass


class ServiceCatalogAssociateServiceActionWithProvisioningArtifactOutput(TypedDict, total=False):
    pass


class ServiceCatalogAssociateTagOptionWithResourceOutput(TypedDict, total=False):
    pass


class ServiceCatalogServiceActionAssociation(TypedDict):
    ServiceActionId: str
    ProductId: str
    ProvisioningArtifactId: str


class ServiceCatalogBatchAssociateServiceActionWithProvisioningArtifactOutput(TypedDict, total=False):
    FailedServiceActionAssociations: List[ServiceCatalogFailedServiceActionAssociation]


class ServiceCatalogFailedServiceActionAssociation(TypedDict, total=False):
    ServiceActionId: str
    ProductId: str
    ProvisioningArtifactId: str
    ErrorCode: str
    ErrorMessage: str


class ServiceCatalogBatchDisassociateServiceActionFromProvisioningArtifactOutput(TypedDict, total=False):
    FailedServiceActionAssociations: List[ServiceCatalogFailedServiceActionAssociation]


class ServiceCatalogCopyProductOutput(TypedDict, total=False):
    CopyProductToken: str


class ServiceCatalogCreateConstraintOutput(TypedDict, total=False):
    ConstraintDetail: ServiceCatalogConstraintDetail
    ConstraintParameters: str
    Status: str


class ServiceCatalogConstraintDetail(TypedDict, total=False):
    ConstraintId: str
    Type: str
    Description: str
    Owner: str


class ServiceCatalogTag(TypedDict):
    Key: str
    Value: str


class ServiceCatalogCreatePortfolioOutput(TypedDict, total=False):
    PortfolioDetail: ServiceCatalogPortfolioDetail
    Tags: List[ServiceCatalogTag]


class ServiceCatalogPortfolioDetail(TypedDict, total=False):
    Id: str
    ARN: str
    DisplayName: str
    Description: str
    CreatedTime: datetime.datetime
    ProviderName: str


class ServiceCatalogOrganizationNode(TypedDict, total=False):
    Type: str
    Value: str


class ServiceCatalogCreatePortfolioShareOutput(TypedDict, total=False):
    PortfolioShareToken: str


class _ServiceCatalogProvisioningArtifactProperties(TypedDict):
    Info: Dict[str, str]


class ServiceCatalogProvisioningArtifactProperties(_ServiceCatalogProvisioningArtifactProperties, total=False):
    Name: str
    Description: str
    Type: str
    DisableTemplateValidation: bool


class ServiceCatalogCreateProductOutput(TypedDict, total=False):
    ProductViewDetail: ServiceCatalogProductViewDetail
    ProvisioningArtifactDetail: ServiceCatalogProvisioningArtifactDetail
    Tags: List[ServiceCatalogTag]


class ServiceCatalogProductViewDetail(TypedDict, total=False):
    ProductViewSummary: ServiceCatalogProductViewSummary
    Status: str
    ProductARN: str
    CreatedTime: datetime.datetime


class ServiceCatalogProductViewSummary(TypedDict, total=False):
    Id: str
    ProductId: str
    Name: str
    Owner: str
    ShortDescription: str
    Type: str
    Distributor: str
    HasDefaultPath: bool
    SupportEmail: str
    SupportDescription: str
    SupportUrl: str


class ServiceCatalogProvisioningArtifactDetail(TypedDict, total=False):
    Id: str
    Name: str
    Description: str
    Type: str
    CreatedTime: datetime.datetime
    Active: bool


class ServiceCatalogUpdateProvisioningParameter(TypedDict, total=False):
    Key: str
    Value: str
    UsePreviousValue: bool


class ServiceCatalogCreateProvisionedProductPlanOutput(TypedDict, total=False):
    PlanName: str
    PlanId: str
    ProvisionProductId: str
    ProvisionedProductName: str
    ProvisioningArtifactId: str


class ServiceCatalogCreateProvisioningArtifactOutput(TypedDict, total=False):
    ProvisioningArtifactDetail: ServiceCatalogProvisioningArtifactDetail
    Info: Dict[str, str]
    Status: str


class ServiceCatalogCreateServiceActionOutput(TypedDict, total=False):
    ServiceActionDetail: ServiceCatalogServiceActionDetail


class ServiceCatalogServiceActionDetail(TypedDict, total=False):
    ServiceActionSummary: ServiceCatalogServiceActionSummary
    Definition: Dict[str, str]


class ServiceCatalogServiceActionSummary(TypedDict, total=False):
    Id: str
    Name: str
    Description: str
    DefinitionType: str


class ServiceCatalogCreateTagOptionOutput(TypedDict, total=False):
    TagOptionDetail: ServiceCatalogTagOptionDetail


class ServiceCatalogTagOptionDetail(TypedDict, total=False):
    Key: str
    Value: str
    Active: bool
    Id: str


class ServiceCatalogDeleteConstraintOutput(TypedDict, total=False):
    pass


class ServiceCatalogDeletePortfolioOutput(TypedDict, total=False):
    pass


class ServiceCatalogDeletePortfolioShareOutput(TypedDict, total=False):
    PortfolioShareToken: str


class ServiceCatalogDeleteProductOutput(TypedDict, total=False):
    pass


class ServiceCatalogDeleteProvisionedProductPlanOutput(TypedDict, total=False):
    pass


class ServiceCatalogDeleteProvisioningArtifactOutput(TypedDict, total=False):
    pass


class ServiceCatalogDeleteServiceActionOutput(TypedDict, total=False):
    pass


class ServiceCatalogDeleteTagOptionOutput(TypedDict, total=False):
    pass


class ServiceCatalogDescribeConstraintOutput(TypedDict, total=False):
    ConstraintDetail: ServiceCatalogConstraintDetail
    ConstraintParameters: str
    Status: str


class ServiceCatalogDescribeCopyProductStatusOutput(TypedDict, total=False):
    CopyProductStatus: str
    TargetProductId: str
    StatusDetail: str


class ServiceCatalogDescribePortfolioOutput(TypedDict, total=False):
    PortfolioDetail: ServiceCatalogPortfolioDetail
    Tags: List[ServiceCatalogTag]
    TagOptions: List[ServiceCatalogTagOptionDetail]
    Budgets: List[ServiceCatalogBudgetDetail]


class ServiceCatalogBudgetDetail(TypedDict, total=False):
    BudgetName: str


class ServiceCatalogDescribePortfolioShareStatusOutput(TypedDict, total=False):
    PortfolioShareToken: str
    PortfolioId: str
    OrganizationNodeValue: str
    Status: str
    ShareDetails: ServiceCatalogShareDetails


class ServiceCatalogShareDetails(TypedDict, total=False):
    SuccessfulShares: List[str]
    ShareErrors: List[ServiceCatalogShareError]


class ServiceCatalogShareError(TypedDict, total=False):
    Accounts: List[str]
    Message: str
    Error: str


class ServiceCatalogDescribeProductOutput(TypedDict, total=False):
    ProductViewSummary: ServiceCatalogProductViewSummary
    ProvisioningArtifacts: List[ServiceCatalogProvisioningArtifact]
    Budgets: List[ServiceCatalogBudgetDetail]


class ServiceCatalogProvisioningArtifact(TypedDict, total=False):
    Id: str
    Name: str
    Description: str
    CreatedTime: datetime.datetime


class ServiceCatalogDescribeProductAsAdminOutput(TypedDict, total=False):
    ProductViewDetail: ServiceCatalogProductViewDetail
    ProvisioningArtifactSummaries: List[ServiceCatalogProvisioningArtifactSummary]
    Tags: List[ServiceCatalogTag]
    TagOptions: List[ServiceCatalogTagOptionDetail]
    Budgets: List[ServiceCatalogBudgetDetail]


class ServiceCatalogProvisioningArtifactSummary(TypedDict, total=False):
    Id: str
    Name: str
    Description: str
    CreatedTime: datetime.datetime
    ProvisioningArtifactMetadata: Dict[str, str]


class ServiceCatalogDescribeProductViewOutput(TypedDict, total=False):
    ProductViewSummary: ServiceCatalogProductViewSummary
    ProvisioningArtifacts: List[ServiceCatalogProvisioningArtifact]


class ServiceCatalogDescribeProvisionedProductOutput(TypedDict, total=False):
    ProvisionedProductDetail: ServiceCatalogProvisionedProductDetail
    CloudWatchDashboards: List[ServiceCatalogCloudWatchDashboard]


class ServiceCatalogProvisionedProductDetail(TypedDict, total=False):
    Name: str
    Arn: str
    Type: str
    Id: str
    Status: str
    StatusMessage: str
    CreatedTime: datetime.datetime
    IdempotencyToken: str
    LastRecordId: str
    ProductId: str
    ProvisioningArtifactId: str


class ServiceCatalogCloudWatchDashboard(TypedDict, total=False):
    Name: str


class ServiceCatalogDescribeProvisionedProductPlanOutput(TypedDict, total=False):
    ProvisionedProductPlanDetails: ServiceCatalogProvisionedProductPlanDetails
    ResourceChanges: List[ServiceCatalogResourceChange]
    NextPageToken: str


class ServiceCatalogProvisionedProductPlanDetails(TypedDict, total=False):
    CreatedTime: datetime.datetime
    PathId: str
    ProductId: str
    PlanName: str
    PlanId: str
    ProvisionProductId: str
    ProvisionProductName: str
    PlanType: str
    ProvisioningArtifactId: str
    Status: str
    UpdatedTime: datetime.datetime
    NotificationArns: List[str]
    ProvisioningParameters: List[ServiceCatalogUpdateProvisioningParameter]
    Tags: List[ServiceCatalogTag]
    StatusMessage: str


class ServiceCatalogResourceChange(TypedDict, total=False):
    Action: str
    LogicalResourceId: str
    PhysicalResourceId: str
    ResourceType: str
    Replacement: str
    Scope: List[str]
    Details: List[ServiceCatalogResourceChangeDetail]


class ServiceCatalogResourceChangeDetail(TypedDict, total=False):
    Target: ServiceCatalogResourceTargetDefinition
    Evaluation: str
    CausingEntity: str


class ServiceCatalogResourceTargetDefinition(TypedDict, total=False):
    Attribute: str
    Name: str
    RequiresRecreation: str


class ServiceCatalogDescribeProvisioningArtifactOutput(TypedDict, total=False):
    ProvisioningArtifactDetail: ServiceCatalogProvisioningArtifactDetail
    Info: Dict[str, str]
    Status: str


class ServiceCatalogDescribeProvisioningParametersOutput(TypedDict, total=False):
    ProvisioningArtifactParameters: List[ServiceCatalogProvisioningArtifactParameter]
    ConstraintSummaries: List[ServiceCatalogConstraintSummary]
    UsageInstructions: List[ServiceCatalogUsageInstruction]
    TagOptions: List[ServiceCatalogTagOptionSummary]
    ProvisioningArtifactPreferences: ServiceCatalogProvisioningArtifactPreferences


class ServiceCatalogProvisioningArtifactParameter(TypedDict, total=False):
    ParameterKey: str
    DefaultValue: str
    ParameterType: str
    IsNoEcho: bool
    Description: str
    ParameterConstraints: ServiceCatalogParameterConstraints


class ServiceCatalogParameterConstraints(TypedDict, total=False):
    AllowedValues: List[str]


class ServiceCatalogConstraintSummary(TypedDict, total=False):
    Type: str
    Description: str


class ServiceCatalogUsageInstruction(TypedDict, total=False):
    Type: str
    Value: str


class ServiceCatalogTagOptionSummary(TypedDict, total=False):
    Key: str
    Values: List[str]


class ServiceCatalogProvisioningArtifactPreferences(TypedDict, total=False):
    StackSetAccounts: List[str]
    StackSetRegions: List[str]


class ServiceCatalogDescribeRecordOutput(TypedDict, total=False):
    RecordDetail: ServiceCatalogRecordDetail
    RecordOutputs: List[ServiceCatalogRecordOutput]
    NextPageToken: str


class ServiceCatalogRecordDetail(TypedDict, total=False):
    RecordId: str
    ProvisionedProductName: str
    Status: str
    CreatedTime: datetime.datetime
    UpdatedTime: datetime.datetime
    ProvisionedProductType: str
    RecordType: str
    ProvisionedProductId: str
    ProductId: str
    ProvisioningArtifactId: str
    PathId: str
    RecordErrors: List[ServiceCatalogRecordError]
    RecordTags: List[ServiceCatalogRecordTag]


class ServiceCatalogRecordError(TypedDict, total=False):
    Code: str
    Description: str


class ServiceCatalogRecordTag(TypedDict, total=False):
    Key: str
    Value: str


class ServiceCatalogRecordOutput(TypedDict, total=False):
    OutputKey: str
    OutputValue: str
    Description: str


class ServiceCatalogDescribeServiceActionOutput(TypedDict, total=False):
    ServiceActionDetail: ServiceCatalogServiceActionDetail


class ServiceCatalogDescribeTagOptionOutput(TypedDict, total=False):
    TagOptionDetail: ServiceCatalogTagOptionDetail


class ServiceCatalogDisableAWSOrganizationsAccessOutput(TypedDict, total=False):
    pass


class ServiceCatalogDisassociateBudgetFromResourceOutput(TypedDict, total=False):
    pass


class ServiceCatalogDisassociatePrincipalFromPortfolioOutput(TypedDict, total=False):
    pass


class ServiceCatalogDisassociateProductFromPortfolioOutput(TypedDict, total=False):
    pass


class ServiceCatalogDisassociateServiceActionFromProvisioningArtifactOutput(TypedDict, total=False):
    pass


class ServiceCatalogDisassociateTagOptionFromResourceOutput(TypedDict, total=False):
    pass


class ServiceCatalogEnableAWSOrganizationsAccessOutput(TypedDict, total=False):
    pass


class ServiceCatalogExecuteProvisionedProductPlanOutput(TypedDict, total=False):
    RecordDetail: ServiceCatalogRecordDetail


class ServiceCatalogExecuteProvisionedProductServiceActionOutput(TypedDict, total=False):
    RecordDetail: ServiceCatalogRecordDetail


class ServiceCatalogGetAWSOrganizationsAccessStatusOutput(TypedDict, total=False):
    AccessStatus: str


class ServiceCatalogListAcceptedPortfolioSharesOutput(TypedDict, total=False):
    PortfolioDetails: List[ServiceCatalogPortfolioDetail]
    NextPageToken: str


class ServiceCatalogListBudgetsForResourceOutput(TypedDict, total=False):
    Budgets: List[ServiceCatalogBudgetDetail]
    NextPageToken: str


class ServiceCatalogListConstraintsForPortfolioOutput(TypedDict, total=False):
    ConstraintDetails: List[ServiceCatalogConstraintDetail]
    NextPageToken: str


class ServiceCatalogListLaunchPathsOutput(TypedDict, total=False):
    LaunchPathSummaries: List[ServiceCatalogLaunchPathSummary]
    NextPageToken: str


class ServiceCatalogLaunchPathSummary(TypedDict, total=False):
    Id: str
    ConstraintSummaries: List[ServiceCatalogConstraintSummary]
    Tags: List[ServiceCatalogTag]
    Name: str


class ServiceCatalogListOrganizationPortfolioAccessOutput(TypedDict, total=False):
    OrganizationNodes: List[ServiceCatalogOrganizationNode]
    NextPageToken: str


class ServiceCatalogListPortfolioAccessOutput(TypedDict, total=False):
    AccountIds: List[str]
    NextPageToken: str


class ServiceCatalogListPortfoliosOutput(TypedDict, total=False):
    PortfolioDetails: List[ServiceCatalogPortfolioDetail]
    NextPageToken: str


class ServiceCatalogListPortfoliosForProductOutput(TypedDict, total=False):
    PortfolioDetails: List[ServiceCatalogPortfolioDetail]
    NextPageToken: str


class ServiceCatalogListPrincipalsForPortfolioOutput(TypedDict, total=False):
    Principals: List[ServiceCatalogPrincipal]
    NextPageToken: str


class ServiceCatalogPrincipal(TypedDict, total=False):
    PrincipalARN: str
    PrincipalType: str


class ServiceCatalogAccessLevelFilter(TypedDict, total=False):
    Key: str
    Value: str


class ServiceCatalogListProvisionedProductPlansOutput(TypedDict, total=False):
    ProvisionedProductPlans: List[ServiceCatalogProvisionedProductPlanSummary]
    NextPageToken: str


class ServiceCatalogProvisionedProductPlanSummary(TypedDict, total=False):
    PlanName: str
    PlanId: str
    ProvisionProductId: str
    ProvisionProductName: str
    PlanType: str
    ProvisioningArtifactId: str


class ServiceCatalogListProvisioningArtifactsOutput(TypedDict, total=False):
    ProvisioningArtifactDetails: List[ServiceCatalogProvisioningArtifactDetail]
    NextPageToken: str


class ServiceCatalogListProvisioningArtifactsForServiceActionOutput(TypedDict, total=False):
    ProvisioningArtifactViews: List[ServiceCatalogProvisioningArtifactView]
    NextPageToken: str


class ServiceCatalogProvisioningArtifactView(TypedDict, total=False):
    ProductViewSummary: ServiceCatalogProductViewSummary
    ProvisioningArtifact: ServiceCatalogProvisioningArtifact


class ServiceCatalogListRecordHistorySearchFilter(TypedDict, total=False):
    Key: str
    Value: str


class ServiceCatalogListRecordHistoryOutput(TypedDict, total=False):
    RecordDetails: List[ServiceCatalogRecordDetail]
    NextPageToken: str


class ServiceCatalogListResourcesForTagOptionOutput(TypedDict, total=False):
    ResourceDetails: List[ServiceCatalogResourceDetail]
    PageToken: str


class ServiceCatalogResourceDetail(TypedDict, total=False):
    Id: str
    ARN: str
    Name: str
    Description: str
    CreatedTime: datetime.datetime


class ServiceCatalogListServiceActionsOutput(TypedDict, total=False):
    ServiceActionSummaries: List[ServiceCatalogServiceActionSummary]
    NextPageToken: str


class ServiceCatalogListServiceActionsForProvisioningArtifactOutput(TypedDict, total=False):
    ServiceActionSummaries: List[ServiceCatalogServiceActionSummary]
    NextPageToken: str


class ServiceCatalogListTagOptionsFilters(TypedDict, total=False):
    Key: str
    Value: str
    Active: bool


class ServiceCatalogListTagOptionsOutput(TypedDict, total=False):
    TagOptionDetails: List[ServiceCatalogTagOptionDetail]
    PageToken: str


class ServiceCatalogProvisioningParameter(TypedDict, total=False):
    Key: str
    Value: str


class ServiceCatalogProvisioningPreferences(TypedDict, total=False):
    StackSetAccounts: List[str]
    StackSetRegions: List[str]
    StackSetFailureToleranceCount: int
    StackSetFailureTolerancePercentage: int
    StackSetMaxConcurrencyCount: int
    StackSetMaxConcurrencyPercentage: int


class ServiceCatalogProvisionProductOutput(TypedDict, total=False):
    RecordDetail: ServiceCatalogRecordDetail


class ServiceCatalogRejectPortfolioShareOutput(TypedDict, total=False):
    pass


class ServiceCatalogScanProvisionedProductsOutput(TypedDict, total=False):
    ProvisionedProducts: List[ServiceCatalogProvisionedProductDetail]
    NextPageToken: str


class ServiceCatalogSearchProductsOutput(TypedDict, total=False):
    ProductViewSummaries: List[ServiceCatalogProductViewSummary]
    ProductViewAggregations: Dict[str, List[ServiceCatalogProductViewAggregationValue]]
    NextPageToken: str


class ServiceCatalogProductViewAggregationValue(TypedDict, total=False):
    Value: str
    ApproximateCount: int


class ServiceCatalogSearchProductsAsAdminOutput(TypedDict, total=False):
    ProductViewDetails: List[ServiceCatalogProductViewDetail]
    NextPageToken: str


class ServiceCatalogSearchProvisionedProductsOutput(TypedDict, total=False):
    ProvisionedProducts: List[ServiceCatalogProvisionedProductAttribute]
    TotalResultsCount: int
    NextPageToken: str


class ServiceCatalogProvisionedProductAttribute(TypedDict, total=False):
    Name: str
    Arn: str
    Type: str
    Id: str
    Status: str
    StatusMessage: str
    CreatedTime: datetime.datetime
    IdempotencyToken: str
    LastRecordId: str
    Tags: List[ServiceCatalogTag]
    PhysicalId: str
    ProductId: str
    ProvisioningArtifactId: str
    UserArn: str
    UserArnSession: str


class ServiceCatalogTerminateProvisionedProductOutput(TypedDict, total=False):
    RecordDetail: ServiceCatalogRecordDetail


class ServiceCatalogUpdateConstraintOutput(TypedDict, total=False):
    ConstraintDetail: ServiceCatalogConstraintDetail
    ConstraintParameters: str
    Status: str


class ServiceCatalogUpdatePortfolioOutput(TypedDict, total=False):
    PortfolioDetail: ServiceCatalogPortfolioDetail
    Tags: List[ServiceCatalogTag]


class ServiceCatalogUpdateProductOutput(TypedDict, total=False):
    ProductViewDetail: ServiceCatalogProductViewDetail
    Tags: List[ServiceCatalogTag]


class ServiceCatalogUpdateProvisioningPreferences(TypedDict, total=False):
    StackSetAccounts: List[str]
    StackSetRegions: List[str]
    StackSetFailureToleranceCount: int
    StackSetFailureTolerancePercentage: int
    StackSetMaxConcurrencyCount: int
    StackSetMaxConcurrencyPercentage: int
    StackSetOperationType: str


class ServiceCatalogUpdateProvisionedProductOutput(TypedDict, total=False):
    RecordDetail: ServiceCatalogRecordDetail


class ServiceCatalogUpdateProvisioningArtifactOutput(TypedDict, total=False):
    ProvisioningArtifactDetail: ServiceCatalogProvisioningArtifactDetail
    Info: Dict[str, str]
    Status: str


class ServiceCatalogUpdateServiceActionOutput(TypedDict, total=False):
    ServiceActionDetail: ServiceCatalogServiceActionDetail


class ServiceCatalogUpdateTagOptionOutput(TypedDict, total=False):
    TagOptionDetail: ServiceCatalogTagOptionDetail


class ServiceDiscovery(BaseClient):
    def create_http_namespace(self, *,
        Name: str,
        CreatorRequestId: str = ...,
        Description: str = ...
    ) -> ServiceDiscoveryCreateHttpNamespaceResponse: ...

    def create_private_dns_namespace(self, *,
        Name: str,
        Vpc: str,
        CreatorRequestId: str = ...,
        Description: str = ...
    ) -> ServiceDiscoveryCreatePrivateDnsNamespaceResponse: ...

    def create_public_dns_namespace(self, *,
        Name: str,
        CreatorRequestId: str = ...,
        Description: str = ...
    ) -> ServiceDiscoveryCreatePublicDnsNamespaceResponse: ...

    def create_service(self, *,
        Name: str,
        NamespaceId: str = ...,
        CreatorRequestId: str = ...,
        Description: str = ...,
        DnsConfig: ServiceDiscoveryDnsConfig = ...,
        HealthCheckConfig: ServiceDiscoveryHealthCheckConfig = ...,
        HealthCheckCustomConfig: ServiceDiscoveryHealthCheckCustomConfig = ...
    ) -> ServiceDiscoveryCreateServiceResponse: ...

    def delete_namespace(self, *,
        Id: str
    ) -> ServiceDiscoveryDeleteNamespaceResponse: ...

    def delete_service(self, *,
        Id: str
    ) -> ServiceDiscoveryDeleteServiceResponse: ...

    def deregister_instance(self, *,
        ServiceId: str,
        InstanceId: str
    ) -> ServiceDiscoveryDeregisterInstanceResponse: ...

    def discover_instances(self, *,
        NamespaceName: str,
        ServiceName: str,
        MaxResults: int = ...,
        QueryParameters: Dict[str, str] = ...,
        HealthStatus: str = ...
    ) -> ServiceDiscoveryDiscoverInstancesResponse: ...

    def get_instance(self, *,
        ServiceId: str,
        InstanceId: str
    ) -> ServiceDiscoveryGetInstanceResponse: ...

    def get_instances_health_status(self, *,
        ServiceId: str,
        Instances: List[str] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> ServiceDiscoveryGetInstancesHealthStatusResponse: ...

    def get_namespace(self, *,
        Id: str
    ) -> ServiceDiscoveryGetNamespaceResponse: ...

    def get_operation(self, *,
        OperationId: str
    ) -> ServiceDiscoveryGetOperationResponse: ...

    def get_service(self, *,
        Id: str
    ) -> ServiceDiscoveryGetServiceResponse: ...

    def list_instances(self, *,
        ServiceId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ServiceDiscoveryListInstancesResponse: ...

    def list_namespaces(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        Filters: List[ServiceDiscoveryNamespaceFilter] = ...
    ) -> ServiceDiscoveryListNamespacesResponse: ...

    def list_operations(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        Filters: List[ServiceDiscoveryOperationFilter] = ...
    ) -> ServiceDiscoveryListOperationsResponse: ...

    def list_services(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        Filters: List[ServiceDiscoveryServiceFilter] = ...
    ) -> ServiceDiscoveryListServicesResponse: ...

    def register_instance(self, *,
        ServiceId: str,
        InstanceId: str,
        Attributes: Dict[str, str],
        CreatorRequestId: str = ...
    ) -> ServiceDiscoveryRegisterInstanceResponse: ...

    def update_instance_custom_health_status(self, *,
        ServiceId: str,
        InstanceId: str,
        Status: str
    ): ...

    def update_service(self, *,
        Id: str,
        Service: ServiceDiscoveryServiceChange
    ) -> ServiceDiscoveryUpdateServiceResponse: ...


class ServiceDiscoveryCreateHttpNamespaceResponse(TypedDict, total=False):
    OperationId: str


class ServiceDiscoveryCreatePrivateDnsNamespaceResponse(TypedDict, total=False):
    OperationId: str


class ServiceDiscoveryCreatePublicDnsNamespaceResponse(TypedDict, total=False):
    OperationId: str


class _ServiceDiscoveryDnsConfig(TypedDict):
    DnsRecords: List[ServiceDiscoveryDnsRecord]


class ServiceDiscoveryDnsConfig(_ServiceDiscoveryDnsConfig, total=False):
    NamespaceId: str
    RoutingPolicy: str


class ServiceDiscoveryDnsRecord(TypedDict):
    Type: str
    TTL: int


class _ServiceDiscoveryHealthCheckConfig(TypedDict):
    Type: str


class ServiceDiscoveryHealthCheckConfig(_ServiceDiscoveryHealthCheckConfig, total=False):
    ResourcePath: str
    FailureThreshold: int


class ServiceDiscoveryHealthCheckCustomConfig(TypedDict, total=False):
    FailureThreshold: int


class ServiceDiscoveryCreateServiceResponse(TypedDict, total=False):
    Service: ServiceDiscoveryService


class ServiceDiscoveryService(TypedDict, total=False):
    Id: str
    Arn: str
    Name: str
    NamespaceId: str
    Description: str
    InstanceCount: int
    DnsConfig: ServiceDiscoveryDnsConfig
    HealthCheckConfig: ServiceDiscoveryHealthCheckConfig
    HealthCheckCustomConfig: ServiceDiscoveryHealthCheckCustomConfig
    CreateDate: datetime.datetime
    CreatorRequestId: str


class ServiceDiscoveryDeleteNamespaceResponse(TypedDict, total=False):
    OperationId: str


class ServiceDiscoveryDeleteServiceResponse(TypedDict, total=False):
    pass


class ServiceDiscoveryDeregisterInstanceResponse(TypedDict, total=False):
    OperationId: str


class ServiceDiscoveryDiscoverInstancesResponse(TypedDict, total=False):
    Instances: List[ServiceDiscoveryHttpInstanceSummary]


class ServiceDiscoveryHttpInstanceSummary(TypedDict, total=False):
    InstanceId: str
    NamespaceName: str
    ServiceName: str
    HealthStatus: str
    Attributes: Dict[str, str]


class ServiceDiscoveryGetInstanceResponse(TypedDict, total=False):
    Instance: ServiceDiscoveryInstance


class _ServiceDiscoveryInstance(TypedDict):
    Id: str


class ServiceDiscoveryInstance(_ServiceDiscoveryInstance, total=False):
    CreatorRequestId: str
    Attributes: Dict[str, str]


class ServiceDiscoveryGetInstancesHealthStatusResponse(TypedDict, total=False):
    Status: Dict[str, str]
    NextToken: str


class ServiceDiscoveryGetNamespaceResponse(TypedDict, total=False):
    Namespace: ServiceDiscoveryNamespace


class ServiceDiscoveryNamespace(TypedDict, total=False):
    Id: str
    Arn: str
    Name: str
    Type: str
    Description: str
    ServiceCount: int
    Properties: ServiceDiscoveryNamespaceProperties
    CreateDate: datetime.datetime
    CreatorRequestId: str


class ServiceDiscoveryNamespaceProperties(TypedDict, total=False):
    DnsProperties: ServiceDiscoveryDnsProperties
    HttpProperties: ServiceDiscoveryHttpProperties


class ServiceDiscoveryDnsProperties(TypedDict, total=False):
    HostedZoneId: str


class ServiceDiscoveryHttpProperties(TypedDict, total=False):
    HttpName: str


class ServiceDiscoveryGetOperationResponse(TypedDict, total=False):
    Operation: ServiceDiscoveryOperation


class ServiceDiscoveryOperation(TypedDict, total=False):
    Id: str
    Type: str
    Status: str
    ErrorMessage: str
    ErrorCode: str
    CreateDate: datetime.datetime
    UpdateDate: datetime.datetime
    Targets: Dict[str, str]


class ServiceDiscoveryGetServiceResponse(TypedDict, total=False):
    Service: ServiceDiscoveryService


class ServiceDiscoveryListInstancesResponse(TypedDict, total=False):
    Instances: List[ServiceDiscoveryInstanceSummary]
    NextToken: str


class ServiceDiscoveryInstanceSummary(TypedDict, total=False):
    Id: str
    Attributes: Dict[str, str]


class _ServiceDiscoveryNamespaceFilter(TypedDict):
    Name: str
    Values: List[str]


class ServiceDiscoveryNamespaceFilter(_ServiceDiscoveryNamespaceFilter, total=False):
    Condition: str


class ServiceDiscoveryListNamespacesResponse(TypedDict, total=False):
    Namespaces: List[ServiceDiscoveryNamespaceSummary]
    NextToken: str


class ServiceDiscoveryNamespaceSummary(TypedDict, total=False):
    Id: str
    Arn: str
    Name: str
    Type: str
    Description: str
    ServiceCount: int
    Properties: ServiceDiscoveryNamespaceProperties
    CreateDate: datetime.datetime


class _ServiceDiscoveryOperationFilter(TypedDict):
    Name: str
    Values: List[str]


class ServiceDiscoveryOperationFilter(_ServiceDiscoveryOperationFilter, total=False):
    Condition: str


class ServiceDiscoveryListOperationsResponse(TypedDict, total=False):
    Operations: List[ServiceDiscoveryOperationSummary]
    NextToken: str


class ServiceDiscoveryOperationSummary(TypedDict, total=False):
    Id: str
    Status: str


class _ServiceDiscoveryServiceFilter(TypedDict):
    Name: str
    Values: List[str]


class ServiceDiscoveryServiceFilter(_ServiceDiscoveryServiceFilter, total=False):
    Condition: str


class ServiceDiscoveryListServicesResponse(TypedDict, total=False):
    Services: List[ServiceDiscoveryServiceSummary]
    NextToken: str


class ServiceDiscoveryServiceSummary(TypedDict, total=False):
    Id: str
    Arn: str
    Name: str
    Description: str
    InstanceCount: int
    DnsConfig: ServiceDiscoveryDnsConfig
    HealthCheckConfig: ServiceDiscoveryHealthCheckConfig
    HealthCheckCustomConfig: ServiceDiscoveryHealthCheckCustomConfig
    CreateDate: datetime.datetime


class ServiceDiscoveryRegisterInstanceResponse(TypedDict, total=False):
    OperationId: str


class _ServiceDiscoveryServiceChange(TypedDict):
    DnsConfig: ServiceDiscoveryDnsConfigChange


class ServiceDiscoveryServiceChange(_ServiceDiscoveryServiceChange, total=False):
    Description: str
    HealthCheckConfig: ServiceDiscoveryHealthCheckConfig


class ServiceDiscoveryDnsConfigChange(TypedDict):
    DnsRecords: List[ServiceDiscoveryDnsRecord]


class ServiceDiscoveryUpdateServiceResponse(TypedDict, total=False):
    OperationId: str


class SES(BaseClient):
    def clone_receipt_rule_set(self, *,
        RuleSetName: str,
        OriginalRuleSetName: str
    ) -> SESCloneReceiptRuleSetResponse: ...

    def create_configuration_set(self, *,
        ConfigurationSet: SESConfigurationSet
    ) -> SESCreateConfigurationSetResponse: ...

    def create_configuration_set_event_destination(self, *,
        ConfigurationSetName: str,
        EventDestination: SESEventDestination
    ) -> SESCreateConfigurationSetEventDestinationResponse: ...

    def create_configuration_set_tracking_options(self, *,
        ConfigurationSetName: str,
        TrackingOptions: SESTrackingOptions
    ) -> SESCreateConfigurationSetTrackingOptionsResponse: ...

    def create_custom_verification_email_template(self, *,
        TemplateName: str,
        FromEmailAddress: str,
        TemplateSubject: str,
        TemplateContent: str,
        SuccessRedirectionURL: str,
        FailureRedirectionURL: str
    ): ...

    def create_receipt_filter(self, *,
        Filter: SESReceiptFilter
    ) -> SESCreateReceiptFilterResponse: ...

    def create_receipt_rule(self, *,
        RuleSetName: str,
        Rule: SESReceiptRule,
        After: str = ...
    ) -> SESCreateReceiptRuleResponse: ...

    def create_receipt_rule_set(self, *,
        RuleSetName: str
    ) -> SESCreateReceiptRuleSetResponse: ...

    def create_template(self, *,
        Template: SESTemplate
    ) -> SESCreateTemplateResponse: ...

    def delete_configuration_set(self, *,
        ConfigurationSetName: str
    ) -> SESDeleteConfigurationSetResponse: ...

    def delete_configuration_set_event_destination(self, *,
        ConfigurationSetName: str,
        EventDestinationName: str
    ) -> SESDeleteConfigurationSetEventDestinationResponse: ...

    def delete_configuration_set_tracking_options(self, *,
        ConfigurationSetName: str
    ) -> SESDeleteConfigurationSetTrackingOptionsResponse: ...

    def delete_custom_verification_email_template(self, *,
        TemplateName: str
    ): ...

    def delete_identity(self, *,
        Identity: str
    ) -> SESDeleteIdentityResponse: ...

    def delete_identity_policy(self, *,
        Identity: str,
        PolicyName: str
    ) -> SESDeleteIdentityPolicyResponse: ...

    def delete_receipt_filter(self, *,
        FilterName: str
    ) -> SESDeleteReceiptFilterResponse: ...

    def delete_receipt_rule(self, *,
        RuleSetName: str,
        RuleName: str
    ) -> SESDeleteReceiptRuleResponse: ...

    def delete_receipt_rule_set(self, *,
        RuleSetName: str
    ) -> SESDeleteReceiptRuleSetResponse: ...

    def delete_template(self, *,
        TemplateName: str
    ) -> SESDeleteTemplateResponse: ...

    def delete_verified_email_address(self, *,
        EmailAddress: str
    ): ...

    def describe_active_receipt_rule_set(self) -> SESDescribeActiveReceiptRuleSetResponse: ...

    def describe_configuration_set(self, *,
        ConfigurationSetName: str,
        ConfigurationSetAttributeNames: List[str] = ...
    ) -> SESDescribeConfigurationSetResponse: ...

    def describe_receipt_rule(self, *,
        RuleSetName: str,
        RuleName: str
    ) -> SESDescribeReceiptRuleResponse: ...

    def describe_receipt_rule_set(self, *,
        RuleSetName: str
    ) -> SESDescribeReceiptRuleSetResponse: ...

    def get_account_sending_enabled(self) -> SESGetAccountSendingEnabledResponse: ...

    def get_custom_verification_email_template(self, *,
        TemplateName: str
    ) -> SESGetCustomVerificationEmailTemplateResponse: ...

    def get_identity_dkim_attributes(self, *,
        Identities: List[str]
    ) -> SESGetIdentityDkimAttributesResponse: ...

    def get_identity_mail_from_domain_attributes(self, *,
        Identities: List[str]
    ) -> SESGetIdentityMailFromDomainAttributesResponse: ...

    def get_identity_notification_attributes(self, *,
        Identities: List[str]
    ) -> SESGetIdentityNotificationAttributesResponse: ...

    def get_identity_policies(self, *,
        Identity: str,
        PolicyNames: List[str]
    ) -> SESGetIdentityPoliciesResponse: ...

    def get_identity_verification_attributes(self, *,
        Identities: List[str]
    ) -> SESGetIdentityVerificationAttributesResponse: ...

    def get_send_quota(self) -> SESGetSendQuotaResponse: ...

    def get_send_statistics(self) -> SESGetSendStatisticsResponse: ...

    def get_template(self, *,
        TemplateName: str
    ) -> SESGetTemplateResponse: ...

    def list_configuration_sets(self, *,
        NextToken: str = ...,
        MaxItems: int = ...
    ) -> SESListConfigurationSetsResponse: ...

    def list_custom_verification_email_templates(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> SESListCustomVerificationEmailTemplatesResponse: ...

    def list_identities(self, *,
        IdentityType: str = ...,
        NextToken: str = ...,
        MaxItems: int = ...
    ) -> SESListIdentitiesResponse: ...

    def list_identity_policies(self, *,
        Identity: str
    ) -> SESListIdentityPoliciesResponse: ...

    def list_receipt_filters(self) -> SESListReceiptFiltersResponse: ...

    def list_receipt_rule_sets(self, *,
        NextToken: str = ...
    ) -> SESListReceiptRuleSetsResponse: ...

    def list_templates(self, *,
        NextToken: str = ...,
        MaxItems: int = ...
    ) -> SESListTemplatesResponse: ...

    def list_verified_email_addresses(self) -> SESListVerifiedEmailAddressesResponse: ...

    def put_identity_policy(self, *,
        Identity: str,
        PolicyName: str,
        Policy: str
    ) -> SESPutIdentityPolicyResponse: ...

    def reorder_receipt_rule_set(self, *,
        RuleSetName: str,
        RuleNames: List[str]
    ) -> SESReorderReceiptRuleSetResponse: ...

    def send_bounce(self, *,
        OriginalMessageId: str,
        BounceSender: str,
        BouncedRecipientInfoList: List[SESBouncedRecipientInfo],
        Explanation: str = ...,
        MessageDsn: SESMessageDsn = ...,
        BounceSenderArn: str = ...
    ) -> SESSendBounceResponse: ...

    def send_bulk_templated_email(self, *,
        Source: str,
        Template: str,
        Destinations: List[SESBulkEmailDestination],
        SourceArn: str = ...,
        ReplyToAddresses: List[str] = ...,
        ReturnPath: str = ...,
        ReturnPathArn: str = ...,
        ConfigurationSetName: str = ...,
        DefaultTags: List[SESMessageTag] = ...,
        TemplateArn: str = ...,
        DefaultTemplateData: str = ...
    ) -> SESSendBulkTemplatedEmailResponse: ...

    def send_custom_verification_email(self, *,
        EmailAddress: str,
        TemplateName: str,
        ConfigurationSetName: str = ...
    ) -> SESSendCustomVerificationEmailResponse: ...

    def send_email(self, *,
        Source: str,
        Destination: SESDestination,
        Message: SESMessage,
        ReplyToAddresses: List[str] = ...,
        ReturnPath: str = ...,
        SourceArn: str = ...,
        ReturnPathArn: str = ...,
        Tags: List[SESMessageTag] = ...,
        ConfigurationSetName: str = ...
    ) -> SESSendEmailResponse: ...

    def send_raw_email(self, *,
        RawMessage: SESRawMessage,
        Source: str = ...,
        Destinations: List[str] = ...,
        FromArn: str = ...,
        SourceArn: str = ...,
        ReturnPathArn: str = ...,
        Tags: List[SESMessageTag] = ...,
        ConfigurationSetName: str = ...
    ) -> SESSendRawEmailResponse: ...

    def send_templated_email(self, *,
        Source: str,
        Destination: SESDestination,
        Template: str,
        TemplateData: str,
        ReplyToAddresses: List[str] = ...,
        ReturnPath: str = ...,
        SourceArn: str = ...,
        ReturnPathArn: str = ...,
        Tags: List[SESMessageTag] = ...,
        ConfigurationSetName: str = ...,
        TemplateArn: str = ...
    ) -> SESSendTemplatedEmailResponse: ...

    def set_active_receipt_rule_set(self, *,
        RuleSetName: str = ...
    ) -> SESSetActiveReceiptRuleSetResponse: ...

    def set_identity_dkim_enabled(self, *,
        Identity: str,
        DkimEnabled: bool
    ) -> SESSetIdentityDkimEnabledResponse: ...

    def set_identity_feedback_forwarding_enabled(self, *,
        Identity: str,
        ForwardingEnabled: bool
    ) -> SESSetIdentityFeedbackForwardingEnabledResponse: ...

    def set_identity_headers_in_notifications_enabled(self, *,
        Identity: str,
        NotificationType: str,
        Enabled: bool
    ) -> SESSetIdentityHeadersInNotificationsEnabledResponse: ...

    def set_identity_mail_from_domain(self, *,
        Identity: str,
        MailFromDomain: str = ...,
        BehaviorOnMXFailure: str = ...
    ) -> SESSetIdentityMailFromDomainResponse: ...

    def set_identity_notification_topic(self, *,
        Identity: str,
        NotificationType: str,
        SnsTopic: str = ...
    ) -> SESSetIdentityNotificationTopicResponse: ...

    def set_receipt_rule_position(self, *,
        RuleSetName: str,
        RuleName: str,
        After: str = ...
    ) -> SESSetReceiptRulePositionResponse: ...

    def test_render_template(self, *,
        TemplateName: str,
        TemplateData: str
    ) -> SESTestRenderTemplateResponse: ...

    def update_account_sending_enabled(self, *,
        Enabled: bool = ...
    ): ...

    def update_configuration_set_event_destination(self, *,
        ConfigurationSetName: str,
        EventDestination: SESEventDestination
    ) -> SESUpdateConfigurationSetEventDestinationResponse: ...

    def update_configuration_set_reputation_metrics_enabled(self, *,
        ConfigurationSetName: str,
        Enabled: bool
    ): ...

    def update_configuration_set_sending_enabled(self, *,
        ConfigurationSetName: str,
        Enabled: bool
    ): ...

    def update_configuration_set_tracking_options(self, *,
        ConfigurationSetName: str,
        TrackingOptions: SESTrackingOptions
    ) -> SESUpdateConfigurationSetTrackingOptionsResponse: ...

    def update_custom_verification_email_template(self, *,
        TemplateName: str,
        FromEmailAddress: str = ...,
        TemplateSubject: str = ...,
        TemplateContent: str = ...,
        SuccessRedirectionURL: str = ...,
        FailureRedirectionURL: str = ...
    ): ...

    def update_receipt_rule(self, *,
        RuleSetName: str,
        Rule: SESReceiptRule
    ) -> SESUpdateReceiptRuleResponse: ...

    def update_template(self, *,
        Template: SESTemplate
    ) -> SESUpdateTemplateResponse: ...

    def verify_domain_dkim(self, *,
        Domain: str
    ) -> SESVerifyDomainDkimResponse: ...

    def verify_domain_identity(self, *,
        Domain: str
    ) -> SESVerifyDomainIdentityResponse: ...

    def verify_email_address(self, *,
        EmailAddress: str
    ): ...

    def verify_email_identity(self, *,
        EmailAddress: str
    ) -> SESVerifyEmailIdentityResponse: ...


class SESCloneReceiptRuleSetResponse(TypedDict, total=False):
    pass


class SESConfigurationSet(TypedDict):
    Name: str


class SESCreateConfigurationSetResponse(TypedDict, total=False):
    pass


class _SESEventDestination(TypedDict):
    Name: str
    MatchingEventTypes: List[str]


class SESEventDestination(_SESEventDestination, total=False):
    Enabled: bool
    KinesisFirehoseDestination: SESKinesisFirehoseDestination
    CloudWatchDestination: SESCloudWatchDestination
    SNSDestination: SESSNSDestination


class SESKinesisFirehoseDestination(TypedDict):
    IAMRoleARN: str
    DeliveryStreamARN: str


class SESCloudWatchDestination(TypedDict):
    DimensionConfigurations: List[SESCloudWatchDimensionConfiguration]


class SESCloudWatchDimensionConfiguration(TypedDict):
    DimensionName: str
    DimensionValueSource: str
    DefaultDimensionValue: str


class SESSNSDestination(TypedDict):
    TopicARN: str


class SESCreateConfigurationSetEventDestinationResponse(TypedDict, total=False):
    pass


class SESTrackingOptions(TypedDict, total=False):
    CustomRedirectDomain: str


class SESCreateConfigurationSetTrackingOptionsResponse(TypedDict, total=False):
    pass


class SESReceiptFilter(TypedDict):
    Name: str
    IpFilter: SESReceiptIpFilter


class SESReceiptIpFilter(TypedDict):
    Policy: str
    Cidr: str


class SESCreateReceiptFilterResponse(TypedDict, total=False):
    pass


class _SESReceiptRule(TypedDict):
    Name: str


class SESReceiptRule(_SESReceiptRule, total=False):
    Enabled: bool
    TlsPolicy: str
    Recipients: List[str]
    Actions: List[SESReceiptAction]
    ScanEnabled: bool


class SESReceiptAction(TypedDict, total=False):
    S3Action: SESS3Action
    BounceAction: SESBounceAction
    WorkmailAction: SESWorkmailAction
    LambdaAction: SESLambdaAction
    StopAction: SESStopAction
    AddHeaderAction: SESAddHeaderAction
    SNSAction: SESSNSAction


class _SESS3Action(TypedDict):
    BucketName: str


class SESS3Action(_SESS3Action, total=False):
    TopicArn: str
    ObjectKeyPrefix: str
    KmsKeyArn: str


class _SESBounceAction(TypedDict):
    SmtpReplyCode: str
    Message: str
    Sender: str


class SESBounceAction(_SESBounceAction, total=False):
    TopicArn: str
    StatusCode: str


class _SESWorkmailAction(TypedDict):
    OrganizationArn: str


class SESWorkmailAction(_SESWorkmailAction, total=False):
    TopicArn: str


class _SESLambdaAction(TypedDict):
    FunctionArn: str


class SESLambdaAction(_SESLambdaAction, total=False):
    TopicArn: str
    InvocationType: str


class _SESStopAction(TypedDict):
    Scope: str


class SESStopAction(_SESStopAction, total=False):
    TopicArn: str


class SESAddHeaderAction(TypedDict):
    HeaderName: str
    HeaderValue: str


class _SESSNSAction(TypedDict):
    TopicArn: str


class SESSNSAction(_SESSNSAction, total=False):
    Encoding: str


class SESCreateReceiptRuleResponse(TypedDict, total=False):
    pass


class SESCreateReceiptRuleSetResponse(TypedDict, total=False):
    pass


class _SESTemplate(TypedDict):
    TemplateName: str


class SESTemplate(_SESTemplate, total=False):
    SubjectPart: str
    TextPart: str
    HtmlPart: str


class SESCreateTemplateResponse(TypedDict, total=False):
    pass


class SESDeleteConfigurationSetResponse(TypedDict, total=False):
    pass


class SESDeleteConfigurationSetEventDestinationResponse(TypedDict, total=False):
    pass


class SESDeleteConfigurationSetTrackingOptionsResponse(TypedDict, total=False):
    pass


class SESDeleteIdentityResponse(TypedDict, total=False):
    pass


class SESDeleteIdentityPolicyResponse(TypedDict, total=False):
    pass


class SESDeleteReceiptFilterResponse(TypedDict, total=False):
    pass


class SESDeleteReceiptRuleResponse(TypedDict, total=False):
    pass


class SESDeleteReceiptRuleSetResponse(TypedDict, total=False):
    pass


class SESDeleteTemplateResponse(TypedDict, total=False):
    pass


class SESDescribeActiveReceiptRuleSetResponse(TypedDict, total=False):
    Metadata: SESReceiptRuleSetMetadata
    Rules: List[SESReceiptRule]


class SESReceiptRuleSetMetadata(TypedDict, total=False):
    Name: str
    CreatedTimestamp: datetime.datetime


class SESDescribeConfigurationSetResponse(TypedDict, total=False):
    ConfigurationSet: SESConfigurationSet
    EventDestinations: List[SESEventDestination]
    TrackingOptions: SESTrackingOptions
    ReputationOptions: SESReputationOptions


class SESReputationOptions(TypedDict, total=False):
    SendingEnabled: bool
    ReputationMetricsEnabled: bool
    LastFreshStart: datetime.datetime


class SESDescribeReceiptRuleResponse(TypedDict, total=False):
    Rule: SESReceiptRule


class SESDescribeReceiptRuleSetResponse(TypedDict, total=False):
    Metadata: SESReceiptRuleSetMetadata
    Rules: List[SESReceiptRule]


class SESGetAccountSendingEnabledResponse(TypedDict, total=False):
    Enabled: bool


class SESGetCustomVerificationEmailTemplateResponse(TypedDict, total=False):
    TemplateName: str
    FromEmailAddress: str
    TemplateSubject: str
    TemplateContent: str
    SuccessRedirectionURL: str
    FailureRedirectionURL: str


class SESGetIdentityDkimAttributesResponse(TypedDict):
    DkimAttributes: Dict[str, SESIdentityDkimAttributes]


class _SESIdentityDkimAttributes(TypedDict):
    DkimEnabled: bool
    DkimVerificationStatus: str


class SESIdentityDkimAttributes(_SESIdentityDkimAttributes, total=False):
    DkimTokens: List[str]


class SESGetIdentityMailFromDomainAttributesResponse(TypedDict):
    MailFromDomainAttributes: Dict[str, SESIdentityMailFromDomainAttributes]


class SESIdentityMailFromDomainAttributes(TypedDict):
    MailFromDomain: str
    MailFromDomainStatus: str
    BehaviorOnMXFailure: str


class SESGetIdentityNotificationAttributesResponse(TypedDict):
    NotificationAttributes: Dict[str, SESIdentityNotificationAttributes]


class _SESIdentityNotificationAttributes(TypedDict):
    BounceTopic: str
    ComplaintTopic: str
    DeliveryTopic: str
    ForwardingEnabled: bool


class SESIdentityNotificationAttributes(_SESIdentityNotificationAttributes, total=False):
    HeadersInBounceNotificationsEnabled: bool
    HeadersInComplaintNotificationsEnabled: bool
    HeadersInDeliveryNotificationsEnabled: bool


class SESGetIdentityPoliciesResponse(TypedDict):
    Policies: Dict[str, str]


class SESGetIdentityVerificationAttributesResponse(TypedDict):
    VerificationAttributes: Dict[str, SESIdentityVerificationAttributes]


class _SESIdentityVerificationAttributes(TypedDict):
    VerificationStatus: str


class SESIdentityVerificationAttributes(_SESIdentityVerificationAttributes, total=False):
    VerificationToken: str


class SESGetSendQuotaResponse(TypedDict, total=False):
    Max24HourSend: float
    MaxSendRate: float
    SentLast24Hours: float


class SESGetSendStatisticsResponse(TypedDict, total=False):
    SendDataPoints: List[SESSendDataPoint]


class SESSendDataPoint(TypedDict, total=False):
    Timestamp: datetime.datetime
    DeliveryAttempts: int
    Bounces: int
    Complaints: int
    Rejects: int


class SESGetTemplateResponse(TypedDict, total=False):
    Template: SESTemplate


class SESListConfigurationSetsResponse(TypedDict, total=False):
    ConfigurationSets: List[SESConfigurationSet]
    NextToken: str


class SESListCustomVerificationEmailTemplatesResponse(TypedDict, total=False):
    CustomVerificationEmailTemplates: List[SESCustomVerificationEmailTemplate]
    NextToken: str


class SESCustomVerificationEmailTemplate(TypedDict, total=False):
    TemplateName: str
    FromEmailAddress: str
    TemplateSubject: str
    SuccessRedirectionURL: str
    FailureRedirectionURL: str


class _SESListIdentitiesResponse(TypedDict):
    Identities: List[str]


class SESListIdentitiesResponse(_SESListIdentitiesResponse, total=False):
    NextToken: str


class SESListIdentityPoliciesResponse(TypedDict):
    PolicyNames: List[str]


class SESListReceiptFiltersResponse(TypedDict, total=False):
    Filters: List[SESReceiptFilter]


class SESListReceiptRuleSetsResponse(TypedDict, total=False):
    RuleSets: List[SESReceiptRuleSetMetadata]
    NextToken: str


class SESListTemplatesResponse(TypedDict, total=False):
    TemplatesMetadata: List[SESTemplateMetadata]
    NextToken: str


class SESTemplateMetadata(TypedDict, total=False):
    Name: str
    CreatedTimestamp: datetime.datetime


class SESListVerifiedEmailAddressesResponse(TypedDict, total=False):
    VerifiedEmailAddresses: List[str]


class SESPutIdentityPolicyResponse(TypedDict, total=False):
    pass


class SESReorderReceiptRuleSetResponse(TypedDict, total=False):
    pass


class _SESMessageDsn(TypedDict):
    ReportingMta: str


class SESMessageDsn(_SESMessageDsn, total=False):
    ArrivalDate: datetime.datetime
    ExtensionFields: List[SESExtensionField]


class SESExtensionField(TypedDict):
    Name: str
    Value: str


class _SESBouncedRecipientInfo(TypedDict):
    Recipient: str


class SESBouncedRecipientInfo(_SESBouncedRecipientInfo, total=False):
    RecipientArn: str
    BounceType: str
    RecipientDsnFields: SESRecipientDsnFields


class _SESRecipientDsnFields(TypedDict):
    Action: str
    Status: str


class SESRecipientDsnFields(_SESRecipientDsnFields, total=False):
    FinalRecipient: str
    RemoteMta: str
    DiagnosticCode: str
    LastAttemptDate: datetime.datetime
    ExtensionFields: List[SESExtensionField]


class SESSendBounceResponse(TypedDict, total=False):
    MessageId: str


class SESMessageTag(TypedDict):
    Name: str
    Value: str


class _SESBulkEmailDestination(TypedDict):
    Destination: SESDestination


class SESBulkEmailDestination(_SESBulkEmailDestination, total=False):
    ReplacementTags: List[SESMessageTag]
    ReplacementTemplateData: str


class SESDestination(TypedDict, total=False):
    ToAddresses: List[str]
    CcAddresses: List[str]
    BccAddresses: List[str]


class SESSendBulkTemplatedEmailResponse(TypedDict):
    Status: List[SESBulkEmailDestinationStatus]


class SESBulkEmailDestinationStatus(TypedDict, total=False):
    Status: str
    Error: str
    MessageId: str


class SESSendCustomVerificationEmailResponse(TypedDict, total=False):
    MessageId: str


class SESMessage(TypedDict):
    Subject: SESContent
    Body: SESBody


class _SESContent(TypedDict):
    Data: str


class SESContent(_SESContent, total=False):
    Charset: str


class SESBody(TypedDict, total=False):
    Text: SESContent
    Html: SESContent


class SESSendEmailResponse(TypedDict):
    MessageId: str


class SESRawMessage(TypedDict):
    Data: bytes


class SESSendRawEmailResponse(TypedDict):
    MessageId: str


class SESSendTemplatedEmailResponse(TypedDict):
    MessageId: str


class SESSetActiveReceiptRuleSetResponse(TypedDict, total=False):
    pass


class SESSetIdentityDkimEnabledResponse(TypedDict, total=False):
    pass


class SESSetIdentityFeedbackForwardingEnabledResponse(TypedDict, total=False):
    pass


class SESSetIdentityHeadersInNotificationsEnabledResponse(TypedDict, total=False):
    pass


class SESSetIdentityMailFromDomainResponse(TypedDict, total=False):
    pass


class SESSetIdentityNotificationTopicResponse(TypedDict, total=False):
    pass


class SESSetReceiptRulePositionResponse(TypedDict, total=False):
    pass


class SESTestRenderTemplateResponse(TypedDict, total=False):
    RenderedTemplate: str


class SESUpdateConfigurationSetEventDestinationResponse(TypedDict, total=False):
    pass


class SESUpdateConfigurationSetTrackingOptionsResponse(TypedDict, total=False):
    pass


class SESUpdateReceiptRuleResponse(TypedDict, total=False):
    pass


class SESUpdateTemplateResponse(TypedDict, total=False):
    pass


class SESVerifyDomainDkimResponse(TypedDict):
    DkimTokens: List[str]


class SESVerifyDomainIdentityResponse(TypedDict):
    VerificationToken: str


class SESVerifyEmailIdentityResponse(TypedDict, total=False):
    pass


class Shield(BaseClient):
    def associate_drt_log_bucket(self, *,
        LogBucket: str
    ) -> ShieldAssociateDRTLogBucketResponse: ...

    def associate_drt_role(self, *,
        RoleArn: str
    ) -> ShieldAssociateDRTRoleResponse: ...

    def create_protection(self, *,
        Name: str,
        ResourceArn: str
    ) -> ShieldCreateProtectionResponse: ...

    def create_subscription(self) -> ShieldCreateSubscriptionResponse: ...

    def delete_protection(self, *,
        ProtectionId: str
    ) -> ShieldDeleteProtectionResponse: ...

    def delete_subscription(self) -> ShieldDeleteSubscriptionResponse: ...

    def describe_attack(self, *,
        AttackId: str
    ) -> ShieldDescribeAttackResponse: ...

    def describe_drt_access(self) -> ShieldDescribeDRTAccessResponse: ...

    def describe_emergency_contact_settings(self) -> ShieldDescribeEmergencyContactSettingsResponse: ...

    def describe_protection(self, *,
        ProtectionId: str = ...,
        ResourceArn: str = ...
    ) -> ShieldDescribeProtectionResponse: ...

    def describe_subscription(self) -> ShieldDescribeSubscriptionResponse: ...

    def disassociate_drt_log_bucket(self, *,
        LogBucket: str
    ) -> ShieldDisassociateDRTLogBucketResponse: ...

    def disassociate_drt_role(self) -> ShieldDisassociateDRTRoleResponse: ...

    def get_subscription_state(self) -> ShieldGetSubscriptionStateResponse: ...

    def list_attacks(self, *,
        ResourceArns: List[str] = ...,
        StartTime: ShieldTimeRange = ...,
        EndTime: ShieldTimeRange = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ShieldListAttacksResponse: ...

    def list_protections(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> ShieldListProtectionsResponse: ...

    def update_emergency_contact_settings(self, *,
        EmergencyContactList: List[ShieldEmergencyContact] = ...
    ) -> ShieldUpdateEmergencyContactSettingsResponse: ...

    def update_subscription(self, *,
        AutoRenew: str = ...
    ) -> ShieldUpdateSubscriptionResponse: ...


class ShieldAssociateDRTLogBucketResponse(TypedDict, total=False):
    pass


class ShieldAssociateDRTRoleResponse(TypedDict, total=False):
    pass


class ShieldCreateProtectionResponse(TypedDict, total=False):
    ProtectionId: str


class ShieldCreateSubscriptionResponse(TypedDict, total=False):
    pass


class ShieldDeleteProtectionResponse(TypedDict, total=False):
    pass


class ShieldDeleteSubscriptionResponse(TypedDict, total=False):
    pass


class ShieldDescribeAttackResponse(TypedDict, total=False):
    Attack: ShieldAttackDetail


class ShieldAttackDetail(TypedDict, total=False):
    AttackId: str
    ResourceArn: str
    SubResources: List[ShieldSubResourceSummary]
    StartTime: datetime.datetime
    EndTime: datetime.datetime
    AttackCounters: List[ShieldSummarizedCounter]
    AttackProperties: List[ShieldAttackProperty]
    Mitigations: List[ShieldMitigation]


class ShieldSubResourceSummary(TypedDict, total=False):
    Type: str
    Id: str
    AttackVectors: List[ShieldSummarizedAttackVector]
    Counters: List[ShieldSummarizedCounter]


class _ShieldSummarizedAttackVector(TypedDict):
    VectorType: str


class ShieldSummarizedAttackVector(_ShieldSummarizedAttackVector, total=False):
    VectorCounters: List[ShieldSummarizedCounter]


class ShieldSummarizedCounter(TypedDict, total=False):
    Name: str
    Max: float
    Average: float
    Sum: float
    N: int
    Unit: str


class ShieldAttackProperty(TypedDict, total=False):
    AttackLayer: str
    AttackPropertyIdentifier: str
    TopContributors: List[ShieldContributor]
    Unit: str
    Total: int


class ShieldContributor(TypedDict, total=False):
    Name: str
    Value: int


class ShieldMitigation(TypedDict, total=False):
    MitigationName: str


class ShieldDescribeDRTAccessResponse(TypedDict, total=False):
    RoleArn: str
    LogBucketList: List[str]


class ShieldDescribeEmergencyContactSettingsResponse(TypedDict, total=False):
    EmergencyContactList: List[ShieldEmergencyContact]


class ShieldEmergencyContact(TypedDict):
    EmailAddress: str


class ShieldDescribeProtectionResponse(TypedDict, total=False):
    Protection: ShieldProtection


class ShieldProtection(TypedDict, total=False):
    Id: str
    Name: str
    ResourceArn: str


class ShieldDescribeSubscriptionResponse(TypedDict, total=False):
    Subscription: ShieldSubscription


class ShieldSubscription(TypedDict, total=False):
    StartTime: datetime.datetime
    EndTime: datetime.datetime
    TimeCommitmentInSeconds: int
    AutoRenew: str
    Limits: List[ShieldLimit]


class ShieldLimit(TypedDict, total=False):
    Type: str
    Max: int


class ShieldDisassociateDRTLogBucketResponse(TypedDict, total=False):
    pass


class ShieldDisassociateDRTRoleResponse(TypedDict, total=False):
    pass


class ShieldGetSubscriptionStateResponse(TypedDict):
    SubscriptionState: str


class ShieldTimeRange(TypedDict, total=False):
    FromInclusive: datetime.datetime
    ToExclusive: datetime.datetime


class ShieldListAttacksResponse(TypedDict, total=False):
    AttackSummaries: List[ShieldAttackSummary]
    NextToken: str


class ShieldAttackSummary(TypedDict, total=False):
    AttackId: str
    ResourceArn: str
    StartTime: datetime.datetime
    EndTime: datetime.datetime
    AttackVectors: List[ShieldAttackVectorDescription]


class ShieldAttackVectorDescription(TypedDict):
    VectorType: str


class ShieldListProtectionsResponse(TypedDict, total=False):
    Protections: List[ShieldProtection]
    NextToken: str


class ShieldUpdateEmergencyContactSettingsResponse(TypedDict, total=False):
    pass


class ShieldUpdateSubscriptionResponse(TypedDict, total=False):
    pass


class signer(BaseClient):
    def cancel_signing_profile(self, *,
        profileName: str
    ): ...

    def describe_signing_job(self, *,
        jobId: str
    ) -> signerDescribeSigningJobResponse: ...

    def get_signing_platform(self, *,
        platformId: str
    ) -> signerGetSigningPlatformResponse: ...

    def get_signing_profile(self, *,
        profileName: str
    ) -> signerGetSigningProfileResponse: ...

    def list_signing_jobs(self, *,
        status: str = ...,
        platformId: str = ...,
        requestedBy: str = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> signerListSigningJobsResponse: ...

    def list_signing_platforms(self, *,
        category: str = ...,
        partner: str = ...,
        target: str = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> signerListSigningPlatformsResponse: ...

    def list_signing_profiles(self, *,
        includeCanceled: bool = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> signerListSigningProfilesResponse: ...

    def put_signing_profile(self, *,
        profileName: str,
        signingMaterial: signerSigningMaterial,
        platformId: str,
        overrides: signerSigningPlatformOverrides = ...,
        signingParameters: Dict[str, str] = ...
    ) -> signerPutSigningProfileResponse: ...

    def start_signing_job(self, *,
        source: signerSource,
        destination: signerDestination,
        clientRequestToken: str,
        profileName: str = ...
    ) -> signerStartSigningJobResponse: ...


class signerDescribeSigningJobResponse(TypedDict, total=False):
    jobId: str
    source: signerSource
    signingMaterial: signerSigningMaterial
    platformId: str
    profileName: str
    overrides: signerSigningPlatformOverrides
    signingParameters: Dict[str, str]
    createdAt: datetime.datetime
    completedAt: datetime.datetime
    requestedBy: str
    status: str
    statusReason: str
    signedObject: signerSignedObject


class signerSource(TypedDict, total=False):
    s3: signerS3Source


class signerS3Source(TypedDict):
    bucketName: str
    key: str
    version: str


class signerSigningMaterial(TypedDict):
    certificateArn: str


class signerSigningPlatformOverrides(TypedDict, total=False):
    signingConfiguration: signerSigningConfigurationOverrides


class signerSigningConfigurationOverrides(TypedDict, total=False):
    encryptionAlgorithm: str
    hashAlgorithm: str


class signerSignedObject(TypedDict, total=False):
    s3: signerS3SignedObject


class signerS3SignedObject(TypedDict, total=False):
    bucketName: str
    key: str


class signerGetSigningPlatformResponse(TypedDict, total=False):
    platformId: str
    displayName: str
    partner: str
    target: str
    category: str
    signingConfiguration: signerSigningConfiguration
    signingImageFormat: signerSigningImageFormat
    maxSizeInMB: int


class signerSigningConfiguration(TypedDict):
    encryptionAlgorithmOptions: signerEncryptionAlgorithmOptions
    hashAlgorithmOptions: signerHashAlgorithmOptions


class signerEncryptionAlgorithmOptions(TypedDict):
    allowedValues: List[str]
    defaultValue: str


class signerHashAlgorithmOptions(TypedDict):
    allowedValues: List[str]
    defaultValue: str


class signerSigningImageFormat(TypedDict):
    supportedFormats: List[str]
    defaultFormat: str


class signerGetSigningProfileResponse(TypedDict, total=False):
    profileName: str
    signingMaterial: signerSigningMaterial
    platformId: str
    overrides: signerSigningPlatformOverrides
    signingParameters: Dict[str, str]
    status: str


class signerListSigningJobsResponse(TypedDict, total=False):
    jobs: List[signerSigningJob]
    nextToken: str


class signerSigningJob(TypedDict, total=False):
    jobId: str
    source: signerSource
    signedObject: signerSignedObject
    signingMaterial: signerSigningMaterial
    createdAt: datetime.datetime
    status: str


class signerListSigningPlatformsResponse(TypedDict, total=False):
    platforms: List[signerSigningPlatform]
    nextToken: str


class signerSigningPlatform(TypedDict, total=False):
    platformId: str
    displayName: str
    partner: str
    target: str
    category: str
    signingConfiguration: signerSigningConfiguration
    signingImageFormat: signerSigningImageFormat
    maxSizeInMB: int


class signerListSigningProfilesResponse(TypedDict, total=False):
    profiles: List[signerSigningProfile]
    nextToken: str


class signerSigningProfile(TypedDict, total=False):
    profileName: str
    signingMaterial: signerSigningMaterial
    platformId: str
    signingParameters: Dict[str, str]
    status: str


class signerPutSigningProfileResponse(TypedDict, total=False):
    arn: str


class signerDestination(TypedDict, total=False):
    s3: signerS3Destination


class signerS3Destination(TypedDict, total=False):
    bucketName: str
    prefix: str


class signerStartSigningJobResponse(TypedDict, total=False):
    jobId: str


class SMS(BaseClient):
    def create_app(self, *,
        name: str = ...,
        description: str = ...,
        roleName: str = ...,
        clientToken: str = ...,
        serverGroups: List[SMSServerGroup] = ...,
        tags: List[SMSTag] = ...
    ) -> SMSCreateAppResponse: ...

    def create_replication_job(self, *,
        serverId: str,
        seedReplicationTime: datetime.datetime,
        frequency: int = ...,
        runOnce: bool = ...,
        licenseType: str = ...,
        roleName: str = ...,
        description: str = ...,
        numberOfRecentAmisToKeep: int = ...,
        encrypted: bool = ...,
        kmsKeyId: str = ...
    ) -> SMSCreateReplicationJobResponse: ...

    def delete_app(self, *,
        appId: str = ...,
        forceStopAppReplication: bool = ...,
        forceTerminateApp: bool = ...
    ) -> SMSDeleteAppResponse: ...

    def delete_app_launch_configuration(self, *,
        appId: str = ...
    ) -> SMSDeleteAppLaunchConfigurationResponse: ...

    def delete_app_replication_configuration(self, *,
        appId: str = ...
    ) -> SMSDeleteAppReplicationConfigurationResponse: ...

    def delete_replication_job(self, *,
        replicationJobId: str
    ) -> SMSDeleteReplicationJobResponse: ...

    def delete_server_catalog(self) -> SMSDeleteServerCatalogResponse: ...

    def disassociate_connector(self, *,
        connectorId: str
    ) -> SMSDisassociateConnectorResponse: ...

    def generate_change_set(self, *,
        appId: str = ...,
        changesetFormat: str = ...
    ) -> SMSGenerateChangeSetResponse: ...

    def generate_template(self, *,
        appId: str = ...,
        templateFormat: str = ...
    ) -> SMSGenerateTemplateResponse: ...

    def get_app(self, *,
        appId: str = ...
    ) -> SMSGetAppResponse: ...

    def get_app_launch_configuration(self, *,
        appId: str = ...
    ) -> SMSGetAppLaunchConfigurationResponse: ...

    def get_app_replication_configuration(self, *,
        appId: str = ...
    ) -> SMSGetAppReplicationConfigurationResponse: ...

    def get_connectors(self, *,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> SMSGetConnectorsResponse: ...

    def get_replication_jobs(self, *,
        replicationJobId: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> SMSGetReplicationJobsResponse: ...

    def get_replication_runs(self, *,
        replicationJobId: str,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> SMSGetReplicationRunsResponse: ...

    def get_servers(self, *,
        nextToken: str = ...,
        maxResults: int = ...,
        vmServerAddressList: List[SMSVmServerAddress] = ...
    ) -> SMSGetServersResponse: ...

    def import_server_catalog(self) -> SMSImportServerCatalogResponse: ...

    def launch_app(self, *,
        appId: str = ...
    ) -> SMSLaunchAppResponse: ...

    def list_apps(self, *,
        appIds: List[str] = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> SMSListAppsResponse: ...

    def put_app_launch_configuration(self, *,
        appId: str = ...,
        roleName: str = ...,
        serverGroupLaunchConfigurations: List[SMSServerGroupLaunchConfiguration] = ...
    ) -> SMSPutAppLaunchConfigurationResponse: ...

    def put_app_replication_configuration(self, *,
        appId: str = ...,
        serverGroupReplicationConfigurations: List[SMSServerGroupReplicationConfiguration] = ...
    ) -> SMSPutAppReplicationConfigurationResponse: ...

    def start_app_replication(self, *,
        appId: str = ...
    ) -> SMSStartAppReplicationResponse: ...

    def start_on_demand_replication_run(self, *,
        replicationJobId: str,
        description: str = ...
    ) -> SMSStartOnDemandReplicationRunResponse: ...

    def stop_app_replication(self, *,
        appId: str = ...
    ) -> SMSStopAppReplicationResponse: ...

    def terminate_app(self, *,
        appId: str = ...
    ) -> SMSTerminateAppResponse: ...

    def update_app(self, *,
        appId: str = ...,
        name: str = ...,
        description: str = ...,
        roleName: str = ...,
        serverGroups: List[SMSServerGroup] = ...,
        tags: List[SMSTag] = ...
    ) -> SMSUpdateAppResponse: ...

    def update_replication_job(self, *,
        replicationJobId: str,
        frequency: int = ...,
        nextReplicationRunStartTime: datetime.datetime = ...,
        licenseType: str = ...,
        roleName: str = ...,
        description: str = ...,
        numberOfRecentAmisToKeep: int = ...,
        encrypted: bool = ...,
        kmsKeyId: str = ...
    ) -> SMSUpdateReplicationJobResponse: ...


class SMSServerGroup(TypedDict, total=False):
    serverGroupId: str
    name: str
    serverList: List[SMSServer]


class SMSServer(TypedDict, total=False):
    serverId: str
    serverType: str
    vmServer: SMSVmServer
    replicationJobId: str
    replicationJobTerminated: bool


class SMSVmServer(TypedDict, total=False):
    vmServerAddress: SMSVmServerAddress
    vmName: str
    vmManagerName: str
    vmManagerType: str
    vmPath: str


class SMSVmServerAddress(TypedDict, total=False):
    vmManagerId: str
    vmId: str


class SMSTag(TypedDict, total=False):
    key: str
    value: str


class SMSCreateAppResponse(TypedDict, total=False):
    appSummary: SMSAppSummary
    serverGroups: List[SMSServerGroup]
    tags: List[SMSTag]


class SMSAppSummary(TypedDict, total=False):
    appId: str
    name: str
    description: str
    status: str
    statusMessage: str
    replicationStatus: str
    replicationStatusMessage: str
    latestReplicationTime: datetime.datetime
    launchStatus: str
    launchStatusMessage: str
    launchDetails: SMSLaunchDetails
    creationTime: datetime.datetime
    lastModified: datetime.datetime
    roleName: str
    totalServerGroups: int
    totalServers: int


class SMSLaunchDetails(TypedDict, total=False):
    latestLaunchTime: datetime.datetime
    stackName: str
    stackId: str


class SMSCreateReplicationJobResponse(TypedDict, total=False):
    replicationJobId: str


class SMSDeleteAppResponse(TypedDict, total=False):
    pass


class SMSDeleteAppLaunchConfigurationResponse(TypedDict, total=False):
    pass


class SMSDeleteAppReplicationConfigurationResponse(TypedDict, total=False):
    pass


class SMSDeleteReplicationJobResponse(TypedDict, total=False):
    pass


class SMSDeleteServerCatalogResponse(TypedDict, total=False):
    pass


class SMSDisassociateConnectorResponse(TypedDict, total=False):
    pass


class SMSGenerateChangeSetResponse(TypedDict, total=False):
    s3Location: SMSS3Location


class SMSS3Location(TypedDict, total=False):
    bucket: str
    key: str


class SMSGenerateTemplateResponse(TypedDict, total=False):
    s3Location: SMSS3Location


class SMSGetAppResponse(TypedDict, total=False):
    appSummary: SMSAppSummary
    serverGroups: List[SMSServerGroup]
    tags: List[SMSTag]


class SMSGetAppLaunchConfigurationResponse(TypedDict, total=False):
    appId: str
    roleName: str
    serverGroupLaunchConfigurations: List[SMSServerGroupLaunchConfiguration]


class SMSServerGroupLaunchConfiguration(TypedDict, total=False):
    serverGroupId: str
    launchOrder: int
    serverLaunchConfigurations: List[SMSServerLaunchConfiguration]


class SMSServerLaunchConfiguration(TypedDict, total=False):
    server: SMSServer
    logicalId: str
    vpc: str
    subnet: str
    securityGroup: str
    ec2KeyName: str
    userData: SMSUserData
    instanceType: str
    associatePublicIpAddress: bool


class SMSUserData(TypedDict, total=False):
    s3Location: SMSS3Location


class SMSGetAppReplicationConfigurationResponse(TypedDict, total=False):
    serverGroupReplicationConfigurations: List[SMSServerGroupReplicationConfiguration]


class SMSServerGroupReplicationConfiguration(TypedDict, total=False):
    serverGroupId: str
    serverReplicationConfigurations: List[SMSServerReplicationConfiguration]


class SMSServerReplicationConfiguration(TypedDict, total=False):
    server: SMSServer
    serverReplicationParameters: SMSServerReplicationParameters


class SMSServerReplicationParameters(TypedDict, total=False):
    seedTime: datetime.datetime
    frequency: int
    runOnce: bool
    licenseType: str
    numberOfRecentAmisToKeep: int
    encrypted: bool
    kmsKeyId: str


class SMSGetConnectorsResponse(TypedDict, total=False):
    connectorList: List[SMSConnector]
    nextToken: str


class SMSConnector(TypedDict, total=False):
    connectorId: str
    version: str
    status: str
    capabilityList: List[str]
    vmManagerName: str
    vmManagerType: str
    vmManagerId: str
    ipAddress: str
    macAddress: str
    associatedOn: datetime.datetime


class SMSGetReplicationJobsResponse(TypedDict, total=False):
    replicationJobList: List[SMSReplicationJob]
    nextToken: str


class SMSReplicationJob(TypedDict, total=False):
    replicationJobId: str
    serverId: str
    serverType: str
    vmServer: SMSVmServer
    seedReplicationTime: datetime.datetime
    frequency: int
    runOnce: bool
    nextReplicationRunStartTime: datetime.datetime
    licenseType: str
    roleName: str
    latestAmiId: str
    state: str
    statusMessage: str
    description: str
    numberOfRecentAmisToKeep: int
    encrypted: bool
    kmsKeyId: str
    replicationRunList: List[SMSReplicationRun]


class SMSReplicationRun(TypedDict, total=False):
    replicationRunId: str
    state: str
    type: str
    stageDetails: SMSReplicationRunStageDetails
    statusMessage: str
    amiId: str
    scheduledStartTime: datetime.datetime
    completedTime: datetime.datetime
    description: str
    encrypted: bool
    kmsKeyId: str


class SMSReplicationRunStageDetails(TypedDict, total=False):
    stage: str
    stageProgress: str


class SMSGetReplicationRunsResponse(TypedDict, total=False):
    replicationJob: SMSReplicationJob
    replicationRunList: List[SMSReplicationRun]
    nextToken: str


class SMSGetServersResponse(TypedDict, total=False):
    lastModifiedOn: datetime.datetime
    serverCatalogStatus: str
    serverList: List[SMSServer]
    nextToken: str


class SMSImportServerCatalogResponse(TypedDict, total=False):
    pass


class SMSLaunchAppResponse(TypedDict, total=False):
    pass


class SMSListAppsResponse(TypedDict, total=False):
    apps: List[SMSAppSummary]
    nextToken: str


class SMSPutAppLaunchConfigurationResponse(TypedDict, total=False):
    pass


class SMSPutAppReplicationConfigurationResponse(TypedDict, total=False):
    pass


class SMSStartAppReplicationResponse(TypedDict, total=False):
    pass


class SMSStartOnDemandReplicationRunResponse(TypedDict, total=False):
    replicationRunId: str


class SMSStopAppReplicationResponse(TypedDict, total=False):
    pass


class SMSTerminateAppResponse(TypedDict, total=False):
    pass


class SMSUpdateAppResponse(TypedDict, total=False):
    appSummary: SMSAppSummary
    serverGroups: List[SMSServerGroup]
    tags: List[SMSTag]


class SMSUpdateReplicationJobResponse(TypedDict, total=False):
    pass


class PinpointSMSVoice(BaseClient):
    def create_configuration_set(self, *,
        ConfigurationSetName: str = ...
    ) -> PinpointSMSVoiceCreateConfigurationSetResponse: ...

    def create_configuration_set_event_destination(self, *,
        ConfigurationSetName: str,
        EventDestination: PinpointSMSVoiceEventDestinationDefinition = ...,
        EventDestinationName: str = ...
    ) -> PinpointSMSVoiceCreateConfigurationSetEventDestinationResponse: ...

    def delete_configuration_set(self, *,
        ConfigurationSetName: str
    ) -> PinpointSMSVoiceDeleteConfigurationSetResponse: ...

    def delete_configuration_set_event_destination(self, *,
        ConfigurationSetName: str,
        EventDestinationName: str
    ) -> PinpointSMSVoiceDeleteConfigurationSetEventDestinationResponse: ...

    def get_configuration_set_event_destinations(self, *,
        ConfigurationSetName: str
    ) -> PinpointSMSVoiceGetConfigurationSetEventDestinationsResponse: ...

    def list_configuration_sets(self, *,
        NextToken: str = ...,
        PageSize: str = ...
    ) -> PinpointSMSVoiceListConfigurationSetsResponse: ...

    def send_voice_message(self, *,
        CallerId: str = ...,
        ConfigurationSetName: str = ...,
        Content: PinpointSMSVoiceVoiceMessageContent = ...,
        DestinationPhoneNumber: str = ...,
        OriginationPhoneNumber: str = ...
    ) -> PinpointSMSVoiceSendVoiceMessageResponse: ...

    def update_configuration_set_event_destination(self, *,
        ConfigurationSetName: str,
        EventDestinationName: str,
        EventDestination: PinpointSMSVoiceEventDestinationDefinition = ...
    ) -> PinpointSMSVoiceUpdateConfigurationSetEventDestinationResponse: ...


class PinpointSMSVoiceCreateConfigurationSetResponse(TypedDict, total=False):
    pass


class PinpointSMSVoiceEventDestinationDefinition(TypedDict, total=False):
    CloudWatchLogsDestination: PinpointSMSVoiceCloudWatchLogsDestination
    Enabled: bool
    KinesisFirehoseDestination: PinpointSMSVoiceKinesisFirehoseDestination
    MatchingEventTypes: List[str]
    SnsDestination: PinpointSMSVoiceSnsDestination


class PinpointSMSVoiceCloudWatchLogsDestination(TypedDict, total=False):
    IamRoleArn: str
    LogGroupArn: str


class PinpointSMSVoiceKinesisFirehoseDestination(TypedDict, total=False):
    DeliveryStreamArn: str
    IamRoleArn: str


class PinpointSMSVoiceSnsDestination(TypedDict, total=False):
    TopicArn: str


class PinpointSMSVoiceCreateConfigurationSetEventDestinationResponse(TypedDict, total=False):
    pass


class PinpointSMSVoiceDeleteConfigurationSetResponse(TypedDict, total=False):
    pass


class PinpointSMSVoiceDeleteConfigurationSetEventDestinationResponse(TypedDict, total=False):
    pass


class PinpointSMSVoiceGetConfigurationSetEventDestinationsResponse(TypedDict, total=False):
    EventDestinations: List[PinpointSMSVoiceEventDestination]


class PinpointSMSVoiceEventDestination(TypedDict, total=False):
    CloudWatchLogsDestination: PinpointSMSVoiceCloudWatchLogsDestination
    Enabled: bool
    KinesisFirehoseDestination: PinpointSMSVoiceKinesisFirehoseDestination
    MatchingEventTypes: List[str]
    Name: str
    SnsDestination: PinpointSMSVoiceSnsDestination


class PinpointSMSVoiceListConfigurationSetsResponse(TypedDict, total=False):
    ConfigurationSets: List[str]
    NextToken: str


class PinpointSMSVoiceVoiceMessageContent(TypedDict, total=False):
    CallInstructionsMessage: PinpointSMSVoiceCallInstructionsMessageType
    PlainTextMessage: PinpointSMSVoicePlainTextMessageType
    SSMLMessage: PinpointSMSVoiceSSMLMessageType


class PinpointSMSVoiceCallInstructionsMessageType(TypedDict, total=False):
    Text: str


class PinpointSMSVoicePlainTextMessageType(TypedDict, total=False):
    LanguageCode: str
    Text: str
    VoiceId: str


class PinpointSMSVoiceSSMLMessageType(TypedDict, total=False):
    LanguageCode: str
    Text: str
    VoiceId: str


class PinpointSMSVoiceSendVoiceMessageResponse(TypedDict, total=False):
    MessageId: str


class PinpointSMSVoiceUpdateConfigurationSetEventDestinationResponse(TypedDict, total=False):
    pass


class Snowball(BaseClient):
    def cancel_cluster(self, *,
        ClusterId: str
    ) -> SnowballCancelClusterResult: ...

    def cancel_job(self, *,
        JobId: str
    ) -> SnowballCancelJobResult: ...

    def create_address(self, *,
        Address: SnowballAddress
    ) -> SnowballCreateAddressResult: ...

    def create_cluster(self, *,
        JobType: str,
        Resources: SnowballJobResource,
        AddressId: str,
        RoleARN: str,
        ShippingOption: str,
        Description: str = ...,
        KmsKeyARN: str = ...,
        SnowballType: str = ...,
        Notification: SnowballNotification = ...,
        ForwardingAddressId: str = ...
    ) -> SnowballCreateClusterResult: ...

    def create_job(self, *,
        JobType: str = ...,
        Resources: SnowballJobResource = ...,
        Description: str = ...,
        AddressId: str = ...,
        KmsKeyARN: str = ...,
        RoleARN: str = ...,
        SnowballCapacityPreference: str = ...,
        ShippingOption: str = ...,
        Notification: SnowballNotification = ...,
        ClusterId: str = ...,
        SnowballType: str = ...,
        ForwardingAddressId: str = ...
    ) -> SnowballCreateJobResult: ...

    def describe_address(self, *,
        AddressId: str
    ) -> SnowballDescribeAddressResult: ...

    def describe_addresses(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SnowballDescribeAddressesResult: ...

    def describe_cluster(self, *,
        ClusterId: str
    ) -> SnowballDescribeClusterResult: ...

    def describe_job(self, *,
        JobId: str
    ) -> SnowballDescribeJobResult: ...

    def get_job_manifest(self, *,
        JobId: str
    ) -> SnowballGetJobManifestResult: ...

    def get_job_unlock_code(self, *,
        JobId: str
    ) -> SnowballGetJobUnlockCodeResult: ...

    def get_snowball_usage(self) -> SnowballGetSnowballUsageResult: ...

    def list_cluster_jobs(self, *,
        ClusterId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SnowballListClusterJobsResult: ...

    def list_clusters(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SnowballListClustersResult: ...

    def list_compatible_images(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SnowballListCompatibleImagesResult: ...

    def list_jobs(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SnowballListJobsResult: ...

    def update_cluster(self, *,
        ClusterId: str,
        RoleARN: str = ...,
        Description: str = ...,
        Resources: SnowballJobResource = ...,
        AddressId: str = ...,
        ShippingOption: str = ...,
        Notification: SnowballNotification = ...,
        ForwardingAddressId: str = ...
    ) -> SnowballUpdateClusterResult: ...

    def update_job(self, *,
        JobId: str,
        RoleARN: str = ...,
        Notification: SnowballNotification = ...,
        Resources: SnowballJobResource = ...,
        AddressId: str = ...,
        ShippingOption: str = ...,
        Description: str = ...,
        SnowballCapacityPreference: str = ...,
        ForwardingAddressId: str = ...
    ) -> SnowballUpdateJobResult: ...


class SnowballCancelClusterResult(TypedDict, total=False):
    pass


class SnowballCancelJobResult(TypedDict, total=False):
    pass


class SnowballAddress(TypedDict, total=False):
    AddressId: str
    Name: str
    Company: str
    Street1: str
    Street2: str
    Street3: str
    City: str
    StateOrProvince: str
    PrefectureOrDistrict: str
    Landmark: str
    Country: str
    PostalCode: str
    PhoneNumber: str
    IsRestricted: bool


class SnowballCreateAddressResult(TypedDict, total=False):
    AddressId: str


class SnowballJobResource(TypedDict, total=False):
    S3Resources: List[SnowballS3Resource]
    LambdaResources: List[SnowballLambdaResource]
    Ec2AmiResources: List[SnowballEc2AmiResource]


class SnowballS3Resource(TypedDict, total=False):
    BucketArn: str
    KeyRange: SnowballKeyRange


class SnowballKeyRange(TypedDict, total=False):
    BeginMarker: str
    EndMarker: str


class SnowballLambdaResource(TypedDict, total=False):
    LambdaArn: str
    EventTriggers: List[SnowballEventTriggerDefinition]


class SnowballEventTriggerDefinition(TypedDict, total=False):
    EventResourceARN: str


class _SnowballEc2AmiResource(TypedDict):
    AmiId: str


class SnowballEc2AmiResource(_SnowballEc2AmiResource, total=False):
    SnowballAmiId: str


class SnowballNotification(TypedDict, total=False):
    SnsTopicARN: str
    JobStatesToNotify: List[str]
    NotifyAll: bool


class SnowballCreateClusterResult(TypedDict, total=False):
    ClusterId: str


class SnowballCreateJobResult(TypedDict, total=False):
    JobId: str


class SnowballDescribeAddressResult(TypedDict, total=False):
    Address: SnowballAddress


class SnowballDescribeAddressesResult(TypedDict, total=False):
    Addresses: List[SnowballAddress]
    NextToken: str


class SnowballDescribeClusterResult(TypedDict, total=False):
    ClusterMetadata: SnowballClusterMetadata


class SnowballClusterMetadata(TypedDict, total=False):
    ClusterId: str
    Description: str
    KmsKeyARN: str
    RoleARN: str
    ClusterState: str
    JobType: str
    SnowballType: str
    CreationDate: datetime.datetime
    Resources: SnowballJobResource
    AddressId: str
    ShippingOption: str
    Notification: SnowballNotification
    ForwardingAddressId: str


class SnowballDescribeJobResult(TypedDict, total=False):
    JobMetadata: SnowballJobMetadata
    SubJobMetadata: List[SnowballJobMetadata]


class SnowballJobMetadata(TypedDict, total=False):
    JobId: str
    JobState: str
    JobType: str
    SnowballType: str
    CreationDate: datetime.datetime
    Resources: SnowballJobResource
    Description: str
    KmsKeyARN: str
    RoleARN: str
    AddressId: str
    ShippingDetails: SnowballShippingDetails
    SnowballCapacityPreference: str
    Notification: SnowballNotification
    DataTransferProgress: SnowballDataTransfer
    JobLogInfo: SnowballJobLogs
    ClusterId: str
    ForwardingAddressId: str


class SnowballShippingDetails(TypedDict, total=False):
    ShippingOption: str
    InboundShipment: SnowballShipment
    OutboundShipment: SnowballShipment


class SnowballShipment(TypedDict, total=False):
    Status: str
    TrackingNumber: str


class SnowballDataTransfer(TypedDict, total=False):
    BytesTransferred: int
    ObjectsTransferred: int
    TotalBytes: int
    TotalObjects: int


class SnowballJobLogs(TypedDict, total=False):
    JobCompletionReportURI: str
    JobSuccessLogURI: str
    JobFailureLogURI: str


class SnowballGetJobManifestResult(TypedDict, total=False):
    ManifestURI: str


class SnowballGetJobUnlockCodeResult(TypedDict, total=False):
    UnlockCode: str


class SnowballGetSnowballUsageResult(TypedDict, total=False):
    SnowballLimit: int
    SnowballsInUse: int


class SnowballListClusterJobsResult(TypedDict, total=False):
    JobListEntries: List[SnowballJobListEntry]
    NextToken: str


class SnowballJobListEntry(TypedDict, total=False):
    JobId: str
    JobState: str
    IsMaster: bool
    JobType: str
    SnowballType: str
    CreationDate: datetime.datetime
    Description: str


class SnowballListClustersResult(TypedDict, total=False):
    ClusterListEntries: List[SnowballClusterListEntry]
    NextToken: str


class SnowballClusterListEntry(TypedDict, total=False):
    ClusterId: str
    ClusterState: str
    CreationDate: datetime.datetime
    Description: str


class SnowballListCompatibleImagesResult(TypedDict, total=False):
    CompatibleImages: List[SnowballCompatibleImage]
    NextToken: str


class SnowballCompatibleImage(TypedDict, total=False):
    AmiId: str
    Name: str


class SnowballListJobsResult(TypedDict, total=False):
    JobListEntries: List[SnowballJobListEntry]
    NextToken: str


class SnowballUpdateClusterResult(TypedDict, total=False):
    pass


class SnowballUpdateJobResult(TypedDict, total=False):
    pass


class SNS(BaseClient):
    def add_permission(self, *,
        TopicArn: str,
        Label: str,
        AWSAccountId: List[str],
        ActionName: List[str]
    ): ...

    def check_if_phone_number_is_opted_out(self, *,
        phoneNumber: str
    ) -> SNSCheckIfPhoneNumberIsOptedOutResponse: ...

    def confirm_subscription(self, *,
        TopicArn: str,
        Token: str,
        AuthenticateOnUnsubscribe: str = ...
    ) -> SNSConfirmSubscriptionResponse: ...

    def create_platform_application(self, *,
        Name: str,
        Platform: str,
        Attributes: Dict[str, str]
    ) -> SNSCreatePlatformApplicationResponse: ...

    def create_platform_endpoint(self, *,
        PlatformApplicationArn: str,
        Token: str,
        CustomUserData: str = ...,
        Attributes: Dict[str, str] = ...
    ) -> SNSCreateEndpointResponse: ...

    def create_topic(self, *,
        Name: str,
        Attributes: Dict[str, str] = ...,
        Tags: List[SNSTag] = ...
    ) -> SNSCreateTopicResponse: ...

    def delete_endpoint(self, *,
        EndpointArn: str
    ): ...

    def delete_platform_application(self, *,
        PlatformApplicationArn: str
    ): ...

    def delete_topic(self, *,
        TopicArn: str
    ): ...

    def get_endpoint_attributes(self, *,
        EndpointArn: str
    ) -> SNSGetEndpointAttributesResponse: ...

    def get_platform_application_attributes(self, *,
        PlatformApplicationArn: str
    ) -> SNSGetPlatformApplicationAttributesResponse: ...

    def get_sms_attributes(self, *,
        attributes: List[str] = ...
    ) -> SNSGetSMSAttributesResponse: ...

    def get_subscription_attributes(self, *,
        SubscriptionArn: str
    ) -> SNSGetSubscriptionAttributesResponse: ...

    def get_topic_attributes(self, *,
        TopicArn: str
    ) -> SNSGetTopicAttributesResponse: ...

    def list_endpoints_by_platform_application(self, *,
        PlatformApplicationArn: str,
        NextToken: str = ...
    ) -> SNSListEndpointsByPlatformApplicationResponse: ...

    def list_phone_numbers_opted_out(self, *,
        nextToken: str = ...
    ) -> SNSListPhoneNumbersOptedOutResponse: ...

    def list_platform_applications(self, *,
        NextToken: str = ...
    ) -> SNSListPlatformApplicationsResponse: ...

    def list_subscriptions(self, *,
        NextToken: str = ...
    ) -> SNSListSubscriptionsResponse: ...

    def list_subscriptions_by_topic(self, *,
        TopicArn: str,
        NextToken: str = ...
    ) -> SNSListSubscriptionsByTopicResponse: ...

    def list_tags_for_resource(self, *,
        ResourceArn: str
    ) -> SNSListTagsForResourceResponse: ...

    def list_topics(self, *,
        NextToken: str = ...
    ) -> SNSListTopicsResponse: ...

    def opt_in_phone_number(self, *,
        phoneNumber: str
    ) -> SNSOptInPhoneNumberResponse: ...

    def publish(self, *,
        Message: str,
        TopicArn: str = ...,
        TargetArn: str = ...,
        PhoneNumber: str = ...,
        Subject: str = ...,
        MessageStructure: str = ...,
        MessageAttributes: Dict[str, SNSMessageAttributeValue] = ...
    ) -> SNSPublishResponse: ...

    def remove_permission(self, *,
        TopicArn: str,
        Label: str
    ): ...

    def set_endpoint_attributes(self, *,
        EndpointArn: str,
        Attributes: Dict[str, str]
    ): ...

    def set_platform_application_attributes(self, *,
        PlatformApplicationArn: str,
        Attributes: Dict[str, str]
    ): ...

    def set_sms_attributes(self, *,
        attributes: Dict[str, str]
    ) -> SNSSetSMSAttributesResponse: ...

    def set_subscription_attributes(self, *,
        SubscriptionArn: str,
        AttributeName: str,
        AttributeValue: str = ...
    ): ...

    def set_topic_attributes(self, *,
        TopicArn: str,
        AttributeName: str,
        AttributeValue: str = ...
    ): ...

    def subscribe(self, *,
        TopicArn: str,
        Protocol: str,
        Endpoint: str = ...,
        Attributes: Dict[str, str] = ...,
        ReturnSubscriptionArn: bool = ...
    ) -> SNSSubscribeResponse: ...

    def tag_resource(self, *,
        ResourceArn: str,
        Tags: List[SNSTag]
    ) -> SNSTagResourceResponse: ...

    def unsubscribe(self, *,
        SubscriptionArn: str
    ): ...

    def untag_resource(self, *,
        ResourceArn: str,
        TagKeys: List[str]
    ) -> SNSUntagResourceResponse: ...


class SNSCheckIfPhoneNumberIsOptedOutResponse(TypedDict, total=False):
    isOptedOut: bool


class SNSConfirmSubscriptionResponse(TypedDict, total=False):
    SubscriptionArn: str


class SNSCreatePlatformApplicationResponse(TypedDict, total=False):
    PlatformApplicationArn: str


class SNSCreateEndpointResponse(TypedDict, total=False):
    EndpointArn: str


class SNSTag(TypedDict):
    Key: str
    Value: str


class SNSCreateTopicResponse(TypedDict, total=False):
    TopicArn: str


class SNSGetEndpointAttributesResponse(TypedDict, total=False):
    Attributes: Dict[str, str]


class SNSGetPlatformApplicationAttributesResponse(TypedDict, total=False):
    Attributes: Dict[str, str]


class SNSGetSMSAttributesResponse(TypedDict, total=False):
    attributes: Dict[str, str]


class SNSGetSubscriptionAttributesResponse(TypedDict, total=False):
    Attributes: Dict[str, str]


class SNSGetTopicAttributesResponse(TypedDict, total=False):
    Attributes: Dict[str, str]


class SNSListEndpointsByPlatformApplicationResponse(TypedDict, total=False):
    Endpoints: List[SNSEndpoint]
    NextToken: str


class SNSEndpoint(TypedDict, total=False):
    EndpointArn: str
    Attributes: Dict[str, str]


class SNSListPhoneNumbersOptedOutResponse(TypedDict, total=False):
    phoneNumbers: List[str]
    nextToken: str


class SNSListPlatformApplicationsResponse(TypedDict, total=False):
    PlatformApplications: List[SNSPlatformApplication]
    NextToken: str


class SNSPlatformApplication(TypedDict, total=False):
    PlatformApplicationArn: str
    Attributes: Dict[str, str]


class SNSListSubscriptionsResponse(TypedDict, total=False):
    Subscriptions: List[SNSSubscription]
    NextToken: str


class SNSSubscription(TypedDict, total=False):
    SubscriptionArn: str
    Owner: str
    Protocol: str
    Endpoint: str
    TopicArn: str


class SNSListSubscriptionsByTopicResponse(TypedDict, total=False):
    Subscriptions: List[SNSSubscription]
    NextToken: str


class SNSListTagsForResourceResponse(TypedDict, total=False):
    Tags: List[SNSTag]


class SNSListTopicsResponse(TypedDict, total=False):
    Topics: List[SNSTopic]
    NextToken: str


class SNSTopic(TypedDict, total=False):
    TopicArn: str


class SNSOptInPhoneNumberResponse(TypedDict, total=False):
    pass


class _SNSMessageAttributeValue(TypedDict):
    DataType: str


class SNSMessageAttributeValue(_SNSMessageAttributeValue, total=False):
    StringValue: str
    BinaryValue: bytes


class SNSPublishResponse(TypedDict, total=False):
    MessageId: str


class SNSSetSMSAttributesResponse(TypedDict, total=False):
    pass


class SNSSubscribeResponse(TypedDict, total=False):
    SubscriptionArn: str


class SNSTagResourceResponse(TypedDict, total=False):
    pass


class SNSUntagResourceResponse(TypedDict, total=False):
    pass


class SQS(BaseClient):
    def add_permission(self, *,
        QueueUrl: str,
        Label: str,
        AWSAccountIds: List[str],
        Actions: List[str]
    ): ...

    def change_message_visibility(self, *,
        QueueUrl: str,
        ReceiptHandle: str,
        VisibilityTimeout: int
    ): ...

    def change_message_visibility_batch(self, *,
        QueueUrl: str,
        Entries: List[SQSChangeMessageVisibilityBatchRequestEntry]
    ) -> SQSChangeMessageVisibilityBatchResult: ...

    def create_queue(self, *,
        QueueName: str,
        Attributes: Dict[str, str] = ...
    ) -> SQSCreateQueueResult: ...

    def delete_message(self, *,
        QueueUrl: str,
        ReceiptHandle: str
    ): ...

    def delete_message_batch(self, *,
        QueueUrl: str,
        Entries: List[SQSDeleteMessageBatchRequestEntry]
    ) -> SQSDeleteMessageBatchResult: ...

    def delete_queue(self, *,
        QueueUrl: str
    ): ...

    def get_queue_attributes(self, *,
        QueueUrl: str,
        AttributeNames: List[str] = ...
    ) -> SQSGetQueueAttributesResult: ...

    def get_queue_url(self, *,
        QueueName: str,
        QueueOwnerAWSAccountId: str = ...
    ) -> SQSGetQueueUrlResult: ...

    def list_dead_letter_source_queues(self, *,
        QueueUrl: str
    ) -> SQSListDeadLetterSourceQueuesResult: ...

    def list_queue_tags(self, *,
        QueueUrl: str
    ) -> SQSListQueueTagsResult: ...

    def list_queues(self, *,
        QueueNamePrefix: str = ...
    ) -> SQSListQueuesResult: ...

    def purge_queue(self, *,
        QueueUrl: str
    ): ...

    def receive_message(self, *,
        QueueUrl: str,
        AttributeNames: List[str] = ...,
        MessageAttributeNames: List[str] = ...,
        MaxNumberOfMessages: int = ...,
        VisibilityTimeout: int = ...,
        WaitTimeSeconds: int = ...,
        ReceiveRequestAttemptId: str = ...
    ) -> SQSReceiveMessageResult: ...

    def remove_permission(self, *,
        QueueUrl: str,
        Label: str
    ): ...

    def send_message(self, *,
        QueueUrl: str,
        MessageBody: str,
        DelaySeconds: int = ...,
        MessageAttributes: Dict[str, SQSMessageAttributeValue] = ...,
        MessageDeduplicationId: str = ...,
        MessageGroupId: str = ...
    ) -> SQSSendMessageResult: ...

    def send_message_batch(self, *,
        QueueUrl: str,
        Entries: List[SQSSendMessageBatchRequestEntry]
    ) -> SQSSendMessageBatchResult: ...

    def set_queue_attributes(self, *,
        QueueUrl: str,
        Attributes: Dict[str, str]
    ): ...

    def tag_queue(self, *,
        QueueUrl: str,
        Tags: Dict[str, str]
    ): ...

    def untag_queue(self, *,
        QueueUrl: str,
        TagKeys: List[str]
    ): ...


class _SQSChangeMessageVisibilityBatchRequestEntry(TypedDict):
    Id: str
    ReceiptHandle: str


class SQSChangeMessageVisibilityBatchRequestEntry(_SQSChangeMessageVisibilityBatchRequestEntry, total=False):
    VisibilityTimeout: int


class SQSChangeMessageVisibilityBatchResult(TypedDict):
    Successful: List[SQSChangeMessageVisibilityBatchResultEntry]
    Failed: List[SQSBatchResultErrorEntry]


class SQSChangeMessageVisibilityBatchResultEntry(TypedDict):
    Id: str


class _SQSBatchResultErrorEntry(TypedDict):
    Id: str
    SenderFault: bool
    Code: str


class SQSBatchResultErrorEntry(_SQSBatchResultErrorEntry, total=False):
    Message: str


class SQSCreateQueueResult(TypedDict, total=False):
    QueueUrl: str


class SQSDeleteMessageBatchRequestEntry(TypedDict):
    Id: str
    ReceiptHandle: str


class SQSDeleteMessageBatchResult(TypedDict):
    Successful: List[SQSDeleteMessageBatchResultEntry]
    Failed: List[SQSBatchResultErrorEntry]


class SQSDeleteMessageBatchResultEntry(TypedDict):
    Id: str


class SQSGetQueueAttributesResult(TypedDict, total=False):
    Attributes: Dict[str, str]


class SQSGetQueueUrlResult(TypedDict, total=False):
    QueueUrl: str


class SQSListDeadLetterSourceQueuesResult(TypedDict):
    queueUrls: List[str]


class SQSListQueueTagsResult(TypedDict, total=False):
    Tags: Dict[str, str]


class SQSListQueuesResult(TypedDict, total=False):
    QueueUrls: List[str]


class SQSReceiveMessageResult(TypedDict, total=False):
    Messages: List[SQSMessage]


class SQSMessage(TypedDict, total=False):
    MessageId: str
    ReceiptHandle: str
    MD5OfBody: str
    Body: str
    Attributes: Dict[str, str]
    MD5OfMessageAttributes: str
    MessageAttributes: Dict[str, SQSMessageAttributeValue]


class _SQSMessageAttributeValue(TypedDict):
    DataType: str


class SQSMessageAttributeValue(_SQSMessageAttributeValue, total=False):
    StringValue: str
    BinaryValue: bytes
    StringListValues: List[str]
    BinaryListValues: List[bytes]


class SQSSendMessageResult(TypedDict, total=False):
    MD5OfMessageBody: str
    MD5OfMessageAttributes: str
    MessageId: str
    SequenceNumber: str


class _SQSSendMessageBatchRequestEntry(TypedDict):
    Id: str
    MessageBody: str


class SQSSendMessageBatchRequestEntry(_SQSSendMessageBatchRequestEntry, total=False):
    DelaySeconds: int
    MessageAttributes: Dict[str, SQSMessageAttributeValue]
    MessageDeduplicationId: str
    MessageGroupId: str


class SQSSendMessageBatchResult(TypedDict):
    Successful: List[SQSSendMessageBatchResultEntry]
    Failed: List[SQSBatchResultErrorEntry]


class _SQSSendMessageBatchResultEntry(TypedDict):
    Id: str
    MessageId: str
    MD5OfMessageBody: str


class SQSSendMessageBatchResultEntry(_SQSSendMessageBatchResultEntry, total=False):
    MD5OfMessageAttributes: str
    SequenceNumber: str


class SSM(BaseClient):
    def add_tags_to_resource(self, *,
        ResourceType: str,
        ResourceId: str,
        Tags: List[SSMTag]
    ) -> SSMAddTagsToResourceResult: ...

    def cancel_command(self, *,
        CommandId: str,
        InstanceIds: List[str] = ...
    ) -> SSMCancelCommandResult: ...

    def cancel_maintenance_window_execution(self, *,
        WindowExecutionId: str
    ) -> SSMCancelMaintenanceWindowExecutionResult: ...

    def create_activation(self, *,
        IamRole: str,
        Description: str = ...,
        DefaultInstanceName: str = ...,
        RegistrationLimit: int = ...,
        ExpirationDate: datetime.datetime = ...,
        Tags: List[SSMTag] = ...
    ) -> SSMCreateActivationResult: ...

    def create_association(self, *,
        Name: str,
        DocumentVersion: str = ...,
        InstanceId: str = ...,
        Parameters: Dict[str, List[str]] = ...,
        Targets: List[SSMTarget] = ...,
        ScheduleExpression: str = ...,
        OutputLocation: SSMInstanceAssociationOutputLocation = ...,
        AssociationName: str = ...,
        AutomationTargetParameterName: str = ...,
        MaxErrors: str = ...,
        MaxConcurrency: str = ...,
        ComplianceSeverity: str = ...
    ) -> SSMCreateAssociationResult: ...

    def create_association_batch(self, *,
        Entries: List[SSMCreateAssociationBatchRequestEntry]
    ) -> SSMCreateAssociationBatchResult: ...

    def create_document(self, *,
        Content: str,
        Name: str,
        Attachments: List[SSMAttachmentsSource] = ...,
        VersionName: str = ...,
        DocumentType: str = ...,
        DocumentFormat: str = ...,
        TargetType: str = ...,
        Tags: List[SSMTag] = ...
    ) -> SSMCreateDocumentResult: ...

    def create_maintenance_window(self, *,
        Name: str,
        Schedule: str,
        Duration: int,
        Cutoff: int,
        AllowUnassociatedTargets: bool,
        Description: str = ...,
        StartDate: str = ...,
        EndDate: str = ...,
        ScheduleTimezone: str = ...,
        ClientToken: str = ...,
        Tags: List[SSMTag] = ...
    ) -> SSMCreateMaintenanceWindowResult: ...

    def create_patch_baseline(self, *,
        Name: str,
        OperatingSystem: str = ...,
        GlobalFilters: SSMPatchFilterGroup = ...,
        ApprovalRules: SSMPatchRuleGroup = ...,
        ApprovedPatches: List[str] = ...,
        ApprovedPatchesComplianceLevel: str = ...,
        ApprovedPatchesEnableNonSecurity: bool = ...,
        RejectedPatches: List[str] = ...,
        RejectedPatchesAction: str = ...,
        Description: str = ...,
        Sources: List[SSMPatchSource] = ...,
        ClientToken: str = ...,
        Tags: List[SSMTag] = ...
    ) -> SSMCreatePatchBaselineResult: ...

    def create_resource_data_sync(self, *,
        SyncName: str,
        S3Destination: SSMResourceDataSyncS3Destination
    ) -> SSMCreateResourceDataSyncResult: ...

    def delete_activation(self, *,
        ActivationId: str
    ) -> SSMDeleteActivationResult: ...

    def delete_association(self, *,
        Name: str = ...,
        InstanceId: str = ...,
        AssociationId: str = ...
    ) -> SSMDeleteAssociationResult: ...

    def delete_document(self, *,
        Name: str
    ) -> SSMDeleteDocumentResult: ...

    def delete_inventory(self, *,
        TypeName: str,
        SchemaDeleteOption: str = ...,
        DryRun: bool = ...,
        ClientToken: str = ...
    ) -> SSMDeleteInventoryResult: ...

    def delete_maintenance_window(self, *,
        WindowId: str
    ) -> SSMDeleteMaintenanceWindowResult: ...

    def delete_parameter(self, *,
        Name: str
    ) -> SSMDeleteParameterResult: ...

    def delete_parameters(self, *,
        Names: List[str]
    ) -> SSMDeleteParametersResult: ...

    def delete_patch_baseline(self, *,
        BaselineId: str
    ) -> SSMDeletePatchBaselineResult: ...

    def delete_resource_data_sync(self, *,
        SyncName: str
    ) -> SSMDeleteResourceDataSyncResult: ...

    def deregister_managed_instance(self, *,
        InstanceId: str
    ) -> SSMDeregisterManagedInstanceResult: ...

    def deregister_patch_baseline_for_patch_group(self, *,
        BaselineId: str,
        PatchGroup: str
    ) -> SSMDeregisterPatchBaselineForPatchGroupResult: ...

    def deregister_target_from_maintenance_window(self, *,
        WindowId: str,
        WindowTargetId: str,
        Safe: bool = ...
    ) -> SSMDeregisterTargetFromMaintenanceWindowResult: ...

    def deregister_task_from_maintenance_window(self, *,
        WindowId: str,
        WindowTaskId: str
    ) -> SSMDeregisterTaskFromMaintenanceWindowResult: ...

    def describe_activations(self, *,
        Filters: List[SSMDescribeActivationsFilter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SSMDescribeActivationsResult: ...

    def describe_association(self, *,
        Name: str = ...,
        InstanceId: str = ...,
        AssociationId: str = ...,
        AssociationVersion: str = ...
    ) -> SSMDescribeAssociationResult: ...

    def describe_association_execution_targets(self, *,
        AssociationId: str,
        ExecutionId: str,
        Filters: List[SSMAssociationExecutionTargetsFilter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SSMDescribeAssociationExecutionTargetsResult: ...

    def describe_association_executions(self, *,
        AssociationId: str,
        Filters: List[SSMAssociationExecutionFilter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SSMDescribeAssociationExecutionsResult: ...

    def describe_automation_executions(self, *,
        Filters: List[SSMAutomationExecutionFilter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SSMDescribeAutomationExecutionsResult: ...

    def describe_automation_step_executions(self, *,
        AutomationExecutionId: str,
        Filters: List[SSMStepExecutionFilter] = ...,
        NextToken: str = ...,
        MaxResults: int = ...,
        ReverseOrder: bool = ...
    ) -> SSMDescribeAutomationStepExecutionsResult: ...

    def describe_available_patches(self, *,
        Filters: List[SSMPatchOrchestratorFilter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SSMDescribeAvailablePatchesResult: ...

    def describe_document(self, *,
        Name: str,
        DocumentVersion: str = ...,
        VersionName: str = ...
    ) -> SSMDescribeDocumentResult: ...

    def describe_document_permission(self, *,
        Name: str,
        PermissionType: str
    ) -> SSMDescribeDocumentPermissionResponse: ...

    def describe_effective_instance_associations(self, *,
        InstanceId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SSMDescribeEffectiveInstanceAssociationsResult: ...

    def describe_effective_patches_for_patch_baseline(self, *,
        BaselineId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SSMDescribeEffectivePatchesForPatchBaselineResult: ...

    def describe_instance_associations_status(self, *,
        InstanceId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SSMDescribeInstanceAssociationsStatusResult: ...

    def describe_instance_information(self, *,
        InstanceInformationFilterList: List[SSMInstanceInformationFilter] = ...,
        Filters: List[SSMInstanceInformationStringFilter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SSMDescribeInstanceInformationResult: ...

    def describe_instance_patch_states(self, *,
        InstanceIds: List[str],
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> SSMDescribeInstancePatchStatesResult: ...

    def describe_instance_patch_states_for_patch_group(self, *,
        PatchGroup: str,
        Filters: List[SSMInstancePatchStateFilter] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> SSMDescribeInstancePatchStatesForPatchGroupResult: ...

    def describe_instance_patches(self, *,
        InstanceId: str,
        Filters: List[SSMPatchOrchestratorFilter] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> SSMDescribeInstancePatchesResult: ...

    def describe_inventory_deletions(self, *,
        DeletionId: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> SSMDescribeInventoryDeletionsResult: ...

    def describe_maintenance_window_execution_task_invocations(self, *,
        WindowExecutionId: str,
        TaskId: str,
        Filters: List[SSMMaintenanceWindowFilter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SSMDescribeMaintenanceWindowExecutionTaskInvocationsResult: ...

    def describe_maintenance_window_execution_tasks(self, *,
        WindowExecutionId: str,
        Filters: List[SSMMaintenanceWindowFilter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SSMDescribeMaintenanceWindowExecutionTasksResult: ...

    def describe_maintenance_window_executions(self, *,
        WindowId: str,
        Filters: List[SSMMaintenanceWindowFilter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SSMDescribeMaintenanceWindowExecutionsResult: ...

    def describe_maintenance_window_schedule(self, *,
        WindowId: str = ...,
        Targets: List[SSMTarget] = ...,
        ResourceType: str = ...,
        Filters: List[SSMPatchOrchestratorFilter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SSMDescribeMaintenanceWindowScheduleResult: ...

    def describe_maintenance_window_targets(self, *,
        WindowId: str,
        Filters: List[SSMMaintenanceWindowFilter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SSMDescribeMaintenanceWindowTargetsResult: ...

    def describe_maintenance_window_tasks(self, *,
        WindowId: str,
        Filters: List[SSMMaintenanceWindowFilter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SSMDescribeMaintenanceWindowTasksResult: ...

    def describe_maintenance_windows(self, *,
        Filters: List[SSMMaintenanceWindowFilter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SSMDescribeMaintenanceWindowsResult: ...

    def describe_maintenance_windows_for_target(self, *,
        Targets: List[SSMTarget],
        ResourceType: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SSMDescribeMaintenanceWindowsForTargetResult: ...

    def describe_parameters(self, *,
        Filters: List[SSMParametersFilter] = ...,
        ParameterFilters: List[SSMParameterStringFilter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SSMDescribeParametersResult: ...

    def describe_patch_baselines(self, *,
        Filters: List[SSMPatchOrchestratorFilter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SSMDescribePatchBaselinesResult: ...

    def describe_patch_group_state(self, *,
        PatchGroup: str
    ) -> SSMDescribePatchGroupStateResult: ...

    def describe_patch_groups(self, *,
        MaxResults: int = ...,
        Filters: List[SSMPatchOrchestratorFilter] = ...,
        NextToken: str = ...
    ) -> SSMDescribePatchGroupsResult: ...

    def describe_patch_properties(self, *,
        OperatingSystem: str,
        Property: str,
        PatchSet: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SSMDescribePatchPropertiesResult: ...

    def describe_sessions(self, *,
        State: str,
        MaxResults: int = ...,
        NextToken: str = ...,
        Filters: List[SSMSessionFilter] = ...
    ) -> SSMDescribeSessionsResponse: ...

    def get_automation_execution(self, *,
        AutomationExecutionId: str
    ) -> SSMGetAutomationExecutionResult: ...

    def get_command_invocation(self, *,
        CommandId: str,
        InstanceId: str,
        PluginName: str = ...
    ) -> SSMGetCommandInvocationResult: ...

    def get_connection_status(self, *,
        Target: str
    ) -> SSMGetConnectionStatusResponse: ...

    def get_default_patch_baseline(self, *,
        OperatingSystem: str = ...
    ) -> SSMGetDefaultPatchBaselineResult: ...

    def get_deployable_patch_snapshot_for_instance(self, *,
        InstanceId: str,
        SnapshotId: str
    ) -> SSMGetDeployablePatchSnapshotForInstanceResult: ...

    def get_document(self, *,
        Name: str,
        VersionName: str = ...,
        DocumentVersion: str = ...,
        DocumentFormat: str = ...
    ) -> SSMGetDocumentResult: ...

    def get_inventory(self, *,
        Filters: List[SSMInventoryFilter] = ...,
        Aggregators: List[SSMInventoryAggregator] = ...,
        ResultAttributes: List[SSMResultAttribute] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> SSMGetInventoryResult: ...

    def get_inventory_schema(self, *,
        TypeName: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...,
        Aggregator: bool = ...,
        SubType: bool = ...
    ) -> SSMGetInventorySchemaResult: ...

    def get_maintenance_window(self, *,
        WindowId: str
    ) -> SSMGetMaintenanceWindowResult: ...

    def get_maintenance_window_execution(self, *,
        WindowExecutionId: str
    ) -> SSMGetMaintenanceWindowExecutionResult: ...

    def get_maintenance_window_execution_task(self, *,
        WindowExecutionId: str,
        TaskId: str
    ) -> SSMGetMaintenanceWindowExecutionTaskResult: ...

    def get_maintenance_window_execution_task_invocation(self, *,
        WindowExecutionId: str,
        TaskId: str,
        InvocationId: str
    ) -> SSMGetMaintenanceWindowExecutionTaskInvocationResult: ...

    def get_maintenance_window_task(self, *,
        WindowId: str,
        WindowTaskId: str
    ) -> SSMGetMaintenanceWindowTaskResult: ...

    def get_parameter(self, *,
        Name: str,
        WithDecryption: bool = ...
    ) -> SSMGetParameterResult: ...

    def get_parameter_history(self, *,
        Name: str,
        WithDecryption: bool = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SSMGetParameterHistoryResult: ...

    def get_parameters(self, *,
        Names: List[str],
        WithDecryption: bool = ...
    ) -> SSMGetParametersResult: ...

    def get_parameters_by_path(self, *,
        Path: str,
        Recursive: bool = ...,
        ParameterFilters: List[SSMParameterStringFilter] = ...,
        WithDecryption: bool = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SSMGetParametersByPathResult: ...

    def get_patch_baseline(self, *,
        BaselineId: str
    ) -> SSMGetPatchBaselineResult: ...

    def get_patch_baseline_for_patch_group(self, *,
        PatchGroup: str,
        OperatingSystem: str = ...
    ) -> SSMGetPatchBaselineForPatchGroupResult: ...

    def get_service_setting(self, *,
        SettingId: str
    ) -> SSMGetServiceSettingResult: ...

    def label_parameter_version(self, *,
        Name: str,
        Labels: List[str],
        ParameterVersion: int = ...
    ) -> SSMLabelParameterVersionResult: ...

    def list_association_versions(self, *,
        AssociationId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SSMListAssociationVersionsResult: ...

    def list_associations(self, *,
        AssociationFilterList: List[SSMAssociationFilter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SSMListAssociationsResult: ...

    def list_command_invocations(self, *,
        CommandId: str = ...,
        InstanceId: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        Filters: List[SSMCommandFilter] = ...,
        Details: bool = ...
    ) -> SSMListCommandInvocationsResult: ...

    def list_commands(self, *,
        CommandId: str = ...,
        InstanceId: str = ...,
        MaxResults: int = ...,
        NextToken: str = ...,
        Filters: List[SSMCommandFilter] = ...
    ) -> SSMListCommandsResult: ...

    def list_compliance_items(self, *,
        Filters: List[SSMComplianceStringFilter] = ...,
        ResourceIds: List[str] = ...,
        ResourceTypes: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> SSMListComplianceItemsResult: ...

    def list_compliance_summaries(self, *,
        Filters: List[SSMComplianceStringFilter] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> SSMListComplianceSummariesResult: ...

    def list_document_versions(self, *,
        Name: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SSMListDocumentVersionsResult: ...

    def list_documents(self, *,
        DocumentFilterList: List[SSMDocumentFilter] = ...,
        Filters: List[SSMDocumentKeyValuesFilter] = ...,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> SSMListDocumentsResult: ...

    def list_inventory_entries(self, *,
        InstanceId: str,
        TypeName: str,
        Filters: List[SSMInventoryFilter] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> SSMListInventoryEntriesResult: ...

    def list_resource_compliance_summaries(self, *,
        Filters: List[SSMComplianceStringFilter] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> SSMListResourceComplianceSummariesResult: ...

    def list_resource_data_sync(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> SSMListResourceDataSyncResult: ...

    def list_tags_for_resource(self, *,
        ResourceType: str,
        ResourceId: str
    ) -> SSMListTagsForResourceResult: ...

    def modify_document_permission(self, *,
        Name: str,
        PermissionType: str,
        AccountIdsToAdd: List[str] = ...,
        AccountIdsToRemove: List[str] = ...
    ) -> SSMModifyDocumentPermissionResponse: ...

    def put_compliance_items(self, *,
        ResourceId: str,
        ResourceType: str,
        ComplianceType: str,
        ExecutionSummary: SSMComplianceExecutionSummary,
        Items: List[SSMComplianceItemEntry],
        ItemContentHash: str = ...
    ) -> SSMPutComplianceItemsResult: ...

    def put_inventory(self, *,
        InstanceId: str,
        Items: List[SSMInventoryItem]
    ) -> SSMPutInventoryResult: ...

    def put_parameter(self, *,
        Name: str,
        Value: str,
        Type: str,
        Description: str = ...,
        KeyId: str = ...,
        Overwrite: bool = ...,
        AllowedPattern: str = ...,
        Tags: List[SSMTag] = ...,
        Tier: str = ...,
        Policies: str = ...
    ) -> SSMPutParameterResult: ...

    def register_default_patch_baseline(self, *,
        BaselineId: str
    ) -> SSMRegisterDefaultPatchBaselineResult: ...

    def register_patch_baseline_for_patch_group(self, *,
        BaselineId: str,
        PatchGroup: str
    ) -> SSMRegisterPatchBaselineForPatchGroupResult: ...

    def register_target_with_maintenance_window(self, *,
        WindowId: str,
        ResourceType: str,
        Targets: List[SSMTarget],
        OwnerInformation: str = ...,
        Name: str = ...,
        Description: str = ...,
        ClientToken: str = ...
    ) -> SSMRegisterTargetWithMaintenanceWindowResult: ...

    def register_task_with_maintenance_window(self, *,
        WindowId: str,
        Targets: List[SSMTarget],
        TaskArn: str,
        TaskType: str,
        MaxConcurrency: str,
        MaxErrors: str,
        ServiceRoleArn: str = ...,
        TaskParameters: Dict[str, SSMMaintenanceWindowTaskParameterValueExpression] = ...,
        TaskInvocationParameters: SSMMaintenanceWindowTaskInvocationParameters = ...,
        Priority: int = ...,
        LoggingInfo: SSMLoggingInfo = ...,
        Name: str = ...,
        Description: str = ...,
        ClientToken: str = ...
    ) -> SSMRegisterTaskWithMaintenanceWindowResult: ...

    def remove_tags_from_resource(self, *,
        ResourceType: str,
        ResourceId: str,
        TagKeys: List[str]
    ) -> SSMRemoveTagsFromResourceResult: ...

    def reset_service_setting(self, *,
        SettingId: str
    ) -> SSMResetServiceSettingResult: ...

    def resume_session(self, *,
        SessionId: str
    ) -> SSMResumeSessionResponse: ...

    def send_automation_signal(self, *,
        AutomationExecutionId: str,
        SignalType: str,
        Payload: Dict[str, List[str]] = ...
    ) -> SSMSendAutomationSignalResult: ...

    def send_command(self, *,
        DocumentName: str,
        InstanceIds: List[str] = ...,
        Targets: List[SSMTarget] = ...,
        DocumentVersion: str = ...,
        DocumentHash: str = ...,
        DocumentHashType: str = ...,
        TimeoutSeconds: int = ...,
        Comment: str = ...,
        Parameters: Dict[str, List[str]] = ...,
        OutputS3Region: str = ...,
        OutputS3BucketName: str = ...,
        OutputS3KeyPrefix: str = ...,
        MaxConcurrency: str = ...,
        MaxErrors: str = ...,
        ServiceRoleArn: str = ...,
        NotificationConfig: SSMNotificationConfig = ...,
        CloudWatchOutputConfig: SSMCloudWatchOutputConfig = ...
    ) -> SSMSendCommandResult: ...

    def start_associations_once(self, *,
        AssociationIds: List[str]
    ) -> SSMStartAssociationsOnceResult: ...

    def start_automation_execution(self, *,
        DocumentName: str,
        DocumentVersion: str = ...,
        Parameters: Dict[str, List[str]] = ...,
        ClientToken: str = ...,
        Mode: str = ...,
        TargetParameterName: str = ...,
        Targets: List[SSMTarget] = ...,
        TargetMaps: List[Dict[str, List[str]]] = ...,
        MaxConcurrency: str = ...,
        MaxErrors: str = ...,
        TargetLocations: List[SSMTargetLocation] = ...
    ) -> SSMStartAutomationExecutionResult: ...

    def start_session(self, *,
        Target: str,
        DocumentName: str = ...,
        Parameters: Dict[str, List[str]] = ...
    ) -> SSMStartSessionResponse: ...

    def stop_automation_execution(self, *,
        AutomationExecutionId: str,
        Type: str = ...
    ) -> SSMStopAutomationExecutionResult: ...

    def terminate_session(self, *,
        SessionId: str
    ) -> SSMTerminateSessionResponse: ...

    def update_association(self, *,
        AssociationId: str,
        Parameters: Dict[str, List[str]] = ...,
        DocumentVersion: str = ...,
        ScheduleExpression: str = ...,
        OutputLocation: SSMInstanceAssociationOutputLocation = ...,
        Name: str = ...,
        Targets: List[SSMTarget] = ...,
        AssociationName: str = ...,
        AssociationVersion: str = ...,
        AutomationTargetParameterName: str = ...,
        MaxErrors: str = ...,
        MaxConcurrency: str = ...,
        ComplianceSeverity: str = ...
    ) -> SSMUpdateAssociationResult: ...

    def update_association_status(self, *,
        Name: str,
        InstanceId: str,
        AssociationStatus: SSMAssociationStatus
    ) -> SSMUpdateAssociationStatusResult: ...

    def update_document(self, *,
        Content: str,
        Name: str,
        Attachments: List[SSMAttachmentsSource] = ...,
        VersionName: str = ...,
        DocumentVersion: str = ...,
        DocumentFormat: str = ...,
        TargetType: str = ...
    ) -> SSMUpdateDocumentResult: ...

    def update_document_default_version(self, *,
        Name: str,
        DocumentVersion: str
    ) -> SSMUpdateDocumentDefaultVersionResult: ...

    def update_maintenance_window(self, *,
        WindowId: str,
        Name: str = ...,
        Description: str = ...,
        StartDate: str = ...,
        EndDate: str = ...,
        Schedule: str = ...,
        ScheduleTimezone: str = ...,
        Duration: int = ...,
        Cutoff: int = ...,
        AllowUnassociatedTargets: bool = ...,
        Enabled: bool = ...,
        Replace: bool = ...
    ) -> SSMUpdateMaintenanceWindowResult: ...

    def update_maintenance_window_target(self, *,
        WindowId: str,
        WindowTargetId: str,
        Targets: List[SSMTarget] = ...,
        OwnerInformation: str = ...,
        Name: str = ...,
        Description: str = ...,
        Replace: bool = ...
    ) -> SSMUpdateMaintenanceWindowTargetResult: ...

    def update_maintenance_window_task(self, *,
        WindowId: str,
        WindowTaskId: str,
        Targets: List[SSMTarget] = ...,
        TaskArn: str = ...,
        ServiceRoleArn: str = ...,
        TaskParameters: Dict[str, SSMMaintenanceWindowTaskParameterValueExpression] = ...,
        TaskInvocationParameters: SSMMaintenanceWindowTaskInvocationParameters = ...,
        Priority: int = ...,
        MaxConcurrency: str = ...,
        MaxErrors: str = ...,
        LoggingInfo: SSMLoggingInfo = ...,
        Name: str = ...,
        Description: str = ...,
        Replace: bool = ...
    ) -> SSMUpdateMaintenanceWindowTaskResult: ...

    def update_managed_instance_role(self, *,
        InstanceId: str,
        IamRole: str
    ) -> SSMUpdateManagedInstanceRoleResult: ...

    def update_patch_baseline(self, *,
        BaselineId: str,
        Name: str = ...,
        GlobalFilters: SSMPatchFilterGroup = ...,
        ApprovalRules: SSMPatchRuleGroup = ...,
        ApprovedPatches: List[str] = ...,
        ApprovedPatchesComplianceLevel: str = ...,
        ApprovedPatchesEnableNonSecurity: bool = ...,
        RejectedPatches: List[str] = ...,
        RejectedPatchesAction: str = ...,
        Description: str = ...,
        Sources: List[SSMPatchSource] = ...,
        Replace: bool = ...
    ) -> SSMUpdatePatchBaselineResult: ...

    def update_service_setting(self, *,
        SettingId: str,
        SettingValue: str
    ) -> SSMUpdateServiceSettingResult: ...


class SSMTag(TypedDict):
    Key: str
    Value: str


class SSMAddTagsToResourceResult(TypedDict, total=False):
    pass


class SSMCancelCommandResult(TypedDict, total=False):
    pass


class SSMCancelMaintenanceWindowExecutionResult(TypedDict, total=False):
    WindowExecutionId: str


class SSMCreateActivationResult(TypedDict, total=False):
    ActivationId: str
    ActivationCode: str


class SSMTarget(TypedDict, total=False):
    Key: str
    Values: List[str]


class SSMInstanceAssociationOutputLocation(TypedDict, total=False):
    S3Location: SSMS3OutputLocation


class SSMS3OutputLocation(TypedDict, total=False):
    OutputS3Region: str
    OutputS3BucketName: str
    OutputS3KeyPrefix: str


class SSMCreateAssociationResult(TypedDict, total=False):
    AssociationDescription: SSMAssociationDescription


class SSMAssociationDescription(TypedDict, total=False):
    Name: str
    InstanceId: str
    AssociationVersion: str
    Date: datetime.datetime
    LastUpdateAssociationDate: datetime.datetime
    Status: SSMAssociationStatus
    Overview: SSMAssociationOverview
    DocumentVersion: str
    AutomationTargetParameterName: str
    Parameters: Dict[str, List[str]]
    AssociationId: str
    Targets: List[SSMTarget]
    ScheduleExpression: str
    OutputLocation: SSMInstanceAssociationOutputLocation
    LastExecutionDate: datetime.datetime
    LastSuccessfulExecutionDate: datetime.datetime
    AssociationName: str
    MaxErrors: str
    MaxConcurrency: str
    ComplianceSeverity: str


class _SSMAssociationStatus(TypedDict):
    Date: datetime.datetime
    Name: str
    Message: str


class SSMAssociationStatus(_SSMAssociationStatus, total=False):
    AdditionalInfo: str


class SSMAssociationOverview(TypedDict, total=False):
    Status: str
    DetailedStatus: str
    AssociationStatusAggregatedCount: Dict[str, int]


class _SSMCreateAssociationBatchRequestEntry(TypedDict):
    Name: str


class SSMCreateAssociationBatchRequestEntry(_SSMCreateAssociationBatchRequestEntry, total=False):
    InstanceId: str
    Parameters: Dict[str, List[str]]
    AutomationTargetParameterName: str
    DocumentVersion: str
    Targets: List[SSMTarget]
    ScheduleExpression: str
    OutputLocation: SSMInstanceAssociationOutputLocation
    AssociationName: str
    MaxErrors: str
    MaxConcurrency: str
    ComplianceSeverity: str


class SSMCreateAssociationBatchResult(TypedDict, total=False):
    Successful: List[SSMAssociationDescription]
    Failed: List[SSMFailedCreateAssociation]


class SSMFailedCreateAssociation(TypedDict, total=False):
    Entry: SSMCreateAssociationBatchRequestEntry
    Message: str
    Fault: str


class SSMAttachmentsSource(TypedDict, total=False):
    Key: str
    Values: List[str]


class SSMCreateDocumentResult(TypedDict, total=False):
    DocumentDescription: SSMDocumentDescription


class SSMDocumentDescription(TypedDict, total=False):
    Sha1: str
    Hash: str
    HashType: str
    Name: str
    VersionName: str
    Owner: str
    CreatedDate: datetime.datetime
    Status: str
    StatusInformation: str
    DocumentVersion: str
    Description: str
    Parameters: List[SSMDocumentParameter]
    PlatformTypes: List[str]
    DocumentType: str
    SchemaVersion: str
    LatestVersion: str
    DefaultVersion: str
    DocumentFormat: str
    TargetType: str
    Tags: List[SSMTag]
    AttachmentsInformation: List[SSMAttachmentInformation]


class SSMDocumentParameter(TypedDict, total=False):
    Name: str
    Type: str
    Description: str
    DefaultValue: str


class SSMAttachmentInformation(TypedDict, total=False):
    Name: str


class SSMCreateMaintenanceWindowResult(TypedDict, total=False):
    WindowId: str


class SSMPatchFilterGroup(TypedDict):
    PatchFilters: List[SSMPatchFilter]


class SSMPatchFilter(TypedDict):
    Key: str
    Values: List[str]


class SSMPatchRuleGroup(TypedDict):
    PatchRules: List[SSMPatchRule]


class _SSMPatchRule(TypedDict):
    PatchFilterGroup: SSMPatchFilterGroup
    ApproveAfterDays: int


class SSMPatchRule(_SSMPatchRule, total=False):
    ComplianceLevel: str
    EnableNonSecurity: bool


class SSMPatchSource(TypedDict):
    Name: str
    Products: List[str]
    Configuration: str


class SSMCreatePatchBaselineResult(TypedDict, total=False):
    BaselineId: str


class _SSMResourceDataSyncS3Destination(TypedDict):
    BucketName: str
    SyncFormat: str
    Region: str


class SSMResourceDataSyncS3Destination(_SSMResourceDataSyncS3Destination, total=False):
    Prefix: str
    AWSKMSKeyARN: str


class SSMCreateResourceDataSyncResult(TypedDict, total=False):
    pass


class SSMDeleteActivationResult(TypedDict, total=False):
    pass


class SSMDeleteAssociationResult(TypedDict, total=False):
    pass


class SSMDeleteDocumentResult(TypedDict, total=False):
    pass


class SSMDeleteInventoryResult(TypedDict, total=False):
    DeletionId: str
    TypeName: str
    DeletionSummary: SSMInventoryDeletionSummary


class SSMInventoryDeletionSummary(TypedDict, total=False):
    TotalCount: int
    RemainingCount: int
    SummaryItems: List[SSMInventoryDeletionSummaryItem]


class SSMInventoryDeletionSummaryItem(TypedDict, total=False):
    Version: str
    Count: int
    RemainingCount: int


class SSMDeleteMaintenanceWindowResult(TypedDict, total=False):
    WindowId: str


class SSMDeleteParameterResult(TypedDict, total=False):
    pass


class SSMDeleteParametersResult(TypedDict, total=False):
    DeletedParameters: List[str]
    InvalidParameters: List[str]


class SSMDeletePatchBaselineResult(TypedDict, total=False):
    BaselineId: str


class SSMDeleteResourceDataSyncResult(TypedDict, total=False):
    pass


class SSMDeregisterManagedInstanceResult(TypedDict, total=False):
    pass


class SSMDeregisterPatchBaselineForPatchGroupResult(TypedDict, total=False):
    BaselineId: str
    PatchGroup: str


class SSMDeregisterTargetFromMaintenanceWindowResult(TypedDict, total=False):
    WindowId: str
    WindowTargetId: str


class SSMDeregisterTaskFromMaintenanceWindowResult(TypedDict, total=False):
    WindowId: str
    WindowTaskId: str


class SSMDescribeActivationsFilter(TypedDict, total=False):
    FilterKey: str
    FilterValues: List[str]


class SSMDescribeActivationsResult(TypedDict, total=False):
    ActivationList: List[SSMActivation]
    NextToken: str


class SSMActivation(TypedDict, total=False):
    ActivationId: str
    Description: str
    DefaultInstanceName: str
    IamRole: str
    RegistrationLimit: int
    RegistrationsCount: int
    ExpirationDate: datetime.datetime
    Expired: bool
    CreatedDate: datetime.datetime
    Tags: List[SSMTag]


class SSMDescribeAssociationResult(TypedDict, total=False):
    AssociationDescription: SSMAssociationDescription


class SSMAssociationExecutionTargetsFilter(TypedDict):
    Key: str
    Value: str


class SSMDescribeAssociationExecutionTargetsResult(TypedDict, total=False):
    AssociationExecutionTargets: List[SSMAssociationExecutionTarget]
    NextToken: str


class SSMAssociationExecutionTarget(TypedDict, total=False):
    AssociationId: str
    AssociationVersion: str
    ExecutionId: str
    ResourceId: str
    ResourceType: str
    Status: str
    DetailedStatus: str
    LastExecutionDate: datetime.datetime
    OutputSource: SSMOutputSource


class SSMOutputSource(TypedDict, total=False):
    OutputSourceId: str
    OutputSourceType: str


class SSMAssociationExecutionFilter(TypedDict):
    Key: str
    Value: str
    Type: str


class SSMDescribeAssociationExecutionsResult(TypedDict, total=False):
    AssociationExecutions: List[SSMAssociationExecution]
    NextToken: str


class SSMAssociationExecution(TypedDict, total=False):
    AssociationId: str
    AssociationVersion: str
    ExecutionId: str
    Status: str
    DetailedStatus: str
    CreatedTime: datetime.datetime
    LastExecutionDate: datetime.datetime
    ResourceCountByStatus: str


class SSMAutomationExecutionFilter(TypedDict):
    Key: str
    Values: List[str]


class SSMDescribeAutomationExecutionsResult(TypedDict, total=False):
    AutomationExecutionMetadataList: List[SSMAutomationExecutionMetadata]
    NextToken: str


class SSMAutomationExecutionMetadata(TypedDict, total=False):
    AutomationExecutionId: str
    DocumentName: str
    DocumentVersion: str
    AutomationExecutionStatus: str
    ExecutionStartTime: datetime.datetime
    ExecutionEndTime: datetime.datetime
    ExecutedBy: str
    LogFile: str
    Outputs: Dict[str, List[str]]
    Mode: str
    ParentAutomationExecutionId: str
    CurrentStepName: str
    CurrentAction: str
    FailureMessage: str
    TargetParameterName: str
    Targets: List[SSMTarget]
    TargetMaps: List[Dict[str, List[str]]]
    ResolvedTargets: SSMResolvedTargets
    MaxConcurrency: str
    MaxErrors: str
    Target: str
    AutomationType: str


class SSMResolvedTargets(TypedDict, total=False):
    ParameterValues: List[str]
    Truncated: bool


class SSMStepExecutionFilter(TypedDict):
    Key: str
    Values: List[str]


class SSMDescribeAutomationStepExecutionsResult(TypedDict, total=False):
    StepExecutions: List[SSMStepExecution]
    NextToken: str


class SSMStepExecution(TypedDict, total=False):
    StepName: str
    Action: str
    TimeoutSeconds: int
    OnFailure: str
    MaxAttempts: int
    ExecutionStartTime: datetime.datetime
    ExecutionEndTime: datetime.datetime
    StepStatus: str
    ResponseCode: str
    Inputs: Dict[str, str]
    Outputs: Dict[str, List[str]]
    Response: str
    FailureMessage: str
    FailureDetails: SSMFailureDetails
    StepExecutionId: str
    OverriddenParameters: Dict[str, List[str]]
    IsEnd: bool
    NextStep: str
    IsCritical: bool
    ValidNextSteps: List[str]
    Targets: List[SSMTarget]
    TargetLocation: SSMTargetLocation


class SSMFailureDetails(TypedDict, total=False):
    FailureStage: str
    FailureType: str
    Details: Dict[str, List[str]]


class SSMTargetLocation(TypedDict, total=False):
    Accounts: List[str]
    Regions: List[str]
    TargetLocationMaxConcurrency: str
    TargetLocationMaxErrors: str
    ExecutionRoleName: str


class SSMPatchOrchestratorFilter(TypedDict, total=False):
    Key: str
    Values: List[str]


class SSMDescribeAvailablePatchesResult(TypedDict, total=False):
    Patches: List[SSMPatch]
    NextToken: str


class SSMPatch(TypedDict, total=False):
    Id: str
    ReleaseDate: datetime.datetime
    Title: str
    Description: str
    ContentUrl: str
    Vendor: str
    ProductFamily: str
    Product: str
    Classification: str
    MsrcSeverity: str
    KbNumber: str
    MsrcNumber: str
    Language: str


class SSMDescribeDocumentResult(TypedDict, total=False):
    Document: SSMDocumentDescription


class SSMDescribeDocumentPermissionResponse(TypedDict, total=False):
    AccountIds: List[str]


class SSMDescribeEffectiveInstanceAssociationsResult(TypedDict, total=False):
    Associations: List[SSMInstanceAssociation]
    NextToken: str


class SSMInstanceAssociation(TypedDict, total=False):
    AssociationId: str
    InstanceId: str
    Content: str
    AssociationVersion: str


class SSMDescribeEffectivePatchesForPatchBaselineResult(TypedDict, total=False):
    EffectivePatches: List[SSMEffectivePatch]
    NextToken: str


class SSMEffectivePatch(TypedDict, total=False):
    Patch: SSMPatch
    PatchStatus: SSMPatchStatus


class SSMPatchStatus(TypedDict, total=False):
    DeploymentStatus: str
    ComplianceLevel: str
    ApprovalDate: datetime.datetime


class SSMDescribeInstanceAssociationsStatusResult(TypedDict, total=False):
    InstanceAssociationStatusInfos: List[SSMInstanceAssociationStatusInfo]
    NextToken: str


class SSMInstanceAssociationStatusInfo(TypedDict, total=False):
    AssociationId: str
    Name: str
    DocumentVersion: str
    AssociationVersion: str
    InstanceId: str
    ExecutionDate: datetime.datetime
    Status: str
    DetailedStatus: str
    ExecutionSummary: str
    ErrorCode: str
    OutputUrl: SSMInstanceAssociationOutputUrl
    AssociationName: str


class SSMInstanceAssociationOutputUrl(TypedDict, total=False):
    S3OutputUrl: SSMS3OutputUrl


class SSMS3OutputUrl(TypedDict, total=False):
    OutputUrl: str


class SSMInstanceInformationFilter(TypedDict):
    key: str
    valueSet: List[str]


class SSMInstanceInformationStringFilter(TypedDict):
    Key: str
    Values: List[str]


class SSMDescribeInstanceInformationResult(TypedDict, total=False):
    InstanceInformationList: List[SSMInstanceInformation]
    NextToken: str


class SSMInstanceInformation(TypedDict, total=False):
    InstanceId: str
    PingStatus: str
    LastPingDateTime: datetime.datetime
    AgentVersion: str
    IsLatestVersion: bool
    PlatformType: str
    PlatformName: str
    PlatformVersion: str
    ActivationId: str
    IamRole: str
    RegistrationDate: datetime.datetime
    ResourceType: str
    Name: str
    IPAddress: str
    ComputerName: str
    AssociationStatus: str
    LastAssociationExecutionDate: datetime.datetime
    LastSuccessfulAssociationExecutionDate: datetime.datetime
    AssociationOverview: SSMInstanceAggregatedAssociationOverview


class SSMInstanceAggregatedAssociationOverview(TypedDict, total=False):
    DetailedStatus: str
    InstanceAssociationStatusAggregatedCount: Dict[str, int]


class SSMDescribeInstancePatchStatesResult(TypedDict, total=False):
    InstancePatchStates: List[SSMInstancePatchState]
    NextToken: str


class _SSMInstancePatchState(TypedDict):
    InstanceId: str
    PatchGroup: str
    BaselineId: str
    OperationStartTime: datetime.datetime
    OperationEndTime: datetime.datetime
    Operation: str


class SSMInstancePatchState(_SSMInstancePatchState, total=False):
    SnapshotId: str
    InstallOverrideList: str
    OwnerInformation: str
    InstalledCount: int
    InstalledOtherCount: int
    InstalledRejectedCount: int
    MissingCount: int
    FailedCount: int
    UnreportedNotApplicableCount: int
    NotApplicableCount: int


class SSMInstancePatchStateFilter(TypedDict):
    Key: str
    Values: List[str]
    Type: str


class SSMDescribeInstancePatchStatesForPatchGroupResult(TypedDict, total=False):
    InstancePatchStates: List[SSMInstancePatchState]
    NextToken: str


class SSMDescribeInstancePatchesResult(TypedDict, total=False):
    Patches: List[SSMPatchComplianceData]
    NextToken: str


class SSMPatchComplianceData(TypedDict):
    Title: str
    KBId: str
    Classification: str
    Severity: str
    State: str
    InstalledTime: datetime.datetime


class SSMDescribeInventoryDeletionsResult(TypedDict, total=False):
    InventoryDeletions: List[SSMInventoryDeletionStatusItem]
    NextToken: str


class SSMInventoryDeletionStatusItem(TypedDict, total=False):
    DeletionId: str
    TypeName: str
    DeletionStartTime: datetime.datetime
    LastStatus: str
    LastStatusMessage: str
    DeletionSummary: SSMInventoryDeletionSummary
    LastStatusUpdateTime: datetime.datetime


class SSMMaintenanceWindowFilter(TypedDict, total=False):
    Key: str
    Values: List[str]


class SSMDescribeMaintenanceWindowExecutionTaskInvocationsResult(TypedDict, total=False):
    WindowExecutionTaskInvocationIdentities: List[SSMMaintenanceWindowExecutionTaskInvocationIdentity]
    NextToken: str


class SSMMaintenanceWindowExecutionTaskInvocationIdentity(TypedDict, total=False):
    WindowExecutionId: str
    TaskExecutionId: str
    InvocationId: str
    ExecutionId: str
    TaskType: str
    Parameters: str
    Status: str
    StatusDetails: str
    StartTime: datetime.datetime
    EndTime: datetime.datetime
    OwnerInformation: str
    WindowTargetId: str


class SSMDescribeMaintenanceWindowExecutionTasksResult(TypedDict, total=False):
    WindowExecutionTaskIdentities: List[SSMMaintenanceWindowExecutionTaskIdentity]
    NextToken: str


class SSMMaintenanceWindowExecutionTaskIdentity(TypedDict, total=False):
    WindowExecutionId: str
    TaskExecutionId: str
    Status: str
    StatusDetails: str
    StartTime: datetime.datetime
    EndTime: datetime.datetime
    TaskArn: str
    TaskType: str


class SSMDescribeMaintenanceWindowExecutionsResult(TypedDict, total=False):
    WindowExecutions: List[SSMMaintenanceWindowExecution]
    NextToken: str


class SSMMaintenanceWindowExecution(TypedDict, total=False):
    WindowId: str
    WindowExecutionId: str
    Status: str
    StatusDetails: str
    StartTime: datetime.datetime
    EndTime: datetime.datetime


class SSMDescribeMaintenanceWindowScheduleResult(TypedDict, total=False):
    ScheduledWindowExecutions: List[SSMScheduledWindowExecution]
    NextToken: str


class SSMScheduledWindowExecution(TypedDict, total=False):
    WindowId: str
    Name: str
    ExecutionTime: str


class SSMDescribeMaintenanceWindowTargetsResult(TypedDict, total=False):
    Targets: List[SSMMaintenanceWindowTarget]
    NextToken: str


class SSMMaintenanceWindowTarget(TypedDict, total=False):
    WindowId: str
    WindowTargetId: str
    ResourceType: str
    Targets: List[SSMTarget]
    OwnerInformation: str
    Name: str
    Description: str


class SSMDescribeMaintenanceWindowTasksResult(TypedDict, total=False):
    Tasks: List[SSMMaintenanceWindowTask]
    NextToken: str


class SSMMaintenanceWindowTask(TypedDict, total=False):
    WindowId: str
    WindowTaskId: str
    TaskArn: str
    Type: str
    Targets: List[SSMTarget]
    TaskParameters: Dict[str, SSMMaintenanceWindowTaskParameterValueExpression]
    Priority: int
    LoggingInfo: SSMLoggingInfo
    ServiceRoleArn: str
    MaxConcurrency: str
    MaxErrors: str
    Name: str
    Description: str


class SSMMaintenanceWindowTaskParameterValueExpression(TypedDict, total=False):
    Values: List[str]


class _SSMLoggingInfo(TypedDict):
    S3BucketName: str
    S3Region: str


class SSMLoggingInfo(_SSMLoggingInfo, total=False):
    S3KeyPrefix: str


class SSMDescribeMaintenanceWindowsResult(TypedDict, total=False):
    WindowIdentities: List[SSMMaintenanceWindowIdentity]
    NextToken: str


class SSMMaintenanceWindowIdentity(TypedDict, total=False):
    WindowId: str
    Name: str
    Description: str
    Enabled: bool
    Duration: int
    Cutoff: int
    Schedule: str
    ScheduleTimezone: str
    EndDate: str
    StartDate: str
    NextExecutionTime: str


class SSMDescribeMaintenanceWindowsForTargetResult(TypedDict, total=False):
    WindowIdentities: List[SSMMaintenanceWindowIdentityForTarget]
    NextToken: str


class SSMMaintenanceWindowIdentityForTarget(TypedDict, total=False):
    WindowId: str
    Name: str


class SSMParametersFilter(TypedDict):
    Key: str
    Values: List[str]


class _SSMParameterStringFilter(TypedDict):
    Key: str


class SSMParameterStringFilter(_SSMParameterStringFilter, total=False):
    Option: str
    Values: List[str]


class SSMDescribeParametersResult(TypedDict, total=False):
    Parameters: List[SSMParameterMetadata]
    NextToken: str


class SSMParameterMetadata(TypedDict, total=False):
    Name: str
    Type: str
    KeyId: str
    LastModifiedDate: datetime.datetime
    LastModifiedUser: str
    Description: str
    AllowedPattern: str
    Version: int
    Tier: str
    Policies: List[SSMParameterInlinePolicy]


class SSMParameterInlinePolicy(TypedDict, total=False):
    PolicyText: str
    PolicyType: str
    PolicyStatus: str


class SSMDescribePatchBaselinesResult(TypedDict, total=False):
    BaselineIdentities: List[SSMPatchBaselineIdentity]
    NextToken: str


class SSMPatchBaselineIdentity(TypedDict, total=False):
    BaselineId: str
    BaselineName: str
    OperatingSystem: str
    BaselineDescription: str
    DefaultBaseline: bool


class SSMDescribePatchGroupStateResult(TypedDict, total=False):
    Instances: int
    InstancesWithInstalledPatches: int
    InstancesWithInstalledOtherPatches: int
    InstancesWithInstalledRejectedPatches: int
    InstancesWithMissingPatches: int
    InstancesWithFailedPatches: int
    InstancesWithNotApplicablePatches: int
    InstancesWithUnreportedNotApplicablePatches: int


class SSMDescribePatchGroupsResult(TypedDict, total=False):
    Mappings: List[SSMPatchGroupPatchBaselineMapping]
    NextToken: str


class SSMPatchGroupPatchBaselineMapping(TypedDict, total=False):
    PatchGroup: str
    BaselineIdentity: SSMPatchBaselineIdentity


class SSMDescribePatchPropertiesResult(TypedDict, total=False):
    Properties: List[Dict[str, str]]
    NextToken: str


class SSMSessionFilter(TypedDict):
    key: str
    value: str


class SSMDescribeSessionsResponse(TypedDict, total=False):
    Sessions: List[SSMSession]
    NextToken: str


class SSMSession(TypedDict, total=False):
    SessionId: str
    Target: str
    Status: str
    StartDate: datetime.datetime
    EndDate: datetime.datetime
    DocumentName: str
    Owner: str
    Details: str
    OutputUrl: SSMSessionManagerOutputUrl


class SSMSessionManagerOutputUrl(TypedDict, total=False):
    S3OutputUrl: str
    CloudWatchOutputUrl: str


class SSMGetAutomationExecutionResult(TypedDict, total=False):
    AutomationExecution: SSMAutomationExecution


class SSMAutomationExecution(TypedDict, total=False):
    AutomationExecutionId: str
    DocumentName: str
    DocumentVersion: str
    ExecutionStartTime: datetime.datetime
    ExecutionEndTime: datetime.datetime
    AutomationExecutionStatus: str
    StepExecutions: List[SSMStepExecution]
    StepExecutionsTruncated: bool
    Parameters: Dict[str, List[str]]
    Outputs: Dict[str, List[str]]
    FailureMessage: str
    Mode: str
    ParentAutomationExecutionId: str
    ExecutedBy: str
    CurrentStepName: str
    CurrentAction: str
    TargetParameterName: str
    Targets: List[SSMTarget]
    TargetMaps: List[Dict[str, List[str]]]
    ResolvedTargets: SSMResolvedTargets
    MaxConcurrency: str
    MaxErrors: str
    Target: str
    TargetLocations: List[SSMTargetLocation]
    ProgressCounters: SSMProgressCounters


class SSMProgressCounters(TypedDict, total=False):
    TotalSteps: int
    SuccessSteps: int
    FailedSteps: int
    CancelledSteps: int
    TimedOutSteps: int


class SSMGetCommandInvocationResult(TypedDict, total=False):
    CommandId: str
    InstanceId: str
    Comment: str
    DocumentName: str
    DocumentVersion: str
    PluginName: str
    ResponseCode: int
    ExecutionStartDateTime: str
    ExecutionElapsedTime: str
    ExecutionEndDateTime: str
    Status: str
    StatusDetails: str
    StandardOutputContent: str
    StandardOutputUrl: str
    StandardErrorContent: str
    StandardErrorUrl: str
    CloudWatchOutputConfig: SSMCloudWatchOutputConfig


class SSMCloudWatchOutputConfig(TypedDict, total=False):
    CloudWatchLogGroupName: str
    CloudWatchOutputEnabled: bool


class SSMGetConnectionStatusResponse(TypedDict, total=False):
    Target: str
    Status: str


class SSMGetDefaultPatchBaselineResult(TypedDict, total=False):
    BaselineId: str
    OperatingSystem: str


class SSMGetDeployablePatchSnapshotForInstanceResult(TypedDict, total=False):
    InstanceId: str
    SnapshotId: str
    SnapshotDownloadUrl: str
    Product: str


class SSMGetDocumentResult(TypedDict, total=False):
    Name: str
    VersionName: str
    DocumentVersion: str
    Status: str
    StatusInformation: str
    Content: str
    DocumentType: str
    DocumentFormat: str
    AttachmentsContent: List[SSMAttachmentContent]


class SSMAttachmentContent(TypedDict, total=False):
    Name: str
    Size: int
    Hash: str
    HashType: str
    Url: str


class _SSMInventoryFilter(TypedDict):
    Key: str
    Values: List[str]


class SSMInventoryFilter(_SSMInventoryFilter, total=False):
    Type: str


class SSMInventoryAggregator(TypedDict, total=False):
    Expression: str
    Aggregators: List[SSMInventoryAggregator]
    Groups: List[SSMInventoryGroup]


class SSMInventoryGroup(TypedDict):
    Name: str
    Filters: List[SSMInventoryFilter]


class SSMResultAttribute(TypedDict):
    TypeName: str


class SSMGetInventoryResult(TypedDict, total=False):
    Entities: List[SSMInventoryResultEntity]
    NextToken: str


class SSMInventoryResultEntity(TypedDict, total=False):
    Id: str
    Data: Dict[str, SSMInventoryResultItem]


class _SSMInventoryResultItem(TypedDict):
    TypeName: str
    SchemaVersion: str
    Content: List[Dict[str, str]]


class SSMInventoryResultItem(_SSMInventoryResultItem, total=False):
    CaptureTime: str
    ContentHash: str


class SSMGetInventorySchemaResult(TypedDict, total=False):
    Schemas: List[SSMInventoryItemSchema]
    NextToken: str


class _SSMInventoryItemSchema(TypedDict):
    TypeName: str
    Attributes: List[SSMInventoryItemAttribute]


class SSMInventoryItemSchema(_SSMInventoryItemSchema, total=False):
    Version: str
    DisplayName: str


class SSMInventoryItemAttribute(TypedDict):
    Name: str
    DataType: str


class SSMGetMaintenanceWindowResult(TypedDict, total=False):
    WindowId: str
    Name: str
    Description: str
    StartDate: str
    EndDate: str
    Schedule: str
    ScheduleTimezone: str
    NextExecutionTime: str
    Duration: int
    Cutoff: int
    AllowUnassociatedTargets: bool
    Enabled: bool
    CreatedDate: datetime.datetime
    ModifiedDate: datetime.datetime


class SSMGetMaintenanceWindowExecutionResult(TypedDict, total=False):
    WindowExecutionId: str
    TaskIds: List[str]
    Status: str
    StatusDetails: str
    StartTime: datetime.datetime
    EndTime: datetime.datetime


class SSMGetMaintenanceWindowExecutionTaskResult(TypedDict, total=False):
    WindowExecutionId: str
    TaskExecutionId: str
    TaskArn: str
    ServiceRole: str
    Type: str
    TaskParameters: List[Dict[str, SSMMaintenanceWindowTaskParameterValueExpression]]
    Priority: int
    MaxConcurrency: str
    MaxErrors: str
    Status: str
    StatusDetails: str
    StartTime: datetime.datetime
    EndTime: datetime.datetime


class SSMGetMaintenanceWindowExecutionTaskInvocationResult(TypedDict, total=False):
    WindowExecutionId: str
    TaskExecutionId: str
    InvocationId: str
    ExecutionId: str
    TaskType: str
    Parameters: str
    Status: str
    StatusDetails: str
    StartTime: datetime.datetime
    EndTime: datetime.datetime
    OwnerInformation: str
    WindowTargetId: str


class SSMGetMaintenanceWindowTaskResult(TypedDict, total=False):
    WindowId: str
    WindowTaskId: str
    Targets: List[SSMTarget]
    TaskArn: str
    ServiceRoleArn: str
    TaskType: str
    TaskParameters: Dict[str, SSMMaintenanceWindowTaskParameterValueExpression]
    TaskInvocationParameters: SSMMaintenanceWindowTaskInvocationParameters
    Priority: int
    MaxConcurrency: str
    MaxErrors: str
    LoggingInfo: SSMLoggingInfo
    Name: str
    Description: str


class SSMMaintenanceWindowTaskInvocationParameters(TypedDict, total=False):
    RunCommand: SSMMaintenanceWindowRunCommandParameters
    Automation: SSMMaintenanceWindowAutomationParameters
    StepFunctions: SSMMaintenanceWindowStepFunctionsParameters
    Lambda: SSMMaintenanceWindowLambdaParameters


class SSMMaintenanceWindowRunCommandParameters(TypedDict, total=False):
    Comment: str
    DocumentHash: str
    DocumentHashType: str
    NotificationConfig: SSMNotificationConfig
    OutputS3BucketName: str
    OutputS3KeyPrefix: str
    Parameters: Dict[str, List[str]]
    ServiceRoleArn: str
    TimeoutSeconds: int


class SSMNotificationConfig(TypedDict, total=False):
    NotificationArn: str
    NotificationEvents: List[str]
    NotificationType: str


class SSMMaintenanceWindowAutomationParameters(TypedDict, total=False):
    DocumentVersion: str
    Parameters: Dict[str, List[str]]


class SSMMaintenanceWindowStepFunctionsParameters(TypedDict, total=False):
    Input: str
    Name: str


class SSMMaintenanceWindowLambdaParameters(TypedDict, total=False):
    ClientContext: str
    Qualifier: str
    Payload: bytes


class SSMGetParameterResult(TypedDict, total=False):
    Parameter: SSMParameter


class SSMParameter(TypedDict, total=False):
    Name: str
    Type: str
    Value: str
    Version: int
    Selector: str
    SourceResult: str
    LastModifiedDate: datetime.datetime
    ARN: str


class SSMGetParameterHistoryResult(TypedDict, total=False):
    Parameters: List[SSMParameterHistory]
    NextToken: str


class SSMParameterHistory(TypedDict, total=False):
    Name: str
    Type: str
    KeyId: str
    LastModifiedDate: datetime.datetime
    LastModifiedUser: str
    Description: str
    Value: str
    AllowedPattern: str
    Version: int
    Labels: List[str]
    Tier: str
    Policies: List[SSMParameterInlinePolicy]


class SSMGetParametersResult(TypedDict, total=False):
    Parameters: List[SSMParameter]
    InvalidParameters: List[str]


class SSMGetParametersByPathResult(TypedDict, total=False):
    Parameters: List[SSMParameter]
    NextToken: str


class SSMGetPatchBaselineResult(TypedDict, total=False):
    BaselineId: str
    Name: str
    OperatingSystem: str
    GlobalFilters: SSMPatchFilterGroup
    ApprovalRules: SSMPatchRuleGroup
    ApprovedPatches: List[str]
    ApprovedPatchesComplianceLevel: str
    ApprovedPatchesEnableNonSecurity: bool
    RejectedPatches: List[str]
    RejectedPatchesAction: str
    PatchGroups: List[str]
    CreatedDate: datetime.datetime
    ModifiedDate: datetime.datetime
    Description: str
    Sources: List[SSMPatchSource]


class SSMGetPatchBaselineForPatchGroupResult(TypedDict, total=False):
    BaselineId: str
    PatchGroup: str
    OperatingSystem: str


class SSMGetServiceSettingResult(TypedDict, total=False):
    ServiceSetting: SSMServiceSetting


class SSMServiceSetting(TypedDict, total=False):
    SettingId: str
    SettingValue: str
    LastModifiedDate: datetime.datetime
    LastModifiedUser: str
    ARN: str
    Status: str


class SSMLabelParameterVersionResult(TypedDict, total=False):
    InvalidLabels: List[str]


class SSMListAssociationVersionsResult(TypedDict, total=False):
    AssociationVersions: List[SSMAssociationVersionInfo]
    NextToken: str


class SSMAssociationVersionInfo(TypedDict, total=False):
    AssociationId: str
    AssociationVersion: str
    CreatedDate: datetime.datetime
    Name: str
    DocumentVersion: str
    Parameters: Dict[str, List[str]]
    Targets: List[SSMTarget]
    ScheduleExpression: str
    OutputLocation: SSMInstanceAssociationOutputLocation
    AssociationName: str
    MaxErrors: str
    MaxConcurrency: str
    ComplianceSeverity: str


class SSMAssociationFilter(TypedDict):
    key: str
    value: str


class SSMListAssociationsResult(TypedDict, total=False):
    Associations: List[SSMAssociation]
    NextToken: str


class SSMAssociation(TypedDict, total=False):
    Name: str
    InstanceId: str
    AssociationId: str
    AssociationVersion: str
    DocumentVersion: str
    Targets: List[SSMTarget]
    LastExecutionDate: datetime.datetime
    Overview: SSMAssociationOverview
    ScheduleExpression: str
    AssociationName: str


class SSMCommandFilter(TypedDict):
    key: str
    value: str


class SSMListCommandInvocationsResult(TypedDict, total=False):
    CommandInvocations: List[SSMCommandInvocation]
    NextToken: str


class SSMCommandInvocation(TypedDict, total=False):
    CommandId: str
    InstanceId: str
    InstanceName: str
    Comment: str
    DocumentName: str
    DocumentVersion: str
    RequestedDateTime: datetime.datetime
    Status: str
    StatusDetails: str
    TraceOutput: str
    StandardOutputUrl: str
    StandardErrorUrl: str
    CommandPlugins: List[SSMCommandPlugin]
    ServiceRole: str
    NotificationConfig: SSMNotificationConfig
    CloudWatchOutputConfig: SSMCloudWatchOutputConfig


class SSMCommandPlugin(TypedDict, total=False):
    Name: str
    Status: str
    StatusDetails: str
    ResponseCode: int
    ResponseStartDateTime: datetime.datetime
    ResponseFinishDateTime: datetime.datetime
    Output: str
    StandardOutputUrl: str
    StandardErrorUrl: str
    OutputS3Region: str
    OutputS3BucketName: str
    OutputS3KeyPrefix: str


class SSMListCommandsResult(TypedDict, total=False):
    Commands: List[SSMCommand]
    NextToken: str


class SSMCommand(TypedDict, total=False):
    CommandId: str
    DocumentName: str
    DocumentVersion: str
    Comment: str
    ExpiresAfter: datetime.datetime
    Parameters: Dict[str, List[str]]
    InstanceIds: List[str]
    Targets: List[SSMTarget]
    RequestedDateTime: datetime.datetime
    Status: str
    StatusDetails: str
    OutputS3Region: str
    OutputS3BucketName: str
    OutputS3KeyPrefix: str
    MaxConcurrency: str
    MaxErrors: str
    TargetCount: int
    CompletedCount: int
    ErrorCount: int
    DeliveryTimedOutCount: int
    ServiceRole: str
    NotificationConfig: SSMNotificationConfig
    CloudWatchOutputConfig: SSMCloudWatchOutputConfig


class SSMComplianceStringFilter(TypedDict, total=False):
    Key: str
    Values: List[str]
    Type: str


class SSMListComplianceItemsResult(TypedDict, total=False):
    ComplianceItems: List[SSMComplianceItem]
    NextToken: str


class SSMComplianceItem(TypedDict, total=False):
    ComplianceType: str
    ResourceType: str
    ResourceId: str
    Id: str
    Title: str
    Status: str
    Severity: str
    ExecutionSummary: SSMComplianceExecutionSummary
    Details: Dict[str, str]


class _SSMComplianceExecutionSummary(TypedDict):
    ExecutionTime: datetime.datetime


class SSMComplianceExecutionSummary(_SSMComplianceExecutionSummary, total=False):
    ExecutionId: str
    ExecutionType: str


class SSMListComplianceSummariesResult(TypedDict, total=False):
    ComplianceSummaryItems: List[SSMComplianceSummaryItem]
    NextToken: str


class SSMComplianceSummaryItem(TypedDict, total=False):
    ComplianceType: str
    CompliantSummary: SSMCompliantSummary
    NonCompliantSummary: SSMNonCompliantSummary


class SSMCompliantSummary(TypedDict, total=False):
    CompliantCount: int
    SeveritySummary: SSMSeveritySummary


class SSMSeveritySummary(TypedDict, total=False):
    CriticalCount: int
    HighCount: int
    MediumCount: int
    LowCount: int
    InformationalCount: int
    UnspecifiedCount: int


class SSMNonCompliantSummary(TypedDict, total=False):
    NonCompliantCount: int
    SeveritySummary: SSMSeveritySummary


class SSMListDocumentVersionsResult(TypedDict, total=False):
    DocumentVersions: List[SSMDocumentVersionInfo]
    NextToken: str


class SSMDocumentVersionInfo(TypedDict, total=False):
    Name: str
    DocumentVersion: str
    VersionName: str
    CreatedDate: datetime.datetime
    IsDefaultVersion: bool
    DocumentFormat: str
    Status: str
    StatusInformation: str


class SSMDocumentFilter(TypedDict):
    key: str
    value: str


class SSMDocumentKeyValuesFilter(TypedDict, total=False):
    Key: str
    Values: List[str]


class SSMListDocumentsResult(TypedDict, total=False):
    DocumentIdentifiers: List[SSMDocumentIdentifier]
    NextToken: str


class SSMDocumentIdentifier(TypedDict, total=False):
    Name: str
    Owner: str
    VersionName: str
    PlatformTypes: List[str]
    DocumentVersion: str
    DocumentType: str
    SchemaVersion: str
    DocumentFormat: str
    TargetType: str
    Tags: List[SSMTag]


class SSMListInventoryEntriesResult(TypedDict, total=False):
    TypeName: str
    InstanceId: str
    SchemaVersion: str
    CaptureTime: str
    Entries: List[Dict[str, str]]
    NextToken: str


class SSMListResourceComplianceSummariesResult(TypedDict, total=False):
    ResourceComplianceSummaryItems: List[SSMResourceComplianceSummaryItem]
    NextToken: str


class SSMResourceComplianceSummaryItem(TypedDict, total=False):
    ComplianceType: str
    ResourceType: str
    ResourceId: str
    Status: str
    OverallSeverity: str
    ExecutionSummary: SSMComplianceExecutionSummary
    CompliantSummary: SSMCompliantSummary
    NonCompliantSummary: SSMNonCompliantSummary


class SSMListResourceDataSyncResult(TypedDict, total=False):
    ResourceDataSyncItems: List[SSMResourceDataSyncItem]
    NextToken: str


class SSMResourceDataSyncItem(TypedDict, total=False):
    SyncName: str
    S3Destination: SSMResourceDataSyncS3Destination
    LastSyncTime: datetime.datetime
    LastSuccessfulSyncTime: datetime.datetime
    LastStatus: str
    SyncCreatedTime: datetime.datetime
    LastSyncStatusMessage: str


class SSMListTagsForResourceResult(TypedDict, total=False):
    TagList: List[SSMTag]


class SSMModifyDocumentPermissionResponse(TypedDict, total=False):
    pass


class _SSMComplianceItemEntry(TypedDict):
    Severity: str
    Status: str


class SSMComplianceItemEntry(_SSMComplianceItemEntry, total=False):
    Id: str
    Title: str
    Details: Dict[str, str]


class SSMPutComplianceItemsResult(TypedDict, total=False):
    pass


class _SSMInventoryItem(TypedDict):
    TypeName: str
    SchemaVersion: str
    CaptureTime: str


class SSMInventoryItem(_SSMInventoryItem, total=False):
    ContentHash: str
    Content: List[Dict[str, str]]
    Context: Dict[str, str]


class SSMPutInventoryResult(TypedDict, total=False):
    Message: str


class SSMPutParameterResult(TypedDict, total=False):
    Version: int


class SSMRegisterDefaultPatchBaselineResult(TypedDict, total=False):
    BaselineId: str


class SSMRegisterPatchBaselineForPatchGroupResult(TypedDict, total=False):
    BaselineId: str
    PatchGroup: str


class SSMRegisterTargetWithMaintenanceWindowResult(TypedDict, total=False):
    WindowTargetId: str


class SSMRegisterTaskWithMaintenanceWindowResult(TypedDict, total=False):
    WindowTaskId: str


class SSMRemoveTagsFromResourceResult(TypedDict, total=False):
    pass


class SSMResetServiceSettingResult(TypedDict, total=False):
    ServiceSetting: SSMServiceSetting


class SSMResumeSessionResponse(TypedDict, total=False):
    SessionId: str
    TokenValue: str
    StreamUrl: str


class SSMSendAutomationSignalResult(TypedDict, total=False):
    pass


class SSMSendCommandResult(TypedDict, total=False):
    Command: SSMCommand


class SSMStartAssociationsOnceResult(TypedDict, total=False):
    pass


class SSMStartAutomationExecutionResult(TypedDict, total=False):
    AutomationExecutionId: str


class SSMStartSessionResponse(TypedDict, total=False):
    SessionId: str
    TokenValue: str
    StreamUrl: str


class SSMStopAutomationExecutionResult(TypedDict, total=False):
    pass


class SSMTerminateSessionResponse(TypedDict, total=False):
    SessionId: str


class SSMUpdateAssociationResult(TypedDict, total=False):
    AssociationDescription: SSMAssociationDescription


class SSMUpdateAssociationStatusResult(TypedDict, total=False):
    AssociationDescription: SSMAssociationDescription


class SSMUpdateDocumentResult(TypedDict, total=False):
    DocumentDescription: SSMDocumentDescription


class SSMUpdateDocumentDefaultVersionResult(TypedDict, total=False):
    Description: SSMDocumentDefaultVersionDescription


class SSMDocumentDefaultVersionDescription(TypedDict, total=False):
    Name: str
    DefaultVersion: str
    DefaultVersionName: str


class SSMUpdateMaintenanceWindowResult(TypedDict, total=False):
    WindowId: str
    Name: str
    Description: str
    StartDate: str
    EndDate: str
    Schedule: str
    ScheduleTimezone: str
    Duration: int
    Cutoff: int
    AllowUnassociatedTargets: bool
    Enabled: bool


class SSMUpdateMaintenanceWindowTargetResult(TypedDict, total=False):
    WindowId: str
    WindowTargetId: str
    Targets: List[SSMTarget]
    OwnerInformation: str
    Name: str
    Description: str


class SSMUpdateMaintenanceWindowTaskResult(TypedDict, total=False):
    WindowId: str
    WindowTaskId: str
    Targets: List[SSMTarget]
    TaskArn: str
    ServiceRoleArn: str
    TaskParameters: Dict[str, SSMMaintenanceWindowTaskParameterValueExpression]
    TaskInvocationParameters: SSMMaintenanceWindowTaskInvocationParameters
    Priority: int
    MaxConcurrency: str
    MaxErrors: str
    LoggingInfo: SSMLoggingInfo
    Name: str
    Description: str


class SSMUpdateManagedInstanceRoleResult(TypedDict, total=False):
    pass


class SSMUpdatePatchBaselineResult(TypedDict, total=False):
    BaselineId: str
    Name: str
    OperatingSystem: str
    GlobalFilters: SSMPatchFilterGroup
    ApprovalRules: SSMPatchRuleGroup
    ApprovedPatches: List[str]
    ApprovedPatchesComplianceLevel: str
    ApprovedPatchesEnableNonSecurity: bool
    RejectedPatches: List[str]
    RejectedPatchesAction: str
    CreatedDate: datetime.datetime
    ModifiedDate: datetime.datetime
    Description: str
    Sources: List[SSMPatchSource]


class SSMUpdateServiceSettingResult(TypedDict, total=False):
    pass


class SFN(BaseClient):
    def create_activity(self, *,
        name: str,
        tags: List[SFNTag] = ...
    ) -> SFNCreateActivityOutput: ...

    def create_state_machine(self, *,
        name: str,
        definition: str,
        roleArn: str,
        tags: List[SFNTag] = ...
    ) -> SFNCreateStateMachineOutput: ...

    def delete_activity(self, *,
        activityArn: str
    ) -> SFNDeleteActivityOutput: ...

    def delete_state_machine(self, *,
        stateMachineArn: str
    ) -> SFNDeleteStateMachineOutput: ...

    def describe_activity(self, *,
        activityArn: str
    ) -> SFNDescribeActivityOutput: ...

    def describe_execution(self, *,
        executionArn: str
    ) -> SFNDescribeExecutionOutput: ...

    def describe_state_machine(self, *,
        stateMachineArn: str
    ) -> SFNDescribeStateMachineOutput: ...

    def describe_state_machine_for_execution(self, *,
        executionArn: str
    ) -> SFNDescribeStateMachineForExecutionOutput: ...

    def get_activity_task(self, *,
        activityArn: str,
        workerName: str = ...
    ) -> SFNGetActivityTaskOutput: ...

    def get_execution_history(self, *,
        executionArn: str,
        maxResults: int = ...,
        reverseOrder: bool = ...,
        nextToken: str = ...
    ) -> SFNGetExecutionHistoryOutput: ...

    def list_activities(self, *,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> SFNListActivitiesOutput: ...

    def list_executions(self, *,
        stateMachineArn: str,
        statusFilter: str = ...,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> SFNListExecutionsOutput: ...

    def list_state_machines(self, *,
        maxResults: int = ...,
        nextToken: str = ...
    ) -> SFNListStateMachinesOutput: ...

    def list_tags_for_resource(self, *,
        resourceArn: str
    ) -> SFNListTagsForResourceOutput: ...

    def send_task_failure(self, *,
        taskToken: str,
        error: str = ...,
        cause: str = ...
    ) -> SFNSendTaskFailureOutput: ...

    def send_task_heartbeat(self, *,
        taskToken: str
    ) -> SFNSendTaskHeartbeatOutput: ...

    def send_task_success(self, *,
        taskToken: str,
        output: str
    ) -> SFNSendTaskSuccessOutput: ...

    def start_execution(self, *,
        stateMachineArn: str,
        name: str = ...,
        input: str = ...
    ) -> SFNStartExecutionOutput: ...

    def stop_execution(self, *,
        executionArn: str,
        error: str = ...,
        cause: str = ...
    ) -> SFNStopExecutionOutput: ...

    def tag_resource(self, *,
        resourceArn: str,
        tags: List[SFNTag]
    ) -> SFNTagResourceOutput: ...

    def untag_resource(self, *,
        resourceArn: str,
        tagKeys: List[str]
    ) -> SFNUntagResourceOutput: ...

    def update_state_machine(self, *,
        stateMachineArn: str,
        definition: str = ...,
        roleArn: str = ...
    ) -> SFNUpdateStateMachineOutput: ...


class SFNTag(TypedDict, total=False):
    key: str
    value: str


class SFNCreateActivityOutput(TypedDict):
    activityArn: str
    creationDate: datetime.datetime


class SFNCreateStateMachineOutput(TypedDict):
    stateMachineArn: str
    creationDate: datetime.datetime


class SFNDeleteActivityOutput(TypedDict, total=False):
    pass


class SFNDeleteStateMachineOutput(TypedDict, total=False):
    pass


class SFNDescribeActivityOutput(TypedDict):
    activityArn: str
    name: str
    creationDate: datetime.datetime


class _SFNDescribeExecutionOutput(TypedDict):
    executionArn: str
    stateMachineArn: str
    status: str
    startDate: datetime.datetime
    input: str


class SFNDescribeExecutionOutput(_SFNDescribeExecutionOutput, total=False):
    name: str
    stopDate: datetime.datetime
    output: str


class _SFNDescribeStateMachineOutput(TypedDict):
    stateMachineArn: str
    name: str
    definition: str
    roleArn: str
    creationDate: datetime.datetime


class SFNDescribeStateMachineOutput(_SFNDescribeStateMachineOutput, total=False):
    status: str


class SFNDescribeStateMachineForExecutionOutput(TypedDict):
    stateMachineArn: str
    name: str
    definition: str
    roleArn: str
    updateDate: datetime.datetime


class SFNGetActivityTaskOutput(TypedDict, total=False):
    taskToken: str
    input: str


class _SFNGetExecutionHistoryOutput(TypedDict):
    events: List[SFNHistoryEvent]


class SFNGetExecutionHistoryOutput(_SFNGetExecutionHistoryOutput, total=False):
    nextToken: str


class _SFNHistoryEvent(TypedDict):
    timestamp: datetime.datetime
    type: str
    id: int


class SFNHistoryEvent(_SFNHistoryEvent, total=False):
    previousEventId: int
    activityFailedEventDetails: SFNActivityFailedEventDetails
    activityScheduleFailedEventDetails: SFNActivityScheduleFailedEventDetails
    activityScheduledEventDetails: SFNActivityScheduledEventDetails
    activityStartedEventDetails: SFNActivityStartedEventDetails
    activitySucceededEventDetails: SFNActivitySucceededEventDetails
    activityTimedOutEventDetails: SFNActivityTimedOutEventDetails
    taskFailedEventDetails: SFNTaskFailedEventDetails
    taskScheduledEventDetails: SFNTaskScheduledEventDetails
    taskStartFailedEventDetails: SFNTaskStartFailedEventDetails
    taskStartedEventDetails: SFNTaskStartedEventDetails
    taskSubmitFailedEventDetails: SFNTaskSubmitFailedEventDetails
    taskSubmittedEventDetails: SFNTaskSubmittedEventDetails
    taskSucceededEventDetails: SFNTaskSucceededEventDetails
    taskTimedOutEventDetails: SFNTaskTimedOutEventDetails
    executionFailedEventDetails: SFNExecutionFailedEventDetails
    executionStartedEventDetails: SFNExecutionStartedEventDetails
    executionSucceededEventDetails: SFNExecutionSucceededEventDetails
    executionAbortedEventDetails: SFNExecutionAbortedEventDetails
    executionTimedOutEventDetails: SFNExecutionTimedOutEventDetails
    lambdaFunctionFailedEventDetails: SFNLambdaFunctionFailedEventDetails
    lambdaFunctionScheduleFailedEventDetails: SFNLambdaFunctionScheduleFailedEventDetails
    lambdaFunctionScheduledEventDetails: SFNLambdaFunctionScheduledEventDetails
    lambdaFunctionStartFailedEventDetails: SFNLambdaFunctionStartFailedEventDetails
    lambdaFunctionSucceededEventDetails: SFNLambdaFunctionSucceededEventDetails
    lambdaFunctionTimedOutEventDetails: SFNLambdaFunctionTimedOutEventDetails
    stateEnteredEventDetails: SFNStateEnteredEventDetails
    stateExitedEventDetails: SFNStateExitedEventDetails


class SFNActivityFailedEventDetails(TypedDict, total=False):
    error: str
    cause: str


class SFNActivityScheduleFailedEventDetails(TypedDict, total=False):
    error: str
    cause: str


class _SFNActivityScheduledEventDetails(TypedDict):
    resource: str


class SFNActivityScheduledEventDetails(_SFNActivityScheduledEventDetails, total=False):
    input: str
    timeoutInSeconds: int
    heartbeatInSeconds: int


class SFNActivityStartedEventDetails(TypedDict, total=False):
    workerName: str


class SFNActivitySucceededEventDetails(TypedDict, total=False):
    output: str


class SFNActivityTimedOutEventDetails(TypedDict, total=False):
    error: str
    cause: str


class _SFNTaskFailedEventDetails(TypedDict):
    resourceType: str
    resource: str


class SFNTaskFailedEventDetails(_SFNTaskFailedEventDetails, total=False):
    error: str
    cause: str


class _SFNTaskScheduledEventDetails(TypedDict):
    resourceType: str
    resource: str
    region: str
    parameters: str


class SFNTaskScheduledEventDetails(_SFNTaskScheduledEventDetails, total=False):
    timeoutInSeconds: int


class _SFNTaskStartFailedEventDetails(TypedDict):
    resourceType: str
    resource: str


class SFNTaskStartFailedEventDetails(_SFNTaskStartFailedEventDetails, total=False):
    error: str
    cause: str


class SFNTaskStartedEventDetails(TypedDict):
    resourceType: str
    resource: str


class _SFNTaskSubmitFailedEventDetails(TypedDict):
    resourceType: str
    resource: str


class SFNTaskSubmitFailedEventDetails(_SFNTaskSubmitFailedEventDetails, total=False):
    error: str
    cause: str


class _SFNTaskSubmittedEventDetails(TypedDict):
    resourceType: str
    resource: str


class SFNTaskSubmittedEventDetails(_SFNTaskSubmittedEventDetails, total=False):
    output: str


class _SFNTaskSucceededEventDetails(TypedDict):
    resourceType: str
    resource: str


class SFNTaskSucceededEventDetails(_SFNTaskSucceededEventDetails, total=False):
    output: str


class _SFNTaskTimedOutEventDetails(TypedDict):
    resourceType: str
    resource: str


class SFNTaskTimedOutEventDetails(_SFNTaskTimedOutEventDetails, total=False):
    error: str
    cause: str


class SFNExecutionFailedEventDetails(TypedDict, total=False):
    error: str
    cause: str


class SFNExecutionStartedEventDetails(TypedDict, total=False):
    input: str
    roleArn: str


class SFNExecutionSucceededEventDetails(TypedDict, total=False):
    output: str


class SFNExecutionAbortedEventDetails(TypedDict, total=False):
    error: str
    cause: str


class SFNExecutionTimedOutEventDetails(TypedDict, total=False):
    error: str
    cause: str


class SFNLambdaFunctionFailedEventDetails(TypedDict, total=False):
    error: str
    cause: str


class SFNLambdaFunctionScheduleFailedEventDetails(TypedDict, total=False):
    error: str
    cause: str


class _SFNLambdaFunctionScheduledEventDetails(TypedDict):
    resource: str


class SFNLambdaFunctionScheduledEventDetails(_SFNLambdaFunctionScheduledEventDetails, total=False):
    input: str
    timeoutInSeconds: int


class SFNLambdaFunctionStartFailedEventDetails(TypedDict, total=False):
    error: str
    cause: str


class SFNLambdaFunctionSucceededEventDetails(TypedDict, total=False):
    output: str


class SFNLambdaFunctionTimedOutEventDetails(TypedDict, total=False):
    error: str
    cause: str


class _SFNStateEnteredEventDetails(TypedDict):
    name: str


class SFNStateEnteredEventDetails(_SFNStateEnteredEventDetails, total=False):
    input: str


class _SFNStateExitedEventDetails(TypedDict):
    name: str


class SFNStateExitedEventDetails(_SFNStateExitedEventDetails, total=False):
    output: str


class _SFNListActivitiesOutput(TypedDict):
    activities: List[SFNActivityListItem]


class SFNListActivitiesOutput(_SFNListActivitiesOutput, total=False):
    nextToken: str


class SFNActivityListItem(TypedDict):
    activityArn: str
    name: str
    creationDate: datetime.datetime


class _SFNListExecutionsOutput(TypedDict):
    executions: List[SFNExecutionListItem]


class SFNListExecutionsOutput(_SFNListExecutionsOutput, total=False):
    nextToken: str


class _SFNExecutionListItem(TypedDict):
    executionArn: str
    stateMachineArn: str
    name: str
    status: str
    startDate: datetime.datetime


class SFNExecutionListItem(_SFNExecutionListItem, total=False):
    stopDate: datetime.datetime


class _SFNListStateMachinesOutput(TypedDict):
    stateMachines: List[SFNStateMachineListItem]


class SFNListStateMachinesOutput(_SFNListStateMachinesOutput, total=False):
    nextToken: str


class SFNStateMachineListItem(TypedDict):
    stateMachineArn: str
    name: str
    creationDate: datetime.datetime


class SFNListTagsForResourceOutput(TypedDict, total=False):
    tags: List[SFNTag]


class SFNSendTaskFailureOutput(TypedDict, total=False):
    pass


class SFNSendTaskHeartbeatOutput(TypedDict, total=False):
    pass


class SFNSendTaskSuccessOutput(TypedDict, total=False):
    pass


class SFNStartExecutionOutput(TypedDict):
    executionArn: str
    startDate: datetime.datetime


class SFNStopExecutionOutput(TypedDict):
    stopDate: datetime.datetime


class SFNTagResourceOutput(TypedDict, total=False):
    pass


class SFNUntagResourceOutput(TypedDict, total=False):
    pass


class SFNUpdateStateMachineOutput(TypedDict):
    updateDate: datetime.datetime


class StorageGateway(BaseClient):
    def activate_gateway(self, *,
        ActivationKey: str,
        GatewayName: str,
        GatewayTimezone: str,
        GatewayRegion: str,
        GatewayType: str = ...,
        TapeDriveType: str = ...,
        MediumChangerType: str = ...,
        Tags: List[StorageGatewayTag] = ...
    ) -> StorageGatewayActivateGatewayOutput: ...

    def add_cache(self, *,
        GatewayARN: str,
        DiskIds: List[str]
    ) -> StorageGatewayAddCacheOutput: ...

    def add_tags_to_resource(self, *,
        ResourceARN: str,
        Tags: List[StorageGatewayTag]
    ) -> StorageGatewayAddTagsToResourceOutput: ...

    def add_upload_buffer(self, *,
        GatewayARN: str,
        DiskIds: List[str]
    ) -> StorageGatewayAddUploadBufferOutput: ...

    def add_working_storage(self, *,
        GatewayARN: str,
        DiskIds: List[str]
    ) -> StorageGatewayAddWorkingStorageOutput: ...

    def attach_volume(self, *,
        GatewayARN: str,
        VolumeARN: str,
        NetworkInterfaceId: str,
        TargetName: str = ...,
        DiskId: str = ...
    ) -> StorageGatewayAttachVolumeOutput: ...

    def cancel_archival(self, *,
        GatewayARN: str,
        TapeARN: str
    ) -> StorageGatewayCancelArchivalOutput: ...

    def cancel_retrieval(self, *,
        GatewayARN: str,
        TapeARN: str
    ) -> StorageGatewayCancelRetrievalOutput: ...

    def create_cached_iscsi_volume(self, *,
        GatewayARN: str,
        VolumeSizeInBytes: int,
        TargetName: str,
        NetworkInterfaceId: str,
        ClientToken: str,
        SnapshotId: str = ...,
        SourceVolumeARN: str = ...,
        KMSEncrypted: bool = ...,
        KMSKey: str = ...,
        Tags: List[StorageGatewayTag] = ...
    ) -> StorageGatewayCreateCachediSCSIVolumeOutput: ...

    def create_nfs_file_share(self, *,
        ClientToken: str,
        GatewayARN: str,
        Role: str,
        LocationARN: str,
        NFSFileShareDefaults: StorageGatewayNFSFileShareDefaults = ...,
        KMSEncrypted: bool = ...,
        KMSKey: str = ...,
        DefaultStorageClass: str = ...,
        ObjectACL: str = ...,
        ClientList: List[str] = ...,
        Squash: str = ...,
        ReadOnly: bool = ...,
        GuessMIMETypeEnabled: bool = ...,
        RequesterPays: bool = ...,
        Tags: List[StorageGatewayTag] = ...
    ) -> StorageGatewayCreateNFSFileShareOutput: ...

    def create_smb_file_share(self, *,
        ClientToken: str,
        GatewayARN: str,
        Role: str,
        LocationARN: str,
        KMSEncrypted: bool = ...,
        KMSKey: str = ...,
        DefaultStorageClass: str = ...,
        ObjectACL: str = ...,
        ReadOnly: bool = ...,
        GuessMIMETypeEnabled: bool = ...,
        RequesterPays: bool = ...,
        SMBACLEnabled: bool = ...,
        AdminUserList: List[str] = ...,
        ValidUserList: List[str] = ...,
        InvalidUserList: List[str] = ...,
        Authentication: str = ...,
        Tags: List[StorageGatewayTag] = ...
    ) -> StorageGatewayCreateSMBFileShareOutput: ...

    def create_snapshot(self, *,
        VolumeARN: str,
        SnapshotDescription: str,
        Tags: List[StorageGatewayTag] = ...
    ) -> StorageGatewayCreateSnapshotOutput: ...

    def create_snapshot_from_volume_recovery_point(self, *,
        VolumeARN: str,
        SnapshotDescription: str
    ) -> StorageGatewayCreateSnapshotFromVolumeRecoveryPointOutput: ...

    def create_stored_iscsi_volume(self, *,
        GatewayARN: str,
        DiskId: str,
        PreserveExistingData: bool,
        TargetName: str,
        NetworkInterfaceId: str,
        SnapshotId: str = ...,
        KMSEncrypted: bool = ...,
        KMSKey: str = ...,
        Tags: List[StorageGatewayTag] = ...
    ) -> StorageGatewayCreateStorediSCSIVolumeOutput: ...

    def create_tape_with_barcode(self, *,
        GatewayARN: str,
        TapeSizeInBytes: int,
        TapeBarcode: str,
        KMSEncrypted: bool = ...,
        KMSKey: str = ...,
        PoolId: str = ...,
        Tags: List[StorageGatewayTag] = ...
    ) -> StorageGatewayCreateTapeWithBarcodeOutput: ...

    def create_tapes(self, *,
        GatewayARN: str,
        TapeSizeInBytes: int,
        ClientToken: str,
        NumTapesToCreate: int,
        TapeBarcodePrefix: str,
        KMSEncrypted: bool = ...,
        KMSKey: str = ...,
        PoolId: str = ...,
        Tags: List[StorageGatewayTag] = ...
    ) -> StorageGatewayCreateTapesOutput: ...

    def delete_bandwidth_rate_limit(self, *,
        GatewayARN: str,
        BandwidthType: str
    ) -> StorageGatewayDeleteBandwidthRateLimitOutput: ...

    def delete_chap_credentials(self, *,
        TargetARN: str,
        InitiatorName: str
    ) -> StorageGatewayDeleteChapCredentialsOutput: ...

    def delete_file_share(self, *,
        FileShareARN: str,
        ForceDelete: bool = ...
    ) -> StorageGatewayDeleteFileShareOutput: ...

    def delete_gateway(self, *,
        GatewayARN: str
    ) -> StorageGatewayDeleteGatewayOutput: ...

    def delete_snapshot_schedule(self, *,
        VolumeARN: str
    ) -> StorageGatewayDeleteSnapshotScheduleOutput: ...

    def delete_tape(self, *,
        GatewayARN: str,
        TapeARN: str
    ) -> StorageGatewayDeleteTapeOutput: ...

    def delete_tape_archive(self, *,
        TapeARN: str
    ) -> StorageGatewayDeleteTapeArchiveOutput: ...

    def delete_volume(self, *,
        VolumeARN: str
    ) -> StorageGatewayDeleteVolumeOutput: ...

    def describe_bandwidth_rate_limit(self, *,
        GatewayARN: str
    ) -> StorageGatewayDescribeBandwidthRateLimitOutput: ...

    def describe_cache(self, *,
        GatewayARN: str
    ) -> StorageGatewayDescribeCacheOutput: ...

    def describe_cached_iscsi_volumes(self, *,
        VolumeARNs: List[str]
    ) -> StorageGatewayDescribeCachediSCSIVolumesOutput: ...

    def describe_chap_credentials(self, *,
        TargetARN: str
    ) -> StorageGatewayDescribeChapCredentialsOutput: ...

    def describe_gateway_information(self, *,
        GatewayARN: str
    ) -> StorageGatewayDescribeGatewayInformationOutput: ...

    def describe_maintenance_start_time(self, *,
        GatewayARN: str
    ) -> StorageGatewayDescribeMaintenanceStartTimeOutput: ...

    def describe_nfs_file_shares(self, *,
        FileShareARNList: List[str]
    ) -> StorageGatewayDescribeNFSFileSharesOutput: ...

    def describe_smb_file_shares(self, *,
        FileShareARNList: List[str]
    ) -> StorageGatewayDescribeSMBFileSharesOutput: ...

    def describe_smb_settings(self, *,
        GatewayARN: str
    ) -> StorageGatewayDescribeSMBSettingsOutput: ...

    def describe_snapshot_schedule(self, *,
        VolumeARN: str
    ) -> StorageGatewayDescribeSnapshotScheduleOutput: ...

    def describe_stored_iscsi_volumes(self, *,
        VolumeARNs: List[str]
    ) -> StorageGatewayDescribeStorediSCSIVolumesOutput: ...

    def describe_tape_archives(self, *,
        TapeARNs: List[str] = ...,
        Marker: str = ...,
        Limit: int = ...
    ) -> StorageGatewayDescribeTapeArchivesOutput: ...

    def describe_tape_recovery_points(self, *,
        GatewayARN: str,
        Marker: str = ...,
        Limit: int = ...
    ) -> StorageGatewayDescribeTapeRecoveryPointsOutput: ...

    def describe_tapes(self, *,
        GatewayARN: str,
        TapeARNs: List[str] = ...,
        Marker: str = ...,
        Limit: int = ...
    ) -> StorageGatewayDescribeTapesOutput: ...

    def describe_upload_buffer(self, *,
        GatewayARN: str
    ) -> StorageGatewayDescribeUploadBufferOutput: ...

    def describe_vtl_devices(self, *,
        GatewayARN: str,
        VTLDeviceARNs: List[str] = ...,
        Marker: str = ...,
        Limit: int = ...
    ) -> StorageGatewayDescribeVTLDevicesOutput: ...

    def describe_working_storage(self, *,
        GatewayARN: str
    ) -> StorageGatewayDescribeWorkingStorageOutput: ...

    def detach_volume(self, *,
        VolumeARN: str,
        ForceDetach: bool = ...
    ) -> StorageGatewayDetachVolumeOutput: ...

    def disable_gateway(self, *,
        GatewayARN: str
    ) -> StorageGatewayDisableGatewayOutput: ...

    def join_domain(self, *,
        GatewayARN: str,
        DomainName: str,
        UserName: str,
        Password: str,
        OrganizationalUnit: str = ...,
        DomainControllers: List[str] = ...
    ) -> StorageGatewayJoinDomainOutput: ...

    def list_file_shares(self, *,
        GatewayARN: str = ...,
        Limit: int = ...,
        Marker: str = ...
    ) -> StorageGatewayListFileSharesOutput: ...

    def list_gateways(self, *,
        Marker: str = ...,
        Limit: int = ...
    ) -> StorageGatewayListGatewaysOutput: ...

    def list_local_disks(self, *,
        GatewayARN: str
    ) -> StorageGatewayListLocalDisksOutput: ...

    def list_tags_for_resource(self, *,
        ResourceARN: str,
        Marker: str = ...,
        Limit: int = ...
    ) -> StorageGatewayListTagsForResourceOutput: ...

    def list_tapes(self, *,
        TapeARNs: List[str] = ...,
        Marker: str = ...,
        Limit: int = ...
    ) -> StorageGatewayListTapesOutput: ...

    def list_volume_initiators(self, *,
        VolumeARN: str
    ) -> StorageGatewayListVolumeInitiatorsOutput: ...

    def list_volume_recovery_points(self, *,
        GatewayARN: str
    ) -> StorageGatewayListVolumeRecoveryPointsOutput: ...

    def list_volumes(self, *,
        GatewayARN: str = ...,
        Marker: str = ...,
        Limit: int = ...
    ) -> StorageGatewayListVolumesOutput: ...

    def notify_when_uploaded(self, *,
        FileShareARN: str
    ) -> StorageGatewayNotifyWhenUploadedOutput: ...

    def refresh_cache(self, *,
        FileShareARN: str,
        FolderList: List[str] = ...,
        Recursive: bool = ...
    ) -> StorageGatewayRefreshCacheOutput: ...

    def remove_tags_from_resource(self, *,
        ResourceARN: str,
        TagKeys: List[str]
    ) -> StorageGatewayRemoveTagsFromResourceOutput: ...

    def reset_cache(self, *,
        GatewayARN: str
    ) -> StorageGatewayResetCacheOutput: ...

    def retrieve_tape_archive(self, *,
        TapeARN: str,
        GatewayARN: str
    ) -> StorageGatewayRetrieveTapeArchiveOutput: ...

    def retrieve_tape_recovery_point(self, *,
        TapeARN: str,
        GatewayARN: str
    ) -> StorageGatewayRetrieveTapeRecoveryPointOutput: ...

    def set_local_console_password(self, *,
        GatewayARN: str,
        LocalConsolePassword: str
    ) -> StorageGatewaySetLocalConsolePasswordOutput: ...

    def set_smb_guest_password(self, *,
        GatewayARN: str,
        Password: str
    ) -> StorageGatewaySetSMBGuestPasswordOutput: ...

    def shutdown_gateway(self, *,
        GatewayARN: str
    ) -> StorageGatewayShutdownGatewayOutput: ...

    def start_gateway(self, *,
        GatewayARN: str
    ) -> StorageGatewayStartGatewayOutput: ...

    def update_bandwidth_rate_limit(self, *,
        GatewayARN: str,
        AverageUploadRateLimitInBitsPerSec: int = ...,
        AverageDownloadRateLimitInBitsPerSec: int = ...
    ) -> StorageGatewayUpdateBandwidthRateLimitOutput: ...

    def update_chap_credentials(self, *,
        TargetARN: str,
        SecretToAuthenticateInitiator: str,
        InitiatorName: str,
        SecretToAuthenticateTarget: str = ...
    ) -> StorageGatewayUpdateChapCredentialsOutput: ...

    def update_gateway_information(self, *,
        GatewayARN: str,
        GatewayName: str = ...,
        GatewayTimezone: str = ...
    ) -> StorageGatewayUpdateGatewayInformationOutput: ...

    def update_gateway_software_now(self, *,
        GatewayARN: str
    ) -> StorageGatewayUpdateGatewaySoftwareNowOutput: ...

    def update_maintenance_start_time(self, *,
        GatewayARN: str,
        HourOfDay: int,
        MinuteOfHour: int,
        DayOfWeek: int = ...,
        DayOfMonth: int = ...
    ) -> StorageGatewayUpdateMaintenanceStartTimeOutput: ...

    def update_nfs_file_share(self, *,
        FileShareARN: str,
        KMSEncrypted: bool = ...,
        KMSKey: str = ...,
        NFSFileShareDefaults: StorageGatewayNFSFileShareDefaults = ...,
        DefaultStorageClass: str = ...,
        ObjectACL: str = ...,
        ClientList: List[str] = ...,
        Squash: str = ...,
        ReadOnly: bool = ...,
        GuessMIMETypeEnabled: bool = ...,
        RequesterPays: bool = ...
    ) -> StorageGatewayUpdateNFSFileShareOutput: ...

    def update_smb_file_share(self, *,
        FileShareARN: str,
        KMSEncrypted: bool = ...,
        KMSKey: str = ...,
        DefaultStorageClass: str = ...,
        ObjectACL: str = ...,
        ReadOnly: bool = ...,
        GuessMIMETypeEnabled: bool = ...,
        RequesterPays: bool = ...,
        SMBACLEnabled: bool = ...,
        AdminUserList: List[str] = ...,
        ValidUserList: List[str] = ...,
        InvalidUserList: List[str] = ...
    ) -> StorageGatewayUpdateSMBFileShareOutput: ...

    def update_snapshot_schedule(self, *,
        VolumeARN: str,
        StartAt: int,
        RecurrenceInHours: int,
        Description: str = ...,
        Tags: List[StorageGatewayTag] = ...
    ) -> StorageGatewayUpdateSnapshotScheduleOutput: ...

    def update_vtl_device_type(self, *,
        VTLDeviceARN: str,
        DeviceType: str
    ) -> StorageGatewayUpdateVTLDeviceTypeOutput: ...


class StorageGatewayTag(TypedDict):
    Key: str
    Value: str


class StorageGatewayActivateGatewayOutput(TypedDict, total=False):
    GatewayARN: str


class StorageGatewayAddCacheOutput(TypedDict, total=False):
    GatewayARN: str


class StorageGatewayAddTagsToResourceOutput(TypedDict, total=False):
    ResourceARN: str


class StorageGatewayAddUploadBufferOutput(TypedDict, total=False):
    GatewayARN: str


class StorageGatewayAddWorkingStorageOutput(TypedDict, total=False):
    GatewayARN: str


class StorageGatewayAttachVolumeOutput(TypedDict, total=False):
    VolumeARN: str
    TargetARN: str


class StorageGatewayCancelArchivalOutput(TypedDict, total=False):
    TapeARN: str


class StorageGatewayCancelRetrievalOutput(TypedDict, total=False):
    TapeARN: str


class StorageGatewayCreateCachediSCSIVolumeOutput(TypedDict, total=False):
    VolumeARN: str
    TargetARN: str


class StorageGatewayNFSFileShareDefaults(TypedDict, total=False):
    FileMode: str
    DirectoryMode: str
    GroupId: int
    OwnerId: int


class StorageGatewayCreateNFSFileShareOutput(TypedDict, total=False):
    FileShareARN: str


class StorageGatewayCreateSMBFileShareOutput(TypedDict, total=False):
    FileShareARN: str


class StorageGatewayCreateSnapshotOutput(TypedDict, total=False):
    VolumeARN: str
    SnapshotId: str


class StorageGatewayCreateSnapshotFromVolumeRecoveryPointOutput(TypedDict, total=False):
    SnapshotId: str
    VolumeARN: str
    VolumeRecoveryPointTime: str


class StorageGatewayCreateStorediSCSIVolumeOutput(TypedDict, total=False):
    VolumeARN: str
    VolumeSizeInBytes: int
    TargetARN: str


class StorageGatewayCreateTapeWithBarcodeOutput(TypedDict, total=False):
    TapeARN: str


class StorageGatewayCreateTapesOutput(TypedDict, total=False):
    TapeARNs: List[str]


class StorageGatewayDeleteBandwidthRateLimitOutput(TypedDict, total=False):
    GatewayARN: str


class StorageGatewayDeleteChapCredentialsOutput(TypedDict, total=False):
    TargetARN: str
    InitiatorName: str


class StorageGatewayDeleteFileShareOutput(TypedDict, total=False):
    FileShareARN: str


class StorageGatewayDeleteGatewayOutput(TypedDict, total=False):
    GatewayARN: str


class StorageGatewayDeleteSnapshotScheduleOutput(TypedDict, total=False):
    VolumeARN: str


class StorageGatewayDeleteTapeOutput(TypedDict, total=False):
    TapeARN: str


class StorageGatewayDeleteTapeArchiveOutput(TypedDict, total=False):
    TapeARN: str


class StorageGatewayDeleteVolumeOutput(TypedDict, total=False):
    VolumeARN: str


class StorageGatewayDescribeBandwidthRateLimitOutput(TypedDict, total=False):
    GatewayARN: str
    AverageUploadRateLimitInBitsPerSec: int
    AverageDownloadRateLimitInBitsPerSec: int


class StorageGatewayDescribeCacheOutput(TypedDict, total=False):
    GatewayARN: str
    DiskIds: List[str]
    CacheAllocatedInBytes: int
    CacheUsedPercentage: float
    CacheDirtyPercentage: float
    CacheHitPercentage: float
    CacheMissPercentage: float


class StorageGatewayDescribeCachediSCSIVolumesOutput(TypedDict, total=False):
    CachediSCSIVolumes: List[StorageGatewayCachediSCSIVolume]


class StorageGatewayCachediSCSIVolume(TypedDict, total=False):
    VolumeARN: str
    VolumeId: str
    VolumeType: str
    VolumeStatus: str
    VolumeAttachmentStatus: str
    VolumeSizeInBytes: int
    VolumeProgress: float
    SourceSnapshotId: str
    VolumeiSCSIAttributes: StorageGatewayVolumeiSCSIAttributes
    CreatedDate: datetime.datetime
    VolumeUsedInBytes: int
    KMSKey: str
    TargetName: str


class StorageGatewayVolumeiSCSIAttributes(TypedDict, total=False):
    TargetARN: str
    NetworkInterfaceId: str
    NetworkInterfacePort: int
    LunNumber: int
    ChapEnabled: bool


class StorageGatewayDescribeChapCredentialsOutput(TypedDict, total=False):
    ChapCredentials: List[StorageGatewayChapInfo]


class StorageGatewayChapInfo(TypedDict, total=False):
    TargetARN: str
    SecretToAuthenticateInitiator: str
    InitiatorName: str
    SecretToAuthenticateTarget: str


class StorageGatewayDescribeGatewayInformationOutput(TypedDict, total=False):
    GatewayARN: str
    GatewayId: str
    GatewayName: str
    GatewayTimezone: str
    GatewayState: str
    GatewayNetworkInterfaces: List[StorageGatewayNetworkInterface]
    GatewayType: str
    NextUpdateAvailabilityDate: str
    LastSoftwareUpdate: str
    Ec2InstanceId: str
    Ec2InstanceRegion: str
    Tags: List[StorageGatewayTag]


class StorageGatewayNetworkInterface(TypedDict, total=False):
    Ipv4Address: str
    MacAddress: str
    Ipv6Address: str


class StorageGatewayDescribeMaintenanceStartTimeOutput(TypedDict, total=False):
    GatewayARN: str
    HourOfDay: int
    MinuteOfHour: int
    DayOfWeek: int
    DayOfMonth: int
    Timezone: str


class StorageGatewayDescribeNFSFileSharesOutput(TypedDict, total=False):
    NFSFileShareInfoList: List[StorageGatewayNFSFileShareInfo]


class StorageGatewayNFSFileShareInfo(TypedDict, total=False):
    NFSFileShareDefaults: StorageGatewayNFSFileShareDefaults
    FileShareARN: str
    FileShareId: str
    FileShareStatus: str
    GatewayARN: str
    KMSEncrypted: bool
    KMSKey: str
    Path: str
    Role: str
    LocationARN: str
    DefaultStorageClass: str
    ObjectACL: str
    ClientList: List[str]
    Squash: str
    ReadOnly: bool
    GuessMIMETypeEnabled: bool
    RequesterPays: bool
    Tags: List[StorageGatewayTag]


class StorageGatewayDescribeSMBFileSharesOutput(TypedDict, total=False):
    SMBFileShareInfoList: List[StorageGatewaySMBFileShareInfo]


class StorageGatewaySMBFileShareInfo(TypedDict, total=False):
    FileShareARN: str
    FileShareId: str
    FileShareStatus: str
    GatewayARN: str
    KMSEncrypted: bool
    KMSKey: str
    Path: str
    Role: str
    LocationARN: str
    DefaultStorageClass: str
    ObjectACL: str
    ReadOnly: bool
    GuessMIMETypeEnabled: bool
    RequesterPays: bool
    SMBACLEnabled: bool
    AdminUserList: List[str]
    ValidUserList: List[str]
    InvalidUserList: List[str]
    Authentication: str
    Tags: List[StorageGatewayTag]


class StorageGatewayDescribeSMBSettingsOutput(TypedDict, total=False):
    GatewayARN: str
    DomainName: str
    SMBGuestPasswordSet: bool


class StorageGatewayDescribeSnapshotScheduleOutput(TypedDict, total=False):
    VolumeARN: str
    StartAt: int
    RecurrenceInHours: int
    Description: str
    Timezone: str


class StorageGatewayDescribeStorediSCSIVolumesOutput(TypedDict, total=False):
    StorediSCSIVolumes: List[StorageGatewayStorediSCSIVolume]


class StorageGatewayStorediSCSIVolume(TypedDict, total=False):
    VolumeARN: str
    VolumeId: str
    VolumeType: str
    VolumeStatus: str
    VolumeAttachmentStatus: str
    VolumeSizeInBytes: int
    VolumeProgress: float
    VolumeDiskId: str
    SourceSnapshotId: str
    PreservedExistingData: bool
    VolumeiSCSIAttributes: StorageGatewayVolumeiSCSIAttributes
    CreatedDate: datetime.datetime
    VolumeUsedInBytes: int
    KMSKey: str
    TargetName: str


class StorageGatewayDescribeTapeArchivesOutput(TypedDict, total=False):
    TapeArchives: List[StorageGatewayTapeArchive]
    Marker: str


class StorageGatewayTapeArchive(TypedDict, total=False):
    TapeARN: str
    TapeBarcode: str
    TapeCreatedDate: datetime.datetime
    TapeSizeInBytes: int
    CompletionTime: datetime.datetime
    RetrievedTo: str
    TapeStatus: str
    TapeUsedInBytes: int
    KMSKey: str
    PoolId: str


class StorageGatewayDescribeTapeRecoveryPointsOutput(TypedDict, total=False):
    GatewayARN: str
    TapeRecoveryPointInfos: List[StorageGatewayTapeRecoveryPointInfo]
    Marker: str


class StorageGatewayTapeRecoveryPointInfo(TypedDict, total=False):
    TapeARN: str
    TapeRecoveryPointTime: datetime.datetime
    TapeSizeInBytes: int
    TapeStatus: str


class StorageGatewayDescribeTapesOutput(TypedDict, total=False):
    Tapes: List[StorageGatewayTape]
    Marker: str


class StorageGatewayTape(TypedDict, total=False):
    TapeARN: str
    TapeBarcode: str
    TapeCreatedDate: datetime.datetime
    TapeSizeInBytes: int
    TapeStatus: str
    VTLDevice: str
    Progress: float
    TapeUsedInBytes: int
    KMSKey: str
    PoolId: str


class StorageGatewayDescribeUploadBufferOutput(TypedDict, total=False):
    GatewayARN: str
    DiskIds: List[str]
    UploadBufferUsedInBytes: int
    UploadBufferAllocatedInBytes: int


class StorageGatewayDescribeVTLDevicesOutput(TypedDict, total=False):
    GatewayARN: str
    VTLDevices: List[StorageGatewayVTLDevice]
    Marker: str


class StorageGatewayVTLDevice(TypedDict, total=False):
    VTLDeviceARN: str
    VTLDeviceType: str
    VTLDeviceVendor: str
    VTLDeviceProductIdentifier: str
    DeviceiSCSIAttributes: StorageGatewayDeviceiSCSIAttributes


class StorageGatewayDeviceiSCSIAttributes(TypedDict, total=False):
    TargetARN: str
    NetworkInterfaceId: str
    NetworkInterfacePort: int
    ChapEnabled: bool


class StorageGatewayDescribeWorkingStorageOutput(TypedDict, total=False):
    GatewayARN: str
    DiskIds: List[str]
    WorkingStorageUsedInBytes: int
    WorkingStorageAllocatedInBytes: int


class StorageGatewayDetachVolumeOutput(TypedDict, total=False):
    VolumeARN: str


class StorageGatewayDisableGatewayOutput(TypedDict, total=False):
    GatewayARN: str


class StorageGatewayJoinDomainOutput(TypedDict, total=False):
    GatewayARN: str


class StorageGatewayListFileSharesOutput(TypedDict, total=False):
    Marker: str
    NextMarker: str
    FileShareInfoList: List[StorageGatewayFileShareInfo]


class StorageGatewayFileShareInfo(TypedDict, total=False):
    FileShareType: str
    FileShareARN: str
    FileShareId: str
    FileShareStatus: str
    GatewayARN: str


class StorageGatewayListGatewaysOutput(TypedDict, total=False):
    Gateways: List[StorageGatewayGatewayInfo]
    Marker: str


class StorageGatewayGatewayInfo(TypedDict, total=False):
    GatewayId: str
    GatewayARN: str
    GatewayType: str
    GatewayOperationalState: str
    GatewayName: str
    Ec2InstanceId: str
    Ec2InstanceRegion: str


class StorageGatewayListLocalDisksOutput(TypedDict, total=False):
    GatewayARN: str
    Disks: List[StorageGatewayDisk]


class StorageGatewayDisk(TypedDict, total=False):
    DiskId: str
    DiskPath: str
    DiskNode: str
    DiskStatus: str
    DiskSizeInBytes: int
    DiskAllocationType: str
    DiskAllocationResource: str
    DiskAttributeList: List[str]


class StorageGatewayListTagsForResourceOutput(TypedDict, total=False):
    ResourceARN: str
    Marker: str
    Tags: List[StorageGatewayTag]


class StorageGatewayListTapesOutput(TypedDict, total=False):
    TapeInfos: List[StorageGatewayTapeInfo]
    Marker: str


class StorageGatewayTapeInfo(TypedDict, total=False):
    TapeARN: str
    TapeBarcode: str
    TapeSizeInBytes: int
    TapeStatus: str
    GatewayARN: str
    PoolId: str


class StorageGatewayListVolumeInitiatorsOutput(TypedDict, total=False):
    Initiators: List[str]


class StorageGatewayListVolumeRecoveryPointsOutput(TypedDict, total=False):
    GatewayARN: str
    VolumeRecoveryPointInfos: List[StorageGatewayVolumeRecoveryPointInfo]


class StorageGatewayVolumeRecoveryPointInfo(TypedDict, total=False):
    VolumeARN: str
    VolumeSizeInBytes: int
    VolumeUsageInBytes: int
    VolumeRecoveryPointTime: str


class StorageGatewayListVolumesOutput(TypedDict, total=False):
    GatewayARN: str
    Marker: str
    VolumeInfos: List[StorageGatewayVolumeInfo]


class StorageGatewayVolumeInfo(TypedDict, total=False):
    VolumeARN: str
    VolumeId: str
    GatewayARN: str
    GatewayId: str
    VolumeType: str
    VolumeSizeInBytes: int
    VolumeAttachmentStatus: str


class StorageGatewayNotifyWhenUploadedOutput(TypedDict, total=False):
    FileShareARN: str
    NotificationId: str


class StorageGatewayRefreshCacheOutput(TypedDict, total=False):
    FileShareARN: str
    NotificationId: str


class StorageGatewayRemoveTagsFromResourceOutput(TypedDict, total=False):
    ResourceARN: str


class StorageGatewayResetCacheOutput(TypedDict, total=False):
    GatewayARN: str


class StorageGatewayRetrieveTapeArchiveOutput(TypedDict, total=False):
    TapeARN: str


class StorageGatewayRetrieveTapeRecoveryPointOutput(TypedDict, total=False):
    TapeARN: str


class StorageGatewaySetLocalConsolePasswordOutput(TypedDict, total=False):
    GatewayARN: str


class StorageGatewaySetSMBGuestPasswordOutput(TypedDict, total=False):
    GatewayARN: str


class StorageGatewayShutdownGatewayOutput(TypedDict, total=False):
    GatewayARN: str


class StorageGatewayStartGatewayOutput(TypedDict, total=False):
    GatewayARN: str


class StorageGatewayUpdateBandwidthRateLimitOutput(TypedDict, total=False):
    GatewayARN: str


class StorageGatewayUpdateChapCredentialsOutput(TypedDict, total=False):
    TargetARN: str
    InitiatorName: str


class StorageGatewayUpdateGatewayInformationOutput(TypedDict, total=False):
    GatewayARN: str
    GatewayName: str


class StorageGatewayUpdateGatewaySoftwareNowOutput(TypedDict, total=False):
    GatewayARN: str


class StorageGatewayUpdateMaintenanceStartTimeOutput(TypedDict, total=False):
    GatewayARN: str


class StorageGatewayUpdateNFSFileShareOutput(TypedDict, total=False):
    FileShareARN: str


class StorageGatewayUpdateSMBFileShareOutput(TypedDict, total=False):
    FileShareARN: str


class StorageGatewayUpdateSnapshotScheduleOutput(TypedDict, total=False):
    VolumeARN: str


class StorageGatewayUpdateVTLDeviceTypeOutput(TypedDict, total=False):
    VTLDeviceARN: str


class STS(BaseClient):
    def assume_role(self, *,
        RoleArn: str,
        RoleSessionName: str,
        PolicyArns: List[STSPolicyDescriptorType] = ...,
        Policy: str = ...,
        DurationSeconds: int = ...,
        ExternalId: str = ...,
        SerialNumber: str = ...,
        TokenCode: str = ...
    ) -> STSAssumeRoleResponse: ...

    def assume_role_with_saml(self, *,
        RoleArn: str,
        PrincipalArn: str,
        SAMLAssertion: str,
        PolicyArns: List[STSPolicyDescriptorType] = ...,
        Policy: str = ...,
        DurationSeconds: int = ...
    ) -> STSAssumeRoleWithSAMLResponse: ...

    def assume_role_with_web_identity(self, *,
        RoleArn: str,
        RoleSessionName: str,
        WebIdentityToken: str,
        ProviderId: str = ...,
        PolicyArns: List[STSPolicyDescriptorType] = ...,
        Policy: str = ...,
        DurationSeconds: int = ...
    ) -> STSAssumeRoleWithWebIdentityResponse: ...

    def decode_authorization_message(self, *,
        EncodedMessage: str
    ) -> STSDecodeAuthorizationMessageResponse: ...

    def get_caller_identity(self) -> STSGetCallerIdentityResponse: ...

    def get_federation_token(self, *,
        Name: str,
        Policy: str = ...,
        PolicyArns: List[STSPolicyDescriptorType] = ...,
        DurationSeconds: int = ...
    ) -> STSGetFederationTokenResponse: ...

    def get_session_token(self, *,
        DurationSeconds: int = ...,
        SerialNumber: str = ...,
        TokenCode: str = ...
    ) -> STSGetSessionTokenResponse: ...


class STSPolicyDescriptorType(TypedDict, total=False):
    arn: str


class STSAssumeRoleResponse(TypedDict, total=False):
    Credentials: STSCredentials
    AssumedRoleUser: STSAssumedRoleUser
    PackedPolicySize: int


class STSCredentials(TypedDict):
    AccessKeyId: str
    SecretAccessKey: str
    SessionToken: str
    Expiration: datetime.datetime


class STSAssumedRoleUser(TypedDict):
    AssumedRoleId: str
    Arn: str


class STSAssumeRoleWithSAMLResponse(TypedDict, total=False):
    Credentials: STSCredentials
    AssumedRoleUser: STSAssumedRoleUser
    PackedPolicySize: int
    Subject: str
    SubjectType: str
    Issuer: str
    Audience: str
    NameQualifier: str


class STSAssumeRoleWithWebIdentityResponse(TypedDict, total=False):
    Credentials: STSCredentials
    SubjectFromWebIdentityToken: str
    AssumedRoleUser: STSAssumedRoleUser
    PackedPolicySize: int
    Provider: str
    Audience: str


class STSDecodeAuthorizationMessageResponse(TypedDict, total=False):
    DecodedMessage: str


class STSGetCallerIdentityResponse(TypedDict, total=False):
    UserId: str
    Account: str
    Arn: str


class STSGetFederationTokenResponse(TypedDict, total=False):
    Credentials: STSCredentials
    FederatedUser: STSFederatedUser
    PackedPolicySize: int


class STSFederatedUser(TypedDict):
    FederatedUserId: str
    Arn: str


class STSGetSessionTokenResponse(TypedDict, total=False):
    Credentials: STSCredentials


class Support(BaseClient):
    def add_attachments_to_set(self, *,
        attachments: List[SupportAttachment],
        attachmentSetId: str = ...
    ) -> SupportAddAttachmentsToSetResponse: ...

    def add_communication_to_case(self, *,
        communicationBody: str,
        caseId: str = ...,
        ccEmailAddresses: List[str] = ...,
        attachmentSetId: str = ...
    ) -> SupportAddCommunicationToCaseResponse: ...

    def create_case(self, *,
        subject: str,
        communicationBody: str,
        serviceCode: str = ...,
        severityCode: str = ...,
        categoryCode: str = ...,
        ccEmailAddresses: List[str] = ...,
        language: str = ...,
        issueType: str = ...,
        attachmentSetId: str = ...
    ) -> SupportCreateCaseResponse: ...

    def describe_attachment(self, *,
        attachmentId: str
    ) -> SupportDescribeAttachmentResponse: ...

    def describe_cases(self, *,
        caseIdList: List[str] = ...,
        displayId: str = ...,
        afterTime: str = ...,
        beforeTime: str = ...,
        includeResolvedCases: bool = ...,
        nextToken: str = ...,
        maxResults: int = ...,
        language: str = ...,
        includeCommunications: bool = ...
    ) -> SupportDescribeCasesResponse: ...

    def describe_communications(self, *,
        caseId: str,
        beforeTime: str = ...,
        afterTime: str = ...,
        nextToken: str = ...,
        maxResults: int = ...
    ) -> SupportDescribeCommunicationsResponse: ...

    def describe_services(self, *,
        serviceCodeList: List[str] = ...,
        language: str = ...
    ) -> SupportDescribeServicesResponse: ...

    def describe_severity_levels(self, *,
        language: str = ...
    ) -> SupportDescribeSeverityLevelsResponse: ...

    def describe_trusted_advisor_check_refresh_statuses(self, *,
        checkIds: List[str]
    ) -> SupportDescribeTrustedAdvisorCheckRefreshStatusesResponse: ...

    def describe_trusted_advisor_check_result(self, *,
        checkId: str,
        language: str = ...
    ) -> SupportDescribeTrustedAdvisorCheckResultResponse: ...

    def describe_trusted_advisor_check_summaries(self, *,
        checkIds: List[str]
    ) -> SupportDescribeTrustedAdvisorCheckSummariesResponse: ...

    def describe_trusted_advisor_checks(self, *,
        language: str
    ) -> SupportDescribeTrustedAdvisorChecksResponse: ...

    def refresh_trusted_advisor_check(self, *,
        checkId: str
    ) -> SupportRefreshTrustedAdvisorCheckResponse: ...

    def resolve_case(self, *,
        caseId: str = ...
    ) -> SupportResolveCaseResponse: ...


class SupportAttachment(TypedDict, total=False):
    fileName: str
    data: bytes


class SupportAddAttachmentsToSetResponse(TypedDict, total=False):
    attachmentSetId: str
    expiryTime: str


class SupportAddCommunicationToCaseResponse(TypedDict, total=False):
    result: bool


class SupportCreateCaseResponse(TypedDict, total=False):
    caseId: str


class SupportDescribeAttachmentResponse(TypedDict, total=False):
    attachment: SupportAttachment


class SupportDescribeCasesResponse(TypedDict, total=False):
    cases: List[SupportCaseDetails]
    nextToken: str


class SupportCaseDetails(TypedDict, total=False):
    caseId: str
    displayId: str
    subject: str
    status: str
    serviceCode: str
    categoryCode: str
    severityCode: str
    submittedBy: str
    timeCreated: str
    recentCommunications: SupportRecentCaseCommunications
    ccEmailAddresses: List[str]
    language: str


class SupportRecentCaseCommunications(TypedDict, total=False):
    communications: List[SupportCommunication]
    nextToken: str


class SupportCommunication(TypedDict, total=False):
    caseId: str
    body: str
    submittedBy: str
    timeCreated: str
    attachmentSet: List[SupportAttachmentDetails]


class SupportAttachmentDetails(TypedDict, total=False):
    attachmentId: str
    fileName: str


class SupportDescribeCommunicationsResponse(TypedDict, total=False):
    communications: List[SupportCommunication]
    nextToken: str


class SupportDescribeServicesResponse(TypedDict, total=False):
    services: List[SupportService]


class SupportService(TypedDict, total=False):
    code: str
    name: str
    categories: List[SupportCategory]


class SupportCategory(TypedDict, total=False):
    code: str
    name: str


class SupportDescribeSeverityLevelsResponse(TypedDict, total=False):
    severityLevels: List[SupportSeverityLevel]


class SupportSeverityLevel(TypedDict, total=False):
    code: str
    name: str


class SupportDescribeTrustedAdvisorCheckRefreshStatusesResponse(TypedDict):
    statuses: List[SupportTrustedAdvisorCheckRefreshStatus]


class SupportTrustedAdvisorCheckRefreshStatus(TypedDict):
    checkId: str
    status: str
    millisUntilNextRefreshable: int


class SupportDescribeTrustedAdvisorCheckResultResponse(TypedDict, total=False):
    result: SupportTrustedAdvisorCheckResult


class SupportTrustedAdvisorCheckResult(TypedDict):
    checkId: str
    timestamp: str
    status: str
    resourcesSummary: SupportTrustedAdvisorResourcesSummary
    categorySpecificSummary: SupportTrustedAdvisorCategorySpecificSummary
    flaggedResources: List[SupportTrustedAdvisorResourceDetail]


class SupportTrustedAdvisorResourcesSummary(TypedDict):
    resourcesProcessed: int
    resourcesFlagged: int
    resourcesIgnored: int
    resourcesSuppressed: int


class SupportTrustedAdvisorCategorySpecificSummary(TypedDict, total=False):
    costOptimizing: SupportTrustedAdvisorCostOptimizingSummary


class SupportTrustedAdvisorCostOptimizingSummary(TypedDict):
    estimatedMonthlySavings: float
    estimatedPercentMonthlySavings: float


class _SupportTrustedAdvisorResourceDetail(TypedDict):
    status: str
    resourceId: str
    metadata: List[str]


class SupportTrustedAdvisorResourceDetail(_SupportTrustedAdvisorResourceDetail, total=False):
    region: str
    isSuppressed: bool


class SupportDescribeTrustedAdvisorCheckSummariesResponse(TypedDict):
    summaries: List[SupportTrustedAdvisorCheckSummary]


class _SupportTrustedAdvisorCheckSummary(TypedDict):
    checkId: str
    timestamp: str
    status: str
    resourcesSummary: SupportTrustedAdvisorResourcesSummary
    categorySpecificSummary: SupportTrustedAdvisorCategorySpecificSummary


class SupportTrustedAdvisorCheckSummary(_SupportTrustedAdvisorCheckSummary, total=False):
    hasFlaggedResources: bool


class SupportDescribeTrustedAdvisorChecksResponse(TypedDict):
    checks: List[SupportTrustedAdvisorCheckDescription]


class SupportTrustedAdvisorCheckDescription(TypedDict):
    id: str
    name: str
    description: str
    category: str
    metadata: List[str]


class SupportRefreshTrustedAdvisorCheckResponse(TypedDict):
    status: SupportTrustedAdvisorCheckRefreshStatus


class SupportResolveCaseResponse(TypedDict, total=False):
    initialCaseStatus: str
    finalCaseStatus: str


class SWF(BaseClient):
    def count_closed_workflow_executions(self, *,
        domain: str,
        startTimeFilter: SWFExecutionTimeFilter = ...,
        closeTimeFilter: SWFExecutionTimeFilter = ...,
        executionFilter: SWFWorkflowExecutionFilter = ...,
        typeFilter: SWFWorkflowTypeFilter = ...,
        tagFilter: SWFTagFilter = ...,
        closeStatusFilter: SWFCloseStatusFilter = ...
    ) -> SWFWorkflowExecutionCount: ...

    def count_open_workflow_executions(self, *,
        domain: str,
        startTimeFilter: SWFExecutionTimeFilter,
        typeFilter: SWFWorkflowTypeFilter = ...,
        tagFilter: SWFTagFilter = ...,
        executionFilter: SWFWorkflowExecutionFilter = ...
    ) -> SWFWorkflowExecutionCount: ...

    def count_pending_activity_tasks(self, *,
        domain: str,
        taskList: SWFTaskList
    ) -> SWFPendingTaskCount: ...

    def count_pending_decision_tasks(self, *,
        domain: str,
        taskList: SWFTaskList
    ) -> SWFPendingTaskCount: ...

    def deprecate_activity_type(self, *,
        domain: str,
        activityType: SWFActivityType
    ): ...

    def deprecate_domain(self, *,
        name: str
    ): ...

    def deprecate_workflow_type(self, *,
        domain: str,
        workflowType: SWFWorkflowType
    ): ...

    def describe_activity_type(self, *,
        domain: str,
        activityType: SWFActivityType
    ) -> SWFActivityTypeDetail: ...

    def describe_domain(self, *,
        name: str
    ) -> SWFDomainDetail: ...

    def describe_workflow_execution(self, *,
        domain: str,
        execution: SWFWorkflowExecution
    ) -> SWFWorkflowExecutionDetail: ...

    def describe_workflow_type(self, *,
        domain: str,
        workflowType: SWFWorkflowType
    ) -> SWFWorkflowTypeDetail: ...

    def get_workflow_execution_history(self, *,
        domain: str,
        execution: SWFWorkflowExecution,
        nextPageToken: str = ...,
        maximumPageSize: int = ...,
        reverseOrder: bool = ...
    ) -> SWFHistory: ...

    def list_activity_types(self, *,
        domain: str,
        registrationStatus: str,
        name: str = ...,
        nextPageToken: str = ...,
        maximumPageSize: int = ...,
        reverseOrder: bool = ...
    ) -> SWFActivityTypeInfos: ...

    def list_closed_workflow_executions(self, *,
        domain: str,
        startTimeFilter: SWFExecutionTimeFilter = ...,
        closeTimeFilter: SWFExecutionTimeFilter = ...,
        executionFilter: SWFWorkflowExecutionFilter = ...,
        closeStatusFilter: SWFCloseStatusFilter = ...,
        typeFilter: SWFWorkflowTypeFilter = ...,
        tagFilter: SWFTagFilter = ...,
        nextPageToken: str = ...,
        maximumPageSize: int = ...,
        reverseOrder: bool = ...
    ) -> SWFWorkflowExecutionInfos: ...

    def list_domains(self, *,
        registrationStatus: str,
        nextPageToken: str = ...,
        maximumPageSize: int = ...,
        reverseOrder: bool = ...
    ) -> SWFDomainInfos: ...

    def list_open_workflow_executions(self, *,
        domain: str,
        startTimeFilter: SWFExecutionTimeFilter,
        typeFilter: SWFWorkflowTypeFilter = ...,
        tagFilter: SWFTagFilter = ...,
        nextPageToken: str = ...,
        maximumPageSize: int = ...,
        reverseOrder: bool = ...,
        executionFilter: SWFWorkflowExecutionFilter = ...
    ) -> SWFWorkflowExecutionInfos: ...

    def list_workflow_types(self, *,
        domain: str,
        registrationStatus: str,
        name: str = ...,
        nextPageToken: str = ...,
        maximumPageSize: int = ...,
        reverseOrder: bool = ...
    ) -> SWFWorkflowTypeInfos: ...

    def poll_for_activity_task(self, *,
        domain: str,
        taskList: SWFTaskList,
        identity: str = ...
    ) -> SWFActivityTask: ...

    def poll_for_decision_task(self, *,
        domain: str,
        taskList: SWFTaskList,
        identity: str = ...,
        nextPageToken: str = ...,
        maximumPageSize: int = ...,
        reverseOrder: bool = ...
    ) -> SWFDecisionTask: ...

    def record_activity_task_heartbeat(self, *,
        taskToken: str,
        details: str = ...
    ) -> SWFActivityTaskStatus: ...

    def register_activity_type(self, *,
        domain: str,
        name: str,
        version: str,
        description: str = ...,
        defaultTaskStartToCloseTimeout: str = ...,
        defaultTaskHeartbeatTimeout: str = ...,
        defaultTaskList: SWFTaskList = ...,
        defaultTaskPriority: str = ...,
        defaultTaskScheduleToStartTimeout: str = ...,
        defaultTaskScheduleToCloseTimeout: str = ...
    ): ...

    def register_domain(self, *,
        name: str,
        workflowExecutionRetentionPeriodInDays: str,
        description: str = ...
    ): ...

    def register_workflow_type(self, *,
        domain: str,
        name: str,
        version: str,
        description: str = ...,
        defaultTaskStartToCloseTimeout: str = ...,
        defaultExecutionStartToCloseTimeout: str = ...,
        defaultTaskList: SWFTaskList = ...,
        defaultTaskPriority: str = ...,
        defaultChildPolicy: str = ...,
        defaultLambdaRole: str = ...
    ): ...

    def request_cancel_workflow_execution(self, *,
        domain: str,
        workflowId: str,
        runId: str = ...
    ): ...

    def respond_activity_task_canceled(self, *,
        taskToken: str,
        details: str = ...
    ): ...

    def respond_activity_task_completed(self, *,
        taskToken: str,
        result: str = ...
    ): ...

    def respond_activity_task_failed(self, *,
        taskToken: str,
        reason: str = ...,
        details: str = ...
    ): ...

    def respond_decision_task_completed(self, *,
        taskToken: str,
        decisions: List[SWFDecision] = ...,
        executionContext: str = ...
    ): ...

    def signal_workflow_execution(self, *,
        domain: str,
        workflowId: str,
        signalName: str,
        runId: str = ...,
        input: str = ...
    ): ...

    def start_workflow_execution(self, *,
        domain: str,
        workflowId: str,
        workflowType: SWFWorkflowType,
        taskList: SWFTaskList = ...,
        taskPriority: str = ...,
        input: str = ...,
        executionStartToCloseTimeout: str = ...,
        tagList: List[str] = ...,
        taskStartToCloseTimeout: str = ...,
        childPolicy: str = ...,
        lambdaRole: str = ...
    ) -> SWFRun: ...

    def terminate_workflow_execution(self, *,
        domain: str,
        workflowId: str,
        runId: str = ...,
        reason: str = ...,
        details: str = ...,
        childPolicy: str = ...
    ): ...


class _SWFExecutionTimeFilter(TypedDict):
    oldestDate: datetime.datetime


class SWFExecutionTimeFilter(_SWFExecutionTimeFilter, total=False):
    latestDate: datetime.datetime


class SWFWorkflowExecutionFilter(TypedDict):
    workflowId: str


class _SWFWorkflowTypeFilter(TypedDict):
    name: str


class SWFWorkflowTypeFilter(_SWFWorkflowTypeFilter, total=False):
    version: str


class SWFTagFilter(TypedDict):
    tag: str


class SWFCloseStatusFilter(TypedDict):
    status: str


class _SWFWorkflowExecutionCount(TypedDict):
    count: int


class SWFWorkflowExecutionCount(_SWFWorkflowExecutionCount, total=False):
    truncated: bool


class SWFTaskList(TypedDict):
    name: str


class _SWFPendingTaskCount(TypedDict):
    count: int


class SWFPendingTaskCount(_SWFPendingTaskCount, total=False):
    truncated: bool


class SWFActivityType(TypedDict):
    name: str
    version: str


class SWFWorkflowType(TypedDict):
    name: str
    version: str


class SWFActivityTypeDetail(TypedDict):
    typeInfo: SWFActivityTypeInfo
    configuration: SWFActivityTypeConfiguration


class _SWFActivityTypeInfo(TypedDict):
    activityType: SWFActivityType
    status: str
    creationDate: datetime.datetime


class SWFActivityTypeInfo(_SWFActivityTypeInfo, total=False):
    description: str
    deprecationDate: datetime.datetime


class SWFActivityTypeConfiguration(TypedDict, total=False):
    defaultTaskStartToCloseTimeout: str
    defaultTaskHeartbeatTimeout: str
    defaultTaskList: SWFTaskList
    defaultTaskPriority: str
    defaultTaskScheduleToStartTimeout: str
    defaultTaskScheduleToCloseTimeout: str


class SWFDomainDetail(TypedDict):
    domainInfo: SWFDomainInfo
    configuration: SWFDomainConfiguration


class _SWFDomainInfo(TypedDict):
    name: str
    status: str


class SWFDomainInfo(_SWFDomainInfo, total=False):
    description: str


class SWFDomainConfiguration(TypedDict):
    workflowExecutionRetentionPeriodInDays: str


class SWFWorkflowExecution(TypedDict):
    workflowId: str
    runId: str


class _SWFWorkflowExecutionDetail(TypedDict):
    executionInfo: SWFWorkflowExecutionInfo
    executionConfiguration: SWFWorkflowExecutionConfiguration
    openCounts: SWFWorkflowExecutionOpenCounts


class SWFWorkflowExecutionDetail(_SWFWorkflowExecutionDetail, total=False):
    latestActivityTaskTimestamp: datetime.datetime
    latestExecutionContext: str


class _SWFWorkflowExecutionInfo(TypedDict):
    execution: SWFWorkflowExecution
    workflowType: SWFWorkflowType
    startTimestamp: datetime.datetime
    executionStatus: str


class SWFWorkflowExecutionInfo(_SWFWorkflowExecutionInfo, total=False):
    closeTimestamp: datetime.datetime
    closeStatus: str
    parent: SWFWorkflowExecution
    tagList: List[str]
    cancelRequested: bool


class _SWFWorkflowExecutionConfiguration(TypedDict):
    taskStartToCloseTimeout: str
    executionStartToCloseTimeout: str
    taskList: SWFTaskList
    childPolicy: str


class SWFWorkflowExecutionConfiguration(_SWFWorkflowExecutionConfiguration, total=False):
    taskPriority: str
    lambdaRole: str


class _SWFWorkflowExecutionOpenCounts(TypedDict):
    openActivityTasks: int
    openDecisionTasks: int
    openTimers: int
    openChildWorkflowExecutions: int


class SWFWorkflowExecutionOpenCounts(_SWFWorkflowExecutionOpenCounts, total=False):
    openLambdaFunctions: int


class SWFWorkflowTypeDetail(TypedDict):
    typeInfo: SWFWorkflowTypeInfo
    configuration: SWFWorkflowTypeConfiguration


class _SWFWorkflowTypeInfo(TypedDict):
    workflowType: SWFWorkflowType
    status: str
    creationDate: datetime.datetime


class SWFWorkflowTypeInfo(_SWFWorkflowTypeInfo, total=False):
    description: str
    deprecationDate: datetime.datetime


class SWFWorkflowTypeConfiguration(TypedDict, total=False):
    defaultTaskStartToCloseTimeout: str
    defaultExecutionStartToCloseTimeout: str
    defaultTaskList: SWFTaskList
    defaultTaskPriority: str
    defaultChildPolicy: str
    defaultLambdaRole: str


class _SWFHistory(TypedDict):
    events: List[SWFHistoryEvent]


class SWFHistory(_SWFHistory, total=False):
    nextPageToken: str


class _SWFHistoryEvent(TypedDict):
    eventTimestamp: datetime.datetime
    eventType: str
    eventId: int


class SWFHistoryEvent(_SWFHistoryEvent, total=False):
    workflowExecutionStartedEventAttributes: SWFWorkflowExecutionStartedEventAttributes
    workflowExecutionCompletedEventAttributes: SWFWorkflowExecutionCompletedEventAttributes
    completeWorkflowExecutionFailedEventAttributes: SWFCompleteWorkflowExecutionFailedEventAttributes
    workflowExecutionFailedEventAttributes: SWFWorkflowExecutionFailedEventAttributes
    failWorkflowExecutionFailedEventAttributes: SWFFailWorkflowExecutionFailedEventAttributes
    workflowExecutionTimedOutEventAttributes: SWFWorkflowExecutionTimedOutEventAttributes
    workflowExecutionCanceledEventAttributes: SWFWorkflowExecutionCanceledEventAttributes
    cancelWorkflowExecutionFailedEventAttributes: SWFCancelWorkflowExecutionFailedEventAttributes
    workflowExecutionContinuedAsNewEventAttributes: SWFWorkflowExecutionContinuedAsNewEventAttributes
    continueAsNewWorkflowExecutionFailedEventAttributes: SWFContinueAsNewWorkflowExecutionFailedEventAttributes
    workflowExecutionTerminatedEventAttributes: SWFWorkflowExecutionTerminatedEventAttributes
    workflowExecutionCancelRequestedEventAttributes: SWFWorkflowExecutionCancelRequestedEventAttributes
    decisionTaskScheduledEventAttributes: SWFDecisionTaskScheduledEventAttributes
    decisionTaskStartedEventAttributes: SWFDecisionTaskStartedEventAttributes
    decisionTaskCompletedEventAttributes: SWFDecisionTaskCompletedEventAttributes
    decisionTaskTimedOutEventAttributes: SWFDecisionTaskTimedOutEventAttributes
    activityTaskScheduledEventAttributes: SWFActivityTaskScheduledEventAttributes
    activityTaskStartedEventAttributes: SWFActivityTaskStartedEventAttributes
    activityTaskCompletedEventAttributes: SWFActivityTaskCompletedEventAttributes
    activityTaskFailedEventAttributes: SWFActivityTaskFailedEventAttributes
    activityTaskTimedOutEventAttributes: SWFActivityTaskTimedOutEventAttributes
    activityTaskCanceledEventAttributes: SWFActivityTaskCanceledEventAttributes
    activityTaskCancelRequestedEventAttributes: SWFActivityTaskCancelRequestedEventAttributes
    workflowExecutionSignaledEventAttributes: SWFWorkflowExecutionSignaledEventAttributes
    markerRecordedEventAttributes: SWFMarkerRecordedEventAttributes
    recordMarkerFailedEventAttributes: SWFRecordMarkerFailedEventAttributes
    timerStartedEventAttributes: SWFTimerStartedEventAttributes
    timerFiredEventAttributes: SWFTimerFiredEventAttributes
    timerCanceledEventAttributes: SWFTimerCanceledEventAttributes
    startChildWorkflowExecutionInitiatedEventAttributes: SWFStartChildWorkflowExecutionInitiatedEventAttributes
    childWorkflowExecutionStartedEventAttributes: SWFChildWorkflowExecutionStartedEventAttributes
    childWorkflowExecutionCompletedEventAttributes: SWFChildWorkflowExecutionCompletedEventAttributes
    childWorkflowExecutionFailedEventAttributes: SWFChildWorkflowExecutionFailedEventAttributes
    childWorkflowExecutionTimedOutEventAttributes: SWFChildWorkflowExecutionTimedOutEventAttributes
    childWorkflowExecutionCanceledEventAttributes: SWFChildWorkflowExecutionCanceledEventAttributes
    childWorkflowExecutionTerminatedEventAttributes: SWFChildWorkflowExecutionTerminatedEventAttributes
    signalExternalWorkflowExecutionInitiatedEventAttributes: SWFSignalExternalWorkflowExecutionInitiatedEventAttributes
    externalWorkflowExecutionSignaledEventAttributes: SWFExternalWorkflowExecutionSignaledEventAttributes
    signalExternalWorkflowExecutionFailedEventAttributes: SWFSignalExternalWorkflowExecutionFailedEventAttributes
    externalWorkflowExecutionCancelRequestedEventAttributes: SWFExternalWorkflowExecutionCancelRequestedEventAttributes
    requestCancelExternalWorkflowExecutionInitiatedEventAttributes: SWFRequestCancelExternalWorkflowExecutionInitiatedEventAttributes
    requestCancelExternalWorkflowExecutionFailedEventAttributes: SWFRequestCancelExternalWorkflowExecutionFailedEventAttributes
    scheduleActivityTaskFailedEventAttributes: SWFScheduleActivityTaskFailedEventAttributes
    requestCancelActivityTaskFailedEventAttributes: SWFRequestCancelActivityTaskFailedEventAttributes
    startTimerFailedEventAttributes: SWFStartTimerFailedEventAttributes
    cancelTimerFailedEventAttributes: SWFCancelTimerFailedEventAttributes
    startChildWorkflowExecutionFailedEventAttributes: SWFStartChildWorkflowExecutionFailedEventAttributes
    lambdaFunctionScheduledEventAttributes: SWFLambdaFunctionScheduledEventAttributes
    lambdaFunctionStartedEventAttributes: SWFLambdaFunctionStartedEventAttributes
    lambdaFunctionCompletedEventAttributes: SWFLambdaFunctionCompletedEventAttributes
    lambdaFunctionFailedEventAttributes: SWFLambdaFunctionFailedEventAttributes
    lambdaFunctionTimedOutEventAttributes: SWFLambdaFunctionTimedOutEventAttributes
    scheduleLambdaFunctionFailedEventAttributes: SWFScheduleLambdaFunctionFailedEventAttributes
    startLambdaFunctionFailedEventAttributes: SWFStartLambdaFunctionFailedEventAttributes


class _SWFWorkflowExecutionStartedEventAttributes(TypedDict):
    childPolicy: str
    taskList: SWFTaskList
    workflowType: SWFWorkflowType


class SWFWorkflowExecutionStartedEventAttributes(_SWFWorkflowExecutionStartedEventAttributes, total=False):
    input: str
    executionStartToCloseTimeout: str
    taskStartToCloseTimeout: str
    taskPriority: str
    tagList: List[str]
    continuedExecutionRunId: str
    parentWorkflowExecution: SWFWorkflowExecution
    parentInitiatedEventId: int
    lambdaRole: str


class _SWFWorkflowExecutionCompletedEventAttributes(TypedDict):
    decisionTaskCompletedEventId: int


class SWFWorkflowExecutionCompletedEventAttributes(_SWFWorkflowExecutionCompletedEventAttributes, total=False):
    result: str


class SWFCompleteWorkflowExecutionFailedEventAttributes(TypedDict):
    cause: str
    decisionTaskCompletedEventId: int


class _SWFWorkflowExecutionFailedEventAttributes(TypedDict):
    decisionTaskCompletedEventId: int


class SWFWorkflowExecutionFailedEventAttributes(_SWFWorkflowExecutionFailedEventAttributes, total=False):
    reason: str
    details: str


class SWFFailWorkflowExecutionFailedEventAttributes(TypedDict):
    cause: str
    decisionTaskCompletedEventId: int


class SWFWorkflowExecutionTimedOutEventAttributes(TypedDict):
    timeoutType: str
    childPolicy: str


class _SWFWorkflowExecutionCanceledEventAttributes(TypedDict):
    decisionTaskCompletedEventId: int


class SWFWorkflowExecutionCanceledEventAttributes(_SWFWorkflowExecutionCanceledEventAttributes, total=False):
    details: str


class SWFCancelWorkflowExecutionFailedEventAttributes(TypedDict):
    cause: str
    decisionTaskCompletedEventId: int


class _SWFWorkflowExecutionContinuedAsNewEventAttributes(TypedDict):
    decisionTaskCompletedEventId: int
    newExecutionRunId: str
    taskList: SWFTaskList
    childPolicy: str
    workflowType: SWFWorkflowType


class SWFWorkflowExecutionContinuedAsNewEventAttributes(_SWFWorkflowExecutionContinuedAsNewEventAttributes, total=False):
    input: str
    executionStartToCloseTimeout: str
    taskPriority: str
    taskStartToCloseTimeout: str
    tagList: List[str]
    lambdaRole: str


class SWFContinueAsNewWorkflowExecutionFailedEventAttributes(TypedDict):
    cause: str
    decisionTaskCompletedEventId: int


class _SWFWorkflowExecutionTerminatedEventAttributes(TypedDict):
    childPolicy: str


class SWFWorkflowExecutionTerminatedEventAttributes(_SWFWorkflowExecutionTerminatedEventAttributes, total=False):
    reason: str
    details: str
    cause: str


class SWFWorkflowExecutionCancelRequestedEventAttributes(TypedDict, total=False):
    externalWorkflowExecution: SWFWorkflowExecution
    externalInitiatedEventId: int
    cause: str


class _SWFDecisionTaskScheduledEventAttributes(TypedDict):
    taskList: SWFTaskList


class SWFDecisionTaskScheduledEventAttributes(_SWFDecisionTaskScheduledEventAttributes, total=False):
    taskPriority: str
    startToCloseTimeout: str


class _SWFDecisionTaskStartedEventAttributes(TypedDict):
    scheduledEventId: int


class SWFDecisionTaskStartedEventAttributes(_SWFDecisionTaskStartedEventAttributes, total=False):
    identity: str


class _SWFDecisionTaskCompletedEventAttributes(TypedDict):
    scheduledEventId: int
    startedEventId: int


class SWFDecisionTaskCompletedEventAttributes(_SWFDecisionTaskCompletedEventAttributes, total=False):
    executionContext: str


class SWFDecisionTaskTimedOutEventAttributes(TypedDict):
    timeoutType: str
    scheduledEventId: int
    startedEventId: int


class _SWFActivityTaskScheduledEventAttributes(TypedDict):
    activityType: SWFActivityType
    activityId: str
    taskList: SWFTaskList
    decisionTaskCompletedEventId: int


class SWFActivityTaskScheduledEventAttributes(_SWFActivityTaskScheduledEventAttributes, total=False):
    input: str
    control: str
    scheduleToStartTimeout: str
    scheduleToCloseTimeout: str
    startToCloseTimeout: str
    taskPriority: str
    heartbeatTimeout: str


class _SWFActivityTaskStartedEventAttributes(TypedDict):
    scheduledEventId: int


class SWFActivityTaskStartedEventAttributes(_SWFActivityTaskStartedEventAttributes, total=False):
    identity: str


class _SWFActivityTaskCompletedEventAttributes(TypedDict):
    scheduledEventId: int
    startedEventId: int


class SWFActivityTaskCompletedEventAttributes(_SWFActivityTaskCompletedEventAttributes, total=False):
    result: str


class _SWFActivityTaskFailedEventAttributes(TypedDict):
    scheduledEventId: int
    startedEventId: int


class SWFActivityTaskFailedEventAttributes(_SWFActivityTaskFailedEventAttributes, total=False):
    reason: str
    details: str


class _SWFActivityTaskTimedOutEventAttributes(TypedDict):
    timeoutType: str
    scheduledEventId: int
    startedEventId: int


class SWFActivityTaskTimedOutEventAttributes(_SWFActivityTaskTimedOutEventAttributes, total=False):
    details: str


class _SWFActivityTaskCanceledEventAttributes(TypedDict):
    scheduledEventId: int
    startedEventId: int


class SWFActivityTaskCanceledEventAttributes(_SWFActivityTaskCanceledEventAttributes, total=False):
    details: str
    latestCancelRequestedEventId: int


class SWFActivityTaskCancelRequestedEventAttributes(TypedDict):
    decisionTaskCompletedEventId: int
    activityId: str


class _SWFWorkflowExecutionSignaledEventAttributes(TypedDict):
    signalName: str


class SWFWorkflowExecutionSignaledEventAttributes(_SWFWorkflowExecutionSignaledEventAttributes, total=False):
    input: str
    externalWorkflowExecution: SWFWorkflowExecution
    externalInitiatedEventId: int


class _SWFMarkerRecordedEventAttributes(TypedDict):
    markerName: str
    decisionTaskCompletedEventId: int


class SWFMarkerRecordedEventAttributes(_SWFMarkerRecordedEventAttributes, total=False):
    details: str


class SWFRecordMarkerFailedEventAttributes(TypedDict):
    markerName: str
    cause: str
    decisionTaskCompletedEventId: int


class _SWFTimerStartedEventAttributes(TypedDict):
    timerId: str
    startToFireTimeout: str
    decisionTaskCompletedEventId: int


class SWFTimerStartedEventAttributes(_SWFTimerStartedEventAttributes, total=False):
    control: str


class SWFTimerFiredEventAttributes(TypedDict):
    timerId: str
    startedEventId: int


class SWFTimerCanceledEventAttributes(TypedDict):
    timerId: str
    startedEventId: int
    decisionTaskCompletedEventId: int


class _SWFStartChildWorkflowExecutionInitiatedEventAttributes(TypedDict):
    workflowId: str
    workflowType: SWFWorkflowType
    taskList: SWFTaskList
    decisionTaskCompletedEventId: int
    childPolicy: str


class SWFStartChildWorkflowExecutionInitiatedEventAttributes(_SWFStartChildWorkflowExecutionInitiatedEventAttributes, total=False):
    control: str
    input: str
    executionStartToCloseTimeout: str
    taskPriority: str
    taskStartToCloseTimeout: str
    tagList: List[str]
    lambdaRole: str


class SWFChildWorkflowExecutionStartedEventAttributes(TypedDict):
    workflowExecution: SWFWorkflowExecution
    workflowType: SWFWorkflowType
    initiatedEventId: int


class _SWFChildWorkflowExecutionCompletedEventAttributes(TypedDict):
    workflowExecution: SWFWorkflowExecution
    workflowType: SWFWorkflowType
    initiatedEventId: int
    startedEventId: int


class SWFChildWorkflowExecutionCompletedEventAttributes(_SWFChildWorkflowExecutionCompletedEventAttributes, total=False):
    result: str


class _SWFChildWorkflowExecutionFailedEventAttributes(TypedDict):
    workflowExecution: SWFWorkflowExecution
    workflowType: SWFWorkflowType
    initiatedEventId: int
    startedEventId: int


class SWFChildWorkflowExecutionFailedEventAttributes(_SWFChildWorkflowExecutionFailedEventAttributes, total=False):
    reason: str
    details: str


class SWFChildWorkflowExecutionTimedOutEventAttributes(TypedDict):
    workflowExecution: SWFWorkflowExecution
    workflowType: SWFWorkflowType
    timeoutType: str
    initiatedEventId: int
    startedEventId: int


class _SWFChildWorkflowExecutionCanceledEventAttributes(TypedDict):
    workflowExecution: SWFWorkflowExecution
    workflowType: SWFWorkflowType
    initiatedEventId: int
    startedEventId: int


class SWFChildWorkflowExecutionCanceledEventAttributes(_SWFChildWorkflowExecutionCanceledEventAttributes, total=False):
    details: str


class SWFChildWorkflowExecutionTerminatedEventAttributes(TypedDict):
    workflowExecution: SWFWorkflowExecution
    workflowType: SWFWorkflowType
    initiatedEventId: int
    startedEventId: int


class _SWFSignalExternalWorkflowExecutionInitiatedEventAttributes(TypedDict):
    workflowId: str
    signalName: str
    decisionTaskCompletedEventId: int


class SWFSignalExternalWorkflowExecutionInitiatedEventAttributes(_SWFSignalExternalWorkflowExecutionInitiatedEventAttributes, total=False):
    runId: str
    input: str
    control: str


class SWFExternalWorkflowExecutionSignaledEventAttributes(TypedDict):
    workflowExecution: SWFWorkflowExecution
    initiatedEventId: int


class _SWFSignalExternalWorkflowExecutionFailedEventAttributes(TypedDict):
    workflowId: str
    cause: str
    initiatedEventId: int
    decisionTaskCompletedEventId: int


class SWFSignalExternalWorkflowExecutionFailedEventAttributes(_SWFSignalExternalWorkflowExecutionFailedEventAttributes, total=False):
    runId: str
    control: str


class SWFExternalWorkflowExecutionCancelRequestedEventAttributes(TypedDict):
    workflowExecution: SWFWorkflowExecution
    initiatedEventId: int


class _SWFRequestCancelExternalWorkflowExecutionInitiatedEventAttributes(TypedDict):
    workflowId: str
    decisionTaskCompletedEventId: int


class SWFRequestCancelExternalWorkflowExecutionInitiatedEventAttributes(_SWFRequestCancelExternalWorkflowExecutionInitiatedEventAttributes, total=False):
    runId: str
    control: str


class _SWFRequestCancelExternalWorkflowExecutionFailedEventAttributes(TypedDict):
    workflowId: str
    cause: str
    initiatedEventId: int
    decisionTaskCompletedEventId: int


class SWFRequestCancelExternalWorkflowExecutionFailedEventAttributes(_SWFRequestCancelExternalWorkflowExecutionFailedEventAttributes, total=False):
    runId: str
    control: str


class SWFScheduleActivityTaskFailedEventAttributes(TypedDict):
    activityType: SWFActivityType
    activityId: str
    cause: str
    decisionTaskCompletedEventId: int


class SWFRequestCancelActivityTaskFailedEventAttributes(TypedDict):
    activityId: str
    cause: str
    decisionTaskCompletedEventId: int


class SWFStartTimerFailedEventAttributes(TypedDict):
    timerId: str
    cause: str
    decisionTaskCompletedEventId: int


class SWFCancelTimerFailedEventAttributes(TypedDict):
    timerId: str
    cause: str
    decisionTaskCompletedEventId: int


class _SWFStartChildWorkflowExecutionFailedEventAttributes(TypedDict):
    workflowType: SWFWorkflowType
    cause: str
    workflowId: str
    initiatedEventId: int
    decisionTaskCompletedEventId: int


class SWFStartChildWorkflowExecutionFailedEventAttributes(_SWFStartChildWorkflowExecutionFailedEventAttributes, total=False):
    control: str


class _SWFLambdaFunctionScheduledEventAttributes(TypedDict):
    id: str
    name: str
    decisionTaskCompletedEventId: int


class SWFLambdaFunctionScheduledEventAttributes(_SWFLambdaFunctionScheduledEventAttributes, total=False):
    control: str
    input: str
    startToCloseTimeout: str


class SWFLambdaFunctionStartedEventAttributes(TypedDict):
    scheduledEventId: int


class _SWFLambdaFunctionCompletedEventAttributes(TypedDict):
    scheduledEventId: int
    startedEventId: int


class SWFLambdaFunctionCompletedEventAttributes(_SWFLambdaFunctionCompletedEventAttributes, total=False):
    result: str


class _SWFLambdaFunctionFailedEventAttributes(TypedDict):
    scheduledEventId: int
    startedEventId: int


class SWFLambdaFunctionFailedEventAttributes(_SWFLambdaFunctionFailedEventAttributes, total=False):
    reason: str
    details: str


class _SWFLambdaFunctionTimedOutEventAttributes(TypedDict):
    scheduledEventId: int
    startedEventId: int


class SWFLambdaFunctionTimedOutEventAttributes(_SWFLambdaFunctionTimedOutEventAttributes, total=False):
    timeoutType: str


class SWFScheduleLambdaFunctionFailedEventAttributes(TypedDict):
    id: str
    name: str
    cause: str
    decisionTaskCompletedEventId: int


class SWFStartLambdaFunctionFailedEventAttributes(TypedDict, total=False):
    scheduledEventId: int
    cause: str
    message: str


class _SWFActivityTypeInfos(TypedDict):
    typeInfos: List[SWFActivityTypeInfo]


class SWFActivityTypeInfos(_SWFActivityTypeInfos, total=False):
    nextPageToken: str


class _SWFWorkflowExecutionInfos(TypedDict):
    executionInfos: List[SWFWorkflowExecutionInfo]


class SWFWorkflowExecutionInfos(_SWFWorkflowExecutionInfos, total=False):
    nextPageToken: str


class _SWFDomainInfos(TypedDict):
    domainInfos: List[SWFDomainInfo]


class SWFDomainInfos(_SWFDomainInfos, total=False):
    nextPageToken: str


class _SWFWorkflowTypeInfos(TypedDict):
    typeInfos: List[SWFWorkflowTypeInfo]


class SWFWorkflowTypeInfos(_SWFWorkflowTypeInfos, total=False):
    nextPageToken: str


class _SWFActivityTask(TypedDict):
    taskToken: str
    activityId: str
    startedEventId: int
    workflowExecution: SWFWorkflowExecution
    activityType: SWFActivityType


class SWFActivityTask(_SWFActivityTask, total=False):
    input: str


class _SWFDecisionTask(TypedDict):
    taskToken: str
    startedEventId: int
    workflowExecution: SWFWorkflowExecution
    workflowType: SWFWorkflowType
    events: List[SWFHistoryEvent]


class SWFDecisionTask(_SWFDecisionTask, total=False):
    nextPageToken: str
    previousStartedEventId: int


class SWFActivityTaskStatus(TypedDict):
    cancelRequested: bool


class _SWFDecision(TypedDict):
    decisionType: str


class SWFDecision(_SWFDecision, total=False):
    scheduleActivityTaskDecisionAttributes: SWFScheduleActivityTaskDecisionAttributes
    requestCancelActivityTaskDecisionAttributes: SWFRequestCancelActivityTaskDecisionAttributes
    completeWorkflowExecutionDecisionAttributes: SWFCompleteWorkflowExecutionDecisionAttributes
    failWorkflowExecutionDecisionAttributes: SWFFailWorkflowExecutionDecisionAttributes
    cancelWorkflowExecutionDecisionAttributes: SWFCancelWorkflowExecutionDecisionAttributes
    continueAsNewWorkflowExecutionDecisionAttributes: SWFContinueAsNewWorkflowExecutionDecisionAttributes
    recordMarkerDecisionAttributes: SWFRecordMarkerDecisionAttributes
    startTimerDecisionAttributes: SWFStartTimerDecisionAttributes
    cancelTimerDecisionAttributes: SWFCancelTimerDecisionAttributes
    signalExternalWorkflowExecutionDecisionAttributes: SWFSignalExternalWorkflowExecutionDecisionAttributes
    requestCancelExternalWorkflowExecutionDecisionAttributes: SWFRequestCancelExternalWorkflowExecutionDecisionAttributes
    startChildWorkflowExecutionDecisionAttributes: SWFStartChildWorkflowExecutionDecisionAttributes
    scheduleLambdaFunctionDecisionAttributes: SWFScheduleLambdaFunctionDecisionAttributes


class _SWFScheduleActivityTaskDecisionAttributes(TypedDict):
    activityType: SWFActivityType
    activityId: str


class SWFScheduleActivityTaskDecisionAttributes(_SWFScheduleActivityTaskDecisionAttributes, total=False):
    control: str
    input: str
    scheduleToCloseTimeout: str
    taskList: SWFTaskList
    taskPriority: str
    scheduleToStartTimeout: str
    startToCloseTimeout: str
    heartbeatTimeout: str


class SWFRequestCancelActivityTaskDecisionAttributes(TypedDict):
    activityId: str


class SWFCompleteWorkflowExecutionDecisionAttributes(TypedDict, total=False):
    result: str


class SWFFailWorkflowExecutionDecisionAttributes(TypedDict, total=False):
    reason: str
    details: str


class SWFCancelWorkflowExecutionDecisionAttributes(TypedDict, total=False):
    details: str


class SWFContinueAsNewWorkflowExecutionDecisionAttributes(TypedDict, total=False):
    input: str
    executionStartToCloseTimeout: str
    taskList: SWFTaskList
    taskPriority: str
    taskStartToCloseTimeout: str
    childPolicy: str
    tagList: List[str]
    workflowTypeVersion: str
    lambdaRole: str


class _SWFRecordMarkerDecisionAttributes(TypedDict):
    markerName: str


class SWFRecordMarkerDecisionAttributes(_SWFRecordMarkerDecisionAttributes, total=False):
    details: str


class _SWFStartTimerDecisionAttributes(TypedDict):
    timerId: str
    startToFireTimeout: str


class SWFStartTimerDecisionAttributes(_SWFStartTimerDecisionAttributes, total=False):
    control: str


class SWFCancelTimerDecisionAttributes(TypedDict):
    timerId: str


class _SWFSignalExternalWorkflowExecutionDecisionAttributes(TypedDict):
    workflowId: str
    signalName: str


class SWFSignalExternalWorkflowExecutionDecisionAttributes(_SWFSignalExternalWorkflowExecutionDecisionAttributes, total=False):
    runId: str
    input: str
    control: str


class _SWFRequestCancelExternalWorkflowExecutionDecisionAttributes(TypedDict):
    workflowId: str


class SWFRequestCancelExternalWorkflowExecutionDecisionAttributes(_SWFRequestCancelExternalWorkflowExecutionDecisionAttributes, total=False):
    runId: str
    control: str


class _SWFStartChildWorkflowExecutionDecisionAttributes(TypedDict):
    workflowType: SWFWorkflowType
    workflowId: str


class SWFStartChildWorkflowExecutionDecisionAttributes(_SWFStartChildWorkflowExecutionDecisionAttributes, total=False):
    control: str
    input: str
    executionStartToCloseTimeout: str
    taskList: SWFTaskList
    taskPriority: str
    taskStartToCloseTimeout: str
    childPolicy: str
    tagList: List[str]
    lambdaRole: str


class _SWFScheduleLambdaFunctionDecisionAttributes(TypedDict):
    id: str
    name: str


class SWFScheduleLambdaFunctionDecisionAttributes(_SWFScheduleLambdaFunctionDecisionAttributes, total=False):
    control: str
    input: str
    startToCloseTimeout: str


class SWFRun(TypedDict, total=False):
    runId: str


class Textract(BaseClient):
    def analyze_document(self, *,
        Document: TextractDocument,
        FeatureTypes: List[str]
    ) -> TextractAnalyzeDocumentResponse: ...

    def detect_document_text(self, *,
        Document: TextractDocument
    ) -> TextractDetectDocumentTextResponse: ...

    def get_document_analysis(self, *,
        JobId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> TextractGetDocumentAnalysisResponse: ...

    def get_document_text_detection(self, *,
        JobId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> TextractGetDocumentTextDetectionResponse: ...

    def start_document_analysis(self, *,
        DocumentLocation: TextractDocumentLocation,
        FeatureTypes: List[str],
        ClientRequestToken: str = ...,
        JobTag: str = ...,
        NotificationChannel: TextractNotificationChannel = ...
    ) -> TextractStartDocumentAnalysisResponse: ...

    def start_document_text_detection(self, *,
        DocumentLocation: TextractDocumentLocation,
        ClientRequestToken: str = ...,
        JobTag: str = ...,
        NotificationChannel: TextractNotificationChannel = ...
    ) -> TextractStartDocumentTextDetectionResponse: ...


class TextractDocument(TypedDict, total=False):
    Bytes: bytes
    S3Object: TextractS3Object


class TextractS3Object(TypedDict, total=False):
    Bucket: str
    Name: str
    Version: str


class TextractAnalyzeDocumentResponse(TypedDict, total=False):
    DocumentMetadata: TextractDocumentMetadata
    Blocks: List[TextractBlock]


class TextractDocumentMetadata(TypedDict, total=False):
    Pages: int


class TextractBlock(TypedDict, total=False):
    BlockType: str
    Confidence: float
    Text: str
    RowIndex: int
    ColumnIndex: int
    RowSpan: int
    ColumnSpan: int
    Geometry: TextractGeometry
    Id: str
    Relationships: List[TextractRelationship]
    EntityTypes: List[str]
    SelectionStatus: str
    Page: int


class TextractGeometry(TypedDict, total=False):
    BoundingBox: TextractBoundingBox
    Polygon: List[TextractPoint]


class TextractBoundingBox(TypedDict, total=False):
    Width: float
    Height: float
    Left: float
    Top: float


class TextractPoint(TypedDict, total=False):
    X: float
    Y: float


class TextractRelationship(TypedDict, total=False):
    Type: str
    Ids: List[str]


class TextractDetectDocumentTextResponse(TypedDict, total=False):
    DocumentMetadata: TextractDocumentMetadata
    Blocks: List[TextractBlock]


class TextractGetDocumentAnalysisResponse(TypedDict, total=False):
    DocumentMetadata: TextractDocumentMetadata
    JobStatus: str
    NextToken: str
    Blocks: List[TextractBlock]
    Warnings: List[TextractWarning]
    StatusMessage: str


class TextractWarning(TypedDict, total=False):
    ErrorCode: str
    Pages: List[int]


class TextractGetDocumentTextDetectionResponse(TypedDict, total=False):
    DocumentMetadata: TextractDocumentMetadata
    JobStatus: str
    NextToken: str
    Blocks: List[TextractBlock]
    Warnings: List[TextractWarning]
    StatusMessage: str


class TextractDocumentLocation(TypedDict, total=False):
    S3Object: TextractS3Object


class TextractNotificationChannel(TypedDict):
    SNSTopicArn: str
    RoleArn: str


class TextractStartDocumentAnalysisResponse(TypedDict, total=False):
    JobId: str


class TextractStartDocumentTextDetectionResponse(TypedDict, total=False):
    JobId: str


class TranscribeService(BaseClient):
    def create_vocabulary(self, *,
        VocabularyName: str,
        LanguageCode: str,
        Phrases: List[str] = ...,
        VocabularyFileUri: str = ...
    ) -> TranscribeServiceCreateVocabularyResponse: ...

    def delete_transcription_job(self, *,
        TranscriptionJobName: str
    ): ...

    def delete_vocabulary(self, *,
        VocabularyName: str
    ): ...

    def get_transcription_job(self, *,
        TranscriptionJobName: str
    ) -> TranscribeServiceGetTranscriptionJobResponse: ...

    def get_vocabulary(self, *,
        VocabularyName: str
    ) -> TranscribeServiceGetVocabularyResponse: ...

    def list_transcription_jobs(self, *,
        Status: str = ...,
        JobNameContains: str = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> TranscribeServiceListTranscriptionJobsResponse: ...

    def list_vocabularies(self, *,
        NextToken: str = ...,
        MaxResults: int = ...,
        StateEquals: str = ...,
        NameContains: str = ...
    ) -> TranscribeServiceListVocabulariesResponse: ...

    def start_transcription_job(self, *,
        TranscriptionJobName: str,
        LanguageCode: str,
        MediaFormat: str,
        Media: TranscribeServiceMedia,
        MediaSampleRateHertz: int = ...,
        OutputBucketName: str = ...,
        Settings: TranscribeServiceSettings = ...
    ) -> TranscribeServiceStartTranscriptionJobResponse: ...

    def update_vocabulary(self, *,
        VocabularyName: str,
        LanguageCode: str,
        Phrases: List[str] = ...,
        VocabularyFileUri: str = ...
    ) -> TranscribeServiceUpdateVocabularyResponse: ...


class TranscribeServiceCreateVocabularyResponse(TypedDict, total=False):
    VocabularyName: str
    LanguageCode: str
    VocabularyState: str
    LastModifiedTime: datetime.datetime
    FailureReason: str


class TranscribeServiceGetTranscriptionJobResponse(TypedDict, total=False):
    TranscriptionJob: TranscribeServiceTranscriptionJob


class TranscribeServiceTranscriptionJob(TypedDict, total=False):
    TranscriptionJobName: str
    TranscriptionJobStatus: str
    LanguageCode: str
    MediaSampleRateHertz: int
    MediaFormat: str
    Media: TranscribeServiceMedia
    Transcript: TranscribeServiceTranscript
    CreationTime: datetime.datetime
    CompletionTime: datetime.datetime
    FailureReason: str
    Settings: TranscribeServiceSettings


class TranscribeServiceMedia(TypedDict, total=False):
    MediaFileUri: str


class TranscribeServiceTranscript(TypedDict, total=False):
    TranscriptFileUri: str


class TranscribeServiceSettings(TypedDict, total=False):
    VocabularyName: str
    ShowSpeakerLabels: bool
    MaxSpeakerLabels: int
    ChannelIdentification: bool


class TranscribeServiceGetVocabularyResponse(TypedDict, total=False):
    VocabularyName: str
    LanguageCode: str
    VocabularyState: str
    LastModifiedTime: datetime.datetime
    FailureReason: str
    DownloadUri: str


class TranscribeServiceListTranscriptionJobsResponse(TypedDict, total=False):
    Status: str
    NextToken: str
    TranscriptionJobSummaries: List[TranscribeServiceTranscriptionJobSummary]


class TranscribeServiceTranscriptionJobSummary(TypedDict, total=False):
    TranscriptionJobName: str
    CreationTime: datetime.datetime
    CompletionTime: datetime.datetime
    LanguageCode: str
    TranscriptionJobStatus: str
    FailureReason: str
    OutputLocationType: str


class TranscribeServiceListVocabulariesResponse(TypedDict, total=False):
    Status: str
    NextToken: str
    Vocabularies: List[TranscribeServiceVocabularyInfo]


class TranscribeServiceVocabularyInfo(TypedDict, total=False):
    VocabularyName: str
    LanguageCode: str
    LastModifiedTime: datetime.datetime
    VocabularyState: str


class TranscribeServiceStartTranscriptionJobResponse(TypedDict, total=False):
    TranscriptionJob: TranscribeServiceTranscriptionJob


class TranscribeServiceUpdateVocabularyResponse(TypedDict, total=False):
    VocabularyName: str
    LanguageCode: str
    LastModifiedTime: datetime.datetime
    VocabularyState: str


class Transfer(BaseClient):
    def create_server(self, *,
        EndpointDetails: TransferEndpointDetails = ...,
        EndpointType: str = ...,
        HostKey: str = ...,
        IdentityProviderDetails: TransferIdentityProviderDetails = ...,
        IdentityProviderType: str = ...,
        LoggingRole: str = ...,
        Tags: List[TransferTag] = ...
    ) -> TransferCreateServerResponse: ...

    def create_user(self, *,
        Role: str,
        ServerId: str,
        UserName: str,
        HomeDirectory: str = ...,
        Policy: str = ...,
        SshPublicKeyBody: str = ...,
        Tags: List[TransferTag] = ...
    ) -> TransferCreateUserResponse: ...

    def delete_server(self, *,
        ServerId: str
    ): ...

    def delete_ssh_public_key(self, *,
        ServerId: str,
        SshPublicKeyId: str,
        UserName: str
    ): ...

    def delete_user(self, *,
        ServerId: str,
        UserName: str
    ): ...

    def describe_server(self, *,
        ServerId: str
    ) -> TransferDescribeServerResponse: ...

    def describe_user(self, *,
        ServerId: str,
        UserName: str
    ) -> TransferDescribeUserResponse: ...

    def import_ssh_public_key(self, *,
        ServerId: str,
        SshPublicKeyBody: str,
        UserName: str
    ) -> TransferImportSshPublicKeyResponse: ...

    def list_servers(self, *,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> TransferListServersResponse: ...

    def list_tags_for_resource(self, *,
        Arn: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> TransferListTagsForResourceResponse: ...

    def list_users(self, *,
        ServerId: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> TransferListUsersResponse: ...

    def start_server(self, *,
        ServerId: str
    ): ...

    def stop_server(self, *,
        ServerId: str
    ): ...

    def tag_resource(self, *,
        Arn: str,
        Tags: List[TransferTag]
    ): ...

    def test_identity_provider(self, *,
        ServerId: str,
        UserName: str,
        UserPassword: str = ...
    ) -> TransferTestIdentityProviderResponse: ...

    def untag_resource(self, *,
        Arn: str,
        TagKeys: List[str]
    ): ...

    def update_server(self, *,
        ServerId: str,
        EndpointDetails: TransferEndpointDetails = ...,
        EndpointType: str = ...,
        HostKey: str = ...,
        IdentityProviderDetails: TransferIdentityProviderDetails = ...,
        LoggingRole: str = ...
    ) -> TransferUpdateServerResponse: ...

    def update_user(self, *,
        ServerId: str,
        UserName: str,
        HomeDirectory: str = ...,
        Policy: str = ...,
        Role: str = ...
    ) -> TransferUpdateUserResponse: ...


class TransferEndpointDetails(TypedDict, total=False):
    VpcEndpointId: str


class TransferIdentityProviderDetails(TypedDict, total=False):
    Url: str
    InvocationRole: str


class TransferTag(TypedDict):
    Key: str
    Value: str


class TransferCreateServerResponse(TypedDict):
    ServerId: str


class TransferCreateUserResponse(TypedDict):
    ServerId: str
    UserName: str


class TransferDescribeServerResponse(TypedDict):
    Server: TransferDescribedServer


class _TransferDescribedServer(TypedDict):
    Arn: str


class TransferDescribedServer(_TransferDescribedServer, total=False):
    EndpointDetails: TransferEndpointDetails
    EndpointType: str
    HostKeyFingerprint: str
    IdentityProviderDetails: TransferIdentityProviderDetails
    IdentityProviderType: str
    LoggingRole: str
    ServerId: str
    State: str
    Tags: List[TransferTag]
    UserCount: int


class TransferDescribeUserResponse(TypedDict):
    ServerId: str
    User: TransferDescribedUser


class _TransferDescribedUser(TypedDict):
    Arn: str


class TransferDescribedUser(_TransferDescribedUser, total=False):
    HomeDirectory: str
    Policy: str
    Role: str
    SshPublicKeys: List[TransferSshPublicKey]
    Tags: List[TransferTag]
    UserName: str


class TransferSshPublicKey(TypedDict):
    DateImported: datetime.datetime
    SshPublicKeyBody: str
    SshPublicKeyId: str


class TransferImportSshPublicKeyResponse(TypedDict):
    ServerId: str
    SshPublicKeyId: str
    UserName: str


class _TransferListServersResponse(TypedDict):
    Servers: List[TransferListedServer]


class TransferListServersResponse(_TransferListServersResponse, total=False):
    NextToken: str


class _TransferListedServer(TypedDict):
    Arn: str


class TransferListedServer(_TransferListedServer, total=False):
    IdentityProviderType: str
    EndpointType: str
    LoggingRole: str
    ServerId: str
    State: str
    UserCount: int


class TransferListTagsForResourceResponse(TypedDict, total=False):
    Arn: str
    NextToken: str
    Tags: List[TransferTag]


class _TransferListUsersResponse(TypedDict):
    ServerId: str
    Users: List[TransferListedUser]


class TransferListUsersResponse(_TransferListUsersResponse, total=False):
    NextToken: str


class _TransferListedUser(TypedDict):
    Arn: str


class TransferListedUser(_TransferListedUser, total=False):
    HomeDirectory: str
    Role: str
    SshPublicKeyCount: int
    UserName: str


class _TransferTestIdentityProviderResponse(TypedDict):
    StatusCode: int
    Url: str


class TransferTestIdentityProviderResponse(_TransferTestIdentityProviderResponse, total=False):
    Message: str


class TransferUpdateServerResponse(TypedDict):
    ServerId: str


class TransferUpdateUserResponse(TypedDict):
    ServerId: str
    UserName: str


class Translate(BaseClient):
    def delete_terminology(self, *,
        Name: str
    ): ...

    def get_terminology(self, *,
        Name: str,
        TerminologyDataFormat: str
    ) -> TranslateGetTerminologyResponse: ...

    def import_terminology(self, *,
        Name: str,
        MergeStrategy: str,
        TerminologyData: TranslateTerminologyData,
        Description: str = ...,
        EncryptionKey: TranslateEncryptionKey = ...
    ) -> TranslateImportTerminologyResponse: ...

    def list_terminologies(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> TranslateListTerminologiesResponse: ...

    def translate_text(self, *,
        Text: str,
        SourceLanguageCode: str,
        TargetLanguageCode: str,
        TerminologyNames: List[str] = ...
    ) -> TranslateTranslateTextResponse: ...


class TranslateGetTerminologyResponse(TypedDict, total=False):
    TerminologyProperties: TranslateTerminologyProperties
    TerminologyDataLocation: TranslateTerminologyDataLocation


class TranslateTerminologyProperties(TypedDict, total=False):
    Name: str
    Description: str
    Arn: str
    SourceLanguageCode: str
    TargetLanguageCodes: List[str]
    EncryptionKey: TranslateEncryptionKey
    SizeBytes: int
    TermCount: int
    CreatedAt: datetime.datetime
    LastUpdatedAt: datetime.datetime


class TranslateEncryptionKey(TypedDict):
    Type: str
    Id: str


class TranslateTerminologyDataLocation(TypedDict):
    RepositoryType: str
    Location: str


class TranslateTerminologyData(TypedDict):
    File: bytes
    Format: str


class TranslateImportTerminologyResponse(TypedDict, total=False):
    TerminologyProperties: TranslateTerminologyProperties


class TranslateListTerminologiesResponse(TypedDict, total=False):
    TerminologyPropertiesList: List[TranslateTerminologyProperties]
    NextToken: str


class _TranslateTranslateTextResponse(TypedDict):
    TranslatedText: str
    SourceLanguageCode: str
    TargetLanguageCode: str


class TranslateTranslateTextResponse(_TranslateTranslateTextResponse, total=False):
    AppliedTerminologies: List[TranslateAppliedTerminology]


class TranslateAppliedTerminology(TypedDict, total=False):
    Name: str
    Terms: List[TranslateTerm]


class TranslateTerm(TypedDict, total=False):
    SourceText: str
    TargetText: str


class WAF(BaseClient):
    def create_byte_match_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFCreateByteMatchSetResponse: ...

    def create_geo_match_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFCreateGeoMatchSetResponse: ...

    def create_ip_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFCreateIPSetResponse: ...

    def create_rate_based_rule(self, *,
        Name: str,
        MetricName: str,
        RateKey: str,
        RateLimit: int,
        ChangeToken: str
    ) -> WAFCreateRateBasedRuleResponse: ...

    def create_regex_match_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFCreateRegexMatchSetResponse: ...

    def create_regex_pattern_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFCreateRegexPatternSetResponse: ...

    def create_rule(self, *,
        Name: str,
        MetricName: str,
        ChangeToken: str
    ) -> WAFCreateRuleResponse: ...

    def create_rule_group(self, *,
        Name: str,
        MetricName: str,
        ChangeToken: str
    ) -> WAFCreateRuleGroupResponse: ...

    def create_size_constraint_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFCreateSizeConstraintSetResponse: ...

    def create_sql_injection_match_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFCreateSqlInjectionMatchSetResponse: ...

    def create_web_acl(self, *,
        Name: str,
        MetricName: str,
        DefaultAction: WAFWafAction,
        ChangeToken: str
    ) -> WAFCreateWebACLResponse: ...

    def create_xss_match_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFCreateXssMatchSetResponse: ...

    def delete_byte_match_set(self, *,
        ByteMatchSetId: str,
        ChangeToken: str
    ) -> WAFDeleteByteMatchSetResponse: ...

    def delete_geo_match_set(self, *,
        GeoMatchSetId: str,
        ChangeToken: str
    ) -> WAFDeleteGeoMatchSetResponse: ...

    def delete_ip_set(self, *,
        IPSetId: str,
        ChangeToken: str
    ) -> WAFDeleteIPSetResponse: ...

    def delete_logging_configuration(self, *,
        ResourceArn: str
    ) -> WAFDeleteLoggingConfigurationResponse: ...

    def delete_permission_policy(self, *,
        ResourceArn: str
    ) -> WAFDeletePermissionPolicyResponse: ...

    def delete_rate_based_rule(self, *,
        RuleId: str,
        ChangeToken: str
    ) -> WAFDeleteRateBasedRuleResponse: ...

    def delete_regex_match_set(self, *,
        RegexMatchSetId: str,
        ChangeToken: str
    ) -> WAFDeleteRegexMatchSetResponse: ...

    def delete_regex_pattern_set(self, *,
        RegexPatternSetId: str,
        ChangeToken: str
    ) -> WAFDeleteRegexPatternSetResponse: ...

    def delete_rule(self, *,
        RuleId: str,
        ChangeToken: str
    ) -> WAFDeleteRuleResponse: ...

    def delete_rule_group(self, *,
        RuleGroupId: str,
        ChangeToken: str
    ) -> WAFDeleteRuleGroupResponse: ...

    def delete_size_constraint_set(self, *,
        SizeConstraintSetId: str,
        ChangeToken: str
    ) -> WAFDeleteSizeConstraintSetResponse: ...

    def delete_sql_injection_match_set(self, *,
        SqlInjectionMatchSetId: str,
        ChangeToken: str
    ) -> WAFDeleteSqlInjectionMatchSetResponse: ...

    def delete_web_acl(self, *,
        WebACLId: str,
        ChangeToken: str
    ) -> WAFDeleteWebACLResponse: ...

    def delete_xss_match_set(self, *,
        XssMatchSetId: str,
        ChangeToken: str
    ) -> WAFDeleteXssMatchSetResponse: ...

    def get_byte_match_set(self, *,
        ByteMatchSetId: str
    ) -> WAFGetByteMatchSetResponse: ...

    def get_change_token(self) -> WAFGetChangeTokenResponse: ...

    def get_change_token_status(self, *,
        ChangeToken: str
    ) -> WAFGetChangeTokenStatusResponse: ...

    def get_geo_match_set(self, *,
        GeoMatchSetId: str
    ) -> WAFGetGeoMatchSetResponse: ...

    def get_ip_set(self, *,
        IPSetId: str
    ) -> WAFGetIPSetResponse: ...

    def get_logging_configuration(self, *,
        ResourceArn: str
    ) -> WAFGetLoggingConfigurationResponse: ...

    def get_permission_policy(self, *,
        ResourceArn: str
    ) -> WAFGetPermissionPolicyResponse: ...

    def get_rate_based_rule(self, *,
        RuleId: str
    ) -> WAFGetRateBasedRuleResponse: ...

    def get_rate_based_rule_managed_keys(self, *,
        RuleId: str,
        NextMarker: str = ...
    ) -> WAFGetRateBasedRuleManagedKeysResponse: ...

    def get_regex_match_set(self, *,
        RegexMatchSetId: str
    ) -> WAFGetRegexMatchSetResponse: ...

    def get_regex_pattern_set(self, *,
        RegexPatternSetId: str
    ) -> WAFGetRegexPatternSetResponse: ...

    def get_rule(self, *,
        RuleId: str
    ) -> WAFGetRuleResponse: ...

    def get_rule_group(self, *,
        RuleGroupId: str
    ) -> WAFGetRuleGroupResponse: ...

    def get_sampled_requests(self, *,
        WebAclId: str,
        RuleId: str,
        TimeWindow: WAFTimeWindow,
        MaxItems: int
    ) -> WAFGetSampledRequestsResponse: ...

    def get_size_constraint_set(self, *,
        SizeConstraintSetId: str
    ) -> WAFGetSizeConstraintSetResponse: ...

    def get_sql_injection_match_set(self, *,
        SqlInjectionMatchSetId: str
    ) -> WAFGetSqlInjectionMatchSetResponse: ...

    def get_web_acl(self, *,
        WebACLId: str
    ) -> WAFGetWebACLResponse: ...

    def get_xss_match_set(self, *,
        XssMatchSetId: str
    ) -> WAFGetXssMatchSetResponse: ...

    def list_activated_rules_in_rule_group(self, *,
        RuleGroupId: str = ...,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListActivatedRulesInRuleGroupResponse: ...

    def list_byte_match_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListByteMatchSetsResponse: ...

    def list_geo_match_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListGeoMatchSetsResponse: ...

    def list_ip_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListIPSetsResponse: ...

    def list_logging_configurations(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListLoggingConfigurationsResponse: ...

    def list_rate_based_rules(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListRateBasedRulesResponse: ...

    def list_regex_match_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListRegexMatchSetsResponse: ...

    def list_regex_pattern_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListRegexPatternSetsResponse: ...

    def list_rule_groups(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListRuleGroupsResponse: ...

    def list_rules(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListRulesResponse: ...

    def list_size_constraint_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListSizeConstraintSetsResponse: ...

    def list_sql_injection_match_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListSqlInjectionMatchSetsResponse: ...

    def list_subscribed_rule_groups(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListSubscribedRuleGroupsResponse: ...

    def list_web_acls(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListWebACLsResponse: ...

    def list_xss_match_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFListXssMatchSetsResponse: ...

    def put_logging_configuration(self, *,
        LoggingConfiguration: WAFLoggingConfiguration
    ) -> WAFPutLoggingConfigurationResponse: ...

    def put_permission_policy(self, *,
        ResourceArn: str,
        Policy: str
    ) -> WAFPutPermissionPolicyResponse: ...

    def update_byte_match_set(self, *,
        ByteMatchSetId: str,
        ChangeToken: str,
        Updates: List[WAFByteMatchSetUpdate]
    ) -> WAFUpdateByteMatchSetResponse: ...

    def update_geo_match_set(self, *,
        GeoMatchSetId: str,
        ChangeToken: str,
        Updates: List[WAFGeoMatchSetUpdate]
    ) -> WAFUpdateGeoMatchSetResponse: ...

    def update_ip_set(self, *,
        IPSetId: str,
        ChangeToken: str,
        Updates: List[WAFIPSetUpdate]
    ) -> WAFUpdateIPSetResponse: ...

    def update_rate_based_rule(self, *,
        RuleId: str,
        ChangeToken: str,
        Updates: List[WAFRuleUpdate],
        RateLimit: int
    ) -> WAFUpdateRateBasedRuleResponse: ...

    def update_regex_match_set(self, *,
        RegexMatchSetId: str,
        Updates: List[WAFRegexMatchSetUpdate],
        ChangeToken: str
    ) -> WAFUpdateRegexMatchSetResponse: ...

    def update_regex_pattern_set(self, *,
        RegexPatternSetId: str,
        Updates: List[WAFRegexPatternSetUpdate],
        ChangeToken: str
    ) -> WAFUpdateRegexPatternSetResponse: ...

    def update_rule(self, *,
        RuleId: str,
        ChangeToken: str,
        Updates: List[WAFRuleUpdate]
    ) -> WAFUpdateRuleResponse: ...

    def update_rule_group(self, *,
        RuleGroupId: str,
        Updates: List[WAFRuleGroupUpdate],
        ChangeToken: str
    ) -> WAFUpdateRuleGroupResponse: ...

    def update_size_constraint_set(self, *,
        SizeConstraintSetId: str,
        ChangeToken: str,
        Updates: List[WAFSizeConstraintSetUpdate]
    ) -> WAFUpdateSizeConstraintSetResponse: ...

    def update_sql_injection_match_set(self, *,
        SqlInjectionMatchSetId: str,
        ChangeToken: str,
        Updates: List[WAFSqlInjectionMatchSetUpdate]
    ) -> WAFUpdateSqlInjectionMatchSetResponse: ...

    def update_web_acl(self, *,
        WebACLId: str,
        ChangeToken: str,
        Updates: List[WAFWebACLUpdate] = ...,
        DefaultAction: WAFWafAction = ...
    ) -> WAFUpdateWebACLResponse: ...

    def update_xss_match_set(self, *,
        XssMatchSetId: str,
        ChangeToken: str,
        Updates: List[WAFXssMatchSetUpdate]
    ) -> WAFUpdateXssMatchSetResponse: ...


class WAFCreateByteMatchSetResponse(TypedDict, total=False):
    ByteMatchSet: WAFByteMatchSet
    ChangeToken: str


class _WAFByteMatchSet(TypedDict):
    ByteMatchSetId: str
    ByteMatchTuples: List[WAFByteMatchTuple]


class WAFByteMatchSet(_WAFByteMatchSet, total=False):
    Name: str


class WAFByteMatchTuple(TypedDict):
    FieldToMatch: WAFFieldToMatch
    TargetString: bytes
    TextTransformation: str
    PositionalConstraint: str


class _WAFFieldToMatch(TypedDict):
    Type: str


class WAFFieldToMatch(_WAFFieldToMatch, total=False):
    Data: str


class WAFCreateGeoMatchSetResponse(TypedDict, total=False):
    GeoMatchSet: WAFGeoMatchSet
    ChangeToken: str


class _WAFGeoMatchSet(TypedDict):
    GeoMatchSetId: str
    GeoMatchConstraints: List[WAFGeoMatchConstraint]


class WAFGeoMatchSet(_WAFGeoMatchSet, total=False):
    Name: str


class WAFGeoMatchConstraint(TypedDict):
    Type: str
    Value: str


class WAFCreateIPSetResponse(TypedDict, total=False):
    IPSet: WAFIPSet
    ChangeToken: str


class _WAFIPSet(TypedDict):
    IPSetId: str
    IPSetDescriptors: List[WAFIPSetDescriptor]


class WAFIPSet(_WAFIPSet, total=False):
    Name: str


class WAFIPSetDescriptor(TypedDict):
    Type: str
    Value: str


class WAFCreateRateBasedRuleResponse(TypedDict, total=False):
    Rule: WAFRateBasedRule
    ChangeToken: str


class _WAFRateBasedRule(TypedDict):
    RuleId: str
    MatchPredicates: List[WAFPredicate]
    RateKey: str
    RateLimit: int


class WAFRateBasedRule(_WAFRateBasedRule, total=False):
    Name: str
    MetricName: str


class WAFPredicate(TypedDict):
    Negated: bool
    Type: str
    DataId: str


class WAFCreateRegexMatchSetResponse(TypedDict, total=False):
    RegexMatchSet: WAFRegexMatchSet
    ChangeToken: str


class WAFRegexMatchSet(TypedDict, total=False):
    RegexMatchSetId: str
    Name: str
    RegexMatchTuples: List[WAFRegexMatchTuple]


class WAFRegexMatchTuple(TypedDict):
    FieldToMatch: WAFFieldToMatch
    TextTransformation: str
    RegexPatternSetId: str


class WAFCreateRegexPatternSetResponse(TypedDict, total=False):
    RegexPatternSet: WAFRegexPatternSet
    ChangeToken: str


class _WAFRegexPatternSet(TypedDict):
    RegexPatternSetId: str
    RegexPatternStrings: List[str]


class WAFRegexPatternSet(_WAFRegexPatternSet, total=False):
    Name: str


class WAFCreateRuleResponse(TypedDict, total=False):
    Rule: WAFRule
    ChangeToken: str


class _WAFRule(TypedDict):
    RuleId: str
    Predicates: List[WAFPredicate]


class WAFRule(_WAFRule, total=False):
    Name: str
    MetricName: str


class WAFCreateRuleGroupResponse(TypedDict, total=False):
    RuleGroup: WAFRuleGroup
    ChangeToken: str


class _WAFRuleGroup(TypedDict):
    RuleGroupId: str


class WAFRuleGroup(_WAFRuleGroup, total=False):
    Name: str
    MetricName: str


class WAFCreateSizeConstraintSetResponse(TypedDict, total=False):
    SizeConstraintSet: WAFSizeConstraintSet
    ChangeToken: str


class _WAFSizeConstraintSet(TypedDict):
    SizeConstraintSetId: str
    SizeConstraints: List[WAFSizeConstraint]


class WAFSizeConstraintSet(_WAFSizeConstraintSet, total=False):
    Name: str


class WAFSizeConstraint(TypedDict):
    FieldToMatch: WAFFieldToMatch
    TextTransformation: str
    ComparisonOperator: str
    Size: int


class WAFCreateSqlInjectionMatchSetResponse(TypedDict, total=False):
    SqlInjectionMatchSet: WAFSqlInjectionMatchSet
    ChangeToken: str


class _WAFSqlInjectionMatchSet(TypedDict):
    SqlInjectionMatchSetId: str
    SqlInjectionMatchTuples: List[WAFSqlInjectionMatchTuple]


class WAFSqlInjectionMatchSet(_WAFSqlInjectionMatchSet, total=False):
    Name: str


class WAFSqlInjectionMatchTuple(TypedDict):
    FieldToMatch: WAFFieldToMatch
    TextTransformation: str


class WAFWafAction(TypedDict):
    Type: str


class WAFCreateWebACLResponse(TypedDict, total=False):
    WebACL: WAFWebACL
    ChangeToken: str


class _WAFWebACL(TypedDict):
    WebACLId: str
    DefaultAction: WAFWafAction
    Rules: List[WAFActivatedRule]


class WAFWebACL(_WAFWebACL, total=False):
    Name: str
    MetricName: str
    WebACLArn: str


class _WAFActivatedRule(TypedDict):
    Priority: int
    RuleId: str


class WAFActivatedRule(_WAFActivatedRule, total=False):
    Action: WAFWafAction
    OverrideAction: WAFWafOverrideAction
    Type: str
    ExcludedRules: List[WAFExcludedRule]


class WAFWafOverrideAction(TypedDict):
    Type: str


class WAFExcludedRule(TypedDict):
    RuleId: str


class WAFCreateXssMatchSetResponse(TypedDict, total=False):
    XssMatchSet: WAFXssMatchSet
    ChangeToken: str


class _WAFXssMatchSet(TypedDict):
    XssMatchSetId: str
    XssMatchTuples: List[WAFXssMatchTuple]


class WAFXssMatchSet(_WAFXssMatchSet, total=False):
    Name: str


class WAFXssMatchTuple(TypedDict):
    FieldToMatch: WAFFieldToMatch
    TextTransformation: str


class WAFDeleteByteMatchSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFDeleteGeoMatchSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFDeleteIPSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFDeleteLoggingConfigurationResponse(TypedDict, total=False):
    pass


class WAFDeletePermissionPolicyResponse(TypedDict, total=False):
    pass


class WAFDeleteRateBasedRuleResponse(TypedDict, total=False):
    ChangeToken: str


class WAFDeleteRegexMatchSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFDeleteRegexPatternSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFDeleteRuleResponse(TypedDict, total=False):
    ChangeToken: str


class WAFDeleteRuleGroupResponse(TypedDict, total=False):
    ChangeToken: str


class WAFDeleteSizeConstraintSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFDeleteSqlInjectionMatchSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFDeleteWebACLResponse(TypedDict, total=False):
    ChangeToken: str


class WAFDeleteXssMatchSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFGetByteMatchSetResponse(TypedDict, total=False):
    ByteMatchSet: WAFByteMatchSet


class WAFGetChangeTokenResponse(TypedDict, total=False):
    ChangeToken: str


class WAFGetChangeTokenStatusResponse(TypedDict, total=False):
    ChangeTokenStatus: str


class WAFGetGeoMatchSetResponse(TypedDict, total=False):
    GeoMatchSet: WAFGeoMatchSet


class WAFGetIPSetResponse(TypedDict, total=False):
    IPSet: WAFIPSet


class WAFGetLoggingConfigurationResponse(TypedDict, total=False):
    LoggingConfiguration: WAFLoggingConfiguration


class _WAFLoggingConfiguration(TypedDict):
    ResourceArn: str
    LogDestinationConfigs: List[str]


class WAFLoggingConfiguration(_WAFLoggingConfiguration, total=False):
    RedactedFields: List[WAFFieldToMatch]


class WAFGetPermissionPolicyResponse(TypedDict, total=False):
    Policy: str


class WAFGetRateBasedRuleResponse(TypedDict, total=False):
    Rule: WAFRateBasedRule


class WAFGetRateBasedRuleManagedKeysResponse(TypedDict, total=False):
    ManagedKeys: List[str]
    NextMarker: str


class WAFGetRegexMatchSetResponse(TypedDict, total=False):
    RegexMatchSet: WAFRegexMatchSet


class WAFGetRegexPatternSetResponse(TypedDict, total=False):
    RegexPatternSet: WAFRegexPatternSet


class WAFGetRuleResponse(TypedDict, total=False):
    Rule: WAFRule


class WAFGetRuleGroupResponse(TypedDict, total=False):
    RuleGroup: WAFRuleGroup


class WAFTimeWindow(TypedDict):
    StartTime: datetime.datetime
    EndTime: datetime.datetime


class WAFGetSampledRequestsResponse(TypedDict, total=False):
    SampledRequests: List[WAFSampledHTTPRequest]
    PopulationSize: int
    TimeWindow: WAFTimeWindow


class _WAFSampledHTTPRequest(TypedDict):
    Request: WAFHTTPRequest
    Weight: int


class WAFSampledHTTPRequest(_WAFSampledHTTPRequest, total=False):
    Timestamp: datetime.datetime
    Action: str
    RuleWithinRuleGroup: str


class WAFHTTPRequest(TypedDict, total=False):
    ClientIP: str
    Country: str
    URI: str
    Method: str
    HTTPVersion: str
    Headers: List[WAFHTTPHeader]


class WAFHTTPHeader(TypedDict, total=False):
    Name: str
    Value: str


class WAFGetSizeConstraintSetResponse(TypedDict, total=False):
    SizeConstraintSet: WAFSizeConstraintSet


class WAFGetSqlInjectionMatchSetResponse(TypedDict, total=False):
    SqlInjectionMatchSet: WAFSqlInjectionMatchSet


class WAFGetWebACLResponse(TypedDict, total=False):
    WebACL: WAFWebACL


class WAFGetXssMatchSetResponse(TypedDict, total=False):
    XssMatchSet: WAFXssMatchSet


class WAFListActivatedRulesInRuleGroupResponse(TypedDict, total=False):
    NextMarker: str
    ActivatedRules: List[WAFActivatedRule]


class WAFListByteMatchSetsResponse(TypedDict, total=False):
    NextMarker: str
    ByteMatchSets: List[WAFByteMatchSetSummary]


class WAFByteMatchSetSummary(TypedDict):
    ByteMatchSetId: str
    Name: str


class WAFListGeoMatchSetsResponse(TypedDict, total=False):
    NextMarker: str
    GeoMatchSets: List[WAFGeoMatchSetSummary]


class WAFGeoMatchSetSummary(TypedDict):
    GeoMatchSetId: str
    Name: str


class WAFListIPSetsResponse(TypedDict, total=False):
    NextMarker: str
    IPSets: List[WAFIPSetSummary]


class WAFIPSetSummary(TypedDict):
    IPSetId: str
    Name: str


class WAFListLoggingConfigurationsResponse(TypedDict, total=False):
    LoggingConfigurations: List[WAFLoggingConfiguration]
    NextMarker: str


class WAFListRateBasedRulesResponse(TypedDict, total=False):
    NextMarker: str
    Rules: List[WAFRuleSummary]


class WAFRuleSummary(TypedDict):
    RuleId: str
    Name: str


class WAFListRegexMatchSetsResponse(TypedDict, total=False):
    NextMarker: str
    RegexMatchSets: List[WAFRegexMatchSetSummary]


class WAFRegexMatchSetSummary(TypedDict):
    RegexMatchSetId: str
    Name: str


class WAFListRegexPatternSetsResponse(TypedDict, total=False):
    NextMarker: str
    RegexPatternSets: List[WAFRegexPatternSetSummary]


class WAFRegexPatternSetSummary(TypedDict):
    RegexPatternSetId: str
    Name: str


class WAFListRuleGroupsResponse(TypedDict, total=False):
    NextMarker: str
    RuleGroups: List[WAFRuleGroupSummary]


class WAFRuleGroupSummary(TypedDict):
    RuleGroupId: str
    Name: str


class WAFListRulesResponse(TypedDict, total=False):
    NextMarker: str
    Rules: List[WAFRuleSummary]


class WAFListSizeConstraintSetsResponse(TypedDict, total=False):
    NextMarker: str
    SizeConstraintSets: List[WAFSizeConstraintSetSummary]


class WAFSizeConstraintSetSummary(TypedDict):
    SizeConstraintSetId: str
    Name: str


class WAFListSqlInjectionMatchSetsResponse(TypedDict, total=False):
    NextMarker: str
    SqlInjectionMatchSets: List[WAFSqlInjectionMatchSetSummary]


class WAFSqlInjectionMatchSetSummary(TypedDict):
    SqlInjectionMatchSetId: str
    Name: str


class WAFListSubscribedRuleGroupsResponse(TypedDict, total=False):
    NextMarker: str
    RuleGroups: List[WAFSubscribedRuleGroupSummary]


class WAFSubscribedRuleGroupSummary(TypedDict):
    RuleGroupId: str
    Name: str
    MetricName: str


class WAFListWebACLsResponse(TypedDict, total=False):
    NextMarker: str
    WebACLs: List[WAFWebACLSummary]


class WAFWebACLSummary(TypedDict):
    WebACLId: str
    Name: str


class WAFListXssMatchSetsResponse(TypedDict, total=False):
    NextMarker: str
    XssMatchSets: List[WAFXssMatchSetSummary]


class WAFXssMatchSetSummary(TypedDict):
    XssMatchSetId: str
    Name: str


class WAFPutLoggingConfigurationResponse(TypedDict, total=False):
    LoggingConfiguration: WAFLoggingConfiguration


class WAFPutPermissionPolicyResponse(TypedDict, total=False):
    pass


class WAFByteMatchSetUpdate(TypedDict):
    Action: str
    ByteMatchTuple: WAFByteMatchTuple


class WAFUpdateByteMatchSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFGeoMatchSetUpdate(TypedDict):
    Action: str
    GeoMatchConstraint: WAFGeoMatchConstraint


class WAFUpdateGeoMatchSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFIPSetUpdate(TypedDict):
    Action: str
    IPSetDescriptor: WAFIPSetDescriptor


class WAFUpdateIPSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRuleUpdate(TypedDict):
    Action: str
    Predicate: WAFPredicate


class WAFUpdateRateBasedRuleResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRegexMatchSetUpdate(TypedDict):
    Action: str
    RegexMatchTuple: WAFRegexMatchTuple


class WAFUpdateRegexMatchSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRegexPatternSetUpdate(TypedDict):
    Action: str
    RegexPatternString: str


class WAFUpdateRegexPatternSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFUpdateRuleResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRuleGroupUpdate(TypedDict):
    Action: str
    ActivatedRule: WAFActivatedRule


class WAFUpdateRuleGroupResponse(TypedDict, total=False):
    ChangeToken: str


class WAFSizeConstraintSetUpdate(TypedDict):
    Action: str
    SizeConstraint: WAFSizeConstraint


class WAFUpdateSizeConstraintSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFSqlInjectionMatchSetUpdate(TypedDict):
    Action: str
    SqlInjectionMatchTuple: WAFSqlInjectionMatchTuple


class WAFUpdateSqlInjectionMatchSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFWebACLUpdate(TypedDict):
    Action: str
    ActivatedRule: WAFActivatedRule


class WAFUpdateWebACLResponse(TypedDict, total=False):
    ChangeToken: str


class WAFXssMatchSetUpdate(TypedDict):
    Action: str
    XssMatchTuple: WAFXssMatchTuple


class WAFUpdateXssMatchSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRegional(BaseClient):
    def associate_web_acl(self, *,
        WebACLId: str,
        ResourceArn: str
    ) -> WAFRegionalAssociateWebACLResponse: ...

    def create_byte_match_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFRegionalCreateByteMatchSetResponse: ...

    def create_geo_match_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFRegionalCreateGeoMatchSetResponse: ...

    def create_ip_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFRegionalCreateIPSetResponse: ...

    def create_rate_based_rule(self, *,
        Name: str,
        MetricName: str,
        RateKey: str,
        RateLimit: int,
        ChangeToken: str
    ) -> WAFRegionalCreateRateBasedRuleResponse: ...

    def create_regex_match_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFRegionalCreateRegexMatchSetResponse: ...

    def create_regex_pattern_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFRegionalCreateRegexPatternSetResponse: ...

    def create_rule(self, *,
        Name: str,
        MetricName: str,
        ChangeToken: str
    ) -> WAFRegionalCreateRuleResponse: ...

    def create_rule_group(self, *,
        Name: str,
        MetricName: str,
        ChangeToken: str
    ) -> WAFRegionalCreateRuleGroupResponse: ...

    def create_size_constraint_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFRegionalCreateSizeConstraintSetResponse: ...

    def create_sql_injection_match_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFRegionalCreateSqlInjectionMatchSetResponse: ...

    def create_web_acl(self, *,
        Name: str,
        MetricName: str,
        DefaultAction: WAFRegionalWafAction,
        ChangeToken: str
    ) -> WAFRegionalCreateWebACLResponse: ...

    def create_xss_match_set(self, *,
        Name: str,
        ChangeToken: str
    ) -> WAFRegionalCreateXssMatchSetResponse: ...

    def delete_byte_match_set(self, *,
        ByteMatchSetId: str,
        ChangeToken: str
    ) -> WAFRegionalDeleteByteMatchSetResponse: ...

    def delete_geo_match_set(self, *,
        GeoMatchSetId: str,
        ChangeToken: str
    ) -> WAFRegionalDeleteGeoMatchSetResponse: ...

    def delete_ip_set(self, *,
        IPSetId: str,
        ChangeToken: str
    ) -> WAFRegionalDeleteIPSetResponse: ...

    def delete_logging_configuration(self, *,
        ResourceArn: str
    ) -> WAFRegionalDeleteLoggingConfigurationResponse: ...

    def delete_permission_policy(self, *,
        ResourceArn: str
    ) -> WAFRegionalDeletePermissionPolicyResponse: ...

    def delete_rate_based_rule(self, *,
        RuleId: str,
        ChangeToken: str
    ) -> WAFRegionalDeleteRateBasedRuleResponse: ...

    def delete_regex_match_set(self, *,
        RegexMatchSetId: str,
        ChangeToken: str
    ) -> WAFRegionalDeleteRegexMatchSetResponse: ...

    def delete_regex_pattern_set(self, *,
        RegexPatternSetId: str,
        ChangeToken: str
    ) -> WAFRegionalDeleteRegexPatternSetResponse: ...

    def delete_rule(self, *,
        RuleId: str,
        ChangeToken: str
    ) -> WAFRegionalDeleteRuleResponse: ...

    def delete_rule_group(self, *,
        RuleGroupId: str,
        ChangeToken: str
    ) -> WAFRegionalDeleteRuleGroupResponse: ...

    def delete_size_constraint_set(self, *,
        SizeConstraintSetId: str,
        ChangeToken: str
    ) -> WAFRegionalDeleteSizeConstraintSetResponse: ...

    def delete_sql_injection_match_set(self, *,
        SqlInjectionMatchSetId: str,
        ChangeToken: str
    ) -> WAFRegionalDeleteSqlInjectionMatchSetResponse: ...

    def delete_web_acl(self, *,
        WebACLId: str,
        ChangeToken: str
    ) -> WAFRegionalDeleteWebACLResponse: ...

    def delete_xss_match_set(self, *,
        XssMatchSetId: str,
        ChangeToken: str
    ) -> WAFRegionalDeleteXssMatchSetResponse: ...

    def disassociate_web_acl(self, *,
        ResourceArn: str
    ) -> WAFRegionalDisassociateWebACLResponse: ...

    def get_byte_match_set(self, *,
        ByteMatchSetId: str
    ) -> WAFRegionalGetByteMatchSetResponse: ...

    def get_change_token(self) -> WAFRegionalGetChangeTokenResponse: ...

    def get_change_token_status(self, *,
        ChangeToken: str
    ) -> WAFRegionalGetChangeTokenStatusResponse: ...

    def get_geo_match_set(self, *,
        GeoMatchSetId: str
    ) -> WAFRegionalGetGeoMatchSetResponse: ...

    def get_ip_set(self, *,
        IPSetId: str
    ) -> WAFRegionalGetIPSetResponse: ...

    def get_logging_configuration(self, *,
        ResourceArn: str
    ) -> WAFRegionalGetLoggingConfigurationResponse: ...

    def get_permission_policy(self, *,
        ResourceArn: str
    ) -> WAFRegionalGetPermissionPolicyResponse: ...

    def get_rate_based_rule(self, *,
        RuleId: str
    ) -> WAFRegionalGetRateBasedRuleResponse: ...

    def get_rate_based_rule_managed_keys(self, *,
        RuleId: str,
        NextMarker: str = ...
    ) -> WAFRegionalGetRateBasedRuleManagedKeysResponse: ...

    def get_regex_match_set(self, *,
        RegexMatchSetId: str
    ) -> WAFRegionalGetRegexMatchSetResponse: ...

    def get_regex_pattern_set(self, *,
        RegexPatternSetId: str
    ) -> WAFRegionalGetRegexPatternSetResponse: ...

    def get_rule(self, *,
        RuleId: str
    ) -> WAFRegionalGetRuleResponse: ...

    def get_rule_group(self, *,
        RuleGroupId: str
    ) -> WAFRegionalGetRuleGroupResponse: ...

    def get_sampled_requests(self, *,
        WebAclId: str,
        RuleId: str,
        TimeWindow: WAFRegionalTimeWindow,
        MaxItems: int
    ) -> WAFRegionalGetSampledRequestsResponse: ...

    def get_size_constraint_set(self, *,
        SizeConstraintSetId: str
    ) -> WAFRegionalGetSizeConstraintSetResponse: ...

    def get_sql_injection_match_set(self, *,
        SqlInjectionMatchSetId: str
    ) -> WAFRegionalGetSqlInjectionMatchSetResponse: ...

    def get_web_acl(self, *,
        WebACLId: str
    ) -> WAFRegionalGetWebACLResponse: ...

    def get_web_acl_for_resource(self, *,
        ResourceArn: str
    ) -> WAFRegionalGetWebACLForResourceResponse: ...

    def get_xss_match_set(self, *,
        XssMatchSetId: str
    ) -> WAFRegionalGetXssMatchSetResponse: ...

    def list_activated_rules_in_rule_group(self, *,
        RuleGroupId: str = ...,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListActivatedRulesInRuleGroupResponse: ...

    def list_byte_match_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListByteMatchSetsResponse: ...

    def list_geo_match_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListGeoMatchSetsResponse: ...

    def list_ip_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListIPSetsResponse: ...

    def list_logging_configurations(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListLoggingConfigurationsResponse: ...

    def list_rate_based_rules(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListRateBasedRulesResponse: ...

    def list_regex_match_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListRegexMatchSetsResponse: ...

    def list_regex_pattern_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListRegexPatternSetsResponse: ...

    def list_resources_for_web_acl(self, *,
        WebACLId: str,
        ResourceType: str = ...
    ) -> WAFRegionalListResourcesForWebACLResponse: ...

    def list_rule_groups(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListRuleGroupsResponse: ...

    def list_rules(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListRulesResponse: ...

    def list_size_constraint_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListSizeConstraintSetsResponse: ...

    def list_sql_injection_match_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListSqlInjectionMatchSetsResponse: ...

    def list_subscribed_rule_groups(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListSubscribedRuleGroupsResponse: ...

    def list_web_acls(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListWebACLsResponse: ...

    def list_xss_match_sets(self, *,
        NextMarker: str = ...,
        Limit: int = ...
    ) -> WAFRegionalListXssMatchSetsResponse: ...

    def put_logging_configuration(self, *,
        LoggingConfiguration: WAFRegionalLoggingConfiguration
    ) -> WAFRegionalPutLoggingConfigurationResponse: ...

    def put_permission_policy(self, *,
        ResourceArn: str,
        Policy: str
    ) -> WAFRegionalPutPermissionPolicyResponse: ...

    def update_byte_match_set(self, *,
        ByteMatchSetId: str,
        ChangeToken: str,
        Updates: List[WAFRegionalByteMatchSetUpdate]
    ) -> WAFRegionalUpdateByteMatchSetResponse: ...

    def update_geo_match_set(self, *,
        GeoMatchSetId: str,
        ChangeToken: str,
        Updates: List[WAFRegionalGeoMatchSetUpdate]
    ) -> WAFRegionalUpdateGeoMatchSetResponse: ...

    def update_ip_set(self, *,
        IPSetId: str,
        ChangeToken: str,
        Updates: List[WAFRegionalIPSetUpdate]
    ) -> WAFRegionalUpdateIPSetResponse: ...

    def update_rate_based_rule(self, *,
        RuleId: str,
        ChangeToken: str,
        Updates: List[WAFRegionalRuleUpdate],
        RateLimit: int
    ) -> WAFRegionalUpdateRateBasedRuleResponse: ...

    def update_regex_match_set(self, *,
        RegexMatchSetId: str,
        Updates: List[WAFRegionalRegexMatchSetUpdate],
        ChangeToken: str
    ) -> WAFRegionalUpdateRegexMatchSetResponse: ...

    def update_regex_pattern_set(self, *,
        RegexPatternSetId: str,
        Updates: List[WAFRegionalRegexPatternSetUpdate],
        ChangeToken: str
    ) -> WAFRegionalUpdateRegexPatternSetResponse: ...

    def update_rule(self, *,
        RuleId: str,
        ChangeToken: str,
        Updates: List[WAFRegionalRuleUpdate]
    ) -> WAFRegionalUpdateRuleResponse: ...

    def update_rule_group(self, *,
        RuleGroupId: str,
        Updates: List[WAFRegionalRuleGroupUpdate],
        ChangeToken: str
    ) -> WAFRegionalUpdateRuleGroupResponse: ...

    def update_size_constraint_set(self, *,
        SizeConstraintSetId: str,
        ChangeToken: str,
        Updates: List[WAFRegionalSizeConstraintSetUpdate]
    ) -> WAFRegionalUpdateSizeConstraintSetResponse: ...

    def update_sql_injection_match_set(self, *,
        SqlInjectionMatchSetId: str,
        ChangeToken: str,
        Updates: List[WAFRegionalSqlInjectionMatchSetUpdate]
    ) -> WAFRegionalUpdateSqlInjectionMatchSetResponse: ...

    def update_web_acl(self, *,
        WebACLId: str,
        ChangeToken: str,
        Updates: List[WAFRegionalWebACLUpdate] = ...,
        DefaultAction: WAFRegionalWafAction = ...
    ) -> WAFRegionalUpdateWebACLResponse: ...

    def update_xss_match_set(self, *,
        XssMatchSetId: str,
        ChangeToken: str,
        Updates: List[WAFRegionalXssMatchSetUpdate]
    ) -> WAFRegionalUpdateXssMatchSetResponse: ...


class WAFRegionalAssociateWebACLResponse(TypedDict, total=False):
    pass


class WAFRegionalCreateByteMatchSetResponse(TypedDict, total=False):
    ByteMatchSet: WAFRegionalByteMatchSet
    ChangeToken: str


class _WAFRegionalByteMatchSet(TypedDict):
    ByteMatchSetId: str
    ByteMatchTuples: List[WAFRegionalByteMatchTuple]


class WAFRegionalByteMatchSet(_WAFRegionalByteMatchSet, total=False):
    Name: str


class WAFRegionalByteMatchTuple(TypedDict):
    FieldToMatch: WAFRegionalFieldToMatch
    TargetString: bytes
    TextTransformation: str
    PositionalConstraint: str


class _WAFRegionalFieldToMatch(TypedDict):
    Type: str


class WAFRegionalFieldToMatch(_WAFRegionalFieldToMatch, total=False):
    Data: str


class WAFRegionalCreateGeoMatchSetResponse(TypedDict, total=False):
    GeoMatchSet: WAFRegionalGeoMatchSet
    ChangeToken: str


class _WAFRegionalGeoMatchSet(TypedDict):
    GeoMatchSetId: str
    GeoMatchConstraints: List[WAFRegionalGeoMatchConstraint]


class WAFRegionalGeoMatchSet(_WAFRegionalGeoMatchSet, total=False):
    Name: str


class WAFRegionalGeoMatchConstraint(TypedDict):
    Type: str
    Value: str


class WAFRegionalCreateIPSetResponse(TypedDict, total=False):
    IPSet: WAFRegionalIPSet
    ChangeToken: str


class _WAFRegionalIPSet(TypedDict):
    IPSetId: str
    IPSetDescriptors: List[WAFRegionalIPSetDescriptor]


class WAFRegionalIPSet(_WAFRegionalIPSet, total=False):
    Name: str


class WAFRegionalIPSetDescriptor(TypedDict):
    Type: str
    Value: str


class WAFRegionalCreateRateBasedRuleResponse(TypedDict, total=False):
    Rule: WAFRegionalRateBasedRule
    ChangeToken: str


class _WAFRegionalRateBasedRule(TypedDict):
    RuleId: str
    MatchPredicates: List[WAFRegionalPredicate]
    RateKey: str
    RateLimit: int


class WAFRegionalRateBasedRule(_WAFRegionalRateBasedRule, total=False):
    Name: str
    MetricName: str


class WAFRegionalPredicate(TypedDict):
    Negated: bool
    Type: str
    DataId: str


class WAFRegionalCreateRegexMatchSetResponse(TypedDict, total=False):
    RegexMatchSet: WAFRegionalRegexMatchSet
    ChangeToken: str


class WAFRegionalRegexMatchSet(TypedDict, total=False):
    RegexMatchSetId: str
    Name: str
    RegexMatchTuples: List[WAFRegionalRegexMatchTuple]


class WAFRegionalRegexMatchTuple(TypedDict):
    FieldToMatch: WAFRegionalFieldToMatch
    TextTransformation: str
    RegexPatternSetId: str


class WAFRegionalCreateRegexPatternSetResponse(TypedDict, total=False):
    RegexPatternSet: WAFRegionalRegexPatternSet
    ChangeToken: str


class _WAFRegionalRegexPatternSet(TypedDict):
    RegexPatternSetId: str
    RegexPatternStrings: List[str]


class WAFRegionalRegexPatternSet(_WAFRegionalRegexPatternSet, total=False):
    Name: str


class WAFRegionalCreateRuleResponse(TypedDict, total=False):
    Rule: WAFRegionalRule
    ChangeToken: str


class _WAFRegionalRule(TypedDict):
    RuleId: str
    Predicates: List[WAFRegionalPredicate]


class WAFRegionalRule(_WAFRegionalRule, total=False):
    Name: str
    MetricName: str


class WAFRegionalCreateRuleGroupResponse(TypedDict, total=False):
    RuleGroup: WAFRegionalRuleGroup
    ChangeToken: str


class _WAFRegionalRuleGroup(TypedDict):
    RuleGroupId: str


class WAFRegionalRuleGroup(_WAFRegionalRuleGroup, total=False):
    Name: str
    MetricName: str


class WAFRegionalCreateSizeConstraintSetResponse(TypedDict, total=False):
    SizeConstraintSet: WAFRegionalSizeConstraintSet
    ChangeToken: str


class _WAFRegionalSizeConstraintSet(TypedDict):
    SizeConstraintSetId: str
    SizeConstraints: List[WAFRegionalSizeConstraint]


class WAFRegionalSizeConstraintSet(_WAFRegionalSizeConstraintSet, total=False):
    Name: str


class WAFRegionalSizeConstraint(TypedDict):
    FieldToMatch: WAFRegionalFieldToMatch
    TextTransformation: str
    ComparisonOperator: str
    Size: int


class WAFRegionalCreateSqlInjectionMatchSetResponse(TypedDict, total=False):
    SqlInjectionMatchSet: WAFRegionalSqlInjectionMatchSet
    ChangeToken: str


class _WAFRegionalSqlInjectionMatchSet(TypedDict):
    SqlInjectionMatchSetId: str
    SqlInjectionMatchTuples: List[WAFRegionalSqlInjectionMatchTuple]


class WAFRegionalSqlInjectionMatchSet(_WAFRegionalSqlInjectionMatchSet, total=False):
    Name: str


class WAFRegionalSqlInjectionMatchTuple(TypedDict):
    FieldToMatch: WAFRegionalFieldToMatch
    TextTransformation: str


class WAFRegionalWafAction(TypedDict):
    Type: str


class WAFRegionalCreateWebACLResponse(TypedDict, total=False):
    WebACL: WAFRegionalWebACL
    ChangeToken: str


class _WAFRegionalWebACL(TypedDict):
    WebACLId: str
    DefaultAction: WAFRegionalWafAction
    Rules: List[WAFRegionalActivatedRule]


class WAFRegionalWebACL(_WAFRegionalWebACL, total=False):
    Name: str
    MetricName: str
    WebACLArn: str


class _WAFRegionalActivatedRule(TypedDict):
    Priority: int
    RuleId: str


class WAFRegionalActivatedRule(_WAFRegionalActivatedRule, total=False):
    Action: WAFRegionalWafAction
    OverrideAction: WAFRegionalWafOverrideAction
    Type: str
    ExcludedRules: List[WAFRegionalExcludedRule]


class WAFRegionalWafOverrideAction(TypedDict):
    Type: str


class WAFRegionalExcludedRule(TypedDict):
    RuleId: str


class WAFRegionalCreateXssMatchSetResponse(TypedDict, total=False):
    XssMatchSet: WAFRegionalXssMatchSet
    ChangeToken: str


class _WAFRegionalXssMatchSet(TypedDict):
    XssMatchSetId: str
    XssMatchTuples: List[WAFRegionalXssMatchTuple]


class WAFRegionalXssMatchSet(_WAFRegionalXssMatchSet, total=False):
    Name: str


class WAFRegionalXssMatchTuple(TypedDict):
    FieldToMatch: WAFRegionalFieldToMatch
    TextTransformation: str


class WAFRegionalDeleteByteMatchSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRegionalDeleteGeoMatchSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRegionalDeleteIPSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRegionalDeleteLoggingConfigurationResponse(TypedDict, total=False):
    pass


class WAFRegionalDeletePermissionPolicyResponse(TypedDict, total=False):
    pass


class WAFRegionalDeleteRateBasedRuleResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRegionalDeleteRegexMatchSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRegionalDeleteRegexPatternSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRegionalDeleteRuleResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRegionalDeleteRuleGroupResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRegionalDeleteSizeConstraintSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRegionalDeleteSqlInjectionMatchSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRegionalDeleteWebACLResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRegionalDeleteXssMatchSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRegionalDisassociateWebACLResponse(TypedDict, total=False):
    pass


class WAFRegionalGetByteMatchSetResponse(TypedDict, total=False):
    ByteMatchSet: WAFRegionalByteMatchSet


class WAFRegionalGetChangeTokenResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRegionalGetChangeTokenStatusResponse(TypedDict, total=False):
    ChangeTokenStatus: str


class WAFRegionalGetGeoMatchSetResponse(TypedDict, total=False):
    GeoMatchSet: WAFRegionalGeoMatchSet


class WAFRegionalGetIPSetResponse(TypedDict, total=False):
    IPSet: WAFRegionalIPSet


class WAFRegionalGetLoggingConfigurationResponse(TypedDict, total=False):
    LoggingConfiguration: WAFRegionalLoggingConfiguration


class _WAFRegionalLoggingConfiguration(TypedDict):
    ResourceArn: str
    LogDestinationConfigs: List[str]


class WAFRegionalLoggingConfiguration(_WAFRegionalLoggingConfiguration, total=False):
    RedactedFields: List[WAFRegionalFieldToMatch]


class WAFRegionalGetPermissionPolicyResponse(TypedDict, total=False):
    Policy: str


class WAFRegionalGetRateBasedRuleResponse(TypedDict, total=False):
    Rule: WAFRegionalRateBasedRule


class WAFRegionalGetRateBasedRuleManagedKeysResponse(TypedDict, total=False):
    ManagedKeys: List[str]
    NextMarker: str


class WAFRegionalGetRegexMatchSetResponse(TypedDict, total=False):
    RegexMatchSet: WAFRegionalRegexMatchSet


class WAFRegionalGetRegexPatternSetResponse(TypedDict, total=False):
    RegexPatternSet: WAFRegionalRegexPatternSet


class WAFRegionalGetRuleResponse(TypedDict, total=False):
    Rule: WAFRegionalRule


class WAFRegionalGetRuleGroupResponse(TypedDict, total=False):
    RuleGroup: WAFRegionalRuleGroup


class WAFRegionalTimeWindow(TypedDict):
    StartTime: datetime.datetime
    EndTime: datetime.datetime


class WAFRegionalGetSampledRequestsResponse(TypedDict, total=False):
    SampledRequests: List[WAFRegionalSampledHTTPRequest]
    PopulationSize: int
    TimeWindow: WAFRegionalTimeWindow


class _WAFRegionalSampledHTTPRequest(TypedDict):
    Request: WAFRegionalHTTPRequest
    Weight: int


class WAFRegionalSampledHTTPRequest(_WAFRegionalSampledHTTPRequest, total=False):
    Timestamp: datetime.datetime
    Action: str
    RuleWithinRuleGroup: str


class WAFRegionalHTTPRequest(TypedDict, total=False):
    ClientIP: str
    Country: str
    URI: str
    Method: str
    HTTPVersion: str
    Headers: List[WAFRegionalHTTPHeader]


class WAFRegionalHTTPHeader(TypedDict, total=False):
    Name: str
    Value: str


class WAFRegionalGetSizeConstraintSetResponse(TypedDict, total=False):
    SizeConstraintSet: WAFRegionalSizeConstraintSet


class WAFRegionalGetSqlInjectionMatchSetResponse(TypedDict, total=False):
    SqlInjectionMatchSet: WAFRegionalSqlInjectionMatchSet


class WAFRegionalGetWebACLResponse(TypedDict, total=False):
    WebACL: WAFRegionalWebACL


class WAFRegionalGetWebACLForResourceResponse(TypedDict, total=False):
    WebACLSummary: WAFRegionalWebACLSummary


class WAFRegionalWebACLSummary(TypedDict):
    WebACLId: str
    Name: str


class WAFRegionalGetXssMatchSetResponse(TypedDict, total=False):
    XssMatchSet: WAFRegionalXssMatchSet


class WAFRegionalListActivatedRulesInRuleGroupResponse(TypedDict, total=False):
    NextMarker: str
    ActivatedRules: List[WAFRegionalActivatedRule]


class WAFRegionalListByteMatchSetsResponse(TypedDict, total=False):
    NextMarker: str
    ByteMatchSets: List[WAFRegionalByteMatchSetSummary]


class WAFRegionalByteMatchSetSummary(TypedDict):
    ByteMatchSetId: str
    Name: str


class WAFRegionalListGeoMatchSetsResponse(TypedDict, total=False):
    NextMarker: str
    GeoMatchSets: List[WAFRegionalGeoMatchSetSummary]


class WAFRegionalGeoMatchSetSummary(TypedDict):
    GeoMatchSetId: str
    Name: str


class WAFRegionalListIPSetsResponse(TypedDict, total=False):
    NextMarker: str
    IPSets: List[WAFRegionalIPSetSummary]


class WAFRegionalIPSetSummary(TypedDict):
    IPSetId: str
    Name: str


class WAFRegionalListLoggingConfigurationsResponse(TypedDict, total=False):
    LoggingConfigurations: List[WAFRegionalLoggingConfiguration]
    NextMarker: str


class WAFRegionalListRateBasedRulesResponse(TypedDict, total=False):
    NextMarker: str
    Rules: List[WAFRegionalRuleSummary]


class WAFRegionalRuleSummary(TypedDict):
    RuleId: str
    Name: str


class WAFRegionalListRegexMatchSetsResponse(TypedDict, total=False):
    NextMarker: str
    RegexMatchSets: List[WAFRegionalRegexMatchSetSummary]


class WAFRegionalRegexMatchSetSummary(TypedDict):
    RegexMatchSetId: str
    Name: str


class WAFRegionalListRegexPatternSetsResponse(TypedDict, total=False):
    NextMarker: str
    RegexPatternSets: List[WAFRegionalRegexPatternSetSummary]


class WAFRegionalRegexPatternSetSummary(TypedDict):
    RegexPatternSetId: str
    Name: str


class WAFRegionalListResourcesForWebACLResponse(TypedDict, total=False):
    ResourceArns: List[str]


class WAFRegionalListRuleGroupsResponse(TypedDict, total=False):
    NextMarker: str
    RuleGroups: List[WAFRegionalRuleGroupSummary]


class WAFRegionalRuleGroupSummary(TypedDict):
    RuleGroupId: str
    Name: str


class WAFRegionalListRulesResponse(TypedDict, total=False):
    NextMarker: str
    Rules: List[WAFRegionalRuleSummary]


class WAFRegionalListSizeConstraintSetsResponse(TypedDict, total=False):
    NextMarker: str
    SizeConstraintSets: List[WAFRegionalSizeConstraintSetSummary]


class WAFRegionalSizeConstraintSetSummary(TypedDict):
    SizeConstraintSetId: str
    Name: str


class WAFRegionalListSqlInjectionMatchSetsResponse(TypedDict, total=False):
    NextMarker: str
    SqlInjectionMatchSets: List[WAFRegionalSqlInjectionMatchSetSummary]


class WAFRegionalSqlInjectionMatchSetSummary(TypedDict):
    SqlInjectionMatchSetId: str
    Name: str


class WAFRegionalListSubscribedRuleGroupsResponse(TypedDict, total=False):
    NextMarker: str
    RuleGroups: List[WAFRegionalSubscribedRuleGroupSummary]


class WAFRegionalSubscribedRuleGroupSummary(TypedDict):
    RuleGroupId: str
    Name: str
    MetricName: str


class WAFRegionalListWebACLsResponse(TypedDict, total=False):
    NextMarker: str
    WebACLs: List[WAFRegionalWebACLSummary]


class WAFRegionalListXssMatchSetsResponse(TypedDict, total=False):
    NextMarker: str
    XssMatchSets: List[WAFRegionalXssMatchSetSummary]


class WAFRegionalXssMatchSetSummary(TypedDict):
    XssMatchSetId: str
    Name: str


class WAFRegionalPutLoggingConfigurationResponse(TypedDict, total=False):
    LoggingConfiguration: WAFRegionalLoggingConfiguration


class WAFRegionalPutPermissionPolicyResponse(TypedDict, total=False):
    pass


class WAFRegionalByteMatchSetUpdate(TypedDict):
    Action: str
    ByteMatchTuple: WAFRegionalByteMatchTuple


class WAFRegionalUpdateByteMatchSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRegionalGeoMatchSetUpdate(TypedDict):
    Action: str
    GeoMatchConstraint: WAFRegionalGeoMatchConstraint


class WAFRegionalUpdateGeoMatchSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRegionalIPSetUpdate(TypedDict):
    Action: str
    IPSetDescriptor: WAFRegionalIPSetDescriptor


class WAFRegionalUpdateIPSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRegionalRuleUpdate(TypedDict):
    Action: str
    Predicate: WAFRegionalPredicate


class WAFRegionalUpdateRateBasedRuleResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRegionalRegexMatchSetUpdate(TypedDict):
    Action: str
    RegexMatchTuple: WAFRegionalRegexMatchTuple


class WAFRegionalUpdateRegexMatchSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRegionalRegexPatternSetUpdate(TypedDict):
    Action: str
    RegexPatternString: str


class WAFRegionalUpdateRegexPatternSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRegionalUpdateRuleResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRegionalRuleGroupUpdate(TypedDict):
    Action: str
    ActivatedRule: WAFRegionalActivatedRule


class WAFRegionalUpdateRuleGroupResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRegionalSizeConstraintSetUpdate(TypedDict):
    Action: str
    SizeConstraint: WAFRegionalSizeConstraint


class WAFRegionalUpdateSizeConstraintSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRegionalSqlInjectionMatchSetUpdate(TypedDict):
    Action: str
    SqlInjectionMatchTuple: WAFRegionalSqlInjectionMatchTuple


class WAFRegionalUpdateSqlInjectionMatchSetResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRegionalWebACLUpdate(TypedDict):
    Action: str
    ActivatedRule: WAFRegionalActivatedRule


class WAFRegionalUpdateWebACLResponse(TypedDict, total=False):
    ChangeToken: str


class WAFRegionalXssMatchSetUpdate(TypedDict):
    Action: str
    XssMatchTuple: WAFRegionalXssMatchTuple


class WAFRegionalUpdateXssMatchSetResponse(TypedDict, total=False):
    ChangeToken: str


class WorkDocs(BaseClient):
    def abort_document_version_upload(self, *,
        DocumentId: str,
        VersionId: str,
        AuthenticationToken: str = ...
    ): ...

    def activate_user(self, *,
        UserId: str,
        AuthenticationToken: str = ...
    ) -> WorkDocsActivateUserResponse: ...

    def add_resource_permissions(self, *,
        ResourceId: str,
        Principals: List[WorkDocsSharePrincipal],
        AuthenticationToken: str = ...,
        NotificationOptions: WorkDocsNotificationOptions = ...
    ) -> WorkDocsAddResourcePermissionsResponse: ...

    def create_comment(self, *,
        DocumentId: str,
        VersionId: str,
        Text: str,
        AuthenticationToken: str = ...,
        ParentId: str = ...,
        ThreadId: str = ...,
        Visibility: str = ...,
        NotifyCollaborators: bool = ...
    ) -> WorkDocsCreateCommentResponse: ...

    def create_custom_metadata(self, *,
        ResourceId: str,
        CustomMetadata: Dict[str, str],
        AuthenticationToken: str = ...,
        VersionId: str = ...
    ) -> WorkDocsCreateCustomMetadataResponse: ...

    def create_folder(self, *,
        ParentFolderId: str,
        AuthenticationToken: str = ...,
        Name: str = ...
    ) -> WorkDocsCreateFolderResponse: ...

    def create_labels(self, *,
        ResourceId: str,
        Labels: List[str],
        AuthenticationToken: str = ...
    ) -> WorkDocsCreateLabelsResponse: ...

    def create_notification_subscription(self, *,
        OrganizationId: str,
        Endpoint: str,
        Protocol: str,
        SubscriptionType: str
    ) -> WorkDocsCreateNotificationSubscriptionResponse: ...

    def create_user(self, *,
        Username: str,
        GivenName: str,
        Surname: str,
        Password: str,
        OrganizationId: str = ...,
        EmailAddress: str = ...,
        TimeZoneId: str = ...,
        StorageRule: WorkDocsStorageRuleType = ...,
        AuthenticationToken: str = ...
    ) -> WorkDocsCreateUserResponse: ...

    def deactivate_user(self, *,
        UserId: str,
        AuthenticationToken: str = ...
    ): ...

    def delete_comment(self, *,
        DocumentId: str,
        VersionId: str,
        CommentId: str,
        AuthenticationToken: str = ...
    ): ...

    def delete_custom_metadata(self, *,
        ResourceId: str,
        AuthenticationToken: str = ...,
        VersionId: str = ...,
        Keys: List[str] = ...,
        DeleteAll: bool = ...
    ) -> WorkDocsDeleteCustomMetadataResponse: ...

    def delete_document(self, *,
        DocumentId: str,
        AuthenticationToken: str = ...
    ): ...

    def delete_folder(self, *,
        FolderId: str,
        AuthenticationToken: str = ...
    ): ...

    def delete_folder_contents(self, *,
        FolderId: str,
        AuthenticationToken: str = ...
    ): ...

    def delete_labels(self, *,
        ResourceId: str,
        AuthenticationToken: str = ...,
        Labels: List[str] = ...,
        DeleteAll: bool = ...
    ) -> WorkDocsDeleteLabelsResponse: ...

    def delete_notification_subscription(self, *,
        SubscriptionId: str,
        OrganizationId: str
    ): ...

    def delete_user(self, *,
        UserId: str,
        AuthenticationToken: str = ...
    ): ...

    def describe_activities(self, *,
        AuthenticationToken: str = ...,
        StartTime: datetime.datetime = ...,
        EndTime: datetime.datetime = ...,
        OrganizationId: str = ...,
        ActivityTypes: str = ...,
        ResourceId: str = ...,
        UserId: str = ...,
        IncludeIndirectActivities: bool = ...,
        Limit: int = ...,
        Marker: str = ...
    ) -> WorkDocsDescribeActivitiesResponse: ...

    def describe_comments(self, *,
        DocumentId: str,
        VersionId: str,
        AuthenticationToken: str = ...,
        Limit: int = ...,
        Marker: str = ...
    ) -> WorkDocsDescribeCommentsResponse: ...

    def describe_document_versions(self, *,
        DocumentId: str,
        AuthenticationToken: str = ...,
        Marker: str = ...,
        Limit: int = ...,
        Include: str = ...,
        Fields: str = ...
    ) -> WorkDocsDescribeDocumentVersionsResponse: ...

    def describe_folder_contents(self, *,
        FolderId: str,
        AuthenticationToken: str = ...,
        Sort: str = ...,
        Order: str = ...,
        Limit: int = ...,
        Marker: str = ...,
        Type: str = ...,
        Include: str = ...
    ) -> WorkDocsDescribeFolderContentsResponse: ...

    def describe_groups(self, *,
        SearchQuery: str,
        AuthenticationToken: str = ...,
        OrganizationId: str = ...,
        Marker: str = ...,
        Limit: int = ...
    ) -> WorkDocsDescribeGroupsResponse: ...

    def describe_notification_subscriptions(self, *,
        OrganizationId: str,
        Marker: str = ...,
        Limit: int = ...
    ) -> WorkDocsDescribeNotificationSubscriptionsResponse: ...

    def describe_resource_permissions(self, *,
        ResourceId: str,
        AuthenticationToken: str = ...,
        PrincipalId: str = ...,
        Limit: int = ...,
        Marker: str = ...
    ) -> WorkDocsDescribeResourcePermissionsResponse: ...

    def describe_root_folders(self, *,
        AuthenticationToken: str,
        Limit: int = ...,
        Marker: str = ...
    ) -> WorkDocsDescribeRootFoldersResponse: ...

    def describe_users(self, *,
        AuthenticationToken: str = ...,
        OrganizationId: str = ...,
        UserIds: str = ...,
        Query: str = ...,
        Include: str = ...,
        Order: str = ...,
        Sort: str = ...,
        Marker: str = ...,
        Limit: int = ...,
        Fields: str = ...
    ) -> WorkDocsDescribeUsersResponse: ...

    def get_current_user(self, *,
        AuthenticationToken: str
    ) -> WorkDocsGetCurrentUserResponse: ...

    def get_document(self, *,
        DocumentId: str,
        AuthenticationToken: str = ...,
        IncludeCustomMetadata: bool = ...
    ) -> WorkDocsGetDocumentResponse: ...

    def get_document_path(self, *,
        DocumentId: str,
        AuthenticationToken: str = ...,
        Limit: int = ...,
        Fields: str = ...,
        Marker: str = ...
    ) -> WorkDocsGetDocumentPathResponse: ...

    def get_document_version(self, *,
        DocumentId: str,
        VersionId: str,
        AuthenticationToken: str = ...,
        Fields: str = ...,
        IncludeCustomMetadata: bool = ...
    ) -> WorkDocsGetDocumentVersionResponse: ...

    def get_folder(self, *,
        FolderId: str,
        AuthenticationToken: str = ...,
        IncludeCustomMetadata: bool = ...
    ) -> WorkDocsGetFolderResponse: ...

    def get_folder_path(self, *,
        FolderId: str,
        AuthenticationToken: str = ...,
        Limit: int = ...,
        Fields: str = ...,
        Marker: str = ...
    ) -> WorkDocsGetFolderPathResponse: ...

    def get_resources(self, *,
        AuthenticationToken: str = ...,
        UserId: str = ...,
        CollectionType: str = ...,
        Limit: int = ...,
        Marker: str = ...
    ) -> WorkDocsGetResourcesResponse: ...

    def initiate_document_version_upload(self, *,
        ParentFolderId: str,
        AuthenticationToken: str = ...,
        Id: str = ...,
        Name: str = ...,
        ContentCreatedTimestamp: datetime.datetime = ...,
        ContentModifiedTimestamp: datetime.datetime = ...,
        ContentType: str = ...,
        DocumentSizeInBytes: int = ...
    ) -> WorkDocsInitiateDocumentVersionUploadResponse: ...

    def remove_all_resource_permissions(self, *,
        ResourceId: str,
        AuthenticationToken: str = ...
    ): ...

    def remove_resource_permission(self, *,
        ResourceId: str,
        PrincipalId: str,
        AuthenticationToken: str = ...,
        PrincipalType: str = ...
    ): ...

    def update_document(self, *,
        DocumentId: str,
        AuthenticationToken: str = ...,
        Name: str = ...,
        ParentFolderId: str = ...,
        ResourceState: str = ...
    ): ...

    def update_document_version(self, *,
        DocumentId: str,
        VersionId: str,
        AuthenticationToken: str = ...,
        VersionStatus: str = ...
    ): ...

    def update_folder(self, *,
        FolderId: str,
        AuthenticationToken: str = ...,
        Name: str = ...,
        ParentFolderId: str = ...,
        ResourceState: str = ...
    ): ...

    def update_user(self, *,
        UserId: str,
        AuthenticationToken: str = ...,
        GivenName: str = ...,
        Surname: str = ...,
        Type: str = ...,
        StorageRule: WorkDocsStorageRuleType = ...,
        TimeZoneId: str = ...,
        Locale: str = ...,
        GrantPoweruserPrivileges: str = ...
    ) -> WorkDocsUpdateUserResponse: ...


class WorkDocsActivateUserResponse(TypedDict, total=False):
    User: WorkDocsUser


class WorkDocsUser(TypedDict, total=False):
    Id: str
    Username: str
    EmailAddress: str
    GivenName: str
    Surname: str
    OrganizationId: str
    RootFolderId: str
    RecycleBinFolderId: str
    Status: str
    Type: str
    CreatedTimestamp: datetime.datetime
    ModifiedTimestamp: datetime.datetime
    TimeZoneId: str
    Locale: str
    Storage: WorkDocsUserStorageMetadata


class WorkDocsUserStorageMetadata(TypedDict, total=False):
    StorageUtilizedInBytes: int
    StorageRule: WorkDocsStorageRuleType


class WorkDocsStorageRuleType(TypedDict, total=False):
    StorageAllocatedInBytes: int
    StorageType: str


class WorkDocsSharePrincipal(TypedDict):
    Id: str
    Type: str
    Role: str


class WorkDocsNotificationOptions(TypedDict, total=False):
    SendEmail: bool
    EmailMessage: str


class WorkDocsAddResourcePermissionsResponse(TypedDict, total=False):
    ShareResults: List[WorkDocsShareResult]


class WorkDocsShareResult(TypedDict, total=False):
    PrincipalId: str
    InviteePrincipalId: str
    Role: str
    Status: str
    ShareId: str
    StatusMessage: str


class WorkDocsCreateCommentResponse(TypedDict, total=False):
    Comment: WorkDocsComment


class _WorkDocsComment(TypedDict):
    CommentId: str


class WorkDocsComment(_WorkDocsComment, total=False):
    ParentId: str
    ThreadId: str
    Text: str
    Contributor: WorkDocsUser
    CreatedTimestamp: datetime.datetime
    Status: str
    Visibility: str
    RecipientId: str


class WorkDocsCreateCustomMetadataResponse(TypedDict, total=False):
    pass


class WorkDocsCreateFolderResponse(TypedDict, total=False):
    Metadata: WorkDocsFolderMetadata


class WorkDocsFolderMetadata(TypedDict, total=False):
    Id: str
    Name: str
    CreatorId: str
    ParentFolderId: str
    CreatedTimestamp: datetime.datetime
    ModifiedTimestamp: datetime.datetime
    ResourceState: str
    Signature: str
    Labels: List[str]
    Size: int
    LatestVersionSize: int


class WorkDocsCreateLabelsResponse(TypedDict, total=False):
    pass


class WorkDocsCreateNotificationSubscriptionResponse(TypedDict, total=False):
    Subscription: WorkDocsSubscription


class WorkDocsSubscription(TypedDict, total=False):
    SubscriptionId: str
    EndPoint: str
    Protocol: str


class WorkDocsCreateUserResponse(TypedDict, total=False):
    User: WorkDocsUser


class WorkDocsDeleteCustomMetadataResponse(TypedDict, total=False):
    pass


class WorkDocsDeleteLabelsResponse(TypedDict, total=False):
    pass


class WorkDocsDescribeActivitiesResponse(TypedDict, total=False):
    UserActivities: List[WorkDocsActivity]
    Marker: str


class WorkDocsActivity(TypedDict, total=False):
    Type: str
    TimeStamp: datetime.datetime
    IsIndirectActivity: bool
    OrganizationId: str
    Initiator: WorkDocsUserMetadata
    Participants: WorkDocsParticipants
    ResourceMetadata: WorkDocsResourceMetadata
    OriginalParent: WorkDocsResourceMetadata
    CommentMetadata: WorkDocsCommentMetadata


class WorkDocsUserMetadata(TypedDict, total=False):
    Id: str
    Username: str
    GivenName: str
    Surname: str
    EmailAddress: str


class WorkDocsParticipants(TypedDict, total=False):
    Users: List[WorkDocsUserMetadata]
    Groups: List[WorkDocsGroupMetadata]


class WorkDocsGroupMetadata(TypedDict, total=False):
    Id: str
    Name: str


class WorkDocsResourceMetadata(TypedDict, total=False):
    Type: str
    Name: str
    OriginalName: str
    Id: str
    VersionId: str
    Owner: WorkDocsUserMetadata
    ParentId: str


class WorkDocsCommentMetadata(TypedDict, total=False):
    CommentId: str
    Contributor: WorkDocsUser
    CreatedTimestamp: datetime.datetime
    CommentStatus: str
    RecipientId: str


class WorkDocsDescribeCommentsResponse(TypedDict, total=False):
    Comments: List[WorkDocsComment]
    Marker: str


class WorkDocsDescribeDocumentVersionsResponse(TypedDict, total=False):
    DocumentVersions: List[WorkDocsDocumentVersionMetadata]
    Marker: str


class WorkDocsDocumentVersionMetadata(TypedDict, total=False):
    Id: str
    Name: str
    ContentType: str
    Size: int
    Signature: str
    Status: str
    CreatedTimestamp: datetime.datetime
    ModifiedTimestamp: datetime.datetime
    ContentCreatedTimestamp: datetime.datetime
    ContentModifiedTimestamp: datetime.datetime
    CreatorId: str
    Thumbnail: Dict[str, str]
    Source: Dict[str, str]


class WorkDocsDescribeFolderContentsResponse(TypedDict, total=False):
    Folders: List[WorkDocsFolderMetadata]
    Documents: List[WorkDocsDocumentMetadata]
    Marker: str


class WorkDocsDocumentMetadata(TypedDict, total=False):
    Id: str
    CreatorId: str
    ParentFolderId: str
    CreatedTimestamp: datetime.datetime
    ModifiedTimestamp: datetime.datetime
    LatestVersionMetadata: WorkDocsDocumentVersionMetadata
    ResourceState: str
    Labels: List[str]


class WorkDocsDescribeGroupsResponse(TypedDict, total=False):
    Groups: List[WorkDocsGroupMetadata]
    Marker: str


class WorkDocsDescribeNotificationSubscriptionsResponse(TypedDict, total=False):
    Subscriptions: List[WorkDocsSubscription]
    Marker: str


class WorkDocsDescribeResourcePermissionsResponse(TypedDict, total=False):
    Principals: List[WorkDocsPrincipal]
    Marker: str


class WorkDocsPrincipal(TypedDict, total=False):
    Id: str
    Type: str
    Roles: List[WorkDocsPermissionInfo]


class WorkDocsPermissionInfo(TypedDict, total=False):
    Role: str
    Type: str


class WorkDocsDescribeRootFoldersResponse(TypedDict, total=False):
    Folders: List[WorkDocsFolderMetadata]
    Marker: str


class WorkDocsDescribeUsersResponse(TypedDict, total=False):
    Users: List[WorkDocsUser]
    TotalNumberOfUsers: int
    Marker: str


class WorkDocsGetCurrentUserResponse(TypedDict, total=False):
    User: WorkDocsUser


class WorkDocsGetDocumentResponse(TypedDict, total=False):
    Metadata: WorkDocsDocumentMetadata
    CustomMetadata: Dict[str, str]


class WorkDocsGetDocumentPathResponse(TypedDict, total=False):
    Path: WorkDocsResourcePath


class WorkDocsResourcePath(TypedDict, total=False):
    Components: List[WorkDocsResourcePathComponent]


class WorkDocsResourcePathComponent(TypedDict, total=False):
    Id: str
    Name: str


class WorkDocsGetDocumentVersionResponse(TypedDict, total=False):
    Metadata: WorkDocsDocumentVersionMetadata
    CustomMetadata: Dict[str, str]


class WorkDocsGetFolderResponse(TypedDict, total=False):
    Metadata: WorkDocsFolderMetadata
    CustomMetadata: Dict[str, str]


class WorkDocsGetFolderPathResponse(TypedDict, total=False):
    Path: WorkDocsResourcePath


class WorkDocsGetResourcesResponse(TypedDict, total=False):
    Folders: List[WorkDocsFolderMetadata]
    Documents: List[WorkDocsDocumentMetadata]
    Marker: str


class WorkDocsInitiateDocumentVersionUploadResponse(TypedDict, total=False):
    Metadata: WorkDocsDocumentMetadata
    UploadMetadata: WorkDocsUploadMetadata


class WorkDocsUploadMetadata(TypedDict, total=False):
    UploadUrl: str
    SignedHeaders: Dict[str, str]


class WorkDocsUpdateUserResponse(TypedDict, total=False):
    User: WorkDocsUser


class WorkLink(BaseClient):
    def associate_domain(self, *,
        FleetArn: str,
        DomainName: str,
        AcmCertificateArn: str,
        DisplayName: str = ...
    ) -> WorkLinkAssociateDomainResponse: ...

    def associate_website_certificate_authority(self, *,
        FleetArn: str,
        Certificate: str,
        DisplayName: str = ...
    ) -> WorkLinkAssociateWebsiteCertificateAuthorityResponse: ...

    def create_fleet(self, *,
        FleetName: str,
        DisplayName: str = ...,
        OptimizeForEndUserLocation: bool = ...
    ) -> WorkLinkCreateFleetResponse: ...

    def delete_fleet(self, *,
        FleetArn: str
    ) -> WorkLinkDeleteFleetResponse: ...

    def describe_audit_stream_configuration(self, *,
        FleetArn: str
    ) -> WorkLinkDescribeAuditStreamConfigurationResponse: ...

    def describe_company_network_configuration(self, *,
        FleetArn: str
    ) -> WorkLinkDescribeCompanyNetworkConfigurationResponse: ...

    def describe_device(self, *,
        FleetArn: str,
        DeviceId: str
    ) -> WorkLinkDescribeDeviceResponse: ...

    def describe_device_policy_configuration(self, *,
        FleetArn: str
    ) -> WorkLinkDescribeDevicePolicyConfigurationResponse: ...

    def describe_domain(self, *,
        FleetArn: str,
        DomainName: str
    ) -> WorkLinkDescribeDomainResponse: ...

    def describe_fleet_metadata(self, *,
        FleetArn: str
    ) -> WorkLinkDescribeFleetMetadataResponse: ...

    def describe_identity_provider_configuration(self, *,
        FleetArn: str
    ) -> WorkLinkDescribeIdentityProviderConfigurationResponse: ...

    def describe_website_certificate_authority(self, *,
        FleetArn: str,
        WebsiteCaId: str
    ) -> WorkLinkDescribeWebsiteCertificateAuthorityResponse: ...

    def disassociate_domain(self, *,
        FleetArn: str,
        DomainName: str
    ) -> WorkLinkDisassociateDomainResponse: ...

    def disassociate_website_certificate_authority(self, *,
        FleetArn: str,
        WebsiteCaId: str
    ) -> WorkLinkDisassociateWebsiteCertificateAuthorityResponse: ...

    def list_devices(self, *,
        FleetArn: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> WorkLinkListDevicesResponse: ...

    def list_domains(self, *,
        FleetArn: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> WorkLinkListDomainsResponse: ...

    def list_fleets(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> WorkLinkListFleetsResponse: ...

    def list_website_certificate_authorities(self, *,
        FleetArn: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> WorkLinkListWebsiteCertificateAuthoritiesResponse: ...

    def restore_domain_access(self, *,
        FleetArn: str,
        DomainName: str
    ) -> WorkLinkRestoreDomainAccessResponse: ...

    def revoke_domain_access(self, *,
        FleetArn: str,
        DomainName: str
    ) -> WorkLinkRevokeDomainAccessResponse: ...

    def sign_out_user(self, *,
        FleetArn: str,
        Username: str
    ) -> WorkLinkSignOutUserResponse: ...

    def update_audit_stream_configuration(self, *,
        FleetArn: str,
        AuditStreamArn: str = ...
    ) -> WorkLinkUpdateAuditStreamConfigurationResponse: ...

    def update_company_network_configuration(self, *,
        FleetArn: str,
        VpcId: str,
        SubnetIds: List[str],
        SecurityGroupIds: List[str]
    ) -> WorkLinkUpdateCompanyNetworkConfigurationResponse: ...

    def update_device_policy_configuration(self, *,
        FleetArn: str,
        DeviceCaCertificate: str = ...
    ) -> WorkLinkUpdateDevicePolicyConfigurationResponse: ...

    def update_domain_metadata(self, *,
        FleetArn: str,
        DomainName: str,
        DisplayName: str = ...
    ) -> WorkLinkUpdateDomainMetadataResponse: ...

    def update_fleet_metadata(self, *,
        FleetArn: str,
        DisplayName: str = ...,
        OptimizeForEndUserLocation: bool = ...
    ) -> WorkLinkUpdateFleetMetadataResponse: ...

    def update_identity_provider_configuration(self, *,
        FleetArn: str,
        IdentityProviderType: str,
        IdentityProviderSamlMetadata: str = ...
    ) -> WorkLinkUpdateIdentityProviderConfigurationResponse: ...


class WorkLinkAssociateDomainResponse(TypedDict, total=False):
    pass


class WorkLinkAssociateWebsiteCertificateAuthorityResponse(TypedDict, total=False):
    WebsiteCaId: str


class WorkLinkCreateFleetResponse(TypedDict, total=False):
    FleetArn: str


class WorkLinkDeleteFleetResponse(TypedDict, total=False):
    pass


class WorkLinkDescribeAuditStreamConfigurationResponse(TypedDict, total=False):
    AuditStreamArn: str


class WorkLinkDescribeCompanyNetworkConfigurationResponse(TypedDict, total=False):
    VpcId: str
    SubnetIds: List[str]
    SecurityGroupIds: List[str]


class WorkLinkDescribeDeviceResponse(TypedDict, total=False):
    Status: str
    Model: str
    Manufacturer: str
    OperatingSystem: str
    OperatingSystemVersion: str
    PatchLevel: str
    FirstAccessedTime: datetime.datetime
    LastAccessedTime: datetime.datetime
    Username: str


class WorkLinkDescribeDevicePolicyConfigurationResponse(TypedDict, total=False):
    DeviceCaCertificate: str


class WorkLinkDescribeDomainResponse(TypedDict, total=False):
    DisplayName: str
    CreatedTime: datetime.datetime
    DomainStatus: str


class WorkLinkDescribeFleetMetadataResponse(TypedDict, total=False):
    CreatedTime: datetime.datetime
    LastUpdatedTime: datetime.datetime
    FleetName: str
    DisplayName: str
    OptimizeForEndUserLocation: bool
    CompanyCode: str
    FleetStatus: str


class WorkLinkDescribeIdentityProviderConfigurationResponse(TypedDict, total=False):
    IdentityProviderType: str
    ServiceProviderSamlMetadata: str
    IdentityProviderSamlMetadata: str


class WorkLinkDescribeWebsiteCertificateAuthorityResponse(TypedDict, total=False):
    Certificate: str
    CreatedTime: datetime.datetime
    DisplayName: str


class WorkLinkDisassociateDomainResponse(TypedDict, total=False):
    pass


class WorkLinkDisassociateWebsiteCertificateAuthorityResponse(TypedDict, total=False):
    pass


class WorkLinkListDevicesResponse(TypedDict, total=False):
    Devices: List[WorkLinkDeviceSummary]
    NextToken: str


class WorkLinkDeviceSummary(TypedDict, total=False):
    DeviceId: str
    DeviceStatus: str


class WorkLinkListDomainsResponse(TypedDict, total=False):
    Domains: List[WorkLinkDomainSummary]
    NextToken: str


class _WorkLinkDomainSummary(TypedDict):
    DomainName: str
    CreatedTime: datetime.datetime
    DomainStatus: str


class WorkLinkDomainSummary(_WorkLinkDomainSummary, total=False):
    DisplayName: str


class WorkLinkListFleetsResponse(TypedDict, total=False):
    FleetSummaryList: List[WorkLinkFleetSummary]
    NextToken: str


class WorkLinkFleetSummary(TypedDict, total=False):
    FleetArn: str
    CreatedTime: datetime.datetime
    LastUpdatedTime: datetime.datetime
    FleetName: str
    DisplayName: str
    CompanyCode: str
    FleetStatus: str


class WorkLinkListWebsiteCertificateAuthoritiesResponse(TypedDict, total=False):
    WebsiteCertificateAuthorities: List[WorkLinkWebsiteCaSummary]
    NextToken: str


class WorkLinkWebsiteCaSummary(TypedDict, total=False):
    WebsiteCaId: str
    CreatedTime: datetime.datetime
    DisplayName: str


class WorkLinkRestoreDomainAccessResponse(TypedDict, total=False):
    pass


class WorkLinkRevokeDomainAccessResponse(TypedDict, total=False):
    pass


class WorkLinkSignOutUserResponse(TypedDict, total=False):
    pass


class WorkLinkUpdateAuditStreamConfigurationResponse(TypedDict, total=False):
    pass


class WorkLinkUpdateCompanyNetworkConfigurationResponse(TypedDict, total=False):
    pass


class WorkLinkUpdateDevicePolicyConfigurationResponse(TypedDict, total=False):
    pass


class WorkLinkUpdateDomainMetadataResponse(TypedDict, total=False):
    pass


class WorkLinkUpdateFleetMetadataResponse(TypedDict, total=False):
    pass


class WorkLinkUpdateIdentityProviderConfigurationResponse(TypedDict, total=False):
    pass


class WorkMail(BaseClient):
    def associate_delegate_to_resource(self, *,
        OrganizationId: str,
        ResourceId: str,
        EntityId: str
    ) -> WorkMailAssociateDelegateToResourceResponse: ...

    def associate_member_to_group(self, *,
        OrganizationId: str,
        GroupId: str,
        MemberId: str
    ) -> WorkMailAssociateMemberToGroupResponse: ...

    def create_alias(self, *,
        OrganizationId: str,
        EntityId: str,
        Alias: str
    ) -> WorkMailCreateAliasResponse: ...

    def create_group(self, *,
        OrganizationId: str,
        Name: str
    ) -> WorkMailCreateGroupResponse: ...

    def create_resource(self, *,
        OrganizationId: str,
        Name: str,
        Type: str
    ) -> WorkMailCreateResourceResponse: ...

    def create_user(self, *,
        OrganizationId: str,
        Name: str,
        DisplayName: str,
        Password: str
    ) -> WorkMailCreateUserResponse: ...

    def delete_alias(self, *,
        OrganizationId: str,
        EntityId: str,
        Alias: str
    ) -> WorkMailDeleteAliasResponse: ...

    def delete_group(self, *,
        OrganizationId: str,
        GroupId: str
    ) -> WorkMailDeleteGroupResponse: ...

    def delete_mailbox_permissions(self, *,
        OrganizationId: str,
        EntityId: str,
        GranteeId: str
    ) -> WorkMailDeleteMailboxPermissionsResponse: ...

    def delete_resource(self, *,
        OrganizationId: str,
        ResourceId: str
    ) -> WorkMailDeleteResourceResponse: ...

    def delete_user(self, *,
        OrganizationId: str,
        UserId: str
    ) -> WorkMailDeleteUserResponse: ...

    def deregister_from_work_mail(self, *,
        OrganizationId: str,
        EntityId: str
    ) -> WorkMailDeregisterFromWorkMailResponse: ...

    def describe_group(self, *,
        OrganizationId: str,
        GroupId: str
    ) -> WorkMailDescribeGroupResponse: ...

    def describe_organization(self, *,
        OrganizationId: str
    ) -> WorkMailDescribeOrganizationResponse: ...

    def describe_resource(self, *,
        OrganizationId: str,
        ResourceId: str
    ) -> WorkMailDescribeResourceResponse: ...

    def describe_user(self, *,
        OrganizationId: str,
        UserId: str
    ) -> WorkMailDescribeUserResponse: ...

    def disassociate_delegate_from_resource(self, *,
        OrganizationId: str,
        ResourceId: str,
        EntityId: str
    ) -> WorkMailDisassociateDelegateFromResourceResponse: ...

    def disassociate_member_from_group(self, *,
        OrganizationId: str,
        GroupId: str,
        MemberId: str
    ) -> WorkMailDisassociateMemberFromGroupResponse: ...

    def get_mailbox_details(self, *,
        OrganizationId: str,
        UserId: str
    ) -> WorkMailGetMailboxDetailsResponse: ...

    def list_aliases(self, *,
        OrganizationId: str,
        EntityId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> WorkMailListAliasesResponse: ...

    def list_group_members(self, *,
        OrganizationId: str,
        GroupId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> WorkMailListGroupMembersResponse: ...

    def list_groups(self, *,
        OrganizationId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> WorkMailListGroupsResponse: ...

    def list_mailbox_permissions(self, *,
        OrganizationId: str,
        EntityId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> WorkMailListMailboxPermissionsResponse: ...

    def list_organizations(self, *,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> WorkMailListOrganizationsResponse: ...

    def list_resource_delegates(self, *,
        OrganizationId: str,
        ResourceId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> WorkMailListResourceDelegatesResponse: ...

    def list_resources(self, *,
        OrganizationId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> WorkMailListResourcesResponse: ...

    def list_users(self, *,
        OrganizationId: str,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> WorkMailListUsersResponse: ...

    def put_mailbox_permissions(self, *,
        OrganizationId: str,
        EntityId: str,
        GranteeId: str,
        PermissionValues: List[str]
    ) -> WorkMailPutMailboxPermissionsResponse: ...

    def register_to_work_mail(self, *,
        OrganizationId: str,
        EntityId: str,
        Email: str
    ) -> WorkMailRegisterToWorkMailResponse: ...

    def reset_password(self, *,
        OrganizationId: str,
        UserId: str,
        Password: str
    ) -> WorkMailResetPasswordResponse: ...

    def update_mailbox_quota(self, *,
        OrganizationId: str,
        UserId: str,
        MailboxQuota: int
    ) -> WorkMailUpdateMailboxQuotaResponse: ...

    def update_primary_email_address(self, *,
        OrganizationId: str,
        EntityId: str,
        Email: str
    ) -> WorkMailUpdatePrimaryEmailAddressResponse: ...

    def update_resource(self, *,
        OrganizationId: str,
        ResourceId: str,
        Name: str = ...,
        BookingOptions: WorkMailBookingOptions = ...
    ) -> WorkMailUpdateResourceResponse: ...


class WorkMailAssociateDelegateToResourceResponse(TypedDict, total=False):
    pass


class WorkMailAssociateMemberToGroupResponse(TypedDict, total=False):
    pass


class WorkMailCreateAliasResponse(TypedDict, total=False):
    pass


class WorkMailCreateGroupResponse(TypedDict, total=False):
    GroupId: str


class WorkMailCreateResourceResponse(TypedDict, total=False):
    ResourceId: str


class WorkMailCreateUserResponse(TypedDict, total=False):
    UserId: str


class WorkMailDeleteAliasResponse(TypedDict, total=False):
    pass


class WorkMailDeleteGroupResponse(TypedDict, total=False):
    pass


class WorkMailDeleteMailboxPermissionsResponse(TypedDict, total=False):
    pass


class WorkMailDeleteResourceResponse(TypedDict, total=False):
    pass


class WorkMailDeleteUserResponse(TypedDict, total=False):
    pass


class WorkMailDeregisterFromWorkMailResponse(TypedDict, total=False):
    pass


class WorkMailDescribeGroupResponse(TypedDict, total=False):
    GroupId: str
    Name: str
    Email: str
    State: str
    EnabledDate: datetime.datetime
    DisabledDate: datetime.datetime


class WorkMailDescribeOrganizationResponse(TypedDict, total=False):
    OrganizationId: str
    Alias: str
    State: str
    DirectoryId: str
    DirectoryType: str
    DefaultMailDomain: str
    CompletedDate: datetime.datetime
    ErrorMessage: str


class WorkMailDescribeResourceResponse(TypedDict, total=False):
    ResourceId: str
    Email: str
    Name: str
    Type: str
    BookingOptions: WorkMailBookingOptions
    State: str
    EnabledDate: datetime.datetime
    DisabledDate: datetime.datetime


class WorkMailBookingOptions(TypedDict, total=False):
    AutoAcceptRequests: bool
    AutoDeclineRecurringRequests: bool
    AutoDeclineConflictingRequests: bool


class WorkMailDescribeUserResponse(TypedDict, total=False):
    UserId: str
    Name: str
    Email: str
    DisplayName: str
    State: str
    UserRole: str
    EnabledDate: datetime.datetime
    DisabledDate: datetime.datetime


class WorkMailDisassociateDelegateFromResourceResponse(TypedDict, total=False):
    pass


class WorkMailDisassociateMemberFromGroupResponse(TypedDict, total=False):
    pass


class WorkMailGetMailboxDetailsResponse(TypedDict, total=False):
    MailboxQuota: int
    MailboxSize: float


class WorkMailListAliasesResponse(TypedDict, total=False):
    Aliases: List[str]
    NextToken: str


class WorkMailListGroupMembersResponse(TypedDict, total=False):
    Members: List[WorkMailMember]
    NextToken: str


class WorkMailMember(TypedDict, total=False):
    Id: str
    Name: str
    Type: str
    State: str
    EnabledDate: datetime.datetime
    DisabledDate: datetime.datetime


class WorkMailListGroupsResponse(TypedDict, total=False):
    Groups: List[WorkMailGroup]
    NextToken: str


class WorkMailGroup(TypedDict, total=False):
    Id: str
    Email: str
    Name: str
    State: str
    EnabledDate: datetime.datetime
    DisabledDate: datetime.datetime


class WorkMailListMailboxPermissionsResponse(TypedDict, total=False):
    Permissions: List[WorkMailPermission]
    NextToken: str


class WorkMailPermission(TypedDict):
    GranteeId: str
    GranteeType: str
    PermissionValues: List[str]


class WorkMailListOrganizationsResponse(TypedDict, total=False):
    OrganizationSummaries: List[WorkMailOrganizationSummary]
    NextToken: str


class WorkMailOrganizationSummary(TypedDict, total=False):
    OrganizationId: str
    Alias: str
    ErrorMessage: str
    State: str


class WorkMailListResourceDelegatesResponse(TypedDict, total=False):
    Delegates: List[WorkMailDelegate]
    NextToken: str


class WorkMailDelegate(TypedDict):
    Id: str
    Type: str


class WorkMailListResourcesResponse(TypedDict, total=False):
    Resources: List[WorkMailResource]
    NextToken: str


class WorkMailResource(TypedDict, total=False):
    Id: str
    Email: str
    Name: str
    Type: str
    State: str
    EnabledDate: datetime.datetime
    DisabledDate: datetime.datetime


class WorkMailListUsersResponse(TypedDict, total=False):
    Users: List[WorkMailUser]
    NextToken: str


class WorkMailUser(TypedDict, total=False):
    Id: str
    Email: str
    Name: str
    DisplayName: str
    State: str
    UserRole: str
    EnabledDate: datetime.datetime
    DisabledDate: datetime.datetime


class WorkMailPutMailboxPermissionsResponse(TypedDict, total=False):
    pass


class WorkMailRegisterToWorkMailResponse(TypedDict, total=False):
    pass


class WorkMailResetPasswordResponse(TypedDict, total=False):
    pass


class WorkMailUpdateMailboxQuotaResponse(TypedDict, total=False):
    pass


class WorkMailUpdatePrimaryEmailAddressResponse(TypedDict, total=False):
    pass


class WorkMailUpdateResourceResponse(TypedDict, total=False):
    pass


class WorkSpaces(BaseClient):
    def associate_ip_groups(self, *,
        DirectoryId: str,
        GroupIds: List[str]
    ) -> WorkSpacesAssociateIpGroupsResult: ...

    def authorize_ip_rules(self, *,
        GroupId: str,
        UserRules: List[WorkSpacesIpRuleItem]
    ) -> WorkSpacesAuthorizeIpRulesResult: ...

    def create_ip_group(self, *,
        GroupName: str,
        GroupDesc: str = ...,
        UserRules: List[WorkSpacesIpRuleItem] = ...,
        Tags: List[WorkSpacesTag] = ...
    ) -> WorkSpacesCreateIpGroupResult: ...

    def create_tags(self, *,
        ResourceId: str,
        Tags: List[WorkSpacesTag]
    ) -> WorkSpacesCreateTagsResult: ...

    def create_workspaces(self, *,
        Workspaces: List[WorkSpacesWorkspaceRequest]
    ) -> WorkSpacesCreateWorkspacesResult: ...

    def delete_ip_group(self, *,
        GroupId: str
    ) -> WorkSpacesDeleteIpGroupResult: ...

    def delete_tags(self, *,
        ResourceId: str,
        TagKeys: List[str]
    ) -> WorkSpacesDeleteTagsResult: ...

    def delete_workspace_image(self, *,
        ImageId: str
    ) -> WorkSpacesDeleteWorkspaceImageResult: ...

    def describe_account(self) -> WorkSpacesDescribeAccountResult: ...

    def describe_account_modifications(self, *,
        NextToken: str = ...
    ) -> WorkSpacesDescribeAccountModificationsResult: ...

    def describe_client_properties(self, *,
        ResourceIds: List[str]
    ) -> WorkSpacesDescribeClientPropertiesResult: ...

    def describe_ip_groups(self, *,
        GroupIds: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> WorkSpacesDescribeIpGroupsResult: ...

    def describe_tags(self, *,
        ResourceId: str
    ) -> WorkSpacesDescribeTagsResult: ...

    def describe_workspace_bundles(self, *,
        BundleIds: List[str] = ...,
        Owner: str = ...,
        NextToken: str = ...
    ) -> WorkSpacesDescribeWorkspaceBundlesResult: ...

    def describe_workspace_directories(self, *,
        DirectoryIds: List[str] = ...,
        NextToken: str = ...
    ) -> WorkSpacesDescribeWorkspaceDirectoriesResult: ...

    def describe_workspace_images(self, *,
        ImageIds: List[str] = ...,
        NextToken: str = ...,
        MaxResults: int = ...
    ) -> WorkSpacesDescribeWorkspaceImagesResult: ...

    def describe_workspaces(self, *,
        WorkspaceIds: List[str] = ...,
        DirectoryId: str = ...,
        UserName: str = ...,
        BundleId: str = ...,
        Limit: int = ...,
        NextToken: str = ...
    ) -> WorkSpacesDescribeWorkspacesResult: ...

    def describe_workspaces_connection_status(self, *,
        WorkspaceIds: List[str] = ...,
        NextToken: str = ...
    ) -> WorkSpacesDescribeWorkspacesConnectionStatusResult: ...

    def disassociate_ip_groups(self, *,
        DirectoryId: str,
        GroupIds: List[str]
    ) -> WorkSpacesDisassociateIpGroupsResult: ...

    def import_workspace_image(self, *,
        Ec2ImageId: str,
        IngestionProcess: str,
        ImageName: str,
        ImageDescription: str,
        Tags: List[WorkSpacesTag] = ...
    ) -> WorkSpacesImportWorkspaceImageResult: ...

    def list_available_management_cidr_ranges(self, *,
        ManagementCidrRangeConstraint: str,
        MaxResults: int = ...,
        NextToken: str = ...
    ) -> WorkSpacesListAvailableManagementCidrRangesResult: ...

    def modify_account(self, *,
        DedicatedTenancySupport: str = ...,
        DedicatedTenancyManagementCidrRange: str = ...
    ) -> WorkSpacesModifyAccountResult: ...

    def modify_client_properties(self, *,
        ResourceId: str,
        ClientProperties: WorkSpacesClientProperties
    ) -> WorkSpacesModifyClientPropertiesResult: ...

    def modify_workspace_properties(self, *,
        WorkspaceId: str,
        WorkspaceProperties: WorkSpacesWorkspaceProperties
    ) -> WorkSpacesModifyWorkspacePropertiesResult: ...

    def modify_workspace_state(self, *,
        WorkspaceId: str,
        WorkspaceState: str
    ) -> WorkSpacesModifyWorkspaceStateResult: ...

    def reboot_workspaces(self, *,
        RebootWorkspaceRequests: List[WorkSpacesRebootRequest]
    ) -> WorkSpacesRebootWorkspacesResult: ...

    def rebuild_workspaces(self, *,
        RebuildWorkspaceRequests: List[WorkSpacesRebuildRequest],
        AdditionalInfo: str = ...
    ) -> WorkSpacesRebuildWorkspacesResult: ...

    def revoke_ip_rules(self, *,
        GroupId: str,
        UserRules: List[str]
    ) -> WorkSpacesRevokeIpRulesResult: ...

    def start_workspaces(self, *,
        StartWorkspaceRequests: List[WorkSpacesStartRequest]
    ) -> WorkSpacesStartWorkspacesResult: ...

    def stop_workspaces(self, *,
        StopWorkspaceRequests: List[WorkSpacesStopRequest]
    ) -> WorkSpacesStopWorkspacesResult: ...

    def terminate_workspaces(self, *,
        TerminateWorkspaceRequests: List[WorkSpacesTerminateRequest]
    ) -> WorkSpacesTerminateWorkspacesResult: ...

    def update_rules_of_ip_group(self, *,
        GroupId: str,
        UserRules: List[WorkSpacesIpRuleItem]
    ) -> WorkSpacesUpdateRulesOfIpGroupResult: ...


class WorkSpacesAssociateIpGroupsResult(TypedDict, total=False):
    pass


class WorkSpacesIpRuleItem(TypedDict, total=False):
    ipRule: str
    ruleDesc: str


class WorkSpacesAuthorizeIpRulesResult(TypedDict, total=False):
    pass


class _WorkSpacesTag(TypedDict):
    Key: str


class WorkSpacesTag(_WorkSpacesTag, total=False):
    Value: str


class WorkSpacesCreateIpGroupResult(TypedDict, total=False):
    GroupId: str


class WorkSpacesCreateTagsResult(TypedDict, total=False):
    pass


class _WorkSpacesWorkspaceRequest(TypedDict):
    DirectoryId: str
    UserName: str
    BundleId: str


class WorkSpacesWorkspaceRequest(_WorkSpacesWorkspaceRequest, total=False):
    VolumeEncryptionKey: str
    UserVolumeEncryptionEnabled: bool
    RootVolumeEncryptionEnabled: bool
    WorkspaceProperties: WorkSpacesWorkspaceProperties
    Tags: List[WorkSpacesTag]


class WorkSpacesWorkspaceProperties(TypedDict, total=False):
    RunningMode: str
    RunningModeAutoStopTimeoutInMinutes: int
    RootVolumeSizeGib: int
    UserVolumeSizeGib: int
    ComputeTypeName: str


class WorkSpacesCreateWorkspacesResult(TypedDict, total=False):
    FailedRequests: List[WorkSpacesFailedCreateWorkspaceRequest]
    PendingRequests: List[WorkSpacesWorkspace]


class WorkSpacesFailedCreateWorkspaceRequest(TypedDict, total=False):
    WorkspaceRequest: WorkSpacesWorkspaceRequest
    ErrorCode: str
    ErrorMessage: str


class WorkSpacesWorkspace(TypedDict, total=False):
    WorkspaceId: str
    DirectoryId: str
    UserName: str
    IpAddress: str
    State: str
    BundleId: str
    SubnetId: str
    ErrorMessage: str
    ErrorCode: str
    ComputerName: str
    VolumeEncryptionKey: str
    UserVolumeEncryptionEnabled: bool
    RootVolumeEncryptionEnabled: bool
    WorkspaceProperties: WorkSpacesWorkspaceProperties
    ModificationStates: List[WorkSpacesModificationState]


class WorkSpacesModificationState(TypedDict, total=False):
    Resource: str
    State: str


class WorkSpacesDeleteIpGroupResult(TypedDict, total=False):
    pass


class WorkSpacesDeleteTagsResult(TypedDict, total=False):
    pass


class WorkSpacesDeleteWorkspaceImageResult(TypedDict, total=False):
    pass


class WorkSpacesDescribeAccountResult(TypedDict, total=False):
    DedicatedTenancySupport: str
    DedicatedTenancyManagementCidrRange: str


class WorkSpacesDescribeAccountModificationsResult(TypedDict, total=False):
    AccountModifications: List[WorkSpacesAccountModification]
    NextToken: str


class WorkSpacesAccountModification(TypedDict, total=False):
    ModificationState: str
    DedicatedTenancySupport: str
    DedicatedTenancyManagementCidrRange: str
    StartTime: datetime.datetime
    ErrorCode: str
    ErrorMessage: str


class WorkSpacesDescribeClientPropertiesResult(TypedDict, total=False):
    ClientPropertiesList: List[WorkSpacesClientPropertiesResult]


class WorkSpacesClientPropertiesResult(TypedDict, total=False):
    ResourceId: str
    ClientProperties: WorkSpacesClientProperties


class WorkSpacesClientProperties(TypedDict, total=False):
    ReconnectEnabled: str


class WorkSpacesDescribeIpGroupsResult(TypedDict, total=False):
    Result: List[WorkSpacesWorkspacesIpGroup]
    NextToken: str


class WorkSpacesWorkspacesIpGroup(TypedDict, total=False):
    groupId: str
    groupName: str
    groupDesc: str
    userRules: List[WorkSpacesIpRuleItem]


class WorkSpacesDescribeTagsResult(TypedDict, total=False):
    TagList: List[WorkSpacesTag]


class WorkSpacesDescribeWorkspaceBundlesResult(TypedDict, total=False):
    Bundles: List[WorkSpacesWorkspaceBundle]
    NextToken: str


class WorkSpacesWorkspaceBundle(TypedDict, total=False):
    BundleId: str
    Name: str
    Owner: str
    Description: str
    RootStorage: WorkSpacesRootStorage
    UserStorage: WorkSpacesUserStorage
    ComputeType: WorkSpacesComputeType


class WorkSpacesRootStorage(TypedDict, total=False):
    Capacity: str


class WorkSpacesUserStorage(TypedDict, total=False):
    Capacity: str


class WorkSpacesComputeType(TypedDict, total=False):
    Name: str


class WorkSpacesDescribeWorkspaceDirectoriesResult(TypedDict, total=False):
    Directories: List[WorkSpacesWorkspaceDirectory]
    NextToken: str


class WorkSpacesWorkspaceDirectory(TypedDict, total=False):
    DirectoryId: str
    Alias: str
    DirectoryName: str
    RegistrationCode: str
    SubnetIds: List[str]
    DnsIpAddresses: List[str]
    CustomerUserName: str
    IamRoleId: str
    DirectoryType: str
    WorkspaceSecurityGroupId: str
    State: str
    WorkspaceCreationProperties: WorkSpacesDefaultWorkspaceCreationProperties
    ipGroupIds: List[str]


class WorkSpacesDefaultWorkspaceCreationProperties(TypedDict, total=False):
    EnableWorkDocs: bool
    EnableInternetAccess: bool
    DefaultOu: str
    CustomSecurityGroupId: str
    UserEnabledAsLocalAdministrator: bool


class WorkSpacesDescribeWorkspaceImagesResult(TypedDict, total=False):
    Images: List[WorkSpacesWorkspaceImage]
    NextToken: str


class WorkSpacesWorkspaceImage(TypedDict, total=False):
    ImageId: str
    Name: str
    Description: str
    OperatingSystem: WorkSpacesOperatingSystem
    State: str
    RequiredTenancy: str
    ErrorCode: str
    ErrorMessage: str


class WorkSpacesOperatingSystem(TypedDict, total=False):
    Type: str


class WorkSpacesDescribeWorkspacesResult(TypedDict, total=False):
    Workspaces: List[WorkSpacesWorkspace]
    NextToken: str


class WorkSpacesDescribeWorkspacesConnectionStatusResult(TypedDict, total=False):
    WorkspacesConnectionStatus: List[WorkSpacesWorkspaceConnectionStatus]
    NextToken: str


class WorkSpacesWorkspaceConnectionStatus(TypedDict, total=False):
    WorkspaceId: str
    ConnectionState: str
    ConnectionStateCheckTimestamp: datetime.datetime
    LastKnownUserConnectionTimestamp: datetime.datetime


class WorkSpacesDisassociateIpGroupsResult(TypedDict, total=False):
    pass


class WorkSpacesImportWorkspaceImageResult(TypedDict, total=False):
    ImageId: str


class WorkSpacesListAvailableManagementCidrRangesResult(TypedDict, total=False):
    ManagementCidrRanges: List[str]
    NextToken: str


class WorkSpacesModifyAccountResult(TypedDict, total=False):
    pass


class WorkSpacesModifyClientPropertiesResult(TypedDict, total=False):
    pass


class WorkSpacesModifyWorkspacePropertiesResult(TypedDict, total=False):
    pass


class WorkSpacesModifyWorkspaceStateResult(TypedDict, total=False):
    pass


class WorkSpacesRebootRequest(TypedDict):
    WorkspaceId: str


class WorkSpacesRebootWorkspacesResult(TypedDict, total=False):
    FailedRequests: List[WorkSpacesFailedWorkspaceChangeRequest]


class WorkSpacesFailedWorkspaceChangeRequest(TypedDict, total=False):
    WorkspaceId: str
    ErrorCode: str
    ErrorMessage: str


class WorkSpacesRebuildRequest(TypedDict):
    WorkspaceId: str


class WorkSpacesRebuildWorkspacesResult(TypedDict, total=False):
    FailedRequests: List[WorkSpacesFailedWorkspaceChangeRequest]


class WorkSpacesRevokeIpRulesResult(TypedDict, total=False):
    pass


class WorkSpacesStartRequest(TypedDict, total=False):
    WorkspaceId: str


class WorkSpacesStartWorkspacesResult(TypedDict, total=False):
    FailedRequests: List[WorkSpacesFailedWorkspaceChangeRequest]


class WorkSpacesStopRequest(TypedDict, total=False):
    WorkspaceId: str


class WorkSpacesStopWorkspacesResult(TypedDict, total=False):
    FailedRequests: List[WorkSpacesFailedWorkspaceChangeRequest]


class WorkSpacesTerminateRequest(TypedDict):
    WorkspaceId: str


class WorkSpacesTerminateWorkspacesResult(TypedDict, total=False):
    FailedRequests: List[WorkSpacesFailedWorkspaceChangeRequest]


class WorkSpacesUpdateRulesOfIpGroupResult(TypedDict, total=False):
    pass


class XRay(BaseClient):
    def batch_get_traces(self, *,
        TraceIds: List[str],
        NextToken: str = ...
    ) -> XRayBatchGetTracesResult: ...

    def create_group(self, *,
        GroupName: str,
        FilterExpression: str = ...
    ) -> XRayCreateGroupResult: ...

    def create_sampling_rule(self, *,
        SamplingRule: XRaySamplingRule
    ) -> XRayCreateSamplingRuleResult: ...

    def delete_group(self, *,
        GroupName: str = ...,
        GroupARN: str = ...
    ) -> XRayDeleteGroupResult: ...

    def delete_sampling_rule(self, *,
        RuleName: str = ...,
        RuleARN: str = ...
    ) -> XRayDeleteSamplingRuleResult: ...

    def get_encryption_config(self) -> XRayGetEncryptionConfigResult: ...

    def get_group(self, *,
        GroupName: str = ...,
        GroupARN: str = ...
    ) -> XRayGetGroupResult: ...

    def get_groups(self, *,
        NextToken: str = ...
    ) -> XRayGetGroupsResult: ...

    def get_sampling_rules(self, *,
        NextToken: str = ...
    ) -> XRayGetSamplingRulesResult: ...

    def get_sampling_statistic_summaries(self, *,
        NextToken: str = ...
    ) -> XRayGetSamplingStatisticSummariesResult: ...

    def get_sampling_targets(self, *,
        SamplingStatisticsDocuments: List[XRaySamplingStatisticsDocument]
    ) -> XRayGetSamplingTargetsResult: ...

    def get_service_graph(self, *,
        StartTime: datetime.datetime,
        EndTime: datetime.datetime,
        GroupName: str = ...,
        GroupARN: str = ...,
        NextToken: str = ...
    ) -> XRayGetServiceGraphResult: ...

    def get_time_series_service_statistics(self, *,
        StartTime: datetime.datetime,
        EndTime: datetime.datetime,
        GroupName: str = ...,
        GroupARN: str = ...,
        EntitySelectorExpression: str = ...,
        Period: int = ...,
        NextToken: str = ...
    ) -> XRayGetTimeSeriesServiceStatisticsResult: ...

    def get_trace_graph(self, *,
        TraceIds: List[str],
        NextToken: str = ...
    ) -> XRayGetTraceGraphResult: ...

    def get_trace_summaries(self, *,
        StartTime: datetime.datetime,
        EndTime: datetime.datetime,
        TimeRangeType: str = ...,
        Sampling: bool = ...,
        SamplingStrategy: XRaySamplingStrategy = ...,
        FilterExpression: str = ...,
        NextToken: str = ...
    ) -> XRayGetTraceSummariesResult: ...

    def put_encryption_config(self, *,
        Type: str,
        KeyId: str = ...
    ) -> XRayPutEncryptionConfigResult: ...

    def put_telemetry_records(self, *,
        TelemetryRecords: List[XRayTelemetryRecord],
        EC2InstanceId: str = ...,
        Hostname: str = ...,
        ResourceARN: str = ...
    ) -> XRayPutTelemetryRecordsResult: ...

    def put_trace_segments(self, *,
        TraceSegmentDocuments: List[str]
    ) -> XRayPutTraceSegmentsResult: ...

    def update_group(self, *,
        GroupName: str = ...,
        GroupARN: str = ...,
        FilterExpression: str = ...
    ) -> XRayUpdateGroupResult: ...

    def update_sampling_rule(self, *,
        SamplingRuleUpdate: XRaySamplingRuleUpdate
    ) -> XRayUpdateSamplingRuleResult: ...


class XRayBatchGetTracesResult(TypedDict, total=False):
    Traces: List[XRayTrace]
    UnprocessedTraceIds: List[str]
    NextToken: str


class XRayTrace(TypedDict, total=False):
    Id: str
    Duration: float
    Segments: List[XRaySegment]


class XRaySegment(TypedDict, total=False):
    Id: str
    Document: str


class XRayCreateGroupResult(TypedDict, total=False):
    Group: XRayGroup


class XRayGroup(TypedDict, total=False):
    GroupName: str
    GroupARN: str
    FilterExpression: str


class _XRaySamplingRule(TypedDict):
    ResourceARN: str
    Priority: int
    FixedRate: float
    ReservoirSize: int
    ServiceName: str
    ServiceType: str
    Host: str
    HTTPMethod: str
    URLPath: str
    Version: int


class XRaySamplingRule(_XRaySamplingRule, total=False):
    RuleName: str
    RuleARN: str
    Attributes: Dict[str, str]


class XRayCreateSamplingRuleResult(TypedDict, total=False):
    SamplingRuleRecord: XRaySamplingRuleRecord


class XRaySamplingRuleRecord(TypedDict, total=False):
    SamplingRule: XRaySamplingRule
    CreatedAt: datetime.datetime
    ModifiedAt: datetime.datetime


class XRayDeleteGroupResult(TypedDict, total=False):
    pass


class XRayDeleteSamplingRuleResult(TypedDict, total=False):
    SamplingRuleRecord: XRaySamplingRuleRecord


class XRayGetEncryptionConfigResult(TypedDict, total=False):
    EncryptionConfig: XRayEncryptionConfig


class XRayEncryptionConfig(TypedDict, total=False):
    KeyId: str
    Status: str
    Type: str


class XRayGetGroupResult(TypedDict, total=False):
    Group: XRayGroup


class XRayGetGroupsResult(TypedDict, total=False):
    Groups: List[XRayGroupSummary]
    NextToken: str


class XRayGroupSummary(TypedDict, total=False):
    GroupName: str
    GroupARN: str
    FilterExpression: str


class XRayGetSamplingRulesResult(TypedDict, total=False):
    SamplingRuleRecords: List[XRaySamplingRuleRecord]
    NextToken: str


class XRayGetSamplingStatisticSummariesResult(TypedDict, total=False):
    SamplingStatisticSummaries: List[XRaySamplingStatisticSummary]
    NextToken: str


class XRaySamplingStatisticSummary(TypedDict, total=False):
    RuleName: str
    Timestamp: datetime.datetime
    RequestCount: int
    BorrowCount: int
    SampledCount: int


class _XRaySamplingStatisticsDocument(TypedDict):
    RuleName: str
    ClientID: str
    Timestamp: datetime.datetime
    RequestCount: int
    SampledCount: int


class XRaySamplingStatisticsDocument(_XRaySamplingStatisticsDocument, total=False):
    BorrowCount: int


class XRayGetSamplingTargetsResult(TypedDict, total=False):
    SamplingTargetDocuments: List[XRaySamplingTargetDocument]
    LastRuleModification: datetime.datetime
    UnprocessedStatistics: List[XRayUnprocessedStatistics]


class XRaySamplingTargetDocument(TypedDict, total=False):
    RuleName: str
    FixedRate: float
    ReservoirQuota: int
    ReservoirQuotaTTL: datetime.datetime
    Interval: int


class XRayUnprocessedStatistics(TypedDict, total=False):
    RuleName: str
    ErrorCode: str
    Message: str


class XRayGetServiceGraphResult(TypedDict, total=False):
    StartTime: datetime.datetime
    EndTime: datetime.datetime
    Services: List[XRayService]
    ContainsOldGroupVersions: bool
    NextToken: str


class XRayService(TypedDict, total=False):
    ReferenceId: int
    Name: str
    Names: List[str]
    Root: bool
    AccountId: str
    Type: str
    State: str
    StartTime: datetime.datetime
    EndTime: datetime.datetime
    Edges: List[XRayEdge]
    SummaryStatistics: XRayServiceStatistics
    DurationHistogram: List[XRayHistogramEntry]
    ResponseTimeHistogram: List[XRayHistogramEntry]


class XRayEdge(TypedDict, total=False):
    ReferenceId: int
    StartTime: datetime.datetime
    EndTime: datetime.datetime
    SummaryStatistics: XRayEdgeStatistics
    ResponseTimeHistogram: List[XRayHistogramEntry]
    Aliases: List[XRayAlias]


class XRayEdgeStatistics(TypedDict, total=False):
    OkCount: int
    ErrorStatistics: XRayErrorStatistics
    FaultStatistics: XRayFaultStatistics
    TotalCount: int
    TotalResponseTime: float


class XRayErrorStatistics(TypedDict, total=False):
    ThrottleCount: int
    OtherCount: int
    TotalCount: int


class XRayFaultStatistics(TypedDict, total=False):
    OtherCount: int
    TotalCount: int


class XRayHistogramEntry(TypedDict, total=False):
    Value: float
    Count: int


class XRayAlias(TypedDict, total=False):
    Name: str
    Names: List[str]
    Type: str


class XRayServiceStatistics(TypedDict, total=False):
    OkCount: int
    ErrorStatistics: XRayErrorStatistics
    FaultStatistics: XRayFaultStatistics
    TotalCount: int
    TotalResponseTime: float


class XRayGetTimeSeriesServiceStatisticsResult(TypedDict, total=False):
    TimeSeriesServiceStatistics: List[XRayTimeSeriesServiceStatistics]
    ContainsOldGroupVersions: bool
    NextToken: str


class XRayTimeSeriesServiceStatistics(TypedDict, total=False):
    Timestamp: datetime.datetime
    EdgeSummaryStatistics: XRayEdgeStatistics
    ServiceSummaryStatistics: XRayServiceStatistics
    ResponseTimeHistogram: List[XRayHistogramEntry]


class XRayGetTraceGraphResult(TypedDict, total=False):
    Services: List[XRayService]
    NextToken: str


class XRaySamplingStrategy(TypedDict, total=False):
    Name: str
    Value: float


class XRayGetTraceSummariesResult(TypedDict, total=False):
    TraceSummaries: List[XRayTraceSummary]
    ApproximateTime: datetime.datetime
    TracesProcessedCount: int
    NextToken: str


class XRayTraceSummary(TypedDict, total=False):
    Id: str
    Duration: float
    ResponseTime: float
    HasFault: bool
    HasError: bool
    HasThrottle: bool
    IsPartial: bool
    Http: XRayHttp
    Annotations: Dict[str, List[XRayValueWithServiceIds]]
    Users: List[XRayTraceUser]
    ServiceIds: List[XRayServiceId]
    ResourceARNs: List[XRayResourceARNDetail]
    InstanceIds: List[XRayInstanceIdDetail]
    AvailabilityZones: List[XRayAvailabilityZoneDetail]
    EntryPoint: XRayServiceId
    FaultRootCauses: List[XRayFaultRootCause]
    ErrorRootCauses: List[XRayErrorRootCause]
    ResponseTimeRootCauses: List[XRayResponseTimeRootCause]
    Revision: int
    MatchedEventTime: datetime.datetime


class XRayHttp(TypedDict, total=False):
    HttpURL: str
    HttpStatus: int
    HttpMethod: str
    UserAgent: str
    ClientIp: str


class XRayValueWithServiceIds(TypedDict, total=False):
    AnnotationValue: XRayAnnotationValue
    ServiceIds: List[XRayServiceId]


class XRayAnnotationValue(TypedDict, total=False):
    NumberValue: float
    BooleanValue: bool
    StringValue: str


class XRayServiceId(TypedDict, total=False):
    Name: str
    Names: List[str]
    AccountId: str
    Type: str


class XRayTraceUser(TypedDict, total=False):
    UserName: str
    ServiceIds: List[XRayServiceId]


class XRayResourceARNDetail(TypedDict, total=False):
    ARN: str


class XRayInstanceIdDetail(TypedDict, total=False):
    Id: str


class XRayAvailabilityZoneDetail(TypedDict, total=False):
    Name: str


class XRayFaultRootCause(TypedDict, total=False):
    Services: List[XRayFaultRootCauseService]


class XRayFaultRootCauseService(TypedDict, total=False):
    Name: str
    Names: List[str]
    Type: str
    AccountId: str
    EntityPath: List[XRayFaultRootCauseEntity]
    Inferred: bool


class XRayFaultRootCauseEntity(TypedDict, total=False):
    Name: str
    Exceptions: List[XRayRootCauseException]
    Remote: bool


class XRayRootCauseException(TypedDict, total=False):
    Name: str
    Message: str


class XRayErrorRootCause(TypedDict, total=False):
    Services: List[XRayErrorRootCauseService]


class XRayErrorRootCauseService(TypedDict, total=False):
    Name: str
    Names: List[str]
    Type: str
    AccountId: str
    EntityPath: List[XRayErrorRootCauseEntity]
    Inferred: bool


class XRayErrorRootCauseEntity(TypedDict, total=False):
    Name: str
    Exceptions: List[XRayRootCauseException]
    Remote: bool


class XRayResponseTimeRootCause(TypedDict, total=False):
    Services: List[XRayResponseTimeRootCauseService]


class XRayResponseTimeRootCauseService(TypedDict, total=False):
    Name: str
    Names: List[str]
    Type: str
    AccountId: str
    EntityPath: List[XRayResponseTimeRootCauseEntity]
    Inferred: bool


class XRayResponseTimeRootCauseEntity(TypedDict, total=False):
    Name: str
    Coverage: float
    Remote: bool


class XRayPutEncryptionConfigResult(TypedDict, total=False):
    EncryptionConfig: XRayEncryptionConfig


class _XRayTelemetryRecord(TypedDict):
    Timestamp: datetime.datetime


class XRayTelemetryRecord(_XRayTelemetryRecord, total=False):
    SegmentsReceivedCount: int
    SegmentsSentCount: int
    SegmentsSpilloverCount: int
    SegmentsRejectedCount: int
    BackendConnectionErrors: XRayBackendConnectionErrors


class XRayBackendConnectionErrors(TypedDict, total=False):
    TimeoutCount: int
    ConnectionRefusedCount: int
    HTTPCode4XXCount: int
    HTTPCode5XXCount: int
    UnknownHostCount: int
    OtherCount: int


class XRayPutTelemetryRecordsResult(TypedDict, total=False):
    pass


class XRayPutTraceSegmentsResult(TypedDict, total=False):
    UnprocessedTraceSegments: List[XRayUnprocessedTraceSegment]


class XRayUnprocessedTraceSegment(TypedDict, total=False):
    Id: str
    ErrorCode: str
    Message: str


class XRayUpdateGroupResult(TypedDict, total=False):
    Group: XRayGroup


class XRaySamplingRuleUpdate(TypedDict, total=False):
    RuleName: str
    RuleARN: str
    ResourceARN: str
    Priority: int
    FixedRate: float
    ReservoirSize: int
    Host: str
    ServiceName: str
    ServiceType: str
    HTTPMethod: str
    URLPath: str
    Attributes: Dict[str, str]


class XRayUpdateSamplingRuleResult(TypedDict, total=False):
    SamplingRuleRecord: XRaySamplingRuleRecord


